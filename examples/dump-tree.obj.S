
dump-tree:     file format elf64-littleriscv


Disassembly of section .plt:

00000000000162c0 <_PROCEDURE_LINKAGE_TABLE_>:
   162c0:	97 33 02 00 33 03 c3 41 03 be 83 d5 13 03 43 fd     .3..3..A......C.
   162d0:	93 82 83 d5 13 53 13 00 83 b2 82 00 67 00 0e 00     .....S......g...

00000000000162e0 <operator new[](unsigned long)@plt>:
   162e0:	00023e17          	auipc	t3,0x23
   162e4:	d48e3e03          	ld	t3,-696(t3) # 39028 <operator new[](unsigned long)@GLIBCXX_3.4>
   162e8:	000e0367          	jalr	t1,0(t3)
   162ec:	00000013          	addi	zero,zero,0

00000000000162f0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>:
   162f0:	00023e17          	auipc	t3,0x23
   162f4:	d40e3e03          	ld	t3,-704(t3) # 39030 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4>
   162f8:	000e0367          	jalr	t1,0(t3)
   162fc:	00000013          	addi	zero,zero,0

0000000000016300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>:
   16300:	00023e17          	auipc	t3,0x23
   16304:	d38e3e03          	ld	t3,-712(t3) # 39038 <__gnu_cxx::__atomic_add(int volatile*, int)@GLIBCXX_3.4>
   16308:	000e0367          	jalr	t1,0(t3)
   1630c:	00000013          	addi	zero,zero,0

0000000000016310 <strcmp@plt>:
   16310:	00023e17          	auipc	t3,0x23
   16314:	d30e3e03          	ld	t3,-720(t3) # 39040 <strcmp@GLIBC_2.27>
   16318:	000e0367          	jalr	t1,0(t3)
   1631c:	00000013          	addi	zero,zero,0

0000000000016320 <__bswapsi2@plt>:
   16320:	00023e17          	auipc	t3,0x23
   16324:	d28e3e03          	ld	t3,-728(t3) # 39048 <__bswapsi2@GCC_4.3.0>
   16328:	000e0367          	jalr	t1,0(t3)
   1632c:	00000013          	addi	zero,zero,0

0000000000016330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>:
   16330:	00023e17          	auipc	t3,0x23
   16334:	d20e3e03          	ld	t3,-736(t3) # 39050 <__gnu_cxx::__exchange_and_add(int volatile*, int)@GLIBCXX_3.4>
   16338:	000e0367          	jalr	t1,0(t3)
   1633c:	00000013          	addi	zero,zero,0

0000000000016340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>:
   16340:	00023e17          	auipc	t3,0x23
   16344:	d18e3e03          	ld	t3,-744(t3) # 39058 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@GLIBCXX_3.4.21>
   16348:	000e0367          	jalr	t1,0(t3)
   1634c:	00000013          	addi	zero,zero,0

0000000000016350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
   16350:	00023e17          	auipc	t3,0x23
   16354:	d10e3e03          	ld	t3,-752(t3) # 39060 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
   16358:	000e0367          	jalr	t1,0(t3)
   1635c:	00000013          	addi	zero,zero,0

0000000000016360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>:
   16360:	00023e17          	auipc	t3,0x23
   16364:	d08e3e03          	ld	t3,-760(t3) # 39068 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@GLIBCXX_3.4.21>
   16368:	000e0367          	jalr	t1,0(t3)
   1636c:	00000013          	addi	zero,zero,0

0000000000016370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>:
   16370:	00023e17          	auipc	t3,0x23
   16374:	d00e3e03          	ld	t3,-768(t3) # 39070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@GLIBCXX_3.4.21>
   16378:	000e0367          	jalr	t1,0(t3)
   1637c:	00000013          	addi	zero,zero,0

0000000000016380 <__libc_start_main@plt>:
   16380:	00023e17          	auipc	t3,0x23
   16384:	cf8e3e03          	ld	t3,-776(t3) # 39078 <__libc_start_main@GLIBC_2.27>
   16388:	000e0367          	jalr	t1,0(t3)
   1638c:	00000013          	addi	zero,zero,0

0000000000016390 <std::__throw_bad_alloc()@plt>:
   16390:	00023e17          	auipc	t3,0x23
   16394:	cf0e3e03          	ld	t3,-784(t3) # 39080 <std::__throw_bad_alloc()@GLIBCXX_3.4>
   16398:	000e0367          	jalr	t1,0(t3)
   1639c:	00000013          	addi	zero,zero,0

00000000000163a0 <std::runtime_error::runtime_error(char const*)@plt>:
   163a0:	00023e17          	auipc	t3,0x23
   163a4:	ce8e3e03          	ld	t3,-792(t3) # 39088 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   163a8:	000e0367          	jalr	t1,0(t3)
   163ac:	00000013          	addi	zero,zero,0

00000000000163b0 <__cxa_begin_catch@plt>:
   163b0:	00023e17          	auipc	t3,0x23
   163b4:	ce0e3e03          	ld	t3,-800(t3) # 39090 <__cxa_begin_catch@CXXABI_1.3>
   163b8:	000e0367          	jalr	t1,0(t3)
   163bc:	00000013          	addi	zero,zero,0

00000000000163c0 <strlen@plt>:
   163c0:	00023e17          	auipc	t3,0x23
   163c4:	cd8e3e03          	ld	t3,-808(t3) # 39098 <strlen@GLIBC_2.27>
   163c8:	000e0367          	jalr	t1,0(t3)
   163cc:	00000013          	addi	zero,zero,0

00000000000163d0 <__cxa_allocate_exception@plt>:
   163d0:	00023e17          	auipc	t3,0x23
   163d4:	cd0e3e03          	ld	t3,-816(t3) # 390a0 <__cxa_allocate_exception@CXXABI_1.3>
   163d8:	000e0367          	jalr	t1,0(t3)
   163dc:	00000013          	addi	zero,zero,0

00000000000163e0 <std::__throw_length_error(char const*)@plt>:
   163e0:	00023e17          	auipc	t3,0x23
   163e4:	cc8e3e03          	ld	t3,-824(t3) # 390a8 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
   163e8:	000e0367          	jalr	t1,0(t3)
   163ec:	00000013          	addi	zero,zero,0

00000000000163f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   163f0:	00023e17          	auipc	t3,0x23
   163f4:	cc0e3e03          	ld	t3,-832(t3) # 390b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   163f8:	000e0367          	jalr	t1,0(t3)
   163fc:	00000013          	addi	zero,zero,0

0000000000016400 <std::_V2::system_category()@plt>:
   16400:	00023e17          	auipc	t3,0x23
   16404:	cb8e3e03          	ld	t3,-840(t3) # 390b8 <std::_V2::system_category()@GLIBCXX_3.4.21>
   16408:	000e0367          	jalr	t1,0(t3)
   1640c:	00000013          	addi	zero,zero,0

0000000000016410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
   16410:	00023e17          	auipc	t3,0x23
   16414:	cb0e3e03          	ld	t3,-848(t3) # 390c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
   16418:	000e0367          	jalr	t1,0(t3)
   1641c:	00000013          	addi	zero,zero,0

0000000000016420 <open@plt>:
   16420:	00023e17          	auipc	t3,0x23
   16424:	ca8e3e03          	ld	t3,-856(t3) # 390c8 <open@GLIBC_2.27>
   16428:	000e0367          	jalr	t1,0(t3)
   1642c:	00000013          	addi	zero,zero,0

0000000000016430 <__cxa_guard_release@plt>:
   16430:	00023e17          	auipc	t3,0x23
   16434:	ca0e3e03          	ld	t3,-864(t3) # 390d0 <__cxa_guard_release@CXXABI_1.3>
   16438:	000e0367          	jalr	t1,0(t3)
   1643c:	00000013          	addi	zero,zero,0

0000000000016440 <mmap@plt>:
   16440:	00023e17          	auipc	t3,0x23
   16444:	c98e3e03          	ld	t3,-872(t3) # 390d8 <mmap@GLIBC_2.27>
   16448:	000e0367          	jalr	t1,0(t3)
   1644c:	00000013          	addi	zero,zero,0

0000000000016450 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>:
   16450:	00023e17          	auipc	t3,0x23
   16454:	c90e3e03          	ld	t3,-880(t3) # 390e0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   16458:	000e0367          	jalr	t1,0(t3)
   1645c:	00000013          	addi	zero,zero,0

0000000000016460 <std::__throw_logic_error(char const*)@plt>:
   16460:	00023e17          	auipc	t3,0x23
   16464:	c88e3e03          	ld	t3,-888(t3) # 390e8 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
   16468:	000e0367          	jalr	t1,0(t3)
   1646c:	00000013          	addi	zero,zero,0

0000000000016470 <__cxa_free_exception@plt>:
   16470:	00023e17          	auipc	t3,0x23
   16474:	c80e3e03          	ld	t3,-896(t3) # 390f0 <__cxa_free_exception@CXXABI_1.3>
   16478:	000e0367          	jalr	t1,0(t3)
   1647c:	00000013          	addi	zero,zero,0

0000000000016480 <munmap@plt>:
   16480:	00023e17          	auipc	t3,0x23
   16484:	c78e3e03          	ld	t3,-904(t3) # 390f8 <munmap@GLIBC_2.27>
   16488:	000e0367          	jalr	t1,0(t3)
   1648c:	00000013          	addi	zero,zero,0

0000000000016490 <std::__throw_bad_array_new_length()@plt>:
   16490:	00023e17          	auipc	t3,0x23
   16494:	c70e3e03          	ld	t3,-912(t3) # 39100 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
   16498:	000e0367          	jalr	t1,0(t3)
   1649c:	00000013          	addi	zero,zero,0

00000000000164a0 <__assert_fail@plt>:
   164a0:	00023e17          	auipc	t3,0x23
   164a4:	c68e3e03          	ld	t3,-920(t3) # 39108 <__assert_fail@GLIBC_2.27>
   164a8:	000e0367          	jalr	t1,0(t3)
   164ac:	00000013          	addi	zero,zero,0

00000000000164b0 <operator delete(void*)@plt>:
   164b0:	00023e17          	auipc	t3,0x23
   164b4:	c60e3e03          	ld	t3,-928(t3) # 39110 <operator delete(void*)@GLIBCXX_3.4>
   164b8:	000e0367          	jalr	t1,0(t3)
   164bc:	00000013          	addi	zero,zero,0

00000000000164c0 <operator new(unsigned long)@plt>:
   164c0:	00023e17          	auipc	t3,0x23
   164c4:	c58e3e03          	ld	t3,-936(t3) # 39118 <operator new(unsigned long)@GLIBCXX_3.4>
   164c8:	000e0367          	jalr	t1,0(t3)
   164cc:	00000013          	addi	zero,zero,0

00000000000164d0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>:
   164d0:	00023e17          	auipc	t3,0x23
   164d4:	c50e3e03          	ld	t3,-944(t3) # 39120 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   164d8:	000e0367          	jalr	t1,0(t3)
   164dc:	00000013          	addi	zero,zero,0

00000000000164e0 <std::runtime_error::~runtime_error()@plt>:
   164e0:	00023e17          	auipc	t3,0x23
   164e4:	c48e3e03          	ld	t3,-952(t3) # 39128 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   164e8:	000e0367          	jalr	t1,0(t3)
   164ec:	00000013          	addi	zero,zero,0

00000000000164f0 <__bswapdi2@plt>:
   164f0:	00023e17          	auipc	t3,0x23
   164f4:	c40e3e03          	ld	t3,-960(t3) # 39130 <__bswapdi2@GCC_4.3.0>
   164f8:	000e0367          	jalr	t1,0(t3)
   164fc:	00000013          	addi	zero,zero,0

0000000000016500 <__dynamic_cast@plt>:
   16500:	00023e17          	auipc	t3,0x23
   16504:	c38e3e03          	ld	t3,-968(t3) # 39138 <__dynamic_cast@CXXABI_1.3>
   16508:	000e0367          	jalr	t1,0(t3)
   1650c:	00000013          	addi	zero,zero,0

0000000000016510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
   16510:	00023e17          	auipc	t3,0x23
   16514:	c30e3e03          	ld	t3,-976(t3) # 39140 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
   16518:	000e0367          	jalr	t1,0(t3)
   1651c:	00000013          	addi	zero,zero,0

0000000000016520 <std::logic_error::logic_error(char const*)@plt>:
   16520:	00023e17          	auipc	t3,0x23
   16524:	c28e3e03          	ld	t3,-984(t3) # 39148 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16528:	000e0367          	jalr	t1,0(t3)
   1652c:	00000013          	addi	zero,zero,0

0000000000016530 <strerror@plt>:
   16530:	00023e17          	auipc	t3,0x23
   16534:	c20e3e03          	ld	t3,-992(t3) # 39150 <strerror@GLIBC_2.27>
   16538:	000e0367          	jalr	t1,0(t3)
   1653c:	00000013          	addi	zero,zero,0

0000000000016540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16540:	00023e17          	auipc	t3,0x23
   16544:	c18e3e03          	ld	t3,-1000(t3) # 39158 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16548:	000e0367          	jalr	t1,0(t3)
   1654c:	00000013          	addi	zero,zero,0

0000000000016550 <memcpy@plt>:
   16550:	00023e17          	auipc	t3,0x23
   16554:	c10e3e03          	ld	t3,-1008(t3) # 39160 <memcpy@GLIBC_2.27>
   16558:	000e0367          	jalr	t1,0(t3)
   1655c:	00000013          	addi	zero,zero,0

0000000000016560 <operator delete[](void*)@plt>:
   16560:	00023e17          	auipc	t3,0x23
   16564:	c08e3e03          	ld	t3,-1016(t3) # 39168 <operator delete[](void*)@GLIBCXX_3.4>
   16568:	000e0367          	jalr	t1,0(t3)
   1656c:	00000013          	addi	zero,zero,0

0000000000016570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
   16570:	00023e17          	auipc	t3,0x23
   16574:	c00e3e03          	ld	t3,-1024(t3) # 39170 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
   16578:	000e0367          	jalr	t1,0(t3)
   1657c:	00000013          	addi	zero,zero,0

0000000000016580 <memset@plt>:
   16580:	00023e17          	auipc	t3,0x23
   16584:	bf8e3e03          	ld	t3,-1032(t3) # 39178 <memset@GLIBC_2.27>
   16588:	000e0367          	jalr	t1,0(t3)
   1658c:	00000013          	addi	zero,zero,0

0000000000016590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
   16590:	00023e17          	auipc	t3,0x23
   16594:	bf0e3e03          	ld	t3,-1040(t3) # 39180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@GLIBCXX_3.4.21>
   16598:	000e0367          	jalr	t1,0(t3)
   1659c:	00000013          	addi	zero,zero,0

00000000000165a0 <std::runtime_error::what() const@plt>:
   165a0:	00023e17          	auipc	t3,0x23
   165a4:	be8e3e03          	ld	t3,-1048(t3) # 39188 <std::runtime_error::what() const@GLIBCXX_3.4>
   165a8:	000e0367          	jalr	t1,0(t3)
   165ac:	00000013          	addi	zero,zero,0

00000000000165b0 <std::logic_error::logic_error(char const*)@plt>:
   165b0:	00023e17          	auipc	t3,0x23
   165b4:	be0e3e03          	ld	t3,-1056(t3) # 39190 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   165b8:	000e0367          	jalr	t1,0(t3)
   165bc:	00000013          	addi	zero,zero,0

00000000000165c0 <__cxa_rethrow@plt>:
   165c0:	00023e17          	auipc	t3,0x23
   165c4:	bd8e3e03          	ld	t3,-1064(t3) # 39198 <__cxa_rethrow@CXXABI_1.3>
   165c8:	000e0367          	jalr	t1,0(t3)
   165cc:	00000013          	addi	zero,zero,0

00000000000165d0 <std::logic_error::what() const@plt>:
   165d0:	00023e17          	auipc	t3,0x23
   165d4:	bd0e3e03          	ld	t3,-1072(t3) # 391a0 <std::logic_error::what() const@GLIBCXX_3.4>
   165d8:	000e0367          	jalr	t1,0(t3)
   165dc:	00000013          	addi	zero,zero,0

00000000000165e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
   165e0:	00023e17          	auipc	t3,0x23
   165e4:	bc8e3e03          	ld	t3,-1080(t3) # 391a8 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
   165e8:	000e0367          	jalr	t1,0(t3)
   165ec:	00000013          	addi	zero,zero,0

00000000000165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   165f0:	00023e17          	auipc	t3,0x23
   165f4:	bc0e3e03          	ld	t3,-1088(t3) # 391b0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   165f8:	000e0367          	jalr	t1,0(t3)
   165fc:	00000013          	addi	zero,zero,0

0000000000016600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16600:	00023e17          	auipc	t3,0x23
   16604:	bb8e3e03          	ld	t3,-1096(t3) # 391b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16608:	000e0367          	jalr	t1,0(t3)
   1660c:	00000013          	addi	zero,zero,0

0000000000016610 <lseek@plt>:
   16610:	00023e17          	auipc	t3,0x23
   16614:	bb0e3e03          	ld	t3,-1104(t3) # 391c0 <lseek@GLIBC_2.27>
   16618:	000e0367          	jalr	t1,0(t3)
   1661c:	00000013          	addi	zero,zero,0

0000000000016620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16620:	00023e17          	auipc	t3,0x23
   16624:	ba8e3e03          	ld	t3,-1112(t3) # 391c8 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16628:	000e0367          	jalr	t1,0(t3)
   1662c:	00000013          	addi	zero,zero,0

0000000000016630 <__cxa_end_catch@plt>:
   16630:	00023e17          	auipc	t3,0x23
   16634:	ba0e3e03          	ld	t3,-1120(t3) # 391d0 <__cxa_end_catch@CXXABI_1.3>
   16638:	000e0367          	jalr	t1,0(t3)
   1663c:	00000013          	addi	zero,zero,0

0000000000016640 <__gxx_personality_v0@plt>:
   16640:	00023e17          	auipc	t3,0x23
   16644:	b98e3e03          	ld	t3,-1128(t3) # 391d8 <__gxx_personality_v0@CXXABI_1.3>
   16648:	000e0367          	jalr	t1,0(t3)
   1664c:	00000013          	addi	zero,zero,0

0000000000016650 <strncmp@plt>:
   16650:	00023e17          	auipc	t3,0x23
   16654:	b90e3e03          	ld	t3,-1136(t3) # 391e0 <strncmp@GLIBC_2.27>
   16658:	000e0367          	jalr	t1,0(t3)
   1665c:	00000013          	addi	zero,zero,0

0000000000016660 <__cxa_throw@plt>:
   16660:	00023e17          	auipc	t3,0x23
   16664:	b88e3e03          	ld	t3,-1144(t3) # 391e8 <__cxa_throw@CXXABI_1.3>
   16668:	000e0367          	jalr	t1,0(t3)
   1666c:	00000013          	addi	zero,zero,0

0000000000016670 <std::range_error::range_error(char const*)@plt>:
   16670:	00023e17          	auipc	t3,0x23
   16674:	b80e3e03          	ld	t3,-1152(t3) # 391f0 <std::range_error::range_error(char const*)@GLIBCXX_3.4.21>
   16678:	000e0367          	jalr	t1,0(t3)
   1667c:	00000013          	addi	zero,zero,0

0000000000016680 <fprintf@plt>:
   16680:	00023e17          	auipc	t3,0x23
   16684:	b78e3e03          	ld	t3,-1160(t3) # 391f8 <fprintf@GLIBC_2.27>
   16688:	000e0367          	jalr	t1,0(t3)
   1668c:	00000013          	addi	zero,zero,0

0000000000016690 <_Unwind_Resume@plt>:
   16690:	00023e17          	auipc	t3,0x23
   16694:	b70e3e03          	ld	t3,-1168(t3) # 39200 <_Unwind_Resume@GCC_3.0>
   16698:	000e0367          	jalr	t1,0(t3)
   1669c:	00000013          	addi	zero,zero,0

00000000000166a0 <std::logic_error::~logic_error()@plt>:
   166a0:	00023e17          	auipc	t3,0x23
   166a4:	b68e3e03          	ld	t3,-1176(t3) # 39208 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   166a8:	000e0367          	jalr	t1,0(t3)
   166ac:	00000013          	addi	zero,zero,0

00000000000166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
   166b0:	00023e17          	auipc	t3,0x23
   166b4:	b60e3e03          	ld	t3,-1184(t3) # 39210 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
   166b8:	000e0367          	jalr	t1,0(t3)
   166bc:	00000013          	addi	zero,zero,0

00000000000166c0 <__cxa_atexit@plt>:
   166c0:	00023e17          	auipc	t3,0x23
   166c4:	b58e3e03          	ld	t3,-1192(t3) # 39218 <__cxa_atexit@GLIBC_2.27>
   166c8:	000e0367          	jalr	t1,0(t3)
   166cc:	00000013          	addi	zero,zero,0

00000000000166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   166d0:	00023e17          	auipc	t3,0x23
   166d4:	b50e3e03          	ld	t3,-1200(t3) # 39220 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   166d8:	000e0367          	jalr	t1,0(t3)
   166dc:	00000013          	addi	zero,zero,0

00000000000166e0 <__cxa_guard_acquire@plt>:
   166e0:	00023e17          	auipc	t3,0x23
   166e4:	b48e3e03          	ld	t3,-1208(t3) # 39228 <__cxa_guard_acquire@CXXABI_1.3>
   166e8:	000e0367          	jalr	t1,0(t3)
   166ec:	00000013          	addi	zero,zero,0

00000000000166f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>:
   166f0:	00023e17          	auipc	t3,0x23
   166f4:	b40e3e03          	ld	t3,-1216(t3) # 39230 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@GLIBCXX_3.4.21>
   166f8:	000e0367          	jalr	t1,0(t3)
   166fc:	00000013          	addi	zero,zero,0

0000000000016700 <printf@plt>:
   16700:	00023e17          	auipc	t3,0x23
   16704:	b38e3e03          	ld	t3,-1224(t3) # 39238 <printf@GLIBC_2.27>
   16708:	000e0367          	jalr	t1,0(t3)
   1670c:	00000013          	addi	zero,zero,0

0000000000016710 <std::runtime_error::runtime_error(char const*)@plt>:
   16710:	00023e17          	auipc	t3,0x23
   16714:	b30e3e03          	ld	t3,-1232(t3) # 39240 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16718:	000e0367          	jalr	t1,0(t3)
   1671c:	00000013          	addi	zero,zero,0

0000000000016720 <memmove@plt>:
   16720:	00023e17          	auipc	t3,0x23
   16724:	b28e3e03          	ld	t3,-1240(t3) # 39248 <memmove@GLIBC_2.27>
   16728:	000e0367          	jalr	t1,0(t3)
   1672c:	00000013          	addi	zero,zero,0

0000000000016730 <__cxa_pure_virtual@plt>:
   16730:	00023e17          	auipc	t3,0x23
   16734:	b20e3e03          	ld	t3,-1248(t3) # 39250 <__cxa_pure_virtual@CXXABI_1.3>
   16738:	000e0367          	jalr	t1,0(t3)
   1673c:	00000013          	addi	zero,zero,0

0000000000016740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
   16740:	00023e17          	auipc	t3,0x23
   16744:	b18e3e03          	ld	t3,-1256(t3) # 39258 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
   16748:	000e0367          	jalr	t1,0(t3)
   1674c:	00000013          	addi	zero,zero,0

0000000000016750 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16750:	00023e17          	auipc	t3,0x23
   16754:	b10e3e03          	ld	t3,-1264(t3) # 39260 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16758:	000e0367          	jalr	t1,0(t3)
   1675c:	00000013          	addi	zero,zero,0

0000000000016760 <__errno_location@plt>:
   16760:	00023e17          	auipc	t3,0x23
   16764:	b08e3e03          	ld	t3,-1272(t3) # 39268 <__errno_location@GLIBC_2.27>
   16768:	000e0367          	jalr	t1,0(t3)
   1676c:	00000013          	addi	zero,zero,0

0000000000016770 <close@plt>:
   16770:	00023e17          	auipc	t3,0x23
   16774:	b00e3e03          	ld	t3,-1280(t3) # 39270 <close@GLIBC_2.27>
   16778:	000e0367          	jalr	t1,0(t3)
   1677c:	00000013          	addi	zero,zero,0

0000000000016780 <std::underflow_error::underflow_error(char const*)@plt>:
   16780:	00023e17          	auipc	t3,0x23
   16784:	af8e3e03          	ld	t3,-1288(t3) # 39278 <std::underflow_error::underflow_error(char const*)@GLIBCXX_3.4.21>
   16788:	000e0367          	jalr	t1,0(t3)
   1678c:	00000013          	addi	zero,zero,0

0000000000016790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16790:	00023e17          	auipc	t3,0x23
   16794:	af0e3e03          	ld	t3,-1296(t3) # 39280 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16798:	000e0367          	jalr	t1,0(t3)
   1679c:	00000013          	addi	zero,zero,0

Disassembly of section .text:

00000000000167a0 <_start>:
ENTRY (ENTRY_POINT)
	/* Terminate call stack by noting ra is undefined.  Use a dummy
	   .cfi_label to force starting the FDE.  */
	.cfi_label .Ldummy
	cfi_undefined (ra)
	call  load_gp
   167a0:	02e000ef          	jal	ra,167ce <load_gp>
	mv    a5, a0  /* rtld_fini.  */
   167a4:	87aa                	c.mv	a5,a0
	/* main may be in a shared library.  */
	la   a0, main
   167a6:	00000517          	auipc	a0,0x0
   167aa:	25250513          	addi	a0,a0,594 # 169f8 <main>
	REG_L a1, 0(sp)      /* argc.  */
   167ae:	6582                	c.ldsp	a1,0(sp)
	addi  a2, sp, SZREG  /* argv.  */
   167b0:	0030                	c.addi4spn	a2,sp,8
	andi  sp, sp, ALMASK /* Align stack. */
   167b2:	ff017113          	andi	sp,sp,-16
	lla   a3, __libc_csu_init
   167b6:	00016697          	auipc	a3,0x16
   167ba:	70a68693          	addi	a3,a3,1802 # 2cec0 <__libc_csu_init>
	lla   a4, __libc_csu_fini
   167be:	00016717          	auipc	a4,0x16
   167c2:	75a70713          	addi	a4,a4,1882 # 2cf18 <__libc_csu_fini>
	mv    a6, sp  /* stack_end.  */
   167c6:	880a                	c.mv	a6,sp

	call  __libc_start_main@plt
   167c8:	bb9ff0ef          	jal	ra,16380 <__libc_start_main@plt>
	ebreak
   167cc:	9002                	c.ebreak

00000000000167ce <load_gp>:
   So we redundantly initialize it at the beginning of _start.  */

load_gp:
.option push
.option norelax
	lla   gp, __global_pointer$
   167ce:	00023197          	auipc	gp,0x23
   167d2:	03218193          	addi	gp,gp,50 # 39800 <__global_pointer$>
.option pop
	ret
   167d6:	8082                	c.jr	ra
	...

00000000000167da <deregister_tm_clones>:
   167da:	81818793          	addi	a5,gp,-2024 # 39018 <__TMC_END__>
   167de:	81818713          	addi	a4,gp,-2024 # 39018 <__TMC_END__>
   167e2:	00f70863          	beq	a4,a5,167f2 <deregister_tm_clones+0x18>
   167e6:	00000793          	addi	a5,zero,0
   167ea:	c781                	c.beqz	a5,167f2 <deregister_tm_clones+0x18>
   167ec:	81818513          	addi	a0,gp,-2024 # 39018 <__TMC_END__>
   167f0:	8782                	c.jr	a5
   167f2:	8082                	c.jr	ra

00000000000167f4 <register_tm_clones>:
   167f4:	81818793          	addi	a5,gp,-2024 # 39018 <__TMC_END__>
   167f8:	81818593          	addi	a1,gp,-2024 # 39018 <__TMC_END__>
   167fc:	8d9d                	c.sub	a1,a5
   167fe:	4035d793          	srai	a5,a1,0x3
   16802:	91fd                	c.srli	a1,0x3f
   16804:	95be                	c.add	a1,a5
   16806:	8585                	c.srai	a1,0x1
   16808:	c599                	c.beqz	a1,16816 <register_tm_clones+0x22>
   1680a:	00000793          	addi	a5,zero,0
   1680e:	c781                	c.beqz	a5,16816 <register_tm_clones+0x22>
   16810:	81818513          	addi	a0,gp,-2024 # 39018 <__TMC_END__>
   16814:	8782                	c.jr	a5
   16816:	8082                	c.jr	ra

0000000000016818 <__do_global_dtors_aux>:
   16818:	1141                	c.addi	sp,-16
   1681a:	e022                	c.sdsp	s0,0(sp)
   1681c:	e191c783          	lbu	a5,-487(gp) # 39619 <completed.0>
   16820:	e406                	c.sdsp	ra,8(sp)
   16822:	e791                	c.bnez	a5,1682e <__do_global_dtors_aux+0x16>
   16824:	fb7ff0ef          	jal	ra,167da <deregister_tm_clones>
   16828:	4785                	c.li	a5,1
   1682a:	e0f18ca3          	sb	a5,-487(gp) # 39619 <completed.0>
   1682e:	60a2                	c.ldsp	ra,8(sp)
   16830:	6402                	c.ldsp	s0,0(sp)
   16832:	0141                	c.addi	sp,16
   16834:	8082                	c.jr	ra

0000000000016836 <frame_dummy>:
   16836:	bf7d                	c.j	167f4 <register_tm_clones>

0000000000016838 <dump_tree(dwarf::die const&, int)>:
#include <fcntl.h>
#include <inttypes.h>

using namespace std;

void dump_tree(const dwarf::die &node, int depth = 0) {
   16838:	714d                	c.addi16sp	sp,-336
   1683a:	e686                	c.sdsp	ra,328(sp)
   1683c:	e2a2                	c.sdsp	s0,320(sp)
   1683e:	fe26                	c.sdsp	s1,312(sp)
   16840:	fa4a                	c.sdsp	s2,304(sp)
   16842:	f64e                	c.sdsp	s3,296(sp)
   16844:	f252                	c.sdsp	s4,288(sp)
   16846:	ee56                	c.sdsp	s5,280(sp)
   16848:	ea5a                	c.sdsp	s6,272(sp)
   1684a:	e65e                	c.sdsp	s7,264(sp)
   1684c:	e262                	c.sdsp	s8,256(sp)
   1684e:	8c2a                	c.mv	s8,a0
   16850:	892e                	c.mv	s2,a1
  printf("%*.s<%" PRIx64 "> %s\n", depth, " ", node.get_section_offset(),
   16852:	237040ef          	jal	ra,1b288 <dwarf::die::get_section_offset() const>
   16856:	842a                	c.mv	s0,a0
         to_string(node.tag).c_str());
   16858:	000c2583          	lw	a1,0(s8)
   1685c:	18a8                	c.addi4spn	a0,sp,120
   1685e:	227110ef          	jal	ra,28284 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>
  printf("%*.s<%" PRIx64 "> %s\n", depth, " ", node.get_section_offset(),
   16862:	7766                	c.ldsp	a4,120(sp)
   16864:	86a2                	c.mv	a3,s0
   16866:	0002e637          	lui	a2,0x2e
   1686a:	45060613          	addi	a2,a2,1104 # 2e450 <typeinfo name for dwarf::expr_context+0x168>
   1686e:	85ca                	c.mv	a1,s2
   16870:	0002d537          	lui	a0,0x2d
   16874:	f5850513          	addi	a0,a0,-168 # 2cf58 <__libc_csu_fini+0x40>
   16878:	e89ff0ef          	jal	ra,16700 <printf@plt>
      { _M_string_length = __length; }

      _GLIBCXX20_CONSTEXPR
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }
   1687c:	7566                	c.ldsp	a0,120(sp)

      _GLIBCXX20_CONSTEXPR
      void
      _M_dispose()
      {
	if (!_M_is_local())
   1687e:	013c                	c.addi4spn	a5,sp,136
   16880:	00f50463          	beq	a0,a5,16888 <dump_tree(dwarf::die const&, int)+0x50>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16884:	c2dff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   16888:	85e2                	c.mv	a1,s8
   1688a:	11a8                	c.addi4spn	a0,sp,232
   1688c:	2fa050ef          	jal	ra,1bb86 <dwarf::die::attributes() const>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   16890:	742e                	c.ldsp	s0,232(sp)
   16892:	79ce                	c.ldsp	s3,240(sp)
   16894:	05340d63          	beq	s0,s3,168ee <dump_tree(dwarf::die const&, int)+0xb6>
    printf("%*.s      %s %s\n", depth, " ", to_string(attr.first).c_str(),
   16898:	0002ebb7          	lui	s7,0x2e
   1689c:	0002db37          	lui	s6,0x2d
   168a0:	08810a93          	addi	s5,sp,136
   168a4:	01810a13          	addi	s4,sp,24
   168a8:	a835                	c.j	168e4 <dump_tree(dwarf::die const&, int)+0xac>
      { return _M_dataplus._M_p; }
   168aa:	64a2                	c.ldsp	s1,8(sp)
           to_string(attr.second).c_str());
   168ac:	00840593          	addi	a1,s0,8
   168b0:	18a8                	c.addi4spn	a0,sp,120
   168b2:	447070ef          	jal	ra,1e4f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)>
    printf("%*.s      %s %s\n", depth, " ", to_string(attr.first).c_str(),
   168b6:	7766                	c.ldsp	a4,120(sp)
   168b8:	86a6                	c.mv	a3,s1
   168ba:	450b8613          	addi	a2,s7,1104 # 2e450 <typeinfo name for dwarf::expr_context+0x168>
   168be:	85ca                	c.mv	a1,s2
   168c0:	f68b0513          	addi	a0,s6,-152 # 2cf68 <__libc_csu_fini+0x50>
   168c4:	e3dff0ef          	jal	ra,16700 <printf@plt>
   168c8:	7566                	c.ldsp	a0,120(sp)
	if (!_M_is_local())
   168ca:	01550463          	beq	a0,s5,168d2 <dump_tree(dwarf::die const&, int)+0x9a>
   168ce:	be3ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   168d2:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   168d4:	01450463          	beq	a0,s4,168dc <dump_tree(dwarf::die const&, int)+0xa4>
   168d8:	bd9ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  for (auto &attr : node.attributes())
   168dc:	02040413          	addi	s0,s0,32
   168e0:	00898763          	beq	s3,s0,168ee <dump_tree(dwarf::die const&, int)+0xb6>
    printf("%*.s      %s %s\n", depth, " ", to_string(attr.first).c_str(),
   168e4:	400c                	c.lw	a1,0(s0)
   168e6:	0028                	c.addi4spn	a0,sp,8
   168e8:	489120ef          	jal	ra,29570 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   168ec:	bf7d                	c.j	168aa <dump_tree(dwarf::die const&, int)+0x72>
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   168ee:	752e                	c.ldsp	a0,232(sp)
	if (__p)
   168f0:	c119                	c.beqz	a0,168f6 <dump_tree(dwarf::die const&, int)+0xbe>
   168f2:	bbfff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  for (auto &child : node) // DFS
   168f6:	85e2                	c.mv	a1,s8
   168f8:	0028                	c.addi4spn	a0,sp,8
   168fa:	6a9040ef          	jal	ra,1b7a2 <dwarf::die::begin() const>
  iterator(const unit *cu, section_offset off);

  die d;
};

inline die::iterator die::end() const { return iterator(); }
   168fe:	fc82                	c.sdsp	zero,120(sp)
   16900:	e102                	c.sdsp	zero,128(sp)
   16902:	e502                	c.sdsp	zero,136(sp)
   16904:	e902                	c.sdsp	zero,144(sp)
   16906:	ed02                	c.sdsp	zero,152(sp)
   16908:	f102                	c.sdsp	zero,160(sp)
   1690a:	f502                	c.sdsp	zero,168(sp)
   1690c:	f902                	c.sdsp	zero,176(sp)
   1690e:	fd02                	c.sdsp	zero,184(sp)
   16910:	e182                	c.sdsp	zero,192(sp)
   16912:	f182                	c.sdsp	zero,224(sp)
  typedef T value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;
  typedef size_t size_type;

  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   16914:	093c                	c.addi4spn	a5,sp,152
   16916:	e5be                	c.sdsp	a5,200(sp)
   16918:	e9be                	c.sdsp	a5,208(sp)
   1691a:	01bc                	c.addi4spn	a5,sp,200
   1691c:	edbe                	c.sdsp	a5,216(sp)
    if (d.abbrev != o.d.abbrev)
   1691e:	67e2                	c.ldsp	a5,24(sp)
   16920:	672a                	c.ldsp	a4,136(sp)
   16922:	00e78b63          	beq	a5,a4,16938 <dump_tree(dwarf::die const&, int)+0x100>
    dump_tree(child, depth + 1);
   16926:	0019059b          	addiw	a1,s2,1
   1692a:	0028                	c.addi4spn	a0,sp,8
   1692c:	f0dff0ef          	jal	ra,16838 <dump_tree(dwarf::die const&, int)>
  for (auto &child : node) // DFS
   16930:	0028                	c.addi4spn	a0,sp,8
   16932:	0bc050ef          	jal	ra,1b9ee <dwarf::die::iterator::operator++()>
   16936:	b7e5                	c.j	1691e <dump_tree(dwarf::die const&, int)+0xe6>
    if (d.abbrev == nullptr)
   16938:	cb89                	c.beqz	a5,1694a <dump_tree(dwarf::die const&, int)+0x112>
    return d.next != o.d.next || d.cu != o.d.cu;
   1693a:	7746                	c.ldsp	a4,112(sp)
   1693c:	778e                	c.ldsp	a5,224(sp)
   1693e:	fef714e3          	bne	a4,a5,16926 <dump_tree(dwarf::die const&, int)+0xee>
   16942:	6742                	c.ldsp	a4,16(sp)
   16944:	678a                	c.ldsp	a5,128(sp)
   16946:	fef710e3          	bne	a4,a5,16926 <dump_tree(dwarf::die const&, int)+0xee>
    end--;
    end->~T();
  }

  void clear() {
    for (T *p = base; p < end; ++p)
   1694a:	652e                	c.ldsp	a0,200(sp)
   1694c:	67ce                	c.ldsp	a5,208(sp)
   1694e:	00f57763          	bgeu	a0,a5,1695c <dump_tree(dwarf::die const&, int)+0x124>
   16952:	87aa                	c.mv	a5,a0
   16954:	07a1                	c.addi	a5,8
   16956:	674e                	c.ldsp	a4,208(sp)
   16958:	fee7eee3          	bltu	a5,a4,16954 <dump_tree(dwarf::die const&, int)+0x11c>
      p->~T();
    end = base;
   1695c:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1695e:	093c                	c.addi4spn	a5,sp,152
   16960:	00f50563          	beq	a0,a5,1696a <dump_tree(dwarf::die const&, int)+0x132>
      delete[] (char *)base;
   16964:	c119                	c.beqz	a0,1696a <dump_tree(dwarf::die const&, int)+0x132>
   16966:	bfbff0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1696a:	6566                	c.ldsp	a0,88(sp)
   1696c:	7786                	c.ldsp	a5,96(sp)
   1696e:	00f57763          	bgeu	a0,a5,1697c <dump_tree(dwarf::die const&, int)+0x144>
   16972:	87aa                	c.mv	a5,a0
   16974:	07a1                	c.addi	a5,8
   16976:	7706                	c.ldsp	a4,96(sp)
   16978:	fee7eee3          	bltu	a5,a4,16974 <dump_tree(dwarf::die const&, int)+0x13c>
    if ((char *)base != buf)
   1697c:	103c                	c.addi4spn	a5,sp,40
   1697e:	00f50563          	beq	a0,a5,16988 <dump_tree(dwarf::die const&, int)+0x150>
      delete[] (char *)base;
   16982:	c119                	c.beqz	a0,16988 <dump_tree(dwarf::die const&, int)+0x150>
   16984:	bddff0ef          	jal	ra,16560 <operator delete[](void*)@plt>
}
   16988:	60b6                	c.ldsp	ra,328(sp)
   1698a:	6416                	c.ldsp	s0,320(sp)
   1698c:	74f2                	c.ldsp	s1,312(sp)
   1698e:	7952                	c.ldsp	s2,304(sp)
   16990:	79b2                	c.ldsp	s3,296(sp)
   16992:	7a12                	c.ldsp	s4,288(sp)
   16994:	6af2                	c.ldsp	s5,280(sp)
   16996:	6b52                	c.ldsp	s6,272(sp)
   16998:	6bb2                	c.ldsp	s7,264(sp)
   1699a:	6c12                	c.ldsp	s8,256(sp)
   1699c:	6171                	c.addi16sp	sp,336
   1699e:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   169a0:	842a                	c.mv	s0,a0
   169a2:	7566                	c.ldsp	a0,120(sp)
	if (!_M_is_local())
   169a4:	013c                	c.addi4spn	a5,sp,136
   169a6:	00f50463          	beq	a0,a5,169ae <dump_tree(dwarf::die const&, int)+0x176>
   169aa:	b07ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   169ae:	8522                	c.mv	a0,s0
   169b0:	ce1ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   169b4:	842a                	c.mv	s0,a0
   169b6:	7566                	c.ldsp	a0,120(sp)
	if (!_M_is_local())
   169b8:	013c                	c.addi4spn	a5,sp,136
   169ba:	00f50463          	beq	a0,a5,169c2 <dump_tree(dwarf::die const&, int)+0x18a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   169be:	af3ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   169c2:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   169c4:	083c                	c.addi4spn	a5,sp,24
   169c6:	00f50463          	beq	a0,a5,169ce <dump_tree(dwarf::die const&, int)+0x196>
   169ca:	ae7ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   169ce:	752e                	c.ldsp	a0,232(sp)
	if (__p)
   169d0:	c119                	c.beqz	a0,169d6 <dump_tree(dwarf::die const&, int)+0x19e>
   169d2:	adfff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   169d6:	8522                	c.mv	a0,s0
   169d8:	cb9ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   169dc:	842a                	c.mv	s0,a0
   169de:	b7d5                	c.j	169c2 <dump_tree(dwarf::die const&, int)+0x18a>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   169e0:	842a                	c.mv	s0,a0
   169e2:	b7f5                	c.j	169ce <dump_tree(dwarf::die const&, int)+0x196>
class die {
   169e4:	842a                	c.mv	s0,a0
   169e6:	0928                	c.addi4spn	a0,sp,152
   169e8:	558000ef          	jal	ra,16f40 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   169ec:	1028                	c.addi4spn	a0,sp,40
   169ee:	552000ef          	jal	ra,16f40 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>
   169f2:	8522                	c.mv	a0,s0
   169f4:	c9dff0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000169f8 <main>:

int main(int argc, char **argv) {
   169f8:	7135                	c.addi16sp	sp,-160
   169fa:	ed06                	c.sdsp	ra,152(sp)
   169fc:	e922                	c.sdsp	s0,144(sp)
   169fe:	e526                	c.sdsp	s1,136(sp)
   16a00:	e14a                	c.sdsp	s2,128(sp)
   16a02:	fcce                	c.sdsp	s3,120(sp)
   16a04:	f8d2                	c.sdsp	s4,112(sp)
   16a06:	f4d6                	c.sdsp	s5,104(sp)
   16a08:	842e                	c.mv	s0,a1
  if (argc != 2) {
   16a0a:	4789                	c.li	a5,2
   16a0c:	02f51163          	bne	a0,a5,16a2e <main+0x36>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
    return 2;
  }
  int fd = open(argv[1], O_RDONLY);
   16a10:	4581                	c.li	a1,0
   16a12:	6408                	c.ld	a0,8(s0)
   16a14:	a0dff0ef          	jal	ra,16420 <open@plt>
   16a18:	85aa                	c.mv	a1,a0
  if (fd < 0) {
   16a1a:	02054563          	blt	a0,zero,16a44 <main+0x4c>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
    return 1;
  }

  elf::elf ef(elf::create_mmap_loader(fd));
   16a1e:	0088                	c.addi4spn	a0,sp,64
   16a20:	0f4160ef          	jal	ra,2cb14 <elf::create_mmap_loader(int)>
   16a24:	008c                	c.addi4spn	a1,sp,64
   16a26:	1808                	c.addi4spn	a0,sp,48
   16a28:	267140ef          	jal	ra,2b48e <elf::elf::elf(std::shared_ptr<elf::loader> const&)>
   16a2c:	a83d                	c.j	16a6a <main+0x72>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
   16a2e:	6190                	c.ld	a2,0(a1)
   16a30:	0002d5b7          	lui	a1,0x2d
   16a34:	f8058593          	addi	a1,a1,-128 # 2cf80 <__libc_csu_fini+0x68>
   16a38:	e101b503          	ld	a0,-496(gp) # 39610 <stderr@GLIBC_2.27>
   16a3c:	c45ff0ef          	jal	ra,16680 <fprintf@plt>
    return 2;
   16a40:	4509                	c.li	a0,2
   16a42:	aa25                	c.j	16b7a <main+0x182>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
   16a44:	e101b483          	ld	s1,-496(gp) # 39610 <stderr@GLIBC_2.27>
   16a48:	6400                	c.ld	s0,8(s0)
   16a4a:	d17ff0ef          	jal	ra,16760 <__errno_location@plt>
   16a4e:	4108                	c.lw	a0,0(a0)
   16a50:	ae1ff0ef          	jal	ra,16530 <strerror@plt>
   16a54:	86aa                	c.mv	a3,a0
   16a56:	8622                	c.mv	a2,s0
   16a58:	0002d5b7          	lui	a1,0x2d
   16a5c:	f9858593          	addi	a1,a1,-104 # 2cf98 <__libc_csu_fini+0x80>
   16a60:	8526                	c.mv	a0,s1
   16a62:	c1fff0ef          	jal	ra,16680 <fprintf@plt>
    return 1;
   16a66:	4505                	c.li	a0,1
   16a68:	aa09                	c.j	16b7a <main+0x182>
      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   16a6a:	6526                	c.ldsp	a0,72(sp)
   16a6c:	c119                	c.beqz	a0,16a72 <main+0x7a>
	  _M_pi->_M_release();
   16a6e:	31a000ef          	jal	ra,16d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   16a72:	05000513          	addi	a0,zero,80
   16a76:	a4bff0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   16a7a:	842a                	c.mv	s0,a0
    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex() 
    { 
   16a7c:	00052423          	sw	zero,8(a0)
   16a80:	00052623          	sw	zero,12(a0)
   16a84:	00052823          	sw	zero,16(a0)
   16a88:	00052a23          	sw	zero,20(a0)
   16a8c:	00052c23          	sw	zero,24(a0)
   16a90:	00052e23          	sw	zero,28(a0)
   16a94:	02053023          	sd	zero,32(a0)
   16a98:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   16a9c:	4785                	c.li	a5,1
   16a9e:	d91c                	c.sw	a5,48(a0)
   16aa0:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   16aa2:	0002d7b7          	lui	a5,0x2d
   16aa6:	24878793          	addi	a5,a5,584 # 2d248 <vtable for std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10>
   16aaa:	e11c                	c.sd	a5,0(a0)
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   16aac:	03850493          	addi	s1,a0,56

template <typename Elf> class elf_loader : public loader {
  Elf f;

public:
  elf_loader(const Elf &file) : f(file) {}
   16ab0:	0002d7b7          	lui	a5,0x2d
   16ab4:	22078793          	addi	a5,a5,544 # 2d220 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16ab8:	fd1c                	c.sd	a5,56(a0)
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   16aba:	77c2                	c.ldsp	a5,48(sp)
   16abc:	e13c                	c.sd	a5,64(a0)
      : _M_pi(__r._M_pi)
   16abe:	7562                	c.ldsp	a0,56(sp)
   16ac0:	e428                	c.sd	a0,72(s0)
	if (_M_pi != nullptr)
   16ac2:	c519                	c.beqz	a0,16ad0 <main+0xd8>

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   16ac4:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16ac8:	cb99                	c.beqz	a5,16ade <main+0xe6>
  { *__mem += __val; }
   16aca:	591c                	c.lw	a5,48(a0)
   16acc:	2785                	c.addiw	a5,1
   16ace:	d91c                	c.sw	a5,48(a0)
	__r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount()
   16ad0:	e8a6                	c.sdsp	s1,80(sp)
	_M_pi = __tmp;
   16ad2:	eca2                	c.sdsp	s0,88(sp)
  dwarf::dwarf dw(dwarf::elf::create_loader(ef));
   16ad4:	088c                	c.addi4spn	a1,sp,80
   16ad6:	1008                	c.addi4spn	a0,sp,32
   16ad8:	76b000ef          	jal	ra,17a42 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>
   16adc:	a039                	c.j	16aea <main+0xf2>
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
   16ade:	4585                	c.li	a1,1
   16ae0:	03050513          	addi	a0,a0,48
   16ae4:	81dff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16ae8:	b7e5                	c.j	16ad0 <main+0xd8>
	if (_M_pi != nullptr)
   16aea:	6566                	c.ldsp	a0,88(sp)
   16aec:	c119                	c.beqz	a0,16af2 <main+0xfa>
	  _M_pi->_M_release();
   16aee:	29a000ef          	jal	ra,16d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>

  for (auto cu : dw.compilation_units()) {
   16af2:	1008                	c.addi4spn	a0,sp,32
   16af4:	4f0000ef          	jal	ra,16fe4 <dwarf::dwarf::compilation_units() const>
   16af8:	6100                	c.ld	s0,0(a0)
   16afa:	00853983          	ld	s3,8(a0)
   16afe:	06898663          	beq	s3,s0,16b6a <main+0x172>
class unit {
   16b02:	0002d937          	lui	s2,0x2d
   16b06:	1e090913          	addi	s2,s2,480 # 2d1e0 <vtable for dwarf::unit+0x10>
  compilation_unit(const compilation_unit &o) = default;
   16b0a:	0002d4b7          	lui	s1,0x2d
   16b0e:	20048493          	addi	s1,s1,512 # 2d200 <vtable for dwarf::compilation_unit+0x10>
    printf("--- <%" PRIx64 ">\n", cu.get_section_offset());
   16b12:	0002da37          	lui	s4,0x2d
   16b16:	a80d                	c.j	16b48 <main+0x150>
   16b18:	4585                	c.li	a1,1
   16b1a:	03050513          	addi	a0,a0,48
   16b1e:	fe2ff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16b22:	a83d                	c.j	16b60 <main+0x168>
   16b24:	85aa                	c.mv	a1,a0
   16b26:	fa0a0513          	addi	a0,s4,-96 # 2cfa0 <__libc_csu_fini+0x88>
   16b2a:	bd7ff0ef          	jal	ra,16700 <printf@plt>
    dump_tree(cu.root());
   16b2e:	0028                	c.addi4spn	a0,sp,8
   16b30:	47a020ef          	jal	ra,18faa <dwarf::unit::root() const>
   16b34:	4581                	c.li	a1,0
   16b36:	d03ff0ef          	jal	ra,16838 <dump_tree(dwarf::die const&, int)>
class compilation_unit : public unit {
   16b3a:	e426                	c.sdsp	s1,8(sp)
   16b3c:	0028                	c.addi4spn	a0,sp,8
   16b3e:	4f8000ef          	jal	ra,17036 <dwarf::unit::~unit()>

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
   16b42:	0461                	c.addi	s0,24
  for (auto cu : dw.compilation_units()) {
   16b44:	02898363          	beq	s3,s0,16b6a <main+0x172>
class unit {
   16b48:	e44a                	c.sdsp	s2,8(sp)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16b4a:	641c                	c.ld	a5,8(s0)
   16b4c:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   16b4e:	6808                	c.ld	a0,16(s0)
   16b50:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   16b52:	c519                	c.beqz	a0,16b60 <main+0x168>
    if (__is_single_threaded())
   16b54:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16b58:	d3e1                	c.beqz	a5,16b18 <main+0x120>
  { *__mem += __val; }
   16b5a:	591c                	c.lw	a5,48(a0)
   16b5c:	2785                	c.addiw	a5,1
   16b5e:	d91c                	c.sw	a5,48(a0)
  compilation_unit(const compilation_unit &o) = default;
   16b60:	e426                	c.sdsp	s1,8(sp)
    printf("--- <%" PRIx64 ">\n", cu.get_section_offset());
   16b62:	0028                	c.addi4spn	a0,sp,8
   16b64:	574000ef          	jal	ra,170d8 <dwarf::unit::get_section_offset() const>
   16b68:	bf75                	c.j	16b24 <main+0x12c>
  }

  return 0;
}
   16b6a:	1008                	c.addi4spn	a0,sp,32
   16b6c:	400000ef          	jal	ra,16f6c <dwarf::dwarf::~dwarf()>
	if (_M_pi != nullptr)
   16b70:	7562                	c.ldsp	a0,56(sp)
   16b72:	c119                	c.beqz	a0,16b78 <main+0x180>
	  _M_pi->_M_release();
   16b74:	214000ef          	jal	ra,16d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
  return 0;
   16b78:	4501                	c.li	a0,0
}
   16b7a:	60ea                	c.ldsp	ra,152(sp)
   16b7c:	644a                	c.ldsp	s0,144(sp)
   16b7e:	64aa                	c.ldsp	s1,136(sp)
   16b80:	690a                	c.ldsp	s2,128(sp)
   16b82:	79e6                	c.ldsp	s3,120(sp)
   16b84:	7a46                	c.ldsp	s4,112(sp)
   16b86:	7aa6                	c.ldsp	s5,104(sp)
   16b88:	610d                	c.addi16sp	sp,160
   16b8a:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   16b8c:	842a                	c.mv	s0,a0
   16b8e:	6526                	c.ldsp	a0,72(sp)
   16b90:	c119                	c.beqz	a0,16b96 <main+0x19e>
	  _M_pi->_M_release();
   16b92:	1f6000ef          	jal	ra,16d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16b96:	8522                	c.mv	a0,s0
   16b98:	af9ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   16b9c:	842a                	c.mv	s0,a0
   16b9e:	6566                	c.ldsp	a0,88(sp)
   16ba0:	c119                	c.beqz	a0,16ba6 <main+0x1ae>
	  _M_pi->_M_release();
   16ba2:	1e6000ef          	jal	ra,16d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	if (_M_pi != nullptr)
   16ba6:	7562                	c.ldsp	a0,56(sp)
   16ba8:	c119                	c.beqz	a0,16bae <main+0x1b6>
	  _M_pi->_M_release();
   16baa:	1de000ef          	jal	ra,16d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16bae:	8522                	c.mv	a0,s0
   16bb0:	ae1ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
class compilation_unit : public unit {
   16bb4:	842a                	c.mv	s0,a0
   16bb6:	0002d7b7          	lui	a5,0x2d
   16bba:	20078793          	addi	a5,a5,512 # 2d200 <vtable for dwarf::compilation_unit+0x10>
   16bbe:	e43e                	c.sdsp	a5,8(sp)
   16bc0:	0028                	c.addi4spn	a0,sp,8
   16bc2:	474000ef          	jal	ra,17036 <dwarf::unit::~unit()>
   16bc6:	1008                	c.addi4spn	a0,sp,32
   16bc8:	3a4000ef          	jal	ra,16f6c <dwarf::dwarf::~dwarf()>
   16bcc:	bfe9                	c.j	16ba6 <main+0x1ae>
   16bce:	842a                	c.mv	s0,a0
   16bd0:	bfdd                	c.j	16bc6 <main+0x1ce>
	if (_M_pi != nullptr)
   16bd2:	842a                	c.mv	s0,a0
   16bd4:	bfc9                	c.j	16ba6 <main+0x1ae>

0000000000016bd6 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16bd6:	8082                	c.jr	ra

0000000000016bd8 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   16bd8:	1141                	c.addi	sp,-16
   16bda:	e406                	c.sdsp	ra,8(sp)
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
   16bdc:	7d1c                	c.ld	a5,56(a0)
   16bde:	639c                	c.ld	a5,0(a5)
   16be0:	03850513          	addi	a0,a0,56
   16be4:	9782                	c.jalr	a5
      }
   16be6:	60a2                	c.ldsp	ra,8(sp)
   16be8:	0141                	c.addi	sp,16
   16bea:	8082                	c.jr	ra

0000000000016bec <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16bec:	1141                	c.addi	sp,-16
   16bee:	e406                	c.sdsp	ra,8(sp)
   16bf0:	8c1ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   16bf4:	60a2                	c.ldsp	ra,8(sp)
   16bf6:	0141                	c.addi	sp,16
   16bf8:	8082                	c.jr	ra

0000000000016bfa <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   16bfa:	1141                	c.addi	sp,-16
   16bfc:	e406                	c.sdsp	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16bfe:	8b3ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   16c02:	60a2                	c.ldsp	ra,8(sp)
   16c04:	0141                	c.addi	sp,16
   16c06:	8082                	c.jr	ra

0000000000016c08 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   16c08:	1141                	c.addi	sp,-16
   16c0a:	e406                	c.sdsp	ra,8(sp)
   16c0c:	e022                	c.sdsp	s0,0(sp)
   16c0e:	03850413          	addi	s0,a0,56
	    ||
   16c12:	0002d7b7          	lui	a5,0x2d
   16c16:	27078793          	addi	a5,a5,624 # 2d270 <std::_Sp_make_shared_tag::_S_ti()::__tag>
   16c1a:	02f58a63          	beq	a1,a5,16c4e <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
  type_info::operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
   16c1e:	6588                	c.ld	a0,8(a1)
   16c20:	0002d7b7          	lui	a5,0x2d
   16c24:	02078793          	addi	a5,a5,32 # 2d020 <typeinfo name for std::_Sp_make_shared_tag>
   16c28:	02f50363          	beq	a0,a5,16c4e <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
#if !__GXX_TYPEINFO_EQUALITY_INLINE
    // ABI requires comparisons to be non-inline.
    return __equal(__arg);
#elif !__GXX_MERGED_TYPEINFO_NAMES
    // Need to do string comparison.
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   16c2c:	00054703          	lbu	a4,0(a0)
   16c30:	02a00793          	addi	a5,zero,42
   16c34:	02f70263          	beq	a4,a5,16c58 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   16c38:	0002d5b7          	lui	a1,0x2d
   16c3c:	02058593          	addi	a1,a1,32 # 2d020 <typeinfo name for std::_Sp_make_shared_tag>
   16c40:	ed0ff0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   16c44:	00153513          	sltiu	a0,a0,1
   16c48:	40a00533          	sub	a0,zero,a0
   16c4c:	8c69                	c.and	s0,a0
      }
   16c4e:	8522                	c.mv	a0,s0
   16c50:	60a2                	c.ldsp	ra,8(sp)
   16c52:	6402                	c.ldsp	s0,0(sp)
   16c54:	0141                	c.addi	sp,16
   16c56:	8082                	c.jr	ra
	return nullptr;
   16c58:	4401                	c.li	s0,0
   16c5a:	bfd5                	c.j	16c4e <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

0000000000016c5c <dwarf::compilation_unit::~compilation_unit()>:
   16c5c:	1141                	c.addi	sp,-16
   16c5e:	e406                	c.sdsp	ra,8(sp)
   16c60:	0002d7b7          	lui	a5,0x2d
   16c64:	20078793          	addi	a5,a5,512 # 2d200 <vtable for dwarf::compilation_unit+0x10>
   16c68:	e11c                	c.sd	a5,0(a0)
   16c6a:	3cc000ef          	jal	ra,17036 <dwarf::unit::~unit()>
   16c6e:	60a2                	c.ldsp	ra,8(sp)
   16c70:	0141                	c.addi	sp,16
   16c72:	8082                	c.jr	ra

0000000000016c74 <dwarf::compilation_unit::~compilation_unit()>:
   16c74:	1141                	c.addi	sp,-16
   16c76:	e406                	c.sdsp	ra,8(sp)
   16c78:	e022                	c.sdsp	s0,0(sp)
   16c7a:	842a                	c.mv	s0,a0
   16c7c:	0002d7b7          	lui	a5,0x2d
   16c80:	20078793          	addi	a5,a5,512 # 2d200 <vtable for dwarf::compilation_unit+0x10>
   16c84:	e11c                	c.sd	a5,0(a0)
   16c86:	3b0000ef          	jal	ra,17036 <dwarf::unit::~unit()>
   16c8a:	8522                	c.mv	a0,s0
   16c8c:	825ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   16c90:	60a2                	c.ldsp	ra,8(sp)
   16c92:	6402                	c.ldsp	s0,0(sp)
   16c94:	0141                	c.addi	sp,16
   16c96:	8082                	c.jr	ra

0000000000016c98 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
template <typename Elf> class elf_loader : public loader {
   16c98:	1141                	c.addi	sp,-16
   16c9a:	e406                	c.sdsp	ra,8(sp)
   16c9c:	e022                	c.sdsp	s0,0(sp)
   16c9e:	0002d7b7          	lui	a5,0x2d
   16ca2:	22078793          	addi	a5,a5,544 # 2d220 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16ca6:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   16ca8:	6900                	c.ld	s0,16(a0)
   16caa:	c819                	c.beqz	s0,16cc0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
    if (__is_single_threaded())
   16cac:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16cb0:	cf81                	c.beqz	a5,16cc8 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x30>
    _Atomic_word __result = *__mem;
   16cb2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   16cb4:	fff5079b          	addiw	a5,a0,-1
   16cb8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16cba:	4785                	c.li	a5,1
   16cbc:	00f50c63          	beq	a0,a5,16cd4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
   16cc0:	60a2                	c.ldsp	ra,8(sp)
   16cc2:	6402                	c.ldsp	s0,0(sp)
   16cc4:	0141                	c.addi	sp,16
   16cc6:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16cc8:	55fd                	c.li	a1,-1
   16cca:	03040513          	addi	a0,s0,48
   16cce:	e62ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16cd2:	b7e5                	c.j	16cba <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x22>
	_M_dispose();
   16cd4:	601c                	c.ld	a5,0(s0)
   16cd6:	6b9c                	c.ld	a5,16(a5)
   16cd8:	8522                	c.mv	a0,s0
   16cda:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16cdc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16ce0:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16ce4:	cf89                	c.beqz	a5,16cfe <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x66>
    _Atomic_word __result = *__mem;
   16ce6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   16ce8:	fff5079b          	addiw	a5,a0,-1
   16cec:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16cee:	4785                	c.li	a5,1
   16cf0:	fcf518e3          	bne	a0,a5,16cc0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
	    _M_destroy();
   16cf4:	601c                	c.ld	a5,0(s0)
   16cf6:	6f9c                	c.ld	a5,24(a5)
   16cf8:	8522                	c.mv	a0,s0
   16cfa:	9782                	c.jalr	a5
   16cfc:	b7d1                	c.j	16cc0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
      return __exchange_and_add(__mem, __val);
   16cfe:	55fd                	c.li	a1,-1
   16d00:	03440513          	addi	a0,s0,52
   16d04:	e2cff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16d08:	b7dd                	c.j	16cee <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x56>

0000000000016d0a <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
   16d0a:	1101                	c.addi	sp,-32
   16d0c:	ec06                	c.sdsp	ra,24(sp)
   16d0e:	e822                	c.sdsp	s0,16(sp)
   16d10:	e426                	c.sdsp	s1,8(sp)
   16d12:	842a                	c.mv	s0,a0
   16d14:	0002d7b7          	lui	a5,0x2d
   16d18:	22078793          	addi	a5,a5,544 # 2d220 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16d1c:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   16d1e:	6904                	c.ld	s1,16(a0)
   16d20:	c899                	c.beqz	s1,16d36 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
    if (__is_single_threaded())
   16d22:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16d26:	c385                	c.beqz	a5,16d46 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
    _Atomic_word __result = *__mem;
   16d28:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   16d2a:	fff5079b          	addiw	a5,a0,-1
   16d2e:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16d30:	4785                	c.li	a5,1
   16d32:	02f50063          	beq	a0,a5,16d52 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x48>
   16d36:	8522                	c.mv	a0,s0
   16d38:	f78ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   16d3c:	60e2                	c.ldsp	ra,24(sp)
   16d3e:	6442                	c.ldsp	s0,16(sp)
   16d40:	64a2                	c.ldsp	s1,8(sp)
   16d42:	6105                	c.addi16sp	sp,32
   16d44:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16d46:	55fd                	c.li	a1,-1
   16d48:	03048513          	addi	a0,s1,48
   16d4c:	de4ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16d50:	b7c5                	c.j	16d30 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x26>
	_M_dispose();
   16d52:	609c                	c.ld	a5,0(s1)
   16d54:	6b9c                	c.ld	a5,16(a5)
   16d56:	8526                	c.mv	a0,s1
   16d58:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16d5a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16d5e:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16d62:	cf89                	c.beqz	a5,16d7c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x72>
    _Atomic_word __result = *__mem;
   16d64:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   16d66:	fff5079b          	addiw	a5,a0,-1
   16d6a:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16d6c:	4785                	c.li	a5,1
   16d6e:	fcf514e3          	bne	a0,a5,16d36 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
	    _M_destroy();
   16d72:	609c                	c.ld	a5,0(s1)
   16d74:	6f9c                	c.ld	a5,24(a5)
   16d76:	8526                	c.mv	a0,s1
   16d78:	9782                	c.jalr	a5
   16d7a:	bf75                	c.j	16d36 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
      return __exchange_and_add(__mem, __val);
   16d7c:	55fd                	c.li	a1,-1
   16d7e:	03448513          	addi	a0,s1,52
   16d82:	daeff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16d86:	b7dd                	c.j	16d6c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x62>

0000000000016d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>:
    {
   16d88:	1141                	c.addi	sp,-16
   16d8a:	e406                	c.sdsp	ra,8(sp)
   16d8c:	e022                	c.sdsp	s0,0(sp)
   16d8e:	842a                	c.mv	s0,a0
    if (__is_single_threaded())
   16d90:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16d94:	cf81                	c.beqz	a5,16dac <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x24>
    _Atomic_word __result = *__mem;
   16d96:	5908                	c.lw	a0,48(a0)
    *__mem += __val;
   16d98:	fff5079b          	addiw	a5,a0,-1
   16d9c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16d9e:	4785                	c.li	a5,1
   16da0:	00f50c63          	beq	a0,a5,16db8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x30>
    }
   16da4:	60a2                	c.ldsp	ra,8(sp)
   16da6:	6402                	c.ldsp	s0,0(sp)
   16da8:	0141                	c.addi	sp,16
   16daa:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16dac:	55fd                	c.li	a1,-1
   16dae:	03050513          	addi	a0,a0,48
   16db2:	d7eff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16db6:	b7e5                	c.j	16d9e <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x16>
	_M_dispose();
   16db8:	601c                	c.ld	a5,0(s0)
   16dba:	6b9c                	c.ld	a5,16(a5)
   16dbc:	8522                	c.mv	a0,s0
   16dbe:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16dc0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16dc4:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16dc8:	cf89                	c.beqz	a5,16de2 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x5a>
    _Atomic_word __result = *__mem;
   16dca:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   16dcc:	fff5079b          	addiw	a5,a0,-1
   16dd0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16dd2:	4785                	c.li	a5,1
   16dd4:	fcf518e3          	bne	a0,a5,16da4 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x1c>
	    _M_destroy();
   16dd8:	601c                	c.ld	a5,0(s0)
   16dda:	6f9c                	c.ld	a5,24(a5)
   16ddc:	8522                	c.mv	a0,s0
   16dde:	9782                	c.jalr	a5
    }
   16de0:	b7d1                	c.j	16da4 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x1c>
      return __exchange_and_add(__mem, __val);
   16de2:	55fd                	c.li	a1,-1
   16de4:	03440513          	addi	a0,s0,52
   16de8:	d48ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16dec:	b7dd                	c.j	16dd2 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x4a>

0000000000016dee <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)>:

  const void *load(section_type section, size_t *size_out) {
   16dee:	7159                	c.addi16sp	sp,-112
   16df0:	f486                	c.sdsp	ra,104(sp)
   16df2:	f0a2                	c.sdsp	s0,96(sp)
   16df4:	eca6                	c.sdsp	s1,88(sp)
   16df6:	e8ca                	c.sdsp	s2,80(sp)
   16df8:	e4ce                	c.sdsp	s3,72(sp)
   16dfa:	8932                	c.mv	s2,a2
    auto sec = f.get_section(section_type_to_name(section));
   16dfc:	00850993          	addi	s3,a0,8
   16e00:	852e                	c.mv	a0,a1
   16e02:	3200f0ef          	jal	ra,26122 <dwarf::elf::section_type_to_name(dwarf::section_type)>
	: allocator_type(__a), _M_p(__dat) { }
   16e06:	101c                	c.addi4spn	a5,sp,32
   16e08:	e83e                	c.sdsp	a5,16(sp)
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
   16e0a:	c91d                	c.beqz	a0,16e40 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x52>
   16e0c:	84aa                	c.mv	s1,a0
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   16e0e:	db2ff0ef          	jal	ra,163c0 <strlen@plt>
   16e12:	842a                	c.mv	s0,a0
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   16e14:	e42a                	c.sdsp	a0,8(sp)

	if (__dnew > size_type(_S_local_capacity))
   16e16:	47bd                	c.li	a5,15
   16e18:	02a7ea63          	bltu	a5,a0,16e4c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5e>
	if (__n == 1)
   16e1c:	4785                	c.li	a5,1
   16e1e:	04f51463          	bne	a0,a5,16e66 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x78>
	__c1 = __c2;
   16e22:	0004c783          	lbu	a5,0(s1)
   16e26:	02f10023          	sb	a5,32(sp)

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
   16e2a:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   16e2c:	ec3a                	c.sdsp	a4,24(sp)
   16e2e:	67c2                	c.ldsp	a5,16(sp)
   16e30:	97ba                	c.add	a5,a4
   16e32:	00078023          	sb	zero,0(a5)
   16e36:	080c                	c.addi4spn	a1,sp,16
   16e38:	854e                	c.mv	a0,s3
   16e3a:	50d130ef          	jal	ra,2ab46 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>
   16e3e:	a03d                	c.j	16e6c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x7e>
	  std::__throw_logic_error(__N("basic_string: "
   16e40:	0002d537          	lui	a0,0x2d
   16e44:	f2050513          	addi	a0,a0,-224 # 2cf20 <__libc_csu_fini+0x8>
   16e48:	e18ff0ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>
	    _M_data(_M_create(__dnew, size_type(0)));
   16e4c:	4601                	c.li	a2,0
   16e4e:	002c                	c.addi4spn	a1,sp,8
   16e50:	0808                	c.addi4spn	a0,sp,16
   16e52:	85fff0ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   16e56:	e82a                	c.sdsp	a0,16(sp)
      { _M_allocated_capacity = __capacity; }
   16e58:	67a2                	c.ldsp	a5,8(sp)
   16e5a:	f03e                	c.sdsp	a5,32(sp)
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   16e5c:	8622                	c.mv	a2,s0
   16e5e:	85a6                	c.mv	a1,s1
   16e60:	ef0ff0ef          	jal	ra,16550 <memcpy@plt>
   16e64:	b7d9                	c.j	16e2a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x3c>
	if (__n == 0)
   16e66:	d171                	c.beqz	a0,16e2a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x3c>
      { return _M_dataplus._M_p; }
   16e68:	1008                	c.addi4spn	a0,sp,32
   16e6a:	bfcd                	c.j	16e5c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x6e>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16e6c:	611c                	c.ld	a5,0(a0)
   16e6e:	f83e                	c.sdsp	a5,48(sp)
      : _M_pi(__r._M_pi)
   16e70:	6508                	c.ld	a0,8(a0)
   16e72:	fc2a                	c.sdsp	a0,56(sp)
	if (_M_pi != nullptr)
   16e74:	c519                	c.beqz	a0,16e82 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x94>
    if (__is_single_threaded())
   16e76:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16e7a:	c385                	c.beqz	a5,16e9a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xac>
  { *__mem += __val; }
   16e7c:	591c                	c.lw	a5,48(a0)
   16e7e:	2785                	c.addiw	a5,1
   16e80:	d91c                	c.sw	a5,48(a0)
   16e82:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   16e84:	101c                	c.addi4spn	a5,sp,32
   16e86:	00f50463          	beq	a0,a5,16e8e <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xa0>
   16e8a:	e26ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }
   16e8e:	7442                	c.ldsp	s0,48(sp)
    if (!sec.valid())
   16e90:	c00d                	c.beqz	s0,16eb2 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xc4>
      return nullptr;
    *size_out = sec.size();
   16e92:	1808                	c.addi4spn	a0,sp,48
   16e94:	7e4130ef          	jal	ra,2a678 <elf::section::size() const>
   16e98:	a039                	c.j	16ea6 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xb8>
      __atomic_add(__mem, __val);
   16e9a:	4585                	c.li	a1,1
   16e9c:	03050513          	addi	a0,a0,48
   16ea0:	c60ff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16ea4:	bff9                	c.j	16e82 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x94>
   16ea6:	00a93023          	sd	a0,0(s2)
    return sec.data();
   16eaa:	1808                	c.addi4spn	a0,sp,48
   16eac:	70c130ef          	jal	ra,2a5b8 <elf::section::data() const>
   16eb0:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   16eb2:	74e2                	c.ldsp	s1,56(sp)
   16eb4:	c899                	c.beqz	s1,16eca <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
    if (__is_single_threaded())
   16eb6:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16eba:	c385                	c.beqz	a5,16eda <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
    _Atomic_word __result = *__mem;
   16ebc:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   16ebe:	fff5079b          	addiw	a5,a0,-1
   16ec2:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16ec4:	4785                	c.li	a5,1
   16ec6:	02f50063          	beq	a0,a5,16ee6 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xf8>
  }
   16eca:	8522                	c.mv	a0,s0
   16ecc:	70a6                	c.ldsp	ra,104(sp)
   16ece:	7406                	c.ldsp	s0,96(sp)
   16ed0:	64e6                	c.ldsp	s1,88(sp)
   16ed2:	6946                	c.ldsp	s2,80(sp)
   16ed4:	69a6                	c.ldsp	s3,72(sp)
   16ed6:	6165                	c.addi16sp	sp,112
   16ed8:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16eda:	55fd                	c.li	a1,-1
   16edc:	03048513          	addi	a0,s1,48
   16ee0:	c50ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16ee4:	b7c5                	c.j	16ec4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xd6>
	_M_dispose();
   16ee6:	609c                	c.ld	a5,0(s1)
   16ee8:	6b9c                	c.ld	a5,16(a5)
   16eea:	8526                	c.mv	a0,s1
   16eec:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16eee:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16ef2:	e181c783          	lbu	a5,-488(gp) # 39618 <__libc_single_threaded@GLIBC_2.32>
   16ef6:	cf89                	c.beqz	a5,16f10 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x122>
    _Atomic_word __result = *__mem;
   16ef8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   16efa:	fff5079b          	addiw	a5,a0,-1
   16efe:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16f00:	4785                	c.li	a5,1
   16f02:	fcf514e3          	bne	a0,a5,16eca <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
	    _M_destroy();
   16f06:	609c                	c.ld	a5,0(s1)
   16f08:	6f9c                	c.ld	a5,24(a5)
   16f0a:	8526                	c.mv	a0,s1
   16f0c:	9782                	c.jalr	a5
   16f0e:	bf75                	c.j	16eca <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
      return __exchange_and_add(__mem, __val);
   16f10:	55fd                	c.li	a1,-1
   16f12:	03448513          	addi	a0,s1,52
   16f16:	c1aff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f1a:	b7dd                	c.j	16f00 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x112>
      { return _M_dataplus._M_p; }
   16f1c:	842a                	c.mv	s0,a0
   16f1e:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   16f20:	101c                	c.addi4spn	a5,sp,32
   16f22:	00f50463          	beq	a0,a5,16f2a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x13c>
   16f26:	d8aff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16f2a:	8522                	c.mv	a0,s0
   16f2c:	f64ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   16f30:	842a                	c.mv	s0,a0
   16f32:	7562                	c.ldsp	a0,56(sp)
   16f34:	c119                	c.beqz	a0,16f3a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x14c>
	  _M_pi->_M_release();
   16f36:	e53ff0ef          	jal	ra,16d88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16f3a:	8522                	c.mv	a0,s0
   16f3c:	f54ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000016f40 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>:
  ~small_vector() {
   16f40:	86aa                	c.mv	a3,a0
    for (T *p = base; p < end; ++p)
   16f42:	7908                	c.ld	a0,48(a0)
   16f44:	7e9c                	c.ld	a5,56(a3)
   16f46:	00f57763          	bgeu	a0,a5,16f54 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x14>
   16f4a:	87aa                	c.mv	a5,a0
   16f4c:	07a1                	c.addi	a5,8
   16f4e:	7e98                	c.ld	a4,56(a3)
   16f50:	fee7eee3          	bltu	a5,a4,16f4c <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0xc>
    end = base;
   16f54:	fe88                	c.sd	a0,56(a3)
    if ((char *)base != buf)
   16f56:	00a68a63          	beq	a3,a0,16f6a <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x2a>
      delete[] (char *)base;
   16f5a:	c901                	c.beqz	a0,16f6a <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x2a>
  ~small_vector() {
   16f5c:	1141                	c.addi	sp,-16
   16f5e:	e406                	c.sdsp	ra,8(sp)
      delete[] (char *)base;
   16f60:	e00ff0ef          	jal	ra,16560 <operator delete[](void*)@plt>
  }
   16f64:	60a2                	c.ldsp	ra,8(sp)
   16f66:	0141                	c.addi	sp,16
   16f68:	8082                	c.jr	ra
   16f6a:	8082                	c.jr	ra

0000000000016f6c <dwarf::dwarf::~dwarf()>:
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
    infocur.subsection();
  }
}

dwarf::~dwarf() {}
   16f6c:	1141                	c.addi	sp,-16
   16f6e:	e406                	c.sdsp	ra,8(sp)
   16f70:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   16f72:	6500                	c.ld	s0,8(a0)
   16f74:	cc19                	c.beqz	s0,16f92 <dwarf::dwarf::~dwarf()+0x26>
    if (__is_single_threaded())
   16f76:	00022797          	auipc	a5,0x22
   16f7a:	5027b783          	ld	a5,1282(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   16f7e:	0007c783          	lbu	a5,0(a5)
   16f82:	cf81                	c.beqz	a5,16f9a <dwarf::dwarf::~dwarf()+0x2e>
    _Atomic_word __result = *__mem;
   16f84:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   16f86:	fff5079b          	addiw	a5,a0,-1
   16f8a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16f8c:	4785                	c.li	a5,1
   16f8e:	00f50c63          	beq	a0,a5,16fa6 <dwarf::dwarf::~dwarf()+0x3a>
   16f92:	60a2                	c.ldsp	ra,8(sp)
   16f94:	6402                	c.ldsp	s0,0(sp)
   16f96:	0141                	c.addi	sp,16
   16f98:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16f9a:	55fd                	c.li	a1,-1
   16f9c:	03040513          	addi	a0,s0,48
   16fa0:	b90ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16fa4:	b7e5                	c.j	16f8c <dwarf::dwarf::~dwarf()+0x20>
	_M_dispose();
   16fa6:	601c                	c.ld	a5,0(s0)
   16fa8:	6b9c                	c.ld	a5,16(a5)
   16faa:	8522                	c.mv	a0,s0
   16fac:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16fae:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16fb2:	00022797          	auipc	a5,0x22
   16fb6:	4c67b783          	ld	a5,1222(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   16fba:	0007c783          	lbu	a5,0(a5)
   16fbe:	cf89                	c.beqz	a5,16fd8 <dwarf::dwarf::~dwarf()+0x6c>
    _Atomic_word __result = *__mem;
   16fc0:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   16fc2:	fff5079b          	addiw	a5,a0,-1
   16fc6:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16fc8:	4785                	c.li	a5,1
   16fca:	fcf514e3          	bne	a0,a5,16f92 <dwarf::dwarf::~dwarf()+0x26>
	    _M_destroy();
   16fce:	601c                	c.ld	a5,0(s0)
   16fd0:	6f9c                	c.ld	a5,24(a5)
   16fd2:	8522                	c.mv	a0,s0
   16fd4:	9782                	c.jalr	a5
   16fd6:	bf75                	c.j	16f92 <dwarf::dwarf::~dwarf()+0x26>
      return __exchange_and_add(__mem, __val);
   16fd8:	55fd                	c.li	a1,-1
   16fda:	03440513          	addi	a0,s0,52
   16fde:	b52ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16fe2:	b7dd                	c.j	16fc8 <dwarf::dwarf::~dwarf()+0x5c>

0000000000016fe4 <dwarf::dwarf::compilation_units() const>:

const std::vector<compilation_unit> &dwarf::compilation_units() const {
   16fe4:	1141                	c.addi	sp,-16
   16fe6:	e406                	c.sdsp	ra,8(sp)
   16fe8:	e022                	c.sdsp	s0,0(sp)
   16fea:	842a                	c.mv	s0,a0
  static std::vector<compilation_unit> empty;
   16fec:	e3818513          	addi	a0,gp,-456 # 39638 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   16ff0:	ef0ff0ef          	jal	ra,166e0 <__cxa_guard_acquire@plt>
   16ff4:	e909                	c.bnez	a0,17006 <dwarf::dwarf::compilation_units() const+0x22>
      { return _M_ptr != nullptr; }
   16ff6:	6008                	c.ld	a0,0(s0)
  if (!m)
   16ff8:	cd05                	c.beqz	a0,17030 <dwarf::dwarf::compilation_units() const+0x4c>
    return empty;
  return m->compilation_units;
   16ffa:	03050513          	addi	a0,a0,48
}
   16ffe:	60a2                	c.ldsp	ra,8(sp)
   17000:	6402                	c.ldsp	s0,0(sp)
   17002:	0141                	c.addi	sp,16
   17004:	8082                	c.jr	ra
	: _M_start(), _M_finish(), _M_end_of_storage()
   17006:	e2018593          	addi	a1,gp,-480 # 39620 <dwarf::dwarf::compilation_units() const::empty>
   1700a:	0005b023          	sd	zero,0(a1)
   1700e:	0005b423          	sd	zero,8(a1)
   17012:	0005b823          	sd	zero,16(a1)
  static std::vector<compilation_unit> empty;
   17016:	e0018613          	addi	a2,gp,-512 # 39600 <__dso_handle>
   1701a:	00022517          	auipc	a0,0x22
   1701e:	34e53503          	ld	a0,846(a0) # 39368 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()@@Base+0x1fc06>
   17022:	e9eff0ef          	jal	ra,166c0 <__cxa_atexit@plt>
   17026:	e3818513          	addi	a0,gp,-456 # 39638 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   1702a:	c06ff0ef          	jal	ra,16430 <__cxa_guard_release@plt>
   1702e:	b7e1                	c.j	16ff6 <dwarf::dwarf::compilation_units() const+0x12>
    return empty;
   17030:	e2018513          	addi	a0,gp,-480 # 39620 <dwarf::dwarf::compilation_units() const::empty>
   17034:	b7e9                	c.j	16ffe <dwarf::dwarf::compilation_units() const+0x1a>

0000000000017036 <dwarf::unit::~unit()>:
        have_abbrevs(false) {}

  void force_abbrevs();
};

unit::~unit() {}
   17036:	1141                	c.addi	sp,-16
   17038:	e406                	c.sdsp	ra,8(sp)
   1703a:	e022                	c.sdsp	s0,0(sp)
   1703c:	00022797          	auipc	a5,0x22
   17040:	56c7b783          	ld	a5,1388(a5) # 395a8 <vtable for dwarf::unit@@Base+0xc3d8>
   17044:	07c1                	c.addi	a5,16
   17046:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   17048:	6900                	c.ld	s0,16(a0)
   1704a:	cc19                	c.beqz	s0,17068 <dwarf::unit::~unit()+0x32>
    if (__is_single_threaded())
   1704c:	00022797          	auipc	a5,0x22
   17050:	42c7b783          	ld	a5,1068(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17054:	0007c783          	lbu	a5,0(a5)
   17058:	cf81                	c.beqz	a5,17070 <dwarf::unit::~unit()+0x3a>
    _Atomic_word __result = *__mem;
   1705a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1705c:	fff5079b          	addiw	a5,a0,-1
   17060:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17062:	4785                	c.li	a5,1
   17064:	00f50c63          	beq	a0,a5,1707c <dwarf::unit::~unit()+0x46>
   17068:	60a2                	c.ldsp	ra,8(sp)
   1706a:	6402                	c.ldsp	s0,0(sp)
   1706c:	0141                	c.addi	sp,16
   1706e:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   17070:	55fd                	c.li	a1,-1
   17072:	03040513          	addi	a0,s0,48
   17076:	abaff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1707a:	b7e5                	c.j	17062 <dwarf::unit::~unit()+0x2c>
	_M_dispose();
   1707c:	601c                	c.ld	a5,0(s0)
   1707e:	6b9c                	c.ld	a5,16(a5)
   17080:	8522                	c.mv	a0,s0
   17082:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17084:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17088:	00022797          	auipc	a5,0x22
   1708c:	3f07b783          	ld	a5,1008(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17090:	0007c783          	lbu	a5,0(a5)
   17094:	cf89                	c.beqz	a5,170ae <dwarf::unit::~unit()+0x78>
    _Atomic_word __result = *__mem;
   17096:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17098:	fff5079b          	addiw	a5,a0,-1
   1709c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1709e:	4785                	c.li	a5,1
   170a0:	fcf514e3          	bne	a0,a5,17068 <dwarf::unit::~unit()+0x32>
	    _M_destroy();
   170a4:	601c                	c.ld	a5,0(s0)
   170a6:	6f9c                	c.ld	a5,24(a5)
   170a8:	8522                	c.mv	a0,s0
   170aa:	9782                	c.jalr	a5
   170ac:	bf75                	c.j	17068 <dwarf::unit::~unit()+0x32>
      return __exchange_and_add(__mem, __val);
   170ae:	55fd                	c.li	a1,-1
   170b0:	03440513          	addi	a0,s0,52
   170b4:	a7cff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   170b8:	b7dd                	c.j	1709e <dwarf::unit::~unit()+0x68>

00000000000170ba <dwarf::unit::~unit()>:
   170ba:	1141                	c.addi	sp,-16
   170bc:	e406                	c.sdsp	ra,8(sp)
   170be:	e022                	c.sdsp	s0,0(sp)
   170c0:	842a                	c.mv	s0,a0
   170c2:	f75ff0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   170c6:	8522                	c.mv	a0,s0
   170c8:	be8ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   170cc:	60a2                	c.ldsp	ra,8(sp)
   170ce:	6402                	c.ldsp	s0,0(sp)
   170d0:	0141                	c.addi	sp,16
   170d2:	8082                	c.jr	ra

00000000000170d4 <dwarf::unit::get_dwarf() const>:

const dwarf &unit::get_dwarf() const { return m->file; }
   170d4:	6508                	c.ld	a0,8(a0)
   170d6:	8082                	c.jr	ra

00000000000170d8 <dwarf::unit::get_section_offset() const>:

section_offset unit::get_section_offset() const { return m->offset; }
   170d8:	651c                	c.ld	a5,8(a0)
   170da:	6b88                	c.ld	a0,16(a5)
   170dc:	8082                	c.jr	ra

00000000000170de <dwarf::unit::data() const>:
    m->root.read(m->root_offset);
  }
  return m->root;
}

const std::shared_ptr<section> &unit::data() const { return m->subsec; }
   170de:	6508                	c.ld	a0,8(a0)
   170e0:	0561                	c.addi	a0,24
   170e2:	8082                	c.jr	ra

00000000000170e4 <dwarf::type_unit::get_type_signature() const>:

  m = make_shared<impl>(file, offset, subsec, debug_abbrev_offset,
                        sub.get_section_offset(), type_signature, type_offset);
}

uint64_t type_unit::get_type_signature() const { return m->type_signature; }
   170e4:	651c                	c.ld	a5,8(a0)
   170e6:	7f88                	c.ld	a0,56(a5)
   170e8:	8082                	c.jr	ra

00000000000170ea <dwarf::dwarf::get_section(dwarf::section_type) const>:
std::shared_ptr<section> dwarf::get_section(section_type type) const {
   170ea:	7171                	c.addi16sp	sp,-176
   170ec:	f506                	c.sdsp	ra,168(sp)
   170ee:	f122                	c.sdsp	s0,160(sp)
   170f0:	ed26                	c.sdsp	s1,152(sp)
   170f2:	e94a                	c.sdsp	s2,144(sp)
   170f4:	e54e                	c.sdsp	s3,136(sp)
   170f6:	e152                	c.sdsp	s4,128(sp)
   170f8:	842a                	c.mv	s0,a0
   170fa:	84ae                	c.mv	s1,a1
   170fc:	c632                	c.swsp	a2,12(sp)
  if (type == section_type::info)
   170fe:	470d                	c.li	a4,3
   17100:	02e60d63          	beq	a2,a4,1713a <dwarf::dwarf::get_section(dwarf::section_type) const+0x50>
   17104:	87b2                	c.mv	a5,a2
  if (type == section_type::abbrev)
   17106:	e63d                	c.bnez	a2,17174 <dwarf::dwarf::get_section(dwarf::section_type) const+0x8a>
      { return _M_ptr; }
   17108:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1710a:	7398                	c.ld	a4,32(a5)
   1710c:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   1710e:	7788                	c.ld	a0,40(a5)
   17110:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   17112:	c919                	c.beqz	a0,17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   17114:	00022797          	auipc	a5,0x22
   17118:	3647b783          	ld	a5,868(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1711c:	0007c783          	lbu	a5,0(a5)
   17120:	c7a1                	c.beqz	a5,17168 <dwarf::dwarf::get_section(dwarf::section_type) const+0x7e>
  { *__mem += __val; }
   17122:	591c                	c.lw	a5,48(a0)
   17124:	2785                	c.addiw	a5,1
   17126:	d91c                	c.sw	a5,48(a0)
}
   17128:	8522                	c.mv	a0,s0
   1712a:	70aa                	c.ldsp	ra,168(sp)
   1712c:	740a                	c.ldsp	s0,160(sp)
   1712e:	64ea                	c.ldsp	s1,152(sp)
   17130:	694a                	c.ldsp	s2,144(sp)
   17132:	69aa                	c.ldsp	s3,136(sp)
   17134:	6a0a                	c.ldsp	s4,128(sp)
   17136:	614d                	c.addi16sp	sp,176
   17138:	8082                	c.jr	ra
      { return _M_ptr; }
   1713a:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1713c:	6b98                	c.ld	a4,16(a5)
   1713e:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   17140:	6f88                	c.ld	a0,24(a5)
   17142:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   17144:	d175                	c.beqz	a0,17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   17146:	00022797          	auipc	a5,0x22
   1714a:	3327b783          	ld	a5,818(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1714e:	0007c783          	lbu	a5,0(a5)
   17152:	c789                	c.beqz	a5,1715c <dwarf::dwarf::get_section(dwarf::section_type) const+0x72>
  { *__mem += __val; }
   17154:	591c                	c.lw	a5,48(a0)
   17156:	2785                	c.addiw	a5,1
   17158:	d91c                	c.sw	a5,48(a0)
   1715a:	b7f9                	c.j	17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      __atomic_add(__mem, __val);
   1715c:	4585                	c.li	a1,1
   1715e:	03050513          	addi	a0,a0,48
   17162:	99eff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17166:	b7c9                	c.j	17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
   17168:	4585                	c.li	a1,1
   1716a:	03050513          	addi	a0,a0,48
   1716e:	992ff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17172:	bf5d                	c.j	17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      { return _M_ptr; }
   17174:	618c                	c.ld	a1,0(a1)
      _M_rightmost() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_mbegin() const _GLIBCXX_NOEXCEPT
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17176:	6dd8                	c.ld	a4,152(a1)
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   17178:	09058513          	addi	a0,a1,144
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   1717c:	28070c63          	beq	a4,zero,17414 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
   17180:	862a                	c.mv	a2,a0
   17182:	a019                	c.j	17188 <dwarf::dwarf::get_section(dwarf::section_type) const+0x9e>
      { return static_cast<_Link_type>(__x->_M_right); }
   17184:	6f18                	c.ld	a4,24(a4)
      while (__x != 0)
   17186:	c719                	c.beqz	a4,17194 <dwarf::dwarf::get_section(dwarf::section_type) const+0xaa>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17188:	5314                	c.lw	a3,32(a4)
   1718a:	fef6cde3          	blt	a3,a5,17184 <dwarf::dwarf::get_section(dwarf::section_type) const+0x9a>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1718e:	863a                	c.mv	a2,a4
	  __y = __x, __x = _S_left(__x);
   17190:	6b18                	c.ld	a4,16(a4)
   17192:	bfd5                	c.j	17186 <dwarf::dwarf::get_section(dwarf::section_type) const+0x9c>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   17194:	28c50063          	beq	a0,a2,17414 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
	      || _M_impl._M_key_compare(__k,
   17198:	5218                	c.lw	a4,32(a2)
   1719a:	26e7cd63          	blt	a5,a4,17414 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1719e:	761c                	c.ld	a5,40(a2)
   171a0:	e01c                	c.sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   171a2:	7a08                	c.ld	a0,48(a2)
   171a4:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   171a6:	d149                	c.beqz	a0,17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   171a8:	00022797          	auipc	a5,0x22
   171ac:	2d07b783          	ld	a5,720(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   171b0:	0007c783          	lbu	a5,0(a5)
   171b4:	c789                	c.beqz	a5,171be <dwarf::dwarf::get_section(dwarf::section_type) const+0xd4>
  { *__mem += __val; }
   171b6:	591c                	c.lw	a5,48(a0)
   171b8:	2785                	c.addiw	a5,1
   171ba:	d91c                	c.sw	a5,48(a0)
   171bc:	b7b5                	c.j	17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      __atomic_add(__mem, __val);
   171be:	4585                	c.li	a1,1
   171c0:	03050513          	addi	a0,a0,48
   171c4:	93cff0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   171c8:	b785                	c.j	17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
                       " section missing");
   171ca:	4541                	c.li	a0,16
   171cc:	a04ff0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   171d0:	84aa                	c.mv	s1,a0
    throw format_error(std::string(elf::section_type_to_name(type)) +
   171d2:	4532                	c.lwsp	a0,12(sp)
   171d4:	74f0e0ef          	jal	ra,26122 <dwarf::elf::section_type_to_name(dwarf::section_type)>
   171d8:	85aa                	c.mv	a1,a0
   171da:	08b0                	c.addi4spn	a2,sp,88
   171dc:	0808                	c.addi4spn	a0,sp,16
   171de:	bb2ff0ef          	jal	ra,16590 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
   171e2:	00016597          	auipc	a1,0x16
   171e6:	0be58593          	addi	a1,a1,190 # 2d2a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x30>
   171ea:	0808                	c.addi4spn	a0,sp,16
   171ec:	d54ff0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   171f0:	85aa                	c.mv	a1,a0
   171f2:	1800                	c.addi4spn	s0,sp,48
   171f4:	8522                	c.mv	a0,s0
   171f6:	a1aff0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   171fa:	85a2                	c.mv	a1,s0
   171fc:	8526                	c.mv	a0,s1
   171fe:	b42ff0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   17202:	00022797          	auipc	a5,0x22
   17206:	34e7b783          	ld	a5,846(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   1720a:	07c1                	c.addi	a5,16
   1720c:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1720e:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   17210:	009c                	c.addi4spn	a5,sp,64
   17212:	00f50463          	beq	a0,a5,1721a <dwarf::dwarf::get_section(dwarf::section_type) const+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17216:	a9aff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1721a:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1721c:	101c                	c.addi4spn	a5,sp,32
   1721e:	00f50463          	beq	a0,a5,17226 <dwarf::dwarf::get_section(dwarf::section_type) const+0x13c>
   17222:	a8eff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       " section missing");
   17226:	00022617          	auipc	a2,0x22
   1722a:	15263603          	ld	a2,338(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1722e:	00022597          	auipc	a1,0x22
   17232:	07a5b583          	ld	a1,122(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   17236:	8526                	c.mv	a0,s1
   17238:	c28ff0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return static_cast<_Link_type>(__x->_M_right); }
   1723c:	6f9c                	c.ld	a5,24(a5)
      while (__x != 0)
   1723e:	c799                	c.beqz	a5,1724c <dwarf::dwarf::get_section(dwarf::section_type) const+0x162>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17240:	5398                	c.lw	a4,32(a5)
   17242:	fed74de3          	blt	a4,a3,1723c <dwarf::dwarf::get_section(dwarf::section_type) const+0x152>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17246:	893e                	c.mv	s2,a5
	  __y = __x, __x = _S_left(__x);
   17248:	6b9c                	c.ld	a5,16(a5)
   1724a:	bfd5                	c.j	1723e <dwarf::dwarf::get_section(dwarf::section_type) const+0x154>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   1724c:	0cc90963          	beq	s2,a2,1731e <dwarf::dwarf::get_section(dwarf::section_type) const+0x234>
   17250:	02092783          	lw	a5,32(s2)
   17254:	02f6d363          	bge	a3,a5,1727a <dwarf::dwarf::get_section(dwarf::section_type) const+0x190>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   17258:	007c                	c.addi4spn	a5,sp,12
   1725a:	f4be                	c.sdsp	a5,104(sp)
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   1725c:	1098                	c.addi4spn	a4,sp,96
   1725e:	10b4                	c.addi4spn	a3,sp,104
   17260:	00016617          	auipc	a2,0x16
   17264:	35060613          	addi	a2,a2,848 # 2d5b0 <std::piecewise_construct>
   17268:	85ca                	c.mv	a1,s2
   1726a:	08850513          	addi	a0,a0,136
   1726e:	00022317          	auipc	t1,0x22
   17272:	12a33303          	ld	t1,298(t1) # 39398 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x1efd2>
   17276:	9302                	c.jalr	t1
   17278:	892a                	c.mv	s2,a0
      { return _M_ptr; }
   1727a:	609c                	c.ld	a5,0(s1)
   1727c:	0107ba03          	ld	s4,16(a5)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17280:	06000513          	addi	a0,zero,96
   17284:	a3cff0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   17288:	00052423          	sw	zero,8(a0)
   1728c:	00052623          	sw	zero,12(a0)
   17290:	00052823          	sw	zero,16(a0)
   17294:	00052a23          	sw	zero,20(a0)
   17298:	00052c23          	sw	zero,24(a0)
   1729c:	00052e23          	sw	zero,28(a0)
   172a0:	02053023          	sd	zero,32(a0)
   172a4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   172a8:	4785                	c.li	a5,1
   172aa:	d91c                	c.sw	a5,48(a0)
   172ac:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   172ae:	00022797          	auipc	a5,0x22
   172b2:	30a7b783          	ld	a5,778(a5) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   172b6:	07c1                	c.addi	a5,16
   172b8:	e11c                	c.sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   172ba:	01ca2703          	lw	a4,28(s4)
  const byte_order ord;
  unsigned addr_size;

  section(section_type type, const void *begin, section_length length,
          byte_order ord, format fmt = format::unknown, unsigned addr_size = 0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   172be:	47a9                	c.li	a5,10
   172c0:	dd1c                	c.sw	a5,56(a0)
   172c2:	05353023          	sd	s3,64(a0)
   172c6:	67c6                	c.ldsp	a5,80(sp)
   172c8:	97ce                	c.add	a5,s3
   172ca:	e53c                	c.sd	a5,72(a0)
   172cc:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   172d0:	c978                	c.sw	a4,84(a0)
   172d2:	04052c23          	sw	zero,88(a0)
   172d6:	03850793          	addi	a5,a0,56
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   172da:	02f93423          	sd	a5,40(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   172de:	03093983          	ld	s3,48(s2)
	__r._M_pi = _M_pi;
   172e2:	02a93823          	sd	a0,48(s2)
	if (_M_pi != nullptr)
   172e6:	02098263          	beq	s3,zero,1730a <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
    if (__is_single_threaded())
   172ea:	00022797          	auipc	a5,0x22
   172ee:	18e7b783          	ld	a5,398(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   172f2:	0007c783          	lbu	a5,0(a5)
   172f6:	c795                	c.beqz	a5,17322 <dwarf::dwarf::get_section(dwarf::section_type) const+0x238>
    _Atomic_word __result = *__mem;
   172f8:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   172fc:	fff5079b          	addiw	a5,a0,-1
   17300:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17304:	4785                	c.li	a5,1
   17306:	02f50463          	beq	a0,a5,1732e <dwarf::dwarf::get_section(dwarf::section_type) const+0x244>
      { return _M_ptr; }
   1730a:	6088                	c.ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1730c:	6d5c                	c.ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   1730e:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17312:	c3e1                	c.beqz	a5,173d2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2e8>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   17314:	46b2                	c.lwsp	a3,12(sp)
   17316:	85b2                	c.mv	a1,a2
   17318:	a08d                	c.j	1737a <dwarf::dwarf::get_section(dwarf::section_type) const+0x290>
   1731a:	8932                	c.mv	s2,a2
   1731c:	bf35                	c.j	17258 <dwarf::dwarf::get_section(dwarf::section_type) const+0x16e>
   1731e:	8932                	c.mv	s2,a2
   17320:	bf25                	c.j	17258 <dwarf::dwarf::get_section(dwarf::section_type) const+0x16e>
      return __exchange_and_add(__mem, __val);
   17322:	55fd                	c.li	a1,-1
   17324:	03098513          	addi	a0,s3,48
   17328:	808ff0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1732c:	bfe1                	c.j	17304 <dwarf::dwarf::get_section(dwarf::section_type) const+0x21a>
	_M_dispose();
   1732e:	0009b783          	ld	a5,0(s3)
   17332:	6b9c                	c.ld	a5,16(a5)
   17334:	854e                	c.mv	a0,s3
   17336:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17338:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1733c:	00022797          	auipc	a5,0x22
   17340:	13c7b783          	ld	a5,316(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17344:	0007c783          	lbu	a5,0(a5)
   17348:	c385                	c.beqz	a5,17368 <dwarf::dwarf::get_section(dwarf::section_type) const+0x27e>
    _Atomic_word __result = *__mem;
   1734a:	0349a783          	lw	a5,52(s3)
    *__mem += __val;
   1734e:	fff7871b          	addiw	a4,a5,-1
   17352:	02e9aa23          	sw	a4,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17356:	4705                	c.li	a4,1
   17358:	fae799e3          	bne	a5,a4,1730a <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
	    _M_destroy();
   1735c:	0009b783          	ld	a5,0(s3)
   17360:	6f9c                	c.ld	a5,24(a5)
   17362:	854e                	c.mv	a0,s3
   17364:	9782                	c.jalr	a5
   17366:	b755                	c.j	1730a <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
      return __exchange_and_add(__mem, __val);
   17368:	55fd                	c.li	a1,-1
   1736a:	03498513          	addi	a0,s3,52
   1736e:	fc3fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17372:	87aa                	c.mv	a5,a0
   17374:	b7cd                	c.j	17356 <dwarf::dwarf::get_section(dwarf::section_type) const+0x26c>
      { return static_cast<_Link_type>(__x->_M_right); }
   17376:	6f9c                	c.ld	a5,24(a5)
      while (__x != 0)
   17378:	c799                	c.beqz	a5,17386 <dwarf::dwarf::get_section(dwarf::section_type) const+0x29c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1737a:	5398                	c.lw	a4,32(a5)
   1737c:	fed74de3          	blt	a4,a3,17376 <dwarf::dwarf::get_section(dwarf::section_type) const+0x28c>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17380:	85be                	c.mv	a1,a5
	  __y = __x, __x = _S_left(__x);
   17382:	6b9c                	c.ld	a5,16(a5)
   17384:	bfd5                	c.j	17378 <dwarf::dwarf::get_section(dwarf::section_type) const+0x28e>
	if (__i == end() || key_comp()(__k, (*__i).first))
   17386:	04c58863          	beq	a1,a2,173d6 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2ec>
   1738a:	519c                	c.lw	a5,32(a1)
   1738c:	02f6d263          	bge	a3,a5,173b0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2c6>
   17390:	007c                	c.addi4spn	a5,sp,12
   17392:	fcbe                	c.sdsp	a5,120(sp)
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17394:	1898                	c.addi4spn	a4,sp,112
   17396:	18b4                	c.addi4spn	a3,sp,120
   17398:	00016617          	auipc	a2,0x16
   1739c:	21860613          	addi	a2,a2,536 # 2d5b0 <std::piecewise_construct>
   173a0:	08850513          	addi	a0,a0,136
   173a4:	00022317          	auipc	t1,0x22
   173a8:	ff433303          	ld	t1,-12(t1) # 39398 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x1efd2>
   173ac:	9302                	c.jalr	t1
   173ae:	85aa                	c.mv	a1,a0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   173b0:	759c                	c.ld	a5,40(a1)
   173b2:	e01c                	c.sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   173b4:	7988                	c.ld	a0,48(a1)
   173b6:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   173b8:	d60508e3          	beq	a0,zero,17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   173bc:	00022797          	auipc	a5,0x22
   173c0:	0bc7b783          	ld	a5,188(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   173c4:	0007c783          	lbu	a5,0(a5)
   173c8:	cb89                	c.beqz	a5,173da <dwarf::dwarf::get_section(dwarf::section_type) const+0x2f0>
  { *__mem += __val; }
   173ca:	591c                	c.lw	a5,48(a0)
   173cc:	2785                	c.addiw	a5,1
   173ce:	d91c                	c.sw	a5,48(a0)
   173d0:	bba1                	c.j	17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      while (__x != 0)
   173d2:	85b2                	c.mv	a1,a2
   173d4:	bf75                	c.j	17390 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2a6>
   173d6:	85b2                	c.mv	a1,a2
   173d8:	bf65                	c.j	17390 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2a6>
      __atomic_add(__mem, __val);
   173da:	4585                	c.li	a1,1
   173dc:	03050513          	addi	a0,a0,48
   173e0:	f21fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   173e4:	b391                	c.j	17128 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      { return _M_dataplus._M_p; }
   173e6:	842a                	c.mv	s0,a0
   173e8:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   173ea:	009c                	c.addi4spn	a5,sp,64
   173ec:	00f50463          	beq	a0,a5,173f4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x30a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   173f0:	8c0ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   173f4:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   173f6:	101c                	c.addi4spn	a5,sp,32
   173f8:	00f50463          	beq	a0,a5,17400 <dwarf::dwarf::get_section(dwarf::section_type) const+0x316>
   173fc:	8b4ff0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   17400:	8526                	c.mv	a0,s1
   17402:	86eff0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   17406:	8522                	c.mv	a0,s0
   17408:	a88ff0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1740c:	842a                	c.mv	s0,a0
   1740e:	b7dd                	c.j	173f4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x30a>
   17410:	842a                	c.mv	s0,a0
   17412:	b7fd                	c.j	17400 <dwarf::dwarf::get_section(dwarf::section_type) const+0x316>
      { return _M_ptr; }
   17414:	6188                	c.ld	a0,0(a1)
  const void *data = m->l->load(type, &size);
   17416:	6118                	c.ld	a4,0(a0)
   17418:	6b18                	c.ld	a4,16(a4)
   1741a:	0890                	c.addi4spn	a2,sp,80
   1741c:	85be                	c.mv	a1,a5
   1741e:	9702                	c.jalr	a4
   17420:	89aa                	c.mv	s3,a0
  if (!data)
   17422:	da0504e3          	beq	a0,zero,171ca <dwarf::dwarf::get_section(dwarf::section_type) const+0xe0>
   17426:	6088                	c.ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17428:	6d5c                	c.ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   1742a:	09050613          	addi	a2,a0,144
      while (__x != 0)
   1742e:	ee0786e3          	beq	a5,zero,1731a <dwarf::dwarf::get_section(dwarf::section_type) const+0x230>
   17432:	46b2                	c.lwsp	a3,12(sp)
   17434:	8932                	c.mv	s2,a2
   17436:	b529                	c.j	17240 <dwarf::dwarf::get_section(dwarf::section_type) const+0x156>

0000000000017438 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>:
compilation_unit::compilation_unit(const dwarf &file, section_offset offset) {
   17438:	7155                	c.addi16sp	sp,-208
   1743a:	e586                	c.sdsp	ra,200(sp)
   1743c:	e1a2                	c.sdsp	s0,192(sp)
   1743e:	fd26                	c.sdsp	s1,184(sp)
   17440:	f94a                	c.sdsp	s2,176(sp)
   17442:	f54e                	c.sdsp	s3,168(sp)
   17444:	f152                	c.sdsp	s4,160(sp)
   17446:	ed56                	c.sdsp	s5,152(sp)
   17448:	e95a                	c.sdsp	s6,144(sp)
   1744a:	84aa                	c.mv	s1,a0
   1744c:	892e                	c.mv	s2,a1
   1744e:	89b2                	c.mv	s3,a2
      : _M_ptr(0), _M_refcount()
   17450:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17454:	00053823          	sd	zero,16(a0)
   17458:	00022797          	auipc	a5,0x22
   1745c:	e587b783          	ld	a5,-424(a5) # 392b0 <vtable for dwarf::compilation_unit@@Base+0xc0c0>
   17460:	07c1                	c.addi	a5,16
   17462:	e11c                	c.sd	a5,0(a0)
  cursor cur(file.get_section(section_type::info), offset);
   17464:	460d                	c.li	a2,3
   17466:	0108                	c.addi4spn	a0,sp,128
   17468:	c83ff0ef          	jal	ra,170ea <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1746c:	678a                	c.ldsp	a5,128(sp)
   1746e:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   17470:	652a                	c.ldsp	a0,136(sp)
   17472:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   17474:	c919                	c.beqz	a0,1748a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x52>
    if (__is_single_threaded())
   17476:	00022797          	auipc	a5,0x22
   1747a:	0027b783          	ld	a5,2(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1747e:	0007c783          	lbu	a5,0(a5)
   17482:	cf8d                	c.beqz	a5,174bc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
  { *__mem += __val; }
   17484:	591c                	c.lw	a5,48(a0)
   17486:	2785                	c.addiw	a5,1
   17488:	d91c                	c.sw	a5,48(a0)
  std::shared_ptr<section> sec;
  const char *pos;

  cursor() : pos(nullptr) {}
  cursor(const std::shared_ptr<section> sec, section_offset offset = 0)
      : sec(sec), pos(sec->begin + offset) {}
   1748a:	678a                	c.ldsp	a5,128(sp)
   1748c:	679c                	c.ld	a5,8(a5)
   1748e:	97ce                	c.add	a5,s3
   17490:	f03e                	c.sdsp	a5,32(sp)
	if (_M_pi != nullptr)
   17492:	642a                	c.ldsp	s0,136(sp)
   17494:	cc19                	c.beqz	s0,174b2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
    if (__is_single_threaded())
   17496:	00022797          	auipc	a5,0x22
   1749a:	fe27b783          	ld	a5,-30(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1749e:	0007c783          	lbu	a5,0(a5)
   174a2:	c39d                	c.beqz	a5,174c8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x90>
    _Atomic_word __result = *__mem;
   174a4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   174a6:	fff5079b          	addiw	a5,a0,-1
   174aa:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   174ac:	4785                	c.li	a5,1
   174ae:	02f50363          	beq	a0,a5,174d4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x9c>
  std::shared_ptr<section> subsec = cur.subsection();
   174b2:	080c                	c.addi4spn	a1,sp,16
   174b4:	850a                	c.mv	a0,sp
   174b6:	313030ef          	jal	ra,1afc8 <dwarf::cursor::subsection()>
   174ba:	a8a1                	c.j	17512 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xda>
      __atomic_add(__mem, __val);
   174bc:	4585                	c.li	a1,1
   174be:	03050513          	addi	a0,a0,48
   174c2:	e3ffe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   174c6:	b7d1                	c.j	1748a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x52>
      return __exchange_and_add(__mem, __val);
   174c8:	55fd                	c.li	a1,-1
   174ca:	03040513          	addi	a0,s0,48
   174ce:	e63fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   174d2:	bfe9                	c.j	174ac <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x74>
	_M_dispose();
   174d4:	601c                	c.ld	a5,0(s0)
   174d6:	6b9c                	c.ld	a5,16(a5)
   174d8:	8522                	c.mv	a0,s0
   174da:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   174dc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   174e0:	00022797          	auipc	a5,0x22
   174e4:	f987b783          	ld	a5,-104(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   174e8:	0007c783          	lbu	a5,0(a5)
   174ec:	cf89                	c.beqz	a5,17506 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xce>
    _Atomic_word __result = *__mem;
   174ee:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   174f0:	fff5079b          	addiw	a5,a0,-1
   174f4:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   174f6:	4785                	c.li	a5,1
   174f8:	faf51de3          	bne	a0,a5,174b2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
	    _M_destroy();
   174fc:	601c                	c.ld	a5,0(s0)
   174fe:	6f9c                	c.ld	a5,24(a5)
   17500:	8522                	c.mv	a0,s0
   17502:	9782                	c.jalr	a5
   17504:	b77d                	c.j	174b2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
      return __exchange_and_add(__mem, __val);
   17506:	55fd                	c.li	a1,-1
   17508:	03440513          	addi	a0,s0,52
   1750c:	e25fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17510:	b7dd                	c.j	174f6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xbe>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17512:	6a02                	c.ldsp	s4,0(sp)
      : _M_pi(__r._M_pi)
   17514:	6422                	c.ldsp	s0,8(sp)
	if (_M_pi != nullptr)
   17516:	50040d63          	beq	s0,zero,17a30 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5f8>
    if (__is_single_threaded())
   1751a:	00022797          	auipc	a5,0x22
   1751e:	f5e7b783          	ld	a5,-162(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17522:	0007c783          	lbu	a5,0(a5)
   17526:	cbb5                	c.beqz	a5,1759a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x162>
  { *__mem += __val; }
   17528:	581c                	c.lw	a5,48(s0)
   1752a:	2785                	c.addiw	a5,1
   1752c:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1752e:	f452                	c.sdsp	s4,40(sp)
      : _M_pi(__r._M_pi)
   17530:	f822                	c.sdsp	s0,48(sp)
    if (__is_single_threaded())
   17532:	00022797          	auipc	a5,0x22
   17536:	f467b783          	ld	a5,-186(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1753a:	0007c783          	lbu	a5,0(a5)
   1753e:	c7a5                	c.beqz	a5,175a6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x16e>
  { *__mem += __val; }
   17540:	581c                	c.lw	a5,48(s0)
   17542:	2785                	c.addiw	a5,1
   17544:	d81c                	c.sw	a5,48(s0)
   17546:	008a3783          	ld	a5,8(s4)
   1754a:	fc3e                	c.sdsp	a5,56(sp)
    if (__is_single_threaded())
   1754c:	00022797          	auipc	a5,0x22
   17550:	f2c7b783          	ld	a5,-212(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17554:	0007c783          	lbu	a5,0(a5)
   17558:	cfa9                	c.beqz	a5,175b2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x17a>
    _Atomic_word __result = *__mem;
   1755a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1755c:	fff5079b          	addiw	a5,a0,-1
   17560:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17562:	4785                	c.li	a5,1
   17564:	4cf51b63          	bne	a0,a5,17a3a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
	_M_dispose();
   17568:	601c                	c.ld	a5,0(s0)
   1756a:	6b9c                	c.ld	a5,16(a5)
   1756c:	8522                	c.mv	a0,s0
   1756e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17570:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17574:	00022797          	auipc	a5,0x22
   17578:	f047b783          	ld	a5,-252(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1757c:	0007c783          	lbu	a5,0(a5)
   17580:	cf9d                	c.beqz	a5,175be <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x186>
    _Atomic_word __result = *__mem;
   17582:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17584:	fff5079b          	addiw	a5,a0,-1
   17588:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1758a:	4785                	c.li	a5,1
   1758c:	4af51763          	bne	a0,a5,17a3a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
	    _M_destroy();
   17590:	601c                	c.ld	a5,0(s0)
   17592:	6f9c                	c.ld	a5,24(a5)
   17594:	8522                	c.mv	a0,s0
   17596:	9782                	c.jalr	a5
   17598:	a14d                	c.j	17a3a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
      __atomic_add(__mem, __val);
   1759a:	4585                	c.li	a1,1
   1759c:	03040513          	addi	a0,s0,48
   175a0:	d61fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   175a4:	b769                	c.j	1752e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xf6>
   175a6:	4585                	c.li	a1,1
   175a8:	03040513          	addi	a0,s0,48
   175ac:	d55fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   175b0:	bf59                	c.j	17546 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x10e>
      return __exchange_and_add(__mem, __val);
   175b2:	55fd                	c.li	a1,-1
   175b4:	03040513          	addi	a0,s0,48
   175b8:	d79fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   175bc:	b75d                	c.j	17562 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x12a>
   175be:	55fd                	c.li	a1,-1
   175c0:	03440513          	addi	a0,s0,52
   175c4:	d6dfe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   175c8:	b7c9                	c.j	1758a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x152>
  section_offset offset();
  void string(std::string &out);
  const char *cstr(size_t *size_out = nullptr);

  void ensure(section_offset bytes) {
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   175ca:	77a2                	c.ldsp	a5,40(sp)
   175cc:	6b98                	c.ld	a4,16(a5)
   175ce:	77e2                	c.ldsp	a5,56(sp)
   175d0:	40f70633          	sub	a2,a4,a5
   175d4:	4685                	c.li	a3,1
   175d6:	00c6f463          	bgeu	a3,a2,175de <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1a6>
   175da:	00e7e563          	bltu	a5,a4,175e4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1ac>
      underflow();
   175de:	1028                	c.addi4spn	a0,sp,40
   175e0:	658030ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>

  template <typename T> T fixed() {
    ensure(sizeof(T));
    static_assert(sizeof(T) <= 8, "T too big");
    uint64_t val = 0;
    const unsigned char *p = (const unsigned char *)pos;
   175e4:	7762                	c.ldsp	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   175e6:	77a2                	c.ldsp	a5,40(sp)
   175e8:	4fdc                	c.lw	a5,28(a5)
   175ea:	e795                	c.bnez	a5,17616 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1de>
      for (unsigned i = 0; i < sizeof(T); i++)
        val |= ((uint64_t)p[i]) << (i * 8);
   175ec:	00174783          	lbu	a5,1(a4)
   175f0:	07a2                	c.slli	a5,0x8
   175f2:	00074683          	lbu	a3,0(a4)
   175f6:	8fd5                	c.or	a5,a3
    } else {
      for (unsigned i = 0; i < sizeof(T); i++)
        val = (val << 8) | (uint64_t)p[i];
    }
    pos += sizeof(T);
   175f8:	0709                	c.addi	a4,2
   175fa:	fc3a                	c.sdsp	a4,56(sp)
    return (T)val;
   175fc:	03079413          	slli	s0,a5,0x30
   17600:	9041                	c.srli	s0,0x30
  if (version < 2 || version > 4)
   17602:	37f9                	c.addiw	a5,-2
   17604:	17c2                	c.slli	a5,0x30
   17606:	93c1                	c.srli	a5,0x30
   17608:	4709                	c.li	a4,2
   1760a:	00f76d63          	bltu	a4,a5,17624 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1ec>
  section_offset debug_abbrev_offset = sub.offset();
   1760e:	1028                	c.addi4spn	a0,sp,40
   17610:	34f030ef          	jal	ra,1b15e <dwarf::cursor::offset()>
   17614:	a069                	c.j	1769e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x266>
        val = (val << 8) | (uint64_t)p[i];
   17616:	00074783          	lbu	a5,0(a4)
   1761a:	07a2                	c.slli	a5,0x8
   1761c:	00174683          	lbu	a3,1(a4)
   17620:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17622:	bfd9                	c.j	175f8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1c0>
                       std::to_string(version));
   17624:	4541                	c.li	a0,16
   17626:	dabfe0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1762a:	892a                	c.mv	s2,a0
   1762c:	85a2                	c.mv	a1,s0
   1762e:	1080                	c.addi4spn	s0,sp,96
   17630:	8522                	c.mv	a0,s0
   17632:	00022317          	auipc	t1,0x22
   17636:	e5633303          	ld	t1,-426(t1) # 39488 <std::__cxx11::to_string(int)@@Base+0x1fbc8>
   1763a:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   1763c:	00016617          	auipc	a2,0x16
   17640:	c7c60613          	addi	a2,a2,-900 # 2d2b8 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x48>
   17644:	4581                	c.li	a1,0
   17646:	8522                	c.mv	a0,s0
   17648:	cf9fe0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1764c:	85aa                	c.mv	a1,a0
   1764e:	0080                	c.addi4spn	s0,sp,64
   17650:	8522                	c.mv	a0,s0
   17652:	dbffe0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   17656:	85a2                	c.mv	a1,s0
   17658:	854a                	c.mv	a0,s2
   1765a:	ee7fe0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1765e:	00022797          	auipc	a5,0x22
   17662:	ef27b783          	ld	a5,-270(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   17666:	07c1                	c.addi	a5,16
   17668:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1766c:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1766e:	089c                	c.addi4spn	a5,sp,80
   17670:	00f50463          	beq	a0,a5,17678 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x240>
   17674:	e3dfe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17678:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   1767a:	189c                	c.addi4spn	a5,sp,112
   1767c:	00f50463          	beq	a0,a5,17684 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x24c>
   17680:	e31fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   17684:	00022617          	auipc	a2,0x22
   17688:	cf463603          	ld	a2,-780(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1768c:	00022597          	auipc	a1,0x22
   17690:	c1c5b583          	ld	a1,-996(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   17694:	854a                	c.mv	a0,s2
   17696:	fcbfe0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1769a:	842a                	c.mv	s0,a0
   1769c:	ae1d                	c.j	179d2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59a>
  section_offset debug_abbrev_offset = sub.offset();
   1769e:	8aaa                	c.mv	s5,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   176a0:	77a2                	c.ldsp	a5,40(sp)
   176a2:	6b98                	c.ld	a4,16(a5)
   176a4:	77e2                	c.ldsp	a5,56(sp)
   176a6:	00e7e563          	bltu	a5,a4,176b0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x278>
      underflow();
   176aa:	1028                	c.addi4spn	a0,sp,40
   176ac:	58c030ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   176b0:	77e2                	c.ldsp	a5,56(sp)
      { return _M_ptr; }
   176b2:	7722                	c.ldsp	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   176b4:	4f54                	c.lw	a3,28(a4)
   176b6:	34068f63          	beq	a3,zero,17a14 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5dc>
        val = (val << 8) | (uint64_t)p[i];
   176ba:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   176be:	aea9                	c.j	17a18 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5e0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   176c0:	842a                	c.mv	s0,a0
   176c2:	00052423          	sw	zero,8(a0)
   176c6:	00052623          	sw	zero,12(a0)
   176ca:	00052823          	sw	zero,16(a0)
   176ce:	00052a23          	sw	zero,20(a0)
   176d2:	00052c23          	sw	zero,24(a0)
   176d6:	00052e23          	sw	zero,28(a0)
   176da:	02053023          	sd	zero,32(a0)
   176de:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   176e2:	4785                	c.li	a5,1
   176e4:	d91c                	c.sw	a5,48(a0)
   176e6:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   176e8:	00022797          	auipc	a5,0x22
   176ec:	d487b783          	ld	a5,-696(a5) # 39430 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa48>
   176f0:	07c1                	c.addi	a5,16
   176f2:	e11c                	c.sd	a5,0(a0)
   176f4:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   176f8:	00093783          	ld	a5,0(s2)
   176fc:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   176fe:	00893503          	ld	a0,8(s2)
   17702:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   17704:	cd01                	c.beqz	a0,1771c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2e4>
    if (__is_single_threaded())
   17706:	00022797          	auipc	a5,0x22
   1770a:	d727b783          	ld	a5,-654(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1770e:	0007c783          	lbu	a5,0(a5)
   17712:	14078c63          	beq	a5,zero,1786a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x432>
  { *__mem += __val; }
   17716:	591c                	c.lw	a5,48(a0)
   17718:	2785                	c.addiw	a5,1
   1771a:	d91c                	c.sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   1771c:	05343423          	sd	s3,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17720:	6782                	c.ldsp	a5,0(sp)
   17722:	e83c                	c.sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   17724:	6522                	c.ldsp	a0,8(sp)
   17726:	ec28                	c.sd	a0,88(s0)
	if (_M_pi != nullptr)
   17728:	cd01                	c.beqz	a0,17740 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x308>
    if (__is_single_threaded())
   1772a:	00022797          	auipc	a5,0x22
   1772e:	d4e7b783          	ld	a5,-690(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17732:	0007c783          	lbu	a5,0(a5)
   17736:	14078063          	beq	a5,zero,17876 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x43e>
  { *__mem += __val; }
   1773a:	591c                	c.lw	a5,48(a0)
   1773c:	2785                	c.addiw	a5,1
   1773e:	d91c                	c.sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   17740:	07543023          	sd	s5,96(s0)
   17744:	07443423          	sd	s4,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   17748:	06043823          	sd	zero,112(s0)
   1774c:	06043c23          	sd	zero,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   17750:	08043423          	sd	zero,136(s0)
   17754:	08043823          	sd	zero,144(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   17758:	0a040793          	addi	a5,s0,160
   1775c:	e87c                	c.sd	a5,208(s0)
   1775e:	ec7c                	c.sd	a5,216(s0)
   17760:	0d040793          	addi	a5,s0,208
   17764:	f07c                	c.sd	a5,224(s0)
   17766:	0e043c23          	sd	zero,248(s0)
   1776a:	10043023          	sd	zero,256(s0)
   1776e:	11040793          	addi	a5,s0,272
   17772:	14f43023          	sd	a5,320(s0)
   17776:	14f43423          	sd	a5,328(s0)
   1777a:	14040793          	addi	a5,s0,320
   1777e:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   17782:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17786:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   1778a:	16040823          	sb	zero,368(s0)
   1778e:	16043c23          	sd	zero,376(s0)
   17792:	18043023          	sd	zero,384(s0)
   17796:	18043423          	sd	zero,392(s0)
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
   1779a:	1c040793          	addi	a5,s0,448
   1779e:	18f43823          	sd	a5,400(s0)
   177a2:	4785                	c.li	a5,1
   177a4:	18f43c23          	sd	a5,408(s0)
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
   177a8:	1a043023          	sd	zero,416(s0)
   177ac:	1a043423          	sd	zero,424(s0)
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   177b0:	00016797          	auipc	a5,0x16
   177b4:	df87a787          	flw	fa5,-520(a5) # 2d5a8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   177b8:	1af42827          	fsw	fa5,432(s0)
   177bc:	1a043c23          	sd	zero,440(s0)
   177c0:	1c043023          	sd	zero,448(s0)
   177c4:	0164b423          	sd	s6,8(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   177c8:	0104b903          	ld	s2,16(s1)
	__r._M_pi = _M_pi;
   177cc:	e880                	c.sd	s0,16(s1)
	if (_M_pi != nullptr)
   177ce:	02090263          	beq	s2,zero,177f2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
    if (__is_single_threaded())
   177d2:	00022797          	auipc	a5,0x22
   177d6:	ca67b783          	ld	a5,-858(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   177da:	0007c783          	lbu	a5,0(a5)
   177de:	c3d5                	c.beqz	a5,17882 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x44a>
    _Atomic_word __result = *__mem;
   177e0:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   177e4:	fff5079b          	addiw	a5,a0,-1
   177e8:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   177ec:	4785                	c.li	a5,1
   177ee:	0af50063          	beq	a0,a5,1788e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x456>
	if (_M_pi != nullptr)
   177f2:	7442                	c.ldsp	s0,48(sp)
   177f4:	cc19                	c.beqz	s0,17812 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
    if (__is_single_threaded())
   177f6:	00022797          	auipc	a5,0x22
   177fa:	c827b783          	ld	a5,-894(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   177fe:	0007c783          	lbu	a5,0(a5)
   17802:	cbe9                	c.beqz	a5,178d4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x49c>
    _Atomic_word __result = *__mem;
   17804:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17806:	fff5079b          	addiw	a5,a0,-1
   1780a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1780c:	4785                	c.li	a5,1
   1780e:	0cf50963          	beq	a0,a5,178e0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
	if (_M_pi != nullptr)
   17812:	6422                	c.ldsp	s0,8(sp)
   17814:	c005                	c.beqz	s0,17834 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
    if (__is_single_threaded())
   17816:	00022797          	auipc	a5,0x22
   1781a:	c627b783          	ld	a5,-926(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1781e:	0007c783          	lbu	a5,0(a5)
   17822:	0e078e63          	beq	a5,zero,1791e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4e6>
    _Atomic_word __result = *__mem;
   17826:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17828:	fff5079b          	addiw	a5,a0,-1
   1782c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1782e:	4785                	c.li	a5,1
   17830:	0ef50d63          	beq	a0,a5,1792a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4f2>
	if (_M_pi != nullptr)
   17834:	6462                	c.ldsp	s0,24(sp)
   17836:	c005                	c.beqz	s0,17856 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
    if (__is_single_threaded())
   17838:	00022797          	auipc	a5,0x22
   1783c:	c407b783          	ld	a5,-960(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17840:	0007c783          	lbu	a5,0(a5)
   17844:	12078263          	beq	a5,zero,17968 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x530>
    _Atomic_word __result = *__mem;
   17848:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1784a:	fff5079b          	addiw	a5,a0,-1
   1784e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17850:	4785                	c.li	a5,1
   17852:	12f50163          	beq	a0,a5,17974 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x53c>
}
   17856:	60ae                	c.ldsp	ra,200(sp)
   17858:	640e                	c.ldsp	s0,192(sp)
   1785a:	74ea                	c.ldsp	s1,184(sp)
   1785c:	794a                	c.ldsp	s2,176(sp)
   1785e:	79aa                	c.ldsp	s3,168(sp)
   17860:	7a0a                	c.ldsp	s4,160(sp)
   17862:	6aea                	c.ldsp	s5,152(sp)
   17864:	6b4a                	c.ldsp	s6,144(sp)
   17866:	6169                	c.addi16sp	sp,208
   17868:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   1786a:	4585                	c.li	a1,1
   1786c:	03050513          	addi	a0,a0,48
   17870:	a91fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17874:	b565                	c.j	1771c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2e4>
   17876:	4585                	c.li	a1,1
   17878:	03050513          	addi	a0,a0,48
   1787c:	a85fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17880:	b5c1                	c.j	17740 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x308>
      return __exchange_and_add(__mem, __val);
   17882:	55fd                	c.li	a1,-1
   17884:	03090513          	addi	a0,s2,48
   17888:	aa9fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1788c:	b785                	c.j	177ec <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3b4>
	_M_dispose();
   1788e:	00093783          	ld	a5,0(s2)
   17892:	6b9c                	c.ld	a5,16(a5)
   17894:	854a                	c.mv	a0,s2
   17896:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17898:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1789c:	00022797          	auipc	a5,0x22
   178a0:	bdc7b783          	ld	a5,-1060(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   178a4:	0007c783          	lbu	a5,0(a5)
   178a8:	c385                	c.beqz	a5,178c8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x490>
    _Atomic_word __result = *__mem;
   178aa:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   178ae:	fff5079b          	addiw	a5,a0,-1
   178b2:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   178b6:	4785                	c.li	a5,1
   178b8:	f2f51de3          	bne	a0,a5,177f2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
	    _M_destroy();
   178bc:	00093783          	ld	a5,0(s2)
   178c0:	6f9c                	c.ld	a5,24(a5)
   178c2:	854a                	c.mv	a0,s2
   178c4:	9782                	c.jalr	a5
   178c6:	b735                	c.j	177f2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
      return __exchange_and_add(__mem, __val);
   178c8:	55fd                	c.li	a1,-1
   178ca:	03490513          	addi	a0,s2,52
   178ce:	a63fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   178d2:	b7d5                	c.j	178b6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x47e>
   178d4:	55fd                	c.li	a1,-1
   178d6:	03040513          	addi	a0,s0,48
   178da:	a57fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   178de:	b73d                	c.j	1780c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3d4>
	_M_dispose();
   178e0:	601c                	c.ld	a5,0(s0)
   178e2:	6b9c                	c.ld	a5,16(a5)
   178e4:	8522                	c.mv	a0,s0
   178e6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   178e8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   178ec:	00022797          	auipc	a5,0x22
   178f0:	b8c7b783          	ld	a5,-1140(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   178f4:	0007c783          	lbu	a5,0(a5)
   178f8:	cf89                	c.beqz	a5,17912 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4da>
    _Atomic_word __result = *__mem;
   178fa:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   178fc:	fff5079b          	addiw	a5,a0,-1
   17900:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17902:	4785                	c.li	a5,1
   17904:	f0f517e3          	bne	a0,a5,17812 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
	    _M_destroy();
   17908:	601c                	c.ld	a5,0(s0)
   1790a:	6f9c                	c.ld	a5,24(a5)
   1790c:	8522                	c.mv	a0,s0
   1790e:	9782                	c.jalr	a5
   17910:	b709                	c.j	17812 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
      return __exchange_and_add(__mem, __val);
   17912:	55fd                	c.li	a1,-1
   17914:	03440513          	addi	a0,s0,52
   17918:	a19fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1791c:	b7dd                	c.j	17902 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4ca>
   1791e:	55fd                	c.li	a1,-1
   17920:	03040513          	addi	a0,s0,48
   17924:	a0dfe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17928:	b719                	c.j	1782e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3f6>
	_M_dispose();
   1792a:	601c                	c.ld	a5,0(s0)
   1792c:	6b9c                	c.ld	a5,16(a5)
   1792e:	8522                	c.mv	a0,s0
   17930:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17932:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17936:	00022797          	auipc	a5,0x22
   1793a:	b427b783          	ld	a5,-1214(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1793e:	0007c783          	lbu	a5,0(a5)
   17942:	cf89                	c.beqz	a5,1795c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x524>
    _Atomic_word __result = *__mem;
   17944:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17946:	fff5079b          	addiw	a5,a0,-1
   1794a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1794c:	4785                	c.li	a5,1
   1794e:	eef513e3          	bne	a0,a5,17834 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
	    _M_destroy();
   17952:	601c                	c.ld	a5,0(s0)
   17954:	6f9c                	c.ld	a5,24(a5)
   17956:	8522                	c.mv	a0,s0
   17958:	9782                	c.jalr	a5
   1795a:	bde9                	c.j	17834 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
      return __exchange_and_add(__mem, __val);
   1795c:	55fd                	c.li	a1,-1
   1795e:	03440513          	addi	a0,s0,52
   17962:	9cffe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17966:	b7dd                	c.j	1794c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x514>
   17968:	55fd                	c.li	a1,-1
   1796a:	03040513          	addi	a0,s0,48
   1796e:	9c3fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17972:	bdf9                	c.j	17850 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x418>
	_M_dispose();
   17974:	601c                	c.ld	a5,0(s0)
   17976:	6b9c                	c.ld	a5,16(a5)
   17978:	8522                	c.mv	a0,s0
   1797a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1797c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17980:	00022797          	auipc	a5,0x22
   17984:	af87b783          	ld	a5,-1288(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17988:	0007c783          	lbu	a5,0(a5)
   1798c:	cf89                	c.beqz	a5,179a6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x56e>
    _Atomic_word __result = *__mem;
   1798e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17990:	fff5079b          	addiw	a5,a0,-1
   17994:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17996:	4785                	c.li	a5,1
   17998:	eaf51fe3          	bne	a0,a5,17856 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
	    _M_destroy();
   1799c:	601c                	c.ld	a5,0(s0)
   1799e:	6f9c                	c.ld	a5,24(a5)
   179a0:	8522                	c.mv	a0,s0
   179a2:	9782                	c.jalr	a5
   179a4:	bd4d                	c.j	17856 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
      return __exchange_and_add(__mem, __val);
   179a6:	55fd                	c.li	a1,-1
   179a8:	03440513          	addi	a0,s0,52
   179ac:	985fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   179b0:	b7dd                	c.j	17996 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x55e>
      { return _M_dataplus._M_p; }
   179b2:	842a                	c.mv	s0,a0
   179b4:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   179b6:	089c                	c.addi4spn	a5,sp,80
   179b8:	00f50463          	beq	a0,a5,179c0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x588>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   179bc:	af5fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   179c0:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   179c2:	189c                	c.addi4spn	a5,sp,112
   179c4:	00f50463          	beq	a0,a5,179cc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x594>
   179c8:	ae9fe0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       std::to_string(version));
   179cc:	854a                	c.mv	a0,s2
   179ce:	aa3fe0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   179d2:	7542                	c.ldsp	a0,48(sp)
   179d4:	c511                	c.beqz	a0,179e0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5a8>
	  _M_pi->_M_release();
   179d6:	00022317          	auipc	t1,0x22
   179da:	9ea33303          	ld	t1,-1558(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   179de:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   179e0:	6522                	c.ldsp	a0,8(sp)
   179e2:	c511                	c.beqz	a0,179ee <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5b6>
	  _M_pi->_M_release();
   179e4:	00022317          	auipc	t1,0x22
   179e8:	9dc33303          	ld	t1,-1572(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   179ec:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   179ee:	6562                	c.ldsp	a0,24(sp)
   179f0:	c511                	c.beqz	a0,179fc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
	  _M_pi->_M_release();
   179f2:	00022317          	auipc	t1,0x22
   179f6:	9ce33303          	ld	t1,-1586(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   179fa:	9302                	c.jalr	t1
}
   179fc:	8526                	c.mv	a0,s1
   179fe:	e38ff0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   17a02:	8522                	c.mv	a0,s0
   17a04:	c8dfe0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   17a08:	842a                	c.mv	s0,a0
   17a0a:	bf5d                	c.j	179c0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x588>
	if (_M_pi != nullptr)
   17a0c:	842a                	c.mv	s0,a0
   17a0e:	b7c5                	c.j	179ee <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5b6>
   17a10:	842a                	c.mv	s0,a0
   17a12:	b7ed                	c.j	179fc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
        val |= ((uint64_t)p[i]) << (i * 8);
   17a14:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   17a18:	0785                	c.addi	a5,1
   17a1a:	fc3e                	c.sdsp	a5,56(sp)
  subsec->addr_size = address_size;
   17a1c:	6682                	c.ldsp	a3,0(sp)
   17a1e:	d290                	c.sw	a2,32(a3)

  bool end() const { return pos >= sec->end; }

  bool valid() const { return !!pos; }

  section_offset get_section_offset() const { return pos - sec->begin; }
   17a20:	6718                	c.ld	a4,8(a4)
   17a22:	40e78a33          	sub	s4,a5,a4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17a26:	1c800513          	addi	a0,zero,456
   17a2a:	a97fe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   17a2e:	b949                	c.j	176c0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x288>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17a30:	f452                	c.sdsp	s4,40(sp)
      : _M_pi(__r._M_pi)
   17a32:	f802                	c.sdsp	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   17a34:	008a3783          	ld	a5,8(s4)
   17a38:	fc3e                	c.sdsp	a5,56(sp)
  sub.skip_initial_length();
   17a3a:	1028                	c.addi4spn	a0,sp,40
   17a3c:	0e8030ef          	jal	ra,1ab24 <dwarf::cursor::skip_initial_length()>
   17a40:	b669                	c.j	175ca <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x192>

0000000000017a42 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>:
dwarf::dwarf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   17a42:	7135                	c.addi16sp	sp,-160
   17a44:	ed06                	c.sdsp	ra,152(sp)
   17a46:	e922                	c.sdsp	s0,144(sp)
   17a48:	e526                	c.sdsp	s1,136(sp)
   17a4a:	e14a                	c.sdsp	s2,128(sp)
   17a4c:	fcce                	c.sdsp	s3,120(sp)
   17a4e:	f8d2                	c.sdsp	s4,112(sp)
   17a50:	f4d6                	c.sdsp	s5,104(sp)
   17a52:	f0da                	c.sdsp	s6,96(sp)
   17a54:	ecde                	c.sdsp	s7,88(sp)
   17a56:	84aa                	c.mv	s1,a0
   17a58:	892e                	c.mv	s2,a1

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   17a5a:	00053023          	sd	zero,0(a0)
   17a5e:	0f000513          	addi	a0,zero,240
   17a62:	a5ffe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   17a66:	842a                	c.mv	s0,a0
   17a68:	00052423          	sw	zero,8(a0)
   17a6c:	00052623          	sw	zero,12(a0)
   17a70:	00052823          	sw	zero,16(a0)
   17a74:	00052a23          	sw	zero,20(a0)
   17a78:	00052c23          	sw	zero,24(a0)
   17a7c:	00052e23          	sw	zero,28(a0)
   17a80:	02053023          	sd	zero,32(a0)
   17a84:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17a88:	4785                	c.li	a5,1
   17a8a:	d91c                	c.sw	a5,48(a0)
   17a8c:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17a8e:	00022797          	auipc	a5,0x22
   17a92:	a9a7b783          	ld	a5,-1382(a5) # 39528 <vtable for std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xb78>
   17a96:	07c1                	c.addi	a5,16
   17a98:	e11c                	c.sd	a5,0(a0)
   17a9a:	03850993          	addi	s3,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17a9e:	00093783          	ld	a5,0(s2)
   17aa2:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   17aa4:	00893503          	ld	a0,8(s2)
   17aa8:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   17aaa:	c919                	c.beqz	a0,17ac0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7e>
    if (__is_single_threaded())
   17aac:	00022797          	auipc	a5,0x22
   17ab0:	9cc7b783          	ld	a5,-1588(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17ab4:	0007c783          	lbu	a5,0(a5)
   17ab8:	cfa5                	c.beqz	a5,17b30 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xee>
  { *__mem += __val; }
   17aba:	591c                	c.lw	a5,48(a0)
   17abc:	2785                	c.addiw	a5,1
   17abe:	d91c                	c.sw	a5,48(a0)
      : _M_ptr(0), _M_refcount()
   17ac0:	04043423          	sd	zero,72(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17ac4:	04043823          	sd	zero,80(s0)
      : _M_ptr(0), _M_refcount()
   17ac8:	04043c23          	sd	zero,88(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17acc:	06043023          	sd	zero,96(s0)
   17ad0:	06043423          	sd	zero,104(s0)
   17ad4:	06043823          	sd	zero,112(s0)
   17ad8:	06043c23          	sd	zero,120(s0)
   17adc:	0b040793          	addi	a5,s0,176
   17ae0:	e05c                	c.sd	a5,128(s0)
   17ae2:	4785                	c.li	a5,1
   17ae4:	e45c                	c.sd	a5,136(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   17ae6:	08043823          	sd	zero,144(s0)
   17aea:	08043c23          	sd	zero,152(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   17aee:	00016797          	auipc	a5,0x16
   17af2:	aba7a787          	flw	fa5,-1350(a5) # 2d5a8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   17af6:	0af42027          	fsw	fa5,160(s0)
   17afa:	0a043423          	sd	zero,168(s0)
   17afe:	0a043823          	sd	zero,176(s0)
  impl(const std::shared_ptr<loader> &l) : l(l), have_type_units(false) {}
   17b02:	0a040c23          	sb	zero,184(s0)
      _M_header._M_color = _S_red;
   17b06:	0c042423          	sw	zero,200(s0)
      _M_header._M_parent = 0;
   17b0a:	0c043823          	sd	zero,208(s0)
      _M_header._M_left = &_M_header;
   17b0e:	0c840793          	addi	a5,s0,200
   17b12:	ec7c                	c.sd	a5,216(s0)
      _M_header._M_right = &_M_header;
   17b14:	f07c                	c.sd	a5,224(s0)
      _M_node_count = 0;
   17b16:	0e043423          	sd	zero,232(s0)
	  _M_pi = __pi;
   17b1a:	e480                	c.sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   17b1c:	0134b023          	sd	s3,0(s1)
      { return _M_ptr; }
   17b20:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::info, &size);
   17b24:	611c                	c.ld	a5,0(a0)
   17b26:	6b9c                	c.ld	a5,16(a5)
   17b28:	860a                	c.mv	a2,sp
   17b2a:	458d                	c.li	a1,3
   17b2c:	9782                	c.jalr	a5
   17b2e:	a039                	c.j	17b3c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xfa>
      __atomic_add(__mem, __val);
   17b30:	4585                	c.li	a1,1
   17b32:	03050513          	addi	a0,a0,48
   17b36:	fcafe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17b3a:	b759                	c.j	17ac0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7e>
   17b3c:	842a                	c.mv	s0,a0
  if (!data)
   17b3e:	c901                	c.beqz	a0,17b4e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x10c>
   17b40:	0004ba03          	ld	s4,0(s1)
   17b44:	06000513          	addi	a0,zero,96
   17b48:	979fe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   17b4c:	a83d                	c.j	17b8a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x148>
    throw format_error("required .debug_info section missing");
   17b4e:	4541                	c.li	a0,16
   17b50:	881fe0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   17b54:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   17b56:	00015597          	auipc	a1,0x15
   17b5a:	78a58593          	addi	a1,a1,1930 # 2d2e0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x70>
   17b5e:	bb3fe0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   17b62:	00022797          	auipc	a5,0x22
   17b66:	9ee7b783          	ld	a5,-1554(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   17b6a:	07c1                	c.addi	a5,16
   17b6c:	00f93023          	sd	a5,0(s2)
   17b70:	00022617          	auipc	a2,0x22
   17b74:	80863603          	ld	a2,-2040(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   17b78:	00021597          	auipc	a1,0x21
   17b7c:	7305b583          	ld	a1,1840(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   17b80:	854a                	c.mv	a0,s2
   17b82:	adffe0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   17b86:	842a                	c.mv	s0,a0
   17b88:	adc1                	c.j	18258 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
   17b8a:	00052423          	sw	zero,8(a0)
   17b8e:	00052623          	sw	zero,12(a0)
   17b92:	00052823          	sw	zero,16(a0)
   17b96:	00052a23          	sw	zero,20(a0)
   17b9a:	00052c23          	sw	zero,24(a0)
   17b9e:	00052e23          	sw	zero,28(a0)
   17ba2:	02053023          	sd	zero,32(a0)
   17ba6:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17baa:	4785                	c.li	a5,1
   17bac:	d91c                	c.sw	a5,48(a0)
   17bae:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17bb0:	00022797          	auipc	a5,0x22
   17bb4:	a087b783          	ld	a5,-1528(a5) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   17bb8:	07c1                	c.addi	a5,16
   17bba:	e11c                	c.sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17bbc:	478d                	c.li	a5,3
   17bbe:	dd1c                	c.sw	a5,56(a0)
   17bc0:	e120                	c.sd	s0,64(a0)
   17bc2:	6782                	c.ldsp	a5,0(sp)
   17bc4:	97a2                	c.add	a5,s0
   17bc6:	e53c                	c.sd	a5,72(a0)
   17bc8:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17bcc:	04052a23          	sw	zero,84(a0)
   17bd0:	04052c23          	sw	zero,88(a0)
   17bd4:	03850793          	addi	a5,a0,56
   17bd8:	00fa3823          	sd	a5,16(s4)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17bdc:	018a3983          	ld	s3,24(s4)
	__r._M_pi = _M_pi;
   17be0:	00aa3c23          	sd	a0,24(s4)
	if (_M_pi != nullptr)
   17be4:	02098263          	beq	s3,zero,17c08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
    if (__is_single_threaded())
   17be8:	00022797          	auipc	a5,0x22
   17bec:	8907b783          	ld	a5,-1904(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17bf0:	0007c783          	lbu	a5,0(a5)
   17bf4:	cbdd                	c.beqz	a5,17caa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x268>
    _Atomic_word __result = *__mem;
   17bf6:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   17bfa:	fff5079b          	addiw	a5,a0,-1
   17bfe:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17c02:	4785                	c.li	a5,1
   17c04:	0af50963          	beq	a0,a5,17cb6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x274>
      { return _M_ptr; }
   17c08:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17c0a:	0107ba03          	ld	s4,16(a5)
      : _M_pi(__r._M_pi)
   17c0e:	0187b983          	ld	s3,24(a5)
	if (_M_pi != nullptr)
   17c12:	68098d63          	beq	s3,zero,182ac <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x86a>
    if (__is_single_threaded())
   17c16:	00022797          	auipc	a5,0x22
   17c1a:	8627b783          	ld	a5,-1950(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17c1e:	0007c783          	lbu	a5,0(a5)
   17c22:	cfe9                	c.beqz	a5,17cfc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ba>
  { *__mem += __val; }
   17c24:	0309a783          	lw	a5,48(s3)
   17c28:	2785                	c.addiw	a5,1
   17c2a:	02f9a823          	sw	a5,48(s3)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17c2e:	e452                	c.sdsp	s4,8(sp)
      : _M_pi(__r._M_pi)
   17c30:	e84e                	c.sdsp	s3,16(sp)
    if (__is_single_threaded())
   17c32:	00022797          	auipc	a5,0x22
   17c36:	8467b783          	ld	a5,-1978(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17c3a:	0007c783          	lbu	a5,0(a5)
   17c3e:	c7e9                	c.beqz	a5,17d08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2c6>
  { *__mem += __val; }
   17c40:	0309a783          	lw	a5,48(s3)
   17c44:	2785                	c.addiw	a5,1
   17c46:	02f9a823          	sw	a5,48(s3)
      : sec(sec), pos(sec->begin + offset) {}
   17c4a:	008a3783          	ld	a5,8(s4)
   17c4e:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   17c50:	00022797          	auipc	a5,0x22
   17c54:	8287b783          	ld	a5,-2008(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17c58:	0007c783          	lbu	a5,0(a5)
   17c5c:	cfc5                	c.beqz	a5,17d14 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2d2>
    _Atomic_word __result = *__mem;
   17c5e:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   17c62:	fff5079b          	addiw	a5,a0,-1
   17c66:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17c6a:	4785                	c.li	a5,1
   17c6c:	64f51563          	bne	a0,a5,182b6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
	_M_dispose();
   17c70:	0009b783          	ld	a5,0(s3)
   17c74:	6b9c                	c.ld	a5,16(a5)
   17c76:	854e                	c.mv	a0,s3
   17c78:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17c7a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17c7e:	00021797          	auipc	a5,0x21
   17c82:	7fa7b783          	ld	a5,2042(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17c86:	0007c783          	lbu	a5,0(a5)
   17c8a:	cbd9                	c.beqz	a5,17d20 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2de>
    _Atomic_word __result = *__mem;
   17c8c:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   17c90:	fff5079b          	addiw	a5,a0,-1
   17c94:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17c98:	4785                	c.li	a5,1
   17c9a:	60f51e63          	bne	a0,a5,182b6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
	    _M_destroy();
   17c9e:	0009b783          	ld	a5,0(s3)
   17ca2:	6f9c                	c.ld	a5,24(a5)
   17ca4:	854e                	c.mv	a0,s3
   17ca6:	9782                	c.jalr	a5
   17ca8:	a539                	c.j	182b6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
      return __exchange_and_add(__mem, __val);
   17caa:	55fd                	c.li	a1,-1
   17cac:	03098513          	addi	a0,s3,48
   17cb0:	e80fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17cb4:	b7b9                	c.j	17c02 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c0>
	_M_dispose();
   17cb6:	0009b783          	ld	a5,0(s3)
   17cba:	6b9c                	c.ld	a5,16(a5)
   17cbc:	854e                	c.mv	a0,s3
   17cbe:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17cc0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17cc4:	00021797          	auipc	a5,0x21
   17cc8:	7b47b783          	ld	a5,1972(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17ccc:	0007c783          	lbu	a5,0(a5)
   17cd0:	c385                	c.beqz	a5,17cf0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ae>
    _Atomic_word __result = *__mem;
   17cd2:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   17cd6:	fff5079b          	addiw	a5,a0,-1
   17cda:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17cde:	4785                	c.li	a5,1
   17ce0:	f2f514e3          	bne	a0,a5,17c08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
	    _M_destroy();
   17ce4:	0009b783          	ld	a5,0(s3)
   17ce8:	6f9c                	c.ld	a5,24(a5)
   17cea:	854e                	c.mv	a0,s3
   17cec:	9782                	c.jalr	a5
   17cee:	bf29                	c.j	17c08 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
      return __exchange_and_add(__mem, __val);
   17cf0:	55fd                	c.li	a1,-1
   17cf2:	03498513          	addi	a0,s3,52
   17cf6:	e3afe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17cfa:	b7d5                	c.j	17cde <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x29c>
      __atomic_add(__mem, __val);
   17cfc:	4585                	c.li	a1,1
   17cfe:	03098513          	addi	a0,s3,48
   17d02:	dfefe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17d06:	b725                	c.j	17c2e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1ec>
   17d08:	4585                	c.li	a1,1
   17d0a:	03098513          	addi	a0,s3,48
   17d0e:	df2fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17d12:	bf25                	c.j	17c4a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x208>
      return __exchange_and_add(__mem, __val);
   17d14:	55fd                	c.li	a1,-1
   17d16:	03098513          	addi	a0,s3,48
   17d1a:	e16fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17d1e:	b7b1                	c.j	17c6a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x228>
   17d20:	55fd                	c.li	a1,-1
   17d22:	03498513          	addi	a0,s3,52
   17d26:	e0afe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17d2a:	b7bd                	c.j	17c98 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x256>
    const unsigned char *p = (const unsigned char *)pos;
   17d2c:	65e2                	c.ldsp	a1,24(sp)
      { return _M_ptr; }
   17d2e:	6822                	c.ldsp	a6,8(sp)
    if (sec->ord == byte_order::lsb) {
   17d30:	01c82783          	lw	a5,28(a6)
   17d34:	e3b1                	c.bnez	a5,17d78 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x336>
   17d36:	862e                	c.mv	a2,a1
   17d38:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   17d3a:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   17d3e:	00064683          	lbu	a3,0(a2)
   17d42:	00e696b3          	sll	a3,a3,a4
   17d46:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17d48:	0605                	c.addi	a2,1
   17d4a:	2721                	c.addiw	a4,8
   17d4c:	fea719e3          	bne	a4,a0,17d3e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2fc>
    pos += sizeof(T);
   17d50:	0591                	c.addi	a1,4
   17d52:	ec2e                	c.sdsp	a1,24(sp)
  if (length == 0xffffffff)
   17d54:	2781                	c.addiw	a5,0
   17d56:	577d                	c.li	a4,-1
   17d58:	02e78c63          	beq	a5,a4,17d90 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x34e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17d5c:	67a2                	c.ldsp	a5,8(sp)
   17d5e:	6b98                	c.ld	a4,16(a5)
   17d60:	67e2                	c.ldsp	a5,24(sp)
   17d62:	40f70633          	sub	a2,a4,a5
   17d66:	4685                	c.li	a3,1
   17d68:	00c6f463          	bgeu	a3,a2,17d70 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x32e>
   17d6c:	04e7e263          	bltu	a5,a4,17db0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x36e>
      underflow();
   17d70:	0028                	c.addi4spn	a0,sp,8
   17d72:	6c7020ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   17d76:	a82d                	c.j	17db0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x36e>
   17d78:	872e                	c.mv	a4,a1
   17d7a:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   17d7e:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   17d80:	07a2                	c.slli	a5,0x8
   17d82:	00074683          	lbu	a3,0(a4)
   17d86:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17d88:	0705                	c.addi	a4,1
   17d8a:	fec71be3          	bne	a4,a2,17d80 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x33e>
   17d8e:	b7c9                	c.j	17d50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x30e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17d90:	01083783          	ld	a5,16(a6)
   17d94:	40b786b3          	sub	a3,a5,a1
   17d98:	471d                	c.li	a4,7
   17d9a:	00d77463          	bgeu	a4,a3,17da2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x360>
   17d9e:	00f5e563          	bltu	a1,a5,17da8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x366>
      underflow();
   17da2:	0028                	c.addi4spn	a0,sp,8
   17da4:	695020ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    pos += sizeof(T);
   17da8:	67e2                	c.ldsp	a5,24(sp)
   17daa:	07a1                	c.addi	a5,8
   17dac:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   17dae:	b77d                	c.j	17d5c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x31a>
    const unsigned char *p = (const unsigned char *)pos;
   17db0:	6762                	c.ldsp	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   17db2:	67a2                	c.ldsp	a5,8(sp)
   17db4:	4fdc                	c.lw	a5,28(a5)
   17db6:	ef85                	c.bnez	a5,17dee <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3ac>
        val |= ((uint64_t)p[i]) << (i * 8);
   17db8:	00174783          	lbu	a5,1(a4)
   17dbc:	07a2                	c.slli	a5,0x8
   17dbe:	00074683          	lbu	a3,0(a4)
   17dc2:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   17dc4:	0709                	c.addi	a4,2
   17dc6:	ec3a                	c.sdsp	a4,24(sp)
    return (T)val;
   17dc8:	17c2                	c.slli	a5,0x30
   17dca:	93c1                	c.srli	a5,0x30
  uhalf versionbe = (version >> 8) | ((version & 0xFF) << 8);
   17dcc:	0087d71b          	srliw	a4,a5,0x8
   17dd0:	0087969b          	slliw	a3,a5,0x8
   17dd4:	8f55                	c.or	a4,a3
  if (versionbe < version) {
   17dd6:	1742                	c.slli	a4,0x30
   17dd8:	9341                	c.srli	a4,0x30
   17dda:	02f76163          	bltu	a4,a5,17dfc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3ba>
   17dde:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::abbrev, &size);
   17de2:	611c                	c.ld	a5,0(a0)
   17de4:	6b9c                	c.ld	a5,16(a5)
   17de6:	860a                	c.mv	a2,sp
   17de8:	4581                	c.li	a1,0
   17dea:	9782                	c.jalr	a5
   17dec:	a8f9                	c.j	17eca <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x488>
        val = (val << 8) | (uint64_t)p[i];
   17dee:	00074783          	lbu	a5,0(a4)
   17df2:	07a2                	c.slli	a5,0x8
   17df4:	00174683          	lbu	a3,1(a4)
   17df8:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17dfa:	b7e9                	c.j	17dc4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x382>
   17dfc:	0004b983          	ld	s3,0(s1)
   17e00:	06000513          	addi	a0,zero,96
   17e04:	ebcfe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   17e08:	00052423          	sw	zero,8(a0)
   17e0c:	00052623          	sw	zero,12(a0)
   17e10:	00052823          	sw	zero,16(a0)
   17e14:	00052a23          	sw	zero,20(a0)
   17e18:	00052c23          	sw	zero,24(a0)
   17e1c:	00052e23          	sw	zero,28(a0)
   17e20:	02053023          	sd	zero,32(a0)
   17e24:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17e28:	4785                	c.li	a5,1
   17e2a:	d91c                	c.sw	a5,48(a0)
   17e2c:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17e2e:	00021717          	auipc	a4,0x21
   17e32:	78a73703          	ld	a4,1930(a4) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   17e36:	0741                	c.addi	a4,16
   17e38:	e118                	c.sd	a4,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17e3a:	470d                	c.li	a4,3
   17e3c:	dd18                	c.sw	a4,56(a0)
   17e3e:	e120                	c.sd	s0,64(a0)
   17e40:	6702                	c.ldsp	a4,0(sp)
   17e42:	9722                	c.add	a4,s0
   17e44:	e538                	c.sd	a4,72(a0)
   17e46:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17e4a:	c97c                	c.sw	a5,84(a0)
   17e4c:	04052c23          	sw	zero,88(a0)
   17e50:	03850793          	addi	a5,a0,56
   17e54:	00f9b823          	sd	a5,16(s3)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17e58:	0189b403          	ld	s0,24(s3)
	__r._M_pi = _M_pi;
   17e5c:	00a9bc23          	sd	a0,24(s3)
	if (_M_pi != nullptr)
   17e60:	dc3d                	c.beqz	s0,17dde <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
    if (__is_single_threaded())
   17e62:	00021797          	auipc	a5,0x21
   17e66:	6167b783          	ld	a5,1558(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e6a:	0007c783          	lbu	a5,0(a5)
   17e6e:	c3a9                	c.beqz	a5,17eb0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x46e>
    _Atomic_word __result = *__mem;
   17e70:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17e72:	fff5079b          	addiw	a5,a0,-1
   17e76:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17e78:	4785                	c.li	a5,1
   17e7a:	f6f512e3          	bne	a0,a5,17dde <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
	_M_dispose();
   17e7e:	601c                	c.ld	a5,0(s0)
   17e80:	6b9c                	c.ld	a5,16(a5)
   17e82:	8522                	c.mv	a0,s0
   17e84:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17e86:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17e8a:	00021797          	auipc	a5,0x21
   17e8e:	5ee7b783          	ld	a5,1518(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e92:	0007c783          	lbu	a5,0(a5)
   17e96:	c39d                	c.beqz	a5,17ebc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x47a>
    _Atomic_word __result = *__mem;
   17e98:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   17e9a:	fff7871b          	addiw	a4,a5,-1
   17e9e:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17ea0:	4705                	c.li	a4,1
   17ea2:	f2e79ee3          	bne	a5,a4,17dde <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
	    _M_destroy();
   17ea6:	601c                	c.ld	a5,0(s0)
   17ea8:	6f9c                	c.ld	a5,24(a5)
   17eaa:	8522                	c.mv	a0,s0
   17eac:	9782                	c.jalr	a5
   17eae:	bf05                	c.j	17dde <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
      return __exchange_and_add(__mem, __val);
   17eb0:	55fd                	c.li	a1,-1
   17eb2:	03040513          	addi	a0,s0,48
   17eb6:	c7afe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17eba:	bf7d                	c.j	17e78 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x436>
   17ebc:	55fd                	c.li	a1,-1
   17ebe:	03440513          	addi	a0,s0,52
   17ec2:	c6efe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17ec6:	87aa                	c.mv	a5,a0
   17ec8:	bfe1                	c.j	17ea0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x45e>
   17eca:	842a                	c.mv	s0,a0
  if (!data)
   17ecc:	c911                	c.beqz	a0,17ee0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x49e>
      { return _M_ptr; }
   17ece:	0004b903          	ld	s2,0(s1)
   17ed2:	01093983          	ld	s3,16(s2)
   17ed6:	06000513          	addi	a0,zero,96
   17eda:	de6fe0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   17ede:	a83d                	c.j	17f1c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4da>
    throw format_error("required .debug_abbrev section missing");
   17ee0:	4541                	c.li	a0,16
   17ee2:	ceefe0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   17ee6:	892a                	c.mv	s2,a0
   17ee8:	00015597          	auipc	a1,0x15
   17eec:	42058593          	addi	a1,a1,1056 # 2d308 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x98>
   17ef0:	821fe0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   17ef4:	00021797          	auipc	a5,0x21
   17ef8:	65c7b783          	ld	a5,1628(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   17efc:	07c1                	c.addi	a5,16
   17efe:	00f93023          	sd	a5,0(s2)
   17f02:	00021617          	auipc	a2,0x21
   17f06:	47663603          	ld	a2,1142(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   17f0a:	00021597          	auipc	a1,0x21
   17f0e:	39e5b583          	ld	a1,926(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   17f12:	854a                	c.mv	a0,s2
   17f14:	f4cfe0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   17f18:	842a                	c.mv	s0,a0
   17f1a:	aea9                	c.j	18274 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
   17f1c:	00052423          	sw	zero,8(a0)
   17f20:	00052623          	sw	zero,12(a0)
   17f24:	00052823          	sw	zero,16(a0)
   17f28:	00052a23          	sw	zero,20(a0)
   17f2c:	00052c23          	sw	zero,24(a0)
   17f30:	00052e23          	sw	zero,28(a0)
   17f34:	02053023          	sd	zero,32(a0)
   17f38:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17f3c:	4785                	c.li	a5,1
   17f3e:	d91c                	c.sw	a5,48(a0)
   17f40:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17f42:	00021797          	auipc	a5,0x21
   17f46:	6767b783          	ld	a5,1654(a5) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   17f4a:	07c1                	c.addi	a5,16
   17f4c:	e11c                	c.sd	a5,0(a0)
   17f4e:	01c9a783          	lw	a5,28(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17f52:	02052c23          	sw	zero,56(a0)
   17f56:	e120                	c.sd	s0,64(a0)
   17f58:	6702                	c.ldsp	a4,0(sp)
   17f5a:	943a                	c.add	s0,a4
   17f5c:	e520                	c.sd	s0,72(a0)
   17f5e:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17f62:	c97c                	c.sw	a5,84(a0)
   17f64:	04052c23          	sw	zero,88(a0)
   17f68:	03850793          	addi	a5,a0,56
   17f6c:	02f93023          	sd	a5,32(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17f70:	02893403          	ld	s0,40(s2)
	__r._M_pi = _M_pi;
   17f74:	02a93423          	sd	a0,40(s2)
	if (_M_pi != nullptr)
   17f78:	cc19                	c.beqz	s0,17f96 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
    if (__is_single_threaded())
   17f7a:	00021797          	auipc	a5,0x21
   17f7e:	4fe7b783          	ld	a5,1278(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f82:	0007c783          	lbu	a5,0(a5)
   17f86:	cbd1                	c.beqz	a5,1801a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5d8>
    _Atomic_word __result = *__mem;
   17f88:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17f8a:	fff5079b          	addiw	a5,a0,-1
   17f8e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17f90:	4785                	c.li	a5,1
   17f92:	08f50a63          	beq	a0,a5,18026 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5e4>
      { return _M_ptr; }
   17f96:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17f98:	0107b903          	ld	s2,16(a5)
      : _M_pi(__r._M_pi)
   17f9c:	6f80                	c.ld	s0,24(a5)
	if (_M_pi != nullptr)
   17f9e:	2e040c63          	beq	s0,zero,18296 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x854>
    if (__is_single_threaded())
   17fa2:	00021797          	auipc	a5,0x21
   17fa6:	4d67b783          	ld	a5,1238(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17faa:	0007c783          	lbu	a5,0(a5)
   17fae:	cbdd                	c.beqz	a5,18064 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x622>
  { *__mem += __val; }
   17fb0:	581c                	c.lw	a5,48(s0)
   17fb2:	2785                	c.addiw	a5,1
   17fb4:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17fb6:	f04a                	c.sdsp	s2,32(sp)
      : _M_pi(__r._M_pi)
   17fb8:	f422                	c.sdsp	s0,40(sp)
    if (__is_single_threaded())
   17fba:	00021797          	auipc	a5,0x21
   17fbe:	4be7b783          	ld	a5,1214(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17fc2:	0007c783          	lbu	a5,0(a5)
   17fc6:	c7cd                	c.beqz	a5,18070 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x62e>
  { *__mem += __val; }
   17fc8:	581c                	c.lw	a5,48(s0)
   17fca:	2785                	c.addiw	a5,1
   17fcc:	d81c                	c.sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   17fce:	00893783          	ld	a5,8(s2)
   17fd2:	f83e                	c.sdsp	a5,48(sp)
    if (__is_single_threaded())
   17fd4:	00021797          	auipc	a5,0x21
   17fd8:	4a47b783          	ld	a5,1188(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17fdc:	0007c783          	lbu	a5,0(a5)
   17fe0:	cfd1                	c.beqz	a5,1807c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x63a>
    _Atomic_word __result = *__mem;
   17fe2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17fe4:	fff5079b          	addiw	a5,a0,-1
   17fe8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17fea:	4785                	c.li	a5,1
   17fec:	08f50e63          	beq	a0,a5,18088 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x646>
  bool end() const { return pos >= sec->end; }
   17ff0:	7642                	c.ldsp	a2,48(sp)
      { return _M_ptr; }
   17ff2:	7782                	c.ldsp	a5,32(sp)
  while (!infocur.end()) {
   17ff4:	6b98                	c.ld	a4,16(a5)
   17ff6:	16e67863          	bgeu	a2,a4,18166 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x724>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   17ffa:	03810b13          	addi	s6,sp,56
   17ffe:	00021b97          	auipc	s7,0x21
   18002:	2e2bbb83          	ld	s7,738(s7) # 392e0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)@@Base+0x1ee8e>
    infocur.subsection();
   18006:	04010913          	addi	s2,sp,64
   1800a:	02010993          	addi	s3,sp,32
    return ::__libc_single_threaded;
   1800e:	00021a17          	auipc	s4,0x21
   18012:	46aa3a03          	ld	s4,1130(s4) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18016:	4a85                	c.li	s5,1
   18018:	a0f5                	c.j	18104 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6c2>
      return __exchange_and_add(__mem, __val);
   1801a:	55fd                	c.li	a1,-1
   1801c:	03040513          	addi	a0,s0,48
   18020:	b10fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18024:	b7b5                	c.j	17f90 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x54e>
	_M_dispose();
   18026:	601c                	c.ld	a5,0(s0)
   18028:	6b9c                	c.ld	a5,16(a5)
   1802a:	8522                	c.mv	a0,s0
   1802c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1802e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18032:	00021797          	auipc	a5,0x21
   18036:	4467b783          	ld	a5,1094(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1803a:	0007c783          	lbu	a5,0(a5)
   1803e:	cf89                	c.beqz	a5,18058 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x616>
    _Atomic_word __result = *__mem;
   18040:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18042:	fff5079b          	addiw	a5,a0,-1
   18046:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18048:	4785                	c.li	a5,1
   1804a:	f4f516e3          	bne	a0,a5,17f96 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
	    _M_destroy();
   1804e:	601c                	c.ld	a5,0(s0)
   18050:	6f9c                	c.ld	a5,24(a5)
   18052:	8522                	c.mv	a0,s0
   18054:	9782                	c.jalr	a5
   18056:	b781                	c.j	17f96 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
      return __exchange_and_add(__mem, __val);
   18058:	55fd                	c.li	a1,-1
   1805a:	03440513          	addi	a0,s0,52
   1805e:	ad2fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18062:	b7dd                	c.j	18048 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x606>
      __atomic_add(__mem, __val);
   18064:	4585                	c.li	a1,1
   18066:	03040513          	addi	a0,s0,48
   1806a:	a96fe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1806e:	b7a1                	c.j	17fb6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x574>
   18070:	4585                	c.li	a1,1
   18072:	03040513          	addi	a0,s0,48
   18076:	a8afe0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1807a:	bf91                	c.j	17fce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x58c>
      return __exchange_and_add(__mem, __val);
   1807c:	55fd                	c.li	a1,-1
   1807e:	03040513          	addi	a0,s0,48
   18082:	aaefe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18086:	b795                	c.j	17fea <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5a8>
	_M_dispose();
   18088:	601c                	c.ld	a5,0(s0)
   1808a:	6b9c                	c.ld	a5,16(a5)
   1808c:	8522                	c.mv	a0,s0
   1808e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18090:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18094:	00021797          	auipc	a5,0x21
   18098:	3e47b783          	ld	a5,996(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1809c:	0007c783          	lbu	a5,0(a5)
   180a0:	cf89                	c.beqz	a5,180ba <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x678>
    _Atomic_word __result = *__mem;
   180a2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   180a4:	fff5079b          	addiw	a5,a0,-1
   180a8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   180aa:	4785                	c.li	a5,1
   180ac:	f4f512e3          	bne	a0,a5,17ff0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ae>
	    _M_destroy();
   180b0:	601c                	c.ld	a5,0(s0)
   180b2:	6f9c                	c.ld	a5,24(a5)
   180b4:	8522                	c.mv	a0,s0
   180b6:	9782                	c.jalr	a5
   180b8:	bf25                	c.j	17ff0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ae>
      return __exchange_and_add(__mem, __val);
   180ba:	55fd                	c.li	a1,-1
   180bc:	03440513          	addi	a0,s0,52
   180c0:	a70fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   180c4:	b7dd                	c.j	180aa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x668>
	    ++this->_M_impl._M_finish;
   180c6:	7c1c                	c.ld	a5,56(s0)
   180c8:	07e1                	c.addi	a5,24
   180ca:	fc1c                	c.sd	a5,56(s0)
   180cc:	85ce                	c.mv	a1,s3
   180ce:	854a                	c.mv	a0,s2
   180d0:	6f9020ef          	jal	ra,1afc8 <dwarf::cursor::subsection()>
   180d4:	a801                	c.j	180e4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6a2>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   180d6:	86da                	c.mv	a3,s6
   180d8:	8626                	c.mv	a2,s1
   180da:	85aa                	c.mv	a1,a0
   180dc:	03040513          	addi	a0,s0,48
   180e0:	9b82                	c.jalr	s7
   180e2:	b7ed                	c.j	180cc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x68a>
	if (_M_pi != nullptr)
   180e4:	6426                	c.ldsp	s0,72(sp)
   180e6:	c811                	c.beqz	s0,180fa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
    if (__is_single_threaded())
   180e8:	000a4783          	lbu	a5,0(s4)
   180ec:	cb85                	c.beqz	a5,1811c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6da>
    _Atomic_word __result = *__mem;
   180ee:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   180f0:	fff5079b          	addiw	a5,a0,-1
   180f4:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   180f6:	03550963          	beq	a0,s5,18128 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6e6>
   180fa:	7642                	c.ldsp	a2,48(sp)
      { return _M_ptr; }
   180fc:	7782                	c.ldsp	a5,32(sp)
  while (!infocur.end()) {
   180fe:	6b98                	c.ld	a4,16(a5)
   18100:	06e67363          	bgeu	a2,a4,18166 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x724>
   18104:	6080                	c.ld	s0,0(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   18106:	679c                	c.ld	a5,8(a5)
   18108:	8e1d                	c.sub	a2,a5
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
   1810a:	fc32                	c.sdsp	a2,56(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1810c:	7c08                	c.ld	a0,56(s0)
   1810e:	603c                	c.ld	a5,64(s0)
   18110:	fcf503e3          	beq	a0,a5,180d6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x694>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   18114:	85a6                	c.mv	a1,s1
   18116:	b22ff0ef          	jal	ra,17438 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
   1811a:	b775                	c.j	180c6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x684>
      return __exchange_and_add(__mem, __val);
   1811c:	55fd                	c.li	a1,-1
   1811e:	03040513          	addi	a0,s0,48
   18122:	a0efe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18126:	bfc1                	c.j	180f6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b4>
	_M_dispose();
   18128:	601c                	c.ld	a5,0(s0)
   1812a:	6b9c                	c.ld	a5,16(a5)
   1812c:	8522                	c.mv	a0,s0
   1812e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18130:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18134:	00021797          	auipc	a5,0x21
   18138:	3447b783          	ld	a5,836(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1813c:	0007c783          	lbu	a5,0(a5)
   18140:	cf89                	c.beqz	a5,1815a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x718>
    _Atomic_word __result = *__mem;
   18142:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18144:	fff5079b          	addiw	a5,a0,-1
   18148:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1814a:	4785                	c.li	a5,1
   1814c:	faf517e3          	bne	a0,a5,180fa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
	    _M_destroy();
   18150:	601c                	c.ld	a5,0(s0)
   18152:	6f9c                	c.ld	a5,24(a5)
   18154:	8522                	c.mv	a0,s0
   18156:	9782                	c.jalr	a5
   18158:	b74d                	c.j	180fa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
      return __exchange_and_add(__mem, __val);
   1815a:	55fd                	c.li	a1,-1
   1815c:	03440513          	addi	a0,s0,52
   18160:	9d0fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18164:	b7dd                	c.j	1814a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x708>
	if (_M_pi != nullptr)
   18166:	7422                	c.ldsp	s0,40(sp)
   18168:	cc19                	c.beqz	s0,18186 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
    if (__is_single_threaded())
   1816a:	00021797          	auipc	a5,0x21
   1816e:	30e7b783          	ld	a5,782(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18172:	0007c783          	lbu	a5,0(a5)
   18176:	c3b9                	c.beqz	a5,181bc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x77a>
    _Atomic_word __result = *__mem;
   18178:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1817a:	fff5079b          	addiw	a5,a0,-1
   1817e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18180:	4785                	c.li	a5,1
   18182:	04f50363          	beq	a0,a5,181c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x786>
	if (_M_pi != nullptr)
   18186:	6442                	c.ldsp	s0,16(sp)
   18188:	cc19                	c.beqz	s0,181a6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
    if (__is_single_threaded())
   1818a:	00021797          	auipc	a5,0x21
   1818e:	2ee7b783          	ld	a5,750(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18192:	0007c783          	lbu	a5,0(a5)
   18196:	cba5                	c.beqz	a5,18206 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7c4>
    _Atomic_word __result = *__mem;
   18198:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1819a:	fff5079b          	addiw	a5,a0,-1
   1819e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   181a0:	4785                	c.li	a5,1
   181a2:	06f50863          	beq	a0,a5,18212 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7d0>
}
   181a6:	60ea                	c.ldsp	ra,152(sp)
   181a8:	644a                	c.ldsp	s0,144(sp)
   181aa:	64aa                	c.ldsp	s1,136(sp)
   181ac:	690a                	c.ldsp	s2,128(sp)
   181ae:	79e6                	c.ldsp	s3,120(sp)
   181b0:	7a46                	c.ldsp	s4,112(sp)
   181b2:	7aa6                	c.ldsp	s5,104(sp)
   181b4:	7b06                	c.ldsp	s6,96(sp)
   181b6:	6be6                	c.ldsp	s7,88(sp)
   181b8:	610d                	c.addi16sp	sp,160
   181ba:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   181bc:	55fd                	c.li	a1,-1
   181be:	03040513          	addi	a0,s0,48
   181c2:	96efe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   181c6:	bf6d                	c.j	18180 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x73e>
	_M_dispose();
   181c8:	601c                	c.ld	a5,0(s0)
   181ca:	6b9c                	c.ld	a5,16(a5)
   181cc:	8522                	c.mv	a0,s0
   181ce:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   181d0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   181d4:	00021797          	auipc	a5,0x21
   181d8:	2a47b783          	ld	a5,676(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   181dc:	0007c783          	lbu	a5,0(a5)
   181e0:	cf89                	c.beqz	a5,181fa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7b8>
    _Atomic_word __result = *__mem;
   181e2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   181e4:	fff5079b          	addiw	a5,a0,-1
   181e8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   181ea:	4785                	c.li	a5,1
   181ec:	f8f51de3          	bne	a0,a5,18186 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
	    _M_destroy();
   181f0:	601c                	c.ld	a5,0(s0)
   181f2:	6f9c                	c.ld	a5,24(a5)
   181f4:	8522                	c.mv	a0,s0
   181f6:	9782                	c.jalr	a5
   181f8:	b779                	c.j	18186 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
      return __exchange_and_add(__mem, __val);
   181fa:	55fd                	c.li	a1,-1
   181fc:	03440513          	addi	a0,s0,52
   18200:	930fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18204:	b7dd                	c.j	181ea <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7a8>
   18206:	55fd                	c.li	a1,-1
   18208:	03040513          	addi	a0,s0,48
   1820c:	924fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18210:	bf41                	c.j	181a0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x75e>
	_M_dispose();
   18212:	601c                	c.ld	a5,0(s0)
   18214:	6b9c                	c.ld	a5,16(a5)
   18216:	8522                	c.mv	a0,s0
   18218:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1821a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1821e:	00021797          	auipc	a5,0x21
   18222:	25a7b783          	ld	a5,602(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18226:	0007c783          	lbu	a5,0(a5)
   1822a:	cf89                	c.beqz	a5,18244 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x802>
    _Atomic_word __result = *__mem;
   1822c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1822e:	fff5079b          	addiw	a5,a0,-1
   18232:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18234:	4785                	c.li	a5,1
   18236:	f6f518e3          	bne	a0,a5,181a6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
	    _M_destroy();
   1823a:	601c                	c.ld	a5,0(s0)
   1823c:	6f9c                	c.ld	a5,24(a5)
   1823e:	8522                	c.mv	a0,s0
   18240:	9782                	c.jalr	a5
   18242:	b795                	c.j	181a6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
      return __exchange_and_add(__mem, __val);
   18244:	55fd                	c.li	a1,-1
   18246:	03440513          	addi	a0,s0,52
   1824a:	8e6fe0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1824e:	b7dd                	c.j	18234 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7f2>
    throw format_error("required .debug_info section missing");
   18250:	842a                	c.mv	s0,a0
   18252:	854a                	c.mv	a0,s2
   18254:	a1cfe0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18258:	6488                	c.ld	a0,8(s1)
   1825a:	c511                	c.beqz	a0,18266 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x824>
	  _M_pi->_M_release();
   1825c:	00021317          	auipc	t1,0x21
   18260:	16433303          	ld	t1,356(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   18264:	9302                	c.jalr	t1
   18266:	8522                	c.mv	a0,s0
   18268:	c28fe0ef          	jal	ra,16690 <_Unwind_Resume@plt>
    throw format_error("required .debug_abbrev section missing");
   1826c:	842a                	c.mv	s0,a0
   1826e:	854a                	c.mv	a0,s2
   18270:	a00fe0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18274:	6542                	c.ldsp	a0,16(sp)
   18276:	d16d                	c.beqz	a0,18258 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
	  _M_pi->_M_release();
   18278:	00021317          	auipc	t1,0x21
   1827c:	14833303          	ld	t1,328(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   18280:	9302                	c.jalr	t1
   18282:	bfd9                	c.j	18258 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
	if (_M_pi != nullptr)
   18284:	842a                	c.mv	s0,a0
   18286:	7522                	c.ldsp	a0,40(sp)
   18288:	d575                	c.beqz	a0,18274 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
	  _M_pi->_M_release();
   1828a:	00021317          	auipc	t1,0x21
   1828e:	13633303          	ld	t1,310(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   18292:	9302                	c.jalr	t1
   18294:	b7c5                	c.j	18274 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18296:	f04a                	c.sdsp	s2,32(sp)
      : _M_pi(__r._M_pi)
   18298:	f402                	c.sdsp	zero,40(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1829a:	00893603          	ld	a2,8(s2)
   1829e:	f832                	c.sdsp	a2,48(sp)
      { return _M_ptr; }
   182a0:	87ca                	c.mv	a5,s2
  while (!infocur.end()) {
   182a2:	01093703          	ld	a4,16(s2)
   182a6:	d4e66ae3          	bltu	a2,a4,17ffa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5b8>
   182aa:	bdf1                	c.j	18186 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   182ac:	e452                	c.sdsp	s4,8(sp)
      : _M_pi(__r._M_pi)
   182ae:	e802                	c.sdsp	zero,16(sp)
   182b0:	008a3783          	ld	a5,8(s4)
   182b4:	ec3e                	c.sdsp	a5,24(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   182b6:	67a2                	c.ldsp	a5,8(sp)
   182b8:	6b98                	c.ld	a4,16(a5)
   182ba:	67e2                	c.ldsp	a5,24(sp)
   182bc:	40f70633          	sub	a2,a4,a5
   182c0:	468d                	c.li	a3,3
   182c2:	00c6f463          	bgeu	a3,a2,182ca <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x888>
   182c6:	a6e7e3e3          	bltu	a5,a4,17d2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ea>
      underflow();
   182ca:	0028                	c.addi4spn	a0,sp,8
   182cc:	16d020ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   182d0:	bcb1                	c.j	17d2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ea>

00000000000182d2 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>:
type_unit::type_unit(const dwarf &file, section_offset offset) {
   182d2:	7115                	c.addi16sp	sp,-224
   182d4:	ed86                	c.sdsp	ra,216(sp)
   182d6:	e9a2                	c.sdsp	s0,208(sp)
   182d8:	e5a6                	c.sdsp	s1,200(sp)
   182da:	e1ca                	c.sdsp	s2,192(sp)
   182dc:	fd4e                	c.sdsp	s3,184(sp)
   182de:	f952                	c.sdsp	s4,176(sp)
   182e0:	f556                	c.sdsp	s5,168(sp)
   182e2:	f15a                	c.sdsp	s6,160(sp)
   182e4:	ed5e                	c.sdsp	s7,152(sp)
   182e6:	e962                	c.sdsp	s8,144(sp)
   182e8:	892a                	c.mv	s2,a0
   182ea:	89ae                	c.mv	s3,a1
   182ec:	8a32                	c.mv	s4,a2
      : _M_ptr(0), _M_refcount()
   182ee:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   182f2:	00053823          	sd	zero,16(a0)
   182f6:	00021797          	auipc	a5,0x21
   182fa:	05a7b783          	ld	a5,90(a5) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   182fe:	07c1                	c.addi	a5,16
   18300:	e11c                	c.sd	a5,0(a0)
  cursor cur(file.get_section(section_type::types), offset);
   18302:	462d                	c.li	a2,11
   18304:	0108                	c.addi4spn	a0,sp,128
   18306:	de5fe0ef          	jal	ra,170ea <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1830a:	678a                	c.ldsp	a5,128(sp)
   1830c:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   1830e:	652a                	c.ldsp	a0,136(sp)
   18310:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   18312:	c919                	c.beqz	a0,18328 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56>
    if (__is_single_threaded())
   18314:	00021797          	auipc	a5,0x21
   18318:	1647b783          	ld	a5,356(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1831c:	0007c783          	lbu	a5,0(a5)
   18320:	cf8d                	c.beqz	a5,1835a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x88>
  { *__mem += __val; }
   18322:	591c                	c.lw	a5,48(a0)
   18324:	2785                	c.addiw	a5,1
   18326:	d91c                	c.sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   18328:	678a                	c.ldsp	a5,128(sp)
   1832a:	679c                	c.ld	a5,8(a5)
   1832c:	97d2                	c.add	a5,s4
   1832e:	f03e                	c.sdsp	a5,32(sp)
	if (_M_pi != nullptr)
   18330:	642a                	c.ldsp	s0,136(sp)
   18332:	cc19                	c.beqz	s0,18350 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
    if (__is_single_threaded())
   18334:	00021797          	auipc	a5,0x21
   18338:	1447b783          	ld	a5,324(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1833c:	0007c783          	lbu	a5,0(a5)
   18340:	c39d                	c.beqz	a5,18366 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x94>
    _Atomic_word __result = *__mem;
   18342:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18344:	fff5079b          	addiw	a5,a0,-1
   18348:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1834a:	4785                	c.li	a5,1
   1834c:	02f50363          	beq	a0,a5,18372 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xa0>
  std::shared_ptr<section> subsec = cur.subsection();
   18350:	080c                	c.addi4spn	a1,sp,16
   18352:	850a                	c.mv	a0,sp
   18354:	475020ef          	jal	ra,1afc8 <dwarf::cursor::subsection()>
   18358:	a8a1                	c.j	183b0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xde>
      __atomic_add(__mem, __val);
   1835a:	4585                	c.li	a1,1
   1835c:	03050513          	addi	a0,a0,48
   18360:	fa1fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18364:	b7d1                	c.j	18328 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56>
      return __exchange_and_add(__mem, __val);
   18366:	55fd                	c.li	a1,-1
   18368:	03040513          	addi	a0,s0,48
   1836c:	fc5fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18370:	bfe9                	c.j	1834a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x78>
	_M_dispose();
   18372:	601c                	c.ld	a5,0(s0)
   18374:	6b9c                	c.ld	a5,16(a5)
   18376:	8522                	c.mv	a0,s0
   18378:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1837a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1837e:	00021797          	auipc	a5,0x21
   18382:	0fa7b783          	ld	a5,250(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18386:	0007c783          	lbu	a5,0(a5)
   1838a:	cf89                	c.beqz	a5,183a4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xd2>
    _Atomic_word __result = *__mem;
   1838c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1838e:	fff5079b          	addiw	a5,a0,-1
   18392:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18394:	4785                	c.li	a5,1
   18396:	faf51de3          	bne	a0,a5,18350 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
	    _M_destroy();
   1839a:	601c                	c.ld	a5,0(s0)
   1839c:	6f9c                	c.ld	a5,24(a5)
   1839e:	8522                	c.mv	a0,s0
   183a0:	9782                	c.jalr	a5
   183a2:	b77d                	c.j	18350 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
      return __exchange_and_add(__mem, __val);
   183a4:	55fd                	c.li	a1,-1
   183a6:	03440513          	addi	a0,s0,52
   183aa:	f87fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   183ae:	b7dd                	c.j	18394 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc2>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   183b0:	6482                	c.ldsp	s1,0(sp)
      : _M_pi(__r._M_pi)
   183b2:	6422                	c.ldsp	s0,8(sp)
	if (_M_pi != nullptr)
   183b4:	56040463          	beq	s0,zero,1891c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x64a>
    if (__is_single_threaded())
   183b8:	00021797          	auipc	a5,0x21
   183bc:	0c07b783          	ld	a5,192(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   183c0:	0007c783          	lbu	a5,0(a5)
   183c4:	cbad                	c.beqz	a5,18436 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x164>
  { *__mem += __val; }
   183c6:	581c                	c.lw	a5,48(s0)
   183c8:	2785                	c.addiw	a5,1
   183ca:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   183cc:	f426                	c.sdsp	s1,40(sp)
      : _M_pi(__r._M_pi)
   183ce:	f822                	c.sdsp	s0,48(sp)
    if (__is_single_threaded())
   183d0:	00021797          	auipc	a5,0x21
   183d4:	0a87b783          	ld	a5,168(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   183d8:	0007c783          	lbu	a5,0(a5)
   183dc:	c3bd                	c.beqz	a5,18442 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x170>
  { *__mem += __val; }
   183de:	581c                	c.lw	a5,48(s0)
   183e0:	2785                	c.addiw	a5,1
   183e2:	d81c                	c.sw	a5,48(s0)
   183e4:	649c                	c.ld	a5,8(s1)
   183e6:	fc3e                	c.sdsp	a5,56(sp)
    if (__is_single_threaded())
   183e8:	00021797          	auipc	a5,0x21
   183ec:	0907b783          	ld	a5,144(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   183f0:	0007c783          	lbu	a5,0(a5)
   183f4:	cfa9                	c.beqz	a5,1844e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x17c>
    _Atomic_word __result = *__mem;
   183f6:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   183f8:	fff5079b          	addiw	a5,a0,-1
   183fc:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   183fe:	4785                	c.li	a5,1
   18400:	52f51263          	bne	a0,a5,18924 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
	_M_dispose();
   18404:	601c                	c.ld	a5,0(s0)
   18406:	6b9c                	c.ld	a5,16(a5)
   18408:	8522                	c.mv	a0,s0
   1840a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1840c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18410:	00021797          	auipc	a5,0x21
   18414:	0687b783          	ld	a5,104(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18418:	0007c783          	lbu	a5,0(a5)
   1841c:	cf9d                	c.beqz	a5,1845a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x188>
    _Atomic_word __result = *__mem;
   1841e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18420:	fff5079b          	addiw	a5,a0,-1
   18424:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18426:	4785                	c.li	a5,1
   18428:	4ef51e63          	bne	a0,a5,18924 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
	    _M_destroy();
   1842c:	601c                	c.ld	a5,0(s0)
   1842e:	6f9c                	c.ld	a5,24(a5)
   18430:	8522                	c.mv	a0,s0
   18432:	9782                	c.jalr	a5
   18434:	a9c5                	c.j	18924 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
      __atomic_add(__mem, __val);
   18436:	4585                	c.li	a1,1
   18438:	03040513          	addi	a0,s0,48
   1843c:	ec5fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18440:	b771                	c.j	183cc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xfa>
   18442:	4585                	c.li	a1,1
   18444:	03040513          	addi	a0,s0,48
   18448:	eb9fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1844c:	bf61                	c.j	183e4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x112>
      return __exchange_and_add(__mem, __val);
   1844e:	55fd                	c.li	a1,-1
   18450:	03040513          	addi	a0,s0,48
   18454:	eddfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18458:	b75d                	c.j	183fe <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x12c>
   1845a:	55fd                	c.li	a1,-1
   1845c:	03440513          	addi	a0,s0,52
   18460:	ed1fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18464:	b7c9                	c.j	18426 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x154>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18466:	77a2                	c.ldsp	a5,40(sp)
   18468:	6b98                	c.ld	a4,16(a5)
   1846a:	77e2                	c.ldsp	a5,56(sp)
   1846c:	40f70633          	sub	a2,a4,a5
   18470:	4685                	c.li	a3,1
   18472:	00c6f463          	bgeu	a3,a2,1847a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1a8>
   18476:	00e7e563          	bltu	a5,a4,18480 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1ae>
      underflow();
   1847a:	1028                	c.addi4spn	a0,sp,40
   1847c:	7bc020ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18480:	7762                	c.ldsp	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   18482:	77a2                	c.ldsp	a5,40(sp)
   18484:	4fdc                	c.lw	a5,28(a5)
   18486:	e39d                	c.bnez	a5,184ac <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1da>
        val |= ((uint64_t)p[i]) << (i * 8);
   18488:	00174783          	lbu	a5,1(a4)
   1848c:	07a2                	c.slli	a5,0x8
   1848e:	00074683          	lbu	a3,0(a4)
   18492:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   18494:	0709                	c.addi	a4,2
   18496:	fc3a                	c.sdsp	a4,56(sp)
    return (T)val;
   18498:	03079413          	slli	s0,a5,0x30
   1849c:	9041                	c.srli	s0,0x30
  if (version != 4)
   1849e:	4711                	c.li	a4,4
   184a0:	00e79d63          	bne	a5,a4,184ba <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1e8>
  section_offset debug_abbrev_offset = sub.offset();
   184a4:	1028                	c.addi4spn	a0,sp,40
   184a6:	4b9020ef          	jal	ra,1b15e <dwarf::cursor::offset()>
   184aa:	a061                	c.j	18532 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x260>
        val = (val << 8) | (uint64_t)p[i];
   184ac:	00074783          	lbu	a5,0(a4)
   184b0:	07a2                	c.slli	a5,0x8
   184b2:	00174683          	lbu	a3,1(a4)
   184b6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   184b8:	bff1                	c.j	18494 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1c2>
    throw format_error("unknown type unit version " + std::to_string(version));
   184ba:	4541                	c.li	a0,16
   184bc:	f15fd0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   184c0:	84aa                	c.mv	s1,a0
   184c2:	85a2                	c.mv	a1,s0
   184c4:	1080                	c.addi4spn	s0,sp,96
   184c6:	8522                	c.mv	a0,s0
   184c8:	00021317          	auipc	t1,0x21
   184cc:	fc033303          	ld	t1,-64(t1) # 39488 <std::__cxx11::to_string(int)@@Base+0x1fbc8>
   184d0:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   184d2:	00015617          	auipc	a2,0x15
   184d6:	e5e60613          	addi	a2,a2,-418 # 2d330 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xc0>
   184da:	4581                	c.li	a1,0
   184dc:	8522                	c.mv	a0,s0
   184de:	e63fd0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   184e2:	85aa                	c.mv	a1,a0
   184e4:	0080                	c.addi4spn	s0,sp,64
   184e6:	8522                	c.mv	a0,s0
   184e8:	f29fd0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   184ec:	85a2                	c.mv	a1,s0
   184ee:	8526                	c.mv	a0,s1
   184f0:	850fe0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   184f4:	00021797          	auipc	a5,0x21
   184f8:	05c7b783          	ld	a5,92(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   184fc:	07c1                	c.addi	a5,16
   184fe:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   18500:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   18502:	089c                	c.addi4spn	a5,sp,80
   18504:	00f50463          	beq	a0,a5,1850c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x23a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18508:	fa9fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1850c:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   1850e:	189c                	c.addi4spn	a5,sp,112
   18510:	00f50463          	beq	a0,a5,18518 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x246>
   18514:	f9dfd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   18518:	00021617          	auipc	a2,0x21
   1851c:	e6063603          	ld	a2,-416(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   18520:	00021597          	auipc	a1,0x21
   18524:	d885b583          	ld	a1,-632(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   18528:	8526                	c.mv	a0,s1
   1852a:	936fe0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1852e:	842a                	c.mv	s0,a0
   18530:	a659                	c.j	188b6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5e4>
  section_offset debug_abbrev_offset = sub.offset();
   18532:	8aaa                	c.mv	s5,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18534:	77a2                	c.ldsp	a5,40(sp)
   18536:	6b98                	c.ld	a4,16(a5)
   18538:	77e2                	c.ldsp	a5,56(sp)
   1853a:	00e7e563          	bltu	a5,a4,18544 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x272>
      underflow();
   1853e:	1028                	c.addi4spn	a0,sp,40
   18540:	6f8020ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18544:	77e2                	c.ldsp	a5,56(sp)
      { return _M_ptr; }
   18546:	7722                	c.ldsp	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   18548:	4f54                	c.lw	a3,28(a4)
   1854a:	3a068763          	beq	a3,zero,188f8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x626>
        val = (val << 8) | (uint64_t)p[i];
   1854e:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   18552:	a66d                	c.j	188fc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x62a>
    const unsigned char *p = (const unsigned char *)pos;
   18554:	7662                	c.ldsp	a2,56(sp)
    if (sec->ord == byte_order::lsb) {
   18556:	77a2                	c.ldsp	a5,40(sp)
   18558:	4fdc                	c.lw	a5,28(a5)
   1855a:	e785                	c.bnez	a5,18582 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2b0>
   1855c:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1855e:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   18560:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   18564:	0006c703          	lbu	a4,0(a3)
   18568:	00f71733          	sll	a4,a4,a5
   1856c:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1856e:	0685                	c.addi	a3,1
   18570:	27a1                	c.addiw	a5,8
   18572:	feb799e3          	bne	a5,a1,18564 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x292>
    pos += sizeof(T);
   18576:	0621                	c.addi	a2,8
   18578:	fc32                	c.sdsp	a2,56(sp)
  section_offset type_offset = sub.offset();
   1857a:	1028                	c.addi4spn	a0,sp,40
   1857c:	3e3020ef          	jal	ra,1b15e <dwarf::cursor::offset()>
   18580:	a829                	c.j	1859a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2c8>
   18582:	87b2                	c.mv	a5,a2
   18584:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   18588:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1858a:	04a2                	c.slli	s1,0x8
   1858c:	0007c703          	lbu	a4,0(a5)
   18590:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   18592:	0785                	c.addi	a5,1
   18594:	fef69be3          	bne	a3,a5,1858a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2b8>
   18598:	bff9                	c.j	18576 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2a4>
   1859a:	8b2a                	c.mv	s6,a0
  section_offset get_section_offset() const { return pos - sec->begin; }
   1859c:	77a2                	c.ldsp	a5,40(sp)
   1859e:	679c                	c.ld	a5,8(a5)
   185a0:	7be2                	c.ldsp	s7,56(sp)
   185a2:	40fb8bb3          	sub	s7,s7,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   185a6:	1c800513          	addi	a0,zero,456
   185aa:	f17fd0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   185ae:	842a                	c.mv	s0,a0
   185b0:	00052423          	sw	zero,8(a0)
   185b4:	00052623          	sw	zero,12(a0)
   185b8:	00052823          	sw	zero,16(a0)
   185bc:	00052a23          	sw	zero,20(a0)
   185c0:	00052c23          	sw	zero,24(a0)
   185c4:	00052e23          	sw	zero,28(a0)
   185c8:	02053023          	sd	zero,32(a0)
   185cc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   185d0:	4785                	c.li	a5,1
   185d2:	d91c                	c.sw	a5,48(a0)
   185d4:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   185d6:	00021797          	auipc	a5,0x21
   185da:	e5a7b783          	ld	a5,-422(a5) # 39430 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa48>
   185de:	07c1                	c.addi	a5,16
   185e0:	e11c                	c.sd	a5,0(a0)
   185e2:	03850c13          	addi	s8,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   185e6:	0009b783          	ld	a5,0(s3)
   185ea:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   185ec:	0089b503          	ld	a0,8(s3)
   185f0:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   185f2:	cd01                	c.beqz	a0,1860a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x338>
    if (__is_single_threaded())
   185f4:	00021797          	auipc	a5,0x21
   185f8:	e847b783          	ld	a5,-380(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   185fc:	0007c783          	lbu	a5,0(a5)
   18600:	14078b63          	beq	a5,zero,18756 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x484>
  { *__mem += __val; }
   18604:	591c                	c.lw	a5,48(a0)
   18606:	2785                	c.addiw	a5,1
   18608:	d91c                	c.sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   1860a:	05443423          	sd	s4,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1860e:	6782                	c.ldsp	a5,0(sp)
   18610:	e83c                	c.sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   18612:	6522                	c.ldsp	a0,8(sp)
   18614:	ec28                	c.sd	a0,88(s0)
	if (_M_pi != nullptr)
   18616:	cd01                	c.beqz	a0,1862e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x35c>
    if (__is_single_threaded())
   18618:	00021797          	auipc	a5,0x21
   1861c:	e607b783          	ld	a5,-416(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18620:	0007c783          	lbu	a5,0(a5)
   18624:	12078f63          	beq	a5,zero,18762 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x490>
  { *__mem += __val; }
   18628:	591c                	c.lw	a5,48(a0)
   1862a:	2785                	c.addiw	a5,1
   1862c:	d91c                	c.sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   1862e:	07543023          	sd	s5,96(s0)
   18632:	07743423          	sd	s7,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   18636:	f824                	c.sd	s1,112(s0)
   18638:	07643c23          	sd	s6,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   1863c:	08043423          	sd	zero,136(s0)
   18640:	08043823          	sd	zero,144(s0)
   18644:	0a040793          	addi	a5,s0,160
   18648:	e87c                	c.sd	a5,208(s0)
   1864a:	ec7c                	c.sd	a5,216(s0)
   1864c:	0d040793          	addi	a5,s0,208
   18650:	f07c                	c.sd	a5,224(s0)
   18652:	0e043c23          	sd	zero,248(s0)
   18656:	10043023          	sd	zero,256(s0)
   1865a:	11040793          	addi	a5,s0,272
   1865e:	14f43023          	sd	a5,320(s0)
   18662:	14f43423          	sd	a5,328(s0)
   18666:	14040793          	addi	a5,s0,320
   1866a:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   1866e:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18672:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   18676:	16040823          	sb	zero,368(s0)
   1867a:	16043c23          	sd	zero,376(s0)
   1867e:	18043023          	sd	zero,384(s0)
   18682:	18043423          	sd	zero,392(s0)
   18686:	1c040793          	addi	a5,s0,448
   1868a:	18f43823          	sd	a5,400(s0)
   1868e:	4785                	c.li	a5,1
   18690:	18f43c23          	sd	a5,408(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   18694:	1a043023          	sd	zero,416(s0)
   18698:	1a043423          	sd	zero,424(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   1869c:	00015797          	auipc	a5,0x15
   186a0:	f0c7a787          	flw	fa5,-244(a5) # 2d5a8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   186a4:	1af42827          	fsw	fa5,432(s0)
   186a8:	1a043c23          	sd	zero,440(s0)
   186ac:	1c043023          	sd	zero,448(s0)
   186b0:	01893423          	sd	s8,8(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   186b4:	01093483          	ld	s1,16(s2)
	__r._M_pi = _M_pi;
   186b8:	00893823          	sd	s0,16(s2)
	if (_M_pi != nullptr)
   186bc:	cc99                	c.beqz	s1,186da <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
    if (__is_single_threaded())
   186be:	00021797          	auipc	a5,0x21
   186c2:	dba7b783          	ld	a5,-582(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   186c6:	0007c783          	lbu	a5,0(a5)
   186ca:	c3d5                	c.beqz	a5,1876e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x49c>
    _Atomic_word __result = *__mem;
   186cc:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   186ce:	fff5079b          	addiw	a5,a0,-1
   186d2:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   186d4:	4785                	c.li	a5,1
   186d6:	0af50263          	beq	a0,a5,1877a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
	if (_M_pi != nullptr)
   186da:	7442                	c.ldsp	s0,48(sp)
   186dc:	cc19                	c.beqz	s0,186fa <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
    if (__is_single_threaded())
   186de:	00021797          	auipc	a5,0x21
   186e2:	d9a7b783          	ld	a5,-614(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   186e6:	0007c783          	lbu	a5,0(a5)
   186ea:	c7f9                	c.beqz	a5,187b8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4e6>
    _Atomic_word __result = *__mem;
   186ec:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   186ee:	fff5079b          	addiw	a5,a0,-1
   186f2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   186f4:	4785                	c.li	a5,1
   186f6:	0cf50763          	beq	a0,a5,187c4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4f2>
	if (_M_pi != nullptr)
   186fa:	6422                	c.ldsp	s0,8(sp)
   186fc:	c005                	c.beqz	s0,1871c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
    if (__is_single_threaded())
   186fe:	00021797          	auipc	a5,0x21
   18702:	d7a7b783          	ld	a5,-646(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18706:	0007c783          	lbu	a5,0(a5)
   1870a:	0e078c63          	beq	a5,zero,18802 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x530>
    _Atomic_word __result = *__mem;
   1870e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18710:	fff5079b          	addiw	a5,a0,-1
   18714:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18716:	4785                	c.li	a5,1
   18718:	0ef50b63          	beq	a0,a5,1880e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x53c>
	if (_M_pi != nullptr)
   1871c:	6462                	c.ldsp	s0,24(sp)
   1871e:	c005                	c.beqz	s0,1873e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
    if (__is_single_threaded())
   18720:	00021797          	auipc	a5,0x21
   18724:	d587b783          	ld	a5,-680(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18728:	0007c783          	lbu	a5,0(a5)
   1872c:	12078063          	beq	a5,zero,1884c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x57a>
    _Atomic_word __result = *__mem;
   18730:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18732:	fff5079b          	addiw	a5,a0,-1
   18736:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18738:	4785                	c.li	a5,1
   1873a:	10f50f63          	beq	a0,a5,18858 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x586>
}
   1873e:	60ee                	c.ldsp	ra,216(sp)
   18740:	644e                	c.ldsp	s0,208(sp)
   18742:	64ae                	c.ldsp	s1,200(sp)
   18744:	690e                	c.ldsp	s2,192(sp)
   18746:	79ea                	c.ldsp	s3,184(sp)
   18748:	7a4a                	c.ldsp	s4,176(sp)
   1874a:	7aaa                	c.ldsp	s5,168(sp)
   1874c:	7b0a                	c.ldsp	s6,160(sp)
   1874e:	6bea                	c.ldsp	s7,152(sp)
   18750:	6c4a                	c.ldsp	s8,144(sp)
   18752:	612d                	c.addi16sp	sp,224
   18754:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   18756:	4585                	c.li	a1,1
   18758:	03050513          	addi	a0,a0,48
   1875c:	ba5fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18760:	b56d                	c.j	1860a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x338>
   18762:	4585                	c.li	a1,1
   18764:	03050513          	addi	a0,a0,48
   18768:	b99fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1876c:	b5c9                	c.j	1862e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x35c>
      return __exchange_and_add(__mem, __val);
   1876e:	55fd                	c.li	a1,-1
   18770:	03048513          	addi	a0,s1,48
   18774:	bbdfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18778:	bfb1                	c.j	186d4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x402>
	_M_dispose();
   1877a:	609c                	c.ld	a5,0(s1)
   1877c:	6b9c                	c.ld	a5,16(a5)
   1877e:	8526                	c.mv	a0,s1
   18780:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18782:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18786:	00021797          	auipc	a5,0x21
   1878a:	cf27b783          	ld	a5,-782(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1878e:	0007c783          	lbu	a5,0(a5)
   18792:	cf89                	c.beqz	a5,187ac <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4da>
    _Atomic_word __result = *__mem;
   18794:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   18796:	fff5079b          	addiw	a5,a0,-1
   1879a:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1879c:	4785                	c.li	a5,1
   1879e:	f2f51ee3          	bne	a0,a5,186da <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
	    _M_destroy();
   187a2:	609c                	c.ld	a5,0(s1)
   187a4:	6f9c                	c.ld	a5,24(a5)
   187a6:	8526                	c.mv	a0,s1
   187a8:	9782                	c.jalr	a5
   187aa:	bf05                	c.j	186da <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
      return __exchange_and_add(__mem, __val);
   187ac:	55fd                	c.li	a1,-1
   187ae:	03448513          	addi	a0,s1,52
   187b2:	b7ffd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   187b6:	b7dd                	c.j	1879c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4ca>
   187b8:	55fd                	c.li	a1,-1
   187ba:	03040513          	addi	a0,s0,48
   187be:	b73fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   187c2:	bf0d                	c.j	186f4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x422>
	_M_dispose();
   187c4:	601c                	c.ld	a5,0(s0)
   187c6:	6b9c                	c.ld	a5,16(a5)
   187c8:	8522                	c.mv	a0,s0
   187ca:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   187cc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   187d0:	00021797          	auipc	a5,0x21
   187d4:	ca87b783          	ld	a5,-856(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   187d8:	0007c783          	lbu	a5,0(a5)
   187dc:	cf89                	c.beqz	a5,187f6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x524>
    _Atomic_word __result = *__mem;
   187de:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   187e0:	fff5079b          	addiw	a5,a0,-1
   187e4:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   187e6:	4785                	c.li	a5,1
   187e8:	f0f519e3          	bne	a0,a5,186fa <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
	    _M_destroy();
   187ec:	601c                	c.ld	a5,0(s0)
   187ee:	6f9c                	c.ld	a5,24(a5)
   187f0:	8522                	c.mv	a0,s0
   187f2:	9782                	c.jalr	a5
   187f4:	b719                	c.j	186fa <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
      return __exchange_and_add(__mem, __val);
   187f6:	55fd                	c.li	a1,-1
   187f8:	03440513          	addi	a0,s0,52
   187fc:	b35fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18800:	b7dd                	c.j	187e6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x514>
   18802:	55fd                	c.li	a1,-1
   18804:	03040513          	addi	a0,s0,48
   18808:	b29fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1880c:	b729                	c.j	18716 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x444>
	_M_dispose();
   1880e:	601c                	c.ld	a5,0(s0)
   18810:	6b9c                	c.ld	a5,16(a5)
   18812:	8522                	c.mv	a0,s0
   18814:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18816:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1881a:	00021797          	auipc	a5,0x21
   1881e:	c5e7b783          	ld	a5,-930(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18822:	0007c783          	lbu	a5,0(a5)
   18826:	cf89                	c.beqz	a5,18840 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56e>
    _Atomic_word __result = *__mem;
   18828:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1882a:	fff5079b          	addiw	a5,a0,-1
   1882e:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18830:	4785                	c.li	a5,1
   18832:	eef515e3          	bne	a0,a5,1871c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
	    _M_destroy();
   18836:	601c                	c.ld	a5,0(s0)
   18838:	6f9c                	c.ld	a5,24(a5)
   1883a:	8522                	c.mv	a0,s0
   1883c:	9782                	c.jalr	a5
   1883e:	bdf9                	c.j	1871c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
      return __exchange_and_add(__mem, __val);
   18840:	55fd                	c.li	a1,-1
   18842:	03440513          	addi	a0,s0,52
   18846:	aebfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1884a:	b7dd                	c.j	18830 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x55e>
   1884c:	55fd                	c.li	a1,-1
   1884e:	03040513          	addi	a0,s0,48
   18852:	adffd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18856:	b5cd                	c.j	18738 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x466>
	_M_dispose();
   18858:	601c                	c.ld	a5,0(s0)
   1885a:	6b9c                	c.ld	a5,16(a5)
   1885c:	8522                	c.mv	a0,s0
   1885e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18860:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18864:	00021797          	auipc	a5,0x21
   18868:	c147b783          	ld	a5,-1004(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1886c:	0007c783          	lbu	a5,0(a5)
   18870:	cf89                	c.beqz	a5,1888a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5b8>
    _Atomic_word __result = *__mem;
   18872:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18874:	fff5079b          	addiw	a5,a0,-1
   18878:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1887a:	4785                	c.li	a5,1
   1887c:	ecf511e3          	bne	a0,a5,1873e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
	    _M_destroy();
   18880:	601c                	c.ld	a5,0(s0)
   18882:	6f9c                	c.ld	a5,24(a5)
   18884:	8522                	c.mv	a0,s0
   18886:	9782                	c.jalr	a5
   18888:	bd5d                	c.j	1873e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
      return __exchange_and_add(__mem, __val);
   1888a:	55fd                	c.li	a1,-1
   1888c:	03440513          	addi	a0,s0,52
   18890:	aa1fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18894:	b7dd                	c.j	1887a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5a8>
      { return _M_dataplus._M_p; }
   18896:	842a                	c.mv	s0,a0
   18898:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1889a:	089c                	c.addi4spn	a5,sp,80
   1889c:	00f50463          	beq	a0,a5,188a4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5d2>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   188a0:	c11fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   188a4:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   188a6:	189c                	c.addi4spn	a5,sp,112
   188a8:	00f50463          	beq	a0,a5,188b0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5de>
   188ac:	c05fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw format_error("unknown type unit version " + std::to_string(version));
   188b0:	8526                	c.mv	a0,s1
   188b2:	bbffd0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   188b6:	7542                	c.ldsp	a0,48(sp)
   188b8:	c511                	c.beqz	a0,188c4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f2>
	  _M_pi->_M_release();
   188ba:	00021317          	auipc	t1,0x21
   188be:	b0633303          	ld	t1,-1274(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   188c2:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   188c4:	6522                	c.ldsp	a0,8(sp)
   188c6:	c511                	c.beqz	a0,188d2 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x600>
	  _M_pi->_M_release();
   188c8:	00021317          	auipc	t1,0x21
   188cc:	af833303          	ld	t1,-1288(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   188d0:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   188d2:	6562                	c.ldsp	a0,24(sp)
   188d4:	c511                	c.beqz	a0,188e0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x60e>
	  _M_pi->_M_release();
   188d6:	00021317          	auipc	t1,0x21
   188da:	aea33303          	ld	t1,-1302(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   188de:	9302                	c.jalr	t1
}
   188e0:	854a                	c.mv	a0,s2
   188e2:	f54fe0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   188e6:	8522                	c.mv	a0,s0
   188e8:	da9fd0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   188ec:	842a                	c.mv	s0,a0
   188ee:	bf5d                	c.j	188a4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5d2>
	if (_M_pi != nullptr)
   188f0:	842a                	c.mv	s0,a0
   188f2:	b7c5                	c.j	188d2 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x600>
   188f4:	842a                	c.mv	s0,a0
   188f6:	b7ed                	c.j	188e0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x60e>
        val |= ((uint64_t)p[i]) << (i * 8);
   188f8:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   188fc:	0785                	c.addi	a5,1
   188fe:	fc3e                	c.sdsp	a5,56(sp)
  subsec->addr_size = address_size;
   18900:	6682                	c.ldsp	a3,0(sp)
   18902:	d290                	c.sw	a2,32(a3)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18904:	6b18                	c.ld	a4,16(a4)
   18906:	40f70633          	sub	a2,a4,a5
   1890a:	469d                	c.li	a3,7
   1890c:	00c6f463          	bgeu	a3,a2,18914 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x642>
   18910:	c4e7e2e3          	bltu	a5,a4,18554 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x282>
      underflow();
   18914:	1028                	c.addi4spn	a0,sp,40
   18916:	322020ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   1891a:	b92d                	c.j	18554 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x282>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1891c:	f426                	c.sdsp	s1,40(sp)
      : _M_pi(__r._M_pi)
   1891e:	f802                	c.sdsp	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   18920:	649c                	c.ld	a5,8(s1)
   18922:	fc3e                	c.sdsp	a5,56(sp)
  sub.skip_initial_length();
   18924:	1028                	c.addi4spn	a0,sp,40
   18926:	1fe020ef          	jal	ra,1ab24 <dwarf::cursor::skip_initial_length()>
   1892a:	be35                	c.j	18466 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x194>

000000000001892c <dwarf::dwarf::get_type_unit(unsigned long) const>:
const type_unit &dwarf::get_type_unit(uint64_t type_signature) const {
   1892c:	7115                	c.addi16sp	sp,-224
   1892e:	ed86                	c.sdsp	ra,216(sp)
   18930:	e9a2                	c.sdsp	s0,208(sp)
   18932:	e5a6                	c.sdsp	s1,200(sp)
   18934:	e1ca                	c.sdsp	s2,192(sp)
   18936:	fd4e                	c.sdsp	s3,184(sp)
   18938:	f952                	c.sdsp	s4,176(sp)
   1893a:	f556                	c.sdsp	s5,168(sp)
   1893c:	f15a                	c.sdsp	s6,160(sp)
   1893e:	ed5e                	c.sdsp	s7,152(sp)
   18940:	e962                	c.sdsp	s8,144(sp)
   18942:	e566                	c.sdsp	s9,136(sp)
   18944:	e16a                	c.sdsp	s10,128(sp)
   18946:	892a                	c.mv	s2,a0
   18948:	e42e                	c.sdsp	a1,8(sp)
  if (!m->have_type_units) {
   1894a:	611c                	c.ld	a5,0(a0)
   1894c:	0807c783          	lbu	a5,128(a5)
   18950:	24079663          	bne	a5,zero,18b9c <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    cursor tucur(get_section(section_type::types));
   18954:	462d                	c.li	a2,11
   18956:	85aa                	c.mv	a1,a0
   18958:	08a8                	c.addi4spn	a0,sp,88
   1895a:	f90fe0ef          	jal	ra,170ea <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1895e:	67e6                	c.ldsp	a5,88(sp)
   18960:	ec3e                	c.sdsp	a5,24(sp)
      : _M_pi(__r._M_pi)
   18962:	7506                	c.ldsp	a0,96(sp)
   18964:	f02a                	c.sdsp	a0,32(sp)
	if (_M_pi != nullptr)
   18966:	c919                	c.beqz	a0,1897c <dwarf::dwarf::get_type_unit(unsigned long) const+0x50>
    if (__is_single_threaded())
   18968:	00021797          	auipc	a5,0x21
   1896c:	b107b783          	ld	a5,-1264(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18970:	0007c783          	lbu	a5,0(a5)
   18974:	c3b5                	c.beqz	a5,189d8 <dwarf::dwarf::get_type_unit(unsigned long) const+0xac>
  { *__mem += __val; }
   18976:	591c                	c.lw	a5,48(a0)
   18978:	2785                	c.addiw	a5,1
   1897a:	d91c                	c.sw	a5,48(a0)
   1897c:	67e6                	c.ldsp	a5,88(sp)
   1897e:	679c                	c.ld	a5,8(a5)
   18980:	f43e                	c.sdsp	a5,40(sp)
	if (_M_pi != nullptr)
   18982:	7406                	c.ldsp	s0,96(sp)
   18984:	cc19                	c.beqz	s0,189a2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
    if (__is_single_threaded())
   18986:	00021797          	auipc	a5,0x21
   1898a:	af27b783          	ld	a5,-1294(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1898e:	0007c783          	lbu	a5,0(a5)
   18992:	cba9                	c.beqz	a5,189e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0xb8>
    _Atomic_word __result = *__mem;
   18994:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18996:	fff5079b          	addiw	a5,a0,-1
   1899a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1899c:	4785                	c.li	a5,1
   1899e:	04f50963          	beq	a0,a5,189f0 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc4>
  bool end() const { return pos >= sec->end; }
   189a2:	77a2                	c.ldsp	a5,40(sp)
      { return _M_ptr; }
   189a4:	6762                	c.ldsp	a4,24(sp)
    while (!tucur.end()) {
   189a6:	6b14                	c.ld	a3,16(a4)
   189a8:	1cd7f563          	bgeu	a5,a3,18b72 <dwarf::dwarf::get_type_unit(unsigned long) const+0x246>
      type_unit tu(*this, tucur.get_section_offset());
   189ac:	03810993          	addi	s3,sp,56
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
   189b0:	06810b13          	addi	s6,sp,104
   189b4:	00021b97          	auipc	s7,0x21
   189b8:	accbbb83          	ld	s7,-1332(s7) # 39480 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)@@Base+0x1eca2>
    return ::__libc_single_threaded;
   189bc:	00021a97          	auipc	s5,0x21
   189c0:	abcaba83          	ld	s5,-1348(s5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      tucur.subsection();
   189c4:	07010c13          	addi	s8,sp,112
   189c8:	01810c93          	addi	s9,sp,24
class type_unit : public unit {
   189cc:	00021a17          	auipc	s4,0x21
   189d0:	984a3a03          	ld	s4,-1660(s4) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   189d4:	0a41                	c.addi	s4,16
   189d6:	a289                	c.j	18b18 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1ec>
      __atomic_add(__mem, __val);
   189d8:	4585                	c.li	a1,1
   189da:	03050513          	addi	a0,a0,48
   189de:	923fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   189e2:	bf69                	c.j	1897c <dwarf::dwarf::get_type_unit(unsigned long) const+0x50>
      return __exchange_and_add(__mem, __val);
   189e4:	55fd                	c.li	a1,-1
   189e6:	03040513          	addi	a0,s0,48
   189ea:	947fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   189ee:	b77d                	c.j	1899c <dwarf::dwarf::get_type_unit(unsigned long) const+0x70>
	_M_dispose();
   189f0:	601c                	c.ld	a5,0(s0)
   189f2:	6b9c                	c.ld	a5,16(a5)
   189f4:	8522                	c.mv	a0,s0
   189f6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   189f8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   189fc:	00021797          	auipc	a5,0x21
   18a00:	a7c7b783          	ld	a5,-1412(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18a04:	0007c783          	lbu	a5,0(a5)
   18a08:	cf89                	c.beqz	a5,18a22 <dwarf::dwarf::get_type_unit(unsigned long) const+0xf6>
    _Atomic_word __result = *__mem;
   18a0a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18a0c:	fff5079b          	addiw	a5,a0,-1
   18a10:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18a12:	4785                	c.li	a5,1
   18a14:	f8f517e3          	bne	a0,a5,189a2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
	    _M_destroy();
   18a18:	601c                	c.ld	a5,0(s0)
   18a1a:	6f9c                	c.ld	a5,24(a5)
   18a1c:	8522                	c.mv	a0,s0
   18a1e:	9782                	c.jalr	a5
   18a20:	b749                	c.j	189a2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
      return __exchange_and_add(__mem, __val);
   18a22:	55fd                	c.li	a1,-1
   18a24:	03440513          	addi	a0,s0,52
   18a28:	909fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a2c:	b7dd                	c.j	18a12 <dwarf::dwarf::get_type_unit(unsigned long) const+0xe6>
      { return _M_ptr; }
   18a2e:	00093403          	ld	s0,0(s2)
      m->type_units[tu.get_type_signature()] = tu;
   18a32:	854e                	c.mv	a0,s3
   18a34:	eb0fe0ef          	jal	ra,170e4 <dwarf::type_unit::get_type_signature() const>
   18a38:	f4aa                	c.sdsp	a0,104(sp)
   18a3a:	85da                	c.mv	a1,s6
   18a3c:	04840513          	addi	a0,s0,72
   18a40:	9b82                	c.jalr	s7
   18a42:	842a                	c.mv	s0,a0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   18a44:	6786                	c.ldsp	a5,64(sp)
   18a46:	e51c                	c.sd	a5,8(a0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18a48:	64a6                	c.ldsp	s1,72(sp)
	if (__tmp != _M_pi)
   18a4a:	691c                	c.ld	a5,16(a0)
   18a4c:	02f48763          	beq	s1,a5,18a7a <dwarf::dwarf::get_type_unit(unsigned long) const+0x14e>
	    if (__tmp != nullptr)
   18a50:	cc9d                	c.beqz	s1,18a8e <dwarf::dwarf::get_type_unit(unsigned long) const+0x162>
    if (__is_single_threaded())
   18a52:	000ac783          	lbu	a5,0(s5)
   18a56:	c79d                	c.beqz	a5,18a84 <dwarf::dwarf::get_type_unit(unsigned long) const+0x158>
  { *__mem += __val; }
   18a58:	589c                	c.lw	a5,48(s1)
   18a5a:	2785                	c.addiw	a5,1
   18a5c:	d89c                	c.sw	a5,48(s1)
	    if (_M_pi != nullptr)
   18a5e:	01053d03          	ld	s10,16(a0)
   18a62:	000d0b63          	beq	s10,zero,18a78 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
    _Atomic_word __result = *__mem;
   18a66:	030d2503          	lw	a0,48(s10)
    *__mem += __val;
   18a6a:	fff5079b          	addiw	a5,a0,-1
   18a6e:	02fd2823          	sw	a5,48(s10)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18a72:	4785                	c.li	a5,1
   18a74:	02f50a63          	beq	a0,a5,18aa8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x17c>
	    _M_pi = __tmp;
   18a78:	e804                	c.sd	s1,16(s0)
      tucur.subsection();
   18a7a:	85e6                	c.mv	a1,s9
   18a7c:	8562                	c.mv	a0,s8
   18a7e:	54a020ef          	jal	ra,1afc8 <dwarf::cursor::subsection()>
   18a82:	a0b5                	c.j	18aee <dwarf::dwarf::get_type_unit(unsigned long) const+0x1c2>
      __atomic_add(__mem, __val);
   18a84:	4585                	c.li	a1,1
   18a86:	03048513          	addi	a0,s1,48
   18a8a:	877fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
	    if (_M_pi != nullptr)
   18a8e:	01043d03          	ld	s10,16(s0)
   18a92:	fe0d03e3          	beq	s10,zero,18a78 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
    if (__is_single_threaded())
   18a96:	000ac783          	lbu	a5,0(s5)
   18a9a:	f7f1                	c.bnez	a5,18a66 <dwarf::dwarf::get_type_unit(unsigned long) const+0x13a>
      return __exchange_and_add(__mem, __val);
   18a9c:	55fd                	c.li	a1,-1
   18a9e:	030d0513          	addi	a0,s10,48
   18aa2:	88ffd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18aa6:	b7f1                	c.j	18a72 <dwarf::dwarf::get_type_unit(unsigned long) const+0x146>
	_M_dispose();
   18aa8:	000d3783          	ld	a5,0(s10)
   18aac:	6b9c                	c.ld	a5,16(a5)
   18aae:	856a                	c.mv	a0,s10
   18ab0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18ab2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18ab6:	00021797          	auipc	a5,0x21
   18aba:	9c27b783          	ld	a5,-1598(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18abe:	0007c783          	lbu	a5,0(a5)
   18ac2:	c385                	c.beqz	a5,18ae2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1b6>
    _Atomic_word __result = *__mem;
   18ac4:	034d2503          	lw	a0,52(s10)
    *__mem += __val;
   18ac8:	fff5079b          	addiw	a5,a0,-1
   18acc:	02fd2a23          	sw	a5,52(s10)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18ad0:	4785                	c.li	a5,1
   18ad2:	faf513e3          	bne	a0,a5,18a78 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
	    _M_destroy();
   18ad6:	000d3783          	ld	a5,0(s10)
   18ada:	6f9c                	c.ld	a5,24(a5)
   18adc:	856a                	c.mv	a0,s10
   18ade:	9782                	c.jalr	a5
   18ae0:	bf61                	c.j	18a78 <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
      return __exchange_and_add(__mem, __val);
   18ae2:	55fd                	c.li	a1,-1
   18ae4:	034d0513          	addi	a0,s10,52
   18ae8:	849fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18aec:	b7d5                	c.j	18ad0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1a4>
	if (_M_pi != nullptr)
   18aee:	7466                	c.ldsp	s0,120(sp)
   18af0:	c819                	c.beqz	s0,18b06 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
    if (__is_single_threaded())
   18af2:	000ac783          	lbu	a5,0(s5)
   18af6:	cb8d                	c.beqz	a5,18b28 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1fc>
    _Atomic_word __result = *__mem;
   18af8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18afa:	fff5079b          	addiw	a5,a0,-1
   18afe:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18b00:	4785                	c.li	a5,1
   18b02:	02f50963          	beq	a0,a5,18b34 <dwarf::dwarf::get_type_unit(unsigned long) const+0x208>
   18b06:	fc52                	c.sdsp	s4,56(sp)
   18b08:	854e                	c.mv	a0,s3
   18b0a:	d2cfe0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   18b0e:	77a2                	c.ldsp	a5,40(sp)
      { return _M_ptr; }
   18b10:	6762                	c.ldsp	a4,24(sp)
    while (!tucur.end()) {
   18b12:	6b14                	c.ld	a3,16(a4)
   18b14:	04d7ff63          	bgeu	a5,a3,18b72 <dwarf::dwarf::get_type_unit(unsigned long) const+0x246>
  section_offset get_section_offset() const { return pos - sec->begin; }
   18b18:	6710                	c.ld	a2,8(a4)
      type_unit tu(*this, tucur.get_section_offset());
   18b1a:	40c78633          	sub	a2,a5,a2
   18b1e:	85ca                	c.mv	a1,s2
   18b20:	854e                	c.mv	a0,s3
   18b22:	fb0ff0ef          	jal	ra,182d2 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>
   18b26:	b721                	c.j	18a2e <dwarf::dwarf::get_type_unit(unsigned long) const+0x102>
      return __exchange_and_add(__mem, __val);
   18b28:	55fd                	c.li	a1,-1
   18b2a:	03040513          	addi	a0,s0,48
   18b2e:	803fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b32:	b7f9                	c.j	18b00 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1d4>
	_M_dispose();
   18b34:	601c                	c.ld	a5,0(s0)
   18b36:	6b9c                	c.ld	a5,16(a5)
   18b38:	8522                	c.mv	a0,s0
   18b3a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18b3c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18b40:	00021797          	auipc	a5,0x21
   18b44:	9387b783          	ld	a5,-1736(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18b48:	0007c783          	lbu	a5,0(a5)
   18b4c:	cf89                	c.beqz	a5,18b66 <dwarf::dwarf::get_type_unit(unsigned long) const+0x23a>
    _Atomic_word __result = *__mem;
   18b4e:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18b50:	fff5079b          	addiw	a5,a0,-1
   18b54:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18b56:	4785                	c.li	a5,1
   18b58:	faf517e3          	bne	a0,a5,18b06 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
	    _M_destroy();
   18b5c:	601c                	c.ld	a5,0(s0)
   18b5e:	6f9c                	c.ld	a5,24(a5)
   18b60:	8522                	c.mv	a0,s0
   18b62:	9782                	c.jalr	a5
   18b64:	b74d                	c.j	18b06 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
      return __exchange_and_add(__mem, __val);
   18b66:	55fd                	c.li	a1,-1
   18b68:	03440513          	addi	a0,s0,52
   18b6c:	fc4fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b70:	b7dd                	c.j	18b56 <dwarf::dwarf::get_type_unit(unsigned long) const+0x22a>
      { return _M_ptr; }
   18b72:	00093783          	ld	a5,0(s2)
    m->have_type_units = true;
   18b76:	4705                	c.li	a4,1
   18b78:	08e78023          	sb	a4,128(a5)
	if (_M_pi != nullptr)
   18b7c:	7402                	c.ldsp	s0,32(sp)
   18b7e:	cc19                	c.beqz	s0,18b9c <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    if (__is_single_threaded())
   18b80:	00021797          	auipc	a5,0x21
   18b84:	8f87b783          	ld	a5,-1800(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18b88:	0007c783          	lbu	a5,0(a5)
   18b8c:	c3b1                	c.beqz	a5,18bd0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
    _Atomic_word __result = *__mem;
   18b8e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18b90:	fff5079b          	addiw	a5,a0,-1
   18b94:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18b96:	4785                	c.li	a5,1
   18b98:	04f50263          	beq	a0,a5,18bdc <dwarf::dwarf::get_type_unit(unsigned long) const+0x2b0>
      { return _M_ptr; }
   18b9c:	00093783          	ld	a5,0(s2)
      { return _M_h.count(__x); }
   18ba0:	04878413          	addi	s0,a5,72
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    -> const_iterator
    {
      if (size() <= __small_size_threshold())
   18ba4:	73b8                	c.ld	a4,96(a5)
   18ba6:	eb35                	c.bnez	a4,18c1a <dwarf::dwarf::get_type_unit(unsigned long) const+0x2ee>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   18ba8:	6fbc                	c.ld	a5,88(a5)
	{
	  for (auto __it = begin(); __it != end(); ++__it)
   18baa:	c799                	c.beqz	a5,18bb8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
      { return __x == __y; }
   18bac:	66a2                	c.ldsp	a3,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   18bae:	6798                	c.ld	a4,8(a5)
   18bb0:	08e68363          	beq	a3,a4,18c36 <dwarf::dwarf::get_type_unit(unsigned long) const+0x30a>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   18bb4:	639c                	c.ld	a5,0(a5)
	  for (auto __it = begin(); __it != end(); ++__it)
   18bb6:	ffe5                	c.bnez	a5,18bae <dwarf::dwarf::get_type_unit(unsigned long) const+0x282>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   18bb8:	4541                	c.li	a0,16
   18bba:	817fd0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   18bbe:	84aa                	c.mv	s1,a0
   18bc0:	65a2                	c.ldsp	a1,8(sp)
   18bc2:	0828                	c.addi4spn	a0,sp,24
   18bc4:	00020317          	auipc	t1,0x20
   18bc8:	72c33303          	ld	t1,1836(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   18bcc:	9302                	c.jalr	t1
   18bce:	a849                	c.j	18c60 <dwarf::dwarf::get_type_unit(unsigned long) const+0x334>
      return __exchange_and_add(__mem, __val);
   18bd0:	55fd                	c.li	a1,-1
   18bd2:	03040513          	addi	a0,s0,48
   18bd6:	f5afd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18bda:	bf75                	c.j	18b96 <dwarf::dwarf::get_type_unit(unsigned long) const+0x26a>
	_M_dispose();
   18bdc:	601c                	c.ld	a5,0(s0)
   18bde:	6b9c                	c.ld	a5,16(a5)
   18be0:	8522                	c.mv	a0,s0
   18be2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18be4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18be8:	00021797          	auipc	a5,0x21
   18bec:	8907b783          	ld	a5,-1904(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18bf0:	0007c783          	lbu	a5,0(a5)
   18bf4:	cf89                	c.beqz	a5,18c0e <dwarf::dwarf::get_type_unit(unsigned long) const+0x2e2>
    _Atomic_word __result = *__mem;
   18bf6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18bf8:	fff5079b          	addiw	a5,a0,-1
   18bfc:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18bfe:	4785                	c.li	a5,1
   18c00:	f8f51ee3          	bne	a0,a5,18b9c <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
	    _M_destroy();
   18c04:	601c                	c.ld	a5,0(s0)
   18c06:	6f9c                	c.ld	a5,24(a5)
   18c08:	8522                	c.mv	a0,s0
   18c0a:	9782                	c.jalr	a5
   18c0c:	bf41                	c.j	18b9c <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
      return __exchange_and_add(__mem, __val);
   18c0e:	55fd                	c.li	a1,-1
   18c10:	03440513          	addi	a0,s0,52
   18c14:	f1cfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18c18:	b7dd                	c.j	18bfe <dwarf::dwarf::get_type_unit(unsigned long) const+0x2d2>
      __hash_code
      _M_hash_code(const _Key& __k) const
      {
	static_assert(__is_invocable<const _Hash&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_hash()(__k);
   18c1a:	66a2                	c.ldsp	a3,8(sp)
    { return __num % __den; }
   18c1c:	6bac                	c.ld	a1,80(a5)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   18c1e:	0030                	c.addi4spn	a2,sp,8
   18c20:	02b6f5b3          	remu	a1,a3,a1
   18c24:	8522                	c.mv	a0,s0
   18c26:	00020317          	auipc	t1,0x20
   18c2a:	6ea33303          	ld	t1,1770(t1) # 39310 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f0c4>
   18c2e:	9302                	c.jalr	t1
	if (__before_n)
   18c30:	d541                	c.beqz	a0,18bb8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
  if (!m->type_units.count(type_signature))
   18c32:	611c                	c.ld	a5,0(a0)
   18c34:	d3d1                	c.beqz	a5,18bb8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
      { return _M_h[__k]; }
   18c36:	002c                	c.addi4spn	a1,sp,8
   18c38:	8522                	c.mv	a0,s0
   18c3a:	00021317          	auipc	t1,0x21
   18c3e:	8ce33303          	ld	t1,-1842(t1) # 39508 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x1ec94>
   18c42:	9302                	c.jalr	t1
}
   18c44:	60ee                	c.ldsp	ra,216(sp)
   18c46:	644e                	c.ldsp	s0,208(sp)
   18c48:	64ae                	c.ldsp	s1,200(sp)
   18c4a:	690e                	c.ldsp	s2,192(sp)
   18c4c:	79ea                	c.ldsp	s3,184(sp)
   18c4e:	7a4a                	c.ldsp	s4,176(sp)
   18c50:	7aaa                	c.ldsp	s5,168(sp)
   18c52:	7b0a                	c.ldsp	s6,160(sp)
   18c54:	6bea                	c.ldsp	s7,152(sp)
   18c56:	6c4a                	c.ldsp	s8,144(sp)
   18c58:	6caa                	c.ldsp	s9,136(sp)
   18c5a:	6d0a                	c.ldsp	s10,128(sp)
   18c5c:	612d                	c.addi16sp	sp,224
   18c5e:	8082                	c.jr	ra
    { return std::move(__rhs.insert(0, __lhs)); }
   18c60:	00015617          	auipc	a2,0x15
   18c64:	bc060613          	addi	a2,a2,-1088 # 2d820 <std::piecewise_construct+0x270>
   18c68:	4581                	c.li	a1,0
   18c6a:	0828                	c.addi4spn	a0,sp,24
   18c6c:	ed4fd0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   18c70:	85aa                	c.mv	a1,a0
   18c72:	1820                	c.addi4spn	s0,sp,56
   18c74:	8522                	c.mv	a0,s0
   18c76:	f9afd0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   18c7a:	85a2                	c.mv	a1,s0
   18c7c:	8526                	c.mv	a0,s1
   18c7e:	973fd0ef          	jal	ra,165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   18c82:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   18c84:	00bc                	c.addi4spn	a5,sp,72
   18c86:	00f50463          	beq	a0,a5,18c8e <dwarf::dwarf::get_type_unit(unsigned long) const+0x362>
   18c8a:	827fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18c8e:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   18c90:	103c                	c.addi4spn	a5,sp,40
   18c92:	00f50463          	beq	a0,a5,18c9a <dwarf::dwarf::get_type_unit(unsigned long) const+0x36e>
   18c96:	81bfd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   18c9a:	00021617          	auipc	a2,0x21
   18c9e:	81e63603          	ld	a2,-2018(a2) # 394b8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   18ca2:	00021597          	auipc	a1,0x21
   18ca6:	8c65b583          	ld	a1,-1850(a1) # 39568 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   18caa:	8526                	c.mv	a0,s1
   18cac:	9b5fd0ef          	jal	ra,16660 <__cxa_throw@plt>
   18cb0:	842a                	c.mv	s0,a0
   18cb2:	00020797          	auipc	a5,0x20
   18cb6:	69e7b783          	ld	a5,1694(a5) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   18cba:	07c1                	c.addi	a5,16
   18cbc:	fc3e                	c.sdsp	a5,56(sp)
   18cbe:	1828                	c.addi4spn	a0,sp,56
   18cc0:	b76fe0ef          	jal	ra,17036 <dwarf::unit::~unit()>
	if (_M_pi != nullptr)
   18cc4:	7502                	c.ldsp	a0,32(sp)
   18cc6:	c511                	c.beqz	a0,18cd2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a6>
	  _M_pi->_M_release();
   18cc8:	00020317          	auipc	t1,0x20
   18ccc:	6f833303          	ld	t1,1784(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   18cd0:	9302                	c.jalr	t1
   18cd2:	8522                	c.mv	a0,s0
   18cd4:	9bdfd0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   18cd8:	842a                	c.mv	s0,a0
   18cda:	b7ed                	c.j	18cc4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x398>
      { return _M_dataplus._M_p; }
   18cdc:	842a                	c.mv	s0,a0
   18cde:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   18ce0:	00bc                	c.addi4spn	a5,sp,72
   18ce2:	00f50463          	beq	a0,a5,18cea <dwarf::dwarf::get_type_unit(unsigned long) const+0x3be>
   18ce6:	fcafd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18cea:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   18cec:	103c                	c.addi4spn	a5,sp,40
   18cee:	00f50463          	beq	a0,a5,18cf6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3ca>
   18cf2:	fbefd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   18cf6:	8526                	c.mv	a0,s1
   18cf8:	f78fd0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   18cfc:	8522                	c.mv	a0,s0
   18cfe:	993fd0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   18d02:	842a                	c.mv	s0,a0
   18d04:	b7dd                	c.j	18cea <dwarf::dwarf::get_type_unit(unsigned long) const+0x3be>
   18d06:	842a                	c.mv	s0,a0
   18d08:	b7fd                	c.j	18cf6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3ca>

0000000000018d0a <dwarf::unit::impl::force_abbrevs()>:
  if (have_abbrevs)
   18d0a:	13854783          	lbu	a5,312(a0)
   18d0e:	c391                	c.beqz	a5,18d12 <dwarf::unit::impl::force_abbrevs()+0x8>
   18d10:	8082                	c.jr	ra
void unit::impl::force_abbrevs() {
   18d12:	7135                	c.addi16sp	sp,-160
   18d14:	ed06                	c.sdsp	ra,152(sp)
   18d16:	e922                	c.sdsp	s0,144(sp)
   18d18:	e526                	c.sdsp	s1,136(sp)
   18d1a:	e14a                	c.sdsp	s2,128(sp)
   18d1c:	fcce                	c.sdsp	s3,120(sp)
   18d1e:	f8d2                	c.sdsp	s4,112(sp)
   18d20:	f4d6                	c.sdsp	s5,104(sp)
   18d22:	f0da                	c.sdsp	s6,96(sp)
   18d24:	ecde                	c.sdsp	s7,88(sp)
   18d26:	84aa                	c.mv	s1,a0
  cursor c(file.get_section(section_type::abbrev), debug_abbrev_offset);
   18d28:	4601                	c.li	a2,0
   18d2a:	85aa                	c.mv	a1,a0
   18d2c:	0088                	c.addi4spn	a0,sp,64
   18d2e:	bbcfe0ef          	jal	ra,170ea <dwarf::dwarf::get_section(dwarf::section_type) const>
   18d32:	7480                	c.ld	s0,40(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18d34:	6786                	c.ldsp	a5,64(sp)
   18d36:	f43e                	c.sdsp	a5,40(sp)
      : _M_pi(__r._M_pi)
   18d38:	6526                	c.ldsp	a0,72(sp)
   18d3a:	f82a                	c.sdsp	a0,48(sp)
	if (_M_pi != nullptr)
   18d3c:	c919                	c.beqz	a0,18d52 <dwarf::unit::impl::force_abbrevs()+0x48>
    if (__is_single_threaded())
   18d3e:	00020797          	auipc	a5,0x20
   18d42:	73a7b783          	ld	a5,1850(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18d46:	0007c783          	lbu	a5,0(a5)
   18d4a:	cfa9                	c.beqz	a5,18da4 <dwarf::unit::impl::force_abbrevs()+0x9a>
  { *__mem += __val; }
   18d4c:	591c                	c.lw	a5,48(a0)
   18d4e:	2785                	c.addiw	a5,1
   18d50:	d91c                	c.sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   18d52:	6786                	c.ldsp	a5,64(sp)
   18d54:	679c                	c.ld	a5,8(a5)
   18d56:	97a2                	c.add	a5,s0
   18d58:	fc3e                	c.sdsp	a5,56(sp)
	if (_M_pi != nullptr)
   18d5a:	6426                	c.ldsp	s0,72(sp)
   18d5c:	cc19                	c.beqz	s0,18d7a <dwarf::unit::impl::force_abbrevs()+0x70>
    if (__is_single_threaded())
   18d5e:	00020797          	auipc	a5,0x20
   18d62:	71a7b783          	ld	a5,1818(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18d66:	0007c783          	lbu	a5,0(a5)
   18d6a:	c3b9                	c.beqz	a5,18db0 <dwarf::unit::impl::force_abbrevs()+0xa6>
    _Atomic_word __result = *__mem;
   18d6c:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18d6e:	fff5079b          	addiw	a5,a0,-1
   18d72:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18d74:	4785                	c.li	a5,1
   18d76:	04f50363          	beq	a0,a5,18dbc <dwarf::unit::impl::force_abbrevs()+0xb2>
  abbrev_code code;
  DW_TAG tag;
  bool children;
  std::vector<attribute_spec> attributes;

  abbrev_entry() : code(0) {}
   18d7a:	e002                	c.sdsp	zero,0(sp)
   18d7c:	e802                	c.sdsp	zero,16(sp)
   18d7e:	ec02                	c.sdsp	zero,24(sp)
   18d80:	f002                	c.sdsp	zero,32(sp)
  abbrev_code highest = 0;
   18d82:	4901                	c.li	s2,0
  while (entry.read(&c)) {
   18d84:	02810993          	addi	s3,sp,40
   18d88:	840a                	c.mv	s0,sp
   18d8a:	15848a13          	addi	s4,s1,344
   18d8e:	00020a97          	auipc	s5,0x20
   18d92:	74aaba83          	ld	s5,1866(s5) # 394d8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x1ea4c>
struct abbrev_entry {
   18d96:	01010b13          	addi	s6,sp,16
   18d9a:	00021b97          	auipc	s7,0x21
   18d9e:	846bbb83          	ld	s7,-1978(s7) # 395e0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)@@Base+0x1fb60>
   18da2:	a89d                	c.j	18e18 <dwarf::unit::impl::force_abbrevs()+0x10e>
      __atomic_add(__mem, __val);
   18da4:	4585                	c.li	a1,1
   18da6:	03050513          	addi	a0,a0,48
   18daa:	d56fd0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18dae:	b755                	c.j	18d52 <dwarf::unit::impl::force_abbrevs()+0x48>
      return __exchange_and_add(__mem, __val);
   18db0:	55fd                	c.li	a1,-1
   18db2:	03040513          	addi	a0,s0,48
   18db6:	d7afd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18dba:	bf6d                	c.j	18d74 <dwarf::unit::impl::force_abbrevs()+0x6a>
	_M_dispose();
   18dbc:	601c                	c.ld	a5,0(s0)
   18dbe:	6b9c                	c.ld	a5,16(a5)
   18dc0:	8522                	c.mv	a0,s0
   18dc2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18dc4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18dc8:	00020797          	auipc	a5,0x20
   18dcc:	6b07b783          	ld	a5,1712(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18dd0:	0007c783          	lbu	a5,0(a5)
   18dd4:	cf89                	c.beqz	a5,18dee <dwarf::unit::impl::force_abbrevs()+0xe4>
    _Atomic_word __result = *__mem;
   18dd6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18dd8:	fff5079b          	addiw	a5,a0,-1
   18ddc:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18dde:	4785                	c.li	a5,1
   18de0:	f8f51de3          	bne	a0,a5,18d7a <dwarf::unit::impl::force_abbrevs()+0x70>
	    _M_destroy();
   18de4:	601c                	c.ld	a5,0(s0)
   18de6:	6f9c                	c.ld	a5,24(a5)
   18de8:	8522                	c.mv	a0,s0
   18dea:	9782                	c.jalr	a5
   18dec:	b779                	c.j	18d7a <dwarf::unit::impl::force_abbrevs()+0x70>
      return __exchange_and_add(__mem, __val);
   18dee:	55fd                	c.li	a1,-1
   18df0:	03440513          	addi	a0,s0,52
   18df4:	d3cfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18df8:	b7dd                	c.j	18dde <dwarf::unit::impl::force_abbrevs()+0xd4>
   18dfa:	6782                	c.ldsp	a5,0(sp)
   18dfc:	e11c                	c.sd	a5,0(a0)
   18dfe:	47a2                	c.lwsp	a5,8(sp)
   18e00:	c51c                	c.sw	a5,8(a0)
   18e02:	00c14783          	lbu	a5,12(sp)
   18e06:	00f50623          	sb	a5,12(a0)
   18e0a:	85da                	c.mv	a1,s6
   18e0c:	0541                	c.addi	a0,16
   18e0e:	9b82                	c.jalr	s7
    if (entry.code > highest)
   18e10:	6782                	c.ldsp	a5,0(sp)
   18e12:	00f97363          	bgeu	s2,a5,18e18 <dwarf::unit::impl::force_abbrevs()+0x10e>
   18e16:	893e                	c.mv	s2,a5
  while (entry.read(&c)) {
   18e18:	85ce                	c.mv	a1,s3
   18e1a:	8522                	c.mv	a0,s0
   18e1c:	125060ef          	jal	ra,1f740 <dwarf::abbrev_entry::read(dwarf::cursor*)>
   18e20:	c509                	c.beqz	a0,18e2a <dwarf::unit::impl::force_abbrevs()+0x120>
   18e22:	85a2                	c.mv	a1,s0
   18e24:	8552                	c.mv	a0,s4
   18e26:	9a82                	c.jalr	s5
   18e28:	bfc9                	c.j	18dfa <dwarf::unit::impl::force_abbrevs()+0xf0>
  if (highest * 10 < abbrevs_map.size() * 15) {
   18e2a:	00291793          	slli	a5,s2,0x2
   18e2e:	97ca                	c.add	a5,s2
   18e30:	0786                	c.slli	a5,0x1
   18e32:	1704b683          	ld	a3,368(s1)
   18e36:	00469713          	slli	a4,a3,0x4
   18e3a:	8f15                	c.sub	a4,a3
   18e3c:	04e7e463          	bltu	a5,a4,18e84 <dwarf::unit::impl::force_abbrevs()+0x17a>
  have_abbrevs = true;
   18e40:	4785                	c.li	a5,1
   18e42:	12f48c23          	sb	a5,312(s1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18e46:	6542                	c.ldsp	a0,16(sp)
	if (__p)
   18e48:	c119                	c.beqz	a0,18e4e <dwarf::unit::impl::force_abbrevs()+0x144>
   18e4a:	e66fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   18e4e:	7442                	c.ldsp	s0,48(sp)
   18e50:	cc19                	c.beqz	s0,18e6e <dwarf::unit::impl::force_abbrevs()+0x164>
    if (__is_single_threaded())
   18e52:	00020797          	auipc	a5,0x20
   18e56:	6267b783          	ld	a5,1574(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18e5a:	0007c783          	lbu	a5,0(a5)
   18e5e:	c3f5                	c.beqz	a5,18f42 <dwarf::unit::impl::force_abbrevs()+0x238>
    _Atomic_word __result = *__mem;
   18e60:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18e62:	fff5079b          	addiw	a5,a0,-1
   18e66:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18e68:	4785                	c.li	a5,1
   18e6a:	0ef50263          	beq	a0,a5,18f4e <dwarf::unit::impl::force_abbrevs()+0x244>
}
   18e6e:	60ea                	c.ldsp	ra,152(sp)
   18e70:	644a                	c.ldsp	s0,144(sp)
   18e72:	64aa                	c.ldsp	s1,136(sp)
   18e74:	690a                	c.ldsp	s2,128(sp)
   18e76:	79e6                	c.ldsp	s3,120(sp)
   18e78:	7a46                	c.ldsp	s4,112(sp)
   18e7a:	7aa6                	c.ldsp	s5,104(sp)
   18e7c:	7b06                	c.ldsp	s6,96(sp)
   18e7e:	6be6                	c.ldsp	s7,88(sp)
   18e80:	610d                	c.addi16sp	sp,160
   18e82:	8082                	c.jr	ra
    abbrevs_vec.resize(highest + 1);
   18e84:	0905                	c.addi	s2,1
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   18e86:	1484b983          	ld	s3,328(s1)
   18e8a:	1404b783          	ld	a5,320(s1)
   18e8e:	40f985b3          	sub	a1,s3,a5
   18e92:	858d                	c.srai	a1,0x3
   18e94:	00014717          	auipc	a4,0x14
   18e98:	6fc73703          	ld	a4,1788(a4) # 2d590 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   18e9c:	02e585b3          	mul	a1,a1,a4
       */
      _GLIBCXX20_CONSTEXPR
      void
      resize(size_type __new_size)
      {
	if (__new_size > size())
   18ea0:	0125ee63          	bltu	a1,s2,18ebc <dwarf::unit::impl::force_abbrevs()+0x1b2>
	  _M_default_append(__new_size - size());
	else if (__new_size < size())
   18ea4:	04b97163          	bgeu	s2,a1,18ee6 <dwarf::unit::impl::force_abbrevs()+0x1dc>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   18ea8:	00291713          	slli	a4,s2,0x2
   18eac:	974a                	c.add	a4,s2
   18eae:	070e                	c.slli	a4,0x3
   18eb0:	00e78933          	add	s2,a5,a4
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   18eb4:	03298963          	beq	s3,s2,18ee6 <dwarf::unit::impl::force_abbrevs()+0x1dc>
   18eb8:	844a                	c.mv	s0,s2
   18eba:	a839                	c.j	18ed8 <dwarf::unit::impl::force_abbrevs()+0x1ce>
	  _M_default_append(__new_size - size());
   18ebc:	40b905b3          	sub	a1,s2,a1
   18ec0:	14048513          	addi	a0,s1,320
   18ec4:	00020317          	auipc	t1,0x20
   18ec8:	4c433303          	ld	t1,1220(t1) # 39388 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)@@Base+0x1f2ba>
   18ecc:	9302                	c.jalr	t1
   18ece:	a821                	c.j	18ee6 <dwarf::unit::impl::force_abbrevs()+0x1dc>
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   18ed0:	02840413          	addi	s0,s0,40
   18ed4:	00898763          	beq	s3,s0,18ee2 <dwarf::unit::impl::force_abbrevs()+0x1d8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18ed8:	6808                	c.ld	a0,16(s0)
	if (__p)
   18eda:	d97d                	c.beqz	a0,18ed0 <dwarf::unit::impl::force_abbrevs()+0x1c6>
   18edc:	dd4fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
   18ee0:	bfc5                	c.j	18ed0 <dwarf::unit::impl::force_abbrevs()+0x1c6>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   18ee2:	1524b423          	sd	s2,328(s1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   18ee6:	1684b403          	ld	s0,360(s1)
    for (auto &entry : abbrevs_map)
   18eea:	ec09                	c.bnez	s0,18f04 <dwarf::unit::impl::force_abbrevs()+0x1fa>
      { _M_h.clear(); }
   18eec:	15848513          	addi	a0,s1,344
   18ef0:	00020317          	auipc	t1,0x20
   18ef4:	3e033303          	ld	t1,992(t1) # 392d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x1f3da>
   18ef8:	9302                	c.jalr	t1
   18efa:	b799                	c.j	18e40 <dwarf::unit::impl::force_abbrevs()+0x136>
   18efc:	db4fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   18f00:	6000                	c.ld	s0,0(s0)
   18f02:	d46d                	c.beqz	s0,18eec <dwarf::unit::impl::force_abbrevs()+0x1e2>
	return *(this->_M_impl._M_start + __n);
   18f04:	641c                	c.ld	a5,8(s0)
   18f06:	00279713          	slli	a4,a5,0x2
   18f0a:	973e                	c.add	a4,a5
   18f0c:	070e                	c.slli	a4,0x3
   18f0e:	1404b783          	ld	a5,320(s1)
   18f12:	97ba                	c.add	a5,a4
   18f14:	6818                	c.ld	a4,16(s0)
   18f16:	e398                	c.sd	a4,0(a5)
   18f18:	4c18                	c.lw	a4,24(s0)
   18f1a:	c798                	c.sw	a4,8(a5)
   18f1c:	01c44703          	lbu	a4,28(s0)
   18f20:	00e78623          	sb	a4,12(a5)
	  _M_start = __x._M_start;
   18f24:	6b88                	c.ld	a0,16(a5)
   18f26:	7018                	c.ld	a4,32(s0)
   18f28:	eb98                	c.sd	a4,16(a5)
	  _M_finish = __x._M_finish;
   18f2a:	7418                	c.ld	a4,40(s0)
   18f2c:	ef98                	c.sd	a4,24(a5)
	  _M_end_of_storage = __x._M_end_of_storage;
   18f2e:	7818                	c.ld	a4,48(s0)
   18f30:	f398                	c.sd	a4,32(a5)
	  _M_start = __x._M_start;
   18f32:	02043023          	sd	zero,32(s0)
	  _M_finish = __x._M_finish;
   18f36:	02043423          	sd	zero,40(s0)
	  _M_end_of_storage = __x._M_end_of_storage;
   18f3a:	02043823          	sd	zero,48(s0)
	if (__p)
   18f3e:	fd5d                	c.bnez	a0,18efc <dwarf::unit::impl::force_abbrevs()+0x1f2>
   18f40:	b7c1                	c.j	18f00 <dwarf::unit::impl::force_abbrevs()+0x1f6>
      return __exchange_and_add(__mem, __val);
   18f42:	55fd                	c.li	a1,-1
   18f44:	03040513          	addi	a0,s0,48
   18f48:	be8fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18f4c:	bf31                	c.j	18e68 <dwarf::unit::impl::force_abbrevs()+0x15e>
	_M_dispose();
   18f4e:	601c                	c.ld	a5,0(s0)
   18f50:	6b9c                	c.ld	a5,16(a5)
   18f52:	8522                	c.mv	a0,s0
   18f54:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18f56:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18f5a:	00020797          	auipc	a5,0x20
   18f5e:	51e7b783          	ld	a5,1310(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18f62:	0007c783          	lbu	a5,0(a5)
   18f66:	cf89                	c.beqz	a5,18f80 <dwarf::unit::impl::force_abbrevs()+0x276>
    _Atomic_word __result = *__mem;
   18f68:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18f6a:	fff5079b          	addiw	a5,a0,-1
   18f6e:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18f70:	4785                	c.li	a5,1
   18f72:	eef51ee3          	bne	a0,a5,18e6e <dwarf::unit::impl::force_abbrevs()+0x164>
	    _M_destroy();
   18f76:	601c                	c.ld	a5,0(s0)
   18f78:	6f9c                	c.ld	a5,24(a5)
   18f7a:	8522                	c.mv	a0,s0
   18f7c:	9782                	c.jalr	a5
   18f7e:	bdc5                	c.j	18e6e <dwarf::unit::impl::force_abbrevs()+0x164>
      return __exchange_and_add(__mem, __val);
   18f80:	55fd                	c.li	a1,-1
   18f82:	03440513          	addi	a0,s0,52
   18f86:	baafd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18f8a:	b7dd                	c.j	18f70 <dwarf::unit::impl::force_abbrevs()+0x266>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18f8c:	842a                	c.mv	s0,a0
   18f8e:	6542                	c.ldsp	a0,16(sp)
	if (__p)
   18f90:	c119                	c.beqz	a0,18f96 <dwarf::unit::impl::force_abbrevs()+0x28c>
   18f92:	d1efd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   18f96:	7542                	c.ldsp	a0,48(sp)
   18f98:	c511                	c.beqz	a0,18fa4 <dwarf::unit::impl::force_abbrevs()+0x29a>
	  _M_pi->_M_release();
   18f9a:	00020317          	auipc	t1,0x20
   18f9e:	42633303          	ld	t1,1062(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   18fa2:	9302                	c.jalr	t1
   18fa4:	8522                	c.mv	a0,s0
   18fa6:	eeafd0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000018faa <dwarf::unit::root() const>:
const die &unit::root() const {
   18faa:	7171                	c.addi16sp	sp,-176
   18fac:	f506                	c.sdsp	ra,168(sp)
   18fae:	f122                	c.sdsp	s0,160(sp)
   18fb0:	ed26                	c.sdsp	s1,152(sp)
   18fb2:	e94a                	c.sdsp	s2,144(sp)
   18fb4:	e54e                	c.sdsp	s3,136(sp)
   18fb6:	e152                	c.sdsp	s4,128(sp)
   18fb8:	fcd6                	c.sdsp	s5,120(sp)
   18fba:	f8da                	c.sdsp	s6,112(sp)
   18fbc:	84aa                	c.mv	s1,a0
      { return _M_ptr; }
   18fbe:	6508                	c.ld	a0,8(a0)
  if (!m->root.valid()) {
   18fc0:	6d3c                	c.ld	a5,88(a0)
   18fc2:	cf91                	c.beqz	a5,18fde <dwarf::unit::root() const+0x34>
  return m->root;
   18fc4:	6488                	c.ld	a0,8(s1)
   18fc6:	04850513          	addi	a0,a0,72
}
   18fca:	70aa                	c.ldsp	ra,168(sp)
   18fcc:	740a                	c.ldsp	s0,160(sp)
   18fce:	64ea                	c.ldsp	s1,152(sp)
   18fd0:	694a                	c.ldsp	s2,144(sp)
   18fd2:	69aa                	c.ldsp	s3,136(sp)
   18fd4:	6a0a                	c.ldsp	s4,128(sp)
   18fd6:	7ae6                	c.ldsp	s5,120(sp)
   18fd8:	7b46                	c.ldsp	s6,112(sp)
   18fda:	614d                	c.addi16sp	sp,176
   18fdc:	8082                	c.jr	ra
    m->force_abbrevs();
   18fde:	d2dff0ef          	jal	ra,18d0a <dwarf::unit::impl::force_abbrevs()>
   18fe2:	6480                	c.ld	s0,8(s1)
    m->root = die(this);
   18fe4:	85a6                	c.mv	a1,s1
   18fe6:	850a                	c.mv	a0,sp
   18fe8:	286020ef          	jal	ra,1b26e <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   18fec:	4782                	c.lwsp	a5,0(sp)
   18fee:	c43c                	c.sw	a5,72(s0)
   18ff0:	67a2                	c.ldsp	a5,8(sp)
   18ff2:	e83c                	c.sd	a5,80(s0)
   18ff4:	67c2                	c.ldsp	a5,16(sp)
   18ff6:	ec3c                	c.sd	a5,88(s0)
   18ff8:	67e2                	c.ldsp	a5,24(sp)
   18ffa:	f03c                	c.sd	a5,96(s0)
  size_type size() const { return end - base; }
   18ffc:	69e6                	c.ldsp	s3,88(sp)
   18ffe:	67c6                	c.ldsp	a5,80(sp)
   19000:	40f989b3          	sub	s3,s3,a5
   19004:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   19008:	6c54                	c.ld	a3,152(s0)
   1900a:	705c                	c.ld	a5,160(s0)
   1900c:	00f6f763          	bgeu	a3,a5,1901a <dwarf::unit::root() const+0x70>
   19010:	87b6                	c.mv	a5,a3
   19012:	07a1                	c.addi	a5,8
   19014:	7058                	c.ld	a4,160(s0)
   19016:	fee7eee3          	bltu	a5,a4,19012 <dwarf::unit::root() const+0x68>
    end = base;
   1901a:	f054                	c.sd	a3,160(s0)
    if (n <= (size_type)(cap - base))
   1901c:	7448                	c.ld	a0,168(s0)
   1901e:	8d15                	c.sub	a0,a3
   19020:	05357963          	bgeu	a0,s3,19072 <dwarf::unit::root() const+0xc8>
   19024:	850d                	c.srai	a0,0x3
   19026:	e111                	c.bnez	a0,1902a <dwarf::unit::root() const+0x80>
   19028:	4505                	c.li	a0,1
    while (target < n)
   1902a:	01257563          	bgeu	a0,s2,19034 <dwarf::unit::root() const+0x8a>
      target <<= 1;
   1902e:	0506                	c.slli	a0,0x1
    while (target < n)
   19030:	ff256fe3          	bltu	a0,s2,1902e <dwarf::unit::root() const+0x84>
    char *newbuf = new char[sizeof(T[target])];
   19034:	00351a13          	slli	s4,a0,0x3
   19038:	8552                	c.mv	a0,s4
   1903a:	aa6fd0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1903e:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   19040:	6c48                	c.ld	a0,152(s0)
    for (; src < end; src++, dest++) {
   19042:	705c                	c.ld	a5,160(s0)
   19044:	08f57163          	bgeu	a0,a5,190c6 <dwarf::unit::root() const+0x11c>
    T *src = base, *dest = (T *)newbuf;
   19048:	87aa                	c.mv	a5,a0
   1904a:	8ada                	c.mv	s5,s6
    for (; src < end; src++, dest++) {
   1904c:	07a1                	c.addi	a5,8
   1904e:	0aa1                	c.addi	s5,8
   19050:	7058                	c.ld	a4,160(s0)
   19052:	fee7ede3          	bltu	a5,a4,1904c <dwarf::unit::root() const+0xa2>
   19056:	06840793          	addi	a5,s0,104
    if ((char *)base != buf)
   1905a:	00f50563          	beq	a0,a5,19064 <dwarf::unit::root() const+0xba>
      delete[] (char *)base;
   1905e:	c119                	c.beqz	a0,19064 <dwarf::unit::root() const+0xba>
   19060:	d00fd0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   19064:	09643c23          	sd	s6,152(s0)
    end = dest;
   19068:	0b543023          	sd	s5,160(s0)
    cap = base + target;
   1906c:	9b52                	c.add	s6,s4
   1906e:	0b643423          	sd	s6,168(s0)
    for (size_type i = 0; i < osize; i++)
   19072:	00090e63          	beq	s2,zero,1908e <dwarf::unit::root() const+0xe4>
   19076:	4781                	c.li	a5,0
   19078:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1907c:	6746                	c.ldsp	a4,80(sp)
   1907e:	9736                	c.add	a4,a3
   19080:	6310                	c.ld	a2,0(a4)
   19082:	6c58                	c.ld	a4,152(s0)
   19084:	9736                	c.add	a4,a3
   19086:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   19088:	0785                	c.addi	a5,1
   1908a:	fef917e3          	bne	s2,a5,19078 <dwarf::unit::root() const+0xce>
    end = base + osize;
   1908e:	6c5c                	c.ld	a5,152(s0)
   19090:	97ce                	c.add	a5,s3
   19092:	f05c                	c.sd	a5,160(s0)
   19094:	77a6                	c.ldsp	a5,104(sp)
   19096:	f85c                	c.sd	a5,176(s0)
    for (T *p = base; p < end; ++p)
   19098:	6546                	c.ldsp	a0,80(sp)
   1909a:	67e6                	c.ldsp	a5,88(sp)
   1909c:	00f57763          	bgeu	a0,a5,190aa <dwarf::unit::root() const+0x100>
   190a0:	87aa                	c.mv	a5,a0
   190a2:	07a1                	c.addi	a5,8
   190a4:	6766                	c.ldsp	a4,88(sp)
   190a6:	fee7eee3          	bltu	a5,a4,190a2 <dwarf::unit::root() const+0xf8>
    end = base;
   190aa:	ecaa                	c.sdsp	a0,88(sp)
    if ((char *)base != buf)
   190ac:	101c                	c.addi4spn	a5,sp,32
   190ae:	00f50563          	beq	a0,a5,190b8 <dwarf::unit::root() const+0x10e>
      delete[] (char *)base;
   190b2:	c119                	c.beqz	a0,190b8 <dwarf::unit::root() const+0x10e>
   190b4:	cacfd0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   190b8:	6488                	c.ld	a0,8(s1)
    m->root.read(m->root_offset);
   190ba:	790c                	c.ld	a1,48(a0)
   190bc:	04850513          	addi	a0,a0,72
   190c0:	1e2020ef          	jal	ra,1b2a2 <dwarf::die::read(unsigned long)>
   190c4:	b701                	c.j	18fc4 <dwarf::unit::root() const+0x1a>
    T *src = base, *dest = (T *)newbuf;
   190c6:	8ada                	c.mv	s5,s6
   190c8:	b779                	c.j	19056 <dwarf::unit::root() const+0xac>
class die {
   190ca:	842a                	c.mv	s0,a0
   190cc:	1008                	c.addi4spn	a0,sp,32
   190ce:	00020317          	auipc	t1,0x20
   190d2:	31233303          	ld	t1,786(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   190d6:	9302                	c.jalr	t1
   190d8:	8522                	c.mv	a0,s0
   190da:	db6fd0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000190de <dwarf::compilation_unit::get_line_table() const>:
const line_table &compilation_unit::get_line_table() const {
   190de:	7131                	c.addi16sp	sp,-192
   190e0:	fd06                	c.sdsp	ra,184(sp)
   190e2:	f922                	c.sdsp	s0,176(sp)
   190e4:	f526                	c.sdsp	s1,168(sp)
   190e6:	f14a                	c.sdsp	s2,160(sp)
   190e8:	ed4e                	c.sdsp	s3,152(sp)
   190ea:	e952                	c.sdsp	s4,144(sp)
   190ec:	842a                	c.mv	s0,a0
      { return _M_ptr != nullptr; }
   190ee:	651c                	c.ld	a5,8(a0)
  if (!m->lt.valid()) {
   190f0:	1287b783          	ld	a5,296(a5)
   190f4:	cf81                	c.beqz	a5,1910c <dwarf::compilation_unit::get_line_table() const+0x2e>
  return m->lt;
   190f6:	6408                	c.ld	a0,8(s0)
   190f8:	12850513          	addi	a0,a0,296
}
   190fc:	70ea                	c.ldsp	ra,184(sp)
   190fe:	744a                	c.ldsp	s0,176(sp)
   19100:	74aa                	c.ldsp	s1,168(sp)
   19102:	790a                	c.ldsp	s2,160(sp)
   19104:	69ea                	c.ldsp	s3,152(sp)
   19106:	6a4a                	c.ldsp	s4,144(sp)
   19108:	6129                	c.addi16sp	sp,192
   1910a:	8082                	c.jr	ra
    const die &d = root();
   1910c:	e9fff0ef          	jal	ra,18faa <dwarf::unit::root() const>
   19110:	84aa                	c.mv	s1,a0
    if (!d.has(DW_AT::stmt_list) || !d.has(DW_AT::name))
   19112:	45c1                	c.li	a1,16
   19114:	51c020ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   19118:	dd79                	c.beqz	a0,190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
   1911a:	458d                	c.li	a1,3
   1911c:	8526                	c.mv	a0,s1
   1911e:	512020ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   19122:	d971                	c.beqz	a0,190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
    shared_ptr<section> sec;
   19124:	e402                	c.sdsp	zero,8(sp)
   19126:	e802                	c.sdsp	zero,16(sp)
      sec = m->file.get_section(section_type::line);
   19128:	4611                	c.li	a2,4
   1912a:	640c                	c.ld	a1,8(s0)
   1912c:	08a8                	c.addi4spn	a0,sp,88
   1912e:	fbdfd0ef          	jal	ra,170ea <dwarf::dwarf::get_section(dwarf::section_type) const>
      : _M_ptr(__r._M_ptr), _M_refcount()
   19132:	6766                	c.ldsp	a4,88(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19134:	7786                	c.ldsp	a5,96(sp)
	__r._M_pi = _M_pi;
   19136:	f082                	c.sdsp	zero,96(sp)
	__r._M_ptr = nullptr;
   19138:	ec82                	c.sdsp	zero,88(sp)
   1913a:	e43a                	c.sdsp	a4,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1913c:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   1913e:	e83e                	c.sdsp	a5,16(sp)
	if (_M_pi != nullptr)
   19140:	08090a63          	beq	s2,zero,191d4 <dwarf::compilation_unit::get_line_table() const+0xf6>
    if (__is_single_threaded())
   19144:	00020797          	auipc	a5,0x20
   19148:	3347b783          	ld	a5,820(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1914c:	0007c783          	lbu	a5,0(a5)
   19150:	c7b9                	c.beqz	a5,1919e <dwarf::compilation_unit::get_line_table() const+0xc0>
    _Atomic_word __result = *__mem;
   19152:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   19156:	fff7871b          	addiw	a4,a5,-1
   1915a:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1915e:	4705                	c.li	a4,1
   19160:	06e79a63          	bne	a5,a4,191d4 <dwarf::compilation_unit::get_line_table() const+0xf6>
	_M_dispose();
   19164:	00093783          	ld	a5,0(s2)
   19168:	6b9c                	c.ld	a5,16(a5)
   1916a:	854a                	c.mv	a0,s2
   1916c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1916e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19172:	00020797          	auipc	a5,0x20
   19176:	3067b783          	ld	a5,774(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1917a:	0007c783          	lbu	a5,0(a5)
   1917e:	c3a5                	c.beqz	a5,191de <dwarf::compilation_unit::get_line_table() const+0x100>
    _Atomic_word __result = *__mem;
   19180:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   19184:	fff7871b          	addiw	a4,a5,-1
   19188:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1918c:	4705                	c.li	a4,1
   1918e:	02e79063          	bne	a5,a4,191ae <dwarf::compilation_unit::get_line_table() const+0xd0>
	    _M_destroy();
   19192:	00093783          	ld	a5,0(s2)
   19196:	6f9c                	c.ld	a5,24(a5)
   19198:	854a                	c.mv	a0,s2
   1919a:	9782                	c.jalr	a5
   1919c:	a809                	c.j	191ae <dwarf::compilation_unit::get_line_table() const+0xd0>
      return __exchange_and_add(__mem, __val);
   1919e:	55fd                	c.li	a1,-1
   191a0:	03090513          	addi	a0,s2,48
   191a4:	98cfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   191a8:	4785                	c.li	a5,1
   191aa:	faf50de3          	beq	a0,a5,19164 <dwarf::compilation_unit::get_line_table() const+0x86>
	if (_M_pi != nullptr)
   191ae:	7906                	c.ldsp	s2,96(sp)
   191b0:	02090263          	beq	s2,zero,191d4 <dwarf::compilation_unit::get_line_table() const+0xf6>
    if (__is_single_threaded())
   191b4:	00020797          	auipc	a5,0x20
   191b8:	2c47b783          	ld	a5,708(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   191bc:	0007c783          	lbu	a5,0(a5)
   191c0:	c795                	c.beqz	a5,191ec <dwarf::compilation_unit::get_line_table() const+0x10e>
    _Atomic_word __result = *__mem;
   191c2:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   191c6:	fff5079b          	addiw	a5,a0,-1
   191ca:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   191ce:	4785                	c.li	a5,1
   191d0:	02f50463          	beq	a0,a5,191f8 <dwarf::compilation_unit::get_line_table() const+0x11a>
    auto comp_dir = d.has(DW_AT::comp_dir) ? at_comp_dir(d) : "";
   191d4:	45ed                	c.li	a1,27
   191d6:	8526                	c.mv	a0,s1
   191d8:	458020ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   191dc:	a095                	c.j	19240 <dwarf::compilation_unit::get_line_table() const+0x162>
      return __exchange_and_add(__mem, __val);
   191de:	55fd                	c.li	a1,-1
   191e0:	03490513          	addi	a0,s2,52
   191e4:	94cfd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   191e8:	87aa                	c.mv	a5,a0
   191ea:	b74d                	c.j	1918c <dwarf::compilation_unit::get_line_table() const+0xae>
   191ec:	55fd                	c.li	a1,-1
   191ee:	03090513          	addi	a0,s2,48
   191f2:	93efd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   191f6:	bfe1                	c.j	191ce <dwarf::compilation_unit::get_line_table() const+0xf0>
	_M_dispose();
   191f8:	00093783          	ld	a5,0(s2)
   191fc:	6b9c                	c.ld	a5,16(a5)
   191fe:	854a                	c.mv	a0,s2
   19200:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19202:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19206:	00020797          	auipc	a5,0x20
   1920a:	2727b783          	ld	a5,626(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1920e:	0007c783          	lbu	a5,0(a5)
   19212:	c385                	c.beqz	a5,19232 <dwarf::compilation_unit::get_line_table() const+0x154>
    _Atomic_word __result = *__mem;
   19214:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   19218:	fff7871b          	addiw	a4,a5,-1
   1921c:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19220:	4705                	c.li	a4,1
   19222:	fae799e3          	bne	a5,a4,191d4 <dwarf::compilation_unit::get_line_table() const+0xf6>
	    _M_destroy();
   19226:	00093783          	ld	a5,0(s2)
   1922a:	6f9c                	c.ld	a5,24(a5)
   1922c:	854a                	c.mv	a0,s2
   1922e:	9782                	c.jalr	a5
   19230:	b755                	c.j	191d4 <dwarf::compilation_unit::get_line_table() const+0xf6>
      return __exchange_and_add(__mem, __val);
   19232:	55fd                	c.li	a1,-1
   19234:	03490513          	addi	a0,s2,52
   19238:	8f8fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1923c:	87aa                	c.mv	a5,a0
   1923e:	b7cd                	c.j	19220 <dwarf::compilation_unit::get_line_table() const+0x142>
   19240:	c511                	c.beqz	a0,1924c <dwarf::compilation_unit::get_line_table() const+0x16e>
   19242:	85a6                	c.mv	a1,s1
   19244:	0828                	c.addi4spn	a0,sp,24
   19246:	2640c0ef          	jal	ra,254aa <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>
   1924a:	a839                	c.j	19268 <dwarf::compilation_unit::get_line_table() const+0x18a>
	: allocator_type(__a), _M_p(__dat) { }
   1924c:	103c                	c.addi4spn	a5,sp,40
   1924e:	ec3e                	c.sdsp	a5,24(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   19250:	4681                	c.li	a3,0
   19252:	00014617          	auipc	a2,0x14
   19256:	d2660613          	addi	a2,a2,-730 # 2cf78 <__libc_csu_fini+0x60>
   1925a:	85b2                	c.mv	a1,a2
   1925c:	0828                	c.addi4spn	a0,sp,24
   1925e:	00020317          	auipc	t1,0x20
   19262:	0a233303          	ld	t1,162(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   19266:	9302                	c.jalr	t1
      { return _M_ptr; }
   19268:	00843903          	ld	s2,8(s0)
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1926c:	4641                	c.li	a2,16
   1926e:	85a6                	c.mv	a1,s1
   19270:	18a8                	c.addi4spn	a0,sp,120
   19272:	3e6020ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   19276:	18a8                	c.addi4spn	a0,sp,120
   19278:	252040ef          	jal	ra,1d4ca <dwarf::value::as_sec_offset() const>
   1927c:	89aa                	c.mv	s3,a0
   1927e:	641c                	c.ld	a5,8(s0)
   19280:	6f9c                	c.ld	a5,24(a5)
   19282:	0207aa03          	lw	s4,32(a5)
                       m->subsec->addr_size, comp_dir, at_name(d));
   19286:	85a6                	c.mv	a1,s1
   19288:	1828                	c.addi4spn	a0,sp,56
   1928a:	0e20c0ef          	jal	ra,2536c <dwarf::at_name[abi:cxx11](dwarf::die const&)>
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1928e:	183c                	c.addi4spn	a5,sp,56
   19290:	0838                	c.addi4spn	a4,sp,24
   19292:	86d2                	c.mv	a3,s4
   19294:	864e                	c.mv	a2,s3
   19296:	002c                	c.addi4spn	a1,sp,8
   19298:	10a8                	c.addi4spn	a0,sp,104
   1929a:	48c090ef          	jal	ra,22726 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
      : _M_ptr(__r._M_ptr), _M_refcount()
   1929e:	7726                	c.ldsp	a4,104(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   192a0:	77c6                	c.ldsp	a5,112(sp)
	__r._M_pi = _M_pi;
   192a2:	f882                	c.sdsp	zero,112(sp)
	__r._M_ptr = nullptr;
   192a4:	f482                	c.sdsp	zero,104(sp)
   192a6:	12e93423          	sd	a4,296(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   192aa:	13093483          	ld	s1,304(s2)
	__r._M_pi = _M_pi;
   192ae:	12f93823          	sd	a5,304(s2)
	if (_M_pi != nullptr)
   192b2:	c0c1                	c.beqz	s1,19332 <dwarf::compilation_unit::get_line_table() const+0x254>
    if (__is_single_threaded())
   192b4:	00020797          	auipc	a5,0x20
   192b8:	1c47b783          	ld	a5,452(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   192bc:	0007c783          	lbu	a5,0(a5)
   192c0:	c3a9                	c.beqz	a5,19302 <dwarf::compilation_unit::get_line_table() const+0x224>
    _Atomic_word __result = *__mem;
   192c2:	589c                	c.lw	a5,48(s1)
    *__mem += __val;
   192c4:	fff7871b          	addiw	a4,a5,-1
   192c8:	d898                	c.sw	a4,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   192ca:	4705                	c.li	a4,1
   192cc:	06e79363          	bne	a5,a4,19332 <dwarf::compilation_unit::get_line_table() const+0x254>
	_M_dispose();
   192d0:	609c                	c.ld	a5,0(s1)
   192d2:	6b9c                	c.ld	a5,16(a5)
   192d4:	8526                	c.mv	a0,s1
   192d6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   192d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   192dc:	00020797          	auipc	a5,0x20
   192e0:	19c7b783          	ld	a5,412(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   192e4:	0007c783          	lbu	a5,0(a5)
   192e8:	cbdd                	c.beqz	a5,1939e <dwarf::compilation_unit::get_line_table() const+0x2c0>
    _Atomic_word __result = *__mem;
   192ea:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   192ec:	fff7871b          	addiw	a4,a5,-1
   192f0:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   192f2:	4705                	c.li	a4,1
   192f4:	00e79f63          	bne	a5,a4,19312 <dwarf::compilation_unit::get_line_table() const+0x234>
	    _M_destroy();
   192f8:	609c                	c.ld	a5,0(s1)
   192fa:	6f9c                	c.ld	a5,24(a5)
   192fc:	8526                	c.mv	a0,s1
   192fe:	9782                	c.jalr	a5
   19300:	a809                	c.j	19312 <dwarf::compilation_unit::get_line_table() const+0x234>
      return __exchange_and_add(__mem, __val);
   19302:	55fd                	c.li	a1,-1
   19304:	03048513          	addi	a0,s1,48
   19308:	828fd0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1930c:	4785                	c.li	a5,1
   1930e:	fcf501e3          	beq	a0,a5,192d0 <dwarf::compilation_unit::get_line_table() const+0x1f2>
	if (_M_pi != nullptr)
   19312:	74c6                	c.ldsp	s1,112(sp)
   19314:	cc99                	c.beqz	s1,19332 <dwarf::compilation_unit::get_line_table() const+0x254>
    if (__is_single_threaded())
   19316:	00020797          	auipc	a5,0x20
   1931a:	1627b783          	ld	a5,354(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1931e:	0007c783          	lbu	a5,0(a5)
   19322:	c7c9                	c.beqz	a5,193ac <dwarf::compilation_unit::get_line_table() const+0x2ce>
    _Atomic_word __result = *__mem;
   19324:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19326:	fff5079b          	addiw	a5,a0,-1
   1932a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1932c:	4785                	c.li	a5,1
   1932e:	08f50563          	beq	a0,a5,193b8 <dwarf::compilation_unit::get_line_table() const+0x2da>
      { return _M_dataplus._M_p; }
   19332:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   19334:	00bc                	c.addi4spn	a5,sp,72
   19336:	00f50463          	beq	a0,a5,1933e <dwarf::compilation_unit::get_line_table() const+0x260>
   1933a:	976fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1933e:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   19340:	103c                	c.addi4spn	a5,sp,40
   19342:	00f50463          	beq	a0,a5,1934a <dwarf::compilation_unit::get_line_table() const+0x26c>
   19346:	96afd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1934a:	64c2                	c.ldsp	s1,16(sp)
   1934c:	da0485e3          	beq	s1,zero,190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
    if (__is_single_threaded())
   19350:	00020797          	auipc	a5,0x20
   19354:	1287b783          	ld	a5,296(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19358:	0007c783          	lbu	a5,0(a5)
   1935c:	cfd1                	c.beqz	a5,193f8 <dwarf::compilation_unit::get_line_table() const+0x31a>
    _Atomic_word __result = *__mem;
   1935e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19360:	fff5079b          	addiw	a5,a0,-1
   19364:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19366:	4785                	c.li	a5,1
   19368:	d8f517e3          	bne	a0,a5,190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
	_M_dispose();
   1936c:	609c                	c.ld	a5,0(s1)
   1936e:	6b9c                	c.ld	a5,16(a5)
   19370:	8526                	c.mv	a0,s1
   19372:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19374:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19378:	00020797          	auipc	a5,0x20
   1937c:	1007b783          	ld	a5,256(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19380:	0007c783          	lbu	a5,0(a5)
   19384:	c3c1                	c.beqz	a5,19404 <dwarf::compilation_unit::get_line_table() const+0x326>
    _Atomic_word __result = *__mem;
   19386:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   19388:	fff7871b          	addiw	a4,a5,-1
   1938c:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1938e:	4705                	c.li	a4,1
   19390:	d6e793e3          	bne	a5,a4,190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
	    _M_destroy();
   19394:	609c                	c.ld	a5,0(s1)
   19396:	6f9c                	c.ld	a5,24(a5)
   19398:	8526                	c.mv	a0,s1
   1939a:	9782                	c.jalr	a5
   1939c:	bba9                	c.j	190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
      return __exchange_and_add(__mem, __val);
   1939e:	55fd                	c.li	a1,-1
   193a0:	03448513          	addi	a0,s1,52
   193a4:	f8dfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   193a8:	87aa                	c.mv	a5,a0
   193aa:	b7a1                	c.j	192f2 <dwarf::compilation_unit::get_line_table() const+0x214>
   193ac:	55fd                	c.li	a1,-1
   193ae:	03048513          	addi	a0,s1,48
   193b2:	f7ffc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   193b6:	bf9d                	c.j	1932c <dwarf::compilation_unit::get_line_table() const+0x24e>
	_M_dispose();
   193b8:	609c                	c.ld	a5,0(s1)
   193ba:	6b9c                	c.ld	a5,16(a5)
   193bc:	8526                	c.mv	a0,s1
   193be:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   193c0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   193c4:	00020797          	auipc	a5,0x20
   193c8:	0b47b783          	ld	a5,180(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   193cc:	0007c783          	lbu	a5,0(a5)
   193d0:	cf89                	c.beqz	a5,193ea <dwarf::compilation_unit::get_line_table() const+0x30c>
    _Atomic_word __result = *__mem;
   193d2:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   193d4:	fff7871b          	addiw	a4,a5,-1
   193d8:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   193da:	4705                	c.li	a4,1
   193dc:	f4e79be3          	bne	a5,a4,19332 <dwarf::compilation_unit::get_line_table() const+0x254>
	    _M_destroy();
   193e0:	609c                	c.ld	a5,0(s1)
   193e2:	6f9c                	c.ld	a5,24(a5)
   193e4:	8526                	c.mv	a0,s1
   193e6:	9782                	c.jalr	a5
   193e8:	b7a9                	c.j	19332 <dwarf::compilation_unit::get_line_table() const+0x254>
      return __exchange_and_add(__mem, __val);
   193ea:	55fd                	c.li	a1,-1
   193ec:	03448513          	addi	a0,s1,52
   193f0:	f41fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   193f4:	87aa                	c.mv	a5,a0
   193f6:	b7d5                	c.j	193da <dwarf::compilation_unit::get_line_table() const+0x2fc>
   193f8:	55fd                	c.li	a1,-1
   193fa:	03048513          	addi	a0,s1,48
   193fe:	f33fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19402:	b795                	c.j	19366 <dwarf::compilation_unit::get_line_table() const+0x288>
   19404:	55fd                	c.li	a1,-1
   19406:	03448513          	addi	a0,s1,52
   1940a:	f27fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1940e:	87aa                	c.mv	a5,a0
   19410:	bfbd                	c.j	1938e <dwarf::compilation_unit::get_line_table() const+0x2b0>
	if (_M_pi != nullptr)
   19412:	6542                	c.ldsp	a0,16(sp)
   19414:	ce0501e3          	beq	a0,zero,190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
	  _M_pi->_M_release();
   19418:	00020317          	auipc	t1,0x20
   1941c:	fa833303          	ld	t1,-88(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   19420:	9302                	c.jalr	t1
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   19422:	b9d1                	c.j	190f6 <dwarf::compilation_unit::get_line_table() const+0x18>
    } catch (format_error &e) {
   19424:	4785                	c.li	a5,1
   19426:	00f58d63          	beq	a1,a5,19440 <dwarf::compilation_unit::get_line_table() const+0x362>
   1942a:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1942c:	6542                	c.ldsp	a0,16(sp)
   1942e:	c511                	c.beqz	a0,1943a <dwarf::compilation_unit::get_line_table() const+0x35c>
	  _M_pi->_M_release();
   19430:	00020317          	auipc	t1,0x20
   19434:	f9033303          	ld	t1,-112(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   19438:	9302                	c.jalr	t1
   1943a:	8522                	c.mv	a0,s0
   1943c:	a54fd0ef          	jal	ra,16690 <_Unwind_Resume@plt>
   19440:	f71fc0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
    }
   19444:	9ecfd0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   19448:	b7e9                	c.j	19412 <dwarf::compilation_unit::get_line_table() const+0x334>
      { return _M_dataplus._M_p; }
   1944a:	842a                	c.mv	s0,a0
   1944c:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   1944e:	00bc                	c.addi4spn	a5,sp,72
   19450:	00f50463          	beq	a0,a5,19458 <dwarf::compilation_unit::get_line_table() const+0x37a>
   19454:	85cfd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19458:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   1945a:	103c                	c.addi4spn	a5,sp,40
   1945c:	fcf508e3          	beq	a0,a5,1942c <dwarf::compilation_unit::get_line_table() const+0x34e>
   19460:	850fd0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   19464:	b7e1                	c.j	1942c <dwarf::compilation_unit::get_line_table() const+0x34e>
      { return _M_dataplus._M_p; }
   19466:	842a                	c.mv	s0,a0
   19468:	bfc5                	c.j	19458 <dwarf::compilation_unit::get_line_table() const+0x37a>
	if (_M_pi != nullptr)
   1946a:	842a                	c.mv	s0,a0
   1946c:	b7c1                	c.j	1942c <dwarf::compilation_unit::get_line_table() const+0x34e>

000000000001946e <dwarf::unit::get_abbrev(unsigned long) const>:
const abbrev_entry &unit::get_abbrev(abbrev_code acode) const {
   1946e:	7159                	c.addi16sp	sp,-112
   19470:	f486                	c.sdsp	ra,104(sp)
   19472:	f0a2                	c.sdsp	s0,96(sp)
   19474:	eca6                	c.sdsp	s1,88(sp)
   19476:	842a                	c.mv	s0,a0
   19478:	e42e                	c.sdsp	a1,8(sp)
      { return _M_ptr; }
   1947a:	6508                	c.ld	a0,8(a0)
  if (!m->have_abbrevs)
   1947c:	13854783          	lbu	a5,312(a0)
   19480:	cf9d                	c.beqz	a5,194be <dwarf::unit::get_abbrev(unsigned long) const+0x50>
   19482:	6418                	c.ld	a4,8(s0)
      : _M_current(__i) { }
   19484:	14073503          	ld	a0,320(a4)
   19488:	14873783          	ld	a5,328(a4)
  if (!m->abbrevs_vec.empty()) {
   1948c:	02a78c63          	beq	a5,a0,194c4 <dwarf::unit::get_abbrev(unsigned long) const+0x56>
    if (acode >= m->abbrevs_vec.size())
   19490:	6722                	c.ldsp	a4,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19492:	8f89                	c.sub	a5,a0
   19494:	878d                	c.srai	a5,0x3
   19496:	00014697          	auipc	a3,0x14
   1949a:	0fa6b683          	ld	a3,250(a3) # 2d590 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1949e:	02d787b3          	mul	a5,a5,a3
   194a2:	02f77d63          	bgeu	a4,a5,194dc <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
	return *(this->_M_impl._M_start + __n);
   194a6:	00271793          	slli	a5,a4,0x2
   194aa:	97ba                	c.add	a5,a4
   194ac:	078e                	c.slli	a5,0x3
   194ae:	953e                	c.add	a0,a5
    if (entry.code == 0)
   194b0:	611c                	c.ld	a5,0(a0)
   194b2:	c78d                	c.beqz	a5,194dc <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
}
   194b4:	70a6                	c.ldsp	ra,104(sp)
   194b6:	7406                	c.ldsp	s0,96(sp)
   194b8:	64e6                	c.ldsp	s1,88(sp)
   194ba:	6165                	c.addi16sp	sp,112
   194bc:	8082                	c.jr	ra
    m->force_abbrevs();
   194be:	84dff0ef          	jal	ra,18d0a <dwarf::unit::impl::force_abbrevs()>
   194c2:	b7c1                	c.j	19482 <dwarf::unit::get_abbrev(unsigned long) const+0x14>
      if (size() <= __small_size_threshold())
   194c4:	17073783          	ld	a5,368(a4)
   194c8:	e795                	c.bnez	a5,194f4 <dwarf::unit::get_abbrev(unsigned long) const+0x86>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   194ca:	16873503          	ld	a0,360(a4)
	  for (auto __it = begin(); __it != end(); ++__it)
   194ce:	c519                	c.beqz	a0,194dc <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
   194d0:	6722                	c.ldsp	a4,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   194d2:	651c                	c.ld	a5,8(a0)
   194d4:	04f70063          	beq	a4,a5,19514 <dwarf::unit::get_abbrev(unsigned long) const+0xa6>
   194d8:	6108                	c.ld	a0,0(a0)
	  for (auto __it = begin(); __it != end(); ++__it)
   194da:	fd65                	c.bnez	a0,194d2 <dwarf::unit::get_abbrev(unsigned long) const+0x64>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   194dc:	4541                	c.li	a0,16
   194de:	ef3fc0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   194e2:	84aa                	c.mv	s1,a0
   194e4:	65a2                	c.ldsp	a1,8(sp)
   194e6:	0808                	c.addi4spn	a0,sp,16
   194e8:	00020317          	auipc	t1,0x20
   194ec:	e0833303          	ld	t1,-504(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   194f0:	9302                	c.jalr	t1
   194f2:	a01d                	c.j	19518 <dwarf::unit::get_abbrev(unsigned long) const+0xaa>
	return _M_hash()(__k);
   194f4:	66a2                	c.ldsp	a3,8(sp)
    { return __num % __den; }
   194f6:	16073583          	ld	a1,352(a4)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   194fa:	0030                	c.addi4spn	a2,sp,8
   194fc:	02b6f5b3          	remu	a1,a3,a1
   19500:	15870513          	addi	a0,a4,344
   19504:	00020317          	auipc	t1,0x20
   19508:	03c33303          	ld	t1,60(t1) # 39540 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1ef1c>
   1950c:	9302                	c.jalr	t1
	if (__before_n)
   1950e:	d579                	c.beqz	a0,194dc <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   19510:	6108                	c.ld	a0,0(a0)
    if (it == m->abbrevs_map.end())
   19512:	d569                	c.beqz	a0,194dc <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
    return it->second;
   19514:	0541                	c.addi	a0,16
   19516:	bf79                	c.j	194b4 <dwarf::unit::get_abbrev(unsigned long) const+0x46>
    { return std::move(__rhs.insert(0, __lhs)); }
   19518:	00014617          	auipc	a2,0x14
   1951c:	e3860613          	addi	a2,a2,-456 # 2d350 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xe0>
   19520:	4581                	c.li	a1,0
   19522:	0808                	c.addi4spn	a0,sp,16
   19524:	e1dfc0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   19528:	85aa                	c.mv	a1,a0
   1952a:	1800                	c.addi4spn	s0,sp,48
   1952c:	8522                	c.mv	a0,s0
   1952e:	ee3fc0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   19532:	85a2                	c.mv	a1,s0
   19534:	8526                	c.mv	a0,s1
   19536:	80afd0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1953a:	00020797          	auipc	a5,0x20
   1953e:	0167b783          	ld	a5,22(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   19542:	07c1                	c.addi	a5,16
   19544:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   19546:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   19548:	009c                	c.addi4spn	a5,sp,64
   1954a:	00f50463          	beq	a0,a5,19552 <dwarf::unit::get_abbrev(unsigned long) const+0xe4>
   1954e:	f63fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19552:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   19554:	101c                	c.addi4spn	a5,sp,32
   19556:	00f50463          	beq	a0,a5,1955e <dwarf::unit::get_abbrev(unsigned long) const+0xf0>
   1955a:	f57fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   1955e:	00020617          	auipc	a2,0x20
   19562:	e1a63603          	ld	a2,-486(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   19566:	00020597          	auipc	a1,0x20
   1956a:	d425b583          	ld	a1,-702(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1956e:	8526                	c.mv	a0,s1
   19570:	8f0fd0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   19574:	842a                	c.mv	s0,a0
   19576:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   19578:	009c                	c.addi4spn	a5,sp,64
   1957a:	00f50463          	beq	a0,a5,19582 <dwarf::unit::get_abbrev(unsigned long) const+0x114>
   1957e:	f33fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19582:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   19584:	101c                	c.addi4spn	a5,sp,32
   19586:	00f50463          	beq	a0,a5,1958e <dwarf::unit::get_abbrev(unsigned long) const+0x120>
   1958a:	f27fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1958e:	8526                	c.mv	a0,s1
   19590:	ee1fc0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   19594:	8522                	c.mv	a0,s0
   19596:	8fafd0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1959a:	842a                	c.mv	s0,a0
   1959c:	b7dd                	c.j	19582 <dwarf::unit::get_abbrev(unsigned long) const+0x114>
   1959e:	842a                	c.mv	s0,a0
   195a0:	b7fd                	c.j	1958e <dwarf::unit::get_abbrev(unsigned long) const+0x120>

00000000000195a2 <dwarf::type_unit::type() const>:

const die &type_unit::type() const {
   195a2:	7171                	c.addi16sp	sp,-176
   195a4:	f506                	c.sdsp	ra,168(sp)
   195a6:	f122                	c.sdsp	s0,160(sp)
   195a8:	ed26                	c.sdsp	s1,152(sp)
   195aa:	e94a                	c.sdsp	s2,144(sp)
   195ac:	e54e                	c.sdsp	s3,136(sp)
   195ae:	e152                	c.sdsp	s4,128(sp)
   195b0:	fcd6                	c.sdsp	s5,120(sp)
   195b2:	f8da                	c.sdsp	s6,112(sp)
   195b4:	84aa                	c.mv	s1,a0
   195b6:	6508                	c.ld	a0,8(a0)
  if (!m->type.valid()) {
   195b8:	657c                	c.ld	a5,200(a0)
   195ba:	cf91                	c.beqz	a5,195d6 <dwarf::type_unit::type() const+0x34>
    m->force_abbrevs();
    m->type = die(this);
    m->type.read(m->type_offset);
  }
  return m->type;
   195bc:	6488                	c.ld	a0,8(s1)
   195be:	0b850513          	addi	a0,a0,184
}
   195c2:	70aa                	c.ldsp	ra,168(sp)
   195c4:	740a                	c.ldsp	s0,160(sp)
   195c6:	64ea                	c.ldsp	s1,152(sp)
   195c8:	694a                	c.ldsp	s2,144(sp)
   195ca:	69aa                	c.ldsp	s3,136(sp)
   195cc:	6a0a                	c.ldsp	s4,128(sp)
   195ce:	7ae6                	c.ldsp	s5,120(sp)
   195d0:	7b46                	c.ldsp	s6,112(sp)
   195d2:	614d                	c.addi16sp	sp,176
   195d4:	8082                	c.jr	ra
    m->force_abbrevs();
   195d6:	f34ff0ef          	jal	ra,18d0a <dwarf::unit::impl::force_abbrevs()>
   195da:	6480                	c.ld	s0,8(s1)
    m->type = die(this);
   195dc:	85a6                	c.mv	a1,s1
   195de:	850a                	c.mv	a0,sp
   195e0:	48f010ef          	jal	ra,1b26e <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   195e4:	4782                	c.lwsp	a5,0(sp)
   195e6:	0af42c23          	sw	a5,184(s0)
   195ea:	67a2                	c.ldsp	a5,8(sp)
   195ec:	e07c                	c.sd	a5,192(s0)
   195ee:	67c2                	c.ldsp	a5,16(sp)
   195f0:	e47c                	c.sd	a5,200(s0)
   195f2:	67e2                	c.ldsp	a5,24(sp)
   195f4:	e87c                	c.sd	a5,208(s0)
  size_type size() const { return end - base; }
   195f6:	69e6                	c.ldsp	s3,88(sp)
   195f8:	67c6                	c.ldsp	a5,80(sp)
   195fa:	40f989b3          	sub	s3,s3,a5
   195fe:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   19602:	10843683          	ld	a3,264(s0)
   19606:	11043783          	ld	a5,272(s0)
   1960a:	00f6f863          	bgeu	a3,a5,1961a <dwarf::type_unit::type() const+0x78>
   1960e:	87b6                	c.mv	a5,a3
   19610:	07a1                	c.addi	a5,8
   19612:	11043703          	ld	a4,272(s0)
   19616:	fee7ede3          	bltu	a5,a4,19610 <dwarf::type_unit::type() const+0x6e>
    end = base;
   1961a:	10d43823          	sd	a3,272(s0)
    if (n <= (size_type)(cap - base))
   1961e:	11843503          	ld	a0,280(s0)
   19622:	8d15                	c.sub	a0,a3
   19624:	05357c63          	bgeu	a0,s3,1967c <dwarf::type_unit::type() const+0xda>
   19628:	850d                	c.srai	a0,0x3
   1962a:	e111                	c.bnez	a0,1962e <dwarf::type_unit::type() const+0x8c>
   1962c:	4505                	c.li	a0,1
    while (target < n)
   1962e:	01257563          	bgeu	a0,s2,19638 <dwarf::type_unit::type() const+0x96>
      target <<= 1;
   19632:	0506                	c.slli	a0,0x1
    while (target < n)
   19634:	ff256fe3          	bltu	a0,s2,19632 <dwarf::type_unit::type() const+0x90>
    char *newbuf = new char[sizeof(T[target])];
   19638:	00351a13          	slli	s4,a0,0x3
   1963c:	8552                	c.mv	a0,s4
   1963e:	ca3fc0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   19642:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   19644:	10843503          	ld	a0,264(s0)
    for (; src < end; src++, dest++) {
   19648:	11043783          	ld	a5,272(s0)
   1964c:	08f57663          	bgeu	a0,a5,196d8 <dwarf::type_unit::type() const+0x136>
    T *src = base, *dest = (T *)newbuf;
   19650:	87aa                	c.mv	a5,a0
   19652:	8ada                	c.mv	s5,s6
    for (; src < end; src++, dest++) {
   19654:	07a1                	c.addi	a5,8
   19656:	0aa1                	c.addi	s5,8
   19658:	11043703          	ld	a4,272(s0)
   1965c:	fee7ece3          	bltu	a5,a4,19654 <dwarf::type_unit::type() const+0xb2>
   19660:	0d840793          	addi	a5,s0,216
    if ((char *)base != buf)
   19664:	00f50563          	beq	a0,a5,1966e <dwarf::type_unit::type() const+0xcc>
      delete[] (char *)base;
   19668:	c119                	c.beqz	a0,1966e <dwarf::type_unit::type() const+0xcc>
   1966a:	ef7fc0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1966e:	11643423          	sd	s6,264(s0)
    end = dest;
   19672:	11543823          	sd	s5,272(s0)
    cap = base + target;
   19676:	9b52                	c.add	s6,s4
   19678:	11643c23          	sd	s6,280(s0)
    for (size_type i = 0; i < osize; i++)
   1967c:	00090f63          	beq	s2,zero,1969a <dwarf::type_unit::type() const+0xf8>
   19680:	4781                	c.li	a5,0
   19682:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   19686:	6746                	c.ldsp	a4,80(sp)
   19688:	9736                	c.add	a4,a3
   1968a:	6310                	c.ld	a2,0(a4)
   1968c:	10843703          	ld	a4,264(s0)
   19690:	9736                	c.add	a4,a3
   19692:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   19694:	0785                	c.addi	a5,1
   19696:	fef916e3          	bne	s2,a5,19682 <dwarf::type_unit::type() const+0xe0>
    end = base + osize;
   1969a:	10843783          	ld	a5,264(s0)
   1969e:	97ce                	c.add	a5,s3
   196a0:	10f43823          	sd	a5,272(s0)
   196a4:	77a6                	c.ldsp	a5,104(sp)
   196a6:	12f43023          	sd	a5,288(s0)
    for (T *p = base; p < end; ++p)
   196aa:	6546                	c.ldsp	a0,80(sp)
   196ac:	67e6                	c.ldsp	a5,88(sp)
   196ae:	00f57763          	bgeu	a0,a5,196bc <dwarf::type_unit::type() const+0x11a>
   196b2:	87aa                	c.mv	a5,a0
   196b4:	07a1                	c.addi	a5,8
   196b6:	6766                	c.ldsp	a4,88(sp)
   196b8:	fee7eee3          	bltu	a5,a4,196b4 <dwarf::type_unit::type() const+0x112>
    end = base;
   196bc:	ecaa                	c.sdsp	a0,88(sp)
    if ((char *)base != buf)
   196be:	101c                	c.addi4spn	a5,sp,32
   196c0:	00f50563          	beq	a0,a5,196ca <dwarf::type_unit::type() const+0x128>
      delete[] (char *)base;
   196c4:	c119                	c.beqz	a0,196ca <dwarf::type_unit::type() const+0x128>
   196c6:	e9bfc0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   196ca:	6488                	c.ld	a0,8(s1)
    m->type.read(m->type_offset);
   196cc:	612c                	c.ld	a1,64(a0)
   196ce:	0b850513          	addi	a0,a0,184
   196d2:	3d1010ef          	jal	ra,1b2a2 <dwarf::die::read(unsigned long)>
   196d6:	b5dd                	c.j	195bc <dwarf::type_unit::type() const+0x1a>
    T *src = base, *dest = (T *)newbuf;
   196d8:	8ada                	c.mv	s5,s6
   196da:	b759                	c.j	19660 <dwarf::type_unit::type() const+0xbe>
class die {
   196dc:	842a                	c.mv	s0,a0
   196de:	1008                	c.addi4spn	a0,sp,32
   196e0:	00020317          	auipc	t1,0x20
   196e4:	d0033303          	ld	t1,-768(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   196e8:	9302                	c.jalr	t1
   196ea:	8522                	c.mv	a0,s0
   196ec:	fa5fc0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000196f0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   196f0:	8082                	c.jr	ra

00000000000196f2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   196f2:	8082                	c.jr	ra

00000000000196f4 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   196f4:	8082                	c.jr	ra

00000000000196f6 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      }
   196f6:	8082                	c.jr	ra

00000000000196f8 <dwarf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   196f8:	1141                	c.addi	sp,-16
   196fa:	e406                	c.sdsp	ra,8(sp)
   196fc:	00020797          	auipc	a5,0x20
   19700:	e547b783          	ld	a5,-428(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   19704:	07c1                	c.addi	a5,16
   19706:	e11c                	c.sd	a5,0(a0)
   19708:	dd9fc0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   1970c:	60a2                	c.ldsp	ra,8(sp)
   1970e:	0141                	c.addi	sp,16
   19710:	8082                	c.jr	ra

0000000000019712 <dwarf::format_error::~format_error()>:
   19712:	1141                	c.addi	sp,-16
   19714:	e406                	c.sdsp	ra,8(sp)
   19716:	e022                	c.sdsp	s0,0(sp)
   19718:	842a                	c.mv	s0,a0
   1971a:	00020797          	auipc	a5,0x20
   1971e:	e367b783          	ld	a5,-458(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   19722:	07c1                	c.addi	a5,16
   19724:	e11c                	c.sd	a5,0(a0)
   19726:	dbbfc0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   1972a:	8522                	c.mv	a0,s0
   1972c:	d85fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19730:	60a2                	c.ldsp	ra,8(sp)
   19732:	6402                	c.ldsp	s0,0(sp)
   19734:	0141                	c.addi	sp,16
   19736:	8082                	c.jr	ra

0000000000019738 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   19738:	1141                	c.addi	sp,-16
   1973a:	e406                	c.sdsp	ra,8(sp)
   1973c:	d75fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19740:	60a2                	c.ldsp	ra,8(sp)
   19742:	0141                	c.addi	sp,16
   19744:	8082                	c.jr	ra

0000000000019746 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   19746:	1141                	c.addi	sp,-16
   19748:	e406                	c.sdsp	ra,8(sp)
   1974a:	d67fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1974e:	60a2                	c.ldsp	ra,8(sp)
   19750:	0141                	c.addi	sp,16
   19752:	8082                	c.jr	ra

0000000000019754 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   19754:	1141                	c.addi	sp,-16
   19756:	e406                	c.sdsp	ra,8(sp)
   19758:	d59fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1975c:	60a2                	c.ldsp	ra,8(sp)
   1975e:	0141                	c.addi	sp,16
   19760:	8082                	c.jr	ra

0000000000019762 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   19762:	1101                	c.addi	sp,-32
   19764:	ec06                	c.sdsp	ra,24(sp)
   19766:	e822                	c.sdsp	s0,16(sp)
   19768:	e426                	c.sdsp	s1,8(sp)
   1976a:	e04a                	c.sdsp	s2,0(sp)
   1976c:	892a                	c.mv	s2,a0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1976e:	6100                	c.ld	s0,0(a0)
   19770:	6504                	c.ld	s1,8(a0)
   19772:	00940963          	beq	s0,s1,19784 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x22>
      __pointer->~_Tp();
   19776:	601c                	c.ld	a5,0(s0)
   19778:	639c                	c.ld	a5,0(a5)
   1977a:	8522                	c.mv	a0,s0
   1977c:	9782                	c.jalr	a5
	  for (; __first != __last; ++__first)
   1977e:	0461                	c.addi	s0,24
   19780:	fe849be3          	bne	s1,s0,19776 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x14>
	_M_deallocate(_M_impl._M_start,
   19784:	00093503          	ld	a0,0(s2)
	if (__p)
   19788:	c119                	c.beqz	a0,1978e <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x2c>
   1978a:	d27fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   1978e:	60e2                	c.ldsp	ra,24(sp)
   19790:	6442                	c.ldsp	s0,16(sp)
   19792:	64a2                	c.ldsp	s1,8(sp)
   19794:	6902                	c.ldsp	s2,0(sp)
   19796:	6105                	c.addi16sp	sp,32
   19798:	8082                	c.jr	ra

000000000001979a <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1979a:	1141                	c.addi	sp,-16
   1979c:	e406                	c.sdsp	ra,8(sp)
   1979e:	d13fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   197a2:	60a2                	c.ldsp	ra,8(sp)
   197a4:	0141                	c.addi	sp,16
   197a6:	8082                	c.jr	ra

00000000000197a8 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   197a8:	1141                	c.addi	sp,-16
   197aa:	e406                	c.sdsp	ra,8(sp)
   197ac:	d05fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   197b0:	60a2                	c.ldsp	ra,8(sp)
   197b2:	0141                	c.addi	sp,16
   197b4:	8082                	c.jr	ra

00000000000197b6 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   197b6:	1141                	c.addi	sp,-16
   197b8:	e406                	c.sdsp	ra,8(sp)
   197ba:	cf7fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   197be:	60a2                	c.ldsp	ra,8(sp)
   197c0:	0141                	c.addi	sp,16
   197c2:	8082                	c.jr	ra

00000000000197c4 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   197c4:	1141                	c.addi	sp,-16
   197c6:	e406                	c.sdsp	ra,8(sp)
   197c8:	e022                	c.sdsp	s0,0(sp)
   197ca:	03850413          	addi	s0,a0,56
	    ||
   197ce:	00020797          	auipc	a5,0x20
   197d2:	d627b783          	ld	a5,-670(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   197d6:	02f58a63          	beq	a1,a5,1980a <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   197da:	6588                	c.ld	a0,8(a1)
   197dc:	00020797          	auipc	a5,0x20
   197e0:	c2c7b783          	ld	a5,-980(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   197e4:	02f50363          	beq	a0,a5,1980a <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   197e8:	00054703          	lbu	a4,0(a0)
   197ec:	02a00793          	addi	a5,zero,42
   197f0:	02f70263          	beq	a4,a5,19814 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   197f4:	00020597          	auipc	a1,0x20
   197f8:	c145b583          	ld	a1,-1004(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   197fc:	b15fc0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   19800:	00153513          	sltiu	a0,a0,1
   19804:	40a00533          	sub	a0,zero,a0
   19808:	8c69                	c.and	s0,a0
      }
   1980a:	8522                	c.mv	a0,s0
   1980c:	60a2                	c.ldsp	ra,8(sp)
   1980e:	6402                	c.ldsp	s0,0(sp)
   19810:	0141                	c.addi	sp,16
   19812:	8082                	c.jr	ra
	return nullptr;
   19814:	4401                	c.li	s0,0
   19816:	bfd5                	c.j	1980a <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

0000000000019818 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   19818:	1141                	c.addi	sp,-16
   1981a:	e406                	c.sdsp	ra,8(sp)
   1981c:	e022                	c.sdsp	s0,0(sp)
   1981e:	03850413          	addi	s0,a0,56
	    ||
   19822:	00020797          	auipc	a5,0x20
   19826:	d0e7b783          	ld	a5,-754(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   1982a:	02f58a63          	beq	a1,a5,1985e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   1982e:	6588                	c.ld	a0,8(a1)
   19830:	00020797          	auipc	a5,0x20
   19834:	bd87b783          	ld	a5,-1064(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   19838:	02f50363          	beq	a0,a5,1985e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1983c:	00054703          	lbu	a4,0(a0)
   19840:	02a00793          	addi	a5,zero,42
   19844:	02f70263          	beq	a4,a5,19868 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   19848:	00020597          	auipc	a1,0x20
   1984c:	bc05b583          	ld	a1,-1088(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   19850:	ac1fc0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   19854:	00153513          	sltiu	a0,a0,1
   19858:	40a00533          	sub	a0,zero,a0
   1985c:	8c69                	c.and	s0,a0
      }
   1985e:	8522                	c.mv	a0,s0
   19860:	60a2                	c.ldsp	ra,8(sp)
   19862:	6402                	c.ldsp	s0,0(sp)
   19864:	0141                	c.addi	sp,16
   19866:	8082                	c.jr	ra
	return nullptr;
   19868:	4401                	c.li	s0,0
   1986a:	bfd5                	c.j	1985e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000001986c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1986c:	1141                	c.addi	sp,-16
   1986e:	e406                	c.sdsp	ra,8(sp)
   19870:	e022                	c.sdsp	s0,0(sp)
   19872:	03850413          	addi	s0,a0,56
	    ||
   19876:	00020797          	auipc	a5,0x20
   1987a:	cba7b783          	ld	a5,-838(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   1987e:	02f58a63          	beq	a1,a5,198b2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   19882:	6588                	c.ld	a0,8(a1)
   19884:	00020797          	auipc	a5,0x20
   19888:	b847b783          	ld	a5,-1148(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   1988c:	02f50363          	beq	a0,a5,198b2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   19890:	00054703          	lbu	a4,0(a0)
   19894:	02a00793          	addi	a5,zero,42
   19898:	02f70263          	beq	a4,a5,198bc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   1989c:	00020597          	auipc	a1,0x20
   198a0:	b6c5b583          	ld	a1,-1172(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   198a4:	a6dfc0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   198a8:	00153513          	sltiu	a0,a0,1
   198ac:	40a00533          	sub	a0,zero,a0
   198b0:	8c69                	c.and	s0,a0
      }
   198b2:	8522                	c.mv	a0,s0
   198b4:	60a2                	c.ldsp	ra,8(sp)
   198b6:	6402                	c.ldsp	s0,0(sp)
   198b8:	0141                	c.addi	sp,16
   198ba:	8082                	c.jr	ra
	return nullptr;
   198bc:	4401                	c.li	s0,0
   198be:	bfd5                	c.j	198b2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

00000000000198c0 <std::__cxx11::to_string(int)>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
   198c0:	7179                	c.addi16sp	sp,-48
   198c2:	f406                	c.sdsp	ra,40(sp)
   198c4:	f022                	c.sdsp	s0,32(sp)
   198c6:	ec26                	c.sdsp	s1,24(sp)
   198c8:	e84a                	c.sdsp	s2,16(sp)
   198ca:	e44e                	c.sdsp	s3,8(sp)
   198cc:	892a                	c.mv	s2,a0
    const bool __neg = __val < 0;
   198ce:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   198d2:	0005849b          	addiw	s1,a1,0
   198d6:	0405ce63          	blt	a1,zero,19932 <std::__cxx11::to_string(int)+0x72>
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
   198da:	47a5                	c.li	a5,9
   198dc:	1497fb63          	bgeu	a5,s1,19a32 <std::__cxx11::to_string(int)+0x172>
	  if (__value < __b2) return __n + 1;
   198e0:	06300793          	addi	a5,zero,99
   198e4:	0497fa63          	bgeu	a5,s1,19938 <std::__cxx11::to_string(int)+0x78>
	  if (__value < __b3) return __n + 2;
   198e8:	3e700793          	addi	a5,zero,999
   198ec:	0697ff63          	bgeu	a5,s1,1996a <std::__cxx11::to_string(int)+0xaa>
	  if (__value < __b4) return __n + 3;
   198f0:	02049713          	slli	a4,s1,0x20
   198f4:	9301                	c.srli	a4,0x20
   198f6:	6789                	c.lui	a5,0x2
   198f8:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   198fc:	1297f963          	bgeu	a5,s1,19a2e <std::__cxx11::to_string(int)+0x16e>
      unsigned __n = 1;
   19900:	4405                	c.li	s0,1
	  __value /= __b4;
   19902:	6689                	c.lui	a3,0x2
   19904:	71068593          	addi	a1,a3,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   19908:	4625                	c.li	a2,9
	  if (__value < __b2) return __n + 1;
   1990a:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   1990e:	3e700813          	addi	a6,zero,999
	  if (__value < __b4) return __n + 3;
   19912:	86be                	c.mv	a3,a5
	  __value /= __b4;
   19914:	02b75733          	divu	a4,a4,a1
   19918:	0007079b          	addiw	a5,a4,0
	  __n += 4;
   1991c:	2411                	c.addiw	s0,4
	  if (__value < (unsigned)__base) return __n;
   1991e:	04f67863          	bgeu	a2,a5,1996e <std::__cxx11::to_string(int)+0xae>
	  if (__value < __b2) return __n + 1;
   19922:	00f57c63          	bgeu	a0,a5,1993a <std::__cxx11::to_string(int)+0x7a>
	  if (__value < __b3) return __n + 2;
   19926:	04f87363          	bgeu	a6,a5,1996c <std::__cxx11::to_string(int)+0xac>
	  if (__value < __b4) return __n + 3;
   1992a:	fef6e5e3          	bltu	a3,a5,19914 <std::__cxx11::to_string(int)+0x54>
   1992e:	240d                	c.addiw	s0,3
   19930:	a83d                	c.j	1996e <std::__cxx11::to_string(int)+0xae>
   19932:	40b004bb          	subw	s1,zero,a1
   19936:	b755                	c.j	198da <std::__cxx11::to_string(int)+0x1a>
      unsigned __n = 1;
   19938:	4405                	c.li	s0,1
	  if (__value < __b2) return __n + 1;
   1993a:	2405                	c.addiw	s0,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1993c:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   19940:	00f93023          	sd	a5,0(s2)
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
   19944:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   19948:	02d00613          	addi	a2,zero,45
   1994c:	1582                	c.slli	a1,0x20
   1994e:	9181                	c.srli	a1,0x20
   19950:	854a                	c.mv	a0,s2
   19952:	bbffc0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   19956:	00093583          	ld	a1,0(s2)
   1995a:	95ce                	c.add	a1,s3
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
   1995c:	06300793          	addi	a5,zero,99
   19960:	0897f663          	bgeu	a5,s1,199ec <std::__cxx11::to_string(int)+0x12c>
      unsigned __pos = __len - 1;
   19964:	fff4071b          	addiw	a4,s0,-1
   19968:	a02d                	c.j	19992 <std::__cxx11::to_string(int)+0xd2>
      unsigned __n = 1;
   1996a:	4405                	c.li	s0,1
	  if (__value < __b3) return __n + 2;
   1996c:	2409                	c.addiw	s0,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1996e:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   19972:	00f93023          	sd	a5,0(s2)
    string __str(__neg + __len, '-');
   19976:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1997a:	02d00613          	addi	a2,zero,45
   1997e:	1582                	c.slli	a1,0x20
   19980:	9181                	c.srli	a1,0x20
   19982:	854a                	c.mv	a0,s2
   19984:	b8dfc0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   19988:	00093583          	ld	a1,0(s2)
   1998c:	95ce                	c.add	a1,s3
      unsigned __pos = __len - 1;
   1998e:	fff4071b          	addiw	a4,s0,-1
	{
	  auto const __num = (__val % 100) * 2;
   19992:	06400813          	addi	a6,zero,100
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   19996:	00020517          	auipc	a0,0x20
   1999a:	9c253503          	ld	a0,-1598(a0) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
      while (__val >= 100)
   1999e:	6309                	c.lui	t1,0x2
   199a0:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   199a4:	0304f7bb          	remuw	a5,s1,a6
   199a8:	0017979b          	slliw	a5,a5,0x1
   199ac:	0004889b          	addiw	a7,s1,0
	  __val /= 100;
   199b0:	0304d4bb          	divuw	s1,s1,a6
	  __first[__pos] = __digits[__num + 1];
   199b4:	02071613          	slli	a2,a4,0x20
   199b8:	9201                	c.srli	a2,0x20
   199ba:	962e                	c.add	a2,a1
   199bc:	0017869b          	addiw	a3,a5,1
   199c0:	1682                	c.slli	a3,0x20
   199c2:	9281                	c.srli	a3,0x20
   199c4:	96aa                	c.add	a3,a0
   199c6:	0006c683          	lbu	a3,0(a3)
   199ca:	00d60023          	sb	a3,0(a2)
	  __first[__pos - 1] = __digits[__num];
   199ce:	fff7069b          	addiw	a3,a4,-1
   199d2:	1682                	c.slli	a3,0x20
   199d4:	9281                	c.srli	a3,0x20
   199d6:	96ae                	c.add	a3,a1
   199d8:	1782                	c.slli	a5,0x20
   199da:	9381                	c.srli	a5,0x20
   199dc:	97aa                	c.add	a5,a0
   199de:	0007c783          	lbu	a5,0(a5)
   199e2:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   199e6:	3779                	c.addiw	a4,-2
      while (__val >= 100)
   199e8:	fb136ee3          	bltu	t1,a7,199a4 <std::__cxx11::to_string(int)+0xe4>
	}
      if (__val >= 10)
   199ec:	47a5                	c.li	a5,9
   199ee:	0497f463          	bgeu	a5,s1,19a36 <std::__cxx11::to_string(int)+0x176>
	{
	  auto const __num = __val * 2;
   199f2:	0014949b          	slliw	s1,s1,0x1
	  __first[1] = __digits[__num + 1];
   199f6:	00020717          	auipc	a4,0x20
   199fa:	96273703          	ld	a4,-1694(a4) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
   199fe:	0014879b          	addiw	a5,s1,1
   19a02:	1782                	c.slli	a5,0x20
   19a04:	9381                	c.srli	a5,0x20
   19a06:	97ba                	c.add	a5,a4
   19a08:	0007c783          	lbu	a5,0(a5)
   19a0c:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   19a10:	1482                	c.slli	s1,0x20
   19a12:	9081                	c.srli	s1,0x20
   19a14:	9726                	c.add	a4,s1
   19a16:	00074483          	lbu	s1,0(a4)
   19a1a:	00958023          	sb	s1,0(a1)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
   19a1e:	854a                	c.mv	a0,s2
   19a20:	70a2                	c.ldsp	ra,40(sp)
   19a22:	7402                	c.ldsp	s0,32(sp)
   19a24:	64e2                	c.ldsp	s1,24(sp)
   19a26:	6942                	c.ldsp	s2,16(sp)
   19a28:	69a2                	c.ldsp	s3,8(sp)
   19a2a:	6145                	c.addi16sp	sp,48
   19a2c:	8082                	c.jr	ra
      unsigned __n = 1;
   19a2e:	4405                	c.li	s0,1
   19a30:	bdfd                	c.j	1992e <std::__cxx11::to_string(int)+0x6e>
   19a32:	4405                	c.li	s0,1
   19a34:	b721                	c.j	1993c <std::__cxx11::to_string(int)+0x7c>
	}
      else
	__first[0] = '0' + __val;
   19a36:	0304849b          	addiw	s1,s1,48
   19a3a:	0ff4f493          	andi	s1,s1,255
   19a3e:	bff1                	c.j	19a1a <std::__cxx11::to_string(int)+0x15a>

0000000000019a40 <dwarf::type_unit::~type_unit()>:
class type_unit : public unit {
   19a40:	1141                	c.addi	sp,-16
   19a42:	e406                	c.sdsp	ra,8(sp)
   19a44:	00020797          	auipc	a5,0x20
   19a48:	90c7b783          	ld	a5,-1780(a5) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   19a4c:	07c1                	c.addi	a5,16
   19a4e:	e11c                	c.sd	a5,0(a0)
   19a50:	de6fd0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   19a54:	60a2                	c.ldsp	ra,8(sp)
   19a56:	0141                	c.addi	sp,16
   19a58:	8082                	c.jr	ra

0000000000019a5a <dwarf::type_unit::~type_unit()>:
   19a5a:	1141                	c.addi	sp,-16
   19a5c:	e406                	c.sdsp	ra,8(sp)
   19a5e:	e022                	c.sdsp	s0,0(sp)
   19a60:	842a                	c.mv	s0,a0
   19a62:	00020797          	auipc	a5,0x20
   19a66:	8ee7b783          	ld	a5,-1810(a5) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   19a6a:	07c1                	c.addi	a5,16
   19a6c:	e11c                	c.sd	a5,0(a0)
   19a6e:	dc8fd0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   19a72:	8522                	c.mv	a0,s0
   19a74:	a3dfc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19a78:	60a2                	c.ldsp	ra,8(sp)
   19a7a:	6402                	c.ldsp	s0,0(sp)
   19a7c:	0141                	c.addi	sp,16
   19a7e:	8082                	c.jr	ra

0000000000019a80 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)>:
    }

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
   19a80:	7179                	c.addi16sp	sp,-48
   19a82:	f406                	c.sdsp	ra,40(sp)
   19a84:	f022                	c.sdsp	s0,32(sp)
   19a86:	ec26                	c.sdsp	s1,24(sp)
   19a88:	e84a                	c.sdsp	s2,16(sp)
   19a8a:	e44e                	c.sdsp	s3,8(sp)
   19a8c:	e052                	c.sdsp	s4,0(sp)
   19a8e:	84aa                	c.mv	s1,a0
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (std::__addressof(__x) != this)
   19a90:	06a58c63          	beq	a1,a0,19b08 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x88>
   19a94:	892e                	c.mv	s2,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19a96:	0085ba03          	ld	s4,8(a1)
   19a9a:	6180                	c.ld	s0,0(a1)
   19a9c:	408a09b3          	sub	s3,s4,s0
			 - this->_M_impl._M_start); }
   19aa0:	6108                	c.ld	a0,0(a0)
   19aa2:	689c                	c.ld	a5,16(s1)
   19aa4:	8f89                	c.sub	a5,a0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   19aa6:	0137ed63          	bltu	a5,s3,19ac0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x40>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19aaa:	6490                	c.ld	a2,8(s1)
   19aac:	8e09                	c.sub	a2,a0
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
   19aae:	07366e63          	bltu	a2,s3,19b2a <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xaa>
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   19ab2:	048a0863          	beq	s4,s0,19b02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   19ab6:	864e                	c.mv	a2,s3
   19ab8:	85a2                	c.mv	a1,s0
   19aba:	c67fc0ef          	jal	ra,16720 <memmove@plt>
   19abe:	a091                	c.j	19b02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   19ac0:	06098363          	beq	s3,zero,19b26 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   19ac4:	57c5                	c.li	a5,-15
   19ac6:	8385                	c.srli	a5,0x1
   19ac8:	0537e963          	bltu	a5,s3,19b1a <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x9a>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   19acc:	854e                	c.mv	a0,s3
   19ace:	9f3fc0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   19ad2:	892a                	c.mv	s2,a0
		     _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      __try
	{
	  for (; __first != __last; ++__first, (void)++__cur)
   19ad4:	008a0e63          	beq	s4,s0,19af0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x70>
   19ad8:	85a2                	c.mv	a1,s0
      _ForwardIterator __cur = __result;
   19ada:	87ca                	c.mv	a5,s2
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   19adc:	4198                	c.lw	a4,0(a1)
   19ade:	c398                	c.sw	a4,0(a5)
   19ae0:	41d8                	c.lw	a4,4(a1)
   19ae2:	c3d8                	c.sw	a4,4(a5)
   19ae4:	4598                	c.lw	a4,8(a1)
   19ae6:	c798                	c.sw	a4,8(a5)
	  for (; __first != __last; ++__first, (void)++__cur)
   19ae8:	07b1                	c.addi	a5,12
   19aea:	05b1                	c.addi	a1,12
   19aec:	feba18e3          	bne	s4,a1,19adc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x5c>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19af0:	6088                	c.ld	a0,0(s1)
	if (__p)
   19af2:	c119                	c.beqz	a0,19af8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x78>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19af4:	9bdfc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __tmp;
   19af8:	0124b023          	sd	s2,0(s1)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   19afc:	994e                	c.add	s2,s3
   19afe:	0124b823          	sd	s2,16(s1)
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   19b02:	609c                	c.ld	a5,0(s1)
   19b04:	97ce                	c.add	a5,s3
   19b06:	e49c                	c.sd	a5,8(s1)
	}
      return *this;
    }
   19b08:	8526                	c.mv	a0,s1
   19b0a:	70a2                	c.ldsp	ra,40(sp)
   19b0c:	7402                	c.ldsp	s0,32(sp)
   19b0e:	64e2                	c.ldsp	s1,24(sp)
   19b10:	6942                	c.ldsp	s2,16(sp)
   19b12:	69a2                	c.ldsp	s3,8(sp)
   19b14:	6a02                	c.ldsp	s4,0(sp)
   19b16:	6145                	c.addi16sp	sp,48
   19b18:	8082                	c.jr	ra
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   19b1a:	0009d463          	bge	s3,zero,19b22 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xa2>
	      std::__throw_bad_array_new_length();
   19b1e:	973fc0ef          	jal	ra,16490 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   19b22:	86ffc0ef          	jal	ra,16390 <std::__throw_bad_alloc()@plt>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   19b26:	4901                	c.li	s2,0
   19b28:	b775                	c.j	19ad4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x54>
	  if (_Num)
   19b2a:	c601                	c.beqz	a2,19b32 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   19b2c:	85a2                	c.mv	a1,s0
   19b2e:	bf3fc0ef          	jal	ra,16720 <memmove@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19b32:	6498                	c.ld	a4,8(s1)
   19b34:	6094                	c.ld	a3,0(s1)
   19b36:	40d706b3          	sub	a3,a4,a3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   19b3a:	00093783          	ld	a5,0(s2)
   19b3e:	97b6                	c.add	a5,a3
					  __x._M_impl._M_finish,
   19b40:	00893603          	ld	a2,8(s2)
   19b44:	fac78fe3          	beq	a5,a2,19b02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
   19b48:	4394                	c.lw	a3,0(a5)
   19b4a:	c314                	c.sw	a3,0(a4)
   19b4c:	43d4                	c.lw	a3,4(a5)
   19b4e:	c354                	c.sw	a3,4(a4)
   19b50:	4794                	c.lw	a3,8(a5)
   19b52:	c714                	c.sw	a3,8(a4)
   19b54:	07b1                	c.addi	a5,12
   19b56:	0731                	c.addi	a4,12
   19b58:	fef618e3          	bne	a2,a5,19b48 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
   19b5c:	b75d                	c.j	19b02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>

0000000000019b5e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)>:
      while (__x != 0)
   19b5e:	c1f1                	c.beqz	a1,19c22 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xc4>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   19b60:	7139                	c.addi16sp	sp,-64
   19b62:	fc06                	c.sdsp	ra,56(sp)
   19b64:	f822                	c.sdsp	s0,48(sp)
   19b66:	f426                	c.sdsp	s1,40(sp)
   19b68:	f04a                	c.sdsp	s2,32(sp)
   19b6a:	ec4e                	c.sdsp	s3,24(sp)
   19b6c:	e852                	c.sdsp	s4,16(sp)
   19b6e:	e456                	c.sdsp	s5,8(sp)
   19b70:	e05a                	c.sdsp	s6,0(sp)
   19b72:	8aaa                	c.mv	s5,a0
   19b74:	842e                	c.mv	s0,a1
	  _M_erase(_S_right(__x));
   19b76:	00020b17          	auipc	s6,0x20
   19b7a:	832b3b03          	ld	s6,-1998(s6) # 393a8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x1f84a>
    return ::__libc_single_threaded;
   19b7e:	00020917          	auipc	s2,0x20
   19b82:	8fa93903          	ld	s2,-1798(s2) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19b86:	4485                	c.li	s1,1
   19b88:	a005                	c.j	19ba8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x4a>
    if (__is_single_threaded())
   19b8a:	00094783          	lbu	a5,0(s2)
   19b8e:	c79d                	c.beqz	a5,19bbc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x5e>
    _Atomic_word __result = *__mem;
   19b90:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   19b94:	fff5079b          	addiw	a5,a0,-1
   19b98:	02f9a823          	sw	a5,48(s3)
   19b9c:	02950663          	beq	a0,s1,19bc8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x6a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19ba0:	8552                	c.mv	a0,s4
   19ba2:	90ffc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      while (__x != 0)
   19ba6:	c425                	c.beqz	s0,19c0e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xb0>
	  _M_erase(_S_right(__x));
   19ba8:	6c0c                	c.ld	a1,24(s0)
   19baa:	8556                	c.mv	a0,s5
   19bac:	9b02                	c.jalr	s6
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   19bae:	8a22                	c.mv	s4,s0
      { return static_cast<_Link_type>(__x->_M_left); }
   19bb0:	6800                	c.ld	s0,16(s0)
	if (_M_pi != nullptr)
   19bb2:	030a3983          	ld	s3,48(s4)
   19bb6:	fc099ae3          	bne	s3,zero,19b8a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x2c>
   19bba:	b7dd                	c.j	19ba0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
      return __exchange_and_add(__mem, __val);
   19bbc:	55fd                	c.li	a1,-1
   19bbe:	03098513          	addi	a0,s3,48
   19bc2:	f6efc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19bc6:	bfd9                	c.j	19b9c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x3e>
	_M_dispose();
   19bc8:	0009b783          	ld	a5,0(s3)
   19bcc:	6b9c                	c.ld	a5,16(a5)
   19bce:	854e                	c.mv	a0,s3
   19bd0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19bd2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19bd6:	00020797          	auipc	a5,0x20
   19bda:	8a27b783          	ld	a5,-1886(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19bde:	0007c783          	lbu	a5,0(a5)
   19be2:	c385                	c.beqz	a5,19c02 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xa4>
    _Atomic_word __result = *__mem;
   19be4:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   19be8:	fff5079b          	addiw	a5,a0,-1
   19bec:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19bf0:	4785                	c.li	a5,1
   19bf2:	faf517e3          	bne	a0,a5,19ba0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
	    _M_destroy();
   19bf6:	0009b783          	ld	a5,0(s3)
   19bfa:	6f9c                	c.ld	a5,24(a5)
   19bfc:	854e                	c.mv	a0,s3
   19bfe:	9782                	c.jalr	a5
   19c00:	b745                	c.j	19ba0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
      return __exchange_and_add(__mem, __val);
   19c02:	55fd                	c.li	a1,-1
   19c04:	03498513          	addi	a0,s3,52
   19c08:	f28fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c0c:	b7d5                	c.j	19bf0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x92>
    }
   19c0e:	70e2                	c.ldsp	ra,56(sp)
   19c10:	7442                	c.ldsp	s0,48(sp)
   19c12:	74a2                	c.ldsp	s1,40(sp)
   19c14:	7902                	c.ldsp	s2,32(sp)
   19c16:	69e2                	c.ldsp	s3,24(sp)
   19c18:	6a42                	c.ldsp	s4,16(sp)
   19c1a:	6aa2                	c.ldsp	s5,8(sp)
   19c1c:	6b02                	c.ldsp	s6,0(sp)
   19c1e:	6121                	c.addi16sp	sp,64
   19c20:	8082                	c.jr	ra
   19c22:	8082                	c.jr	ra

0000000000019c24 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   19c24:	7179                	c.addi16sp	sp,-48
   19c26:	f406                	c.sdsp	ra,40(sp)
   19c28:	f022                	c.sdsp	s0,32(sp)
   19c2a:	ec26                	c.sdsp	s1,24(sp)
   19c2c:	e84a                	c.sdsp	s2,16(sp)
   19c2e:	e44e                	c.sdsp	s3,8(sp)
   19c30:	892a                	c.mv	s2,a0
      { _M_erase(_M_begin()); }
   19c32:	696c                	c.ld	a1,208(a0)
   19c34:	0c050513          	addi	a0,a0,192
   19c38:	0001f317          	auipc	t1,0x1f
   19c3c:	77033303          	ld	t1,1904(t1) # 393a8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x1f84a>
   19c40:	9302                	c.jalr	t1
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19c42:	09093403          	ld	s0,144(s2)

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    {
      while (__n)
   19c46:	c015                	c.beqz	s0,19c6a <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x46>
   19c48:	0001f997          	auipc	s3,0x1f
   19c4c:	7089b983          	ld	s3,1800(s3) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   19c50:	09c1                	c.addi	s3,16
      _M_next() const noexcept
   19c52:	84a2                	c.mv	s1,s0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   19c54:	6000                	c.ld	s0,0(s0)
   19c56:	0134b823          	sd	s3,16(s1)
   19c5a:	01048513          	addi	a0,s1,16
   19c5e:	bd8fd0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   19c62:	8526                	c.mv	a0,s1
   19c64:	84dfc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      while (__n)
   19c68:	f46d                	c.bnez	s0,19c52 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0,
   19c6a:	08893603          	ld	a2,136(s2)
   19c6e:	060e                	c.slli	a2,0x3
   19c70:	4581                	c.li	a1,0
   19c72:	08093503          	ld	a0,128(s2)
   19c76:	90bfc0ef          	jal	ra,16580 <memset@plt>
		       _M_bucket_count * sizeof(__node_base_ptr));
      _M_element_count = 0;
   19c7a:	08093c23          	sd	zero,152(s2)
      _M_before_begin._M_nxt = nullptr;
   19c7e:	08093823          	sd	zero,144(s2)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   19c82:	08093503          	ld	a0,128(s2)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   19c86:	0b090793          	addi	a5,s2,176
	if (_M_uses_single_bucket(__bkts))
   19c8a:	00f50463          	beq	a0,a5,19c92 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6e>
   19c8e:	823fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19c92:	06893403          	ld	s0,104(s2)
   19c96:	07093483          	ld	s1,112(s2)
	  for (; __first != __last; ++__first)
   19c9a:	00940963          	beq	s0,s1,19cac <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>
      __pointer->~_Tp();
   19c9e:	601c                	c.ld	a5,0(s0)
   19ca0:	639c                	c.ld	a5,0(a5)
   19ca2:	8522                	c.mv	a0,s0
   19ca4:	9782                	c.jalr	a5
	  for (; __first != __last; ++__first)
   19ca6:	0461                	c.addi	s0,24
   19ca8:	fe849be3          	bne	s1,s0,19c9e <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7a>
	_M_deallocate(_M_impl._M_start,
   19cac:	06893503          	ld	a0,104(s2)
	if (__p)
   19cb0:	c119                	c.beqz	a0,19cb6 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
   19cb2:	ffefc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19cb6:	06093403          	ld	s0,96(s2)
   19cba:	cc19                	c.beqz	s0,19cd8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
    if (__is_single_threaded())
   19cbc:	0001f797          	auipc	a5,0x1f
   19cc0:	7bc7b783          	ld	a5,1980(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19cc4:	0007c783          	lbu	a5,0(a5)
   19cc8:	c3ad                	c.beqz	a5,19d2a <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x106>
    _Atomic_word __result = *__mem;
   19cca:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19ccc:	fff5079b          	addiw	a5,a0,-1
   19cd0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19cd2:	4785                	c.li	a5,1
   19cd4:	06f50163          	beq	a0,a5,19d36 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x112>
	if (_M_pi != nullptr)
   19cd8:	05093403          	ld	s0,80(s2)
   19cdc:	cc19                	c.beqz	s0,19cfa <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
    if (__is_single_threaded())
   19cde:	0001f797          	auipc	a5,0x1f
   19ce2:	79a7b783          	ld	a5,1946(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19ce6:	0007c783          	lbu	a5,0(a5)
   19cea:	c7c9                	c.beqz	a5,19d74 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x150>
    _Atomic_word __result = *__mem;
   19cec:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19cee:	fff5079b          	addiw	a5,a0,-1
   19cf2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19cf4:	4785                	c.li	a5,1
   19cf6:	08f50563          	beq	a0,a5,19d80 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15c>
	if (_M_pi != nullptr)
   19cfa:	04093403          	ld	s0,64(s2)
   19cfe:	cc19                	c.beqz	s0,19d1c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
    if (__is_single_threaded())
   19d00:	0001f797          	auipc	a5,0x1f
   19d04:	7787b783          	ld	a5,1912(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19d08:	0007c783          	lbu	a5,0(a5)
   19d0c:	cbcd                	c.beqz	a5,19dbe <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x19a>
    _Atomic_word __result = *__mem;
   19d0e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19d10:	fff5079b          	addiw	a5,a0,-1
   19d14:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19d16:	4785                	c.li	a5,1
   19d18:	0af50963          	beq	a0,a5,19dca <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a6>
      }
   19d1c:	70a2                	c.ldsp	ra,40(sp)
   19d1e:	7402                	c.ldsp	s0,32(sp)
   19d20:	64e2                	c.ldsp	s1,24(sp)
   19d22:	6942                	c.ldsp	s2,16(sp)
   19d24:	69a2                	c.ldsp	s3,8(sp)
   19d26:	6145                	c.addi16sp	sp,48
   19d28:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   19d2a:	55fd                	c.li	a1,-1
   19d2c:	03040513          	addi	a0,s0,48
   19d30:	e00fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19d34:	bf79                	c.j	19cd2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xae>
	_M_dispose();
   19d36:	601c                	c.ld	a5,0(s0)
   19d38:	6b9c                	c.ld	a5,16(a5)
   19d3a:	8522                	c.mv	a0,s0
   19d3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19d3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19d42:	0001f797          	auipc	a5,0x1f
   19d46:	7367b783          	ld	a5,1846(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19d4a:	0007c783          	lbu	a5,0(a5)
   19d4e:	cf89                	c.beqz	a5,19d68 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   19d50:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19d52:	fff5079b          	addiw	a5,a0,-1
   19d56:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19d58:	4785                	c.li	a5,1
   19d5a:	f6f51fe3          	bne	a0,a5,19cd8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
	    _M_destroy();
   19d5e:	601c                	c.ld	a5,0(s0)
   19d60:	6f9c                	c.ld	a5,24(a5)
   19d62:	8522                	c.mv	a0,s0
   19d64:	9782                	c.jalr	a5
   19d66:	bf8d                	c.j	19cd8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      return __exchange_and_add(__mem, __val);
   19d68:	55fd                	c.li	a1,-1
   19d6a:	03440513          	addi	a0,s0,52
   19d6e:	dc2fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19d72:	b7dd                	c.j	19d58 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
   19d74:	55fd                	c.li	a1,-1
   19d76:	03040513          	addi	a0,s0,48
   19d7a:	db6fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19d7e:	bf9d                	c.j	19cf4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd0>
	_M_dispose();
   19d80:	601c                	c.ld	a5,0(s0)
   19d82:	6b9c                	c.ld	a5,16(a5)
   19d84:	8522                	c.mv	a0,s0
   19d86:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19d88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19d8c:	0001f797          	auipc	a5,0x1f
   19d90:	6ec7b783          	ld	a5,1772(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19d94:	0007c783          	lbu	a5,0(a5)
   19d98:	cf89                	c.beqz	a5,19db2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x18e>
    _Atomic_word __result = *__mem;
   19d9a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19d9c:	fff5079b          	addiw	a5,a0,-1
   19da0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19da2:	4785                	c.li	a5,1
   19da4:	f4f51be3          	bne	a0,a5,19cfa <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
	    _M_destroy();
   19da8:	601c                	c.ld	a5,0(s0)
   19daa:	6f9c                	c.ld	a5,24(a5)
   19dac:	8522                	c.mv	a0,s0
   19dae:	9782                	c.jalr	a5
   19db0:	b7a9                	c.j	19cfa <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
      return __exchange_and_add(__mem, __val);
   19db2:	55fd                	c.li	a1,-1
   19db4:	03440513          	addi	a0,s0,52
   19db8:	d78fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19dbc:	b7dd                	c.j	19da2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x17e>
   19dbe:	55fd                	c.li	a1,-1
   19dc0:	03040513          	addi	a0,s0,48
   19dc4:	d6cfc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19dc8:	b7b9                	c.j	19d16 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf2>
	_M_dispose();
   19dca:	601c                	c.ld	a5,0(s0)
   19dcc:	6b9c                	c.ld	a5,16(a5)
   19dce:	8522                	c.mv	a0,s0
   19dd0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19dd2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19dd6:	0001f797          	auipc	a5,0x1f
   19dda:	6a27b783          	ld	a5,1698(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19dde:	0007c783          	lbu	a5,0(a5)
   19de2:	cf89                	c.beqz	a5,19dfc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d8>
    _Atomic_word __result = *__mem;
   19de4:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19de6:	fff5079b          	addiw	a5,a0,-1
   19dea:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19dec:	4785                	c.li	a5,1
   19dee:	f2f517e3          	bne	a0,a5,19d1c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
	    _M_destroy();
   19df2:	601c                	c.ld	a5,0(s0)
   19df4:	6f9c                	c.ld	a5,24(a5)
   19df6:	8522                	c.mv	a0,s0
   19df8:	9782                	c.jalr	a5
      }
   19dfa:	b70d                	c.j	19d1c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
      return __exchange_and_add(__mem, __val);
   19dfc:	55fd                	c.li	a1,-1
   19dfe:	03440513          	addi	a0,s0,52
   19e02:	d2efc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e06:	b7dd                	c.j	19dec <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1c8>

0000000000019e08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   19e08:	7179                	c.addi16sp	sp,-48
   19e0a:	f406                	c.sdsp	ra,40(sp)
   19e0c:	f022                	c.sdsp	s0,32(sp)
   19e0e:	ec26                	c.sdsp	s1,24(sp)
   19e10:	e84a                	c.sdsp	s2,16(sp)
   19e12:	842a                	c.mv	s0,a0
   19e14:	892e                	c.mv	s2,a1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   19e16:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   19e1a:	e426                	c.sdsp	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   19e1c:	47bd                	c.li	a5,15
   19e1e:	0297e663          	bltu	a5,s1,19e4a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x42>
      { return _M_dataplus._M_p; }
   19e22:	6108                	c.ld	a0,0(a0)
	if (__n == 1)
   19e24:	4785                	c.li	a5,1
   19e26:	02f49e63          	bne	s1,a5,19e62 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x5a>
	__c1 = __c2;
   19e2a:	0005c783          	lbu	a5,0(a1)
   19e2e:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   19e32:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   19e34:	e418                	c.sd	a4,8(s0)
   19e36:	601c                	c.ld	a5,0(s0)
   19e38:	97ba                	c.add	a5,a4
   19e3a:	00078023          	sb	zero,0(a5)
      }
   19e3e:	70a2                	c.ldsp	ra,40(sp)
   19e40:	7402                	c.ldsp	s0,32(sp)
   19e42:	64e2                	c.ldsp	s1,24(sp)
   19e44:	6942                	c.ldsp	s2,16(sp)
   19e46:	6145                	c.addi16sp	sp,48
   19e48:	8082                	c.jr	ra
	    _M_data(_M_create(__dnew, size_type(0)));
   19e4a:	4601                	c.li	a2,0
   19e4c:	002c                	c.addi4spn	a1,sp,8
   19e4e:	863fc0ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   19e52:	e008                	c.sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   19e54:	67a2                	c.ldsp	a5,8(sp)
   19e56:	e81c                	c.sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   19e58:	8626                	c.mv	a2,s1
   19e5a:	85ca                	c.mv	a1,s2
   19e5c:	ef4fc0ef          	jal	ra,16550 <memcpy@plt>
   19e60:	bfc9                	c.j	19e32 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x2a>
	if (__n == 0)
   19e62:	d8e1                	c.beqz	s1,19e32 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x2a>
   19e64:	bfd5                	c.j	19e58 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x50>

0000000000019e66 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)>:
#define _ELFPP_TO_HEX_HH_

#include <string>
#include <type_traits>

template <typename T> std::string to_hex(T v) {
   19e66:	7139                	c.addi16sp	sp,-64
   19e68:	fc06                	c.sdsp	ra,56(sp)
   19e6a:	f822                	c.sdsp	s0,48(sp)
   19e6c:	f426                	c.sdsp	s1,40(sp)
   19e6e:	84aa                	c.mv	s1,a0
  static_assert(std::is_integral<T>::value,
                "to_hex applied to non-integral type");
  if (v == 0)
   19e70:	c989                	c.beqz	a1,19e82 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x1c>
    return std::string("0");
  char buf[sizeof(T) * 2 + 1];
  char *pos = &buf[sizeof(buf) - 1];
  *pos-- = '\0';
   19e72:	00010c23          	sb	zero,24(sp)
   19e76:	01710413          	addi	s0,sp,23
  while (v && pos >= buf) {
    int digit = v & 0xf;
    if (digit < 10)
   19e7a:	46a5                	c.li	a3,9
  while (v && pos >= buf) {
   19e7c:	00710613          	addi	a2,sp,7
   19e80:	a825                	c.j	19eb8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   19e82:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   19e86:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   19e88:	4681                	c.li	a3,0
   19e8a:	00015617          	auipc	a2,0x15
   19e8e:	33f60613          	addi	a2,a2,831 # 2f1c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   19e92:	00015597          	auipc	a1,0x15
   19e96:	33658593          	addi	a1,a1,822 # 2f1c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   19e9a:	0001f317          	auipc	t1,0x1f
   19e9e:	46633303          	ld	t1,1126(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   19ea2:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   19ea4:	a099                	c.j	19eea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
   19ea6:	00e40023          	sb	a4,0(s0)
      *pos = '0' + digit;
    else
      *pos = 'a' + (digit - 10);
    pos--;
   19eaa:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   19eae:	8191                	c.srli	a1,0x4
  while (v && pos >= buf) {
   19eb0:	cd89                	c.beqz	a1,19eca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x64>
   19eb2:	00c78c63          	beq	a5,a2,19eca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x64>
    pos--;
   19eb6:	843e                	c.mv	s0,a5
    int digit = v & 0xf;
   19eb8:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   19ebc:	05778713          	addi	a4,a5,87
    if (digit < 10)
   19ec0:	fef6c3e3          	blt	a3,a5,19ea6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x40>
      *pos = '0' + digit;
   19ec4:	03078713          	addi	a4,a5,48
   19ec8:	bff9                	c.j	19ea6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x40>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   19eca:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   19ece:	e09c                	c.sd	a5,0(s1)
	return __builtin_strlen(__s);
   19ed0:	8522                	c.mv	a0,s0
   19ed2:	ceefc0ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   19ed6:	4681                	c.li	a3,0
   19ed8:	00a40633          	add	a2,s0,a0
   19edc:	85a2                	c.mv	a1,s0
   19ede:	8526                	c.mv	a0,s1
   19ee0:	0001f317          	auipc	t1,0x1f
   19ee4:	42033303          	ld	t1,1056(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   19ee8:	9302                	c.jalr	t1
  }
  return std::string(pos + 1);
}
   19eea:	8526                	c.mv	a0,s1
   19eec:	70e2                	c.ldsp	ra,56(sp)
   19eee:	7442                	c.ldsp	s0,48(sp)
   19ef0:	74a2                	c.ldsp	s1,40(sp)
   19ef2:	6121                	c.addi16sp	sp,64
   19ef4:	8082                	c.jr	ra

0000000000019ef6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   19ef6:	1101                	c.addi	sp,-32
   19ef8:	ec06                	c.sdsp	ra,24(sp)
   19efa:	e822                	c.sdsp	s0,16(sp)
   19efc:	e426                	c.sdsp	s1,8(sp)
   19efe:	e04a                	c.sdsp	s2,0(sp)
   19f00:	892a                	c.mv	s2,a0
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19f02:	6900                	c.ld	s0,16(a0)
   19f04:	e41d                	c.bnez	s0,19f32 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x3c>
      __builtin_memset(_M_buckets, 0,
   19f06:	00893603          	ld	a2,8(s2)
   19f0a:	060e                	c.slli	a2,0x3
   19f0c:	4581                	c.li	a1,0
   19f0e:	00093503          	ld	a0,0(s2)
   19f12:	e6efc0ef          	jal	ra,16580 <memset@plt>
      _M_element_count = 0;
   19f16:	00093c23          	sd	zero,24(s2)
      _M_before_begin._M_nxt = nullptr;
   19f1a:	00093823          	sd	zero,16(s2)
    }
   19f1e:	60e2                	c.ldsp	ra,24(sp)
   19f20:	6442                	c.ldsp	s0,16(sp)
   19f22:	64a2                	c.ldsp	s1,8(sp)
   19f24:	6902                	c.ldsp	s2,0(sp)
   19f26:	6105                	c.addi16sp	sp,32
   19f28:	8082                	c.jr	ra
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19f2a:	8526                	c.mv	a0,s1
   19f2c:	d84fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19f30:	d879                	c.beqz	s0,19f06 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x10>
      _M_next() const noexcept
   19f32:	84a2                	c.mv	s1,s0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   19f34:	6000                	c.ld	s0,0(s0)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19f36:	7088                	c.ld	a0,32(s1)
	if (__p)
   19f38:	d96d                	c.beqz	a0,19f2a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x34>
   19f3a:	d76fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   19f3e:	b7f5                	c.j	19f2a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x34>

0000000000019f40 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   19f40:	7179                	c.addi16sp	sp,-48
   19f42:	f406                	c.sdsp	ra,40(sp)
   19f44:	f022                	c.sdsp	s0,32(sp)
   19f46:	ec26                	c.sdsp	s1,24(sp)
   19f48:	e84a                	c.sdsp	s2,16(sp)
   19f4a:	e44e                	c.sdsp	s3,8(sp)
   19f4c:	842a                	c.mv	s0,a0
   19f4e:	03850993          	addi	s3,a0,56
      clear();
   19f52:	19050513          	addi	a0,a0,400
   19f56:	0001f317          	auipc	t1,0x1f
   19f5a:	37a33303          	ld	t1,890(t1) # 392d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x1f3da>
   19f5e:	9302                	c.jalr	t1
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   19f60:	19043503          	ld	a0,400(s0)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   19f64:	1c040793          	addi	a5,s0,448
	if (_M_uses_single_bucket(__bkts))
   19f68:	00f50463          	beq	a0,a5,19f70 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   19f6c:	d44fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19f70:	17843483          	ld	s1,376(s0)
   19f74:	18043903          	ld	s2,384(s0)
   19f78:	0b249c63          	bne	s1,s2,1a030 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf0>
	_M_deallocate(_M_impl._M_start,
   19f7c:	17843503          	ld	a0,376(s0)
	if (__p)
   19f80:	c119                	c.beqz	a0,19f86 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x46>
   19f82:	d2efc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19f86:	16843483          	ld	s1,360(s0)
   19f8a:	cc99                	c.beqz	s1,19fa8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
    if (__is_single_threaded())
   19f8c:	0001f797          	auipc	a5,0x1f
   19f90:	4ec7b783          	ld	a5,1260(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19f94:	0007c783          	lbu	a5,0(a5)
   19f98:	c3cd                	c.beqz	a5,1a03a <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xfa>
    _Atomic_word __result = *__mem;
   19f9a:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19f9c:	fff5079b          	addiw	a5,a0,-1
   19fa0:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19fa2:	4785                	c.li	a5,1
   19fa4:	0af50163          	beq	a0,a5,1a046 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x106>
class die {
   19fa8:	11040693          	addi	a3,s0,272
    for (T *p = base; p < end; ++p)
   19fac:	14043503          	ld	a0,320(s0)
   19fb0:	14843783          	ld	a5,328(s0)
   19fb4:	00f57863          	bgeu	a0,a5,19fc4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
   19fb8:	87aa                	c.mv	a5,a0
   19fba:	07a1                	c.addi	a5,8
   19fbc:	14843703          	ld	a4,328(s0)
   19fc0:	fee7ede3          	bltu	a5,a4,19fba <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7a>
    end = base;
   19fc4:	14a43423          	sd	a0,328(s0)
    if ((char *)base != buf)
   19fc8:	00a68563          	beq	a3,a0,19fd2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
      delete[] (char *)base;
   19fcc:	c119                	c.beqz	a0,19fd2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
   19fce:	d92fc0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   19fd2:	0a040693          	addi	a3,s0,160
    for (T *p = base; p < end; ++p)
   19fd6:	6868                	c.ld	a0,208(s0)
   19fd8:	6c7c                	c.ld	a5,216(s0)
   19fda:	00f57763          	bgeu	a0,a5,19fe8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa8>
   19fde:	87aa                	c.mv	a5,a0
   19fe0:	07a1                	c.addi	a5,8
   19fe2:	6c78                	c.ld	a4,216(s0)
   19fe4:	fee7eee3          	bltu	a5,a4,19fe0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
    end = base;
   19fe8:	ec68                	c.sd	a0,216(s0)
    if ((char *)base != buf)
   19fea:	00a68563          	beq	a3,a0,19ff4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      delete[] (char *)base;
   19fee:	c119                	c.beqz	a0,19ff4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   19ff0:	d70fc0ef          	jal	ra,16560 <operator delete[](void*)@plt>
	if (_M_pi != nullptr)
   19ff4:	6c20                	c.ld	s0,88(s0)
   19ff6:	cc19                	c.beqz	s0,1a014 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
    if (__is_single_threaded())
   19ff8:	0001f797          	auipc	a5,0x1f
   19ffc:	4807b783          	ld	a5,1152(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a000:	0007c783          	lbu	a5,0(a5)
   1a004:	c3c1                	c.beqz	a5,1a084 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   1a006:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1a008:	fff5079b          	addiw	a5,a0,-1
   1a00c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a00e:	4785                	c.li	a5,1
   1a010:	08f50063          	beq	a0,a5,1a090 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x150>
struct unit::impl {
   1a014:	854e                	c.mv	a0,s3
   1a016:	f57fc0ef          	jal	ra,16f6c <dwarf::dwarf::~dwarf()>
      }
   1a01a:	70a2                	c.ldsp	ra,40(sp)
   1a01c:	7402                	c.ldsp	s0,32(sp)
   1a01e:	64e2                	c.ldsp	s1,24(sp)
   1a020:	6942                	c.ldsp	s2,16(sp)
   1a022:	69a2                	c.ldsp	s3,8(sp)
   1a024:	6145                	c.addi16sp	sp,48
   1a026:	8082                	c.jr	ra
   1a028:	02848493          	addi	s1,s1,40
   1a02c:	f49908e3          	beq	s2,s1,19f7c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a030:	6888                	c.ld	a0,16(s1)
	if (__p)
   1a032:	d97d                	c.beqz	a0,1a028 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe8>
   1a034:	c7cfc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1a038:	bfc5                	c.j	1a028 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe8>
      return __exchange_and_add(__mem, __val);
   1a03a:	55fd                	c.li	a1,-1
   1a03c:	03048513          	addi	a0,s1,48
   1a040:	af0fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a044:	bfb9                	c.j	19fa2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x62>
	_M_dispose();
   1a046:	609c                	c.ld	a5,0(s1)
   1a048:	6b9c                	c.ld	a5,16(a5)
   1a04a:	8526                	c.mv	a0,s1
   1a04c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a04e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a052:	0001f797          	auipc	a5,0x1f
   1a056:	4267b783          	ld	a5,1062(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a05a:	0007c783          	lbu	a5,0(a5)
   1a05e:	cf89                	c.beqz	a5,1a078 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x138>
    _Atomic_word __result = *__mem;
   1a060:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1a062:	fff5079b          	addiw	a5,a0,-1
   1a066:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a068:	4785                	c.li	a5,1
   1a06a:	f2f51fe3          	bne	a0,a5,19fa8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
	    _M_destroy();
   1a06e:	609c                	c.ld	a5,0(s1)
   1a070:	6f9c                	c.ld	a5,24(a5)
   1a072:	8526                	c.mv	a0,s1
   1a074:	9782                	c.jalr	a5
   1a076:	bf0d                	c.j	19fa8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
      return __exchange_and_add(__mem, __val);
   1a078:	55fd                	c.li	a1,-1
   1a07a:	03448513          	addi	a0,s1,52
   1a07e:	ab2fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a082:	b7dd                	c.j	1a068 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x128>
   1a084:	55fd                	c.li	a1,-1
   1a086:	03040513          	addi	a0,s0,48
   1a08a:	aa6fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a08e:	b741                	c.j	1a00e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xce>
	_M_dispose();
   1a090:	601c                	c.ld	a5,0(s0)
   1a092:	6b9c                	c.ld	a5,16(a5)
   1a094:	8522                	c.mv	a0,s0
   1a096:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a098:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a09c:	0001f797          	auipc	a5,0x1f
   1a0a0:	3dc7b783          	ld	a5,988(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a0a4:	0007c783          	lbu	a5,0(a5)
   1a0a8:	cf89                	c.beqz	a5,1a0c2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x182>
    _Atomic_word __result = *__mem;
   1a0aa:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1a0ac:	fff5079b          	addiw	a5,a0,-1
   1a0b0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a0b2:	4785                	c.li	a5,1
   1a0b4:	f6f510e3          	bne	a0,a5,1a014 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
	    _M_destroy();
   1a0b8:	601c                	c.ld	a5,0(s0)
   1a0ba:	6f9c                	c.ld	a5,24(a5)
   1a0bc:	8522                	c.mv	a0,s0
   1a0be:	9782                	c.jalr	a5
   1a0c0:	bf91                	c.j	1a014 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
      return __exchange_and_add(__mem, __val);
   1a0c2:	55fd                	c.li	a1,-1
   1a0c4:	03440513          	addi	a0,s0,52
   1a0c8:	a68fc0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a0cc:	b7dd                	c.j	1a0b2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x172>

000000000001a0ce <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1a0ce:	14058863          	beq	a1,zero,1a21e <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x150>
    vector<_Tp, _Alloc>::
   1a0d2:	7139                	c.addi16sp	sp,-64
   1a0d4:	fc06                	c.sdsp	ra,56(sp)
   1a0d6:	f822                	c.sdsp	s0,48(sp)
   1a0d8:	f426                	c.sdsp	s1,40(sp)
   1a0da:	f04a                	c.sdsp	s2,32(sp)
   1a0dc:	ec4e                	c.sdsp	s3,24(sp)
   1a0de:	e852                	c.sdsp	s4,16(sp)
   1a0e0:	e456                	c.sdsp	s5,8(sp)
   1a0e2:	892a                	c.mv	s2,a0
   1a0e4:	84ae                	c.mv	s1,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a0e6:	6514                	c.ld	a3,8(a0)
   1a0e8:	611c                	c.ld	a5,0(a0)
   1a0ea:	40f68433          	sub	s0,a3,a5
   1a0ee:	40345993          	srai	s3,s0,0x3
   1a0f2:	00013617          	auipc	a2,0x13
   1a0f6:	49e63603          	ld	a2,1182(a2) # 2d590 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1a0fa:	02c989b3          	mul	s3,s3,a2
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
   1a0fe:	00013797          	auipc	a5,0x13
   1a102:	48a7b783          	ld	a5,1162(a5) # 2d588 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1a106:	41378733          	sub	a4,a5,s3
					 - this->_M_impl._M_finish);
   1a10a:	691c                	c.ld	a5,16(a0)
   1a10c:	8f95                	c.sub	a5,a3
   1a10e:	878d                	c.srai	a5,0x3
   1a110:	02c787b3          	mul	a5,a5,a2
	    __builtin_unreachable();

	  if (__navail >= __n)
   1a114:	04b7e063          	bltu	a5,a1,1a154 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x86>
   1a118:	872e                	c.mv	a4,a1
      template<typename _ForwardIterator, typename _Size>
	_GLIBCXX20_CONSTEXPR
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
   1a11a:	87b6                	c.mv	a5,a3
  abbrev_entry() : code(0) {}
   1a11c:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1a120:	0007b823          	sd	zero,16(a5)
   1a124:	0007bc23          	sd	zero,24(a5)
   1a128:	0207b023          	sd	zero,32(a5)
	  __try
	    {
	      for (; __n > 0; --__n, (void) ++__cur)
   1a12c:	177d                	c.addi	a4,-1
   1a12e:	02878793          	addi	a5,a5,40
   1a132:	f76d                	c.bnez	a4,1a11c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x4e>
   1a134:	00249793          	slli	a5,s1,0x2
   1a138:	97a6                	c.add	a5,s1
   1a13a:	078e                	c.slli	a5,0x3
   1a13c:	96be                	c.add	a3,a5
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   1a13e:	00d93423          	sd	a3,8(s2)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   1a142:	70e2                	c.ldsp	ra,56(sp)
   1a144:	7442                	c.ldsp	s0,48(sp)
   1a146:	74a2                	c.ldsp	s1,40(sp)
   1a148:	7902                	c.ldsp	s2,32(sp)
   1a14a:	69e2                	c.ldsp	s3,24(sp)
   1a14c:	6a42                	c.ldsp	s4,16(sp)
   1a14e:	6aa2                	c.ldsp	s5,8(sp)
   1a150:	6121                	c.addi16sp	sp,64
   1a152:	8082                	c.jr	ra
	if (max_size() - size() < __n)
   1a154:	02b76463          	bltu	a4,a1,1a17c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xae>
	const size_type __len = size() + (std::max)(size(), __n);
   1a158:	87ae                	c.mv	a5,a1
   1a15a:	0135f363          	bgeu	a1,s3,1a160 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x92>
   1a15e:	87ce                	c.mv	a5,s3
   1a160:	97ce                	c.add	a5,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a162:	0337e363          	bltu	a5,s3,1a188 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xba>
   1a166:	8abe                	c.mv	s5,a5
   1a168:	00013717          	auipc	a4,0x13
   1a16c:	42073703          	ld	a4,1056(a4) # 2d588 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1a170:	00f77363          	bgeu	a4,a5,1a176 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xa8>
   1a174:	8aba                	c.mv	s5,a4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a176:	4a01                	c.li	s4,0
   1a178:	c39d                	c.beqz	a5,1a19e <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd0>
   1a17a:	a819                	c.j	1a190 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xc2>
	  __throw_length_error(__N(__s));
   1a17c:	00013517          	auipc	a0,0x13
   1a180:	10450513          	addi	a0,a0,260 # 2d280 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   1a184:	a5cfc0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a188:	00013a97          	auipc	s5,0x13
   1a18c:	400aba83          	ld	s5,1024(s5) # 2d588 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a190:	002a9513          	slli	a0,s5,0x2
   1a194:	9556                	c.add	a0,s5
   1a196:	050e                	c.slli	a0,0x3
   1a198:	b28fc0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1a19c:	8a2a                	c.mv	s4,a0
		      std::__uninitialized_default_n_a(__new_start + __size,
   1a19e:	008a07b3          	add	a5,s4,s0
   1a1a2:	8726                	c.mv	a4,s1
   1a1a4:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1a1a8:	0007b823          	sd	zero,16(a5)
   1a1ac:	0007bc23          	sd	zero,24(a5)
   1a1b0:	0207b023          	sd	zero,32(a5)
   1a1b4:	177d                	c.addi	a4,-1
   1a1b6:	02878793          	addi	a5,a5,40
   1a1ba:	f76d                	c.bnez	a4,1a1a4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd6>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a1bc:	00093503          	ld	a0,0(s2)
   1a1c0:	00893603          	ld	a2,8(s2)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   1a1c4:	02c50863          	beq	a0,a2,1a1f4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x126>
   1a1c8:	87aa                	c.mv	a5,a0
      _ForwardIterator __cur = __result;
   1a1ca:	8752                	c.mv	a4,s4
struct abbrev_entry {
   1a1cc:	6394                	c.ld	a3,0(a5)
   1a1ce:	e314                	c.sd	a3,0(a4)
   1a1d0:	4794                	c.lw	a3,8(a5)
   1a1d2:	c714                	c.sw	a3,8(a4)
   1a1d4:	00c7c683          	lbu	a3,12(a5)
   1a1d8:	00d70623          	sb	a3,12(a4)
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   1a1dc:	6b94                	c.ld	a3,16(a5)
   1a1de:	eb14                	c.sd	a3,16(a4)
   1a1e0:	6f94                	c.ld	a3,24(a5)
   1a1e2:	ef14                	c.sd	a3,24(a4)
	  _M_end_of_storage(__x._M_end_of_storage)
   1a1e4:	7394                	c.ld	a3,32(a5)
   1a1e6:	f314                	c.sd	a3,32(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1a1e8:	02878793          	addi	a5,a5,40
   1a1ec:	02870713          	addi	a4,a4,40
   1a1f0:	fcf61ee3          	bne	a2,a5,1a1cc <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xfe>
	if (__p)
   1a1f4:	c119                	c.beqz	a0,1a1fa <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x12c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a1f6:	abafc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   1a1fa:	01493023          	sd	s4,0(s2)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1a1fe:	94ce                	c.add	s1,s3
   1a200:	00249793          	slli	a5,s1,0x2
   1a204:	97a6                	c.add	a5,s1
   1a206:	078e                	c.slli	a5,0x3
   1a208:	97d2                	c.add	a5,s4
   1a20a:	00f93423          	sd	a5,8(s2)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1a20e:	002a9793          	slli	a5,s5,0x2
   1a212:	97d6                	c.add	a5,s5
   1a214:	078e                	c.slli	a5,0x3
   1a216:	9a3e                	c.add	s4,a5
   1a218:	01493823          	sd	s4,16(s2)
    }
   1a21c:	b71d                	c.j	1a142 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x74>
   1a21e:	8082                	c.jr	ra

000000000001a220 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1a220:	1141                	c.addi	sp,-16
   1a222:	e406                	c.sdsp	ra,8(sp)
   1a224:	e022                	c.sdsp	s0,0(sp)
   1a226:	6500                	c.ld	s0,8(a0)
   1a228:	cc11                	c.beqz	s0,1a244 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()+0x24>
class type_unit : public unit {
   1a22a:	0001f797          	auipc	a5,0x1f
   1a22e:	1267b783          	ld	a5,294(a5) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1a232:	07c1                	c.addi	a5,16
   1a234:	e81c                	c.sd	a5,16(s0)
   1a236:	01040513          	addi	a0,s0,16
   1a23a:	dfdfc0ef          	jal	ra,17036 <dwarf::unit::~unit()>
   1a23e:	8522                	c.mv	a0,s0
   1a240:	a70fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1a244:	60a2                	c.ldsp	ra,8(sp)
   1a246:	6402                	c.ldsp	s0,0(sp)
   1a248:	0141                	c.addi	sp,16
   1a24a:	8082                	c.jr	ra

000000000001a24c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a24c:	86aa                	c.mv	a3,a0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1a24e:	611c                	c.ld	a5,0(a0)
   1a250:	00359713          	slli	a4,a1,0x3
   1a254:	97ba                	c.add	a5,a4
   1a256:	6388                	c.ld	a0,0(a5)
      if (!__prev_p)
   1a258:	c50d                	c.beqz	a0,1a282 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1a25a:	611c                	c.ld	a5,0(a0)
   1a25c:	6210                	c.ld	a2,0(a2)
   1a25e:	a011                	c.j	1a262 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x16>
	   __p = __p->_M_next())
   1a260:	87ba                	c.mv	a5,a4
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1a262:	6798                	c.ld	a4,8(a5)
   1a264:	00c70f63          	beq	a4,a2,1a282 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a268:	6398                	c.ld	a4,0(a5)
   1a26a:	cb19                	c.beqz	a4,1a280 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x34>
	  __prev_p = __p;
   1a26c:	853e                	c.mv	a0,a5
    { return __num % __den; }
   1a26e:	671c                	c.ld	a5,8(a4)
   1a270:	0086b803          	ld	a6,8(a3)
   1a274:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a278:	fef584e3          	beq	a1,a5,1a260 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x14>
      return nullptr;
   1a27c:	4501                	c.li	a0,0
   1a27e:	8082                	c.jr	ra
   1a280:	853a                	c.mv	a0,a4
    }
   1a282:	8082                	c.jr	ra

000000000001a284 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a284:	7179                	c.addi16sp	sp,-48
   1a286:	f406                	c.sdsp	ra,40(sp)
   1a288:	f022                	c.sdsp	s0,32(sp)
   1a28a:	ec26                	c.sdsp	s1,24(sp)
   1a28c:	84ae                	c.mv	s1,a1
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1a28e:	6900                	c.ld	s0,16(a0)
      while (__x != 0)
   1a290:	c409                	c.beqz	s0,1a29a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x16>
      { return __x < __y; }
   1a292:	4194                	c.lw	a3,0(a1)
      { return static_cast<_Link_type>(__x->_M_right); }
   1a294:	4801                	c.li	a6,0
   1a296:	4605                	c.li	a2,1
   1a298:	a005                	c.j	1a2b8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x34>
      { return &this->_M_impl._M_header; }
   1a29a:	00850413          	addi	s0,a0,8
	  if (__j == begin())
   1a29e:	6d1c                	c.ld	a5,24(a0)
   1a2a0:	02878f63          	beq	a5,s0,1a2de <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x5a>
	_M_node = _Rb_tree_decrement(_M_node);
   1a2a4:	8522                	c.mv	a0,s0
   1a2a6:	a2afc0ef          	jal	ra,164d0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	return *this;
   1a2aa:	85a2                	c.mv	a1,s0
	_M_node = _Rb_tree_decrement(_M_node);
   1a2ac:	842a                	c.mv	s0,a0
	return *this;
   1a2ae:	a829                	c.j	1a2c8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x44>
      { return static_cast<_Link_type>(__x->_M_right); }
   1a2b0:	6c1c                	c.ld	a5,24(s0)
   1a2b2:	8742                	c.mv	a4,a6
      while (__x != 0)
   1a2b4:	cb81                	c.beqz	a5,1a2c4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x40>
   1a2b6:	843e                	c.mv	s0,a5
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1a2b8:	501c                	c.lw	a5,32(s0)
   1a2ba:	fef6dbe3          	bge	a3,a5,1a2b0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x2c>
      { return static_cast<_Link_type>(__x->_M_left); }
   1a2be:	681c                	c.ld	a5,16(s0)
   1a2c0:	8732                	c.mv	a4,a2
   1a2c2:	bfcd                	c.j	1a2b4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x30>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a2c4:	85a2                	c.mv	a1,s0
      if (__comp)
   1a2c6:	ff61                	c.bnez	a4,1a29e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x1a>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1a2c8:	5018                	c.lw	a4,32(s0)
   1a2ca:	409c                	c.lw	a5,0(s1)
   1a2cc:	00f74c63          	blt	a4,a5,1a2e4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x60>
   1a2d0:	4581                	c.li	a1,0
    }
   1a2d2:	8522                	c.mv	a0,s0
   1a2d4:	70a2                	c.ldsp	ra,40(sp)
   1a2d6:	7402                	c.ldsp	s0,32(sp)
   1a2d8:	64e2                	c.ldsp	s1,24(sp)
   1a2da:	6145                	c.addi16sp	sp,48
   1a2dc:	8082                	c.jr	ra
   1a2de:	85a2                	c.mv	a1,s0
   1a2e0:	4401                	c.li	s0,0
   1a2e2:	bfc5                	c.j	1a2d2 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4e>
   1a2e4:	4401                	c.li	s0,0
   1a2e6:	b7f5                	c.j	1a2d2 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4e>

000000000001a2e8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a2e8:	7139                	c.addi16sp	sp,-64
   1a2ea:	fc06                	c.sdsp	ra,56(sp)
   1a2ec:	f822                	c.sdsp	s0,48(sp)
   1a2ee:	f426                	c.sdsp	s1,40(sp)
   1a2f0:	f04a                	c.sdsp	s2,32(sp)
   1a2f2:	ec4e                	c.sdsp	s3,24(sp)
   1a2f4:	89aa                	c.mv	s3,a0
   1a2f6:	84b2                	c.mv	s1,a2
      { return &this->_M_impl._M_header; }
   1a2f8:	00850713          	addi	a4,a0,8
      if (__pos._M_node == _M_end())
   1a2fc:	02e58663          	beq	a1,a4,1a328 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x40>
   1a300:	842e                	c.mv	s0,a1
   1a302:	00062903          	lw	s2,0(a2)
   1a306:	5198                	c.lw	a4,32(a1)
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1a308:	06e95c63          	bge	s2,a4,1a380 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x98>
	  if (__pos._M_node == _M_leftmost()) // begin()
   1a30c:	6d18                	c.ld	a4,24(a0)
   1a30e:	04b70963          	beq	a4,a1,1a360 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x78>
	_M_node = _Rb_tree_decrement(_M_node);
   1a312:	852e                	c.mv	a0,a1
   1a314:	9bcfc0ef          	jal	ra,164d0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1a318:	511c                	c.lw	a5,32(a0)
   1a31a:	0527d963          	bge	a5,s2,1a36c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x84>
	      if (_S_right(__before._M_node) == 0)
   1a31e:	6d1c                	c.ld	a5,24(a0)
   1a320:	c3b9                	c.beqz	a5,1a366 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x7e>
		return _Res(__pos._M_node, __pos._M_node);
   1a322:	e022                	c.sdsp	s0,0(sp)
   1a324:	e422                	c.sdsp	s0,8(sp)
   1a326:	a025                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1a328:	751c                	c.ld	a5,40(a0)
   1a32a:	cb89                	c.beqz	a5,1a33c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x54>
   1a32c:	711c                	c.ld	a5,32(a0)
   1a32e:	4214                	c.lw	a3,0(a2)
   1a330:	5398                	c.lw	a4,32(a5)
   1a332:	00d75563          	bge	a4,a3,1a33c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x54>
	    return _Res(0, _M_rightmost());
   1a336:	e002                	c.sdsp	zero,0(sp)
   1a338:	e43e                	c.sdsp	a5,8(sp)
   1a33a:	a811                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1a33c:	85a6                	c.mv	a1,s1
   1a33e:	854e                	c.mv	a0,s3
   1a340:	0001f317          	auipc	t1,0x1f
   1a344:	10833303          	ld	t1,264(t1) # 39448 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f1c4>
   1a348:	9302                	c.jalr	t1
   1a34a:	e02a                	c.sdsp	a0,0(sp)
   1a34c:	e42e                	c.sdsp	a1,8(sp)
    }
   1a34e:	6502                	c.ldsp	a0,0(sp)
   1a350:	65a2                	c.ldsp	a1,8(sp)
   1a352:	70e2                	c.ldsp	ra,56(sp)
   1a354:	7442                	c.ldsp	s0,48(sp)
   1a356:	74a2                	c.ldsp	s1,40(sp)
   1a358:	7902                	c.ldsp	s2,32(sp)
   1a35a:	69e2                	c.ldsp	s3,24(sp)
   1a35c:	6121                	c.addi16sp	sp,64
   1a35e:	8082                	c.jr	ra
	    return _Res(_M_leftmost(), _M_leftmost());
   1a360:	e03a                	c.sdsp	a4,0(sp)
   1a362:	e43a                	c.sdsp	a4,8(sp)
   1a364:	b7ed                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
		return _Res(0, __before._M_node);
   1a366:	e002                	c.sdsp	zero,0(sp)
   1a368:	e42a                	c.sdsp	a0,8(sp)
   1a36a:	b7d5                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1a36c:	85a6                	c.mv	a1,s1
   1a36e:	854e                	c.mv	a0,s3
   1a370:	0001f317          	auipc	t1,0x1f
   1a374:	0d833303          	ld	t1,216(t1) # 39448 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f1c4>
   1a378:	9302                	c.jalr	t1
   1a37a:	e02a                	c.sdsp	a0,0(sp)
   1a37c:	e42e                	c.sdsp	a1,8(sp)
   1a37e:	bfc1                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1a380:	05275063          	bge	a4,s2,1a3c0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xd8>
	  if (__pos._M_node == _M_rightmost())
   1a384:	7118                	c.ld	a4,32(a0)
   1a386:	00b70d63          	beq	a4,a1,1a3a0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xb8>
	_M_node = _Rb_tree_increment(_M_node);
   1a38a:	852e                	c.mv	a0,a1
   1a38c:	8c4fc0ef          	jal	ra,16450 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1a390:	511c                	c.lw	a5,32(a0)
   1a392:	00f95d63          	bge	s2,a5,1a3ac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xc4>
	      if (_S_right(__pos._M_node) == 0)
   1a396:	6c1c                	c.ld	a5,24(s0)
   1a398:	c799                	c.beqz	a5,1a3a6 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xbe>
		return _Res(__after._M_node, __after._M_node);
   1a39a:	e02a                	c.sdsp	a0,0(sp)
   1a39c:	e42a                	c.sdsp	a0,8(sp)
   1a39e:	bf45                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _Res(0, _M_rightmost());
   1a3a0:	e002                	c.sdsp	zero,0(sp)
   1a3a2:	e43a                	c.sdsp	a4,8(sp)
   1a3a4:	b76d                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
		return _Res(0, __pos._M_node);
   1a3a6:	e002                	c.sdsp	zero,0(sp)
   1a3a8:	e422                	c.sdsp	s0,8(sp)
   1a3aa:	b755                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1a3ac:	85a6                	c.mv	a1,s1
   1a3ae:	854e                	c.mv	a0,s3
   1a3b0:	0001f317          	auipc	t1,0x1f
   1a3b4:	09833303          	ld	t1,152(t1) # 39448 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f1c4>
   1a3b8:	9302                	c.jalr	t1
   1a3ba:	e02a                	c.sdsp	a0,0(sp)
   1a3bc:	e42e                	c.sdsp	a1,8(sp)
   1a3be:	bf41                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	return _Res(__pos._M_node, 0);
   1a3c0:	e02e                	c.sdsp	a1,0(sp)
   1a3c2:	e402                	c.sdsp	zero,8(sp)
   1a3c4:	b769                	c.j	1a34e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>

000000000001a3c6 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a3c6:	7139                	c.addi16sp	sp,-64
   1a3c8:	fc06                	c.sdsp	ra,56(sp)
   1a3ca:	f822                	c.sdsp	s0,48(sp)
   1a3cc:	f426                	c.sdsp	s1,40(sp)
   1a3ce:	f04a                	c.sdsp	s2,32(sp)
   1a3d0:	ec4e                	c.sdsp	s3,24(sp)
   1a3d2:	84aa                	c.mv	s1,a0
   1a3d4:	892e                	c.mv	s2,a1
   1a3d6:	89b6                	c.mv	s3,a3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a3d8:	03800513          	addi	a0,zero,56
   1a3dc:	8e4fc0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1a3e0:	842a                	c.mv	s0,a0
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1a3e2:	0009b783          	ld	a5,0(s3)
   1a3e6:	0007a983          	lw	s3,0(a5)
   1a3ea:	03352023          	sw	s3,32(a0)
      : _M_ptr(0), _M_refcount()
   1a3ee:	02053423          	sd	zero,40(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1a3f2:	02053823          	sd	zero,48(a0)
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1a3f6:	02050613          	addi	a2,a0,32
   1a3fa:	85ca                	c.mv	a1,s2
   1a3fc:	8526                	c.mv	a0,s1
   1a3fe:	0001f317          	auipc	t1,0x1f
   1a402:	f6233303          	ld	t1,-158(t1) # 39360 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)@@Base+0x1f078>
   1a406:	9302                	c.jalr	t1
   1a408:	e02a                	c.sdsp	a0,0(sp)
   1a40a:	e42e                	c.sdsp	a1,8(sp)
	if (__res.second)
   1a40c:	cd95                	c.beqz	a1,1a448 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x82>
   1a40e:	872a                	c.mv	a4,a0
			    || _M_impl._M_key_compare(_S_key(__z),
   1a410:	4505                	c.li	a0,1
   1a412:	c31d                	c.beqz	a4,1a438 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x72>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1a414:	00848693          	addi	a3,s1,8
   1a418:	862e                	c.mv	a2,a1
   1a41a:	85a2                	c.mv	a1,s0
   1a41c:	ed5fb0ef          	jal	ra,162f0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
      ++_M_impl._M_node_count;
   1a420:	749c                	c.ld	a5,40(s1)
   1a422:	0785                	c.addi	a5,1
   1a424:	f49c                	c.sd	a5,40(s1)
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a426:	84a2                	c.mv	s1,s0
      }
   1a428:	8526                	c.mv	a0,s1
   1a42a:	70e2                	c.ldsp	ra,56(sp)
   1a42c:	7442                	c.ldsp	s0,48(sp)
   1a42e:	74a2                	c.ldsp	s1,40(sp)
   1a430:	7902                	c.ldsp	s2,32(sp)
   1a432:	69e2                	c.ldsp	s3,24(sp)
   1a434:	6121                	c.addi16sp	sp,64
   1a436:	8082                	c.jr	ra
      { return &this->_M_impl._M_header; }
   1a438:	00848713          	addi	a4,s1,8
      bool __insert_left = (__x != 0 || __p == _M_end()
   1a43c:	fce58ce3          	beq	a1,a4,1a414 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x4e>
			    || _M_impl._M_key_compare(_S_key(__z),
   1a440:	5188                	c.lw	a0,32(a1)
   1a442:	00a9a533          	slt	a0,s3,a0
   1a446:	b7f9                	c.j	1a414 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x4e>
	return iterator(__res.first);
   1a448:	84aa                	c.mv	s1,a0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a44a:	8522                	c.mv	a0,s0
   1a44c:	864fc0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   1a450:	bfe1                	c.j	1a428 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x62>

000000000001a452 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   1a452:	711d                	c.addi16sp	sp,-96
   1a454:	ec86                	c.sdsp	ra,88(sp)
   1a456:	e8a2                	c.sdsp	s0,80(sp)
   1a458:	e4a6                	c.sdsp	s1,72(sp)
   1a45a:	e0ca                	c.sdsp	s2,64(sp)
   1a45c:	fc4e                	c.sdsp	s3,56(sp)
   1a45e:	f852                	c.sdsp	s4,48(sp)
   1a460:	f456                	c.sdsp	s5,40(sp)
   1a462:	f05a                	c.sdsp	s6,32(sp)
   1a464:	ec5e                	c.sdsp	s7,24(sp)
   1a466:	e862                	c.sdsp	s8,16(sp)
   1a468:	e466                	c.sdsp	s9,8(sp)
   1a46a:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a46c:	00853983          	ld	s3,8(a0)
   1a470:	00053a83          	ld	s5,0(a0)
   1a474:	415987b3          	sub	a5,s3,s5
   1a478:	878d                	c.srai	a5,0x3
   1a47a:	00013717          	auipc	a4,0x13
   1a47e:	12673703          	ld	a4,294(a4) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1a482:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1a486:	00013717          	auipc	a4,0x13
   1a48a:	11273703          	ld	a4,274(a4) # 2d598 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1a48e:	02e78a63          	beq	a5,a4,1a4c2 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x70>
   1a492:	8a2a                	c.mv	s4,a0
   1a494:	8432                	c.mv	s0,a2
   1a496:	84b6                	c.mv	s1,a3
   1a498:	892e                	c.mv	s2,a1
      return __a;
   1a49a:	873e                	c.mv	a4,a5
      if (__a < __b)
   1a49c:	03598963          	beq	s3,s5,1a4ce <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   1a4a0:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a4a2:	14f76d63          	bltu	a4,a5,1a5fc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1aa>
   1a4a6:	8bba                	c.mv	s7,a4
   1a4a8:	00013797          	auipc	a5,0x13
   1a4ac:	0f07b783          	ld	a5,240(a5) # 2d598 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1a4b0:	00e7f363          	bgeu	a5,a4,1a4b6 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x64>
   1a4b4:	8bbe                	c.mv	s7,a5
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1a4b6:	41558c33          	sub	s8,a1,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a4ba:	4b01                	c.li	s6,0
   1a4bc:	14070d63          	beq	a4,zero,1a616 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1c4>
   1a4c0:	a2a1                	c.j	1a608 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1b6>
	  __throw_length_error(__N(__s));
   1a4c2:	00013517          	auipc	a0,0x13
   1a4c6:	ea650513          	addi	a0,a0,-346 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1a4ca:	f17fb0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1a4ce:	4705                	c.li	a4,1
   1a4d0:	bfc1                	c.j	1a4a0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x4e>
   1a4d2:	07590063          	beq	s2,s5,1a532 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe0>
   1a4d6:	84d6                	c.mv	s1,s5
      _ForwardIterator __cur = __result;
   1a4d8:	845a                	c.mv	s0,s6
class unit {
   1a4da:	0001fc97          	auipc	s9,0x1f
   1a4de:	0cecbc83          	ld	s9,206(s9) # 395a8 <vtable for dwarf::unit@@Base+0xc3d8>
   1a4e2:	0cc1                	c.addi	s9,16
    return ::__libc_single_threaded;
   1a4e4:	0001fd17          	auipc	s10,0x1f
   1a4e8:	f94d3d03          	ld	s10,-108(s10) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1a4ec:	0001fc17          	auipc	s8,0x1f
   1a4f0:	dc4c3c03          	ld	s8,-572(s8) # 392b0 <vtable for dwarf::compilation_unit@@Base+0xc0c0>
   1a4f4:	0c41                	c.addi	s8,16
   1a4f6:	a005                	c.j	1a516 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xc4>
      __atomic_add(__mem, __val);
   1a4f8:	4585                	c.li	a1,1
   1a4fa:	03050513          	addi	a0,a0,48
   1a4fe:	e03fb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1a502:	01843023          	sd	s8,0(s0)

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   1a506:	609c                	c.ld	a5,0(s1)
   1a508:	639c                	c.ld	a5,0(a5)
   1a50a:	8526                	c.mv	a0,s1
   1a50c:	9782                	c.jalr	a5
      for (; __first != __last; ++__first, (void)++__cur)
   1a50e:	04e1                	c.addi	s1,24
   1a510:	0461                	c.addi	s0,24
   1a512:	02990163          	beq	s2,s1,1a534 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe2>
class unit {
   1a516:	01943023          	sd	s9,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a51a:	649c                	c.ld	a5,8(s1)
   1a51c:	e41c                	c.sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1a51e:	6888                	c.ld	a0,16(s1)
   1a520:	e808                	c.sd	a0,16(s0)
	if (_M_pi != nullptr)
   1a522:	d165                	c.beqz	a0,1a502 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb0>
    if (__is_single_threaded())
   1a524:	000d4703          	lbu	a4,0(s10)
   1a528:	db61                	c.beqz	a4,1a4f8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xa6>
  { *__mem += __val; }
   1a52a:	5918                	c.lw	a4,48(a0)
   1a52c:	2705                	c.addiw	a4,1
   1a52e:	d918                	c.sw	a4,48(a0)
   1a530:	bfc9                	c.j	1a502 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb0>
      _ForwardIterator __cur = __result;
   1a532:	845a                	c.mv	s0,s6
	      ++__new_finish;
   1a534:	0461                	c.addi	s0,24
      for (; __first != __last; ++__first, (void)++__cur)
   1a536:	07390063          	beq	s2,s3,1a596 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
   1a53a:	0001fc17          	auipc	s8,0x1f
   1a53e:	06ec3c03          	ld	s8,110(s8) # 395a8 <vtable for dwarf::unit@@Base+0xc3d8>
   1a542:	0c41                	c.addi	s8,16
    return ::__libc_single_threaded;
   1a544:	0001fc97          	auipc	s9,0x1f
   1a548:	f34cbc83          	ld	s9,-204(s9) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1a54c:	0001f497          	auipc	s1,0x1f
   1a550:	d644b483          	ld	s1,-668(s1) # 392b0 <vtable for dwarf::compilation_unit@@Base+0xc0c0>
   1a554:	04c1                	c.addi	s1,16
   1a556:	a005                	c.j	1a576 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x124>
      __atomic_add(__mem, __val);
   1a558:	4585                	c.li	a1,1
   1a55a:	03050513          	addi	a0,a0,48
   1a55e:	da3fb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1a562:	e004                	c.sd	s1,0(s0)
   1a564:	00093783          	ld	a5,0(s2)
   1a568:	639c                	c.ld	a5,0(a5)
   1a56a:	854a                	c.mv	a0,s2
   1a56c:	9782                	c.jalr	a5
   1a56e:	0961                	c.addi	s2,24
   1a570:	0461                	c.addi	s0,24
   1a572:	03390263          	beq	s2,s3,1a596 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
class unit {
   1a576:	01843023          	sd	s8,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a57a:	00893783          	ld	a5,8(s2)
   1a57e:	e41c                	c.sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1a580:	01093503          	ld	a0,16(s2)
   1a584:	e808                	c.sd	a0,16(s0)
	if (_M_pi != nullptr)
   1a586:	dd71                	c.beqz	a0,1a562 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
    if (__is_single_threaded())
   1a588:	000cc703          	lbu	a4,0(s9)
   1a58c:	d771                	c.beqz	a4,1a558 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x106>
  { *__mem += __val; }
   1a58e:	5918                	c.lw	a4,48(a0)
   1a590:	2705                	c.addiw	a4,1
   1a592:	d918                	c.sw	a4,48(a0)
   1a594:	b7f9                	c.j	1a562 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
	if (__p)
   1a596:	000a8563          	beq	s5,zero,1a5a0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x14e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a59a:	8556                	c.mv	a0,s5
   1a59c:	f15fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1a5a0:	016a3023          	sd	s6,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1a5a4:	008a3423          	sd	s0,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1a5a8:	001b9793          	slli	a5,s7,0x1
   1a5ac:	97de                	c.add	a5,s7
   1a5ae:	078e                	c.slli	a5,0x3
   1a5b0:	97da                	c.add	a5,s6
   1a5b2:	00fa3823          	sd	a5,16(s4)
    }
   1a5b6:	60e6                	c.ldsp	ra,88(sp)
   1a5b8:	6446                	c.ldsp	s0,80(sp)
   1a5ba:	64a6                	c.ldsp	s1,72(sp)
   1a5bc:	6906                	c.ldsp	s2,64(sp)
   1a5be:	79e2                	c.ldsp	s3,56(sp)
   1a5c0:	7a42                	c.ldsp	s4,48(sp)
   1a5c2:	7aa2                	c.ldsp	s5,40(sp)
   1a5c4:	7b02                	c.ldsp	s6,32(sp)
   1a5c6:	6be2                	c.ldsp	s7,24(sp)
   1a5c8:	6c42                	c.ldsp	s8,16(sp)
   1a5ca:	6ca2                	c.ldsp	s9,8(sp)
   1a5cc:	6d02                	c.ldsp	s10,0(sp)
   1a5ce:	6125                	c.addi16sp	sp,96
   1a5d0:	8082                	c.jr	ra
      __catch(...)
   1a5d2:	ddffb0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   1a5d6:	000b1f63          	bne	s6,zero,1a5f4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1a2>
	{ __p->~_Up(); }
   1a5da:	000c3783          	ld	a5,0(s8)
   1a5de:	639c                	c.ld	a5,0(a5)
   1a5e0:	8562                	c.mv	a0,s8
   1a5e2:	9782                	c.jalr	a5
	  __throw_exception_again;
   1a5e4:	fddfb0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   1a5e8:	842a                	c.mv	s0,a0
   1a5ea:	846fc0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1a5ee:	8522                	c.mv	a0,s0
   1a5f0:	8a0fc0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a5f4:	855a                	c.mv	a0,s6
   1a5f6:	ebbfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1a5fa:	b7ed                	c.j	1a5e4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x192>
   1a5fc:	41558c33          	sub	s8,a1,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a600:	00013b97          	auipc	s7,0x13
   1a604:	f98bbb83          	ld	s7,-104(s7) # 2d598 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a608:	001b9513          	slli	a0,s7,0x1
   1a60c:	955e                	c.add	a0,s7
   1a60e:	050e                	c.slli	a0,0x3
   1a610:	eb1fb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1a614:	8b2a                	c.mv	s6,a0
	  _Alloc_traits::construct(this->_M_impl,
   1a616:	9c5a                	c.add	s8,s6
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1a618:	6090                	c.ld	a2,0(s1)
   1a61a:	85a2                	c.mv	a1,s0
   1a61c:	8562                	c.mv	a0,s8
   1a61e:	e1bfc0ef          	jal	ra,17438 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
   1a622:	bd45                	c.j	1a4d2 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x80>

000000000001a624 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a624:	86aa                	c.mv	a3,a0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1a626:	611c                	c.ld	a5,0(a0)
   1a628:	00359713          	slli	a4,a1,0x3
   1a62c:	97ba                	c.add	a5,a4
   1a62e:	6388                	c.ld	a0,0(a5)
      if (!__prev_p)
   1a630:	c50d                	c.beqz	a0,1a65a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1a632:	611c                	c.ld	a5,0(a0)
      { return __x == __y; }
   1a634:	6210                	c.ld	a2,0(a2)
   1a636:	a011                	c.j	1a63a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x16>
	   __p = __p->_M_next())
   1a638:	87ba                	c.mv	a5,a4
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1a63a:	6798                	c.ld	a4,8(a5)
   1a63c:	00c70f63          	beq	a4,a2,1a65a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a640:	6398                	c.ld	a4,0(a5)
   1a642:	cb19                	c.beqz	a4,1a658 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x34>
	  __prev_p = __p;
   1a644:	853e                	c.mv	a0,a5
    { return __num % __den; }
   1a646:	671c                	c.ld	a5,8(a4)
   1a648:	0086b803          	ld	a6,8(a3)
   1a64c:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a650:	fef584e3          	beq	a1,a5,1a638 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x14>
      return nullptr;
   1a654:	4501                	c.li	a0,0
   1a656:	8082                	c.jr	ra
   1a658:	853a                	c.mv	a0,a4
    }
   1a65a:	8082                	c.jr	ra

000000000001a65c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a65c:	7179                	c.addi16sp	sp,-48
   1a65e:	f406                	c.sdsp	ra,40(sp)
   1a660:	f022                	c.sdsp	s0,32(sp)
   1a662:	ec26                	c.sdsp	s1,24(sp)
   1a664:	e84a                	c.sdsp	s2,16(sp)
   1a666:	e44e                	c.sdsp	s3,8(sp)
   1a668:	84aa                	c.mv	s1,a0
   1a66a:	842e                	c.mv	s0,a1
	if (__builtin_expect(__bkt_count == 1, false))
   1a66c:	4785                	c.li	a5,1
   1a66e:	02f58863          	beq	a1,a5,1a69e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x42>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1a672:	57fd                	c.li	a5,-1
   1a674:	8391                	c.srli	a5,0x4
   1a676:	02b7e963          	bltu	a5,a1,1a6a8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x4c>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a67a:	00359993          	slli	s3,a1,0x3
   1a67e:	854e                	c.mv	a0,s3
   1a680:	e41fb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1a684:	892a                	c.mv	s2,a0
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1a686:	864e                	c.mv	a2,s3
   1a688:	4581                	c.li	a1,0
   1a68a:	ef7fb0ef          	jal	ra,16580 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a68e:	6890                	c.ld	a2,16(s1)
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
   1a690:	0004b823          	sd	zero,16(s1)
      std::size_t __bbegin_bkt = 0;
      while (__p)
   1a694:	c235                	c.beqz	a2,1a6f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      std::size_t __bbegin_bkt = 0;
   1a696:	4581                	c.li	a1,0
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
   1a698:	01048893          	addi	a7,s1,16
   1a69c:	a025                	c.j	1a6c4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	    _M_single_bucket = nullptr;
   1a69e:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1a6a2:	03050913          	addi	s2,a0,48
   1a6a6:	b7e5                	c.j	1a68e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x32>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1a6a8:	57fd                	c.li	a5,-1
   1a6aa:	838d                	c.srli	a5,0x3
   1a6ac:	00b7f463          	bgeu	a5,a1,1a6b4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x58>
	      std::__throw_bad_array_new_length();
   1a6b0:	de1fb0ef          	jal	ra,16490 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1a6b4:	cddfb0ef          	jal	ra,16390 <std::__throw_bad_alloc()@plt>
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1a6b8:	00083683          	ld	a3,0(a6)
   1a6bc:	e314                	c.sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1a6be:	639c                	c.ld	a5,0(a5)
   1a6c0:	e398                	c.sd	a4,0(a5)
      while (__p)
   1a6c2:	ca1d                	c.beqz	a2,1a6f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      _M_next() const noexcept
   1a6c4:	8732                	c.mv	a4,a2
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1a6c6:	6210                	c.ld	a2,0(a2)
    { return __num % __den; }
   1a6c8:	6714                	c.ld	a3,8(a4)
   1a6ca:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1a6ce:	00369793          	slli	a5,a3,0x3
   1a6d2:	97ca                	c.add	a5,s2
   1a6d4:	0007b803          	ld	a6,0(a5)
   1a6d8:	fe0810e3          	bne	a6,zero,1a6b8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x5c>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1a6dc:	6888                	c.ld	a0,16(s1)
   1a6de:	e308                	c.sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1a6e0:	e898                	c.sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1a6e2:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1a6e6:	631c                	c.ld	a5,0(a4)
   1a6e8:	c791                	c.beqz	a5,1a6f4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
		__new_buckets[__bbegin_bkt] = __p;
   1a6ea:	058e                	c.slli	a1,0x3
   1a6ec:	95ca                	c.add	a1,s2
   1a6ee:	e198                	c.sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1a6f0:	85b6                	c.mv	a1,a3
   1a6f2:	bfc1                	c.j	1a6c2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
   1a6f4:	85b6                	c.mv	a1,a3
   1a6f6:	b7f1                	c.j	1a6c2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1a6f8:	6088                	c.ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1a6fa:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1a6fe:	00f50463          	beq	a0,a5,1a706 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a702:	daffb0ef          	jal	ra,164b0 <operator delete(void*)@plt>

	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
   1a706:	e480                	c.sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1a708:	0124b023          	sd	s2,0(s1)
    }
   1a70c:	70a2                	c.ldsp	ra,40(sp)
   1a70e:	7402                	c.ldsp	s0,32(sp)
   1a710:	64e2                	c.ldsp	s1,24(sp)
   1a712:	6942                	c.ldsp	s2,16(sp)
   1a714:	69a2                	c.ldsp	s3,8(sp)
   1a716:	6145                	c.addi16sp	sp,48
   1a718:	8082                	c.jr	ra

000000000001a71a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a71a:	7139                	c.addi16sp	sp,-64
   1a71c:	fc06                	c.sdsp	ra,56(sp)
   1a71e:	f822                	c.sdsp	s0,48(sp)
   1a720:	f426                	c.sdsp	s1,40(sp)
   1a722:	f04a                	c.sdsp	s2,32(sp)
   1a724:	ec4e                	c.sdsp	s3,24(sp)
   1a726:	e852                	c.sdsp	s4,16(sp)
   1a728:	842a                	c.mv	s0,a0
   1a72a:	84ae                	c.mv	s1,a1
   1a72c:	89b2                	c.mv	s3,a2
   1a72e:	8936                	c.mv	s2,a3
    { return _M_next_resize; }
   1a730:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1a734:	86ba                	c.mv	a3,a4
   1a736:	6d10                	c.ld	a2,24(a0)
   1a738:	650c                	c.ld	a1,8(a0)
   1a73a:	02050513          	addi	a0,a0,32
   1a73e:	e33fb0ef          	jal	ra,16570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1a742:	e02a                	c.sdsp	a0,0(sp)
   1a744:	e42e                	c.sdsp	a1,8(sp)
      if (__do_rehash.first)
   1a746:	0ff57513          	andi	a0,a0,255
   1a74a:	e91d                	c.bnez	a0,1a780 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x66>
      if (_M_buckets[__bkt])
   1a74c:	00349593          	slli	a1,s1,0x3
   1a750:	601c                	c.ld	a5,0(s0)
   1a752:	97ae                	c.add	a5,a1
   1a754:	639c                	c.ld	a5,0(a5)
   1a756:	cfa9                	c.beqz	a5,1a7b0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x96>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1a758:	639c                	c.ld	a5,0(a5)
   1a75a:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1a75e:	601c                	c.ld	a5,0(s0)
   1a760:	97ae                	c.add	a5,a1
   1a762:	639c                	c.ld	a5,0(a5)
   1a764:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1a768:	6c1c                	c.ld	a5,24(s0)
   1a76a:	0785                	c.addi	a5,1
   1a76c:	ec1c                	c.sd	a5,24(s0)
    }
   1a76e:	854a                	c.mv	a0,s2
   1a770:	70e2                	c.ldsp	ra,56(sp)
   1a772:	7442                	c.ldsp	s0,48(sp)
   1a774:	74a2                	c.ldsp	s1,40(sp)
   1a776:	7902                	c.ldsp	s2,32(sp)
   1a778:	69e2                	c.ldsp	s3,24(sp)
   1a77a:	6a42                	c.ldsp	s4,16(sp)
   1a77c:	6121                	c.addi16sp	sp,64
   1a77e:	8082                	c.jr	ra
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1a780:	4601                	c.li	a2,0
   1a782:	8522                	c.mv	a0,s0
   1a784:	0001f317          	auipc	t1,0x1f
   1a788:	c4c33303          	ld	t1,-948(t1) # 393d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x1ed74>
   1a78c:	9302                	c.jalr	t1
   1a78e:	a829                	c.j	1a7a8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x8e>
      __catch(...)
   1a790:	c21fb0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1a794:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1a798:	e29fb0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   1a79c:	842a                	c.mv	s0,a0
   1a79e:	e93fb0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1a7a2:	8522                	c.mv	a0,s0
   1a7a4:	eedfb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
    { return __num % __den; }
   1a7a8:	640c                	c.ld	a1,8(s0)
   1a7aa:	02b9f4b3          	remu	s1,s3,a1
   1a7ae:	bf79                	c.j	1a74c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x32>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1a7b0:	681c                	c.ld	a5,16(s0)
   1a7b2:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1a7b6:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1a7ba:	00093783          	ld	a5,0(s2)
   1a7be:	cb91                	c.beqz	a5,1a7d2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xb8>
   1a7c0:	679c                	c.ld	a5,8(a5)
   1a7c2:	6418                	c.ld	a4,8(s0)
   1a7c4:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1a7c8:	6018                	c.ld	a4,0(s0)
   1a7ca:	078e                	c.slli	a5,0x3
   1a7cc:	97ba                	c.add	a5,a4
   1a7ce:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1a7d2:	601c                	c.ld	a5,0(s0)
   1a7d4:	97ae                	c.add	a5,a1
   1a7d6:	01040713          	addi	a4,s0,16
   1a7da:	e398                	c.sd	a4,0(a5)
   1a7dc:	b771                	c.j	1a768 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x4e>

000000000001a7de <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1a7de:	7139                	c.addi16sp	sp,-64
   1a7e0:	fc06                	c.sdsp	ra,56(sp)
   1a7e2:	f822                	c.sdsp	s0,48(sp)
   1a7e4:	f426                	c.sdsp	s1,40(sp)
   1a7e6:	f04a                	c.sdsp	s2,32(sp)
   1a7e8:	ec4e                	c.sdsp	s3,24(sp)
   1a7ea:	84aa                	c.mv	s1,a0
   1a7ec:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1a7ee:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1a7f2:	00853903          	ld	s2,8(a0)
   1a7f6:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a7fa:	86ce                	c.mv	a3,s3
   1a7fc:	862e                	c.mv	a2,a1
   1a7fe:	85ca                	c.mv	a1,s2
   1a800:	0001f317          	auipc	t1,0x1f
   1a804:	b1033303          	ld	t1,-1264(t1) # 39310 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f0c4>
   1a808:	9302                	c.jalr	t1
	if (__before_n)
   1a80a:	c919                	c.beqz	a0,1a820 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x42>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1a80c:	6108                	c.ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1a80e:	c909                	c.beqz	a0,1a820 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x42>
	return __node->_M_v().second;
   1a810:	0541                	c.addi	a0,16
    }
   1a812:	70e2                	c.ldsp	ra,56(sp)
   1a814:	7442                	c.ldsp	s0,48(sp)
   1a816:	74a2                	c.ldsp	s1,40(sp)
   1a818:	7902                	c.ldsp	s2,32(sp)
   1a81a:	69e2                	c.ldsp	s3,24(sp)
   1a81c:	6121                	c.addi16sp	sp,64
   1a81e:	8082                	c.jr	ra
	  : _M_h(__h),
   1a820:	e026                	c.sdsp	s1,0(sp)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a822:	02800513          	addi	a0,zero,40
   1a826:	c9bfb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1a82a:	86aa                	c.mv	a3,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1a82c:	00053023          	sd	zero,0(a0)
   1a830:	601c                	c.ld	a5,0(s0)
   1a832:	e51c                	c.sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1a834:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1a838:	02053023          	sd	zero,32(a0)
  type_unit() = default;
   1a83c:	0001f797          	auipc	a5,0x1f
   1a840:	b147b783          	ld	a5,-1260(a5) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1a844:	07c1                	c.addi	a5,16
   1a846:	e91c                	c.sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1a848:	e42a                	c.sdsp	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1a84a:	4705                	c.li	a4,1
   1a84c:	864e                	c.mv	a2,s3
   1a84e:	85ca                	c.mv	a1,s2
   1a850:	8526                	c.mv	a0,s1
   1a852:	0001f317          	auipc	t1,0x1f
   1a856:	b7633303          	ld	t1,-1162(t1) # 393c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x1ecae>
   1a85a:	9302                	c.jalr	t1
      return __pos->second;
   1a85c:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1a85e:	bf55                	c.j	1a812 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x34>
    }
   1a860:	842a                	c.mv	s0,a0
   1a862:	850a                	c.mv	a0,sp
   1a864:	0001f317          	auipc	t1,0x1f
   1a868:	b1c33303          	ld	t1,-1252(t1) # 39380 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x1f160>
   1a86c:	9302                	c.jalr	t1
   1a86e:	8522                	c.mv	a0,s0
   1a870:	e21fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001a874 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1a874:	7139                	c.addi16sp	sp,-64
   1a876:	fc06                	c.sdsp	ra,56(sp)
   1a878:	f822                	c.sdsp	s0,48(sp)
   1a87a:	f426                	c.sdsp	s1,40(sp)
   1a87c:	f04a                	c.sdsp	s2,32(sp)
   1a87e:	ec4e                	c.sdsp	s3,24(sp)
   1a880:	84aa                	c.mv	s1,a0
   1a882:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1a884:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1a888:	00853903          	ld	s2,8(a0)
   1a88c:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a890:	86ce                	c.mv	a3,s3
   1a892:	862e                	c.mv	a2,a1
   1a894:	85ca                	c.mv	a1,s2
   1a896:	0001f317          	auipc	t1,0x1f
   1a89a:	a7a33303          	ld	t1,-1414(t1) # 39310 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f0c4>
   1a89e:	9302                	c.jalr	t1
	if (__before_n)
   1a8a0:	c919                	c.beqz	a0,1a8b6 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x42>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1a8a2:	6108                	c.ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1a8a4:	c909                	c.beqz	a0,1a8b6 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x42>
	return __node->_M_v().second;
   1a8a6:	0541                	c.addi	a0,16
    }
   1a8a8:	70e2                	c.ldsp	ra,56(sp)
   1a8aa:	7442                	c.ldsp	s0,48(sp)
   1a8ac:	74a2                	c.ldsp	s1,40(sp)
   1a8ae:	7902                	c.ldsp	s2,32(sp)
   1a8b0:	69e2                	c.ldsp	s3,24(sp)
   1a8b2:	6121                	c.addi16sp	sp,64
   1a8b4:	8082                	c.jr	ra
	  : _M_h(__h),
   1a8b6:	e026                	c.sdsp	s1,0(sp)
   1a8b8:	02800513          	addi	a0,zero,40
   1a8bc:	c05fb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1a8c0:	86aa                	c.mv	a3,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1a8c2:	00053023          	sd	zero,0(a0)
   1a8c6:	601c                	c.ld	a5,0(s0)
   1a8c8:	e51c                	c.sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1a8ca:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1a8ce:	02053023          	sd	zero,32(a0)
   1a8d2:	0001f797          	auipc	a5,0x1f
   1a8d6:	a7e7b783          	ld	a5,-1410(a5) # 39350 <vtable for dwarf::type_unit@@Base+0x9f8>
   1a8da:	07c1                	c.addi	a5,16
   1a8dc:	e91c                	c.sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1a8de:	e42a                	c.sdsp	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1a8e0:	4705                	c.li	a4,1
   1a8e2:	864e                	c.mv	a2,s3
   1a8e4:	85ca                	c.mv	a1,s2
   1a8e6:	8526                	c.mv	a0,s1
   1a8e8:	0001f317          	auipc	t1,0x1f
   1a8ec:	ae033303          	ld	t1,-1312(t1) # 393c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x1ecae>
   1a8f0:	9302                	c.jalr	t1
      return __pos->second;
   1a8f2:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1a8f4:	bf55                	c.j	1a8a8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x34>
    }
   1a8f6:	842a                	c.mv	s0,a0
   1a8f8:	850a                	c.mv	a0,sp
   1a8fa:	0001f317          	auipc	t1,0x1f
   1a8fe:	a8633303          	ld	t1,-1402(t1) # 39380 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x1f160>
   1a902:	9302                	c.jalr	t1
   1a904:	8522                	c.mv	a0,s0
   1a906:	d8bfb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001a90a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a90a:	7179                	c.addi16sp	sp,-48
   1a90c:	f406                	c.sdsp	ra,40(sp)
   1a90e:	f022                	c.sdsp	s0,32(sp)
   1a910:	ec26                	c.sdsp	s1,24(sp)
   1a912:	e84a                	c.sdsp	s2,16(sp)
   1a914:	e44e                	c.sdsp	s3,8(sp)
   1a916:	84aa                	c.mv	s1,a0
   1a918:	842e                	c.mv	s0,a1
	if (__builtin_expect(__bkt_count == 1, false))
   1a91a:	4785                	c.li	a5,1
   1a91c:	02f58863          	beq	a1,a5,1a94c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x42>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1a920:	57fd                	c.li	a5,-1
   1a922:	8391                	c.srli	a5,0x4
   1a924:	02b7e963          	bltu	a5,a1,1a956 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x4c>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a928:	00359993          	slli	s3,a1,0x3
   1a92c:	854e                	c.mv	a0,s3
   1a92e:	b93fb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1a932:	892a                	c.mv	s2,a0
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1a934:	864e                	c.mv	a2,s3
   1a936:	4581                	c.li	a1,0
   1a938:	c49fb0ef          	jal	ra,16580 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a93c:	6890                	c.ld	a2,16(s1)
      _M_before_begin._M_nxt = nullptr;
   1a93e:	0004b823          	sd	zero,16(s1)
      while (__p)
   1a942:	c235                	c.beqz	a2,1a9a6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      std::size_t __bbegin_bkt = 0;
   1a944:	4581                	c.li	a1,0
	      __new_buckets[__bkt] = &_M_before_begin;
   1a946:	01048893          	addi	a7,s1,16
   1a94a:	a025                	c.j	1a972 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	    _M_single_bucket = nullptr;
   1a94c:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1a950:	03050913          	addi	s2,a0,48
   1a954:	b7e5                	c.j	1a93c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x32>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1a956:	57fd                	c.li	a5,-1
   1a958:	838d                	c.srli	a5,0x3
   1a95a:	00b7f463          	bgeu	a5,a1,1a962 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x58>
	      std::__throw_bad_array_new_length();
   1a95e:	b33fb0ef          	jal	ra,16490 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1a962:	a2ffb0ef          	jal	ra,16390 <std::__throw_bad_alloc()@plt>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1a966:	00083683          	ld	a3,0(a6)
   1a96a:	e314                	c.sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1a96c:	639c                	c.ld	a5,0(a5)
   1a96e:	e398                	c.sd	a4,0(a5)
      while (__p)
   1a970:	ca1d                	c.beqz	a2,1a9a6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      _M_next() const noexcept
   1a972:	8732                	c.mv	a4,a2
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1a974:	6210                	c.ld	a2,0(a2)
    { return __num % __den; }
   1a976:	6714                	c.ld	a3,8(a4)
   1a978:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1a97c:	00369793          	slli	a5,a3,0x3
   1a980:	97ca                	c.add	a5,s2
   1a982:	0007b803          	ld	a6,0(a5)
   1a986:	fe0810e3          	bne	a6,zero,1a966 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x5c>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1a98a:	6888                	c.ld	a0,16(s1)
   1a98c:	e308                	c.sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1a98e:	e898                	c.sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1a990:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1a994:	631c                	c.ld	a5,0(a4)
   1a996:	c791                	c.beqz	a5,1a9a2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
		__new_buckets[__bbegin_bkt] = __p;
   1a998:	058e                	c.slli	a1,0x3
   1a99a:	95ca                	c.add	a1,s2
   1a99c:	e198                	c.sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1a99e:	85b6                	c.mv	a1,a3
   1a9a0:	bfc1                	c.j	1a970 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
   1a9a2:	85b6                	c.mv	a1,a3
   1a9a4:	b7f1                	c.j	1a970 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1a9a6:	6088                	c.ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1a9a8:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1a9ac:	00f50463          	beq	a0,a5,1a9b4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a9b0:	b01fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      _M_bucket_count = __bkt_count;
   1a9b4:	e480                	c.sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1a9b6:	0124b023          	sd	s2,0(s1)
    }
   1a9ba:	70a2                	c.ldsp	ra,40(sp)
   1a9bc:	7402                	c.ldsp	s0,32(sp)
   1a9be:	64e2                	c.ldsp	s1,24(sp)
   1a9c0:	6942                	c.ldsp	s2,16(sp)
   1a9c2:	69a2                	c.ldsp	s3,8(sp)
   1a9c4:	6145                	c.addi16sp	sp,48
   1a9c6:	8082                	c.jr	ra

000000000001a9c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a9c8:	7139                	c.addi16sp	sp,-64
   1a9ca:	fc06                	c.sdsp	ra,56(sp)
   1a9cc:	f822                	c.sdsp	s0,48(sp)
   1a9ce:	f426                	c.sdsp	s1,40(sp)
   1a9d0:	f04a                	c.sdsp	s2,32(sp)
   1a9d2:	ec4e                	c.sdsp	s3,24(sp)
   1a9d4:	e852                	c.sdsp	s4,16(sp)
   1a9d6:	842a                	c.mv	s0,a0
   1a9d8:	84ae                	c.mv	s1,a1
   1a9da:	89b2                	c.mv	s3,a2
   1a9dc:	8936                	c.mv	s2,a3
    { return _M_next_resize; }
   1a9de:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1a9e2:	86ba                	c.mv	a3,a4
   1a9e4:	6d10                	c.ld	a2,24(a0)
   1a9e6:	650c                	c.ld	a1,8(a0)
   1a9e8:	02050513          	addi	a0,a0,32
   1a9ec:	b85fb0ef          	jal	ra,16570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1a9f0:	e02a                	c.sdsp	a0,0(sp)
   1a9f2:	e42e                	c.sdsp	a1,8(sp)
      if (__do_rehash.first)
   1a9f4:	0ff57513          	andi	a0,a0,255
   1a9f8:	e91d                	c.bnez	a0,1aa2e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x66>
      if (_M_buckets[__bkt])
   1a9fa:	00349593          	slli	a1,s1,0x3
   1a9fe:	601c                	c.ld	a5,0(s0)
   1aa00:	97ae                	c.add	a5,a1
   1aa02:	639c                	c.ld	a5,0(a5)
   1aa04:	cfa9                	c.beqz	a5,1aa5e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x96>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1aa06:	639c                	c.ld	a5,0(a5)
   1aa08:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1aa0c:	601c                	c.ld	a5,0(s0)
   1aa0e:	97ae                	c.add	a5,a1
   1aa10:	639c                	c.ld	a5,0(a5)
   1aa12:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1aa16:	6c1c                	c.ld	a5,24(s0)
   1aa18:	0785                	c.addi	a5,1
   1aa1a:	ec1c                	c.sd	a5,24(s0)
    }
   1aa1c:	854a                	c.mv	a0,s2
   1aa1e:	70e2                	c.ldsp	ra,56(sp)
   1aa20:	7442                	c.ldsp	s0,48(sp)
   1aa22:	74a2                	c.ldsp	s1,40(sp)
   1aa24:	7902                	c.ldsp	s2,32(sp)
   1aa26:	69e2                	c.ldsp	s3,24(sp)
   1aa28:	6a42                	c.ldsp	s4,16(sp)
   1aa2a:	6121                	c.addi16sp	sp,64
   1aa2c:	8082                	c.jr	ra
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1aa2e:	4601                	c.li	a2,0
   1aa30:	8522                	c.mv	a0,s0
   1aa32:	0001f317          	auipc	t1,0x1f
   1aa36:	85e33303          	ld	t1,-1954(t1) # 39290 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x1e986>
   1aa3a:	9302                	c.jalr	t1
   1aa3c:	a829                	c.j	1aa56 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x8e>
      __catch(...)
   1aa3e:	973fb0ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1aa42:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1aa46:	b7bfb0ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   1aa4a:	842a                	c.mv	s0,a0
   1aa4c:	be5fb0ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1aa50:	8522                	c.mv	a0,s0
   1aa52:	c3ffb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
    { return __num % __den; }
   1aa56:	640c                	c.ld	a1,8(s0)
   1aa58:	02b9f4b3          	remu	s1,s3,a1
   1aa5c:	bf79                	c.j	1a9fa <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x32>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1aa5e:	681c                	c.ld	a5,16(s0)
   1aa60:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1aa64:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1aa68:	00093783          	ld	a5,0(s2)
   1aa6c:	cb91                	c.beqz	a5,1aa80 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xb8>
   1aa6e:	679c                	c.ld	a5,8(a5)
   1aa70:	6418                	c.ld	a4,8(s0)
   1aa72:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1aa76:	6018                	c.ld	a4,0(s0)
   1aa78:	078e                	c.slli	a5,0x3
   1aa7a:	97ba                	c.add	a5,a4
   1aa7c:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1aa80:	601c                	c.ld	a5,0(s0)
   1aa82:	97ae                	c.add	a5,a1
   1aa84:	01040713          	addi	a4,s0,16
   1aa88:	e398                	c.sd	a4,0(a5)
   1aa8a:	b771                	c.j	1aa16 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x4e>

000000000001aa8c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1aa8c:	7179                	c.addi16sp	sp,-48
   1aa8e:	f406                	c.sdsp	ra,40(sp)
   1aa90:	f022                	c.sdsp	s0,32(sp)
   1aa92:	ec26                	c.sdsp	s1,24(sp)
   1aa94:	e84a                	c.sdsp	s2,16(sp)
   1aa96:	e44e                	c.sdsp	s3,8(sp)
   1aa98:	e052                	c.sdsp	s4,0(sp)
   1aa9a:	892a                	c.mv	s2,a0
   1aa9c:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1aa9e:	0005ba03          	ld	s4,0(a1)
    { return __num % __den; }
   1aaa2:	00853983          	ld	s3,8(a0)
   1aaa6:	033a79b3          	remu	s3,s4,s3
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1aaaa:	86d2                	c.mv	a3,s4
   1aaac:	862e                	c.mv	a2,a1
   1aaae:	85ce                	c.mv	a1,s3
   1aab0:	0001f317          	auipc	t1,0x1f
   1aab4:	a9033303          	ld	t1,-1392(t1) # 39540 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1ef1c>
   1aab8:	9302                	c.jalr	t1
	if (__before_n)
   1aaba:	cd09                	c.beqz	a0,1aad4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x48>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1aabc:	611c                	c.ld	a5,0(a0)
	return __node->_M_v().second;
   1aabe:	01078513          	addi	a0,a5,16
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1aac2:	cb89                	c.beqz	a5,1aad4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x48>
    }
   1aac4:	70a2                	c.ldsp	ra,40(sp)
   1aac6:	7402                	c.ldsp	s0,32(sp)
   1aac8:	64e2                	c.ldsp	s1,24(sp)
   1aaca:	6942                	c.ldsp	s2,16(sp)
   1aacc:	69a2                	c.ldsp	s3,8(sp)
   1aace:	6a02                	c.ldsp	s4,0(sp)
   1aad0:	6145                	c.addi16sp	sp,48
   1aad2:	8082                	c.jr	ra
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1aad4:	03800513          	addi	a0,zero,56
   1aad8:	9e9fb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1aadc:	84aa                	c.mv	s1,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1aade:	00053023          	sd	zero,0(a0)
   1aae2:	601c                	c.ld	a5,0(s0)
   1aae4:	e51c                	c.sd	a5,8(a0)
  abbrev_entry() : code(0) {}
   1aae6:	00053823          	sd	zero,16(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1aaea:	02053023          	sd	zero,32(a0)
   1aaee:	02053423          	sd	zero,40(a0)
   1aaf2:	02053823          	sd	zero,48(a0)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1aaf6:	4705                	c.li	a4,1
   1aaf8:	86aa                	c.mv	a3,a0
   1aafa:	8652                	c.mv	a2,s4
   1aafc:	85ce                	c.mv	a1,s3
   1aafe:	854a                	c.mv	a0,s2
   1ab00:	0001f317          	auipc	t1,0x1f
   1ab04:	a5833303          	ld	t1,-1448(t1) # 39558 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)@@Base+0x1eb90>
   1ab08:	9302                	c.jalr	t1
      return __pos->second;
   1ab0a:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1ab0c:	bf65                	c.j	1aac4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x38>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1ab0e:	842a                	c.mv	s0,a0
   1ab10:	7088                	c.ld	a0,32(s1)
	if (__p)
   1ab12:	c119                	c.beqz	a0,1ab18 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ab14:	99dfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1ab18:	8526                	c.mv	a0,s1
   1ab1a:	997fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1ab1e:	8522                	c.mv	a0,s0
   1ab20:	b71fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001ab24 <dwarf::cursor::skip_initial_length()>:
  pos = begin + length;
  return make_shared<section>(sec->type, begin, length, sec->ord, fmt);
}

void cursor::skip_initial_length() {
  switch (sec->fmt) {
   1ab24:	611c                	c.ld	a5,0(a0)
   1ab26:	4f9c                	c.lw	a5,24(a5)
   1ab28:	4705                	c.li	a4,1
   1ab2a:	00e79663          	bne	a5,a4,1ab36 <dwarf::cursor::skip_initial_length()+0x12>
  case format::dwarf32:
    pos += sizeof(uword);
   1ab2e:	691c                	c.ld	a5,16(a0)
   1ab30:	0791                	c.addi	a5,4
   1ab32:	e91c                	c.sd	a5,16(a0)
   1ab34:	8082                	c.jr	ra
  switch (sec->fmt) {
   1ab36:	4709                	c.li	a4,2
   1ab38:	00e79563          	bne	a5,a4,1ab42 <dwarf::cursor::skip_initial_length()+0x1e>
    break;
  case format::dwarf64:
    pos += sizeof(uword) + sizeof(uint64_t);
   1ab3c:	691c                	c.ld	a5,16(a0)
   1ab3e:	07b1                	c.addi	a5,12
    break;
   1ab40:	bfcd                	c.j	1ab32 <dwarf::cursor::skip_initial_length()+0xe>
void cursor::skip_initial_length() {
   1ab42:	1101                	c.addi	sp,-32
   1ab44:	ec06                	c.sdsp	ra,24(sp)
   1ab46:	e822                	c.sdsp	s0,16(sp)
   1ab48:	e426                	c.sdsp	s1,8(sp)
  default:
    throw logic_error("cannot skip initial length with unknown format");
   1ab4a:	4541                	c.li	a0,16
   1ab4c:	885fb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1ab50:	84aa                	c.mv	s1,a0
   1ab52:	00013597          	auipc	a1,0x13
   1ab56:	a6658593          	addi	a1,a1,-1434 # 2d5b8 <std::piecewise_construct+0x8>
   1ab5a:	a57fb0ef          	jal	ra,165b0 <std::logic_error::logic_error(char const*)@plt>
   1ab5e:	0001f617          	auipc	a2,0x1f
   1ab62:	90a63603          	ld	a2,-1782(a2) # 39468 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1ab66:	0001f597          	auipc	a1,0x1f
   1ab6a:	a0a5b583          	ld	a1,-1526(a1) # 39570 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1ab6e:	8526                	c.mv	a0,s1
   1ab70:	af1fb0ef          	jal	ra,16660 <__cxa_throw@plt>
   1ab74:	842a                	c.mv	s0,a0
   1ab76:	8526                	c.mv	a0,s1
   1ab78:	8f9fb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1ab7c:	8522                	c.mv	a0,s0
   1ab7e:	b13fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001ab82 <dwarf::cursor::cstr(unsigned long*)>:
  const char *p = this->cstr(&size);
  out.resize(size);
  memmove(&out.front(), p, size);
}

const char *cursor::cstr(size_t *size_out) {
   1ab82:	862a                	c.mv	a2,a0
  // Scan string size
  const char *p = pos;
   1ab84:	6908                	c.ld	a0,16(a0)
      { return _M_ptr; }
   1ab86:	00063803          	ld	a6,0(a2)
  while (pos < sec->end && *pos)
   1ab8a:	01083703          	ld	a4,16(a6)
   1ab8e:	02e57563          	bgeu	a0,a4,1abb8 <dwarf::cursor::cstr(unsigned long*)+0x36>
   1ab92:	87aa                	c.mv	a5,a0
   1ab94:	0007c683          	lbu	a3,0(a5)
   1ab98:	c699                	c.beqz	a3,1aba6 <dwarf::cursor::cstr(unsigned long*)+0x24>
    pos++;
   1ab9a:	0785                	c.addi	a5,1
   1ab9c:	ea1c                	c.sd	a5,16(a2)
  while (pos < sec->end && *pos)
   1ab9e:	01083703          	ld	a4,16(a6)
   1aba2:	fee7e9e3          	bltu	a5,a4,1ab94 <dwarf::cursor::cstr(unsigned long*)+0x12>
  if (pos == sec->end)
   1aba6:	00e78b63          	beq	a5,a4,1abbc <dwarf::cursor::cstr(unsigned long*)+0x3a>
    throw format_error("unterminated string");
  if (size_out)
   1abaa:	c199                	c.beqz	a1,1abb0 <dwarf::cursor::cstr(unsigned long*)+0x2e>
    *size_out = pos - p;
   1abac:	8f89                	c.sub	a5,a0
   1abae:	e19c                	c.sd	a5,0(a1)
  pos++;
   1abb0:	6a1c                	c.ld	a5,16(a2)
   1abb2:	0785                	c.addi	a5,1
   1abb4:	ea1c                	c.sd	a5,16(a2)
  return p;
}
   1abb6:	8082                	c.jr	ra
  while (pos < sec->end && *pos)
   1abb8:	87aa                	c.mv	a5,a0
   1abba:	b7f5                	c.j	1aba6 <dwarf::cursor::cstr(unsigned long*)+0x24>
const char *cursor::cstr(size_t *size_out) {
   1abbc:	1101                	c.addi	sp,-32
   1abbe:	ec06                	c.sdsp	ra,24(sp)
   1abc0:	e822                	c.sdsp	s0,16(sp)
   1abc2:	e426                	c.sdsp	s1,8(sp)
    throw format_error("unterminated string");
   1abc4:	4541                	c.li	a0,16
   1abc6:	80bfb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1abca:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1abcc:	00013597          	auipc	a1,0x13
   1abd0:	a1c58593          	addi	a1,a1,-1508 # 2d5e8 <std::piecewise_construct+0x38>
   1abd4:	b3dfb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   1abd8:	0001f797          	auipc	a5,0x1f
   1abdc:	9787b783          	ld	a5,-1672(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   1abe0:	07c1                	c.addi	a5,16
   1abe2:	e01c                	c.sd	a5,0(s0)
   1abe4:	0001e617          	auipc	a2,0x1e
   1abe8:	79463603          	ld	a2,1940(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1abec:	0001e597          	auipc	a1,0x1e
   1abf0:	6bc5b583          	ld	a1,1724(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1abf4:	8522                	c.mv	a0,s0
   1abf6:	a6bfb0ef          	jal	ra,16660 <__cxa_throw@plt>
   1abfa:	84aa                	c.mv	s1,a0
   1abfc:	8522                	c.mv	a0,s0
   1abfe:	873fb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1ac02:	8526                	c.mv	a0,s1
   1ac04:	a8dfb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001ac08 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
void cursor::string(std::string &out) {
   1ac08:	7179                	c.addi16sp	sp,-48
   1ac0a:	f406                	c.sdsp	ra,40(sp)
   1ac0c:	f022                	c.sdsp	s0,32(sp)
   1ac0e:	ec26                	c.sdsp	s1,24(sp)
   1ac10:	842e                	c.mv	s0,a1
  const char *p = this->cstr(&size);
   1ac12:	002c                	c.addi4spn	a1,sp,8
   1ac14:	f6fff0ef          	jal	ra,1ab82 <dwarf::cursor::cstr(unsigned long*)>
   1ac18:	84aa                	c.mv	s1,a0
      { this->resize(__n, _CharT()); }
   1ac1a:	4601                	c.li	a2,0
   1ac1c:	65a2                	c.ldsp	a1,8(sp)
   1ac1e:	8522                	c.mv	a0,s0
   1ac20:	f40fb0ef          	jal	ra,16360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&out.front(), p, size);
   1ac24:	6622                	c.ldsp	a2,8(sp)
   1ac26:	85a6                	c.mv	a1,s1
   1ac28:	6008                	c.ld	a0,0(s0)
   1ac2a:	af7fb0ef          	jal	ra,16720 <memmove@plt>
}
   1ac2e:	70a2                	c.ldsp	ra,40(sp)
   1ac30:	7402                	c.ldsp	s0,32(sp)
   1ac32:	64e2                	c.ldsp	s1,24(sp)
   1ac34:	6145                	c.addi16sp	sp,48
   1ac36:	8082                	c.jr	ra

000000000001ac38 <dwarf::cursor::underflow()>:
  default:
    throw format_error("unknown form " + to_string(form));
  }
}

void cursor::underflow() {
   1ac38:	1101                	c.addi	sp,-32
   1ac3a:	ec06                	c.sdsp	ra,24(sp)
   1ac3c:	e822                	c.sdsp	s0,16(sp)
   1ac3e:	e426                	c.sdsp	s1,8(sp)
  throw underflow_error("cannot read past end of DWARF section");
   1ac40:	4541                	c.li	a0,16
   1ac42:	f8efb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1ac46:	842a                	c.mv	s0,a0
   1ac48:	00013597          	auipc	a1,0x13
   1ac4c:	9b858593          	addi	a1,a1,-1608 # 2d600 <std::piecewise_construct+0x50>
   1ac50:	b31fb0ef          	jal	ra,16780 <std::underflow_error::underflow_error(char const*)@plt>
   1ac54:	0001f617          	auipc	a2,0x1f
   1ac58:	98463603          	ld	a2,-1660(a2) # 395d8 <std::underflow_error::~underflow_error()@GLIBCXX_3.4>
   1ac5c:	0001e597          	auipc	a1,0x1e
   1ac60:	7945b583          	ld	a1,1940(a1) # 393f0 <typeinfo for std::underflow_error@GLIBCXX_3.4>
   1ac64:	8522                	c.mv	a0,s0
   1ac66:	9fbfb0ef          	jal	ra,16660 <__cxa_throw@plt>
   1ac6a:	84aa                	c.mv	s1,a0
   1ac6c:	8522                	c.mv	a0,s0
   1ac6e:	803fb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1ac72:	8526                	c.mv	a0,s1
   1ac74:	a1dfb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001ac78 <dwarf::cursor::sleb128()>:
   1ac78:	610c                	c.ld	a1,0(a0)
  unsigned shift = 0;
   1ac7a:	4701                	c.li	a4,0
  uint64_t result = 0;
   1ac7c:	4601                	c.li	a2,0
  while (pos < sec->end) {
   1ac7e:	691c                	c.ld	a5,16(a0)
   1ac80:	6994                	c.ld	a3,16(a1)
   1ac82:	04d7f063          	bgeu	a5,a3,1acc2 <dwarf::cursor::sleb128()+0x4a>
    uint8_t byte = *(uint8_t *)(pos++);
   1ac86:	00178693          	addi	a3,a5,1
   1ac8a:	e914                	c.sd	a3,16(a0)
   1ac8c:	0007c683          	lbu	a3,0(a5)
    result |= (uint64_t)(byte & 0x7f) << shift;
   1ac90:	07f6f793          	andi	a5,a3,127
   1ac94:	00e797b3          	sll	a5,a5,a4
   1ac98:	8e5d                	c.or	a2,a5
    shift += 7;
   1ac9a:	271d                	c.addiw	a4,7
    if ((byte & 0x80) == 0) {
   1ac9c:	0186979b          	slliw	a5,a3,0x18
   1aca0:	4187d79b          	sraiw	a5,a5,0x18
   1aca4:	fc07cde3          	blt	a5,zero,1ac7e <dwarf::cursor::sleb128()+0x6>
      if (shift < sizeof(result) * 8 && (byte & 0x40))
   1aca8:	03f00793          	addi	a5,zero,63
   1acac:	00e7e963          	bltu	a5,a4,1acbe <dwarf::cursor::sleb128()+0x46>
   1acb0:	0406f693          	andi	a3,a3,64
   1acb4:	c689                	c.beqz	a3,1acbe <dwarf::cursor::sleb128()+0x46>
        result |= -((uint64_t)1 << shift);
   1acb6:	57fd                	c.li	a5,-1
   1acb8:	00e797b3          	sll	a5,a5,a4
   1acbc:	8e5d                	c.or	a2,a5
      return result;
   1acbe:	8532                	c.mv	a0,a2
}
   1acc0:	8082                	c.jr	ra
int64_t cursor::sleb128() {
   1acc2:	1141                	c.addi	sp,-16
   1acc4:	e406                	c.sdsp	ra,8(sp)
  underflow();
   1acc6:	f73ff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
  return 0;
   1acca:	4501                	c.li	a0,0
}
   1accc:	60a2                	c.ldsp	ra,8(sp)
   1acce:	0141                	c.addi	sp,16
   1acd0:	8082                	c.jr	ra

000000000001acd2 <dwarf::cursor::skip_form(dwarf::DW_FORM)>:
void cursor::skip_form(DW_FORM form) {
   1acd2:	711d                	c.addi16sp	sp,-96
   1acd4:	ec86                	c.sdsp	ra,88(sp)
   1acd6:	e8a2                	c.sdsp	s0,80(sp)
   1acd8:	e4a6                	c.sdsp	s1,72(sp)
   1acda:	e0ca                	c.sdsp	s2,64(sp)
   1acdc:	84ae                	c.mv	s1,a1
  switch (form) {
   1acde:	02000793          	addi	a5,zero,32
   1ace2:	22b7e863          	bltu	a5,a1,1af12 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x240>
   1ace6:	842a                	c.mv	s0,a0
   1ace8:	00259793          	slli	a5,a1,0x2
   1acec:	00013717          	auipc	a4,0x13
   1acf0:	9c470713          	addi	a4,a4,-1596 # 2d6b0 <std::piecewise_construct+0x100>
   1acf4:	97ba                	c.add	a5,a4
   1acf6:	439c                	c.lw	a5,0(a5)
   1acf8:	97ba                	c.add	a5,a4
   1acfa:	8782                	c.jr	a5
    while (pos < sec->end) {
   1acfc:	691c                	c.ld	a5,16(a0)
   1acfe:	6108                	c.ld	a0,0(a0)
   1ad00:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   1ad02:	4581                	c.li	a1,0
    int shift = 0;
   1ad04:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1ad06:	02e7f563          	bgeu	a5,a4,1ad30 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x5e>
      uint8_t byte = *(uint8_t *)(pos++);
   1ad0a:	0785                	c.addi	a5,1
   1ad0c:	e81c                	c.sd	a5,16(s0)
   1ad0e:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1ad12:	07f77693          	andi	a3,a4,127
   1ad16:	00c696b3          	sll	a3,a3,a2
   1ad1a:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1ad1c:	0187171b          	slliw	a4,a4,0x18
   1ad20:	4187571b          	sraiw	a4,a4,0x18
   1ad24:	00075a63          	bge	a4,zero,1ad38 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x66>
      shift += 7;
   1ad28:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1ad2a:	6918                	c.ld	a4,16(a0)
   1ad2c:	fce7efe3          	bltu	a5,a4,1ad0a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x38>
    underflow();
   1ad30:	8522                	c.mv	a0,s0
   1ad32:	f07ff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1ad36:	4581                	c.li	a1,0
    skip_form((DW_FORM)uleb128());
   1ad38:	2581                	c.addiw	a1,0
   1ad3a:	8522                	c.mv	a0,s0
   1ad3c:	f97ff0ef          	jal	ra,1acd2 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
    break;
   1ad40:	a091                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end) {
   1ad42:	691c                	c.ld	a5,16(a0)
   1ad44:	6108                	c.ld	a0,0(a0)
   1ad46:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   1ad48:	4581                	c.li	a1,0
    int shift = 0;
   1ad4a:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1ad4c:	02e7f563          	bgeu	a5,a4,1ad76 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xa4>
      uint8_t byte = *(uint8_t *)(pos++);
   1ad50:	0785                	c.addi	a5,1
   1ad52:	e81c                	c.sd	a5,16(s0)
   1ad54:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1ad58:	07f77693          	andi	a3,a4,127
   1ad5c:	00c696b3          	sll	a3,a3,a2
   1ad60:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1ad62:	0187171b          	slliw	a4,a4,0x18
   1ad66:	4187571b          	sraiw	a4,a4,0x18
   1ad6a:	00075a63          	bge	a4,zero,1ad7e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xac>
      shift += 7;
   1ad6e:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1ad70:	6918                	c.ld	a4,16(a0)
   1ad72:	fce7efe3          	bltu	a5,a4,1ad50 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x7e>
    underflow();
   1ad76:	8522                	c.mv	a0,s0
   1ad78:	ec1ff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1ad7c:	4581                	c.li	a1,0
    pos += tmp;
   1ad7e:	681c                	c.ld	a5,16(s0)
   1ad80:	97ae                	c.add	a5,a1
   1ad82:	e81c                	c.sd	a5,16(s0)
}
   1ad84:	60e6                	c.ldsp	ra,88(sp)
   1ad86:	6446                	c.ldsp	s0,80(sp)
   1ad88:	64a6                	c.ldsp	s1,72(sp)
   1ad8a:	6906                	c.ldsp	s2,64(sp)
   1ad8c:	6125                	c.addi16sp	sp,96
   1ad8e:	8082                	c.jr	ra
    pos += sec->addr_size;
   1ad90:	611c                	c.ld	a5,0(a0)
   1ad92:	0207e703          	lwu	a4,32(a5)
   1ad96:	691c                	c.ld	a5,16(a0)
   1ad98:	97ba                	c.add	a5,a4
   1ad9a:	e91c                	c.sd	a5,16(a0)
    break;
   1ad9c:	b7e5                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    switch (sec->fmt) {
   1ad9e:	611c                	c.ld	a5,0(a0)
   1ada0:	4f9c                	c.lw	a5,24(a5)
   1ada2:	4709                	c.li	a4,2
   1ada4:	00e78c63          	beq	a5,a4,1adbc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xea>
   1ada8:	fcf74ee3          	blt	a4,a5,1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
   1adac:	cf81                	c.beqz	a5,1adc4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xf2>
   1adae:	4705                	c.li	a4,1
   1adb0:	fce79ae3          	bne	a5,a4,1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      pos += 4;
   1adb4:	691c                	c.ld	a5,16(a0)
   1adb6:	0791                	c.addi	a5,4
   1adb8:	e91c                	c.sd	a5,16(a0)
      break;
   1adba:	b7e9                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      pos += 8;
   1adbc:	691c                	c.ld	a5,16(a0)
   1adbe:	07a1                	c.addi	a5,8
   1adc0:	e91c                	c.sd	a5,16(a0)
      break;
   1adc2:	b7c9                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      throw logic_error("cannot read form with unknown format");
   1adc4:	4541                	c.li	a0,16
   1adc6:	e0afb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1adca:	842a                	c.mv	s0,a0
   1adcc:	00013597          	auipc	a1,0x13
   1add0:	85c58593          	addi	a1,a1,-1956 # 2d628 <std::piecewise_construct+0x78>
   1add4:	fdcfb0ef          	jal	ra,165b0 <std::logic_error::logic_error(char const*)@plt>
   1add8:	0001e617          	auipc	a2,0x1e
   1addc:	69063603          	ld	a2,1680(a2) # 39468 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1ade0:	0001e597          	auipc	a1,0x1e
   1ade4:	7905b583          	ld	a1,1936(a1) # 39570 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1ade8:	8522                	c.mv	a0,s0
   1adea:	877fb0ef          	jal	ra,16660 <__cxa_throw@plt>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1adee:	611c                	c.ld	a5,0(a0)
   1adf0:	6b98                	c.ld	a4,16(a5)
   1adf2:	691c                	c.ld	a5,16(a0)
   1adf4:	00e7e463          	bltu	a5,a4,1adfc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x12a>
      underflow();
   1adf8:	e41ff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1adfc:	681c                	c.ld	a5,16(s0)
    if (sec->ord == byte_order::lsb) {
   1adfe:	6018                	c.ld	a4,0(s0)
   1ae00:	4f58                	c.lw	a4,28(a4)
   1ae02:	1a070d63          	beq	a4,zero,1afbc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ea>
        val = (val << 8) | (uint64_t)p[i];
   1ae06:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1ae0a:	aa5d                	c.j	1afc0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ee>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ae0c:	611c                	c.ld	a5,0(a0)
   1ae0e:	6b98                	c.ld	a4,16(a5)
   1ae10:	691c                	c.ld	a5,16(a0)
   1ae12:	40f70633          	sub	a2,a4,a5
   1ae16:	4685                	c.li	a3,1
   1ae18:	00c6f463          	bgeu	a3,a2,1ae20 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x14e>
   1ae1c:	00e7e563          	bltu	a5,a4,1ae26 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x154>
      underflow();
   1ae20:	8522                	c.mv	a0,s0
   1ae22:	e17ff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ae26:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1ae28:	601c                	c.ld	a5,0(s0)
   1ae2a:	4fdc                	c.lw	a5,28(a5)
   1ae2c:	eb99                	c.bnez	a5,1ae42 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x170>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ae2e:	00174783          	lbu	a5,1(a4)
   1ae32:	07a2                	c.slli	a5,0x8
   1ae34:	00074683          	lbu	a3,0(a4)
   1ae38:	8fd5                	c.or	a5,a3
    pos += tmp;
   1ae3a:	0789                	c.addi	a5,2
   1ae3c:	973e                	c.add	a4,a5
   1ae3e:	e818                	c.sd	a4,16(s0)
    break;
   1ae40:	b791                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
        val = (val << 8) | (uint64_t)p[i];
   1ae42:	00074783          	lbu	a5,0(a4)
   1ae46:	07a2                	c.slli	a5,0x8
   1ae48:	00174683          	lbu	a3,1(a4)
   1ae4c:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ae4e:	b7f5                	c.j	1ae3a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x168>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ae50:	611c                	c.ld	a5,0(a0)
   1ae52:	6b98                	c.ld	a4,16(a5)
   1ae54:	691c                	c.ld	a5,16(a0)
   1ae56:	40f70633          	sub	a2,a4,a5
   1ae5a:	468d                	c.li	a3,3
   1ae5c:	00c6f463          	bgeu	a3,a2,1ae64 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x192>
   1ae60:	00e7e563          	bltu	a5,a4,1ae6a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x198>
      underflow();
   1ae64:	8522                	c.mv	a0,s0
   1ae66:	dd3ff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ae6a:	680c                	c.ld	a1,16(s0)
    if (sec->ord == byte_order::lsb) {
   1ae6c:	601c                	c.ld	a5,0(s0)
   1ae6e:	4fdc                	c.lw	a5,28(a5)
   1ae70:	e785                	c.bnez	a5,1ae98 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1c6>
   1ae72:	862e                	c.mv	a2,a1
   1ae74:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1ae76:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1ae7a:	00064683          	lbu	a3,0(a2)
   1ae7e:	00e696b3          	sll	a3,a3,a4
   1ae82:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ae84:	0605                	c.addi	a2,1
   1ae86:	2721                	c.addiw	a4,8
   1ae88:	fea719e3          	bne	a4,a0,1ae7a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1a8>
    pos += tmp;
   1ae8c:	1782                	c.slli	a5,0x20
   1ae8e:	9381                	c.srli	a5,0x20
   1ae90:	0791                	c.addi	a5,4
   1ae92:	95be                	c.add	a1,a5
   1ae94:	e80c                	c.sd	a1,16(s0)
    break;
   1ae96:	b5fd                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
   1ae98:	872e                	c.mv	a4,a1
   1ae9a:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1ae9e:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1aea0:	07a2                	c.slli	a5,0x8
   1aea2:	00074683          	lbu	a3,0(a4)
   1aea6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1aea8:	0705                	c.addi	a4,1
   1aeaa:	fee61be3          	bne	a2,a4,1aea0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ce>
   1aeae:	bff9                	c.j	1ae8c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ba>
    pos += 1;
   1aeb0:	691c                	c.ld	a5,16(a0)
   1aeb2:	0785                	c.addi	a5,1
   1aeb4:	e91c                	c.sd	a5,16(a0)
    break;
   1aeb6:	b5f9                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 2;
   1aeb8:	691c                	c.ld	a5,16(a0)
   1aeba:	0789                	c.addi	a5,2
   1aebc:	e91c                	c.sd	a5,16(a0)
    break;
   1aebe:	b5d9                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 4;
   1aec0:	691c                	c.ld	a5,16(a0)
   1aec2:	0791                	c.addi	a5,4
   1aec4:	e91c                	c.sd	a5,16(a0)
    break;
   1aec6:	bd7d                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 8;
   1aec8:	691c                	c.ld	a5,16(a0)
   1aeca:	07a1                	c.addi	a5,8
   1aecc:	e91c                	c.sd	a5,16(a0)
    break;
   1aece:	bd5d                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1aed0:	691c                	c.ld	a5,16(a0)
   1aed2:	6114                	c.ld	a3,0(a0)
   1aed4:	6a98                	c.ld	a4,16(a3)
   1aed6:	00e7fb63          	bgeu	a5,a4,1aeec <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x21a>
   1aeda:	00078703          	lb	a4,0(a5)
   1aede:	00075763          	bge	a4,zero,1aeec <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x21a>
      pos++;
   1aee2:	0785                	c.addi	a5,1
   1aee4:	e81c                	c.sd	a5,16(s0)
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1aee6:	6a98                	c.ld	a4,16(a3)
   1aee8:	fee7e9e3          	bltu	a5,a4,1aeda <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x208>
    pos++;
   1aeec:	0785                	c.addi	a5,1
   1aeee:	e81c                	c.sd	a5,16(s0)
    break;
   1aef0:	bd51                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end && *pos)
   1aef2:	691c                	c.ld	a5,16(a0)
   1aef4:	6114                	c.ld	a3,0(a0)
   1aef6:	6a98                	c.ld	a4,16(a3)
   1aef8:	00e7fa63          	bgeu	a5,a4,1af0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x23a>
   1aefc:	0007c703          	lbu	a4,0(a5)
   1af00:	c711                	c.beqz	a4,1af0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x23a>
      pos++;
   1af02:	0785                	c.addi	a5,1
   1af04:	e81c                	c.sd	a5,16(s0)
    while (pos < sec->end && *pos)
   1af06:	6a98                	c.ld	a4,16(a3)
   1af08:	fee7eae3          	bltu	a5,a4,1aefc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x22a>
    pos++;
   1af0c:	0785                	c.addi	a5,1
   1af0e:	e81c                	c.sd	a5,16(s0)
    break;
   1af10:	bd95                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    throw format_error("unknown form " + to_string(form));
   1af12:	4541                	c.li	a0,16
   1af14:	cbcfb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1af18:	892a                	c.mv	s2,a0
   1af1a:	85a6                	c.mv	a1,s1
   1af1c:	850a                	c.mv	a0,sp
   1af1e:	7350c0ef          	jal	ra,27e52 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1af22:	00012617          	auipc	a2,0x12
   1af26:	72e60613          	addi	a2,a2,1838 # 2d650 <std::piecewise_construct+0xa0>
   1af2a:	4581                	c.li	a1,0
   1af2c:	850a                	c.mv	a0,sp
   1af2e:	c12fb0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1af32:	85aa                	c.mv	a1,a0
   1af34:	1000                	c.addi4spn	s0,sp,32
   1af36:	8522                	c.mv	a0,s0
   1af38:	cd8fb0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1af3c:	85a2                	c.mv	a1,s0
   1af3e:	854a                	c.mv	a0,s2
   1af40:	e00fb0ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1af44:	0001e797          	auipc	a5,0x1e
   1af48:	60c7b783          	ld	a5,1548(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   1af4c:	07c1                	c.addi	a5,16
   1af4e:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1af52:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1af54:	181c                	c.addi4spn	a5,sp,48
   1af56:	00f50463          	beq	a0,a5,1af5e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x28c>
   1af5a:	d56fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1af5e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1af60:	081c                	c.addi4spn	a5,sp,16
   1af62:	00f50463          	beq	a0,a5,1af6a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x298>
   1af66:	d4afb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1af6a:	0001e617          	auipc	a2,0x1e
   1af6e:	40e63603          	ld	a2,1038(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1af72:	0001e597          	auipc	a1,0x1e
   1af76:	3365b583          	ld	a1,822(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1af7a:	854a                	c.mv	a0,s2
   1af7c:	ee4fb0ef          	jal	ra,16660 <__cxa_throw@plt>
      throw logic_error("cannot read form with unknown format");
   1af80:	84aa                	c.mv	s1,a0
   1af82:	8522                	c.mv	a0,s0
   1af84:	cecfb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1af88:	8526                	c.mv	a0,s1
   1af8a:	f06fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1af8e:	842a                	c.mv	s0,a0
   1af90:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1af92:	181c                	c.addi4spn	a5,sp,48
   1af94:	00f50463          	beq	a0,a5,1af9c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ca>
   1af98:	d18fb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1af9c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1af9e:	081c                	c.addi4spn	a5,sp,16
   1afa0:	00f50463          	beq	a0,a5,1afa8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2d6>
   1afa4:	d0cfb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw format_error("unknown form " + to_string(form));
   1afa8:	854a                	c.mv	a0,s2
   1afaa:	cc6fb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1afae:	8522                	c.mv	a0,s0
   1afb0:	ee0fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1afb4:	842a                	c.mv	s0,a0
   1afb6:	b7dd                	c.j	1af9c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ca>
   1afb8:	842a                	c.mv	s0,a0
   1afba:	b7fd                	c.j	1afa8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2d6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1afbc:	0007c703          	lbu	a4,0(a5)
    pos += tmp;
   1afc0:	0705                	c.addi	a4,1
   1afc2:	97ba                	c.add	a5,a4
   1afc4:	e81c                	c.sd	a5,16(s0)
    break;
   1afc6:	bb7d                	c.j	1ad84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>

000000000001afc8 <dwarf::cursor::subsection()>:
shared_ptr<section> cursor::subsection() {
   1afc8:	7179                	c.addi16sp	sp,-48
   1afca:	f406                	c.sdsp	ra,40(sp)
   1afcc:	f022                	c.sdsp	s0,32(sp)
   1afce:	ec26                	c.sdsp	s1,24(sp)
   1afd0:	e84a                	c.sdsp	s2,16(sp)
   1afd2:	e44e                	c.sdsp	s3,8(sp)
   1afd4:	e052                	c.sdsp	s4,0(sp)
   1afd6:	892a                	c.mv	s2,a0
   1afd8:	84ae                	c.mv	s1,a1
  const char *begin = pos;
   1afda:	0105b983          	ld	s3,16(a1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1afde:	619c                	c.ld	a5,0(a1)
   1afe0:	6b9c                	c.ld	a5,16(a5)
   1afe2:	413786b3          	sub	a3,a5,s3
   1afe6:	470d                	c.li	a4,3
   1afe8:	00d77463          	bgeu	a4,a3,1aff0 <dwarf::cursor::subsection()+0x28>
   1afec:	00f9e563          	bltu	s3,a5,1aff6 <dwarf::cursor::subsection()+0x2e>
      underflow();
   1aff0:	8526                	c.mv	a0,s1
   1aff2:	c47ff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1aff6:	688c                	c.ld	a1,16(s1)
   1aff8:	6088                	c.ld	a0,0(s1)
    if (sec->ord == byte_order::lsb) {
   1affa:	4d5c                	c.lw	a5,28(a0)
   1affc:	e7d5                	c.bnez	a5,1b0a8 <dwarf::cursor::subsection()+0xe0>
   1affe:	862e                	c.mv	a2,a1
   1b000:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1b002:	02000813          	addi	a6,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1b006:	00064683          	lbu	a3,0(a2)
   1b00a:	00e696b3          	sll	a3,a3,a4
   1b00e:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1b010:	0605                	c.addi	a2,1
   1b012:	2721                	c.addiw	a4,8
   1b014:	ff0719e3          	bne	a4,a6,1b006 <dwarf::cursor::subsection()+0x3e>
    pos += sizeof(T);
   1b018:	0591                	c.addi	a1,4
   1b01a:	e88c                	c.sd	a1,16(s1)
   1b01c:	1782                	c.slli	a5,0x20
   1b01e:	9381                	c.srli	a5,0x20
  if (length < 0xfffffff0) {
   1b020:	4705                	c.li	a4,1
   1b022:	1702                	c.slli	a4,0x20
   1b024:	173d                	c.addi	a4,-17
   1b026:	08f76d63          	bltu	a4,a5,1b0c0 <dwarf::cursor::subsection()+0xf8>
    length += sizeof(uword);
   1b02a:	0791                	c.addi	a5,4
    fmt = format::dwarf32;
   1b02c:	4a05                	c.li	s4,1
  pos = begin + length;
   1b02e:	00f98433          	add	s0,s3,a5
   1b032:	e880                	c.sd	s0,16(s1)
   1b034:	6084                	c.ld	s1,0(s1)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1b036:	00093023          	sd	zero,0(s2)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b03a:	06000513          	addi	a0,zero,96
   1b03e:	c82fb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1b042:	00052423          	sw	zero,8(a0)
   1b046:	00052623          	sw	zero,12(a0)
   1b04a:	00052823          	sw	zero,16(a0)
   1b04e:	00052a23          	sw	zero,20(a0)
   1b052:	00052c23          	sw	zero,24(a0)
   1b056:	00052e23          	sw	zero,28(a0)
   1b05a:	02053023          	sd	zero,32(a0)
   1b05e:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1b062:	4785                	c.li	a5,1
   1b064:	d91c                	c.sw	a5,48(a0)
   1b066:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1b068:	0001e797          	auipc	a5,0x1e
   1b06c:	5507b783          	ld	a5,1360(a5) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   1b070:	07c1                	c.addi	a5,16
   1b072:	e11c                	c.sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1b074:	4098                	c.lw	a4,0(s1)
   1b076:	4cdc                	c.lw	a5,28(s1)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1b078:	dd18                	c.sw	a4,56(a0)
   1b07a:	05353023          	sd	s3,64(a0)
   1b07e:	e520                	c.sd	s0,72(a0)
   1b080:	05452823          	sw	s4,80(a0)
        ord(ord), addr_size(addr_size) {}
   1b084:	c97c                	c.sw	a5,84(a0)
   1b086:	04052c23          	sw	zero,88(a0)
	  _M_pi = __pi;
   1b08a:	00a93423          	sd	a0,8(s2)
   1b08e:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   1b092:	00f93023          	sd	a5,0(s2)
}
   1b096:	854a                	c.mv	a0,s2
   1b098:	70a2                	c.ldsp	ra,40(sp)
   1b09a:	7402                	c.ldsp	s0,32(sp)
   1b09c:	64e2                	c.ldsp	s1,24(sp)
   1b09e:	6942                	c.ldsp	s2,16(sp)
   1b0a0:	69a2                	c.ldsp	s3,8(sp)
   1b0a2:	6a02                	c.ldsp	s4,0(sp)
   1b0a4:	6145                	c.addi16sp	sp,48
   1b0a6:	8082                	c.jr	ra
   1b0a8:	872e                	c.mv	a4,a1
   1b0aa:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1b0ae:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1b0b0:	07a2                	c.slli	a5,0x8
   1b0b2:	00074683          	lbu	a3,0(a4)
   1b0b6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1b0b8:	0705                	c.addi	a4,1
   1b0ba:	fec71be3          	bne	a4,a2,1b0b0 <dwarf::cursor::subsection()+0xe8>
   1b0be:	bfa9                	c.j	1b018 <dwarf::cursor::subsection()+0x50>
  } else if (length == 0xffffffff) {
   1b0c0:	577d                	c.li	a4,-1
   1b0c2:	9301                	c.srli	a4,0x20
   1b0c4:	04e79b63          	bne	a5,a4,1b11a <dwarf::cursor::subsection()+0x152>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b0c8:	691c                	c.ld	a5,16(a0)
   1b0ca:	40b786b3          	sub	a3,a5,a1
   1b0ce:	471d                	c.li	a4,7
   1b0d0:	00d77463          	bgeu	a4,a3,1b0d8 <dwarf::cursor::subsection()+0x110>
   1b0d4:	00f5e563          	bltu	a1,a5,1b0de <dwarf::cursor::subsection()+0x116>
      underflow();
   1b0d8:	8526                	c.mv	a0,s1
   1b0da:	b5fff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b0de:	6898                	c.ld	a4,16(s1)
    if (sec->ord == byte_order::lsb) {
   1b0e0:	609c                	c.ld	a5,0(s1)
   1b0e2:	4fdc                	c.lw	a5,28(a5)
   1b0e4:	e385                	c.bnez	a5,1b104 <dwarf::cursor::subsection()+0x13c>
   1b0e6:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1b0e8:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1b0ec:	00074603          	lbu	a2,0(a4)
   1b0f0:	00d61633          	sll	a2,a2,a3
   1b0f4:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1b0f6:	0705                	c.addi	a4,1
   1b0f8:	26a1                	c.addiw	a3,8
   1b0fa:	feb699e3          	bne	a3,a1,1b0ec <dwarf::cursor::subsection()+0x124>
    length += sizeof(uword) + sizeof(uint64_t);
   1b0fe:	07b1                	c.addi	a5,12
    fmt = format::dwarf64;
   1b100:	4a09                	c.li	s4,2
   1b102:	b735                	c.j	1b02e <dwarf::cursor::subsection()+0x66>
   1b104:	86ba                	c.mv	a3,a4
   1b106:	0721                	c.addi	a4,8
    uint64_t val = 0;
   1b108:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1b10a:	07a2                	c.slli	a5,0x8
   1b10c:	0006c603          	lbu	a2,0(a3)
   1b110:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1b112:	0685                	c.addi	a3,1
   1b114:	fee69be3          	bne	a3,a4,1b10a <dwarf::cursor::subsection()+0x142>
   1b118:	b7dd                	c.j	1b0fe <dwarf::cursor::subsection()+0x136>
    throw format_error("initial length has reserved value");
   1b11a:	4541                	c.li	a0,16
   1b11c:	ab4fb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1b120:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1b122:	00012597          	auipc	a1,0x12
   1b126:	53e58593          	addi	a1,a1,1342 # 2d660 <std::piecewise_construct+0xb0>
   1b12a:	de6fb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   1b12e:	0001e797          	auipc	a5,0x1e
   1b132:	4227b783          	ld	a5,1058(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   1b136:	07c1                	c.addi	a5,16
   1b138:	e01c                	c.sd	a5,0(s0)
   1b13a:	0001e617          	auipc	a2,0x1e
   1b13e:	23e63603          	ld	a2,574(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1b142:	0001e597          	auipc	a1,0x1e
   1b146:	1665b583          	ld	a1,358(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1b14a:	8522                	c.mv	a0,s0
   1b14c:	d14fb0ef          	jal	ra,16660 <__cxa_throw@plt>
   1b150:	84aa                	c.mv	s1,a0
   1b152:	8522                	c.mv	a0,s0
   1b154:	b1cfb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1b158:	8526                	c.mv	a0,s1
   1b15a:	d36fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001b15e <dwarf::cursor::offset()>:
section_offset cursor::offset() {
   1b15e:	1101                	c.addi	sp,-32
   1b160:	ec06                	c.sdsp	ra,24(sp)
   1b162:	e822                	c.sdsp	s0,16(sp)
   1b164:	e426                	c.sdsp	s1,8(sp)
   1b166:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   1b168:	611c                	c.ld	a5,0(a0)
  switch (sec->fmt) {
   1b16a:	4f98                	c.lw	a4,24(a5)
   1b16c:	4685                	c.li	a3,1
   1b16e:	04d70563          	beq	a4,a3,1b1b8 <dwarf::cursor::offset()+0x5a>
   1b172:	4689                	c.li	a3,2
   1b174:	0cd71163          	bne	a4,a3,1b236 <dwarf::cursor::offset()+0xd8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b178:	6b98                	c.ld	a4,16(a5)
   1b17a:	691c                	c.ld	a5,16(a0)
   1b17c:	40f70633          	sub	a2,a4,a5
   1b180:	469d                	c.li	a3,7
   1b182:	00c6f463          	bgeu	a3,a2,1b18a <dwarf::cursor::offset()+0x2c>
   1b186:	00e7e563          	bltu	a5,a4,1b190 <dwarf::cursor::offset()+0x32>
      underflow();
   1b18a:	8522                	c.mv	a0,s0
   1b18c:	aadff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b190:	6810                	c.ld	a2,16(s0)
    if (sec->ord == byte_order::lsb) {
   1b192:	601c                	c.ld	a5,0(s0)
   1b194:	4fdc                	c.lw	a5,28(a5)
   1b196:	e7c1                	c.bnez	a5,1b21e <dwarf::cursor::offset()+0xc0>
   1b198:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1b19a:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1b19c:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1b1a0:	0006c703          	lbu	a4,0(a3)
   1b1a4:	00f71733          	sll	a4,a4,a5
   1b1a8:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1b1aa:	0685                	c.addi	a3,1
   1b1ac:	27a1                	c.addiw	a5,8
   1b1ae:	feb799e3          	bne	a5,a1,1b1a0 <dwarf::cursor::offset()+0x42>
    pos += sizeof(T);
   1b1b2:	00860713          	addi	a4,a2,8
    return fixed<uint64_t>();
   1b1b6:	a091                	c.j	1b1fa <dwarf::cursor::offset()+0x9c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b1b8:	6b98                	c.ld	a4,16(a5)
   1b1ba:	691c                	c.ld	a5,16(a0)
   1b1bc:	40f70633          	sub	a2,a4,a5
   1b1c0:	468d                	c.li	a3,3
   1b1c2:	00c6f463          	bgeu	a3,a2,1b1ca <dwarf::cursor::offset()+0x6c>
   1b1c6:	00e7e563          	bltu	a5,a4,1b1d0 <dwarf::cursor::offset()+0x72>
      underflow();
   1b1ca:	8522                	c.mv	a0,s0
   1b1cc:	a6dff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b1d0:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1b1d2:	601c                	c.ld	a5,0(s0)
   1b1d4:	4fdc                	c.lw	a5,28(a5)
   1b1d6:	eb85                	c.bnez	a5,1b206 <dwarf::cursor::offset()+0xa8>
   1b1d8:	85ba                	c.mv	a1,a4
   1b1da:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1b1dc:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1b1e0:	0005c603          	lbu	a2,0(a1)
   1b1e4:	00d61633          	sll	a2,a2,a3
   1b1e8:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1b1ea:	0585                	c.addi	a1,1
   1b1ec:	26a1                	c.addiw	a3,8
   1b1ee:	fea699e3          	bne	a3,a0,1b1e0 <dwarf::cursor::offset()+0x82>
    pos += sizeof(T);
   1b1f2:	0711                	c.addi	a4,4
   1b1f4:	02079513          	slli	a0,a5,0x20
   1b1f8:	9101                	c.srli	a0,0x20
   1b1fa:	e818                	c.sd	a4,16(s0)
}
   1b1fc:	60e2                	c.ldsp	ra,24(sp)
   1b1fe:	6442                	c.ldsp	s0,16(sp)
   1b200:	64a2                	c.ldsp	s1,8(sp)
   1b202:	6105                	c.addi16sp	sp,32
   1b204:	8082                	c.jr	ra
   1b206:	86ba                	c.mv	a3,a4
   1b208:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1b20c:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1b20e:	07a2                	c.slli	a5,0x8
   1b210:	0006c603          	lbu	a2,0(a3)
   1b214:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1b216:	0685                	c.addi	a3,1
   1b218:	feb69be3          	bne	a3,a1,1b20e <dwarf::cursor::offset()+0xb0>
   1b21c:	bfd9                	c.j	1b1f2 <dwarf::cursor::offset()+0x94>
   1b21e:	87b2                	c.mv	a5,a2
   1b220:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1b224:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1b226:	0522                	c.slli	a0,0x8
   1b228:	0007c703          	lbu	a4,0(a5)
   1b22c:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1b22e:	0785                	c.addi	a5,1
   1b230:	fed79be3          	bne	a5,a3,1b226 <dwarf::cursor::offset()+0xc8>
   1b234:	bfbd                	c.j	1b1b2 <dwarf::cursor::offset()+0x54>
    throw logic_error("cannot read offset with unknown format");
   1b236:	4541                	c.li	a0,16
   1b238:	998fb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1b23c:	842a                	c.mv	s0,a0
   1b23e:	00012597          	auipc	a1,0x12
   1b242:	44a58593          	addi	a1,a1,1098 # 2d688 <std::piecewise_construct+0xd8>
   1b246:	b6afb0ef          	jal	ra,165b0 <std::logic_error::logic_error(char const*)@plt>
   1b24a:	0001e617          	auipc	a2,0x1e
   1b24e:	21e63603          	ld	a2,542(a2) # 39468 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1b252:	0001e597          	auipc	a1,0x1e
   1b256:	31e5b583          	ld	a1,798(a1) # 39570 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1b25a:	8522                	c.mv	a0,s0
   1b25c:	c04fb0ef          	jal	ra,16660 <__cxa_throw@plt>
   1b260:	84aa                	c.mv	s1,a0
   1b262:	8522                	c.mv	a0,s0
   1b264:	a0cfb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1b268:	8526                	c.mv	a0,s1
   1b26a:	c26fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001b26e <dwarf::die::die(dwarf::unit const*)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

die::die(const unit *cu) : cu(cu), abbrev(nullptr) {}
   1b26e:	e50c                	c.sd	a1,8(a0)
   1b270:	00053823          	sd	zero,16(a0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1b274:	02050793          	addi	a5,a0,32
   1b278:	e93c                	c.sd	a5,80(a0)
   1b27a:	ed3c                	c.sd	a5,88(a0)
   1b27c:	05050793          	addi	a5,a0,80
   1b280:	f13c                	c.sd	a5,96(a0)
   1b282:	8082                	c.jr	ra

000000000001b284 <dwarf::die::get_unit() const>:

const unit &die::get_unit() const { return *cu; }
   1b284:	6508                	c.ld	a0,8(a0)
   1b286:	8082                	c.jr	ra

000000000001b288 <dwarf::die::get_section_offset() const>:

section_offset die::get_section_offset() const {
   1b288:	1141                	c.addi	sp,-16
   1b28a:	e406                	c.sdsp	ra,8(sp)
   1b28c:	e022                	c.sdsp	s0,0(sp)
   1b28e:	842a                	c.mv	s0,a0
  return cu->get_section_offset() + offset;
   1b290:	6508                	c.ld	a0,8(a0)
   1b292:	e47fb0ef          	jal	ra,170d8 <dwarf::unit::get_section_offset() const>
   1b296:	6c1c                	c.ld	a5,24(s0)
}
   1b298:	953e                	c.add	a0,a5
   1b29a:	60a2                	c.ldsp	ra,8(sp)
   1b29c:	6402                	c.ldsp	s0,0(sp)
   1b29e:	0141                	c.addi	sp,16
   1b2a0:	8082                	c.jr	ra

000000000001b2a2 <dwarf::die::read(unsigned long)>:

void die::read(section_offset off) {
   1b2a2:	7159                	c.addi16sp	sp,-112
   1b2a4:	f486                	c.sdsp	ra,104(sp)
   1b2a6:	f0a2                	c.sdsp	s0,96(sp)
   1b2a8:	eca6                	c.sdsp	s1,88(sp)
   1b2aa:	e8ca                	c.sdsp	s2,80(sp)
   1b2ac:	e4ce                	c.sdsp	s3,72(sp)
   1b2ae:	e0d2                	c.sdsp	s4,64(sp)
   1b2b0:	fc56                	c.sdsp	s5,56(sp)
   1b2b2:	f85a                	c.sdsp	s6,48(sp)
   1b2b4:	f45e                	c.sdsp	s7,40(sp)
   1b2b6:	f062                	c.sdsp	s8,32(sp)
   1b2b8:	84aa                	c.mv	s1,a0
   1b2ba:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), off);
   1b2bc:	6508                	c.ld	a0,8(a0)
   1b2be:	e21fb0ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1b2c2:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1b2c6:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1b2c8:	30040e63          	beq	s0,zero,1b5e4 <dwarf::die::read(unsigned long)+0x342>
    if (__is_single_threaded())
   1b2cc:	0001e797          	auipc	a5,0x1e
   1b2d0:	1ac7b783          	ld	a5,428(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b2d4:	0007c783          	lbu	a5,0(a5)
   1b2d8:	cbbd                	c.beqz	a5,1b34e <dwarf::die::read(unsigned long)+0xac>
  { *__mem += __val; }
   1b2da:	581c                	c.lw	a5,48(s0)
   1b2dc:	2785                	c.addiw	a5,1
   1b2de:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1b2e0:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1b2e2:	e822                	c.sdsp	s0,16(sp)
    if (__is_single_threaded())
   1b2e4:	0001e797          	auipc	a5,0x1e
   1b2e8:	1947b783          	ld	a5,404(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b2ec:	0007c783          	lbu	a5,0(a5)
   1b2f0:	c7ad                	c.beqz	a5,1b35a <dwarf::die::read(unsigned long)+0xb8>
  { *__mem += __val; }
   1b2f2:	581c                	c.lw	a5,48(s0)
   1b2f4:	2785                	c.addiw	a5,1
   1b2f6:	d81c                	c.sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   1b2f8:	0089b783          	ld	a5,8(s3)
   1b2fc:	97ca                	c.add	a5,s2
   1b2fe:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   1b300:	0001e797          	auipc	a5,0x1e
   1b304:	1787b783          	ld	a5,376(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b308:	0007c783          	lbu	a5,0(a5)
   1b30c:	cfa9                	c.beqz	a5,1b366 <dwarf::die::read(unsigned long)+0xc4>
    _Atomic_word __result = *__mem;
   1b30e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1b310:	fff5079b          	addiw	a5,a0,-1
   1b314:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b316:	4785                	c.li	a5,1
   1b318:	2cf51c63          	bne	a0,a5,1b5f0 <dwarf::die::read(unsigned long)+0x34e>
	_M_dispose();
   1b31c:	601c                	c.ld	a5,0(s0)
   1b31e:	6b9c                	c.ld	a5,16(a5)
   1b320:	8522                	c.mv	a0,s0
   1b322:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b324:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b328:	0001e797          	auipc	a5,0x1e
   1b32c:	1507b783          	ld	a5,336(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b330:	0007c783          	lbu	a5,0(a5)
   1b334:	cf9d                	c.beqz	a5,1b372 <dwarf::die::read(unsigned long)+0xd0>
    _Atomic_word __result = *__mem;
   1b336:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1b338:	fff7871b          	addiw	a4,a5,-1
   1b33c:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b33e:	4705                	c.li	a4,1
   1b340:	2ae79863          	bne	a5,a4,1b5f0 <dwarf::die::read(unsigned long)+0x34e>
	    _M_destroy();
   1b344:	601c                	c.ld	a5,0(s0)
   1b346:	6f9c                	c.ld	a5,24(a5)
   1b348:	8522                	c.mv	a0,s0
   1b34a:	9782                	c.jalr	a5
   1b34c:	a455                	c.j	1b5f0 <dwarf::die::read(unsigned long)+0x34e>
      __atomic_add(__mem, __val);
   1b34e:	4585                	c.li	a1,1
   1b350:	03040513          	addi	a0,s0,48
   1b354:	fadfa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1b358:	b761                	c.j	1b2e0 <dwarf::die::read(unsigned long)+0x3e>
   1b35a:	4585                	c.li	a1,1
   1b35c:	03040513          	addi	a0,s0,48
   1b360:	fa1fa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1b364:	bf51                	c.j	1b2f8 <dwarf::die::read(unsigned long)+0x56>
      return __exchange_and_add(__mem, __val);
   1b366:	55fd                	c.li	a1,-1
   1b368:	03040513          	addi	a0,s0,48
   1b36c:	fc5fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b370:	b75d                	c.j	1b316 <dwarf::die::read(unsigned long)+0x74>
   1b372:	55fd                	c.li	a1,-1
   1b374:	03440513          	addi	a0,s0,52
   1b378:	fb9fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b37c:	87aa                	c.mv	a5,a0
   1b37e:	b7c1                	c.j	1b33e <dwarf::die::read(unsigned long)+0x9c>
    return 0;
   1b380:	4581                	c.li	a1,0

  offset = off;

  abbrev_code acode = cur.uleb128();
  if (acode == 0) {
   1b382:	e9d1                	c.bnez	a1,1b416 <dwarf::die::read(unsigned long)+0x174>
    abbrev = nullptr;
   1b384:	0004b823          	sd	zero,16(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1b388:	67a2                	c.ldsp	a5,8(sp)
   1b38a:	6798                	c.ld	a4,8(a5)
   1b38c:	67e2                	c.ldsp	a5,24(sp)
   1b38e:	8f99                	c.sub	a5,a4
    next = cur.get_section_offset();
   1b390:	f4bc                	c.sd	a5,104(s1)
	if (_M_pi != nullptr)
   1b392:	6442                	c.ldsp	s0,16(sp)
   1b394:	cc19                	c.beqz	s0,1b3b2 <dwarf::die::read(unsigned long)+0x110>
    if (__is_single_threaded())
   1b396:	0001e797          	auipc	a5,0x1e
   1b39a:	0e27b783          	ld	a5,226(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b39e:	0007c783          	lbu	a5,0(a5)
   1b3a2:	c785                	c.beqz	a5,1b3ca <dwarf::die::read(unsigned long)+0x128>
    _Atomic_word __result = *__mem;
   1b3a4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1b3a6:	fff5079b          	addiw	a5,a0,-1
   1b3aa:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b3ac:	4785                	c.li	a5,1
   1b3ae:	02f50463          	beq	a0,a5,1b3d6 <dwarf::die::read(unsigned long)+0x134>
  for (auto &attr : abbrev->attributes) {
    attrs.push_back(cur.get_section_offset());
    cur.skip_form(attr.form);
  }
  next = cur.get_section_offset();
}
   1b3b2:	70a6                	c.ldsp	ra,104(sp)
   1b3b4:	7406                	c.ldsp	s0,96(sp)
   1b3b6:	64e6                	c.ldsp	s1,88(sp)
   1b3b8:	6946                	c.ldsp	s2,80(sp)
   1b3ba:	69a6                	c.ldsp	s3,72(sp)
   1b3bc:	6a06                	c.ldsp	s4,64(sp)
   1b3be:	7ae2                	c.ldsp	s5,56(sp)
   1b3c0:	7b42                	c.ldsp	s6,48(sp)
   1b3c2:	7ba2                	c.ldsp	s7,40(sp)
   1b3c4:	7c02                	c.ldsp	s8,32(sp)
   1b3c6:	6165                	c.addi16sp	sp,112
   1b3c8:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1b3ca:	55fd                	c.li	a1,-1
   1b3cc:	03040513          	addi	a0,s0,48
   1b3d0:	f61fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b3d4:	bfe1                	c.j	1b3ac <dwarf::die::read(unsigned long)+0x10a>
	_M_dispose();
   1b3d6:	601c                	c.ld	a5,0(s0)
   1b3d8:	6b9c                	c.ld	a5,16(a5)
   1b3da:	8522                	c.mv	a0,s0
   1b3dc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b3de:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b3e2:	0001e797          	auipc	a5,0x1e
   1b3e6:	0967b783          	ld	a5,150(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b3ea:	0007c783          	lbu	a5,0(a5)
   1b3ee:	cf89                	c.beqz	a5,1b408 <dwarf::die::read(unsigned long)+0x166>
    _Atomic_word __result = *__mem;
   1b3f0:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1b3f2:	fff7871b          	addiw	a4,a5,-1
   1b3f6:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b3f8:	4705                	c.li	a4,1
   1b3fa:	fae79ce3          	bne	a5,a4,1b3b2 <dwarf::die::read(unsigned long)+0x110>
	    _M_destroy();
   1b3fe:	601c                	c.ld	a5,0(s0)
   1b400:	6f9c                	c.ld	a5,24(a5)
   1b402:	8522                	c.mv	a0,s0
   1b404:	9782                	c.jalr	a5
   1b406:	b775                	c.j	1b3b2 <dwarf::die::read(unsigned long)+0x110>
      return __exchange_and_add(__mem, __val);
   1b408:	55fd                	c.li	a1,-1
   1b40a:	03440513          	addi	a0,s0,52
   1b40e:	f23fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b412:	87aa                	c.mv	a5,a0
   1b414:	b7d5                	c.j	1b3f8 <dwarf::die::read(unsigned long)+0x156>
  abbrev = &cu->get_abbrev(acode);
   1b416:	6488                	c.ld	a0,8(s1)
   1b418:	856fe0ef          	jal	ra,1946e <dwarf::unit::get_abbrev(unsigned long) const>
   1b41c:	e888                	c.sd	a0,16(s1)
  tag = abbrev->tag;
   1b41e:	451c                	c.lw	a5,8(a0)
   1b420:	c09c                	c.sw	a5,0(s1)
  attrs.clear();
   1b422:	02048b13          	addi	s6,s1,32
    for (T *p = base; p < end; ++p)
   1b426:	68b4                	c.ld	a3,80(s1)
   1b428:	6cbc                	c.ld	a5,88(s1)
   1b42a:	00f6f763          	bgeu	a3,a5,1b438 <dwarf::die::read(unsigned long)+0x196>
   1b42e:	87b6                	c.mv	a5,a3
   1b430:	07a1                	c.addi	a5,8
   1b432:	6cb8                	c.ld	a4,88(s1)
   1b434:	fee7eee3          	bltu	a5,a4,1b430 <dwarf::die::read(unsigned long)+0x18e>
    end = base;
   1b438:	ecb4                	c.sd	a3,88(s1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b43a:	6d18                	c.ld	a4,24(a0)
   1b43c:	691c                	c.ld	a5,16(a0)
   1b43e:	8f1d                	c.sub	a4,a5
   1b440:	8709                	c.srai	a4,0x2
   1b442:	00012797          	auipc	a5,0x12
   1b446:	15e7b783          	ld	a5,350(a5) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1b44a:	02f70733          	mul	a4,a4,a5
    if (n <= (size_type)(cap - base))
   1b44e:	70bc                	c.ld	a5,96(s1)
   1b450:	8f95                	c.sub	a5,a3
   1b452:	878d                	c.srai	a5,0x3
   1b454:	04e7fb63          	bgeu	a5,a4,1b4aa <dwarf::die::read(unsigned long)+0x208>
   1b458:	e391                	c.bnez	a5,1b45c <dwarf::die::read(unsigned long)+0x1ba>
   1b45a:	4785                	c.li	a5,1
    while (target < n)
   1b45c:	00e7f563          	bgeu	a5,a4,1b466 <dwarf::die::read(unsigned long)+0x1c4>
      target <<= 1;
   1b460:	0786                	c.slli	a5,0x1
    while (target < n)
   1b462:	fee7efe3          	bltu	a5,a4,1b460 <dwarf::die::read(unsigned long)+0x1be>
    char *newbuf = new char[sizeof(T[target])];
   1b466:	00379413          	slli	s0,a5,0x3
   1b46a:	8522                	c.mv	a0,s0
   1b46c:	e75fa0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1b470:	89aa                	c.mv	s3,a0
    T *src = base, *dest = (T *)newbuf;
   1b472:	68a8                	c.ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1b474:	6cb8                	c.ld	a4,88(s1)
   1b476:	04e57463          	bgeu	a0,a4,1b4be <dwarf::die::read(unsigned long)+0x21c>
    T *src = base, *dest = (T *)newbuf;
   1b47a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1b47c:	07a1                	c.addi	a5,8
   1b47e:	fee7efe3          	bltu	a5,a4,1b47c <dwarf::die::read(unsigned long)+0x1da>
   1b482:	fff70913          	addi	s2,a4,-1
   1b486:	40a90933          	sub	s2,s2,a0
   1b48a:	ff897913          	andi	s2,s2,-8
   1b48e:	0921                	c.addi	s2,8
   1b490:	994e                	c.add	s2,s3
    if ((char *)base != buf)
   1b492:	00ab0563          	beq	s6,a0,1b49c <dwarf::die::read(unsigned long)+0x1fa>
      delete[] (char *)base;
   1b496:	c119                	c.beqz	a0,1b49c <dwarf::die::read(unsigned long)+0x1fa>
   1b498:	8c8fb0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1b49c:	0534b823          	sd	s3,80(s1)
    end = dest;
   1b4a0:	0524bc23          	sd	s2,88(s1)
    cap = base + target;
   1b4a4:	99a2                	c.add	s3,s0
   1b4a6:	0734b023          	sd	s3,96(s1)
  for (auto &attr : abbrev->attributes) {
   1b4aa:	689c                	c.ld	a5,16(s1)
      : _M_current(__i) { }
   1b4ac:	0107b903          	ld	s2,16(a5)
   1b4b0:	0187ba03          	ld	s4,24(a5)
   1b4b4:	0b2a0163          	beq	s4,s2,1b556 <dwarf::die::read(unsigned long)+0x2b4>
    cur.skip_form(attr.form);
   1b4b8:	00810a93          	addi	s5,sp,8
   1b4bc:	a08d                	c.j	1b51e <dwarf::die::read(unsigned long)+0x27c>
    T *src = base, *dest = (T *)newbuf;
   1b4be:	894e                	c.mv	s2,s3
   1b4c0:	bfc9                	c.j	1b492 <dwarf::die::read(unsigned long)+0x1f0>
    char *newbuf = new char[sizeof(T[target])];
   1b4c2:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1b4c4:	68a8                	c.ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1b4c6:	6cb8                	c.ld	a4,88(s1)
   1b4c8:	04e57663          	bgeu	a0,a4,1b514 <dwarf::die::read(unsigned long)+0x272>
    T *src = base, *dest = (T *)newbuf;
   1b4cc:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1b4ce:	07a1                	c.addi	a5,8
   1b4d0:	fee7efe3          	bltu	a5,a4,1b4ce <dwarf::die::read(unsigned long)+0x22c>
   1b4d4:	fff70b93          	addi	s7,a4,-1
   1b4d8:	40ab8bb3          	sub	s7,s7,a0
   1b4dc:	ff8bfb93          	andi	s7,s7,-8
   1b4e0:	0ba1                	c.addi	s7,8
   1b4e2:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1b4e4:	00ab0563          	beq	s6,a0,1b4ee <dwarf::die::read(unsigned long)+0x24c>
      delete[] (char *)base;
   1b4e8:	c119                	c.beqz	a0,1b4ee <dwarf::die::read(unsigned long)+0x24c>
   1b4ea:	876fb0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1b4ee:	0584b823          	sd	s8,80(s1)
    end = dest;
   1b4f2:	0574bc23          	sd	s7,88(s1)
    cap = base + target;
   1b4f6:	9c22                	c.add	s8,s0
   1b4f8:	0784b023          	sd	s8,96(s1)
    new (end) T(std::move(x));
   1b4fc:	6cbc                	c.ld	a5,88(s1)
   1b4fe:	0137b023          	sd	s3,0(a5)
    end++;
   1b502:	6cbc                	c.ld	a5,88(s1)
   1b504:	07a1                	c.addi	a5,8
   1b506:	ecbc                	c.sd	a5,88(s1)
   1b508:	00492583          	lw	a1,4(s2)
   1b50c:	8556                	c.mv	a0,s5
   1b50e:	fc4ff0ef          	jal	ra,1acd2 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
   1b512:	a019                	c.j	1b518 <dwarf::die::read(unsigned long)+0x276>
    T *src = base, *dest = (T *)newbuf;
   1b514:	8be2                	c.mv	s7,s8
   1b516:	b7f9                	c.j	1b4e4 <dwarf::die::read(unsigned long)+0x242>
  for (auto &attr : abbrev->attributes) {
   1b518:	0931                	c.addi	s2,12
   1b51a:	032a0e63          	beq	s4,s2,1b556 <dwarf::die::read(unsigned long)+0x2b4>
   1b51e:	67a2                	c.ldsp	a5,8(sp)
   1b520:	679c                	c.ld	a5,8(a5)
   1b522:	69e2                	c.ldsp	s3,24(sp)
   1b524:	40f989b3          	sub	s3,s3,a5
  size_type size() const { return end - base; }
   1b528:	68b4                	c.ld	a3,80(s1)
   1b52a:	6cb8                	c.ld	a4,88(s1)
   1b52c:	8f15                	c.sub	a4,a3
   1b52e:	870d                	c.srai	a4,0x3
    reserve(size() + 1);
   1b530:	0705                	c.addi	a4,1
    if (n <= (size_type)(cap - base))
   1b532:	70bc                	c.ld	a5,96(s1)
   1b534:	8f95                	c.sub	a5,a3
   1b536:	878d                	c.srai	a5,0x3
   1b538:	fce7f2e3          	bgeu	a5,a4,1b4fc <dwarf::die::read(unsigned long)+0x25a>
   1b53c:	e391                	c.bnez	a5,1b540 <dwarf::die::read(unsigned long)+0x29e>
   1b53e:	4785                	c.li	a5,1
    while (target < n)
   1b540:	00e7f563          	bgeu	a5,a4,1b54a <dwarf::die::read(unsigned long)+0x2a8>
      target <<= 1;
   1b544:	0786                	c.slli	a5,0x1
    while (target < n)
   1b546:	fee7efe3          	bltu	a5,a4,1b544 <dwarf::die::read(unsigned long)+0x2a2>
    char *newbuf = new char[sizeof(T[target])];
   1b54a:	00379413          	slli	s0,a5,0x3
   1b54e:	8522                	c.mv	a0,s0
   1b550:	d91fa0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1b554:	b7bd                	c.j	1b4c2 <dwarf::die::read(unsigned long)+0x220>
   1b556:	67a2                	c.ldsp	a5,8(sp)
   1b558:	6798                	c.ld	a4,8(a5)
   1b55a:	67e2                	c.ldsp	a5,24(sp)
   1b55c:	8f99                	c.sub	a5,a4
  next = cur.get_section_offset();
   1b55e:	f4bc                	c.sd	a5,104(s1)
	if (_M_pi != nullptr)
   1b560:	6442                	c.ldsp	s0,16(sp)
   1b562:	e40408e3          	beq	s0,zero,1b3b2 <dwarf::die::read(unsigned long)+0x110>
    if (__is_single_threaded())
   1b566:	0001e797          	auipc	a5,0x1e
   1b56a:	f127b783          	ld	a5,-238(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b56e:	0007c783          	lbu	a5,0(a5)
   1b572:	c3a9                	c.beqz	a5,1b5b4 <dwarf::die::read(unsigned long)+0x312>
    _Atomic_word __result = *__mem;
   1b574:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1b576:	fff5079b          	addiw	a5,a0,-1
   1b57a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b57c:	4785                	c.li	a5,1
   1b57e:	e2f51ae3          	bne	a0,a5,1b3b2 <dwarf::die::read(unsigned long)+0x110>
	_M_dispose();
   1b582:	601c                	c.ld	a5,0(s0)
   1b584:	6b9c                	c.ld	a5,16(a5)
   1b586:	8522                	c.mv	a0,s0
   1b588:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b58a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b58e:	0001e797          	auipc	a5,0x1e
   1b592:	eea7b783          	ld	a5,-278(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b596:	0007c783          	lbu	a5,0(a5)
   1b59a:	c39d                	c.beqz	a5,1b5c0 <dwarf::die::read(unsigned long)+0x31e>
    _Atomic_word __result = *__mem;
   1b59c:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1b59e:	fff7871b          	addiw	a4,a5,-1
   1b5a2:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b5a4:	4705                	c.li	a4,1
   1b5a6:	e0e796e3          	bne	a5,a4,1b3b2 <dwarf::die::read(unsigned long)+0x110>
	    _M_destroy();
   1b5aa:	601c                	c.ld	a5,0(s0)
   1b5ac:	6f9c                	c.ld	a5,24(a5)
   1b5ae:	8522                	c.mv	a0,s0
   1b5b0:	9782                	c.jalr	a5
   1b5b2:	b501                	c.j	1b3b2 <dwarf::die::read(unsigned long)+0x110>
      return __exchange_and_add(__mem, __val);
   1b5b4:	55fd                	c.li	a1,-1
   1b5b6:	03040513          	addi	a0,s0,48
   1b5ba:	d77fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b5be:	bf7d                	c.j	1b57c <dwarf::die::read(unsigned long)+0x2da>
   1b5c0:	55fd                	c.li	a1,-1
   1b5c2:	03440513          	addi	a0,s0,52
   1b5c6:	d6bfa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b5ca:	87aa                	c.mv	a5,a0
   1b5cc:	bfe1                	c.j	1b5a4 <dwarf::die::read(unsigned long)+0x302>
	if (_M_pi != nullptr)
   1b5ce:	842a                	c.mv	s0,a0
   1b5d0:	6542                	c.ldsp	a0,16(sp)
   1b5d2:	c511                	c.beqz	a0,1b5de <dwarf::die::read(unsigned long)+0x33c>
	  _M_pi->_M_release();
   1b5d4:	0001e317          	auipc	t1,0x1e
   1b5d8:	dec33303          	ld	t1,-532(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1b5dc:	9302                	c.jalr	t1
   1b5de:	8522                	c.mv	a0,s0
   1b5e0:	8b0fb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1b5e4:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1b5e6:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1b5e8:	0089b783          	ld	a5,8(s3)
   1b5ec:	97ca                	c.add	a5,s2
   1b5ee:	ec3e                	c.sdsp	a5,24(sp)
  offset = off;
   1b5f0:	0124bc23          	sd	s2,24(s1)
    while (pos < sec->end) {
   1b5f4:	67e2                	c.ldsp	a5,24(sp)
      { return _M_ptr; }
   1b5f6:	6522                	c.ldsp	a0,8(sp)
   1b5f8:	6918                	c.ld	a4,16(a0)
   1b5fa:	02e7f763          	bgeu	a5,a4,1b628 <dwarf::die::read(unsigned long)+0x386>
    std::uint64_t result = 0;
   1b5fe:	4581                	c.li	a1,0
    int shift = 0;
   1b600:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   1b602:	0785                	c.addi	a5,1
   1b604:	ec3e                	c.sdsp	a5,24(sp)
   1b606:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1b60a:	07f77693          	andi	a3,a4,127
   1b60e:	00c696b3          	sll	a3,a3,a2
   1b612:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1b614:	0187171b          	slliw	a4,a4,0x18
   1b618:	4187571b          	sraiw	a4,a4,0x18
   1b61c:	d60753e3          	bge	a4,zero,1b382 <dwarf::die::read(unsigned long)+0xe0>
      shift += 7;
   1b620:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1b622:	6918                	c.ld	a4,16(a0)
   1b624:	fce7efe3          	bltu	a5,a4,1b602 <dwarf::die::read(unsigned long)+0x360>
    underflow();
   1b628:	0028                	c.addi4spn	a0,sp,8
   1b62a:	e0eff0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1b62e:	bb89                	c.j	1b380 <dwarf::die::read(unsigned long)+0xde>

000000000001b630 <dwarf::die::has(dwarf::DW_AT) const>:

bool die::has(DW_AT attr) const {
  if (!abbrev)
   1b630:	6918                	c.ld	a4,16(a0)
   1b632:	cf09                	c.beqz	a4,1b64c <dwarf::die::has(dwarf::DW_AT) const+0x1c>
   1b634:	6b1c                	c.ld	a5,16(a4)
   1b636:	6f14                	c.ld	a3,24(a4)
    return false;
  // XXX Totally lame
  for (auto &a : abbrev->attributes)
   1b638:	00f68c63          	beq	a3,a5,1b650 <dwarf::die::has(dwarf::DW_AT) const+0x20>
    if (a.name == attr)
   1b63c:	4398                	c.lw	a4,0(a5)
   1b63e:	00b70b63          	beq	a4,a1,1b654 <dwarf::die::has(dwarf::DW_AT) const+0x24>
  for (auto &a : abbrev->attributes)
   1b642:	07b1                	c.addi	a5,12
   1b644:	fef69ce3          	bne	a3,a5,1b63c <dwarf::die::has(dwarf::DW_AT) const+0xc>
      return true;
  return false;
   1b648:	4501                	c.li	a0,0
   1b64a:	8082                	c.jr	ra
    return false;
   1b64c:	4501                	c.li	a0,0
   1b64e:	8082                	c.jr	ra
  return false;
   1b650:	4501                	c.li	a0,0
   1b652:	8082                	c.jr	ra
      return true;
   1b654:	4505                	c.li	a0,1
}
   1b656:	8082                	c.jr	ra

000000000001b658 <dwarf::die::operator[](dwarf::DW_AT) const>:

value die::operator[](DW_AT attr) const {
   1b658:	711d                	c.addi16sp	sp,-96
   1b65a:	ec86                	c.sdsp	ra,88(sp)
   1b65c:	e8a2                	c.sdsp	s0,80(sp)
   1b65e:	e4a6                	c.sdsp	s1,72(sp)
   1b660:	8432                	c.mv	s0,a2
  // XXX We can pre-compute almost all of this work in the
  // abbrev_entry.
  if (abbrev) {
   1b662:	699c                	c.ld	a5,16(a1)
   1b664:	c3a1                	c.beqz	a5,1b6a4 <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
   1b666:	84aa                	c.mv	s1,a0
   1b668:	6b94                	c.ld	a3,16(a5)
   1b66a:	6f90                	c.ld	a2,24(a5)
    int i = 0;
    for (auto &a : abbrev->attributes) {
   1b66c:	02d60c63          	beq	a2,a3,1b6a4 <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
    int i = 0;
   1b670:	4781                	c.li	a5,0
   1b672:	a029                	c.j	1b67c <dwarf::die::operator[](dwarf::DW_AT) const+0x24>
      if (a.name == attr)
        return value(cu, a.name, a.form, a.type, attrs[i]);
      i++;
   1b674:	2785                	c.addiw	a5,1
    for (auto &a : abbrev->attributes) {
   1b676:	06b1                	c.addi	a3,12
   1b678:	02d60663          	beq	a2,a3,1b6a4 <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
      if (a.name == attr)
   1b67c:	4298                	c.lw	a4,0(a3)
   1b67e:	fe871be3          	bne	a4,s0,1b674 <dwarf::die::operator[](dwarf::DW_AT) const+0x1c>
        return value(cu, a.name, a.form, a.type, attrs[i]);
   1b682:	69b8                	c.ld	a4,80(a1)
   1b684:	078e                	c.slli	a5,0x3
   1b686:	97ba                	c.add	a5,a4
   1b688:	639c                	c.ld	a5,0(a5)
   1b68a:	4698                	c.lw	a4,8(a3)
   1b68c:	42d4                	c.lw	a3,4(a3)
   1b68e:	8622                	c.mv	a2,s0
   1b690:	658c                	c.ld	a1,8(a1)
   1b692:	8526                	c.mv	a0,s1
   1b694:	332020ef          	jal	ra,1d9c6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
    }
  }
  throw out_of_range("DIE does not have attribute " + to_string(attr));
}
   1b698:	8526                	c.mv	a0,s1
   1b69a:	60e6                	c.ldsp	ra,88(sp)
   1b69c:	6446                	c.ldsp	s0,80(sp)
   1b69e:	64a6                	c.ldsp	s1,72(sp)
   1b6a0:	6125                	c.addi16sp	sp,96
   1b6a2:	8082                	c.jr	ra
  throw out_of_range("DIE does not have attribute " + to_string(attr));
   1b6a4:	4541                	c.li	a0,16
   1b6a6:	d2bfa0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1b6aa:	84aa                	c.mv	s1,a0
   1b6ac:	85a2                	c.mv	a1,s0
   1b6ae:	850a                	c.mv	a0,sp
   1b6b0:	6c10d0ef          	jal	ra,29570 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1b6b4:	00012617          	auipc	a2,0x12
   1b6b8:	08460613          	addi	a2,a2,132 # 2d738 <std::piecewise_construct+0x188>
   1b6bc:	4581                	c.li	a1,0
   1b6be:	850a                	c.mv	a0,sp
   1b6c0:	c81fa0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1b6c4:	85aa                	c.mv	a1,a0
   1b6c6:	1000                	c.addi4spn	s0,sp,32
   1b6c8:	8522                	c.mv	a0,s0
   1b6ca:	d47fa0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1b6ce:	85a2                	c.mv	a1,s0
   1b6d0:	8526                	c.mv	a0,s1
   1b6d2:	f1ffa0ef          	jal	ra,165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1b6d6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1b6d8:	181c                	c.addi4spn	a5,sp,48
   1b6da:	00f50463          	beq	a0,a5,1b6e2 <dwarf::die::operator[](dwarf::DW_AT) const+0x8a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b6de:	dd3fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b6e2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1b6e4:	081c                	c.addi4spn	a5,sp,16
   1b6e6:	00f50463          	beq	a0,a5,1b6ee <dwarf::die::operator[](dwarf::DW_AT) const+0x96>
   1b6ea:	dc7fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1b6ee:	0001e617          	auipc	a2,0x1e
   1b6f2:	dca63603          	ld	a2,-566(a2) # 394b8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   1b6f6:	0001e597          	auipc	a1,0x1e
   1b6fa:	e725b583          	ld	a1,-398(a1) # 39568 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   1b6fe:	8526                	c.mv	a0,s1
   1b700:	f61fa0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1b704:	842a                	c.mv	s0,a0
   1b706:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1b708:	181c                	c.addi4spn	a5,sp,48
   1b70a:	00f50463          	beq	a0,a5,1b712 <dwarf::die::operator[](dwarf::DW_AT) const+0xba>
   1b70e:	da3fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b712:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1b714:	081c                	c.addi4spn	a5,sp,16
   1b716:	00f50463          	beq	a0,a5,1b71e <dwarf::die::operator[](dwarf::DW_AT) const+0xc6>
   1b71a:	d97fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1b71e:	8526                	c.mv	a0,s1
   1b720:	d51fa0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1b724:	8522                	c.mv	a0,s0
   1b726:	f6bfa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1b72a:	842a                	c.mv	s0,a0
   1b72c:	b7dd                	c.j	1b712 <dwarf::die::operator[](dwarf::DW_AT) const+0xba>
   1b72e:	842a                	c.mv	s0,a0
   1b730:	b7fd                	c.j	1b71e <dwarf::die::operator[](dwarf::DW_AT) const+0xc6>

000000000001b732 <dwarf::die::operator==(dwarf::die const&) const>:
  }
  return res;
}

bool die::operator==(const die &o) const {
  return cu == o.cu && offset == o.offset;
   1b732:	6518                	c.ld	a4,8(a0)
   1b734:	659c                	c.ld	a5,8(a1)
   1b736:	00f70463          	beq	a4,a5,1b73e <dwarf::die::operator==(dwarf::die const&) const+0xc>
   1b73a:	4501                	c.li	a0,0
}
   1b73c:	8082                	c.jr	ra
  return cu == o.cu && offset == o.offset;
   1b73e:	6d08                	c.ld	a0,24(a0)
   1b740:	6d9c                	c.ld	a5,24(a1)
   1b742:	8d1d                	c.sub	a0,a5
   1b744:	00153513          	sltiu	a0,a0,1
   1b748:	8082                	c.jr	ra

000000000001b74a <dwarf::die::operator!=(dwarf::die const&) const>:

bool die::operator!=(const die &o) const { return !(*this == o); }
   1b74a:	1141                	c.addi	sp,-16
   1b74c:	e406                	c.sdsp	ra,8(sp)
   1b74e:	fe5ff0ef          	jal	ra,1b732 <dwarf::die::operator==(dwarf::die const&) const>
   1b752:	00154513          	xori	a0,a0,1
   1b756:	0ff57513          	andi	a0,a0,255
   1b75a:	60a2                	c.ldsp	ra,8(sp)
   1b75c:	0141                	c.addi	sp,16
   1b75e:	8082                	c.jr	ra

000000000001b760 <std::hash<dwarf::die>::operator()(dwarf::die const&) const>:

DWARFPP_END_NAMESPACE

size_t std::hash<dwarf::die>::operator()(const dwarf::die &a) const {
  return hash<decltype(a.cu)>()(a.cu) ^
         hash<decltype(a.get_unit_offset())>()(a.get_unit_offset());
   1b760:	6588                	c.ld	a0,8(a1)
   1b762:	6d9c                	c.ld	a5,24(a1)
}
   1b764:	8d3d                	c.xor	a0,a5
   1b766:	8082                	c.jr	ra

000000000001b768 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>:
die::iterator::iterator(const unit *cu, section_offset off) : d(cu) {
   1b768:	1101                	c.addi	sp,-32
   1b76a:	ec06                	c.sdsp	ra,24(sp)
   1b76c:	e822                	c.sdsp	s0,16(sp)
   1b76e:	e426                	c.sdsp	s1,8(sp)
   1b770:	842a                	c.mv	s0,a0
   1b772:	84b2                	c.mv	s1,a2
   1b774:	afbff0ef          	jal	ra,1b26e <dwarf::die::die(dwarf::unit const*)>
  d.read(off);
   1b778:	85a6                	c.mv	a1,s1
   1b77a:	8522                	c.mv	a0,s0
   1b77c:	b27ff0ef          	jal	ra,1b2a2 <dwarf::die::read(unsigned long)>
   1b780:	a821                	c.j	1b798 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)+0x30>
class die {
   1b782:	84aa                	c.mv	s1,a0
   1b784:	02040513          	addi	a0,s0,32
   1b788:	0001e317          	auipc	t1,0x1e
   1b78c:	c5833303          	ld	t1,-936(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1b790:	9302                	c.jalr	t1
   1b792:	8526                	c.mv	a0,s1
   1b794:	efdfa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
}
   1b798:	60e2                	c.ldsp	ra,24(sp)
   1b79a:	6442                	c.ldsp	s0,16(sp)
   1b79c:	64a2                	c.ldsp	s1,8(sp)
   1b79e:	6105                	c.addi16sp	sp,32
   1b7a0:	8082                	c.jr	ra

000000000001b7a2 <dwarf::die::begin() const>:
die::iterator die::begin() const {
   1b7a2:	1141                	c.addi	sp,-16
   1b7a4:	e406                	c.sdsp	ra,8(sp)
   1b7a6:	e022                	c.sdsp	s0,0(sp)
   1b7a8:	842a                	c.mv	s0,a0
  if (!abbrev || !abbrev->children)
   1b7aa:	699c                	c.ld	a5,16(a1)
   1b7ac:	c781                	c.beqz	a5,1b7b4 <dwarf::die::begin() const+0x12>
   1b7ae:	00c7c783          	lbu	a5,12(a5)
   1b7b2:	e3b9                	c.bnez	a5,1b7f8 <dwarf::die::begin() const+0x56>
inline die::iterator die::end() const { return iterator(); }
   1b7b4:	00043023          	sd	zero,0(s0)
   1b7b8:	00043423          	sd	zero,8(s0)
   1b7bc:	00043823          	sd	zero,16(s0)
   1b7c0:	00043c23          	sd	zero,24(s0)
   1b7c4:	02043023          	sd	zero,32(s0)
   1b7c8:	02043423          	sd	zero,40(s0)
   1b7cc:	02043823          	sd	zero,48(s0)
   1b7d0:	02043c23          	sd	zero,56(s0)
   1b7d4:	04043023          	sd	zero,64(s0)
   1b7d8:	04043423          	sd	zero,72(s0)
   1b7dc:	06043423          	sd	zero,104(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1b7e0:	02040793          	addi	a5,s0,32
   1b7e4:	e83c                	c.sd	a5,80(s0)
   1b7e6:	ec3c                	c.sd	a5,88(s0)
   1b7e8:	05040793          	addi	a5,s0,80
   1b7ec:	f03c                	c.sd	a5,96(s0)
}
   1b7ee:	8522                	c.mv	a0,s0
   1b7f0:	60a2                	c.ldsp	ra,8(sp)
   1b7f2:	6402                	c.ldsp	s0,0(sp)
   1b7f4:	0141                	c.addi	sp,16
   1b7f6:	8082                	c.jr	ra
  return iterator(cu, next);
   1b7f8:	75b0                	c.ld	a2,104(a1)
   1b7fa:	658c                	c.ld	a1,8(a1)
   1b7fc:	f6dff0ef          	jal	ra,1b768 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
   1b800:	b7fd                	c.j	1b7ee <dwarf::die::begin() const+0x4c>

000000000001b802 <dwarf::die::resolve(dwarf::DW_AT) const>:
value die::resolve(DW_AT attr) const {
   1b802:	714d                	c.addi16sp	sp,-336
   1b804:	e686                	c.sdsp	ra,328(sp)
   1b806:	e2a2                	c.sdsp	s0,320(sp)
   1b808:	fe26                	c.sdsp	s1,312(sp)
   1b80a:	fa4a                	c.sdsp	s2,304(sp)
   1b80c:	84aa                	c.mv	s1,a0
   1b80e:	842e                	c.mv	s0,a1
   1b810:	8932                	c.mv	s2,a2
  if (has(attr))
   1b812:	85b2                	c.mv	a1,a2
   1b814:	8522                	c.mv	a0,s0
   1b816:	e1bff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1b81a:	cd09                	c.beqz	a0,1b834 <dwarf::die::resolve(dwarf::DW_AT) const+0x32>
    return (*this)[attr];
   1b81c:	864a                	c.mv	a2,s2
   1b81e:	85a2                	c.mv	a1,s0
   1b820:	8526                	c.mv	a0,s1
   1b822:	e37ff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
}
   1b826:	8526                	c.mv	a0,s1
   1b828:	60b6                	c.ldsp	ra,328(sp)
   1b82a:	6416                	c.ldsp	s0,320(sp)
   1b82c:	74f2                	c.ldsp	s1,312(sp)
   1b82e:	7952                	c.ldsp	s2,304(sp)
   1b830:	6171                	c.addi16sp	sp,336
   1b832:	8082                	c.jr	ra
  if (has(DW_AT::abstract_origin)) {
   1b834:	03100593          	addi	a1,zero,49
   1b838:	8522                	c.mv	a0,s0
   1b83a:	df7ff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1b83e:	0e050763          	beq	a0,zero,1b92c <dwarf::die::resolve(dwarf::DW_AT) const+0x12a>
    die ao = (*this)[DW_AT::abstract_origin].as_reference();
   1b842:	03100613          	addi	a2,zero,49
   1b846:	85a2                	c.mv	a1,s0
   1b848:	11a0                	c.addi4spn	s0,sp,232
   1b84a:	8522                	c.mv	a0,s0
   1b84c:	e0dff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b850:	85a2                	c.mv	a1,s0
   1b852:	0020                	c.addi4spn	s0,sp,8
   1b854:	8522                	c.mv	a0,s0
   1b856:	452020ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
    if (ao.has(attr))
   1b85a:	85ca                	c.mv	a1,s2
   1b85c:	8522                	c.mv	a0,s0
   1b85e:	dd3ff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1b862:	c519                	c.beqz	a0,1b870 <dwarf::die::resolve(dwarf::DW_AT) const+0x6e>
      return ao[attr];
   1b864:	864a                	c.mv	a2,s2
   1b866:	85a2                	c.mv	a1,s0
   1b868:	8526                	c.mv	a0,s1
   1b86a:	defff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b86e:	a869                	c.j	1b908 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
    if (ao.has(DW_AT::specification)) {
   1b870:	04700593          	addi	a1,zero,71
   1b874:	0028                	c.addi4spn	a0,sp,8
   1b876:	dbbff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1b87a:	c531                	c.beqz	a0,1b8c6 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
      die s = ao[DW_AT::specification].as_reference();
   1b87c:	04700613          	addi	a2,zero,71
   1b880:	002c                	c.addi4spn	a1,sp,8
   1b882:	0208                	c.addi4spn	a0,sp,256
   1b884:	dd5ff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b888:	020c                	c.addi4spn	a1,sp,256
   1b88a:	18a8                	c.addi4spn	a0,sp,120
   1b88c:	41c020ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
      if (s.has(attr))
   1b890:	85ca                	c.mv	a1,s2
   1b892:	18a8                	c.addi4spn	a0,sp,120
   1b894:	d9dff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1b898:	c519                	c.beqz	a0,1b8a6 <dwarf::die::resolve(dwarf::DW_AT) const+0xa4>
        return s[attr];
   1b89a:	864a                	c.mv	a2,s2
   1b89c:	18ac                	c.addi4spn	a1,sp,120
   1b89e:	8526                	c.mv	a0,s1
   1b8a0:	db9ff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b8a4:	a091                	c.j	1b8e8 <dwarf::die::resolve(dwarf::DW_AT) const+0xe6>
    for (T *p = base; p < end; ++p)
   1b8a6:	652e                	c.ldsp	a0,200(sp)
   1b8a8:	67ce                	c.ldsp	a5,208(sp)
   1b8aa:	00f57763          	bgeu	a0,a5,1b8b8 <dwarf::die::resolve(dwarf::DW_AT) const+0xb6>
   1b8ae:	87aa                	c.mv	a5,a0
   1b8b0:	07a1                	c.addi	a5,8
   1b8b2:	674e                	c.ldsp	a4,208(sp)
   1b8b4:	fee7eee3          	bltu	a5,a4,1b8b0 <dwarf::die::resolve(dwarf::DW_AT) const+0xae>
    end = base;
   1b8b8:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b8ba:	093c                	c.addi4spn	a5,sp,152
   1b8bc:	00f50563          	beq	a0,a5,1b8c6 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
      delete[] (char *)base;
   1b8c0:	c119                	c.beqz	a0,1b8c6 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
   1b8c2:	c9ffa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1b8c6:	6566                	c.ldsp	a0,88(sp)
   1b8c8:	7786                	c.ldsp	a5,96(sp)
   1b8ca:	00f57763          	bgeu	a0,a5,1b8d8 <dwarf::die::resolve(dwarf::DW_AT) const+0xd6>
   1b8ce:	87aa                	c.mv	a5,a0
   1b8d0:	07a1                	c.addi	a5,8
   1b8d2:	7706                	c.ldsp	a4,96(sp)
   1b8d4:	fee7eee3          	bltu	a5,a4,1b8d0 <dwarf::die::resolve(dwarf::DW_AT) const+0xce>
    end = base;
   1b8d8:	f0aa                	c.sdsp	a0,96(sp)
    if ((char *)base != buf)
   1b8da:	103c                	c.addi4spn	a5,sp,40
   1b8dc:	04f50e63          	beq	a0,a5,1b938 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
      delete[] (char *)base;
   1b8e0:	cd21                	c.beqz	a0,1b938 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
   1b8e2:	c7ffa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1b8e6:	a889                	c.j	1b938 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
    for (T *p = base; p < end; ++p)
   1b8e8:	652e                	c.ldsp	a0,200(sp)
   1b8ea:	67ce                	c.ldsp	a5,208(sp)
   1b8ec:	00f57763          	bgeu	a0,a5,1b8fa <dwarf::die::resolve(dwarf::DW_AT) const+0xf8>
   1b8f0:	87aa                	c.mv	a5,a0
   1b8f2:	07a1                	c.addi	a5,8
   1b8f4:	674e                	c.ldsp	a4,208(sp)
   1b8f6:	fee7eee3          	bltu	a5,a4,1b8f2 <dwarf::die::resolve(dwarf::DW_AT) const+0xf0>
    end = base;
   1b8fa:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b8fc:	093c                	c.addi4spn	a5,sp,152
   1b8fe:	00f50563          	beq	a0,a5,1b908 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
      delete[] (char *)base;
   1b902:	c119                	c.beqz	a0,1b908 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
   1b904:	c5dfa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1b908:	6566                	c.ldsp	a0,88(sp)
   1b90a:	7786                	c.ldsp	a5,96(sp)
   1b90c:	00f57763          	bgeu	a0,a5,1b91a <dwarf::die::resolve(dwarf::DW_AT) const+0x118>
   1b910:	87aa                	c.mv	a5,a0
   1b912:	07a1                	c.addi	a5,8
   1b914:	7706                	c.ldsp	a4,96(sp)
   1b916:	fee7eee3          	bltu	a5,a4,1b912 <dwarf::die::resolve(dwarf::DW_AT) const+0x110>
    end = base;
   1b91a:	f0aa                	c.sdsp	a0,96(sp)
    if ((char *)base != buf)
   1b91c:	103c                	c.addi4spn	a5,sp,40
   1b91e:	f0f504e3          	beq	a0,a5,1b826 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
      delete[] (char *)base;
   1b922:	f00502e3          	beq	a0,zero,1b826 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
   1b926:	c3bfa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1b92a:	bdf5                	c.j	1b826 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
  } else if (has(DW_AT::specification)) {
   1b92c:	04700593          	addi	a1,zero,71
   1b930:	8522                	c.mv	a0,s0
   1b932:	cffff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1b936:	e511                	c.bnez	a0,1b942 <dwarf::die::resolve(dwarf::DW_AT) const+0x140>
  value() : cu(nullptr), typ(type::invalid) {}
   1b938:	0004b023          	sd	zero,0(s1)
   1b93c:	0004a623          	sw	zero,12(s1)
   1b940:	b5dd                	c.j	1b826 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
    die s = (*this)[DW_AT::specification].as_reference();
   1b942:	04700613          	addi	a2,zero,71
   1b946:	85a2                	c.mv	a1,s0
   1b948:	0a20                	c.addi4spn	s0,sp,280
   1b94a:	8522                	c.mv	a0,s0
   1b94c:	d0dff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b950:	85a2                	c.mv	a1,s0
   1b952:	18a0                	c.addi4spn	s0,sp,120
   1b954:	8522                	c.mv	a0,s0
   1b956:	352020ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
    if (s.has(attr))
   1b95a:	85ca                	c.mv	a1,s2
   1b95c:	8522                	c.mv	a0,s0
   1b95e:	cd3ff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1b962:	c519                	c.beqz	a0,1b970 <dwarf::die::resolve(dwarf::DW_AT) const+0x16e>
      return s[attr];
   1b964:	864a                	c.mv	a2,s2
   1b966:	85a2                	c.mv	a1,s0
   1b968:	8526                	c.mv	a0,s1
   1b96a:	cefff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b96e:	a015                	c.j	1b992 <dwarf::die::resolve(dwarf::DW_AT) const+0x190>
    for (T *p = base; p < end; ++p)
   1b970:	652e                	c.ldsp	a0,200(sp)
   1b972:	67ce                	c.ldsp	a5,208(sp)
   1b974:	00f57763          	bgeu	a0,a5,1b982 <dwarf::die::resolve(dwarf::DW_AT) const+0x180>
   1b978:	87aa                	c.mv	a5,a0
   1b97a:	07a1                	c.addi	a5,8
   1b97c:	674e                	c.ldsp	a4,208(sp)
   1b97e:	fee7eee3          	bltu	a5,a4,1b97a <dwarf::die::resolve(dwarf::DW_AT) const+0x178>
    end = base;
   1b982:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b984:	093c                	c.addi4spn	a5,sp,152
   1b986:	faf509e3          	beq	a0,a5,1b938 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
      delete[] (char *)base;
   1b98a:	d55d                	c.beqz	a0,1b938 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
   1b98c:	bd5fa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1b990:	b765                	c.j	1b938 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
    for (T *p = base; p < end; ++p)
   1b992:	652e                	c.ldsp	a0,200(sp)
   1b994:	67ce                	c.ldsp	a5,208(sp)
   1b996:	00f57763          	bgeu	a0,a5,1b9a4 <dwarf::die::resolve(dwarf::DW_AT) const+0x1a2>
   1b99a:	87aa                	c.mv	a5,a0
   1b99c:	07a1                	c.addi	a5,8
   1b99e:	674e                	c.ldsp	a4,208(sp)
   1b9a0:	fee7eee3          	bltu	a5,a4,1b99c <dwarf::die::resolve(dwarf::DW_AT) const+0x19a>
    end = base;
   1b9a4:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b9a6:	093c                	c.addi4spn	a5,sp,152
   1b9a8:	e6f50fe3          	beq	a0,a5,1b826 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
      delete[] (char *)base;
   1b9ac:	e6050de3          	beq	a0,zero,1b826 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
   1b9b0:	bb1fa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1b9b4:	bd8d                	c.j	1b826 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
class die {
   1b9b6:	842a                	c.mv	s0,a0
   1b9b8:	0928                	c.addi4spn	a0,sp,152
   1b9ba:	0001e317          	auipc	t1,0x1e
   1b9be:	a2633303          	ld	t1,-1498(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1b9c2:	9302                	c.jalr	t1
   1b9c4:	1028                	c.addi4spn	a0,sp,40
   1b9c6:	0001e317          	auipc	t1,0x1e
   1b9ca:	a1a33303          	ld	t1,-1510(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1b9ce:	9302                	c.jalr	t1
   1b9d0:	8522                	c.mv	a0,s0
   1b9d2:	cbffa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
   1b9d6:	842a                	c.mv	s0,a0
   1b9d8:	b7f5                	c.j	1b9c4 <dwarf::die::resolve(dwarf::DW_AT) const+0x1c2>
   1b9da:	842a                	c.mv	s0,a0
   1b9dc:	0928                	c.addi4spn	a0,sp,152
   1b9de:	0001e317          	auipc	t1,0x1e
   1b9e2:	a0233303          	ld	t1,-1534(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1b9e6:	9302                	c.jalr	t1
   1b9e8:	8522                	c.mv	a0,s0
   1b9ea:	ca7fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001b9ee <dwarf::die::iterator::operator++()>:
die::iterator &die::iterator::operator++() {
   1b9ee:	7155                	c.addi16sp	sp,-208
   1b9f0:	e586                	c.sdsp	ra,200(sp)
   1b9f2:	e1a2                	c.sdsp	s0,192(sp)
   1b9f4:	fd26                	c.sdsp	s1,184(sp)
   1b9f6:	f94a                	c.sdsp	s2,176(sp)
   1b9f8:	f54e                	c.sdsp	s3,168(sp)
   1b9fa:	f152                	c.sdsp	s4,160(sp)
   1b9fc:	ed56                	c.sdsp	s5,152(sp)
   1b9fe:	842a                	c.mv	s0,a0
  if (!d.abbrev)
   1ba00:	691c                	c.ld	a5,16(a0)
   1ba02:	c799                	c.beqz	a5,1ba10 <dwarf::die::iterator::operator++()+0x22>
  if (!d.abbrev->children) {
   1ba04:	00c7c783          	lbu	a5,12(a5)
   1ba08:	ef91                	c.bnez	a5,1ba24 <dwarf::die::iterator::operator++()+0x36>
    d.read(d.next);
   1ba0a:	752c                	c.ld	a1,104(a0)
   1ba0c:	897ff0ef          	jal	ra,1b2a2 <dwarf::die::read(unsigned long)>
}
   1ba10:	8522                	c.mv	a0,s0
   1ba12:	60ae                	c.ldsp	ra,200(sp)
   1ba14:	640e                	c.ldsp	s0,192(sp)
   1ba16:	74ea                	c.ldsp	s1,184(sp)
   1ba18:	794a                	c.ldsp	s2,176(sp)
   1ba1a:	79aa                	c.ldsp	s3,168(sp)
   1ba1c:	7a0a                	c.ldsp	s4,160(sp)
   1ba1e:	6aea                	c.ldsp	s5,152(sp)
   1ba20:	6169                	c.addi16sp	sp,208
   1ba22:	8082                	c.jr	ra
  } else if (d.has(DW_AT::sibling)) {
   1ba24:	4585                	c.li	a1,1
   1ba26:	c0bff0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1ba2a:	0e050963          	beq	a0,zero,1bb1c <dwarf::die::iterator::operator++()+0x12e>
    d = d[DW_AT::sibling].as_reference();
   1ba2e:	4605                	c.li	a2,1
   1ba30:	85a2                	c.mv	a1,s0
   1ba32:	18a4                	c.addi4spn	s1,sp,120
   1ba34:	8526                	c.mv	a0,s1
   1ba36:	c23ff0ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   1ba3a:	85a6                	c.mv	a1,s1
   1ba3c:	0028                	c.addi4spn	a0,sp,8
   1ba3e:	26a020ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
  die &operator=(die &&o) = default;
   1ba42:	47a2                	c.lwsp	a5,8(sp)
   1ba44:	c01c                	c.sw	a5,0(s0)
   1ba46:	67c2                	c.ldsp	a5,16(sp)
   1ba48:	e41c                	c.sd	a5,8(s0)
   1ba4a:	67e2                	c.ldsp	a5,24(sp)
   1ba4c:	e81c                	c.sd	a5,16(s0)
   1ba4e:	7782                	c.ldsp	a5,32(sp)
   1ba50:	ec1c                	c.sd	a5,24(s0)
  size_type size() const { return end - base; }
   1ba52:	7906                	c.ldsp	s2,96(sp)
   1ba54:	67e6                	c.ldsp	a5,88(sp)
   1ba56:	40f90933          	sub	s2,s2,a5
   1ba5a:	40395493          	srai	s1,s2,0x3
    for (T *p = base; p < end; ++p)
   1ba5e:	6834                	c.ld	a3,80(s0)
   1ba60:	6c3c                	c.ld	a5,88(s0)
   1ba62:	00f6f763          	bgeu	a3,a5,1ba70 <dwarf::die::iterator::operator++()+0x82>
   1ba66:	87b6                	c.mv	a5,a3
   1ba68:	07a1                	c.addi	a5,8
   1ba6a:	6c38                	c.ld	a4,88(s0)
   1ba6c:	fee7eee3          	bltu	a5,a4,1ba68 <dwarf::die::iterator::operator++()+0x7a>
    end = base;
   1ba70:	ec34                	c.sd	a3,88(s0)
    if (n <= (size_type)(cap - base))
   1ba72:	7028                	c.ld	a0,96(s0)
   1ba74:	8d15                	c.sub	a0,a3
   1ba76:	05257e63          	bgeu	a0,s2,1bad2 <dwarf::die::iterator::operator++()+0xe4>
   1ba7a:	850d                	c.srai	a0,0x3
   1ba7c:	e111                	c.bnez	a0,1ba80 <dwarf::die::iterator::operator++()+0x92>
   1ba7e:	4505                	c.li	a0,1
    while (target < n)
   1ba80:	00957563          	bgeu	a0,s1,1ba8a <dwarf::die::iterator::operator++()+0x9c>
      target <<= 1;
   1ba84:	0506                	c.slli	a0,0x1
    while (target < n)
   1ba86:	fe956fe3          	bltu	a0,s1,1ba84 <dwarf::die::iterator::operator++()+0x96>
    char *newbuf = new char[sizeof(T[target])];
   1ba8a:	00351993          	slli	s3,a0,0x3
   1ba8e:	854e                	c.mv	a0,s3
   1ba90:	851fa0ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1ba94:	8aaa                	c.mv	s5,a0
    T *src = base, *dest = (T *)newbuf;
   1ba96:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1ba98:	6c38                	c.ld	a4,88(s0)
   1ba9a:	06e57f63          	bgeu	a0,a4,1bb18 <dwarf::die::iterator::operator++()+0x12a>
    T *src = base, *dest = (T *)newbuf;
   1ba9e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1baa0:	07a1                	c.addi	a5,8
   1baa2:	fee7efe3          	bltu	a5,a4,1baa0 <dwarf::die::iterator::operator++()+0xb2>
   1baa6:	fff70a13          	addi	s4,a4,-1
   1baaa:	40aa0a33          	sub	s4,s4,a0
   1baae:	ff8a7a13          	andi	s4,s4,-8
   1bab2:	0a21                	c.addi	s4,8
   1bab4:	9a56                	c.add	s4,s5
   1bab6:	02040793          	addi	a5,s0,32
    if ((char *)base != buf)
   1baba:	00f50563          	beq	a0,a5,1bac4 <dwarf::die::iterator::operator++()+0xd6>
      delete[] (char *)base;
   1babe:	c119                	c.beqz	a0,1bac4 <dwarf::die::iterator::operator++()+0xd6>
   1bac0:	aa1fa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1bac4:	05543823          	sd	s5,80(s0)
    end = dest;
   1bac8:	05443c23          	sd	s4,88(s0)
    cap = base + target;
   1bacc:	9ace                	c.add	s5,s3
   1bace:	07543023          	sd	s5,96(s0)
    for (size_type i = 0; i < osize; i++)
   1bad2:	cc89                	c.beqz	s1,1baec <dwarf::die::iterator::operator++()+0xfe>
   1bad4:	4781                	c.li	a5,0
   1bad6:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1bada:	6766                	c.ldsp	a4,88(sp)
   1badc:	9736                	c.add	a4,a3
   1bade:	6310                	c.ld	a2,0(a4)
   1bae0:	6838                	c.ld	a4,80(s0)
   1bae2:	9736                	c.add	a4,a3
   1bae4:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1bae6:	0785                	c.addi	a5,1
   1bae8:	fef497e3          	bne	s1,a5,1bad6 <dwarf::die::iterator::operator++()+0xe8>
    end = base + osize;
   1baec:	683c                	c.ld	a5,80(s0)
   1baee:	97ca                	c.add	a5,s2
   1baf0:	ec3c                	c.sd	a5,88(s0)
   1baf2:	77c6                	c.ldsp	a5,112(sp)
   1baf4:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1baf6:	6566                	c.ldsp	a0,88(sp)
   1baf8:	7786                	c.ldsp	a5,96(sp)
   1bafa:	00f57763          	bgeu	a0,a5,1bb08 <dwarf::die::iterator::operator++()+0x11a>
   1bafe:	87aa                	c.mv	a5,a0
   1bb00:	07a1                	c.addi	a5,8
   1bb02:	7706                	c.ldsp	a4,96(sp)
   1bb04:	fee7eee3          	bltu	a5,a4,1bb00 <dwarf::die::iterator::operator++()+0x112>
    if ((char *)base != buf)
   1bb08:	103c                	c.addi4spn	a5,sp,40
   1bb0a:	f0f503e3          	beq	a0,a5,1ba10 <dwarf::die::iterator::operator++()+0x22>
      delete[] (char *)base;
   1bb0e:	f00501e3          	beq	a0,zero,1ba10 <dwarf::die::iterator::operator++()+0x22>
   1bb12:	a4ffa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1bb16:	bded                	c.j	1ba10 <dwarf::die::iterator::operator++()+0x22>
    T *src = base, *dest = (T *)newbuf;
   1bb18:	8a56                	c.mv	s4,s5
   1bb1a:	bf71                	c.j	1bab6 <dwarf::die::iterator::operator++()+0xc8>
    iterator sub(d.cu, d.next);
   1bb1c:	7430                	c.ld	a2,104(s0)
   1bb1e:	640c                	c.ld	a1,8(s0)
   1bb20:	0028                	c.addi4spn	a0,sp,8
   1bb22:	c47ff0ef          	jal	ra,1b768 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
      ++sub;
   1bb26:	0024                	c.addi4spn	s1,sp,8
    while (sub->abbrev)
   1bb28:	67e2                	c.ldsp	a5,24(sp)
   1bb2a:	c789                	c.beqz	a5,1bb34 <dwarf::die::iterator::operator++()+0x146>
      ++sub;
   1bb2c:	8526                	c.mv	a0,s1
   1bb2e:	ec1ff0ef          	jal	ra,1b9ee <dwarf::die::iterator::operator++()>
   1bb32:	bfdd                	c.j	1bb28 <dwarf::die::iterator::operator++()+0x13a>
    d.read(sub->next);
   1bb34:	75c6                	c.ldsp	a1,112(sp)
   1bb36:	8522                	c.mv	a0,s0
   1bb38:	f6aff0ef          	jal	ra,1b2a2 <dwarf::die::read(unsigned long)>
    for (T *p = base; p < end; ++p)
   1bb3c:	6566                	c.ldsp	a0,88(sp)
   1bb3e:	7786                	c.ldsp	a5,96(sp)
   1bb40:	00f57763          	bgeu	a0,a5,1bb4e <dwarf::die::iterator::operator++()+0x160>
   1bb44:	87aa                	c.mv	a5,a0
   1bb46:	07a1                	c.addi	a5,8
   1bb48:	7706                	c.ldsp	a4,96(sp)
   1bb4a:	fee7eee3          	bltu	a5,a4,1bb46 <dwarf::die::iterator::operator++()+0x158>
    if ((char *)base != buf)
   1bb4e:	103c                	c.addi4spn	a5,sp,40
   1bb50:	ecf500e3          	beq	a0,a5,1ba10 <dwarf::die::iterator::operator++()+0x22>
      delete[] (char *)base;
   1bb54:	ea050ee3          	beq	a0,zero,1ba10 <dwarf::die::iterator::operator++()+0x22>
   1bb58:	a09fa0ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1bb5c:	bd55                	c.j	1ba10 <dwarf::die::iterator::operator++()+0x22>
class die {
   1bb5e:	842a                	c.mv	s0,a0
   1bb60:	1028                	c.addi4spn	a0,sp,40
   1bb62:	0001e317          	auipc	t1,0x1e
   1bb66:	87e33303          	ld	t1,-1922(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1bb6a:	9302                	c.jalr	t1
   1bb6c:	8522                	c.mv	a0,s0
   1bb6e:	b23fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
   1bb72:	842a                	c.mv	s0,a0
   1bb74:	1028                	c.addi4spn	a0,sp,40
   1bb76:	0001e317          	auipc	t1,0x1e
   1bb7a:	86a33303          	ld	t1,-1942(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1bb7e:	9302                	c.jalr	t1
   1bb80:	8522                	c.mv	a0,s0
   1bb82:	b0ffa0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000001bb86 <dwarf::die::attributes() const>:
const vector<pair<DW_AT, value>> die::attributes() const {
   1bb86:	7175                	c.addi16sp	sp,-144
   1bb88:	e506                	c.sdsp	ra,136(sp)
   1bb8a:	e122                	c.sdsp	s0,128(sp)
   1bb8c:	fca6                	c.sdsp	s1,120(sp)
   1bb8e:	f8ca                	c.sdsp	s2,112(sp)
   1bb90:	f4ce                	c.sdsp	s3,104(sp)
   1bb92:	f0d2                	c.sdsp	s4,96(sp)
   1bb94:	ecd6                	c.sdsp	s5,88(sp)
   1bb96:	e8da                	c.sdsp	s6,80(sp)
   1bb98:	e4de                	c.sdsp	s7,72(sp)
   1bb9a:	84aa                	c.mv	s1,a0
	: _M_start(), _M_finish(), _M_end_of_storage()
   1bb9c:	00053023          	sd	zero,0(a0)
   1bba0:	00053423          	sd	zero,8(a0)
   1bba4:	00053823          	sd	zero,16(a0)
  if (!abbrev)
   1bba8:	699c                	c.ld	a5,16(a1)
   1bbaa:	c7d1                	c.beqz	a5,1bc36 <dwarf::die::attributes() const+0xb0>
   1bbac:	89ae                	c.mv	s3,a1
   1bbae:	6b80                	c.ld	s0,16(a5)
   1bbb0:	0187ba03          	ld	s4,24(a5)
  for (auto &a : abbrev->attributes) {
   1bbb4:	088a0163          	beq	s4,s0,1bc36 <dwarf::die::attributes() const+0xb0>
   1bbb8:	4901                	c.li	s2,0
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1bbba:	02810a93          	addi	s5,sp,40
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1bbbe:	00810b13          	addi	s6,sp,8
   1bbc2:	0001eb97          	auipc	s7,0x1e
   1bbc6:	92ebbb83          	ld	s7,-1746(s7) # 394f0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)@@Base+0x1d8a2>
   1bbca:	a82d                	c.j	1bc04 <dwarf::die::attributes() const+0x7e>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1bbcc:	401c                	c.lw	a5,0(s0)
   1bbce:	c43e                	c.swsp	a5,8(sp)
   1bbd0:	77a2                	c.ldsp	a5,40(sp)
   1bbd2:	e83e                	c.sdsp	a5,16(sp)
   1bbd4:	77c2                	c.ldsp	a5,48(sp)
   1bbd6:	ec3e                	c.sdsp	a5,24(sp)
   1bbd8:	77e2                	c.ldsp	a5,56(sp)
   1bbda:	f03e                	c.sdsp	a5,32(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1bbdc:	648c                	c.ld	a1,8(s1)
   1bbde:	689c                	c.ld	a5,16(s1)
   1bbe0:	02f58f63          	beq	a1,a5,1bc1e <dwarf::die::attributes() const+0x98>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1bbe4:	67a2                	c.ldsp	a5,8(sp)
   1bbe6:	e19c                	c.sd	a5,0(a1)
   1bbe8:	67c2                	c.ldsp	a5,16(sp)
   1bbea:	e59c                	c.sd	a5,8(a1)
   1bbec:	67e2                	c.ldsp	a5,24(sp)
   1bbee:	e99c                	c.sd	a5,16(a1)
   1bbf0:	7782                	c.ldsp	a5,32(sp)
   1bbf2:	ed9c                	c.sd	a5,24(a1)
	    ++this->_M_impl._M_finish;
   1bbf4:	649c                	c.ld	a5,8(s1)
   1bbf6:	02078793          	addi	a5,a5,32
   1bbfa:	e49c                	c.sd	a5,8(s1)
  for (auto &a : abbrev->attributes) {
   1bbfc:	0431                	c.addi	s0,12
   1bbfe:	0921                	c.addi	s2,8
   1bc00:	028a0b63          	beq	s4,s0,1bc36 <dwarf::die::attributes() const+0xb0>
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1bc04:	0509b783          	ld	a5,80(s3)
   1bc08:	97ca                	c.add	a5,s2
   1bc0a:	639c                	c.ld	a5,0(a5)
   1bc0c:	4418                	c.lw	a4,8(s0)
   1bc0e:	4054                	c.lw	a3,4(s0)
   1bc10:	4010                	c.lw	a2,0(s0)
   1bc12:	0089b583          	ld	a1,8(s3)
   1bc16:	8556                	c.mv	a0,s5
   1bc18:	5af010ef          	jal	ra,1d9c6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
   1bc1c:	bf45                	c.j	1bbcc <dwarf::die::attributes() const+0x46>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1bc1e:	865a                	c.mv	a2,s6
   1bc20:	8526                	c.mv	a0,s1
   1bc22:	9b82                	c.jalr	s7
   1bc24:	bfe1                	c.j	1bbfc <dwarf::die::attributes() const+0x76>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1bc26:	842a                	c.mv	s0,a0
   1bc28:	6088                	c.ld	a0,0(s1)
	if (__p)
   1bc2a:	c119                	c.beqz	a0,1bc30 <dwarf::die::attributes() const+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bc2c:	885fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1bc30:	8522                	c.mv	a0,s0
   1bc32:	a5ffa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
}
   1bc36:	8526                	c.mv	a0,s1
   1bc38:	60aa                	c.ldsp	ra,136(sp)
   1bc3a:	640a                	c.ldsp	s0,128(sp)
   1bc3c:	74e6                	c.ldsp	s1,120(sp)
   1bc3e:	7946                	c.ldsp	s2,112(sp)
   1bc40:	79a6                	c.ldsp	s3,104(sp)
   1bc42:	7a06                	c.ldsp	s4,96(sp)
   1bc44:	6ae6                	c.ldsp	s5,88(sp)
   1bc46:	6b46                	c.ldsp	s6,80(sp)
   1bc48:	6ba6                	c.ldsp	s7,72(sp)
   1bc4a:	6149                	c.addi16sp	sp,144
   1bc4c:	8082                	c.jr	ra

000000000001bc4e <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)>:
      vector<_Tp, _Alloc>::
   1bc4e:	715d                	c.addi16sp	sp,-80
   1bc50:	e486                	c.sdsp	ra,72(sp)
   1bc52:	e0a2                	c.sdsp	s0,64(sp)
   1bc54:	fc26                	c.sdsp	s1,56(sp)
   1bc56:	f84a                	c.sdsp	s2,48(sp)
   1bc58:	f44e                	c.sdsp	s3,40(sp)
   1bc5a:	f052                	c.sdsp	s4,32(sp)
   1bc5c:	ec56                	c.sdsp	s5,24(sp)
   1bc5e:	e85a                	c.sdsp	s6,16(sp)
   1bc60:	e45e                	c.sdsp	s7,8(sp)
   1bc62:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bc64:	00853903          	ld	s2,8(a0)
   1bc68:	00053a03          	ld	s4,0(a0)
   1bc6c:	414907b3          	sub	a5,s2,s4
   1bc70:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   1bc72:	577d                	c.li	a4,-1
   1bc74:	8319                	c.srli	a4,0x6
   1bc76:	02e78763          	beq	a5,a4,1bca4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x56>
   1bc7a:	8aaa                	c.mv	s5,a0
   1bc7c:	8bae                	c.mv	s7,a1
   1bc7e:	84b2                	c.mv	s1,a2
   1bc80:	842e                	c.mv	s0,a1
      return __a;
   1bc82:	873e                	c.mv	a4,a5
      if (__a < __b)
   1bc84:	03490663          	beq	s2,s4,1bcb0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   1bc88:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bc8a:	02f76763          	bltu	a4,a5,1bcb8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x6a>
   1bc8e:	8b3a                	c.mv	s6,a4
   1bc90:	57fd                	c.li	a5,-1
   1bc92:	8399                	c.srli	a5,0x6
   1bc94:	00e7f363          	bgeu	a5,a4,1bc9a <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x4c>
   1bc98:	8b3e                	c.mv	s6,a5
    { return __lhs.base() - __rhs.base(); }
   1bc9a:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bc9e:	4981                	c.li	s3,0
   1bca0:	c715                	c.beqz	a4,1bccc <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x7e>
   1bca2:	a005                	c.j	1bcc2 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x74>
	  __throw_length_error(__N(__s));
   1bca4:	00011517          	auipc	a0,0x11
   1bca8:	6c450513          	addi	a0,a0,1732 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1bcac:	f34fa0ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1bcb0:	4705                	c.li	a4,1
   1bcb2:	bfd9                	c.j	1bc88 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x3a>
      _ForwardIterator __cur = __result;
   1bcb4:	84ce                	c.mv	s1,s3
   1bcb6:	a891                	c.j	1bd0a <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xbc>
   1bcb8:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bcbc:	5b7d                	c.li	s6,-1
   1bcbe:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1bcc2:	005b1513          	slli	a0,s6,0x5
   1bcc6:	ffafa0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1bcca:	89aa                	c.mv	s3,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1bccc:	018987b3          	add	a5,s3,s8
   1bcd0:	608c                	c.ld	a1,0(s1)
   1bcd2:	6490                	c.ld	a2,8(s1)
   1bcd4:	6894                	c.ld	a3,16(s1)
   1bcd6:	6c98                	c.ld	a4,24(s1)
   1bcd8:	e38c                	c.sd	a1,0(a5)
   1bcda:	e790                	c.sd	a2,8(a5)
   1bcdc:	eb94                	c.sd	a3,16(a5)
   1bcde:	ef98                	c.sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1bce0:	fd440ae3          	beq	s0,s4,1bcb4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x66>
   1bce4:	414b84b3          	sub	s1,s7,s4
   1bce8:	94ce                	c.add	s1,s3
      _ForwardIterator __cur = __result;
   1bcea:	87ce                	c.mv	a5,s3
      for (; __first != __last; ++__first, (void)++__cur)
   1bcec:	8752                	c.mv	a4,s4
   1bcee:	6308                	c.ld	a0,0(a4)
   1bcf0:	670c                	c.ld	a1,8(a4)
   1bcf2:	6b10                	c.ld	a2,16(a4)
   1bcf4:	6f14                	c.ld	a3,24(a4)
   1bcf6:	e388                	c.sd	a0,0(a5)
   1bcf8:	e78c                	c.sd	a1,8(a5)
   1bcfa:	eb90                	c.sd	a2,16(a5)
   1bcfc:	ef94                	c.sd	a3,24(a5)
   1bcfe:	02070713          	addi	a4,a4,32
   1bd02:	02078793          	addi	a5,a5,32
   1bd06:	fe9794e3          	bne	a5,s1,1bcee <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa0>
	      ++__new_finish;
   1bd0a:	02048493          	addi	s1,s1,32
   1bd0e:	03240463          	beq	s0,s2,1bd36 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xe8>
   1bd12:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   1bd16:	87a6                	c.mv	a5,s1
   1bd18:	6008                	c.ld	a0,0(s0)
   1bd1a:	6410                	c.ld	a2,8(s0)
   1bd1c:	6814                	c.ld	a3,16(s0)
   1bd1e:	6c18                	c.ld	a4,24(s0)
   1bd20:	e388                	c.sd	a0,0(a5)
   1bd22:	e790                	c.sd	a2,8(a5)
   1bd24:	eb94                	c.sd	a3,16(a5)
   1bd26:	ef98                	c.sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1bd28:	02040413          	addi	s0,s0,32
   1bd2c:	02078793          	addi	a5,a5,32
   1bd30:	ff2414e3          	bne	s0,s2,1bd18 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xca>
   1bd34:	94de                	c.add	s1,s7
	if (__p)
   1bd36:	000a0563          	beq	s4,zero,1bd40 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xf2>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bd3a:	8552                	c.mv	a0,s4
   1bd3c:	f74fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1bd40:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   1bd44:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1bd48:	0b16                	c.slli	s6,0x5
   1bd4a:	99da                	c.add	s3,s6
   1bd4c:	013ab823          	sd	s3,16(s5)
    }
   1bd50:	60a6                	c.ldsp	ra,72(sp)
   1bd52:	6406                	c.ldsp	s0,64(sp)
   1bd54:	74e2                	c.ldsp	s1,56(sp)
   1bd56:	7942                	c.ldsp	s2,48(sp)
   1bd58:	79a2                	c.ldsp	s3,40(sp)
   1bd5a:	7a02                	c.ldsp	s4,32(sp)
   1bd5c:	6ae2                	c.ldsp	s5,24(sp)
   1bd5e:	6b42                	c.ldsp	s6,16(sp)
   1bd60:	6ba2                	c.ldsp	s7,8(sp)
   1bd62:	6c02                	c.ldsp	s8,0(sp)
   1bd64:	6161                	c.addi16sp	sp,80
   1bd66:	8082                	c.jr	ra

000000000001bd68 <dwarf::value::get_section_offset() const>:
    : cu(cu), form(form), typ(typ), offset(offset) {
  if (form == DW_FORM::indirect)
    resolve_indirect(name);
}

section_offset value::get_section_offset() const {
   1bd68:	1141                	c.addi	sp,-16
   1bd6a:	e406                	c.sdsp	ra,8(sp)
   1bd6c:	e022                	c.sdsp	s0,0(sp)
   1bd6e:	842a                	c.mv	s0,a0
  return cu->get_section_offset() + offset;
   1bd70:	6108                	c.ld	a0,0(a0)
   1bd72:	b66fb0ef          	jal	ra,170d8 <dwarf::unit::get_section_offset() const>
   1bd76:	681c                	c.ld	a5,16(s0)
}
   1bd78:	953e                	c.add	a0,a5
   1bd7a:	60a2                	c.ldsp	ra,8(sp)
   1bd7c:	6402                	c.ldsp	s0,0(sp)
   1bd7e:	0141                	c.addi	sp,16
   1bd80:	8082                	c.jr	ra

000000000001bd82 <dwarf::value::as_address() const>:

taddr value::as_address() const {
   1bd82:	7135                	c.addi16sp	sp,-160
   1bd84:	ed06                	c.sdsp	ra,152(sp)
   1bd86:	e922                	c.sdsp	s0,144(sp)
   1bd88:	e526                	c.sdsp	s1,136(sp)
   1bd8a:	e14a                	c.sdsp	s2,128(sp)
   1bd8c:	842a                	c.mv	s0,a0
  if (form != DW_FORM::addr)
   1bd8e:	4518                	c.lw	a4,8(a0)
   1bd90:	4785                	c.li	a5,1
   1bd92:	0af71063          	bne	a4,a5,1be32 <dwarf::value::as_address() const+0xb0>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");

  cursor cur(cu->data(), offset);
   1bd96:	6108                	c.ld	a0,0(a0)
   1bd98:	b46fb0ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bd9c:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1bda0:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1bda2:	20048f63          	beq	s1,zero,1bfc0 <dwarf::value::as_address() const+0x23e>
    if (__is_single_threaded())
   1bda6:	0001d797          	auipc	a5,0x1d
   1bdaa:	6d27b783          	ld	a5,1746(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bdae:	0007c783          	lbu	a5,0(a5)
   1bdb2:	10078863          	beq	a5,zero,1bec2 <dwarf::value::as_address() const+0x140>
  { *__mem += __val; }
   1bdb6:	589c                	c.lw	a5,48(s1)
   1bdb8:	2785                	c.addiw	a5,1
   1bdba:	d89c                	c.sw	a5,48(s1)
   1bdbc:	6800                	c.ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bdbe:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1bdc0:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1bdc2:	0001d797          	auipc	a5,0x1d
   1bdc6:	6b67b783          	ld	a5,1718(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bdca:	0007c783          	lbu	a5,0(a5)
   1bdce:	10078063          	beq	a5,zero,1bece <dwarf::value::as_address() const+0x14c>
  { *__mem += __val; }
   1bdd2:	589c                	c.lw	a5,48(s1)
   1bdd4:	2785                	c.addiw	a5,1
   1bdd6:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1bdd8:	00893783          	ld	a5,8(s2)
   1bddc:	97a2                	c.add	a5,s0
   1bdde:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1bde0:	0001d797          	auipc	a5,0x1d
   1bde4:	6987b783          	ld	a5,1688(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bde8:	0007c783          	lbu	a5,0(a5)
   1bdec:	0e078763          	beq	a5,zero,1beda <dwarf::value::as_address() const+0x158>
    _Atomic_word __result = *__mem;
   1bdf0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1bdf2:	fff5079b          	addiw	a5,a0,-1
   1bdf6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1bdf8:	4785                	c.li	a5,1
   1bdfa:	1cf51a63          	bne	a0,a5,1bfce <dwarf::value::as_address() const+0x24c>
	_M_dispose();
   1bdfe:	609c                	c.ld	a5,0(s1)
   1be00:	6b9c                	c.ld	a5,16(a5)
   1be02:	8526                	c.mv	a0,s1
   1be04:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1be06:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1be0a:	0001d797          	auipc	a5,0x1d
   1be0e:	66e7b783          	ld	a5,1646(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1be12:	0007c783          	lbu	a5,0(a5)
   1be16:	0c078863          	beq	a5,zero,1bee6 <dwarf::value::as_address() const+0x164>
    _Atomic_word __result = *__mem;
   1be1a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1be1c:	fff5079b          	addiw	a5,a0,-1
   1be20:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1be22:	4785                	c.li	a5,1
   1be24:	1af51563          	bne	a0,a5,1bfce <dwarf::value::as_address() const+0x24c>
	    _M_destroy();
   1be28:	609c                	c.ld	a5,0(s1)
   1be2a:	6f9c                	c.ld	a5,24(a5)
   1be2c:	8526                	c.mv	a0,s1
   1be2e:	9782                	c.jalr	a5
   1be30:	aa79                	c.j	1bfce <dwarf::value::as_address() const+0x24c>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1be32:	4541                	c.li	a0,16
   1be34:	d9cfa0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1be38:	84aa                	c.mv	s1,a0
   1be3a:	444c                	c.lw	a1,12(s0)
   1be3c:	0028                	c.addi4spn	a0,sp,8
   1be3e:	6c00b0ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1be42:	00012617          	auipc	a2,0x12
   1be46:	93660613          	addi	a2,a2,-1738 # 2d778 <std::piecewise_construct+0x1c8>
   1be4a:	4581                	c.li	a1,0
   1be4c:	0028                	c.addi4spn	a0,sp,8
   1be4e:	cf2fa0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1be52:	85aa                	c.mv	a1,a0
   1be54:	1020                	c.addi4spn	s0,sp,40
   1be56:	8522                	c.mv	a0,s0
   1be58:	db8fa0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1be5c:	00012597          	auipc	a1,0x12
   1be60:	92c58593          	addi	a1,a1,-1748 # 2d788 <std::piecewise_construct+0x1d8>
   1be64:	8522                	c.mv	a0,s0
   1be66:	8dbfa0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1be6a:	85aa                	c.mv	a1,a0
   1be6c:	00a0                	c.addi4spn	s0,sp,72
   1be6e:	8522                	c.mv	a0,s0
   1be70:	da0fa0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1be74:	85a2                	c.mv	a1,s0
   1be76:	8526                	c.mv	a0,s1
   1be78:	919fa0ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1be7c:	0001d797          	auipc	a5,0x1d
   1be80:	5c47b783          	ld	a5,1476(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1be84:	07c1                	c.addi	a5,16
   1be86:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1be88:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1be8a:	08bc                	c.addi4spn	a5,sp,88
   1be8c:	00f50463          	beq	a0,a5,1be94 <dwarf::value::as_address() const+0x112>
   1be90:	e20fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1be94:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1be96:	183c                	c.addi4spn	a5,sp,56
   1be98:	00f50463          	beq	a0,a5,1bea0 <dwarf::value::as_address() const+0x11e>
   1be9c:	e14fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1bea0:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1bea2:	083c                	c.addi4spn	a5,sp,24
   1bea4:	00f50463          	beq	a0,a5,1beac <dwarf::value::as_address() const+0x12a>
   1bea8:	e08fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1beac:	0001d617          	auipc	a2,0x1d
   1beb0:	72463603          	ld	a2,1828(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1beb4:	0001d597          	auipc	a1,0x1d
   1beb8:	6dc5b583          	ld	a1,1756(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1bebc:	8526                	c.mv	a0,s1
   1bebe:	fa2fa0ef          	jal	ra,16660 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   1bec2:	4585                	c.li	a1,1
   1bec4:	03048513          	addi	a0,s1,48
   1bec8:	c38fa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1becc:	bdc5                	c.j	1bdbc <dwarf::value::as_address() const+0x3a>
   1bece:	4585                	c.li	a1,1
   1bed0:	03048513          	addi	a0,s1,48
   1bed4:	c2cfa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bed8:	b701                	c.j	1bdd8 <dwarf::value::as_address() const+0x56>
      return __exchange_and_add(__mem, __val);
   1beda:	55fd                	c.li	a1,-1
   1bedc:	03048513          	addi	a0,s1,48
   1bee0:	c50fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bee4:	bf11                	c.j	1bdf8 <dwarf::value::as_address() const+0x76>
   1bee6:	55fd                	c.li	a1,-1
   1bee8:	03448513          	addi	a0,s1,52
   1beec:	c44fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bef0:	bf0d                	c.j	1be22 <dwarf::value::as_address() const+0xa0>
  return cur.address();
   1bef2:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1bef4:	74c6                	c.ldsp	s1,112(sp)
   1bef6:	cc99                	c.beqz	s1,1bf14 <dwarf::value::as_address() const+0x192>
    if (__is_single_threaded())
   1bef8:	0001d797          	auipc	a5,0x1d
   1befc:	5807b783          	ld	a5,1408(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bf00:	0007c783          	lbu	a5,0(a5)
   1bf04:	cf99                	c.beqz	a5,1bf22 <dwarf::value::as_address() const+0x1a0>
    _Atomic_word __result = *__mem;
   1bf06:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1bf08:	fff5079b          	addiw	a5,a0,-1
   1bf0c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1bf0e:	4785                	c.li	a5,1
   1bf10:	00f50f63          	beq	a0,a5,1bf2e <dwarf::value::as_address() const+0x1ac>
}
   1bf14:	8522                	c.mv	a0,s0
   1bf16:	60ea                	c.ldsp	ra,152(sp)
   1bf18:	644a                	c.ldsp	s0,144(sp)
   1bf1a:	64aa                	c.ldsp	s1,136(sp)
   1bf1c:	690a                	c.ldsp	s2,128(sp)
   1bf1e:	610d                	c.addi16sp	sp,160
   1bf20:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1bf22:	55fd                	c.li	a1,-1
   1bf24:	03048513          	addi	a0,s1,48
   1bf28:	c08fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bf2c:	b7cd                	c.j	1bf0e <dwarf::value::as_address() const+0x18c>
	_M_dispose();
   1bf2e:	609c                	c.ld	a5,0(s1)
   1bf30:	6b9c                	c.ld	a5,16(a5)
   1bf32:	8526                	c.mv	a0,s1
   1bf34:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1bf36:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1bf3a:	0001d797          	auipc	a5,0x1d
   1bf3e:	53e7b783          	ld	a5,1342(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bf42:	0007c783          	lbu	a5,0(a5)
   1bf46:	cf89                	c.beqz	a5,1bf60 <dwarf::value::as_address() const+0x1de>
    _Atomic_word __result = *__mem;
   1bf48:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1bf4a:	fff5079b          	addiw	a5,a0,-1
   1bf4e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1bf50:	4785                	c.li	a5,1
   1bf52:	fcf511e3          	bne	a0,a5,1bf14 <dwarf::value::as_address() const+0x192>
	    _M_destroy();
   1bf56:	609c                	c.ld	a5,0(s1)
   1bf58:	6f9c                	c.ld	a5,24(a5)
   1bf5a:	8526                	c.mv	a0,s1
   1bf5c:	9782                	c.jalr	a5
  return cur.address();
   1bf5e:	bf5d                	c.j	1bf14 <dwarf::value::as_address() const+0x192>
      return __exchange_and_add(__mem, __val);
   1bf60:	55fd                	c.li	a1,-1
   1bf62:	03448513          	addi	a0,s1,52
   1bf66:	bcafa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bf6a:	b7dd                	c.j	1bf50 <dwarf::value::as_address() const+0x1ce>
      { return _M_dataplus._M_p; }
   1bf6c:	842a                	c.mv	s0,a0
   1bf6e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1bf70:	08bc                	c.addi4spn	a5,sp,88
   1bf72:	00f50463          	beq	a0,a5,1bf7a <dwarf::value::as_address() const+0x1f8>
   1bf76:	d3afa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1bf7a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1bf7c:	183c                	c.addi4spn	a5,sp,56
   1bf7e:	00f50463          	beq	a0,a5,1bf86 <dwarf::value::as_address() const+0x204>
   1bf82:	d2efa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1bf86:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1bf88:	083c                	c.addi4spn	a5,sp,24
   1bf8a:	00f50463          	beq	a0,a5,1bf92 <dwarf::value::as_address() const+0x210>
   1bf8e:	d22fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1bf92:	8526                	c.mv	a0,s1
   1bf94:	cdcfa0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1bf98:	8522                	c.mv	a0,s0
   1bf9a:	ef6fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1bf9e:	842a                	c.mv	s0,a0
   1bfa0:	bfe9                	c.j	1bf7a <dwarf::value::as_address() const+0x1f8>
   1bfa2:	842a                	c.mv	s0,a0
   1bfa4:	b7cd                	c.j	1bf86 <dwarf::value::as_address() const+0x204>
   1bfa6:	842a                	c.mv	s0,a0
   1bfa8:	b7ed                	c.j	1bf92 <dwarf::value::as_address() const+0x210>
	if (_M_pi != nullptr)
   1bfaa:	842a                	c.mv	s0,a0
   1bfac:	7546                	c.ldsp	a0,112(sp)
   1bfae:	c511                	c.beqz	a0,1bfba <dwarf::value::as_address() const+0x238>
	  _M_pi->_M_release();
   1bfb0:	0001d317          	auipc	t1,0x1d
   1bfb4:	41033303          	ld	t1,1040(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1bfb8:	9302                	c.jalr	t1
   1bfba:	8522                	c.mv	a0,s0
   1bfbc:	ed4fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
  cursor cur(cu->data(), offset);
   1bfc0:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bfc2:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1bfc4:	f882                	c.sdsp	zero,112(sp)
   1bfc6:	00893783          	ld	a5,8(s2)
   1bfca:	97ba                	c.add	a5,a4
   1bfcc:	fcbe                	c.sdsp	a5,120(sp)
  return cur.address();
   1bfce:	10a8                	c.addi4spn	a0,sp,104
   1bfd0:	0001d317          	auipc	t1,0x1d
   1bfd4:	3a033303          	ld	t1,928(t1) # 39370 <dwarf::cursor::address()@@Base+0x1a27a>
   1bfd8:	9302                	c.jalr	t1
   1bfda:	bf21                	c.j	1bef2 <dwarf::value::as_address() const+0x170>

000000000001bfdc <dwarf::value::as_block(unsigned long*) const>:

const void *value::as_block(size_t *size_out) const {
   1bfdc:	7171                	c.addi16sp	sp,-176
   1bfde:	f506                	c.sdsp	ra,168(sp)
   1bfe0:	f122                	c.sdsp	s0,160(sp)
   1bfe2:	ed26                	c.sdsp	s1,152(sp)
   1bfe4:	e94a                	c.sdsp	s2,144(sp)
   1bfe6:	e54e                	c.sdsp	s3,136(sp)
   1bfe8:	e152                	c.sdsp	s4,128(sp)
   1bfea:	84aa                	c.mv	s1,a0
   1bfec:	842e                	c.mv	s0,a1
  // XXX Blocks can contain all sorts of things, including
  // references, which couldn't be resolved by callers in the
  // current minimal API.
  cursor cur(cu->data(), offset);
   1bfee:	6108                	c.ld	a0,0(a0)
   1bff0:	8eefb0ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bff4:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1bff8:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1bffc:	34090963          	beq	s2,zero,1c34e <dwarf::value::as_block(unsigned long*) const+0x372>
    if (__is_single_threaded())
   1c000:	0001d797          	auipc	a5,0x1d
   1c004:	4787b783          	ld	a5,1144(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c008:	0007c783          	lbu	a5,0(a5)
   1c00c:	c7d9                	c.beqz	a5,1c09a <dwarf::value::as_block(unsigned long*) const+0xbe>
  { *__mem += __val; }
   1c00e:	03092783          	lw	a5,48(s2)
   1c012:	2785                	c.addiw	a5,1
   1c014:	02f92823          	sw	a5,48(s2)
   1c018:	0104ba03          	ld	s4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c01c:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1c01e:	f8ca                	c.sdsp	s2,112(sp)
    if (__is_single_threaded())
   1c020:	0001d797          	auipc	a5,0x1d
   1c024:	4587b783          	ld	a5,1112(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c028:	0007c783          	lbu	a5,0(a5)
   1c02c:	cfad                	c.beqz	a5,1c0a6 <dwarf::value::as_block(unsigned long*) const+0xca>
  { *__mem += __val; }
   1c02e:	03092783          	lw	a5,48(s2)
   1c032:	2785                	c.addiw	a5,1
   1c034:	02f92823          	sw	a5,48(s2)
   1c038:	0089b783          	ld	a5,8(s3)
   1c03c:	97d2                	c.add	a5,s4
   1c03e:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1c040:	0001d797          	auipc	a5,0x1d
   1c044:	4387b783          	ld	a5,1080(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c048:	0007c783          	lbu	a5,0(a5)
   1c04c:	c3bd                	c.beqz	a5,1c0b2 <dwarf::value::as_block(unsigned long*) const+0xd6>
    _Atomic_word __result = *__mem;
   1c04e:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1c052:	fff5079b          	addiw	a5,a0,-1
   1c056:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c05a:	4785                	c.li	a5,1
   1c05c:	30f51063          	bne	a0,a5,1c35c <dwarf::value::as_block(unsigned long*) const+0x380>
	_M_dispose();
   1c060:	00093783          	ld	a5,0(s2)
   1c064:	6b9c                	c.ld	a5,16(a5)
   1c066:	854a                	c.mv	a0,s2
   1c068:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c06a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c06e:	0001d797          	auipc	a5,0x1d
   1c072:	40a7b783          	ld	a5,1034(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c076:	0007c783          	lbu	a5,0(a5)
   1c07a:	c3b1                	c.beqz	a5,1c0be <dwarf::value::as_block(unsigned long*) const+0xe2>
    _Atomic_word __result = *__mem;
   1c07c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1c080:	fff5079b          	addiw	a5,a0,-1
   1c084:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c088:	4785                	c.li	a5,1
   1c08a:	2cf51963          	bne	a0,a5,1c35c <dwarf::value::as_block(unsigned long*) const+0x380>
	    _M_destroy();
   1c08e:	00093783          	ld	a5,0(s2)
   1c092:	6f9c                	c.ld	a5,24(a5)
   1c094:	854a                	c.mv	a0,s2
   1c096:	9782                	c.jalr	a5
   1c098:	a4d1                	c.j	1c35c <dwarf::value::as_block(unsigned long*) const+0x380>
      __atomic_add(__mem, __val);
   1c09a:	4585                	c.li	a1,1
   1c09c:	03090513          	addi	a0,s2,48
   1c0a0:	a60fa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c0a4:	bf95                	c.j	1c018 <dwarf::value::as_block(unsigned long*) const+0x3c>
   1c0a6:	4585                	c.li	a1,1
   1c0a8:	03090513          	addi	a0,s2,48
   1c0ac:	a54fa0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c0b0:	b761                	c.j	1c038 <dwarf::value::as_block(unsigned long*) const+0x5c>
      return __exchange_and_add(__mem, __val);
   1c0b2:	55fd                	c.li	a1,-1
   1c0b4:	03090513          	addi	a0,s2,48
   1c0b8:	a78fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c0bc:	bf79                	c.j	1c05a <dwarf::value::as_block(unsigned long*) const+0x7e>
   1c0be:	55fd                	c.li	a1,-1
   1c0c0:	03490513          	addi	a0,s2,52
   1c0c4:	a6cfa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c0c8:	b7c1                	c.j	1c088 <dwarf::value::as_block(unsigned long*) const+0xac>
    while (pos < sec->end) {
   1c0ca:	7766                	c.ldsp	a4,120(sp)
      { return _M_ptr; }
   1c0cc:	7526                	c.ldsp	a0,104(sp)
   1c0ce:	6914                	c.ld	a3,16(a0)
    std::uint64_t result = 0;
   1c0d0:	4781                	c.li	a5,0
    int shift = 0;
   1c0d2:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1c0d4:	02d77563          	bgeu	a4,a3,1c0fe <dwarf::value::as_block(unsigned long*) const+0x122>
      uint8_t byte = *(uint8_t *)(pos++);
   1c0d8:	0705                	c.addi	a4,1
   1c0da:	fcba                	c.sdsp	a4,120(sp)
   1c0dc:	fff74683          	lbu	a3,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1c0e0:	07f6f613          	andi	a2,a3,127
   1c0e4:	00b61633          	sll	a2,a2,a1
   1c0e8:	8fd1                	c.or	a5,a2
      if ((byte & 0x80) == 0)
   1c0ea:	0186969b          	slliw	a3,a3,0x18
   1c0ee:	4186d69b          	sraiw	a3,a3,0x18
   1c0f2:	2406d063          	bge	a3,zero,1c332 <dwarf::value::as_block(unsigned long*) const+0x356>
      shift += 7;
   1c0f6:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1c0f8:	6914                	c.ld	a3,16(a0)
   1c0fa:	fcd76fe3          	bltu	a4,a3,1c0d8 <dwarf::value::as_block(unsigned long*) const+0xfc>
    underflow();
   1c0fe:	10a8                	c.addi4spn	a0,sp,104
   1c100:	b39fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1c104:	a0c9                	c.j	1c1c6 <dwarf::value::as_block(unsigned long*) const+0x1ea>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c106:	77a6                	c.ldsp	a5,104(sp)
   1c108:	6b98                	c.ld	a4,16(a5)
   1c10a:	77e6                	c.ldsp	a5,120(sp)
   1c10c:	00e7e563          	bltu	a5,a4,1c116 <dwarf::value::as_block(unsigned long*) const+0x13a>
      underflow();
   1c110:	10a8                	c.addi4spn	a0,sp,104
   1c112:	b27fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c116:	7766                	c.ldsp	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c118:	77a6                	c.ldsp	a5,104(sp)
   1c11a:	4fdc                	c.lw	a5,28(a5)
   1c11c:	20078763          	beq	a5,zero,1c32a <dwarf::value::as_block(unsigned long*) const+0x34e>
        val = (val << 8) | (uint64_t)p[i];
   1c120:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1c124:	a429                	c.j	1c32e <dwarf::value::as_block(unsigned long*) const+0x352>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c126:	77a6                	c.ldsp	a5,104(sp)
   1c128:	6b98                	c.ld	a4,16(a5)
   1c12a:	77e6                	c.ldsp	a5,120(sp)
   1c12c:	40f70633          	sub	a2,a4,a5
   1c130:	4685                	c.li	a3,1
   1c132:	00c6f463          	bgeu	a3,a2,1c13a <dwarf::value::as_block(unsigned long*) const+0x15e>
   1c136:	00e7e563          	bltu	a5,a4,1c140 <dwarf::value::as_block(unsigned long*) const+0x164>
      underflow();
   1c13a:	10a8                	c.addi4spn	a0,sp,104
   1c13c:	afdfe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c140:	7766                	c.ldsp	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c142:	77a6                	c.ldsp	a5,104(sp)
   1c144:	4fdc                	c.lw	a5,28(a5)
   1c146:	eb91                	c.bnez	a5,1c15a <dwarf::value::as_block(unsigned long*) const+0x17e>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c148:	00174783          	lbu	a5,1(a4)
   1c14c:	07a2                	c.slli	a5,0x8
   1c14e:	00074683          	lbu	a3,0(a4)
   1c152:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   1c154:	0709                	c.addi	a4,2
   1c156:	fcba                	c.sdsp	a4,120(sp)
  case DW_FORM::block1:
    *size_out = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    *size_out = cur.fixed<uint16_t>();
    break;
   1c158:	aae9                	c.j	1c332 <dwarf::value::as_block(unsigned long*) const+0x356>
        val = (val << 8) | (uint64_t)p[i];
   1c15a:	00074783          	lbu	a5,0(a4)
   1c15e:	07a2                	c.slli	a5,0x8
   1c160:	00174683          	lbu	a3,1(a4)
   1c164:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1c166:	b7fd                	c.j	1c154 <dwarf::value::as_block(unsigned long*) const+0x178>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c168:	77a6                	c.ldsp	a5,104(sp)
   1c16a:	6b98                	c.ld	a4,16(a5)
   1c16c:	77e6                	c.ldsp	a5,120(sp)
   1c16e:	40f70633          	sub	a2,a4,a5
   1c172:	468d                	c.li	a3,3
   1c174:	00c6f463          	bgeu	a3,a2,1c17c <dwarf::value::as_block(unsigned long*) const+0x1a0>
   1c178:	00e7e563          	bltu	a5,a4,1c182 <dwarf::value::as_block(unsigned long*) const+0x1a6>
      underflow();
   1c17c:	10a8                	c.addi4spn	a0,sp,104
   1c17e:	abbfe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c182:	75e6                	c.ldsp	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c184:	77a6                	c.ldsp	a5,104(sp)
   1c186:	4fdc                	c.lw	a5,28(a5)
   1c188:	e39d                	c.bnez	a5,1c1ae <dwarf::value::as_block(unsigned long*) const+0x1d2>
   1c18a:	862e                	c.mv	a2,a1
   1c18c:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c18e:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1c192:	00064683          	lbu	a3,0(a2)
   1c196:	00e696b3          	sll	a3,a3,a4
   1c19a:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1c19c:	0605                	c.addi	a2,1
   1c19e:	2721                	c.addiw	a4,8
   1c1a0:	fea719e3          	bne	a4,a0,1c192 <dwarf::value::as_block(unsigned long*) const+0x1b6>
    pos += sizeof(T);
   1c1a4:	0591                	c.addi	a1,4
   1c1a6:	fcae                	c.sdsp	a1,120(sp)
   1c1a8:	1782                	c.slli	a5,0x20
   1c1aa:	9381                	c.srli	a5,0x20
  case DW_FORM::block4:
    *size_out = cur.fixed<uint32_t>();
    break;
   1c1ac:	a259                	c.j	1c332 <dwarf::value::as_block(unsigned long*) const+0x356>
   1c1ae:	872e                	c.mv	a4,a1
   1c1b0:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1c1b4:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1c1b6:	07a2                	c.slli	a5,0x8
   1c1b8:	00074683          	lbu	a3,0(a4)
   1c1bc:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1c1be:	0705                	c.addi	a4,1
   1c1c0:	fec71be3          	bne	a4,a2,1c1b6 <dwarf::value::as_block(unsigned long*) const+0x1da>
   1c1c4:	b7c5                	c.j	1c1a4 <dwarf::value::as_block(unsigned long*) const+0x1c8>
    return 0;
   1c1c6:	4781                	c.li	a5,0
  case DW_FORM::block:
  case DW_FORM::exprloc:
    *size_out = cur.uleb128();
    break;
   1c1c8:	a2ad                	c.j	1c332 <dwarf::value::as_block(unsigned long*) const+0x356>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1c1ca:	4541                	c.li	a0,16
   1c1cc:	a04fa0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1c1d0:	892a                	c.mv	s2,a0
   1c1d2:	44cc                	c.lw	a1,12(s1)
   1c1d4:	0028                	c.addi4spn	a0,sp,8
   1c1d6:	3280b0ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c1da:	00011617          	auipc	a2,0x11
   1c1de:	59e60613          	addi	a2,a2,1438 # 2d778 <std::piecewise_construct+0x1c8>
   1c1e2:	4581                	c.li	a1,0
   1c1e4:	0028                	c.addi4spn	a0,sp,8
   1c1e6:	95afa0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c1ea:	85aa                	c.mv	a1,a0
   1c1ec:	1020                	c.addi4spn	s0,sp,40
   1c1ee:	8522                	c.mv	a0,s0
   1c1f0:	a20fa0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1c1f4:	00011597          	auipc	a1,0x11
   1c1f8:	5a458593          	addi	a1,a1,1444 # 2d798 <std::piecewise_construct+0x1e8>
   1c1fc:	8522                	c.mv	a0,s0
   1c1fe:	d42fa0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1c202:	85aa                	c.mv	a1,a0
   1c204:	00a0                	c.addi4spn	s0,sp,72
   1c206:	8522                	c.mv	a0,s0
   1c208:	a08fa0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1c20c:	85a2                	c.mv	a1,s0
   1c20e:	854a                	c.mv	a0,s2
   1c210:	d80fa0ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1c214:	0001d797          	auipc	a5,0x1d
   1c218:	22c7b783          	ld	a5,556(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1c21c:	07c1                	c.addi	a5,16
   1c21e:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1c222:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c224:	08bc                	c.addi4spn	a5,sp,88
   1c226:	00f50463          	beq	a0,a5,1c22e <dwarf::value::as_block(unsigned long*) const+0x252>
   1c22a:	a86fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c22e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c230:	183c                	c.addi4spn	a5,sp,56
   1c232:	00f50463          	beq	a0,a5,1c23a <dwarf::value::as_block(unsigned long*) const+0x25e>
   1c236:	a7afa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c23a:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c23c:	083c                	c.addi4spn	a5,sp,24
   1c23e:	00f50463          	beq	a0,a5,1c246 <dwarf::value::as_block(unsigned long*) const+0x26a>
   1c242:	a6efa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1c246:	0001d617          	auipc	a2,0x1d
   1c24a:	38a63603          	ld	a2,906(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1c24e:	0001d597          	auipc	a1,0x1d
   1c252:	3425b583          	ld	a1,834(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1c256:	854a                	c.mv	a0,s2
   1c258:	c08fa0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1c25c:	842a                	c.mv	s0,a0
   1c25e:	a075                	c.j	1c30a <dwarf::value::as_block(unsigned long*) const+0x32e>
  }
  cur.ensure(*size_out);
  return cur.pos;
   1c260:	74e6                	c.ldsp	s1,120(sp)
   1c262:	7446                	c.ldsp	s0,112(sp)
   1c264:	cc19                	c.beqz	s0,1c282 <dwarf::value::as_block(unsigned long*) const+0x2a6>
    if (__is_single_threaded())
   1c266:	0001d797          	auipc	a5,0x1d
   1c26a:	2127b783          	ld	a5,530(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c26e:	0007c783          	lbu	a5,0(a5)
   1c272:	c38d                	c.beqz	a5,1c294 <dwarf::value::as_block(unsigned long*) const+0x2b8>
    _Atomic_word __result = *__mem;
   1c274:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1c276:	fff5079b          	addiw	a5,a0,-1
   1c27a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c27c:	4785                	c.li	a5,1
   1c27e:	02f50163          	beq	a0,a5,1c2a0 <dwarf::value::as_block(unsigned long*) const+0x2c4>
}
   1c282:	8526                	c.mv	a0,s1
   1c284:	70aa                	c.ldsp	ra,168(sp)
   1c286:	740a                	c.ldsp	s0,160(sp)
   1c288:	64ea                	c.ldsp	s1,152(sp)
   1c28a:	694a                	c.ldsp	s2,144(sp)
   1c28c:	69aa                	c.ldsp	s3,136(sp)
   1c28e:	6a0a                	c.ldsp	s4,128(sp)
   1c290:	614d                	c.addi16sp	sp,176
   1c292:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1c294:	55fd                	c.li	a1,-1
   1c296:	03040513          	addi	a0,s0,48
   1c29a:	896fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c29e:	bff9                	c.j	1c27c <dwarf::value::as_block(unsigned long*) const+0x2a0>
	_M_dispose();
   1c2a0:	601c                	c.ld	a5,0(s0)
   1c2a2:	6b9c                	c.ld	a5,16(a5)
   1c2a4:	8522                	c.mv	a0,s0
   1c2a6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c2a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c2ac:	0001d797          	auipc	a5,0x1d
   1c2b0:	1cc7b783          	ld	a5,460(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c2b4:	0007c783          	lbu	a5,0(a5)
   1c2b8:	cf89                	c.beqz	a5,1c2d2 <dwarf::value::as_block(unsigned long*) const+0x2f6>
    _Atomic_word __result = *__mem;
   1c2ba:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1c2bc:	fff5079b          	addiw	a5,a0,-1
   1c2c0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c2c2:	4785                	c.li	a5,1
   1c2c4:	faf51fe3          	bne	a0,a5,1c282 <dwarf::value::as_block(unsigned long*) const+0x2a6>
	    _M_destroy();
   1c2c8:	601c                	c.ld	a5,0(s0)
   1c2ca:	6f9c                	c.ld	a5,24(a5)
   1c2cc:	8522                	c.mv	a0,s0
   1c2ce:	9782                	c.jalr	a5
  return cur.pos;
   1c2d0:	bf4d                	c.j	1c282 <dwarf::value::as_block(unsigned long*) const+0x2a6>
      return __exchange_and_add(__mem, __val);
   1c2d2:	55fd                	c.li	a1,-1
   1c2d4:	03440513          	addi	a0,s0,52
   1c2d8:	858fa0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c2dc:	b7dd                	c.j	1c2c2 <dwarf::value::as_block(unsigned long*) const+0x2e6>
      { return _M_dataplus._M_p; }
   1c2de:	842a                	c.mv	s0,a0
   1c2e0:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c2e2:	08bc                	c.addi4spn	a5,sp,88
   1c2e4:	00f50463          	beq	a0,a5,1c2ec <dwarf::value::as_block(unsigned long*) const+0x310>
   1c2e8:	9c8fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c2ec:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c2ee:	183c                	c.addi4spn	a5,sp,56
   1c2f0:	00f50463          	beq	a0,a5,1c2f8 <dwarf::value::as_block(unsigned long*) const+0x31c>
   1c2f4:	9bcfa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c2f8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c2fa:	083c                	c.addi4spn	a5,sp,24
   1c2fc:	00f50463          	beq	a0,a5,1c304 <dwarf::value::as_block(unsigned long*) const+0x328>
   1c300:	9b0fa0ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1c304:	854a                	c.mv	a0,s2
   1c306:	96afa0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1c30a:	7546                	c.ldsp	a0,112(sp)
   1c30c:	c511                	c.beqz	a0,1c318 <dwarf::value::as_block(unsigned long*) const+0x33c>
	  _M_pi->_M_release();
   1c30e:	0001d317          	auipc	t1,0x1d
   1c312:	0b233303          	ld	t1,178(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1c316:	9302                	c.jalr	t1
   1c318:	8522                	c.mv	a0,s0
   1c31a:	b76fa0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1c31e:	842a                	c.mv	s0,a0
   1c320:	b7f1                	c.j	1c2ec <dwarf::value::as_block(unsigned long*) const+0x310>
   1c322:	842a                	c.mv	s0,a0
   1c324:	bfd1                	c.j	1c2f8 <dwarf::value::as_block(unsigned long*) const+0x31c>
   1c326:	842a                	c.mv	s0,a0
   1c328:	bff1                	c.j	1c304 <dwarf::value::as_block(unsigned long*) const+0x328>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c32a:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   1c32e:	0705                	c.addi	a4,1
   1c330:	fcba                	c.sdsp	a4,120(sp)
    *size_out = cur.fixed<uint8_t>();
   1c332:	e01c                	c.sd	a5,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c334:	7726                	c.ldsp	a4,104(sp)
   1c336:	6b14                	c.ld	a3,16(a4)
   1c338:	7766                	c.ldsp	a4,120(sp)
   1c33a:	40e68633          	sub	a2,a3,a4
   1c33e:	00f66463          	bltu	a2,a5,1c346 <dwarf::value::as_block(unsigned long*) const+0x36a>
   1c342:	f0d76fe3          	bltu	a4,a3,1c260 <dwarf::value::as_block(unsigned long*) const+0x284>
      underflow();
   1c346:	10a8                	c.addi4spn	a0,sp,104
   1c348:	8f1fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   1c34c:	bf11                	c.j	1c260 <dwarf::value::as_block(unsigned long*) const+0x284>
  cursor cur(cu->data(), offset);
   1c34e:	6898                	c.ld	a4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c350:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1c352:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1c354:	0089b783          	ld	a5,8(s3)
   1c358:	97ba                	c.add	a5,a4
   1c35a:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1c35c:	449c                	c.lw	a5,8(s1)
   1c35e:	37f5                	c.addiw	a5,-3
   1c360:	0007869b          	addiw	a3,a5,0
   1c364:	4755                	c.li	a4,21
   1c366:	e6d762e3          	bltu	a4,a3,1c1ca <dwarf::value::as_block(unsigned long*) const+0x1ee>
   1c36a:	02079713          	slli	a4,a5,0x20
   1c36e:	01e75793          	srli	a5,a4,0x1e
   1c372:	00011717          	auipc	a4,0x11
   1c376:	59670713          	addi	a4,a4,1430 # 2d908 <std::piecewise_construct+0x358>
   1c37a:	97ba                	c.add	a5,a4
   1c37c:	439c                	c.lw	a5,0(a5)
   1c37e:	97ba                	c.add	a5,a4
   1c380:	8782                	c.jr	a5

000000000001c382 <dwarf::value::as_uconstant() const>:

uint64_t value::as_uconstant() const {
   1c382:	7171                	c.addi16sp	sp,-176
   1c384:	f506                	c.sdsp	ra,168(sp)
   1c386:	f122                	c.sdsp	s0,160(sp)
   1c388:	ed26                	c.sdsp	s1,152(sp)
   1c38a:	e94a                	c.sdsp	s2,144(sp)
   1c38c:	e54e                	c.sdsp	s3,136(sp)
   1c38e:	842a                	c.mv	s0,a0
  cursor cur(cu->data(), offset);
   1c390:	6108                	c.ld	a0,0(a0)
   1c392:	d4dfa0ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c396:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1c39a:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1c39c:	36048b63          	beq	s1,zero,1c712 <dwarf::value::as_uconstant() const+0x390>
    if (__is_single_threaded())
   1c3a0:	0001d797          	auipc	a5,0x1d
   1c3a4:	0d87b783          	ld	a5,216(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c3a8:	0007c783          	lbu	a5,0(a5)
   1c3ac:	cfad                	c.beqz	a5,1c426 <dwarf::value::as_uconstant() const+0xa4>
  { *__mem += __val; }
   1c3ae:	589c                	c.lw	a5,48(s1)
   1c3b0:	2785                	c.addiw	a5,1
   1c3b2:	d89c                	c.sw	a5,48(s1)
   1c3b4:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c3b8:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c3ba:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1c3bc:	0001d797          	auipc	a5,0x1d
   1c3c0:	0bc7b783          	ld	a5,188(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c3c4:	0007c783          	lbu	a5,0(a5)
   1c3c8:	c7ad                	c.beqz	a5,1c432 <dwarf::value::as_uconstant() const+0xb0>
  { *__mem += __val; }
   1c3ca:	589c                	c.lw	a5,48(s1)
   1c3cc:	2785                	c.addiw	a5,1
   1c3ce:	d89c                	c.sw	a5,48(s1)
   1c3d0:	00893783          	ld	a5,8(s2)
   1c3d4:	97ce                	c.add	a5,s3
   1c3d6:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1c3d8:	0001d797          	auipc	a5,0x1d
   1c3dc:	0a07b783          	ld	a5,160(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c3e0:	0007c783          	lbu	a5,0(a5)
   1c3e4:	cfa9                	c.beqz	a5,1c43e <dwarf::value::as_uconstant() const+0xbc>
    _Atomic_word __result = *__mem;
   1c3e6:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c3e8:	fff5079b          	addiw	a5,a0,-1
   1c3ec:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c3ee:	4785                	c.li	a5,1
   1c3f0:	32f51863          	bne	a0,a5,1c720 <dwarf::value::as_uconstant() const+0x39e>
	_M_dispose();
   1c3f4:	609c                	c.ld	a5,0(s1)
   1c3f6:	6b9c                	c.ld	a5,16(a5)
   1c3f8:	8526                	c.mv	a0,s1
   1c3fa:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c3fc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c400:	0001d797          	auipc	a5,0x1d
   1c404:	0787b783          	ld	a5,120(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c408:	0007c783          	lbu	a5,0(a5)
   1c40c:	cf9d                	c.beqz	a5,1c44a <dwarf::value::as_uconstant() const+0xc8>
    _Atomic_word __result = *__mem;
   1c40e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c410:	fff5079b          	addiw	a5,a0,-1
   1c414:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c416:	4785                	c.li	a5,1
   1c418:	30f51463          	bne	a0,a5,1c720 <dwarf::value::as_uconstant() const+0x39e>
	    _M_destroy();
   1c41c:	609c                	c.ld	a5,0(s1)
   1c41e:	6f9c                	c.ld	a5,24(a5)
   1c420:	8526                	c.mv	a0,s1
   1c422:	9782                	c.jalr	a5
   1c424:	acf5                	c.j	1c720 <dwarf::value::as_uconstant() const+0x39e>
      __atomic_add(__mem, __val);
   1c426:	4585                	c.li	a1,1
   1c428:	03048513          	addi	a0,s1,48
   1c42c:	ed5f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c430:	b751                	c.j	1c3b4 <dwarf::value::as_uconstant() const+0x32>
   1c432:	4585                	c.li	a1,1
   1c434:	03048513          	addi	a0,s1,48
   1c438:	ec9f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c43c:	bf51                	c.j	1c3d0 <dwarf::value::as_uconstant() const+0x4e>
      return __exchange_and_add(__mem, __val);
   1c43e:	55fd                	c.li	a1,-1
   1c440:	03048513          	addi	a0,s1,48
   1c444:	eedf90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c448:	b75d                	c.j	1c3ee <dwarf::value::as_uconstant() const+0x6c>
   1c44a:	55fd                	c.li	a1,-1
   1c44c:	03448513          	addi	a0,s1,52
   1c450:	ee1f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c454:	b7c9                	c.j	1c416 <dwarf::value::as_uconstant() const+0x94>
    while (pos < sec->end) {
   1c456:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   1c458:	75a6                	c.ldsp	a1,104(sp)
   1c45a:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   1c45c:	4401                	c.li	s0,0
    int shift = 0;
   1c45e:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1c460:	02e7f563          	bgeu	a5,a4,1c48a <dwarf::value::as_uconstant() const+0x108>
      uint8_t byte = *(uint8_t *)(pos++);
   1c464:	0785                	c.addi	a5,1
   1c466:	fcbe                	c.sdsp	a5,120(sp)
   1c468:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1c46c:	07f77693          	andi	a3,a4,127
   1c470:	00c696b3          	sll	a3,a3,a2
   1c474:	8c55                	c.or	s0,a3
      if ((byte & 0x80) == 0)
   1c476:	0187171b          	slliw	a4,a4,0x18
   1c47a:	4187571b          	sraiw	a4,a4,0x18
   1c47e:	26075263          	bge	a4,zero,1c6e2 <dwarf::value::as_uconstant() const+0x360>
      shift += 7;
   1c482:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1c484:	6998                	c.ld	a4,16(a1)
   1c486:	fce7efe3          	bltu	a5,a4,1c464 <dwarf::value::as_uconstant() const+0xe2>
    underflow();
   1c48a:	10a8                	c.addi4spn	a0,sp,104
   1c48c:	facfe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   1c490:	aa45                	c.j	1c640 <dwarf::value::as_uconstant() const+0x2be>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c492:	77a6                	c.ldsp	a5,104(sp)
   1c494:	6b98                	c.ld	a4,16(a5)
   1c496:	77e6                	c.ldsp	a5,120(sp)
   1c498:	00e7e563          	bltu	a5,a4,1c4a2 <dwarf::value::as_uconstant() const+0x120>
      underflow();
   1c49c:	10a8                	c.addi4spn	a0,sp,104
   1c49e:	f9afe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c4a2:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c4a4:	7726                	c.ldsp	a4,104(sp)
   1c4a6:	4f58                	c.lw	a4,28(a4)
   1c4a8:	22070963          	beq	a4,zero,1c6da <dwarf::value::as_uconstant() const+0x358>
        val = (val << 8) | (uint64_t)p[i];
   1c4ac:	0007c403          	lbu	s0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1c4b0:	a43d                	c.j	1c6de <dwarf::value::as_uconstant() const+0x35c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c4b2:	77a6                	c.ldsp	a5,104(sp)
   1c4b4:	6b98                	c.ld	a4,16(a5)
   1c4b6:	77e6                	c.ldsp	a5,120(sp)
   1c4b8:	40f70633          	sub	a2,a4,a5
   1c4bc:	4685                	c.li	a3,1
   1c4be:	00c6f463          	bgeu	a3,a2,1c4c6 <dwarf::value::as_uconstant() const+0x144>
   1c4c2:	00e7e563          	bltu	a5,a4,1c4cc <dwarf::value::as_uconstant() const+0x14a>
      underflow();
   1c4c6:	10a8                	c.addi4spn	a0,sp,104
   1c4c8:	f70fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c4cc:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c4ce:	7726                	c.ldsp	a4,104(sp)
   1c4d0:	4f58                	c.lw	a4,28(a4)
   1c4d2:	eb11                	c.bnez	a4,1c4e6 <dwarf::value::as_uconstant() const+0x164>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c4d4:	0017c403          	lbu	s0,1(a5)
   1c4d8:	0422                	c.slli	s0,0x8
   1c4da:	0007c703          	lbu	a4,0(a5)
   1c4de:	8c59                	c.or	s0,a4
    pos += sizeof(T);
   1c4e0:	0789                	c.addi	a5,2
   1c4e2:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<uint8_t>();
  case DW_FORM::data2:
    return cur.fixed<uint16_t>();
   1c4e4:	aafd                	c.j	1c6e2 <dwarf::value::as_uconstant() const+0x360>
        val = (val << 8) | (uint64_t)p[i];
   1c4e6:	0007c403          	lbu	s0,0(a5)
   1c4ea:	0422                	c.slli	s0,0x8
   1c4ec:	0017c703          	lbu	a4,1(a5)
   1c4f0:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c4f2:	b7fd                	c.j	1c4e0 <dwarf::value::as_uconstant() const+0x15e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c4f4:	77a6                	c.ldsp	a5,104(sp)
   1c4f6:	6b98                	c.ld	a4,16(a5)
   1c4f8:	77e6                	c.ldsp	a5,120(sp)
   1c4fa:	40f70633          	sub	a2,a4,a5
   1c4fe:	468d                	c.li	a3,3
   1c500:	00c6f463          	bgeu	a3,a2,1c508 <dwarf::value::as_uconstant() const+0x186>
   1c504:	00e7e563          	bltu	a5,a4,1c50e <dwarf::value::as_uconstant() const+0x18c>
      underflow();
   1c508:	10a8                	c.addi4spn	a0,sp,104
   1c50a:	f2efe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c50e:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c510:	77a6                	c.ldsp	a5,104(sp)
   1c512:	4fdc                	c.lw	a5,28(a5)
   1c514:	e39d                	c.bnez	a5,1c53a <dwarf::value::as_uconstant() const+0x1b8>
   1c516:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c518:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c51a:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1c51e:	0006c703          	lbu	a4,0(a3)
   1c522:	00f71733          	sll	a4,a4,a5
   1c526:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c528:	0685                	c.addi	a3,1
   1c52a:	27a1                	c.addiw	a5,8
   1c52c:	feb799e3          	bne	a5,a1,1c51e <dwarf::value::as_uconstant() const+0x19c>
    pos += sizeof(T);
   1c530:	0611                	c.addi	a2,4
   1c532:	fcb2                	c.sdsp	a2,120(sp)
   1c534:	1402                	c.slli	s0,0x20
   1c536:	9001                	c.srli	s0,0x20
  case DW_FORM::data4:
    return cur.fixed<uint32_t>();
   1c538:	a26d                	c.j	1c6e2 <dwarf::value::as_uconstant() const+0x360>
   1c53a:	87b2                	c.mv	a5,a2
   1c53c:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1c540:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1c542:	0422                	c.slli	s0,0x8
   1c544:	0007c703          	lbu	a4,0(a5)
   1c548:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c54a:	0785                	c.addi	a5,1
   1c54c:	fef69be3          	bne	a3,a5,1c542 <dwarf::value::as_uconstant() const+0x1c0>
   1c550:	b7c5                	c.j	1c530 <dwarf::value::as_uconstant() const+0x1ae>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c552:	77a6                	c.ldsp	a5,104(sp)
   1c554:	6b98                	c.ld	a4,16(a5)
   1c556:	77e6                	c.ldsp	a5,120(sp)
   1c558:	40f70633          	sub	a2,a4,a5
   1c55c:	469d                	c.li	a3,7
   1c55e:	00c6f463          	bgeu	a3,a2,1c566 <dwarf::value::as_uconstant() const+0x1e4>
   1c562:	00e7e563          	bltu	a5,a4,1c56c <dwarf::value::as_uconstant() const+0x1ea>
      underflow();
   1c566:	10a8                	c.addi4spn	a0,sp,104
   1c568:	ed0fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c56c:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c56e:	77a6                	c.ldsp	a5,104(sp)
   1c570:	4fdc                	c.lw	a5,28(a5)
   1c572:	e38d                	c.bnez	a5,1c594 <dwarf::value::as_uconstant() const+0x212>
   1c574:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c576:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c578:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1c57c:	0006c703          	lbu	a4,0(a3)
   1c580:	00f71733          	sll	a4,a4,a5
   1c584:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c586:	0685                	c.addi	a3,1
   1c588:	27a1                	c.addiw	a5,8
   1c58a:	feb799e3          	bne	a5,a1,1c57c <dwarf::value::as_uconstant() const+0x1fa>
    pos += sizeof(T);
   1c58e:	0621                	c.addi	a2,8
   1c590:	fcb2                	c.sdsp	a2,120(sp)
   1c592:	aa81                	c.j	1c6e2 <dwarf::value::as_uconstant() const+0x360>
   1c594:	87b2                	c.mv	a5,a2
   1c596:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1c59a:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1c59c:	0422                	c.slli	s0,0x8
   1c59e:	0007c703          	lbu	a4,0(a5)
   1c5a2:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c5a4:	0785                	c.addi	a5,1
   1c5a6:	fed79be3          	bne	a5,a3,1c59c <dwarf::value::as_uconstant() const+0x21a>
   1c5aa:	b7d5                	c.j	1c58e <dwarf::value::as_uconstant() const+0x20c>
    return cur.fixed<uint64_t>();
  case DW_FORM::udata:
    return cur.uleb128();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as uconstant");
   1c5ac:	4541                	c.li	a0,16
   1c5ae:	e23f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1c5b2:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1c5b4:	444c                	c.lw	a1,12(s0)
   1c5b6:	0028                	c.addi4spn	a0,sp,8
   1c5b8:	7470a0ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c5bc:	00011617          	auipc	a2,0x11
   1c5c0:	1bc60613          	addi	a2,a2,444 # 2d778 <std::piecewise_construct+0x1c8>
   1c5c4:	4581                	c.li	a1,0
   1c5c6:	0028                	c.addi4spn	a0,sp,8
   1c5c8:	d79f90ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c5cc:	85aa                	c.mv	a1,a0
   1c5ce:	1020                	c.addi4spn	s0,sp,40
   1c5d0:	8522                	c.mv	a0,s0
   1c5d2:	e3ff90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1c5d6:	00011597          	auipc	a1,0x11
   1c5da:	1d258593          	addi	a1,a1,466 # 2d7a8 <std::piecewise_construct+0x1f8>
   1c5de:	8522                	c.mv	a0,s0
   1c5e0:	960fa0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1c5e4:	85aa                	c.mv	a1,a0
   1c5e6:	00a0                	c.addi4spn	s0,sp,72
   1c5e8:	8522                	c.mv	a0,s0
   1c5ea:	e27f90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1c5ee:	85a2                	c.mv	a1,s0
   1c5f0:	8526                	c.mv	a0,s1
   1c5f2:	99efa0ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1c5f6:	0001d797          	auipc	a5,0x1d
   1c5fa:	e4a7b783          	ld	a5,-438(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1c5fe:	07c1                	c.addi	a5,16
   1c600:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1c602:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c604:	08bc                	c.addi4spn	a5,sp,88
   1c606:	00f50463          	beq	a0,a5,1c60e <dwarf::value::as_uconstant() const+0x28c>
   1c60a:	ea7f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c60e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c610:	183c                	c.addi4spn	a5,sp,56
   1c612:	00f50463          	beq	a0,a5,1c61a <dwarf::value::as_uconstant() const+0x298>
   1c616:	e9bf90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c61a:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c61c:	083c                	c.addi4spn	a5,sp,24
   1c61e:	00f50463          	beq	a0,a5,1c626 <dwarf::value::as_uconstant() const+0x2a4>
   1c622:	e8ff90ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as uconstant");
   1c626:	0001d617          	auipc	a2,0x1d
   1c62a:	faa63603          	ld	a2,-86(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1c62e:	0001d597          	auipc	a1,0x1d
   1c632:	f625b583          	ld	a1,-158(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1c636:	8526                	c.mv	a0,s1
   1c638:	828fa0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1c63c:	842a                	c.mv	s0,a0
   1c63e:	a8b5                	c.j	1c6ba <dwarf::value::as_uconstant() const+0x338>
    return 0;
   1c640:	4401                	c.li	s0,0
   1c642:	a045                	c.j	1c6e2 <dwarf::value::as_uconstant() const+0x360>
   1c644:	55fd                	c.li	a1,-1
   1c646:	03048513          	addi	a0,s1,48
   1c64a:	ce7f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c64e:	a07d                	c.j	1c6fc <dwarf::value::as_uconstant() const+0x37a>
	_M_dispose();
   1c650:	609c                	c.ld	a5,0(s1)
   1c652:	6b9c                	c.ld	a5,16(a5)
   1c654:	8526                	c.mv	a0,s1
   1c656:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c658:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c65c:	0001d797          	auipc	a5,0x1d
   1c660:	e1c7b783          	ld	a5,-484(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c664:	0007c783          	lbu	a5,0(a5)
   1c668:	cf89                	c.beqz	a5,1c682 <dwarf::value::as_uconstant() const+0x300>
    _Atomic_word __result = *__mem;
   1c66a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c66c:	fff5079b          	addiw	a5,a0,-1
   1c670:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c672:	4785                	c.li	a5,1
   1c674:	08f51763          	bne	a0,a5,1c702 <dwarf::value::as_uconstant() const+0x380>
	    _M_destroy();
   1c678:	609c                	c.ld	a5,0(s1)
   1c67a:	6f9c                	c.ld	a5,24(a5)
   1c67c:	8526                	c.mv	a0,s1
   1c67e:	9782                	c.jalr	a5
   1c680:	a049                	c.j	1c702 <dwarf::value::as_uconstant() const+0x380>
      return __exchange_and_add(__mem, __val);
   1c682:	55fd                	c.li	a1,-1
   1c684:	03448513          	addi	a0,s1,52
   1c688:	ca9f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c68c:	b7dd                	c.j	1c672 <dwarf::value::as_uconstant() const+0x2f0>
      { return _M_dataplus._M_p; }
   1c68e:	842a                	c.mv	s0,a0
   1c690:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c692:	08bc                	c.addi4spn	a5,sp,88
   1c694:	00f50463          	beq	a0,a5,1c69c <dwarf::value::as_uconstant() const+0x31a>
   1c698:	e19f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c69c:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c69e:	183c                	c.addi4spn	a5,sp,56
   1c6a0:	00f50463          	beq	a0,a5,1c6a8 <dwarf::value::as_uconstant() const+0x326>
   1c6a4:	e0df90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c6a8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c6aa:	083c                	c.addi4spn	a5,sp,24
   1c6ac:	00f50463          	beq	a0,a5,1c6b4 <dwarf::value::as_uconstant() const+0x332>
   1c6b0:	e01f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1c6b4:	8526                	c.mv	a0,s1
   1c6b6:	dbbf90ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1c6ba:	7546                	c.ldsp	a0,112(sp)
   1c6bc:	c511                	c.beqz	a0,1c6c8 <dwarf::value::as_uconstant() const+0x346>
	  _M_pi->_M_release();
   1c6be:	0001d317          	auipc	t1,0x1d
   1c6c2:	d0233303          	ld	t1,-766(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1c6c6:	9302                	c.jalr	t1
   1c6c8:	8522                	c.mv	a0,s0
   1c6ca:	fc7f90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1c6ce:	842a                	c.mv	s0,a0
   1c6d0:	b7f1                	c.j	1c69c <dwarf::value::as_uconstant() const+0x31a>
   1c6d2:	842a                	c.mv	s0,a0
   1c6d4:	bfd1                	c.j	1c6a8 <dwarf::value::as_uconstant() const+0x326>
   1c6d6:	842a                	c.mv	s0,a0
   1c6d8:	bff1                	c.j	1c6b4 <dwarf::value::as_uconstant() const+0x332>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c6da:	0007c403          	lbu	s0,0(a5)
    pos += sizeof(T);
   1c6de:	0785                	c.addi	a5,1
   1c6e0:	fcbe                	c.sdsp	a5,120(sp)
	if (_M_pi != nullptr)
   1c6e2:	74c6                	c.ldsp	s1,112(sp)
   1c6e4:	cc99                	c.beqz	s1,1c702 <dwarf::value::as_uconstant() const+0x380>
    if (__is_single_threaded())
   1c6e6:	0001d797          	auipc	a5,0x1d
   1c6ea:	d927b783          	ld	a5,-622(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c6ee:	0007c783          	lbu	a5,0(a5)
   1c6f2:	dba9                	c.beqz	a5,1c644 <dwarf::value::as_uconstant() const+0x2c2>
    _Atomic_word __result = *__mem;
   1c6f4:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c6f6:	fff5079b          	addiw	a5,a0,-1
   1c6fa:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c6fc:	4785                	c.li	a5,1
   1c6fe:	f4f509e3          	beq	a0,a5,1c650 <dwarf::value::as_uconstant() const+0x2ce>
  }
}
   1c702:	8522                	c.mv	a0,s0
   1c704:	70aa                	c.ldsp	ra,168(sp)
   1c706:	740a                	c.ldsp	s0,160(sp)
   1c708:	64ea                	c.ldsp	s1,152(sp)
   1c70a:	694a                	c.ldsp	s2,144(sp)
   1c70c:	69aa                	c.ldsp	s3,136(sp)
   1c70e:	614d                	c.addi16sp	sp,176
   1c710:	8082                	c.jr	ra
  cursor cur(cu->data(), offset);
   1c712:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c714:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c716:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1c718:	00893783          	ld	a5,8(s2)
   1c71c:	97ba                	c.add	a5,a4
   1c71e:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1c720:	441c                	c.lw	a5,8(s0)
   1c722:	37ed                	c.addiw	a5,-5
   1c724:	0007869b          	addiw	a3,a5,0
   1c728:	4729                	c.li	a4,10
   1c72a:	e8d761e3          	bltu	a4,a3,1c5ac <dwarf::value::as_uconstant() const+0x22a>
   1c72e:	02079713          	slli	a4,a5,0x20
   1c732:	01e75793          	srli	a5,a4,0x1e
   1c736:	00011717          	auipc	a4,0x11
   1c73a:	22a70713          	addi	a4,a4,554 # 2d960 <std::piecewise_construct+0x3b0>
   1c73e:	97ba                	c.add	a5,a4
   1c740:	439c                	c.lw	a5,0(a5)
   1c742:	97ba                	c.add	a5,a4
   1c744:	8782                	c.jr	a5

000000000001c746 <dwarf::value::as_sconstant() const>:

int64_t value::as_sconstant() const {
   1c746:	7171                	c.addi16sp	sp,-176
   1c748:	f506                	c.sdsp	ra,168(sp)
   1c74a:	f122                	c.sdsp	s0,160(sp)
   1c74c:	ed26                	c.sdsp	s1,152(sp)
   1c74e:	e94a                	c.sdsp	s2,144(sp)
   1c750:	e54e                	c.sdsp	s3,136(sp)
   1c752:	842a                	c.mv	s0,a0
  cursor cur(cu->data(), offset);
   1c754:	6108                	c.ld	a0,0(a0)
   1c756:	989fa0ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c75a:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1c75e:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1c760:	34048963          	beq	s1,zero,1cab2 <dwarf::value::as_sconstant() const+0x36c>
    if (__is_single_threaded())
   1c764:	0001d797          	auipc	a5,0x1d
   1c768:	d147b783          	ld	a5,-748(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c76c:	0007c783          	lbu	a5,0(a5)
   1c770:	cfad                	c.beqz	a5,1c7ea <dwarf::value::as_sconstant() const+0xa4>
  { *__mem += __val; }
   1c772:	589c                	c.lw	a5,48(s1)
   1c774:	2785                	c.addiw	a5,1
   1c776:	d89c                	c.sw	a5,48(s1)
   1c778:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c77c:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c77e:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1c780:	0001d797          	auipc	a5,0x1d
   1c784:	cf87b783          	ld	a5,-776(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c788:	0007c783          	lbu	a5,0(a5)
   1c78c:	c7ad                	c.beqz	a5,1c7f6 <dwarf::value::as_sconstant() const+0xb0>
  { *__mem += __val; }
   1c78e:	589c                	c.lw	a5,48(s1)
   1c790:	2785                	c.addiw	a5,1
   1c792:	d89c                	c.sw	a5,48(s1)
   1c794:	00893783          	ld	a5,8(s2)
   1c798:	97ce                	c.add	a5,s3
   1c79a:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1c79c:	0001d797          	auipc	a5,0x1d
   1c7a0:	cdc7b783          	ld	a5,-804(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c7a4:	0007c783          	lbu	a5,0(a5)
   1c7a8:	cfa9                	c.beqz	a5,1c802 <dwarf::value::as_sconstant() const+0xbc>
    _Atomic_word __result = *__mem;
   1c7aa:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c7ac:	fff5079b          	addiw	a5,a0,-1
   1c7b0:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c7b2:	4785                	c.li	a5,1
   1c7b4:	30f51663          	bne	a0,a5,1cac0 <dwarf::value::as_sconstant() const+0x37a>
	_M_dispose();
   1c7b8:	609c                	c.ld	a5,0(s1)
   1c7ba:	6b9c                	c.ld	a5,16(a5)
   1c7bc:	8526                	c.mv	a0,s1
   1c7be:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c7c0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c7c4:	0001d797          	auipc	a5,0x1d
   1c7c8:	cb47b783          	ld	a5,-844(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c7cc:	0007c783          	lbu	a5,0(a5)
   1c7d0:	cf9d                	c.beqz	a5,1c80e <dwarf::value::as_sconstant() const+0xc8>
    _Atomic_word __result = *__mem;
   1c7d2:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c7d4:	fff5079b          	addiw	a5,a0,-1
   1c7d8:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c7da:	4785                	c.li	a5,1
   1c7dc:	2ef51263          	bne	a0,a5,1cac0 <dwarf::value::as_sconstant() const+0x37a>
	    _M_destroy();
   1c7e0:	609c                	c.ld	a5,0(s1)
   1c7e2:	6f9c                	c.ld	a5,24(a5)
   1c7e4:	8526                	c.mv	a0,s1
   1c7e6:	9782                	c.jalr	a5
   1c7e8:	ace1                	c.j	1cac0 <dwarf::value::as_sconstant() const+0x37a>
      __atomic_add(__mem, __val);
   1c7ea:	4585                	c.li	a1,1
   1c7ec:	03048513          	addi	a0,s1,48
   1c7f0:	b11f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c7f4:	b751                	c.j	1c778 <dwarf::value::as_sconstant() const+0x32>
   1c7f6:	4585                	c.li	a1,1
   1c7f8:	03048513          	addi	a0,s1,48
   1c7fc:	b05f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c800:	bf51                	c.j	1c794 <dwarf::value::as_sconstant() const+0x4e>
      return __exchange_and_add(__mem, __val);
   1c802:	55fd                	c.li	a1,-1
   1c804:	03048513          	addi	a0,s1,48
   1c808:	b29f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c80c:	b75d                	c.j	1c7b2 <dwarf::value::as_sconstant() const+0x6c>
   1c80e:	55fd                	c.li	a1,-1
   1c810:	03448513          	addi	a0,s1,52
   1c814:	b1df90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c818:	b7c9                	c.j	1c7da <dwarf::value::as_sconstant() const+0x94>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c81a:	77a6                	c.ldsp	a5,104(sp)
   1c81c:	6b98                	c.ld	a4,16(a5)
   1c81e:	77e6                	c.ldsp	a5,120(sp)
   1c820:	00e7e563          	bltu	a5,a4,1c82a <dwarf::value::as_sconstant() const+0xe4>
      underflow();
   1c824:	10a8                	c.addi4spn	a0,sp,104
   1c826:	c12fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c82a:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c82c:	7726                	c.ldsp	a4,104(sp)
   1c82e:	4f58                	c.lw	a4,28(a4)
   1c830:	24070163          	beq	a4,zero,1ca72 <dwarf::value::as_sconstant() const+0x32c>
        val = (val << 8) | (uint64_t)p[i];
   1c834:	0007c503          	lbu	a0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1c838:	ac3d                	c.j	1ca76 <dwarf::value::as_sconstant() const+0x330>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c83a:	77a6                	c.ldsp	a5,104(sp)
   1c83c:	6b98                	c.ld	a4,16(a5)
   1c83e:	77e6                	c.ldsp	a5,120(sp)
   1c840:	40f70633          	sub	a2,a4,a5
   1c844:	4685                	c.li	a3,1
   1c846:	00c6f463          	bgeu	a3,a2,1c84e <dwarf::value::as_sconstant() const+0x108>
   1c84a:	00e7e563          	bltu	a5,a4,1c854 <dwarf::value::as_sconstant() const+0x10e>
      underflow();
   1c84e:	10a8                	c.addi4spn	a0,sp,104
   1c850:	be8fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c854:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c856:	7726                	c.ldsp	a4,104(sp)
   1c858:	4f58                	c.lw	a4,28(a4)
   1c85a:	ef11                	c.bnez	a4,1c876 <dwarf::value::as_sconstant() const+0x130>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c85c:	0017c503          	lbu	a0,1(a5)
   1c860:	0522                	c.slli	a0,0x8
   1c862:	0007c703          	lbu	a4,0(a5)
   1c866:	8d59                	c.or	a0,a4
    pos += sizeof(T);
   1c868:	0789                	c.addi	a5,2
   1c86a:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<int8_t>();
  case DW_FORM::data2:
    return cur.fixed<int16_t>();
   1c86c:	0105141b          	slliw	s0,a0,0x10
   1c870:	4104541b          	sraiw	s0,s0,0x10
   1c874:	a439                	c.j	1ca82 <dwarf::value::as_sconstant() const+0x33c>
        val = (val << 8) | (uint64_t)p[i];
   1c876:	0007c503          	lbu	a0,0(a5)
   1c87a:	0522                	c.slli	a0,0x8
   1c87c:	0017c703          	lbu	a4,1(a5)
   1c880:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c882:	b7dd                	c.j	1c868 <dwarf::value::as_sconstant() const+0x122>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c884:	77a6                	c.ldsp	a5,104(sp)
   1c886:	6b98                	c.ld	a4,16(a5)
   1c888:	77e6                	c.ldsp	a5,120(sp)
   1c88a:	40f70633          	sub	a2,a4,a5
   1c88e:	468d                	c.li	a3,3
   1c890:	00c6f463          	bgeu	a3,a2,1c898 <dwarf::value::as_sconstant() const+0x152>
   1c894:	00e7e563          	bltu	a5,a4,1c89e <dwarf::value::as_sconstant() const+0x158>
      underflow();
   1c898:	10a8                	c.addi4spn	a0,sp,104
   1c89a:	b9efe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c89e:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c8a0:	77a6                	c.ldsp	a5,104(sp)
   1c8a2:	4fdc                	c.lw	a5,28(a5)
   1c8a4:	e39d                	c.bnez	a5,1c8ca <dwarf::value::as_sconstant() const+0x184>
   1c8a6:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c8a8:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c8aa:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1c8ae:	0006c703          	lbu	a4,0(a3)
   1c8b2:	00f71733          	sll	a4,a4,a5
   1c8b6:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c8b8:	0685                	c.addi	a3,1
   1c8ba:	27a1                	c.addiw	a5,8
   1c8bc:	feb799e3          	bne	a5,a1,1c8ae <dwarf::value::as_sconstant() const+0x168>
    pos += sizeof(T);
   1c8c0:	0611                	c.addi	a2,4
   1c8c2:	fcb2                	c.sdsp	a2,120(sp)
  case DW_FORM::data4:
    return cur.fixed<int32_t>();
   1c8c4:	0005041b          	addiw	s0,a0,0
   1c8c8:	aa6d                	c.j	1ca82 <dwarf::value::as_sconstant() const+0x33c>
   1c8ca:	87b2                	c.mv	a5,a2
   1c8cc:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1c8d0:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1c8d2:	0522                	c.slli	a0,0x8
   1c8d4:	0007c703          	lbu	a4,0(a5)
   1c8d8:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c8da:	0785                	c.addi	a5,1
   1c8dc:	fef69be3          	bne	a3,a5,1c8d2 <dwarf::value::as_sconstant() const+0x18c>
   1c8e0:	b7c5                	c.j	1c8c0 <dwarf::value::as_sconstant() const+0x17a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c8e2:	77a6                	c.ldsp	a5,104(sp)
   1c8e4:	6b98                	c.ld	a4,16(a5)
   1c8e6:	77e6                	c.ldsp	a5,120(sp)
   1c8e8:	40f70633          	sub	a2,a4,a5
   1c8ec:	469d                	c.li	a3,7
   1c8ee:	00c6f463          	bgeu	a3,a2,1c8f6 <dwarf::value::as_sconstant() const+0x1b0>
   1c8f2:	00e7e563          	bltu	a5,a4,1c8fc <dwarf::value::as_sconstant() const+0x1b6>
      underflow();
   1c8f6:	10a8                	c.addi4spn	a0,sp,104
   1c8f8:	b40fe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c8fc:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c8fe:	77a6                	c.ldsp	a5,104(sp)
   1c900:	4fdc                	c.lw	a5,28(a5)
   1c902:	e395                	c.bnez	a5,1c926 <dwarf::value::as_sconstant() const+0x1e0>
   1c904:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c906:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c908:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1c90c:	0006c703          	lbu	a4,0(a3)
   1c910:	00f71733          	sll	a4,a4,a5
   1c914:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c916:	0685                	c.addi	a3,1
   1c918:	27a1                	c.addiw	a5,8
   1c91a:	feb799e3          	bne	a5,a1,1c90c <dwarf::value::as_sconstant() const+0x1c6>
    pos += sizeof(T);
   1c91e:	0621                	c.addi	a2,8
   1c920:	fcb2                	c.sdsp	a2,120(sp)
    return (T)val;
   1c922:	842a                	c.mv	s0,a0
   1c924:	aab9                	c.j	1ca82 <dwarf::value::as_sconstant() const+0x33c>
   1c926:	87b2                	c.mv	a5,a2
   1c928:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1c92c:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1c92e:	0522                	c.slli	a0,0x8
   1c930:	0007c703          	lbu	a4,0(a5)
   1c934:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c936:	0785                	c.addi	a5,1
   1c938:	fed79be3          	bne	a5,a3,1c92e <dwarf::value::as_sconstant() const+0x1e8>
   1c93c:	b7cd                	c.j	1c91e <dwarf::value::as_sconstant() const+0x1d8>
  case DW_FORM::data8:
    return cur.fixed<int64_t>();
  case DW_FORM::sdata:
    return cur.sleb128();
   1c93e:	10a8                	c.addi4spn	a0,sp,104
   1c940:	b38fe0ef          	jal	ra,1ac78 <dwarf::cursor::sleb128()>
   1c944:	842a                	c.mv	s0,a0
   1c946:	aa35                	c.j	1ca82 <dwarf::value::as_sconstant() const+0x33c>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sconstant");
   1c948:	4541                	c.li	a0,16
   1c94a:	a87f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1c94e:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1c950:	444c                	c.lw	a1,12(s0)
   1c952:	0028                	c.addi4spn	a0,sp,8
   1c954:	3ab0a0ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c958:	00011617          	auipc	a2,0x11
   1c95c:	e2060613          	addi	a2,a2,-480 # 2d778 <std::piecewise_construct+0x1c8>
   1c960:	4581                	c.li	a1,0
   1c962:	0028                	c.addi4spn	a0,sp,8
   1c964:	9ddf90ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c968:	85aa                	c.mv	a1,a0
   1c96a:	1020                	c.addi4spn	s0,sp,40
   1c96c:	8522                	c.mv	a0,s0
   1c96e:	aa3f90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1c972:	00011597          	auipc	a1,0x11
   1c976:	e4658593          	addi	a1,a1,-442 # 2d7b8 <std::piecewise_construct+0x208>
   1c97a:	8522                	c.mv	a0,s0
   1c97c:	dc5f90ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1c980:	85aa                	c.mv	a1,a0
   1c982:	00a0                	c.addi4spn	s0,sp,72
   1c984:	8522                	c.mv	a0,s0
   1c986:	a8bf90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1c98a:	85a2                	c.mv	a1,s0
   1c98c:	8526                	c.mv	a0,s1
   1c98e:	e03f90ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1c992:	0001d797          	auipc	a5,0x1d
   1c996:	aae7b783          	ld	a5,-1362(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1c99a:	07c1                	c.addi	a5,16
   1c99c:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1c99e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c9a0:	08bc                	c.addi4spn	a5,sp,88
   1c9a2:	00f50463          	beq	a0,a5,1c9aa <dwarf::value::as_sconstant() const+0x264>
   1c9a6:	b0bf90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c9aa:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c9ac:	183c                	c.addi4spn	a5,sp,56
   1c9ae:	00f50463          	beq	a0,a5,1c9b6 <dwarf::value::as_sconstant() const+0x270>
   1c9b2:	afff90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c9b6:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c9b8:	083c                	c.addi4spn	a5,sp,24
   1c9ba:	00f50463          	beq	a0,a5,1c9c2 <dwarf::value::as_sconstant() const+0x27c>
   1c9be:	af3f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as sconstant");
   1c9c2:	0001d617          	auipc	a2,0x1d
   1c9c6:	c0e63603          	ld	a2,-1010(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1c9ca:	0001d597          	auipc	a1,0x1d
   1c9ce:	bc65b583          	ld	a1,-1082(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1c9d2:	8526                	c.mv	a0,s1
   1c9d4:	c8df90ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1c9d8:	842a                	c.mv	s0,a0
   1c9da:	a8a5                	c.j	1ca52 <dwarf::value::as_sconstant() const+0x30c>
   1c9dc:	55fd                	c.li	a1,-1
   1c9de:	03048513          	addi	a0,s1,48
   1c9e2:	94ff90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c9e6:	a85d                	c.j	1ca9c <dwarf::value::as_sconstant() const+0x356>
	_M_dispose();
   1c9e8:	609c                	c.ld	a5,0(s1)
   1c9ea:	6b9c                	c.ld	a5,16(a5)
   1c9ec:	8526                	c.mv	a0,s1
   1c9ee:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c9f0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c9f4:	0001d797          	auipc	a5,0x1d
   1c9f8:	a847b783          	ld	a5,-1404(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c9fc:	0007c783          	lbu	a5,0(a5)
   1ca00:	cf89                	c.beqz	a5,1ca1a <dwarf::value::as_sconstant() const+0x2d4>
    _Atomic_word __result = *__mem;
   1ca02:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1ca04:	fff5079b          	addiw	a5,a0,-1
   1ca08:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ca0a:	4785                	c.li	a5,1
   1ca0c:	08f51b63          	bne	a0,a5,1caa2 <dwarf::value::as_sconstant() const+0x35c>
	    _M_destroy();
   1ca10:	609c                	c.ld	a5,0(s1)
   1ca12:	6f9c                	c.ld	a5,24(a5)
   1ca14:	8526                	c.mv	a0,s1
   1ca16:	9782                	c.jalr	a5
   1ca18:	a069                	c.j	1caa2 <dwarf::value::as_sconstant() const+0x35c>
      return __exchange_and_add(__mem, __val);
   1ca1a:	55fd                	c.li	a1,-1
   1ca1c:	03448513          	addi	a0,s1,52
   1ca20:	911f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ca24:	b7dd                	c.j	1ca0a <dwarf::value::as_sconstant() const+0x2c4>
      { return _M_dataplus._M_p; }
   1ca26:	842a                	c.mv	s0,a0
   1ca28:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1ca2a:	08bc                	c.addi4spn	a5,sp,88
   1ca2c:	00f50463          	beq	a0,a5,1ca34 <dwarf::value::as_sconstant() const+0x2ee>
   1ca30:	a81f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ca34:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1ca36:	183c                	c.addi4spn	a5,sp,56
   1ca38:	00f50463          	beq	a0,a5,1ca40 <dwarf::value::as_sconstant() const+0x2fa>
   1ca3c:	a75f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ca40:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1ca42:	083c                	c.addi4spn	a5,sp,24
   1ca44:	00f50463          	beq	a0,a5,1ca4c <dwarf::value::as_sconstant() const+0x306>
   1ca48:	a69f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1ca4c:	8526                	c.mv	a0,s1
   1ca4e:	a23f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1ca52:	7546                	c.ldsp	a0,112(sp)
   1ca54:	c511                	c.beqz	a0,1ca60 <dwarf::value::as_sconstant() const+0x31a>
	  _M_pi->_M_release();
   1ca56:	0001d317          	auipc	t1,0x1d
   1ca5a:	96a33303          	ld	t1,-1686(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1ca5e:	9302                	c.jalr	t1
   1ca60:	8522                	c.mv	a0,s0
   1ca62:	c2ff90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ca66:	842a                	c.mv	s0,a0
   1ca68:	b7f1                	c.j	1ca34 <dwarf::value::as_sconstant() const+0x2ee>
   1ca6a:	842a                	c.mv	s0,a0
   1ca6c:	bfd1                	c.j	1ca40 <dwarf::value::as_sconstant() const+0x2fa>
   1ca6e:	842a                	c.mv	s0,a0
   1ca70:	bff1                	c.j	1ca4c <dwarf::value::as_sconstant() const+0x306>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ca72:	0007c503          	lbu	a0,0(a5)
    pos += sizeof(T);
   1ca76:	0785                	c.addi	a5,1
   1ca78:	fcbe                	c.sdsp	a5,120(sp)
    return cur.fixed<int8_t>();
   1ca7a:	0185141b          	slliw	s0,a0,0x18
   1ca7e:	4184541b          	sraiw	s0,s0,0x18
	if (_M_pi != nullptr)
   1ca82:	74c6                	c.ldsp	s1,112(sp)
   1ca84:	cc99                	c.beqz	s1,1caa2 <dwarf::value::as_sconstant() const+0x35c>
    if (__is_single_threaded())
   1ca86:	0001d797          	auipc	a5,0x1d
   1ca8a:	9f27b783          	ld	a5,-1550(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ca8e:	0007c783          	lbu	a5,0(a5)
   1ca92:	d7a9                	c.beqz	a5,1c9dc <dwarf::value::as_sconstant() const+0x296>
    _Atomic_word __result = *__mem;
   1ca94:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1ca96:	fff5079b          	addiw	a5,a0,-1
   1ca9a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ca9c:	4785                	c.li	a5,1
   1ca9e:	f4f505e3          	beq	a0,a5,1c9e8 <dwarf::value::as_sconstant() const+0x2a2>
  }
}
   1caa2:	8522                	c.mv	a0,s0
   1caa4:	70aa                	c.ldsp	ra,168(sp)
   1caa6:	740a                	c.ldsp	s0,160(sp)
   1caa8:	64ea                	c.ldsp	s1,152(sp)
   1caaa:	694a                	c.ldsp	s2,144(sp)
   1caac:	69aa                	c.ldsp	s3,136(sp)
   1caae:	614d                	c.addi16sp	sp,176
   1cab0:	8082                	c.jr	ra
  cursor cur(cu->data(), offset);
   1cab2:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cab4:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1cab6:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1cab8:	00893783          	ld	a5,8(s2)
   1cabc:	97ba                	c.add	a5,a4
   1cabe:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1cac0:	441c                	c.lw	a5,8(s0)
   1cac2:	37ed                	c.addiw	a5,-5
   1cac4:	0007869b          	addiw	a3,a5,0
   1cac8:	4721                	c.li	a4,8
   1caca:	e6d76fe3          	bltu	a4,a3,1c948 <dwarf::value::as_sconstant() const+0x202>
   1cace:	02079713          	slli	a4,a5,0x20
   1cad2:	01e75793          	srli	a5,a4,0x1e
   1cad6:	00011717          	auipc	a4,0x11
   1cada:	eb670713          	addi	a4,a4,-330 # 2d98c <std::piecewise_construct+0x3dc>
   1cade:	97ba                	c.add	a5,a4
   1cae0:	439c                	c.lw	a5,0(a5)
   1cae2:	97ba                	c.add	a5,a4
   1cae4:	8782                	c.jr	a5

000000000001cae6 <dwarf::value::as_exprloc() const>:

expr value::as_exprloc() const {
   1cae6:	7171                	c.addi16sp	sp,-176
   1cae8:	f506                	c.sdsp	ra,168(sp)
   1caea:	f122                	c.sdsp	s0,160(sp)
   1caec:	ed26                	c.sdsp	s1,152(sp)
   1caee:	e94a                	c.sdsp	s2,144(sp)
   1caf0:	e54e                	c.sdsp	s3,136(sp)
   1caf2:	e152                	c.sdsp	s4,128(sp)
   1caf4:	84aa                	c.mv	s1,a0
   1caf6:	842e                	c.mv	s0,a1
  cursor cur(cu->data(), offset);
   1caf8:	6188                	c.ld	a0,0(a1)
   1cafa:	de4fa0ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cafe:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1cb02:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1cb06:	34090263          	beq	s2,zero,1ce4a <dwarf::value::as_exprloc() const+0x364>
    if (__is_single_threaded())
   1cb0a:	0001d797          	auipc	a5,0x1d
   1cb0e:	96e7b783          	ld	a5,-1682(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cb12:	0007c783          	lbu	a5,0(a5)
   1cb16:	c7d9                	c.beqz	a5,1cba4 <dwarf::value::as_exprloc() const+0xbe>
  { *__mem += __val; }
   1cb18:	03092783          	lw	a5,48(s2)
   1cb1c:	2785                	c.addiw	a5,1
   1cb1e:	02f92823          	sw	a5,48(s2)
   1cb22:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cb26:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1cb28:	f8ca                	c.sdsp	s2,112(sp)
    if (__is_single_threaded())
   1cb2a:	0001d797          	auipc	a5,0x1d
   1cb2e:	94e7b783          	ld	a5,-1714(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cb32:	0007c783          	lbu	a5,0(a5)
   1cb36:	cfad                	c.beqz	a5,1cbb0 <dwarf::value::as_exprloc() const+0xca>
  { *__mem += __val; }
   1cb38:	03092783          	lw	a5,48(s2)
   1cb3c:	2785                	c.addiw	a5,1
   1cb3e:	02f92823          	sw	a5,48(s2)
   1cb42:	0089b783          	ld	a5,8(s3)
   1cb46:	97d2                	c.add	a5,s4
   1cb48:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1cb4a:	0001d797          	auipc	a5,0x1d
   1cb4e:	92e7b783          	ld	a5,-1746(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cb52:	0007c783          	lbu	a5,0(a5)
   1cb56:	c3bd                	c.beqz	a5,1cbbc <dwarf::value::as_exprloc() const+0xd6>
    _Atomic_word __result = *__mem;
   1cb58:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1cb5c:	fff5079b          	addiw	a5,a0,-1
   1cb60:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1cb64:	4785                	c.li	a5,1
   1cb66:	2ef51963          	bne	a0,a5,1ce58 <dwarf::value::as_exprloc() const+0x372>
	_M_dispose();
   1cb6a:	00093783          	ld	a5,0(s2)
   1cb6e:	6b9c                	c.ld	a5,16(a5)
   1cb70:	854a                	c.mv	a0,s2
   1cb72:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1cb74:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1cb78:	0001d797          	auipc	a5,0x1d
   1cb7c:	9007b783          	ld	a5,-1792(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cb80:	0007c783          	lbu	a5,0(a5)
   1cb84:	c3b1                	c.beqz	a5,1cbc8 <dwarf::value::as_exprloc() const+0xe2>
    _Atomic_word __result = *__mem;
   1cb86:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1cb8a:	fff5079b          	addiw	a5,a0,-1
   1cb8e:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1cb92:	4785                	c.li	a5,1
   1cb94:	2cf51263          	bne	a0,a5,1ce58 <dwarf::value::as_exprloc() const+0x372>
	    _M_destroy();
   1cb98:	00093783          	ld	a5,0(s2)
   1cb9c:	6f9c                	c.ld	a5,24(a5)
   1cb9e:	854a                	c.mv	a0,s2
   1cba0:	9782                	c.jalr	a5
   1cba2:	ac5d                	c.j	1ce58 <dwarf::value::as_exprloc() const+0x372>
      __atomic_add(__mem, __val);
   1cba4:	4585                	c.li	a1,1
   1cba6:	03090513          	addi	a0,s2,48
   1cbaa:	f56f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1cbae:	bf95                	c.j	1cb22 <dwarf::value::as_exprloc() const+0x3c>
   1cbb0:	4585                	c.li	a1,1
   1cbb2:	03090513          	addi	a0,s2,48
   1cbb6:	f4af90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1cbba:	b761                	c.j	1cb42 <dwarf::value::as_exprloc() const+0x5c>
      return __exchange_and_add(__mem, __val);
   1cbbc:	55fd                	c.li	a1,-1
   1cbbe:	03090513          	addi	a0,s2,48
   1cbc2:	f6ef90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cbc6:	bf79                	c.j	1cb64 <dwarf::value::as_exprloc() const+0x7e>
   1cbc8:	55fd                	c.li	a1,-1
   1cbca:	03490513          	addi	a0,s2,52
   1cbce:	f62f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cbd2:	b7c1                	c.j	1cb92 <dwarf::value::as_exprloc() const+0xac>
    while (pos < sec->end) {
   1cbd4:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   1cbd6:	7526                	c.ldsp	a0,104(sp)
   1cbd8:	6918                	c.ld	a4,16(a0)
   1cbda:	02e7f763          	bgeu	a5,a4,1cc08 <dwarf::value::as_exprloc() const+0x122>
    std::uint64_t result = 0;
   1cbde:	4681                	c.li	a3,0
    int shift = 0;
   1cbe0:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   1cbe2:	0785                	c.addi	a5,1
   1cbe4:	fcbe                	c.sdsp	a5,120(sp)
   1cbe6:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1cbea:	07f77613          	andi	a2,a4,127
   1cbee:	00b61633          	sll	a2,a2,a1
   1cbf2:	8ed1                	c.or	a3,a2
      if ((byte & 0x80) == 0)
   1cbf4:	0187171b          	slliw	a4,a4,0x18
   1cbf8:	4187571b          	sraiw	a4,a4,0x18
   1cbfc:	22075e63          	bge	a4,zero,1ce38 <dwarf::value::as_exprloc() const+0x352>
      shift += 7;
   1cc00:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1cc02:	6918                	c.ld	a4,16(a0)
   1cc04:	fce7efe3          	bltu	a5,a4,1cbe2 <dwarf::value::as_exprloc() const+0xfc>
    underflow();
   1cc08:	10a8                	c.addi4spn	a0,sp,104
   1cc0a:	82efe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   1cc0e:	aa99                	c.j	1cd64 <dwarf::value::as_exprloc() const+0x27e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cc10:	77a6                	c.ldsp	a5,104(sp)
   1cc12:	6b98                	c.ld	a4,16(a5)
   1cc14:	77e6                	c.ldsp	a5,120(sp)
   1cc16:	00e7e563          	bltu	a5,a4,1cc20 <dwarf::value::as_exprloc() const+0x13a>
      underflow();
   1cc1a:	10a8                	c.addi4spn	a0,sp,104
   1cc1c:	81cfe0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cc20:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cc22:	7726                	c.ldsp	a4,104(sp)
   1cc24:	4f58                	c.lw	a4,28(a4)
   1cc26:	20070563          	beq	a4,zero,1ce30 <dwarf::value::as_exprloc() const+0x34a>
        val = (val << 8) | (uint64_t)p[i];
   1cc2a:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc2e:	a419                	c.j	1ce34 <dwarf::value::as_exprloc() const+0x34e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cc30:	77a6                	c.ldsp	a5,104(sp)
   1cc32:	6b98                	c.ld	a4,16(a5)
   1cc34:	77e6                	c.ldsp	a5,120(sp)
   1cc36:	40f70633          	sub	a2,a4,a5
   1cc3a:	4685                	c.li	a3,1
   1cc3c:	00c6f463          	bgeu	a3,a2,1cc44 <dwarf::value::as_exprloc() const+0x15e>
   1cc40:	00e7e563          	bltu	a5,a4,1cc4a <dwarf::value::as_exprloc() const+0x164>
      underflow();
   1cc44:	10a8                	c.addi4spn	a0,sp,104
   1cc46:	ff3fd0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cc4a:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cc4c:	7726                	c.ldsp	a4,104(sp)
   1cc4e:	4f58                	c.lw	a4,28(a4)
   1cc50:	eb11                	c.bnez	a4,1cc64 <dwarf::value::as_exprloc() const+0x17e>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cc52:	0017c683          	lbu	a3,1(a5)
   1cc56:	06a2                	c.slli	a3,0x8
   1cc58:	0007c703          	lbu	a4,0(a5)
   1cc5c:	8ed9                	c.or	a3,a4
    pos += sizeof(T);
   1cc5e:	0789                	c.addi	a5,2
   1cc60:	fcbe                	c.sdsp	a5,120(sp)
  case DW_FORM::block1:
    size = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    size = cur.fixed<uint16_t>();
    break;
   1cc62:	aad9                	c.j	1ce38 <dwarf::value::as_exprloc() const+0x352>
        val = (val << 8) | (uint64_t)p[i];
   1cc64:	0007c683          	lbu	a3,0(a5)
   1cc68:	06a2                	c.slli	a3,0x8
   1cc6a:	0017c703          	lbu	a4,1(a5)
   1cc6e:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc70:	b7fd                	c.j	1cc5e <dwarf::value::as_exprloc() const+0x178>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cc72:	77a6                	c.ldsp	a5,104(sp)
   1cc74:	6b98                	c.ld	a4,16(a5)
   1cc76:	77e6                	c.ldsp	a5,120(sp)
   1cc78:	40f70633          	sub	a2,a4,a5
   1cc7c:	468d                	c.li	a3,3
   1cc7e:	00c6f463          	bgeu	a3,a2,1cc86 <dwarf::value::as_exprloc() const+0x1a0>
   1cc82:	00e7e563          	bltu	a5,a4,1cc8c <dwarf::value::as_exprloc() const+0x1a6>
      underflow();
   1cc86:	10a8                	c.addi4spn	a0,sp,104
   1cc88:	fb1fd0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cc8c:	75e6                	c.ldsp	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cc8e:	77a6                	c.ldsp	a5,104(sp)
   1cc90:	4fdc                	c.lw	a5,28(a5)
   1cc92:	e39d                	c.bnez	a5,1ccb8 <dwarf::value::as_exprloc() const+0x1d2>
   1cc94:	862e                	c.mv	a2,a1
    uint64_t val = 0;
   1cc96:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc98:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1cc9c:	00064703          	lbu	a4,0(a2)
   1cca0:	00f71733          	sll	a4,a4,a5
   1cca4:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cca6:	0605                	c.addi	a2,1
   1cca8:	27a1                	c.addiw	a5,8
   1ccaa:	fea799e3          	bne	a5,a0,1cc9c <dwarf::value::as_exprloc() const+0x1b6>
    pos += sizeof(T);
   1ccae:	0591                	c.addi	a1,4
   1ccb0:	fcae                	c.sdsp	a1,120(sp)
   1ccb2:	1682                	c.slli	a3,0x20
   1ccb4:	9281                	c.srli	a3,0x20
  case DW_FORM::block4:
    size = cur.fixed<uint32_t>();
    break;
   1ccb6:	a249                	c.j	1ce38 <dwarf::value::as_exprloc() const+0x352>
   1ccb8:	87ae                	c.mv	a5,a1
   1ccba:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1ccbe:	4681                	c.li	a3,0
        val = (val << 8) | (uint64_t)p[i];
   1ccc0:	06a2                	c.slli	a3,0x8
   1ccc2:	0007c703          	lbu	a4,0(a5)
   1ccc6:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1ccc8:	0785                	c.addi	a5,1
   1ccca:	fec79be3          	bne	a5,a2,1ccc0 <dwarf::value::as_exprloc() const+0x1da>
   1ccce:	b7c5                	c.j	1ccae <dwarf::value::as_exprloc() const+0x1c8>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1ccd0:	4541                	c.li	a0,16
   1ccd2:	efef90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1ccd6:	84aa                	c.mv	s1,a0
   1ccd8:	444c                	c.lw	a1,12(s0)
   1ccda:	0028                	c.addi4spn	a0,sp,8
   1ccdc:	0230a0ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1cce0:	00011617          	auipc	a2,0x11
   1cce4:	a9860613          	addi	a2,a2,-1384 # 2d778 <std::piecewise_construct+0x1c8>
   1cce8:	4581                	c.li	a1,0
   1ccea:	0028                	c.addi4spn	a0,sp,8
   1ccec:	e54f90ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ccf0:	85aa                	c.mv	a1,a0
   1ccf2:	1020                	c.addi4spn	s0,sp,40
   1ccf4:	8522                	c.mv	a0,s0
   1ccf6:	f1af90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1ccfa:	00011597          	auipc	a1,0x11
   1ccfe:	ace58593          	addi	a1,a1,-1330 # 2d7c8 <std::piecewise_construct+0x218>
   1cd02:	8522                	c.mv	a0,s0
   1cd04:	a3df90ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1cd08:	85aa                	c.mv	a1,a0
   1cd0a:	00a0                	c.addi4spn	s0,sp,72
   1cd0c:	8522                	c.mv	a0,s0
   1cd0e:	f02f90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1cd12:	85a2                	c.mv	a1,s0
   1cd14:	8526                	c.mv	a0,s1
   1cd16:	a7bf90ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1cd1a:	0001c797          	auipc	a5,0x1c
   1cd1e:	7267b783          	ld	a5,1830(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1cd22:	07c1                	c.addi	a5,16
   1cd24:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1cd26:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1cd28:	08bc                	c.addi4spn	a5,sp,88
   1cd2a:	00f50463          	beq	a0,a5,1cd32 <dwarf::value::as_exprloc() const+0x24c>
   1cd2e:	f82f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cd32:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1cd34:	183c                	c.addi4spn	a5,sp,56
   1cd36:	00f50463          	beq	a0,a5,1cd3e <dwarf::value::as_exprloc() const+0x258>
   1cd3a:	f76f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cd3e:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1cd40:	083c                	c.addi4spn	a5,sp,24
   1cd42:	00f50463          	beq	a0,a5,1cd4a <dwarf::value::as_exprloc() const+0x264>
   1cd46:	f6af90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1cd4a:	0001d617          	auipc	a2,0x1d
   1cd4e:	88663603          	ld	a2,-1914(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1cd52:	0001d597          	auipc	a1,0x1d
   1cd56:	83e5b583          	ld	a1,-1986(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1cd5a:	8526                	c.mv	a0,s1
   1cd5c:	905f90ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1cd60:	842a                	c.mv	s0,a0
   1cd62:	a07d                	c.j	1ce10 <dwarf::value::as_exprloc() const+0x32a>
    return 0;
   1cd64:	4681                	c.li	a3,0
   1cd66:	a8c9                	c.j	1ce38 <dwarf::value::as_exprloc() const+0x352>
   1cd68:	7446                	c.ldsp	s0,112(sp)
   1cd6a:	cc19                	c.beqz	s0,1cd88 <dwarf::value::as_exprloc() const+0x2a2>
    if (__is_single_threaded())
   1cd6c:	0001c797          	auipc	a5,0x1c
   1cd70:	70c7b783          	ld	a5,1804(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cd74:	0007c783          	lbu	a5,0(a5)
   1cd78:	c38d                	c.beqz	a5,1cd9a <dwarf::value::as_exprloc() const+0x2b4>
    _Atomic_word __result = *__mem;
   1cd7a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1cd7c:	fff5079b          	addiw	a5,a0,-1
   1cd80:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1cd82:	4785                	c.li	a5,1
   1cd84:	02f50163          	beq	a0,a5,1cda6 <dwarf::value::as_exprloc() const+0x2c0>
  }
  return expr(cu, cur.get_section_offset(), size);
}
   1cd88:	8526                	c.mv	a0,s1
   1cd8a:	70aa                	c.ldsp	ra,168(sp)
   1cd8c:	740a                	c.ldsp	s0,160(sp)
   1cd8e:	64ea                	c.ldsp	s1,152(sp)
   1cd90:	694a                	c.ldsp	s2,144(sp)
   1cd92:	69aa                	c.ldsp	s3,136(sp)
   1cd94:	6a0a                	c.ldsp	s4,128(sp)
   1cd96:	614d                	c.addi16sp	sp,176
   1cd98:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1cd9a:	55fd                	c.li	a1,-1
   1cd9c:	03040513          	addi	a0,s0,48
   1cda0:	d90f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cda4:	bff9                	c.j	1cd82 <dwarf::value::as_exprloc() const+0x29c>
	_M_dispose();
   1cda6:	601c                	c.ld	a5,0(s0)
   1cda8:	6b9c                	c.ld	a5,16(a5)
   1cdaa:	8522                	c.mv	a0,s0
   1cdac:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1cdae:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1cdb2:	0001c797          	auipc	a5,0x1c
   1cdb6:	6c67b783          	ld	a5,1734(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cdba:	0007c783          	lbu	a5,0(a5)
   1cdbe:	cf89                	c.beqz	a5,1cdd8 <dwarf::value::as_exprloc() const+0x2f2>
    _Atomic_word __result = *__mem;
   1cdc0:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1cdc2:	fff5079b          	addiw	a5,a0,-1
   1cdc6:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1cdc8:	4785                	c.li	a5,1
   1cdca:	faf51fe3          	bne	a0,a5,1cd88 <dwarf::value::as_exprloc() const+0x2a2>
	    _M_destroy();
   1cdce:	601c                	c.ld	a5,0(s0)
   1cdd0:	6f9c                	c.ld	a5,24(a5)
   1cdd2:	8522                	c.mv	a0,s0
   1cdd4:	9782                	c.jalr	a5
  return expr(cu, cur.get_section_offset(), size);
   1cdd6:	bf4d                	c.j	1cd88 <dwarf::value::as_exprloc() const+0x2a2>
      return __exchange_and_add(__mem, __val);
   1cdd8:	55fd                	c.li	a1,-1
   1cdda:	03440513          	addi	a0,s0,52
   1cdde:	d52f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cde2:	b7dd                	c.j	1cdc8 <dwarf::value::as_exprloc() const+0x2e2>
      { return _M_dataplus._M_p; }
   1cde4:	842a                	c.mv	s0,a0
   1cde6:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1cde8:	08bc                	c.addi4spn	a5,sp,88
   1cdea:	00f50463          	beq	a0,a5,1cdf2 <dwarf::value::as_exprloc() const+0x30c>
   1cdee:	ec2f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cdf2:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1cdf4:	183c                	c.addi4spn	a5,sp,56
   1cdf6:	00f50463          	beq	a0,a5,1cdfe <dwarf::value::as_exprloc() const+0x318>
   1cdfa:	eb6f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cdfe:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1ce00:	083c                	c.addi4spn	a5,sp,24
   1ce02:	00f50463          	beq	a0,a5,1ce0a <dwarf::value::as_exprloc() const+0x324>
   1ce06:	eaaf90ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1ce0a:	8526                	c.mv	a0,s1
   1ce0c:	e64f90ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1ce10:	7546                	c.ldsp	a0,112(sp)
   1ce12:	c511                	c.beqz	a0,1ce1e <dwarf::value::as_exprloc() const+0x338>
	  _M_pi->_M_release();
   1ce14:	0001c317          	auipc	t1,0x1c
   1ce18:	5ac33303          	ld	t1,1452(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1ce1c:	9302                	c.jalr	t1
   1ce1e:	8522                	c.mv	a0,s0
   1ce20:	871f90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ce24:	842a                	c.mv	s0,a0
   1ce26:	b7f1                	c.j	1cdf2 <dwarf::value::as_exprloc() const+0x30c>
   1ce28:	842a                	c.mv	s0,a0
   1ce2a:	bfd1                	c.j	1cdfe <dwarf::value::as_exprloc() const+0x318>
   1ce2c:	842a                	c.mv	s0,a0
   1ce2e:	bff1                	c.j	1ce0a <dwarf::value::as_exprloc() const+0x324>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ce30:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   1ce34:	0785                	c.addi	a5,1
   1ce36:	fcbe                	c.sdsp	a5,120(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1ce38:	77a6                	c.ldsp	a5,104(sp)
   1ce3a:	679c                	c.ld	a5,8(a5)
  return expr(cu, cur.get_section_offset(), size);
   1ce3c:	7666                	c.ldsp	a2,120(sp)
   1ce3e:	8e1d                	c.sub	a2,a5
   1ce40:	600c                	c.ld	a1,0(s0)
   1ce42:	8526                	c.mv	a0,s1
   1ce44:	4e7020ef          	jal	ra,1fb2a <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>
   1ce48:	b705                	c.j	1cd68 <dwarf::value::as_exprloc() const+0x282>
  cursor cur(cu->data(), offset);
   1ce4a:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ce4c:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1ce4e:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1ce50:	0089b783          	ld	a5,8(s3)
   1ce54:	97ba                	c.add	a5,a4
   1ce56:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1ce58:	441c                	c.lw	a5,8(s0)
   1ce5a:	37f5                	c.addiw	a5,-3
   1ce5c:	0007869b          	addiw	a3,a5,0
   1ce60:	4755                	c.li	a4,21
   1ce62:	e6d767e3          	bltu	a4,a3,1ccd0 <dwarf::value::as_exprloc() const+0x1ea>
   1ce66:	02079713          	slli	a4,a5,0x20
   1ce6a:	01e75793          	srli	a5,a4,0x1e
   1ce6e:	00011717          	auipc	a4,0x11
   1ce72:	b4270713          	addi	a4,a4,-1214 # 2d9b0 <std::piecewise_construct+0x400>
   1ce76:	97ba                	c.add	a5,a4
   1ce78:	439c                	c.lw	a5,0(a5)
   1ce7a:	97ba                	c.add	a5,a4
   1ce7c:	8782                	c.jr	a5

000000000001ce7e <dwarf::value::as_flag() const>:

bool value::as_flag() const {
   1ce7e:	7119                	c.addi16sp	sp,-128
   1ce80:	fc86                	c.sdsp	ra,120(sp)
   1ce82:	f8a2                	c.sdsp	s0,112(sp)
   1ce84:	f4a6                	c.sdsp	s1,104(sp)
   1ce86:	f0ca                	c.sdsp	s2,96(sp)
   1ce88:	842a                	c.mv	s0,a0
  switch (form) {
   1ce8a:	451c                	c.lw	a5,8(a0)
   1ce8c:	4731                	c.li	a4,12
   1ce8e:	00e78d63          	beq	a5,a4,1cea8 <dwarf::value::as_flag() const+0x2a>
   1ce92:	4765                	c.li	a4,25
   1ce94:	4485                	c.li	s1,1
   1ce96:	0ee79f63          	bne	a5,a4,1cf94 <dwarf::value::as_flag() const+0x116>
  case DW_FORM::flag_present:
    return true;
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
  }
}
   1ce9a:	8526                	c.mv	a0,s1
   1ce9c:	70e6                	c.ldsp	ra,120(sp)
   1ce9e:	7446                	c.ldsp	s0,112(sp)
   1cea0:	74a6                	c.ldsp	s1,104(sp)
   1cea2:	7906                	c.ldsp	s2,96(sp)
   1cea4:	6109                	c.addi16sp	sp,128
   1cea6:	8082                	c.jr	ra
    cursor cur(cu->data(), offset);
   1cea8:	6108                	c.ld	a0,0(a0)
   1ceaa:	a34fa0ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ceae:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1ceb2:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1ceb4:	22048463          	beq	s1,zero,1d0dc <dwarf::value::as_flag() const+0x25e>
    if (__is_single_threaded())
   1ceb8:	0001c797          	auipc	a5,0x1c
   1cebc:	5c07b783          	ld	a5,1472(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cec0:	0007c783          	lbu	a5,0(a5)
   1cec4:	cfa5                	c.beqz	a5,1cf3c <dwarf::value::as_flag() const+0xbe>
  { *__mem += __val; }
   1cec6:	589c                	c.lw	a5,48(s1)
   1cec8:	2785                	c.addiw	a5,1
   1ceca:	d89c                	c.sw	a5,48(s1)
   1cecc:	6800                	c.ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cece:	e0ca                	c.sdsp	s2,64(sp)
      : _M_pi(__r._M_pi)
   1ced0:	e4a6                	c.sdsp	s1,72(sp)
    if (__is_single_threaded())
   1ced2:	0001c797          	auipc	a5,0x1c
   1ced6:	5a67b783          	ld	a5,1446(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ceda:	0007c783          	lbu	a5,0(a5)
   1cede:	c7ad                	c.beqz	a5,1cf48 <dwarf::value::as_flag() const+0xca>
  { *__mem += __val; }
   1cee0:	589c                	c.lw	a5,48(s1)
   1cee2:	2785                	c.addiw	a5,1
   1cee4:	d89c                	c.sw	a5,48(s1)
   1cee6:	00893783          	ld	a5,8(s2)
   1ceea:	97a2                	c.add	a5,s0
   1ceec:	e8be                	c.sdsp	a5,80(sp)
    if (__is_single_threaded())
   1ceee:	0001c797          	auipc	a5,0x1c
   1cef2:	58a7b783          	ld	a5,1418(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cef6:	0007c783          	lbu	a5,0(a5)
   1cefa:	cfa9                	c.beqz	a5,1cf54 <dwarf::value::as_flag() const+0xd6>
    _Atomic_word __result = *__mem;
   1cefc:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1cefe:	fff5079b          	addiw	a5,a0,-1
   1cf02:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1cf04:	4785                	c.li	a5,1
   1cf06:	1ef51263          	bne	a0,a5,1d0ea <dwarf::value::as_flag() const+0x26c>
	_M_dispose();
   1cf0a:	609c                	c.ld	a5,0(s1)
   1cf0c:	6b9c                	c.ld	a5,16(a5)
   1cf0e:	8526                	c.mv	a0,s1
   1cf10:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1cf12:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1cf16:	0001c797          	auipc	a5,0x1c
   1cf1a:	5627b783          	ld	a5,1378(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cf1e:	0007c783          	lbu	a5,0(a5)
   1cf22:	cf9d                	c.beqz	a5,1cf60 <dwarf::value::as_flag() const+0xe2>
    _Atomic_word __result = *__mem;
   1cf24:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1cf26:	fff5079b          	addiw	a5,a0,-1
   1cf2a:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1cf2c:	4785                	c.li	a5,1
   1cf2e:	1af51e63          	bne	a0,a5,1d0ea <dwarf::value::as_flag() const+0x26c>
	    _M_destroy();
   1cf32:	609c                	c.ld	a5,0(s1)
   1cf34:	6f9c                	c.ld	a5,24(a5)
   1cf36:	8526                	c.mv	a0,s1
   1cf38:	9782                	c.jalr	a5
   1cf3a:	aa45                	c.j	1d0ea <dwarf::value::as_flag() const+0x26c>
      __atomic_add(__mem, __val);
   1cf3c:	4585                	c.li	a1,1
   1cf3e:	03048513          	addi	a0,s1,48
   1cf42:	bbef90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1cf46:	b759                	c.j	1cecc <dwarf::value::as_flag() const+0x4e>
   1cf48:	4585                	c.li	a1,1
   1cf4a:	03048513          	addi	a0,s1,48
   1cf4e:	bb2f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1cf52:	bf51                	c.j	1cee6 <dwarf::value::as_flag() const+0x68>
      return __exchange_and_add(__mem, __val);
   1cf54:	55fd                	c.li	a1,-1
   1cf56:	03048513          	addi	a0,s1,48
   1cf5a:	bd6f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cf5e:	b75d                	c.j	1cf04 <dwarf::value::as_flag() const+0x86>
   1cf60:	55fd                	c.li	a1,-1
   1cf62:	03448513          	addi	a0,s1,52
   1cf66:	bcaf90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cf6a:	b7c9                	c.j	1cf2c <dwarf::value::as_flag() const+0xae>
    const unsigned char *p = (const unsigned char *)pos;
   1cf6c:	67c6                	c.ldsp	a5,80(sp)
    if (sec->ord == byte_order::lsb) {
   1cf6e:	6706                	c.ldsp	a4,64(sp)
   1cf70:	4f58                	c.lw	a4,28(a4)
   1cf72:	10070363          	beq	a4,zero,1d078 <dwarf::value::as_flag() const+0x1fa>
        val = (val << 8) | (uint64_t)p[i];
   1cf76:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1cf7a:	a209                	c.j	1d07c <dwarf::value::as_flag() const+0x1fe>
   1cf7c:	55fd                	c.li	a1,-1
   1cf7e:	03040513          	addi	a0,s0,48
   1cf82:	baef90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cf86:	aa31                	c.j	1d0a2 <dwarf::value::as_flag() const+0x224>
   1cf88:	55fd                	c.li	a1,-1
   1cf8a:	03440513          	addi	a0,s0,52
   1cf8e:	ba2f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cf92:	aa2d                	c.j	1d0cc <dwarf::value::as_flag() const+0x24e>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
   1cf94:	4541                	c.li	a0,16
   1cf96:	c3af90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1cf9a:	84aa                	c.mv	s1,a0
   1cf9c:	444c                	c.lw	a1,12(s0)
   1cf9e:	850a                	c.mv	a0,sp
   1cfa0:	55e0a0ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1cfa4:	00010617          	auipc	a2,0x10
   1cfa8:	7d460613          	addi	a2,a2,2004 # 2d778 <std::piecewise_construct+0x1c8>
   1cfac:	4581                	c.li	a1,0
   1cfae:	850a                	c.mv	a0,sp
   1cfb0:	b90f90ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1cfb4:	85aa                	c.mv	a1,a0
   1cfb6:	1000                	c.addi4spn	s0,sp,32
   1cfb8:	8522                	c.mv	a0,s0
   1cfba:	c56f90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1cfbe:	00011597          	auipc	a1,0x11
   1cfc2:	81a58593          	addi	a1,a1,-2022 # 2d7d8 <std::piecewise_construct+0x228>
   1cfc6:	8522                	c.mv	a0,s0
   1cfc8:	f78f90ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1cfcc:	85aa                	c.mv	a1,a0
   1cfce:	0080                	c.addi4spn	s0,sp,64
   1cfd0:	8522                	c.mv	a0,s0
   1cfd2:	c3ef90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1cfd6:	85a2                	c.mv	a1,s0
   1cfd8:	8526                	c.mv	a0,s1
   1cfda:	fb6f90ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1cfde:	0001c797          	auipc	a5,0x1c
   1cfe2:	4627b783          	ld	a5,1122(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1cfe6:	07c1                	c.addi	a5,16
   1cfe8:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1cfea:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1cfec:	089c                	c.addi4spn	a5,sp,80
   1cfee:	00f50463          	beq	a0,a5,1cff6 <dwarf::value::as_flag() const+0x178>
   1cff2:	cbef90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cff6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1cff8:	181c                	c.addi4spn	a5,sp,48
   1cffa:	00f50463          	beq	a0,a5,1d002 <dwarf::value::as_flag() const+0x184>
   1cffe:	cb2f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d002:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1d004:	081c                	c.addi4spn	a5,sp,16
   1d006:	00f50463          	beq	a0,a5,1d00e <dwarf::value::as_flag() const+0x190>
   1d00a:	ca6f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1d00e:	0001c617          	auipc	a2,0x1c
   1d012:	5c263603          	ld	a2,1474(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1d016:	0001c597          	auipc	a1,0x1c
   1d01a:	57a5b583          	ld	a1,1402(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1d01e:	8526                	c.mv	a0,s1
   1d020:	e40f90ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d024:	842a                	c.mv	s0,a0
   1d026:	6526                	c.ldsp	a0,72(sp)
   1d028:	c511                	c.beqz	a0,1d034 <dwarf::value::as_flag() const+0x1b6>
	  _M_pi->_M_release();
   1d02a:	0001c317          	auipc	t1,0x1c
   1d02e:	39633303          	ld	t1,918(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1d032:	9302                	c.jalr	t1
   1d034:	8522                	c.mv	a0,s0
   1d036:	e5af90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d03a:	842a                	c.mv	s0,a0
   1d03c:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1d03e:	089c                	c.addi4spn	a5,sp,80
   1d040:	00f50463          	beq	a0,a5,1d048 <dwarf::value::as_flag() const+0x1ca>
   1d044:	c6cf90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d048:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1d04a:	181c                	c.addi4spn	a5,sp,48
   1d04c:	00f50463          	beq	a0,a5,1d054 <dwarf::value::as_flag() const+0x1d6>
   1d050:	c60f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d054:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1d056:	081c                	c.addi4spn	a5,sp,16
   1d058:	00f50463          	beq	a0,a5,1d060 <dwarf::value::as_flag() const+0x1e2>
   1d05c:	c54f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1d060:	8526                	c.mv	a0,s1
   1d062:	c0ef90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1d066:	8522                	c.mv	a0,s0
   1d068:	e28f90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d06c:	842a                	c.mv	s0,a0
   1d06e:	bfe9                	c.j	1d048 <dwarf::value::as_flag() const+0x1ca>
   1d070:	842a                	c.mv	s0,a0
   1d072:	b7cd                	c.j	1d054 <dwarf::value::as_flag() const+0x1d6>
   1d074:	842a                	c.mv	s0,a0
   1d076:	b7ed                	c.j	1d060 <dwarf::value::as_flag() const+0x1e2>
        val |= ((uint64_t)p[i]) << (i * 8);
   1d078:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   1d07c:	0785                	c.addi	a5,1
   1d07e:	e8be                	c.sdsp	a5,80(sp)
    return cur.fixed<ubyte>() != 0;
   1d080:	009034b3          	sltu	s1,zero,s1
	if (_M_pi != nullptr)
   1d084:	6426                	c.ldsp	s0,72(sp)
   1d086:	e0040ae3          	beq	s0,zero,1ce9a <dwarf::value::as_flag() const+0x1c>
    if (__is_single_threaded())
   1d08a:	0001c797          	auipc	a5,0x1c
   1d08e:	3ee7b783          	ld	a5,1006(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d092:	0007c783          	lbu	a5,0(a5)
   1d096:	ee0783e3          	beq	a5,zero,1cf7c <dwarf::value::as_flag() const+0xfe>
    _Atomic_word __result = *__mem;
   1d09a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d09c:	fff5079b          	addiw	a5,a0,-1
   1d0a0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d0a2:	4785                	c.li	a5,1
   1d0a4:	def51be3          	bne	a0,a5,1ce9a <dwarf::value::as_flag() const+0x1c>
	_M_dispose();
   1d0a8:	601c                	c.ld	a5,0(s0)
   1d0aa:	6b9c                	c.ld	a5,16(a5)
   1d0ac:	8522                	c.mv	a0,s0
   1d0ae:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d0b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d0b4:	0001c797          	auipc	a5,0x1c
   1d0b8:	3c47b783          	ld	a5,964(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d0bc:	0007c783          	lbu	a5,0(a5)
   1d0c0:	ec0784e3          	beq	a5,zero,1cf88 <dwarf::value::as_flag() const+0x10a>
    _Atomic_word __result = *__mem;
   1d0c4:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1d0c6:	fff5079b          	addiw	a5,a0,-1
   1d0ca:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d0cc:	4785                	c.li	a5,1
   1d0ce:	dcf516e3          	bne	a0,a5,1ce9a <dwarf::value::as_flag() const+0x1c>
	    _M_destroy();
   1d0d2:	601c                	c.ld	a5,0(s0)
   1d0d4:	6f9c                	c.ld	a5,24(a5)
   1d0d6:	8522                	c.mv	a0,s0
   1d0d8:	9782                	c.jalr	a5
   1d0da:	b3c1                	c.j	1ce9a <dwarf::value::as_flag() const+0x1c>
    cursor cur(cu->data(), offset);
   1d0dc:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d0de:	e0ca                	c.sdsp	s2,64(sp)
      : _M_pi(__r._M_pi)
   1d0e0:	e482                	c.sdsp	zero,72(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d0e2:	00893783          	ld	a5,8(s2)
   1d0e6:	97ba                	c.add	a5,a4
   1d0e8:	e8be                	c.sdsp	a5,80(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d0ea:	6786                	c.ldsp	a5,64(sp)
   1d0ec:	6b98                	c.ld	a4,16(a5)
   1d0ee:	67c6                	c.ldsp	a5,80(sp)
   1d0f0:	e6e7eee3          	bltu	a5,a4,1cf6c <dwarf::value::as_flag() const+0xee>
      underflow();
   1d0f4:	0088                	c.addi4spn	a0,sp,64
   1d0f6:	b43fd0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   1d0fa:	bd8d                	c.j	1cf6c <dwarf::value::as_flag() const+0xee>

000000000001d0fc <dwarf::value::as_cstr(unsigned long*) const>:
  size_t size;
  const char *s = as_cstr(&size);
  return string(s, size);
}

const char *value::as_cstr(size_t *size_out) const {
   1d0fc:	7131                	c.addi16sp	sp,-192
   1d0fe:	fd06                	c.sdsp	ra,184(sp)
   1d100:	f922                	c.sdsp	s0,176(sp)
   1d102:	f526                	c.sdsp	s1,168(sp)
   1d104:	f14a                	c.sdsp	s2,160(sp)
   1d106:	ed4e                	c.sdsp	s3,152(sp)
   1d108:	e952                	c.sdsp	s4,144(sp)
   1d10a:	842a                	c.mv	s0,a0
   1d10c:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), offset);
   1d10e:	6108                	c.ld	a0,0(a0)
   1d110:	fcff90ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d114:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1d118:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1d11a:	34048e63          	beq	s1,zero,1d476 <dwarf::value::as_cstr(unsigned long*) const+0x37a>
    if (__is_single_threaded())
   1d11e:	0001c797          	auipc	a5,0x1c
   1d122:	35a7b783          	ld	a5,858(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d126:	0007c783          	lbu	a5,0(a5)
   1d12a:	cfad                	c.beqz	a5,1d1a4 <dwarf::value::as_cstr(unsigned long*) const+0xa8>
  { *__mem += __val; }
   1d12c:	589c                	c.lw	a5,48(s1)
   1d12e:	2785                	c.addiw	a5,1
   1d130:	d89c                	c.sw	a5,48(s1)
   1d132:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d136:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1d138:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1d13a:	0001c797          	auipc	a5,0x1c
   1d13e:	33e7b783          	ld	a5,830(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d142:	0007c783          	lbu	a5,0(a5)
   1d146:	c7ad                	c.beqz	a5,1d1b0 <dwarf::value::as_cstr(unsigned long*) const+0xb4>
  { *__mem += __val; }
   1d148:	589c                	c.lw	a5,48(s1)
   1d14a:	2785                	c.addiw	a5,1
   1d14c:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1d14e:	0089b783          	ld	a5,8(s3)
   1d152:	97d2                	c.add	a5,s4
   1d154:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1d156:	0001c797          	auipc	a5,0x1c
   1d15a:	3227b783          	ld	a5,802(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d15e:	0007c783          	lbu	a5,0(a5)
   1d162:	cfa9                	c.beqz	a5,1d1bc <dwarf::value::as_cstr(unsigned long*) const+0xc0>
    _Atomic_word __result = *__mem;
   1d164:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d166:	fff5079b          	addiw	a5,a0,-1
   1d16a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d16c:	4785                	c.li	a5,1
   1d16e:	30f51b63          	bne	a0,a5,1d484 <dwarf::value::as_cstr(unsigned long*) const+0x388>
	_M_dispose();
   1d172:	609c                	c.ld	a5,0(s1)
   1d174:	6b9c                	c.ld	a5,16(a5)
   1d176:	8526                	c.mv	a0,s1
   1d178:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d17a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d17e:	0001c797          	auipc	a5,0x1c
   1d182:	2fa7b783          	ld	a5,762(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d186:	0007c783          	lbu	a5,0(a5)
   1d18a:	cf9d                	c.beqz	a5,1d1c8 <dwarf::value::as_cstr(unsigned long*) const+0xcc>
    _Atomic_word __result = *__mem;
   1d18c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d18e:	fff5079b          	addiw	a5,a0,-1
   1d192:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d194:	4785                	c.li	a5,1
   1d196:	2ef51763          	bne	a0,a5,1d484 <dwarf::value::as_cstr(unsigned long*) const+0x388>
	    _M_destroy();
   1d19a:	609c                	c.ld	a5,0(s1)
   1d19c:	6f9c                	c.ld	a5,24(a5)
   1d19e:	8526                	c.mv	a0,s1
   1d1a0:	9782                	c.jalr	a5
   1d1a2:	a4cd                	c.j	1d484 <dwarf::value::as_cstr(unsigned long*) const+0x388>
      __atomic_add(__mem, __val);
   1d1a4:	4585                	c.li	a1,1
   1d1a6:	03048513          	addi	a0,s1,48
   1d1aa:	956f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d1ae:	b751                	c.j	1d132 <dwarf::value::as_cstr(unsigned long*) const+0x36>
   1d1b0:	4585                	c.li	a1,1
   1d1b2:	03048513          	addi	a0,s1,48
   1d1b6:	94af90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d1ba:	bf51                	c.j	1d14e <dwarf::value::as_cstr(unsigned long*) const+0x52>
      return __exchange_and_add(__mem, __val);
   1d1bc:	55fd                	c.li	a1,-1
   1d1be:	03048513          	addi	a0,s1,48
   1d1c2:	96ef90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d1c6:	b75d                	c.j	1d16c <dwarf::value::as_cstr(unsigned long*) const+0x70>
   1d1c8:	55fd                	c.li	a1,-1
   1d1ca:	03448513          	addi	a0,s1,52
   1d1ce:	962f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d1d2:	b7c9                	c.j	1d194 <dwarf::value::as_cstr(unsigned long*) const+0x98>
  switch (form) {
  case DW_FORM::string:
    return cur.cstr(size_out);
   1d1d4:	85ca                	c.mv	a1,s2
   1d1d6:	10a8                	c.addi4spn	a0,sp,104
   1d1d8:	9abfd0ef          	jal	ra,1ab82 <dwarf::cursor::cstr(unsigned long*)>
   1d1dc:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1d1de:	74c6                	c.ldsp	s1,112(sp)
   1d1e0:	c085                	c.beqz	s1,1d200 <dwarf::value::as_cstr(unsigned long*) const+0x104>
    if (__is_single_threaded())
   1d1e2:	0001c797          	auipc	a5,0x1c
   1d1e6:	2967b783          	ld	a5,662(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d1ea:	0007c783          	lbu	a5,0(a5)
   1d1ee:	1e078063          	beq	a5,zero,1d3ce <dwarf::value::as_cstr(unsigned long*) const+0x2d2>
    _Atomic_word __result = *__mem;
   1d1f2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d1f4:	fff5079b          	addiw	a5,a0,-1
   1d1f8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d1fa:	4785                	c.li	a5,1
   1d1fc:	1cf50f63          	beq	a0,a5,1d3da <dwarf::value::as_cstr(unsigned long*) const+0x2de>
    return scur.cstr(size_out);
  }
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
  }
}
   1d200:	8522                	c.mv	a0,s0
   1d202:	70ea                	c.ldsp	ra,184(sp)
   1d204:	744a                	c.ldsp	s0,176(sp)
   1d206:	74aa                	c.ldsp	s1,168(sp)
   1d208:	790a                	c.ldsp	s2,160(sp)
   1d20a:	69ea                	c.ldsp	s3,152(sp)
   1d20c:	6a4a                	c.ldsp	s4,144(sp)
   1d20e:	6129                	c.addi16sp	sp,192
   1d210:	8082                	c.jr	ra
    section_offset off = cur.offset();
   1d212:	84aa                	c.mv	s1,a0
    cursor scur(cu->get_dwarf().get_section(section_type::str), off);
   1d214:	6008                	c.ld	a0,0(s0)
   1d216:	ebff90ef          	jal	ra,170d4 <dwarf::unit::get_dwarf() const>
   1d21a:	85aa                	c.mv	a1,a0
   1d21c:	4629                	c.li	a2,10
   1d21e:	0108                	c.addi4spn	a0,sp,128
   1d220:	ecbf90ef          	jal	ra,170ea <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d224:	678a                	c.ldsp	a5,128(sp)
   1d226:	e4be                	c.sdsp	a5,72(sp)
      : _M_pi(__r._M_pi)
   1d228:	652a                	c.ldsp	a0,136(sp)
   1d22a:	e8aa                	c.sdsp	a0,80(sp)
	if (_M_pi != nullptr)
   1d22c:	c919                	c.beqz	a0,1d242 <dwarf::value::as_cstr(unsigned long*) const+0x146>
    if (__is_single_threaded())
   1d22e:	0001c797          	auipc	a5,0x1c
   1d232:	24a7b783          	ld	a5,586(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d236:	0007c783          	lbu	a5,0(a5)
   1d23a:	cf95                	c.beqz	a5,1d276 <dwarf::value::as_cstr(unsigned long*) const+0x17a>
  { *__mem += __val; }
   1d23c:	591c                	c.lw	a5,48(a0)
   1d23e:	2785                	c.addiw	a5,1
   1d240:	d91c                	c.sw	a5,48(a0)
   1d242:	678a                	c.ldsp	a5,128(sp)
   1d244:	679c                	c.ld	a5,8(a5)
   1d246:	00978533          	add	a0,a5,s1
   1d24a:	ecaa                	c.sdsp	a0,88(sp)
	if (_M_pi != nullptr)
   1d24c:	642a                	c.ldsp	s0,136(sp)
   1d24e:	cc19                	c.beqz	s0,1d26c <dwarf::value::as_cstr(unsigned long*) const+0x170>
    if (__is_single_threaded())
   1d250:	0001c797          	auipc	a5,0x1c
   1d254:	2287b783          	ld	a5,552(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d258:	0007c783          	lbu	a5,0(a5)
   1d25c:	c39d                	c.beqz	a5,1d282 <dwarf::value::as_cstr(unsigned long*) const+0x186>
    _Atomic_word __result = *__mem;
   1d25e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d260:	fff5079b          	addiw	a5,a0,-1
   1d264:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d266:	4785                	c.li	a5,1
   1d268:	02f50363          	beq	a0,a5,1d28e <dwarf::value::as_cstr(unsigned long*) const+0x192>
    return scur.cstr(size_out);
   1d26c:	85ca                	c.mv	a1,s2
   1d26e:	00a8                	c.addi4spn	a0,sp,72
   1d270:	913fd0ef          	jal	ra,1ab82 <dwarf::cursor::cstr(unsigned long*)>
   1d274:	a8a1                	c.j	1d2cc <dwarf::value::as_cstr(unsigned long*) const+0x1d0>
      __atomic_add(__mem, __val);
   1d276:	4585                	c.li	a1,1
   1d278:	03050513          	addi	a0,a0,48
   1d27c:	884f90ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d280:	b7c9                	c.j	1d242 <dwarf::value::as_cstr(unsigned long*) const+0x146>
      return __exchange_and_add(__mem, __val);
   1d282:	55fd                	c.li	a1,-1
   1d284:	03040513          	addi	a0,s0,48
   1d288:	8a8f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d28c:	bfe9                	c.j	1d266 <dwarf::value::as_cstr(unsigned long*) const+0x16a>
	_M_dispose();
   1d28e:	601c                	c.ld	a5,0(s0)
   1d290:	6b9c                	c.ld	a5,16(a5)
   1d292:	8522                	c.mv	a0,s0
   1d294:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d296:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d29a:	0001c797          	auipc	a5,0x1c
   1d29e:	1de7b783          	ld	a5,478(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d2a2:	0007c783          	lbu	a5,0(a5)
   1d2a6:	cf89                	c.beqz	a5,1d2c0 <dwarf::value::as_cstr(unsigned long*) const+0x1c4>
    _Atomic_word __result = *__mem;
   1d2a8:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1d2aa:	fff5079b          	addiw	a5,a0,-1
   1d2ae:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d2b0:	4785                	c.li	a5,1
   1d2b2:	faf51de3          	bne	a0,a5,1d26c <dwarf::value::as_cstr(unsigned long*) const+0x170>
	    _M_destroy();
   1d2b6:	601c                	c.ld	a5,0(s0)
   1d2b8:	6f9c                	c.ld	a5,24(a5)
   1d2ba:	8522                	c.mv	a0,s0
   1d2bc:	9782                	c.jalr	a5
   1d2be:	b77d                	c.j	1d26c <dwarf::value::as_cstr(unsigned long*) const+0x170>
      return __exchange_and_add(__mem, __val);
   1d2c0:	55fd                	c.li	a1,-1
   1d2c2:	03440513          	addi	a0,s0,52
   1d2c6:	86af90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d2ca:	b7dd                	c.j	1d2b0 <dwarf::value::as_cstr(unsigned long*) const+0x1b4>
   1d2cc:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1d2ce:	64c6                	c.ldsp	s1,80(sp)
   1d2d0:	f00487e3          	beq	s1,zero,1d1de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
    if (__is_single_threaded())
   1d2d4:	0001c797          	auipc	a5,0x1c
   1d2d8:	1a47b783          	ld	a5,420(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d2dc:	0007c783          	lbu	a5,0(a5)
   1d2e0:	c3a9                	c.beqz	a5,1d322 <dwarf::value::as_cstr(unsigned long*) const+0x226>
    _Atomic_word __result = *__mem;
   1d2e2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d2e4:	fff5079b          	addiw	a5,a0,-1
   1d2e8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d2ea:	4785                	c.li	a5,1
   1d2ec:	eef519e3          	bne	a0,a5,1d1de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
	_M_dispose();
   1d2f0:	609c                	c.ld	a5,0(s1)
   1d2f2:	6b9c                	c.ld	a5,16(a5)
   1d2f4:	8526                	c.mv	a0,s1
   1d2f6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d2f8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d2fc:	0001c797          	auipc	a5,0x1c
   1d300:	17c7b783          	ld	a5,380(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d304:	0007c783          	lbu	a5,0(a5)
   1d308:	c39d                	c.beqz	a5,1d32e <dwarf::value::as_cstr(unsigned long*) const+0x232>
    _Atomic_word __result = *__mem;
   1d30a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d30c:	fff5079b          	addiw	a5,a0,-1
   1d310:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d312:	4785                	c.li	a5,1
   1d314:	ecf515e3          	bne	a0,a5,1d1de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
	    _M_destroy();
   1d318:	609c                	c.ld	a5,0(s1)
   1d31a:	6f9c                	c.ld	a5,24(a5)
   1d31c:	8526                	c.mv	a0,s1
   1d31e:	9782                	c.jalr	a5
   1d320:	bd7d                	c.j	1d1de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
      return __exchange_and_add(__mem, __val);
   1d322:	55fd                	c.li	a1,-1
   1d324:	03048513          	addi	a0,s1,48
   1d328:	808f90ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d32c:	bf7d                	c.j	1d2ea <dwarf::value::as_cstr(unsigned long*) const+0x1ee>
   1d32e:	55fd                	c.li	a1,-1
   1d330:	03448513          	addi	a0,s1,52
   1d334:	ffdf80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d338:	bfe9                	c.j	1d312 <dwarf::value::as_cstr(unsigned long*) const+0x216>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
   1d33a:	4541                	c.li	a0,16
   1d33c:	894f90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1d340:	84aa                	c.mv	s1,a0
   1d342:	444c                	c.lw	a1,12(s0)
   1d344:	0028                	c.addi4spn	a0,sp,8
   1d346:	1b80a0ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d34a:	00010617          	auipc	a2,0x10
   1d34e:	42e60613          	addi	a2,a2,1070 # 2d778 <std::piecewise_construct+0x1c8>
   1d352:	4581                	c.li	a1,0
   1d354:	0028                	c.addi4spn	a0,sp,8
   1d356:	febf80ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d35a:	85aa                	c.mv	a1,a0
   1d35c:	1020                	c.addi4spn	s0,sp,40
   1d35e:	8522                	c.mv	a0,s0
   1d360:	8b0f90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1d364:	00010597          	auipc	a1,0x10
   1d368:	48458593          	addi	a1,a1,1156 # 2d7e8 <std::piecewise_construct+0x238>
   1d36c:	8522                	c.mv	a0,s0
   1d36e:	bd2f90ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1d372:	85aa                	c.mv	a1,a0
   1d374:	00a0                	c.addi4spn	s0,sp,72
   1d376:	8522                	c.mv	a0,s0
   1d378:	898f90ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d37c:	85a2                	c.mv	a1,s0
   1d37e:	8526                	c.mv	a0,s1
   1d380:	c10f90ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1d384:	0001c797          	auipc	a5,0x1c
   1d388:	0bc7b783          	ld	a5,188(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1d38c:	07c1                	c.addi	a5,16
   1d38e:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1d390:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d392:	08bc                	c.addi4spn	a5,sp,88
   1d394:	00f50463          	beq	a0,a5,1d39c <dwarf::value::as_cstr(unsigned long*) const+0x2a0>
   1d398:	918f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d39c:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d39e:	183c                	c.addi4spn	a5,sp,56
   1d3a0:	00f50463          	beq	a0,a5,1d3a8 <dwarf::value::as_cstr(unsigned long*) const+0x2ac>
   1d3a4:	90cf90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d3a8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d3aa:	083c                	c.addi4spn	a5,sp,24
   1d3ac:	00f50463          	beq	a0,a5,1d3b4 <dwarf::value::as_cstr(unsigned long*) const+0x2b8>
   1d3b0:	900f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1d3b4:	0001c617          	auipc	a2,0x1c
   1d3b8:	21c63603          	ld	a2,540(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1d3bc:	0001c597          	auipc	a1,0x1c
   1d3c0:	1d45b583          	ld	a1,468(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1d3c4:	8526                	c.mv	a0,s1
   1d3c6:	a9af90ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d3ca:	842a                	c.mv	s0,a0
   1d3cc:	a8b1                	c.j	1d428 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
   1d3ce:	55fd                	c.li	a1,-1
   1d3d0:	03048513          	addi	a0,s1,48
   1d3d4:	f5df80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d3d8:	b50d                	c.j	1d1fa <dwarf::value::as_cstr(unsigned long*) const+0xfe>
	_M_dispose();
   1d3da:	609c                	c.ld	a5,0(s1)
   1d3dc:	6b9c                	c.ld	a5,16(a5)
   1d3de:	8526                	c.mv	a0,s1
   1d3e0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d3e2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d3e6:	0001c797          	auipc	a5,0x1c
   1d3ea:	0927b783          	ld	a5,146(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d3ee:	0007c783          	lbu	a5,0(a5)
   1d3f2:	cf89                	c.beqz	a5,1d40c <dwarf::value::as_cstr(unsigned long*) const+0x310>
    _Atomic_word __result = *__mem;
   1d3f4:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d3f6:	fff5079b          	addiw	a5,a0,-1
   1d3fa:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d3fc:	4785                	c.li	a5,1
   1d3fe:	e0f511e3          	bne	a0,a5,1d200 <dwarf::value::as_cstr(unsigned long*) const+0x104>
	    _M_destroy();
   1d402:	609c                	c.ld	a5,0(s1)
   1d404:	6f9c                	c.ld	a5,24(a5)
   1d406:	8526                	c.mv	a0,s1
   1d408:	9782                	c.jalr	a5
   1d40a:	bbdd                	c.j	1d200 <dwarf::value::as_cstr(unsigned long*) const+0x104>
      return __exchange_and_add(__mem, __val);
   1d40c:	55fd                	c.li	a1,-1
   1d40e:	03448513          	addi	a0,s1,52
   1d412:	f1ff80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d416:	b7dd                	c.j	1d3fc <dwarf::value::as_cstr(unsigned long*) const+0x300>
	if (_M_pi != nullptr)
   1d418:	842a                	c.mv	s0,a0
   1d41a:	6546                	c.ldsp	a0,80(sp)
   1d41c:	c511                	c.beqz	a0,1d428 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
	  _M_pi->_M_release();
   1d41e:	0001c317          	auipc	t1,0x1c
   1d422:	fa233303          	ld	t1,-94(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1d426:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1d428:	7546                	c.ldsp	a0,112(sp)
   1d42a:	c511                	c.beqz	a0,1d436 <dwarf::value::as_cstr(unsigned long*) const+0x33a>
	  _M_pi->_M_release();
   1d42c:	0001c317          	auipc	t1,0x1c
   1d430:	f9433303          	ld	t1,-108(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1d434:	9302                	c.jalr	t1
   1d436:	8522                	c.mv	a0,s0
   1d438:	a58f90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d43c:	842a                	c.mv	s0,a0
   1d43e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d440:	08bc                	c.addi4spn	a5,sp,88
   1d442:	00f50463          	beq	a0,a5,1d44a <dwarf::value::as_cstr(unsigned long*) const+0x34e>
   1d446:	86af90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d44a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d44c:	183c                	c.addi4spn	a5,sp,56
   1d44e:	00f50463          	beq	a0,a5,1d456 <dwarf::value::as_cstr(unsigned long*) const+0x35a>
   1d452:	85ef90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d456:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d458:	083c                	c.addi4spn	a5,sp,24
   1d45a:	00f50463          	beq	a0,a5,1d462 <dwarf::value::as_cstr(unsigned long*) const+0x366>
   1d45e:	852f90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1d462:	8526                	c.mv	a0,s1
   1d464:	80cf90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1d468:	b7c1                	c.j	1d428 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
      { return _M_dataplus._M_p; }
   1d46a:	842a                	c.mv	s0,a0
   1d46c:	bff9                	c.j	1d44a <dwarf::value::as_cstr(unsigned long*) const+0x34e>
   1d46e:	842a                	c.mv	s0,a0
   1d470:	b7dd                	c.j	1d456 <dwarf::value::as_cstr(unsigned long*) const+0x35a>
   1d472:	842a                	c.mv	s0,a0
   1d474:	b7fd                	c.j	1d462 <dwarf::value::as_cstr(unsigned long*) const+0x366>
  cursor cur(cu->data(), offset);
   1d476:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d478:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1d47a:	f882                	c.sdsp	zero,112(sp)
   1d47c:	0089b783          	ld	a5,8(s3)
   1d480:	97ba                	c.add	a5,a4
   1d482:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1d484:	441c                	c.lw	a5,8(s0)
   1d486:	4721                	c.li	a4,8
   1d488:	d4e786e3          	beq	a5,a4,1d1d4 <dwarf::value::as_cstr(unsigned long*) const+0xd8>
   1d48c:	4739                	c.li	a4,14
   1d48e:	eae796e3          	bne	a5,a4,1d33a <dwarf::value::as_cstr(unsigned long*) const+0x23e>
    section_offset off = cur.offset();
   1d492:	10a8                	c.addi4spn	a0,sp,104
   1d494:	ccbfd0ef          	jal	ra,1b15e <dwarf::cursor::offset()>
   1d498:	bbad                	c.j	1d212 <dwarf::value::as_cstr(unsigned long*) const+0x116>

000000000001d49a <dwarf::value::as_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const>:
void value::as_string(string &buf) const {
   1d49a:	7179                	c.addi16sp	sp,-48
   1d49c:	f406                	c.sdsp	ra,40(sp)
   1d49e:	f022                	c.sdsp	s0,32(sp)
   1d4a0:	ec26                	c.sdsp	s1,24(sp)
   1d4a2:	842e                	c.mv	s0,a1
  const char *p = as_cstr(&size);
   1d4a4:	002c                	c.addi4spn	a1,sp,8
   1d4a6:	c57ff0ef          	jal	ra,1d0fc <dwarf::value::as_cstr(unsigned long*) const>
   1d4aa:	84aa                	c.mv	s1,a0
      { this->resize(__n, _CharT()); }
   1d4ac:	4601                	c.li	a2,0
   1d4ae:	65a2                	c.ldsp	a1,8(sp)
   1d4b0:	8522                	c.mv	a0,s0
   1d4b2:	eaff80ef          	jal	ra,16360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&buf.front(), p, size);
   1d4b6:	6622                	c.ldsp	a2,8(sp)
   1d4b8:	85a6                	c.mv	a1,s1
   1d4ba:	6008                	c.ld	a0,0(s0)
   1d4bc:	a64f90ef          	jal	ra,16720 <memmove@plt>
}
   1d4c0:	70a2                	c.ldsp	ra,40(sp)
   1d4c2:	7402                	c.ldsp	s0,32(sp)
   1d4c4:	64e2                	c.ldsp	s1,24(sp)
   1d4c6:	6145                	c.addi16sp	sp,48
   1d4c8:	8082                	c.jr	ra

000000000001d4ca <dwarf::value::as_sec_offset() const>:

section_offset value::as_sec_offset() const {
   1d4ca:	7171                	c.addi16sp	sp,-176
   1d4cc:	f506                	c.sdsp	ra,168(sp)
   1d4ce:	f122                	c.sdsp	s0,160(sp)
   1d4d0:	ed26                	c.sdsp	s1,152(sp)
   1d4d2:	e94a                	c.sdsp	s2,144(sp)
   1d4d4:	e54e                	c.sdsp	s3,136(sp)
   1d4d6:	892a                	c.mv	s2,a0
  // Prior to DWARF 4, sec_offsets were encoded as data4 or
  // data8.
  cursor cur(cu->data(), offset);
   1d4d8:	6108                	c.ld	a0,0(a0)
   1d4da:	c05f90ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d4de:	6104                	c.ld	s1,0(a0)
      : _M_pi(__r._M_pi)
   1d4e0:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1d4e2:	2c040b63          	beq	s0,zero,1d7b8 <dwarf::value::as_sec_offset() const+0x2ee>
    if (__is_single_threaded())
   1d4e6:	0001c797          	auipc	a5,0x1c
   1d4ea:	f927b783          	ld	a5,-110(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d4ee:	0007c783          	lbu	a5,0(a5)
   1d4f2:	cfa5                	c.beqz	a5,1d56a <dwarf::value::as_sec_offset() const+0xa0>
  { *__mem += __val; }
   1d4f4:	581c                	c.lw	a5,48(s0)
   1d4f6:	2785                	c.addiw	a5,1
   1d4f8:	d81c                	c.sw	a5,48(s0)
   1d4fa:	01093983          	ld	s3,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d4fe:	f4a6                	c.sdsp	s1,104(sp)
      : _M_pi(__r._M_pi)
   1d500:	f8a2                	c.sdsp	s0,112(sp)
    if (__is_single_threaded())
   1d502:	0001c797          	auipc	a5,0x1c
   1d506:	f767b783          	ld	a5,-138(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d50a:	0007c783          	lbu	a5,0(a5)
   1d50e:	c7a5                	c.beqz	a5,1d576 <dwarf::value::as_sec_offset() const+0xac>
  { *__mem += __val; }
   1d510:	581c                	c.lw	a5,48(s0)
   1d512:	2785                	c.addiw	a5,1
   1d514:	d81c                	c.sw	a5,48(s0)
   1d516:	649c                	c.ld	a5,8(s1)
   1d518:	97ce                	c.add	a5,s3
   1d51a:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1d51c:	0001c797          	auipc	a5,0x1c
   1d520:	f5c7b783          	ld	a5,-164(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d524:	0007c783          	lbu	a5,0(a5)
   1d528:	cfa9                	c.beqz	a5,1d582 <dwarf::value::as_sec_offset() const+0xb8>
    _Atomic_word __result = *__mem;
   1d52a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d52c:	fff5079b          	addiw	a5,a0,-1
   1d530:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d532:	4785                	c.li	a5,1
   1d534:	28f51963          	bne	a0,a5,1d7c6 <dwarf::value::as_sec_offset() const+0x2fc>
	_M_dispose();
   1d538:	601c                	c.ld	a5,0(s0)
   1d53a:	6b9c                	c.ld	a5,16(a5)
   1d53c:	8522                	c.mv	a0,s0
   1d53e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d540:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d544:	0001c797          	auipc	a5,0x1c
   1d548:	f347b783          	ld	a5,-204(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d54c:	0007c783          	lbu	a5,0(a5)
   1d550:	cf9d                	c.beqz	a5,1d58e <dwarf::value::as_sec_offset() const+0xc4>
    _Atomic_word __result = *__mem;
   1d552:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1d554:	fff5079b          	addiw	a5,a0,-1
   1d558:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d55a:	4785                	c.li	a5,1
   1d55c:	26f51563          	bne	a0,a5,1d7c6 <dwarf::value::as_sec_offset() const+0x2fc>
	    _M_destroy();
   1d560:	601c                	c.ld	a5,0(s0)
   1d562:	6f9c                	c.ld	a5,24(a5)
   1d564:	8522                	c.mv	a0,s0
   1d566:	9782                	c.jalr	a5
   1d568:	acb9                	c.j	1d7c6 <dwarf::value::as_sec_offset() const+0x2fc>
      __atomic_add(__mem, __val);
   1d56a:	4585                	c.li	a1,1
   1d56c:	03040513          	addi	a0,s0,48
   1d570:	d91f80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d574:	b759                	c.j	1d4fa <dwarf::value::as_sec_offset() const+0x30>
   1d576:	4585                	c.li	a1,1
   1d578:	03040513          	addi	a0,s0,48
   1d57c:	d85f80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d580:	bf59                	c.j	1d516 <dwarf::value::as_sec_offset() const+0x4c>
      return __exchange_and_add(__mem, __val);
   1d582:	55fd                	c.li	a1,-1
   1d584:	03040513          	addi	a0,s0,48
   1d588:	da9f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d58c:	b75d                	c.j	1d532 <dwarf::value::as_sec_offset() const+0x68>
   1d58e:	55fd                	c.li	a1,-1
   1d590:	03440513          	addi	a0,s0,52
   1d594:	d9df80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d598:	b7c9                	c.j	1d55a <dwarf::value::as_sec_offset() const+0x90>
  switch (form) {
   1d59a:	4719                	c.li	a4,6
   1d59c:	0ee79863          	bne	a5,a4,1d68c <dwarf::value::as_sec_offset() const+0x1c2>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d5a0:	77a6                	c.ldsp	a5,104(sp)
   1d5a2:	6b98                	c.ld	a4,16(a5)
   1d5a4:	77e6                	c.ldsp	a5,120(sp)
   1d5a6:	40f70633          	sub	a2,a4,a5
   1d5aa:	468d                	c.li	a3,3
   1d5ac:	00c6f463          	bgeu	a3,a2,1d5b4 <dwarf::value::as_sec_offset() const+0xea>
   1d5b0:	00e7e563          	bltu	a5,a4,1d5ba <dwarf::value::as_sec_offset() const+0xf0>
      underflow();
   1d5b4:	10a8                	c.addi4spn	a0,sp,104
   1d5b6:	e82fd0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d5ba:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d5bc:	77a6                	c.ldsp	a5,104(sp)
   1d5be:	4fdc                	c.lw	a5,28(a5)
   1d5c0:	ebb9                	c.bnez	a5,1d616 <dwarf::value::as_sec_offset() const+0x14c>
   1d5c2:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1d5c4:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d5c6:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1d5ca:	0006c703          	lbu	a4,0(a3)
   1d5ce:	00f71733          	sll	a4,a4,a5
   1d5d2:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d5d4:	0685                	c.addi	a3,1
   1d5d6:	27a1                	c.addiw	a5,8
   1d5d8:	feb799e3          	bne	a5,a1,1d5ca <dwarf::value::as_sec_offset() const+0x100>
    pos += sizeof(T);
   1d5dc:	0611                	c.addi	a2,4
   1d5de:	fcb2                	c.sdsp	a2,120(sp)
   1d5e0:	1402                	c.slli	s0,0x20
   1d5e2:	9001                	c.srli	s0,0x20
	if (_M_pi != nullptr)
   1d5e4:	74c6                	c.ldsp	s1,112(sp)
   1d5e6:	c085                	c.beqz	s1,1d606 <dwarf::value::as_sec_offset() const+0x13c>
    if (__is_single_threaded())
   1d5e8:	0001c797          	auipc	a5,0x1c
   1d5ec:	e907b783          	ld	a5,-368(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d5f0:	0007c783          	lbu	a5,0(a5)
   1d5f4:	12078763          	beq	a5,zero,1d722 <dwarf::value::as_sec_offset() const+0x258>
    _Atomic_word __result = *__mem;
   1d5f8:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d5fa:	fff5079b          	addiw	a5,a0,-1
   1d5fe:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d600:	4785                	c.li	a5,1
   1d602:	12f50663          	beq	a0,a5,1d72e <dwarf::value::as_sec_offset() const+0x264>
    return cur.offset();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sec_offset");
  }
}
   1d606:	8522                	c.mv	a0,s0
   1d608:	70aa                	c.ldsp	ra,168(sp)
   1d60a:	740a                	c.ldsp	s0,160(sp)
   1d60c:	64ea                	c.ldsp	s1,152(sp)
   1d60e:	694a                	c.ldsp	s2,144(sp)
   1d610:	69aa                	c.ldsp	s3,136(sp)
   1d612:	614d                	c.addi16sp	sp,176
   1d614:	8082                	c.jr	ra
   1d616:	87b2                	c.mv	a5,a2
   1d618:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1d61c:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1d61e:	0422                	c.slli	s0,0x8
   1d620:	0007c703          	lbu	a4,0(a5)
   1d624:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d626:	0785                	c.addi	a5,1
   1d628:	fed79be3          	bne	a5,a3,1d61e <dwarf::value::as_sec_offset() const+0x154>
   1d62c:	bf45                	c.j	1d5dc <dwarf::value::as_sec_offset() const+0x112>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d62e:	77a6                	c.ldsp	a5,104(sp)
   1d630:	6b98                	c.ld	a4,16(a5)
   1d632:	77e6                	c.ldsp	a5,120(sp)
   1d634:	40f70633          	sub	a2,a4,a5
   1d638:	469d                	c.li	a3,7
   1d63a:	00c6f463          	bgeu	a3,a2,1d642 <dwarf::value::as_sec_offset() const+0x178>
   1d63e:	00e7e563          	bltu	a5,a4,1d648 <dwarf::value::as_sec_offset() const+0x17e>
      underflow();
   1d642:	10a8                	c.addi4spn	a0,sp,104
   1d644:	df4fd0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d648:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d64a:	77a6                	c.ldsp	a5,104(sp)
   1d64c:	4fdc                	c.lw	a5,28(a5)
   1d64e:	e38d                	c.bnez	a5,1d670 <dwarf::value::as_sec_offset() const+0x1a6>
   1d650:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1d652:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d654:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d658:	0006c703          	lbu	a4,0(a3)
   1d65c:	00f71733          	sll	a4,a4,a5
   1d660:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d662:	0685                	c.addi	a3,1
   1d664:	27a1                	c.addiw	a5,8
   1d666:	feb799e3          	bne	a5,a1,1d658 <dwarf::value::as_sec_offset() const+0x18e>
    pos += sizeof(T);
   1d66a:	0621                	c.addi	a2,8
   1d66c:	fcb2                	c.sdsp	a2,120(sp)
   1d66e:	bf9d                	c.j	1d5e4 <dwarf::value::as_sec_offset() const+0x11a>
   1d670:	87b2                	c.mv	a5,a2
   1d672:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1d676:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1d678:	0422                	c.slli	s0,0x8
   1d67a:	0007c703          	lbu	a4,0(a5)
   1d67e:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d680:	0785                	c.addi	a5,1
   1d682:	fed79be3          	bne	a5,a3,1d678 <dwarf::value::as_sec_offset() const+0x1ae>
   1d686:	b7d5                	c.j	1d66a <dwarf::value::as_sec_offset() const+0x1a0>
    return cur.offset();
   1d688:	842a                	c.mv	s0,a0
   1d68a:	bfa9                	c.j	1d5e4 <dwarf::value::as_sec_offset() const+0x11a>
                              " as sec_offset");
   1d68c:	4541                	c.li	a0,16
   1d68e:	d43f80ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1d692:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1d694:	00c92583          	lw	a1,12(s2)
   1d698:	0028                	c.addi4spn	a0,sp,8
   1d69a:	665090ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d69e:	00010617          	auipc	a2,0x10
   1d6a2:	0da60613          	addi	a2,a2,218 # 2d778 <std::piecewise_construct+0x1c8>
   1d6a6:	4581                	c.li	a1,0
   1d6a8:	0028                	c.addi4spn	a0,sp,8
   1d6aa:	c97f80ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d6ae:	85aa                	c.mv	a1,a0
   1d6b0:	1020                	c.addi4spn	s0,sp,40
   1d6b2:	8522                	c.mv	a0,s0
   1d6b4:	d5df80ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1d6b8:	00010597          	auipc	a1,0x10
   1d6bc:	14058593          	addi	a1,a1,320 # 2d7f8 <std::piecewise_construct+0x248>
   1d6c0:	8522                	c.mv	a0,s0
   1d6c2:	87ef90ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1d6c6:	85aa                	c.mv	a1,a0
   1d6c8:	00a0                	c.addi4spn	s0,sp,72
   1d6ca:	8522                	c.mv	a0,s0
   1d6cc:	d45f80ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d6d0:	85a2                	c.mv	a1,s0
   1d6d2:	8526                	c.mv	a0,s1
   1d6d4:	8bcf90ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1d6d8:	0001c797          	auipc	a5,0x1c
   1d6dc:	d687b783          	ld	a5,-664(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1d6e0:	07c1                	c.addi	a5,16
   1d6e2:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1d6e4:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d6e6:	08bc                	c.addi4spn	a5,sp,88
   1d6e8:	00f50463          	beq	a0,a5,1d6f0 <dwarf::value::as_sec_offset() const+0x226>
   1d6ec:	dc5f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d6f0:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d6f2:	183c                	c.addi4spn	a5,sp,56
   1d6f4:	00f50463          	beq	a0,a5,1d6fc <dwarf::value::as_sec_offset() const+0x232>
   1d6f8:	db9f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d6fc:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d6fe:	083c                	c.addi4spn	a5,sp,24
   1d700:	00f50463          	beq	a0,a5,1d708 <dwarf::value::as_sec_offset() const+0x23e>
   1d704:	dadf80ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as sec_offset");
   1d708:	0001c617          	auipc	a2,0x1c
   1d70c:	ec863603          	ld	a2,-312(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1d710:	0001c597          	auipc	a1,0x1c
   1d714:	e805b583          	ld	a1,-384(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1d718:	8526                	c.mv	a0,s1
   1d71a:	f47f80ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d71e:	842a                	c.mv	s0,a0
   1d720:	a8a5                	c.j	1d798 <dwarf::value::as_sec_offset() const+0x2ce>
      return __exchange_and_add(__mem, __val);
   1d722:	55fd                	c.li	a1,-1
   1d724:	03048513          	addi	a0,s1,48
   1d728:	c09f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d72c:	bdd1                	c.j	1d600 <dwarf::value::as_sec_offset() const+0x136>
	_M_dispose();
   1d72e:	609c                	c.ld	a5,0(s1)
   1d730:	6b9c                	c.ld	a5,16(a5)
   1d732:	8526                	c.mv	a0,s1
   1d734:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d736:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d73a:	0001c797          	auipc	a5,0x1c
   1d73e:	d3e7b783          	ld	a5,-706(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d742:	0007c783          	lbu	a5,0(a5)
   1d746:	cf89                	c.beqz	a5,1d760 <dwarf::value::as_sec_offset() const+0x296>
    _Atomic_word __result = *__mem;
   1d748:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d74a:	fff5079b          	addiw	a5,a0,-1
   1d74e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d750:	4785                	c.li	a5,1
   1d752:	eaf51ae3          	bne	a0,a5,1d606 <dwarf::value::as_sec_offset() const+0x13c>
	    _M_destroy();
   1d756:	609c                	c.ld	a5,0(s1)
   1d758:	6f9c                	c.ld	a5,24(a5)
   1d75a:	8526                	c.mv	a0,s1
   1d75c:	9782                	c.jalr	a5
   1d75e:	b565                	c.j	1d606 <dwarf::value::as_sec_offset() const+0x13c>
      return __exchange_and_add(__mem, __val);
   1d760:	55fd                	c.li	a1,-1
   1d762:	03448513          	addi	a0,s1,52
   1d766:	bcbf80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d76a:	b7dd                	c.j	1d750 <dwarf::value::as_sec_offset() const+0x286>
      { return _M_dataplus._M_p; }
   1d76c:	842a                	c.mv	s0,a0
   1d76e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d770:	08bc                	c.addi4spn	a5,sp,88
   1d772:	00f50463          	beq	a0,a5,1d77a <dwarf::value::as_sec_offset() const+0x2b0>
   1d776:	d3bf80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d77a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d77c:	183c                	c.addi4spn	a5,sp,56
   1d77e:	00f50463          	beq	a0,a5,1d786 <dwarf::value::as_sec_offset() const+0x2bc>
   1d782:	d2ff80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d786:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d788:	083c                	c.addi4spn	a5,sp,24
   1d78a:	00f50463          	beq	a0,a5,1d792 <dwarf::value::as_sec_offset() const+0x2c8>
   1d78e:	d23f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1d792:	8526                	c.mv	a0,s1
   1d794:	cddf80ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1d798:	7546                	c.ldsp	a0,112(sp)
   1d79a:	c511                	c.beqz	a0,1d7a6 <dwarf::value::as_sec_offset() const+0x2dc>
	  _M_pi->_M_release();
   1d79c:	0001c317          	auipc	t1,0x1c
   1d7a0:	c2433303          	ld	t1,-988(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1d7a4:	9302                	c.jalr	t1
   1d7a6:	8522                	c.mv	a0,s0
   1d7a8:	ee9f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d7ac:	842a                	c.mv	s0,a0
   1d7ae:	b7f1                	c.j	1d77a <dwarf::value::as_sec_offset() const+0x2b0>
   1d7b0:	842a                	c.mv	s0,a0
   1d7b2:	bfd1                	c.j	1d786 <dwarf::value::as_sec_offset() const+0x2bc>
   1d7b4:	842a                	c.mv	s0,a0
   1d7b6:	bff1                	c.j	1d792 <dwarf::value::as_sec_offset() const+0x2c8>
  cursor cur(cu->data(), offset);
   1d7b8:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d7bc:	f4a6                	c.sdsp	s1,104(sp)
      : _M_pi(__r._M_pi)
   1d7be:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d7c0:	649c                	c.ld	a5,8(s1)
   1d7c2:	97ba                	c.add	a5,a4
   1d7c4:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1d7c6:	00892783          	lw	a5,8(s2)
   1d7ca:	471d                	c.li	a4,7
   1d7cc:	e6e781e3          	beq	a5,a4,1d62e <dwarf::value::as_sec_offset() const+0x164>
   1d7d0:	475d                	c.li	a4,23
   1d7d2:	dce794e3          	bne	a5,a4,1d59a <dwarf::value::as_sec_offset() const+0xd0>
    return cur.offset();
   1d7d6:	10a8                	c.addi4spn	a0,sp,104
   1d7d8:	987fd0ef          	jal	ra,1b15e <dwarf::cursor::offset()>
   1d7dc:	b575                	c.j	1d688 <dwarf::value::as_sec_offset() const+0x1be>

000000000001d7de <dwarf::value::resolve_indirect(dwarf::DW_AT)>:

void value::resolve_indirect(DW_AT name) {
  if (form != DW_FORM::indirect)
   1d7de:	4518                	c.lw	a4,8(a0)
   1d7e0:	47d9                	c.li	a5,22
   1d7e2:	00f70363          	beq	a4,a5,1d7e8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xa>
   1d7e6:	8082                	c.jr	ra
void value::resolve_indirect(DW_AT name) {
   1d7e8:	711d                	c.addi16sp	sp,-96
   1d7ea:	ec86                	c.sdsp	ra,88(sp)
   1d7ec:	e8a2                	c.sdsp	s0,80(sp)
   1d7ee:	e4a6                	c.sdsp	s1,72(sp)
   1d7f0:	e0ca                	c.sdsp	s2,64(sp)
   1d7f2:	fc4e                	c.sdsp	s3,56(sp)
   1d7f4:	f852                	c.sdsp	s4,48(sp)
   1d7f6:	842a                	c.mv	s0,a0
   1d7f8:	892e                	c.mv	s2,a1
    return;

  cursor c(cu->data(), offset);
   1d7fa:	6108                	c.ld	a0,0(a0)
   1d7fc:	8e3f90ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d800:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1d804:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1d806:	1a048463          	beq	s1,zero,1d9ae <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1d0>
    if (__is_single_threaded())
   1d80a:	0001c797          	auipc	a5,0x1c
   1d80e:	c6e7b783          	ld	a5,-914(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d812:	0007c783          	lbu	a5,0(a5)
   1d816:	cfad                	c.beqz	a5,1d890 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xb2>
  { *__mem += __val; }
   1d818:	589c                	c.lw	a5,48(s1)
   1d81a:	2785                	c.addiw	a5,1
   1d81c:	d89c                	c.sw	a5,48(s1)
   1d81e:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d822:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d824:	e826                	c.sdsp	s1,16(sp)
    if (__is_single_threaded())
   1d826:	0001c797          	auipc	a5,0x1c
   1d82a:	c527b783          	ld	a5,-942(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d82e:	0007c783          	lbu	a5,0(a5)
   1d832:	c7ad                	c.beqz	a5,1d89c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xbe>
  { *__mem += __val; }
   1d834:	589c                	c.lw	a5,48(s1)
   1d836:	2785                	c.addiw	a5,1
   1d838:	d89c                	c.sw	a5,48(s1)
   1d83a:	0089b783          	ld	a5,8(s3)
   1d83e:	97d2                	c.add	a5,s4
   1d840:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   1d842:	0001c797          	auipc	a5,0x1c
   1d846:	c367b783          	ld	a5,-970(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d84a:	0007c783          	lbu	a5,0(a5)
   1d84e:	cfa9                	c.beqz	a5,1d8a8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xca>
    _Atomic_word __result = *__mem;
   1d850:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d852:	fff5079b          	addiw	a5,a0,-1
   1d856:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d858:	4785                	c.li	a5,1
   1d85a:	16f51163          	bne	a0,a5,1d9bc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
	_M_dispose();
   1d85e:	609c                	c.ld	a5,0(s1)
   1d860:	6b9c                	c.ld	a5,16(a5)
   1d862:	8526                	c.mv	a0,s1
   1d864:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d866:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d86a:	0001c797          	auipc	a5,0x1c
   1d86e:	c0e7b783          	ld	a5,-1010(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d872:	0007c783          	lbu	a5,0(a5)
   1d876:	cf9d                	c.beqz	a5,1d8b4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xd6>
    _Atomic_word __result = *__mem;
   1d878:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   1d87a:	fff7871b          	addiw	a4,a5,-1
   1d87e:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d880:	4705                	c.li	a4,1
   1d882:	12e79d63          	bne	a5,a4,1d9bc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
	    _M_destroy();
   1d886:	609c                	c.ld	a5,0(s1)
   1d888:	6f9c                	c.ld	a5,24(a5)
   1d88a:	8526                	c.mv	a0,s1
   1d88c:	9782                	c.jalr	a5
   1d88e:	a23d                	c.j	1d9bc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
      __atomic_add(__mem, __val);
   1d890:	4585                	c.li	a1,1
   1d892:	03048513          	addi	a0,s1,48
   1d896:	a6bf80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d89a:	b751                	c.j	1d81e <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x40>
   1d89c:	4585                	c.li	a1,1
   1d89e:	03048513          	addi	a0,s1,48
   1d8a2:	a5ff80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d8a6:	bf51                	c.j	1d83a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x5c>
      return __exchange_and_add(__mem, __val);
   1d8a8:	55fd                	c.li	a1,-1
   1d8aa:	03048513          	addi	a0,s1,48
   1d8ae:	a83f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d8b2:	b75d                	c.j	1d858 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x7a>
   1d8b4:	55fd                	c.li	a1,-1
   1d8b6:	03448513          	addi	a0,s1,52
   1d8ba:	a77f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d8be:	87aa                	c.mv	a5,a0
   1d8c0:	b7c1                	c.j	1d880 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xa2>
    return 0;
   1d8c2:	4601                	c.li	a2,0
  DW_FORM form;
  do {
    form = (DW_FORM)c.uleb128();
   1d8c4:	2601                	c.addiw	a2,0
  } while (form == DW_FORM::indirect);
   1d8c6:	04961063          	bne	a2,s1,1d906 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x128>
    while (pos < sec->end) {
   1d8ca:	67e2                	c.ldsp	a5,24(sp)
      { return _M_ptr; }
   1d8cc:	65a2                	c.ldsp	a1,8(sp)
   1d8ce:	6998                	c.ld	a4,16(a1)
   1d8d0:	02e7f763          	bgeu	a5,a4,1d8fe <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x120>
    std::uint64_t result = 0;
   1d8d4:	4601                	c.li	a2,0
    int shift = 0;
   1d8d6:	884e                	c.mv	a6,s3
      uint8_t byte = *(uint8_t *)(pos++);
   1d8d8:	0785                	c.addi	a5,1
   1d8da:	ec3e                	c.sdsp	a5,24(sp)
   1d8dc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1d8e0:	07f77693          	andi	a3,a4,127
   1d8e4:	010696b3          	sll	a3,a3,a6
   1d8e8:	8e55                	c.or	a2,a3
      if ((byte & 0x80) == 0)
   1d8ea:	0187171b          	slliw	a4,a4,0x18
   1d8ee:	4187571b          	sraiw	a4,a4,0x18
   1d8f2:	fc0759e3          	bge	a4,zero,1d8c4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xe6>
      shift += 7;
   1d8f6:	281d                	c.addiw	a6,7
    while (pos < sec->end) {
   1d8f8:	6998                	c.ld	a4,16(a1)
   1d8fa:	fce7efe3          	bltu	a5,a4,1d8d8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xfa>
    underflow();
   1d8fe:	8552                	c.mv	a0,s4
   1d900:	b38fd0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1d904:	bf7d                	c.j	1d8c2 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xe4>
  typ = attribute_spec(name, form).type;
   1d906:	85ca                	c.mv	a1,s2
   1d908:	1008                	c.addi4spn	a0,sp,32
   1d90a:	3bf010ef          	jal	ra,1f4c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
   1d90e:	57a2                	c.lwsp	a5,40(sp)
   1d910:	c45c                	c.sw	a5,12(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1d912:	67a2                	c.ldsp	a5,8(sp)
   1d914:	6798                	c.ld	a4,8(a5)
   1d916:	67e2                	c.ldsp	a5,24(sp)
   1d918:	8f99                	c.sub	a5,a4
  offset = c.get_section_offset();
   1d91a:	e81c                	c.sd	a5,16(s0)
	if (_M_pi != nullptr)
   1d91c:	6442                	c.ldsp	s0,16(sp)
   1d91e:	cc19                	c.beqz	s0,1d93c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
    if (__is_single_threaded())
   1d920:	0001c797          	auipc	a5,0x1c
   1d924:	b587b783          	ld	a5,-1192(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d928:	0007c783          	lbu	a5,0(a5)
   1d92c:	c385                	c.beqz	a5,1d94c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x16e>
    _Atomic_word __result = *__mem;
   1d92e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d930:	fff5079b          	addiw	a5,a0,-1
   1d934:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d936:	4785                	c.li	a5,1
   1d938:	02f50063          	beq	a0,a5,1d958 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x17a>
}
   1d93c:	60e6                	c.ldsp	ra,88(sp)
   1d93e:	6446                	c.ldsp	s0,80(sp)
   1d940:	64a6                	c.ldsp	s1,72(sp)
   1d942:	6906                	c.ldsp	s2,64(sp)
   1d944:	79e2                	c.ldsp	s3,56(sp)
   1d946:	7a42                	c.ldsp	s4,48(sp)
   1d948:	6125                	c.addi16sp	sp,96
   1d94a:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1d94c:	55fd                	c.li	a1,-1
   1d94e:	03040513          	addi	a0,s0,48
   1d952:	9dff80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d956:	b7c5                	c.j	1d936 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x158>
	_M_dispose();
   1d958:	601c                	c.ld	a5,0(s0)
   1d95a:	6b9c                	c.ld	a5,16(a5)
   1d95c:	8522                	c.mv	a0,s0
   1d95e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d960:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d964:	0001c797          	auipc	a5,0x1c
   1d968:	b147b783          	ld	a5,-1260(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d96c:	0007c783          	lbu	a5,0(a5)
   1d970:	cf89                	c.beqz	a5,1d98a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ac>
    _Atomic_word __result = *__mem;
   1d972:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1d974:	fff7871b          	addiw	a4,a5,-1
   1d978:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d97a:	4705                	c.li	a4,1
   1d97c:	fce790e3          	bne	a5,a4,1d93c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
	    _M_destroy();
   1d980:	601c                	c.ld	a5,0(s0)
   1d982:	6f9c                	c.ld	a5,24(a5)
   1d984:	8522                	c.mv	a0,s0
   1d986:	9782                	c.jalr	a5
   1d988:	bf55                	c.j	1d93c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
      return __exchange_and_add(__mem, __val);
   1d98a:	55fd                	c.li	a1,-1
   1d98c:	03440513          	addi	a0,s0,52
   1d990:	9a1f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d994:	87aa                	c.mv	a5,a0
   1d996:	b7d5                	c.j	1d97a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x19c>
	if (_M_pi != nullptr)
   1d998:	842a                	c.mv	s0,a0
   1d99a:	6542                	c.ldsp	a0,16(sp)
   1d99c:	c511                	c.beqz	a0,1d9a8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ca>
	  _M_pi->_M_release();
   1d99e:	0001c317          	auipc	t1,0x1c
   1d9a2:	a2233303          	ld	t1,-1502(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1d9a6:	9302                	c.jalr	t1
   1d9a8:	8522                	c.mv	a0,s0
   1d9aa:	ce7f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
  cursor c(cu->data(), offset);
   1d9ae:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d9b0:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d9b2:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d9b4:	0089b783          	ld	a5,8(s3)
   1d9b8:	97ba                	c.add	a5,a4
   1d9ba:	ec3e                	c.sdsp	a5,24(sp)
    underflow();
   1d9bc:	00810a13          	addi	s4,sp,8
    int shift = 0;
   1d9c0:	4981                	c.li	s3,0
  } while (form == DW_FORM::indirect);
   1d9c2:	44d9                	c.li	s1,22
   1d9c4:	b719                	c.j	1d8ca <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xec>

000000000001d9c6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>:
    : cu(cu), form(form), typ(typ), offset(offset) {
   1d9c6:	e10c                	c.sd	a1,0(a0)
   1d9c8:	c514                	c.sw	a3,8(a0)
   1d9ca:	c558                	c.sw	a4,12(a0)
   1d9cc:	e91c                	c.sd	a5,16(a0)
  if (form == DW_FORM::indirect)
   1d9ce:	47d9                	c.li	a5,22
   1d9d0:	00f68363          	beq	a3,a5,1d9d6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)+0x10>
   1d9d4:	8082                	c.jr	ra
value::value(const unit *cu, DW_AT name, DW_FORM form, type typ,
   1d9d6:	1141                	c.addi	sp,-16
   1d9d8:	e406                	c.sdsp	ra,8(sp)
    resolve_indirect(name);
   1d9da:	85b2                	c.mv	a1,a2
   1d9dc:	e03ff0ef          	jal	ra,1d7de <dwarf::value::resolve_indirect(dwarf::DW_AT)>
}
   1d9e0:	60a2                	c.ldsp	ra,8(sp)
   1d9e2:	0141                	c.addi	sp,16
   1d9e4:	8082                	c.jr	ra

000000000001d9e6 <dwarf::value::as_rangelist() const>:
rangelist value::as_rangelist() const {
   1d9e6:	7155                	c.addi16sp	sp,-208
   1d9e8:	e586                	c.sdsp	ra,200(sp)
   1d9ea:	e1a2                	c.sdsp	s0,192(sp)
   1d9ec:	fd26                	c.sdsp	s1,184(sp)
   1d9ee:	f94a                	c.sdsp	s2,176(sp)
   1d9f0:	f54e                	c.sdsp	s3,168(sp)
   1d9f2:	f152                	c.sdsp	s4,160(sp)
   1d9f4:	ed56                	c.sdsp	s5,152(sp)
   1d9f6:	e95a                	c.sdsp	s6,144(sp)
   1d9f8:	e55e                	c.sdsp	s7,136(sp)
   1d9fa:	e162                	c.sdsp	s8,128(sp)
   1d9fc:	8a2a                	c.mv	s4,a0
   1d9fe:	892e                	c.mv	s2,a1
  section_offset off = as_sec_offset();
   1da00:	852e                	c.mv	a0,a1
   1da02:	ac9ff0ef          	jal	ra,1d4ca <dwarf::value::as_sec_offset() const>
   1da06:	8aaa                	c.mv	s5,a0
  die cudie = cu->root();
   1da08:	00093503          	ld	a0,0(s2)
   1da0c:	d9efb0ef          	jal	ra,18faa <dwarf::unit::root() const>
   1da10:	842a                	c.mv	s0,a0
  die(const die &o) = default;
   1da12:	411c                	c.lw	a5,0(a0)
   1da14:	c83e                	c.swsp	a5,16(sp)
   1da16:	651c                	c.ld	a5,8(a0)
   1da18:	ec3e                	c.sdsp	a5,24(sp)
   1da1a:	691c                	c.ld	a5,16(a0)
   1da1c:	f03e                	c.sdsp	a5,32(sp)
   1da1e:	6d1c                	c.ld	a5,24(a0)
   1da20:	f43e                	c.sdsp	a5,40(sp)
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1da22:	181c                	c.addi4spn	a5,sp,48
   1da24:	f0be                	c.sdsp	a5,96(sp)
   1da26:	f4be                	c.sdsp	a5,104(sp)
   1da28:	109c                	c.addi4spn	a5,sp,96
   1da2a:	f8be                	c.sdsp	a5,112(sp)
  size_type size() const { return end - base; }
   1da2c:	05853983          	ld	s3,88(a0)
   1da30:	693c                	c.ld	a5,80(a0)
   1da32:	40f989b3          	sub	s3,s3,a5
   1da36:	4039d493          	srai	s1,s3,0x3
    if (n <= (size_type)(cap - base))
   1da3a:	03000793          	addi	a5,zero,48
   1da3e:	0537f663          	bgeu	a5,s3,1da8a <dwarf::value::as_rangelist() const+0xa4>
    size_type target = cap - base;
   1da42:	4519                	c.li	a0,6
      target <<= 1;
   1da44:	0506                	c.slli	a0,0x1
    while (target < n)
   1da46:	fe956fe3          	bltu	a0,s1,1da44 <dwarf::value::as_rangelist() const+0x5e>
    char *newbuf = new char[sizeof(T[target])];
   1da4a:	00351b13          	slli	s6,a0,0x3
   1da4e:	855a                	c.mv	a0,s6
   1da50:	891f80ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1da54:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1da56:	7506                	c.ldsp	a0,96(sp)
    for (; src < end; src++, dest++) {
   1da58:	7726                	c.ldsp	a4,104(sp)
   1da5a:	04e57f63          	bgeu	a0,a4,1dab8 <dwarf::value::as_rangelist() const+0xd2>
    T *src = base, *dest = (T *)newbuf;
   1da5e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1da60:	07a1                	c.addi	a5,8
   1da62:	fee7efe3          	bltu	a5,a4,1da60 <dwarf::value::as_rangelist() const+0x7a>
   1da66:	fff70b93          	addi	s7,a4,-1
   1da6a:	40ab8bb3          	sub	s7,s7,a0
   1da6e:	ff8bfb93          	andi	s7,s7,-8
   1da72:	0ba1                	c.addi	s7,8
   1da74:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1da76:	181c                	c.addi4spn	a5,sp,48
   1da78:	00f50563          	beq	a0,a5,1da82 <dwarf::value::as_rangelist() const+0x9c>
      delete[] (char *)base;
   1da7c:	c119                	c.beqz	a0,1da82 <dwarf::value::as_rangelist() const+0x9c>
   1da7e:	ae3f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1da82:	f0e2                	c.sdsp	s8,96(sp)
    end = dest;
   1da84:	f4de                	c.sdsp	s7,104(sp)
    cap = base + target;
   1da86:	9c5a                	c.add	s8,s6
   1da88:	f8e2                	c.sdsp	s8,112(sp)
    for (size_type i = 0; i < osize; i++)
   1da8a:	cc89                	c.beqz	s1,1daa4 <dwarf::value::as_rangelist() const+0xbe>
   1da8c:	4781                	c.li	a5,0
   1da8e:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1da92:	6838                	c.ld	a4,80(s0)
   1da94:	9736                	c.add	a4,a3
   1da96:	6310                	c.ld	a2,0(a4)
   1da98:	7706                	c.ldsp	a4,96(sp)
   1da9a:	9736                	c.add	a4,a3
   1da9c:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1da9e:	0785                	c.addi	a5,1
   1daa0:	fef497e3          	bne	s1,a5,1da8e <dwarf::value::as_rangelist() const+0xa8>
    end = base + osize;
   1daa4:	7786                	c.ldsp	a5,96(sp)
   1daa6:	97ce                	c.add	a5,s3
   1daa8:	f4be                	c.sdsp	a5,104(sp)
   1daaa:	743c                	c.ld	a5,104(s0)
   1daac:	fcbe                	c.sdsp	a5,120(sp)
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   1daae:	45c5                	c.li	a1,17
   1dab0:	0808                	c.addi4spn	a0,sp,16
   1dab2:	b7ffd0ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   1dab6:	a019                	c.j	1dabc <dwarf::value::as_rangelist() const+0xd6>
    T *src = base, *dest = (T *)newbuf;
   1dab8:	8be2                	c.mv	s7,s8
   1daba:	bf75                	c.j	1da76 <dwarf::value::as_rangelist() const+0x90>
   1dabc:	c911                	c.beqz	a0,1dad0 <dwarf::value::as_rangelist() const+0xea>
   1dabe:	0808                	c.addi4spn	a0,sp,16
   1dac0:	0f7070ef          	jal	ra,253b6 <dwarf::at_low_pc(dwarf::die const&)>
   1dac4:	84aa                	c.mv	s1,a0
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   1dac6:	00093503          	ld	a0,0(s2)
   1daca:	e0af90ef          	jal	ra,170d4 <dwarf::unit::get_dwarf() const>
   1dace:	a019                	c.j	1dad4 <dwarf::value::as_rangelist() const+0xee>
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   1dad0:	4481                	c.li	s1,0
   1dad2:	bfd5                	c.j	1dac6 <dwarf::value::as_rangelist() const+0xe0>
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   1dad4:	85aa                	c.mv	a1,a0
   1dad6:	4625                	c.li	a2,9
   1dad8:	850a                	c.mv	a0,sp
   1dada:	e10f90ef          	jal	ra,170ea <dwarf::dwarf::get_section(dwarf::section_type) const>
  auto cusec = cu->data();
   1dade:	00093503          	ld	a0,0(s2)
   1dae2:	dfcf90ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dae6:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1daea:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1daec:	c819                	c.beqz	s0,1db02 <dwarf::value::as_rangelist() const+0x11c>
    if (__is_single_threaded())
   1daee:	0001c797          	auipc	a5,0x1c
   1daf2:	98a7b783          	ld	a5,-1654(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1daf6:	0007c783          	lbu	a5,0(a5)
   1dafa:	cf89                	c.beqz	a5,1db14 <dwarf::value::as_rangelist() const+0x12e>
  { *__mem += __val; }
   1dafc:	581c                	c.lw	a5,48(s0)
   1dafe:	2785                	c.addiw	a5,1
   1db00:	d81c                	c.sw	a5,48(s0)
  return rangelist(sec, off, cusec->addr_size, cu_low_pc);
   1db02:	8726                	c.mv	a4,s1
   1db04:	02092683          	lw	a3,32(s2)
   1db08:	8656                	c.mv	a2,s5
   1db0a:	858a                	c.mv	a1,sp
   1db0c:	8552                	c.mv	a0,s4
   1db0e:	5c7030ef          	jal	ra,218d4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>
   1db12:	a039                	c.j	1db20 <dwarf::value::as_rangelist() const+0x13a>
      __atomic_add(__mem, __val);
   1db14:	4585                	c.li	a1,1
   1db16:	03040513          	addi	a0,s0,48
   1db1a:	fe6f80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1db1e:	b7d5                	c.j	1db02 <dwarf::value::as_rangelist() const+0x11c>
	if (_M_pi != nullptr)
   1db20:	cc19                	c.beqz	s0,1db3e <dwarf::value::as_rangelist() const+0x158>
    if (__is_single_threaded())
   1db22:	0001c797          	auipc	a5,0x1c
   1db26:	9567b783          	ld	a5,-1706(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1db2a:	0007c783          	lbu	a5,0(a5)
   1db2e:	c7a5                	c.beqz	a5,1db96 <dwarf::value::as_rangelist() const+0x1b0>
    _Atomic_word __result = *__mem;
   1db30:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1db32:	fff5079b          	addiw	a5,a0,-1
   1db36:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1db38:	4785                	c.li	a5,1
   1db3a:	06f50463          	beq	a0,a5,1dba2 <dwarf::value::as_rangelist() const+0x1bc>
	if (_M_pi != nullptr)
   1db3e:	6422                	c.ldsp	s0,8(sp)
   1db40:	cc19                	c.beqz	s0,1db5e <dwarf::value::as_rangelist() const+0x178>
    if (__is_single_threaded())
   1db42:	0001c797          	auipc	a5,0x1c
   1db46:	9367b783          	ld	a5,-1738(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1db4a:	0007c783          	lbu	a5,0(a5)
   1db4e:	cbc9                	c.beqz	a5,1dbe0 <dwarf::value::as_rangelist() const+0x1fa>
    _Atomic_word __result = *__mem;
   1db50:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1db52:	fff5079b          	addiw	a5,a0,-1
   1db56:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1db58:	4785                	c.li	a5,1
   1db5a:	08f50963          	beq	a0,a5,1dbec <dwarf::value::as_rangelist() const+0x206>
    for (T *p = base; p < end; ++p)
   1db5e:	7506                	c.ldsp	a0,96(sp)
   1db60:	77a6                	c.ldsp	a5,104(sp)
   1db62:	00f57763          	bgeu	a0,a5,1db70 <dwarf::value::as_rangelist() const+0x18a>
   1db66:	87aa                	c.mv	a5,a0
   1db68:	07a1                	c.addi	a5,8
   1db6a:	7726                	c.ldsp	a4,104(sp)
   1db6c:	fee7eee3          	bltu	a5,a4,1db68 <dwarf::value::as_rangelist() const+0x182>
    if ((char *)base != buf)
   1db70:	181c                	c.addi4spn	a5,sp,48
   1db72:	00f50563          	beq	a0,a5,1db7c <dwarf::value::as_rangelist() const+0x196>
      delete[] (char *)base;
   1db76:	c119                	c.beqz	a0,1db7c <dwarf::value::as_rangelist() const+0x196>
   1db78:	9e9f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
}
   1db7c:	8552                	c.mv	a0,s4
   1db7e:	60ae                	c.ldsp	ra,200(sp)
   1db80:	640e                	c.ldsp	s0,192(sp)
   1db82:	74ea                	c.ldsp	s1,184(sp)
   1db84:	794a                	c.ldsp	s2,176(sp)
   1db86:	79aa                	c.ldsp	s3,168(sp)
   1db88:	7a0a                	c.ldsp	s4,160(sp)
   1db8a:	6aea                	c.ldsp	s5,152(sp)
   1db8c:	6b4a                	c.ldsp	s6,144(sp)
   1db8e:	6baa                	c.ldsp	s7,136(sp)
   1db90:	6c0a                	c.ldsp	s8,128(sp)
   1db92:	6169                	c.addi16sp	sp,208
   1db94:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1db96:	55fd                	c.li	a1,-1
   1db98:	03040513          	addi	a0,s0,48
   1db9c:	f94f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dba0:	bf61                	c.j	1db38 <dwarf::value::as_rangelist() const+0x152>
	_M_dispose();
   1dba2:	601c                	c.ld	a5,0(s0)
   1dba4:	6b9c                	c.ld	a5,16(a5)
   1dba6:	8522                	c.mv	a0,s0
   1dba8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dbaa:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dbae:	0001c797          	auipc	a5,0x1c
   1dbb2:	8ca7b783          	ld	a5,-1846(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dbb6:	0007c783          	lbu	a5,0(a5)
   1dbba:	cf89                	c.beqz	a5,1dbd4 <dwarf::value::as_rangelist() const+0x1ee>
    _Atomic_word __result = *__mem;
   1dbbc:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1dbbe:	fff5079b          	addiw	a5,a0,-1
   1dbc2:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dbc4:	4785                	c.li	a5,1
   1dbc6:	f6f51ce3          	bne	a0,a5,1db3e <dwarf::value::as_rangelist() const+0x158>
	    _M_destroy();
   1dbca:	601c                	c.ld	a5,0(s0)
   1dbcc:	6f9c                	c.ld	a5,24(a5)
   1dbce:	8522                	c.mv	a0,s0
   1dbd0:	9782                	c.jalr	a5
   1dbd2:	b7b5                	c.j	1db3e <dwarf::value::as_rangelist() const+0x158>
      return __exchange_and_add(__mem, __val);
   1dbd4:	55fd                	c.li	a1,-1
   1dbd6:	03440513          	addi	a0,s0,52
   1dbda:	f56f80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dbde:	b7dd                	c.j	1dbc4 <dwarf::value::as_rangelist() const+0x1de>
   1dbe0:	55fd                	c.li	a1,-1
   1dbe2:	03040513          	addi	a0,s0,48
   1dbe6:	f4af80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dbea:	b7bd                	c.j	1db58 <dwarf::value::as_rangelist() const+0x172>
	_M_dispose();
   1dbec:	601c                	c.ld	a5,0(s0)
   1dbee:	6b9c                	c.ld	a5,16(a5)
   1dbf0:	8522                	c.mv	a0,s0
   1dbf2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dbf4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dbf8:	0001c797          	auipc	a5,0x1c
   1dbfc:	8807b783          	ld	a5,-1920(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dc00:	0007c783          	lbu	a5,0(a5)
   1dc04:	cf89                	c.beqz	a5,1dc1e <dwarf::value::as_rangelist() const+0x238>
    _Atomic_word __result = *__mem;
   1dc06:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1dc08:	fff5079b          	addiw	a5,a0,-1
   1dc0c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dc0e:	4785                	c.li	a5,1
   1dc10:	f4f517e3          	bne	a0,a5,1db5e <dwarf::value::as_rangelist() const+0x178>
	    _M_destroy();
   1dc14:	601c                	c.ld	a5,0(s0)
   1dc16:	6f9c                	c.ld	a5,24(a5)
   1dc18:	8522                	c.mv	a0,s0
   1dc1a:	9782                	c.jalr	a5
   1dc1c:	b789                	c.j	1db5e <dwarf::value::as_rangelist() const+0x178>
      return __exchange_and_add(__mem, __val);
   1dc1e:	55fd                	c.li	a1,-1
   1dc20:	03440513          	addi	a0,s0,52
   1dc24:	f0cf80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dc28:	b7dd                	c.j	1dc0e <dwarf::value::as_rangelist() const+0x228>
	if (_M_pi != nullptr)
   1dc2a:	84aa                	c.mv	s1,a0
   1dc2c:	c419                	c.beqz	s0,1dc3a <dwarf::value::as_rangelist() const+0x254>
	  _M_pi->_M_release();
   1dc2e:	8522                	c.mv	a0,s0
   1dc30:	0001b317          	auipc	t1,0x1b
   1dc34:	79033303          	ld	t1,1936(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1dc38:	9302                	c.jalr	t1
   1dc3a:	8426                	c.mv	s0,s1
	if (_M_pi != nullptr)
   1dc3c:	6522                	c.ldsp	a0,8(sp)
   1dc3e:	c511                	c.beqz	a0,1dc4a <dwarf::value::as_rangelist() const+0x264>
	  _M_pi->_M_release();
   1dc40:	0001b317          	auipc	t1,0x1b
   1dc44:	78033303          	ld	t1,1920(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1dc48:	9302                	c.jalr	t1
class die {
   1dc4a:	1808                	c.addi4spn	a0,sp,48
   1dc4c:	0001b317          	auipc	t1,0x1b
   1dc50:	79433303          	ld	t1,1940(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1dc54:	9302                	c.jalr	t1
   1dc56:	8522                	c.mv	a0,s0
   1dc58:	a39f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   1dc5c:	842a                	c.mv	s0,a0
   1dc5e:	bff9                	c.j	1dc3c <dwarf::value::as_rangelist() const+0x256>
   1dc60:	842a                	c.mv	s0,a0
   1dc62:	b7e5                	c.j	1dc4a <dwarf::value::as_rangelist() const+0x264>

000000000001dc64 <dwarf::value::as_string[abi:cxx11]() const>:
string value::as_string() const {
   1dc64:	1101                	c.addi	sp,-32
   1dc66:	ec06                	c.sdsp	ra,24(sp)
   1dc68:	e822                	c.sdsp	s0,16(sp)
   1dc6a:	842a                	c.mv	s0,a0
   1dc6c:	852e                	c.mv	a0,a1
  const char *s = as_cstr(&size);
   1dc6e:	002c                	c.addi4spn	a1,sp,8
   1dc70:	c8cff0ef          	jal	ra,1d0fc <dwarf::value::as_cstr(unsigned long*) const>
   1dc74:	85aa                	c.mv	a1,a0
  return string(s, size);
   1dc76:	6622                	c.ldsp	a2,8(sp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1dc78:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1dc7c:	e01c                	c.sd	a5,0(s0)
	if (__s == 0 && __n > 0)
   1dc7e:	cd11                	c.beqz	a0,1dc9a <dwarf::value::as_string[abi:cxx11]() const+0x36>
	_M_construct(__s, __s + __n, std::forward_iterator_tag());
   1dc80:	4681                	c.li	a3,0
   1dc82:	962e                	c.add	a2,a1
   1dc84:	8522                	c.mv	a0,s0
   1dc86:	0001b317          	auipc	t1,0x1b
   1dc8a:	67a33303          	ld	t1,1658(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   1dc8e:	9302                	c.jalr	t1
}
   1dc90:	8522                	c.mv	a0,s0
   1dc92:	60e2                	c.ldsp	ra,24(sp)
   1dc94:	6442                	c.ldsp	s0,16(sp)
   1dc96:	6105                	c.addi16sp	sp,32
   1dc98:	8082                	c.jr	ra
	if (__s == 0 && __n > 0)
   1dc9a:	d27d                	c.beqz	a2,1dc80 <dwarf::value::as_string[abi:cxx11]() const+0x1c>
	  std::__throw_logic_error(__N("basic_string: "
   1dc9c:	0000f517          	auipc	a0,0xf
   1dca0:	28450513          	addi	a0,a0,644 # 2cf20 <__libc_csu_fini+0x8>
   1dca4:	fbcf80ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>

000000000001dca8 <dwarf::value::as_reference() const>:
die value::as_reference() const {
   1dca8:	7165                	c.addi16sp	sp,-400
   1dcaa:	e706                	c.sdsp	ra,392(sp)
   1dcac:	e322                	c.sdsp	s0,384(sp)
   1dcae:	fea6                	c.sdsp	s1,376(sp)
   1dcb0:	faca                	c.sdsp	s2,368(sp)
   1dcb2:	f6ce                	c.sdsp	s3,360(sp)
   1dcb4:	f2d2                	c.sdsp	s4,352(sp)
   1dcb6:	eed6                	c.sdsp	s5,344(sp)
   1dcb8:	eada                	c.sdsp	s6,336(sp)
   1dcba:	e6de                	c.sdsp	s7,328(sp)
   1dcbc:	842a                	c.mv	s0,a0
   1dcbe:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), offset);
   1dcc0:	6188                	c.ld	a0,0(a1)
   1dcc2:	c1cf90ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dcc6:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1dcca:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1dccc:	7e048a63          	beq	s1,zero,1e4c0 <dwarf::value::as_reference() const+0x818>
    if (__is_single_threaded())
   1dcd0:	0001b797          	auipc	a5,0x1b
   1dcd4:	7a87b783          	ld	a5,1960(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dcd8:	0007c783          	lbu	a5,0(a5)
   1dcdc:	cfb5                	c.beqz	a5,1dd58 <dwarf::value::as_reference() const+0xb0>
  { *__mem += __val; }
   1dcde:	589c                	c.lw	a5,48(s1)
   1dce0:	2785                	c.addiw	a5,1
   1dce2:	d89c                	c.sw	a5,48(s1)
   1dce4:	01093a03          	ld	s4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dce8:	f64e                	c.sdsp	s3,296(sp)
      : _M_pi(__r._M_pi)
   1dcea:	fa26                	c.sdsp	s1,304(sp)
    if (__is_single_threaded())
   1dcec:	0001b797          	auipc	a5,0x1b
   1dcf0:	78c7b783          	ld	a5,1932(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dcf4:	0007c783          	lbu	a5,0(a5)
   1dcf8:	c7b5                	c.beqz	a5,1dd64 <dwarf::value::as_reference() const+0xbc>
  { *__mem += __val; }
   1dcfa:	589c                	c.lw	a5,48(s1)
   1dcfc:	2785                	c.addiw	a5,1
   1dcfe:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1dd00:	0089b783          	ld	a5,8(s3)
   1dd04:	97d2                	c.add	a5,s4
   1dd06:	fe3e                	c.sdsp	a5,312(sp)
    if (__is_single_threaded())
   1dd08:	0001b797          	auipc	a5,0x1b
   1dd0c:	7707b783          	ld	a5,1904(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dd10:	0007c783          	lbu	a5,0(a5)
   1dd14:	cfb1                	c.beqz	a5,1dd70 <dwarf::value::as_reference() const+0xc8>
    _Atomic_word __result = *__mem;
   1dd16:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1dd18:	fff5079b          	addiw	a5,a0,-1
   1dd1c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1dd1e:	4785                	c.li	a5,1
   1dd20:	7af51863          	bne	a0,a5,1e4d0 <dwarf::value::as_reference() const+0x828>
	_M_dispose();
   1dd24:	609c                	c.ld	a5,0(s1)
   1dd26:	6b9c                	c.ld	a5,16(a5)
   1dd28:	8526                	c.mv	a0,s1
   1dd2a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dd2c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dd30:	0001b797          	auipc	a5,0x1b
   1dd34:	7487b783          	ld	a5,1864(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dd38:	0007c783          	lbu	a5,0(a5)
   1dd3c:	c3a1                	c.beqz	a5,1dd7c <dwarf::value::as_reference() const+0xd4>
    _Atomic_word __result = *__mem;
   1dd3e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1dd40:	fff5079b          	addiw	a5,a0,-1
   1dd44:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dd46:	4785                	c.li	a5,1
   1dd48:	78f51463          	bne	a0,a5,1e4d0 <dwarf::value::as_reference() const+0x828>
	    _M_destroy();
   1dd4c:	609c                	c.ld	a5,0(s1)
   1dd4e:	6f9c                	c.ld	a5,24(a5)
   1dd50:	8526                	c.mv	a0,s1
   1dd52:	9782                	c.jalr	a5
   1dd54:	77c0006f          	jal	zero,1e4d0 <dwarf::value::as_reference() const+0x828>
      __atomic_add(__mem, __val);
   1dd58:	4585                	c.li	a1,1
   1dd5a:	03048513          	addi	a0,s1,48
   1dd5e:	da2f80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1dd62:	b749                	c.j	1dce4 <dwarf::value::as_reference() const+0x3c>
   1dd64:	4585                	c.li	a1,1
   1dd66:	03048513          	addi	a0,s1,48
   1dd6a:	d96f80ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1dd6e:	bf49                	c.j	1dd00 <dwarf::value::as_reference() const+0x58>
      return __exchange_and_add(__mem, __val);
   1dd70:	55fd                	c.li	a1,-1
   1dd72:	03048513          	addi	a0,s1,48
   1dd76:	dbaf80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dd7a:	b755                	c.j	1dd1e <dwarf::value::as_reference() const+0x76>
   1dd7c:	55fd                	c.li	a1,-1
   1dd7e:	03448513          	addi	a0,s1,52
   1dd82:	daef80ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dd86:	b7c1                	c.j	1dd46 <dwarf::value::as_reference() const+0x9e>
    while (pos < sec->end) {
   1dd88:	77f2                	c.ldsp	a5,312(sp)
      { return _M_ptr; }
   1dd8a:	75b2                	c.ldsp	a1,296(sp)
   1dd8c:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   1dd8e:	4481                	c.li	s1,0
    int shift = 0;
   1dd90:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1dd92:	02e7f563          	bgeu	a5,a4,1ddbc <dwarf::value::as_reference() const+0x114>
      uint8_t byte = *(uint8_t *)(pos++);
   1dd96:	0785                	c.addi	a5,1
   1dd98:	fe3e                	c.sdsp	a5,312(sp)
   1dd9a:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1dd9e:	07f77693          	andi	a3,a4,127
   1dda2:	00c696b3          	sll	a3,a3,a2
   1dda6:	8cd5                	c.or	s1,a3
      if ((byte & 0x80) == 0)
   1dda8:	0187171b          	slliw	a4,a4,0x18
   1ddac:	4187571b          	sraiw	a4,a4,0x18
   1ddb0:	70075263          	bge	a4,zero,1e4b4 <dwarf::value::as_reference() const+0x80c>
      shift += 7;
   1ddb4:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1ddb6:	6998                	c.ld	a4,16(a1)
   1ddb8:	fce7efe3          	bltu	a5,a4,1dd96 <dwarf::value::as_reference() const+0xee>
    underflow();
   1ddbc:	1228                	c.addi4spn	a0,sp,296
   1ddbe:	e7bfc0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   1ddc2:	a935                	c.j	1e1fe <dwarf::value::as_reference() const+0x556>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ddc4:	77b2                	c.ldsp	a5,296(sp)
   1ddc6:	6b98                	c.ld	a4,16(a5)
   1ddc8:	77f2                	c.ldsp	a5,312(sp)
   1ddca:	00e7e563          	bltu	a5,a4,1ddd4 <dwarf::value::as_reference() const+0x12c>
      underflow();
   1ddce:	1228                	c.addi4spn	a0,sp,296
   1ddd0:	e69fc0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ddd4:	77f2                	c.ldsp	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   1ddd6:	7732                	c.ldsp	a4,296(sp)
   1ddd8:	4f58                	c.lw	a4,28(a4)
   1ddda:	6c070963          	beq	a4,zero,1e4ac <dwarf::value::as_reference() const+0x804>
        val = (val << 8) | (uint64_t)p[i];
   1ddde:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1dde2:	a5f9                	c.j	1e4b0 <dwarf::value::as_reference() const+0x808>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dde4:	77b2                	c.ldsp	a5,296(sp)
   1dde6:	6b98                	c.ld	a4,16(a5)
   1dde8:	77f2                	c.ldsp	a5,312(sp)
   1ddea:	40f70633          	sub	a2,a4,a5
   1ddee:	4685                	c.li	a3,1
   1ddf0:	00c6f463          	bgeu	a3,a2,1ddf8 <dwarf::value::as_reference() const+0x150>
   1ddf4:	00e7e563          	bltu	a5,a4,1ddfe <dwarf::value::as_reference() const+0x156>
      underflow();
   1ddf8:	1228                	c.addi4spn	a0,sp,296
   1ddfa:	e3ffc0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ddfe:	77f2                	c.ldsp	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   1de00:	7732                	c.ldsp	a4,296(sp)
   1de02:	4f58                	c.lw	a4,28(a4)
   1de04:	eb11                	c.bnez	a4,1de18 <dwarf::value::as_reference() const+0x170>
        val |= ((uint64_t)p[i]) << (i * 8);
   1de06:	0017c483          	lbu	s1,1(a5)
   1de0a:	04a2                	c.slli	s1,0x8
   1de0c:	0007c703          	lbu	a4,0(a5)
   1de10:	8cd9                	c.or	s1,a4
    pos += sizeof(T);
   1de12:	0789                	c.addi	a5,2
   1de14:	fe3e                	c.sdsp	a5,312(sp)
    break;
   1de16:	ad79                	c.j	1e4b4 <dwarf::value::as_reference() const+0x80c>
        val = (val << 8) | (uint64_t)p[i];
   1de18:	0007c483          	lbu	s1,0(a5)
   1de1c:	04a2                	c.slli	s1,0x8
   1de1e:	0017c703          	lbu	a4,1(a5)
   1de22:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1de24:	b7fd                	c.j	1de12 <dwarf::value::as_reference() const+0x16a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1de26:	77b2                	c.ldsp	a5,296(sp)
   1de28:	6b98                	c.ld	a4,16(a5)
   1de2a:	77f2                	c.ldsp	a5,312(sp)
   1de2c:	40f70633          	sub	a2,a4,a5
   1de30:	468d                	c.li	a3,3
   1de32:	00c6f463          	bgeu	a3,a2,1de3a <dwarf::value::as_reference() const+0x192>
   1de36:	00e7e563          	bltu	a5,a4,1de40 <dwarf::value::as_reference() const+0x198>
      underflow();
   1de3a:	1228                	c.addi4spn	a0,sp,296
   1de3c:	dfdfc0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1de40:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1de42:	77b2                	c.ldsp	a5,296(sp)
   1de44:	4fdc                	c.lw	a5,28(a5)
   1de46:	e39d                	c.bnez	a5,1de6c <dwarf::value::as_reference() const+0x1c4>
   1de48:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1de4a:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1de4c:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1de50:	0006c703          	lbu	a4,0(a3)
   1de54:	00f71733          	sll	a4,a4,a5
   1de58:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1de5a:	0685                	c.addi	a3,1
   1de5c:	27a1                	c.addiw	a5,8
   1de5e:	feb799e3          	bne	a5,a1,1de50 <dwarf::value::as_reference() const+0x1a8>
    pos += sizeof(T);
   1de62:	0611                	c.addi	a2,4
   1de64:	fe32                	c.sdsp	a2,312(sp)
   1de66:	1482                	c.slli	s1,0x20
   1de68:	9081                	c.srli	s1,0x20
    break;
   1de6a:	a5a9                	c.j	1e4b4 <dwarf::value::as_reference() const+0x80c>
   1de6c:	87b2                	c.mv	a5,a2
   1de6e:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1de72:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1de74:	04a2                	c.slli	s1,0x8
   1de76:	0007c703          	lbu	a4,0(a5)
   1de7a:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1de7c:	0785                	c.addi	a5,1
   1de7e:	fef69be3          	bne	a3,a5,1de74 <dwarf::value::as_reference() const+0x1cc>
   1de82:	b7c5                	c.j	1de62 <dwarf::value::as_reference() const+0x1ba>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1de84:	77b2                	c.ldsp	a5,296(sp)
   1de86:	6b98                	c.ld	a4,16(a5)
   1de88:	77f2                	c.ldsp	a5,312(sp)
   1de8a:	40f70633          	sub	a2,a4,a5
   1de8e:	469d                	c.li	a3,7
   1de90:	00c6f463          	bgeu	a3,a2,1de98 <dwarf::value::as_reference() const+0x1f0>
   1de94:	00e7e563          	bltu	a5,a4,1de9e <dwarf::value::as_reference() const+0x1f6>
      underflow();
   1de98:	1228                	c.addi4spn	a0,sp,296
   1de9a:	d9ffc0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1de9e:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1dea0:	77b2                	c.ldsp	a5,296(sp)
   1dea2:	4fdc                	c.lw	a5,28(a5)
   1dea4:	e38d                	c.bnez	a5,1dec6 <dwarf::value::as_reference() const+0x21e>
   1dea6:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1dea8:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1deaa:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1deae:	0006c703          	lbu	a4,0(a3)
   1deb2:	00f71733          	sll	a4,a4,a5
   1deb6:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1deb8:	0685                	c.addi	a3,1
   1deba:	27a1                	c.addiw	a5,8
   1debc:	feb799e3          	bne	a5,a1,1deae <dwarf::value::as_reference() const+0x206>
    pos += sizeof(T);
   1dec0:	0621                	c.addi	a2,8
   1dec2:	fe32                	c.sdsp	a2,312(sp)
   1dec4:	abc5                	c.j	1e4b4 <dwarf::value::as_reference() const+0x80c>
   1dec6:	87b2                	c.mv	a5,a2
   1dec8:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1decc:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1dece:	04a2                	c.slli	s1,0x8
   1ded0:	0007c703          	lbu	a4,0(a5)
   1ded4:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1ded6:	0785                	c.addi	a5,1
   1ded8:	fef69be3          	bne	a3,a5,1dece <dwarf::value::as_reference() const+0x226>
   1dedc:	b7d5                	c.j	1dec0 <dwarf::value::as_reference() const+0x218>
    off = cur.offset();
   1dede:	1228                	c.addi4spn	a0,sp,296
   1dee0:	a7efd0ef          	jal	ra,1b15e <dwarf::cursor::offset()>
   1dee4:	89aa                	c.mv	s3,a0
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   1dee6:	00093503          	ld	a0,0(s2)
   1deea:	9eaf90ef          	jal	ra,170d4 <dwarf::unit::get_dwarf() const>
   1deee:	8f6f90ef          	jal	ra,16fe4 <dwarf::dwarf::compilation_units() const>
      : _M_current(__i) { }
   1def2:	6104                	c.ld	s1,0(a0)
   1def4:	00853a83          	ld	s5,8(a0)
   1def8:	029a8563          	beq	s5,s1,1df22 <dwarf::value::as_reference() const+0x27a>
    const compilation_unit *base_cu = nullptr;
   1defc:	4901                	c.li	s2,0
   1defe:	a031                	c.j	1df0a <dwarf::value::as_reference() const+0x262>
      if (file_cu.get_section_offset() > off)
   1df00:	00a9ec63          	bltu	s3,a0,1df18 <dwarf::value::as_reference() const+0x270>
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   1df04:	04e1                	c.addi	s1,24
   1df06:	009a8863          	beq	s5,s1,1df16 <dwarf::value::as_reference() const+0x26e>
   1df0a:	8a4a                	c.mv	s4,s2
   1df0c:	8926                	c.mv	s2,s1
      if (file_cu.get_section_offset() > off)
   1df0e:	8526                	c.mv	a0,s1
   1df10:	9c8f90ef          	jal	ra,170d8 <dwarf::unit::get_section_offset() const>
   1df14:	b7f5                	c.j	1df00 <dwarf::value::as_reference() const+0x258>
   1df16:	8a4a                	c.mv	s4,s2
    die d(base_cu);
   1df18:	85d2                	c.mv	a1,s4
   1df1a:	00a8                	c.addi4spn	a0,sp,72
   1df1c:	b52fd0ef          	jal	ra,1b26e <dwarf::die::die(dwarf::unit const*)>
   1df20:	a019                	c.j	1df26 <dwarf::value::as_reference() const+0x27e>
    const compilation_unit *base_cu = nullptr;
   1df22:	4a01                	c.li	s4,0
   1df24:	bfd5                	c.j	1df18 <dwarf::value::as_reference() const+0x270>
    d.read(off - base_cu->get_section_offset());
   1df26:	8552                	c.mv	a0,s4
   1df28:	9b0f90ef          	jal	ra,170d8 <dwarf::unit::get_section_offset() const>
   1df2c:	40a985b3          	sub	a1,s3,a0
   1df30:	00a8                	c.addi4spn	a0,sp,72
   1df32:	b70fd0ef          	jal	ra,1b2a2 <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   1df36:	47a6                	c.lwsp	a5,72(sp)
   1df38:	c01c                	c.sw	a5,0(s0)
   1df3a:	67c6                	c.ldsp	a5,80(sp)
   1df3c:	e41c                	c.sd	a5,8(s0)
   1df3e:	67e6                	c.ldsp	a5,88(sp)
   1df40:	e81c                	c.sd	a5,16(s0)
   1df42:	7786                	c.ldsp	a5,96(sp)
   1df44:	ec1c                	c.sd	a5,24(s0)
   1df46:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1df4a:	05443823          	sd	s4,80(s0)
   1df4e:	05443c23          	sd	s4,88(s0)
   1df52:	05040793          	addi	a5,s0,80
   1df56:	f03c                	c.sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   1df58:	676a                	c.ldsp	a4,152(sp)
   1df5a:	10b4                	c.addi4spn	a3,sp,104
   1df5c:	04d70063          	beq	a4,a3,1df9c <dwarf::value::as_reference() const+0x2f4>
      base = o.base;
   1df60:	e838                	c.sd	a4,80(s0)
      end = o.end;
   1df62:	778a                	c.ldsp	a5,160(sp)
   1df64:	ec3c                	c.sd	a5,88(s0)
      cap = o.cap;
   1df66:	77aa                	c.ldsp	a5,168(sp)
   1df68:	f03c                	c.sd	a5,96(s0)
      o.base = (T *)o.buf;
   1df6a:	10bc                	c.addi4spn	a5,sp,104
   1df6c:	ed3e                	c.sdsp	a5,152(sp)
      o.end = o.base;
   1df6e:	f13e                	c.sdsp	a5,160(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   1df70:	093c                	c.addi4spn	a5,sp,152
   1df72:	f53e                	c.sdsp	a5,168(sp)
   1df74:	77ca                	c.ldsp	a5,176(sp)
   1df76:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1df78:	656a                	c.ldsp	a0,152(sp)
   1df7a:	778a                	c.ldsp	a5,160(sp)
   1df7c:	00f57763          	bgeu	a0,a5,1df8a <dwarf::value::as_reference() const+0x2e2>
   1df80:	87aa                	c.mv	a5,a0
   1df82:	07a1                	c.addi	a5,8
   1df84:	770a                	c.ldsp	a4,160(sp)
   1df86:	fee7eee3          	bltu	a5,a4,1df82 <dwarf::value::as_reference() const+0x2da>
    end = base;
   1df8a:	f12a                	c.sdsp	a0,160(sp)
    if ((char *)base != buf)
   1df8c:	10bc                	c.addi4spn	a5,sp,104
   1df8e:	2cf50f63          	beq	a0,a5,1e26c <dwarf::value::as_reference() const+0x5c4>
      delete[] (char *)base;
   1df92:	2c050d63          	beq	a0,zero,1e26c <dwarf::value::as_reference() const+0x5c4>
   1df96:	dcaf80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1df9a:	acc9                	c.j	1e26c <dwarf::value::as_reference() const+0x5c4>
  size_type size() const { return end - base; }
   1df9c:	798a                	c.ldsp	s3,160(sp)
   1df9e:	40d989b3          	sub	s3,s3,a3
   1dfa2:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1dfa6:	414787b3          	sub	a5,a5,s4
   1dfaa:	0537fc63          	bgeu	a5,s3,1e002 <dwarf::value::as_reference() const+0x35a>
   1dfae:	878d                	c.srai	a5,0x3
   1dfb0:	e391                	c.bnez	a5,1dfb4 <dwarf::value::as_reference() const+0x30c>
   1dfb2:	4785                	c.li	a5,1
    while (target < n)
   1dfb4:	0127f563          	bgeu	a5,s2,1dfbe <dwarf::value::as_reference() const+0x316>
      target <<= 1;
   1dfb8:	0786                	c.slli	a5,0x1
    while (target < n)
   1dfba:	ff27efe3          	bltu	a5,s2,1dfb8 <dwarf::value::as_reference() const+0x310>
    char *newbuf = new char[sizeof(T[target])];
   1dfbe:	00379493          	slli	s1,a5,0x3
   1dfc2:	8526                	c.mv	a0,s1
   1dfc4:	b1cf80ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1dfc8:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   1dfca:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1dfcc:	6c38                	c.ld	a4,88(s0)
   1dfce:	06e57663          	bgeu	a0,a4,1e03a <dwarf::value::as_reference() const+0x392>
    T *src = base, *dest = (T *)newbuf;
   1dfd2:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1dfd4:	07a1                	c.addi	a5,8
   1dfd6:	fee7efe3          	bltu	a5,a4,1dfd4 <dwarf::value::as_reference() const+0x32c>
   1dfda:	fff70a93          	addi	s5,a4,-1
   1dfde:	40aa8ab3          	sub	s5,s5,a0
   1dfe2:	ff8afa93          	andi	s5,s5,-8
   1dfe6:	0aa1                	c.addi	s5,8
   1dfe8:	9ada                	c.add	s5,s6
    if ((char *)base != buf)
   1dfea:	00aa0563          	beq	s4,a0,1dff4 <dwarf::value::as_reference() const+0x34c>
      delete[] (char *)base;
   1dfee:	c119                	c.beqz	a0,1dff4 <dwarf::value::as_reference() const+0x34c>
   1dff0:	d70f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1dff4:	05643823          	sd	s6,80(s0)
    end = dest;
   1dff8:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1dffc:	9b26                	c.add	s6,s1
   1dffe:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   1e002:	00090e63          	beq	s2,zero,1e01e <dwarf::value::as_reference() const+0x376>
   1e006:	4781                	c.li	a5,0
   1e008:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1e00c:	676a                	c.ldsp	a4,152(sp)
   1e00e:	9736                	c.add	a4,a3
   1e010:	6310                	c.ld	a2,0(a4)
   1e012:	6838                	c.ld	a4,80(s0)
   1e014:	9736                	c.add	a4,a3
   1e016:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1e018:	0785                	c.addi	a5,1
   1e01a:	fef917e3          	bne	s2,a5,1e008 <dwarf::value::as_reference() const+0x360>
    end = base + osize;
   1e01e:	683c                	c.ld	a5,80(s0)
   1e020:	97ce                	c.add	a5,s3
   1e022:	ec3c                	c.sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   1e024:	66ea                	c.ldsp	a3,152(sp)
   1e026:	778a                	c.ldsp	a5,160(sp)
   1e028:	00f6f763          	bgeu	a3,a5,1e036 <dwarf::value::as_reference() const+0x38e>
   1e02c:	87b6                	c.mv	a5,a3
   1e02e:	07a1                	c.addi	a5,8
   1e030:	770a                	c.ldsp	a4,160(sp)
   1e032:	fee7eee3          	bltu	a5,a4,1e02e <dwarf::value::as_reference() const+0x386>
    end = base;
   1e036:	f136                	c.sdsp	a3,160(sp)
  }
   1e038:	bf35                	c.j	1df74 <dwarf::value::as_reference() const+0x2cc>
    T *src = base, *dest = (T *)newbuf;
   1e03a:	8ada                	c.mv	s5,s6
   1e03c:	b77d                	c.j	1dfea <dwarf::value::as_reference() const+0x342>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e03e:	77b2                	c.ldsp	a5,296(sp)
   1e040:	6b98                	c.ld	a4,16(a5)
   1e042:	77f2                	c.ldsp	a5,312(sp)
   1e044:	40f70633          	sub	a2,a4,a5
   1e048:	469d                	c.li	a3,7
   1e04a:	00c6f463          	bgeu	a3,a2,1e052 <dwarf::value::as_reference() const+0x3aa>
   1e04e:	00e7e563          	bltu	a5,a4,1e058 <dwarf::value::as_reference() const+0x3b0>
      underflow();
   1e052:	1228                	c.addi4spn	a0,sp,296
   1e054:	be5fc0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e058:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1e05a:	77b2                	c.ldsp	a5,296(sp)
   1e05c:	4fdc                	c.lw	a5,28(a5)
   1e05e:	e795                	c.bnez	a5,1e08a <dwarf::value::as_reference() const+0x3e2>
   1e060:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1e062:	4a81                	c.li	s5,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e064:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1e068:	0006c703          	lbu	a4,0(a3)
   1e06c:	00f71733          	sll	a4,a4,a5
   1e070:	00eaeab3          	or	s5,s5,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1e074:	0685                	c.addi	a3,1
   1e076:	27a1                	c.addiw	a5,8
   1e078:	feb798e3          	bne	a5,a1,1e068 <dwarf::value::as_reference() const+0x3c0>
    pos += sizeof(T);
   1e07c:	0621                	c.addi	a2,8
   1e07e:	fe32                	c.sdsp	a2,312(sp)
      return cu->get_dwarf().get_type_unit(sig).type();
   1e080:	00093503          	ld	a0,0(s2)
   1e084:	850f90ef          	jal	ra,170d4 <dwarf::unit::get_dwarf() const>
   1e088:	a831                	c.j	1e0a4 <dwarf::value::as_reference() const+0x3fc>
   1e08a:	87b2                	c.mv	a5,a2
   1e08c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1e090:	4a81                	c.li	s5,0
        val = (val << 8) | (uint64_t)p[i];
   1e092:	0aa2                	c.slli	s5,0x8
   1e094:	0007c703          	lbu	a4,0(a5)
   1e098:	01576ab3          	or	s5,a4,s5
      for (unsigned i = 0; i < sizeof(T); i++)
   1e09c:	0785                	c.addi	a5,1
   1e09e:	fef69ae3          	bne	a3,a5,1e092 <dwarf::value::as_reference() const+0x3ea>
   1e0a2:	bfe9                	c.j	1e07c <dwarf::value::as_reference() const+0x3d4>
   1e0a4:	85d6                	c.mv	a1,s5
   1e0a6:	887fa0ef          	jal	ra,1892c <dwarf::dwarf::get_type_unit(unsigned long) const>
   1e0aa:	cf8fb0ef          	jal	ra,195a2 <dwarf::type_unit::type() const>
   1e0ae:	84aa                	c.mv	s1,a0
  die(const die &o) = default;
   1e0b0:	411c                	c.lw	a5,0(a0)
   1e0b2:	c01c                	c.sw	a5,0(s0)
   1e0b4:	651c                	c.ld	a5,8(a0)
   1e0b6:	e41c                	c.sd	a5,8(s0)
   1e0b8:	691c                	c.ld	a5,16(a0)
   1e0ba:	e81c                	c.sd	a5,16(s0)
   1e0bc:	6d1c                	c.ld	a5,24(a0)
   1e0be:	ec1c                	c.sd	a5,24(s0)
   1e0c0:	02040b13          	addi	s6,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1e0c4:	05643823          	sd	s6,80(s0)
   1e0c8:	05643c23          	sd	s6,88(s0)
   1e0cc:	05040793          	addi	a5,s0,80
   1e0d0:	f03c                	c.sd	a5,96(s0)
  size_type size() const { return end - base; }
   1e0d2:	05853983          	ld	s3,88(a0)
   1e0d6:	6938                	c.ld	a4,80(a0)
   1e0d8:	40e989b3          	sub	s3,s3,a4
   1e0dc:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1e0e0:	416787b3          	sub	a5,a5,s6
   1e0e4:	0537fc63          	bgeu	a5,s3,1e13c <dwarf::value::as_reference() const+0x494>
   1e0e8:	878d                	c.srai	a5,0x3
   1e0ea:	e391                	c.bnez	a5,1e0ee <dwarf::value::as_reference() const+0x446>
   1e0ec:	4785                	c.li	a5,1
    while (target < n)
   1e0ee:	0127f563          	bgeu	a5,s2,1e0f8 <dwarf::value::as_reference() const+0x450>
      target <<= 1;
   1e0f2:	0786                	c.slli	a5,0x1
    while (target < n)
   1e0f4:	ff27efe3          	bltu	a5,s2,1e0f2 <dwarf::value::as_reference() const+0x44a>
    char *newbuf = new char[sizeof(T[target])];
   1e0f8:	00379a13          	slli	s4,a5,0x3
   1e0fc:	8552                	c.mv	a0,s4
   1e0fe:	9e2f80ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1e102:	8baa                	c.mv	s7,a0
    T *src = base, *dest = (T *)newbuf;
   1e104:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1e106:	6c38                	c.ld	a4,88(s0)
   1e108:	04e57e63          	bgeu	a0,a4,1e164 <dwarf::value::as_reference() const+0x4bc>
    T *src = base, *dest = (T *)newbuf;
   1e10c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1e10e:	07a1                	c.addi	a5,8
   1e110:	fee7efe3          	bltu	a5,a4,1e10e <dwarf::value::as_reference() const+0x466>
   1e114:	fff70a93          	addi	s5,a4,-1
   1e118:	40aa8ab3          	sub	s5,s5,a0
   1e11c:	ff8afa93          	andi	s5,s5,-8
   1e120:	0aa1                	c.addi	s5,8
   1e122:	9ade                	c.add	s5,s7
    if ((char *)base != buf)
   1e124:	00ab0563          	beq	s6,a0,1e12e <dwarf::value::as_reference() const+0x486>
      delete[] (char *)base;
   1e128:	c119                	c.beqz	a0,1e12e <dwarf::value::as_reference() const+0x486>
   1e12a:	c36f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e12e:	05743823          	sd	s7,80(s0)
    end = dest;
   1e132:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1e136:	9bd2                	c.add	s7,s4
   1e138:	07743023          	sd	s7,96(s0)
    for (size_type i = 0; i < osize; i++)
   1e13c:	00090e63          	beq	s2,zero,1e158 <dwarf::value::as_reference() const+0x4b0>
   1e140:	4781                	c.li	a5,0
   1e142:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1e146:	68b8                	c.ld	a4,80(s1)
   1e148:	9736                	c.add	a4,a3
   1e14a:	6310                	c.ld	a2,0(a4)
   1e14c:	6838                	c.ld	a4,80(s0)
   1e14e:	9736                	c.add	a4,a3
   1e150:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1e152:	0785                	c.addi	a5,1
   1e154:	fef917e3          	bne	s2,a5,1e142 <dwarf::value::as_reference() const+0x49a>
    end = base + osize;
   1e158:	683c                	c.ld	a5,80(s0)
   1e15a:	97ce                	c.add	a5,s3
   1e15c:	ec3c                	c.sd	a5,88(s0)
   1e15e:	74bc                	c.ld	a5,104(s1)
   1e160:	f43c                	c.sd	a5,104(s0)
   1e162:	a229                	c.j	1e26c <dwarf::value::as_reference() const+0x5c4>
    T *src = base, *dest = (T *)newbuf;
   1e164:	8ade                	c.mv	s5,s7
   1e166:	bf7d                	c.j	1e124 <dwarf::value::as_reference() const+0x47c>
                              " as reference");
   1e168:	4541                	c.li	a0,16
   1e16a:	a66f80ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1e16e:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1e170:	00c92583          	lw	a1,12(s2)
   1e174:	0028                	c.addi4spn	a0,sp,8
   1e176:	388090ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1e17a:	0000f617          	auipc	a2,0xf
   1e17e:	5fe60613          	addi	a2,a2,1534 # 2d778 <std::piecewise_construct+0x1c8>
   1e182:	4581                	c.li	a1,0
   1e184:	0028                	c.addi4spn	a0,sp,8
   1e186:	9baf80ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e18a:	85aa                	c.mv	a1,a0
   1e18c:	1020                	c.addi4spn	s0,sp,40
   1e18e:	8522                	c.mv	a0,s0
   1e190:	a80f80ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1e194:	0000f597          	auipc	a1,0xf
   1e198:	67458593          	addi	a1,a1,1652 # 2d808 <std::piecewise_construct+0x258>
   1e19c:	8522                	c.mv	a0,s0
   1e19e:	da2f80ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1e1a2:	85aa                	c.mv	a1,a0
   1e1a4:	00a0                	c.addi4spn	s0,sp,72
   1e1a6:	8522                	c.mv	a0,s0
   1e1a8:	a68f80ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1e1ac:	85a2                	c.mv	a1,s0
   1e1ae:	8526                	c.mv	a0,s1
   1e1b0:	de0f80ef          	jal	ra,16790 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e1b4:	0001b797          	auipc	a5,0x1b
   1e1b8:	28c7b783          	ld	a5,652(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1e1bc:	07c1                	c.addi	a5,16
   1e1be:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1e1c0:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e1c2:	08bc                	c.addi4spn	a5,sp,88
   1e1c4:	00f50463          	beq	a0,a5,1e1cc <dwarf::value::as_reference() const+0x524>
   1e1c8:	ae8f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e1cc:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e1ce:	183c                	c.addi4spn	a5,sp,56
   1e1d0:	00f50463          	beq	a0,a5,1e1d8 <dwarf::value::as_reference() const+0x530>
   1e1d4:	adcf80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e1d8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1e1da:	083c                	c.addi4spn	a5,sp,24
   1e1dc:	00f50463          	beq	a0,a5,1e1e4 <dwarf::value::as_reference() const+0x53c>
   1e1e0:	ad0f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as reference");
   1e1e4:	0001b617          	auipc	a2,0x1b
   1e1e8:	3ec63603          	ld	a2,1004(a2) # 395d0 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a51a>
   1e1ec:	0001b597          	auipc	a1,0x1b
   1e1f0:	3a45b583          	ld	a1,932(a1) # 39590 <typeinfo for dwarf::value_type_mismatch@@Base+0xb70>
   1e1f4:	8526                	c.mv	a0,s1
   1e1f6:	c6af80ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1e1fa:	842a                	c.mv	s0,a0
   1e1fc:	a24d                	c.j	1e39e <dwarf::value::as_reference() const+0x6f6>
    return 0;
   1e1fe:	4481                	c.li	s1,0
   1e200:	ac55                	c.j	1e4b4 <dwarf::value::as_reference() const+0x80c>
  d.read(off);
   1e202:	85a6                	c.mv	a1,s1
   1e204:	1928                	c.addi4spn	a0,sp,184
   1e206:	89cfd0ef          	jal	ra,1b2a2 <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   1e20a:	57ea                	c.lwsp	a5,184(sp)
   1e20c:	c01c                	c.sw	a5,0(s0)
   1e20e:	678e                	c.ldsp	a5,192(sp)
   1e210:	e41c                	c.sd	a5,8(s0)
   1e212:	67ae                	c.ldsp	a5,200(sp)
   1e214:	e81c                	c.sd	a5,16(s0)
   1e216:	67ce                	c.ldsp	a5,208(sp)
   1e218:	ec1c                	c.sd	a5,24(s0)
   1e21a:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1e21e:	05443823          	sd	s4,80(s0)
   1e222:	05443c23          	sd	s4,88(s0)
   1e226:	05040793          	addi	a5,s0,80
   1e22a:	f03c                	c.sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   1e22c:	6732                	c.ldsp	a4,264(sp)
   1e22e:	09b4                	c.addi4spn	a3,sp,216
   1e230:	06d70a63          	beq	a4,a3,1e2a4 <dwarf::value::as_reference() const+0x5fc>
      base = o.base;
   1e234:	e838                	c.sd	a4,80(s0)
      end = o.end;
   1e236:	67d2                	c.ldsp	a5,272(sp)
   1e238:	ec3c                	c.sd	a5,88(s0)
      cap = o.cap;
   1e23a:	67f2                	c.ldsp	a5,280(sp)
   1e23c:	f03c                	c.sd	a5,96(s0)
      o.base = (T *)o.buf;
   1e23e:	09bc                	c.addi4spn	a5,sp,216
   1e240:	e63e                	c.sdsp	a5,264(sp)
      o.end = o.base;
   1e242:	ea3e                	c.sdsp	a5,272(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   1e244:	023c                	c.addi4spn	a5,sp,264
   1e246:	ee3e                	c.sdsp	a5,280(sp)
   1e248:	7792                	c.ldsp	a5,288(sp)
   1e24a:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1e24c:	6532                	c.ldsp	a0,264(sp)
   1e24e:	67d2                	c.ldsp	a5,272(sp)
   1e250:	00f57763          	bgeu	a0,a5,1e25e <dwarf::value::as_reference() const+0x5b6>
   1e254:	87aa                	c.mv	a5,a0
   1e256:	07a1                	c.addi	a5,8
   1e258:	6752                	c.ldsp	a4,272(sp)
   1e25a:	fee7eee3          	bltu	a5,a4,1e256 <dwarf::value::as_reference() const+0x5ae>
    end = base;
   1e25e:	ea2a                	c.sdsp	a0,272(sp)
    if ((char *)base != buf)
   1e260:	09bc                	c.addi4spn	a5,sp,216
   1e262:	00f50563          	beq	a0,a5,1e26c <dwarf::value::as_reference() const+0x5c4>
      delete[] (char *)base;
   1e266:	c119                	c.beqz	a0,1e26c <dwarf::value::as_reference() const+0x5c4>
   1e268:	af8f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1e26c:	74d2                	c.ldsp	s1,304(sp)
   1e26e:	cc99                	c.beqz	s1,1e28c <dwarf::value::as_reference() const+0x5e4>
    if (__is_single_threaded())
   1e270:	0001b797          	auipc	a5,0x1b
   1e274:	2087b783          	ld	a5,520(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e278:	0007c783          	lbu	a5,0(a5)
   1e27c:	c7e9                	c.beqz	a5,1e346 <dwarf::value::as_reference() const+0x69e>
    _Atomic_word __result = *__mem;
   1e27e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1e280:	fff5079b          	addiw	a5,a0,-1
   1e284:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e286:	4785                	c.li	a5,1
   1e288:	0cf50563          	beq	a0,a5,1e352 <dwarf::value::as_reference() const+0x6aa>
}
   1e28c:	8522                	c.mv	a0,s0
   1e28e:	60ba                	c.ldsp	ra,392(sp)
   1e290:	641a                	c.ldsp	s0,384(sp)
   1e292:	74f6                	c.ldsp	s1,376(sp)
   1e294:	7956                	c.ldsp	s2,368(sp)
   1e296:	79b6                	c.ldsp	s3,360(sp)
   1e298:	7a16                	c.ldsp	s4,352(sp)
   1e29a:	6af6                	c.ldsp	s5,344(sp)
   1e29c:	6b56                	c.ldsp	s6,336(sp)
   1e29e:	6bb6                	c.ldsp	s7,328(sp)
   1e2a0:	6159                	c.addi16sp	sp,400
   1e2a2:	8082                	c.jr	ra
  size_type size() const { return end - base; }
   1e2a4:	69d2                	c.ldsp	s3,272(sp)
   1e2a6:	40d989b3          	sub	s3,s3,a3
   1e2aa:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1e2ae:	414787b3          	sub	a5,a5,s4
   1e2b2:	0537fc63          	bgeu	a5,s3,1e30a <dwarf::value::as_reference() const+0x662>
   1e2b6:	878d                	c.srai	a5,0x3
   1e2b8:	e391                	c.bnez	a5,1e2bc <dwarf::value::as_reference() const+0x614>
   1e2ba:	4785                	c.li	a5,1
    while (target < n)
   1e2bc:	0127f563          	bgeu	a5,s2,1e2c6 <dwarf::value::as_reference() const+0x61e>
      target <<= 1;
   1e2c0:	0786                	c.slli	a5,0x1
    while (target < n)
   1e2c2:	ff27efe3          	bltu	a5,s2,1e2c0 <dwarf::value::as_reference() const+0x618>
    char *newbuf = new char[sizeof(T[target])];
   1e2c6:	00379493          	slli	s1,a5,0x3
   1e2ca:	8526                	c.mv	a0,s1
   1e2cc:	814f80ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1e2d0:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   1e2d2:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1e2d4:	6c38                	c.ld	a4,88(s0)
   1e2d6:	06e57663          	bgeu	a0,a4,1e342 <dwarf::value::as_reference() const+0x69a>
    T *src = base, *dest = (T *)newbuf;
   1e2da:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1e2dc:	07a1                	c.addi	a5,8
   1e2de:	fee7efe3          	bltu	a5,a4,1e2dc <dwarf::value::as_reference() const+0x634>
   1e2e2:	fff70a93          	addi	s5,a4,-1
   1e2e6:	40aa8ab3          	sub	s5,s5,a0
   1e2ea:	ff8afa93          	andi	s5,s5,-8
   1e2ee:	0aa1                	c.addi	s5,8
   1e2f0:	9ada                	c.add	s5,s6
    if ((char *)base != buf)
   1e2f2:	00aa0563          	beq	s4,a0,1e2fc <dwarf::value::as_reference() const+0x654>
      delete[] (char *)base;
   1e2f6:	c119                	c.beqz	a0,1e2fc <dwarf::value::as_reference() const+0x654>
   1e2f8:	a68f80ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e2fc:	05643823          	sd	s6,80(s0)
    end = dest;
   1e300:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1e304:	9b26                	c.add	s6,s1
   1e306:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   1e30a:	00090e63          	beq	s2,zero,1e326 <dwarf::value::as_reference() const+0x67e>
   1e30e:	4781                	c.li	a5,0
   1e310:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1e314:	6732                	c.ldsp	a4,264(sp)
   1e316:	9736                	c.add	a4,a3
   1e318:	6310                	c.ld	a2,0(a4)
   1e31a:	6838                	c.ld	a4,80(s0)
   1e31c:	9736                	c.add	a4,a3
   1e31e:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1e320:	0785                	c.addi	a5,1
   1e322:	fef917e3          	bne	s2,a5,1e310 <dwarf::value::as_reference() const+0x668>
    end = base + osize;
   1e326:	683c                	c.ld	a5,80(s0)
   1e328:	97ce                	c.add	a5,s3
   1e32a:	ec3c                	c.sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   1e32c:	66b2                	c.ldsp	a3,264(sp)
   1e32e:	67d2                	c.ldsp	a5,272(sp)
   1e330:	00f6f763          	bgeu	a3,a5,1e33e <dwarf::value::as_reference() const+0x696>
   1e334:	87b6                	c.mv	a5,a3
   1e336:	07a1                	c.addi	a5,8
   1e338:	6752                	c.ldsp	a4,272(sp)
   1e33a:	fee7eee3          	bltu	a5,a4,1e336 <dwarf::value::as_reference() const+0x68e>
    end = base;
   1e33e:	ea36                	c.sdsp	a3,272(sp)
  }
   1e340:	b721                	c.j	1e248 <dwarf::value::as_reference() const+0x5a0>
    T *src = base, *dest = (T *)newbuf;
   1e342:	8ada                	c.mv	s5,s6
   1e344:	b77d                	c.j	1e2f2 <dwarf::value::as_reference() const+0x64a>
      return __exchange_and_add(__mem, __val);
   1e346:	55fd                	c.li	a1,-1
   1e348:	03048513          	addi	a0,s1,48
   1e34c:	fe5f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e350:	bf1d                	c.j	1e286 <dwarf::value::as_reference() const+0x5de>
	_M_dispose();
   1e352:	609c                	c.ld	a5,0(s1)
   1e354:	6b9c                	c.ld	a5,16(a5)
   1e356:	8526                	c.mv	a0,s1
   1e358:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e35a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e35e:	0001b797          	auipc	a5,0x1b
   1e362:	11a7b783          	ld	a5,282(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e366:	0007c783          	lbu	a5,0(a5)
   1e36a:	cf89                	c.beqz	a5,1e384 <dwarf::value::as_reference() const+0x6dc>
    _Atomic_word __result = *__mem;
   1e36c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1e36e:	fff5079b          	addiw	a5,a0,-1
   1e372:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e374:	4785                	c.li	a5,1
   1e376:	f0f51be3          	bne	a0,a5,1e28c <dwarf::value::as_reference() const+0x5e4>
	    _M_destroy();
   1e37a:	609c                	c.ld	a5,0(s1)
   1e37c:	6f9c                	c.ld	a5,24(a5)
   1e37e:	8526                	c.mv	a0,s1
   1e380:	9782                	c.jalr	a5
   1e382:	b729                	c.j	1e28c <dwarf::value::as_reference() const+0x5e4>
      return __exchange_and_add(__mem, __val);
   1e384:	55fd                	c.li	a1,-1
   1e386:	03448513          	addi	a0,s1,52
   1e38a:	fa7f70ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e38e:	b7dd                	c.j	1e374 <dwarf::value::as_reference() const+0x6cc>
class die {
   1e390:	842a                	c.mv	s0,a0
   1e392:	10a8                	c.addi4spn	a0,sp,104
   1e394:	0001b317          	auipc	t1,0x1b
   1e398:	04c33303          	ld	t1,76(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1e39c:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1e39e:	7552                	c.ldsp	a0,304(sp)
   1e3a0:	c511                	c.beqz	a0,1e3ac <dwarf::value::as_reference() const+0x704>
	  _M_pi->_M_release();
   1e3a2:	0001b317          	auipc	t1,0x1b
   1e3a6:	01e33303          	ld	t1,30(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   1e3aa:	9302                	c.jalr	t1
   1e3ac:	8522                	c.mv	a0,s0
   1e3ae:	ae2f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
    } catch (std::out_of_range &e) {
   1e3b2:	4785                	c.li	a5,1
   1e3b4:	842a                	c.mv	s0,a0
   1e3b6:	fef594e3          	bne	a1,a5,1e39e <dwarf::value::as_reference() const+0x6f6>
   1e3ba:	ff7f70ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1e3be:	4541                	c.li	a0,16
   1e3c0:	810f80ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1e3c4:	84aa                	c.mv	s1,a0
   1e3c6:	85d6                	c.mv	a1,s5
   1e3c8:	1028                	c.addi4spn	a0,sp,40
   1e3ca:	0001b317          	auipc	t1,0x1b
   1e3ce:	f2633303          	ld	t1,-218(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1e3d2:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   1e3d4:	0000f617          	auipc	a2,0xf
   1e3d8:	44460613          	addi	a2,a2,1092 # 2d818 <std::piecewise_construct+0x268>
   1e3dc:	4581                	c.li	a1,0
   1e3de:	1028                	c.addi4spn	a0,sp,40
   1e3e0:	f61f70ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e3e4:	85aa                	c.mv	a1,a0
   1e3e6:	00a0                	c.addi4spn	s0,sp,72
   1e3e8:	8522                	c.mv	a0,s0
   1e3ea:	826f80ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1e3ee:	85a2                	c.mv	a1,s0
   1e3f0:	8526                	c.mv	a0,s1
   1e3f2:	94ef80ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e3f6:	0001b797          	auipc	a5,0x1b
   1e3fa:	15a7b783          	ld	a5,346(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   1e3fe:	07c1                	c.addi	a5,16
   1e400:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1e402:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e404:	08bc                	c.addi4spn	a5,sp,88
   1e406:	00f50463          	beq	a0,a5,1e40e <dwarf::value::as_reference() const+0x766>
   1e40a:	8a6f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e40e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e410:	183c                	c.addi4spn	a5,sp,56
   1e412:	00f50463          	beq	a0,a5,1e41a <dwarf::value::as_reference() const+0x772>
   1e416:	89af80ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1e41a:	0001b617          	auipc	a2,0x1b
   1e41e:	f5e63603          	ld	a2,-162(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1e422:	0001b597          	auipc	a1,0x1b
   1e426:	e865b583          	ld	a1,-378(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1e42a:	8526                	c.mv	a0,s1
   1e42c:	a34f80ef          	jal	ra,16660 <__cxa_throw@plt>
    }
   1e430:	842a                	c.mv	s0,a0
   1e432:	a00d                	c.j	1e454 <dwarf::value::as_reference() const+0x7ac>
      { return _M_dataplus._M_p; }
   1e434:	842a                	c.mv	s0,a0
   1e436:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e438:	08bc                	c.addi4spn	a5,sp,88
   1e43a:	00f50463          	beq	a0,a5,1e442 <dwarf::value::as_reference() const+0x79a>
   1e43e:	872f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e442:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e444:	183c                	c.addi4spn	a5,sp,56
   1e446:	00f50463          	beq	a0,a5,1e44e <dwarf::value::as_reference() const+0x7a6>
   1e44a:	866f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1e44e:	8526                	c.mv	a0,s1
   1e450:	820f80ef          	jal	ra,16470 <__cxa_free_exception@plt>
    }
   1e454:	9dcf80ef          	jal	ra,16630 <__cxa_end_catch@plt>
   1e458:	b799                	c.j	1e39e <dwarf::value::as_reference() const+0x6f6>
      { return _M_dataplus._M_p; }
   1e45a:	842a                	c.mv	s0,a0
   1e45c:	b7dd                	c.j	1e442 <dwarf::value::as_reference() const+0x79a>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1e45e:	842a                	c.mv	s0,a0
   1e460:	b7fd                	c.j	1e44e <dwarf::value::as_reference() const+0x7a6>
   1e462:	842a                	c.mv	s0,a0
   1e464:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e466:	08bc                	c.addi4spn	a5,sp,88
   1e468:	00f50463          	beq	a0,a5,1e470 <dwarf::value::as_reference() const+0x7c8>
   1e46c:	844f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e470:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e472:	183c                	c.addi4spn	a5,sp,56
   1e474:	00f50463          	beq	a0,a5,1e47c <dwarf::value::as_reference() const+0x7d4>
   1e478:	838f80ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e47c:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1e47e:	083c                	c.addi4spn	a5,sp,24
   1e480:	00f50463          	beq	a0,a5,1e488 <dwarf::value::as_reference() const+0x7e0>
   1e484:	82cf80ef          	jal	ra,164b0 <operator delete(void*)@plt>
                              " as reference");
   1e488:	8526                	c.mv	a0,s1
   1e48a:	fe7f70ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1e48e:	bf01                	c.j	1e39e <dwarf::value::as_reference() const+0x6f6>
      { return _M_dataplus._M_p; }
   1e490:	842a                	c.mv	s0,a0
   1e492:	bff9                	c.j	1e470 <dwarf::value::as_reference() const+0x7c8>
   1e494:	842a                	c.mv	s0,a0
   1e496:	b7dd                	c.j	1e47c <dwarf::value::as_reference() const+0x7d4>
   1e498:	842a                	c.mv	s0,a0
   1e49a:	b7fd                	c.j	1e488 <dwarf::value::as_reference() const+0x7e0>
class die {
   1e49c:	842a                	c.mv	s0,a0
   1e49e:	09a8                	c.addi4spn	a0,sp,216
   1e4a0:	0001b317          	auipc	t1,0x1b
   1e4a4:	f4033303          	ld	t1,-192(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1e4a8:	9302                	c.jalr	t1
   1e4aa:	bdd5                	c.j	1e39e <dwarf::value::as_reference() const+0x6f6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1e4ac:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   1e4b0:	0785                	c.addi	a5,1
   1e4b2:	fe3e                	c.sdsp	a5,312(sp)
  die d(cu);
   1e4b4:	00093583          	ld	a1,0(s2)
   1e4b8:	1928                	c.addi4spn	a0,sp,184
   1e4ba:	db5fc0ef          	jal	ra,1b26e <dwarf::die::die(dwarf::unit const*)>
   1e4be:	b391                	c.j	1e202 <dwarf::value::as_reference() const+0x55a>
  cursor cur(cu->data(), offset);
   1e4c0:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e4c4:	f64e                	c.sdsp	s3,296(sp)
      : _M_pi(__r._M_pi)
   1e4c6:	fa02                	c.sdsp	zero,304(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1e4c8:	0089b783          	ld	a5,8(s3)
   1e4cc:	97ba                	c.add	a5,a4
   1e4ce:	fe3e                	c.sdsp	a5,312(sp)
  switch (form) {
   1e4d0:	00892783          	lw	a5,8(s2)
   1e4d4:	37c1                	c.addiw	a5,-16
   1e4d6:	0007869b          	addiw	a3,a5,0
   1e4da:	4741                	c.li	a4,16
   1e4dc:	c8d766e3          	bltu	a4,a3,1e168 <dwarf::value::as_reference() const+0x4c0>
   1e4e0:	02079713          	slli	a4,a5,0x20
   1e4e4:	01e75793          	srli	a5,a4,0x1e
   1e4e8:	0000f717          	auipc	a4,0xf
   1e4ec:	52070713          	addi	a4,a4,1312 # 2da08 <std::piecewise_construct+0x458>
   1e4f0:	97ba                	c.add	a5,a4
   1e4f2:	439c                	c.lw	a5,0(a5)
   1e4f4:	97ba                	c.add	a5,a4
   1e4f6:	8782                	c.jr	a5

000000000001e4f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)>:

string to_string(const value &v) {
   1e4f8:	7169                	c.addi16sp	sp,-304
   1e4fa:	f606                	c.sdsp	ra,296(sp)
   1e4fc:	f222                	c.sdsp	s0,288(sp)
   1e4fe:	ee26                	c.sdsp	s1,280(sp)
   1e500:	ea4a                	c.sdsp	s2,272(sp)
   1e502:	e64e                	c.sdsp	s3,264(sp)
   1e504:	e252                	c.sdsp	s4,256(sp)
   1e506:	fdd6                	c.sdsp	s5,248(sp)
   1e508:	f9da                	c.sdsp	s6,240(sp)
   1e50a:	f5de                	c.sdsp	s7,232(sp)
   1e50c:	f1e2                	c.sdsp	s8,224(sp)
   1e50e:	ede6                	c.sdsp	s9,216(sp)
   1e510:	e9ea                	c.sdsp	s10,208(sp)
   1e512:	e5ee                	c.sdsp	s11,200(sp)
   1e514:	842a                	c.mv	s0,a0
   1e516:	852e                	c.mv	a0,a1
  type get_type() const { return typ; }
   1e518:	45cc                	c.lw	a1,12(a1)
  switch (v.get_type()) {
   1e51a:	4735                	c.li	a4,13
   1e51c:	26b760e3          	bltu	a4,a1,1ef7c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa84>
   1e520:	00259793          	slli	a5,a1,0x2
   1e524:	0000f717          	auipc	a4,0xf
   1e528:	52870713          	addi	a4,a4,1320 # 2da4c <std::piecewise_construct+0x49c>
   1e52c:	97ba                	c.add	a5,a4
   1e52e:	439c                	c.lw	a5,0(a5)
   1e530:	97ba                	c.add	a5,a4
   1e532:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e534:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e538:	e01c                	c.sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   1e53a:	4681                	c.li	a3,0
   1e53c:	0000f617          	auipc	a2,0xf
   1e540:	32060613          	addi	a2,a2,800 # 2d85c <std::piecewise_construct+0x2ac>
   1e544:	0000f597          	auipc	a1,0xf
   1e548:	30458593          	addi	a1,a1,772 # 2d848 <std::piecewise_construct+0x298>
   1e54c:	8522                	c.mv	a0,s0
   1e54e:	0001b317          	auipc	t1,0x1b
   1e552:	db233303          	ld	t1,-590(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   1e556:	9302                	c.jalr	t1
  }
  case value::type::string:
    return v.as_string();
  }
  return "<unexpected value type " + to_string(v.get_type()) + ">";
}
   1e558:	8522                	c.mv	a0,s0
   1e55a:	70b2                	c.ldsp	ra,296(sp)
   1e55c:	7412                	c.ldsp	s0,288(sp)
   1e55e:	64f2                	c.ldsp	s1,280(sp)
   1e560:	6952                	c.ldsp	s2,272(sp)
   1e562:	69b2                	c.ldsp	s3,264(sp)
   1e564:	6a12                	c.ldsp	s4,256(sp)
   1e566:	7aee                	c.ldsp	s5,248(sp)
   1e568:	7b4e                	c.ldsp	s6,240(sp)
   1e56a:	7bae                	c.ldsp	s7,232(sp)
   1e56c:	7c0e                	c.ldsp	s8,224(sp)
   1e56e:	6cee                	c.ldsp	s9,216(sp)
   1e570:	6d4e                	c.ldsp	s10,208(sp)
   1e572:	6dae                	c.ldsp	s11,200(sp)
   1e574:	6155                	c.addi16sp	sp,304
   1e576:	8082                	c.jr	ra
    return "0x" + to_hex(v.as_address());
   1e578:	80bfd0ef          	jal	ra,1bd82 <dwarf::value::as_address() const>
   1e57c:	85aa                	c.mv	a1,a0
   1e57e:	0884                	c.addi4spn	s1,sp,80
   1e580:	8526                	c.mv	a0,s1
   1e582:	0001b317          	auipc	t1,0x1b
   1e586:	d6e33303          	ld	t1,-658(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1e58a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1e58c:	4709                	c.li	a4,2
   1e58e:	00010697          	auipc	a3,0x10
   1e592:	22268693          	addi	a3,a3,546 # 2e7b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   1e596:	4601                	c.li	a2,0
   1e598:	4581                	c.li	a1,0
   1e59a:	8526                	c.mv	a0,s1
   1e59c:	864f80ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e5a0:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e5a2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e5a6:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e5a8:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e5aa:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1e5ae:	03278463          	beq	a5,s2,1e5d6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xde>
      { _M_dataplus._M_p = __p; }
   1e5b2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1e5b4:	689c                	c.ld	a5,16(s1)
   1e5b6:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1e5b8:	649c                	c.ld	a5,8(s1)
   1e5ba:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1e5bc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e5c0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e5c4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1e5c8:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e5ca:	109c                	c.addi4spn	a5,sp,96
   1e5cc:	f8f506e3          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1e5d0:	ee1f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1e5d4:	b751                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e5d6:	6490                	c.ld	a2,8(s1)
   1e5d8:	0605                	c.addi	a2,1
	if (__n == 0)
   1e5da:	de79                	c.beqz	a2,1e5b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e5dc:	85ca                	c.mv	a1,s2
   1e5de:	f73f70ef          	jal	ra,16550 <memcpy@plt>
   1e5e2:	bfd9                	c.j	1e5b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc0>
    const char *b = (const char *)v.as_block(&size);
   1e5e4:	080c                	c.addi4spn	a1,sp,16
   1e5e6:	9f7fd0ef          	jal	ra,1bfdc <dwarf::value::as_block(unsigned long*) const>
   1e5ea:	8a2a                	c.mv	s4,a0
    string res = ::to_string(size) + " byte block:";
   1e5ec:	64c2                	c.ldsp	s1,16(sp)
  to_string(unsigned long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
    string __str(__detail::__to_chars_len(__val), '\0');
   1e5ee:	45a9                	c.li	a1,10
   1e5f0:	8526                	c.mv	a0,s1
   1e5f2:	0001b317          	auipc	t1,0x1b
   1e5f6:	f2e33303          	ld	t1,-210(t1) # 39520 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a138>
   1e5fa:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   1e5fc:	109c                	c.addi4spn	a5,sp,96
   1e5fe:	e8be                	c.sdsp	a5,80(sp)
      { _M_construct(__n, __c); }
   1e600:	4601                	c.li	a2,0
   1e602:	02051593          	slli	a1,a0,0x20
   1e606:	9181                	c.srli	a1,0x20
   1e608:	0888                	c.addi4spn	a0,sp,80
   1e60a:	f07f70ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   1e60e:	8626                	c.mv	a2,s1
   1e610:	45e6                	c.lwsp	a1,88(sp)
   1e612:	6546                	c.ldsp	a0,80(sp)
   1e614:	0001b317          	auipc	t1,0x1b
   1e618:	dd433303          	ld	t1,-556(t1) # 393e8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x19fa0>
   1e61c:	9302                	c.jalr	t1
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e61e:	57fd                	c.li	a5,-1
   1e620:	8389                	c.srli	a5,0x2
   1e622:	6766                	c.ldsp	a4,88(sp)
   1e624:	8f99                	c.sub	a5,a4
   1e626:	472d                	c.li	a4,11
   1e628:	00f77b63          	bgeu	a4,a5,1e63e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x146>
	return _M_append(__s, __n);
   1e62c:	4631                	c.li	a2,12
   1e62e:	0000f597          	auipc	a1,0xf
   1e632:	24a58593          	addi	a1,a1,586 # 2d878 <std::piecewise_construct+0x2c8>
   1e636:	0888                	c.addi4spn	a0,sp,80
   1e638:	d39f70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1e63c:	a00d                	c.j	1e65e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x166>
	  __throw_length_error(__N(__s));
   1e63e:	0000f517          	auipc	a0,0xf
   1e642:	22250513          	addi	a0,a0,546 # 2d860 <std::piecewise_construct+0x2b0>
   1e646:	d9bf70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1e64a:	842a                	c.mv	s0,a0
   1e64c:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e64e:	109c                	c.addi4spn	a5,sp,96
   1e650:	00f50463          	beq	a0,a5,1e658 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x160>
   1e654:	e5df70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e658:	8522                	c.mv	a0,s0
   1e65a:	836f80ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1e65e:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e660:	009c                	c.addi4spn	a5,sp,64
   1e662:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1e664:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e666:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1e66a:	05278663          	beq	a5,s2,1e6b6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1be>
      { _M_dataplus._M_p = __p; }
   1e66e:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1e670:	691c                	c.ld	a5,16(a0)
   1e672:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1e674:	649c                	c.ld	a5,8(s1)
   1e676:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1e678:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e67c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e680:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1e684:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e686:	109c                	c.addi4spn	a5,sp,96
   1e688:	00f50463          	beq	a0,a5,1e690 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x198>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e68c:	e25f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
    for (size_t pos = 0; pos < size; ++pos) {
   1e690:	67c2                	c.ldsp	a5,16(sp)
   1e692:	14078363          	beq	a5,zero,1e7d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2e0>
   1e696:	4481                	c.li	s1,0
	return _M_is_local() ? size_type(_S_local_capacity)
   1e698:	04010b13          	addi	s6,sp,64
   1e69c:	4cbd                	c.li	s9,15
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   1e69e:	03010993          	addi	s3,sp,48
	: allocator_type(__a), _M_p(__dat) { }
   1e6a2:	05010b93          	addi	s7,sp,80
   1e6a6:	06010913          	addi	s2,sp,96
    pos--;
   1e6aa:	00810c13          	addi	s8,sp,8
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e6ae:	5afd                	c.li	s5,-1
   1e6b0:	002ada93          	srli	s5,s5,0x2
   1e6b4:	a04d                	c.j	1e756 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x25e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e6b6:	6510                	c.ld	a2,8(a0)
   1e6b8:	0605                	c.addi	a2,1
	if (__n == 0)
   1e6ba:	de4d                	c.beqz	a2,1e674 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x17c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e6bc:	85ca                	c.mv	a1,s2
   1e6be:	0088                	c.addi4spn	a0,sp,64
   1e6c0:	e91f70ef          	jal	ra,16550 <memcpy@plt>
   1e6c4:	bf45                	c.j	1e674 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x17c>
	return _M_is_local() ? size_type(_S_local_capacity)
   1e6c6:	87e6                	c.mv	a5,s9
   1e6c8:	a871                	c.j	1e764 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x26c>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   1e6ca:	4705                	c.li	a4,1
   1e6cc:	4681                	c.li	a3,0
   1e6ce:	4601                	c.li	a2,0
   1e6d0:	85ee                	c.mv	a1,s11
   1e6d2:	854e                	c.mv	a0,s3
   1e6d4:	ffdf70ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e6d8:	a841                	c.j	1e768 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x270>
	: allocator_type(__a), _M_p(__dat) { }
   1e6da:	e8ca                	c.sdsp	s2,80(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   1e6dc:	4681                	c.li	a3,0
   1e6de:	00011617          	auipc	a2,0x11
   1e6e2:	aeb60613          	addi	a2,a2,-1301 # 2f1c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   1e6e6:	00011597          	auipc	a1,0x11
   1e6ea:	ae258593          	addi	a1,a1,-1310 # 2f1c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   1e6ee:	855e                	c.mv	a0,s7
   1e6f0:	0001b317          	auipc	t1,0x1b
   1e6f4:	c1033303          	ld	t1,-1008(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   1e6f8:	9302                	c.jalr	t1
   1e6fa:	a021                	c.j	1e702 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x20a>
  *pos-- = '\0';
   1e6fc:	00910d13          	addi	s10,sp,9
   1e700:	a86d                	c.j	1e7ba <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2c2>
      { return _M_dataplus._M_p; }
   1e702:	65c6                	c.ldsp	a1,80(sp)
      { return _M_string_length; }
   1e704:	6666                	c.ldsp	a2,88(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e706:	77e2                	c.ldsp	a5,56(sp)
   1e708:	40fa87b3          	sub	a5,s5,a5
   1e70c:	00c7e663          	bltu	a5,a2,1e718 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x220>
	return _M_append(__s, __n);
   1e710:	854e                	c.mv	a0,s3
   1e712:	c5ff70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1e716:	a03d                	c.j	1e744 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x24c>
	  __throw_length_error(__N(__s));
   1e718:	0000f517          	auipc	a0,0xf
   1e71c:	14850513          	addi	a0,a0,328 # 2d860 <std::piecewise_construct+0x2b0>
   1e720:	cc1f70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1e724:	842a                	c.mv	s0,a0
   1e726:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e728:	109c                	c.addi4spn	a5,sp,96
   1e72a:	00f50463          	beq	a0,a5,1e732 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x23a>
   1e72e:	d83f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e732:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1e734:	009c                	c.addi4spn	a5,sp,64
   1e736:	00f50463          	beq	a0,a5,1e73e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x246>
   1e73a:	d77f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e73e:	8522                	c.mv	a0,s0
   1e740:	f51f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1e744:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e746:	01250463          	beq	a0,s2,1e74e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x256>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e74a:	d67f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1e74e:	0485                	c.addi	s1,1
   1e750:	67c2                	c.ldsp	a5,16(sp)
   1e752:	08f4f363          	bgeu	s1,a5,1e7d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2e0>
      { return _M_string_length; }
   1e756:	7de2                	c.ldsp	s11,56(sp)
	if (__size + 1 > this->capacity())
   1e758:	001d8d13          	addi	s10,s11,1
	return _M_is_local() ? size_type(_S_local_capacity)
   1e75c:	77c2                	c.ldsp	a5,48(sp)
   1e75e:	f76784e3          	beq	a5,s6,1e6c6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1ce>
   1e762:	6786                	c.ldsp	a5,64(sp)
	if (__size + 1 > this->capacity())
   1e764:	f7a7e3e3          	bltu	a5,s10,1e6ca <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1d2>
	__c1 = __c2;
   1e768:	75c2                	c.ldsp	a1,48(sp)
   1e76a:	95ee                	c.add	a1,s11
   1e76c:	02000793          	addi	a5,zero,32
   1e770:	00f58023          	sb	a5,0(a1)
      { _M_string_length = __length; }
   1e774:	fc6a                	c.sdsp	s10,56(sp)
   1e776:	77c2                	c.ldsp	a5,48(sp)
   1e778:	97ea                	c.add	a5,s10
   1e77a:	00078023          	sb	zero,0(a5)
      res += to_hex(b[pos]);
   1e77e:	009a07b3          	add	a5,s4,s1
   1e782:	0007c783          	lbu	a5,0(a5)
  if (v == 0)
   1e786:	dbb1                	c.beqz	a5,1e6da <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1e2>
  *pos-- = '\0';
   1e788:	00010523          	sb	zero,10(sp)
  while (v && pos >= buf) {
   1e78c:	00f7f713          	andi	a4,a5,15
    if (digit < 10)
   1e790:	4625                	c.li	a2,9
      *pos = '0' + digit;
   1e792:	03070693          	addi	a3,a4,48
    if (digit < 10)
   1e796:	00e67463          	bgeu	a2,a4,1e79e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2a6>
      *pos = 'a' + (digit - 10);
   1e79a:	05770693          	addi	a3,a4,87
   1e79e:	00d104a3          	sb	a3,9(sp)
    v >>= 4;
   1e7a2:	8391                	c.srli	a5,0x4
  while (v && pos >= buf) {
   1e7a4:	dfa1                	c.beqz	a5,1e6fc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x204>
    if (digit < 10)
   1e7a6:	46a5                	c.li	a3,9
      *pos = 'a' + (digit - 10);
   1e7a8:	05778713          	addi	a4,a5,87
    if (digit < 10)
   1e7ac:	00f6e463          	bltu	a3,a5,1e7b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2bc>
      *pos = '0' + digit;
   1e7b0:	03078713          	addi	a4,a5,48
   1e7b4:	00e10423          	sb	a4,8(sp)
    pos--;
   1e7b8:	8d62                	c.mv	s10,s8
	: allocator_type(__a), _M_p(__dat) { }
   1e7ba:	e8ca                	c.sdsp	s2,80(sp)
	return __builtin_strlen(__s);
   1e7bc:	856a                	c.mv	a0,s10
   1e7be:	c03f70ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1e7c2:	4681                	c.li	a3,0
   1e7c4:	00ad0633          	add	a2,s10,a0
   1e7c8:	85ea                	c.mv	a1,s10
   1e7ca:	855e                	c.mv	a0,s7
   1e7cc:	0001b317          	auipc	t1,0x1b
   1e7d0:	b3433303          	ld	t1,-1228(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   1e7d4:	9302                	c.jalr	t1
      }
   1e7d6:	b735                	c.j	1e702 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x20a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e7d8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e7dc:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e7de:	77c2                	c.ldsp	a5,48(sp)
	if (__str._M_is_local())
   1e7e0:	0098                	c.addi4spn	a4,sp,64
   1e7e2:	00e78863          	beq	a5,a4,1e7f2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2fa>
      { _M_dataplus._M_p = __p; }
   1e7e6:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1e7e8:	6786                	c.ldsp	a5,64(sp)
   1e7ea:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1e7ec:	77e2                	c.ldsp	a5,56(sp)
   1e7ee:	e41c                	c.sd	a5,8(s0)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e7f0:	b3a5                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e7f2:	7662                	c.ldsp	a2,56(sp)
   1e7f4:	0605                	c.addi	a2,1
	if (__n == 0)
   1e7f6:	da7d                	c.beqz	a2,1e7ec <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2f4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e7f8:	85ba                	c.mv	a1,a4
   1e7fa:	d57f70ef          	jal	ra,16550 <memcpy@plt>
   1e7fe:	b7fd                	c.j	1e7ec <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2f4>
    return "0x" + to_hex(v.as_uconstant());
   1e800:	b83fd0ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   1e804:	85aa                	c.mv	a1,a0
   1e806:	0884                	c.addi4spn	s1,sp,80
   1e808:	8526                	c.mv	a0,s1
   1e80a:	0001b317          	auipc	t1,0x1b
   1e80e:	ae633303          	ld	t1,-1306(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1e812:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1e814:	4709                	c.li	a4,2
   1e816:	00010697          	auipc	a3,0x10
   1e81a:	f9a68693          	addi	a3,a3,-102 # 2e7b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   1e81e:	4601                	c.li	a2,0
   1e820:	4581                	c.li	a1,0
   1e822:	8526                	c.mv	a0,s1
   1e824:	dddf70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e828:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e82a:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e82e:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e830:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e832:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1e836:	03278463          	beq	a5,s2,1e85e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x366>
      { _M_dataplus._M_p = __p; }
   1e83a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1e83c:	689c                	c.ld	a5,16(s1)
   1e83e:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1e840:	649c                	c.ld	a5,8(s1)
   1e842:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1e844:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e848:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e84c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1e850:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e852:	109c                	c.addi4spn	a5,sp,96
   1e854:	d0f502e3          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e858:	c59f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1e85c:	b9f5                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e85e:	6490                	c.ld	a2,8(s1)
   1e860:	0605                	c.addi	a2,1
	if (__n == 0)
   1e862:	de79                	c.beqz	a2,1e840 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x348>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e864:	85ca                	c.mv	a1,s2
   1e866:	cebf70ef          	jal	ra,16550 <memcpy@plt>
   1e86a:	bfd9                	c.j	1e840 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x348>
    return ::to_string(v.as_uconstant());
   1e86c:	b17fd0ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   1e870:	84aa                	c.mv	s1,a0
    string __str(__detail::__to_chars_len(__val), '\0');
   1e872:	45a9                	c.li	a1,10
   1e874:	0001b317          	auipc	t1,0x1b
   1e878:	cac33303          	ld	t1,-852(t1) # 39520 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a138>
   1e87c:	9302                	c.jalr	t1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e87e:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e882:	e01c                	c.sd	a5,0(s0)
      { _M_construct(__n, __c); }
   1e884:	4601                	c.li	a2,0
   1e886:	02051593          	slli	a1,a0,0x20
   1e88a:	9181                	c.srli	a1,0x20
   1e88c:	8522                	c.mv	a0,s0
   1e88e:	c83f70ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   1e892:	8626                	c.mv	a2,s1
   1e894:	440c                	c.lw	a1,8(s0)
   1e896:	6008                	c.ld	a0,0(s0)
   1e898:	0001b317          	auipc	t1,0x1b
   1e89c:	b5033303          	ld	t1,-1200(t1) # 393e8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x19fa0>
   1e8a0:	9302                	c.jalr	t1
    return __str;
   1e8a2:	b95d                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return ::to_string(v.as_sconstant());
   1e8a4:	ea3fd0ef          	jal	ra,1c746 <dwarf::value::as_sconstant() const>
    const bool __neg = __val < 0;
   1e8a8:	03f55913          	srli	s2,a0,0x3f
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
   1e8ac:	43f55793          	srai	a5,a0,0x3f
   1e8b0:	00a7c4b3          	xor	s1,a5,a0
   1e8b4:	8c9d                	c.sub	s1,a5
    const auto __len = __detail::__to_chars_len(__uval);
   1e8b6:	45a9                	c.li	a1,10
   1e8b8:	8526                	c.mv	a0,s1
   1e8ba:	0001b317          	auipc	t1,0x1b
   1e8be:	c6633303          	ld	t1,-922(t1) # 39520 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a138>
   1e8c2:	9302                	c.jalr	t1
   1e8c4:	0005099b          	addiw	s3,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e8c8:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e8cc:	e01c                	c.sd	a5,0(s0)
    string __str(__neg + __len, '-');
   1e8ce:	00a905bb          	addw	a1,s2,a0
      { _M_construct(__n, __c); }
   1e8d2:	02d00613          	addi	a2,zero,45
   1e8d6:	1582                	c.slli	a1,0x20
   1e8d8:	9181                	c.srli	a1,0x20
   1e8da:	8522                	c.mv	a0,s0
   1e8dc:	c35f70ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1e8e0:	6008                	c.ld	a0,0(s0)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   1e8e2:	8626                	c.mv	a2,s1
   1e8e4:	85ce                	c.mv	a1,s3
   1e8e6:	954a                	c.add	a0,s2
   1e8e8:	0001b317          	auipc	t1,0x1b
   1e8ec:	b0033303          	ld	t1,-1280(t1) # 393e8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x19fa0>
   1e8f0:	9302                	c.jalr	t1
    return __str;
   1e8f2:	b19d                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e8f4:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e8f8:	e01c                	c.sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   1e8fa:	4681                	c.li	a3,0
   1e8fc:	0000f617          	auipc	a2,0xf
   1e900:	f9560613          	addi	a2,a2,-107 # 2d891 <std::piecewise_construct+0x2e1>
   1e904:	0000f597          	auipc	a1,0xf
   1e908:	f8458593          	addi	a1,a1,-124 # 2d888 <std::piecewise_construct+0x2d8>
   1e90c:	8522                	c.mv	a0,s0
   1e90e:	0001b317          	auipc	t1,0x1b
   1e912:	9f233303          	ld	t1,-1550(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   1e916:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e918:	b181                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return v.as_flag() ? "true" : "false";
   1e91a:	d64fe0ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   1e91e:	0000f497          	auipc	s1,0xf
   1e922:	f2248493          	addi	s1,s1,-222 # 2d840 <std::piecewise_construct+0x290>
   1e926:	c509                	c.beqz	a0,1e930 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x438>
   1e928:	0000f497          	auipc	s1,0xf
   1e92c:	f1048493          	addi	s1,s1,-240 # 2d838 <std::piecewise_construct+0x288>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e930:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e934:	e01c                	c.sd	a5,0(s0)
	return __builtin_strlen(__s);
   1e936:	8526                	c.mv	a0,s1
   1e938:	a89f70ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1e93c:	4681                	c.li	a3,0
   1e93e:	00a48633          	add	a2,s1,a0
   1e942:	85a6                	c.mv	a1,s1
   1e944:	8522                	c.mv	a0,s0
   1e946:	0001b317          	auipc	t1,0x1b
   1e94a:	9ba33303          	ld	t1,-1606(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   1e94e:	9302                	c.jalr	t1
   1e950:	b121                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return "<line 0x" + to_hex(v.as_sec_offset()) + ">";
   1e952:	b79fe0ef          	jal	ra,1d4ca <dwarf::value::as_sec_offset() const>
   1e956:	85aa                	c.mv	a1,a0
   1e958:	1804                	c.addi4spn	s1,sp,48
   1e95a:	8526                	c.mv	a0,s1
   1e95c:	0001b317          	auipc	t1,0x1b
   1e960:	99433303          	ld	t1,-1644(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1e964:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1e966:	4721                	c.li	a4,8
   1e968:	0000f697          	auipc	a3,0xf
   1e96c:	f3068693          	addi	a3,a3,-208 # 2d898 <std::piecewise_construct+0x2e8>
   1e970:	4601                	c.li	a2,0
   1e972:	4581                	c.li	a1,0
   1e974:	8526                	c.mv	a0,s1
   1e976:	c8bf70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e97a:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e97c:	109c                	c.addi4spn	a5,sp,96
   1e97e:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1e980:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e982:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1e986:	03278b63          	beq	a5,s2,1e9bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4c4>
      { _M_dataplus._M_p = __p; }
   1e98a:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1e98c:	691c                	c.ld	a5,16(a0)
   1e98e:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1e990:	649c                	c.ld	a5,8(s1)
   1e992:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1e994:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e998:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e99c:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e9a0:	6766                	c.ldsp	a4,88(sp)
   1e9a2:	57fd                	c.li	a5,-1
   1e9a4:	8389                	c.srli	a5,0x2
   1e9a6:	02f70363          	beq	a4,a5,1e9cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4d4>
	return _M_append(__s, __n);
   1e9aa:	4605                	c.li	a2,1
   1e9ac:	0000f597          	auipc	a1,0xf
   1e9b0:	ee458593          	addi	a1,a1,-284 # 2d890 <std::piecewise_construct+0x2e0>
   1e9b4:	0888                	c.addi4spn	a0,sp,80
   1e9b6:	9bbf70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1e9ba:	a83d                	c.j	1e9f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x500>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e9bc:	6510                	c.ld	a2,8(a0)
   1e9be:	0605                	c.addi	a2,1
	if (__n == 0)
   1e9c0:	da61                	c.beqz	a2,1e990 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x498>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e9c2:	85ca                	c.mv	a1,s2
   1e9c4:	1088                	c.addi4spn	a0,sp,96
   1e9c6:	b8bf70ef          	jal	ra,16550 <memcpy@plt>
   1e9ca:	b7d9                	c.j	1e990 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x498>
	  __throw_length_error(__N(__s));
   1e9cc:	0000f517          	auipc	a0,0xf
   1e9d0:	e9450513          	addi	a0,a0,-364 # 2d860 <std::piecewise_construct+0x2b0>
   1e9d4:	a0df70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1e9d8:	842a                	c.mv	s0,a0
   1e9da:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e9dc:	109c                	c.addi4spn	a5,sp,96
   1e9de:	00f50463          	beq	a0,a5,1e9e6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4ee>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e9e2:	acff70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e9e6:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1e9e8:	009c                	c.addi4spn	a5,sp,64
   1e9ea:	00f50463          	beq	a0,a5,1e9f2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4fa>
   1e9ee:	ac3f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e9f2:	8522                	c.mv	a0,s0
   1e9f4:	c9df70ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1e9f8:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e9fa:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e9fe:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ea00:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ea02:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ea06:	03278a63          	beq	a5,s2,1ea3a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x542>
      { _M_dataplus._M_p = __p; }
   1ea0a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ea0c:	689c                	c.ld	a5,16(s1)
   1ea0e:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ea10:	649c                	c.ld	a5,8(s1)
   1ea12:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ea14:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ea18:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ea1c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ea20:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ea22:	109c                	c.addi4spn	a5,sp,96
   1ea24:	00f50463          	beq	a0,a5,1ea2c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x534>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ea28:	a89f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ea2c:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ea2e:	009c                	c.addi4spn	a5,sp,64
   1ea30:	b2f504e3          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ea34:	a7df70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ea38:	b605                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ea3a:	6490                	c.ld	a2,8(s1)
   1ea3c:	0605                	c.addi	a2,1
	if (__n == 0)
   1ea3e:	da69                	c.beqz	a2,1ea10 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x518>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ea40:	85ca                	c.mv	a1,s2
   1ea42:	b0ff70ef          	jal	ra,16550 <memcpy@plt>
   1ea46:	b7e9                	c.j	1ea10 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x518>
    return "<loclist 0x" + to_hex(v.as_sec_offset()) + ">";
   1ea48:	a83fe0ef          	jal	ra,1d4ca <dwarf::value::as_sec_offset() const>
   1ea4c:	85aa                	c.mv	a1,a0
   1ea4e:	1804                	c.addi4spn	s1,sp,48
   1ea50:	8526                	c.mv	a0,s1
   1ea52:	0001b317          	auipc	t1,0x1b
   1ea56:	89e33303          	ld	t1,-1890(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1ea5a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ea5c:	472d                	c.li	a4,11
   1ea5e:	0000f697          	auipc	a3,0xf
   1ea62:	e4a68693          	addi	a3,a3,-438 # 2d8a8 <std::piecewise_construct+0x2f8>
   1ea66:	4601                	c.li	a2,0
   1ea68:	4581                	c.li	a1,0
   1ea6a:	8526                	c.mv	a0,s1
   1ea6c:	b95f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ea70:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ea72:	109c                	c.addi4spn	a5,sp,96
   1ea74:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1ea76:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ea78:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1ea7c:	03278b63          	beq	a5,s2,1eab2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5ba>
      { _M_dataplus._M_p = __p; }
   1ea80:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1ea82:	691c                	c.ld	a5,16(a0)
   1ea84:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1ea86:	649c                	c.ld	a5,8(s1)
   1ea88:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1ea8a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ea8e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ea92:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1ea96:	6766                	c.ldsp	a4,88(sp)
   1ea98:	57fd                	c.li	a5,-1
   1ea9a:	8389                	c.srli	a5,0x2
   1ea9c:	02f70363          	beq	a4,a5,1eac2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5ca>
	return _M_append(__s, __n);
   1eaa0:	4605                	c.li	a2,1
   1eaa2:	0000f597          	auipc	a1,0xf
   1eaa6:	dee58593          	addi	a1,a1,-530 # 2d890 <std::piecewise_construct+0x2e0>
   1eaaa:	0888                	c.addi4spn	a0,sp,80
   1eaac:	8c5f70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1eab0:	a83d                	c.j	1eaee <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5f6>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eab2:	6510                	c.ld	a2,8(a0)
   1eab4:	0605                	c.addi	a2,1
	if (__n == 0)
   1eab6:	da61                	c.beqz	a2,1ea86 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x58e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eab8:	85ca                	c.mv	a1,s2
   1eaba:	1088                	c.addi4spn	a0,sp,96
   1eabc:	a95f70ef          	jal	ra,16550 <memcpy@plt>
   1eac0:	b7d9                	c.j	1ea86 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x58e>
	  __throw_length_error(__N(__s));
   1eac2:	0000f517          	auipc	a0,0xf
   1eac6:	d9e50513          	addi	a0,a0,-610 # 2d860 <std::piecewise_construct+0x2b0>
   1eaca:	917f70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1eace:	842a                	c.mv	s0,a0
   1ead0:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ead2:	109c                	c.addi4spn	a5,sp,96
   1ead4:	00f50463          	beq	a0,a5,1eadc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5e4>
   1ead8:	9d9f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eadc:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1eade:	009c                	c.addi4spn	a5,sp,64
   1eae0:	00f50463          	beq	a0,a5,1eae8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5f0>
   1eae4:	9cdf70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1eae8:	8522                	c.mv	a0,s0
   1eaea:	ba7f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1eaee:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1eaf0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1eaf4:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1eaf6:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1eaf8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1eafc:	03278a63          	beq	a5,s2,1eb30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x638>
      { _M_dataplus._M_p = __p; }
   1eb00:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1eb02:	689c                	c.ld	a5,16(s1)
   1eb04:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1eb06:	649c                	c.ld	a5,8(s1)
   1eb08:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1eb0a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eb0e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eb12:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1eb16:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1eb18:	109c                	c.addi4spn	a5,sp,96
   1eb1a:	00f50463          	beq	a0,a5,1eb22 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x62a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1eb1e:	993f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eb22:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1eb24:	009c                	c.addi4spn	a5,sp,64
   1eb26:	a2f509e3          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1eb2a:	987f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1eb2e:	b42d                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eb30:	6490                	c.ld	a2,8(s1)
   1eb32:	0605                	c.addi	a2,1
	if (__n == 0)
   1eb34:	da69                	c.beqz	a2,1eb06 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eb36:	85ca                	c.mv	a1,s2
   1eb38:	a19f70ef          	jal	ra,16550 <memcpy@plt>
   1eb3c:	b7e9                	c.j	1eb06 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60e>
    return "<mac 0x" + to_hex(v.as_sec_offset()) + ">";
   1eb3e:	98dfe0ef          	jal	ra,1d4ca <dwarf::value::as_sec_offset() const>
   1eb42:	85aa                	c.mv	a1,a0
   1eb44:	1804                	c.addi4spn	s1,sp,48
   1eb46:	8526                	c.mv	a0,s1
   1eb48:	0001a317          	auipc	t1,0x1a
   1eb4c:	7a833303          	ld	t1,1960(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1eb50:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1eb52:	471d                	c.li	a4,7
   1eb54:	0000f697          	auipc	a3,0xf
   1eb58:	d6468693          	addi	a3,a3,-668 # 2d8b8 <std::piecewise_construct+0x308>
   1eb5c:	4601                	c.li	a2,0
   1eb5e:	4581                	c.li	a1,0
   1eb60:	8526                	c.mv	a0,s1
   1eb62:	a9ff70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1eb66:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1eb68:	109c                	c.addi4spn	a5,sp,96
   1eb6a:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1eb6c:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1eb6e:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1eb72:	03278b63          	beq	a5,s2,1eba8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6b0>
      { _M_dataplus._M_p = __p; }
   1eb76:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1eb78:	691c                	c.ld	a5,16(a0)
   1eb7a:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1eb7c:	649c                	c.ld	a5,8(s1)
   1eb7e:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1eb80:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eb84:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eb88:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1eb8c:	6766                	c.ldsp	a4,88(sp)
   1eb8e:	57fd                	c.li	a5,-1
   1eb90:	8389                	c.srli	a5,0x2
   1eb92:	02f70363          	beq	a4,a5,1ebb8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6c0>
	return _M_append(__s, __n);
   1eb96:	4605                	c.li	a2,1
   1eb98:	0000f597          	auipc	a1,0xf
   1eb9c:	cf858593          	addi	a1,a1,-776 # 2d890 <std::piecewise_construct+0x2e0>
   1eba0:	0888                	c.addi4spn	a0,sp,80
   1eba2:	fcef70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1eba6:	a83d                	c.j	1ebe4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6ec>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eba8:	6510                	c.ld	a2,8(a0)
   1ebaa:	0605                	c.addi	a2,1
	if (__n == 0)
   1ebac:	da61                	c.beqz	a2,1eb7c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x684>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ebae:	85ca                	c.mv	a1,s2
   1ebb0:	1088                	c.addi4spn	a0,sp,96
   1ebb2:	99ff70ef          	jal	ra,16550 <memcpy@plt>
   1ebb6:	b7d9                	c.j	1eb7c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x684>
	  __throw_length_error(__N(__s));
   1ebb8:	0000f517          	auipc	a0,0xf
   1ebbc:	ca850513          	addi	a0,a0,-856 # 2d860 <std::piecewise_construct+0x2b0>
   1ebc0:	821f70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1ebc4:	842a                	c.mv	s0,a0
   1ebc6:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ebc8:	109c                	c.addi4spn	a5,sp,96
   1ebca:	00f50463          	beq	a0,a5,1ebd2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6da>
   1ebce:	8e3f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ebd2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ebd4:	009c                	c.addi4spn	a5,sp,64
   1ebd6:	00f50463          	beq	a0,a5,1ebde <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6e6>
   1ebda:	8d7f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1ebde:	8522                	c.mv	a0,s0
   1ebe0:	ab1f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1ebe4:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ebe6:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ebea:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ebec:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ebee:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ebf2:	03278a63          	beq	a5,s2,1ec26 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x72e>
      { _M_dataplus._M_p = __p; }
   1ebf6:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ebf8:	689c                	c.ld	a5,16(s1)
   1ebfa:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ebfc:	649c                	c.ld	a5,8(s1)
   1ebfe:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ec00:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ec04:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ec08:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ec0c:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ec0e:	109c                	c.addi4spn	a5,sp,96
   1ec10:	00f50463          	beq	a0,a5,1ec18 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x720>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ec14:	89df70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ec18:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ec1a:	009c                	c.addi4spn	a5,sp,64
   1ec1c:	92f50ee3          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ec20:	891f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ec24:	ba15                	c.j	1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ec26:	6490                	c.ld	a2,8(s1)
   1ec28:	0605                	c.addi	a2,1
	if (__n == 0)
   1ec2a:	da69                	c.beqz	a2,1ebfc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x704>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ec2c:	85ca                	c.mv	a1,s2
   1ec2e:	923f70ef          	jal	ra,16550 <memcpy@plt>
   1ec32:	b7e9                	c.j	1ebfc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x704>
    return "<rangelist 0x" + to_hex(v.as_sec_offset()) + ">";
   1ec34:	897fe0ef          	jal	ra,1d4ca <dwarf::value::as_sec_offset() const>
   1ec38:	85aa                	c.mv	a1,a0
   1ec3a:	1804                	c.addi4spn	s1,sp,48
   1ec3c:	8526                	c.mv	a0,s1
   1ec3e:	0001a317          	auipc	t1,0x1a
   1ec42:	6b233303          	ld	t1,1714(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1ec46:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ec48:	4735                	c.li	a4,13
   1ec4a:	0000f697          	auipc	a3,0xf
   1ec4e:	c7668693          	addi	a3,a3,-906 # 2d8c0 <std::piecewise_construct+0x310>
   1ec52:	4601                	c.li	a2,0
   1ec54:	4581                	c.li	a1,0
   1ec56:	8526                	c.mv	a0,s1
   1ec58:	9a9f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ec5c:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ec5e:	109c                	c.addi4spn	a5,sp,96
   1ec60:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1ec62:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ec64:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1ec68:	03278b63          	beq	a5,s2,1ec9e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7a6>
      { _M_dataplus._M_p = __p; }
   1ec6c:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1ec6e:	691c                	c.ld	a5,16(a0)
   1ec70:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1ec72:	649c                	c.ld	a5,8(s1)
   1ec74:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1ec76:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ec7a:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ec7e:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1ec82:	6766                	c.ldsp	a4,88(sp)
   1ec84:	57fd                	c.li	a5,-1
   1ec86:	8389                	c.srli	a5,0x2
   1ec88:	02f70363          	beq	a4,a5,1ecae <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7b6>
	return _M_append(__s, __n);
   1ec8c:	4605                	c.li	a2,1
   1ec8e:	0000f597          	auipc	a1,0xf
   1ec92:	c0258593          	addi	a1,a1,-1022 # 2d890 <std::piecewise_construct+0x2e0>
   1ec96:	0888                	c.addi4spn	a0,sp,80
   1ec98:	ed8f70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1ec9c:	a83d                	c.j	1ecda <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7e2>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ec9e:	6510                	c.ld	a2,8(a0)
   1eca0:	0605                	c.addi	a2,1
	if (__n == 0)
   1eca2:	da61                	c.beqz	a2,1ec72 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x77a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eca4:	85ca                	c.mv	a1,s2
   1eca6:	1088                	c.addi4spn	a0,sp,96
   1eca8:	8a9f70ef          	jal	ra,16550 <memcpy@plt>
   1ecac:	b7d9                	c.j	1ec72 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x77a>
	  __throw_length_error(__N(__s));
   1ecae:	0000f517          	auipc	a0,0xf
   1ecb2:	bb250513          	addi	a0,a0,-1102 # 2d860 <std::piecewise_construct+0x2b0>
   1ecb6:	f2af70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1ecba:	842a                	c.mv	s0,a0
   1ecbc:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ecbe:	109c                	c.addi4spn	a5,sp,96
   1ecc0:	00f50463          	beq	a0,a5,1ecc8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7d0>
   1ecc4:	fecf70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ecc8:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ecca:	009c                	c.addi4spn	a5,sp,64
   1eccc:	00f50463          	beq	a0,a5,1ecd4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7dc>
   1ecd0:	fe0f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1ecd4:	8522                	c.mv	a0,s0
   1ecd6:	9bbf70ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1ecda:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ecdc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ece0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ece2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ece4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ece8:	03278b63          	beq	a5,s2,1ed1e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x826>
      { _M_dataplus._M_p = __p; }
   1ecec:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ecee:	689c                	c.ld	a5,16(s1)
   1ecf0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ecf2:	649c                	c.ld	a5,8(s1)
   1ecf4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ecf6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ecfa:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ecfe:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ed02:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ed04:	109c                	c.addi4spn	a5,sp,96
   1ed06:	00f50463          	beq	a0,a5,1ed0e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x816>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ed0a:	fa6f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ed0e:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ed10:	009c                	c.addi4spn	a5,sp,64
   1ed12:	84f503e3          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ed16:	f9af70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ed1a:	83fff06f          	jal	zero,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ed1e:	6490                	c.ld	a2,8(s1)
   1ed20:	0605                	c.addi	a2,1
	if (__n == 0)
   1ed22:	da61                	c.beqz	a2,1ecf2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ed24:	85ca                	c.mv	a1,s2
   1ed26:	82bf70ef          	jal	ra,16550 <memcpy@plt>
   1ed2a:	b7e1                	c.j	1ecf2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fa>
    die d = v.as_reference();
   1ed2c:	85aa                	c.mv	a1,a0
   1ed2e:	0884                	c.addi4spn	s1,sp,80
   1ed30:	8526                	c.mv	a0,s1
   1ed32:	f77fe0ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
    auto tu = dynamic_cast<const type_unit *>(&d.get_unit());
   1ed36:	8526                	c.mv	a0,s1
   1ed38:	d4cfc0ef          	jal	ra,1b284 <dwarf::die::get_unit() const>
   1ed3c:	12050063          	beq	a0,zero,1ee5c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x964>
   1ed40:	4681                	c.li	a3,0
   1ed42:	0001b617          	auipc	a2,0x1b
   1ed46:	85e63603          	ld	a2,-1954(a2) # 395a0 <typeinfo for dwarf::type_unit@@Base+0xcd0>
   1ed4a:	0001a597          	auipc	a1,0x1a
   1ed4e:	54e5b583          	ld	a1,1358(a1) # 39298 <typeinfo for dwarf::unit@@Base+0xc1d0>
   1ed52:	faef70ef          	jal	ra,16500 <__dynamic_cast@plt>
    if (tu)
   1ed56:	10050363          	beq	a0,zero,1ee5c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x964>
      return "<.debug_types+0x" + to_hex(d.get_section_offset()) + ">";
   1ed5a:	8526                	c.mv	a0,s1
   1ed5c:	d2cfc0ef          	jal	ra,1b288 <dwarf::die::get_section_offset() const>
   1ed60:	85aa                	c.mv	a1,a0
   1ed62:	0808                	c.addi4spn	a0,sp,16
   1ed64:	0001a317          	auipc	t1,0x1a
   1ed68:	58c33303          	ld	t1,1420(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1ed6c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ed6e:	4741                	c.li	a4,16
   1ed70:	0000f697          	auipc	a3,0xf
   1ed74:	b6068693          	addi	a3,a3,-1184 # 2d8d0 <std::piecewise_construct+0x320>
   1ed78:	4601                	c.li	a2,0
   1ed7a:	4581                	c.li	a1,0
   1ed7c:	0808                	c.addi4spn	a0,sp,16
   1ed7e:	883f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ed82:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ed84:	009c                	c.addi4spn	a5,sp,64
   1ed86:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1ed88:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ed8a:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1ed8e:	03278b63          	beq	a5,s2,1edc4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8cc>
      { _M_dataplus._M_p = __p; }
   1ed92:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1ed94:	691c                	c.ld	a5,16(a0)
   1ed96:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1ed98:	649c                	c.ld	a5,8(s1)
   1ed9a:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1ed9c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eda0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eda4:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1eda8:	7762                	c.ldsp	a4,56(sp)
   1edaa:	57fd                	c.li	a5,-1
   1edac:	8389                	c.srli	a5,0x2
   1edae:	02f70363          	beq	a4,a5,1edd4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8dc>
	return _M_append(__s, __n);
   1edb2:	4605                	c.li	a2,1
   1edb4:	0000f597          	auipc	a1,0xf
   1edb8:	adc58593          	addi	a1,a1,-1316 # 2d890 <std::piecewise_construct+0x2e0>
   1edbc:	1808                	c.addi4spn	a0,sp,48
   1edbe:	db2f70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1edc2:	a0a9                	c.j	1ee0c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x914>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1edc4:	6510                	c.ld	a2,8(a0)
   1edc6:	0605                	c.addi	a2,1
	if (__n == 0)
   1edc8:	da61                	c.beqz	a2,1ed98 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8a0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1edca:	85ca                	c.mv	a1,s2
   1edcc:	0088                	c.addi4spn	a0,sp,64
   1edce:	f82f70ef          	jal	ra,16550 <memcpy@plt>
   1edd2:	b7d9                	c.j	1ed98 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8a0>
	  __throw_length_error(__N(__s));
   1edd4:	0000f517          	auipc	a0,0xf
   1edd8:	a8c50513          	addi	a0,a0,-1396 # 2d860 <std::piecewise_construct+0x2b0>
   1eddc:	e04f70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1ede0:	842a                	c.mv	s0,a0
   1ede2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ede4:	009c                	c.addi4spn	a5,sp,64
   1ede6:	00f50463          	beq	a0,a5,1edee <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8f6>
   1edea:	ec6f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1edee:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1edf0:	101c                	c.addi4spn	a5,sp,32
   1edf2:	00f50463          	beq	a0,a5,1edfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1edf6:	ebaf70ef          	jal	ra,164b0 <operator delete(void*)@plt>
class die {
   1edfa:	1888                	c.addi4spn	a0,sp,112
   1edfc:	0001a317          	auipc	t1,0x1a
   1ee00:	5e433303          	ld	t1,1508(t1) # 393e0 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x224a0>
   1ee04:	9302                	c.jalr	t1
   1ee06:	8522                	c.mv	a0,s0
   1ee08:	889f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1ee0c:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ee0e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ee12:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ee14:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ee16:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ee1a:	03278a63          	beq	a5,s2,1ee4e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x956>
      { _M_dataplus._M_p = __p; }
   1ee1e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ee20:	689c                	c.ld	a5,16(s1)
   1ee22:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ee24:	649c                	c.ld	a5,8(s1)
   1ee26:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ee28:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ee2c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ee30:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ee34:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ee36:	009c                	c.addi4spn	a5,sp,64
   1ee38:	00f50463          	beq	a0,a5,1ee40 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x948>
   1ee3c:	e74f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ee40:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1ee42:	101c                	c.addi4spn	a5,sp,32
   1ee44:	0ef50d63          	beq	a0,a5,1ef3e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
   1ee48:	e68f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ee4c:	a8cd                	c.j	1ef3e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ee4e:	6490                	c.ld	a2,8(s1)
   1ee50:	0605                	c.addi	a2,1
	if (__n == 0)
   1ee52:	da69                	c.beqz	a2,1ee24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x92c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ee54:	85ca                	c.mv	a1,s2
   1ee56:	efaf70ef          	jal	ra,16550 <memcpy@plt>
   1ee5a:	b7e9                	c.j	1ee24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x92c>
    return "<0x" + to_hex(d.get_section_offset()) + ">";
   1ee5c:	0888                	c.addi4spn	a0,sp,80
   1ee5e:	c2afc0ef          	jal	ra,1b288 <dwarf::die::get_section_offset() const>
   1ee62:	85aa                	c.mv	a1,a0
   1ee64:	0808                	c.addi4spn	a0,sp,16
   1ee66:	0001a317          	auipc	t1,0x1a
   1ee6a:	48a33303          	ld	t1,1162(t1) # 392f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f48a>
   1ee6e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ee70:	470d                	c.li	a4,3
   1ee72:	0000f697          	auipc	a3,0xf
   1ee76:	a7668693          	addi	a3,a3,-1418 # 2d8e8 <std::piecewise_construct+0x338>
   1ee7a:	4601                	c.li	a2,0
   1ee7c:	4581                	c.li	a1,0
   1ee7e:	0808                	c.addi4spn	a0,sp,16
   1ee80:	f80f70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ee84:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ee86:	009c                	c.addi4spn	a5,sp,64
   1ee88:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1ee8a:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ee8c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1ee90:	03278b63          	beq	a5,s2,1eec6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9ce>
      { _M_dataplus._M_p = __p; }
   1ee94:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1ee96:	691c                	c.ld	a5,16(a0)
   1ee98:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1ee9a:	649c                	c.ld	a5,8(s1)
   1ee9c:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1ee9e:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eea2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eea6:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1eeaa:	7762                	c.ldsp	a4,56(sp)
   1eeac:	57fd                	c.li	a5,-1
   1eeae:	8389                	c.srli	a5,0x2
   1eeb0:	02f70363          	beq	a4,a5,1eed6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9de>
	return _M_append(__s, __n);
   1eeb4:	4605                	c.li	a2,1
   1eeb6:	0000f597          	auipc	a1,0xf
   1eeba:	9da58593          	addi	a1,a1,-1574 # 2d890 <std::piecewise_construct+0x2e0>
   1eebe:	1808                	c.addi4spn	a0,sp,48
   1eec0:	cb0f70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1eec4:	a82d                	c.j	1eefe <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa06>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eec6:	6510                	c.ld	a2,8(a0)
   1eec8:	0605                	c.addi	a2,1
	if (__n == 0)
   1eeca:	da61                	c.beqz	a2,1ee9a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9a2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eecc:	85ca                	c.mv	a1,s2
   1eece:	0088                	c.addi4spn	a0,sp,64
   1eed0:	e80f70ef          	jal	ra,16550 <memcpy@plt>
   1eed4:	b7d9                	c.j	1ee9a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9a2>
	  __throw_length_error(__N(__s));
   1eed6:	0000f517          	auipc	a0,0xf
   1eeda:	98a50513          	addi	a0,a0,-1654 # 2d860 <std::piecewise_construct+0x2b0>
   1eede:	d02f70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1eee2:	842a                	c.mv	s0,a0
   1eee4:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1eee6:	009c                	c.addi4spn	a5,sp,64
   1eee8:	00f50463          	beq	a0,a5,1eef0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9f8>
   1eeec:	dc4f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eef0:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1eef2:	101c                	c.addi4spn	a5,sp,32
   1eef4:	f0f503e3          	beq	a0,a5,1edfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1eef8:	db8f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1eefc:	bdfd                	c.j	1edfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
	return _M_append(__s, __n);
   1eefe:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ef00:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ef04:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ef06:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ef08:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ef0c:	05278b63          	beq	a5,s2,1ef62 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa6a>
      { _M_dataplus._M_p = __p; }
   1ef10:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ef12:	689c                	c.ld	a5,16(s1)
   1ef14:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ef16:	649c                	c.ld	a5,8(s1)
   1ef18:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ef1a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ef1e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ef22:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ef26:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ef28:	009c                	c.addi4spn	a5,sp,64
   1ef2a:	00f50463          	beq	a0,a5,1ef32 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa3a>
   1ef2e:	d82f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ef32:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1ef34:	101c                	c.addi4spn	a5,sp,32
   1ef36:	00f50463          	beq	a0,a5,1ef3e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
   1ef3a:	d76f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
    for (T *p = base; p < end; ++p)
   1ef3e:	750a                	c.ldsp	a0,160(sp)
   1ef40:	77aa                	c.ldsp	a5,168(sp)
   1ef42:	00f57763          	bgeu	a0,a5,1ef50 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa58>
   1ef46:	87aa                	c.mv	a5,a0
   1ef48:	07a1                	c.addi	a5,8
   1ef4a:	772a                	c.ldsp	a4,168(sp)
   1ef4c:	fee7eee3          	bltu	a5,a4,1ef48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa50>
    if ((char *)base != buf)
   1ef50:	189c                	c.addi4spn	a5,sp,112
   1ef52:	e0f50363          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
      delete[] (char *)base;
   1ef56:	e0050163          	beq	a0,zero,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ef5a:	e06f70ef          	jal	ra,16560 <operator delete[](void*)@plt>
   1ef5e:	dfaff06f          	jal	zero,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ef62:	6490                	c.ld	a2,8(s1)
   1ef64:	0605                	c.addi	a2,1
	if (__n == 0)
   1ef66:	da45                	c.beqz	a2,1ef16 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa1e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ef68:	85ca                	c.mv	a1,s2
   1ef6a:	de6f70ef          	jal	ra,16550 <memcpy@plt>
   1ef6e:	b765                	c.j	1ef16 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa1e>
    return v.as_string();
   1ef70:	85aa                	c.mv	a1,a0
   1ef72:	8522                	c.mv	a0,s0
   1ef74:	cf1fe0ef          	jal	ra,1dc64 <dwarf::value::as_string[abi:cxx11]() const>
   1ef78:	de0ff06f          	jal	zero,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
  return "<unexpected value type " + to_string(v.get_type()) + ">";
   1ef7c:	1804                	c.addi4spn	s1,sp,48
   1ef7e:	8526                	c.mv	a0,s1
   1ef80:	57e080ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ef84:	475d                	c.li	a4,23
   1ef86:	0000f697          	auipc	a3,0xf
   1ef8a:	96a68693          	addi	a3,a3,-1686 # 2d8f0 <std::piecewise_construct+0x340>
   1ef8e:	4601                	c.li	a2,0
   1ef90:	4581                	c.li	a1,0
   1ef92:	8526                	c.mv	a0,s1
   1ef94:	e6cf70ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ef98:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ef9a:	109c                	c.addi4spn	a5,sp,96
   1ef9c:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1ef9e:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1efa0:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1efa4:	03278b63          	beq	a5,s2,1efda <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xae2>
      { _M_dataplus._M_p = __p; }
   1efa8:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1efaa:	691c                	c.ld	a5,16(a0)
   1efac:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1efae:	649c                	c.ld	a5,8(s1)
   1efb0:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1efb2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1efb6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1efba:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1efbe:	6766                	c.ldsp	a4,88(sp)
   1efc0:	57fd                	c.li	a5,-1
   1efc2:	8389                	c.srli	a5,0x2
   1efc4:	02f70363          	beq	a4,a5,1efea <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xaf2>
	return _M_append(__s, __n);
   1efc8:	4605                	c.li	a2,1
   1efca:	0000f597          	auipc	a1,0xf
   1efce:	8c658593          	addi	a1,a1,-1850 # 2d890 <std::piecewise_construct+0x2e0>
   1efd2:	0888                	c.addi4spn	a0,sp,80
   1efd4:	b9cf70ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1efd8:	a83d                	c.j	1f016 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb1e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1efda:	6510                	c.ld	a2,8(a0)
   1efdc:	0605                	c.addi	a2,1
	if (__n == 0)
   1efde:	da61                	c.beqz	a2,1efae <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xab6>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1efe0:	85ca                	c.mv	a1,s2
   1efe2:	1088                	c.addi4spn	a0,sp,96
   1efe4:	d6cf70ef          	jal	ra,16550 <memcpy@plt>
   1efe8:	b7d9                	c.j	1efae <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xab6>
	  __throw_length_error(__N(__s));
   1efea:	0000f517          	auipc	a0,0xf
   1efee:	87650513          	addi	a0,a0,-1930 # 2d860 <std::piecewise_construct+0x2b0>
   1eff2:	beef70ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1eff6:	842a                	c.mv	s0,a0
   1eff8:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1effa:	109c                	c.addi4spn	a5,sp,96
   1effc:	00f50463          	beq	a0,a5,1f004 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb0c>
   1f000:	cb0f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f004:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f006:	009c                	c.addi4spn	a5,sp,64
   1f008:	00f50463          	beq	a0,a5,1f010 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb18>
   1f00c:	ca4f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f010:	8522                	c.mv	a0,s0
   1f012:	e7ef70ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1f016:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1f018:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1f01c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1f01e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1f020:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1f024:	03278b63          	beq	a5,s2,1f05a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb62>
      { _M_dataplus._M_p = __p; }
   1f028:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1f02a:	689c                	c.ld	a5,16(s1)
   1f02c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1f02e:	649c                	c.ld	a5,8(s1)
   1f030:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1f032:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1f036:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1f03a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1f03e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f040:	109c                	c.addi4spn	a5,sp,96
   1f042:	00f50463          	beq	a0,a5,1f04a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb52>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f046:	c6af70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f04a:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1f04c:	009c                	c.addi4spn	a5,sp,64
   1f04e:	d0f50563          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1f052:	c5ef70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1f056:	d02ff06f          	jal	zero,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1f05a:	6490                	c.ld	a2,8(s1)
   1f05c:	0605                	c.addi	a2,1
	if (__n == 0)
   1f05e:	da61                	c.beqz	a2,1f02e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1f060:	85ca                	c.mv	a1,s2
   1f062:	ceef70ef          	jal	ra,16550 <memcpy@plt>
   1f066:	b7e1                	c.j	1f02e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb36>
      { return _M_dataplus._M_p; }
   1f068:	842a                	c.mv	s0,a0
   1f06a:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f06c:	109c                	c.addi4spn	a5,sp,96
   1f06e:	00f50463          	beq	a0,a5,1f076 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb7e>
   1f072:	c3ef70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f076:	8522                	c.mv	a0,s0
   1f078:	e18f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f07c:	842a                	c.mv	s0,a0
   1f07e:	eb4ff06f          	jal	zero,1e732 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x23a>
   1f082:	842a                	c.mv	s0,a0
   1f084:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1f086:	109c                	c.addi4spn	a5,sp,96
   1f088:	00f50463          	beq	a0,a5,1f090 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f08c:	c24f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1f090:	8522                	c.mv	a0,s0
   1f092:	dfef70ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f096:	842a                	c.mv	s0,a0
   1f098:	b2b9                	c.j	1e9e6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4ee>
   1f09a:	842a                	c.mv	s0,a0
   1f09c:	b481                	c.j	1eadc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5e4>
   1f09e:	842a                	c.mv	s0,a0
   1f0a0:	be0d                	c.j	1ebd2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6da>
   1f0a2:	842a                	c.mv	s0,a0
   1f0a4:	b115                	c.j	1ecc8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7d0>
   1f0a6:	842a                	c.mv	s0,a0
   1f0a8:	b399                	c.j	1edee <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8f6>
   1f0aa:	842a                	c.mv	s0,a0
   1f0ac:	b591                	c.j	1eef0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9f8>
   1f0ae:	842a                	c.mv	s0,a0
   1f0b0:	b3a9                	c.j	1edfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1f0b2:	842a                	c.mv	s0,a0
   1f0b4:	bf81                	c.j	1f004 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb0c>

000000000001f0b6 <dwarf::value_type_mismatch::~value_type_mismatch()>:
class value_type_mismatch : public std::logic_error {
   1f0b6:	1141                	c.addi	sp,-16
   1f0b8:	e406                	c.sdsp	ra,8(sp)
   1f0ba:	0001a797          	auipc	a5,0x1a
   1f0be:	3867b783          	ld	a5,902(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1f0c2:	07c1                	c.addi	a5,16
   1f0c4:	e11c                	c.sd	a5,0(a0)
   1f0c6:	ddaf70ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   1f0ca:	60a2                	c.ldsp	ra,8(sp)
   1f0cc:	0141                	c.addi	sp,16
   1f0ce:	8082                	c.jr	ra

000000000001f0d0 <dwarf::value_type_mismatch::~value_type_mismatch()>:
   1f0d0:	1141                	c.addi	sp,-16
   1f0d2:	e406                	c.sdsp	ra,8(sp)
   1f0d4:	e022                	c.sdsp	s0,0(sp)
   1f0d6:	842a                	c.mv	s0,a0
   1f0d8:	0001a797          	auipc	a5,0x1a
   1f0dc:	3687b783          	ld	a5,872(a5) # 39440 <vtable for dwarf::value_type_mismatch@@Base+0xa08>
   1f0e0:	07c1                	c.addi	a5,16
   1f0e2:	e11c                	c.sd	a5,0(a0)
   1f0e4:	dbcf70ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   1f0e8:	8522                	c.mv	a0,s0
   1f0ea:	bc6f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1f0ee:	60a2                	c.ldsp	ra,8(sp)
   1f0f0:	6402                	c.ldsp	s0,0(sp)
   1f0f2:	0141                	c.addi	sp,16
   1f0f4:	8082                	c.jr	ra

000000000001f0f6 <dwarf::cursor::address()>:
  taddr address() {
   1f0f6:	7119                	c.addi16sp	sp,-128
   1f0f8:	fc86                	c.sdsp	ra,120(sp)
   1f0fa:	f8a2                	c.sdsp	s0,112(sp)
   1f0fc:	f4a6                	c.sdsp	s1,104(sp)
   1f0fe:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   1f100:	6118                	c.ld	a4,0(a0)
    switch (sec->addr_size) {
   1f102:	531c                	c.lw	a5,32(a4)
   1f104:	4691                	c.li	a3,4
   1f106:	0ad78b63          	beq	a5,a3,1f1bc <dwarf::cursor::address()+0xc6>
   1f10a:	04f6e163          	bltu	a3,a5,1f14c <dwarf::cursor::address()+0x56>
   1f10e:	4685                	c.li	a3,1
   1f110:	08d78063          	beq	a5,a3,1f190 <dwarf::cursor::address()+0x9a>
   1f114:	4689                	c.li	a3,2
   1f116:	10d79d63          	bne	a5,a3,1f230 <dwarf::cursor::address()+0x13a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f11a:	6b18                	c.ld	a4,16(a4)
   1f11c:	691c                	c.ld	a5,16(a0)
   1f11e:	40f70633          	sub	a2,a4,a5
   1f122:	4685                	c.li	a3,1
   1f124:	00c6f463          	bgeu	a3,a2,1f12c <dwarf::cursor::address()+0x36>
   1f128:	00e7e563          	bltu	a5,a4,1f132 <dwarf::cursor::address()+0x3c>
      underflow();
   1f12c:	8522                	c.mv	a0,s0
   1f12e:	b0bfb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f132:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f134:	601c                	c.ld	a5,0(s0)
   1f136:	4fdc                	c.lw	a5,28(a5)
   1f138:	ebb5                	c.bnez	a5,1f1ac <dwarf::cursor::address()+0xb6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f13a:	00174783          	lbu	a5,1(a4)
   1f13e:	07a2                	c.slli	a5,0x8
   1f140:	00074683          	lbu	a3,0(a4)
   1f144:	00d7e533          	or	a0,a5,a3
    pos += sizeof(T);
   1f148:	0709                	c.addi	a4,2
      return fixed<uint16_t>();
   1f14a:	ac49                	c.j	1f3dc <dwarf::cursor::address()+0x2e6>
    switch (sec->addr_size) {
   1f14c:	46a1                	c.li	a3,8
   1f14e:	0ed79163          	bne	a5,a3,1f230 <dwarf::cursor::address()+0x13a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f152:	6b18                	c.ld	a4,16(a4)
   1f154:	691c                	c.ld	a5,16(a0)
   1f156:	40f70633          	sub	a2,a4,a5
   1f15a:	469d                	c.li	a3,7
   1f15c:	00c6f463          	bgeu	a3,a2,1f164 <dwarf::cursor::address()+0x6e>
   1f160:	00e7e563          	bltu	a5,a4,1f16a <dwarf::cursor::address()+0x74>
      underflow();
   1f164:	8522                	c.mv	a0,s0
   1f166:	ad3fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f16a:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f16c:	601c                	c.ld	a5,0(s0)
   1f16e:	4fdc                	c.lw	a5,28(a5)
   1f170:	e7c5                	c.bnez	a5,1f218 <dwarf::cursor::address()+0x122>
   1f172:	863a                	c.mv	a2,a4
    uint64_t val = 0;
   1f174:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f176:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1f17a:	00064683          	lbu	a3,0(a2)
   1f17e:	00f696b3          	sll	a3,a3,a5
   1f182:	8d55                	c.or	a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f184:	0605                	c.addi	a2,1
   1f186:	27a1                	c.addiw	a5,8
   1f188:	feb799e3          	bne	a5,a1,1f17a <dwarf::cursor::address()+0x84>
    pos += sizeof(T);
   1f18c:	0721                	c.addi	a4,8
      return fixed<uint64_t>();
   1f18e:	a4b9                	c.j	1f3dc <dwarf::cursor::address()+0x2e6>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f190:	6b18                	c.ld	a4,16(a4)
   1f192:	691c                	c.ld	a5,16(a0)
   1f194:	00e7e463          	bltu	a5,a4,1f19c <dwarf::cursor::address()+0xa6>
      underflow();
   1f198:	aa1fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f19c:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f19e:	601c                	c.ld	a5,0(s0)
   1f1a0:	4fdc                	c.lw	a5,28(a5)
   1f1a2:	22078a63          	beq	a5,zero,1f3d6 <dwarf::cursor::address()+0x2e0>
        val = (val << 8) | (uint64_t)p[i];
   1f1a6:	00074503          	lbu	a0,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1f1aa:	ac05                	c.j	1f3da <dwarf::cursor::address()+0x2e4>
        val = (val << 8) | (uint64_t)p[i];
   1f1ac:	00074783          	lbu	a5,0(a4)
   1f1b0:	07a2                	c.slli	a5,0x8
   1f1b2:	00174683          	lbu	a3,1(a4)
   1f1b6:	00d7e533          	or	a0,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f1ba:	b779                	c.j	1f148 <dwarf::cursor::address()+0x52>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f1bc:	6b18                	c.ld	a4,16(a4)
   1f1be:	691c                	c.ld	a5,16(a0)
   1f1c0:	40f70633          	sub	a2,a4,a5
   1f1c4:	468d                	c.li	a3,3
   1f1c6:	00c6f463          	bgeu	a3,a2,1f1ce <dwarf::cursor::address()+0xd8>
   1f1ca:	00e7e563          	bltu	a5,a4,1f1d4 <dwarf::cursor::address()+0xde>
      underflow();
   1f1ce:	8522                	c.mv	a0,s0
   1f1d0:	a69fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f1d4:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f1d6:	601c                	c.ld	a5,0(s0)
   1f1d8:	4fdc                	c.lw	a5,28(a5)
   1f1da:	e39d                	c.bnez	a5,1f200 <dwarf::cursor::address()+0x10a>
   1f1dc:	85ba                	c.mv	a1,a4
   1f1de:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f1e0:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1f1e4:	0005c603          	lbu	a2,0(a1)
   1f1e8:	00d61633          	sll	a2,a2,a3
   1f1ec:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1f1ee:	0585                	c.addi	a1,1
   1f1f0:	26a1                	c.addiw	a3,8
   1f1f2:	fea699e3          	bne	a3,a0,1f1e4 <dwarf::cursor::address()+0xee>
    pos += sizeof(T);
   1f1f6:	0711                	c.addi	a4,4
   1f1f8:	02079513          	slli	a0,a5,0x20
   1f1fc:	9101                	c.srli	a0,0x20
      return fixed<uint32_t>();
   1f1fe:	aaf9                	c.j	1f3dc <dwarf::cursor::address()+0x2e6>
   1f200:	86ba                	c.mv	a3,a4
   1f202:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1f206:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1f208:	07a2                	c.slli	a5,0x8
   1f20a:	0006c603          	lbu	a2,0(a3)
   1f20e:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1f210:	0685                	c.addi	a3,1
   1f212:	fed59be3          	bne	a1,a3,1f208 <dwarf::cursor::address()+0x112>
   1f216:	b7c5                	c.j	1f1f6 <dwarf::cursor::address()+0x100>
   1f218:	87ba                	c.mv	a5,a4
   1f21a:	00870613          	addi	a2,a4,8
    uint64_t val = 0;
   1f21e:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1f220:	0522                	c.slli	a0,0x8
   1f222:	0007c683          	lbu	a3,0(a5)
   1f226:	8d55                	c.or	a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f228:	0785                	c.addi	a5,1
   1f22a:	fec79be3          	bne	a5,a2,1f220 <dwarf::cursor::address()+0x12a>
   1f22e:	bfb9                	c.j	1f18c <dwarf::cursor::address()+0x96>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   1f230:	4541                	c.li	a0,16
   1f232:	99ef70ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1f236:	84aa                	c.mv	s1,a0
   1f238:	601c                	c.ld	a5,0(s0)
   1f23a:	5380                	c.lw	s0,32(a5)
   1f23c:	87a2                	c.mv	a5,s0
      unsigned __n = 1;
   1f23e:	4585                	c.li	a1,1
	  if (__value < (unsigned)__base) return __n;
   1f240:	48a5                	c.li	a7,9
	  if (__value < __b2) return __n + 1;
   1f242:	06300813          	addi	a6,zero,99
	  if (__value < __b3) return __n + 2;
   1f246:	3e700513          	addi	a0,zero,999
	  if (__value < __b4) return __n + 3;
   1f24a:	6709                	c.lui	a4,0x2
   1f24c:	70f70613          	addi	a2,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   1f250:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   1f254:	00f8f563          	bgeu	a7,a5,1f25e <dwarf::cursor::address()+0x168>
	  if (__value < __b2) return __n + 1;
   1f258:	06f86a63          	bltu	a6,a5,1f2cc <dwarf::cursor::address()+0x1d6>
   1f25c:	2585                	c.addiw	a1,1
	: allocator_type(__a), _M_p(__dat) { }
   1f25e:	081c                	c.addi4spn	a5,sp,16
   1f260:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   1f262:	4601                	c.li	a2,0
   1f264:	1582                	c.slli	a1,0x20
   1f266:	9181                	c.srli	a1,0x20
   1f268:	850a                	c.mv	a0,sp
   1f26a:	aa6f70ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   1f26e:	6602                	c.ldsp	a2,0(sp)
      unsigned __pos = __len - 1;
   1f270:	6722                	c.ldsp	a4,8(sp)
   1f272:	377d                	c.addiw	a4,-1
      while (__val >= 100)
   1f274:	06300893          	addi	a7,zero,99
	  auto const __num = (__val % 100) * 2;
   1f278:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   1f27c:	0001a517          	auipc	a0,0x1a
   1f280:	0dc53503          	ld	a0,220(a0) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
      while (__val >= 100)
   1f284:	0688e463          	bltu	a7,s0,1f2ec <dwarf::cursor::address()+0x1f6>
      if (__val >= 10)
   1f288:	47a5                	c.li	a5,9
   1f28a:	0a87f263          	bgeu	a5,s0,1f32e <dwarf::cursor::address()+0x238>
	  auto const __num = __val * 2;
   1f28e:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   1f292:	0001a717          	auipc	a4,0x1a
   1f296:	0c673703          	ld	a4,198(a4) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
   1f29a:	0014079b          	addiw	a5,s0,1
   1f29e:	1782                	c.slli	a5,0x20
   1f2a0:	9381                	c.srli	a5,0x20
   1f2a2:	97ba                	c.add	a5,a4
   1f2a4:	0007c783          	lbu	a5,0(a5)
   1f2a8:	00f600a3          	sb	a5,1(a2)
	  __first[0] = __digits[__num];
   1f2ac:	1402                	c.slli	s0,0x20
   1f2ae:	9001                	c.srli	s0,0x20
   1f2b0:	9722                	c.add	a4,s0
   1f2b2:	00074783          	lbu	a5,0(a4)
   1f2b6:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   1f2ba:	0000e617          	auipc	a2,0xe
   1f2be:	49e60613          	addi	a2,a2,1182 # 2d758 <std::piecewise_construct+0x1a8>
   1f2c2:	4581                	c.li	a1,0
   1f2c4:	850a                	c.mv	a0,sp
   1f2c6:	87af70ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f2ca:	a0bd                	c.j	1f338 <dwarf::cursor::address()+0x242>
	  if (__value < __b3) return __n + 2;
   1f2cc:	00f56463          	bltu	a0,a5,1f2d4 <dwarf::cursor::address()+0x1de>
   1f2d0:	2589                	c.addiw	a1,2
   1f2d2:	b771                	c.j	1f25e <dwarf::cursor::address()+0x168>
	  if (__value < __b4) return __n + 3;
   1f2d4:	02079693          	slli	a3,a5,0x20
   1f2d8:	9281                	c.srli	a3,0x20
   1f2da:	00f66463          	bltu	a2,a5,1f2e2 <dwarf::cursor::address()+0x1ec>
   1f2de:	258d                	c.addiw	a1,3
   1f2e0:	bfbd                	c.j	1f25e <dwarf::cursor::address()+0x168>
	  __value /= __b4;
   1f2e2:	02e6d7b3          	divu	a5,a3,a4
   1f2e6:	2781                	c.addiw	a5,0
	  __n += 4;
   1f2e8:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   1f2ea:	b7ad                	c.j	1f254 <dwarf::cursor::address()+0x15e>
	  auto const __num = (__val % 100) * 2;
   1f2ec:	030477bb          	remuw	a5,s0,a6
   1f2f0:	0017979b          	slliw	a5,a5,0x1
	  __val /= 100;
   1f2f4:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   1f2f8:	02071593          	slli	a1,a4,0x20
   1f2fc:	9181                	c.srli	a1,0x20
   1f2fe:	95b2                	c.add	a1,a2
   1f300:	0017869b          	addiw	a3,a5,1
   1f304:	1682                	c.slli	a3,0x20
   1f306:	9281                	c.srli	a3,0x20
   1f308:	96aa                	c.add	a3,a0
   1f30a:	0006c683          	lbu	a3,0(a3)
   1f30e:	00d58023          	sb	a3,0(a1)
	  __first[__pos - 1] = __digits[__num];
   1f312:	fff7069b          	addiw	a3,a4,-1
   1f316:	1682                	c.slli	a3,0x20
   1f318:	9281                	c.srli	a3,0x20
   1f31a:	96b2                	c.add	a3,a2
   1f31c:	1782                	c.slli	a5,0x20
   1f31e:	9381                	c.srli	a5,0x20
   1f320:	97aa                	c.add	a5,a0
   1f322:	0007c783          	lbu	a5,0(a5)
   1f326:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   1f32a:	3779                	c.addiw	a4,-2
   1f32c:	bfa1                	c.j	1f284 <dwarf::cursor::address()+0x18e>
	__first[0] = '0' + __val;
   1f32e:	0304079b          	addiw	a5,s0,48
   1f332:	0ff7f793          	andi	a5,a5,255
   1f336:	b741                	c.j	1f2b6 <dwarf::cursor::address()+0x1c0>
   1f338:	85aa                	c.mv	a1,a0
   1f33a:	1000                	c.addi4spn	s0,sp,32
   1f33c:	8522                	c.mv	a0,s0
   1f33e:	8d2f70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f342:	0000e597          	auipc	a1,0xe
   1f346:	42658593          	addi	a1,a1,1062 # 2d768 <std::piecewise_construct+0x1b8>
   1f34a:	8522                	c.mv	a0,s0
   1f34c:	bf4f70ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f350:	85aa                	c.mv	a1,a0
   1f352:	0080                	c.addi4spn	s0,sp,64
   1f354:	8522                	c.mv	a0,s0
   1f356:	8baf70ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw std::runtime_error(
   1f35a:	85a2                	c.mv	a1,s0
   1f35c:	8526                	c.mv	a0,s1
   1f35e:	ac2f70ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1f362:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1f364:	089c                	c.addi4spn	a5,sp,80
   1f366:	00f50463          	beq	a0,a5,1f36e <dwarf::cursor::address()+0x278>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f36a:	946f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f36e:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f370:	181c                	c.addi4spn	a5,sp,48
   1f372:	00f50463          	beq	a0,a5,1f37a <dwarf::cursor::address()+0x284>
   1f376:	93af70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f37a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f37c:	081c                	c.addi4spn	a5,sp,16
   1f37e:	00f50463          	beq	a0,a5,1f386 <dwarf::cursor::address()+0x290>
   1f382:	92ef70ef          	jal	ra,164b0 <operator delete(void*)@plt>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   1f386:	0001a617          	auipc	a2,0x1a
   1f38a:	07a63603          	ld	a2,122(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   1f38e:	0001a597          	auipc	a1,0x1a
   1f392:	2625b583          	ld	a1,610(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   1f396:	8526                	c.mv	a0,s1
   1f398:	ac8f70ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1f39c:	842a                	c.mv	s0,a0
   1f39e:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1f3a0:	089c                	c.addi4spn	a5,sp,80
   1f3a2:	00f50463          	beq	a0,a5,1f3aa <dwarf::cursor::address()+0x2b4>
   1f3a6:	90af70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f3aa:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f3ac:	181c                	c.addi4spn	a5,sp,48
   1f3ae:	00f50463          	beq	a0,a5,1f3b6 <dwarf::cursor::address()+0x2c0>
   1f3b2:	8fef70ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f3b6:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f3b8:	081c                	c.addi4spn	a5,sp,16
   1f3ba:	00f50463          	beq	a0,a5,1f3c2 <dwarf::cursor::address()+0x2cc>
   1f3be:	8f2f70ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1f3c2:	8526                	c.mv	a0,s1
   1f3c4:	8acf70ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1f3c8:	8522                	c.mv	a0,s0
   1f3ca:	ac6f70ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f3ce:	842a                	c.mv	s0,a0
   1f3d0:	bfe9                	c.j	1f3aa <dwarf::cursor::address()+0x2b4>
   1f3d2:	842a                	c.mv	s0,a0
   1f3d4:	b7cd                	c.j	1f3b6 <dwarf::cursor::address()+0x2c0>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f3d6:	00074503          	lbu	a0,0(a4)
    pos += sizeof(T);
   1f3da:	0705                	c.addi	a4,1
   1f3dc:	e818                	c.sd	a4,16(s0)
  }
   1f3de:	70e6                	c.ldsp	ra,120(sp)
   1f3e0:	7446                	c.ldsp	s0,112(sp)
   1f3e2:	74a6                	c.ldsp	s1,104(sp)
   1f3e4:	6109                	c.addi16sp	sp,128
   1f3e6:	8082                	c.jr	ra

000000000001f3e8 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
   1f3e8:	87aa                	c.mv	a5,a0
      const unsigned __b2 = __base  * __base;
   1f3ea:	02b586bb          	mulw	a3,a1,a1
      const unsigned __b3 = __b2 * __base;
   1f3ee:	02b6863b          	mulw	a2,a3,a1
      const unsigned long __b4 = __b3 * __base;
   1f3f2:	02b6073b          	mulw	a4,a2,a1
   1f3f6:	1702                	c.slli	a4,0x20
   1f3f8:	9301                	c.srli	a4,0x20
	  if (__value < (unsigned)__base) return __n;
   1f3fa:	1582                	c.slli	a1,0x20
   1f3fc:	9181                	c.srli	a1,0x20
   1f3fe:	04b56363          	bltu	a0,a1,1f444 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5c>
	  if (__value < __b2) return __n + 1;
   1f402:	1682                	c.slli	a3,0x20
   1f404:	9281                	c.srli	a3,0x20
   1f406:	02d56663          	bltu	a0,a3,1f432 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x4a>
	  if (__value < __b3) return __n + 2;
   1f40a:	1602                	c.slli	a2,0x20
   1f40c:	9201                	c.srli	a2,0x20
   1f40e:	02c56563          	bltu	a0,a2,1f438 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x50>
	  if (__value < __b4) return __n + 3;
   1f412:	02e56663          	bltu	a0,a4,1f43e <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x56>
      unsigned __n = 1;
   1f416:	4505                	c.li	a0,1
	  __value /= __b4;
   1f418:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   1f41c:	2511                	c.addiw	a0,4
	  if (__value < (unsigned)__base) return __n;
   1f41e:	02b7e263          	bltu	a5,a1,1f442 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5a>
	  if (__value < __b2) return __n + 1;
   1f422:	00d7e963          	bltu	a5,a3,1f434 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x4c>
	  if (__value < __b3) return __n + 2;
   1f426:	00c7ea63          	bltu	a5,a2,1f43a <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x52>
	  if (__value < __b4) return __n + 3;
   1f42a:	fee7f7e3          	bgeu	a5,a4,1f418 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x30>
   1f42e:	250d                	c.addiw	a0,3
   1f430:	8082                	c.jr	ra
      unsigned __n = 1;
   1f432:	4505                	c.li	a0,1
	  if (__value < __b2) return __n + 1;
   1f434:	2505                	c.addiw	a0,1
   1f436:	8082                	c.jr	ra
      unsigned __n = 1;
   1f438:	4505                	c.li	a0,1
	  if (__value < __b3) return __n + 2;
   1f43a:	2509                	c.addiw	a0,2
   1f43c:	8082                	c.jr	ra
      unsigned __n = 1;
   1f43e:	4505                	c.li	a0,1
   1f440:	b7fd                	c.j	1f42e <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x46>
   1f442:	8082                	c.jr	ra
   1f444:	4505                	c.li	a0,1
    }
   1f446:	8082                	c.jr	ra

000000000001f448 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)>:
      unsigned __pos = __len - 1;
   1f448:	35fd                	c.addiw	a1,-1
      while (__val >= 100)
   1f44a:	06300793          	addi	a5,zero,99
   1f44e:	04c7f663          	bgeu	a5,a2,1f49a <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x52>
	  auto const __num = (__val % 100) * 2;
   1f452:	06400693          	addi	a3,zero,100
	  __first[__pos] = __digits[__num + 1];
   1f456:	0001ae17          	auipc	t3,0x1a
   1f45a:	00ae3e03          	ld	t3,10(t3) # 39460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb9b8>
      while (__val >= 100)
   1f45e:	6309                	c.lui	t1,0x2
   1f460:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   1f464:	02d677b3          	remu	a5,a2,a3
   1f468:	0786                	c.slli	a5,0x1
   1f46a:	8832                	c.mv	a6,a2
	  __val /= 100;
   1f46c:	02d65633          	divu	a2,a2,a3
	  __first[__pos] = __digits[__num + 1];
   1f470:	02059713          	slli	a4,a1,0x20
   1f474:	9301                	c.srli	a4,0x20
   1f476:	972a                	c.add	a4,a0
   1f478:	97f2                	c.add	a5,t3
   1f47a:	0017c883          	lbu	a7,1(a5)
   1f47e:	01170023          	sb	a7,0(a4)
	  __first[__pos - 1] = __digits[__num];
   1f482:	fff5871b          	addiw	a4,a1,-1
   1f486:	1702                	c.slli	a4,0x20
   1f488:	9301                	c.srli	a4,0x20
   1f48a:	972a                	c.add	a4,a0
   1f48c:	0007c783          	lbu	a5,0(a5)
   1f490:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   1f494:	35f9                	c.addiw	a1,-2
      while (__val >= 100)
   1f496:	fd0367e3          	bltu	t1,a6,1f464 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x1c>
      if (__val >= 10)
   1f49a:	47a5                	c.li	a5,9
   1f49c:	02c7f163          	bgeu	a5,a2,1f4be <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x76>
	  auto const __num = __val * 2;
   1f4a0:	0606                	c.slli	a2,0x1
	  __first[1] = __digits[__num + 1];
   1f4a2:	0001a797          	auipc	a5,0x1a
   1f4a6:	fbe7b783          	ld	a5,-66(a5) # 39460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb9b8>
   1f4aa:	97b2                	c.add	a5,a2
   1f4ac:	0017c703          	lbu	a4,1(a5)
   1f4b0:	00e500a3          	sb	a4,1(a0)
	  __first[0] = __digits[__num];
   1f4b4:	0007c603          	lbu	a2,0(a5)
   1f4b8:	00c50023          	sb	a2,0(a0)
    }
   1f4bc:	8082                	c.jr	ra
	__first[0] = '0' + __val;
   1f4be:	0306061b          	addiw	a2,a2,48
   1f4c2:	0ff67613          	andi	a2,a2,255
   1f4c6:	bfcd                	c.j	1f4b8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x70>

000000000001f4c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>:
    }
  }
  throw format_error("unknown attribute form " + to_string(form));
}

attribute_spec::attribute_spec(DW_AT name, DW_FORM form)
   1f4c8:	711d                	c.addi16sp	sp,-96
   1f4ca:	ec86                	c.sdsp	ra,88(sp)
   1f4cc:	e8a2                	c.sdsp	s0,80(sp)
   1f4ce:	e4a6                	c.sdsp	s1,72(sp)
   1f4d0:	e0ca                	c.sdsp	s2,64(sp)
   1f4d2:	8432                	c.mv	s0,a2
    : name(name), form(form), type(resolve_type(name, form)) {}
   1f4d4:	c10c                	c.sw	a1,0(a0)
   1f4d6:	c150                	c.sw	a2,4(a0)
  switch (form) {
   1f4d8:	02000793          	addi	a5,zero,32
   1f4dc:	16c7ee63          	bltu	a5,a2,1f658 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x190>
   1f4e0:	84ae                	c.mv	s1,a1
   1f4e2:	00261793          	slli	a5,a2,0x2
   1f4e6:	0000e717          	auipc	a4,0xe
   1f4ea:	6da70713          	addi	a4,a4,1754 # 2dbc0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x118>
   1f4ee:	97ba                	c.add	a5,a4
   1f4f0:	439c                	c.lw	a5,0(a5)
   1f4f2:	97ba                	c.add	a5,a4
   1f4f4:	8782                	c.jr	a5
    return value::type::constant;
   1f4f6:	440d                	c.li	s0,3
   1f4f8:	a8d5                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f4fa:	05100793          	addi	a5,zero,81
   1f4fe:	4409                	c.li	s0,2
   1f500:	0eb7c663          	blt	a5,a1,1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f504:	47e1                	c.li	a5,24
   1f506:	00b7de63          	bge	a5,a1,1f522 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x5a>
   1f50a:	359d                	c.addiw	a1,-25
   1f50c:	0000e797          	auipc	a5,0xe
   1f510:	7747b783          	ld	a5,1908(a5) # 2dc80 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1d8>
   1f514:	00b7d7b3          	srl	a5,a5,a1
   1f518:	8b85                	c.andi	a5,1
      return value::type::exprloc;
   1f51a:	4419                	c.li	s0,6
    switch (name) {
   1f51c:	ebe1                	c.bnez	a5,1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f51e:	4409                	c.li	s0,2
   1f520:	a0f1                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f522:	4789                	c.li	a5,2
   1f524:	1af58263          	beq	a1,a5,1f6c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x200>
   1f528:	35d5                	c.addiw	a1,-11
   1f52a:	0cb7e163          	bltu	a5,a1,1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::exprloc;
   1f52e:	4419                	c.li	s0,6
   1f530:	a875                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f532:	05500793          	addi	a5,zero,85
   1f536:	18b7cb63          	blt	a5,a1,1f6cc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x204>
   1f53a:	47e1                	c.li	a5,24
   1f53c:	00b7de63          	bge	a5,a1,1f558 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x90>
   1f540:	fe75871b          	addiw	a4,a1,-25
   1f544:	0000e797          	auipc	a5,0xe
   1f548:	7447b783          	ld	a5,1860(a5) # 2dc88 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e0>
   1f54c:	00e7d7b3          	srl	a5,a5,a4
   1f550:	8b85                	c.andi	a5,1
   1f552:	ef9d                	c.bnez	a5,1f590 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xc8>
   1f554:	440d                	c.li	s0,3
   1f556:	a859                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f558:	4789                	c.li	a5,2
   1f55a:	16f58b63          	beq	a1,a5,1f6d0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x208>
   1f55e:	47c1                	c.li	a5,16
   1f560:	440d                	c.li	s0,3
   1f562:	08f59563          	bne	a1,a5,1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::line;
   1f566:	4421                	c.li	s0,8
   1f568:	a051                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::sconstant;
   1f56a:	4415                	c.li	s0,5
   1f56c:	a041                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::exprloc;
   1f56e:	4419                	c.li	s0,6
   1f570:	a8b5                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::flag;
   1f572:	441d                	c.li	s0,7
   1f574:	a8a5                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::reference;
   1f576:	4431                	c.li	s0,12
   1f578:	a895                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::string;
   1f57a:	4435                	c.li	s0,13
   1f57c:	a885                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::invalid;
   1f57e:	4401                	c.li	s0,0
   1f580:	a0b5                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f582:	05500793          	addi	a5,zero,85
   1f586:	04b7cd63          	blt	a5,a1,1f5e0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x118>
   1f58a:	47e1                	c.li	a5,24
   1f58c:	04b7d263          	bge	a5,a1,1f5d0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x108>
   1f590:	fe74871b          	addiw	a4,s1,-25
   1f594:	4785                	c.li	a5,1
   1f596:	00e797b3          	sll	a5,a5,a4
   1f59a:	0000e717          	auipc	a4,0xe
   1f59e:	6f673703          	ld	a4,1782(a4) # 2dc90 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e8>
   1f5a2:	8f7d                	c.and	a4,a5
   1f5a4:	12071a63          	bne	a4,zero,1f6d8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x210>
   1f5a8:	0000e717          	auipc	a4,0xe
   1f5ac:	6f073703          	ld	a4,1776(a4) # 2dc98 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f0>
   1f5b0:	8ff9                	c.and	a5,a4
   1f5b2:	12079563          	bne	a5,zero,1f6dc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x214>
   1f5b6:	04300793          	addi	a5,zero,67
   1f5ba:	12f48363          	beq	s1,a5,1f6e0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x218>
                         to_string(name));
   1f5be:	4541                	c.li	a0,16
   1f5c0:	e11f60ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1f5c4:	892a                	c.mv	s2,a0
   1f5c6:	85a6                	c.mv	a1,s1
   1f5c8:	850a                	c.mv	a0,sp
   1f5ca:	7a7090ef          	jal	ra,29570 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   1f5ce:	a035                	c.j	1f5fa <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x132>
    switch (name) {
   1f5d0:	4789                	c.li	a5,2
   1f5d2:	10f58163          	beq	a1,a5,1f6d4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x20c>
   1f5d6:	47c1                	c.li	a5,16
      return value::type::line;
   1f5d8:	4421                	c.li	s0,8
    switch (name) {
   1f5da:	00f58963          	beq	a1,a5,1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f5de:	b7c5                	c.j	1f5be <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xf6>
   1f5e0:	77f9                	c.lui	a5,0xffffe
   1f5e2:	9fad                	c.addw	a5,a1
   1f5e4:	6709                	c.lui	a4,0x2
      return value::type::invalid;
   1f5e6:	4401                	c.li	s0,0
    switch (name) {
   1f5e8:	fce7fbe3          	bgeu	a5,a4,1f5be <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xf6>
    : name(name), form(form), type(resolve_type(name, form)) {}
   1f5ec:	c500                	c.sw	s0,8(a0)
   1f5ee:	60e6                	c.ldsp	ra,88(sp)
   1f5f0:	6446                	c.ldsp	s0,80(sp)
   1f5f2:	64a6                	c.ldsp	s1,72(sp)
   1f5f4:	6906                	c.ldsp	s2,64(sp)
   1f5f6:	6125                	c.addi16sp	sp,96
   1f5f8:	8082                	c.jr	ra
    { return std::move(__rhs.insert(0, __lhs)); }
   1f5fa:	0000e617          	auipc	a2,0xe
   1f5fe:	57e60613          	addi	a2,a2,1406 # 2db78 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0xd0>
   1f602:	4581                	c.li	a1,0
   1f604:	850a                	c.mv	a0,sp
   1f606:	d3bf60ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f60a:	85aa                	c.mv	a1,a0
   1f60c:	1000                	c.addi4spn	s0,sp,32
   1f60e:	8522                	c.mv	a0,s0
   1f610:	e01f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1f614:	85a2                	c.mv	a1,s0
   1f616:	854a                	c.mv	a0,s2
   1f618:	f29f60ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f61c:	0001a797          	auipc	a5,0x1a
   1f620:	f347b783          	ld	a5,-204(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   1f624:	07c1                	c.addi	a5,16
   1f626:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1f62a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f62c:	181c                	c.addi4spn	a5,sp,48
   1f62e:	00f50463          	beq	a0,a5,1f636 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x16e>
   1f632:	e7ff60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f636:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f638:	081c                	c.addi4spn	a5,sp,16
   1f63a:	00f50463          	beq	a0,a5,1f642 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x17a>
   1f63e:	e73f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string(name));
   1f642:	0001a617          	auipc	a2,0x1a
   1f646:	d3663603          	ld	a2,-714(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1f64a:	0001a597          	auipc	a1,0x1a
   1f64e:	c5e5b583          	ld	a1,-930(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1f652:	854a                	c.mv	a0,s2
   1f654:	80cf70ef          	jal	ra,16660 <__cxa_throw@plt>
  throw format_error("unknown attribute form " + to_string(form));
   1f658:	4541                	c.li	a0,16
   1f65a:	d77f60ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   1f65e:	84aa                	c.mv	s1,a0
   1f660:	85a2                	c.mv	a1,s0
   1f662:	850a                	c.mv	a0,sp
   1f664:	7ee080ef          	jal	ra,27e52 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f668:	0000e617          	auipc	a2,0xe
   1f66c:	54060613          	addi	a2,a2,1344 # 2dba8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x100>
   1f670:	4581                	c.li	a1,0
   1f672:	850a                	c.mv	a0,sp
   1f674:	ccdf60ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f678:	85aa                	c.mv	a1,a0
   1f67a:	1000                	c.addi4spn	s0,sp,32
   1f67c:	8522                	c.mv	a0,s0
   1f67e:	d93f60ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1f682:	85a2                	c.mv	a1,s0
   1f684:	8526                	c.mv	a0,s1
   1f686:	ebbf60ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f68a:	0001a797          	auipc	a5,0x1a
   1f68e:	ec67b783          	ld	a5,-314(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   1f692:	07c1                	c.addi	a5,16
   1f694:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1f696:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f698:	181c                	c.addi4spn	a5,sp,48
   1f69a:	00f50463          	beq	a0,a5,1f6a2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1da>
   1f69e:	e13f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f6a2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f6a4:	081c                	c.addi4spn	a5,sp,16
   1f6a6:	00f50463          	beq	a0,a5,1f6ae <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1e6>
   1f6aa:	e07f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
   1f6ae:	0001a617          	auipc	a2,0x1a
   1f6b2:	cca63603          	ld	a2,-822(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   1f6b6:	0001a597          	auipc	a1,0x1a
   1f6ba:	bf25b583          	ld	a1,-1038(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   1f6be:	8526                	c.mv	a0,s1
   1f6c0:	fa1f60ef          	jal	ra,16660 <__cxa_throw@plt>
  switch (form) {
   1f6c4:	4411                	c.li	s0,4
   1f6c6:	b71d                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::exprloc;
   1f6c8:	4419                	c.li	s0,6
   1f6ca:	b70d                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f6cc:	440d                	c.li	s0,3
   1f6ce:	bf39                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f6d0:	4425                	c.li	s0,9
   1f6d2:	bf29                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f6d4:	4425                	c.li	s0,9
   1f6d6:	bf19                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f6d8:	4425                	c.li	s0,9
   1f6da:	bf09                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::rangelist;
   1f6dc:	442d                	c.li	s0,11
   1f6de:	b739                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::mac;
   1f6e0:	4429                	c.li	s0,10
   1f6e2:	b729                	c.j	1f5ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      { return _M_dataplus._M_p; }
   1f6e4:	842a                	c.mv	s0,a0
   1f6e6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f6e8:	181c                	c.addi4spn	a5,sp,48
   1f6ea:	00f50463          	beq	a0,a5,1f6f2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x22a>
   1f6ee:	dc3f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f6f2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f6f4:	081c                	c.addi4spn	a5,sp,16
   1f6f6:	00f50463          	beq	a0,a5,1f6fe <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x236>
   1f6fa:	db7f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string(name));
   1f6fe:	854a                	c.mv	a0,s2
   1f700:	d71f60ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1f704:	8522                	c.mv	a0,s0
   1f706:	f8bf60ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f70a:	842a                	c.mv	s0,a0
   1f70c:	b7dd                	c.j	1f6f2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x22a>
   1f70e:	842a                	c.mv	s0,a0
   1f710:	b7fd                	c.j	1f6fe <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x236>
   1f712:	842a                	c.mv	s0,a0
   1f714:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f716:	181c                	c.addi4spn	a5,sp,48
   1f718:	00f50463          	beq	a0,a5,1f720 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x258>
   1f71c:	d95f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f720:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f722:	081c                	c.addi4spn	a5,sp,16
   1f724:	00f50463          	beq	a0,a5,1f72c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x264>
   1f728:	d89f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
  throw format_error("unknown attribute form " + to_string(form));
   1f72c:	8526                	c.mv	a0,s1
   1f72e:	d43f60ef          	jal	ra,16470 <__cxa_free_exception@plt>
   1f732:	8522                	c.mv	a0,s0
   1f734:	f5df60ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f738:	842a                	c.mv	s0,a0
   1f73a:	b7dd                	c.j	1f720 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x258>
   1f73c:	842a                	c.mv	s0,a0
   1f73e:	b7fd                	c.j	1f72c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x264>

000000000001f740 <dwarf::abbrev_entry::read(dwarf::cursor*)>:

bool abbrev_entry::read(cursor *cur) {
   1f740:	715d                	c.addi16sp	sp,-80
   1f742:	e486                	c.sdsp	ra,72(sp)
   1f744:	e0a2                	c.sdsp	s0,64(sp)
   1f746:	fc26                	c.sdsp	s1,56(sp)
   1f748:	f84a                	c.sdsp	s2,48(sp)
   1f74a:	f44e                	c.sdsp	s3,40(sp)
   1f74c:	f052                	c.sdsp	s4,32(sp)
   1f74e:	ec56                	c.sdsp	s5,24(sp)
   1f750:	e85a                	c.sdsp	s6,16(sp)
   1f752:	84aa                	c.mv	s1,a0
   1f754:	842e                	c.mv	s0,a1
      { _M_erase_at_end(this->_M_impl._M_start); }
   1f756:	691c                	c.ld	a5,16(a0)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f758:	6d18                	c.ld	a4,24(a0)
   1f75a:	00e78363          	beq	a5,a4,1f760 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x20>
	    this->_M_impl._M_finish = __pos;
   1f75e:	ed1c                	c.sd	a5,24(a0)
    while (pos < sec->end) {
   1f760:	681c                	c.ld	a5,16(s0)
   1f762:	6008                	c.ld	a0,0(s0)
   1f764:	6918                	c.ld	a4,16(a0)
   1f766:	02e7f763          	bgeu	a5,a4,1f794 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x54>
   1f76a:	4581                	c.li	a1,0
   1f76c:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   1f76e:	0785                	c.addi	a5,1
   1f770:	e81c                	c.sd	a5,16(s0)
   1f772:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f776:	07f77693          	andi	a3,a4,127
   1f77a:	00c696b3          	sll	a3,a3,a2
   1f77e:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1f780:	0187171b          	slliw	a4,a4,0x18
   1f784:	4187571b          	sraiw	a4,a4,0x18
   1f788:	02075663          	bge	a4,zero,1f7b4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x74>
      shift += 7;
   1f78c:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1f78e:	6918                	c.ld	a4,16(a0)
   1f790:	fce7efe3          	bltu	a5,a4,1f76e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x2e>
    underflow();
   1f794:	8522                	c.mv	a0,s0
   1f796:	ca2fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
  attributes.clear();

  // Section 7.5.3
  code = cur->uleb128();
   1f79a:	0004b023          	sd	zero,0(s1)
  if (!code)
    return false;
   1f79e:	4501                	c.li	a0,0
      break;
    attributes.push_back(attribute_spec(name, form));
  }
  attributes.shrink_to_fit();
  return true;
}
   1f7a0:	60a6                	c.ldsp	ra,72(sp)
   1f7a2:	6406                	c.ldsp	s0,64(sp)
   1f7a4:	74e2                	c.ldsp	s1,56(sp)
   1f7a6:	7942                	c.ldsp	s2,48(sp)
   1f7a8:	79a2                	c.ldsp	s3,40(sp)
   1f7aa:	7a02                	c.ldsp	s4,32(sp)
   1f7ac:	6ae2                	c.ldsp	s5,24(sp)
   1f7ae:	6b42                	c.ldsp	s6,16(sp)
   1f7b0:	6161                	c.addi16sp	sp,80
   1f7b2:	8082                	c.jr	ra
  code = cur->uleb128();
   1f7b4:	e08c                	c.sd	a1,0(s1)
  if (!code)
   1f7b6:	12058263          	beq	a1,zero,1f8da <dwarf::abbrev_entry::read(dwarf::cursor*)+0x19a>
    while (pos < sec->end) {
   1f7ba:	681c                	c.ld	a5,16(s0)
   1f7bc:	6008                	c.ld	a0,0(s0)
   1f7be:	6918                	c.ld	a4,16(a0)
   1f7c0:	02e7f763          	bgeu	a5,a4,1f7ee <dwarf::abbrev_entry::read(dwarf::cursor*)+0xae>
    std::uint64_t result = 0;
   1f7c4:	4581                	c.li	a1,0
    int shift = 0;
   1f7c6:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   1f7c8:	0785                	c.addi	a5,1
   1f7ca:	e81c                	c.sd	a5,16(s0)
   1f7cc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f7d0:	07f77693          	andi	a3,a4,127
   1f7d4:	00c696b3          	sll	a3,a3,a2
   1f7d8:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1f7da:	0187171b          	slliw	a4,a4,0x18
   1f7de:	4187571b          	sraiw	a4,a4,0x18
   1f7e2:	00075a63          	bge	a4,zero,1f7f6 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xb6>
      shift += 7;
   1f7e6:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1f7e8:	6918                	c.ld	a4,16(a0)
   1f7ea:	fce7efe3          	bltu	a5,a4,1f7c8 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x88>
    underflow();
   1f7ee:	8522                	c.mv	a0,s0
   1f7f0:	c48fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1f7f4:	4581                	c.li	a1,0
  tag = (DW_TAG)cur->uleb128();
   1f7f6:	c48c                	c.sw	a1,8(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f7f8:	601c                	c.ld	a5,0(s0)
   1f7fa:	6b98                	c.ld	a4,16(a5)
   1f7fc:	681c                	c.ld	a5,16(s0)
   1f7fe:	00e7e563          	bltu	a5,a4,1f808 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xc8>
      underflow();
   1f802:	8522                	c.mv	a0,s0
   1f804:	c34fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f808:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f80a:	601c                	c.ld	a5,0(s0)
   1f80c:	4fdc                	c.lw	a5,28(a5)
   1f80e:	cbe1                	c.beqz	a5,1f8de <dwarf::abbrev_entry::read(dwarf::cursor*)+0x19e>
        val = (val << 8) | (uint64_t)p[i];
   1f810:	00074783          	lbu	a5,0(a4) # 2000 <__abi_tag-0xe294>
      for (unsigned i = 0; i < sizeof(T); i++)
   1f814:	a0f9                	c.j	1f8e2 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1a2>
    DW_FORM form = (DW_FORM)cur->uleb128();
   1f816:	2601                	c.addiw	a2,0
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   1f818:	00cb67b3          	or	a5,s6,a2
   1f81c:	c7dd                	c.beqz	a5,1f8ca <dwarf::abbrev_entry::read(dwarf::cursor*)+0x18a>
    attributes.push_back(attribute_spec(name, form));
   1f81e:	85da                	c.mv	a1,s6
   1f820:	854e                	c.mv	a0,s3
   1f822:	ca7ff0ef          	jal	ra,1f4c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f826:	6c8c                	c.ld	a1,24(s1)
   1f828:	709c                	c.ld	a5,32(s1)
   1f82a:	08f58c63          	beq	a1,a5,1f8c2 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x182>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f82e:	4782                	c.lwsp	a5,0(sp)
   1f830:	c19c                	c.sw	a5,0(a1)
   1f832:	4792                	c.lwsp	a5,4(sp)
   1f834:	c1dc                	c.sw	a5,4(a1)
   1f836:	47a2                	c.lwsp	a5,8(sp)
   1f838:	c59c                	c.sw	a5,8(a1)
	    ++this->_M_impl._M_finish;
   1f83a:	6c9c                	c.ld	a5,24(s1)
   1f83c:	07b1                	c.addi	a5,12
   1f83e:	ec9c                	c.sd	a5,24(s1)
    while (pos < sec->end) {
   1f840:	681c                	c.ld	a5,16(s0)
   1f842:	600c                	c.ld	a1,0(s0)
   1f844:	6998                	c.ld	a4,16(a1)
   1f846:	02e7f863          	bgeu	a5,a4,1f876 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x136>
    std::uint64_t result = 0;
   1f84a:	4b01                	c.li	s6,0
    int shift = 0;
   1f84c:	864a                	c.mv	a2,s2
      uint8_t byte = *(uint8_t *)(pos++);
   1f84e:	0785                	c.addi	a5,1
   1f850:	e81c                	c.sd	a5,16(s0)
   1f852:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f856:	07f77693          	andi	a3,a4,127
   1f85a:	00c696b3          	sll	a3,a3,a2
   1f85e:	00db6b33          	or	s6,s6,a3
      if ((byte & 0x80) == 0)
   1f862:	0187171b          	slliw	a4,a4,0x18
   1f866:	4187571b          	sraiw	a4,a4,0x18
   1f86a:	00075a63          	bge	a4,zero,1f87e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x13e>
      shift += 7;
   1f86e:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1f870:	6998                	c.ld	a4,16(a1)
   1f872:	fce7eee3          	bltu	a5,a4,1f84e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x10e>
    underflow();
   1f876:	8522                	c.mv	a0,s0
   1f878:	bc0fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1f87c:	4b01                	c.li	s6,0
    DW_AT name = (DW_AT)cur->uleb128();
   1f87e:	2b01                	c.addiw	s6,0
    while (pos < sec->end) {
   1f880:	681c                	c.ld	a5,16(s0)
   1f882:	6008                	c.ld	a0,0(s0)
   1f884:	6918                	c.ld	a4,16(a0)
   1f886:	02e7f763          	bgeu	a5,a4,1f8b4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x174>
    std::uint64_t result = 0;
   1f88a:	4601                	c.li	a2,0
    int shift = 0;
   1f88c:	85ca                	c.mv	a1,s2
      uint8_t byte = *(uint8_t *)(pos++);
   1f88e:	0785                	c.addi	a5,1
   1f890:	e81c                	c.sd	a5,16(s0)
   1f892:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f896:	07f77693          	andi	a3,a4,127
   1f89a:	00b696b3          	sll	a3,a3,a1
   1f89e:	8e55                	c.or	a2,a3
      if ((byte & 0x80) == 0)
   1f8a0:	0187171b          	slliw	a4,a4,0x18
   1f8a4:	4187571b          	sraiw	a4,a4,0x18
   1f8a8:	f60757e3          	bge	a4,zero,1f816 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xd6>
      shift += 7;
   1f8ac:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1f8ae:	6918                	c.ld	a4,16(a0)
   1f8b0:	fce7efe3          	bltu	a5,a4,1f88e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x14e>
    underflow();
   1f8b4:	8522                	c.mv	a0,s0
   1f8b6:	b82fb0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   1f8ba:	000b0863          	beq	s6,zero,1f8ca <dwarf::abbrev_entry::read(dwarf::cursor*)+0x18a>
    DW_FORM form = (DW_FORM)cur->uleb128();
   1f8be:	864a                	c.mv	a2,s2
   1f8c0:	bfb9                	c.j	1f81e <dwarf::abbrev_entry::read(dwarf::cursor*)+0xde>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1f8c2:	864e                	c.mv	a2,s3
   1f8c4:	8552                	c.mv	a0,s4
   1f8c6:	9a82                	c.jalr	s5
  }
   1f8c8:	bfa5                	c.j	1f840 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x100>
      { _M_shrink_to_fit(); }
   1f8ca:	8552                	c.mv	a0,s4
   1f8cc:	0001a317          	auipc	t1,0x1a
   1f8d0:	ccc33303          	ld	t1,-820(t1) # 39598 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()@@Base+0x19c96>
   1f8d4:	9302                	c.jalr	t1
  return true;
   1f8d6:	4505                	c.li	a0,1
   1f8d8:	b5e1                	c.j	1f7a0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x60>
    return false;
   1f8da:	4501                	c.li	a0,0
   1f8dc:	b5d1                	c.j	1f7a0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x60>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f8de:	00074783          	lbu	a5,0(a4)
  attributes.clear();
   1f8e2:	01048a13          	addi	s4,s1,16
    pos += sizeof(T);
   1f8e6:	0705                	c.addi	a4,1
   1f8e8:	e818                	c.sd	a4,16(s0)
  children = cur->fixed<DW_CHILDREN>() == DW_CHILDREN::yes;
   1f8ea:	17fd                	c.addi	a5,-1
   1f8ec:	0017b793          	sltiu	a5,a5,1
   1f8f0:	00f48623          	sb	a5,12(s1)
    int shift = 0;
   1f8f4:	4901                	c.li	s2,0
    attributes.push_back(attribute_spec(name, form));
   1f8f6:	898a                	c.mv	s3,sp
   1f8f8:	0001aa97          	auipc	s5,0x1a
   1f8fc:	ba0aba83          	ld	s5,-1120(s5) # 39498 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)@@Base+0x19ad6>
   1f900:	b781                	c.j	1f840 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x100>

000000000001f902 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    bool
    vector<_Tp, _Alloc>::
   1f902:	7179                	c.addi16sp	sp,-48
   1f904:	f406                	c.sdsp	ra,40(sp)
   1f906:	f022                	c.sdsp	s0,32(sp)
   1f908:	ec26                	c.sdsp	s1,24(sp)
   1f90a:	e84a                	c.sdsp	s2,16(sp)
   1f90c:	e44e                	c.sdsp	s3,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f90e:	6500                	c.ld	s0,8(a0)
    _M_shrink_to_fit()
    {
      if (capacity() == size())
   1f910:	691c                	c.ld	a5,16(a0)
   1f912:	0af40063          	beq	s0,a5,1f9b2 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb0>
   1f916:	84aa                	c.mv	s1,a0
			 - this->_M_impl._M_start); }
   1f918:	00053983          	ld	s3,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f91c:	41340933          	sub	s2,s0,s3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1f920:	57c5                	c.li	a5,-15
   1f922:	8385                	c.srli	a5,0x1
   1f924:	0127e863          	bltu	a5,s2,1f934 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x32>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f928:	06090f63          	beq	s2,zero,1f9a6 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xa4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f92c:	854a                	c.mv	a0,s2
   1f92e:	b93f60ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1f932:	a829                	c.j	1f94c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4a>
	  __throw_length_error(
   1f934:	0000e517          	auipc	a0,0xe
   1f938:	31450513          	addi	a0,a0,788 # 2dc48 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1a0>
   1f93c:	aa5f60ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
		__make_move_if_noexcept_iterator(__c.end()),
		__c.get_allocator()).swap(__c);
	    return true;
	  }
	catch(...)
   1f940:	a71f60ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
   1f944:	cedf60ef          	jal	ra,16630 <__cxa_end_catch@plt>
	  { return false; }
   1f948:	4501                	c.li	a0,0
   1f94a:	a0ad                	c.j	1f9b4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
   1f94c:	862a                	c.mv	a2,a0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1f94e:	9932                	c.add	s2,a2
	  for (; __first != __last; ++__first, (void)++__cur)
   1f950:	05340d63          	beq	s0,s3,1f9aa <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xa8>
   1f954:	87ce                	c.mv	a5,s3
      _ForwardIterator __cur = __result;
   1f956:	8732                	c.mv	a4,a2
   1f958:	4394                	c.lw	a3,0(a5)
   1f95a:	c314                	c.sw	a3,0(a4)
   1f95c:	43d4                	c.lw	a3,4(a5)
   1f95e:	c354                	c.sw	a3,4(a4)
   1f960:	4794                	c.lw	a3,8(a5)
   1f962:	c714                	c.sw	a3,8(a4)
	  for (; __first != __last; ++__first, (void)++__cur)
   1f964:	0731                	c.addi	a4,12
   1f966:	07b1                	c.addi	a5,12
   1f968:	fef418e3          	bne	s0,a5,1f958 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x56>
   1f96c:	ff440793          	addi	a5,s0,-12
   1f970:	413787b3          	sub	a5,a5,s3
   1f974:	8389                	c.srli	a5,0x2
   1f976:	0000e717          	auipc	a4,0xe
   1f97a:	32a73703          	ld	a4,810(a4) # 2dca0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   1f97e:	02e787b3          	mul	a5,a5,a4
   1f982:	078a                	c.slli	a5,0x2
   1f984:	8389                	c.srli	a5,0x2
   1f986:	0785                	c.addi	a5,1
   1f988:	00179713          	slli	a4,a5,0x1
   1f98c:	97ba                	c.add	a5,a4
   1f98e:	078a                	c.slli	a5,0x2
   1f990:	97b2                	c.add	a5,a2
	  _M_start = __x._M_start;
   1f992:	6088                	c.ld	a0,0(s1)
   1f994:	e090                	c.sd	a2,0(s1)
	  _M_finish = __x._M_finish;
   1f996:	e49c                	c.sd	a5,8(s1)
	  _M_end_of_storage = __x._M_end_of_storage;
   1f998:	0124b823          	sd	s2,16(s1)
	if (__p)
   1f99c:	c909                	c.beqz	a0,1f9ae <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xac>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f99e:	b13f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    return true;
   1f9a2:	4505                	c.li	a0,1
      { __a.deallocate(__p, __n); }
   1f9a4:	a801                	c.j	1f9b4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f9a6:	4601                	c.li	a2,0
   1f9a8:	b75d                	c.j	1f94e <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4c>
      _ForwardIterator __cur = __result;
   1f9aa:	87b2                	c.mv	a5,a2
   1f9ac:	b7dd                	c.j	1f992 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x90>
   1f9ae:	4505                	c.li	a0,1
   1f9b0:	a011                	c.j	1f9b4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
	return false;
   1f9b2:	4501                	c.li	a0,0
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }
   1f9b4:	70a2                	c.ldsp	ra,40(sp)
   1f9b6:	7402                	c.ldsp	s0,32(sp)
   1f9b8:	64e2                	c.ldsp	s1,24(sp)
   1f9ba:	6942                	c.ldsp	s2,16(sp)
   1f9bc:	69a2                	c.ldsp	s3,8(sp)
   1f9be:	6145                	c.addi16sp	sp,48
   1f9c0:	8082                	c.jr	ra

000000000001f9c2 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)>:
      vector<_Tp, _Alloc>::
   1f9c2:	715d                	c.addi16sp	sp,-80
   1f9c4:	e486                	c.sdsp	ra,72(sp)
   1f9c6:	e0a2                	c.sdsp	s0,64(sp)
   1f9c8:	fc26                	c.sdsp	s1,56(sp)
   1f9ca:	f84a                	c.sdsp	s2,48(sp)
   1f9cc:	f44e                	c.sdsp	s3,40(sp)
   1f9ce:	f052                	c.sdsp	s4,32(sp)
   1f9d0:	ec56                	c.sdsp	s5,24(sp)
   1f9d2:	e85a                	c.sdsp	s6,16(sp)
   1f9d4:	e45e                	c.sdsp	s7,8(sp)
   1f9d6:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f9d8:	6504                	c.ld	s1,8(a0)
   1f9da:	00053983          	ld	s3,0(a0)
   1f9de:	413487b3          	sub	a5,s1,s3
   1f9e2:	8789                	c.srai	a5,0x2
   1f9e4:	0000e717          	auipc	a4,0xe
   1f9e8:	bbc73703          	ld	a4,-1092(a4) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1f9ec:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1f9f0:	0000e717          	auipc	a4,0xe
   1f9f4:	2b873703          	ld	a4,696(a4) # 2dca8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   1f9f8:	02e78963          	beq	a5,a4,1fa2a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x68>
   1f9fc:	8a2a                	c.mv	s4,a0
   1f9fe:	842e                	c.mv	s0,a1
   1fa00:	8b32                	c.mv	s6,a2
   1fa02:	8bae                	c.mv	s7,a1
      return __a;
   1fa04:	873e                	c.mv	a4,a5
      if (__a < __b)
   1fa06:	03348863          	beq	s1,s3,1fa36 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x74>
	const size_type __len = size() + (std::max)(size(), __n);
   1fa0a:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1fa0c:	02f76963          	bltu	a4,a5,1fa3e <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x7c>
   1fa10:	8aba                	c.mv	s5,a4
   1fa12:	0000e797          	auipc	a5,0xe
   1fa16:	2967b783          	ld	a5,662(a5) # 2dca8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   1fa1a:	00e7f363          	bgeu	a5,a4,1fa20 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x5e>
   1fa1e:	8abe                	c.mv	s5,a5
    { return __lhs.base() - __rhs.base(); }
   1fa20:	41340c33          	sub	s8,s0,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1fa24:	4901                	c.li	s2,0
   1fa26:	cb0d                	c.beqz	a4,1fa58 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x96>
   1fa28:	a00d                	c.j	1fa4a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x88>
	  __throw_length_error(__N(__s));
   1fa2a:	0000e517          	auipc	a0,0xe
   1fa2e:	93e50513          	addi	a0,a0,-1730 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1fa32:	9aff60ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   1fa36:	4705                	c.li	a4,1
   1fa38:	bfc9                	c.j	1fa0a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x48>
      _ForwardIterator __cur = __result;
   1fa3a:	8b4a                	c.mv	s6,s2
   1fa3c:	a895                	c.j	1fab0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xee>
   1fa3e:	41340c33          	sub	s8,s0,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1fa42:	0000ea97          	auipc	s5,0xe
   1fa46:	266aba83          	ld	s5,614(s5) # 2dca8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1fa4a:	001a9513          	slli	a0,s5,0x1
   1fa4e:	9556                	c.add	a0,s5
   1fa50:	050a                	c.slli	a0,0x2
   1fa52:	a6ff60ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1fa56:	892a                	c.mv	s2,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1fa58:	018907b3          	add	a5,s2,s8
   1fa5c:	000b2703          	lw	a4,0(s6)
   1fa60:	c398                	c.sw	a4,0(a5)
   1fa62:	004b2703          	lw	a4,4(s6)
   1fa66:	c3d8                	c.sw	a4,4(a5)
   1fa68:	008b2703          	lw	a4,8(s6)
   1fa6c:	c798                	c.sw	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1fa6e:	fd3b86e3          	beq	s7,s3,1fa3a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x78>
      _ForwardIterator __cur = __result;
   1fa72:	874a                	c.mv	a4,s2
      for (; __first != __last; ++__first, (void)++__cur)
   1fa74:	87ce                	c.mv	a5,s3
   1fa76:	4394                	c.lw	a3,0(a5)
   1fa78:	c314                	c.sw	a3,0(a4)
   1fa7a:	43d4                	c.lw	a3,4(a5)
   1fa7c:	c354                	c.sw	a3,4(a4)
   1fa7e:	4794                	c.lw	a3,8(a5)
   1fa80:	c714                	c.sw	a3,8(a4)
   1fa82:	07b1                	c.addi	a5,12
   1fa84:	0731                	c.addi	a4,12
   1fa86:	ff7798e3          	bne	a5,s7,1fa76 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xb4>
   1fa8a:	ff440793          	addi	a5,s0,-12
   1fa8e:	413787b3          	sub	a5,a5,s3
   1fa92:	8389                	c.srli	a5,0x2
   1fa94:	0000e717          	auipc	a4,0xe
   1fa98:	20c73703          	ld	a4,524(a4) # 2dca0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   1fa9c:	02e787b3          	mul	a5,a5,a4
   1faa0:	078a                	c.slli	a5,0x2
   1faa2:	8389                	c.srli	a5,0x2
   1faa4:	0785                	c.addi	a5,1
   1faa6:	00179b13          	slli	s6,a5,0x1
   1faaa:	9b3e                	c.add	s6,a5
   1faac:	0b0a                	c.slli	s6,0x2
   1faae:	9b4a                	c.add	s6,s2
	      ++__new_finish;
   1fab0:	0b31                	c.addi	s6,12
   1fab2:	049b8063          	beq	s7,s1,1faf2 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x130>
   1fab6:	87a2                	c.mv	a5,s0
      _ForwardIterator __cur = __result;
   1fab8:	875a                	c.mv	a4,s6
   1faba:	4394                	c.lw	a3,0(a5)
   1fabc:	c314                	c.sw	a3,0(a4)
   1fabe:	43d4                	c.lw	a3,4(a5)
   1fac0:	c354                	c.sw	a3,4(a4)
   1fac2:	4794                	c.lw	a3,8(a5)
   1fac4:	c714                	c.sw	a3,8(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1fac6:	07b1                	c.addi	a5,12
   1fac8:	0731                	c.addi	a4,12
   1faca:	fe9798e3          	bne	a5,s1,1faba <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xf8>
   1face:	408487b3          	sub	a5,s1,s0
   1fad2:	17d1                	c.addi	a5,-12
   1fad4:	8389                	c.srli	a5,0x2
   1fad6:	0000e717          	auipc	a4,0xe
   1fada:	1ca73703          	ld	a4,458(a4) # 2dca0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   1fade:	02e787b3          	mul	a5,a5,a4
   1fae2:	078a                	c.slli	a5,0x2
   1fae4:	8389                	c.srli	a5,0x2
   1fae6:	0785                	c.addi	a5,1
   1fae8:	00179713          	slli	a4,a5,0x1
   1faec:	97ba                	c.add	a5,a4
   1faee:	078a                	c.slli	a5,0x2
   1faf0:	9b3e                	c.add	s6,a5
	if (__p)
   1faf2:	00098563          	beq	s3,zero,1fafc <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x13a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1faf6:	854e                	c.mv	a0,s3
   1faf8:	9b9f60ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1fafc:	012a3023          	sd	s2,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1fb00:	016a3423          	sd	s6,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1fb04:	001a9793          	slli	a5,s5,0x1
   1fb08:	97d6                	c.add	a5,s5
   1fb0a:	078a                	c.slli	a5,0x2
   1fb0c:	993e                	c.add	s2,a5
   1fb0e:	012a3823          	sd	s2,16(s4)
    }
   1fb12:	60a6                	c.ldsp	ra,72(sp)
   1fb14:	6406                	c.ldsp	s0,64(sp)
   1fb16:	74e2                	c.ldsp	s1,56(sp)
   1fb18:	7942                	c.ldsp	s2,48(sp)
   1fb1a:	79a2                	c.ldsp	s3,40(sp)
   1fb1c:	7a02                	c.ldsp	s4,32(sp)
   1fb1e:	6ae2                	c.ldsp	s5,24(sp)
   1fb20:	6b42                	c.ldsp	s6,16(sp)
   1fb22:	6ba2                	c.ldsp	s7,8(sp)
   1fb24:	6c02                	c.ldsp	s8,0(sp)
   1fb26:	6161                	c.addi16sp	sp,80
   1fb28:	8082                	c.jr	ra

000000000001fb2a <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>:
DWARFPP_BEGIN_NAMESPACE

expr_context no_expr_context;

expr::expr(const unit *cu, section_offset offset, section_length len)
    : cu(cu), offset(offset), len(len) {}
   1fb2a:	e10c                	c.sd	a1,0(a0)
   1fb2c:	e510                	c.sd	a2,8(a0)
   1fb2e:	e914                	c.sd	a3,16(a0)
   1fb30:	8082                	c.jr	ra

000000000001fb32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>:
  return evaluate(ctx, {argument});
}

expr_result
expr::evaluate(expr_context *ctx,
               const std::initializer_list<taddr> &arguments) const {
   1fb32:	7169                	c.addi16sp	sp,-304
   1fb34:	f606                	c.sdsp	ra,296(sp)
   1fb36:	f222                	c.sdsp	s0,288(sp)
   1fb38:	ee26                	c.sdsp	s1,280(sp)
   1fb3a:	ea4a                	c.sdsp	s2,272(sp)
   1fb3c:	e64e                	c.sdsp	s3,264(sp)
   1fb3e:	e252                	c.sdsp	s4,256(sp)
   1fb40:	fdd6                	c.sdsp	s5,248(sp)
   1fb42:	f9da                	c.sdsp	s6,240(sp)
   1fb44:	f5de                	c.sdsp	s7,232(sp)
   1fb46:	f1e2                	c.sdsp	s8,224(sp)
   1fb48:	ede6                	c.sdsp	s9,216(sp)
   1fb4a:	e9ea                	c.sdsp	s10,208(sp)
   1fb4c:	e5ee                	c.sdsp	s11,200(sp)
   1fb4e:	8aaa                	c.mv	s5,a0
   1fb50:	892e                	c.mv	s2,a1
   1fb52:	8b32                	c.mv	s6,a2
   1fb54:	89b6                	c.mv	s3,a3
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1fb56:	10bc                	c.addi4spn	a5,sp,104
   1fb58:	f53e                	c.sdsp	a5,168(sp)
   1fb5a:	f93e                	c.sdsp	a5,176(sp)
   1fb5c:	113c                	c.addi4spn	a5,sp,168
   1fb5e:	fd3e                	c.sdsp	a5,184(sp)
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
   1fb60:	6698                	c.ld	a4,8(a3)
    if (n <= (size_type)(cap - base))
   1fb62:	47a1                	c.li	a5,8
   1fb64:	04e7f363          	bgeu	a5,a4,1fbaa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x78>
      target <<= 1;
   1fb68:	0786                	c.slli	a5,0x1
    while (target < n)
   1fb6a:	fee7efe3          	bltu	a5,a4,1fb68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x36>
    char *newbuf = new char[sizeof(T[target])];
   1fb6e:	00379413          	slli	s0,a5,0x3
   1fb72:	8522                	c.mv	a0,s0
   1fb74:	f6cf60ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1fb78:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   1fb7a:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1fb7c:	774a                	c.ldsp	a4,176(sp)
   1fb7e:	04e57263          	bgeu	a0,a4,1fbc2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x90>
    T *src = base, *dest = (T *)newbuf;
   1fb82:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1fb84:	07a1                	c.addi	a5,8
   1fb86:	fee7efe3          	bltu	a5,a4,1fb84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x52>
   1fb8a:	fff70493          	addi	s1,a4,-1
   1fb8e:	8c89                	c.sub	s1,a0
   1fb90:	98e1                	c.andi	s1,-8
   1fb92:	04a1                	c.addi	s1,8
   1fb94:	94d2                	c.add	s1,s4
    if ((char *)base != buf)
   1fb96:	10bc                	c.addi4spn	a5,sp,104
   1fb98:	00f50563          	beq	a0,a5,1fba2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70>
      delete[] (char *)base;
   1fb9c:	c119                	c.beqz	a0,1fba2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70>
   1fb9e:	9c3f60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1fba2:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   1fba4:	f926                	c.sdsp	s1,176(sp)
    cap = base + target;
   1fba6:	9a22                	c.add	s4,s0
   1fba8:	fd52                	c.sdsp	s4,184(sp)

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   1fbaa:	0009b783          	ld	a5,0(s3)

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   1fbae:	0089b483          	ld	s1,8(s3)
   1fbb2:	048e                	c.slli	s1,0x3
  small_vector<taddr, 8> stack;

  // Create the initial stack.  arguments are in reverse order
  // (that is, element 0 is TOS), so reverse it.
  stack.reserve(arguments.size());
  for (const taddr *elt = arguments.end() - 1; elt >= arguments.begin(); elt--)
   1fbb4:	14e1                	c.addi	s1,-8
   1fbb6:	94be                	c.add	s1,a5
   1fbb8:	08f4e563          	bltu	s1,a5,1fc42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110>
    if ((char *)base != buf)
   1fbbc:	06810a13          	addi	s4,sp,104
   1fbc0:	a881                	c.j	1fc10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde>
    T *src = base, *dest = (T *)newbuf;
   1fbc2:	84d2                	c.mv	s1,s4
   1fbc4:	bfc9                	c.j	1fb96 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x64>
    char *newbuf = new char[sizeof(T[target])];
   1fbc6:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1fbc8:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1fbca:	774a                	c.ldsp	a4,176(sp)
   1fbcc:	06e57963          	bgeu	a0,a4,1fc3e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10c>
    T *src = base, *dest = (T *)newbuf;
   1fbd0:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1fbd2:	07a1                	c.addi	a5,8
   1fbd4:	fee7efe3          	bltu	a5,a4,1fbd2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa0>
   1fbd8:	fff70b93          	addi	s7,a4,-1
   1fbdc:	40ab8bb3          	sub	s7,s7,a0
   1fbe0:	ff8bfb93          	andi	s7,s7,-8
   1fbe4:	0ba1                	c.addi	s7,8
   1fbe6:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1fbe8:	01450563          	beq	a0,s4,1fbf2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc0>
      delete[] (char *)base;
   1fbec:	c119                	c.beqz	a0,1fbf2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc0>
   1fbee:	973f60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1fbf2:	f562                	c.sdsp	s8,168(sp)
    end = dest;
   1fbf4:	f95e                	c.sdsp	s7,176(sp)
    cap = base + target;
   1fbf6:	9c22                	c.add	s8,s0
   1fbf8:	fd62                	c.sdsp	s8,184(sp)
    new (end) T(x);
   1fbfa:	6098                	c.ld	a4,0(s1)
   1fbfc:	77ca                	c.ldsp	a5,176(sp)
   1fbfe:	e398                	c.sd	a4,0(a5)
    end++;
   1fc00:	77ca                	c.ldsp	a5,176(sp)
   1fc02:	07a1                	c.addi	a5,8
   1fc04:	f93e                	c.sdsp	a5,176(sp)
   1fc06:	14e1                	c.addi	s1,-8
   1fc08:	0009b783          	ld	a5,0(s3)
   1fc0c:	02f4eb63          	bltu	s1,a5,1fc42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110>
  size_type size() const { return end - base; }
   1fc10:	772a                	c.ldsp	a4,168(sp)
   1fc12:	77ca                	c.ldsp	a5,176(sp)
   1fc14:	8f99                	c.sub	a5,a4
   1fc16:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   1fc18:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   1fc1a:	756a                	c.ldsp	a0,184(sp)
   1fc1c:	8d19                	c.sub	a0,a4
   1fc1e:	850d                	c.srai	a0,0x3
   1fc20:	fcf57de3          	bgeu	a0,a5,1fbfa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc8>
   1fc24:	e111                	c.bnez	a0,1fc28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf6>
   1fc26:	4505                	c.li	a0,1
    while (target < n)
   1fc28:	00f57563          	bgeu	a0,a5,1fc32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x100>
      target <<= 1;
   1fc2c:	0506                	c.slli	a0,0x1
    while (target < n)
   1fc2e:	fef56fe3          	bltu	a0,a5,1fc2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfa>
    char *newbuf = new char[sizeof(T[target])];
   1fc32:	00351413          	slli	s0,a0,0x3
   1fc36:	8522                	c.mv	a0,s0
   1fc38:	ea8f60ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1fc3c:	b769                	c.j	1fbc6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x94>
    T *src = base, *dest = (T *)newbuf;
   1fc3e:	8be2                	c.mv	s7,s8
   1fc40:	b765                	c.j	1fbe8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb6>
    stack.push_back(*elt);

  // Create a subsection for just this expression so we can
  // easily detect the end (including premature end).
  auto cusec = cu->data();
   1fc42:	00093503          	ld	a0,0(s2)
   1fc46:	c98f70ef          	jal	ra,170de <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fc4a:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1fc4e:	00853b83          	ld	s7,8(a0)
	if (_M_pi != nullptr)
   1fc52:	000b8e63          	beq	s7,zero,1fc6e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13c>
    if (__is_single_threaded())
   1fc56:	0001a797          	auipc	a5,0x1a
   1fc5a:	8227b783          	ld	a5,-2014(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc5e:	0007c783          	lbu	a5,0(a5)
   1fc62:	c385                	c.beqz	a5,1fc82 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x150>
  { *__mem += __val; }
   1fc64:	030ba783          	lw	a5,48(s7)
   1fc68:	2785                	c.addiw	a5,1
   1fc6a:	02fba823          	sw	a5,48(s7)
  shared_ptr<section> subsec(
      make_shared<section>(cusec->type, cusec->begin + offset, len, cusec->ord,
   1fc6e:	0089b403          	ld	s0,8(s3)
   1fc72:	00893783          	ld	a5,8(s2)
   1fc76:	943e                	c.add	s0,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1fc78:	06000513          	addi	a0,zero,96
   1fc7c:	845f60ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   1fc80:	a039                	c.j	1fc8e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15c>
      __atomic_add(__mem, __val);
   1fc82:	4585                	c.li	a1,1
   1fc84:	030b8513          	addi	a0,s7,48
   1fc88:	e78f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fc8c:	b7cd                	c.j	1fc6e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13c>
   1fc8e:	84aa                	c.mv	s1,a0
   1fc90:	00052423          	sw	zero,8(a0)
   1fc94:	00052623          	sw	zero,12(a0)
   1fc98:	00052823          	sw	zero,16(a0)
   1fc9c:	00052a23          	sw	zero,20(a0)
   1fca0:	00052c23          	sw	zero,24(a0)
   1fca4:	00052e23          	sw	zero,28(a0)
   1fca8:	02053023          	sd	zero,32(a0)
   1fcac:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1fcb0:	4785                	c.li	a5,1
   1fcb2:	d91c                	c.sw	a5,48(a0)
   1fcb4:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1fcb6:	0001a797          	auipc	a5,0x1a
   1fcba:	9027b783          	ld	a5,-1790(a5) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   1fcbe:	07c1                	c.addi	a5,16
   1fcc0:	e11c                	c.sd	a5,0(a0)
   1fcc2:	0009a583          	lw	a1,0(s3)
   1fcc6:	01093603          	ld	a2,16(s2)
   1fcca:	01c9a703          	lw	a4,28(s3)
   1fcce:	0189a683          	lw	a3,24(s3)
   1fcd2:	0209a783          	lw	a5,32(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1fcd6:	dd0c                	c.sw	a1,56(a0)
   1fcd8:	e120                	c.sd	s0,64(a0)
   1fcda:	9432                	c.add	s0,a2
   1fcdc:	e520                	c.sd	s0,72(a0)
   1fcde:	c934                	c.sw	a3,80(a0)
        ord(ord), addr_size(addr_size) {}
   1fce0:	c978                	c.sw	a4,84(a0)
   1fce2:	cd3c                	c.sw	a5,88(a0)
   1fce4:	03850c13          	addi	s8,a0,56
    if (__is_single_threaded())
   1fce8:	00019797          	auipc	a5,0x19
   1fcec:	7907b783          	ld	a5,1936(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fcf0:	0007c783          	lbu	a5,0(a5)
   1fcf4:	10078863          	beq	a5,zero,1fe04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2d2>
  { *__mem += __val; }
   1fcf8:	4789                	c.li	a5,2
   1fcfa:	d91c                	c.sw	a5,48(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fcfc:	e8e2                	c.sdsp	s8,80(sp)
      : _M_pi(__r._M_pi)
   1fcfe:	eca6                	c.sdsp	s1,88(sp)
    if (__is_single_threaded())
   1fd00:	00019797          	auipc	a5,0x19
   1fd04:	7787b783          	ld	a5,1912(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fd08:	0007c783          	lbu	a5,0(a5)
   1fd0c:	10078263          	beq	a5,zero,1fe10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2de>
  { *__mem += __val; }
   1fd10:	589c                	c.lw	a5,48(s1)
   1fd12:	2785                	c.addiw	a5,1
   1fd14:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1fd16:	60bc                	c.ld	a5,64(s1)
   1fd18:	f0be                	c.sdsp	a5,96(sp)
    if (__is_single_threaded())
   1fd1a:	00019797          	auipc	a5,0x19
   1fd1e:	75e7b783          	ld	a5,1886(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fd22:	0007c783          	lbu	a5,0(a5)
   1fd26:	0e078b63          	beq	a5,zero,1fe1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2ea>
    _Atomic_word __result = *__mem;
   1fd2a:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1fd2c:	fff5079b          	addiw	a5,a0,-1
   1fd30:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fd32:	4785                	c.li	a5,1
   1fd34:	0ef50a63          	beq	a0,a5,1fe28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2f6>
  bool end() const { return pos >= sec->end; }
   1fd38:	67c6                	c.ldsp	a5,80(sp)
  // create the result directly, rather than using the top of
  // stack.
  expr_result result;

  // 2.6.1.1.4 Empty location descriptions
  if (cur.end()) {
   1fd3a:	6b98                	c.ld	a4,16(a5)
   1fd3c:	7786                	c.ldsp	a5,96(sp)
   1fd3e:	12e7e563          	bltu	a5,a4,1fe68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x336>
    result.location_type = expr_result::type::empty;
   1fd42:	4791                	c.li	a5,4
   1fd44:	00faa023          	sw	a5,0(s5)
    result.value = 0;
   1fd48:	000ab423          	sd	zero,8(s5)
	if (_M_pi != nullptr)
   1fd4c:	6466                	c.ldsp	s0,88(sp)
   1fd4e:	c01d                	c.beqz	s0,1fd74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
    if (__is_single_threaded())
   1fd50:	00019797          	auipc	a5,0x19
   1fd54:	7287b783          	ld	a5,1832(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fd58:	0007c783          	lbu	a5,0(a5)
   1fd5c:	e399                	c.bnez	a5,1fd62 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x230>
   1fd5e:	6100106f          	jal	zero,2136e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x183c>
    _Atomic_word __result = *__mem;
   1fd62:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1fd64:	fff5079b          	addiw	a5,a0,-1
   1fd68:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fd6a:	4785                	c.li	a5,1
   1fd6c:	00f51463          	bne	a0,a5,1fd74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
   1fd70:	60c0106f          	jal	zero,2137c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x184a>
    if (__is_single_threaded())
   1fd74:	00019797          	auipc	a5,0x19
   1fd78:	7047b783          	ld	a5,1796(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fd7c:	0007c783          	lbu	a5,0(a5)
   1fd80:	e399                	c.bnez	a5,1fd86 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x254>
   1fd82:	6400106f          	jal	zero,213c2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1890>
    _Atomic_word __result = *__mem;
   1fd86:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1fd88:	fff5079b          	addiw	a5,a0,-1
   1fd8c:	d89c                	c.sw	a5,48(s1)
   1fd8e:	4785                	c.li	a5,1
   1fd90:	00f51463          	bne	a0,a5,1fd98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
   1fd94:	63c0106f          	jal	zero,213d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x189e>
	if (_M_pi != nullptr)
   1fd98:	020b8663          	beq	s7,zero,1fdc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
    if (__is_single_threaded())
   1fd9c:	00019797          	auipc	a5,0x19
   1fda0:	6dc7b783          	ld	a5,1756(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fda4:	0007c783          	lbu	a5,0(a5)
   1fda8:	e399                	c.bnez	a5,1fdae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x27c>
   1fdaa:	66c0106f          	jal	zero,21416 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18e4>
    _Atomic_word __result = *__mem;
   1fdae:	030ba503          	lw	a0,48(s7)
    *__mem += __val;
   1fdb2:	fff5079b          	addiw	a5,a0,-1
   1fdb6:	02fba823          	sw	a5,48(s7)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fdba:	4785                	c.li	a5,1
   1fdbc:	00f51463          	bne	a0,a5,1fdc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
   1fdc0:	6640106f          	jal	zero,21424 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18f2>
    for (T *p = base; p < end; ++p)
   1fdc4:	752a                	c.ldsp	a0,168(sp)
   1fdc6:	77ca                	c.ldsp	a5,176(sp)
   1fdc8:	00f57763          	bgeu	a0,a5,1fdd6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2a4>
   1fdcc:	87aa                	c.mv	a5,a0
   1fdce:	07a1                	c.addi	a5,8
   1fdd0:	774a                	c.ldsp	a4,176(sp)
   1fdd2:	fee7eee3          	bltu	a5,a4,1fdce <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x29c>
    end = base;
   1fdd6:	f92a                	c.sdsp	a0,176(sp)
    if ((char *)base != buf)
   1fdd8:	10bc                	c.addi4spn	a5,sp,104
   1fdda:	00f50563          	beq	a0,a5,1fde4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2b2>
      delete[] (char *)base;
   1fdde:	c119                	c.beqz	a0,1fde4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2b2>
   1fde0:	f80f60ef          	jal	ra,16560 <operator delete[](void*)@plt>

  return result;

underflow:
  throw expr_error("stack underflow evaluating DWARF expression");
}
   1fde4:	8556                	c.mv	a0,s5
   1fde6:	70b2                	c.ldsp	ra,296(sp)
   1fde8:	7412                	c.ldsp	s0,288(sp)
   1fdea:	64f2                	c.ldsp	s1,280(sp)
   1fdec:	6952                	c.ldsp	s2,272(sp)
   1fdee:	69b2                	c.ldsp	s3,264(sp)
   1fdf0:	6a12                	c.ldsp	s4,256(sp)
   1fdf2:	7aee                	c.ldsp	s5,248(sp)
   1fdf4:	7b4e                	c.ldsp	s6,240(sp)
   1fdf6:	7bae                	c.ldsp	s7,232(sp)
   1fdf8:	7c0e                	c.ldsp	s8,224(sp)
   1fdfa:	6cee                	c.ldsp	s9,216(sp)
   1fdfc:	6d4e                	c.ldsp	s10,208(sp)
   1fdfe:	6dae                	c.ldsp	s11,200(sp)
   1fe00:	6155                	c.addi16sp	sp,304
   1fe02:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   1fe04:	4585                	c.li	a1,1
   1fe06:	03050513          	addi	a0,a0,48
   1fe0a:	cf6f60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fe0e:	b5fd                	c.j	1fcfc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ca>
   1fe10:	4585                	c.li	a1,1
   1fe12:	03048513          	addi	a0,s1,48
   1fe16:	ceaf60ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fe1a:	bdf5                	c.j	1fd16 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   1fe1c:	55fd                	c.li	a1,-1
   1fe1e:	03048513          	addi	a0,s1,48
   1fe22:	d0ef60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fe26:	b731                	c.j	1fd32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x200>
	_M_dispose();
   1fe28:	609c                	c.ld	a5,0(s1)
   1fe2a:	6b9c                	c.ld	a5,16(a5)
   1fe2c:	8526                	c.mv	a0,s1
   1fe2e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fe30:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fe34:	00019797          	auipc	a5,0x19
   1fe38:	6447b783          	ld	a5,1604(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fe3c:	0007c783          	lbu	a5,0(a5)
   1fe40:	cf89                	c.beqz	a5,1fe5a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x328>
    _Atomic_word __result = *__mem;
   1fe42:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   1fe44:	fff7871b          	addiw	a4,a5,-1
   1fe48:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1fe4a:	4705                	c.li	a4,1
   1fe4c:	eee796e3          	bne	a5,a4,1fd38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x206>
	    _M_destroy();
   1fe50:	609c                	c.ld	a5,0(s1)
   1fe52:	6f9c                	c.ld	a5,24(a5)
   1fe54:	8526                	c.mv	a0,s1
   1fe56:	9782                	c.jalr	a5
   1fe58:	b5c5                	c.j	1fd38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x206>
      return __exchange_and_add(__mem, __val);
   1fe5a:	55fd                	c.li	a1,-1
   1fe5c:	03448513          	addi	a0,s1,52
   1fe60:	cd0f60ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fe64:	87aa                	c.mv	a5,a0
   1fe66:	b7d5                	c.j	1fe4a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x318>
  result.location_type = expr_result::type::address;
   1fe68:	000aa023          	sw	zero,0(s5)
    switch (op) {
   1fe6c:	0fc00993          	addi	s3,zero,252
   1fe70:	0000e417          	auipc	s0,0xe
   1fe74:	06840413          	addi	s0,s0,104 # 2ded8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x430>
    return ::__libc_single_threaded;
   1fe78:	00019d17          	auipc	s10,0x19
   1fe7c:	600d3d03          	ld	s10,1536(s10) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      CHECKN(2);
   1fe80:	4da1                	c.li	s11,8
  while (!cur.end()) {
   1fe82:	3db0006f          	jal	zero,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    while (pos < sec->end) {
   1fe86:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   1fe88:	4901                	c.li	s2,0
    int shift = 0;
   1fe8a:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1fe8c:	02f77663          	bgeu	a4,a5,1feb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x386>
      uint8_t byte = *(uint8_t *)(pos++);
   1fe90:	0705                	c.addi	a4,1
   1fe92:	f0ba                	c.sdsp	a4,96(sp)
   1fe94:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1fe98:	07f7f613          	andi	a2,a5,127
   1fe9c:	00b61633          	sll	a2,a2,a1
   1fea0:	00c96933          	or	s2,s2,a2
      if ((byte & 0x80) == 0)
   1fea4:	0187979b          	slliw	a5,a5,0x18
   1fea8:	4187d79b          	sraiw	a5,a5,0x18
   1feac:	0e07dbe3          	bge	a5,zero,207a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc70>
      shift += 7;
   1feb0:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1feb2:	6a9c                	c.ld	a5,16(a3)
   1feb4:	fcf76ee3          	bltu	a4,a5,1fe90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x35e>
    underflow();
   1feb8:	0888                	c.addi4spn	a0,sp,80
   1feba:	d7ffa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1febe:	0e30006f          	jal	zero,207a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc6e>
    while (pos < sec->end) {
   1fec2:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   1fec4:	4501                	c.li	a0,0
    int shift = 0;
   1fec6:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1fec8:	02f77563          	bgeu	a4,a5,1fef2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c0>
      uint8_t byte = *(uint8_t *)(pos++);
   1fecc:	0705                	c.addi	a4,1
   1fece:	f0ba                	c.sdsp	a4,96(sp)
   1fed0:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1fed4:	07f7f613          	andi	a2,a5,127
   1fed8:	00b61633          	sll	a2,a2,a1
   1fedc:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   1fede:	0187979b          	slliw	a5,a5,0x18
   1fee2:	4187d79b          	sraiw	a5,a5,0x18
   1fee6:	5a07dee3          	bge	a5,zero,20ca2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1170>
      shift += 7;
   1feea:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1feec:	6a9c                	c.ld	a5,16(a3)
   1feee:	fcf76fe3          	bltu	a4,a5,1fecc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x39a>
    underflow();
   1fef2:	0888                	c.addi4spn	a0,sp,80
   1fef4:	d45fa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1fef8:	5a90006f          	jal	zero,20ca0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x116e>
    while (pos < sec->end) {
   1fefc:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   1fefe:	4a01                	c.li	s4,0
    int shift = 0;
   1ff00:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1ff02:	02f77663          	bgeu	a4,a5,1ff2e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3fc>
      uint8_t byte = *(uint8_t *)(pos++);
   1ff06:	0705                	c.addi	a4,1
   1ff08:	f0ba                	c.sdsp	a4,96(sp)
   1ff0a:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1ff0e:	07f7f613          	andi	a2,a5,127
   1ff12:	00b61633          	sll	a2,a2,a1
   1ff16:	00ca6a33          	or	s4,s4,a2
      if ((byte & 0x80) == 0)
   1ff1a:	0187979b          	slliw	a5,a5,0x18
   1ff1e:	4187d79b          	sraiw	a5,a5,0x18
   1ff22:	6c07d263          	bge	a5,zero,205e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab4>
      shift += 7;
   1ff26:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1ff28:	6a9c                	c.ld	a5,16(a3)
   1ff2a:	fcf76ee3          	bltu	a4,a5,1ff06 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3d4>
    underflow();
   1ff2e:	0888                	c.addi4spn	a0,sp,80
   1ff30:	d09fa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   1ff34:	ad45                	c.j	205e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab2>
      stack.push_back((unsigned)op - (unsigned)DW_OP::lit0);
   1ff36:	fd09091b          	addiw	s2,s2,-48
   1ff3a:	1902                	c.slli	s2,0x20
   1ff3c:	02095913          	srli	s2,s2,0x20
  size_type size() const { return end - base; }
   1ff40:	772a                	c.ldsp	a4,168(sp)
   1ff42:	77ca                	c.ldsp	a5,176(sp)
   1ff44:	8f99                	c.sub	a5,a4
   1ff46:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   1ff48:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   1ff4a:	7a6a                	c.ldsp	s4,184(sp)
   1ff4c:	40ea0a33          	sub	s4,s4,a4
   1ff50:	403a5a13          	srai	s4,s4,0x3
   1ff54:	04fa7963          	bgeu	s4,a5,1ffa6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x474>
   1ff58:	000a1363          	bne	s4,zero,1ff5e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x42c>
   1ff5c:	4a05                	c.li	s4,1
    while (target < n)
   1ff5e:	00fa7563          	bgeu	s4,a5,1ff68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x436>
      target <<= 1;
   1ff62:	0a06                	c.slli	s4,0x1
    while (target < n)
   1ff64:	fefa6fe3          	bltu	s4,a5,1ff62 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x430>
    char *newbuf = new char[sizeof(T[target])];
   1ff68:	0a0e                	c.slli	s4,0x3
   1ff6a:	8552                	c.mv	a0,s4
   1ff6c:	b74f60ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1ff70:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   1ff72:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1ff74:	774a                	c.ldsp	a4,176(sp)
   1ff76:	04e57063          	bgeu	a0,a4,1ffb6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x484>
    T *src = base, *dest = (T *)newbuf;
   1ff7a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1ff7c:	07a1                	c.addi	a5,8
   1ff7e:	fee7efe3          	bltu	a5,a4,1ff7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x44a>
   1ff82:	fff70793          	addi	a5,a4,-1
   1ff86:	8f89                	c.sub	a5,a0
   1ff88:	9be1                	c.andi	a5,-8
   1ff8a:	07a1                	c.addi	a5,8
   1ff8c:	97e6                	c.add	a5,s9
   1ff8e:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   1ff90:	10bc                	c.addi4spn	a5,sp,104
   1ff92:	00f50563          	beq	a0,a5,1ff9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x46a>
      delete[] (char *)base;
   1ff96:	c119                	c.beqz	a0,1ff9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x46a>
   1ff98:	dc8f60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1ff9c:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   1ff9e:	67a2                	c.ldsp	a5,8(sp)
   1ffa0:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   1ffa2:	9cd2                	c.add	s9,s4
   1ffa4:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   1ffa6:	77ca                	c.ldsp	a5,176(sp)
   1ffa8:	0127b023          	sd	s2,0(a5)
    end++;
   1ffac:	77ca                	c.ldsp	a5,176(sp)
   1ffae:	07a1                	c.addi	a5,8
   1ffb0:	f93e                	c.sdsp	a5,176(sp)
      break;
   1ffb2:	2ab0006f          	jal	zero,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   1ffb6:	e466                	c.sdsp	s9,8(sp)
   1ffb8:	bfe1                	c.j	1ff90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x45e>
      stack.push_back(cur.address());
   1ffba:	0888                	c.addi4spn	a0,sp,80
   1ffbc:	00019317          	auipc	t1,0x19
   1ffc0:	3b433303          	ld	t1,948(t1) # 39370 <dwarf::cursor::address()@@Base+0x1a27a>
   1ffc4:	9302                	c.jalr	t1
   1ffc6:	e42a                	c.sdsp	a0,8(sp)
  size_type size() const { return end - base; }
   1ffc8:	772a                	c.ldsp	a4,168(sp)
   1ffca:	77ca                	c.ldsp	a5,176(sp)
   1ffcc:	8f99                	c.sub	a5,a4
   1ffce:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   1ffd0:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   1ffd2:	796a                	c.ldsp	s2,184(sp)
   1ffd4:	40e90933          	sub	s2,s2,a4
   1ffd8:	40395913          	srai	s2,s2,0x3
   1ffdc:	04f97963          	bgeu	s2,a5,2002e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4fc>
   1ffe0:	00091363          	bne	s2,zero,1ffe6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4b4>
   1ffe4:	4905                	c.li	s2,1
    while (target < n)
   1ffe6:	00f97563          	bgeu	s2,a5,1fff0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4be>
      target <<= 1;
   1ffea:	0906                	c.slli	s2,0x1
    while (target < n)
   1ffec:	fef96fe3          	bltu	s2,a5,1ffea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4b8>
    char *newbuf = new char[sizeof(T[target])];
   1fff0:	090e                	c.slli	s2,0x3
   1fff2:	854a                	c.mv	a0,s2
   1fff4:	aecf60ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   1fff8:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   1fffa:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1fffc:	774a                	c.ldsp	a4,176(sp)
   1fffe:	04e57063          	bgeu	a0,a4,2003e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x50c>
    T *src = base, *dest = (T *)newbuf;
   20002:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20004:	07a1                	c.addi	a5,8
   20006:	fee7efe3          	bltu	a5,a4,20004 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4d2>
   2000a:	fff70a13          	addi	s4,a4,-1
   2000e:	40aa0a33          	sub	s4,s4,a0
   20012:	ff8a7a13          	andi	s4,s4,-8
   20016:	0a21                	c.addi	s4,8
   20018:	9a66                	c.add	s4,s9
    if ((char *)base != buf)
   2001a:	10bc                	c.addi4spn	a5,sp,104
   2001c:	00f50563          	beq	a0,a5,20026 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
      delete[] (char *)base;
   20020:	c119                	c.beqz	a0,20026 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
   20022:	d3ef60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20026:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20028:	f952                	c.sdsp	s4,176(sp)
    cap = base + target;
   2002a:	9cca                	c.add	s9,s2
   2002c:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2002e:	77ca                	c.ldsp	a5,176(sp)
   20030:	6722                	c.ldsp	a4,8(sp)
   20032:	e398                	c.sd	a4,0(a5)
    end++;
   20034:	77ca                	c.ldsp	a5,176(sp)
   20036:	07a1                	c.addi	a5,8
   20038:	f93e                	c.sdsp	a5,176(sp)
      break;
   2003a:	2230006f          	jal	zero,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2003e:	8a66                	c.mv	s4,s9
   20040:	bfe9                	c.j	2001a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4e8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20042:	6a9c                	c.ld	a5,16(a3)
   20044:	00f76563          	bltu	a4,a5,2004e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x51c>
      underflow();
   20048:	0888                	c.addi4spn	a0,sp,80
   2004a:	beffa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2004e:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20050:	6746                	c.ldsp	a4,80(sp)
   20052:	4f58                	c.lw	a4,28(a4)
   20054:	e319                	c.bnez	a4,2005a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x528>
   20056:	55a0106f          	jal	zero,215b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a7e>
        val = (val << 8) | (uint64_t)p[i];
   2005a:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2005e:	5560106f          	jal	zero,215b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a82>
    char *newbuf = new char[sizeof(T[target])];
   20062:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20064:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20066:	774a                	c.ldsp	a4,176(sp)
   20068:	04e57063          	bgeu	a0,a4,200a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x576>
    T *src = base, *dest = (T *)newbuf;
   2006c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2006e:	07a1                	c.addi	a5,8
   20070:	fee7efe3          	bltu	a5,a4,2006e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x53c>
   20074:	fff70793          	addi	a5,a4,-1
   20078:	8f89                	c.sub	a5,a0
   2007a:	9be1                	c.andi	a5,-8
   2007c:	07a1                	c.addi	a5,8
   2007e:	97d2                	c.add	a5,s4
   20080:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20082:	10bc                	c.addi4spn	a5,sp,104
   20084:	00f50563          	beq	a0,a5,2008e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x55c>
      delete[] (char *)base;
   20088:	c119                	c.beqz	a0,2008e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x55c>
   2008a:	cd6f60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2008e:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20090:	67a2                	c.ldsp	a5,8(sp)
   20092:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20094:	9a4a                	c.add	s4,s2
   20096:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   20098:	77ca                	c.ldsp	a5,176(sp)
   2009a:	0197b023          	sd	s9,0(a5)
    end++;
   2009e:	77ca                	c.ldsp	a5,176(sp)
   200a0:	07a1                	c.addi	a5,8
   200a2:	f93e                	c.sdsp	a5,176(sp)
      break;
   200a4:	1b90006f          	jal	zero,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   200a8:	e452                	c.sdsp	s4,8(sp)
   200aa:	bfe1                	c.j	20082 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x550>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   200ac:	6a9c                	c.ld	a5,16(a3)
   200ae:	40e78633          	sub	a2,a5,a4
   200b2:	4685                	c.li	a3,1
   200b4:	00c6f463          	bgeu	a3,a2,200bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x58a>
   200b8:	00f76563          	bltu	a4,a5,200c2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x590>
      underflow();
   200bc:	0888                	c.addi4spn	a0,sp,80
   200be:	b7bfa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   200c2:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   200c4:	6746                	c.ldsp	a4,80(sp)
   200c6:	4f58                	c.lw	a4,28(a4)
   200c8:	e339                	c.bnez	a4,2010e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5dc>
        val |= ((uint64_t)p[i]) << (i * 8);
   200ca:	0017ca03          	lbu	s4,1(a5)
   200ce:	0a22                	c.slli	s4,0x8
   200d0:	0007c703          	lbu	a4,0(a5)
   200d4:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   200d8:	0789                	c.addi	a5,2
   200da:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   200dc:	772a                	c.ldsp	a4,168(sp)
   200de:	77ca                	c.ldsp	a5,176(sp)
   200e0:	8f99                	c.sub	a5,a4
   200e2:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   200e4:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   200e6:	796a                	c.ldsp	s2,184(sp)
   200e8:	40e90933          	sub	s2,s2,a4
   200ec:	40395913          	srai	s2,s2,0x3
   200f0:	06f97263          	bgeu	s2,a5,20154 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x622>
   200f4:	00091363          	bne	s2,zero,200fa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5c8>
   200f8:	4905                	c.li	s2,1
    while (target < n)
   200fa:	00f97563          	bgeu	s2,a5,20104 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d2>
      target <<= 1;
   200fe:	0906                	c.slli	s2,0x1
    while (target < n)
   20100:	fef96fe3          	bltu	s2,a5,200fe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5cc>
    char *newbuf = new char[sizeof(T[target])];
   20104:	090e                	c.slli	s2,0x3
   20106:	854a                	c.mv	a0,s2
   20108:	9d8f60ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   2010c:	a809                	c.j	2011e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5ec>
        val = (val << 8) | (uint64_t)p[i];
   2010e:	0007ca03          	lbu	s4,0(a5)
   20112:	0a22                	c.slli	s4,0x8
   20114:	0017c703          	lbu	a4,1(a5)
   20118:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   2011c:	bf75                	c.j	200d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5a6>
   2011e:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20120:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20122:	774a                	c.ldsp	a4,176(sp)
   20124:	04e57063          	bgeu	a0,a4,20164 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x632>
    T *src = base, *dest = (T *)newbuf;
   20128:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2012a:	07a1                	c.addi	a5,8
   2012c:	fee7efe3          	bltu	a5,a4,2012a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5f8>
   20130:	fff70793          	addi	a5,a4,-1
   20134:	8f89                	c.sub	a5,a0
   20136:	9be1                	c.andi	a5,-8
   20138:	07a1                	c.addi	a5,8
   2013a:	97e6                	c.add	a5,s9
   2013c:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   2013e:	10bc                	c.addi4spn	a5,sp,104
   20140:	00f50563          	beq	a0,a5,2014a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x618>
      delete[] (char *)base;
   20144:	c119                	c.beqz	a0,2014a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x618>
   20146:	c1af60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2014a:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   2014c:	67a2                	c.ldsp	a5,8(sp)
   2014e:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20150:	9cca                	c.add	s9,s2
   20152:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20154:	77ca                	c.ldsp	a5,176(sp)
   20156:	0147b023          	sd	s4,0(a5)
    end++;
   2015a:	77ca                	c.ldsp	a5,176(sp)
   2015c:	07a1                	c.addi	a5,8
   2015e:	f93e                	c.sdsp	a5,176(sp)
      break;
   20160:	0fd0006f          	jal	zero,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20164:	e466                	c.sdsp	s9,8(sp)
   20166:	bfe1                	c.j	2013e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x60c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20168:	6a9c                	c.ld	a5,16(a3)
   2016a:	40e78633          	sub	a2,a5,a4
   2016e:	468d                	c.li	a3,3
   20170:	00c6f463          	bgeu	a3,a2,20178 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x646>
   20174:	00f76563          	bltu	a4,a5,2017e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x64c>
      underflow();
   20178:	0888                	c.addi4spn	a0,sp,80
   2017a:	abffa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2017e:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20180:	67c6                	c.ldsp	a5,80(sp)
   20182:	4fdc                	c.lw	a5,28(a5)
   20184:	efa9                	c.bnez	a5,201de <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6ac>
   20186:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20188:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   2018a:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   2018e:	0006c703          	lbu	a4,0(a3)
   20192:	00f71733          	sll	a4,a4,a5
   20196:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   2019a:	0685                	c.addi	a3,1
   2019c:	27a1                	c.addiw	a5,8
   2019e:	feb798e3          	bne	a5,a1,2018e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x65c>
    pos += sizeof(T);
   201a2:	0611                	c.addi	a2,4
   201a4:	f0b2                	c.sdsp	a2,96(sp)
   201a6:	1a02                	c.slli	s4,0x20
   201a8:	020a5a13          	srli	s4,s4,0x20
  size_type size() const { return end - base; }
   201ac:	772a                	c.ldsp	a4,168(sp)
   201ae:	77ca                	c.ldsp	a5,176(sp)
   201b0:	8f99                	c.sub	a5,a4
   201b2:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   201b4:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   201b6:	796a                	c.ldsp	s2,184(sp)
   201b8:	40e90933          	sub	s2,s2,a4
   201bc:	40395913          	srai	s2,s2,0x3
   201c0:	06f97763          	bgeu	s2,a5,2022e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
   201c4:	00091363          	bne	s2,zero,201ca <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x698>
   201c8:	4905                	c.li	s2,1
    while (target < n)
   201ca:	00f97563          	bgeu	s2,a5,201d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a2>
      target <<= 1;
   201ce:	0906                	c.slli	s2,0x1
    while (target < n)
   201d0:	fef96fe3          	bltu	s2,a5,201ce <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x69c>
    char *newbuf = new char[sizeof(T[target])];
   201d4:	090e                	c.slli	s2,0x3
   201d6:	854a                	c.mv	a0,s2
   201d8:	908f60ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   201dc:	a831                	c.j	201f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6c6>
   201de:	87b2                	c.mv	a5,a2
   201e0:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   201e4:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   201e6:	0a22                	c.slli	s4,0x8
   201e8:	0007c703          	lbu	a4,0(a5)
   201ec:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   201f0:	0785                	c.addi	a5,1
   201f2:	fef69ae3          	bne	a3,a5,201e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6b4>
   201f6:	b775                	c.j	201a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x670>
   201f8:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   201fa:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   201fc:	774a                	c.ldsp	a4,176(sp)
   201fe:	04e57063          	bgeu	a0,a4,2023e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70c>
    T *src = base, *dest = (T *)newbuf;
   20202:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20204:	07a1                	c.addi	a5,8
   20206:	fee7efe3          	bltu	a5,a4,20204 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6d2>
   2020a:	fff70793          	addi	a5,a4,-1
   2020e:	8f89                	c.sub	a5,a0
   20210:	9be1                	c.andi	a5,-8
   20212:	07a1                	c.addi	a5,8
   20214:	97e6                	c.add	a5,s9
   20216:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20218:	10bc                	c.addi4spn	a5,sp,104
   2021a:	00f50563          	beq	a0,a5,20224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6f2>
      delete[] (char *)base;
   2021e:	c119                	c.beqz	a0,20224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6f2>
   20220:	b40f60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20224:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20226:	67a2                	c.ldsp	a5,8(sp)
   20228:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2022a:	9cca                	c.add	s9,s2
   2022c:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2022e:	77ca                	c.ldsp	a5,176(sp)
   20230:	0147b023          	sd	s4,0(a5)
    end++;
   20234:	77ca                	c.ldsp	a5,176(sp)
   20236:	07a1                	c.addi	a5,8
   20238:	f93e                	c.sdsp	a5,176(sp)
      break;
   2023a:	0230006f          	jal	zero,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2023e:	e466                	c.sdsp	s9,8(sp)
   20240:	bfe1                	c.j	20218 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6e6>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20242:	6a9c                	c.ld	a5,16(a3)
   20244:	40e78633          	sub	a2,a5,a4
   20248:	469d                	c.li	a3,7
   2024a:	00c6f463          	bgeu	a3,a2,20252 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x720>
   2024e:	00f76563          	bltu	a4,a5,20258 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x726>
      underflow();
   20252:	0888                	c.addi4spn	a0,sp,80
   20254:	9e5fa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20258:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   2025a:	67c6                	c.ldsp	a5,80(sp)
   2025c:	4fdc                	c.lw	a5,28(a5)
   2025e:	ebb1                	c.bnez	a5,202b2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x780>
   20260:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20262:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20264:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   20268:	0006c703          	lbu	a4,0(a3)
   2026c:	00f71733          	sll	a4,a4,a5
   20270:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20274:	0685                	c.addi	a3,1
   20276:	27a1                	c.addiw	a5,8
   20278:	feb798e3          	bne	a5,a1,20268 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x736>
    pos += sizeof(T);
   2027c:	0621                	c.addi	a2,8
   2027e:	f0b2                	c.sdsp	a2,96(sp)
  size_type size() const { return end - base; }
   20280:	772a                	c.ldsp	a4,168(sp)
   20282:	77ca                	c.ldsp	a5,176(sp)
   20284:	8f99                	c.sub	a5,a4
   20286:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20288:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2028a:	796a                	c.ldsp	s2,184(sp)
   2028c:	40e90933          	sub	s2,s2,a4
   20290:	40395913          	srai	s2,s2,0x3
   20294:	06f97763          	bgeu	s2,a5,20302 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7d0>
   20298:	00091363          	bne	s2,zero,2029e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x76c>
   2029c:	4905                	c.li	s2,1
    while (target < n)
   2029e:	00f97563          	bgeu	s2,a5,202a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x776>
      target <<= 1;
   202a2:	0906                	c.slli	s2,0x1
    while (target < n)
   202a4:	fef96fe3          	bltu	s2,a5,202a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x770>
    char *newbuf = new char[sizeof(T[target])];
   202a8:	090e                	c.slli	s2,0x3
   202aa:	854a                	c.mv	a0,s2
   202ac:	834f60ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   202b0:	a831                	c.j	202cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x79a>
   202b2:	87b2                	c.mv	a5,a2
   202b4:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   202b8:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   202ba:	0a22                	c.slli	s4,0x8
   202bc:	0007c703          	lbu	a4,0(a5)
   202c0:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   202c4:	0785                	c.addi	a5,1
   202c6:	fed79ae3          	bne	a5,a3,202ba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x788>
   202ca:	bf4d                	c.j	2027c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x74a>
   202cc:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   202ce:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   202d0:	774a                	c.ldsp	a4,176(sp)
   202d2:	02e57f63          	bgeu	a0,a4,20310 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7de>
    T *src = base, *dest = (T *)newbuf;
   202d6:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   202d8:	07a1                	c.addi	a5,8
   202da:	fee7efe3          	bltu	a5,a4,202d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a6>
   202de:	fff70793          	addi	a5,a4,-1
   202e2:	8f89                	c.sub	a5,a0
   202e4:	9be1                	c.andi	a5,-8
   202e6:	07a1                	c.addi	a5,8
   202e8:	97e6                	c.add	a5,s9
   202ea:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   202ec:	10bc                	c.addi4spn	a5,sp,104
   202ee:	00f50563          	beq	a0,a5,202f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7c6>
      delete[] (char *)base;
   202f2:	c119                	c.beqz	a0,202f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7c6>
   202f4:	a6cf60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   202f8:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   202fa:	67a2                	c.ldsp	a5,8(sp)
   202fc:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   202fe:	9cca                	c.add	s9,s2
   20300:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20302:	77ca                	c.ldsp	a5,176(sp)
   20304:	0147b023          	sd	s4,0(a5)
    end++;
   20308:	77ca                	c.ldsp	a5,176(sp)
   2030a:	07a1                	c.addi	a5,8
   2030c:	f93e                	c.sdsp	a5,176(sp)
      break;
   2030e:	a7b9                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20310:	e466                	c.sdsp	s9,8(sp)
   20312:	bfe9                	c.j	202ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7ba>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20314:	6a9c                	c.ld	a5,16(a3)
   20316:	00f76563          	bltu	a4,a5,20320 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7ee>
      underflow();
   2031a:	0888                	c.addi4spn	a0,sp,80
   2031c:	91dfa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20320:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20322:	6746                	c.ldsp	a4,80(sp)
   20324:	4f58                	c.lw	a4,28(a4)
   20326:	e319                	c.bnez	a4,2032c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7fa>
   20328:	2c80106f          	jal	zero,215f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1abe>
        val = (val << 8) | (uint64_t)p[i];
   2032c:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20330:	2c40106f          	jal	zero,215f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ac2>
    char *newbuf = new char[sizeof(T[target])];
   20334:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20336:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20338:	774a                	c.ldsp	a4,176(sp)
   2033a:	02e57f63          	bgeu	a0,a4,20378 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x846>
    T *src = base, *dest = (T *)newbuf;
   2033e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20340:	07a1                	c.addi	a5,8
   20342:	fee7efe3          	bltu	a5,a4,20340 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x80e>
   20346:	fff70793          	addi	a5,a4,-1
   2034a:	8f89                	c.sub	a5,a0
   2034c:	9be1                	c.andi	a5,-8
   2034e:	07a1                	c.addi	a5,8
   20350:	97d2                	c.add	a5,s4
   20352:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20354:	10bc                	c.addi4spn	a5,sp,104
   20356:	00f50563          	beq	a0,a5,20360 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x82e>
      delete[] (char *)base;
   2035a:	c119                	c.beqz	a0,20360 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x82e>
   2035c:	a04f60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20360:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20362:	67a2                	c.ldsp	a5,8(sp)
   20364:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20366:	9a4a                	c.add	s4,s2
   20368:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   2036a:	77ca                	c.ldsp	a5,176(sp)
   2036c:	0197b023          	sd	s9,0(a5)
    end++;
   20370:	77ca                	c.ldsp	a5,176(sp)
   20372:	07a1                	c.addi	a5,8
   20374:	f93e                	c.sdsp	a5,176(sp)
      break;
   20376:	a5dd                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20378:	e452                	c.sdsp	s4,8(sp)
   2037a:	bfe9                	c.j	20354 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x822>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2037c:	6a9c                	c.ld	a5,16(a3)
   2037e:	40e78633          	sub	a2,a5,a4
   20382:	4685                	c.li	a3,1
   20384:	00c6f463          	bgeu	a3,a2,2038c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x85a>
   20388:	00f76563          	bltu	a4,a5,20392 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x860>
      underflow();
   2038c:	0888                	c.addi4spn	a0,sp,80
   2038e:	8abfa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20392:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20394:	6746                	c.ldsp	a4,80(sp)
   20396:	4f58                	c.lw	a4,28(a4)
   20398:	e739                	c.bnez	a4,203e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b4>
        val |= ((uint64_t)p[i]) << (i * 8);
   2039a:	0017ca03          	lbu	s4,1(a5)
   2039e:	0a22                	c.slli	s4,0x8
   203a0:	0007c703          	lbu	a4,0(a5)
   203a4:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   203a8:	0789                	c.addi	a5,2
   203aa:	f0be                	c.sdsp	a5,96(sp)
      stack.push_back(cur.fixed<int16_t>());
   203ac:	010a1a1b          	slliw	s4,s4,0x10
   203b0:	410a5a1b          	sraiw	s4,s4,0x10
  size_type size() const { return end - base; }
   203b4:	772a                	c.ldsp	a4,168(sp)
   203b6:	77ca                	c.ldsp	a5,176(sp)
   203b8:	8f99                	c.sub	a5,a4
   203ba:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   203bc:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   203be:	796a                	c.ldsp	s2,184(sp)
   203c0:	40e90933          	sub	s2,s2,a4
   203c4:	40395913          	srai	s2,s2,0x3
   203c8:	06f97263          	bgeu	s2,a5,2042c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8fa>
   203cc:	00091363          	bne	s2,zero,203d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a0>
   203d0:	4905                	c.li	s2,1
    while (target < n)
   203d2:	00f97563          	bgeu	s2,a5,203dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8aa>
      target <<= 1;
   203d6:	0906                	c.slli	s2,0x1
    while (target < n)
   203d8:	fef96fe3          	bltu	s2,a5,203d6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a4>
    char *newbuf = new char[sizeof(T[target])];
   203dc:	090e                	c.slli	s2,0x3
   203de:	854a                	c.mv	a0,s2
   203e0:	f01f50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   203e4:	a809                	c.j	203f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8c4>
        val = (val << 8) | (uint64_t)p[i];
   203e6:	0007ca03          	lbu	s4,0(a5)
   203ea:	0a22                	c.slli	s4,0x8
   203ec:	0017c703          	lbu	a4,1(a5)
   203f0:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   203f4:	bf55                	c.j	203a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x876>
   203f6:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   203f8:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   203fa:	774a                	c.ldsp	a4,176(sp)
   203fc:	02e57f63          	bgeu	a0,a4,2043a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x908>
    T *src = base, *dest = (T *)newbuf;
   20400:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20402:	07a1                	c.addi	a5,8
   20404:	fee7efe3          	bltu	a5,a4,20402 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8d0>
   20408:	fff70793          	addi	a5,a4,-1
   2040c:	8f89                	c.sub	a5,a0
   2040e:	9be1                	c.andi	a5,-8
   20410:	07a1                	c.addi	a5,8
   20412:	97e6                	c.add	a5,s9
   20414:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20416:	10bc                	c.addi4spn	a5,sp,104
   20418:	00f50563          	beq	a0,a5,20422 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8f0>
      delete[] (char *)base;
   2041c:	c119                	c.beqz	a0,20422 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8f0>
   2041e:	942f60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20422:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20424:	67a2                	c.ldsp	a5,8(sp)
   20426:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20428:	9cca                	c.add	s9,s2
   2042a:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2042c:	77ca                	c.ldsp	a5,176(sp)
   2042e:	0147b023          	sd	s4,0(a5)
    end++;
   20432:	77ca                	c.ldsp	a5,176(sp)
   20434:	07a1                	c.addi	a5,8
   20436:	f93e                	c.sdsp	a5,176(sp)
      break;
   20438:	a515                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2043a:	e466                	c.sdsp	s9,8(sp)
   2043c:	bfe9                	c.j	20416 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8e4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2043e:	6a9c                	c.ld	a5,16(a3)
   20440:	40e78633          	sub	a2,a5,a4
   20444:	468d                	c.li	a3,3
   20446:	00c6f463          	bgeu	a3,a2,2044e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x91c>
   2044a:	00f76563          	bltu	a4,a5,20454 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x922>
      underflow();
   2044e:	0888                	c.addi4spn	a0,sp,80
   20450:	fe8fa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20454:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20456:	67c6                	c.ldsp	a5,80(sp)
   20458:	4fdc                	c.lw	a5,28(a5)
   2045a:	ebb9                	c.bnez	a5,204b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x97e>
   2045c:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   2045e:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20460:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   20464:	0006c703          	lbu	a4,0(a3)
   20468:	00f71733          	sll	a4,a4,a5
   2046c:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20470:	0685                	c.addi	a3,1
   20472:	27a1                	c.addiw	a5,8
   20474:	feb798e3          	bne	a5,a1,20464 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x932>
    pos += sizeof(T);
   20478:	0611                	c.addi	a2,4
   2047a:	f0b2                	c.sdsp	a2,96(sp)
      stack.push_back(cur.fixed<int32_t>());
   2047c:	2a01                	c.addiw	s4,0
  size_type size() const { return end - base; }
   2047e:	772a                	c.ldsp	a4,168(sp)
   20480:	77ca                	c.ldsp	a5,176(sp)
   20482:	8f99                	c.sub	a5,a4
   20484:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20486:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20488:	796a                	c.ldsp	s2,184(sp)
   2048a:	40e90933          	sub	s2,s2,a4
   2048e:	40395913          	srai	s2,s2,0x3
   20492:	06f97763          	bgeu	s2,a5,20500 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9ce>
   20496:	00091363          	bne	s2,zero,2049c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x96a>
   2049a:	4905                	c.li	s2,1
    while (target < n)
   2049c:	00f97563          	bgeu	s2,a5,204a6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x974>
      target <<= 1;
   204a0:	0906                	c.slli	s2,0x1
    while (target < n)
   204a2:	fef96fe3          	bltu	s2,a5,204a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x96e>
    char *newbuf = new char[sizeof(T[target])];
   204a6:	090e                	c.slli	s2,0x3
   204a8:	854a                	c.mv	a0,s2
   204aa:	e37f50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   204ae:	a831                	c.j	204ca <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x998>
   204b0:	87b2                	c.mv	a5,a2
   204b2:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   204b6:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   204b8:	0a22                	c.slli	s4,0x8
   204ba:	0007c703          	lbu	a4,0(a5)
   204be:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   204c2:	0785                	c.addi	a5,1
   204c4:	fef69ae3          	bne	a3,a5,204b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x986>
   204c8:	bf45                	c.j	20478 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x946>
   204ca:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   204cc:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   204ce:	774a                	c.ldsp	a4,176(sp)
   204d0:	02e57f63          	bgeu	a0,a4,2050e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9dc>
    T *src = base, *dest = (T *)newbuf;
   204d4:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   204d6:	07a1                	c.addi	a5,8
   204d8:	fee7efe3          	bltu	a5,a4,204d6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9a4>
   204dc:	fff70793          	addi	a5,a4,-1
   204e0:	8f89                	c.sub	a5,a0
   204e2:	9be1                	c.andi	a5,-8
   204e4:	07a1                	c.addi	a5,8
   204e6:	97e6                	c.add	a5,s9
   204e8:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   204ea:	10bc                	c.addi4spn	a5,sp,104
   204ec:	00f50563          	beq	a0,a5,204f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9c4>
      delete[] (char *)base;
   204f0:	c119                	c.beqz	a0,204f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9c4>
   204f2:	86ef60ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   204f6:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   204f8:	67a2                	c.ldsp	a5,8(sp)
   204fa:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   204fc:	9cca                	c.add	s9,s2
   204fe:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20500:	77ca                	c.ldsp	a5,176(sp)
   20502:	0147b023          	sd	s4,0(a5)
    end++;
   20506:	77ca                	c.ldsp	a5,176(sp)
   20508:	07a1                	c.addi	a5,8
   2050a:	f93e                	c.sdsp	a5,176(sp)
      break;
   2050c:	ab81                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2050e:	e466                	c.sdsp	s9,8(sp)
   20510:	bfe9                	c.j	204ea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9b8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20512:	6a9c                	c.ld	a5,16(a3)
   20514:	40e78633          	sub	a2,a5,a4
   20518:	469d                	c.li	a3,7
   2051a:	00c6f463          	bgeu	a3,a2,20522 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9f0>
   2051e:	00f76563          	bltu	a4,a5,20528 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9f6>
      underflow();
   20522:	0888                	c.addi4spn	a0,sp,80
   20524:	f14fa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20528:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   2052a:	67c6                	c.ldsp	a5,80(sp)
   2052c:	4fdc                	c.lw	a5,28(a5)
   2052e:	ebb1                	c.bnez	a5,20582 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa50>
   20530:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20532:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20534:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   20538:	0006c703          	lbu	a4,0(a3)
   2053c:	00f71733          	sll	a4,a4,a5
   20540:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20544:	0685                	c.addi	a3,1
   20546:	27a1                	c.addiw	a5,8
   20548:	feb798e3          	bne	a5,a1,20538 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa06>
    pos += sizeof(T);
   2054c:	0621                	c.addi	a2,8
   2054e:	f0b2                	c.sdsp	a2,96(sp)
  size_type size() const { return end - base; }
   20550:	772a                	c.ldsp	a4,168(sp)
   20552:	77ca                	c.ldsp	a5,176(sp)
   20554:	8f99                	c.sub	a5,a4
   20556:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20558:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2055a:	796a                	c.ldsp	s2,184(sp)
   2055c:	40e90933          	sub	s2,s2,a4
   20560:	40395913          	srai	s2,s2,0x3
   20564:	06f97763          	bgeu	s2,a5,205d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaa0>
   20568:	00091363          	bne	s2,zero,2056e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa3c>
   2056c:	4905                	c.li	s2,1
    while (target < n)
   2056e:	00f97563          	bgeu	s2,a5,20578 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa46>
      target <<= 1;
   20572:	0906                	c.slli	s2,0x1
    while (target < n)
   20574:	fef96fe3          	bltu	s2,a5,20572 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa40>
    char *newbuf = new char[sizeof(T[target])];
   20578:	090e                	c.slli	s2,0x3
   2057a:	854a                	c.mv	a0,s2
   2057c:	d65f50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   20580:	a831                	c.j	2059c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa6a>
   20582:	87b2                	c.mv	a5,a2
   20584:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   20588:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   2058a:	0a22                	c.slli	s4,0x8
   2058c:	0007c703          	lbu	a4,0(a5)
   20590:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   20594:	0785                	c.addi	a5,1
   20596:	fed79ae3          	bne	a5,a3,2058a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa58>
   2059a:	bf4d                	c.j	2054c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa1a>
   2059c:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   2059e:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   205a0:	774a                	c.ldsp	a4,176(sp)
   205a2:	02e57f63          	bgeu	a0,a4,205e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaae>
    T *src = base, *dest = (T *)newbuf;
   205a6:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   205a8:	07a1                	c.addi	a5,8
   205aa:	fee7efe3          	bltu	a5,a4,205a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa76>
   205ae:	fff70793          	addi	a5,a4,-1
   205b2:	8f89                	c.sub	a5,a0
   205b4:	9be1                	c.andi	a5,-8
   205b6:	07a1                	c.addi	a5,8
   205b8:	97e6                	c.add	a5,s9
   205ba:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   205bc:	10bc                	c.addi4spn	a5,sp,104
   205be:	00f50563          	beq	a0,a5,205c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa96>
      delete[] (char *)base;
   205c2:	c119                	c.beqz	a0,205c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa96>
   205c4:	f9df50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   205c8:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   205ca:	67a2                	c.ldsp	a5,8(sp)
   205cc:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   205ce:	9cca                	c.add	s9,s2
   205d0:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   205d2:	77ca                	c.ldsp	a5,176(sp)
   205d4:	0147b023          	sd	s4,0(a5)
    end++;
   205d8:	77ca                	c.ldsp	a5,176(sp)
   205da:	07a1                	c.addi	a5,8
   205dc:	f93e                	c.sdsp	a5,176(sp)
      break;
   205de:	a9bd                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   205e0:	e466                	c.sdsp	s9,8(sp)
   205e2:	bfe9                	c.j	205bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa8a>
    return 0;
   205e4:	4a01                	c.li	s4,0
  size_type size() const { return end - base; }
   205e6:	772a                	c.ldsp	a4,168(sp)
   205e8:	77ca                	c.ldsp	a5,176(sp)
   205ea:	8f99                	c.sub	a5,a4
   205ec:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   205ee:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   205f0:	796a                	c.ldsp	s2,184(sp)
   205f2:	40e90933          	sub	s2,s2,a4
   205f6:	40395913          	srai	s2,s2,0x3
   205fa:	04f97963          	bgeu	s2,a5,2064c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb1a>
   205fe:	00091363          	bne	s2,zero,20604 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad2>
   20602:	4905                	c.li	s2,1
    while (target < n)
   20604:	00f97563          	bgeu	s2,a5,2060e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xadc>
      target <<= 1;
   20608:	0906                	c.slli	s2,0x1
    while (target < n)
   2060a:	fef96fe3          	bltu	s2,a5,20608 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad6>
    char *newbuf = new char[sizeof(T[target])];
   2060e:	090e                	c.slli	s2,0x3
   20610:	854a                	c.mv	a0,s2
   20612:	ccff50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   20616:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20618:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2061a:	774a                	c.ldsp	a4,176(sp)
   2061c:	02e57f63          	bgeu	a0,a4,2065a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb28>
    T *src = base, *dest = (T *)newbuf;
   20620:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20622:	07a1                	c.addi	a5,8
   20624:	fee7efe3          	bltu	a5,a4,20622 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaf0>
   20628:	fff70793          	addi	a5,a4,-1
   2062c:	8f89                	c.sub	a5,a0
   2062e:	9be1                	c.andi	a5,-8
   20630:	07a1                	c.addi	a5,8
   20632:	97e6                	c.add	a5,s9
   20634:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20636:	10bc                	c.addi4spn	a5,sp,104
   20638:	00f50563          	beq	a0,a5,20642 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb10>
      delete[] (char *)base;
   2063c:	c119                	c.beqz	a0,20642 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb10>
   2063e:	f23f50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20642:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20644:	67a2                	c.ldsp	a5,8(sp)
   20646:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20648:	9cca                	c.add	s9,s2
   2064a:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2064c:	77ca                	c.ldsp	a5,176(sp)
   2064e:	0147b023          	sd	s4,0(a5)
    end++;
   20652:	77ca                	c.ldsp	a5,176(sp)
   20654:	07a1                	c.addi	a5,8
   20656:	f93e                	c.sdsp	a5,176(sp)
      break;
   20658:	a111                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2065a:	e466                	c.sdsp	s9,8(sp)
   2065c:	bfe9                	c.j	20636 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb04>
      stack.push_back(cur.sleb128());
   2065e:	0888                	c.addi4spn	a0,sp,80
   20660:	e18fa0ef          	jal	ra,1ac78 <dwarf::cursor::sleb128()>
   20664:	e42a                	c.sdsp	a0,8(sp)
  size_type size() const { return end - base; }
   20666:	772a                	c.ldsp	a4,168(sp)
   20668:	77ca                	c.ldsp	a5,176(sp)
   2066a:	8f99                	c.sub	a5,a4
   2066c:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   2066e:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20670:	796a                	c.ldsp	s2,184(sp)
   20672:	40e90933          	sub	s2,s2,a4
   20676:	40395913          	srai	s2,s2,0x3
   2067a:	04f97963          	bgeu	s2,a5,206cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb9a>
   2067e:	00091363          	bne	s2,zero,20684 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb52>
   20682:	4905                	c.li	s2,1
    while (target < n)
   20684:	00f97563          	bgeu	s2,a5,2068e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb5c>
      target <<= 1;
   20688:	0906                	c.slli	s2,0x1
    while (target < n)
   2068a:	fef96fe3          	bltu	s2,a5,20688 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb56>
    char *newbuf = new char[sizeof(T[target])];
   2068e:	090e                	c.slli	s2,0x3
   20690:	854a                	c.mv	a0,s2
   20692:	c4ff50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   20696:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20698:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2069a:	774a                	c.ldsp	a4,176(sp)
   2069c:	02e57f63          	bgeu	a0,a4,206da <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xba8>
    T *src = base, *dest = (T *)newbuf;
   206a0:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   206a2:	07a1                	c.addi	a5,8
   206a4:	fee7efe3          	bltu	a5,a4,206a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb70>
   206a8:	fff70a13          	addi	s4,a4,-1
   206ac:	40aa0a33          	sub	s4,s4,a0
   206b0:	ff8a7a13          	andi	s4,s4,-8
   206b4:	0a21                	c.addi	s4,8
   206b6:	9a66                	c.add	s4,s9
    if ((char *)base != buf)
   206b8:	10bc                	c.addi4spn	a5,sp,104
   206ba:	00f50563          	beq	a0,a5,206c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb92>
      delete[] (char *)base;
   206be:	c119                	c.beqz	a0,206c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb92>
   206c0:	ea1f50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   206c4:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   206c6:	f952                	c.sdsp	s4,176(sp)
    cap = base + target;
   206c8:	9cca                	c.add	s9,s2
   206ca:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   206cc:	77ca                	c.ldsp	a5,176(sp)
   206ce:	6722                	c.ldsp	a4,8(sp)
   206d0:	e398                	c.sd	a4,0(a5)
    end++;
   206d2:	77ca                	c.ldsp	a5,176(sp)
   206d4:	07a1                	c.addi	a5,8
   206d6:	f93e                	c.sdsp	a5,176(sp)
      break;
   206d8:	a651                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   206da:	8a66                	c.mv	s4,s9
   206dc:	bff1                	c.j	206b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb86>
      throw runtime_error("DW_OP_fbreg not implemented");
   206de:	4541                	c.li	a0,16
   206e0:	cf1f50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   206e4:	892a                	c.mv	s2,a0
   206e6:	0000d597          	auipc	a1,0xd
   206ea:	68258593          	addi	a1,a1,1666 # 2dd68 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2c0>
   206ee:	cb3f50ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   206f2:	00019617          	auipc	a2,0x19
   206f6:	d0e63603          	ld	a2,-754(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   206fa:	00019597          	auipc	a1,0x19
   206fe:	ef65b583          	ld	a1,-266(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   20702:	854a                	c.mv	a0,s2
   20704:	f5df50ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   20708:	842a                	c.mv	s0,a0
   2070a:	5710006f          	jal	zero,2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      tmp1.u = (unsigned)op - (unsigned)DW_OP::breg0;
   2070e:	f909091b          	addiw	s2,s2,-112
      tmp2.s = cur.sleb128();
   20712:	0888                	c.addi4spn	a0,sp,80
   20714:	d64fa0ef          	jal	ra,1ac78 <dwarf::cursor::sleb128()>
   20718:	8caa                	c.mv	s9,a0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   2071a:	000b3783          	ld	a5,0(s6)
   2071e:	6b9c                	c.ld	a5,16(a5)
   20720:	85ca                	c.mv	a1,s2
   20722:	855a                	c.mv	a0,s6
   20724:	9782                	c.jalr	a5
   20726:	9caa                	c.add	s9,a0
  size_type size() const { return end - base; }
   20728:	772a                	c.ldsp	a4,168(sp)
   2072a:	77ca                	c.ldsp	a5,176(sp)
   2072c:	8f99                	c.sub	a5,a4
   2072e:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20730:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20732:	796a                	c.ldsp	s2,184(sp)
   20734:	40e90933          	sub	s2,s2,a4
   20738:	40395913          	srai	s2,s2,0x3
   2073c:	04f97963          	bgeu	s2,a5,2078e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc5c>
   20740:	00091363          	bne	s2,zero,20746 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc14>
   20744:	4905                	c.li	s2,1
    while (target < n)
   20746:	00f97563          	bgeu	s2,a5,20750 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc1e>
      target <<= 1;
   2074a:	0906                	c.slli	s2,0x1
    while (target < n)
   2074c:	fef96fe3          	bltu	s2,a5,2074a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc18>
    char *newbuf = new char[sizeof(T[target])];
   20750:	090e                	c.slli	s2,0x3
   20752:	854a                	c.mv	a0,s2
   20754:	b8df50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   20758:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   2075a:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2075c:	774a                	c.ldsp	a4,176(sp)
   2075e:	02e57f63          	bgeu	a0,a4,2079c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc6a>
    T *src = base, *dest = (T *)newbuf;
   20762:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20764:	07a1                	c.addi	a5,8
   20766:	fee7efe3          	bltu	a5,a4,20764 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc32>
   2076a:	fff70793          	addi	a5,a4,-1
   2076e:	8f89                	c.sub	a5,a0
   20770:	9be1                	c.andi	a5,-8
   20772:	07a1                	c.addi	a5,8
   20774:	97d2                	c.add	a5,s4
   20776:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20778:	10bc                	c.addi4spn	a5,sp,104
   2077a:	00f50563          	beq	a0,a5,20784 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc52>
      delete[] (char *)base;
   2077e:	c119                	c.beqz	a0,20784 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc52>
   20780:	de1f50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20784:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20786:	67a2                	c.ldsp	a5,8(sp)
   20788:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2078a:	9a4a                	c.add	s4,s2
   2078c:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   2078e:	77ca                	c.ldsp	a5,176(sp)
   20790:	0197b023          	sd	s9,0(a5)
    end++;
   20794:	77ca                	c.ldsp	a5,176(sp)
   20796:	07a1                	c.addi	a5,8
   20798:	f93e                	c.sdsp	a5,176(sp)
      break;
   2079a:	a4c9                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2079c:	e452                	c.sdsp	s4,8(sp)
   2079e:	bfe9                	c.j	20778 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc46>
   207a0:	4901                	c.li	s2,0
      tmp2.s = cur.sleb128();
   207a2:	0888                	c.addi4spn	a0,sp,80
   207a4:	cd4fa0ef          	jal	ra,1ac78 <dwarf::cursor::sleb128()>
   207a8:	8caa                	c.mv	s9,a0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   207aa:	000b3783          	ld	a5,0(s6)
   207ae:	6b9c                	c.ld	a5,16(a5)
   207b0:	0009059b          	addiw	a1,s2,0
   207b4:	855a                	c.mv	a0,s6
   207b6:	9782                	c.jalr	a5
   207b8:	9caa                	c.add	s9,a0
  size_type size() const { return end - base; }
   207ba:	772a                	c.ldsp	a4,168(sp)
   207bc:	77ca                	c.ldsp	a5,176(sp)
   207be:	8f99                	c.sub	a5,a4
   207c0:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   207c2:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   207c4:	796a                	c.ldsp	s2,184(sp)
   207c6:	40e90933          	sub	s2,s2,a4
   207ca:	40395913          	srai	s2,s2,0x3
   207ce:	04f97963          	bgeu	s2,a5,20820 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcee>
   207d2:	00091363          	bne	s2,zero,207d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xca6>
   207d6:	4905                	c.li	s2,1
    while (target < n)
   207d8:	00f97563          	bgeu	s2,a5,207e2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcb0>
      target <<= 1;
   207dc:	0906                	c.slli	s2,0x1
    while (target < n)
   207de:	fef96fe3          	bltu	s2,a5,207dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcaa>
    char *newbuf = new char[sizeof(T[target])];
   207e2:	090e                	c.slli	s2,0x3
   207e4:	854a                	c.mv	a0,s2
   207e6:	afbf50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   207ea:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   207ec:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   207ee:	774a                	c.ldsp	a4,176(sp)
   207f0:	02e57f63          	bgeu	a0,a4,2082e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
    T *src = base, *dest = (T *)newbuf;
   207f4:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   207f6:	07a1                	c.addi	a5,8
   207f8:	fee7efe3          	bltu	a5,a4,207f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcc4>
   207fc:	fff70793          	addi	a5,a4,-1
   20800:	8f89                	c.sub	a5,a0
   20802:	9be1                	c.andi	a5,-8
   20804:	07a1                	c.addi	a5,8
   20806:	97d2                	c.add	a5,s4
   20808:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   2080a:	10bc                	c.addi4spn	a5,sp,104
   2080c:	00f50563          	beq	a0,a5,20816 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xce4>
      delete[] (char *)base;
   20810:	c119                	c.beqz	a0,20816 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xce4>
   20812:	d4ff50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20816:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20818:	67a2                	c.ldsp	a5,8(sp)
   2081a:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2081c:	9a4a                	c.add	s4,s2
   2081e:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   20820:	77ca                	c.ldsp	a5,176(sp)
   20822:	0197b023          	sd	s9,0(a5)
    end++;
   20826:	77ca                	c.ldsp	a5,176(sp)
   20828:	07a1                	c.addi	a5,8
   2082a:	f93e                	c.sdsp	a5,176(sp)
      break;
   2082c:	ac05                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2082e:	e452                	c.sdsp	s4,8(sp)
   20830:	bfe9                	c.j	2080a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcd8>
  bool empty() const { return base == end; }
   20832:	772a                	c.ldsp	a4,168(sp)
   20834:	7cca                	c.ldsp	s9,176(sp)
      CHECK();
   20836:	2aec85e3          	beq	s9,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
  size_type size() const { return end - base; }
   2083a:	40ec87b3          	sub	a5,s9,a4
   2083e:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20840:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20842:	796a                	c.ldsp	s2,184(sp)
   20844:	40e90933          	sub	s2,s2,a4
   20848:	40395913          	srai	s2,s2,0x3
   2084c:	04f97963          	bgeu	s2,a5,2089e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd6c>
   20850:	00091363          	bne	s2,zero,20856 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd24>
   20854:	4905                	c.li	s2,1
    while (target < n)
   20856:	00f97563          	bgeu	s2,a5,20860 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd2e>
      target <<= 1;
   2085a:	0906                	c.slli	s2,0x1
    while (target < n)
   2085c:	fef96fe3          	bltu	s2,a5,2085a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd28>
    char *newbuf = new char[sizeof(T[target])];
   20860:	090e                	c.slli	s2,0x3
   20862:	854a                	c.mv	a0,s2
   20864:	a7df50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   20868:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   2086a:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2086c:	774a                	c.ldsp	a4,176(sp)
   2086e:	04e57063          	bgeu	a0,a4,208ae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd7c>
    T *src = base, *dest = (T *)newbuf;
   20872:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20874:	07a1                	c.addi	a5,8
   20876:	fee7efe3          	bltu	a5,a4,20874 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd42>
   2087a:	fff70793          	addi	a5,a4,-1
   2087e:	8f89                	c.sub	a5,a0
   20880:	9be1                	c.andi	a5,-8
   20882:	07a1                	c.addi	a5,8
   20884:	97d2                	c.add	a5,s4
   20886:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20888:	10bc                	c.addi4spn	a5,sp,104
   2088a:	00f50563          	beq	a0,a5,20894 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd62>
      delete[] (char *)base;
   2088e:	c119                	c.beqz	a0,20894 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd62>
   20890:	cd1f50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20894:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20896:	67a2                	c.ldsp	a5,8(sp)
   20898:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2089a:	9a4a                	c.add	s4,s2
   2089c:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(x);
   2089e:	ff8cb703          	ld	a4,-8(s9)
   208a2:	77ca                	c.ldsp	a5,176(sp)
   208a4:	e398                	c.sd	a4,0(a5)
    end++;
   208a6:	77ca                	c.ldsp	a5,176(sp)
   208a8:	07a1                	c.addi	a5,8
   208aa:	f93e                	c.sdsp	a5,176(sp)
  }
   208ac:	aa45                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   208ae:	e452                	c.sdsp	s4,8(sp)
   208b0:	bfe1                	c.j	20888 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd56>
  bool empty() const { return base == end; }
   208b2:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   208b4:	772a                	c.ldsp	a4,168(sp)
   208b6:	22e785e3          	beq	a5,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
    end--;
   208ba:	17e1                	c.addi	a5,-8
   208bc:	f93e                	c.sdsp	a5,176(sp)
  }
   208be:	aa79                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   208c0:	6a9c                	c.ld	a5,16(a3)
   208c2:	00f76563          	bltu	a4,a5,208cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd9a>
      underflow();
   208c6:	0888                	c.addi4spn	a0,sp,80
   208c8:	b70fa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   208cc:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   208ce:	6746                	c.ldsp	a4,80(sp)
   208d0:	4f58                	c.lw	a4,28(a4)
   208d2:	560703e3          	beq	a4,zero,21638 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b06>
        val = (val << 8) | (uint64_t)p[i];
   208d6:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   208da:	5630006f          	jal	zero,2163c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b0a>
    char *newbuf = new char[sizeof(T[target])];
   208de:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   208e0:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   208e2:	774a                	c.ldsp	a4,176(sp)
   208e4:	04e57063          	bgeu	a0,a4,20924 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdf2>
    T *src = base, *dest = (T *)newbuf;
   208e8:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   208ea:	07a1                	c.addi	a5,8
   208ec:	fee7efe3          	bltu	a5,a4,208ea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdb8>
   208f0:	fff70793          	addi	a5,a4,-1
   208f4:	8f89                	c.sub	a5,a0
   208f6:	9be1                	c.andi	a5,-8
   208f8:	07a1                	c.addi	a5,8
   208fa:	97e6                	c.add	a5,s9
   208fc:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   208fe:	10bc                	c.addi4spn	a5,sp,104
   20900:	00f50563          	beq	a0,a5,2090a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd8>
      delete[] (char *)base;
   20904:	c119                	c.beqz	a0,2090a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd8>
   20906:	c5bf50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2090a:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   2090c:	67a2                	c.ldsp	a5,8(sp)
   2090e:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20910:	9cca                	c.add	s9,s2
   20912:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(x);
   20914:	000a3703          	ld	a4,0(s4)
   20918:	77ca                	c.ldsp	a5,176(sp)
   2091a:	e398                	c.sd	a4,0(a5)
    end++;
   2091c:	77ca                	c.ldsp	a5,176(sp)
   2091e:	07a1                	c.addi	a5,8
   20920:	f93e                	c.sdsp	a5,176(sp)
  }
   20922:	aa2d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20924:	e466                	c.sdsp	s9,8(sp)
   20926:	bfe1                	c.j	208fe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdcc>
  size_type size() const { return end - base; }
   20928:	7cca                	c.ldsp	s9,176(sp)
   2092a:	772a                	c.ldsp	a4,168(sp)
   2092c:	40ec87b3          	sub	a5,s9,a4
      CHECKN(2);
   20930:	46a1                	c.li	a3,8
   20932:	1af6f7e3          	bgeu	a3,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20936:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20938:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2093a:	796a                	c.ldsp	s2,184(sp)
   2093c:	40e90933          	sub	s2,s2,a4
   20940:	40395913          	srai	s2,s2,0x3
   20944:	04f97963          	bgeu	s2,a5,20996 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe64>
   20948:	00091363          	bne	s2,zero,2094e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe1c>
   2094c:	4905                	c.li	s2,1
    while (target < n)
   2094e:	00f97563          	bgeu	s2,a5,20958 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe26>
      target <<= 1;
   20952:	0906                	c.slli	s2,0x1
    while (target < n)
   20954:	fef96fe3          	bltu	s2,a5,20952 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe20>
    char *newbuf = new char[sizeof(T[target])];
   20958:	090e                	c.slli	s2,0x3
   2095a:	854a                	c.mv	a0,s2
   2095c:	985f50ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   20960:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20962:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20964:	774a                	c.ldsp	a4,176(sp)
   20966:	04e57063          	bgeu	a0,a4,209a6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe74>
    T *src = base, *dest = (T *)newbuf;
   2096a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2096c:	07a1                	c.addi	a5,8
   2096e:	fee7efe3          	bltu	a5,a4,2096c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3a>
   20972:	fff70793          	addi	a5,a4,-1
   20976:	8f89                	c.sub	a5,a0
   20978:	9be1                	c.andi	a5,-8
   2097a:	07a1                	c.addi	a5,8
   2097c:	97d2                	c.add	a5,s4
   2097e:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20980:	10bc                	c.addi4spn	a5,sp,104
   20982:	00f50563          	beq	a0,a5,2098c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe5a>
      delete[] (char *)base;
   20986:	c119                	c.beqz	a0,2098c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe5a>
   20988:	bd9f50ef          	jal	ra,16560 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2098c:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   2098e:	67a2                	c.ldsp	a5,8(sp)
   20990:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20992:	9a4a                	c.add	s4,s2
   20994:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(x);
   20996:	ff0cb703          	ld	a4,-16(s9)
   2099a:	77ca                	c.ldsp	a5,176(sp)
   2099c:	e398                	c.sd	a4,0(a5)
    end++;
   2099e:	77ca                	c.ldsp	a5,176(sp)
   209a0:	07a1                	c.addi	a5,8
   209a2:	f93e                	c.sdsp	a5,176(sp)
  }
   209a4:	a865                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   209a6:	e452                	c.sdsp	s4,8(sp)
   209a8:	bfe1                	c.j	20980 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe4e>
  size_type size() const { return end - base; }
   209aa:	77ca                	c.ldsp	a5,176(sp)
   209ac:	772a                	c.ldsp	a4,168(sp)
   209ae:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   209b2:	46a1                	c.li	a3,8
   209b4:	12e6f6e3          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   209b8:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   209bc:	ff07b683          	ld	a3,-16(a5)
   209c0:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   209c4:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(1) = tmp1.u;
   209c6:	fee7b823          	sd	a4,-16(a5)
      break;
   209ca:	a849                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   209cc:	77ca                	c.ldsp	a5,176(sp)
   209ce:	772a                	c.ldsp	a4,168(sp)
   209d0:	40e78733          	sub	a4,a5,a4
      CHECKN(3);
   209d4:	46c1                	c.li	a3,16
   209d6:	10e6f5e3          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   209da:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   209de:	ff07b683          	ld	a3,-16(a5)
   209e2:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   209e6:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(1) = stack.revat(2);
   209e8:	fe87b683          	ld	a3,-24(a5)
   209ec:	fed7b823          	sd	a3,-16(a5)
   209f0:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(2) = tmp1.u;
   209f2:	fee7b423          	sd	a4,-24(a5)
      break;
   209f6:	a09d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      tmp1.u = subsec->addr_size;
   209f8:	0584e603          	lwu	a2,88(s1)
  bool empty() const { return base == end; }
   209fc:	794a                	c.ldsp	s2,176(sp)
      CHECK();
   209fe:	77aa                	c.ldsp	a5,168(sp)
   20a00:	0f2780e3          	beq	a5,s2,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   20a04:	000b3783          	ld	a5,0(s6)
   20a08:	6f9c                	c.ld	a5,24(a5)
   20a0a:	2601                	c.addiw	a2,0
   20a0c:	ff893583          	ld	a1,-8(s2)
   20a10:	855a                	c.mv	a0,s6
   20a12:	9782                	c.jalr	a5
   20a14:	a091                	c.j	20a58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf26>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20a16:	6a9c                	c.ld	a5,16(a3)
   20a18:	00f76563          	bltu	a4,a5,20a22 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef0>
      underflow();
   20a1c:	0888                	c.addi4spn	a0,sp,80
   20a1e:	a1afa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20a22:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20a24:	6746                	c.ldsp	a4,80(sp)
   20a26:	4f58                	c.lw	a4,28(a4)
   20a28:	44070de3          	beq	a4,zero,21682 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b50>
        val = (val << 8) | (uint64_t)p[i];
   20a2c:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20a30:	4570006f          	jal	zero,21686 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b54>
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   20a34:	00019797          	auipc	a5,0x19
   20a38:	9147b783          	ld	a5,-1772(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   20a3c:	07c1                	c.addi	a5,16
   20a3e:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   20a42:	00019617          	auipc	a2,0x19
   20a46:	a5e63603          	ld	a2,-1442(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   20a4a:	00019597          	auipc	a1,0x19
   20a4e:	ace5b583          	ld	a1,-1330(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   20a52:	854a                	c.mv	a0,s2
   20a54:	c0df50ef          	jal	ra,16660 <__cxa_throw@plt>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   20a58:	fea93c23          	sd	a0,-8(s2)
      { return _M_ptr; }
   20a5c:	66c6                	c.ldsp	a3,80(sp)
  bool end() const { return pos >= sec->end; }
   20a5e:	7706                	c.ldsp	a4,96(sp)
  while (!cur.end()) {
   20a60:	6a9c                	c.ld	a5,16(a3)
   20a62:	0af77be3          	bgeu	a4,a5,21318 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17e6>
    if (sec->ord == byte_order::lsb) {
   20a66:	4edc                	c.lw	a5,28(a3)
   20a68:	460785e3          	beq	a5,zero,216d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ba0>
        val = (val << 8) | (uint64_t)p[i];
   20a6c:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   20a70:	4670006f          	jal	zero,216d6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ba4>
      tmp1.u = subsec->addr_size;
   20a74:	0584e683          	lwu	a3,88(s1)
  size_type size() const { return end - base; }
   20a78:	794a                	c.ldsp	s2,176(sp)
   20a7a:	77aa                	c.ldsp	a5,168(sp)
   20a7c:	40f907b3          	sub	a5,s2,a5
      CHECKN(2);
   20a80:	06fdf0e3          	bgeu	s11,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp2.u = stack.back();
   20a84:	ff893583          	ld	a1,-8(s2)
    end--;
   20a88:	ff890793          	addi	a5,s2,-8
   20a8c:	f93e                	c.sdsp	a5,176(sp)
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   20a8e:	000b3783          	ld	a5,0(s6)
   20a92:	739c                	c.ld	a5,32(a5)
   20a94:	2681                	c.addiw	a3,0
   20a96:	ff093603          	ld	a2,-16(s2)
   20a9a:	855a                	c.mv	a0,s6
   20a9c:	9782                	c.jalr	a5
   20a9e:	a091                	c.j	20ae2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfb0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20aa0:	6a9c                	c.ld	a5,16(a3)
   20aa2:	00f76563          	bltu	a4,a5,20aac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf7a>
      underflow();
   20aa6:	0888                	c.addi4spn	a0,sp,80
   20aa8:	990fa0ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20aac:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20aae:	6746                	c.ldsp	a4,80(sp)
   20ab0:	4f58                	c.lw	a4,28(a4)
   20ab2:	3e070ce3          	beq	a4,zero,216aa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b78>
        val = (val << 8) | (uint64_t)p[i];
   20ab6:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20aba:	3f50006f          	jal	zero,216ae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b7c>
   20abe:	00019797          	auipc	a5,0x19
   20ac2:	88a7b783          	ld	a5,-1910(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   20ac6:	07c1                	c.addi	a5,16
   20ac8:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   20acc:	00019617          	auipc	a2,0x19
   20ad0:	9d463603          	ld	a2,-1580(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   20ad4:	00019597          	auipc	a1,0x19
   20ad8:	a445b583          	ld	a1,-1468(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   20adc:	854a                	c.mv	a0,s2
   20ade:	b83f50ef          	jal	ra,16660 <__cxa_throw@plt>
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   20ae2:	fea93823          	sd	a0,-16(s2)
      break;
   20ae6:	bf9d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error("DW_OP_push_object_address not implemented");
   20ae8:	4541                	c.li	a0,16
   20aea:	8e7f50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   20aee:	892a                	c.mv	s2,a0
   20af0:	0000d597          	auipc	a1,0xd
   20af4:	2f858593          	addi	a1,a1,760 # 2dde8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x340>
   20af8:	8a9f50ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   20afc:	00019617          	auipc	a2,0x19
   20b00:	90463603          	ld	a2,-1788(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   20b04:	00019597          	auipc	a1,0x19
   20b08:	aec5b583          	ld	a1,-1300(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   20b0c:	854a                	c.mv	a0,s2
   20b0e:	b53f50ef          	jal	ra,16660 <__cxa_throw@plt>
  bool empty() const { return base == end; }
   20b12:	794a                	c.ldsp	s2,176(sp)
      CHECK();
   20b14:	77aa                	c.ldsp	a5,168(sp)
   20b16:	7d278563          	beq	a5,s2,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ctx->form_tls_address(stack.back());
   20b1a:	000b3783          	ld	a5,0(s6)
   20b1e:	779c                	c.ld	a5,40(a5)
   20b20:	ff893583          	ld	a1,-8(s2)
   20b24:	855a                	c.mv	a0,s6
   20b26:	9782                	c.jalr	a5
   20b28:	fea93c23          	sd	a0,-8(s2)
      break;
   20b2c:	bf05                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   20b2e:	4541                	c.li	a0,16
   20b30:	8a1f50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   20b34:	892a                	c.mv	s2,a0
   20b36:	0000d597          	auipc	a1,0xd
   20b3a:	2e258593          	addi	a1,a1,738 # 2de18 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x370>
   20b3e:	863f50ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   20b42:	00019617          	auipc	a2,0x19
   20b46:	8be63603          	ld	a2,-1858(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   20b4a:	00019597          	auipc	a1,0x19
   20b4e:	aa65b583          	ld	a1,-1370(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   20b52:	854a                	c.mv	a0,s2
   20b54:	b0df50ef          	jal	ra,16660 <__cxa_throw@plt>
   20b58:	774a                	c.ldsp	a4,176(sp)
      CHECK();
   20b5a:	77aa                	c.ldsp	a5,168(sp)
   20b5c:	78f70263          	beq	a4,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      if (tmp1.s < 0)
   20b60:	ff873783          	ld	a5,-8(a4)
   20b64:	43f7d693          	srai	a3,a5,0x3f
   20b68:	8fb5                	c.xor	a5,a3
   20b6a:	8f95                	c.sub	a5,a3
      stack.back() = tmp1.u;
   20b6c:	fef73c23          	sd	a5,-8(a4)
      break;
   20b70:	b5f5                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20b72:	77ca                	c.ldsp	a5,176(sp)
   20b74:	772a                	c.ldsp	a4,168(sp)
   20b76:	40e78733          	sub	a4,a5,a4
      UBINOP(&);
   20b7a:	46a1                	c.li	a3,8
   20b7c:	76e6f263          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20b80:	ff87b683          	ld	a3,-8(a5)
    end--;
   20b84:	ff878713          	addi	a4,a5,-8
   20b88:	f93a                	c.sdsp	a4,176(sp)
   20b8a:	ff07b703          	ld	a4,-16(a5)
   20b8e:	8f75                	c.and	a4,a3
   20b90:	fee7b823          	sd	a4,-16(a5)
      break;
   20b94:	b5e1                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20b96:	77ca                	c.ldsp	a5,176(sp)
   20b98:	772a                	c.ldsp	a4,168(sp)
   20b9a:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20b9e:	46a1                	c.li	a3,8
   20ba0:	74e6f063          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20ba4:	ff87b703          	ld	a4,-8(a5)
    end--;
   20ba8:	ff878693          	addi	a3,a5,-8
   20bac:	f936                	c.sdsp	a3,176(sp)
      tmp3.s = tmp1.s / tmp2.s;
   20bae:	ff07b683          	ld	a3,-16(a5)
   20bb2:	02d74733          	div	a4,a4,a3
      stack.back() = tmp3.u;
   20bb6:	fee7b823          	sd	a4,-16(a5)
      break;
   20bba:	b54d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20bbc:	77ca                	c.ldsp	a5,176(sp)
   20bbe:	772a                	c.ldsp	a4,168(sp)
   20bc0:	40e78733          	sub	a4,a5,a4
      UBINOP(-);
   20bc4:	46a1                	c.li	a3,8
   20bc6:	70e6fd63          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20bca:	ff87b683          	ld	a3,-8(a5)
    end--;
   20bce:	ff878713          	addi	a4,a5,-8
   20bd2:	f93a                	c.sdsp	a4,176(sp)
   20bd4:	ff07b703          	ld	a4,-16(a5)
   20bd8:	8f15                	c.sub	a4,a3
   20bda:	fee7b823          	sd	a4,-16(a5)
      break;
   20bde:	bdbd                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20be0:	77ca                	c.ldsp	a5,176(sp)
   20be2:	772a                	c.ldsp	a4,168(sp)
   20be4:	40e78733          	sub	a4,a5,a4
      UBINOP(%);
   20be8:	46a1                	c.li	a3,8
   20bea:	6ee6fb63          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20bee:	ff87b683          	ld	a3,-8(a5)
    end--;
   20bf2:	ff878713          	addi	a4,a5,-8
   20bf6:	f93a                	c.sdsp	a4,176(sp)
   20bf8:	ff07b703          	ld	a4,-16(a5)
   20bfc:	02d77733          	remu	a4,a4,a3
   20c00:	fee7b823          	sd	a4,-16(a5)
      break;
   20c04:	bda1                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20c06:	77ca                	c.ldsp	a5,176(sp)
   20c08:	772a                	c.ldsp	a4,168(sp)
   20c0a:	40e78733          	sub	a4,a5,a4
      UBINOP(*);
   20c0e:	46a1                	c.li	a3,8
   20c10:	6ce6f863          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20c14:	ff87b683          	ld	a3,-8(a5)
    end--;
   20c18:	ff878713          	addi	a4,a5,-8
   20c1c:	f93a                	c.sdsp	a4,176(sp)
   20c1e:	ff07b703          	ld	a4,-16(a5)
   20c22:	02d70733          	mul	a4,a4,a3
   20c26:	fee7b823          	sd	a4,-16(a5)
      break;
   20c2a:	bd0d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  bool empty() const { return base == end; }
   20c2c:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20c2e:	772a                	c.ldsp	a4,168(sp)
   20c30:	6af70863          	beq	a4,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.s = -tmp1.s;
   20c34:	ff87b703          	ld	a4,-8(a5)
   20c38:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp1.u;
   20c3c:	fee7bc23          	sd	a4,-8(a5)
      break;
   20c40:	bd31                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
   20c42:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20c44:	772a                	c.ldsp	a4,168(sp)
   20c46:	68f70d63          	beq	a4,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ~stack.back();
   20c4a:	ff87b703          	ld	a4,-8(a5)
   20c4e:	fff74713          	xori	a4,a4,-1
   20c52:	fee7bc23          	sd	a4,-8(a5)
      break;
   20c56:	b519                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20c58:	77ca                	c.ldsp	a5,176(sp)
   20c5a:	772a                	c.ldsp	a4,168(sp)
   20c5c:	40e78733          	sub	a4,a5,a4
      UBINOP(|);
   20c60:	46a1                	c.li	a3,8
   20c62:	66e6ff63          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20c66:	ff87b683          	ld	a3,-8(a5)
    end--;
   20c6a:	ff878713          	addi	a4,a5,-8
   20c6e:	f93a                	c.sdsp	a4,176(sp)
   20c70:	ff07b703          	ld	a4,-16(a5)
   20c74:	8f55                	c.or	a4,a3
   20c76:	fee7b823          	sd	a4,-16(a5)
      break;
   20c7a:	b3cd                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20c7c:	77ca                	c.ldsp	a5,176(sp)
   20c7e:	772a                	c.ldsp	a4,168(sp)
   20c80:	40e78733          	sub	a4,a5,a4
      UBINOP(+);
   20c84:	46a1                	c.li	a3,8
   20c86:	64e6fd63          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20c8a:	ff87b683          	ld	a3,-8(a5)
    end--;
   20c8e:	ff878713          	addi	a4,a5,-8
   20c92:	f93a                	c.sdsp	a4,176(sp)
   20c94:	ff07b703          	ld	a4,-16(a5)
   20c98:	9736                	c.add	a4,a3
   20c9a:	fee7b823          	sd	a4,-16(a5)
      break;
   20c9e:	bb7d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    return 0;
   20ca0:	4501                	c.li	a0,0
  bool empty() const { return base == end; }
   20ca2:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20ca4:	772a                	c.ldsp	a4,168(sp)
   20ca6:	62f70d63          	beq	a4,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() += tmp1.u;
   20caa:	ff87b703          	ld	a4,-8(a5)
   20cae:	972a                	c.add	a4,a0
   20cb0:	fee7bc23          	sd	a4,-8(a5)
      break;
   20cb4:	b365                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20cb6:	77ca                	c.ldsp	a5,176(sp)
   20cb8:	772a                	c.ldsp	a4,168(sp)
   20cba:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20cbe:	46a1                	c.li	a3,8
   20cc0:	62e6f063          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20cc4:	ff87b683          	ld	a3,-8(a5)
    end--;
   20cc8:	ff878713          	addi	a4,a5,-8
   20ccc:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   20cce:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20cd2:	03f00613          	addi	a2,zero,63
   20cd6:	00d66763          	bltu	a2,a3,20ce4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11b2>
        stack.back() = tmp2.u << tmp1.u;
   20cda:	00d71733          	sll	a4,a4,a3
   20cde:	fee7b823          	sd	a4,-16(a5)
   20ce2:	bbad                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        stack.back() = 0;
   20ce4:	fe07b823          	sd	zero,-16(a5)
   20ce8:	bb95                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20cea:	77ca                	c.ldsp	a5,176(sp)
   20cec:	772a                	c.ldsp	a4,168(sp)
   20cee:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20cf2:	46a1                	c.li	a3,8
   20cf4:	5ee6f663          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20cf8:	ff87b683          	ld	a3,-8(a5)
    end--;
   20cfc:	ff878713          	addi	a4,a5,-8
   20d00:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   20d02:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20d06:	03f00613          	addi	a2,zero,63
   20d0a:	00d66763          	bltu	a2,a3,20d18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11e6>
        stack.back() = tmp2.u >> tmp1.u;
   20d0e:	00d75733          	srl	a4,a4,a3
   20d12:	fee7b823          	sd	a4,-16(a5)
   20d16:	b399                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        stack.back() = 0;
   20d18:	fe07b823          	sd	zero,-16(a5)
   20d1c:	b381                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20d1e:	77ca                	c.ldsp	a5,176(sp)
   20d20:	772a                	c.ldsp	a4,168(sp)
   20d22:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20d26:	46a1                	c.li	a3,8
   20d28:	5ae6fc63          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20d2c:	ff87b603          	ld	a2,-8(a5)
    end--;
   20d30:	ff878713          	addi	a4,a5,-8
   20d34:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   20d36:	ff07b683          	ld	a3,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20d3a:	03f00593          	addi	a1,zero,63
        tmp2.u = 0;
   20d3e:	4701                	c.li	a4,0
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20d40:	00c5e963          	bltu	a1,a2,20d52 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1220>
      if (tmp3.u)
   20d44:	43f6d593          	srai	a1,a3,0x3f
   20d48:	00d5c733          	xor	a4,a1,a3
   20d4c:	8f0d                	c.sub	a4,a1
        tmp2.u >>= tmp1.u;
   20d4e:	00c75733          	srl	a4,a4,a2
      if (tmp3.u)
   20d52:	0006d463          	bge	a3,zero,20d5a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1228>
        tmp2.s = -tmp2.s;
   20d56:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp2.u;
   20d5a:	fee7b823          	sd	a4,-16(a5)
      break;
   20d5e:	b9fd                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20d60:	77ca                	c.ldsp	a5,176(sp)
   20d62:	772a                	c.ldsp	a4,168(sp)
   20d64:	40e78733          	sub	a4,a5,a4
      UBINOP(^);
   20d68:	46a1                	c.li	a3,8
   20d6a:	56e6fb63          	bgeu	a3,a4,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20d6e:	ff87b683          	ld	a3,-8(a5)
    end--;
   20d72:	ff878713          	addi	a4,a5,-8
   20d76:	f93a                	c.sdsp	a4,176(sp)
   20d78:	ff07b703          	ld	a4,-16(a5)
   20d7c:	8f35                	c.xor	a4,a3
   20d7e:	fee7b823          	sd	a4,-16(a5)
      break;
   20d82:	b9e9                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20d84:	774a                	c.ldsp	a4,176(sp)
   20d86:	77aa                	c.ldsp	a5,168(sp)
   20d88:	40f707b3          	sub	a5,a4,a5
      SRELOP(<=);
   20d8c:	46a1                	c.li	a3,8
   20d8e:	54f6f963          	bgeu	a3,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20d92:	ff873783          	ld	a5,-8(a4)
    end--;
   20d96:	ff870693          	addi	a3,a4,-8
   20d9a:	f936                	c.sdsp	a3,176(sp)
   20d9c:	ff073683          	ld	a3,-16(a4)
   20da0:	00d7a7b3          	slt	a5,a5,a3
   20da4:	0017c793          	xori	a5,a5,1
   20da8:	1782                	c.slli	a5,0x20
   20daa:	9381                	c.srli	a5,0x20
   20dac:	fef73823          	sd	a5,-16(a4)
      break;
   20db0:	b175                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20db2:	774a                	c.ldsp	a4,176(sp)
   20db4:	77aa                	c.ldsp	a5,168(sp)
   20db6:	40f707b3          	sub	a5,a4,a5
      SRELOP(>=);
   20dba:	46a1                	c.li	a3,8
   20dbc:	52f6f263          	bgeu	a3,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20dc0:	ff873783          	ld	a5,-8(a4)
    end--;
   20dc4:	ff870693          	addi	a3,a4,-8
   20dc8:	f936                	c.sdsp	a3,176(sp)
   20dca:	ff073683          	ld	a3,-16(a4)
   20dce:	00d7a7b3          	slt	a5,a5,a3
   20dd2:	0017c793          	xori	a5,a5,1
   20dd6:	1782                	c.slli	a5,0x20
   20dd8:	9381                	c.srli	a5,0x20
   20dda:	fef73823          	sd	a5,-16(a4)
      break;
   20dde:	b9bd                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20de0:	774a                	c.ldsp	a4,176(sp)
   20de2:	77aa                	c.ldsp	a5,168(sp)
   20de4:	40f707b3          	sub	a5,a4,a5
      SRELOP(==);
   20de8:	46a1                	c.li	a3,8
   20dea:	4ef6fb63          	bgeu	a3,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20dee:	ff873783          	ld	a5,-8(a4)
    end--;
   20df2:	ff870693          	addi	a3,a4,-8
   20df6:	f936                	c.sdsp	a3,176(sp)
   20df8:	ff073683          	ld	a3,-16(a4)
   20dfc:	00d7a7b3          	slt	a5,a5,a3
   20e00:	0017c793          	xori	a5,a5,1
   20e04:	1782                	c.slli	a5,0x20
   20e06:	9381                	c.srli	a5,0x20
   20e08:	fef73823          	sd	a5,-16(a4)
      break;
   20e0c:	b981                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20e0e:	774a                	c.ldsp	a4,176(sp)
   20e10:	77aa                	c.ldsp	a5,168(sp)
   20e12:	40f707b3          	sub	a5,a4,a5
      SRELOP(<);
   20e16:	46a1                	c.li	a3,8
   20e18:	4cf6f463          	bgeu	a3,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20e1c:	ff873783          	ld	a5,-8(a4)
    end--;
   20e20:	ff870693          	addi	a3,a4,-8
   20e24:	f936                	c.sdsp	a3,176(sp)
   20e26:	ff073683          	ld	a3,-16(a4)
   20e2a:	00d7a7b3          	slt	a5,a5,a3
   20e2e:	0017c793          	xori	a5,a5,1
   20e32:	1782                	c.slli	a5,0x20
   20e34:	9381                	c.srli	a5,0x20
   20e36:	fef73823          	sd	a5,-16(a4)
      break;
   20e3a:	b10d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20e3c:	774a                	c.ldsp	a4,176(sp)
   20e3e:	77aa                	c.ldsp	a5,168(sp)
   20e40:	40f707b3          	sub	a5,a4,a5
      SRELOP(>);
   20e44:	46a1                	c.li	a3,8
   20e46:	48f6fd63          	bgeu	a3,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20e4a:	ff873783          	ld	a5,-8(a4)
    end--;
   20e4e:	ff870693          	addi	a3,a4,-8
   20e52:	f936                	c.sdsp	a3,176(sp)
   20e54:	ff073683          	ld	a3,-16(a4)
   20e58:	00d7a7b3          	slt	a5,a5,a3
   20e5c:	0017c793          	xori	a5,a5,1
   20e60:	1782                	c.slli	a5,0x20
   20e62:	9381                	c.srli	a5,0x20
   20e64:	fef73823          	sd	a5,-16(a4)
      break;
   20e68:	bed5                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20e6a:	774a                	c.ldsp	a4,176(sp)
   20e6c:	77aa                	c.ldsp	a5,168(sp)
   20e6e:	40f707b3          	sub	a5,a4,a5
      SRELOP(!=);
   20e72:	46a1                	c.li	a3,8
   20e74:	46f6f663          	bgeu	a3,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20e78:	ff873783          	ld	a5,-8(a4)
    end--;
   20e7c:	ff870693          	addi	a3,a4,-8
   20e80:	f936                	c.sdsp	a3,176(sp)
   20e82:	ff073683          	ld	a3,-16(a4)
   20e86:	00d7a7b3          	slt	a5,a5,a3
   20e8a:	0017c793          	xori	a5,a5,1
   20e8e:	1782                	c.slli	a5,0x20
   20e90:	9381                	c.srli	a5,0x20
   20e92:	fef73823          	sd	a5,-16(a4)
      break;
   20e96:	b6d9                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20e98:	6a9c                	c.ld	a5,16(a3)
   20e9a:	40e78633          	sub	a2,a5,a4
   20e9e:	4685                	c.li	a3,1
   20ea0:	00c6f463          	bgeu	a3,a2,20ea8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1376>
   20ea4:	00f76563          	bltu	a4,a5,20eae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x137c>
      underflow();
   20ea8:	0888                	c.addi4spn	a0,sp,80
   20eaa:	d8ff90ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20eae:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20eb0:	6746                	c.ldsp	a4,80(sp)
   20eb2:	4f58                	c.lw	a4,28(a4)
   20eb4:	eb5d                	c.bnez	a4,20f6a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1438>
        val |= ((uint64_t)p[i]) << (i * 8);
   20eb6:	0017c903          	lbu	s2,1(a5)
   20eba:	0922                	c.slli	s2,0x8
   20ebc:	0007c703          	lbu	a4,0(a5)
   20ec0:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   20ec4:	0789                	c.addi	a5,2
   20ec6:	f0be                	c.sdsp	a5,96(sp)
      tmp1.s = cur.fixed<int16_t>();
   20ec8:	0109191b          	slliw	s2,s2,0x10
   20ecc:	4109591b          	sraiw	s2,s2,0x10
    if (__is_single_threaded())
   20ed0:	000d4783          	lbu	a5,0(s10)
   20ed4:	10078263          	beq	a5,zero,20fd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14a6>
  { *__mem += __val; }
   20ed8:	589c                	c.lw	a5,48(s1)
   20eda:	2785                	c.addiw	a5,1
   20edc:	d89c                	c.sw	a5,48(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   20ede:	67c6                	c.ldsp	a5,80(sp)
   20ee0:	6798                	c.ld	a4,8(a5)
   20ee2:	7786                	c.ldsp	a5,96(sp)
   20ee4:	8f99                	c.sub	a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   20ee6:	993e                	c.add	s2,a5
   20ee8:	589c                	c.lw	a5,48(s1)
   20eea:	2785                	c.addiw	a5,1
   20eec:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   20eee:	60bc                	c.ld	a5,64(s1)
   20ef0:	993e                	c.add	s2,a5
   20ef2:	e8e2                	c.sdsp	s8,80(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   20ef4:	6a66                	c.ldsp	s4,88(sp)
	__r._M_pi = _M_pi;
   20ef6:	eca6                	c.sdsp	s1,88(sp)
	if (_M_pi != nullptr)
   20ef8:	020a0363          	beq	s4,zero,20f1e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
    if (__is_single_threaded())
   20efc:	00018797          	auipc	a5,0x18
   20f00:	57c7b783          	ld	a5,1404(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20f04:	0007c783          	lbu	a5,0(a5)
   20f08:	10078063          	beq	a5,zero,21008 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14d6>
    _Atomic_word __result = *__mem;
   20f0c:	030a2503          	lw	a0,48(s4)
    *__mem += __val;
   20f10:	fff5079b          	addiw	a5,a0,-1
   20f14:	02fa2823          	sw	a5,48(s4)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20f18:	4785                	c.li	a5,1
   20f1a:	0ef50d63          	beq	a0,a5,21014 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14e2>
struct cursor {
   20f1e:	f0ca                	c.sdsp	s2,96(sp)
    if (__is_single_threaded())
   20f20:	000d4783          	lbu	a5,0(s10)
   20f24:	12078c63          	beq	a5,zero,2105c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x152a>
    _Atomic_word __result = *__mem;
   20f28:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   20f2a:	fff5079b          	addiw	a5,a0,-1
   20f2e:	d89c                	c.sw	a5,48(s1)
   20f30:	4785                	c.li	a5,1
   20f32:	b2f515e3          	bne	a0,a5,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
	_M_dispose();
   20f36:	609c                	c.ld	a5,0(s1)
   20f38:	6b9c                	c.ld	a5,16(a5)
   20f3a:	8526                	c.mv	a0,s1
   20f3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20f3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20f42:	00018797          	auipc	a5,0x18
   20f46:	5367b783          	ld	a5,1334(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20f4a:	0007c783          	lbu	a5,0(a5)
   20f4e:	10078d63          	beq	a5,zero,21068 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1536>
    _Atomic_word __result = *__mem;
   20f52:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   20f54:	fff7871b          	addiw	a4,a5,-1
   20f58:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20f5a:	4705                	c.li	a4,1
   20f5c:	b0e790e3          	bne	a5,a4,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
	    _M_destroy();
   20f60:	609c                	c.ld	a5,0(s1)
   20f62:	6f9c                	c.ld	a5,24(a5)
   20f64:	8526                	c.mv	a0,s1
   20f66:	9782                	c.jalr	a5
   20f68:	bcd5                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        val = (val << 8) | (uint64_t)p[i];
   20f6a:	0007c903          	lbu	s2,0(a5)
   20f6e:	0922                	c.slli	s2,0x8
   20f70:	0017c703          	lbu	a4,1(a5)
   20f74:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20f78:	b7b1                	c.j	20ec4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1392>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20f7a:	6a9c                	c.ld	a5,16(a3)
   20f7c:	40e78633          	sub	a2,a5,a4
   20f80:	4685                	c.li	a3,1
   20f82:	00c6f463          	bgeu	a3,a2,20f8a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1458>
   20f86:	00f76563          	bltu	a4,a5,20f90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x145e>
      underflow();
   20f8a:	0888                	c.addi4spn	a0,sp,80
   20f8c:	cadf90ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20f90:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20f92:	6746                	c.ldsp	a4,80(sp)
   20f94:	4f58                	c.lw	a4,28(a4)
   20f96:	eb0d                	c.bnez	a4,20fc8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1496>
        val |= ((uint64_t)p[i]) << (i * 8);
   20f98:	0017c903          	lbu	s2,1(a5)
   20f9c:	0922                	c.slli	s2,0x8
   20f9e:	0007c703          	lbu	a4,0(a5)
   20fa2:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   20fa6:	0789                	c.addi	a5,2
   20fa8:	f0be                	c.sdsp	a5,96(sp)
  bool empty() const { return base == end; }
   20faa:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20fac:	772a                	c.ldsp	a4,168(sp)
   20fae:	32f70963          	beq	a4,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp2.u = stack.back();
   20fb2:	ff87b703          	ld	a4,-8(a5)
    end--;
   20fb6:	17e1                	c.addi	a5,-8
   20fb8:	f93e                	c.sdsp	a5,176(sp)
      if (tmp2.u == 0)
   20fba:	aa0701e3          	beq	a4,zero,20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      tmp1.s = cur.fixed<int16_t>();
   20fbe:	0109191b          	slliw	s2,s2,0x10
   20fc2:	4109591b          	sraiw	s2,s2,0x10
   20fc6:	b729                	c.j	20ed0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x139e>
        val = (val << 8) | (uint64_t)p[i];
   20fc8:	0007c903          	lbu	s2,0(a5)
   20fcc:	0922                	c.slli	s2,0x8
   20fce:	0017c703          	lbu	a4,1(a5)
   20fd2:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20fd6:	bfc1                	c.j	20fa6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1474>
      __atomic_add(__mem, __val);
   20fd8:	4585                	c.li	a1,1
   20fda:	03048513          	addi	a0,s1,48
   20fde:	b22f50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
  section_offset get_section_offset() const { return pos - sec->begin; }
   20fe2:	67c6                	c.ldsp	a5,80(sp)
   20fe4:	6798                	c.ld	a4,8(a5)
   20fe6:	7786                	c.ldsp	a5,96(sp)
   20fe8:	8f99                	c.sub	a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   20fea:	993e                	c.add	s2,a5
    if (__is_single_threaded())
   20fec:	00018797          	auipc	a5,0x18
   20ff0:	48c7b783          	ld	a5,1164(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20ff4:	0007c783          	lbu	a5,0(a5)
   20ff8:	ee0798e3          	bne	a5,zero,20ee8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13b6>
      __atomic_add(__mem, __val);
   20ffc:	4585                	c.li	a1,1
   20ffe:	03048513          	addi	a0,s1,48
   21002:	afef50ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21006:	b5e5                	c.j	20eee <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
      return __exchange_and_add(__mem, __val);
   21008:	55fd                	c.li	a1,-1
   2100a:	030a0513          	addi	a0,s4,48
   2100e:	b22f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21012:	b719                	c.j	20f18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13e6>
	_M_dispose();
   21014:	000a3783          	ld	a5,0(s4)
   21018:	6b9c                	c.ld	a5,16(a5)
   2101a:	8552                	c.mv	a0,s4
   2101c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2101e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21022:	00018797          	auipc	a5,0x18
   21026:	4567b783          	ld	a5,1110(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2102a:	0007c783          	lbu	a5,0(a5)
   2102e:	c385                	c.beqz	a5,2104e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x151c>
    _Atomic_word __result = *__mem;
   21030:	034a2783          	lw	a5,52(s4)
    *__mem += __val;
   21034:	fff7871b          	addiw	a4,a5,-1
   21038:	02ea2a23          	sw	a4,52(s4)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2103c:	4705                	c.li	a4,1
   2103e:	eee790e3          	bne	a5,a4,20f1e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
	    _M_destroy();
   21042:	000a3783          	ld	a5,0(s4)
   21046:	6f9c                	c.ld	a5,24(a5)
   21048:	8552                	c.mv	a0,s4
   2104a:	9782                	c.jalr	a5
   2104c:	bdc9                	c.j	20f1e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
      return __exchange_and_add(__mem, __val);
   2104e:	55fd                	c.li	a1,-1
   21050:	034a0513          	addi	a0,s4,52
   21054:	adcf50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21058:	87aa                	c.mv	a5,a0
   2105a:	b7cd                	c.j	2103c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x150a>
   2105c:	55fd                	c.li	a1,-1
   2105e:	03048513          	addi	a0,s1,48
   21062:	acef50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21066:	b5e9                	c.j	20f30 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13fe>
   21068:	55fd                	c.li	a1,-1
   2106a:	03448513          	addi	a0,s1,52
   2106e:	ac2f50ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21072:	87aa                	c.mv	a5,a0
   21074:	b5dd                	c.j	20f5a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1428>
      throw runtime_error(to_string(op) + " not implemented");
   21076:	4541                	c.li	a0,16
   21078:	b58f50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2107c:	89aa                	c.mv	s3,a0
   2107e:	85ca                	c.mv	a1,s2
   21080:	0808                	c.addi4spn	a0,sp,16
   21082:	329070ef          	jal	ra,28baa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   21086:	0000d597          	auipc	a1,0xd
   2108a:	dba58593          	addi	a1,a1,-582 # 2de40 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   2108e:	0808                	c.addi4spn	a0,sp,16
   21090:	eb0f50ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   21094:	85aa                	c.mv	a1,a0
   21096:	1800                	c.addi4spn	s0,sp,48
   21098:	8522                	c.mv	a0,s0
   2109a:	b76f50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2109e:	85a2                	c.mv	a1,s0
   210a0:	854e                	c.mv	a0,s3
   210a2:	d7ef50ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   210a6:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   210a8:	009c                	c.addi4spn	a5,sp,64
   210aa:	00f50463          	beq	a0,a5,210b2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1580>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   210ae:	c02f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   210b2:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   210b4:	101c                	c.addi4spn	a5,sp,32
   210b6:	00f50463          	beq	a0,a5,210be <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x158c>
   210ba:	bf6f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
   210be:	00018617          	auipc	a2,0x18
   210c2:	34263603          	ld	a2,834(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   210c6:	00018597          	auipc	a1,0x18
   210ca:	52a5b583          	ld	a1,1322(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   210ce:	854e                	c.mv	a0,s3
   210d0:	d90f50ef          	jal	ra,16660 <__cxa_throw@plt>
      result.location_type = expr_result::type::reg;
   210d4:	4785                	c.li	a5,1
   210d6:	00faa023          	sw	a5,0(s5)
      result.value = (unsigned)op - (unsigned)DW_OP::reg0;
   210da:	fb09079b          	addiw	a5,s2,-80
   210de:	1782                	c.slli	a5,0x20
   210e0:	9381                	c.srli	a5,0x20
   210e2:	00fab423          	sd	a5,8(s5)
      break;
   210e6:	ba9d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      result.location_type = expr_result::type::reg;
   210e8:	4785                	c.li	a5,1
   210ea:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   210ee:	6a9c                	c.ld	a5,16(a3)
   210f0:	02f77763          	bgeu	a4,a5,2111e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15ec>
    std::uint64_t result = 0;
   210f4:	4501                	c.li	a0,0
    int shift = 0;
   210f6:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   210f8:	0705                	c.addi	a4,1
   210fa:	f0ba                	c.sdsp	a4,96(sp)
   210fc:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21100:	07f7f613          	andi	a2,a5,127
   21104:	00b61633          	sll	a2,a2,a1
   21108:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   2110a:	0187979b          	slliw	a5,a5,0x18
   2110e:	4187d79b          	sraiw	a5,a5,0x18
   21112:	0007da63          	bge	a5,zero,21126 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15f4>
      shift += 7;
   21116:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   21118:	6a9c                	c.ld	a5,16(a3)
   2111a:	fcf76fe3          	bltu	a4,a5,210f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15c6>
    underflow();
   2111e:	0888                	c.addi4spn	a0,sp,80
   21120:	b19f90ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   21124:	4501                	c.li	a0,0
      result.value = cur.uleb128();
   21126:	00aab423          	sd	a0,8(s5)
      break;
   2112a:	ba0d                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      result.location_type = expr_result::type::implicit;
   2112c:	478d                	c.li	a5,3
   2112e:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   21132:	6a9c                	c.ld	a5,16(a3)
   21134:	02f77763          	bgeu	a4,a5,21162 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1630>
    std::uint64_t result = 0;
   21138:	4501                	c.li	a0,0
    int shift = 0;
   2113a:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   2113c:	0705                	c.addi	a4,1
   2113e:	f0ba                	c.sdsp	a4,96(sp)
   21140:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21144:	07f7f613          	andi	a2,a5,127
   21148:	00b61633          	sll	a2,a2,a1
   2114c:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   2114e:	0187979b          	slliw	a5,a5,0x18
   21152:	4187d79b          	sraiw	a5,a5,0x18
   21156:	0007da63          	bge	a5,zero,2116a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1638>
      shift += 7;
   2115a:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   2115c:	6a9c                	c.ld	a5,16(a3)
   2115e:	fcf76fe3          	bltu	a4,a5,2113c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x160a>
    underflow();
   21162:	0888                	c.addi4spn	a0,sp,80
   21164:	ad5f90ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   21168:	4501                	c.li	a0,0
      result.implicit_len = cur.uleb128();
   2116a:	00aabc23          	sd	a0,24(s5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2116e:	67c6                	c.ldsp	a5,80(sp)
   21170:	6b98                	c.ld	a4,16(a5)
   21172:	7786                	c.ldsp	a5,96(sp)
   21174:	40f706b3          	sub	a3,a4,a5
   21178:	00a6e463          	bltu	a3,a0,21180 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x164e>
   2117c:	00e7e563          	bltu	a5,a4,21186 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1654>
      underflow();
   21180:	0888                	c.addi4spn	a0,sp,80
   21182:	ab7f90ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
      result.implicit = cur.pos;
   21186:	7786                	c.ldsp	a5,96(sp)
   21188:	00fab823          	sd	a5,16(s5)
      break;
   2118c:	b8c1                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  bool empty() const { return base == end; }
   2118e:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   21190:	772a                	c.ldsp	a4,168(sp)
   21192:	14f70763          	beq	a4,a5,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      result.location_type = expr_result::type::literal;
   21196:	4709                	c.li	a4,2
   21198:	00eaa023          	sw	a4,0(s5)
      result.value = stack.back();
   2119c:	ff87b783          	ld	a5,-8(a5)
   211a0:	00fab423          	sd	a5,8(s5)
      break;
   211a4:	b865                	c.j	20a5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error(to_string(op) + " not implemented");
   211a6:	4541                	c.li	a0,16
   211a8:	a28f50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   211ac:	89aa                	c.mv	s3,a0
   211ae:	85ca                	c.mv	a1,s2
   211b0:	0808                	c.addi4spn	a0,sp,16
   211b2:	1f9070ef          	jal	ra,28baa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   211b6:	0000d597          	auipc	a1,0xd
   211ba:	c8a58593          	addi	a1,a1,-886 # 2de40 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   211be:	0808                	c.addi4spn	a0,sp,16
   211c0:	d80f50ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   211c4:	85aa                	c.mv	a1,a0
   211c6:	1800                	c.addi4spn	s0,sp,48
   211c8:	8522                	c.mv	a0,s0
   211ca:	a46f50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   211ce:	85a2                	c.mv	a1,s0
   211d0:	854e                	c.mv	a0,s3
   211d2:	c4ef50ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   211d6:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   211d8:	009c                	c.addi4spn	a5,sp,64
   211da:	00f50463          	beq	a0,a5,211e2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16b0>
   211de:	ad2f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   211e2:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   211e4:	101c                	c.addi4spn	a5,sp,32
   211e6:	00f50463          	beq	a0,a5,211ee <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16bc>
   211ea:	ac6f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
   211ee:	00018617          	auipc	a2,0x18
   211f2:	21263603          	ld	a2,530(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   211f6:	00018597          	auipc	a1,0x18
   211fa:	3fa5b583          	ld	a1,1018(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   211fe:	854e                	c.mv	a0,s3
   21200:	c60f50ef          	jal	ra,16660 <__cxa_throw@plt>
      throw expr_error("unknown user op " + to_string(op));
   21204:	4541                	c.li	a0,16
   21206:	9caf50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2120a:	89aa                	c.mv	s3,a0
   2120c:	85ca                	c.mv	a1,s2
   2120e:	0808                	c.addi4spn	a0,sp,16
   21210:	19b070ef          	jal	ra,28baa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   21214:	0000d617          	auipc	a2,0xd
   21218:	c4460613          	addi	a2,a2,-956 # 2de58 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3b0>
   2121c:	4581                	c.li	a1,0
   2121e:	0808                	c.addi4spn	a0,sp,16
   21220:	920f50ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21224:	85aa                	c.mv	a1,a0
   21226:	1800                	c.addi4spn	s0,sp,48
   21228:	8522                	c.mv	a0,s0
   2122a:	9e6f50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2122e:	85a2                	c.mv	a1,s0
   21230:	854e                	c.mv	a0,s3
   21232:	b0ef50ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   21236:	00018797          	auipc	a5,0x18
   2123a:	1127b783          	ld	a5,274(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   2123e:	07c1                	c.addi	a5,16
   21240:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   21244:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21246:	009c                	c.addi4spn	a5,sp,64
   21248:	00f50463          	beq	a0,a5,21250 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x171e>
   2124c:	a64f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21250:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21252:	101c                	c.addi4spn	a5,sp,32
   21254:	00f50463          	beq	a0,a5,2125c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x172a>
   21258:	a58f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2125c:	00018617          	auipc	a2,0x18
   21260:	24463603          	ld	a2,580(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   21264:	00018597          	auipc	a1,0x18
   21268:	2b45b583          	ld	a1,692(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   2126c:	854e                	c.mv	a0,s3
   2126e:	bf2f50ef          	jal	ra,16660 <__cxa_throw@plt>
      throw expr_error("bad operation " + to_string(op));
   21272:	4541                	c.li	a0,16
   21274:	95cf50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   21278:	89aa                	c.mv	s3,a0
   2127a:	85ca                	c.mv	a1,s2
   2127c:	0808                	c.addi4spn	a0,sp,16
   2127e:	12d070ef          	jal	ra,28baa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   21282:	0000d617          	auipc	a2,0xd
   21286:	bee60613          	addi	a2,a2,-1042 # 2de70 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3c8>
   2128a:	4581                	c.li	a1,0
   2128c:	0808                	c.addi4spn	a0,sp,16
   2128e:	8b2f50ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21292:	85aa                	c.mv	a1,a0
   21294:	1800                	c.addi4spn	s0,sp,48
   21296:	8522                	c.mv	a0,s0
   21298:	978f50ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2129c:	85a2                	c.mv	a1,s0
   2129e:	854e                	c.mv	a0,s3
   212a0:	aa0f50ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   212a4:	00018797          	auipc	a5,0x18
   212a8:	0a47b783          	ld	a5,164(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   212ac:	07c1                	c.addi	a5,16
   212ae:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   212b2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   212b4:	009c                	c.addi4spn	a5,sp,64
   212b6:	00f50463          	beq	a0,a5,212be <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x178c>
   212ba:	9f6f50ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   212be:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   212c0:	101c                	c.addi4spn	a5,sp,32
   212c2:	00f50463          	beq	a0,a5,212ca <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1798>
   212c6:	9eaf50ef          	jal	ra,164b0 <operator delete(void*)@plt>
   212ca:	00018617          	auipc	a2,0x18
   212ce:	1d663603          	ld	a2,470(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   212d2:	00018597          	auipc	a1,0x18
   212d6:	2465b583          	ld	a1,582(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   212da:	854e                	c.mv	a0,s3
   212dc:	b84f50ef          	jal	ra,16660 <__cxa_throw@plt>
  throw expr_error("stack underflow evaluating DWARF expression");
   212e0:	4541                	c.li	a0,16
   212e2:	8eef50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   212e6:	892a                	c.mv	s2,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   212e8:	0000d597          	auipc	a1,0xd
   212ec:	b9858593          	addi	a1,a1,-1128 # 2de80 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3d8>
   212f0:	c20f50ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   212f4:	00018797          	auipc	a5,0x18
   212f8:	0547b783          	ld	a5,84(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   212fc:	07c1                	c.addi	a5,16
   212fe:	00f93023          	sd	a5,0(s2)
   21302:	00018617          	auipc	a2,0x18
   21306:	19e63603          	ld	a2,414(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   2130a:	00018597          	auipc	a1,0x18
   2130e:	20e5b583          	ld	a1,526(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   21312:	854a                	c.mv	a0,s2
   21314:	b4cf50ef          	jal	ra,16660 <__cxa_throw@plt>
  if (result.location_type == expr_result::type::address) {
   21318:	000aa783          	lw	a5,0(s5)
   2131c:	c399                	c.beqz	a5,21322 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17f0>
   2131e:	a2ffe06f          	jal	zero,1fd4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a>
   21322:	77ca                	c.ldsp	a5,176(sp)
    if (stack.empty())
   21324:	772a                	c.ldsp	a4,168(sp)
   21326:	00f70863          	beq	a4,a5,21336 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1804>
    result.value = stack.back();
   2132a:	ff87b783          	ld	a5,-8(a5)
   2132e:	00fab423          	sd	a5,8(s5)
   21332:	a1bfe06f          	jal	zero,1fd4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a>
      throw expr_error("final stack is empty; no result given");
   21336:	4541                	c.li	a0,16
   21338:	898f50ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2133c:	892a                	c.mv	s2,a0
   2133e:	0000d597          	auipc	a1,0xd
   21342:	b7258593          	addi	a1,a1,-1166 # 2deb0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x408>
   21346:	bcaf50ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2134a:	00018797          	auipc	a5,0x18
   2134e:	ffe7b783          	ld	a5,-2(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   21352:	07c1                	c.addi	a5,16
   21354:	00f93023          	sd	a5,0(s2)
   21358:	00018617          	auipc	a2,0x18
   2135c:	14863603          	ld	a2,328(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   21360:	00018597          	auipc	a1,0x18
   21364:	1b85b583          	ld	a1,440(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   21368:	854a                	c.mv	a0,s2
   2136a:	af6f50ef          	jal	ra,16660 <__cxa_throw@plt>
   2136e:	55fd                	c.li	a1,-1
   21370:	03040513          	addi	a0,s0,48
   21374:	fbdf40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21378:	9f3fe06f          	jal	zero,1fd6a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x238>
	_M_dispose();
   2137c:	601c                	c.ld	a5,0(s0)
   2137e:	6b9c                	c.ld	a5,16(a5)
   21380:	8522                	c.mv	a0,s0
   21382:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21384:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21388:	00018797          	auipc	a5,0x18
   2138c:	0f07b783          	ld	a5,240(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21390:	0007c783          	lbu	a5,0(a5)
   21394:	c385                	c.beqz	a5,213b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1882>
    _Atomic_word __result = *__mem;
   21396:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   21398:	fff7871b          	addiw	a4,a5,-1
   2139c:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2139e:	4705                	c.li	a4,1
   213a0:	00e78463          	beq	a5,a4,213a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1876>
   213a4:	9d1fe06f          	jal	zero,1fd74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
	    _M_destroy();
   213a8:	601c                	c.ld	a5,0(s0)
   213aa:	6f9c                	c.ld	a5,24(a5)
   213ac:	8522                	c.mv	a0,s0
   213ae:	9782                	c.jalr	a5
   213b0:	9c5fe06f          	jal	zero,1fd74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
      return __exchange_and_add(__mem, __val);
   213b4:	55fd                	c.li	a1,-1
   213b6:	03440513          	addi	a0,s0,52
   213ba:	f77f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   213be:	87aa                	c.mv	a5,a0
   213c0:	bff9                	c.j	2139e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x186c>
   213c2:	55fd                	c.li	a1,-1
   213c4:	03048513          	addi	a0,s1,48
   213c8:	f69f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   213cc:	9c3fe06f          	jal	zero,1fd8e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c>
	_M_dispose();
   213d0:	609c                	c.ld	a5,0(s1)
   213d2:	6b9c                	c.ld	a5,16(a5)
   213d4:	8526                	c.mv	a0,s1
   213d6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   213d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   213dc:	00018797          	auipc	a5,0x18
   213e0:	09c7b783          	ld	a5,156(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   213e4:	0007c783          	lbu	a5,0(a5)
   213e8:	c385                	c.beqz	a5,21408 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18d6>
    _Atomic_word __result = *__mem;
   213ea:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   213ec:	fff7871b          	addiw	a4,a5,-1
   213f0:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   213f2:	4705                	c.li	a4,1
   213f4:	00e78463          	beq	a5,a4,213fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18ca>
   213f8:	9a1fe06f          	jal	zero,1fd98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
	    _M_destroy();
   213fc:	609c                	c.ld	a5,0(s1)
   213fe:	6f9c                	c.ld	a5,24(a5)
   21400:	8526                	c.mv	a0,s1
   21402:	9782                	c.jalr	a5
   21404:	995fe06f          	jal	zero,1fd98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
      return __exchange_and_add(__mem, __val);
   21408:	55fd                	c.li	a1,-1
   2140a:	03448513          	addi	a0,s1,52
   2140e:	f23f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21412:	87aa                	c.mv	a5,a0
   21414:	bff9                	c.j	213f2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18c0>
   21416:	55fd                	c.li	a1,-1
   21418:	030b8513          	addi	a0,s7,48
   2141c:	f15f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21420:	99bfe06f          	jal	zero,1fdba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x288>
	_M_dispose();
   21424:	000bb783          	ld	a5,0(s7)
   21428:	6b9c                	c.ld	a5,16(a5)
   2142a:	855e                	c.mv	a0,s7
   2142c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2142e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21432:	00018797          	auipc	a5,0x18
   21436:	0467b783          	ld	a5,70(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2143a:	0007c783          	lbu	a5,0(a5)
   2143e:	c39d                	c.beqz	a5,21464 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1932>
    _Atomic_word __result = *__mem;
   21440:	034ba783          	lw	a5,52(s7)
    *__mem += __val;
   21444:	fff7871b          	addiw	a4,a5,-1
   21448:	02ebaa23          	sw	a4,52(s7)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2144c:	4705                	c.li	a4,1
   2144e:	00e78463          	beq	a5,a4,21456 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1924>
   21452:	973fe06f          	jal	zero,1fdc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
	    _M_destroy();
   21456:	000bb783          	ld	a5,0(s7)
   2145a:	6f9c                	c.ld	a5,24(a5)
   2145c:	855e                	c.mv	a0,s7
   2145e:	9782                	c.jalr	a5
   21460:	965fe06f          	jal	zero,1fdc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
      return __exchange_and_add(__mem, __val);
   21464:	55fd                	c.li	a1,-1
   21466:	034b8513          	addi	a0,s7,52
   2146a:	ec7f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2146e:	87aa                	c.mv	a5,a0
   21470:	bff1                	c.j	2144c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x191a>
      throw runtime_error("DW_OP_fbreg not implemented");
   21472:	842a                	c.mv	s0,a0
   21474:	854a                	c.mv	a0,s2
   21476:	ffbf40ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2147a:	6566                	c.ldsp	a0,88(sp)
   2147c:	c511                	c.beqz	a0,21488 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1956>
	  _M_pi->_M_release();
   2147e:	00018317          	auipc	t1,0x18
   21482:	f4233303          	ld	t1,-190(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   21486:	9302                	c.jalr	t1
   21488:	8526                	c.mv	a0,s1
   2148a:	00018317          	auipc	t1,0x18
   2148e:	f3633303          	ld	t1,-202(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   21492:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   21494:	000b8863          	beq	s7,zero,214a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1972>
	  _M_pi->_M_release();
   21498:	855e                	c.mv	a0,s7
   2149a:	00018317          	auipc	t1,0x18
   2149e:	f2633303          	ld	t1,-218(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   214a2:	9302                	c.jalr	t1
    for (T *p = base; p < end; ++p)
   214a4:	752a                	c.ldsp	a0,168(sp)
   214a6:	87aa                	c.mv	a5,a0
   214a8:	774a                	c.ldsp	a4,176(sp)
   214aa:	10e7e163          	bltu	a5,a4,215ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a7a>
    if ((char *)base != buf)
   214ae:	10bc                	c.addi4spn	a5,sp,104
   214b0:	00f50563          	beq	a0,a5,214ba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1988>
      delete[] (char *)base;
   214b4:	c119                	c.beqz	a0,214ba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1988>
   214b6:	8aaf50ef          	jal	ra,16560 <operator delete[](void*)@plt>
   214ba:	8522                	c.mv	a0,s0
   214bc:	9d4f50ef          	jal	ra,16690 <_Unwind_Resume@plt>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   214c0:	842a                	c.mv	s0,a0
   214c2:	854a                	c.mv	a0,s2
   214c4:	fadf40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   214c8:	bf4d                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   214ca:	842a                	c.mv	s0,a0
   214cc:	854a                	c.mv	a0,s2
   214ce:	fa3f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   214d2:	b765                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      throw runtime_error("DW_OP_push_object_address not implemented");
   214d4:	842a                	c.mv	s0,a0
   214d6:	854a                	c.mv	a0,s2
   214d8:	f99f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   214dc:	bf79                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   214de:	842a                	c.mv	s0,a0
   214e0:	854a                	c.mv	a0,s2
   214e2:	f8ff40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   214e6:	bf51                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   214e8:	842a                	c.mv	s0,a0
   214ea:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   214ec:	009c                	c.addi4spn	a5,sp,64
   214ee:	00f50463          	beq	a0,a5,214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c4>
   214f2:	fbff40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   214f6:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   214f8:	101c                	c.addi4spn	a5,sp,32
   214fa:	00f50463          	beq	a0,a5,21502 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19d0>
   214fe:	fb3f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   21502:	854e                	c.mv	a0,s3
   21504:	f6df40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   21508:	bf8d                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   2150a:	842a                	c.mv	s0,a0
   2150c:	b7ed                	c.j	214f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c4>
   2150e:	842a                	c.mv	s0,a0
   21510:	bfcd                	c.j	21502 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19d0>
   21512:	842a                	c.mv	s0,a0
   21514:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21516:	009c                	c.addi4spn	a5,sp,64
   21518:	00f50463          	beq	a0,a5,21520 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ee>
   2151c:	f95f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21520:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21522:	101c                	c.addi4spn	a5,sp,32
   21524:	00f50463          	beq	a0,a5,2152c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19fa>
   21528:	f89f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   2152c:	854e                	c.mv	a0,s3
   2152e:	f43f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   21532:	b7a1                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21534:	842a                	c.mv	s0,a0
   21536:	b7ed                	c.j	21520 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ee>
   21538:	842a                	c.mv	s0,a0
   2153a:	bfcd                	c.j	2152c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19fa>
   2153c:	842a                	c.mv	s0,a0
   2153e:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21540:	009c                	c.addi4spn	a5,sp,64
   21542:	00f50463          	beq	a0,a5,2154a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a18>
   21546:	f6bf40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2154a:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2154c:	101c                	c.addi4spn	a5,sp,32
   2154e:	00f50463          	beq	a0,a5,21556 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a24>
   21552:	f5ff40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw expr_error("unknown user op " + to_string(op));
   21556:	854e                	c.mv	a0,s3
   21558:	f19f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2155c:	bf39                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   2155e:	842a                	c.mv	s0,a0
   21560:	b7ed                	c.j	2154a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a18>
   21562:	842a                	c.mv	s0,a0
   21564:	bfcd                	c.j	21556 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a24>
   21566:	842a                	c.mv	s0,a0
   21568:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2156a:	009c                	c.addi4spn	a5,sp,64
   2156c:	00f50463          	beq	a0,a5,21574 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a42>
   21570:	f41f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21574:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21576:	101c                	c.addi4spn	a5,sp,32
   21578:	00f50463          	beq	a0,a5,21580 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a4e>
   2157c:	f35f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      throw expr_error("bad operation " + to_string(op));
   21580:	854e                	c.mv	a0,s3
   21582:	eeff40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   21586:	bdd5                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21588:	842a                	c.mv	s0,a0
   2158a:	b7ed                	c.j	21574 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a42>
   2158c:	842a                	c.mv	s0,a0
   2158e:	bfcd                	c.j	21580 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a4e>
      throw expr_error("final stack is empty; no result given");
   21590:	842a                	c.mv	s0,a0
   21592:	854a                	c.mv	a0,s2
   21594:	eddf40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   21598:	b5cd                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
  throw expr_error("stack underflow evaluating DWARF expression");
   2159a:	842a                	c.mv	s0,a0
   2159c:	854a                	c.mv	a0,s2
   2159e:	ed3f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   215a2:	bde1                	c.j	2147a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
	if (_M_pi != nullptr)
   215a4:	842a                	c.mv	s0,a0
   215a6:	b5fd                	c.j	21494 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1962>
    for (T *p = base; p < end; ++p)
   215a8:	842a                	c.mv	s0,a0
   215aa:	bded                	c.j	214a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1972>
   215ac:	07a1                	c.addi	a5,8
   215ae:	bded                	c.j	214a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1976>
        val |= ((uint64_t)p[i]) << (i * 8);
   215b0:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   215b4:	0785                	c.addi	a5,1
   215b6:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   215b8:	772a                	c.ldsp	a4,168(sp)
   215ba:	77ca                	c.ldsp	a5,176(sp)
   215bc:	8f99                	c.sub	a5,a4
   215be:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   215c0:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   215c2:	796a                	c.ldsp	s2,184(sp)
   215c4:	40e90933          	sub	s2,s2,a4
   215c8:	40395913          	srai	s2,s2,0x3
   215cc:	00f96463          	bltu	s2,a5,215d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aa2>
   215d0:	ac9fe06f          	jal	zero,20098 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x566>
   215d4:	00091363          	bne	s2,zero,215da <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aa8>
   215d8:	4905                	c.li	s2,1
    while (target < n)
   215da:	00f97563          	bgeu	s2,a5,215e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ab2>
      target <<= 1;
   215de:	0906                	c.slli	s2,0x1
    while (target < n)
   215e0:	fef96fe3          	bltu	s2,a5,215de <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aac>
    char *newbuf = new char[sizeof(T[target])];
   215e4:	090e                	c.slli	s2,0x3
   215e6:	854a                	c.mv	a0,s2
   215e8:	cf9f40ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   215ec:	a77fe06f          	jal	zero,20062 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x530>
        val |= ((uint64_t)p[i]) << (i * 8);
   215f0:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   215f4:	0785                	c.addi	a5,1
   215f6:	f0be                	c.sdsp	a5,96(sp)
      stack.push_back(cur.fixed<int8_t>());
   215f8:	018c9c9b          	slliw	s9,s9,0x18
   215fc:	418cdc9b          	sraiw	s9,s9,0x18
  size_type size() const { return end - base; }
   21600:	772a                	c.ldsp	a4,168(sp)
   21602:	77ca                	c.ldsp	a5,176(sp)
   21604:	8f99                	c.sub	a5,a4
   21606:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   21608:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2160a:	796a                	c.ldsp	s2,184(sp)
   2160c:	40e90933          	sub	s2,s2,a4
   21610:	40395913          	srai	s2,s2,0x3
   21614:	00f96463          	bltu	s2,a5,2161c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aea>
   21618:	d53fe06f          	jal	zero,2036a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x838>
   2161c:	00091363          	bne	s2,zero,21622 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1af0>
   21620:	4905                	c.li	s2,1
    while (target < n)
   21622:	00f97563          	bgeu	s2,a5,2162c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1afa>
      target <<= 1;
   21626:	0906                	c.slli	s2,0x1
    while (target < n)
   21628:	fef96fe3          	bltu	s2,a5,21626 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1af4>
    char *newbuf = new char[sizeof(T[target])];
   2162c:	090e                	c.slli	s2,0x3
   2162e:	854a                	c.mv	a0,s2
   21630:	cb1f40ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   21634:	d01fe06f          	jal	zero,20334 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x802>
        val |= ((uint64_t)p[i]) << (i * 8);
   21638:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   2163c:	0785                	c.addi	a5,1
   2163e:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   21640:	774a                	c.ldsp	a4,176(sp)
   21642:	762a                	c.ldsp	a2,168(sp)
   21644:	40c707b3          	sub	a5,a4,a2
   21648:	878d                	c.srai	a5,0x3
      CHECKN(tmp1.u);
   2164a:	c8d7ebe3          	bltu	a5,a3,212e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
  reference revat(size_type n) { return *(end - 1 - n); }
   2164e:	068e                	c.slli	a3,0x3
   21650:	8f15                	c.sub	a4,a3
   21652:	ff870a13          	addi	s4,a4,-8
    reserve(size() + 1);
   21656:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   21658:	796a                	c.ldsp	s2,184(sp)
   2165a:	40c90933          	sub	s2,s2,a2
   2165e:	40395913          	srai	s2,s2,0x3
   21662:	aaf97963          	bgeu	s2,a5,20914 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde2>
   21666:	00091363          	bne	s2,zero,2166c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b3a>
   2166a:	4905                	c.li	s2,1
    while (target < n)
   2166c:	00f97563          	bgeu	s2,a5,21676 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b44>
      target <<= 1;
   21670:	0906                	c.slli	s2,0x1
    while (target < n)
   21672:	fef96fe3          	bltu	s2,a5,21670 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b3e>
    char *newbuf = new char[sizeof(T[target])];
   21676:	090e                	c.slli	s2,0x3
   21678:	854a                	c.mv	a0,s2
   2167a:	c67f40ef          	jal	ra,162e0 <operator new[](unsigned long)@plt>
   2167e:	a60ff06f          	jal	zero,208de <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdac>
        val |= ((uint64_t)p[i]) << (i * 8);
   21682:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   21686:	0785                	c.addi	a5,1
   21688:	f0be                	c.sdsp	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   2168a:	0584e783          	lwu	a5,88(s1)
   2168e:	b6c7f763          	bgeu	a5,a2,209fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xeca>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   21692:	4541                	c.li	a0,16
   21694:	d3df40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   21698:	892a                	c.mv	s2,a0
   2169a:	0000c597          	auipc	a1,0xc
   2169e:	6ee58593          	addi	a1,a1,1774 # 2dd88 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2e0>
   216a2:	86ef50ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   216a6:	b8eff06f          	jal	zero,20a34 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf02>
        val |= ((uint64_t)p[i]) << (i * 8);
   216aa:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   216ae:	0785                	c.addi	a5,1
   216b0:	f0be                	c.sdsp	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   216b2:	0584e783          	lwu	a5,88(s1)
   216b6:	bcd7f163          	bgeu	a5,a3,20a78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf46>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   216ba:	4541                	c.li	a0,16
   216bc:	d15f40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   216c0:	892a                	c.mv	s2,a0
   216c2:	0000c597          	auipc	a1,0xc
   216c6:	6f658593          	addi	a1,a1,1782 # 2ddb8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x310>
   216ca:	846f50ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   216ce:	bf0ff06f          	jal	zero,20abe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf8c>
        val |= ((uint64_t)p[i]) << (i * 8);
   216d2:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   216d6:	0705                	c.addi	a4,1
   216d8:	f0ba                	c.sdsp	a4,96(sp)
    return (T)val;
   216da:	0ff7f913          	andi	s2,a5,255
    switch (op) {
   216de:	37f5                	c.addiw	a5,-3
   216e0:	0ff7f613          	andi	a2,a5,255
   216e4:	b8c9e7e3          	bltu	s3,a2,21272 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1740>
   216e8:	00261793          	slli	a5,a2,0x2
   216ec:	97a2                	c.add	a5,s0
   216ee:	439c                	c.lw	a5,0(a5)
   216f0:	97a2                	c.add	a5,s0
   216f2:	8782                	c.jr	a5

00000000000216f4 <dwarf::expr::evaluate(dwarf::expr_context*) const>:
expr_result expr::evaluate(expr_context *ctx) const {
   216f4:	1101                	c.addi	sp,-32
   216f6:	ec06                	c.sdsp	ra,24(sp)
   216f8:	e822                	c.sdsp	s0,16(sp)
   216fa:	842a                	c.mv	s0,a0
  return evaluate(ctx, {});
   216fc:	e002                	c.sdsp	zero,0(sp)
   216fe:	e402                	c.sdsp	zero,8(sp)
   21700:	868a                	c.mv	a3,sp
   21702:	c30fe0ef          	jal	ra,1fb32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   21706:	8522                	c.mv	a0,s0
   21708:	60e2                	c.ldsp	ra,24(sp)
   2170a:	6442                	c.ldsp	s0,16(sp)
   2170c:	6105                	c.addi16sp	sp,32
   2170e:	8082                	c.jr	ra

0000000000021710 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>:
expr_result expr::evaluate(expr_context *ctx, taddr argument) const {
   21710:	7179                	c.addi16sp	sp,-48
   21712:	f406                	c.sdsp	ra,40(sp)
   21714:	f022                	c.sdsp	s0,32(sp)
   21716:	842a                	c.mv	s0,a0
  return evaluate(ctx, {argument});
   21718:	ec36                	c.sdsp	a3,24(sp)
   2171a:	083c                	c.addi4spn	a5,sp,24
   2171c:	e43e                	c.sdsp	a5,8(sp)
   2171e:	4785                	c.li	a5,1
   21720:	e83e                	c.sdsp	a5,16(sp)
   21722:	0034                	c.addi4spn	a3,sp,8
   21724:	c0efe0ef          	jal	ra,1fb32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   21728:	8522                	c.mv	a0,s0
   2172a:	70a2                	c.ldsp	ra,40(sp)
   2172c:	7402                	c.ldsp	s0,32(sp)
   2172e:	6145                	c.addi16sp	sp,48
   21730:	8082                	c.jr	ra

0000000000021732 <_GLOBAL__sub_I_expr.cc>:

DWARFPP_END_NAMESPACE
   21732:	1141                	c.addi	sp,-16
   21734:	e406                	c.sdsp	ra,8(sp)
expr_context no_expr_context;
   21736:	e0018613          	addi	a2,gp,-512 # 39600 <__dso_handle>
   2173a:	00018597          	auipc	a1,0x18
   2173e:	be65b583          	ld	a1,-1050(a1) # 39320 <dwarf::no_expr_context@@Base+0x310>
   21742:	00018517          	auipc	a0,0x18
   21746:	b8653503          	ld	a0,-1146(a0) # 392c8 <dwarf::expr_context::~expr_context()@@Base+0x17b74>
   2174a:	f77f40ef          	jal	ra,166c0 <__cxa_atexit@plt>
DWARFPP_END_NAMESPACE
   2174e:	60a2                	c.ldsp	ra,8(sp)
   21750:	0141                	c.addi	sp,16
   21752:	8082                	c.jr	ra

0000000000021754 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   21754:	8082                	c.jr	ra

0000000000021756 <dwarf::expr_error::~expr_error()>:
class expr_error : public std::runtime_error {
   21756:	1141                	c.addi	sp,-16
   21758:	e406                	c.sdsp	ra,8(sp)
   2175a:	00018797          	auipc	a5,0x18
   2175e:	bee7b783          	ld	a5,-1042(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   21762:	07c1                	c.addi	a5,16
   21764:	e11c                	c.sd	a5,0(a0)
   21766:	d7bf40ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   2176a:	60a2                	c.ldsp	ra,8(sp)
   2176c:	0141                	c.addi	sp,16
   2176e:	8082                	c.jr	ra

0000000000021770 <dwarf::expr_error::~expr_error()>:
   21770:	1141                	c.addi	sp,-16
   21772:	e406                	c.sdsp	ra,8(sp)
   21774:	e022                	c.sdsp	s0,0(sp)
   21776:	842a                	c.mv	s0,a0
   21778:	00018797          	auipc	a5,0x18
   2177c:	bd07b783          	ld	a5,-1072(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   21780:	07c1                	c.addi	a5,16
   21782:	e11c                	c.sd	a5,0(a0)
   21784:	d5df40ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   21788:	8522                	c.mv	a0,s0
   2178a:	d27f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2178e:	60a2                	c.ldsp	ra,8(sp)
   21790:	6402                	c.ldsp	s0,0(sp)
   21792:	0141                	c.addi	sp,16
   21794:	8082                	c.jr	ra

0000000000021796 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   21796:	1141                	c.addi	sp,-16
   21798:	e406                	c.sdsp	ra,8(sp)
   2179a:	d17f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2179e:	60a2                	c.ldsp	ra,8(sp)
   217a0:	0141                	c.addi	sp,16
   217a2:	8082                	c.jr	ra

00000000000217a4 <dwarf::expr_context::form_tls_address(unsigned long)>:
  virtual taddr form_tls_address(taddr address) {
   217a4:	1101                	c.addi	sp,-32
   217a6:	ec06                	c.sdsp	ra,24(sp)
   217a8:	e822                	c.sdsp	s0,16(sp)
   217aa:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   217ac:	4541                	c.li	a0,16
   217ae:	c23f40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   217b2:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   217b4:	0000c597          	auipc	a1,0xc
   217b8:	4fc58593          	addi	a1,a1,1276 # 2dcb0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x208>
   217bc:	f55f40ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   217c0:	00018797          	auipc	a5,0x18
   217c4:	b887b783          	ld	a5,-1144(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   217c8:	07c1                	c.addi	a5,16
   217ca:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   217cc:	00018617          	auipc	a2,0x18
   217d0:	cd463603          	ld	a2,-812(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   217d4:	00018597          	auipc	a1,0x18
   217d8:	d445b583          	ld	a1,-700(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   217dc:	8522                	c.mv	a0,s0
   217de:	e83f40ef          	jal	ra,16660 <__cxa_throw@plt>
   217e2:	84aa                	c.mv	s1,a0
   217e4:	8522                	c.mv	a0,s0
   217e6:	c8bf40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   217ea:	8526                	c.mv	a0,s1
   217ec:	ea5f40ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000217f0 <dwarf::expr_context::xderef_size(unsigned long, unsigned long, unsigned int)>:
  virtual taddr xderef_size(taddr address, taddr asid, unsigned size) {
   217f0:	1101                	c.addi	sp,-32
   217f2:	ec06                	c.sdsp	ra,24(sp)
   217f4:	e822                	c.sdsp	s0,16(sp)
   217f6:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_xderef_size operations not supported");
   217f8:	4541                	c.li	a0,16
   217fa:	bd7f40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   217fe:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   21800:	0000c597          	auipc	a1,0xc
   21804:	4e058593          	addi	a1,a1,1248 # 2dce0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x238>
   21808:	f09f40ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2180c:	00018797          	auipc	a5,0x18
   21810:	b3c7b783          	ld	a5,-1220(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   21814:	07c1                	c.addi	a5,16
   21816:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_xderef_size operations not supported");
   21818:	00018617          	auipc	a2,0x18
   2181c:	c8863603          	ld	a2,-888(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   21820:	00018597          	auipc	a1,0x18
   21824:	cf85b583          	ld	a1,-776(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   21828:	8522                	c.mv	a0,s0
   2182a:	e37f40ef          	jal	ra,16660 <__cxa_throw@plt>
   2182e:	84aa                	c.mv	s1,a0
   21830:	8522                	c.mv	a0,s0
   21832:	c3ff40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   21836:	8526                	c.mv	a0,s1
   21838:	e59f40ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002183c <dwarf::expr_context::deref_size(unsigned long, unsigned int)>:
  virtual taddr deref_size(taddr address, unsigned size) {
   2183c:	1101                	c.addi	sp,-32
   2183e:	ec06                	c.sdsp	ra,24(sp)
   21840:	e822                	c.sdsp	s0,16(sp)
   21842:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_deref_size operations not supported");
   21844:	4541                	c.li	a0,16
   21846:	b8bf40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2184a:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2184c:	0000c597          	auipc	a1,0xc
   21850:	4c458593          	addi	a1,a1,1220 # 2dd10 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x268>
   21854:	ebdf40ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   21858:	00018797          	auipc	a5,0x18
   2185c:	af07b783          	ld	a5,-1296(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   21860:	07c1                	c.addi	a5,16
   21862:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_deref_size operations not supported");
   21864:	00018617          	auipc	a2,0x18
   21868:	c3c63603          	ld	a2,-964(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   2186c:	00018597          	auipc	a1,0x18
   21870:	cac5b583          	ld	a1,-852(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   21874:	8522                	c.mv	a0,s0
   21876:	debf40ef          	jal	ra,16660 <__cxa_throw@plt>
   2187a:	84aa                	c.mv	s1,a0
   2187c:	8522                	c.mv	a0,s0
   2187e:	bf3f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   21882:	8526                	c.mv	a0,s1
   21884:	e0df40ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000021888 <dwarf::expr_context::reg(unsigned int)>:
  virtual taddr reg(unsigned regnum) {
   21888:	1101                	c.addi	sp,-32
   2188a:	ec06                	c.sdsp	ra,24(sp)
   2188c:	e822                	c.sdsp	s0,16(sp)
   2188e:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_breg* operations not supported");
   21890:	4541                	c.li	a0,16
   21892:	b3ff40ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   21896:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   21898:	0000c597          	auipc	a1,0xc
   2189c:	4a858593          	addi	a1,a1,1192 # 2dd40 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x298>
   218a0:	e71f40ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   218a4:	00018797          	auipc	a5,0x18
   218a8:	aa47b783          	ld	a5,-1372(a5) # 39348 <vtable for dwarf::expr_error@@Base+0x8c0>
   218ac:	07c1                	c.addi	a5,16
   218ae:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_breg* operations not supported");
   218b0:	00018617          	auipc	a2,0x18
   218b4:	bf063603          	ld	a2,-1040(a2) # 394a0 <dwarf::expr_error::~expr_error()@@Base+0x17d4a>
   218b8:	00018597          	auipc	a1,0x18
   218bc:	c605b583          	ld	a1,-928(a1) # 39518 <typeinfo for dwarf::expr_error@@Base+0xab8>
   218c0:	8522                	c.mv	a0,s0
   218c2:	d9ff40ef          	jal	ra,16660 <__cxa_throw@plt>
   218c6:	84aa                	c.mv	s1,a0
   218c8:	8522                	c.mv	a0,s0
   218ca:	ba7f40ef          	jal	ra,16470 <__cxa_free_exception@plt>
   218ce:	8526                	c.mv	a0,s1
   218d0:	dc1f40ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000218d4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

rangelist::rangelist(const std::shared_ptr<section> &sec, section_offset off,
   218d4:	715d                	c.addi16sp	sp,-80
   218d6:	e486                	c.sdsp	ra,72(sp)
   218d8:	e0a2                	c.sdsp	s0,64(sp)
   218da:	fc26                	c.sdsp	s1,56(sp)
   218dc:	f84a                	c.sdsp	s2,48(sp)
   218de:	f44e                	c.sdsp	s3,40(sp)
   218e0:	f052                	c.sdsp	s4,32(sp)
   218e2:	ec56                	c.sdsp	s5,24(sp)
   218e4:	e85a                	c.sdsp	s6,16(sp)
   218e6:	842a                	c.mv	s0,a0
   218e8:	89b6                	c.mv	s3,a3
   218ea:	8a3a                	c.mv	s4,a4
	: _M_start(), _M_finish(), _M_end_of_storage()
   218ec:	00053023          	sd	zero,0(a0)
   218f0:	00053423          	sd	zero,8(a0)
   218f4:	00053823          	sd	zero,16(a0)
      { return _M_ptr; }
   218f8:	0005b903          	ld	s2,0(a1)
   218fc:	57fd                	c.li	a5,-1
   218fe:	e03e                	c.sdsp	a5,0(sp)
      fmt = this->fmt;
   21900:	01892a83          	lw	s5,24(s2)
    if (addr_size == 0)
   21904:	e299                	c.bnez	a3,2190a <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x36>
      addr_size = this->addr_size;
   21906:	02092983          	lw	s3,32(s2)
        type, begin + start, std::min(len, (section_length)(end - begin)), ord,
   2190a:	00893703          	ld	a4,8(s2)
   2190e:	00c704b3          	add	s1,a4,a2
   21912:	01093783          	ld	a5,16(s2)
   21916:	8f99                	c.sub	a5,a4
   21918:	e43e                	c.sdsp	a5,8(sp)
      if (__b < __a)
   2191a:	577d                	c.li	a4,-1
	return __b;
   2191c:	00810b13          	addi	s6,sp,8
      if (__b < __a)
   21920:	00e79363          	bne	a5,a4,21926 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x52>
      return __a;
   21924:	8b0a                	c.mv	s6,sp
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   21926:	00043c23          	sd	zero,24(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2192a:	06000513          	addi	a0,zero,96
   2192e:	b93f40ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   21932:	00052423          	sw	zero,8(a0)
   21936:	00052623          	sw	zero,12(a0)
   2193a:	00052823          	sw	zero,16(a0)
   2193e:	00052a23          	sw	zero,20(a0)
   21942:	00052c23          	sw	zero,24(a0)
   21946:	00052e23          	sw	zero,28(a0)
   2194a:	02053023          	sd	zero,32(a0)
   2194e:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   21952:	4785                	c.li	a5,1
   21954:	d91c                	c.sw	a5,48(a0)
   21956:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   21958:	00018797          	auipc	a5,0x18
   2195c:	c607b783          	ld	a5,-928(a5) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   21960:	07c1                	c.addi	a5,16
   21962:	e11c                	c.sd	a5,0(a0)
   21964:	00092683          	lw	a3,0(s2)
   21968:	000b3703          	ld	a4,0(s6)
   2196c:	01c92783          	lw	a5,28(s2)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   21970:	dd14                	c.sw	a3,56(a0)
   21972:	e124                	c.sd	s1,64(a0)
   21974:	94ba                	c.add	s1,a4
   21976:	e524                	c.sd	s1,72(a0)
   21978:	05552823          	sw	s5,80(a0)
        ord(ord), addr_size(addr_size) {}
   2197c:	c97c                	c.sw	a5,84(a0)
   2197e:	05352c23          	sw	s3,88(a0)
	  _M_pi = __pi;
   21982:	f008                	c.sd	a0,32(s0)
   21984:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   21988:	ec1c                	c.sd	a5,24(s0)
                     unsigned cu_addr_size, taddr cu_low_pc)
    : sec(sec->slice(off, ~0, format::unknown, cu_addr_size)),
      base_addr(cu_low_pc) {}
   2198a:	03443423          	sd	s4,40(s0)
   2198e:	60a6                	c.ldsp	ra,72(sp)
   21990:	6406                	c.ldsp	s0,64(sp)
   21992:	74e2                	c.ldsp	s1,56(sp)
   21994:	7942                	c.ldsp	s2,48(sp)
   21996:	79a2                	c.ldsp	s3,40(sp)
   21998:	7a02                	c.ldsp	s4,32(sp)
   2199a:	6ae2                	c.ldsp	s5,24(sp)
   2199c:	6b42                	c.ldsp	s6,16(sp)
   2199e:	6161                	c.addi16sp	sp,80
   219a0:	8082                	c.jr	ra
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   219a2:	84aa                	c.mv	s1,a0
   219a4:	6008                	c.ld	a0,0(s0)
	if (__p)
   219a6:	c119                	c.beqz	a0,219ac <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   219a8:	b09f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   219ac:	8526                	c.mv	a0,s1
   219ae:	ce3f40ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000219b2 <dwarf::rangelist::end() const>:
      : _M_ptr(0), _M_refcount()
   219b2:	00053023          	sd	zero,0(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   219b6:	00053423          	sd	zero,8(a0)
  iterator() : sec(nullptr), base_addr(0), pos(0) {}
   219ba:	00053823          	sd	zero,16(a0)
   219be:	00053c23          	sd	zero,24(a0)
  if (sec)
    return iterator(sec, base_addr);
  return end();
}

rangelist::iterator rangelist::end() const { return iterator(); }
   219c2:	8082                	c.jr	ra

00000000000219c4 <dwarf::rangelist::iterator::operator++()>:
    : sec(sec), base_addr(base_addr), pos(0) {
  // Read in the first entry
  ++(*this);
}

rangelist::iterator &rangelist::iterator::operator++() {
   219c4:	715d                	c.addi16sp	sp,-80
   219c6:	e486                	c.sdsp	ra,72(sp)
   219c8:	e0a2                	c.sdsp	s0,64(sp)
   219ca:	fc26                	c.sdsp	s1,56(sp)
   219cc:	f84a                	c.sdsp	s2,48(sp)
   219ce:	f44e                	c.sdsp	s3,40(sp)
   219d0:	f052                	c.sdsp	s4,32(sp)
   219d2:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   219d4:	6104                	c.ld	s1,0(a0)
  // DWARF4 section 2.17.3
  taddr largest_offset = ~(taddr)0;
  if (sec->addr_size < sizeof(taddr))
   219d6:	509c                	c.lw	a5,32(s1)
   219d8:	471d                	c.li	a4,7
  taddr largest_offset = ~(taddr)0;
   219da:	5a7d                	c.li	s4,-1
  if (sec->addr_size < sizeof(taddr))
   219dc:	00f76863          	bltu	a4,a5,219ec <dwarf::rangelist::iterator::operator++()+0x28>
    largest_offset += 1 << (8 * sec->addr_size);
   219e0:	0037979b          	slliw	a5,a5,0x3
   219e4:	4a05                	c.li	s4,1
   219e6:	00fa1a3b          	sllw	s4,s4,a5
   219ea:	1a7d                	c.addi	s4,-1
      : _M_pi(__r._M_pi)
   219ec:	00843903          	ld	s2,8(s0)
	if (_M_pi != nullptr)
   219f0:	20090963          	beq	s2,zero,21c02 <dwarf::rangelist::iterator::operator++()+0x23e>
    if (__is_single_threaded())
   219f4:	00018797          	auipc	a5,0x18
   219f8:	a847b783          	ld	a5,-1404(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   219fc:	0007c783          	lbu	a5,0(a5)
   21a00:	c7d1                	c.beqz	a5,21a8c <dwarf::rangelist::iterator::operator++()+0xc8>
  { *__mem += __val; }
   21a02:	03092783          	lw	a5,48(s2)
   21a06:	2785                	c.addiw	a5,1
   21a08:	02f92823          	sw	a5,48(s2)

  // Read in entries until we reach a regular entry of an
  // end-of-list.  Note that pos points to the beginning of the
  // entry *following* the current entry, so that's where we
  // start.
  cursor cur(sec, pos);
   21a0c:	01843983          	ld	s3,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21a10:	e426                	c.sdsp	s1,8(sp)
      : _M_pi(__r._M_pi)
   21a12:	e84a                	c.sdsp	s2,16(sp)
    if (__is_single_threaded())
   21a14:	00018797          	auipc	a5,0x18
   21a18:	a647b783          	ld	a5,-1436(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21a1c:	0007c783          	lbu	a5,0(a5)
   21a20:	cfa5                	c.beqz	a5,21a98 <dwarf::rangelist::iterator::operator++()+0xd4>
  { *__mem += __val; }
   21a22:	03092783          	lw	a5,48(s2)
   21a26:	2785                	c.addiw	a5,1
   21a28:	02f92823          	sw	a5,48(s2)
      : sec(sec), pos(sec->begin + offset) {}
   21a2c:	649c                	c.ld	a5,8(s1)
   21a2e:	97ce                	c.add	a5,s3
   21a30:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   21a32:	00018797          	auipc	a5,0x18
   21a36:	a467b783          	ld	a5,-1466(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21a3a:	0007c783          	lbu	a5,0(a5)
   21a3e:	c3bd                	c.beqz	a5,21aa4 <dwarf::rangelist::iterator::operator++()+0xe0>
    _Atomic_word __result = *__mem;
   21a40:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   21a44:	fff5079b          	addiw	a5,a0,-1
   21a48:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21a4c:	4785                	c.li	a5,1
   21a4e:	1cf51063          	bne	a0,a5,21c0e <dwarf::rangelist::iterator::operator++()+0x24a>
	_M_dispose();
   21a52:	00093783          	ld	a5,0(s2)
   21a56:	6b9c                	c.ld	a5,16(a5)
   21a58:	854a                	c.mv	a0,s2
   21a5a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21a5c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21a60:	00018797          	auipc	a5,0x18
   21a64:	a187b783          	ld	a5,-1512(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21a68:	0007c783          	lbu	a5,0(a5)
   21a6c:	c3b1                	c.beqz	a5,21ab0 <dwarf::rangelist::iterator::operator++()+0xec>
    _Atomic_word __result = *__mem;
   21a6e:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   21a72:	fff5079b          	addiw	a5,a0,-1
   21a76:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21a7a:	4785                	c.li	a5,1
   21a7c:	18f51963          	bne	a0,a5,21c0e <dwarf::rangelist::iterator::operator++()+0x24a>
	    _M_destroy();
   21a80:	00093783          	ld	a5,0(s2)
   21a84:	6f9c                	c.ld	a5,24(a5)
   21a86:	854a                	c.mv	a0,s2
   21a88:	9782                	c.jalr	a5
   21a8a:	a251                	c.j	21c0e <dwarf::rangelist::iterator::operator++()+0x24a>
      __atomic_add(__mem, __val);
   21a8c:	4585                	c.li	a1,1
   21a8e:	03090513          	addi	a0,s2,48
   21a92:	86ff40ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21a96:	bf9d                	c.j	21a0c <dwarf::rangelist::iterator::operator++()+0x48>
   21a98:	4585                	c.li	a1,1
   21a9a:	03090513          	addi	a0,s2,48
   21a9e:	863f40ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21aa2:	b769                	c.j	21a2c <dwarf::rangelist::iterator::operator++()+0x68>
      return __exchange_and_add(__mem, __val);
   21aa4:	55fd                	c.li	a1,-1
   21aa6:	03090513          	addi	a0,s2,48
   21aaa:	887f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21aae:	bf79                	c.j	21a4c <dwarf::rangelist::iterator::operator++()+0x88>
   21ab0:	55fd                	c.li	a1,-1
   21ab2:	03490513          	addi	a0,s2,52
   21ab6:	87bf40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21aba:	b7c1                	c.j	21a7a <dwarf::rangelist::iterator::operator++()+0xb6>
  while (true) {
    entry.low = cur.address();
   21abc:	f008                	c.sd	a0,32(s0)
    entry.high = cur.address();
   21abe:	854a                	c.mv	a0,s2
   21ac0:	9982                	c.jalr	s3
   21ac2:	f408                	c.sd	a0,40(s0)

    if (entry.low == 0 && entry.high == 0) {
   21ac4:	701c                	c.ld	a5,32(s0)
   21ac6:	00a7e4b3          	or	s1,a5,a0
   21aca:	e0d9                	c.bnez	s1,21b50 <dwarf::rangelist::iterator::operator++()+0x18c>
   21acc:	00043023          	sd	zero,0(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   21ad0:	00843903          	ld	s2,8(s0)
	__r._M_pi = _M_pi;
   21ad4:	00043423          	sd	zero,8(s0)
	if (_M_pi != nullptr)
   21ad8:	08090b63          	beq	s2,zero,21b6e <dwarf::rangelist::iterator::operator++()+0x1aa>
    if (__is_single_threaded())
   21adc:	00018797          	auipc	a5,0x18
   21ae0:	99c7b783          	ld	a5,-1636(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21ae4:	0007c783          	lbu	a5,0(a5)
   21ae8:	c7b9                	c.beqz	a5,21b36 <dwarf::rangelist::iterator::operator++()+0x172>
    _Atomic_word __result = *__mem;
   21aea:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   21aee:	fff5079b          	addiw	a5,a0,-1
   21af2:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21af6:	4785                	c.li	a5,1
   21af8:	06f51b63          	bne	a0,a5,21b6e <dwarf::rangelist::iterator::operator++()+0x1aa>
	_M_dispose();
   21afc:	00093783          	ld	a5,0(s2)
   21b00:	6b9c                	c.ld	a5,16(a5)
   21b02:	854a                	c.mv	a0,s2
   21b04:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21b06:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21b0a:	00018797          	auipc	a5,0x18
   21b0e:	96e7b783          	ld	a5,-1682(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21b12:	0007c783          	lbu	a5,0(a5)
   21b16:	c795                	c.beqz	a5,21b42 <dwarf::rangelist::iterator::operator++()+0x17e>
    _Atomic_word __result = *__mem;
   21b18:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   21b1c:	fff7871b          	addiw	a4,a5,-1
   21b20:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21b24:	4705                	c.li	a4,1
   21b26:	04e79463          	bne	a5,a4,21b6e <dwarf::rangelist::iterator::operator++()+0x1aa>
	    _M_destroy();
   21b2a:	00093783          	ld	a5,0(s2)
   21b2e:	6f9c                	c.ld	a5,24(a5)
   21b30:	854a                	c.mv	a0,s2
   21b32:	9782                	c.jalr	a5
      // End of list
      sec.reset();
      pos = 0;
      break;
   21b34:	a82d                	c.j	21b6e <dwarf::rangelist::iterator::operator++()+0x1aa>
      return __exchange_and_add(__mem, __val);
   21b36:	55fd                	c.li	a1,-1
   21b38:	03090513          	addi	a0,s2,48
   21b3c:	ff4f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21b40:	bf5d                	c.j	21af6 <dwarf::rangelist::iterator::operator++()+0x132>
   21b42:	55fd                	c.li	a1,-1
   21b44:	03490513          	addi	a0,s2,52
   21b48:	fe8f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21b4c:	87aa                	c.mv	a5,a0
   21b4e:	bfd9                	c.j	21b24 <dwarf::rangelist::iterator::operator++()+0x160>
    } else if (entry.low == largest_offset) {
   21b50:	01479663          	bne	a5,s4,21b5c <dwarf::rangelist::iterator::operator++()+0x198>
      // Base address change
      base_addr = entry.high;
   21b54:	e808                	c.sd	a0,16(s0)
    entry.low = cur.address();
   21b56:	854a                	c.mv	a0,s2
   21b58:	9982                	c.jalr	s3
   21b5a:	b78d                	c.j	21abc <dwarf::rangelist::iterator::operator++()+0xf8>
    } else {
      // Regular entry.  Adjust by base address.
      entry.low += base_addr;
   21b5c:	6818                	c.ld	a4,16(s0)
   21b5e:	97ba                	c.add	a5,a4
   21b60:	f01c                	c.sd	a5,32(s0)
      entry.high += base_addr;
   21b62:	972a                	c.add	a4,a0
   21b64:	f418                	c.sd	a4,40(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   21b66:	67a2                	c.ldsp	a5,8(sp)
   21b68:	679c                	c.ld	a5,8(a5)
   21b6a:	64e2                	c.ldsp	s1,24(sp)
   21b6c:	8c9d                	c.sub	s1,a5
      pos = 0;
   21b6e:	ec04                	c.sd	s1,24(s0)
	if (_M_pi != nullptr)
   21b70:	64c2                	c.ldsp	s1,16(sp)
   21b72:	cc99                	c.beqz	s1,21b90 <dwarf::rangelist::iterator::operator++()+0x1cc>
    if (__is_single_threaded())
   21b74:	00018797          	auipc	a5,0x18
   21b78:	9047b783          	ld	a5,-1788(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21b7c:	0007c783          	lbu	a5,0(a5)
   21b80:	c38d                	c.beqz	a5,21ba2 <dwarf::rangelist::iterator::operator++()+0x1de>
    _Atomic_word __result = *__mem;
   21b82:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   21b84:	fff5079b          	addiw	a5,a0,-1
   21b88:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21b8a:	4785                	c.li	a5,1
   21b8c:	02f50163          	beq	a0,a5,21bae <dwarf::rangelist::iterator::operator++()+0x1ea>
      break;
    }
  }

  return *this;
}
   21b90:	8522                	c.mv	a0,s0
   21b92:	60a6                	c.ldsp	ra,72(sp)
   21b94:	6406                	c.ldsp	s0,64(sp)
   21b96:	74e2                	c.ldsp	s1,56(sp)
   21b98:	7942                	c.ldsp	s2,48(sp)
   21b9a:	79a2                	c.ldsp	s3,40(sp)
   21b9c:	7a02                	c.ldsp	s4,32(sp)
   21b9e:	6161                	c.addi16sp	sp,80
   21ba0:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   21ba2:	55fd                	c.li	a1,-1
   21ba4:	03048513          	addi	a0,s1,48
   21ba8:	f88f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21bac:	bff9                	c.j	21b8a <dwarf::rangelist::iterator::operator++()+0x1c6>
	_M_dispose();
   21bae:	609c                	c.ld	a5,0(s1)
   21bb0:	6b9c                	c.ld	a5,16(a5)
   21bb2:	8526                	c.mv	a0,s1
   21bb4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21bb6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21bba:	00018797          	auipc	a5,0x18
   21bbe:	8be7b783          	ld	a5,-1858(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21bc2:	0007c783          	lbu	a5,0(a5)
   21bc6:	cf89                	c.beqz	a5,21be0 <dwarf::rangelist::iterator::operator++()+0x21c>
    _Atomic_word __result = *__mem;
   21bc8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   21bca:	fff5079b          	addiw	a5,a0,-1
   21bce:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21bd0:	4785                	c.li	a5,1
   21bd2:	faf51fe3          	bne	a0,a5,21b90 <dwarf::rangelist::iterator::operator++()+0x1cc>
	    _M_destroy();
   21bd6:	609c                	c.ld	a5,0(s1)
   21bd8:	6f9c                	c.ld	a5,24(a5)
   21bda:	8526                	c.mv	a0,s1
   21bdc:	9782                	c.jalr	a5
  return *this;
   21bde:	bf4d                	c.j	21b90 <dwarf::rangelist::iterator::operator++()+0x1cc>
      return __exchange_and_add(__mem, __val);
   21be0:	55fd                	c.li	a1,-1
   21be2:	03448513          	addi	a0,s1,52
   21be6:	f4af40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21bea:	b7dd                	c.j	21bd0 <dwarf::rangelist::iterator::operator++()+0x20c>
	if (_M_pi != nullptr)
   21bec:	842a                	c.mv	s0,a0
   21bee:	6542                	c.ldsp	a0,16(sp)
   21bf0:	c511                	c.beqz	a0,21bfc <dwarf::rangelist::iterator::operator++()+0x238>
	  _M_pi->_M_release();
   21bf2:	00017317          	auipc	t1,0x17
   21bf6:	7ce33303          	ld	t1,1998(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   21bfa:	9302                	c.jalr	t1
   21bfc:	8522                	c.mv	a0,s0
   21bfe:	a93f40ef          	jal	ra,16690 <_Unwind_Resume@plt>
  cursor cur(sec, pos);
   21c02:	6c18                	c.ld	a4,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21c04:	e426                	c.sdsp	s1,8(sp)
      : _M_pi(__r._M_pi)
   21c06:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   21c08:	649c                	c.ld	a5,8(s1)
   21c0a:	97ba                	c.add	a5,a4
   21c0c:	ec3e                	c.sdsp	a5,24(sp)
    entry.low = cur.address();
   21c0e:	00810913          	addi	s2,sp,8
   21c12:	00017997          	auipc	s3,0x17
   21c16:	75e9b983          	ld	s3,1886(s3) # 39370 <dwarf::cursor::address()@@Base+0x1a27a>
   21c1a:	bf35                	c.j	21b56 <dwarf::rangelist::iterator::operator++()+0x192>

0000000000021c1c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>:
rangelist::iterator::iterator(const std::shared_ptr<section> &sec,
   21c1c:	1101                	c.addi	sp,-32
   21c1e:	ec06                	c.sdsp	ra,24(sp)
   21c20:	e822                	c.sdsp	s0,16(sp)
   21c22:	e426                	c.sdsp	s1,8(sp)
   21c24:	842a                	c.mv	s0,a0
   21c26:	84b2                	c.mv	s1,a2
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21c28:	619c                	c.ld	a5,0(a1)
   21c2a:	e11c                	c.sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   21c2c:	6588                	c.ld	a0,8(a1)
   21c2e:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   21c30:	c919                	c.beqz	a0,21c46 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x2a>
    if (__is_single_threaded())
   21c32:	00018797          	auipc	a5,0x18
   21c36:	8467b783          	ld	a5,-1978(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21c3a:	0007c783          	lbu	a5,0(a5)
   21c3e:	cb99                	c.beqz	a5,21c54 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x38>
  { *__mem += __val; }
   21c40:	591c                	c.lw	a5,48(a0)
   21c42:	2785                	c.addiw	a5,1
   21c44:	d91c                	c.sw	a5,48(a0)
    : sec(sec), base_addr(base_addr), pos(0) {
   21c46:	e804                	c.sd	s1,16(s0)
   21c48:	00043c23          	sd	zero,24(s0)
  ++(*this);
   21c4c:	8522                	c.mv	a0,s0
   21c4e:	d77ff0ef          	jal	ra,219c4 <dwarf::rangelist::iterator::operator++()>
   21c52:	a015                	c.j	21c76 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x5a>
      __atomic_add(__mem, __val);
   21c54:	4585                	c.li	a1,1
   21c56:	03050513          	addi	a0,a0,48
   21c5a:	ea6f40ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21c5e:	b7e5                	c.j	21c46 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x2a>
	if (_M_pi != nullptr)
   21c60:	84aa                	c.mv	s1,a0
   21c62:	6408                	c.ld	a0,8(s0)
   21c64:	c511                	c.beqz	a0,21c70 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x54>
	  _M_pi->_M_release();
   21c66:	00017317          	auipc	t1,0x17
   21c6a:	75a33303          	ld	t1,1882(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   21c6e:	9302                	c.jalr	t1
   21c70:	8526                	c.mv	a0,s1
   21c72:	a1ff40ef          	jal	ra,16690 <_Unwind_Resume@plt>
}
   21c76:	60e2                	c.ldsp	ra,24(sp)
   21c78:	6442                	c.ldsp	s0,16(sp)
   21c7a:	64a2                	c.ldsp	s1,8(sp)
   21c7c:	6105                	c.addi16sp	sp,32
   21c7e:	8082                	c.jr	ra

0000000000021c80 <dwarf::rangelist::begin() const>:
rangelist::iterator rangelist::begin() const {
   21c80:	1141                	c.addi	sp,-16
   21c82:	e406                	c.sdsp	ra,8(sp)
   21c84:	e022                	c.sdsp	s0,0(sp)
   21c86:	842a                	c.mv	s0,a0
  if (sec)
   21c88:	6d9c                	c.ld	a5,24(a1)
   21c8a:	cb91                	c.beqz	a5,21c9e <dwarf::rangelist::begin() const+0x1e>
    return iterator(sec, base_addr);
   21c8c:	7590                	c.ld	a2,40(a1)
   21c8e:	05e1                	c.addi	a1,24
   21c90:	f8dff0ef          	jal	ra,21c1c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>
}
   21c94:	8522                	c.mv	a0,s0
   21c96:	60a2                	c.ldsp	ra,8(sp)
   21c98:	6402                	c.ldsp	s0,0(sp)
   21c9a:	0141                	c.addi	sp,16
   21c9c:	8082                	c.jr	ra
  return end();
   21c9e:	d15ff0ef          	jal	ra,219b2 <dwarf::rangelist::end() const>
   21ca2:	bfcd                	c.j	21c94 <dwarf::rangelist::begin() const+0x14>

0000000000021ca4 <dwarf::rangelist::contains(unsigned long) const>:
bool rangelist::contains(taddr addr) const {
   21ca4:	7119                	c.addi16sp	sp,-128
   21ca6:	fc86                	c.sdsp	ra,120(sp)
   21ca8:	f8a2                	c.sdsp	s0,112(sp)
   21caa:	f4a6                	c.sdsp	s1,104(sp)
   21cac:	84aa                	c.mv	s1,a0
   21cae:	842e                	c.mv	s0,a1
  for (auto ent : *this)
   21cb0:	85aa                	c.mv	a1,a0
   21cb2:	850a                	c.mv	a0,sp
   21cb4:	fcdff0ef          	jal	ra,21c80 <dwarf::rangelist::begin() const>
   21cb8:	85a6                	c.mv	a1,s1
   21cba:	1808                	c.addi4spn	a0,sp,48
   21cbc:	cf7ff0ef          	jal	ra,219b2 <dwarf::rangelist::end() const>
   21cc0:	848a                	c.mv	s1,sp
    return sec == o.sec && pos == o.pos;
   21cc2:	6702                	c.ldsp	a4,0(sp)
   21cc4:	77c2                	c.ldsp	a5,48(sp)
   21cc6:	0ef70c63          	beq	a4,a5,21dbe <dwarf::rangelist::contains(unsigned long) const+0x11a>
   21cca:	7722                	c.ldsp	a4,40(sp)
  bool contains(taddr addr) const { return low <= addr && addr < high; }
   21ccc:	7782                	c.ldsp	a5,32(sp)
   21cce:	00f47663          	bgeu	s0,a5,21cda <dwarf::rangelist::contains(unsigned long) const+0x36>
   21cd2:	8526                	c.mv	a0,s1
   21cd4:	cf1ff0ef          	jal	ra,219c4 <dwarf::rangelist::iterator::operator++()>
   21cd8:	b7ed                	c.j	21cc2 <dwarf::rangelist::contains(unsigned long) const+0x1e>
   21cda:	fee47ce3          	bgeu	s0,a4,21cd2 <dwarf::rangelist::contains(unsigned long) const+0x2e>
	if (_M_pi != nullptr)
   21cde:	7462                	c.ldsp	s0,56(sp)
   21ce0:	cc19                	c.beqz	s0,21cfe <dwarf::rangelist::contains(unsigned long) const+0x5a>
    if (__is_single_threaded())
   21ce2:	00017797          	auipc	a5,0x17
   21ce6:	7967b783          	ld	a5,1942(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21cea:	0007c783          	lbu	a5,0(a5)
   21cee:	cf95                	c.beqz	a5,21d2a <dwarf::rangelist::contains(unsigned long) const+0x86>
    _Atomic_word __result = *__mem;
   21cf0:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21cf2:	fff5079b          	addiw	a5,a0,-1
   21cf6:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21cf8:	4785                	c.li	a5,1
   21cfa:	02f50e63          	beq	a0,a5,21d36 <dwarf::rangelist::contains(unsigned long) const+0x92>
	if (_M_pi != nullptr)
   21cfe:	6422                	c.ldsp	s0,8(sp)
   21d00:	cc19                	c.beqz	s0,21d1e <dwarf::rangelist::contains(unsigned long) const+0x7a>
    if (__is_single_threaded())
   21d02:	00017797          	auipc	a5,0x17
   21d06:	7767b783          	ld	a5,1910(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21d0a:	0007c783          	lbu	a5,0(a5)
   21d0e:	c3bd                	c.beqz	a5,21d74 <dwarf::rangelist::contains(unsigned long) const+0xd0>
    _Atomic_word __result = *__mem;
   21d10:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21d12:	fff5079b          	addiw	a5,a0,-1
   21d16:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21d18:	4785                	c.li	a5,1
   21d1a:	06f50363          	beq	a0,a5,21d80 <dwarf::rangelist::contains(unsigned long) const+0xdc>
      return true;
   21d1e:	4505                	c.li	a0,1
}
   21d20:	70e6                	c.ldsp	ra,120(sp)
   21d22:	7446                	c.ldsp	s0,112(sp)
   21d24:	74a6                	c.ldsp	s1,104(sp)
   21d26:	6109                	c.addi16sp	sp,128
   21d28:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   21d2a:	55fd                	c.li	a1,-1
   21d2c:	03040513          	addi	a0,s0,48
   21d30:	e00f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21d34:	b7d1                	c.j	21cf8 <dwarf::rangelist::contains(unsigned long) const+0x54>
	_M_dispose();
   21d36:	601c                	c.ld	a5,0(s0)
   21d38:	6b9c                	c.ld	a5,16(a5)
   21d3a:	8522                	c.mv	a0,s0
   21d3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21d3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21d42:	00017797          	auipc	a5,0x17
   21d46:	7367b783          	ld	a5,1846(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21d4a:	0007c783          	lbu	a5,0(a5)
   21d4e:	cf89                	c.beqz	a5,21d68 <dwarf::rangelist::contains(unsigned long) const+0xc4>
    _Atomic_word __result = *__mem;
   21d50:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21d52:	fff5079b          	addiw	a5,a0,-1
   21d56:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21d58:	4785                	c.li	a5,1
   21d5a:	faf512e3          	bne	a0,a5,21cfe <dwarf::rangelist::contains(unsigned long) const+0x5a>
	    _M_destroy();
   21d5e:	601c                	c.ld	a5,0(s0)
   21d60:	6f9c                	c.ld	a5,24(a5)
   21d62:	8522                	c.mv	a0,s0
   21d64:	9782                	c.jalr	a5
   21d66:	bf61                	c.j	21cfe <dwarf::rangelist::contains(unsigned long) const+0x5a>
      return __exchange_and_add(__mem, __val);
   21d68:	55fd                	c.li	a1,-1
   21d6a:	03440513          	addi	a0,s0,52
   21d6e:	dc2f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21d72:	b7dd                	c.j	21d58 <dwarf::rangelist::contains(unsigned long) const+0xb4>
   21d74:	55fd                	c.li	a1,-1
   21d76:	03040513          	addi	a0,s0,48
   21d7a:	db6f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21d7e:	bf69                	c.j	21d18 <dwarf::rangelist::contains(unsigned long) const+0x74>
	_M_dispose();
   21d80:	601c                	c.ld	a5,0(s0)
   21d82:	6b9c                	c.ld	a5,16(a5)
   21d84:	8522                	c.mv	a0,s0
   21d86:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21d88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21d8c:	00017797          	auipc	a5,0x17
   21d90:	6ec7b783          	ld	a5,1772(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21d94:	0007c783          	lbu	a5,0(a5)
   21d98:	cf89                	c.beqz	a5,21db2 <dwarf::rangelist::contains(unsigned long) const+0x10e>
    _Atomic_word __result = *__mem;
   21d9a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21d9c:	fff5079b          	addiw	a5,a0,-1
   21da0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21da2:	4785                	c.li	a5,1
   21da4:	f6f51de3          	bne	a0,a5,21d1e <dwarf::rangelist::contains(unsigned long) const+0x7a>
	    _M_destroy();
   21da8:	601c                	c.ld	a5,0(s0)
   21daa:	6f9c                	c.ld	a5,24(a5)
   21dac:	8522                	c.mv	a0,s0
   21dae:	9782                	c.jalr	a5
   21db0:	b7bd                	c.j	21d1e <dwarf::rangelist::contains(unsigned long) const+0x7a>
      return __exchange_and_add(__mem, __val);
   21db2:	55fd                	c.li	a1,-1
   21db4:	03440513          	addi	a0,s0,52
   21db8:	d78f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21dbc:	b7dd                	c.j	21da2 <dwarf::rangelist::contains(unsigned long) const+0xfe>
    return sec == o.sec && pos == o.pos;
   21dbe:	6762                	c.ldsp	a4,24(sp)
   21dc0:	67a6                	c.ldsp	a5,72(sp)
   21dc2:	f0f714e3          	bne	a4,a5,21cca <dwarf::rangelist::contains(unsigned long) const+0x26>
	if (_M_pi != nullptr)
   21dc6:	7462                	c.ldsp	s0,56(sp)
   21dc8:	cc19                	c.beqz	s0,21de6 <dwarf::rangelist::contains(unsigned long) const+0x142>
    if (__is_single_threaded())
   21dca:	00017797          	auipc	a5,0x17
   21dce:	6ae7b783          	ld	a5,1710(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21dd2:	0007c783          	lbu	a5,0(a5)
   21dd6:	cb95                	c.beqz	a5,21e0a <dwarf::rangelist::contains(unsigned long) const+0x166>
    _Atomic_word __result = *__mem;
   21dd8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21dda:	fff5079b          	addiw	a5,a0,-1
   21dde:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21de0:	4785                	c.li	a5,1
   21de2:	02f50a63          	beq	a0,a5,21e16 <dwarf::rangelist::contains(unsigned long) const+0x172>
	if (_M_pi != nullptr)
   21de6:	6422                	c.ldsp	s0,8(sp)
   21de8:	cc19                	c.beqz	s0,21e06 <dwarf::rangelist::contains(unsigned long) const+0x162>
    if (__is_single_threaded())
   21dea:	00017797          	auipc	a5,0x17
   21dee:	68e7b783          	ld	a5,1678(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21df2:	0007c783          	lbu	a5,0(a5)
   21df6:	cfb9                	c.beqz	a5,21e54 <dwarf::rangelist::contains(unsigned long) const+0x1b0>
    _Atomic_word __result = *__mem;
   21df8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21dfa:	fff5079b          	addiw	a5,a0,-1
   21dfe:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21e00:	4785                	c.li	a5,1
   21e02:	04f50f63          	beq	a0,a5,21e60 <dwarf::rangelist::contains(unsigned long) const+0x1bc>
  return false;
   21e06:	4501                	c.li	a0,0
   21e08:	bf21                	c.j	21d20 <dwarf::rangelist::contains(unsigned long) const+0x7c>
      return __exchange_and_add(__mem, __val);
   21e0a:	55fd                	c.li	a1,-1
   21e0c:	03040513          	addi	a0,s0,48
   21e10:	d20f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21e14:	b7f1                	c.j	21de0 <dwarf::rangelist::contains(unsigned long) const+0x13c>
	_M_dispose();
   21e16:	601c                	c.ld	a5,0(s0)
   21e18:	6b9c                	c.ld	a5,16(a5)
   21e1a:	8522                	c.mv	a0,s0
   21e1c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21e1e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21e22:	00017797          	auipc	a5,0x17
   21e26:	6567b783          	ld	a5,1622(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21e2a:	0007c783          	lbu	a5,0(a5)
   21e2e:	cf89                	c.beqz	a5,21e48 <dwarf::rangelist::contains(unsigned long) const+0x1a4>
    _Atomic_word __result = *__mem;
   21e30:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21e32:	fff5079b          	addiw	a5,a0,-1
   21e36:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21e38:	4785                	c.li	a5,1
   21e3a:	faf516e3          	bne	a0,a5,21de6 <dwarf::rangelist::contains(unsigned long) const+0x142>
	    _M_destroy();
   21e3e:	601c                	c.ld	a5,0(s0)
   21e40:	6f9c                	c.ld	a5,24(a5)
   21e42:	8522                	c.mv	a0,s0
   21e44:	9782                	c.jalr	a5
   21e46:	b745                	c.j	21de6 <dwarf::rangelist::contains(unsigned long) const+0x142>
      return __exchange_and_add(__mem, __val);
   21e48:	55fd                	c.li	a1,-1
   21e4a:	03440513          	addi	a0,s0,52
   21e4e:	ce2f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21e52:	b7dd                	c.j	21e38 <dwarf::rangelist::contains(unsigned long) const+0x194>
   21e54:	55fd                	c.li	a1,-1
   21e56:	03040513          	addi	a0,s0,48
   21e5a:	cd6f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21e5e:	b74d                	c.j	21e00 <dwarf::rangelist::contains(unsigned long) const+0x15c>
	_M_dispose();
   21e60:	601c                	c.ld	a5,0(s0)
   21e62:	6b9c                	c.ld	a5,16(a5)
   21e64:	8522                	c.mv	a0,s0
   21e66:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21e68:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21e6c:	00017797          	auipc	a5,0x17
   21e70:	60c7b783          	ld	a5,1548(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21e74:	0007c783          	lbu	a5,0(a5)
   21e78:	cf89                	c.beqz	a5,21e92 <dwarf::rangelist::contains(unsigned long) const+0x1ee>
    _Atomic_word __result = *__mem;
   21e7a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21e7c:	fff5079b          	addiw	a5,a0,-1
   21e80:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21e82:	4785                	c.li	a5,1
   21e84:	f8f511e3          	bne	a0,a5,21e06 <dwarf::rangelist::contains(unsigned long) const+0x162>
	    _M_destroy();
   21e88:	601c                	c.ld	a5,0(s0)
   21e8a:	6f9c                	c.ld	a5,24(a5)
   21e8c:	8522                	c.mv	a0,s0
   21e8e:	9782                	c.jalr	a5
   21e90:	bf9d                	c.j	21e06 <dwarf::rangelist::contains(unsigned long) const+0x162>
      return __exchange_and_add(__mem, __val);
   21e92:	55fd                	c.li	a1,-1
   21e94:	03440513          	addi	a0,s0,52
   21e98:	c98f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21e9c:	b7dd                	c.j	21e82 <dwarf::rangelist::contains(unsigned long) const+0x1de>
	if (_M_pi != nullptr)
   21e9e:	842a                	c.mv	s0,a0
   21ea0:	7562                	c.ldsp	a0,56(sp)
   21ea2:	c511                	c.beqz	a0,21eae <dwarf::rangelist::contains(unsigned long) const+0x20a>
	  _M_pi->_M_release();
   21ea4:	00017317          	auipc	t1,0x17
   21ea8:	51c33303          	ld	t1,1308(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   21eac:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   21eae:	6522                	c.ldsp	a0,8(sp)
   21eb0:	c511                	c.beqz	a0,21ebc <dwarf::rangelist::contains(unsigned long) const+0x218>
	  _M_pi->_M_release();
   21eb2:	00017317          	auipc	t1,0x17
   21eb6:	50e33303          	ld	t1,1294(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   21eba:	9302                	c.jalr	t1
   21ebc:	8522                	c.mv	a0,s0
   21ebe:	fd2f40ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   21ec2:	842a                	c.mv	s0,a0
   21ec4:	b7ed                	c.j	21eae <dwarf::rangelist::contains(unsigned long) const+0x20a>

0000000000021ec6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>:
rangelist::rangelist(const initializer_list<pair<taddr, taddr>> &ranges) {
   21ec6:	7139                	c.addi16sp	sp,-64
   21ec8:	fc06                	c.sdsp	ra,56(sp)
   21eca:	f822                	c.sdsp	s0,48(sp)
   21ecc:	f426                	c.sdsp	s1,40(sp)
   21ece:	f04a                	c.sdsp	s2,32(sp)
   21ed0:	ec4e                	c.sdsp	s3,24(sp)
   21ed2:	e852                	c.sdsp	s4,16(sp)
   21ed4:	842a                	c.mv	s0,a0
	: _M_start(), _M_finish(), _M_end_of_storage()
   21ed6:	00053023          	sd	zero,0(a0)
   21eda:	00053423          	sd	zero,8(a0)
   21ede:	00053823          	sd	zero,16(a0)
      : _M_ptr(0), _M_refcount()
   21ee2:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   21ee6:	02053023          	sd	zero,32(a0)
  synthetic.reserve(ranges.size() * 2 + 2);
   21eea:	659c                	c.ld	a5,8(a1)
   21eec:	0785                	c.addi	a5,1
   21eee:	00179693          	slli	a3,a5,0x1
      if (__n > this->max_size())
   21ef2:	577d                	c.li	a4,-1
   21ef4:	8311                	c.srli	a4,0x4
   21ef6:	00d76a63          	bltu	a4,a3,21f0a <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x44>
   21efa:	892e                	c.mv	s2,a1
      if (this->capacity() < __n)
   21efc:	c6a5                	c.beqz	a3,21f64 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x9e>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   21efe:	00479493          	slli	s1,a5,0x4
   21f02:	8526                	c.mv	a0,s1
   21f04:	dbcf40ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   21f08:	a035                	c.j	21f34 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x6e>
	__throw_length_error(__N("vector::reserve"));
   21f0a:	0000c517          	auipc	a0,0xc
   21f0e:	3f650513          	addi	a0,a0,1014 # 2e300 <typeinfo name for dwarf::expr_context+0x18>
   21f12:	ccef40ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	if (_M_pi != nullptr)
   21f16:	84aa                	c.mv	s1,a0
   21f18:	7008                	c.ld	a0,32(s0)
   21f1a:	c511                	c.beqz	a0,21f26 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x60>
	  _M_pi->_M_release();
   21f1c:	00017317          	auipc	t1,0x17
   21f20:	4a433303          	ld	t1,1188(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   21f24:	9302                	c.jalr	t1
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   21f26:	6008                	c.ld	a0,0(s0)
	if (__p)
   21f28:	c119                	c.beqz	a0,21f2e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   21f2a:	d86f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   21f2e:	8526                	c.mv	a0,s1
   21f30:	f60f40ef          	jal	ra,16690 <_Unwind_Resume@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   21f34:	89aa                	c.mv	s3,a0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   21f36:	00043a03          	ld	s4,0(s0)
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   21f3a:	6410                	c.ld	a2,8(s0)
   21f3c:	41460633          	sub	a2,a2,s4
      if (__count > 0)
   21f40:	00c04563          	blt	zero,a2,21f4a <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x84>
   21f44:	000a0963          	beq	s4,zero,21f56 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x90>
   21f48:	a021                	c.j	21f50 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x8a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21f4a:	85d2                	c.mv	a1,s4
   21f4c:	fd4f40ef          	jal	ra,16720 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   21f50:	8552                	c.mv	a0,s4
   21f52:	d5ef40ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  this->_M_impl._M_start = __tmp;
   21f56:	01343023          	sd	s3,0(s0)
	  this->_M_impl._M_finish = __tmp + __old_size;
   21f5a:	01343423          	sd	s3,8(s0)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   21f5e:	99a6                	c.add	s3,s1
   21f60:	01343823          	sd	s3,16(s0)
      begin() const noexcept { return _M_array; }
   21f64:	00093483          	ld	s1,0(s2)
      end() const noexcept { return begin() + size(); }
   21f68:	00893903          	ld	s2,8(s2)
   21f6c:	0912                	c.slli	s2,0x4
   21f6e:	9926                	c.add	s2,s1
  for (auto &range : ranges) {
   21f70:	05248363          	beq	s1,s2,21fb6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf0>
	  _M_realloc_insert(end(), __x);
   21f74:	00017997          	auipc	s3,0x17
   21f78:	59c9b983          	ld	s3,1436(s3) # 39510 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)@@Base+0x1745e>
   21f7c:	a821                	c.j	21f94 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xce>
   21f7e:	8626                	c.mv	a2,s1
   21f80:	8522                	c.mv	a0,s0
   21f82:	9982                	c.jalr	s3
   21f84:	a005                	c.j	21fa4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xde>
   21f86:	00848613          	addi	a2,s1,8
   21f8a:	8522                	c.mv	a0,s0
   21f8c:	9982                	c.jalr	s3
   21f8e:	04c1                	c.addi	s1,16
   21f90:	02990363          	beq	s2,s1,21fb6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   21f94:	640c                	c.ld	a1,8(s0)
   21f96:	681c                	c.ld	a5,16(s0)
   21f98:	fef583e3          	beq	a1,a5,21f7e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xb8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   21f9c:	609c                	c.ld	a5,0(s1)
   21f9e:	e19c                	c.sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   21fa0:	05a1                	c.addi	a1,8
   21fa2:	e40c                	c.sd	a1,8(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   21fa4:	640c                	c.ld	a1,8(s0)
   21fa6:	681c                	c.ld	a5,16(s0)
   21fa8:	fcf58fe3          	beq	a1,a5,21f86 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc0>
   21fac:	649c                	c.ld	a5,8(s1)
   21fae:	e19c                	c.sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   21fb0:	05a1                	c.addi	a1,8
   21fb2:	e40c                	c.sd	a1,8(s0)
   21fb4:	bfe9                	c.j	21f8e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc8>
  synthetic.push_back(0);
   21fb6:	e002                	c.sdsp	zero,0(sp)
      { emplace_back(std::move(__x)); }
   21fb8:	858a                	c.mv	a1,sp
   21fba:	8522                	c.mv	a0,s0
   21fbc:	00017317          	auipc	t1,0x17
   21fc0:	43c33303          	ld	t1,1084(t1) # 393f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1717e>
   21fc4:	9302                	c.jalr	t1
  synthetic.push_back(0);
   21fc6:	e402                	c.sdsp	zero,8(sp)
   21fc8:	002c                	c.addi4spn	a1,sp,8
   21fca:	8522                	c.mv	a0,s0
   21fcc:	00017317          	auipc	t1,0x17
   21fd0:	42c33303          	ld	t1,1068(t1) # 393f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1717e>
   21fd4:	9302                	c.jalr	t1
      { return _M_data_ptr(this->_M_impl._M_start); }
   21fd6:	00043903          	ld	s2,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   21fda:	6404                	c.ld	s1,8(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   21fdc:	06000513          	addi	a0,zero,96
   21fe0:	ce0f40ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   21fe4:	00052423          	sw	zero,8(a0)
   21fe8:	00052623          	sw	zero,12(a0)
   21fec:	00052823          	sw	zero,16(a0)
   21ff0:	00052a23          	sw	zero,20(a0)
   21ff4:	00052c23          	sw	zero,24(a0)
   21ff8:	00052e23          	sw	zero,28(a0)
   21ffc:	02053023          	sd	zero,32(a0)
   22000:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   22004:	4785                	c.li	a5,1
   22006:	d91c                	c.sw	a5,48(a0)
   22008:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2200a:	00017797          	auipc	a5,0x17
   2200e:	5ae7b783          	ld	a5,1454(a5) # 395b8 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc40>
   22012:	07c1                	c.addi	a5,16
   22014:	e11c                	c.sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   22016:	47a5                	c.li	a5,9
   22018:	dd1c                	c.sw	a5,56(a0)
   2201a:	05253023          	sd	s2,64(a0)
   2201e:	e524                	c.sd	s1,72(a0)
   22020:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   22024:	04052a23          	sw	zero,84(a0)
   22028:	47a1                	c.li	a5,8
   2202a:	cd3c                	c.sw	a5,88(a0)
   2202c:	03850793          	addi	a5,a0,56
   22030:	ec1c                	c.sd	a5,24(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22032:	7004                	c.ld	s1,32(s0)
	__r._M_pi = _M_pi;
   22034:	f008                	c.sd	a0,32(s0)
	if (_M_pi != nullptr)
   22036:	cc99                	c.beqz	s1,22054 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
    if (__is_single_threaded())
   22038:	00017797          	auipc	a5,0x17
   2203c:	4407b783          	ld	a5,1088(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22040:	0007c783          	lbu	a5,0(a5)
   22044:	c395                	c.beqz	a5,22068 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1a2>
    _Atomic_word __result = *__mem;
   22046:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   22048:	fff5079b          	addiw	a5,a0,-1
   2204c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2204e:	4785                	c.li	a5,1
   22050:	02f50263          	beq	a0,a5,22074 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1ae>
  base_addr = 0;
   22054:	02043423          	sd	zero,40(s0)
}
   22058:	70e2                	c.ldsp	ra,56(sp)
   2205a:	7442                	c.ldsp	s0,48(sp)
   2205c:	74a2                	c.ldsp	s1,40(sp)
   2205e:	7902                	c.ldsp	s2,32(sp)
   22060:	69e2                	c.ldsp	s3,24(sp)
   22062:	6a42                	c.ldsp	s4,16(sp)
   22064:	6121                	c.addi16sp	sp,64
   22066:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   22068:	55fd                	c.li	a1,-1
   2206a:	03048513          	addi	a0,s1,48
   2206e:	ac2f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22072:	bff1                	c.j	2204e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x188>
	_M_dispose();
   22074:	609c                	c.ld	a5,0(s1)
   22076:	6b9c                	c.ld	a5,16(a5)
   22078:	8526                	c.mv	a0,s1
   2207a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2207c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22080:	00017797          	auipc	a5,0x17
   22084:	3f87b783          	ld	a5,1016(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22088:	0007c783          	lbu	a5,0(a5)
   2208c:	cf89                	c.beqz	a5,220a6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1e0>
    _Atomic_word __result = *__mem;
   2208e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   22090:	fff5079b          	addiw	a5,a0,-1
   22094:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22096:	4785                	c.li	a5,1
   22098:	faf51ee3          	bne	a0,a5,22054 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
	    _M_destroy();
   2209c:	609c                	c.ld	a5,0(s1)
   2209e:	6f9c                	c.ld	a5,24(a5)
   220a0:	8526                	c.mv	a0,s1
   220a2:	9782                	c.jalr	a5
   220a4:	bf45                	c.j	22054 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
      return __exchange_and_add(__mem, __val);
   220a6:	55fd                	c.li	a1,-1
   220a8:	03448513          	addi	a0,s1,52
   220ac:	a84f40ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   220b0:	b7dd                	c.j	22096 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1d0>

00000000000220b2 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)>:
      vector<_Tp, _Alloc>::
   220b2:	715d                	c.addi16sp	sp,-80
   220b4:	e486                	c.sdsp	ra,72(sp)
   220b6:	e0a2                	c.sdsp	s0,64(sp)
   220b8:	fc26                	c.sdsp	s1,56(sp)
   220ba:	f84a                	c.sdsp	s2,48(sp)
   220bc:	f44e                	c.sdsp	s3,40(sp)
   220be:	f052                	c.sdsp	s4,32(sp)
   220c0:	ec56                	c.sdsp	s5,24(sp)
   220c2:	e85a                	c.sdsp	s6,16(sp)
   220c4:	e45e                	c.sdsp	s7,8(sp)
   220c6:	00853903          	ld	s2,8(a0)
   220ca:	00053983          	ld	s3,0(a0)
   220ce:	413907b3          	sub	a5,s2,s3
   220d2:	878d                	c.srai	a5,0x3
	if (max_size() - size() < __n)
   220d4:	577d                	c.li	a4,-1
   220d6:	8311                	c.srli	a4,0x4
   220d8:	02e78663          	beq	a5,a4,22104 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x52>
   220dc:	84aa                	c.mv	s1,a0
   220de:	8a2e                	c.mv	s4,a1
   220e0:	8bb2                	c.mv	s7,a2
      return __a;
   220e2:	873e                	c.mv	a4,a5
      if (__a < __b)
   220e4:	03390663          	beq	s2,s3,22110 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x5e>
	const size_type __len = size() + (std::max)(size(), __n);
   220e8:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   220ea:	04f76263          	bltu	a4,a5,2212e <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x7c>
   220ee:	8aba                	c.mv	s5,a4
   220f0:	57fd                	c.li	a5,-1
   220f2:	8391                	c.srli	a5,0x4
   220f4:	00e7f363          	bgeu	a5,a4,220fa <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x48>
   220f8:	8abe                	c.mv	s5,a5
   220fa:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   220fe:	4b01                	c.li	s6,0
   22100:	c329                	c.beqz	a4,22142 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x90>
   22102:	a81d                	c.j	22138 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x86>
	  __throw_length_error(__N(__s));
   22104:	0000b517          	auipc	a0,0xb
   22108:	26450513          	addi	a0,a0,612 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2210c:	ad4f40ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   22110:	4705                	c.li	a4,1
   22112:	bfd9                	c.j	220e8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x36>
   22114:	8622                	c.mv	a2,s0
   22116:	85ce                	c.mv	a1,s3
   22118:	855a                	c.mv	a0,s6
   2211a:	e06f40ef          	jal	ra,16720 <memmove@plt>
	      ++__new_finish;
   2211e:	0421                	c.addi	s0,8
   22120:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22122:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22126:	03204b63          	blt	zero,s2,2215c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xaa>
	}
      return __result + __count;
   2212a:	944a                	c.add	s0,s2
      _M_deallocate(pointer __p, size_t __n)
   2212c:	a081                	c.j	2216c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xba>
   2212e:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22132:	5afd                	c.li	s5,-1
   22134:	004ada93          	srli	s5,s5,0x4
   22138:	003a9513          	slli	a0,s5,0x3
   2213c:	b84f40ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   22140:	8b2a                	c.mv	s6,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22142:	008b07b3          	add	a5,s6,s0
   22146:	000bb703          	ld	a4,0(s7)
   2214a:	e398                	c.sd	a4,0(a5)
      if (__count > 0)
   2214c:	fc8044e3          	blt	zero,s0,22114 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x62>
   22150:	0421                	c.addi	s0,8
   22152:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22154:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22158:	01205763          	bge	zero,s2,22166 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xb4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2215c:	864a                	c.mv	a2,s2
   2215e:	85d2                	c.mv	a1,s4
   22160:	8522                	c.mv	a0,s0
   22162:	beef40ef          	jal	ra,16550 <memcpy@plt>
      return __result + __count;
   22166:	944a                	c.add	s0,s2
	if (__p)
   22168:	00098563          	beq	s3,zero,22172 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xc0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2216c:	854e                	c.mv	a0,s3
   2216e:	b42f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   22172:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   22176:	e480                	c.sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   22178:	0a8e                	c.slli	s5,0x3
   2217a:	9ada                	c.add	s5,s6
   2217c:	0154b823          	sd	s5,16(s1)
    }
   22180:	60a6                	c.ldsp	ra,72(sp)
   22182:	6406                	c.ldsp	s0,64(sp)
   22184:	74e2                	c.ldsp	s1,56(sp)
   22186:	7942                	c.ldsp	s2,48(sp)
   22188:	79a2                	c.ldsp	s3,40(sp)
   2218a:	7a02                	c.ldsp	s4,32(sp)
   2218c:	6ae2                	c.ldsp	s5,24(sp)
   2218e:	6b42                	c.ldsp	s6,16(sp)
   22190:	6ba2                	c.ldsp	s7,8(sp)
   22192:	6161                	c.addi16sp	sp,80
   22194:	8082                	c.jr	ra

0000000000022196 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   22196:	715d                	c.addi16sp	sp,-80
   22198:	e486                	c.sdsp	ra,72(sp)
   2219a:	e0a2                	c.sdsp	s0,64(sp)
   2219c:	fc26                	c.sdsp	s1,56(sp)
   2219e:	f84a                	c.sdsp	s2,48(sp)
   221a0:	f44e                	c.sdsp	s3,40(sp)
   221a2:	f052                	c.sdsp	s4,32(sp)
   221a4:	ec56                	c.sdsp	s5,24(sp)
   221a6:	e85a                	c.sdsp	s6,16(sp)
   221a8:	e45e                	c.sdsp	s7,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   221aa:	00853903          	ld	s2,8(a0)
   221ae:	00053983          	ld	s3,0(a0)
   221b2:	413907b3          	sub	a5,s2,s3
   221b6:	878d                	c.srai	a5,0x3
	if (max_size() - size() < __n)
   221b8:	577d                	c.li	a4,-1
   221ba:	8311                	c.srli	a4,0x4
   221bc:	02e78663          	beq	a5,a4,221e8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x52>
   221c0:	84aa                	c.mv	s1,a0
   221c2:	8a2e                	c.mv	s4,a1
   221c4:	8bb2                	c.mv	s7,a2
      return __a;
   221c6:	873e                	c.mv	a4,a5
      if (__a < __b)
   221c8:	03390663          	beq	s2,s3,221f4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x5e>
	const size_type __len = size() + (std::max)(size(), __n);
   221cc:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   221ce:	04f76263          	bltu	a4,a5,22212 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x7c>
   221d2:	8aba                	c.mv	s5,a4
   221d4:	57fd                	c.li	a5,-1
   221d6:	8391                	c.srli	a5,0x4
   221d8:	00e7f363          	bgeu	a5,a4,221de <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x48>
   221dc:	8abe                	c.mv	s5,a5
   221de:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   221e2:	4b01                	c.li	s6,0
   221e4:	c329                	c.beqz	a4,22226 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x90>
   221e6:	a81d                	c.j	2221c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x86>
	  __throw_length_error(__N(__s));
   221e8:	0000b517          	auipc	a0,0xb
   221ec:	18050513          	addi	a0,a0,384 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   221f0:	9f0f40ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   221f4:	4705                	c.li	a4,1
   221f6:	bfd9                	c.j	221cc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x36>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   221f8:	8622                	c.mv	a2,s0
   221fa:	85ce                	c.mv	a1,s3
   221fc:	855a                	c.mv	a0,s6
   221fe:	d22f40ef          	jal	ra,16720 <memmove@plt>
	      ++__new_finish;
   22202:	0421                	c.addi	s0,8
   22204:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22206:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   2220a:	03204b63          	blt	zero,s2,22240 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xaa>
      return __result + __count;
   2220e:	944a                	c.add	s0,s2
      _M_deallocate(pointer __p, size_t __n)
   22210:	a081                	c.j	22250 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xba>
   22212:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22216:	5afd                	c.li	s5,-1
   22218:	004ada93          	srli	s5,s5,0x4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2221c:	003a9513          	slli	a0,s5,0x3
   22220:	aa0f40ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   22224:	8b2a                	c.mv	s6,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22226:	008b07b3          	add	a5,s6,s0
   2222a:	000bb703          	ld	a4,0(s7)
   2222e:	e398                	c.sd	a4,0(a5)
      if (__count > 0)
   22230:	fc8044e3          	blt	zero,s0,221f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x62>
   22234:	0421                	c.addi	s0,8
   22236:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22238:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   2223c:	01205763          	bge	zero,s2,2224a <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xb4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   22240:	864a                	c.mv	a2,s2
   22242:	85d2                	c.mv	a1,s4
   22244:	8522                	c.mv	a0,s0
   22246:	b0af40ef          	jal	ra,16550 <memcpy@plt>
      return __result + __count;
   2224a:	944a                	c.add	s0,s2
	if (__p)
   2224c:	00098563          	beq	s3,zero,22256 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xc0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22250:	854e                	c.mv	a0,s3
   22252:	a5ef40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   22256:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   2225a:	e480                	c.sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2225c:	0a8e                	c.slli	s5,0x3
   2225e:	9ada                	c.add	s5,s6
   22260:	0154b823          	sd	s5,16(s1)
    }
   22264:	60a6                	c.ldsp	ra,72(sp)
   22266:	6406                	c.ldsp	s0,64(sp)
   22268:	74e2                	c.ldsp	s1,56(sp)
   2226a:	7942                	c.ldsp	s2,48(sp)
   2226c:	79a2                	c.ldsp	s3,40(sp)
   2226e:	7a02                	c.ldsp	s4,32(sp)
   22270:	6ae2                	c.ldsp	s5,24(sp)
   22272:	6b42                	c.ldsp	s6,16(sp)
   22274:	6ba2                	c.ldsp	s7,8(sp)
   22276:	6161                	c.addi16sp	sp,80
   22278:	8082                	c.jr	ra

000000000002227a <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2227a:	651c                	c.ld	a5,8(a0)
   2227c:	6918                	c.ld	a4,16(a0)
   2227e:	00e78863          	beq	a5,a4,2228e <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)+0x14>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22282:	6198                	c.ld	a4,0(a1)
   22284:	e398                	c.sd	a4,0(a5)
	    ++this->_M_impl._M_finish;
   22286:	651c                	c.ld	a5,8(a0)
   22288:	07a1                	c.addi	a5,8
   2228a:	e51c                	c.sd	a5,8(a0)
   2228c:	8082                	c.jr	ra
      vector<_Tp, _Alloc>::
   2228e:	1141                	c.addi	sp,-16
   22290:	e406                	c.sdsp	ra,8(sp)
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   22292:	862e                	c.mv	a2,a1
   22294:	85be                	c.mv	a1,a5
   22296:	00017317          	auipc	t1,0x17
   2229a:	09233303          	ld	t1,146(t1) # 39328 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@@Base+0x17192>
   2229e:	9302                	c.jalr	t1
      }
   222a0:	60a2                	c.ldsp	ra,8(sp)
   222a2:	0141                	c.addi	sp,16
   222a4:	8082                	c.jr	ra

00000000000222a6 <dwarf::line_table::entry::reset(bool)>:

line_table::file::file(string path, uint64_t mtime, uint64_t length)
    : path(path), mtime(mtime), length(length) {}

void line_table::entry::reset(bool is_stmt) {
  address = op_index = 0;
   222a6:	00052423          	sw	zero,8(a0)
   222aa:	00053023          	sd	zero,0(a0)
  file = nullptr;
   222ae:	00053823          	sd	zero,16(a0)
  file_index = line = 1;
   222b2:	4785                	c.li	a5,1
   222b4:	cd5c                	c.sw	a5,28(a0)
   222b6:	cd1c                	c.sw	a5,24(a0)
  column = 0;
   222b8:	02052023          	sw	zero,32(a0)
  this->is_stmt = is_stmt;
   222bc:	02b50223          	sb	a1,36(a0)
  basic_block = end_sequence = prologue_end = epilogue_begin = false;
   222c0:	02050423          	sb	zero,40(a0)
   222c4:	020503a3          	sb	zero,39(a0)
   222c8:	02050323          	sb	zero,38(a0)
   222cc:	020502a3          	sb	zero,37(a0)
  isa = discriminator = 0;
   222d0:	02052823          	sw	zero,48(a0)
   222d4:	02052623          	sw	zero,44(a0)
}
   222d8:	8082                	c.jr	ra

00000000000222da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>:
line_table::file::file(string path, uint64_t mtime, uint64_t length)
   222da:	1101                	c.addi	sp,-32
   222dc:	ec06                	c.sdsp	ra,24(sp)
   222de:	e822                	c.sdsp	s0,16(sp)
   222e0:	e426                	c.sdsp	s1,8(sp)
   222e2:	e04a                	c.sdsp	s2,0(sp)
   222e4:	842a                	c.mv	s0,a0
   222e6:	87ae                	c.mv	a5,a1
   222e8:	8932                	c.mv	s2,a2
   222ea:	84b6                	c.mv	s1,a3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   222ec:	01050713          	addi	a4,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   222f0:	e118                	c.sd	a4,0(a0)
      { return _M_dataplus._M_p; }
   222f2:	618c                	c.ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   222f4:	6790                	c.ld	a2,8(a5)
   222f6:	4681                	c.li	a3,0
   222f8:	962e                	c.add	a2,a1
   222fa:	00017317          	auipc	t1,0x17
   222fe:	00e33303          	ld	t1,14(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   22302:	9302                	c.jalr	t1
    : path(path), mtime(mtime), length(length) {}
   22304:	03243023          	sd	s2,32(s0)
   22308:	f404                	c.sd	s1,40(s0)
   2230a:	60e2                	c.ldsp	ra,24(sp)
   2230c:	6442                	c.ldsp	s0,16(sp)
   2230e:	64a2                	c.ldsp	s1,8(sp)
   22310:	6902                	c.ldsp	s2,0(sp)
   22312:	6105                	c.addi16sp	sp,32
   22314:	8082                	c.jr	ra

0000000000022316 <dwarf::line_table::entry::get_description[abi:cxx11]() const>:

string line_table::entry::get_description() const {
   22316:	715d                	c.addi16sp	sp,-80
   22318:	e486                	c.sdsp	ra,72(sp)
   2231a:	e0a2                	c.sdsp	s0,64(sp)
   2231c:	fc26                	c.sdsp	s1,56(sp)
   2231e:	f84a                	c.sdsp	s2,48(sp)
   22320:	f44e                	c.sdsp	s3,40(sp)
   22322:	f052                	c.sdsp	s4,32(sp)
   22324:	842a                	c.mv	s0,a0
   22326:	84ae                	c.mv	s1,a1
  string res = file->path;
   22328:	699c                	c.ld	a5,16(a1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2232a:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2232e:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   22332:	638c                	c.ld	a1,0(a5)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22334:	6790                	c.ld	a2,8(a5)
   22336:	4681                	c.li	a3,0
   22338:	962e                	c.add	a2,a1
   2233a:	00017317          	auipc	t1,0x17
   2233e:	fce33303          	ld	t1,-50(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   22342:	9302                	c.jalr	t1
  if (line) {
   22344:	4cdc                	c.lw	a5,28(s1)
   22346:	eb91                	c.bnez	a5,2235a <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x44>
    res.append(":").append(std::to_string(line));
    if (column)
      res.append(":").append(std::to_string(column));
  }
  return res;
}
   22348:	8522                	c.mv	a0,s0
   2234a:	60a6                	c.ldsp	ra,72(sp)
   2234c:	6406                	c.ldsp	s0,64(sp)
   2234e:	74e2                	c.ldsp	s1,56(sp)
   22350:	7942                	c.ldsp	s2,48(sp)
   22352:	79a2                	c.ldsp	s3,40(sp)
   22354:	7a02                	c.ldsp	s4,32(sp)
   22356:	6161                	c.addi16sp	sp,80
   22358:	8082                	c.jr	ra
	if (this->max_size() - (this->size() - __n1) < __n2)
   2235a:	6418                	c.ld	a4,8(s0)
   2235c:	57fd                	c.li	a5,-1
   2235e:	8389                	c.srli	a5,0x2
   22360:	00f70b63          	beq	a4,a5,22376 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x60>
	return _M_append(__s, __n);
   22364:	4605                	c.li	a2,1
   22366:	0000c597          	auipc	a1,0xc
   2236a:	faa58593          	addi	a1,a1,-86 # 2e310 <typeinfo name for dwarf::expr_context+0x28>
   2236e:	8522                	c.mv	a0,s0
   22370:	800f40ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22374:	a809                	c.j	22386 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x70>
	  __throw_length_error(__N(__s));
   22376:	0000b517          	auipc	a0,0xb
   2237a:	4ea50513          	addi	a0,a0,1258 # 2d860 <std::piecewise_construct+0x2b0>
   2237e:	862f40ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22382:	84aa                	c.mv	s1,a0
   22384:	a0b5                	c.j	223f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
	return _M_append(__s, __n);
   22386:	89aa                	c.mv	s3,a0
    res.append(":").append(std::to_string(line));
   22388:	01c4aa03          	lw	s4,28(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   2238c:	45a9                	c.li	a1,10
   2238e:	8552                	c.mv	a0,s4
   22390:	00017317          	auipc	t1,0x17
   22394:	10033303          	ld	t1,256(t1) # 39490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15182>
   22398:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   2239a:	081c                	c.addi4spn	a5,sp,16
   2239c:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   2239e:	4601                	c.li	a2,0
   223a0:	02051593          	slli	a1,a0,0x20
   223a4:	9181                	c.srli	a1,0x20
   223a6:	850a                	c.mv	a0,sp
   223a8:	968f40ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   223ac:	8652                	c.mv	a2,s4
   223ae:	45a2                	c.lwsp	a1,8(sp)
   223b0:	6502                	c.ldsp	a0,0(sp)
   223b2:	00017317          	auipc	t1,0x17
   223b6:	0fe33303          	ld	t1,254(t1) # 394b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15130>
   223ba:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   223bc:	6582                	c.ldsp	a1,0(sp)
      { return _M_string_length; }
   223be:	6622                	c.ldsp	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   223c0:	0089b703          	ld	a4,8(s3)
   223c4:	57fd                	c.li	a5,-1
   223c6:	8389                	c.srli	a5,0x2
   223c8:	8f99                	c.sub	a5,a4
   223ca:	00c7e663          	bltu	a5,a2,223d6 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xc0>
	return _M_append(__s, __n);
   223ce:	854e                	c.mv	a0,s3
   223d0:	fa1f30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   223d4:	a035                	c.j	22400 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xea>
	  __throw_length_error(__N(__s));
   223d6:	0000b517          	auipc	a0,0xb
   223da:	48a50513          	addi	a0,a0,1162 # 2d860 <std::piecewise_construct+0x2b0>
   223de:	802f40ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   223e2:	84aa                	c.mv	s1,a0
   223e4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   223e6:	081c                	c.addi4spn	a5,sp,16
   223e8:	00f50463          	beq	a0,a5,223f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   223ec:	8c4f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   223f0:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   223f2:	01250463          	beq	a0,s2,223fa <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xe4>
   223f6:	8baf40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   223fa:	8526                	c.mv	a0,s1
   223fc:	a94f40ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22400:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22402:	081c                	c.addi4spn	a5,sp,16
   22404:	00f50463          	beq	a0,a5,2240c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xf6>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22408:	8a8f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
    if (column)
   2240c:	509c                	c.lw	a5,32(s1)
   2240e:	df8d                	c.beqz	a5,22348 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>
	if (this->max_size() - (this->size() - __n1) < __n2)
   22410:	6418                	c.ld	a4,8(s0)
   22412:	57fd                	c.li	a5,-1
   22414:	8389                	c.srli	a5,0x2
   22416:	00f70b63          	beq	a4,a5,2242c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x116>
	return _M_append(__s, __n);
   2241a:	4605                	c.li	a2,1
   2241c:	0000c597          	auipc	a1,0xc
   22420:	ef458593          	addi	a1,a1,-268 # 2e310 <typeinfo name for dwarf::expr_context+0x28>
   22424:	8522                	c.mv	a0,s0
   22426:	f4bf30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2242a:	a039                	c.j	22438 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x122>
	  __throw_length_error(__N(__s));
   2242c:	0000b517          	auipc	a0,0xb
   22430:	43450513          	addi	a0,a0,1076 # 2d860 <std::piecewise_construct+0x2b0>
   22434:	fadf30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return _M_append(__s, __n);
   22438:	89aa                	c.mv	s3,a0
      res.append(":").append(std::to_string(column));
   2243a:	5084                	c.lw	s1,32(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   2243c:	45a9                	c.li	a1,10
   2243e:	8526                	c.mv	a0,s1
   22440:	00017317          	auipc	t1,0x17
   22444:	05033303          	ld	t1,80(t1) # 39490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15182>
   22448:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   2244a:	081c                	c.addi4spn	a5,sp,16
   2244c:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   2244e:	4601                	c.li	a2,0
   22450:	02051593          	slli	a1,a0,0x20
   22454:	9181                	c.srli	a1,0x20
   22456:	850a                	c.mv	a0,sp
   22458:	8b8f40ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2245c:	8626                	c.mv	a2,s1
   2245e:	45a2                	c.lwsp	a1,8(sp)
   22460:	6502                	c.ldsp	a0,0(sp)
   22462:	00017317          	auipc	t1,0x17
   22466:	04e33303          	ld	t1,78(t1) # 394b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15130>
   2246a:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   2246c:	6582                	c.ldsp	a1,0(sp)
      { return _M_string_length; }
   2246e:	6622                	c.ldsp	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22470:	0089b703          	ld	a4,8(s3)
   22474:	57fd                	c.li	a5,-1
   22476:	8389                	c.srli	a5,0x2
   22478:	8f99                	c.sub	a5,a4
   2247a:	00c7e663          	bltu	a5,a2,22486 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x170>
	return _M_append(__s, __n);
   2247e:	854e                	c.mv	a0,s3
   22480:	ef1f30ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22484:	a839                	c.j	224a2 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x18c>
	  __throw_length_error(__N(__s));
   22486:	0000b517          	auipc	a0,0xb
   2248a:	3da50513          	addi	a0,a0,986 # 2d860 <std::piecewise_construct+0x2b0>
   2248e:	f53f30ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22492:	84aa                	c.mv	s1,a0
   22494:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22496:	081c                	c.addi4spn	a5,sp,16
   22498:	f4f50ce3          	beq	a0,a5,223f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
   2249c:	814f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   224a0:	bf81                	c.j	223f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
      { return _M_dataplus._M_p; }
   224a2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   224a4:	081c                	c.addi4spn	a5,sp,16
   224a6:	eaf501e3          	beq	a0,a5,22348 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>
   224aa:	806f40ef          	jal	ra,164b0 <operator delete(void*)@plt>
  return res;
   224ae:	bd69                	c.j	22348 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>

00000000000224b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>:
bool line_table::impl::read_file_entry(cursor *cur, bool in_header) {
   224b0:	7175                	c.addi16sp	sp,-144
   224b2:	e506                	c.sdsp	ra,136(sp)
   224b4:	e122                	c.sdsp	s0,128(sp)
   224b6:	fca6                	c.sdsp	s1,120(sp)
   224b8:	f8ca                	c.sdsp	s2,112(sp)
  assert(cur->sec == sec);
   224ba:	6118                	c.ld	a4,0(a0)
   224bc:	619c                	c.ld	a5,0(a1)
   224be:	00f71f63          	bne	a4,a5,224dc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2c>
   224c2:	892a                	c.mv	s2,a0
   224c4:	842e                	c.mv	s0,a1
   224c6:	84b2                	c.mv	s1,a2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   224c8:	109c                	c.addi4spn	a5,sp,96
   224ca:	e8be                	c.sdsp	a5,80(sp)
      { _M_string_length = __length; }
   224cc:	ec82                	c.sdsp	zero,88(sp)
	__c1 = __c2;
   224ce:	06010023          	sb	zero,96(sp)
  cur->string(file_name);
   224d2:	088c                	c.addi4spn	a1,sp,80
   224d4:	8522                	c.mv	a0,s0
   224d6:	f32f80ef          	jal	ra,1ac08 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   224da:	a00d                	c.j	224fc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x4c>
  assert(cur->sec == sec);
   224dc:	0000c697          	auipc	a3,0xc
   224e0:	e3c68693          	addi	a3,a3,-452 # 2e318 <typeinfo name for dwarf::expr_context+0x30>
   224e4:	0bb00613          	addi	a2,zero,187
   224e8:	0000c597          	auipc	a1,0xc
   224ec:	e7858593          	addi	a1,a1,-392 # 2e360 <typeinfo name for dwarf::expr_context+0x78>
   224f0:	0000c517          	auipc	a0,0xc
   224f4:	e7850513          	addi	a0,a0,-392 # 2e368 <typeinfo name for dwarf::expr_context+0x80>
   224f8:	fa9f30ef          	jal	ra,164a0 <__assert_fail@plt>
  if (in_header && file_name.empty())
   224fc:	c481                	c.beqz	s1,22504 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x54>
   224fe:	67e6                	c.ldsp	a5,88(sp)
   22500:	1c078863          	beq	a5,zero,226d0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x220>
    while (pos < sec->end) {
   22504:	681c                	c.ld	a5,16(s0)
      { return _M_ptr; }
   22506:	600c                	c.ld	a1,0(s0)
   22508:	6998                	c.ld	a4,16(a1)
   2250a:	02e7f763          	bgeu	a5,a4,22538 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x88>
   2250e:	4481                	c.li	s1,0
   22510:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   22512:	0785                	c.addi	a5,1
   22514:	e81c                	c.sd	a5,16(s0)
   22516:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2251a:	07f77693          	andi	a3,a4,127
   2251e:	00c696b3          	sll	a3,a3,a2
   22522:	8cd5                	c.or	s1,a3
      if ((byte & 0x80) == 0)
   22524:	0187171b          	slliw	a4,a4,0x18
   22528:	4187571b          	sraiw	a4,a4,0x18
   2252c:	00075a63          	bge	a4,zero,22540 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x90>
      shift += 7;
   22530:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   22532:	6998                	c.ld	a4,16(a1)
   22534:	fce7efe3          	bltu	a5,a4,22512 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x62>
    underflow();
   22538:	8522                	c.mv	a0,s0
   2253a:	efef80ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   2253e:	4481                	c.li	s1,0
    while (pos < sec->end) {
   22540:	681c                	c.ld	a5,16(s0)
   22542:	6008                	c.ld	a0,0(s0)
   22544:	6918                	c.ld	a4,16(a0)
   22546:	02e7f763          	bgeu	a5,a4,22574 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xc4>
    std::uint64_t result = 0;
   2254a:	4581                	c.li	a1,0
    int shift = 0;
   2254c:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   2254e:	0785                	c.addi	a5,1
   22550:	e81c                	c.sd	a5,16(s0)
   22552:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   22556:	07f77693          	andi	a3,a4,127
   2255a:	00c696b3          	sll	a3,a3,a2
   2255e:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   22560:	0187171b          	slliw	a4,a4,0x18
   22564:	4187571b          	sraiw	a4,a4,0x18
   22568:	00075a63          	bge	a4,zero,2257c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xcc>
      shift += 7;
   2256c:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   2256e:	6918                	c.ld	a4,16(a0)
   22570:	fce7efe3          	bltu	a5,a4,2254e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x9e>
    underflow();
   22574:	8522                	c.mv	a0,s0
   22576:	ec2f80ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   2257a:	4581                	c.li	a1,0
  uint64_t mtime = cur->uleb128();
   2257c:	e4ae                	c.sdsp	a1,72(sp)
    while (pos < sec->end) {
   2257e:	681c                	c.ld	a5,16(s0)
   22580:	6008                	c.ld	a0,0(s0)
   22582:	6918                	c.ld	a4,16(a0)
   22584:	02e7f763          	bgeu	a5,a4,225b2 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x102>
    std::uint64_t result = 0;
   22588:	4581                	c.li	a1,0
    int shift = 0;
   2258a:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   2258c:	0785                	c.addi	a5,1
   2258e:	e81c                	c.sd	a5,16(s0)
   22590:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   22594:	07f77693          	andi	a3,a4,127
   22598:	00c696b3          	sll	a3,a3,a2
   2259c:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   2259e:	0187171b          	slliw	a4,a4,0x18
   225a2:	4187571b          	sraiw	a4,a4,0x18
   225a6:	00075a63          	bge	a4,zero,225ba <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x10a>
      shift += 7;
   225aa:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   225ac:	6918                	c.ld	a4,16(a0)
   225ae:	fce7efe3          	bltu	a5,a4,2258c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xdc>
    underflow();
   225b2:	8522                	c.mv	a0,s0
   225b4:	e84f80ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   225b8:	4581                	c.li	a1,0
  uint64_t length = cur->uleb128();
   225ba:	e0ae                	c.sdsp	a1,64(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   225bc:	6018                	c.ld	a4,0(s0)
   225be:	681c                	c.ld	a5,16(s0)
   225c0:	6718                	c.ld	a4,8(a4)
   225c2:	8f99                	c.sub	a5,a4
  if (cur->get_section_offset() <= last_file_name_end)
   225c4:	06893703          	ld	a4,104(s2)
   225c8:	10f77663          	bgeu	a4,a5,226d4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x224>
  last_file_name_end = cur->get_section_offset();
   225cc:	06f93423          	sd	a5,104(s2)
  if (file_name[0] == '/')
   225d0:	67c6                	c.ldsp	a5,80(sp)
   225d2:	0007c703          	lbu	a4,0(a5)
   225d6:	02f00793          	addi	a5,zero,47
   225da:	02f70763          	beq	a4,a5,22608 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x158>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   225de:	03893703          	ld	a4,56(s2)
   225e2:	04093783          	ld	a5,64(s2)
   225e6:	8f99                	c.sub	a5,a4
   225e8:	8795                	c.srai	a5,0x5
  else if (dir_index < include_directories.size())
   225ea:	06f4f763          	bgeu	s1,a5,22658 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1a8>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   225ee:	05090913          	addi	s2,s2,80
	return *(this->_M_impl._M_start + __n);
   225f2:	00549593          	slli	a1,s1,0x5
   225f6:	0890                	c.addi4spn	a2,sp,80
   225f8:	95ba                	c.add	a1,a4
   225fa:	1008                	c.addi4spn	a0,sp,32
   225fc:	00017317          	auipc	t1,0x17
   22600:	fc433303          	ld	t1,-60(t1) # 395c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14f14>
   22604:	9302                	c.jalr	t1
   22606:	a821                	c.j	2261e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x16e>
    file_names.emplace_back(move(file_name), mtime, length);
   22608:	0094                	c.addi4spn	a3,sp,64
   2260a:	00b0                	c.addi4spn	a2,sp,72
   2260c:	088c                	c.addi4spn	a1,sp,80
   2260e:	05090513          	addi	a0,s2,80
   22612:	00017317          	auipc	t1,0x17
   22616:	ece33303          	ld	t1,-306(t1) # 394e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x14254>
   2261a:	9302                	c.jalr	t1
   2261c:	a875                	c.j	226d8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x228>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   2261e:	0094                	c.addi4spn	a3,sp,64
   22620:	00b0                	c.addi4spn	a2,sp,72
   22622:	100c                	c.addi4spn	a1,sp,32
   22624:	854a                	c.mv	a0,s2
   22626:	00017317          	auipc	t1,0x17
   2262a:	eba33303          	ld	t1,-326(t1) # 394e0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x14254>
   2262e:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   22630:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   22632:	181c                	c.addi4spn	a5,sp,48
   22634:	00f50463          	beq	a0,a5,2263c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18c>
   22638:	e79f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
  return true;
   2263c:	4405                	c.li	s0,1
      { return _M_dataplus._M_p; }
   2263e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   22640:	109c                	c.addi4spn	a5,sp,96
   22642:	00f50463          	beq	a0,a5,2264a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x19a>
   22646:	e6bf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
}
   2264a:	8522                	c.mv	a0,s0
   2264c:	60aa                	c.ldsp	ra,136(sp)
   2264e:	640a                	c.ldsp	s0,128(sp)
   22650:	74e6                	c.ldsp	s1,120(sp)
   22652:	7946                	c.ldsp	s2,112(sp)
   22654:	6149                	c.addi16sp	sp,144
   22656:	8082                	c.jr	ra
                       std::to_string(dir_index));
   22658:	4541                	c.li	a0,16
   2265a:	d77f30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2265e:	892a                	c.mv	s2,a0
   22660:	85a6                	c.mv	a1,s1
   22662:	850a                	c.mv	a0,sp
   22664:	00017317          	auipc	t1,0x17
   22668:	c9433303          	ld	t1,-876(t1) # 392f8 <std::__cxx11::to_string(unsigned long)@@Base+0x15124>
   2266c:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   2266e:	0000c617          	auipc	a2,0xc
   22672:	d0a60613          	addi	a2,a2,-758 # 2e378 <typeinfo name for dwarf::expr_context+0x90>
   22676:	4581                	c.li	a1,0
   22678:	850a                	c.mv	a0,sp
   2267a:	cc7f30ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2267e:	85aa                	c.mv	a1,a0
   22680:	1000                	c.addi4spn	s0,sp,32
   22682:	8522                	c.mv	a0,s0
   22684:	d8df30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   22688:	85a2                	c.mv	a1,s0
   2268a:	854a                	c.mv	a0,s2
   2268c:	eb5f30ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   22690:	00017797          	auipc	a5,0x17
   22694:	ec07b783          	ld	a5,-320(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   22698:	07c1                	c.addi	a5,16
   2269a:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   2269e:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   226a0:	181c                	c.addi4spn	a5,sp,48
   226a2:	00f50463          	beq	a0,a5,226aa <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1fa>
   226a6:	e0bf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   226aa:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   226ac:	081c                	c.addi4spn	a5,sp,16
   226ae:	00f50463          	beq	a0,a5,226b6 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x206>
   226b2:	dfff30ef          	jal	ra,164b0 <operator delete(void*)@plt>
   226b6:	00017617          	auipc	a2,0x17
   226ba:	cc263603          	ld	a2,-830(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   226be:	00017597          	auipc	a1,0x17
   226c2:	bea5b583          	ld	a1,-1046(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   226c6:	854a                	c.mv	a0,s2
   226c8:	f99f30ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   226cc:	842a                	c.mv	s0,a0
   226ce:	a831                	c.j	226ea <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
    return false;
   226d0:	4401                	c.li	s0,0
   226d2:	b7b5                	c.j	2263e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
    return true;
   226d4:	4405                	c.li	s0,1
   226d6:	b7a5                	c.j	2263e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
  return true;
   226d8:	4405                	c.li	s0,1
   226da:	b795                	c.j	2263e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
   226dc:	842a                	c.mv	s0,a0
   226de:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   226e0:	181c                	c.addi4spn	a5,sp,48
   226e2:	00f50463          	beq	a0,a5,226ea <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
   226e6:	dcbf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   226ea:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   226ec:	109c                	c.addi4spn	a5,sp,96
   226ee:	00f50463          	beq	a0,a5,226f6 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x246>
   226f2:	dbff30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   226f6:	8522                	c.mv	a0,s0
   226f8:	f99f30ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   226fc:	842a                	c.mv	s0,a0
   226fe:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   22700:	181c                	c.addi4spn	a5,sp,48
   22702:	00f50463          	beq	a0,a5,2270a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22706:	dabf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2270a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2270c:	081c                	c.addi4spn	a5,sp,16
   2270e:	00f50463          	beq	a0,a5,22716 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x266>
   22712:	d9ff30ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       std::to_string(dir_index));
   22716:	854a                	c.mv	a0,s2
   22718:	d59f30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2271c:	b7f9                	c.j	226ea <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
      { return _M_dataplus._M_p; }
   2271e:	842a                	c.mv	s0,a0
   22720:	b7ed                	c.j	2270a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25a>
   22722:	842a                	c.mv	s0,a0
   22724:	bfcd                	c.j	22716 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x266>

0000000000022726 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
line_table::line_table(const shared_ptr<section> &sec, section_offset offset,
   22726:	7105                	c.addi16sp	sp,-480
   22728:	ef86                	c.sdsp	ra,472(sp)
   2272a:	eba2                	c.sdsp	s0,464(sp)
   2272c:	e7a6                	c.sdsp	s1,456(sp)
   2272e:	e3ca                	c.sdsp	s2,448(sp)
   22730:	ff4e                	c.sdsp	s3,440(sp)
   22732:	fb52                	c.sdsp	s4,432(sp)
   22734:	f756                	c.sdsp	s5,424(sp)
   22736:	f35a                	c.sdsp	s6,416(sp)
   22738:	ef5e                	c.sdsp	s7,408(sp)
   2273a:	eb62                	c.sdsp	s8,400(sp)
   2273c:	e766                	c.sdsp	s9,392(sp)
   2273e:	e36a                	c.sdsp	s10,384(sp)
   22740:	feee                	c.sdsp	s11,376(sp)
   22742:	842a                	c.mv	s0,a0
   22744:	892e                	c.mv	s2,a1
   22746:	8ab2                	c.mv	s5,a2
   22748:	8a36                	c.mv	s4,a3
   2274a:	84ba                	c.mv	s1,a4
   2274c:	89be                	c.mv	s3,a5
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2274e:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   22752:	0b000513          	addi	a0,zero,176
   22756:	d6bf30ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2275a:	00052423          	sw	zero,8(a0)
   2275e:	00052623          	sw	zero,12(a0)
   22762:	00052823          	sw	zero,16(a0)
   22766:	00052a23          	sw	zero,20(a0)
   2276a:	00052c23          	sw	zero,24(a0)
   2276e:	00052e23          	sw	zero,28(a0)
   22772:	02053023          	sd	zero,32(a0)
   22776:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2277a:	4785                	c.li	a5,1
   2277c:	d91c                	c.sw	a5,48(a0)
   2277e:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   22780:	00017797          	auipc	a5,0x17
   22784:	c107b783          	ld	a5,-1008(a5) # 39390 <vtable for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x888>
   22788:	07c1                	c.addi	a5,16
   2278a:	e11c                	c.sd	a5,0(a0)
      : _M_ptr(0), _M_refcount()
   2278c:	02053c23          	sd	zero,56(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   22790:	04053023          	sd	zero,64(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   22794:	04053c23          	sd	zero,88(a0)
   22798:	06053023          	sd	zero,96(a0)
   2279c:	06053423          	sd	zero,104(a0)
   227a0:	06053823          	sd	zero,112(a0)
   227a4:	06053c23          	sd	zero,120(a0)
   227a8:	08053023          	sd	zero,128(a0)
   227ac:	08053423          	sd	zero,136(a0)
   227b0:	08053823          	sd	zero,144(a0)
   227b4:	08053c23          	sd	zero,152(a0)
  impl() : last_file_name_end(0), file_names_complete(false){};
   227b8:	0a053023          	sd	zero,160(a0)
   227bc:	0a050423          	sb	zero,168(a0)
	  _M_pi = __pi;
   227c0:	e408                	c.sd	a0,8(s0)
   227c2:	03850513          	addi	a0,a0,56
	  __p = __pi->_M_ptr();
   227c6:	e008                	c.sd	a0,0(s0)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   227c8:	181c                	c.addi4spn	a5,sp,48
   227ca:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   227cc:	f402                	c.sdsp	zero,40(sp)
   227ce:	02010823          	sb	zero,48(sp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   227d2:	089c                	c.addi4spn	a5,sp,80
   227d4:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   227d6:	e482                	c.sdsp	zero,72(sp)
   227d8:	04010823          	sb	zero,80(sp)
      { return _M_string_length; }
   227dc:	6490                	c.ld	a2,8(s1)
  if (cu_comp_dir.empty() || cu_comp_dir.back() == '/')
   227de:	ca11                	c.beqz	a2,227f2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
      { return _M_dataplus._M_p; }
   227e0:	608c                	c.ld	a1,0(s1)
   227e2:	00c587b3          	add	a5,a1,a2
   227e6:	fff7c703          	lbu	a4,-1(a5)
   227ea:	02f00793          	addi	a5,zero,47
   227ee:	00f71763          	bne	a4,a5,227fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
	this->_M_assign(__str);
   227f2:	85a6                	c.mv	a1,s1
   227f4:	1008                	c.addi4spn	a0,sp,32
   227f6:	bfbf30ef          	jal	ra,163f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   227fa:	a869                	c.j	22894 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16e>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   227fc:	0a9c                	c.addi4spn	a5,sp,336
   227fe:	e2be                	c.sdsp	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22800:	4681                	c.li	a3,0
   22802:	962e                	c.add	a2,a1
   22804:	0288                	c.addi4spn	a0,sp,320
   22806:	00017317          	auipc	t1,0x17
   2280a:	b0233303          	ld	t1,-1278(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   2280e:	9302                	c.jalr	t1
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   22810:	02f00713          	addi	a4,zero,47
   22814:	4685                	c.li	a3,1
   22816:	4601                	c.li	a2,0
   22818:	65b6                	c.ldsp	a1,328(sp)
   2281a:	0288                	c.addi4spn	a0,sp,320
   2281c:	ed5f30ef          	jal	ra,166f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>
   22820:	a835                	c.j	2285c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x136>
      { return _M_dataplus._M_p; }
   22822:	84aa                	c.mv	s1,a0
   22824:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22826:	0a9c                	c.addi4spn	a5,sp,336
   22828:	00f50463          	beq	a0,a5,22830 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2282c:	c85f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22830:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   22832:	089c                	c.addi4spn	a5,sp,80
   22834:	00f50463          	beq	a0,a5,2283c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x116>
   22838:	c79f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2283c:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2283e:	181c                	c.addi4spn	a5,sp,48
   22840:	00f50463          	beq	a0,a5,22848 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x122>
   22844:	c6df30ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   22848:	6408                	c.ld	a0,8(s0)
   2284a:	c511                	c.beqz	a0,22856 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
	  _M_pi->_M_release();
   2284c:	00017317          	auipc	t1,0x17
   22850:	b7433303          	ld	t1,-1164(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   22854:	9302                	c.jalr	t1
   22856:	8526                	c.mv	a0,s1
   22858:	e39f30ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2285c:	7502                	c.ldsp	a0,32(sp)
   2285e:	6796                	c.ldsp	a5,320(sp)
	if (__str._M_is_local())
   22860:	0a98                	c.addi4spn	a4,sp,336
   22862:	0ce78163          	beq	a5,a4,22924 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1fe>
	    if (!_M_is_local())
   22866:	1818                	c.addi4spn	a4,sp,48
   22868:	36e50ee3          	beq	a0,a4,233e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcbe>
		    __capacity = _M_allocated_capacity;
   2286c:	7742                	c.ldsp	a4,48(sp)
      { _M_dataplus._M_p = __p; }
   2286e:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   22870:	67b6                	c.ldsp	a5,328(sp)
   22872:	f43e                	c.sdsp	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   22874:	67d6                	c.ldsp	a5,336(sp)
   22876:	f83e                	c.sdsp	a5,48(sp)
	    if (__data)
   22878:	36050be3          	beq	a0,zero,233ee <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
      { _M_dataplus._M_p = __p; }
   2287c:	e2aa                	c.sdsp	a0,320(sp)
      { _M_allocated_capacity = __capacity; }
   2287e:	eaba                	c.sdsp	a4,336(sp)
      { _M_string_length = __length; }
   22880:	e682                	c.sdsp	zero,328(sp)
      { return _M_dataplus._M_p; }
   22882:	6796                	c.ldsp	a5,320(sp)
   22884:	00078023          	sb	zero,0(a5)
   22888:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   2288a:	0a9c                	c.addi4spn	a5,sp,336
   2288c:	00f50463          	beq	a0,a5,22894 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16e>
   22890:	c21f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   22894:	00093b03          	ld	s6,0(s2)
      : _M_pi(__r._M_pi)
   22898:	00893483          	ld	s1,8(s2)
	if (_M_pi != nullptr)
   2289c:	320487e3          	beq	s1,zero,233ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xca4>
    if (__is_single_threaded())
   228a0:	00017797          	auipc	a5,0x17
   228a4:	bd87b783          	ld	a5,-1064(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   228a8:	0007c783          	lbu	a5,0(a5)
   228ac:	c3cd                	c.beqz	a5,2294e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x228>
  { *__mem += __val; }
   228ae:	589c                	c.lw	a5,48(s1)
   228b0:	2785                	c.addiw	a5,1
   228b2:	d89c                	c.sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   228b4:	e45a                	c.sdsp	s6,8(sp)
      : _M_pi(__r._M_pi)
   228b6:	e826                	c.sdsp	s1,16(sp)
    if (__is_single_threaded())
   228b8:	00017797          	auipc	a5,0x17
   228bc:	bc07b783          	ld	a5,-1088(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   228c0:	0007c783          	lbu	a5,0(a5)
   228c4:	cbd9                	c.beqz	a5,2295a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x234>
  { *__mem += __val; }
   228c6:	589c                	c.lw	a5,48(s1)
   228c8:	2785                	c.addiw	a5,1
   228ca:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   228cc:	008b3783          	ld	a5,8(s6)
   228d0:	97d6                	c.add	a5,s5
   228d2:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   228d4:	00017797          	auipc	a5,0x17
   228d8:	ba47b783          	ld	a5,-1116(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   228dc:	0007c783          	lbu	a5,0(a5)
   228e0:	c3d9                	c.beqz	a5,22966 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x240>
    _Atomic_word __result = *__mem;
   228e2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   228e4:	fff5079b          	addiw	a5,a0,-1
   228e8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   228ea:	4785                	c.li	a5,1
   228ec:	2ef515e3          	bne	a0,a5,233d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
	_M_dispose();
   228f0:	609c                	c.ld	a5,0(s1)
   228f2:	6b9c                	c.ld	a5,16(a5)
   228f4:	8526                	c.mv	a0,s1
   228f6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   228f8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   228fc:	00017797          	auipc	a5,0x17
   22900:	b7c7b783          	ld	a5,-1156(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22904:	0007c783          	lbu	a5,0(a5)
   22908:	c7ad                	c.beqz	a5,22972 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x24c>
    _Atomic_word __result = *__mem;
   2290a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2290c:	fff5079b          	addiw	a5,a0,-1
   22910:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22912:	4785                	c.li	a5,1
   22914:	2cf511e3          	bne	a0,a5,233d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
	    _M_destroy();
   22918:	609c                	c.ld	a5,0(s1)
   2291a:	6f9c                	c.ld	a5,24(a5)
   2291c:	8526                	c.mv	a0,s1
   2291e:	9782                	c.jalr	a5
   22920:	2b70006f          	jal	zero,233d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
      { return _M_string_length; }
   22924:	6636                	c.ldsp	a2,328(sp)
		if (__str.size())
   22926:	ea01                	c.bnez	a2,22936 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
      { return _M_string_length; }
   22928:	6736                	c.ldsp	a4,328(sp)
      { _M_string_length = __length; }
   2292a:	f43a                	c.sdsp	a4,40(sp)
   2292c:	7782                	c.ldsp	a5,32(sp)
   2292e:	97ba                	c.add	a5,a4
   22930:	00078023          	sb	zero,0(a5)
      }
   22934:	b7b1                	c.j	22880 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15a>
	if (__n == 1)
   22936:	4785                	c.li	a5,1
   22938:	00f60663          	beq	a2,a5,22944 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2293c:	0a8c                	c.addi4spn	a1,sp,336
   2293e:	c13f30ef          	jal	ra,16550 <memcpy@plt>
   22942:	b7dd                	c.j	22928 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x202>
	__c1 = __c2;
   22944:	15014783          	lbu	a5,336(sp)
   22948:	00f50023          	sb	a5,0(a0)
      }
   2294c:	bff1                	c.j	22928 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x202>
      __atomic_add(__mem, __val);
   2294e:	4585                	c.li	a1,1
   22950:	03048513          	addi	a0,s1,48
   22954:	9adf30ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   22958:	bfb1                	c.j	228b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18e>
   2295a:	4585                	c.li	a1,1
   2295c:	03048513          	addi	a0,s1,48
   22960:	9a1f30ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   22964:	b7a5                	c.j	228cc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1a6>
      return __exchange_and_add(__mem, __val);
   22966:	55fd                	c.li	a1,-1
   22968:	03048513          	addi	a0,s1,48
   2296c:	9c5f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22970:	bfad                	c.j	228ea <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1c4>
   22972:	55fd                	c.li	a1,-1
   22974:	03448513          	addi	a0,s1,52
   22978:	9b9f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2297c:	bf59                	c.j	22912 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2297e:	7716                	c.ldsp	a4,352(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22980:	77b6                	c.ldsp	a5,360(sp)
	__r._M_pi = _M_pi;
   22982:	f682                	c.sdsp	zero,360(sp)
	__r._M_ptr = nullptr;
   22984:	f282                	c.sdsp	zero,352(sp)
   22986:	e098                	c.sd	a4,0(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22988:	0084b903          	ld	s2,8(s1)
	__r._M_pi = _M_pi;
   2298c:	e49c                	c.sd	a5,8(s1)
	if (_M_pi != nullptr)
   2298e:	08090763          	beq	s2,zero,22a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
    if (__is_single_threaded())
   22992:	00017797          	auipc	a5,0x17
   22996:	ae67b783          	ld	a5,-1306(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2299a:	0007c783          	lbu	a5,0(a5)
   2299e:	c7b9                	c.beqz	a5,229ec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2c6>
    _Atomic_word __result = *__mem;
   229a0:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   229a4:	fff7871b          	addiw	a4,a5,-1
   229a8:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   229ac:	4705                	c.li	a4,1
   229ae:	06e79763          	bne	a5,a4,22a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
	_M_dispose();
   229b2:	00093783          	ld	a5,0(s2)
   229b6:	6b9c                	c.ld	a5,16(a5)
   229b8:	854a                	c.mv	a0,s2
   229ba:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   229bc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   229c0:	00017797          	auipc	a5,0x17
   229c4:	ab87b783          	ld	a5,-1352(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   229c8:	0007c783          	lbu	a5,0(a5)
   229cc:	c7f9                	c.beqz	a5,22a9a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x374>
    _Atomic_word __result = *__mem;
   229ce:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   229d2:	fff5079b          	addiw	a5,a0,-1
   229d6:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   229da:	4785                	c.li	a5,1
   229dc:	02f51063          	bne	a0,a5,229fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d6>
	    _M_destroy();
   229e0:	00093783          	ld	a5,0(s2)
   229e4:	6f9c                	c.ld	a5,24(a5)
   229e6:	854a                	c.mv	a0,s2
   229e8:	9782                	c.jalr	a5
   229ea:	a809                	c.j	229fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d6>
      return __exchange_and_add(__mem, __val);
   229ec:	55fd                	c.li	a1,-1
   229ee:	03090513          	addi	a0,s2,48
   229f2:	93ff30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   229f6:	4785                	c.li	a5,1
   229f8:	faf50de3          	beq	a0,a5,229b2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x28c>
	if (_M_pi != nullptr)
   229fc:	74b6                	c.ldsp	s1,360(sp)
   229fe:	cc99                	c.beqz	s1,22a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
    if (__is_single_threaded())
   22a00:	00017797          	auipc	a5,0x17
   22a04:	a787b783          	ld	a5,-1416(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22a08:	0007c783          	lbu	a5,0(a5)
   22a0c:	cfc9                	c.beqz	a5,22aa6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x380>
    _Atomic_word __result = *__mem;
   22a0e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   22a10:	fff5079b          	addiw	a5,a0,-1
   22a14:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22a16:	4785                	c.li	a5,1
   22a18:	08f50d63          	beq	a0,a5,22ab2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x38c>
      { return _M_ptr; }
   22a1c:	601c                	c.ld	a5,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   22a1e:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   22a22:	6784                	c.ld	s1,8(a5)
	if (_M_pi != nullptr)
   22a24:	180489e3          	beq	s1,zero,233b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc90>
    if (__is_single_threaded())
   22a28:	00017797          	auipc	a5,0x17
   22a2c:	a507b783          	ld	a5,-1456(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22a30:	0007c783          	lbu	a5,0(a5)
   22a34:	cfd5                	c.beqz	a5,22af0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ca>
  { *__mem += __val; }
   22a36:	589c                	c.lw	a5,48(s1)
   22a38:	2785                	c.addiw	a5,1
   22a3a:	d89c                	c.sw	a5,48(s1)
   22a3c:	589c                	c.lw	a5,48(s1)
   22a3e:	2785                	c.addiw	a5,1
   22a40:	d89c                	c.sw	a5,48(s1)
   22a42:	00893a83          	ld	s5,8(s2)
   22a46:	e44a                	c.sdsp	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22a48:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   22a4a:	e826                	c.sdsp	s1,16(sp)
	if (_M_pi != nullptr)
   22a4c:	160902e3          	beq	s2,zero,233b0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc8a>
    if (__is_single_threaded())
   22a50:	00017797          	auipc	a5,0x17
   22a54:	a287b783          	ld	a5,-1496(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22a58:	0007c783          	lbu	a5,0(a5)
   22a5c:	cfc5                	c.beqz	a5,22b14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ee>
    _Atomic_word __result = *__mem;
   22a5e:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   22a62:	fff5079b          	addiw	a5,a0,-1
   22a66:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22a6a:	4785                	c.li	a5,1
   22a6c:	0af50a63          	beq	a0,a5,22b20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3fa>
struct cursor {
   22a70:	ec56                	c.sdsp	s5,24(sp)
	if (_M_pi != nullptr)
   22a72:	c085                	c.beqz	s1,22a92 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
    if (__is_single_threaded())
   22a74:	00017797          	auipc	a5,0x17
   22a78:	a047b783          	ld	a5,-1532(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22a7c:	0007c783          	lbu	a5,0(a5)
   22a80:	0e078363          	beq	a5,zero,22b66 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x440>
    _Atomic_word __result = *__mem;
   22a84:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   22a86:	fff5079b          	addiw	a5,a0,-1
   22a8a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22a8c:	4785                	c.li	a5,1
   22a8e:	0ef50263          	beq	a0,a5,22b72 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x44c>
  cur.skip_initial_length();
   22a92:	0028                	c.addi4spn	a0,sp,8
   22a94:	890f80ef          	jal	ra,1ab24 <dwarf::cursor::skip_initial_length()>
   22a98:	aa21                	c.j	22bb0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48a>
      return __exchange_and_add(__mem, __val);
   22a9a:	55fd                	c.li	a1,-1
   22a9c:	03490513          	addi	a0,s2,52
   22aa0:	891f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22aa4:	bf1d                	c.j	229da <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b4>
   22aa6:	55fd                	c.li	a1,-1
   22aa8:	03048513          	addi	a0,s1,48
   22aac:	885f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22ab0:	b79d                	c.j	22a16 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f0>
	_M_dispose();
   22ab2:	609c                	c.ld	a5,0(s1)
   22ab4:	6b9c                	c.ld	a5,16(a5)
   22ab6:	8526                	c.mv	a0,s1
   22ab8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22aba:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22abe:	00017797          	auipc	a5,0x17
   22ac2:	9ba7b783          	ld	a5,-1606(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22ac6:	0007c783          	lbu	a5,0(a5)
   22aca:	cf89                	c.beqz	a5,22ae4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3be>
    _Atomic_word __result = *__mem;
   22acc:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   22ace:	fff5079b          	addiw	a5,a0,-1
   22ad2:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22ad4:	4785                	c.li	a5,1
   22ad6:	f4f513e3          	bne	a0,a5,22a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
	    _M_destroy();
   22ada:	609c                	c.ld	a5,0(s1)
   22adc:	6f9c                	c.ld	a5,24(a5)
   22ade:	8526                	c.mv	a0,s1
   22ae0:	9782                	c.jalr	a5
   22ae2:	bf2d                	c.j	22a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
      return __exchange_and_add(__mem, __val);
   22ae4:	55fd                	c.li	a1,-1
   22ae6:	03448513          	addi	a0,s1,52
   22aea:	847f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22aee:	b7dd                	c.j	22ad4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ae>
      __atomic_add(__mem, __val);
   22af0:	4585                	c.li	a1,1
   22af2:	03048513          	addi	a0,s1,48
   22af6:	80bf30ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   22afa:	00017797          	auipc	a5,0x17
   22afe:	97e7b783          	ld	a5,-1666(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22b02:	0007c783          	lbu	a5,0(a5)
   22b06:	fb9d                	c.bnez	a5,22a3c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x316>
      __atomic_add(__mem, __val);
   22b08:	4585                	c.li	a1,1
   22b0a:	03048513          	addi	a0,s1,48
   22b0e:	ff2f30ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   22b12:	bf05                	c.j	22a42 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x31c>
      return __exchange_and_add(__mem, __val);
   22b14:	55fd                	c.li	a1,-1
   22b16:	03090513          	addi	a0,s2,48
   22b1a:	817f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22b1e:	b7b1                	c.j	22a6a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x344>
	_M_dispose();
   22b20:	00093783          	ld	a5,0(s2)
   22b24:	6b9c                	c.ld	a5,16(a5)
   22b26:	854a                	c.mv	a0,s2
   22b28:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22b2a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22b2e:	00017797          	auipc	a5,0x17
   22b32:	94a7b783          	ld	a5,-1718(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22b36:	0007c783          	lbu	a5,0(a5)
   22b3a:	c385                	c.beqz	a5,22b5a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    _Atomic_word __result = *__mem;
   22b3c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   22b40:	fff5079b          	addiw	a5,a0,-1
   22b44:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22b48:	4785                	c.li	a5,1
   22b4a:	f2f513e3          	bne	a0,a5,22a70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34a>
	    _M_destroy();
   22b4e:	00093783          	ld	a5,0(s2)
   22b52:	6f9c                	c.ld	a5,24(a5)
   22b54:	854a                	c.mv	a0,s2
   22b56:	9782                	c.jalr	a5
   22b58:	bf21                	c.j	22a70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34a>
      return __exchange_and_add(__mem, __val);
   22b5a:	55fd                	c.li	a1,-1
   22b5c:	03490513          	addi	a0,s2,52
   22b60:	fd0f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22b64:	b7d5                	c.j	22b48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x422>
   22b66:	55fd                	c.li	a1,-1
   22b68:	03048513          	addi	a0,s1,48
   22b6c:	fc4f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22b70:	bf31                	c.j	22a8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x366>
	_M_dispose();
   22b72:	609c                	c.ld	a5,0(s1)
   22b74:	6b9c                	c.ld	a5,16(a5)
   22b76:	8526                	c.mv	a0,s1
   22b78:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22b7a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22b7e:	00017797          	auipc	a5,0x17
   22b82:	8fa7b783          	ld	a5,-1798(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22b86:	0007c783          	lbu	a5,0(a5)
   22b8a:	cf89                	c.beqz	a5,22ba4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x47e>
    _Atomic_word __result = *__mem;
   22b8c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   22b8e:	fff5079b          	addiw	a5,a0,-1
   22b92:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22b94:	4785                	c.li	a5,1
   22b96:	eef51ee3          	bne	a0,a5,22a92 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
	    _M_destroy();
   22b9a:	609c                	c.ld	a5,0(s1)
   22b9c:	6f9c                	c.ld	a5,24(a5)
   22b9e:	8526                	c.mv	a0,s1
   22ba0:	9782                	c.jalr	a5
   22ba2:	bdc5                	c.j	22a92 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
      return __exchange_and_add(__mem, __val);
   22ba4:	55fd                	c.li	a1,-1
   22ba6:	03448513          	addi	a0,s1,52
   22baa:	f86f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22bae:	b7dd                	c.j	22b94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x46e>
      { return _M_ptr; }
   22bb0:	601c                	c.ld	a5,0(s0)
   22bb2:	639c                	c.ld	a5,0(a5)
  m->sec->addr_size = cu_addr_size;
   22bb4:	0347a023          	sw	s4,32(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22bb8:	67a2                	c.ldsp	a5,8(sp)
   22bba:	6b98                	c.ld	a4,16(a5)
   22bbc:	67e2                	c.ldsp	a5,24(sp)
   22bbe:	40f70633          	sub	a2,a4,a5
   22bc2:	4685                	c.li	a3,1
   22bc4:	00c6f463          	bgeu	a3,a2,22bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a6>
   22bc8:	00e7e563          	bltu	a5,a4,22bd2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ac>
      underflow();
   22bcc:	0028                	c.addi4spn	a0,sp,8
   22bce:	86af80ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22bd2:	6762                	c.ldsp	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   22bd4:	67a2                	c.ldsp	a5,8(sp)
   22bd6:	4fdc                	c.lw	a5,28(a5)
   22bd8:	e795                	c.bnez	a5,22c04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4de>
        val |= ((uint64_t)p[i]) << (i * 8);
   22bda:	00174783          	lbu	a5,1(a4)
   22bde:	07a2                	c.slli	a5,0x8
   22be0:	00074683          	lbu	a3,0(a4)
   22be4:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   22be6:	0709                	c.addi	a4,2
   22be8:	ec3a                	c.sdsp	a4,24(sp)
    return (T)val;
   22bea:	03079493          	slli	s1,a5,0x30
   22bee:	90c1                	c.srli	s1,0x30
  if (version < 2 || version > 4)
   22bf0:	37f9                	c.addiw	a5,-2
   22bf2:	17c2                	c.slli	a5,0x30
   22bf4:	93c1                	c.srli	a5,0x30
   22bf6:	4709                	c.li	a4,2
   22bf8:	00f76d63          	bltu	a4,a5,22c12 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ec>
  section_length header_length = cur.offset();
   22bfc:	0028                	c.addi4spn	a0,sp,8
   22bfe:	d60f80ef          	jal	ra,1b15e <dwarf::cursor::offset()>
   22c02:	a069                	c.j	22c8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x566>
        val = (val << 8) | (uint64_t)p[i];
   22c04:	00074783          	lbu	a5,0(a4)
   22c08:	07a2                	c.slli	a5,0x8
   22c0a:	00174683          	lbu	a3,1(a4)
   22c0e:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   22c10:	bfd9                	c.j	22be6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c0>
                       std::to_string(version));
   22c12:	4541                	c.li	a0,16
   22c14:	fbcf30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   22c18:	892a                	c.mv	s2,a0
   22c1a:	85a6                	c.mv	a1,s1
   22c1c:	0284                	c.addi4spn	s1,sp,320
   22c1e:	8526                	c.mv	a0,s1
   22c20:	00017317          	auipc	t1,0x17
   22c24:	86833303          	ld	t1,-1944(t1) # 39488 <std::__cxx11::to_string(int)@@Base+0x1fbc8>
   22c28:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   22c2a:	0000b617          	auipc	a2,0xb
   22c2e:	77e60613          	addi	a2,a2,1918 # 2e3a8 <typeinfo name for dwarf::expr_context+0xc0>
   22c32:	4581                	c.li	a1,0
   22c34:	8526                	c.mv	a0,s1
   22c36:	f0af30ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   22c3a:	85aa                	c.mv	a1,a0
   22c3c:	1204                	c.addi4spn	s1,sp,288
   22c3e:	8526                	c.mv	a0,s1
   22c40:	fd0f30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   22c44:	85a6                	c.mv	a1,s1
   22c46:	854a                	c.mv	a0,s2
   22c48:	8f9f30ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   22c4c:	00017797          	auipc	a5,0x17
   22c50:	9047b783          	ld	a5,-1788(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   22c54:	07c1                	c.addi	a5,16
   22c56:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   22c5a:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   22c5c:	1a1c                	c.addi4spn	a5,sp,304
   22c5e:	00f50463          	beq	a0,a5,22c66 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x540>
   22c62:	84ff30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22c66:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22c68:	0a9c                	c.addi4spn	a5,sp,336
   22c6a:	00f50463          	beq	a0,a5,22c72 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54c>
   22c6e:	843f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
   22c72:	00016617          	auipc	a2,0x16
   22c76:	70663603          	ld	a2,1798(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   22c7a:	00016597          	auipc	a1,0x16
   22c7e:	62e5b583          	ld	a1,1582(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   22c82:	854a                	c.mv	a0,s2
   22c84:	9ddf30ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   22c88:	84aa                	c.mv	s1,a0
   22c8a:	a9ed                	c.j	23184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
  section_offset get_section_offset() const { return pos - sec->begin; }
   22c8c:	6762                	c.ldsp	a4,24(sp)
      { return _M_ptr; }
   22c8e:	66a2                	c.ldsp	a3,8(sp)
   22c90:	00043903          	ld	s2,0(s0)
   22c94:	669c                	c.ld	a5,8(a3)
   22c96:	40f707b3          	sub	a5,a4,a5
  m->program_offset = cur.get_section_offset() + header_length;
   22c9a:	97aa                	c.add	a5,a0
   22c9c:	00f93823          	sd	a5,16(s2)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22ca0:	6a9c                	c.ld	a5,16(a3)
   22ca2:	00f76563          	bltu	a4,a5,22cac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x586>
      underflow();
   22ca6:	0028                	c.addi4spn	a0,sp,8
   22ca8:	f91f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22cac:	67e2                	c.ldsp	a5,24(sp)
   22cae:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   22cb0:	4f54                	c.lw	a3,28(a4)
   22cb2:	6c068763          	beq	a3,zero,23380 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc5a>
        val = (val << 8) | (uint64_t)p[i];
   22cb6:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22cba:	a5e9                	c.j	23384 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc5e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22cbc:	6b18                	c.ld	a4,16(a4)
   22cbe:	00e7e563          	bltu	a5,a4,22cc8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5a2>
      underflow();
   22cc2:	0028                	c.addi4spn	a0,sp,8
   22cc4:	f75f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22cc8:	67e2                	c.ldsp	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   22cca:	6722                	c.ldsp	a4,8(sp)
   22ccc:	4f58                	c.lw	a4,28(a4)
   22cce:	68070463          	beq	a4,zero,23356 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc30>
        val = (val << 8) | (uint64_t)p[i];
   22cd2:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22cd6:	a551                	c.j	2335a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc34>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   22cd8:	00017797          	auipc	a5,0x17
   22cdc:	8787b783          	ld	a5,-1928(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   22ce0:	07c1                	c.addi	a5,16
   22ce2:	00f93023          	sd	a5,0(s2)
                       " be 0 in line number table");
   22ce6:	00016617          	auipc	a2,0x16
   22cea:	69263603          	ld	a2,1682(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   22cee:	00016597          	auipc	a1,0x16
   22cf2:	5ba5b583          	ld	a1,1466(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   22cf6:	854a                	c.mv	a0,s2
   22cf8:	969f30ef          	jal	ra,16660 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   22cfc:	67e2                	c.ldsp	a5,24(sp)
   22cfe:	66a2                	c.ldsp	a3,8(sp)
    if (sec->ord == byte_order::lsb) {
   22d00:	4ed8                	c.lw	a4,28(a3)
   22d02:	62070a63          	beq	a4,zero,23336 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc10>
        val = (val << 8) | (uint64_t)p[i];
   22d06:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22d0a:	ad05                	c.j	2333a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc14>
    const unsigned char *p = (const unsigned char *)pos;
   22d0c:	67e2                	c.ldsp	a5,24(sp)
   22d0e:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   22d10:	4f54                	c.lw	a3,28(a4)
   22d12:	60068463          	beq	a3,zero,2331a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
        val = (val << 8) | (uint64_t)p[i];
   22d16:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22d1a:	a511                	c.j	2331e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf8>
    const unsigned char *p = (const unsigned char *)pos;
   22d1c:	67e2                	c.ldsp	a5,24(sp)
   22d1e:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   22d20:	4f54                	c.lw	a3,28(a4)
   22d22:	5c068a63          	beq	a3,zero,232f6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd0>
        val = (val << 8) | (uint64_t)p[i];
   22d26:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22d2a:	abc1                	c.j	232fa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd4>
    throw format_error("line_range cannot be 0 in line number table");
   22d2c:	4541                	c.li	a0,16
   22d2e:	ea2f30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   22d32:	892a                	c.mv	s2,a0
   22d34:	0000b597          	auipc	a1,0xb
   22d38:	6e458593          	addi	a1,a1,1764 # 2e418 <typeinfo name for dwarf::expr_context+0x130>
   22d3c:	9d5f30ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   22d40:	00017797          	auipc	a5,0x17
   22d44:	8107b783          	ld	a5,-2032(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   22d48:	07c1                	c.addi	a5,16
   22d4a:	00f93023          	sd	a5,0(s2)
   22d4e:	00016617          	auipc	a2,0x16
   22d52:	62a63603          	ld	a2,1578(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   22d56:	00016597          	auipc	a1,0x16
   22d5a:	5525b583          	ld	a1,1362(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   22d5e:	854a                	c.mv	a0,s2
   22d60:	901f30ef          	jal	ra,16660 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   22d64:	67e2                	c.ldsp	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   22d66:	6722                	c.ldsp	a4,8(sp)
   22d68:	4f58                	c.lw	a4,28(a4)
   22d6a:	54070063          	beq	a4,zero,232aa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb84>
        val = (val << 8) | (uint64_t)p[i];
   22d6e:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22d72:	ab35                	c.j	232ae <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb88>
	  _M_default_append(__new_size - size());
   22d74:	40b785b3          	sub	a1,a5,a1
   22d78:	02050513          	addi	a0,a0,32
   22d7c:	00016317          	auipc	t1,0x16
   22d80:	74c33303          	ld	t1,1868(t1) # 394c8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)@@Base+0x14f7a>
   22d84:	9302                	c.jalr	t1
   22d86:	a3b9                	c.j	232d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
    const unsigned char *p = (const unsigned char *)pos;
   22d88:	66e2                	c.ldsp	a3,24(sp)
    if (sec->ord == byte_order::lsb) {
   22d8a:	67a2                	c.ldsp	a5,8(sp)
   22d8c:	4fdc                	c.lw	a5,28(a5)
   22d8e:	4c078d63          	beq	a5,zero,23268 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb42>
        val = (val << 8) | (uint64_t)p[i];
   22d92:	0006c703          	lbu	a4,0(a3)
      for (unsigned i = 0; i < sizeof(T); i++)
   22d96:	a9d9                	c.j	2326c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb46>
                         std::to_string(i) + ", got " + std::to_string(length));
   22d98:	4541                	c.li	a0,16
   22d9a:	e36f30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   22d9e:	89aa                	c.mv	s3,a0
      throw format_error("expected " + std::to_string(opcode_lengths[i]) +
   22da0:	85da                	c.mv	a1,s6
   22da2:	10010a13          	addi	s4,sp,256
   22da6:	8552                	c.mv	a0,s4
   22da8:	00016317          	auipc	t1,0x16
   22dac:	6e033303          	ld	t1,1760(t1) # 39488 <std::__cxx11::to_string(int)@@Base+0x1fbc8>
   22db0:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   22db2:	0000b617          	auipc	a2,0xb
   22db6:	69660613          	addi	a2,a2,1686 # 2e448 <typeinfo name for dwarf::expr_context+0x160>
   22dba:	4581                	c.li	a1,0
   22dbc:	8552                	c.mv	a0,s4
   22dbe:	d82f30ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   22dc2:	85aa                	c.mv	a1,a0
   22dc4:	0e010a13          	addi	s4,sp,224
   22dc8:	8552                	c.mv	a0,s4
   22dca:	e46f30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   22dce:	0000b597          	auipc	a1,0xb
   22dd2:	68a58593          	addi	a1,a1,1674 # 2e458 <typeinfo name for dwarf::expr_context+0x170>
   22dd6:	8552                	c.mv	a0,s4
   22dd8:	969f30ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   22ddc:	85aa                	c.mv	a1,a0
   22dde:	0c010a13          	addi	s4,sp,192
   22de2:	8552                	c.mv	a0,s4
   22de4:	e2cf30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   22de8:	0009059b          	addiw	a1,s2,0
   22dec:	12010913          	addi	s2,sp,288
   22df0:	854a                	c.mv	a0,s2
   22df2:	00016317          	auipc	t1,0x16
   22df6:	6f633303          	ld	t1,1782(t1) # 394e8 <std::__cxx11::to_string(unsigned int)@@Base+0x150c6>
   22dfa:	9302                	c.jalr	t1
                         " arguments for line number opcode " +
   22dfc:	864a                	c.mv	a2,s2
   22dfe:	85d2                	c.mv	a1,s4
   22e00:	1108                	c.addi4spn	a0,sp,160
   22e02:	00016317          	auipc	t1,0x16
   22e06:	5b633303          	ld	t1,1462(t1) # 393b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14f4c>
   22e0a:	9302                	c.jalr	t1
   22e0c:	0000b597          	auipc	a1,0xb
   22e10:	67458593          	addi	a1,a1,1652 # 2e480 <typeinfo name for dwarf::expr_context+0x198>
   22e14:	1108                	c.addi4spn	a0,sp,160
   22e16:	92bf30ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   22e1a:	85aa                	c.mv	a1,a0
   22e1c:	08010913          	addi	s2,sp,128
   22e20:	854a                	c.mv	a0,s2
   22e22:	deef30ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   22e26:	85a6                	c.mv	a1,s1
   22e28:	0284                	c.addi4spn	s1,sp,320
   22e2a:	8526                	c.mv	a0,s1
   22e2c:	00016317          	auipc	t1,0x16
   22e30:	65c33303          	ld	t1,1628(t1) # 39488 <std::__cxx11::to_string(int)@@Base+0x1fbc8>
   22e34:	9302                	c.jalr	t1
   22e36:	8626                	c.mv	a2,s1
   22e38:	85ca                	c.mv	a1,s2
   22e3a:	1088                	c.addi4spn	a0,sp,96
   22e3c:	00016317          	auipc	t1,0x16
   22e40:	57c33303          	ld	t1,1404(t1) # 393b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14f4c>
   22e44:	9302                	c.jalr	t1
      : std::runtime_error(what_arg) {}
   22e46:	108c                	c.addi4spn	a1,sp,96
   22e48:	854e                	c.mv	a0,s3
   22e4a:	ef6f30ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   22e4e:	00016797          	auipc	a5,0x16
   22e52:	7027b783          	ld	a5,1794(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   22e56:	07c1                	c.addi	a5,16
   22e58:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   22e5c:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   22e5e:	189c                	c.addi4spn	a5,sp,112
   22e60:	00f50463          	beq	a0,a5,22e68 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x742>
   22e64:	e4cf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e68:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22e6a:	0a9c                	c.addi4spn	a5,sp,336
   22e6c:	00f50463          	beq	a0,a5,22e74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x74e>
   22e70:	e40f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e74:	650a                	c.ldsp	a0,128(sp)
	if (!_M_is_local())
   22e76:	091c                	c.addi4spn	a5,sp,144
   22e78:	00f50463          	beq	a0,a5,22e80 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x75a>
   22e7c:	e34f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e80:	750a                	c.ldsp	a0,160(sp)
	if (!_M_is_local())
   22e82:	191c                	c.addi4spn	a5,sp,176
   22e84:	00f50463          	beq	a0,a5,22e8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x766>
   22e88:	e28f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e8c:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   22e8e:	1a1c                	c.addi4spn	a5,sp,304
   22e90:	00f50463          	beq	a0,a5,22e98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x772>
   22e94:	e1cf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22e98:	650e                	c.ldsp	a0,192(sp)
	if (!_M_is_local())
   22e9a:	099c                	c.addi4spn	a5,sp,208
   22e9c:	00f50463          	beq	a0,a5,22ea4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x77e>
   22ea0:	e10f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22ea4:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   22ea6:	199c                	c.addi4spn	a5,sp,240
   22ea8:	00f50463          	beq	a0,a5,22eb0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x78a>
   22eac:	e04f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22eb0:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   22eb2:	0a1c                	c.addi4spn	a5,sp,272
   22eb4:	00f50463          	beq	a0,a5,22ebc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x796>
   22eb8:	df8f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
   22ebc:	00016617          	auipc	a2,0x16
   22ec0:	4bc63603          	ld	a2,1212(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   22ec4:	00016597          	auipc	a1,0x16
   22ec8:	3e45b583          	ld	a1,996(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   22ecc:	854e                	c.mv	a0,s3
   22ece:	f92f30ef          	jal	ra,16660 <__cxa_throw@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22ed2:	0a1c                	c.addi4spn	a5,sp,272
   22ed4:	e23e                	c.sdsp	a5,256(sp)
      { _M_string_length = __length; }
   22ed6:	e602                	c.sdsp	zero,264(sp)
	__c1 = __c2;
   22ed8:	10010823          	sb	zero,272(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22edc:	60a8                	c.ld	a0,64(s1)
   22ede:	64bc                	c.ld	a5,72(s1)
   22ee0:	04f50563          	beq	a0,a5,22f2a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x804>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22ee4:	01050793          	addi	a5,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22ee8:	e11c                	c.sd	a5,0(a0)
      { return _M_dataplus._M_p; }
   22eea:	7582                	c.ldsp	a1,32(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22eec:	4681                	c.li	a3,0
   22eee:	7622                	c.ldsp	a2,40(sp)
   22ef0:	962e                	c.add	a2,a1
   22ef2:	00016317          	auipc	t1,0x16
   22ef6:	41633303          	ld	t1,1046(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   22efa:	9302                	c.jalr	t1
	    ++this->_M_impl._M_finish;
   22efc:	60bc                	c.ld	a5,64(s1)
   22efe:	02078793          	addi	a5,a5,32
   22f02:	e0bc                	c.sd	a5,64(s1)
    cur.string(incdir);
   22f04:	10010a13          	addi	s4,sp,256
   22f08:	00810b13          	addi	s6,sp,8
    if (incdir.back() != '/')
   22f0c:	02f00913          	addi	s2,zero,47
	return _M_is_local() ? size_type(_S_local_capacity)
   22f10:	11010d13          	addi	s10,sp,272
      m->include_directories.push_back(comp_dir + incdir);
   22f14:	14010a93          	addi	s5,sp,320
   22f18:	02010b93          	addi	s7,sp,32
   22f1c:	00016c17          	auipc	s8,0x16
   22f20:	6a4c3c03          	ld	s8,1700(s8) # 395c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14f14>
	if (!_M_is_local())
   22f24:	15010c93          	addi	s9,sp,336
   22f28:	a055                	c.j	22fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
	  _M_realloc_insert(end(), __x);
   22f2a:	1010                	c.addi4spn	a2,sp,32
   22f2c:	85aa                	c.mv	a1,a0
   22f2e:	03848513          	addi	a0,s1,56
   22f32:	00016317          	auipc	t1,0x16
   22f36:	51e33303          	ld	t1,1310(t1) # 39450 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14d36>
   22f3a:	9302                	c.jalr	t1
   22f3c:	b7e1                	c.j	22f04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7de>
      { return _M_string_length; }
   22f3e:	64b2                	c.ldsp	s1,264(sp)
    if (incdir.empty())
   22f40:	c8d9                	c.beqz	s1,22fd6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
      { return _M_dataplus._M_p; }
   22f42:	6792                	c.ldsp	a5,256(sp)
    if (incdir.back() != '/')
   22f44:	00978733          	add	a4,a5,s1
   22f48:	fff74703          	lbu	a4,-1(a4)
   22f4c:	01271f63          	bne	a4,s2,22f6a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x844>
    if (incdir[0] == '/')
   22f50:	6792                	c.ldsp	a5,256(sp)
   22f52:	0007c783          	lbu	a5,0(a5)
   22f56:	05278563          	beq	a5,s2,22fa0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x87a>
      m->include_directories.push_back(comp_dir + incdir);
   22f5a:	6004                	c.ld	s1,0(s0)
   22f5c:	03848493          	addi	s1,s1,56
   22f60:	8652                	c.mv	a2,s4
   22f62:	85de                	c.mv	a1,s7
   22f64:	8556                	c.mv	a0,s5
   22f66:	9c02                	c.jalr	s8
   22f68:	a0b1                	c.j	22fb4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x88e>
	if (__size + 1 > this->capacity())
   22f6a:	00148d93          	addi	s11,s1,1
	return _M_is_local() ? size_type(_S_local_capacity)
   22f6e:	01a78f63          	beq	a5,s10,22f8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x866>
   22f72:	67d2                	c.ldsp	a5,272(sp)
	if (__size + 1 > this->capacity())
   22f74:	01b7ee63          	bltu	a5,s11,22f90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86a>
   22f78:	6792                	c.ldsp	a5,256(sp)
   22f7a:	97a6                	c.add	a5,s1
   22f7c:	01278023          	sb	s2,0(a5)
      { _M_string_length = __length; }
   22f80:	e66e                	c.sdsp	s11,264(sp)
   22f82:	6792                	c.ldsp	a5,256(sp)
   22f84:	97ee                	c.add	a5,s11
   22f86:	00078023          	sb	zero,0(a5)
      }
   22f8a:	b7d9                	c.j	22f50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x82a>
	return _M_is_local() ? size_type(_S_local_capacity)
   22f8c:	47bd                	c.li	a5,15
   22f8e:	b7dd                	c.j	22f74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84e>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   22f90:	4705                	c.li	a4,1
   22f92:	4681                	c.li	a3,0
   22f94:	4601                	c.li	a2,0
   22f96:	85a6                	c.mv	a1,s1
   22f98:	8552                	c.mv	a0,s4
   22f9a:	f36f30ef          	jal	ra,166d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22f9e:	bfe9                	c.j	22f78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x852>
      m->include_directories.push_back(move(incdir));
   22fa0:	6008                	c.ld	a0,0(s0)
      { emplace_back(std::move(__x)); }
   22fa2:	85d2                	c.mv	a1,s4
   22fa4:	03850513          	addi	a0,a0,56
   22fa8:	00016317          	auipc	t1,0x16
   22fac:	60833303          	ld	t1,1544(t1) # 395b0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14b68>
   22fb0:	9302                	c.jalr	t1
   22fb2:	a829                	c.j	22fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
   22fb4:	85d6                	c.mv	a1,s5
   22fb6:	8526                	c.mv	a0,s1
   22fb8:	00016317          	auipc	t1,0x16
   22fbc:	5f833303          	ld	t1,1528(t1) # 395b0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14b68>
   22fc0:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   22fc2:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22fc4:	01950463          	beq	a0,s9,22fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
   22fc8:	ce8f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
    cur.string(incdir);
   22fcc:	85d2                	c.mv	a1,s4
   22fce:	855a                	c.mv	a0,s6
   22fd0:	c39f70ef          	jal	ra,1ac08 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   22fd4:	b7ad                	c.j	22f3e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x818>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22fd6:	1a1c                	c.addi4spn	a5,sp,304
   22fd8:	f23e                	c.sdsp	a5,288(sp)
      { _M_string_length = __length; }
   22fda:	f602                	c.sdsp	zero,296(sp)
   22fdc:	12010823          	sb	zero,304(sp)
      { return _M_string_length; }
   22fe0:	0089b603          	ld	a2,8(s3)
  if (!cu_name.empty() && cu_name[0] == '/')
   22fe4:	ca09                	c.beqz	a2,22ff6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8d0>
      { return _M_dataplus._M_p; }
   22fe6:	0009b583          	ld	a1,0(s3)
   22fea:	0005c703          	lbu	a4,0(a1)
   22fee:	02f00793          	addi	a5,zero,47
   22ff2:	00f70e63          	beq	a4,a5,2300e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e8>
    m->file_names.emplace_back(comp_dir + cu_name);
   22ff6:	6004                	c.ld	s1,0(s0)
   22ff8:	05048493          	addi	s1,s1,80
   22ffc:	864e                	c.mv	a2,s3
   22ffe:	100c                	c.addi4spn	a1,sp,32
   23000:	0288                	c.addi4spn	a0,sp,320
   23002:	00016317          	auipc	t1,0x16
   23006:	5be33303          	ld	t1,1470(t1) # 395c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14f14>
   2300a:	9302                	c.jalr	t1
   2300c:	a895                	c.j	23080 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x95a>
   2300e:	6004                	c.ld	s1,0(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   23010:	0584b903          	ld	s2,88(s1)
   23014:	70bc                	c.ld	a5,96(s1)
   23016:	04f90b63          	beq	s2,a5,2306c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x946>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2301a:	0a9c                	c.addi4spn	a5,sp,336
   2301c:	e2be                	c.sdsp	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2301e:	4681                	c.li	a3,0
   23020:	962e                	c.add	a2,a1
   23022:	0288                	c.addi4spn	a0,sp,320
   23024:	00016317          	auipc	t1,0x16
   23028:	2e433303          	ld	t1,740(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   2302c:	9302                	c.jalr	t1
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2302e:	4681                	c.li	a3,0
   23030:	4601                	c.li	a2,0
   23032:	028c                	c.addi4spn	a1,sp,320
   23034:	854a                	c.mv	a0,s2
   23036:	aa4ff0ef          	jal	ra,222da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   2303a:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   2303c:	0a9c                	c.addi4spn	a5,sp,336
   2303e:	00f50463          	beq	a0,a5,23046 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x920>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23042:	c6ef30ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   23046:	6cbc                	c.ld	a5,88(s1)
   23048:	03078793          	addi	a5,a5,48
   2304c:	ecbc                	c.sd	a5,88(s1)
   2304e:	a0b1                	c.j	2309a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
      { return _M_dataplus._M_p; }
   23050:	84aa                	c.mv	s1,a0
   23052:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23054:	0a9c                	c.addi4spn	a5,sp,336
   23056:	00f50463          	beq	a0,a5,2305e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   2305a:	c56f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2305e:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23060:	1a1c                	c.addi4spn	a5,sp,304
   23062:	1cf50d63          	beq	a0,a5,2323c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23066:	c4af30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2306a:	aac9                	c.j	2323c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2306c:	864e                	c.mv	a2,s3
   2306e:	85ca                	c.mv	a1,s2
   23070:	05048513          	addi	a0,s1,80
   23074:	00016317          	auipc	t1,0x16
   23078:	3c433303          	ld	t1,964(t1) # 39438 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14942>
   2307c:	9302                	c.jalr	t1
   2307e:	a831                	c.j	2309a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
   23080:	028c                	c.addi4spn	a1,sp,320
   23082:	8526                	c.mv	a0,s1
   23084:	00016317          	auipc	t1,0x16
   23088:	50433303          	ld	t1,1284(t1) # 39588 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14600>
   2308c:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   2308e:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23090:	0a9c                	c.addi4spn	a5,sp,336
   23092:	00f50463          	beq	a0,a5,2309a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
   23096:	c1af30ef          	jal	ra,164b0 <operator delete(void*)@plt>
  while (m->read_file_entry(&cur, true))
   2309a:	0024                	c.addi4spn	s1,sp,8
   2309c:	a011                	c.j	230a0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x97a>
   2309e:	c519                	c.beqz	a0,230ac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x986>
   230a0:	4605                	c.li	a2,1
   230a2:	85a6                	c.mv	a1,s1
   230a4:	6008                	c.ld	a0,0(s0)
   230a6:	c0aff0ef          	jal	ra,224b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
   230aa:	bfd5                	c.j	2309e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x978>
      { return _M_dataplus._M_p; }
   230ac:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   230ae:	1a1c                	c.addi4spn	a5,sp,304
   230b0:	00f50463          	beq	a0,a5,230b8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x992>
   230b4:	bfcf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230b8:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   230ba:	0a1c                	c.addi4spn	a5,sp,272
   230bc:	00f50463          	beq	a0,a5,230c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x99e>
   230c0:	bf0f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   230c4:	6442                	c.ldsp	s0,16(sp)
   230c6:	cc19                	c.beqz	s0,230e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
    if (__is_single_threaded())
   230c8:	00016797          	auipc	a5,0x16
   230cc:	3b07b783          	ld	a5,944(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   230d0:	0007c783          	lbu	a5,0(a5)
   230d4:	c3b9                	c.beqz	a5,2311a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9f4>
    _Atomic_word __result = *__mem;
   230d6:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   230d8:	fff5079b          	addiw	a5,a0,-1
   230dc:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   230de:	4785                	c.li	a5,1
   230e0:	04f50363          	beq	a0,a5,23126 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa00>
      { return _M_dataplus._M_p; }
   230e4:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   230e6:	089c                	c.addi4spn	a5,sp,80
   230e8:	00f50463          	beq	a0,a5,230f0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9ca>
   230ec:	bc4f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230f0:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   230f2:	181c                	c.addi4spn	a5,sp,48
   230f4:	00f50463          	beq	a0,a5,230fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d6>
   230f8:	bb8f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
}
   230fc:	60fe                	c.ldsp	ra,472(sp)
   230fe:	645e                	c.ldsp	s0,464(sp)
   23100:	64be                	c.ldsp	s1,456(sp)
   23102:	691e                	c.ldsp	s2,448(sp)
   23104:	79fa                	c.ldsp	s3,440(sp)
   23106:	7a5a                	c.ldsp	s4,432(sp)
   23108:	7aba                	c.ldsp	s5,424(sp)
   2310a:	7b1a                	c.ldsp	s6,416(sp)
   2310c:	6bfa                	c.ldsp	s7,408(sp)
   2310e:	6c5a                	c.ldsp	s8,400(sp)
   23110:	6cba                	c.ldsp	s9,392(sp)
   23112:	6d1a                	c.ldsp	s10,384(sp)
   23114:	7df6                	c.ldsp	s11,376(sp)
   23116:	613d                	c.addi16sp	sp,480
   23118:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2311a:	55fd                	c.li	a1,-1
   2311c:	03040513          	addi	a0,s0,48
   23120:	a10f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23124:	bf6d                	c.j	230de <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9b8>
	_M_dispose();
   23126:	601c                	c.ld	a5,0(s0)
   23128:	6b9c                	c.ld	a5,16(a5)
   2312a:	8522                	c.mv	a0,s0
   2312c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2312e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23132:	00016797          	auipc	a5,0x16
   23136:	3467b783          	ld	a5,838(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2313a:	0007c783          	lbu	a5,0(a5)
   2313e:	cf89                	c.beqz	a5,23158 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa32>
    _Atomic_word __result = *__mem;
   23140:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   23142:	fff5079b          	addiw	a5,a0,-1
   23146:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   23148:	4785                	c.li	a5,1
   2314a:	f8f51de3          	bne	a0,a5,230e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
	    _M_destroy();
   2314e:	601c                	c.ld	a5,0(s0)
   23150:	6f9c                	c.ld	a5,24(a5)
   23152:	8522                	c.mv	a0,s0
   23154:	9782                	c.jalr	a5
   23156:	b779                	c.j	230e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
      return __exchange_and_add(__mem, __val);
   23158:	55fd                	c.li	a1,-1
   2315a:	03440513          	addi	a0,s0,52
   2315e:	9d2f30ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23162:	b7dd                	c.j	23148 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa22>
      { return _M_dataplus._M_p; }
   23164:	84aa                	c.mv	s1,a0
   23166:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23168:	1a1c                	c.addi4spn	a5,sp,304
   2316a:	00f50463          	beq	a0,a5,23172 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
   2316e:	b42f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23172:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23174:	0a9c                	c.addi4spn	a5,sp,336
   23176:	00f50463          	beq	a0,a5,2317e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa58>
   2317a:	b36f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       std::to_string(version));
   2317e:	854a                	c.mv	a0,s2
   23180:	af0f30ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   23184:	6542                	c.ldsp	a0,16(sp)
   23186:	ea050563          	beq	a0,zero,22830 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
	  _M_pi->_M_release();
   2318a:	00016317          	auipc	t1,0x16
   2318e:	23633303          	ld	t1,566(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   23192:	9302                	c.jalr	t1
   23194:	e9cff06f          	jal	zero,22830 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
      { return _M_dataplus._M_p; }
   23198:	84aa                	c.mv	s1,a0
   2319a:	bfe1                	c.j	23172 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
                       " be 0 in line number table");
   2319c:	84aa                	c.mv	s1,a0
   2319e:	854a                	c.mv	a0,s2
   231a0:	ad0f30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   231a4:	b7c5                	c.j	23184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
    throw format_error("line_range cannot be 0 in line number table");
   231a6:	84aa                	c.mv	s1,a0
   231a8:	854a                	c.mv	a0,s2
   231aa:	ac6f30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   231ae:	bfd9                	c.j	23184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
   231b0:	84aa                	c.mv	s1,a0
   231b2:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   231b4:	189c                	c.addi4spn	a5,sp,112
   231b6:	00f50463          	beq	a0,a5,231be <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa98>
   231ba:	af6f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231be:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   231c0:	0a9c                	c.addi4spn	a5,sp,336
   231c2:	00f50463          	beq	a0,a5,231ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xaa4>
   231c6:	aeaf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231ca:	650a                	c.ldsp	a0,128(sp)
	if (!_M_is_local())
   231cc:	091c                	c.addi4spn	a5,sp,144
   231ce:	00f50463          	beq	a0,a5,231d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xab0>
   231d2:	adef30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231d6:	750a                	c.ldsp	a0,160(sp)
	if (!_M_is_local())
   231d8:	191c                	c.addi4spn	a5,sp,176
   231da:	00f50463          	beq	a0,a5,231e2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xabc>
   231de:	ad2f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231e2:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   231e4:	1a1c                	c.addi4spn	a5,sp,304
   231e6:	00f50463          	beq	a0,a5,231ee <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xac8>
   231ea:	ac6f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231ee:	650e                	c.ldsp	a0,192(sp)
	if (!_M_is_local())
   231f0:	099c                	c.addi4spn	a5,sp,208
   231f2:	00f50463          	beq	a0,a5,231fa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xad4>
   231f6:	abaf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231fa:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   231fc:	199c                	c.addi4spn	a5,sp,240
   231fe:	00f50463          	beq	a0,a5,23206 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
   23202:	aaef30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23206:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   23208:	0a1c                	c.addi4spn	a5,sp,272
   2320a:	00f50463          	beq	a0,a5,23212 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xaec>
   2320e:	aa2f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   23212:	854e                	c.mv	a0,s3
   23214:	a5cf30ef          	jal	ra,16470 <__cxa_free_exception@plt>
   23218:	b7b5                	c.j	23184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
      { return _M_dataplus._M_p; }
   2321a:	84aa                	c.mv	s1,a0
   2321c:	b74d                	c.j	231be <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa98>
   2321e:	84aa                	c.mv	s1,a0
   23220:	bf5d                	c.j	231d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xab0>
   23222:	84aa                	c.mv	s1,a0
   23224:	bf7d                	c.j	231e2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xabc>
   23226:	84aa                	c.mv	s1,a0
   23228:	bfc9                	c.j	231fa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xad4>
   2322a:	84aa                	c.mv	s1,a0
   2322c:	bfe9                	c.j	23206 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
   2322e:	84aa                	c.mv	s1,a0
   23230:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23232:	0a9c                	c.addi4spn	a5,sp,336
   23234:	00f50463          	beq	a0,a5,2323c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23238:	a78f30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2323c:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   2323e:	0a1c                	c.addi4spn	a5,sp,272
   23240:	f4f502e3          	beq	a0,a5,23184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
   23244:	a6cf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23248:	bf35                	c.j	23184 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
      { return _M_dataplus._M_p; }
   2324a:	84aa                	c.mv	s1,a0
   2324c:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   2324e:	0a9c                	c.addi4spn	a5,sp,336
   23250:	e0f507e3          	beq	a0,a5,2305e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   23254:	a5cf30ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23258:	b519                	c.j	2305e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
      { return _M_dataplus._M_p; }
   2325a:	84aa                	c.mv	s1,a0
   2325c:	b509                	c.j	2305e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   2325e:	84aa                	c.mv	s1,a0
   23260:	bff1                	c.j	2323c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23262:	84aa                	c.mv	s1,a0
   23264:	dccff06f          	jal	zero,22830 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
        val |= ((uint64_t)p[i]) << (i * 8);
   23268:	0006c703          	lbu	a4,0(a3)
    pos += sizeof(T);
   2326c:	0685                	c.addi	a3,1
   2326e:	ec36                	c.sdsp	a3,24(sp)
    return (T)val;
   23270:	0ff77793          	andi	a5,a4,255
    if (length != opcode_lengths[i])
   23274:	84ba                	c.mv	s1,a4
   23276:	000a2b03          	lw	s6,0(s4)
   2327a:	b1671fe3          	bne	a4,s6,22d98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x672>
      { return _M_ptr; }
   2327e:	6004                	c.ld	s1,0(s0)
    m->standard_opcode_lengths[i] = length;
   23280:	7098                	c.ld	a4,32(s1)
   23282:	974a                	c.add	a4,s2
   23284:	00f70023          	sb	a5,0(a4)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   23288:	0905                	c.addi	s2,1
   2328a:	0a11                	c.addi	s4,4
   2328c:	01d4c703          	lbu	a4,29(s1)
   23290:	0009079b          	addiw	a5,s2,0
   23294:	c2e7ffe3          	bgeu	a5,a4,22ed2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7ac>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23298:	67a2                	c.ldsp	a5,8(sp)
   2329a:	6b98                	c.ld	a4,16(a5)
   2329c:	67e2                	c.ldsp	a5,24(sp)
   2329e:	aee7e5e3          	bltu	a5,a4,22d88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x662>
      underflow();
   232a2:	8556                	c.mv	a0,s5
   232a4:	995f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   232a8:	b4c5                	c.j	22d88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x662>
        val |= ((uint64_t)p[i]) << (i * 8);
   232aa:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   232ae:	0785                	c.addi	a5,1
   232b0:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   232b2:	00e48ea3          	sb	a4,29(s1)
   232b6:	6008                	c.ld	a0,0(s0)
  m->standard_opcode_lengths.resize(m->opcode_base);
   232b8:	01d54783          	lbu	a5,29(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   232bc:	7514                	c.ld	a3,40(a0)
   232be:	7118                	c.ld	a4,32(a0)
   232c0:	40e685b3          	sub	a1,a3,a4
	if (__new_size > size())
   232c4:	aaf5e8e3          	bltu	a1,a5,22d74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64e>
	else if (__new_size < size())
   232c8:	00b7f663          	bgeu	a5,a1,232d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   232cc:	973e                	c.add	a4,a5
	if (size_type __n = this->_M_impl._M_finish - __pos)
   232ce:	00e68363          	beq	a3,a4,232d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
	    this->_M_impl._M_finish = __pos;
   232d2:	f518                	c.sd	a4,40(a0)
   232d4:	6004                	c.ld	s1,0(s0)
	return *(this->_M_impl._M_start + __n);
   232d6:	709c                	c.ld	a5,32(s1)
  m->standard_opcode_lengths[0] = 0;
   232d8:	00078023          	sb	zero,0(a5)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   232dc:	01d4c703          	lbu	a4,29(s1)
   232e0:	4785                	c.li	a5,1
   232e2:	bee7f8e3          	bgeu	a5,a4,22ed2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7ac>
   232e6:	0000ba17          	auipc	s4,0xb
   232ea:	2c6a0a13          	addi	s4,s4,710 # 2e5ac <dwarf::opcode_lengths+0x4>
   232ee:	4905                	c.li	s2,1
      underflow();
   232f0:	00810a93          	addi	s5,sp,8
   232f4:	b755                	c.j	23298 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb72>
        val |= ((uint64_t)p[i]) << (i * 8);
   232f6:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   232fa:	0785                	c.addi	a5,1
   232fc:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   232fe:	00d48e23          	sb	a3,28(s1)
   23302:	6004                	c.ld	s1,0(s0)
  if (m->line_range == 0)
   23304:	01c4c683          	lbu	a3,28(s1)
   23308:	a20682e3          	beq	a3,zero,22d2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x606>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2330c:	6b18                	c.ld	a4,16(a4)
   2330e:	a4e7ebe3          	bltu	a5,a4,22d64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x63e>
      underflow();
   23312:	0028                	c.addi4spn	a0,sp,8
   23314:	925f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   23318:	b4b1                	c.j	22d64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x63e>
        val |= ((uint64_t)p[i]) << (i * 8);
   2331a:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   2331e:	0785                	c.addi	a5,1
   23320:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23322:	00d48da3          	sb	a3,27(s1)
   23326:	6004                	c.ld	s1,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23328:	6b18                	c.ld	a4,16(a4)
   2332a:	9ee7e9e3          	bltu	a5,a4,22d1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f6>
      underflow();
   2332e:	0028                	c.addi4spn	a0,sp,8
   23330:	909f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   23334:	b2e5                	c.j	22d1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f6>
        val |= ((uint64_t)p[i]) << (i * 8);
   23336:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   2333a:	0785                	c.addi	a5,1
   2333c:	ec3e                	c.sdsp	a5,24(sp)
   2333e:	6004                	c.ld	s1,0(s0)
  m->default_is_stmt = cur.fixed<ubyte>();
   23340:	00e03733          	sltu	a4,zero,a4
   23344:	00e48d23          	sb	a4,26(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23348:	6a98                	c.ld	a4,16(a3)
   2334a:	9ce7e1e3          	bltu	a5,a4,22d0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e6>
      underflow();
   2334e:	0028                	c.addi4spn	a0,sp,8
   23350:	8e9f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   23354:	ba65                	c.j	22d0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e6>
        val |= ((uint64_t)p[i]) << (i * 8);
   23356:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   2335a:	0785                	c.addi	a5,1
   2335c:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   2335e:	00e90ca3          	sb	a4,25(s2)
  if (m->maximum_operations_per_instruction == 0)
   23362:	601c                	c.ld	a5,0(s0)
   23364:	0197c783          	lbu	a5,25(a5)
   23368:	eb9d                	c.bnez	a5,2339e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc78>
                       " be 0 in line number table");
   2336a:	4541                	c.li	a0,16
   2336c:	864f30ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23370:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23372:	0000b597          	auipc	a1,0xb
   23376:	05e58593          	addi	a1,a1,94 # 2e3d0 <typeinfo name for dwarf::expr_context+0xe8>
   2337a:	b96f30ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2337e:	baa9                	c.j	22cd8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5b2>
        val |= ((uint64_t)p[i]) << (i * 8);
   23380:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   23384:	0785                	c.addi	a5,1
   23386:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23388:	00d90c23          	sb	a3,24(s2)
   2338c:	00043903          	ld	s2,0(s0)
  m->maximum_operations_per_instruction = 1;
   23390:	4685                	c.li	a3,1
   23392:	00d90ca3          	sb	a3,25(s2)
  if (version == 4)
   23396:	2481                	c.addiw	s1,0
   23398:	4691                	c.li	a3,4
   2339a:	92d481e3          	beq	s1,a3,22cbc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x596>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2339e:	67a2                	c.ldsp	a5,8(sp)
   233a0:	6b98                	c.ld	a4,16(a5)
   233a2:	67e2                	c.ldsp	a5,24(sp)
   233a4:	94e7ece3          	bltu	a5,a4,22cfc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5d6>
      underflow();
   233a8:	0028                	c.addi4spn	a0,sp,8
   233aa:	88ff70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
   233ae:	b2b9                	c.j	22cfc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5d6>
struct cursor {
   233b0:	ec56                	c.sdsp	s5,24(sp)
      ~__shared_count() noexcept
   233b2:	ec2ff06f          	jal	zero,22a74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34e>
      : sec(sec), pos(sec->begin + offset) {}
   233b6:	00893a83          	ld	s5,8(s2)
   233ba:	e44a                	c.sdsp	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   233bc:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   233be:	e802                	c.sdsp	zero,16(sp)
	if (_M_pi != nullptr)
   233c0:	e8091863          	bne	s2,zero,22a50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x32a>
struct cursor {
   233c4:	ec56                	c.sdsp	s5,24(sp)
      ~__shared_count() noexcept
   233c6:	eccff06f          	jal	zero,22a92 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   233ca:	e45a                	c.sdsp	s6,8(sp)
      : _M_pi(__r._M_pi)
   233cc:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   233ce:	008b3783          	ld	a5,8(s6)
   233d2:	97d6                	c.add	a5,s5
   233d4:	ec3e                	c.sdsp	a5,24(sp)
      { return _M_ptr; }
   233d6:	6004                	c.ld	s1,0(s0)
  m->sec = cur.subsection();
   233d8:	002c                	c.addi4spn	a1,sp,8
   233da:	1288                	c.addi4spn	a0,sp,352
   233dc:	bedf70ef          	jal	ra,1afc8 <dwarf::cursor::subsection()>
   233e0:	d9eff06f          	jal	zero,2297e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x258>
      { _M_dataplus._M_p = __p; }
   233e4:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   233e6:	67b6                	c.ldsp	a5,328(sp)
   233e8:	f43e                	c.sdsp	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   233ea:	67d6                	c.ldsp	a5,336(sp)
   233ec:	f83e                	c.sdsp	a5,48(sp)
      { _M_dataplus._M_p = __p; }
   233ee:	0a9c                	c.addi4spn	a5,sp,336
   233f0:	e2be                	c.sdsp	a5,320(sp)
   233f2:	c8eff06f          	jal	zero,22880 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15a>

00000000000233f6 <dwarf::line_table::iterator::step(dwarf::cursor*)>:

  pos = cur.get_section_offset();
  return *this;
}

bool line_table::iterator::step(cursor *cur) {
   233f6:	7135                	c.addi16sp	sp,-160
   233f8:	ed06                	c.sdsp	ra,152(sp)
   233fa:	e922                	c.sdsp	s0,144(sp)
   233fc:	e526                	c.sdsp	s1,136(sp)
   233fe:	e14a                	c.sdsp	s2,128(sp)
   23400:	fcce                	c.sdsp	s3,120(sp)
   23402:	f8d2                	c.sdsp	s4,112(sp)
   23404:	f4d6                	c.sdsp	s5,104(sp)
   23406:	84aa                	c.mv	s1,a0
   23408:	842e                	c.mv	s0,a1
   2340a:	611c                	c.ld	a5,0(a0)
   2340c:	0007b983          	ld	s3,0(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23410:	619c                	c.ld	a5,0(a1)
   23412:	6b98                	c.ld	a4,16(a5)
   23414:	699c                	c.ld	a5,16(a1)
   23416:	00e7e563          	bltu	a5,a4,23420 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2a>
      underflow();
   2341a:	852e                	c.mv	a0,a1
   2341c:	81df70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23420:	681c                	c.ld	a5,16(s0)
   23422:	600c                	c.ld	a1,0(s0)
    if (sec->ord == byte_order::lsb) {
   23424:	4dd8                	c.lw	a4,28(a1)
   23426:	5e070763          	beq	a4,zero,23a14 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x61e>
        val = (val << 8) | (uint64_t)p[i];
   2342a:	0007c903          	lbu	s2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2342e:	a3ed                	c.j	23a18 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x622>

  // Read the opcode (DWARF4 section 6.2.3)
  ubyte opcode = cur->fixed<ubyte>();
  if (opcode >= m->opcode_base) {
    // Special opcode (DWARF4 section 6.2.5.1)
    ubyte adjusted_opcode = opcode - m->opcode_base;
   23430:	40e907bb          	subw	a5,s2,a4
   23434:	0ff7f793          	andi	a5,a5,255
    unsigned op_advance = adjusted_opcode / m->line_range;
   23438:	01c9c683          	lbu	a3,28(s3)
    signed line_inc = m->line_base + (signed)adjusted_opcode % m->line_range;
   2343c:	01b98703          	lb	a4,27(s3)
   23440:	02d7f63b          	remuw	a2,a5,a3
   23444:	9f31                	c.addw	a4,a2

    regs.line += line_inc;
   23446:	4cf0                	c.lw	a2,92(s1)
   23448:	9f31                	c.addw	a4,a2
   2344a:	ccf8                	c.sw	a4,92(s1)
    unsigned op_advance = adjusted_opcode / m->line_range;
   2344c:	02d7d7bb          	divuw	a5,a5,a3
    regs.address +=
        m->minimum_instruction_length *
        ((regs.op_index + op_advance) / m->maximum_operations_per_instruction);
   23450:	44b8                	c.lw	a4,72(s1)
   23452:	9fb9                	c.addw	a5,a4
   23454:	0199c703          	lbu	a4,25(s3)
   23458:	02e7d73b          	divuw	a4,a5,a4
        m->minimum_instruction_length *
   2345c:	0189c683          	lbu	a3,24(s3)
   23460:	02d7073b          	mulw	a4,a4,a3
   23464:	1702                	c.slli	a4,0x20
   23466:	9301                	c.srli	a4,0x20
    regs.address +=
   23468:	60b4                	c.ld	a3,64(s1)
   2346a:	9736                	c.add	a4,a3
   2346c:	e0b8                	c.sd	a4,64(s1)
    regs.op_index =
        (regs.op_index + op_advance) % m->maximum_operations_per_instruction;
   2346e:	0199c683          	lbu	a3,25(s3)
   23472:	02d7f7bb          	remuw	a5,a5,a3
    regs.op_index =
   23476:	c4bc                	c.sw	a5,72(s1)
    entry = regs;
   23478:	0484b803          	ld	a6,72(s1)
   2347c:	68a8                	c.ld	a0,80(s1)
   2347e:	6cac                	c.ld	a1,88(s1)
   23480:	70b0                	c.ld	a2,96(s1)
   23482:	74b4                	c.ld	a3,104(s1)
   23484:	78bc                	c.ld	a5,112(s1)
   23486:	e498                	c.sd	a4,8(s1)
   23488:	0104b823          	sd	a6,16(s1)
   2348c:	ec88                	c.sd	a0,24(s1)
   2348e:	f08c                	c.sd	a1,32(s1)
   23490:	f490                	c.sd	a2,40(s1)
   23492:	f894                	c.sd	a3,48(s1)
   23494:	fc9c                	c.sd	a5,56(s1)

    regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   23496:	06048423          	sb	zero,104(s1)
   2349a:	060483a3          	sb	zero,103(s1)
   2349e:	060482a3          	sb	zero,101(s1)
    regs.discriminator = 0;
   234a2:	0604a823          	sw	zero,112(s1)

    return true;
   234a6:	4505                	c.li	a0,1
   234a8:	a2e5                	c.j	23690 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x29a>
    while (pos < sec->end) {
   234aa:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   234ac:	4501                	c.li	a0,0
    int shift = 0;
   234ae:	4601                	c.li	a2,0
    while (pos < sec->end) {
   234b0:	02e7f563          	bgeu	a5,a4,234da <dwarf::line_table::iterator::step(dwarf::cursor*)+0xe4>
      uint8_t byte = *(uint8_t *)(pos++);
   234b4:	0785                	c.addi	a5,1
   234b6:	e81c                	c.sd	a5,16(s0)
   234b8:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   234bc:	07f77693          	andi	a3,a4,127
   234c0:	00c696b3          	sll	a3,a3,a2
   234c4:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   234c6:	0187171b          	slliw	a4,a4,0x18
   234ca:	4187571b          	sraiw	a4,a4,0x18
   234ce:	00075a63          	bge	a4,zero,234e2 <dwarf::line_table::iterator::step(dwarf::cursor*)+0xec>
      shift += 7;
   234d2:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   234d4:	6998                	c.ld	a4,16(a1)
   234d6:	fce7efe3          	bltu	a5,a4,234b4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0xbe>
    underflow();
   234da:	8522                	c.mv	a0,s0
   234dc:	f5cf70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   234e0:	4501                	c.li	a0,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   234e2:	681c                	c.ld	a5,16(s0)
   234e4:	6018                	c.ld	a4,0(s0)
   234e6:	00873a03          	ld	s4,8(a4)
   234ea:	41478a33          	sub	s4,a5,s4
    return ((DW_LNS)opcode == DW_LNS::copy);
  } else { // opcode == 0
    // Extended opcode (DWARF4 sections 6.2.3 and 6.2.5.3)
    assert(opcode == 0);
    uint64_t length = cur->uleb128();
    section_offset end = cur->get_section_offset() + length;
   234ee:	9a2a                	c.add	s4,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   234f0:	6b18                	c.ld	a4,16(a4)
   234f2:	00e7e563          	bltu	a5,a4,234fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x106>
      underflow();
   234f6:	8522                	c.mv	a0,s0
   234f8:	f40f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   234fc:	681c                	c.ld	a5,16(s0)
   234fe:	6008                	c.ld	a0,0(s0)
    if (sec->ord == byte_order::lsb) {
   23500:	4d58                	c.lw	a4,28(a0)
   23502:	4c070d63          	beq	a4,zero,239dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5e6>
        val = (val << 8) | (uint64_t)p[i];
   23506:	0007c583          	lbu	a1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2350a:	a9d9                	c.j	239e0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5ea>
    while (pos < sec->end) {
   2350c:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   2350e:	4501                	c.li	a0,0
    int shift = 0;
   23510:	4601                	c.li	a2,0
    while (pos < sec->end) {
   23512:	02e7f563          	bgeu	a5,a4,2353c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x146>
      uint8_t byte = *(uint8_t *)(pos++);
   23516:	0785                	c.addi	a5,1
   23518:	e81c                	c.sd	a5,16(s0)
   2351a:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2351e:	07f77693          	andi	a3,a4,127
   23522:	00c696b3          	sll	a3,a3,a2
   23526:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   23528:	0187171b          	slliw	a4,a4,0x18
   2352c:	4187571b          	sraiw	a4,a4,0x18
   23530:	00075a63          	bge	a4,zero,23544 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x14e>
      shift += 7;
   23534:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23536:	6998                	c.ld	a4,16(a1)
   23538:	fce7efe3          	bltu	a5,a4,23516 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x120>
    underflow();
   2353c:	8522                	c.mv	a0,s0
   2353e:	efaf70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   23542:	4501                	c.li	a0,0
      regs.isa = cur->uleb128();
   23544:	d4e8                	c.sw	a0,108(s1)
      break;
   23546:	a289                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   23548:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   2354a:	4501                	c.li	a0,0
    int shift = 0;
   2354c:	4601                	c.li	a2,0
    while (pos < sec->end) {
   2354e:	02e7f563          	bgeu	a5,a4,23578 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x182>
      uint8_t byte = *(uint8_t *)(pos++);
   23552:	0785                	c.addi	a5,1
   23554:	e81c                	c.sd	a5,16(s0)
   23556:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2355a:	07f77693          	andi	a3,a4,127
   2355e:	00c696b3          	sll	a3,a3,a2
   23562:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   23564:	0187171b          	slliw	a4,a4,0x18
   23568:	4187571b          	sraiw	a4,a4,0x18
   2356c:	00075a63          	bge	a4,zero,23580 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x18a>
      shift += 7;
   23570:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23572:	6998                	c.ld	a4,16(a1)
   23574:	fce7efe3          	bltu	a5,a4,23552 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x15c>
    underflow();
   23578:	8522                	c.mv	a0,s0
   2357a:	ebef70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   2357e:	4501                	c.li	a0,0
      regs.column = cur->uleb128();
   23580:	d0a8                	c.sw	a0,96(s1)
      break;
   23582:	a219                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   23584:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   23586:	4501                	c.li	a0,0
    int shift = 0;
   23588:	4601                	c.li	a2,0
    while (pos < sec->end) {
   2358a:	02e7f563          	bgeu	a5,a4,235b4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1be>
      uint8_t byte = *(uint8_t *)(pos++);
   2358e:	0785                	c.addi	a5,1
   23590:	e81c                	c.sd	a5,16(s0)
   23592:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23596:	07f77693          	andi	a3,a4,127
   2359a:	00c696b3          	sll	a3,a3,a2
   2359e:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   235a0:	0187171b          	slliw	a4,a4,0x18
   235a4:	4187571b          	sraiw	a4,a4,0x18
   235a8:	00075a63          	bge	a4,zero,235bc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1c6>
      shift += 7;
   235ac:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   235ae:	6998                	c.ld	a4,16(a1)
   235b0:	fce7efe3          	bltu	a5,a4,2358e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x198>
    underflow();
   235b4:	8522                	c.mv	a0,s0
   235b6:	e82f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   235ba:	4501                	c.li	a0,0
      regs.file_index = cur->uleb128();
   235bc:	cca8                	c.sw	a0,88(s1)
      break;
   235be:	a0e9                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   235c0:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   235c2:	4501                	c.li	a0,0
    int shift = 0;
   235c4:	4601                	c.li	a2,0
    while (pos < sec->end) {
   235c6:	02e7f563          	bgeu	a5,a4,235f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1fa>
      uint8_t byte = *(uint8_t *)(pos++);
   235ca:	0785                	c.addi	a5,1
   235cc:	e81c                	c.sd	a5,16(s0)
   235ce:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   235d2:	07f77693          	andi	a3,a4,127
   235d6:	00c696b3          	sll	a3,a3,a2
   235da:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   235dc:	0187171b          	slliw	a4,a4,0x18
   235e0:	4187571b          	sraiw	a4,a4,0x18
   235e4:	06075f63          	bge	a4,zero,23662 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x26c>
      shift += 7;
   235e8:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   235ea:	6998                	c.ld	a4,16(a1)
   235ec:	fce7efe3          	bltu	a5,a4,235ca <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1d4>
    underflow();
   235f0:	8522                	c.mv	a0,s0
   235f2:	e46f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   235f6:	4501                	c.li	a0,0
   235f8:	a0ad                	c.j	23662 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x26c>
      entry = regs;
   235fa:	0404b803          	ld	a6,64(s1)
   235fe:	64a8                	c.ld	a0,72(s1)
   23600:	68ac                	c.ld	a1,80(s1)
   23602:	6cb0                	c.ld	a2,88(s1)
   23604:	70b4                	c.ld	a3,96(s1)
   23606:	74b8                	c.ld	a4,104(s1)
   23608:	78bc                	c.ld	a5,112(s1)
   2360a:	0104b423          	sd	a6,8(s1)
   2360e:	e888                	c.sd	a0,16(s1)
   23610:	ec8c                	c.sd	a1,24(s1)
   23612:	f090                	c.sd	a2,32(s1)
   23614:	f494                	c.sd	a3,40(s1)
   23616:	f898                	c.sd	a4,48(s1)
   23618:	fc9c                	c.sd	a5,56(s1)
      regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   2361a:	06048423          	sb	zero,104(s1)
   2361e:	060483a3          	sb	zero,103(s1)
   23622:	060482a3          	sb	zero,101(s1)
      regs.discriminator = 0;
   23626:	0604a823          	sw	zero,112(s1)
      break;
   2362a:	a8b9                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.line = (signed)regs.line + cur->sleb128();
   2362c:	05c4a983          	lw	s3,92(s1)
   23630:	8522                	c.mv	a0,s0
   23632:	e46f70ef          	jal	ra,1ac78 <dwarf::cursor::sleb128()>
   23636:	0135053b          	addw	a0,a0,s3
   2363a:	cce8                	c.sw	a0,92(s1)
      break;
   2363c:	a0b1                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.is_stmt = !regs.is_stmt;
   2363e:	0644c783          	lbu	a5,100(s1)
   23642:	0017c793          	xori	a5,a5,1
   23646:	06f48223          	sb	a5,100(s1)
      break;
   2364a:	a83d                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.basic_block = true;
   2364c:	4785                	c.li	a5,1
   2364e:	06f482a3          	sb	a5,101(s1)
      break;
   23652:	a81d                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      uarg = (255 - m->opcode_base) / m->line_range;
   23654:	0ff00513          	addi	a0,zero,255
   23658:	9d19                	c.subw	a0,a4
   2365a:	01c9c783          	lbu	a5,28(s3)
   2365e:	02f5453b          	divw	a0,a0,a5
          ((regs.op_index + uarg) / m->maximum_operations_per_instruction);
   23662:	0484e783          	lwu	a5,72(s1)
   23666:	97aa                	c.add	a5,a0
   23668:	0199c703          	lbu	a4,25(s3)
   2366c:	02e7d733          	divu	a4,a5,a4
          m->minimum_instruction_length *
   23670:	0189c683          	lbu	a3,24(s3)
   23674:	02d70733          	mul	a4,a4,a3
      regs.address +=
   23678:	60b4                	c.ld	a3,64(s1)
   2367a:	9736                	c.add	a4,a3
   2367c:	e0b8                	c.sd	a4,64(s1)
          (regs.op_index + uarg) % m->maximum_operations_per_instruction;
   2367e:	0199c703          	lbu	a4,25(s3)
   23682:	02e7f7b3          	remu	a5,a5,a4
      regs.op_index =
   23686:	c4bc                	c.sw	a5,72(s1)
    return ((DW_LNS)opcode == DW_LNS::copy);
   23688:	fff90513          	addi	a0,s2,-1
   2368c:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
      throw format_error("extended line number opcode exceeded its size");
    cur += end - cur->get_section_offset();
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
  }
}
   23690:	60ea                	c.ldsp	ra,152(sp)
   23692:	644a                	c.ldsp	s0,144(sp)
   23694:	64aa                	c.ldsp	s1,136(sp)
   23696:	690a                	c.ldsp	s2,128(sp)
   23698:	79e6                	c.ldsp	s3,120(sp)
   2369a:	7a46                	c.ldsp	s4,112(sp)
   2369c:	7aa6                	c.ldsp	s5,104(sp)
   2369e:	610d                	c.addi16sp	sp,160
   236a0:	8082                	c.jr	ra
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   236a2:	6998                	c.ld	a4,16(a1)
   236a4:	40f70633          	sub	a2,a4,a5
   236a8:	4685                	c.li	a3,1
   236aa:	00c6f463          	bgeu	a3,a2,236b2 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2bc>
   236ae:	00e7e563          	bltu	a5,a4,236b8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2c2>
      underflow();
   236b2:	8522                	c.mv	a0,s0
   236b4:	d84f70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   236b8:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   236ba:	601c                	c.ld	a5,0(s0)
   236bc:	4fdc                	c.lw	a5,28(a5)
   236be:	ef99                	c.bnez	a5,236dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2e6>
        val |= ((uint64_t)p[i]) << (i * 8);
   236c0:	00174783          	lbu	a5,1(a4)
   236c4:	07a2                	c.slli	a5,0x8
   236c6:	00074683          	lbu	a3,0(a4)
   236ca:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   236cc:	0709                	c.addi	a4,2
   236ce:	e818                	c.sd	a4,16(s0)
      regs.address += cur->fixed<uhalf>();
   236d0:	60b8                	c.ld	a4,64(s1)
   236d2:	97ba                	c.add	a5,a4
   236d4:	e0bc                	c.sd	a5,64(s1)
      regs.op_index = 0;
   236d6:	0404a423          	sw	zero,72(s1)
      break;
   236da:	b77d                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
        val = (val << 8) | (uint64_t)p[i];
   236dc:	00074783          	lbu	a5,0(a4)
   236e0:	07a2                	c.slli	a5,0x8
   236e2:	00174683          	lbu	a3,1(a4)
   236e6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   236e8:	b7d5                	c.j	236cc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2d6>
      regs.prologue_end = true;
   236ea:	4785                	c.li	a5,1
   236ec:	06f483a3          	sb	a5,103(s1)
      break;
   236f0:	bf61                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.epilogue_begin = true;
   236f2:	4785                	c.li	a5,1
   236f4:	06f48423          	sb	a5,104(s1)
      break;
   236f8:	bf41                	c.j	23688 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
                         to_string((DW_LNS)opcode));
   236fa:	4541                	c.li	a0,16
   236fc:	cd5f20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23700:	84aa                	c.mv	s1,a0
   23702:	85ca                	c.mv	a1,s2
   23704:	1008                	c.addi4spn	a0,sp,32
   23706:	0f9030ef          	jal	ra,26ffe <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2370a:	0000b617          	auipc	a2,0xb
   2370e:	d7e60613          	addi	a2,a2,-642 # 2e488 <typeinfo name for dwarf::expr_context+0x1a0>
   23712:	4581                	c.li	a1,0
   23714:	1008                	c.addi4spn	a0,sp,32
   23716:	c2bf20ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2371a:	85aa                	c.mv	a1,a0
   2371c:	0080                	c.addi4spn	s0,sp,64
   2371e:	8522                	c.mv	a0,s0
   23720:	cf1f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   23724:	85a2                	c.mv	a1,s0
   23726:	8526                	c.mv	a0,s1
   23728:	e19f20ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2372c:	00016797          	auipc	a5,0x16
   23730:	e247b783          	ld	a5,-476(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   23734:	07c1                	c.addi	a5,16
   23736:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   23738:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2373a:	089c                	c.addi4spn	a5,sp,80
   2373c:	00f50463          	beq	a0,a5,23744 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x34e>
   23740:	d71f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23744:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23746:	181c                	c.addi4spn	a5,sp,48
   23748:	00f50463          	beq	a0,a5,23750 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x35a>
   2374c:	d65f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
   23750:	00016617          	auipc	a2,0x16
   23754:	c2863603          	ld	a2,-984(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   23758:	00016597          	auipc	a1,0x16
   2375c:	b505b583          	ld	a1,-1200(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   23760:	8526                	c.mv	a0,s1
   23762:	efff20ef          	jal	ra,16660 <__cxa_throw@plt>
    switch ((DW_LNE)opcode) {
   23766:	4711                	c.li	a4,4
   23768:	04e91063          	bne	s2,a4,237a8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3b2>
    while (pos < sec->end) {
   2376c:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   2376e:	4581                	c.li	a1,0
    int shift = 0;
   23770:	4601                	c.li	a2,0
    while (pos < sec->end) {
   23772:	02e7f563          	bgeu	a5,a4,2379c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a6>
      uint8_t byte = *(uint8_t *)(pos++);
   23776:	0785                	c.addi	a5,1
   23778:	e81c                	c.sd	a5,16(s0)
   2377a:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2377e:	07f77693          	andi	a3,a4,127
   23782:	00c696b3          	sll	a3,a3,a2
   23786:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   23788:	0187171b          	slliw	a4,a4,0x18
   2378c:	4187571b          	sraiw	a4,a4,0x18
   23790:	00075a63          	bge	a4,zero,237a4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3ae>
      shift += 7;
   23794:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23796:	6918                	c.ld	a4,16(a0)
   23798:	fce7efe3          	bltu	a5,a4,23776 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x380>
    underflow();
   2379c:	8522                	c.mv	a0,s0
   2379e:	c9af70ef          	jal	ra,1ac38 <dwarf::cursor::underflow()>
    return 0;
   237a2:	4581                	c.li	a1,0
      regs.discriminator = cur->uleb128();
   237a4:	d8ac                	c.sw	a1,112(s1)
      break;
   237a6:	a899                	c.j	237fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
    switch ((DW_LNE)opcode) {
   237a8:	f809091b          	addiw	s2,s2,-128
   237ac:	0189191b          	slliw	s2,s2,0x18
   237b0:	4189591b          	sraiw	s2,s2,0x18
   237b4:	0e094963          	blt	s2,zero,238a6 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b0>
                          to_string((DW_LNE)opcode) + " not implemented");
   237b8:	4541                	c.li	a0,16
   237ba:	c17f20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   237be:	84aa                	c.mv	s1,a0
   237c0:	85d6                	c.mv	a1,s5
   237c2:	850a                	c.mv	a0,sp
   237c4:	2ba030ef          	jal	ra,26a7e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
   237c8:	a0ad                	c.j	23832 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x43c>
      regs.end_sequence = true;
   237ca:	4785                	c.li	a5,1
   237cc:	06f48323          	sb	a5,102(s1)
      entry = regs;
   237d0:	0404b803          	ld	a6,64(s1)
   237d4:	64a8                	c.ld	a0,72(s1)
   237d6:	68ac                	c.ld	a1,80(s1)
   237d8:	6cb0                	c.ld	a2,88(s1)
   237da:	70b4                	c.ld	a3,96(s1)
   237dc:	74b8                	c.ld	a4,104(s1)
   237de:	78bc                	c.ld	a5,112(s1)
   237e0:	0104b423          	sd	a6,8(s1)
   237e4:	e888                	c.sd	a0,16(s1)
   237e6:	ec8c                	c.sd	a1,24(s1)
   237e8:	f090                	c.sd	a2,32(s1)
   237ea:	f494                	c.sd	a3,40(s1)
   237ec:	f898                	c.sd	a4,48(s1)
   237ee:	fc9c                	c.sd	a5,56(s1)
      regs.reset(m->default_is_stmt);
   237f0:	01a9c583          	lbu	a1,26(s3)
   237f4:	04048513          	addi	a0,s1,64
   237f8:	aaffe0ef          	jal	ra,222a6 <dwarf::line_table::entry::reset(bool)>
  section_offset get_section_offset() const { return pos - sec->begin; }
   237fc:	6018                	c.ld	a4,0(s0)
   237fe:	681c                	c.ld	a5,16(s0)
   23800:	6718                	c.ld	a4,8(a4)
   23802:	8f99                	c.sub	a5,a4
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
   23804:	fff90513          	addi	a0,s2,-1
   23808:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
   2380c:	e8fa72e3          	bgeu	s4,a5,23690 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x29a>
      throw format_error("extended line number opcode exceeded its size");
   23810:	4541                	c.li	a0,16
   23812:	bbff20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23816:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23818:	0000b597          	auipc	a1,0xb
   2381c:	cb058593          	addi	a1,a1,-848 # 2e4c8 <typeinfo name for dwarf::expr_context+0x1e0>
   23820:	ef1f20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   23824:	a0fd                	c.j	23912 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x51c>
      m->read_file_entry(cur, false);
   23826:	4601                	c.li	a2,0
   23828:	85a2                	c.mv	a1,s0
   2382a:	854e                	c.mv	a0,s3
   2382c:	c85fe0ef          	jal	ra,224b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
      break;
   23830:	b7f1                	c.j	237fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
    { return std::move(__rhs.insert(0, __lhs)); }
   23832:	0000b617          	auipc	a2,0xb
   23836:	c7660613          	addi	a2,a2,-906 # 2e4a8 <typeinfo name for dwarf::expr_context+0x1c0>
   2383a:	4581                	c.li	a1,0
   2383c:	850a                	c.mv	a0,sp
   2383e:	b03f20ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23842:	85aa                	c.mv	a1,a0
   23844:	1000                	c.addi4spn	s0,sp,32
   23846:	8522                	c.mv	a0,s0
   23848:	bc9f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2384c:	0000a597          	auipc	a1,0xa
   23850:	5f458593          	addi	a1,a1,1524 # 2de40 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   23854:	8522                	c.mv	a0,s0
   23856:	eebf20ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2385a:	85aa                	c.mv	a1,a0
   2385c:	0080                	c.addi4spn	s0,sp,64
   2385e:	8522                	c.mv	a0,s0
   23860:	bb1f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw runtime_error("vendor line number opcode " +
   23864:	85a2                	c.mv	a1,s0
   23866:	8526                	c.mv	a0,s1
   23868:	db9f20ef          	jal	ra,16620 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2386c:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2386e:	089c                	c.addi4spn	a5,sp,80
   23870:	00f50463          	beq	a0,a5,23878 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x482>
   23874:	c3df20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23878:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2387a:	181c                	c.addi4spn	a5,sp,48
   2387c:	00f50463          	beq	a0,a5,23884 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x48e>
   23880:	c31f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23884:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   23886:	081c                	c.addi4spn	a5,sp,16
   23888:	00f50463          	beq	a0,a5,23890 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x49a>
   2388c:	c25f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   23890:	00016617          	auipc	a2,0x16
   23894:	b7063603          	ld	a2,-1168(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   23898:	00016597          	auipc	a1,0x16
   2389c:	d585b583          	ld	a1,-680(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   238a0:	8526                	c.mv	a0,s1
   238a2:	dbff20ef          	jal	ra,16660 <__cxa_throw@plt>
                         to_string((DW_LNE)opcode));
   238a6:	4541                	c.li	a0,16
   238a8:	b29f20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   238ac:	84aa                	c.mv	s1,a0
   238ae:	85d6                	c.mv	a1,s5
   238b0:	1008                	c.addi4spn	a0,sp,32
   238b2:	1cc030ef          	jal	ra,26a7e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
    { return std::move(__rhs.insert(0, __lhs)); }
   238b6:	0000b617          	auipc	a2,0xb
   238ba:	bd260613          	addi	a2,a2,-1070 # 2e488 <typeinfo name for dwarf::expr_context+0x1a0>
   238be:	4581                	c.li	a1,0
   238c0:	1008                	c.addi4spn	a0,sp,32
   238c2:	a7ff20ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   238c6:	85aa                	c.mv	a1,a0
   238c8:	0080                	c.addi4spn	s0,sp,64
   238ca:	8522                	c.mv	a0,s0
   238cc:	b45f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   238d0:	85a2                	c.mv	a1,s0
   238d2:	8526                	c.mv	a0,s1
   238d4:	c6df20ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   238d8:	00016797          	auipc	a5,0x16
   238dc:	c787b783          	ld	a5,-904(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   238e0:	07c1                	c.addi	a5,16
   238e2:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   238e4:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   238e6:	089c                	c.addi4spn	a5,sp,80
   238e8:	00f50463          	beq	a0,a5,238f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4fa>
   238ec:	bc5f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   238f0:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   238f2:	181c                	c.addi4spn	a5,sp,48
   238f4:	00f50463          	beq	a0,a5,238fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x506>
   238f8:	bb9f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
   238fc:	00016617          	auipc	a2,0x16
   23900:	a7c63603          	ld	a2,-1412(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   23904:	00016597          	auipc	a1,0x16
   23908:	9a45b583          	ld	a1,-1628(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   2390c:	8526                	c.mv	a0,s1
   2390e:	d53f20ef          	jal	ra,16660 <__cxa_throw@plt>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23912:	00016797          	auipc	a5,0x16
   23916:	c3e7b783          	ld	a5,-962(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   2391a:	07c1                	c.addi	a5,16
   2391c:	e01c                	c.sd	a5,0(s0)
      throw format_error("extended line number opcode exceeded its size");
   2391e:	00016617          	auipc	a2,0x16
   23922:	a5a63603          	ld	a2,-1446(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   23926:	00016597          	auipc	a1,0x16
   2392a:	9825b583          	ld	a1,-1662(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   2392e:	8522                	c.mv	a0,s0
   23930:	d31f20ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   23934:	842a                	c.mv	s0,a0
   23936:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23938:	089c                	c.addi4spn	a5,sp,80
   2393a:	00f50463          	beq	a0,a5,23942 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x54c>
   2393e:	b73f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23942:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23944:	181c                	c.addi4spn	a5,sp,48
   23946:	00f50463          	beq	a0,a5,2394e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x558>
   2394a:	b67f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string((DW_LNS)opcode));
   2394e:	8526                	c.mv	a0,s1
   23950:	b21f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   23954:	8522                	c.mv	a0,s0
   23956:	d3bf20ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2395a:	842a                	c.mv	s0,a0
   2395c:	b7dd                	c.j	23942 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x54c>
   2395e:	842a                	c.mv	s0,a0
   23960:	b7fd                	c.j	2394e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x558>
   23962:	842a                	c.mv	s0,a0
   23964:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23966:	089c                	c.addi4spn	a5,sp,80
   23968:	00f50463          	beq	a0,a5,23970 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x57a>
   2396c:	b45f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23970:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23972:	181c                	c.addi4spn	a5,sp,48
   23974:	00f50463          	beq	a0,a5,2397c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x586>
   23978:	b39f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2397c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2397e:	081c                	c.addi4spn	a5,sp,16
   23980:	00f50463          	beq	a0,a5,23988 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x592>
   23984:	b2df20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   23988:	8526                	c.mv	a0,s1
   2398a:	ae7f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2398e:	8522                	c.mv	a0,s0
   23990:	d01f20ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23994:	842a                	c.mv	s0,a0
   23996:	bfe9                	c.j	23970 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x57a>
   23998:	842a                	c.mv	s0,a0
   2399a:	b7cd                	c.j	2397c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x586>
   2399c:	842a                	c.mv	s0,a0
   2399e:	b7ed                	c.j	23988 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x592>
   239a0:	842a                	c.mv	s0,a0
   239a2:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   239a4:	089c                	c.addi4spn	a5,sp,80
   239a6:	00f50463          	beq	a0,a5,239ae <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b8>
   239aa:	b07f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   239ae:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   239b0:	181c                	c.addi4spn	a5,sp,48
   239b2:	00f50463          	beq	a0,a5,239ba <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5c4>
   239b6:	afbf20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         to_string((DW_LNE)opcode));
   239ba:	8526                	c.mv	a0,s1
   239bc:	ab5f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   239c0:	8522                	c.mv	a0,s0
   239c2:	ccff20ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   239c6:	842a                	c.mv	s0,a0
   239c8:	b7dd                	c.j	239ae <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b8>
   239ca:	842a                	c.mv	s0,a0
   239cc:	b7fd                	c.j	239ba <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5c4>
      throw format_error("extended line number opcode exceeded its size");
   239ce:	84aa                	c.mv	s1,a0
   239d0:	8522                	c.mv	a0,s0
   239d2:	a9ff20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   239d6:	8526                	c.mv	a0,s1
   239d8:	cb9f20ef          	jal	ra,16690 <_Unwind_Resume@plt>
        val |= ((uint64_t)p[i]) << (i * 8);
   239dc:	0007c583          	lbu	a1,0(a5)
    pos += sizeof(T);
   239e0:	0785                	c.addi	a5,1
   239e2:	e81c                	c.sd	a5,16(s0)
    return (T)val;
   239e4:	0ff5f913          	andi	s2,a1,255
    switch ((DW_LNE)opcode) {
   239e8:	8aae                	c.mv	s5,a1
   239ea:	470d                	c.li	a4,3
   239ec:	e2e90de3          	beq	s2,a4,23826 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x430>
   239f0:	d7276be3          	bltu	a4,s2,23766 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
   239f4:	4785                	c.li	a5,1
   239f6:	dcf90ae3          	beq	s2,a5,237ca <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3d4>
   239fa:	4789                	c.li	a5,2
   239fc:	eaf915e3          	bne	s2,a5,238a6 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b0>
      regs.address = cur->address();
   23a00:	8522                	c.mv	a0,s0
   23a02:	00016317          	auipc	t1,0x16
   23a06:	96e33303          	ld	t1,-1682(t1) # 39370 <dwarf::cursor::address()@@Base+0x1a27a>
   23a0a:	9302                	c.jalr	t1
   23a0c:	e0a8                	c.sd	a0,64(s1)
      regs.op_index = 0;
   23a0e:	0404a423          	sw	zero,72(s1)
      break;
   23a12:	b3ed                	c.j	237fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
        val |= ((uint64_t)p[i]) << (i * 8);
   23a14:	0007c903          	lbu	s2,0(a5)
    pos += sizeof(T);
   23a18:	0785                	c.addi	a5,1
   23a1a:	e81c                	c.sd	a5,16(s0)
    return (T)val;
   23a1c:	0ff97913          	andi	s2,s2,255
  if (opcode >= m->opcode_base) {
   23a20:	01d9c703          	lbu	a4,29(s3)
   23a24:	a0e976e3          	bgeu	s2,a4,23430 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a>
  } else if (opcode != 0) {
   23a28:	a80901e3          	beq	s2,zero,234aa <dwarf::line_table::iterator::step(dwarf::cursor*)+0xb4>
    switch ((DW_LNS)opcode) {
   23a2c:	46b1                	c.li	a3,12
   23a2e:	cd26e6e3          	bltu	a3,s2,236fa <dwarf::line_table::iterator::step(dwarf::cursor*)+0x304>
   23a32:	00291693          	slli	a3,s2,0x2
   23a36:	0000b617          	auipc	a2,0xb
   23a3a:	b3a60613          	addi	a2,a2,-1222 # 2e570 <typeinfo name for dwarf::expr_context+0x288>
   23a3e:	96b2                	c.add	a3,a2
   23a40:	4294                	c.lw	a3,0(a3)
   23a42:	96b2                	c.add	a3,a2
   23a44:	8682                	c.jr	a3

0000000000023a46 <dwarf::line_table::iterator::operator++()>:
line_table::iterator &line_table::iterator::operator++() {
   23a46:	7171                	c.addi16sp	sp,-176
   23a48:	f506                	c.sdsp	ra,168(sp)
   23a4a:	f122                	c.sdsp	s0,160(sp)
   23a4c:	ed26                	c.sdsp	s1,152(sp)
   23a4e:	e94a                	c.sdsp	s2,144(sp)
   23a50:	e54e                	c.sdsp	s3,136(sp)
   23a52:	842a                	c.mv	s0,a0
   23a54:	611c                	c.ld	a5,0(a0)
   23a56:	639c                	c.ld	a5,0(a5)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23a58:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   23a5c:	6784                	c.ld	s1,8(a5)
	if (_M_pi != nullptr)
   23a5e:	2a048063          	beq	s1,zero,23cfe <dwarf::line_table::iterator::operator++()+0x2b8>
    if (__is_single_threaded())
   23a62:	00016797          	auipc	a5,0x16
   23a66:	a167b783          	ld	a5,-1514(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23a6a:	0007c783          	lbu	a5,0(a5)
   23a6e:	cfad                	c.beqz	a5,23ae8 <dwarf::line_table::iterator::operator++()+0xa2>
  { *__mem += __val; }
   23a70:	589c                	c.lw	a5,48(s1)
   23a72:	2785                	c.addiw	a5,1
   23a74:	d89c                	c.sw	a5,48(s1)
  cursor cur(table->m->sec, pos);
   23a76:	07843983          	ld	s3,120(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23a7a:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   23a7c:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   23a7e:	00016797          	auipc	a5,0x16
   23a82:	9fa7b783          	ld	a5,-1542(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23a86:	0007c783          	lbu	a5,0(a5)
   23a8a:	c7ad                	c.beqz	a5,23af4 <dwarf::line_table::iterator::operator++()+0xae>
  { *__mem += __val; }
   23a8c:	589c                	c.lw	a5,48(s1)
   23a8e:	2785                	c.addiw	a5,1
   23a90:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   23a92:	00893783          	ld	a5,8(s2)
   23a96:	97ce                	c.add	a5,s3
   23a98:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   23a9a:	00016797          	auipc	a5,0x16
   23a9e:	9de7b783          	ld	a5,-1570(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23aa2:	0007c783          	lbu	a5,0(a5)
   23aa6:	cfa9                	c.beqz	a5,23b00 <dwarf::line_table::iterator::operator++()+0xba>
    _Atomic_word __result = *__mem;
   23aa8:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   23aaa:	fff5079b          	addiw	a5,a0,-1
   23aae:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23ab0:	4785                	c.li	a5,1
   23ab2:	24f51d63          	bne	a0,a5,23d0c <dwarf::line_table::iterator::operator++()+0x2c6>
	_M_dispose();
   23ab6:	609c                	c.ld	a5,0(s1)
   23ab8:	6b9c                	c.ld	a5,16(a5)
   23aba:	8526                	c.mv	a0,s1
   23abc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23abe:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23ac2:	00016797          	auipc	a5,0x16
   23ac6:	9b67b783          	ld	a5,-1610(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23aca:	0007c783          	lbu	a5,0(a5)
   23ace:	cf9d                	c.beqz	a5,23b0c <dwarf::line_table::iterator::operator++()+0xc6>
    _Atomic_word __result = *__mem;
   23ad0:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   23ad2:	fff5079b          	addiw	a5,a0,-1
   23ad6:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   23ad8:	4785                	c.li	a5,1
   23ada:	22f51963          	bne	a0,a5,23d0c <dwarf::line_table::iterator::operator++()+0x2c6>
	    _M_destroy();
   23ade:	609c                	c.ld	a5,0(s1)
   23ae0:	6f9c                	c.ld	a5,24(a5)
   23ae2:	8526                	c.mv	a0,s1
   23ae4:	9782                	c.jalr	a5
   23ae6:	a41d                	c.j	23d0c <dwarf::line_table::iterator::operator++()+0x2c6>
      __atomic_add(__mem, __val);
   23ae8:	4585                	c.li	a1,1
   23aea:	03048513          	addi	a0,s1,48
   23aee:	813f20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   23af2:	b751                	c.j	23a76 <dwarf::line_table::iterator::operator++()+0x30>
   23af4:	4585                	c.li	a1,1
   23af6:	03048513          	addi	a0,s1,48
   23afa:	807f20ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   23afe:	bf51                	c.j	23a92 <dwarf::line_table::iterator::operator++()+0x4c>
      return __exchange_and_add(__mem, __val);
   23b00:	55fd                	c.li	a1,-1
   23b02:	03048513          	addi	a0,s1,48
   23b06:	82bf20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23b0a:	b75d                	c.j	23ab0 <dwarf::line_table::iterator::operator++()+0x6a>
   23b0c:	55fd                	c.li	a1,-1
   23b0e:	03448513          	addi	a0,s1,52
   23b12:	81ff20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23b16:	b7c9                	c.j	23ad8 <dwarf::line_table::iterator::operator++()+0x92>
  if (stepped && !output)
   23b18:	20048d63          	beq	s1,zero,23d32 <dwarf::line_table::iterator::operator++()+0x2ec>
   23b1c:	c935                	c.beqz	a0,23b90 <dwarf::line_table::iterator::operator++()+0x14a>
  if (stepped && cur.end()) {
   23b1e:	00d7e763          	bltu	a5,a3,23b2c <dwarf::line_table::iterator::operator++()+0xe6>
      { return _M_ptr; }
   23b22:	6014                	c.ld	a3,0(s0)
   23b24:	6294                	c.ld	a3,0(a3)
    table->m->file_names_complete = true;
   23b26:	4605                	c.li	a2,1
   23b28:	06c68823          	sb	a2,112(a3)
    if (entry.file_index < table->m->file_names.size())
   23b2c:	02046583          	lwu	a1,32(s0)
   23b30:	6014                	c.ld	a3,0(s0)
   23b32:	6294                	c.ld	a3,0(a3)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23b34:	6ab0                	c.ld	a2,80(a3)
   23b36:	6eb4                	c.ld	a3,88(a3)
   23b38:	8e91                	c.sub	a3,a2
   23b3a:	8691                	c.srai	a3,0x4
   23b3c:	0000a517          	auipc	a0,0xa
   23b40:	a6453503          	ld	a0,-1436(a0) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23b44:	02a686b3          	mul	a3,a3,a0
   23b48:	08d5f163          	bgeu	a1,a3,23bca <dwarf::line_table::iterator::operator++()+0x184>
	return *(this->_M_impl._M_start + __n);
   23b4c:	00159693          	slli	a3,a1,0x1
   23b50:	96ae                	c.add	a3,a1
   23b52:	0692                	c.slli	a3,0x4
   23b54:	9636                	c.add	a2,a3
      entry.file = &table->m->file_names[entry.file_index];
   23b56:	ec10                	c.sd	a2,24(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   23b58:	6718                	c.ld	a4,8(a4)
   23b5a:	8f99                	c.sub	a5,a4
  pos = cur.get_section_offset();
   23b5c:	fc3c                	c.sd	a5,120(s0)
	if (_M_pi != nullptr)
   23b5e:	74c6                	c.ldsp	s1,112(sp)
   23b60:	c085                	c.beqz	s1,23b80 <dwarf::line_table::iterator::operator++()+0x13a>
    if (__is_single_threaded())
   23b62:	00016797          	auipc	a5,0x16
   23b66:	9167b783          	ld	a5,-1770(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23b6a:	0007c783          	lbu	a5,0(a5)
   23b6e:	0e078a63          	beq	a5,zero,23c62 <dwarf::line_table::iterator::operator++()+0x21c>
    _Atomic_word __result = *__mem;
   23b72:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   23b74:	fff5079b          	addiw	a5,a0,-1
   23b78:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23b7a:	4785                	c.li	a5,1
   23b7c:	0ef50963          	beq	a0,a5,23c6e <dwarf::line_table::iterator::operator++()+0x228>
}
   23b80:	8522                	c.mv	a0,s0
   23b82:	70aa                	c.ldsp	ra,168(sp)
   23b84:	740a                	c.ldsp	s0,160(sp)
   23b86:	64ea                	c.ldsp	s1,152(sp)
   23b88:	694a                	c.ldsp	s2,144(sp)
   23b8a:	69aa                	c.ldsp	s3,136(sp)
   23b8c:	614d                	c.addi16sp	sp,176
   23b8e:	8082                	c.jr	ra
    throw format_error("unexpected end of line table");
   23b90:	4541                	c.li	a0,16
   23b92:	83ff20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23b96:	84aa                	c.mv	s1,a0
   23b98:	0000b597          	auipc	a1,0xb
   23b9c:	96058593          	addi	a1,a1,-1696 # 2e4f8 <typeinfo name for dwarf::expr_context+0x210>
   23ba0:	b71f20ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   23ba4:	00016797          	auipc	a5,0x16
   23ba8:	9ac7b783          	ld	a5,-1620(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   23bac:	07c1                	c.addi	a5,16
   23bae:	e09c                	c.sd	a5,0(s1)
   23bb0:	00015617          	auipc	a2,0x15
   23bb4:	7c863603          	ld	a2,1992(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   23bb8:	00015597          	auipc	a1,0x15
   23bbc:	6f05b583          	ld	a1,1776(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   23bc0:	8526                	c.mv	a0,s1
   23bc2:	a9ff20ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   23bc6:	842a                	c.mv	s0,a0
   23bc8:	a0f5                	c.j	23cb4 <dwarf::line_table::iterator::operator++()+0x26e>
                         " in line table");
   23bca:	4541                	c.li	a0,16
   23bcc:	805f20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23bd0:	84aa                	c.mv	s1,a0
      throw format_error("bad file index " + std::to_string(entry.file_index) +
   23bd2:	500c                	c.lw	a1,32(s0)
   23bd4:	0020                	c.addi4spn	s0,sp,8
   23bd6:	8522                	c.mv	a0,s0
   23bd8:	00016317          	auipc	t1,0x16
   23bdc:	91033303          	ld	t1,-1776(t1) # 394e8 <std::__cxx11::to_string(unsigned int)@@Base+0x150c6>
   23be0:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   23be2:	0000b617          	auipc	a2,0xb
   23be6:	93660613          	addi	a2,a2,-1738 # 2e518 <typeinfo name for dwarf::expr_context+0x230>
   23bea:	4581                	c.li	a1,0
   23bec:	8522                	c.mv	a0,s0
   23bee:	f52f20ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23bf2:	85aa                	c.mv	a1,a0
   23bf4:	1020                	c.addi4spn	s0,sp,40
   23bf6:	8522                	c.mv	a0,s0
   23bf8:	819f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   23bfc:	0000b597          	auipc	a1,0xb
   23c00:	92c58593          	addi	a1,a1,-1748 # 2e528 <typeinfo name for dwarf::expr_context+0x240>
   23c04:	8522                	c.mv	a0,s0
   23c06:	b3bf20ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   23c0a:	85aa                	c.mv	a1,a0
   23c0c:	00a0                	c.addi4spn	s0,sp,72
   23c0e:	8522                	c.mv	a0,s0
   23c10:	801f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   23c14:	85a2                	c.mv	a1,s0
   23c16:	8526                	c.mv	a0,s1
   23c18:	929f20ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   23c1c:	00016797          	auipc	a5,0x16
   23c20:	9347b783          	ld	a5,-1740(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   23c24:	07c1                	c.addi	a5,16
   23c26:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   23c28:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   23c2a:	08bc                	c.addi4spn	a5,sp,88
   23c2c:	00f50463          	beq	a0,a5,23c34 <dwarf::line_table::iterator::operator++()+0x1ee>
   23c30:	881f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c34:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   23c36:	183c                	c.addi4spn	a5,sp,56
   23c38:	00f50463          	beq	a0,a5,23c40 <dwarf::line_table::iterator::operator++()+0x1fa>
   23c3c:	875f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23c40:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   23c42:	083c                	c.addi4spn	a5,sp,24
   23c44:	00f50463          	beq	a0,a5,23c4c <dwarf::line_table::iterator::operator++()+0x206>
   23c48:	869f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         " in line table");
   23c4c:	00015617          	auipc	a2,0x15
   23c50:	72c63603          	ld	a2,1836(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   23c54:	00015597          	auipc	a1,0x15
   23c58:	6545b583          	ld	a1,1620(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   23c5c:	8526                	c.mv	a0,s1
   23c5e:	a03f20ef          	jal	ra,16660 <__cxa_throw@plt>
      return __exchange_and_add(__mem, __val);
   23c62:	55fd                	c.li	a1,-1
   23c64:	03048513          	addi	a0,s1,48
   23c68:	ec8f20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23c6c:	b739                	c.j	23b7a <dwarf::line_table::iterator::operator++()+0x134>
	_M_dispose();
   23c6e:	609c                	c.ld	a5,0(s1)
   23c70:	6b9c                	c.ld	a5,16(a5)
   23c72:	8526                	c.mv	a0,s1
   23c74:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23c76:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23c7a:	00015797          	auipc	a5,0x15
   23c7e:	7fe7b783          	ld	a5,2046(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23c82:	0007c783          	lbu	a5,0(a5)
   23c86:	cf89                	c.beqz	a5,23ca0 <dwarf::line_table::iterator::operator++()+0x25a>
    _Atomic_word __result = *__mem;
   23c88:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   23c8a:	fff5079b          	addiw	a5,a0,-1
   23c8e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   23c90:	4785                	c.li	a5,1
   23c92:	eef517e3          	bne	a0,a5,23b80 <dwarf::line_table::iterator::operator++()+0x13a>
	    _M_destroy();
   23c96:	609c                	c.ld	a5,0(s1)
   23c98:	6f9c                	c.ld	a5,24(a5)
   23c9a:	8526                	c.mv	a0,s1
   23c9c:	9782                	c.jalr	a5
  return *this;
   23c9e:	b5cd                	c.j	23b80 <dwarf::line_table::iterator::operator++()+0x13a>
      return __exchange_and_add(__mem, __val);
   23ca0:	55fd                	c.li	a1,-1
   23ca2:	03448513          	addi	a0,s1,52
   23ca6:	e8af20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23caa:	b7dd                	c.j	23c90 <dwarf::line_table::iterator::operator++()+0x24a>
    throw format_error("unexpected end of line table");
   23cac:	842a                	c.mv	s0,a0
   23cae:	8526                	c.mv	a0,s1
   23cb0:	fc0f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   23cb4:	7546                	c.ldsp	a0,112(sp)
   23cb6:	c511                	c.beqz	a0,23cc2 <dwarf::line_table::iterator::operator++()+0x27c>
	  _M_pi->_M_release();
   23cb8:	00015317          	auipc	t1,0x15
   23cbc:	70833303          	ld	t1,1800(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   23cc0:	9302                	c.jalr	t1
   23cc2:	8522                	c.mv	a0,s0
   23cc4:	9cdf20ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23cc8:	842a                	c.mv	s0,a0
   23cca:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   23ccc:	08bc                	c.addi4spn	a5,sp,88
   23cce:	00f50463          	beq	a0,a5,23cd6 <dwarf::line_table::iterator::operator++()+0x290>
   23cd2:	fdef20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23cd6:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   23cd8:	183c                	c.addi4spn	a5,sp,56
   23cda:	00f50463          	beq	a0,a5,23ce2 <dwarf::line_table::iterator::operator++()+0x29c>
   23cde:	fd2f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23ce2:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   23ce4:	083c                	c.addi4spn	a5,sp,24
   23ce6:	00f50463          	beq	a0,a5,23cee <dwarf::line_table::iterator::operator++()+0x2a8>
   23cea:	fc6f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         " in line table");
   23cee:	8526                	c.mv	a0,s1
   23cf0:	f80f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   23cf4:	b7c1                	c.j	23cb4 <dwarf::line_table::iterator::operator++()+0x26e>
      { return _M_dataplus._M_p; }
   23cf6:	842a                	c.mv	s0,a0
   23cf8:	bff9                	c.j	23cd6 <dwarf::line_table::iterator::operator++()+0x290>
   23cfa:	842a                	c.mv	s0,a0
   23cfc:	b7dd                	c.j	23ce2 <dwarf::line_table::iterator::operator++()+0x29c>
  cursor cur(table->m->sec, pos);
   23cfe:	7d38                	c.ld	a4,120(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23d00:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   23d02:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   23d04:	00893783          	ld	a5,8(s2)
   23d08:	97ba                	c.add	a5,a4
   23d0a:	fcbe                	c.sdsp	a5,120(sp)
line_table::iterator &line_table::iterator::operator++() {
   23d0c:	4501                	c.li	a0,0
   23d0e:	4481                	c.li	s1,0
    stepped = true;
   23d10:	4905                	c.li	s2,1
    output = step(&cur);
   23d12:	06810993          	addi	s3,sp,104
  bool end() const { return pos >= sec->end; }
   23d16:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   23d18:	7726                	c.ldsp	a4,104(sp)
   23d1a:	6b14                	c.ld	a3,16(a4)
  while (!cur.end() && !output) {
   23d1c:	ded7fee3          	bgeu	a5,a3,23b18 <dwarf::line_table::iterator::operator++()+0xd2>
   23d20:	e519                	c.bnez	a0,23d2e <dwarf::line_table::iterator::operator++()+0x2e8>
    stepped = true;
   23d22:	84ca                	c.mv	s1,s2
    output = step(&cur);
   23d24:	85ce                	c.mv	a1,s3
   23d26:	8522                	c.mv	a0,s0
   23d28:	eceff0ef          	jal	ra,233f6 <dwarf::line_table::iterator::step(dwarf::cursor*)>
   23d2c:	b7ed                	c.j	23d16 <dwarf::line_table::iterator::operator++()+0x2d0>
  if (stepped && !output)
   23d2e:	de049fe3          	bne	s1,zero,23b2c <dwarf::line_table::iterator::operator++()+0xe6>
  if (output) {
   23d32:	e20503e3          	beq	a0,zero,23b58 <dwarf::line_table::iterator::operator++()+0x112>
   23d36:	bbdd                	c.j	23b2c <dwarf::line_table::iterator::operator++()+0xe6>

0000000000023d38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>:
    : table(table), pos(pos) {
   23d38:	e10c                	c.sd	a1,0(a0)
   23d3a:	fd30                	c.sd	a2,120(a0)
  if (table) {
   23d3c:	c19d                	c.beqz	a1,23d62 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)+0x2a>
line_table::iterator::iterator(const line_table *table, section_offset pos)
   23d3e:	1141                	c.addi	sp,-16
   23d40:	e406                	c.sdsp	ra,8(sp)
   23d42:	e022                	c.sdsp	s0,0(sp)
   23d44:	842a                	c.mv	s0,a0
    regs.reset(table->m->default_is_stmt);
   23d46:	619c                	c.ld	a5,0(a1)
   23d48:	01a7c583          	lbu	a1,26(a5)
   23d4c:	04050513          	addi	a0,a0,64
   23d50:	d56fe0ef          	jal	ra,222a6 <dwarf::line_table::entry::reset(bool)>
    ++(*this);
   23d54:	8522                	c.mv	a0,s0
   23d56:	cf1ff0ef          	jal	ra,23a46 <dwarf::line_table::iterator::operator++()>
}
   23d5a:	60a2                	c.ldsp	ra,8(sp)
   23d5c:	6402                	c.ldsp	s0,0(sp)
   23d5e:	0141                	c.addi	sp,16
   23d60:	8082                	c.jr	ra
   23d62:	8082                	c.jr	ra

0000000000023d64 <dwarf::line_table::begin() const>:
line_table::iterator line_table::begin() const {
   23d64:	1141                	c.addi	sp,-16
   23d66:	e406                	c.sdsp	ra,8(sp)
   23d68:	e022                	c.sdsp	s0,0(sp)
   23d6a:	842a                	c.mv	s0,a0
      { return _M_ptr != nullptr; }
   23d6c:	619c                	c.ld	a5,0(a1)
  if (!valid())
   23d6e:	cb89                	c.beqz	a5,23d80 <dwarf::line_table::begin() const+0x1c>
  return iterator(this, m->program_offset);
   23d70:	6b90                	c.ld	a2,16(a5)
   23d72:	fc7ff0ef          	jal	ra,23d38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   23d76:	8522                	c.mv	a0,s0
   23d78:	60a2                	c.ldsp	ra,8(sp)
   23d7a:	6402                	c.ldsp	s0,0(sp)
   23d7c:	0141                	c.addi	sp,16
   23d7e:	8082                	c.jr	ra
    return iterator(nullptr, 0);
   23d80:	4601                	c.li	a2,0
   23d82:	4581                	c.li	a1,0
   23d84:	fb5ff0ef          	jal	ra,23d38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   23d88:	b7fd                	c.j	23d76 <dwarf::line_table::begin() const+0x12>

0000000000023d8a <dwarf::line_table::end() const>:
line_table::iterator line_table::end() const {
   23d8a:	1141                	c.addi	sp,-16
   23d8c:	e406                	c.sdsp	ra,8(sp)
   23d8e:	e022                	c.sdsp	s0,0(sp)
   23d90:	842a                	c.mv	s0,a0
   23d92:	619c                	c.ld	a5,0(a1)
  if (!valid())
   23d94:	cf81                	c.beqz	a5,23dac <dwarf::line_table::end() const+0x22>
      { return _M_ptr; }
   23d96:	639c                	c.ld	a5,0(a5)
  size_t size() const { return end - begin; }
   23d98:	6b90                	c.ld	a2,16(a5)
   23d9a:	679c                	c.ld	a5,8(a5)
  return iterator(this, m->sec->size());
   23d9c:	8e1d                	c.sub	a2,a5
   23d9e:	f9bff0ef          	jal	ra,23d38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   23da2:	8522                	c.mv	a0,s0
   23da4:	60a2                	c.ldsp	ra,8(sp)
   23da6:	6402                	c.ldsp	s0,0(sp)
   23da8:	0141                	c.addi	sp,16
   23daa:	8082                	c.jr	ra
    return iterator(nullptr, 0);
   23dac:	4601                	c.li	a2,0
   23dae:	4581                	c.li	a1,0
   23db0:	f89ff0ef          	jal	ra,23d38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   23db4:	b7fd                	c.j	23da2 <dwarf::line_table::end() const+0x18>

0000000000023db6 <dwarf::line_table::find_address(unsigned long) const>:
line_table::iterator line_table::find_address(taddr addr) const {
   23db6:	7121                	c.addi16sp	sp,-448
   23db8:	ff06                	c.sdsp	ra,440(sp)
   23dba:	fb22                	c.sdsp	s0,432(sp)
   23dbc:	f726                	c.sdsp	s1,424(sp)
   23dbe:	f34a                	c.sdsp	s2,416(sp)
   23dc0:	ef4e                	c.sdsp	s3,408(sp)
   23dc2:	eb52                	c.sdsp	s4,400(sp)
   23dc4:	e756                	c.sdsp	s5,392(sp)
   23dc6:	842a                	c.mv	s0,a0
   23dc8:	84ae                	c.mv	s1,a1
   23dca:	8932                	c.mv	s2,a2
  iterator prev = begin(), e = end();
   23dcc:	f99ff0ef          	jal	ra,23d64 <dwarf::line_table::begin() const>
   23dd0:	85a6                	c.mv	a1,s1
   23dd2:	0208                	c.addi4spn	a0,sp,256
   23dd4:	fb7ff0ef          	jal	ra,23d8a <dwarf::line_table::end() const>
   23dd8:	6a12                	c.ldsp	s4,256(sp)
   23dda:	79f6                	c.ldsp	s3,376(sp)
    return o.pos == pos && o.table == table;
   23ddc:	7c3c                	c.ld	a5,120(s0)
   23dde:	03378b63          	beq	a5,s3,23e14 <dwarf::line_table::find_address(unsigned long) const+0x5e>
  iterator it = prev;
   23de2:	87a2                	c.mv	a5,s0
   23de4:	0118                	c.addi4spn	a4,sp,128
   23de6:	08040813          	addi	a6,s0,128
   23dea:	6388                	c.ld	a0,0(a5)
   23dec:	678c                	c.ld	a1,8(a5)
   23dee:	6b90                	c.ld	a2,16(a5)
   23df0:	6f94                	c.ld	a3,24(a5)
   23df2:	e308                	c.sd	a0,0(a4)
   23df4:	e70c                	c.sd	a1,8(a4)
   23df6:	eb10                	c.sd	a2,16(a4)
   23df8:	ef14                	c.sd	a3,24(a4)
   23dfa:	02078793          	addi	a5,a5,32
   23dfe:	02070713          	addi	a4,a4,32
   23e02:	ff0794e3          	bne	a5,a6,23dea <dwarf::line_table::find_address(unsigned long) const+0x34>
  for (++it; it != e; prev = it++) {
   23e06:	0108                	c.addi4spn	a0,sp,128
   23e08:	c3fff0ef          	jal	ra,23a46 <dwarf::line_table::iterator::operator++()>
    iterator tmp(*this);
   23e0c:	10010a93          	addi	s5,sp,256
    ++(*this);
   23e10:	0104                	c.addi4spn	s1,sp,128
   23e12:	a881                	c.j	23e62 <dwarf::line_table::find_address(unsigned long) const+0xac>
    return o.pos == pos && o.table == table;
   23e14:	601c                	c.ld	a5,0(s0)
   23e16:	fcfa16e3          	bne	s4,a5,23de2 <dwarf::line_table::find_address(unsigned long) const+0x2c>
   23e1a:	a071                	c.j	23ea6 <dwarf::line_table::find_address(unsigned long) const+0xf0>
    iterator tmp(*this);
   23e1c:	011c                	c.addi4spn	a5,sp,128
   23e1e:	870a                	c.mv	a4,sp
   23e20:	6388                	c.ld	a0,0(a5)
   23e22:	678c                	c.ld	a1,8(a5)
   23e24:	6b90                	c.ld	a2,16(a5)
   23e26:	6f94                	c.ld	a3,24(a5)
   23e28:	e308                	c.sd	a0,0(a4)
   23e2a:	e70c                	c.sd	a1,8(a4)
   23e2c:	eb10                	c.sd	a2,16(a4)
   23e2e:	ef14                	c.sd	a3,24(a4)
   23e30:	02078793          	addi	a5,a5,32
   23e34:	02070713          	addi	a4,a4,32
   23e38:	ff5794e3          	bne	a5,s5,23e20 <dwarf::line_table::find_address(unsigned long) const+0x6a>
    ++(*this);
   23e3c:	8526                	c.mv	a0,s1
   23e3e:	c09ff0ef          	jal	ra,23a46 <dwarf::line_table::iterator::operator++()>
   23e42:	878a                	c.mv	a5,sp
   23e44:	8722                	c.mv	a4,s0
   23e46:	6388                	c.ld	a0,0(a5)
   23e48:	678c                	c.ld	a1,8(a5)
   23e4a:	6b90                	c.ld	a2,16(a5)
   23e4c:	6f94                	c.ld	a3,24(a5)
   23e4e:	e308                	c.sd	a0,0(a4)
   23e50:	e70c                	c.sd	a1,8(a4)
   23e52:	eb10                	c.sd	a2,16(a4)
   23e54:	ef14                	c.sd	a3,24(a4)
   23e56:	02078793          	addi	a5,a5,32
   23e5a:	02070713          	addi	a4,a4,32
   23e5e:	fe9794e3          	bne	a5,s1,23e46 <dwarf::line_table::find_address(unsigned long) const+0x90>
    return o.pos == pos && o.table == table;
   23e62:	77ee                	c.ldsp	a5,248(sp)
   23e64:	01378c63          	beq	a5,s3,23e7c <dwarf::line_table::find_address(unsigned long) const+0xc6>
    if (prev->address <= addr && it->address > addr && !prev->end_sequence)
   23e68:	641c                	c.ld	a5,8(s0)
   23e6a:	faf969e3          	bltu	s2,a5,23e1c <dwarf::line_table::find_address(unsigned long) const+0x66>
   23e6e:	67aa                	c.ldsp	a5,136(sp)
   23e70:	faf976e3          	bgeu	s2,a5,23e1c <dwarf::line_table::find_address(unsigned long) const+0x66>
   23e74:	02e44783          	lbu	a5,46(s0)
   23e78:	f3d5                	c.bnez	a5,23e1c <dwarf::line_table::find_address(unsigned long) const+0x66>
   23e7a:	a035                	c.j	23ea6 <dwarf::line_table::find_address(unsigned long) const+0xf0>
   23e7c:	678a                	c.ldsp	a5,128(sp)
   23e7e:	fefa15e3          	bne	s4,a5,23e68 <dwarf::line_table::find_address(unsigned long) const+0xb2>
  prev = e;
   23e82:	021c                	c.addi4spn	a5,sp,256
   23e84:	8722                	c.mv	a4,s0
   23e86:	18010813          	addi	a6,sp,384
   23e8a:	6388                	c.ld	a0,0(a5)
   23e8c:	678c                	c.ld	a1,8(a5)
   23e8e:	6b90                	c.ld	a2,16(a5)
   23e90:	6f94                	c.ld	a3,24(a5)
   23e92:	e308                	c.sd	a0,0(a4)
   23e94:	e70c                	c.sd	a1,8(a4)
   23e96:	eb10                	c.sd	a2,16(a4)
   23e98:	ef14                	c.sd	a3,24(a4)
   23e9a:	02078793          	addi	a5,a5,32
   23e9e:	02070713          	addi	a4,a4,32
   23ea2:	ff0794e3          	bne	a5,a6,23e8a <dwarf::line_table::find_address(unsigned long) const+0xd4>
}
   23ea6:	8522                	c.mv	a0,s0
   23ea8:	70fa                	c.ldsp	ra,440(sp)
   23eaa:	745a                	c.ldsp	s0,432(sp)
   23eac:	74ba                	c.ldsp	s1,424(sp)
   23eae:	791a                	c.ldsp	s2,416(sp)
   23eb0:	69fa                	c.ldsp	s3,408(sp)
   23eb2:	6a5a                	c.ldsp	s4,400(sp)
   23eb4:	6aba                	c.ldsp	s5,392(sp)
   23eb6:	6139                	c.addi16sp	sp,448
   23eb8:	8082                	c.jr	ra

0000000000023eba <dwarf::line_table::get_file(unsigned int) const>:
const line_table::file *line_table::get_file(unsigned index) const {
   23eba:	7165                	c.addi16sp	sp,-400
   23ebc:	e706                	c.sdsp	ra,392(sp)
   23ebe:	e322                	c.sdsp	s0,384(sp)
   23ec0:	fea6                	c.sdsp	s1,376(sp)
   23ec2:	faca                	c.sdsp	s2,368(sp)
   23ec4:	f6ce                	c.sdsp	s3,360(sp)
   23ec6:	842a                	c.mv	s0,a0
  if (index >= m->file_names.size()) {
   23ec8:	02059493          	slli	s1,a1,0x20
   23ecc:	9081                	c.srli	s1,0x20
   23ece:	6118                	c.ld	a4,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23ed0:	6f3c                	c.ld	a5,88(a4)
   23ed2:	6b34                	c.ld	a3,80(a4)
   23ed4:	8f95                	c.sub	a5,a3
   23ed6:	8791                	c.srai	a5,0x4
   23ed8:	00009697          	auipc	a3,0x9
   23edc:	6c86b683          	ld	a3,1736(a3) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23ee0:	02d787b3          	mul	a5,a5,a3
   23ee4:	06f4ee63          	bltu	s1,a5,23f60 <dwarf::line_table::get_file(unsigned int) const+0xa6>
   23ee8:	892e                	c.mv	s2,a1
    if (!m->file_names_complete) {
   23eea:	07074783          	lbu	a5,112(a4)
   23eee:	c795                	c.beqz	a5,23f1a <dwarf::line_table::get_file(unsigned int) const+0x60>
                         std::to_string(m->file_names.size()));
   23ef0:	4541                	c.li	a0,16
   23ef2:	cdef20ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   23ef6:	84aa                	c.mv	s1,a0
      throw out_of_range("file name index " + std::to_string(index) +
   23ef8:	85ca                	c.mv	a1,s2
   23efa:	890a                	c.mv	s2,sp
   23efc:	854a                	c.mv	a0,s2
   23efe:	00015317          	auipc	t1,0x15
   23f02:	5ea33303          	ld	t1,1514(t1) # 394e8 <std::__cxx11::to_string(unsigned int)@@Base+0x150c6>
   23f06:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   23f08:	0000a617          	auipc	a2,0xa
   23f0c:	63060613          	addi	a2,a2,1584 # 2e538 <typeinfo name for dwarf::expr_context+0x250>
   23f10:	4581                	c.li	a1,0
   23f12:	854a                	c.mv	a0,s2
   23f14:	c2cf20ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23f18:	a095                	c.j	23f7c <dwarf::line_table::get_file(unsigned int) const+0xc2>
      for (auto &ent : *this)
   23f1a:	85aa                	c.mv	a1,a0
   23f1c:	1088                	c.addi4spn	a0,sp,96
   23f1e:	e47ff0ef          	jal	ra,23d64 <dwarf::line_table::begin() const>
   23f22:	85a2                	c.mv	a1,s0
   23f24:	1188                	c.addi4spn	a0,sp,224
   23f26:	e65ff0ef          	jal	ra,23d8a <dwarf::line_table::end() const>
   23f2a:	06010993          	addi	s3,sp,96
   23f2e:	a021                	c.j	23f36 <dwarf::line_table::get_file(unsigned int) const+0x7c>
   23f30:	854e                	c.mv	a0,s3
   23f32:	b15ff0ef          	jal	ra,23a46 <dwarf::line_table::iterator::operator++()>
   23f36:	676e                	c.ldsp	a4,216(sp)
   23f38:	67f6                	c.ldsp	a5,344(sp)
   23f3a:	fef71be3          	bne	a4,a5,23f30 <dwarf::line_table::get_file(unsigned int) const+0x76>
   23f3e:	770e                	c.ldsp	a4,224(sp)
   23f40:	7786                	c.ldsp	a5,96(sp)
   23f42:	fef717e3          	bne	a4,a5,23f30 <dwarf::line_table::get_file(unsigned int) const+0x76>
   23f46:	6018                	c.ld	a4,0(s0)
   23f48:	6f3c                	c.ld	a5,88(a4)
   23f4a:	6b38                	c.ld	a4,80(a4)
   23f4c:	8f99                	c.sub	a5,a4
   23f4e:	8791                	c.srai	a5,0x4
   23f50:	00009717          	auipc	a4,0x9
   23f54:	65073703          	ld	a4,1616(a4) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23f58:	02e787b3          	mul	a5,a5,a4
    if (index >= m->file_names.size())
   23f5c:	f8f4fae3          	bgeu	s1,a5,23ef0 <dwarf::line_table::get_file(unsigned int) const+0x36>
	return *(this->_M_impl._M_start + __n);
   23f60:	6018                	c.ld	a4,0(s0)
   23f62:	00149793          	slli	a5,s1,0x1
   23f66:	97a6                	c.add	a5,s1
   23f68:	0792                	c.slli	a5,0x4
   23f6a:	6b28                	c.ld	a0,80(a4)
   23f6c:	953e                	c.add	a0,a5
}
   23f6e:	60ba                	c.ldsp	ra,392(sp)
   23f70:	641a                	c.ldsp	s0,384(sp)
   23f72:	74f6                	c.ldsp	s1,376(sp)
   23f74:	7956                	c.ldsp	s2,368(sp)
   23f76:	79b6                	c.ldsp	s3,360(sp)
   23f78:	6159                	c.addi16sp	sp,400
   23f7a:	8082                	c.jr	ra
   23f7c:	85aa                	c.mv	a1,a0
   23f7e:	02010913          	addi	s2,sp,32
   23f82:	854a                	c.mv	a0,s2
   23f84:	c8cf20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   23f88:	0000a597          	auipc	a1,0xa
   23f8c:	5c858593          	addi	a1,a1,1480 # 2e550 <typeinfo name for dwarf::expr_context+0x268>
   23f90:	854a                	c.mv	a0,s2
   23f92:	faef20ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   23f96:	85aa                	c.mv	a1,a0
   23f98:	0088                	c.addi4spn	a0,sp,64
   23f9a:	c76f20ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   23f9e:	6018                	c.ld	a4,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23fa0:	6f3c                	c.ld	a5,88(a4)
   23fa2:	6b38                	c.ld	a4,80(a4)
   23fa4:	8f99                	c.sub	a5,a4
   23fa6:	8791                	c.srai	a5,0x4
                         std::to_string(m->file_names.size()));
   23fa8:	00009597          	auipc	a1,0x9
   23fac:	5f85b583          	ld	a1,1528(a1) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23fb0:	02b785b3          	mul	a1,a5,a1
   23fb4:	1088                	c.addi4spn	a0,sp,96
   23fb6:	00015317          	auipc	t1,0x15
   23fba:	34233303          	ld	t1,834(t1) # 392f8 <std::__cxx11::to_string(unsigned long)@@Base+0x15124>
   23fbe:	9302                	c.jalr	t1
                         " exceeds file table size of " +
   23fc0:	1090                	c.addi4spn	a2,sp,96
   23fc2:	008c                	c.addi4spn	a1,sp,64
   23fc4:	1188                	c.addi4spn	a0,sp,224
   23fc6:	00015317          	auipc	t1,0x15
   23fca:	3f233303          	ld	t1,1010(t1) # 393b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14f4c>
   23fce:	9302                	c.jalr	t1
      throw out_of_range("file name index " + std::to_string(index) +
   23fd0:	118c                	c.addi4spn	a1,sp,224
   23fd2:	8526                	c.mv	a0,s1
   23fd4:	e1cf20ef          	jal	ra,165f0 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   23fd8:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   23fda:	199c                	c.addi4spn	a5,sp,240
   23fdc:	00f50463          	beq	a0,a5,23fe4 <dwarf::line_table::get_file(unsigned int) const+0x12a>
   23fe0:	cd0f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23fe4:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   23fe6:	189c                	c.addi4spn	a5,sp,112
   23fe8:	00f50463          	beq	a0,a5,23ff0 <dwarf::line_table::get_file(unsigned int) const+0x136>
   23fec:	cc4f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23ff0:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23ff2:	089c                	c.addi4spn	a5,sp,80
   23ff4:	00f50463          	beq	a0,a5,23ffc <dwarf::line_table::get_file(unsigned int) const+0x142>
   23ff8:	cb8f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23ffc:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23ffe:	181c                	c.addi4spn	a5,sp,48
   24000:	00f50463          	beq	a0,a5,24008 <dwarf::line_table::get_file(unsigned int) const+0x14e>
   24004:	cacf20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24008:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2400a:	081c                	c.addi4spn	a5,sp,16
   2400c:	00f50463          	beq	a0,a5,24014 <dwarf::line_table::get_file(unsigned int) const+0x15a>
   24010:	ca0f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
                         std::to_string(m->file_names.size()));
   24014:	00015617          	auipc	a2,0x15
   24018:	4a463603          	ld	a2,1188(a2) # 394b8 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   2401c:	00015597          	auipc	a1,0x15
   24020:	54c5b583          	ld	a1,1356(a1) # 39568 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   24024:	8526                	c.mv	a0,s1
   24026:	e3af20ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2402a:	842a                	c.mv	s0,a0
   2402c:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   2402e:	199c                	c.addi4spn	a5,sp,240
   24030:	00f50463          	beq	a0,a5,24038 <dwarf::line_table::get_file(unsigned int) const+0x17e>
   24034:	c7cf20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24038:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   2403a:	189c                	c.addi4spn	a5,sp,112
   2403c:	00f50463          	beq	a0,a5,24044 <dwarf::line_table::get_file(unsigned int) const+0x18a>
   24040:	c70f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24044:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   24046:	089c                	c.addi4spn	a5,sp,80
   24048:	00f50463          	beq	a0,a5,24050 <dwarf::line_table::get_file(unsigned int) const+0x196>
   2404c:	c64f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   24050:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   24052:	181c                	c.addi4spn	a5,sp,48
   24054:	00f50463          	beq	a0,a5,2405c <dwarf::line_table::get_file(unsigned int) const+0x1a2>
   24058:	c58f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2405c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2405e:	081c                	c.addi4spn	a5,sp,16
   24060:	00f50463          	beq	a0,a5,24068 <dwarf::line_table::get_file(unsigned int) const+0x1ae>
   24064:	c4cf20ef          	jal	ra,164b0 <operator delete(void*)@plt>
   24068:	8526                	c.mv	a0,s1
   2406a:	c06f20ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2406e:	8522                	c.mv	a0,s0
   24070:	e20f20ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   24074:	842a                	c.mv	s0,a0
   24076:	b7c9                	c.j	24038 <dwarf::line_table::get_file(unsigned int) const+0x17e>
   24078:	842a                	c.mv	s0,a0
   2407a:	b7e9                	c.j	24044 <dwarf::line_table::get_file(unsigned int) const+0x18a>
   2407c:	842a                	c.mv	s0,a0
   2407e:	bfc9                	c.j	24050 <dwarf::line_table::get_file(unsigned int) const+0x196>
   24080:	842a                	c.mv	s0,a0
   24082:	bfe9                	c.j	2405c <dwarf::line_table::get_file(unsigned int) const+0x1a2>

0000000000024084 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   24084:	8082                	c.jr	ra

0000000000024086 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   24086:	1141                	c.addi	sp,-16
   24088:	e406                	c.sdsp	ra,8(sp)
   2408a:	c26f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2408e:	60a2                	c.ldsp	ra,8(sp)
   24090:	0141                	c.addi	sp,16
   24092:	8082                	c.jr	ra

0000000000024094 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   24094:	1141                	c.addi	sp,-16
   24096:	e406                	c.sdsp	ra,8(sp)
   24098:	c18f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2409c:	60a2                	c.ldsp	ra,8(sp)
   2409e:	0141                	c.addi	sp,16
   240a0:	8082                	c.jr	ra

00000000000240a2 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   240a2:	1141                	c.addi	sp,-16
   240a4:	e406                	c.sdsp	ra,8(sp)
   240a6:	e022                	c.sdsp	s0,0(sp)
   240a8:	03850413          	addi	s0,a0,56
	    ||
   240ac:	00015797          	auipc	a5,0x15
   240b0:	4847b783          	ld	a5,1156(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   240b4:	02f58a63          	beq	a1,a5,240e8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   240b8:	6588                	c.ld	a0,8(a1)
   240ba:	00015797          	auipc	a5,0x15
   240be:	34e7b783          	ld	a5,846(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   240c2:	02f50363          	beq	a0,a5,240e8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   240c6:	00054703          	lbu	a4,0(a0)
   240ca:	02a00793          	addi	a5,zero,42
   240ce:	02f70263          	beq	a4,a5,240f2 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   240d2:	00015597          	auipc	a1,0x15
   240d6:	3365b583          	ld	a1,822(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   240da:	a36f20ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   240de:	00153513          	sltiu	a0,a0,1
   240e2:	40a00533          	sub	a0,zero,a0
   240e6:	8c69                	c.and	s0,a0
      }
   240e8:	8522                	c.mv	a0,s0
   240ea:	60a2                	c.ldsp	ra,8(sp)
   240ec:	6402                	c.ldsp	s0,0(sp)
   240ee:	0141                	c.addi	sp,16
   240f0:	8082                	c.jr	ra
	return nullptr;
   240f2:	4401                	c.li	s0,0
   240f4:	bfd5                	c.j	240e8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

00000000000240f6 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   240f6:	1101                	c.addi	sp,-32
   240f8:	ec06                	c.sdsp	ra,24(sp)
   240fa:	e822                	c.sdsp	s0,16(sp)
   240fc:	e426                	c.sdsp	s1,8(sp)
   240fe:	e04a                	c.sdsp	s2,0(sp)
   24100:	84aa                	c.mv	s1,a0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24102:	6540                	c.ld	s0,136(a0)
   24104:	09053903          	ld	s2,144(a0)
	  for (; __first != __last; ++__first)
   24108:	05241d63          	bne	s0,s2,24162 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
	_M_deallocate(_M_impl._M_start,
   2410c:	64c8                	c.ld	a0,136(s1)
	if (__p)
   2410e:	c119                	c.beqz	a0,24114 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1e>
   24110:	ba0f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24114:	78a0                	c.ld	s0,112(s1)
   24116:	0784b903          	ld	s2,120(s1)
   2411a:	07241063          	bne	s0,s2,2417a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
	_M_deallocate(_M_impl._M_start,
   2411e:	78a8                	c.ld	a0,112(s1)
	if (__p)
   24120:	c119                	c.beqz	a0,24126 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   24122:	b8ef20ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24126:	6ca8                	c.ld	a0,88(s1)
	if (__p)
   24128:	c119                	c.beqz	a0,2412e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
   2412a:	b86f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2412e:	60a0                	c.ld	s0,64(s1)
   24130:	cc19                	c.beqz	s0,2414e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
    if (__is_single_threaded())
   24132:	00015797          	auipc	a5,0x15
   24136:	3467b783          	ld	a5,838(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2413a:	0007c783          	lbu	a5,0(a5)
   2413e:	c7b1                	c.beqz	a5,2418a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x94>
    _Atomic_word __result = *__mem;
   24140:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   24142:	fff5079b          	addiw	a5,a0,-1
   24146:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24148:	4785                	c.li	a5,1
   2414a:	04f50663          	beq	a0,a5,24196 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
      }
   2414e:	60e2                	c.ldsp	ra,24(sp)
   24150:	6442                	c.ldsp	s0,16(sp)
   24152:	64a2                	c.ldsp	s1,8(sp)
   24154:	6902                	c.ldsp	s2,0(sp)
   24156:	6105                	c.addi16sp	sp,32
   24158:	8082                	c.jr	ra
   2415a:	03040413          	addi	s0,s0,48
   2415e:	fa8907e3          	beq	s2,s0,2410c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x16>
   24162:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24164:	01040793          	addi	a5,s0,16
   24168:	fef509e3          	beq	a0,a5,2415a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   2416c:	b44f20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   24170:	b7ed                	c.j	2415a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   24172:	02040413          	addi	s0,s0,32
   24176:	fa8904e3          	beq	s2,s0,2411e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x28>
      { return _M_dataplus._M_p; }
   2417a:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   2417c:	01040793          	addi	a5,s0,16
   24180:	fef509e3          	beq	a0,a5,24172 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
   24184:	b2cf20ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   24188:	b7ed                	c.j	24172 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
      return __exchange_and_add(__mem, __val);
   2418a:	55fd                	c.li	a1,-1
   2418c:	03040513          	addi	a0,s0,48
   24190:	9a0f20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   24194:	bf55                	c.j	24148 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x52>
	_M_dispose();
   24196:	601c                	c.ld	a5,0(s0)
   24198:	6b9c                	c.ld	a5,16(a5)
   2419a:	8522                	c.mv	a0,s0
   2419c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2419e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   241a2:	00015797          	auipc	a5,0x15
   241a6:	2d67b783          	ld	a5,726(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   241aa:	0007c783          	lbu	a5,0(a5)
   241ae:	cf89                	c.beqz	a5,241c8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd2>
    _Atomic_word __result = *__mem;
   241b0:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   241b2:	fff5079b          	addiw	a5,a0,-1
   241b6:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   241b8:	4785                	c.li	a5,1
   241ba:	f8f51ae3          	bne	a0,a5,2414e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
	    _M_destroy();
   241be:	601c                	c.ld	a5,0(s0)
   241c0:	6f9c                	c.ld	a5,24(a5)
   241c2:	8522                	c.mv	a0,s0
   241c4:	9782                	c.jalr	a5
      }
   241c6:	b761                	c.j	2414e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      return __exchange_and_add(__mem, __val);
   241c8:	55fd                	c.li	a1,-1
   241ca:	03440513          	addi	a0,s0,52
   241ce:	962f20ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   241d2:	b7dd                	c.j	241b8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc2>

00000000000241d4 <std::__cxx11::to_string(unsigned long)>:
  {
   241d4:	1101                	c.addi	sp,-32
   241d6:	ec06                	c.sdsp	ra,24(sp)
   241d8:	e822                	c.sdsp	s0,16(sp)
   241da:	e426                	c.sdsp	s1,8(sp)
   241dc:	84aa                	c.mv	s1,a0
   241de:	842e                	c.mv	s0,a1
	  if (__value < (unsigned)__base) return __n;
   241e0:	47a5                	c.li	a5,9
   241e2:	10b7ff63          	bgeu	a5,a1,24300 <std::__cxx11::to_string(unsigned long)+0x12c>
	  if (__value < __b2) return __n + 1;
   241e6:	06300793          	addi	a5,zero,99
   241ea:	04b7fd63          	bgeu	a5,a1,24244 <std::__cxx11::to_string(unsigned long)+0x70>
	  if (__value < __b3) return __n + 2;
   241ee:	3e700793          	addi	a5,zero,999
   241f2:	06b7fc63          	bgeu	a5,a1,2426a <std::__cxx11::to_string(unsigned long)+0x96>
	  if (__value < __b4) return __n + 3;
   241f6:	6789                	c.lui	a5,0x2
   241f8:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   241fc:	10b7f063          	bgeu	a5,a1,242fc <std::__cxx11::to_string(unsigned long)+0x128>
   24200:	872e                	c.mv	a4,a1
      unsigned __n = 1;
   24202:	4585                	c.li	a1,1
	  __value /= __b4;
   24204:	6609                	c.lui	a2,0x2
   24206:	71060613          	addi	a2,a2,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   2420a:	66e1                	c.lui	a3,0x18
   2420c:	69f68693          	addi	a3,a3,1695 # 1869f <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3cd>
	  if (__value < __b2) return __n + 1;
   24210:	000f4537          	lui	a0,0xf4
   24214:	23f50513          	addi	a0,a0,575 # f423f <__global_pointer$+0xbaa3f>
	  if (__value < __b3) return __n + 2;
   24218:	00989837          	lui	a6,0x989
   2421c:	67f80813          	addi	a6,a6,1663 # 98967f <__global_pointer$+0x94fe7f>
	  if (__value < __b4) return __n + 3;
   24220:	05f5e8b7          	lui	a7,0x5f5e
   24224:	0ff88893          	addi	a7,a7,255 # 5f5e0ff <__global_pointer$+0x5f248ff>
   24228:	87ba                	c.mv	a5,a4
	  __value /= __b4;
   2422a:	02c75733          	divu	a4,a4,a2
	  __n += 4;
   2422e:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   24230:	02f6ff63          	bgeu	a3,a5,2426e <std::__cxx11::to_string(unsigned long)+0x9a>
	  if (__value < __b2) return __n + 1;
   24234:	00f57963          	bgeu	a0,a5,24246 <std::__cxx11::to_string(unsigned long)+0x72>
	  if (__value < __b3) return __n + 2;
   24238:	02f87a63          	bgeu	a6,a5,2426c <std::__cxx11::to_string(unsigned long)+0x98>
	  if (__value < __b4) return __n + 3;
   2423c:	fef8e6e3          	bltu	a7,a5,24228 <std::__cxx11::to_string(unsigned long)+0x54>
   24240:	258d                	c.addiw	a1,3
   24242:	a035                	c.j	2426e <std::__cxx11::to_string(unsigned long)+0x9a>
      unsigned __n = 1;
   24244:	4585                	c.li	a1,1
	  if (__value < __b2) return __n + 1;
   24246:	2585                	c.addiw	a1,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24248:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2424c:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2424e:	4601                	c.li	a2,0
   24250:	1582                	c.slli	a1,0x20
   24252:	9181                	c.srli	a1,0x20
   24254:	8526                	c.mv	a0,s1
   24256:	abaf20ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2425a:	6090                	c.ld	a2,0(s1)
      while (__val >= 100)
   2425c:	06300793          	addi	a5,zero,99
   24260:	0687f763          	bgeu	a5,s0,242ce <std::__cxx11::to_string(unsigned long)+0xfa>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24264:	6494                	c.ld	a3,8(s1)
      unsigned __pos = __len - 1;
   24266:	36fd                	c.addiw	a3,-1
   24268:	a839                	c.j	24286 <std::__cxx11::to_string(unsigned long)+0xb2>
      unsigned __n = 1;
   2426a:	4585                	c.li	a1,1
	  if (__value < __b3) return __n + 2;
   2426c:	2589                	c.addiw	a1,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2426e:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   24272:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   24274:	4601                	c.li	a2,0
   24276:	1582                	c.slli	a1,0x20
   24278:	9181                	c.srli	a1,0x20
   2427a:	8526                	c.mv	a0,s1
   2427c:	a94f20ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   24280:	6090                	c.ld	a2,0(s1)
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24282:	6494                	c.ld	a3,8(s1)
      unsigned __pos = __len - 1;
   24284:	36fd                	c.addiw	a3,-1
	  auto const __num = (__val % 100) * 2;
   24286:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2428a:	00015317          	auipc	t1,0x15
   2428e:	1d633303          	ld	t1,470(t1) # 39460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb9b8>
      while (__val >= 100)
   24292:	6889                	c.lui	a7,0x2
   24294:	70f88893          	addi	a7,a7,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   24298:	02b477b3          	remu	a5,s0,a1
   2429c:	0786                	c.slli	a5,0x1
   2429e:	8522                	c.mv	a0,s0
	  __val /= 100;
   242a0:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   242a4:	02069713          	slli	a4,a3,0x20
   242a8:	9301                	c.srli	a4,0x20
   242aa:	9732                	c.add	a4,a2
   242ac:	979a                	c.add	a5,t1
   242ae:	0017c803          	lbu	a6,1(a5)
   242b2:	01070023          	sb	a6,0(a4)
	  __first[__pos - 1] = __digits[__num];
   242b6:	fff6871b          	addiw	a4,a3,-1
   242ba:	1702                	c.slli	a4,0x20
   242bc:	9301                	c.srli	a4,0x20
   242be:	9732                	c.add	a4,a2
   242c0:	0007c783          	lbu	a5,0(a5)
   242c4:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   242c8:	36f9                	c.addiw	a3,-2
      while (__val >= 100)
   242ca:	fca8e7e3          	bltu	a7,a0,24298 <std::__cxx11::to_string(unsigned long)+0xc4>
      if (__val >= 10)
   242ce:	47a5                	c.li	a5,9
   242d0:	0287fa63          	bgeu	a5,s0,24304 <std::__cxx11::to_string(unsigned long)+0x130>
	  auto const __num = __val * 2;
   242d4:	0406                	c.slli	s0,0x1
	  __first[1] = __digits[__num + 1];
   242d6:	00015797          	auipc	a5,0x15
   242da:	18a7b783          	ld	a5,394(a5) # 39460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb9b8>
   242de:	97a2                	c.add	a5,s0
   242e0:	0017c703          	lbu	a4,1(a5)
   242e4:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   242e8:	0007c403          	lbu	s0,0(a5)
   242ec:	00860023          	sb	s0,0(a2)
  }
   242f0:	8526                	c.mv	a0,s1
   242f2:	60e2                	c.ldsp	ra,24(sp)
   242f4:	6442                	c.ldsp	s0,16(sp)
   242f6:	64a2                	c.ldsp	s1,8(sp)
   242f8:	6105                	c.addi16sp	sp,32
   242fa:	8082                	c.jr	ra
      unsigned __n = 1;
   242fc:	4585                	c.li	a1,1
   242fe:	b789                	c.j	24240 <std::__cxx11::to_string(unsigned long)+0x6c>
   24300:	4585                	c.li	a1,1
   24302:	b799                	c.j	24248 <std::__cxx11::to_string(unsigned long)+0x74>
	__first[0] = '0' + __val;
   24304:	0304041b          	addiw	s0,s0,48
   24308:	0ff47413          	andi	s0,s0,255
   2430c:	b7c5                	c.j	242ec <std::__cxx11::to_string(unsigned long)+0x118>

000000000002430e <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
      const unsigned __b2 = __base  * __base;
   2430e:	02b586bb          	mulw	a3,a1,a1
   24312:	0006889b          	addiw	a7,a3,0
      const unsigned __b3 = __b2 * __base;
   24316:	0005881b          	addiw	a6,a1,0
   2431a:	02b686bb          	mulw	a3,a3,a1
   2431e:	0006831b          	addiw	t1,a3,0
      const unsigned long __b4 = __b3 * __base;
   24322:	02b686bb          	mulw	a3,a3,a1
   24326:	0006859b          	addiw	a1,a3,0
   2432a:	1682                	c.slli	a3,0x20
   2432c:	9281                	c.srli	a3,0x20
	  if (__value < (unsigned)__base) return __n;
   2432e:	05056763          	bltu	a0,a6,2437c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x6e>
	  if (__value < __b2) return __n + 1;
   24332:	03156c63          	bltu	a0,a7,2436a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x5c>
	  if (__value < __b3) return __n + 2;
   24336:	02656d63          	bltu	a0,t1,24370 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x62>
	  if (__value < __b4) return __n + 3;
   2433a:	02051793          	slli	a5,a0,0x20
   2433e:	9381                	c.srli	a5,0x20
   24340:	02b56b63          	bltu	a0,a1,24376 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x68>
      unsigned __n = 1;
   24344:	4505                	c.li	a0,1
   24346:	567d                	c.li	a2,-1
   24348:	9201                	c.srli	a2,0x20
	  __value /= __b4;
   2434a:	02d7d7b3          	divu	a5,a5,a3
   2434e:	0007871b          	addiw	a4,a5,0
	  __n += 4;
   24352:	2511                	c.addiw	a0,4
	  if (__value < (unsigned)__base) return __n;
   24354:	03076363          	bltu	a4,a6,2437a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x6c>
	  if (__value < __b2) return __n + 1;
   24358:	01176a63          	bltu	a4,a7,2436c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x5e>
	  if (__value < __b3) return __n + 2;
   2435c:	00676b63          	bltu	a4,t1,24372 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x64>
   24360:	8ff1                	c.and	a5,a2
	  if (__value < __b4) return __n + 3;
   24362:	feb774e3          	bgeu	a4,a1,2434a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x3c>
   24366:	250d                	c.addiw	a0,3
   24368:	8082                	c.jr	ra
      unsigned __n = 1;
   2436a:	4505                	c.li	a0,1
	  if (__value < __b2) return __n + 1;
   2436c:	2505                	c.addiw	a0,1
   2436e:	8082                	c.jr	ra
      unsigned __n = 1;
   24370:	4505                	c.li	a0,1
	  if (__value < __b3) return __n + 2;
   24372:	2509                	c.addiw	a0,2
   24374:	8082                	c.jr	ra
      unsigned __n = 1;
   24376:	4505                	c.li	a0,1
   24378:	b7fd                	c.j	24366 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x58>
   2437a:	8082                	c.jr	ra
   2437c:	4505                	c.li	a0,1
    }
   2437e:	8082                	c.jr	ra

0000000000024380 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
      unsigned __pos = __len - 1;
   24380:	35fd                	c.addiw	a1,-1
      while (__val >= 100)
   24382:	06300793          	addi	a5,zero,99
   24386:	04c7ff63          	bgeu	a5,a2,243e4 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x64>
	  auto const __num = (__val % 100) * 2;
   2438a:	06400893          	addi	a7,zero,100
	  __first[__pos] = __digits[__num + 1];
   2438e:	00015817          	auipc	a6,0x15
   24392:	fca83803          	ld	a6,-54(a6) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
      while (__val >= 100)
   24396:	6e09                	c.lui	t3,0x2
   24398:	70fe0e13          	addi	t3,t3,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2439c:	031677bb          	remuw	a5,a2,a7
   243a0:	0017979b          	slliw	a5,a5,0x1
   243a4:	0006031b          	addiw	t1,a2,0
	  __val /= 100;
   243a8:	0316563b          	divuw	a2,a2,a7
	  __first[__pos] = __digits[__num + 1];
   243ac:	02059693          	slli	a3,a1,0x20
   243b0:	9281                	c.srli	a3,0x20
   243b2:	96aa                	c.add	a3,a0
   243b4:	0017871b          	addiw	a4,a5,1
   243b8:	1702                	c.slli	a4,0x20
   243ba:	9301                	c.srli	a4,0x20
   243bc:	9742                	c.add	a4,a6
   243be:	00074703          	lbu	a4,0(a4)
   243c2:	00e68023          	sb	a4,0(a3)
	  __first[__pos - 1] = __digits[__num];
   243c6:	fff5871b          	addiw	a4,a1,-1
   243ca:	1702                	c.slli	a4,0x20
   243cc:	9301                	c.srli	a4,0x20
   243ce:	972a                	c.add	a4,a0
   243d0:	1782                	c.slli	a5,0x20
   243d2:	9381                	c.srli	a5,0x20
   243d4:	97c2                	c.add	a5,a6
   243d6:	0007c783          	lbu	a5,0(a5)
   243da:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   243de:	35f9                	c.addiw	a1,-2
      while (__val >= 100)
   243e0:	fa6e6ee3          	bltu	t3,t1,2439c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x1c>
      if (__val >= 10)
   243e4:	47a5                	c.li	a5,9
   243e6:	02c7f963          	bgeu	a5,a2,24418 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x98>
	  auto const __num = __val * 2;
   243ea:	0016161b          	slliw	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   243ee:	00015717          	auipc	a4,0x15
   243f2:	f6a73703          	ld	a4,-150(a4) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
   243f6:	0016079b          	addiw	a5,a2,1
   243fa:	1782                	c.slli	a5,0x20
   243fc:	9381                	c.srli	a5,0x20
   243fe:	97ba                	c.add	a5,a4
   24400:	0007c783          	lbu	a5,0(a5)
   24404:	00f500a3          	sb	a5,1(a0)
	  __first[0] = __digits[__num];
   24408:	1602                	c.slli	a2,0x20
   2440a:	9201                	c.srli	a2,0x20
   2440c:	9732                	c.add	a4,a2
   2440e:	00074603          	lbu	a2,0(a4)
   24412:	00c50023          	sb	a2,0(a0)
    }
   24416:	8082                	c.jr	ra
	__first[0] = '0' + __val;
   24418:	0306061b          	addiw	a2,a2,48
   2441c:	0ff67613          	andi	a2,a2,255
   24420:	bfcd                	c.j	24412 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x92>

0000000000024422 <std::__cxx11::to_string(unsigned int)>:
  {
   24422:	1101                	c.addi	sp,-32
   24424:	ec06                	c.sdsp	ra,24(sp)
   24426:	e822                	c.sdsp	s0,16(sp)
   24428:	e426                	c.sdsp	s1,8(sp)
   2442a:	842a                	c.mv	s0,a0
   2442c:	84ae                	c.mv	s1,a1
    string __str(__detail::__to_chars_len(__val), '\0');
   2442e:	45a9                	c.li	a1,10
   24430:	8526                	c.mv	a0,s1
   24432:	00015317          	auipc	t1,0x15
   24436:	05e33303          	ld	t1,94(t1) # 39490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15182>
   2443a:	9302                	c.jalr	t1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2443c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   24440:	e01c                	c.sd	a5,0(s0)
      { _M_construct(__n, __c); }
   24442:	4601                	c.li	a2,0
   24444:	02051593          	slli	a1,a0,0x20
   24448:	9181                	c.srli	a1,0x20
   2444a:	8522                	c.mv	a0,s0
   2444c:	8c4f20ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24450:	8626                	c.mv	a2,s1
   24452:	440c                	c.lw	a1,8(s0)
   24454:	6008                	c.ld	a0,0(s0)
   24456:	00015317          	auipc	t1,0x15
   2445a:	05a33303          	ld	t1,90(t1) # 394b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15130>
   2445e:	9302                	c.jalr	t1
  }
   24460:	8522                	c.mv	a0,s0
   24462:	60e2                	c.ldsp	ra,24(sp)
   24464:	6442                	c.ldsp	s0,16(sp)
   24466:	64a2                	c.ldsp	s1,8(sp)
   24468:	6105                	c.addi16sp	sp,32
   2446a:	8082                	c.jr	ra

000000000002446c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
   2446c:	1101                	c.addi	sp,-32
   2446e:	ec06                	c.sdsp	ra,24(sp)
   24470:	e822                	c.sdsp	s0,16(sp)
   24472:	e426                	c.sdsp	s1,8(sp)
   24474:	e04a                	c.sdsp	s2,0(sp)
   24476:	842a                	c.mv	s0,a0
   24478:	852e                	c.mv	a0,a1
   2447a:	87b2                	c.mv	a5,a2
      { return _M_string_length; }
   2447c:	6598                	c.ld	a4,8(a1)
   2447e:	6610                	c.ld	a2,8(a2)
	  const auto __size = __lhs.size() + __rhs.size();
   24480:	00e60833          	add	a6,a2,a4
      { return _M_dataplus._M_p; }
   24484:	6194                	c.ld	a3,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24486:	05c1                	c.addi	a1,16
	return _M_is_local() ? size_type(_S_local_capacity)
   24488:	06b68163          	beq	a3,a1,244ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7e>
   2448c:	690c                	c.ld	a1,16(a0)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2448e:	0105fb63          	bgeu	a1,a6,244a4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x38>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24492:	01078593          	addi	a1,a5,16
	return _M_is_local() ? size_type(_S_local_capacity)
   24496:	0007b883          	ld	a7,0(a5)
   2449a:	04b88a63          	beq	a7,a1,244ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x82>
   2449e:	6b8c                	c.ld	a1,16(a5)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   244a0:	0505f963          	bgeu	a1,a6,244f2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x86>
      { return _M_dataplus._M_p; }
   244a4:	638c                	c.ld	a1,0(a5)
	if (this->max_size() - (this->size() - __n1) < __n2)
   244a6:	57fd                	c.li	a5,-1
   244a8:	8389                	c.srli	a5,0x2
   244aa:	8f99                	c.sub	a5,a4
   244ac:	08c7e463          	bltu	a5,a2,24534 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc8>
	return _M_append(__s, __n);
   244b0:	ec1f10ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   244b4:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   244b6:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   244ba:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   244bc:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   244be:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   244c2:	07278f63          	beq	a5,s2,24540 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd4>
      { _M_dataplus._M_p = __p; }
   244c6:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   244c8:	689c                	c.ld	a5,16(s1)
   244ca:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   244cc:	649c                	c.ld	a5,8(s1)
   244ce:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   244d0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   244d4:	0004b423          	sd	zero,8(s1)
   244d8:	00048823          	sb	zero,16(s1)
    }
   244dc:	8522                	c.mv	a0,s0
   244de:	60e2                	c.ldsp	ra,24(sp)
   244e0:	6442                	c.ldsp	s0,16(sp)
   244e2:	64a2                	c.ldsp	s1,8(sp)
   244e4:	6902                	c.ldsp	s2,0(sp)
   244e6:	6105                	c.addi16sp	sp,32
   244e8:	8082                	c.jr	ra
	return _M_is_local() ? size_type(_S_local_capacity)
   244ea:	45bd                	c.li	a1,15
   244ec:	b74d                	c.j	2448e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x22>
   244ee:	45bd                	c.li	a1,15
   244f0:	bf45                	c.j	244a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x34>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   244f2:	4601                	c.li	a2,0
   244f4:	4581                	c.li	a1,0
   244f6:	853e                	c.mv	a0,a5
   244f8:	908f20ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   244fc:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   244fe:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24502:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24504:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24506:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2450a:	01278e63          	beq	a5,s2,24526 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xba>
      { _M_dataplus._M_p = __p; }
   2450e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24510:	689c                	c.ld	a5,16(s1)
   24512:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   24514:	649c                	c.ld	a5,8(s1)
   24516:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   24518:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2451c:	0004b423          	sd	zero,8(s1)
   24520:	00048823          	sb	zero,16(s1)
      }
   24524:	bf65                	c.j	244dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24526:	6490                	c.ld	a2,8(s1)
   24528:	0605                	c.addi	a2,1
	if (__n == 0)
   2452a:	d66d                	c.beqz	a2,24514 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2452c:	85ca                	c.mv	a1,s2
   2452e:	822f20ef          	jal	ra,16550 <memcpy@plt>
   24532:	b7cd                	c.j	24514 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
	  __throw_length_error(__N(__s));
   24534:	00009517          	auipc	a0,0x9
   24538:	32c50513          	addi	a0,a0,812 # 2d860 <std::piecewise_construct+0x2b0>
   2453c:	ea5f10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24540:	6490                	c.ld	a2,8(s1)
   24542:	0605                	c.addi	a2,1
	if (__n == 0)
   24544:	d641                	c.beqz	a2,244cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24546:	85ca                	c.mv	a1,s2
   24548:	808f20ef          	jal	ra,16550 <memcpy@plt>
   2454c:	b741                	c.j	244cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>

000000000002454e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)>:
      if (__n != 0)
   2454e:	0e058f63          	beq	a1,zero,2464c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xfe>
    vector<_Tp, _Alloc>::
   24552:	7139                	c.addi16sp	sp,-64
   24554:	fc06                	c.sdsp	ra,56(sp)
   24556:	f822                	c.sdsp	s0,48(sp)
   24558:	f426                	c.sdsp	s1,40(sp)
   2455a:	f04a                	c.sdsp	s2,32(sp)
   2455c:	ec4e                	c.sdsp	s3,24(sp)
   2455e:	e852                	c.sdsp	s4,16(sp)
   24560:	e456                	c.sdsp	s5,8(sp)
   24562:	89aa                	c.mv	s3,a0
   24564:	842e                	c.mv	s0,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24566:	6514                	c.ld	a3,8(a0)
   24568:	6104                	c.ld	s1,0(a0)
   2456a:	409684b3          	sub	s1,a3,s1
	  if (__size > max_size() || __navail > max_size() - __size)
   2456e:	57fd                	c.li	a5,-1
   24570:	8385                	c.srli	a5,0x1
   24572:	8f85                	c.sub	a5,s1
					 - this->_M_impl._M_finish);
   24574:	6918                	c.ld	a4,16(a0)
   24576:	8f15                	c.sub	a4,a3
	  if (__navail >= __n)
   24578:	04b76063          	bltu	a4,a1,245b8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x6a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   2457c:	00068023          	sb	zero,0(a3)
	      ++__first;
   24580:	00168513          	addi	a0,a3,1
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   24584:	4785                	c.li	a5,1
   24586:	00f59d63          	bne	a1,a5,245a0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x52>
	      this->_M_impl._M_finish =
   2458a:	00a9b423          	sd	a0,8(s3)
    }
   2458e:	70e2                	c.ldsp	ra,56(sp)
   24590:	7442                	c.ldsp	s0,48(sp)
   24592:	74a2                	c.ldsp	s1,40(sp)
   24594:	7902                	c.ldsp	s2,32(sp)
   24596:	69e2                	c.ldsp	s3,24(sp)
   24598:	6a42                	c.ldsp	s4,16(sp)
   2459a:	6aa2                	c.ldsp	s5,8(sp)
   2459c:	6121                	c.addi16sp	sp,64
   2459e:	8082                	c.jr	ra
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   245a0:	00b684b3          	add	s1,a3,a1
      if (const size_t __len = __last - __first)
   245a4:	fff58613          	addi	a2,a1,-1
   245a8:	e219                	c.bnez	a2,245ae <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
      return __first + __n;
   245aa:	8526                	c.mv	a0,s1
   245ac:	bff9                	c.j	2458a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x3c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   245ae:	4581                	c.li	a1,0
   245b0:	fd1f10ef          	jal	ra,16580 <memset@plt>
      return __first + __n;
   245b4:	8526                	c.mv	a0,s1
   245b6:	bfd1                	c.j	2458a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x3c>
	if (max_size() - size() < __n)
   245b8:	04b7e763          	bltu	a5,a1,24606 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xb8>
	const size_type __len = size() + (std::max)(size(), __n);
   245bc:	87a6                	c.mv	a5,s1
   245be:	00b4f363          	bgeu	s1,a1,245c4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x76>
   245c2:	87ae                	c.mv	a5,a1
   245c4:	97a6                	c.add	a5,s1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   245c6:	0497e663          	bltu	a5,s1,24612 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xc4>
   245ca:	8a3e                	c.mv	s4,a5
   245cc:	0007d563          	bge	a5,zero,245d6 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x88>
   245d0:	5a7d                	c.li	s4,-1
   245d2:	001a5a13          	srli	s4,s4,0x1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   245d6:	4901                	c.li	s2,0
   245d8:	c789                	c.beqz	a5,245e2 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x94>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   245da:	8552                	c.mv	a0,s4
   245dc:	ee5f10ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   245e0:	892a                	c.mv	s2,a0
		      std::__uninitialized_default_n_a(__new_start + __size,
   245e2:	00990533          	add	a0,s2,s1
   245e6:	00050023          	sb	zero,0(a0)
      if (__n <= 0)
   245ea:	4785                	c.li	a5,1
   245ec:	02f41763          	bne	s0,a5,2461a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xcc>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   245f0:	0009ba83          	ld	s5,0(s3)
      ptrdiff_t __count = __last - __first;
   245f4:	0089b603          	ld	a2,8(s3)
   245f8:	41560633          	sub	a2,a2,s5
      if (__count > 0)
   245fc:	02c04763          	blt	zero,a2,2462a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xdc>
	if (__p)
   24600:	020a8c63          	beq	s5,zero,24638 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xea>
   24604:	a03d                	c.j	24632 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xe4>
	  __throw_length_error(__N(__s));
   24606:	00009517          	auipc	a0,0x9
   2460a:	c7a50513          	addi	a0,a0,-902 # 2d280 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   2460e:	dd3f10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24612:	5a7d                	c.li	s4,-1
   24614:	001a5a13          	srli	s4,s4,0x1
   24618:	b7c9                	c.j	245da <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x8c>
      if (const size_t __len = __last - __first)
   2461a:	fff40613          	addi	a2,s0,-1
   2461e:	da69                	c.beqz	a2,245f0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xa2>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   24620:	4581                	c.li	a1,0
   24622:	0505                	c.addi	a0,1
   24624:	f5df10ef          	jal	ra,16580 <memset@plt>
   24628:	b7e1                	c.j	245f0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xa2>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2462a:	85d6                	c.mv	a1,s5
   2462c:	854a                	c.mv	a0,s2
   2462e:	8f2f20ef          	jal	ra,16720 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24632:	8556                	c.mv	a0,s5
   24634:	e7df10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   24638:	0129b023          	sd	s2,0(s3)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   2463c:	94a2                	c.add	s1,s0
   2463e:	94ca                	c.add	s1,s2
   24640:	0099b423          	sd	s1,8(s3)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   24644:	9952                	c.add	s2,s4
   24646:	0129b823          	sd	s2,16(s3)
    }
   2464a:	b791                	c.j	2458e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x40>
   2464c:	8082                	c.jr	ra

000000000002464e <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   2464e:	7179                	c.addi16sp	sp,-48
   24650:	f406                	c.sdsp	ra,40(sp)
   24652:	f022                	c.sdsp	s0,32(sp)
   24654:	ec26                	c.sdsp	s1,24(sp)
   24656:	e84a                	c.sdsp	s2,16(sp)
   24658:	842a                	c.mv	s0,a0
   2465a:	892e                	c.mv	s2,a1
   2465c:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   24660:	e426                	c.sdsp	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   24662:	47bd                	c.li	a5,15
   24664:	0297e663          	bltu	a5,s1,24690 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x42>
      { return _M_dataplus._M_p; }
   24668:	6108                	c.ld	a0,0(a0)
	if (__n == 1)
   2466a:	4785                	c.li	a5,1
   2466c:	02f49e63          	bne	s1,a5,246a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x5a>
	__c1 = __c2;
   24670:	0005c783          	lbu	a5,0(a1)
   24674:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   24678:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   2467a:	e418                	c.sd	a4,8(s0)
   2467c:	601c                	c.ld	a5,0(s0)
   2467e:	97ba                	c.add	a5,a4
   24680:	00078023          	sb	zero,0(a5)
      }
   24684:	70a2                	c.ldsp	ra,40(sp)
   24686:	7402                	c.ldsp	s0,32(sp)
   24688:	64e2                	c.ldsp	s1,24(sp)
   2468a:	6942                	c.ldsp	s2,16(sp)
   2468c:	6145                	c.addi16sp	sp,48
   2468e:	8082                	c.jr	ra
	    _M_data(_M_create(__dnew, size_type(0)));
   24690:	4601                	c.li	a2,0
   24692:	002c                	c.addi4spn	a1,sp,8
   24694:	81cf20ef          	jal	ra,166b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   24698:	e008                	c.sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   2469a:	67a2                	c.ldsp	a5,8(sp)
   2469c:	e81c                	c.sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2469e:	8626                	c.mv	a2,s1
   246a0:	85ca                	c.mv	a1,s2
   246a2:	eaff10ef          	jal	ra,16550 <memcpy@plt>
   246a6:	bfc9                	c.j	24678 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x2a>
	if (__n == 0)
   246a8:	d8e1                	c.beqz	s1,24678 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x2a>
   246aa:	bfd5                	c.j	2469e <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x50>

00000000000246ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   246ac:	1101                	c.addi	sp,-32
   246ae:	ec06                	c.sdsp	ra,24(sp)
   246b0:	e822                	c.sdsp	s0,16(sp)
   246b2:	e426                	c.sdsp	s1,8(sp)
   246b4:	e04a                	c.sdsp	s2,0(sp)
   246b6:	842a                	c.mv	s0,a0
   246b8:	87ae                	c.mv	a5,a1
   246ba:	84b2                	c.mv	s1,a2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   246bc:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   246c0:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   246c4:	618c                	c.ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   246c6:	6790                	c.ld	a2,8(a5)
   246c8:	4681                	c.li	a3,0
   246ca:	962e                	c.add	a2,a1
   246cc:	00015317          	auipc	t1,0x15
   246d0:	c3c33303          	ld	t1,-964(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   246d4:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   246d6:	608c                	c.ld	a1,0(s1)
      { return _M_string_length; }
   246d8:	6490                	c.ld	a2,8(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   246da:	6418                	c.ld	a4,8(s0)
   246dc:	57fd                	c.li	a5,-1
   246de:	8389                	c.srli	a5,0x2
   246e0:	8f99                	c.sub	a5,a4
   246e2:	00c7e663          	bltu	a5,a2,246ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x42>
	return _M_append(__s, __n);
   246e6:	8522                	c.mv	a0,s0
   246e8:	c89f10ef          	jal	ra,16370 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   246ec:	a005                	c.j	2470c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x60>
	  __throw_length_error(__N(__s));
   246ee:	00009517          	auipc	a0,0x9
   246f2:	17250513          	addi	a0,a0,370 # 2d860 <std::piecewise_construct+0x2b0>
   246f6:	cebf10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   246fa:	84aa                	c.mv	s1,a0
   246fc:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   246fe:	01250463          	beq	a0,s2,24706 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5a>
   24702:	daff10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   24706:	8526                	c.mv	a0,s1
   24708:	f89f10ef          	jal	ra,16690 <_Unwind_Resume@plt>
    }
   2470c:	8522                	c.mv	a0,s0
   2470e:	60e2                	c.ldsp	ra,24(sp)
   24710:	6442                	c.ldsp	s0,16(sp)
   24712:	64a2                	c.ldsp	s1,8(sp)
   24714:	6902                	c.ldsp	s2,0(sp)
   24716:	6105                	c.addi16sp	sp,32
   24718:	8082                	c.jr	ra

000000000002471a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2471a:	711d                	c.addi16sp	sp,-96
   2471c:	ec86                	c.sdsp	ra,88(sp)
   2471e:	e8a2                	c.sdsp	s0,80(sp)
   24720:	e4a6                	c.sdsp	s1,72(sp)
   24722:	e0ca                	c.sdsp	s2,64(sp)
   24724:	fc4e                	c.sdsp	s3,56(sp)
   24726:	f852                	c.sdsp	s4,48(sp)
   24728:	f456                	c.sdsp	s5,40(sp)
   2472a:	f05a                	c.sdsp	s6,32(sp)
   2472c:	ec5e                	c.sdsp	s7,24(sp)
   2472e:	e862                	c.sdsp	s8,16(sp)
   24730:	e466                	c.sdsp	s9,8(sp)
   24732:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24734:	00853b83          	ld	s7,8(a0)
   24738:	00053983          	ld	s3,0(a0)
   2473c:	413b87b3          	sub	a5,s7,s3
   24740:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   24742:	577d                	c.li	a4,-1
   24744:	8319                	c.srli	a4,0x6
   24746:	02e78863          	beq	a5,a4,24776 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>
   2474a:	8aaa                	c.mv	s5,a0
   2474c:	892e                	c.mv	s2,a1
   2474e:	8432                	c.mv	s0,a2
   24750:	8d2e                	c.mv	s10,a1
      return __a;
   24752:	873e                	c.mv	a4,a5
      if (__a < __b)
   24754:	033b8763          	beq	s7,s3,24782 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
	const size_type __len = size() + (std::max)(size(), __n);
   24758:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2475a:	12f76663          	bltu	a4,a5,24886 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16c>
   2475e:	8a3a                	c.mv	s4,a4
   24760:	57fd                	c.li	a5,-1
   24762:	8399                	c.srli	a5,0x6
   24764:	00e7f363          	bgeu	a5,a4,2476a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x50>
   24768:	8a3e                	c.mv	s4,a5
   2476a:	413904b3          	sub	s1,s2,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2476e:	4b01                	c.li	s6,0
   24770:	12070563          	beq	a4,zero,2489a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x180>
   24774:	aa31                	c.j	24890 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x176>
	  __throw_length_error(__N(__s));
   24776:	00009517          	auipc	a0,0x9
   2477a:	bf250513          	addi	a0,a0,-1038 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2477e:	c63f10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   24782:	4705                	c.li	a4,1
   24784:	bfd1                	c.j	24758 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3e>
      for (; __first != __last; ++__first, (void)++__cur)
   24786:	053d0663          	beq	s10,s3,247d2 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb8>
   2478a:	01098493          	addi	s1,s3,16
   2478e:	41390c33          	sub	s8,s2,s3
   24792:	9c5a                	c.add	s8,s6
      _ForwardIterator __cur = __result;
   24794:	845a                	c.mv	s0,s6
   24796:	a831                	c.j	247b2 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24798:	ff84b603          	ld	a2,-8(s1)
   2479c:	0605                	c.addi	a2,1
   2479e:	e615                	c.bnez	a2,247ca <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb0>
      { _M_string_length = __length; }
   247a0:	ff8cb783          	ld	a5,-8(s9)
   247a4:	e41c                	c.sd	a5,8(s0)
      for (; __first != __last; ++__first, (void)++__cur)
   247a6:	02040413          	addi	s0,s0,32
   247aa:	02048493          	addi	s1,s1,32
   247ae:	03840363          	beq	s0,s8,247d4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   247b2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   247b6:	e008                	c.sd	a0,0(s0)
      _M_data() const
   247b8:	8ca6                	c.mv	s9,s1
      { return _M_dataplus._M_p; }
   247ba:	ff04b783          	ld	a5,-16(s1)
	if (__str._M_is_local())
   247be:	fc978de3          	beq	a5,s1,24798 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
      { _M_dataplus._M_p = __p; }
   247c2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   247c4:	609c                	c.ld	a5,0(s1)
   247c6:	e81c                	c.sd	a5,16(s0)
   247c8:	bfe1                	c.j	247a0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   247ca:	85a6                	c.mv	a1,s1
   247cc:	d85f10ef          	jal	ra,16550 <memcpy@plt>
   247d0:	bfc1                	c.j	247a0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86>
      _ForwardIterator __cur = __result;
   247d2:	8c5a                	c.mv	s8,s6
	      ++__new_finish;
   247d4:	020c0c13          	addi	s8,s8,32
      for (; __first != __last; ++__first, (void)++__cur)
   247d8:	057d0763          	beq	s10,s7,24826 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c>
   247dc:	01090413          	addi	s0,s2,16
   247e0:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   247e4:	84e2                	c.mv	s1,s8
   247e6:	a831                	c.j	24802 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   247e8:	ff85b603          	ld	a2,-8(a1)
   247ec:	0605                	c.addi	a2,1
	if (__n == 0)
   247ee:	e615                	c.bnez	a2,2481a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
      { _M_string_length = __length; }
   247f0:	ff8cb783          	ld	a5,-8(s9)
   247f4:	e49c                	c.sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   247f6:	02048493          	addi	s1,s1,32
   247fa:	02040413          	addi	s0,s0,32
   247fe:	028d0163          	beq	s10,s0,24820 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x106>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24802:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24806:	e088                	c.sd	a0,0(s1)
      _M_data() const
   24808:	8ca2                	c.mv	s9,s0
      { return _M_dataplus._M_p; }
   2480a:	ff043583          	ld	a1,-16(s0)
	if (__str._M_is_local())
   2480e:	fcb40de3          	beq	s0,a1,247e8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xce>
      { _M_dataplus._M_p = __p; }
   24812:	e08c                	c.sd	a1,0(s1)
      { _M_allocated_capacity = __capacity; }
   24814:	601c                	c.ld	a5,0(s0)
   24816:	e89c                	c.sd	a5,16(s1)
   24818:	bfe1                	c.j	247f0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2481a:	d37f10ef          	jal	ra,16550 <memcpy@plt>
   2481e:	bfc9                	c.j	247f0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
   24820:	412b8933          	sub	s2,s7,s2
   24824:	9c4a                	c.add	s8,s2
	if (__p)
   24826:	00098563          	beq	s3,zero,24830 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x116>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2482a:	854e                	c.mv	a0,s3
   2482c:	c85f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   24830:	016ab023          	sd	s6,0(s5)
      this->_M_impl._M_finish = __new_finish;
   24834:	018ab423          	sd	s8,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   24838:	0a16                	c.slli	s4,0x5
   2483a:	9a5a                	c.add	s4,s6
   2483c:	014ab823          	sd	s4,16(s5)
    }
   24840:	60e6                	c.ldsp	ra,88(sp)
   24842:	6446                	c.ldsp	s0,80(sp)
   24844:	64a6                	c.ldsp	s1,72(sp)
   24846:	6906                	c.ldsp	s2,64(sp)
   24848:	79e2                	c.ldsp	s3,56(sp)
   2484a:	7a42                	c.ldsp	s4,48(sp)
   2484c:	7aa2                	c.ldsp	s5,40(sp)
   2484e:	7b02                	c.ldsp	s6,32(sp)
   24850:	6be2                	c.ldsp	s7,24(sp)
   24852:	6c42                	c.ldsp	s8,16(sp)
   24854:	6ca2                	c.ldsp	s9,8(sp)
   24856:	6d02                	c.ldsp	s10,0(sp)
   24858:	6125                	c.addi16sp	sp,96
   2485a:	8082                	c.jr	ra
      __catch(...)
   2485c:	b55f10ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   24860:	000b1f63          	bne	s6,zero,2487e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x164>
      { return _M_dataplus._M_p; }
   24864:	6088                	c.ld	a0,0(s1)
	if (!_M_is_local())
   24866:	01850463          	beq	a0,s8,2486e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x154>
   2486a:	c47f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   2486e:	d53f10ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   24872:	842a                	c.mv	s0,a0
   24874:	dbdf10ef          	jal	ra,16630 <__cxa_end_catch@plt>
   24878:	8522                	c.mv	a0,s0
   2487a:	e17f10ef          	jal	ra,16690 <_Unwind_Resume@plt>
   2487e:	855a                	c.mv	a0,s6
   24880:	c31f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   24884:	b7ed                	c.j	2486e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x154>
   24886:	413904b3          	sub	s1,s2,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2488a:	5a7d                	c.li	s4,-1
   2488c:	006a5a13          	srli	s4,s4,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24890:	005a1513          	slli	a0,s4,0x5
   24894:	c2df10ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   24898:	8b2a                	c.mv	s6,a0
	  _Alloc_traits::construct(this->_M_impl,
   2489a:	94da                	c.add	s1,s6
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2489c:	01048c13          	addi	s8,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   248a0:	0184b023          	sd	s8,0(s1)
      { return _M_dataplus._M_p; }
   248a4:	600c                	c.ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   248a6:	6410                	c.ld	a2,8(s0)
   248a8:	4681                	c.li	a3,0
   248aa:	962e                	c.add	a2,a1
   248ac:	8526                	c.mv	a0,s1
   248ae:	00015317          	auipc	t1,0x15
   248b2:	a5a33303          	ld	t1,-1446(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   248b6:	9302                	c.jalr	t1
      }
   248b8:	b5f9                	c.j	24786 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>

00000000000248ba <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   248ba:	711d                	c.addi16sp	sp,-96
   248bc:	ec86                	c.sdsp	ra,88(sp)
   248be:	e8a2                	c.sdsp	s0,80(sp)
   248c0:	e4a6                	c.sdsp	s1,72(sp)
   248c2:	e0ca                	c.sdsp	s2,64(sp)
   248c4:	fc4e                	c.sdsp	s3,56(sp)
   248c6:	f852                	c.sdsp	s4,48(sp)
   248c8:	f456                	c.sdsp	s5,40(sp)
   248ca:	f05a                	c.sdsp	s6,32(sp)
   248cc:	ec5e                	c.sdsp	s7,24(sp)
   248ce:	e862                	c.sdsp	s8,16(sp)
   248d0:	e466                	c.sdsp	s9,8(sp)
   248d2:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   248d4:	00853b83          	ld	s7,8(a0)
   248d8:	00053a03          	ld	s4,0(a0)
   248dc:	414b87b3          	sub	a5,s7,s4
   248e0:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   248e2:	577d                	c.li	a4,-1
   248e4:	8319                	c.srli	a4,0x6
   248e6:	02e78863          	beq	a5,a4,24916 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5c>
   248ea:	8aaa                	c.mv	s5,a0
   248ec:	892e                	c.mv	s2,a1
   248ee:	8432                	c.mv	s0,a2
   248f0:	8d2e                	c.mv	s10,a1
      return __a;
   248f2:	873e                	c.mv	a4,a5
      if (__a < __b)
   248f4:	034b8763          	beq	s7,s4,24922 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	const size_type __len = size() + (std::max)(size(), __n);
   248f8:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   248fa:	10f76063          	bltu	a4,a5,249fa <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x140>
   248fe:	8b3a                	c.mv	s6,a4
   24900:	57fd                	c.li	a5,-1
   24902:	8399                	c.srli	a5,0x6
   24904:	00e7f363          	bgeu	a5,a4,2490a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>
   24908:	8b3e                	c.mv	s6,a5
   2490a:	414904b3          	sub	s1,s2,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2490e:	4981                	c.li	s3,0
   24910:	0e070f63          	beq	a4,zero,24a0e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x154>
   24914:	a8c5                	c.j	24a04 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14a>
	  __throw_length_error(__N(__s));
   24916:	00009517          	auipc	a0,0x9
   2491a:	a5250513          	addi	a0,a0,-1454 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2491e:	ac3f10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   24922:	4705                	c.li	a4,1
   24924:	bfd1                	c.j	248f8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x3e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24926:	6410                	c.ld	a2,8(s0)
   24928:	0605                	c.addi	a2,1
	if (__n == 0)
   2492a:	0e060e63          	beq	a2,zero,24a26 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2492e:	85e2                	c.mv	a1,s8
   24930:	c21f10ef          	jal	ra,16550 <memcpy@plt>
   24934:	a8cd                	c.j	24a26 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
   24936:	ff85b603          	ld	a2,-8(a1)
   2493a:	0605                	c.addi	a2,1
	if (__n == 0)
   2493c:	e615                	c.bnez	a2,24968 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xae>
      { _M_string_length = __length; }
   2493e:	ff8c3783          	ld	a5,-8(s8)
   24942:	e41c                	c.sd	a5,8(s0)
   24944:	02040413          	addi	s0,s0,32
   24948:	02048493          	addi	s1,s1,32
   2494c:	03940263          	beq	s0,s9,24970 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24950:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24954:	e008                	c.sd	a0,0(s0)
      _M_data() const
   24956:	8c26                	c.mv	s8,s1
      { return _M_dataplus._M_p; }
   24958:	ff04b583          	ld	a1,-16(s1)
	if (__str._M_is_local())
   2495c:	fcb48de3          	beq	s1,a1,24936 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7c>
      { _M_dataplus._M_p = __p; }
   24960:	e00c                	c.sd	a1,0(s0)
      { _M_allocated_capacity = __capacity; }
   24962:	609c                	c.ld	a5,0(s1)
   24964:	e81c                	c.sd	a5,16(s0)
   24966:	bfe1                	c.j	2493e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24968:	be9f10ef          	jal	ra,16550 <memcpy@plt>
   2496c:	bfc9                	c.j	2493e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
      _ForwardIterator __cur = __result;
   2496e:	8cce                	c.mv	s9,s3
	      ++__new_finish;
   24970:	020c8c93          	addi	s9,s9,32
      for (; __first != __last; ++__first, (void)++__cur)
   24974:	057d0863          	beq	s10,s7,249c4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x10a>
   24978:	01090413          	addi	s0,s2,16
   2497c:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   24980:	84e6                	c.mv	s1,s9
   24982:	a831                	c.j	2499e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24984:	ff843603          	ld	a2,-8(s0)
   24988:	0605                	c.addi	a2,1
	if (__n == 0)
   2498a:	e615                	c.bnez	a2,249b6 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xfc>
      { _M_string_length = __length; }
   2498c:	ff8c3783          	ld	a5,-8(s8)
   24990:	e49c                	c.sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   24992:	02048493          	addi	s1,s1,32
   24996:	02040413          	addi	s0,s0,32
   2499a:	03a40263          	beq	s0,s10,249be <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2499e:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   249a2:	e088                	c.sd	a0,0(s1)
      _M_data() const
   249a4:	8c22                	c.mv	s8,s0
      { return _M_dataplus._M_p; }
   249a6:	ff043783          	ld	a5,-16(s0)
	if (__str._M_is_local())
   249aa:	fc878de3          	beq	a5,s0,24984 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xca>
      { _M_dataplus._M_p = __p; }
   249ae:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   249b0:	601c                	c.ld	a5,0(s0)
   249b2:	e89c                	c.sd	a5,16(s1)
   249b4:	bfe1                	c.j	2498c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   249b6:	85a2                	c.mv	a1,s0
   249b8:	b99f10ef          	jal	ra,16550 <memcpy@plt>
   249bc:	bfc1                	c.j	2498c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd2>
   249be:	412b8933          	sub	s2,s7,s2
   249c2:	9cca                	c.add	s9,s2
	if (__p)
   249c4:	000a0563          	beq	s4,zero,249ce <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x114>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   249c8:	8552                	c.mv	a0,s4
   249ca:	ae7f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   249ce:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   249d2:	019ab423          	sd	s9,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   249d6:	0b16                	c.slli	s6,0x5
   249d8:	99da                	c.add	s3,s6
   249da:	013ab823          	sd	s3,16(s5)
    }
   249de:	60e6                	c.ldsp	ra,88(sp)
   249e0:	6446                	c.ldsp	s0,80(sp)
   249e2:	64a6                	c.ldsp	s1,72(sp)
   249e4:	6906                	c.ldsp	s2,64(sp)
   249e6:	79e2                	c.ldsp	s3,56(sp)
   249e8:	7a42                	c.ldsp	s4,48(sp)
   249ea:	7aa2                	c.ldsp	s5,40(sp)
   249ec:	7b02                	c.ldsp	s6,32(sp)
   249ee:	6be2                	c.ldsp	s7,24(sp)
   249f0:	6c42                	c.ldsp	s8,16(sp)
   249f2:	6ca2                	c.ldsp	s9,8(sp)
   249f4:	6d02                	c.ldsp	s10,0(sp)
   249f6:	6125                	c.addi16sp	sp,96
   249f8:	8082                	c.jr	ra
   249fa:	414904b3          	sub	s1,s2,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   249fe:	5b7d                	c.li	s6,-1
   24a00:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24a04:	005b1513          	slli	a0,s6,0x5
   24a08:	ab9f10ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   24a0c:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   24a0e:	94ce                	c.add	s1,s3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24a10:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24a14:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   24a16:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24a18:	01040c13          	addi	s8,s0,16
	if (__str._M_is_local())
   24a1c:	f18785e3          	beq	a5,s8,24926 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
      { _M_dataplus._M_p = __p; }
   24a20:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   24a22:	681c                	c.ld	a5,16(s0)
   24a24:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   24a26:	641c                	c.ld	a5,8(s0)
   24a28:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   24a2a:	01843023          	sd	s8,0(s0)
      { _M_string_length = __length; }
   24a2e:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24a32:	00040823          	sb	zero,16(s0)
   24a36:	f34d0ce3          	beq	s10,s4,2496e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb4>
   24a3a:	010a0493          	addi	s1,s4,16
   24a3e:	41490cb3          	sub	s9,s2,s4
   24a42:	9cce                	c.add	s9,s3
      _ForwardIterator __cur = __result;
   24a44:	844e                	c.mv	s0,s3
   24a46:	b729                	c.j	24950 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x96>

0000000000024a48 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   24a48:	7179                	c.addi16sp	sp,-48
   24a4a:	f406                	c.sdsp	ra,40(sp)
   24a4c:	f022                	c.sdsp	s0,32(sp)
   24a4e:	ec26                	c.sdsp	s1,24(sp)
   24a50:	e84a                	c.sdsp	s2,16(sp)
   24a52:	e44e                	c.sdsp	s3,8(sp)
   24a54:	84aa                	c.mv	s1,a0
   24a56:	842e                	c.mv	s0,a1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   24a58:	00853903          	ld	s2,8(a0)
   24a5c:	691c                	c.ld	a5,16(a0)
   24a5e:	04f90b63          	beq	s2,a5,24ab4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24a62:	01090513          	addi	a0,s2,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24a66:	00a93023          	sd	a0,0(s2)
      { return _M_dataplus._M_p; }
   24a6a:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24a6c:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   24a70:	03378b63          	beq	a5,s3,24aa6 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5e>
      { _M_dataplus._M_p = __p; }
   24a74:	00f93023          	sd	a5,0(s2)
      { _M_allocated_capacity = __capacity; }
   24a78:	699c                	c.ld	a5,16(a1)
   24a7a:	00f93823          	sd	a5,16(s2)
      { _M_string_length = __length; }
   24a7e:	641c                	c.ld	a5,8(s0)
   24a80:	00f93423          	sd	a5,8(s2)
      { _M_dataplus._M_p = __p; }
   24a84:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24a88:	00043423          	sd	zero,8(s0)
   24a8c:	00040823          	sb	zero,16(s0)
	    ++this->_M_impl._M_finish;
   24a90:	649c                	c.ld	a5,8(s1)
   24a92:	02078793          	addi	a5,a5,32
   24a96:	e49c                	c.sd	a5,8(s1)
      }
   24a98:	70a2                	c.ldsp	ra,40(sp)
   24a9a:	7402                	c.ldsp	s0,32(sp)
   24a9c:	64e2                	c.ldsp	s1,24(sp)
   24a9e:	6942                	c.ldsp	s2,16(sp)
   24aa0:	69a2                	c.ldsp	s3,8(sp)
   24aa2:	6145                	c.addi16sp	sp,48
   24aa4:	8082                	c.jr	ra
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24aa6:	6590                	c.ld	a2,8(a1)
   24aa8:	0605                	c.addi	a2,1
	if (__n == 0)
   24aaa:	da71                	c.beqz	a2,24a7e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24aac:	85ce                	c.mv	a1,s3
   24aae:	aa3f10ef          	jal	ra,16550 <memcpy@plt>
   24ab2:	b7f1                	c.j	24a7e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x36>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   24ab4:	862e                	c.mv	a2,a1
   24ab6:	85ca                	c.mv	a1,s2
   24ab8:	00015317          	auipc	t1,0x15
   24abc:	a4033303          	ld	t1,-1472(t1) # 394f8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14c3e>
   24ac0:	9302                	c.jalr	t1
      }
   24ac2:	bfd9                	c.j	24a98 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>

0000000000024ac4 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   24ac4:	1101                	c.addi	sp,-32
   24ac6:	ec06                	c.sdsp	ra,24(sp)
   24ac8:	e822                	c.sdsp	s0,16(sp)
   24aca:	e426                	c.sdsp	s1,8(sp)
   24acc:	842a                	c.mv	s0,a0
   24ace:	84ae                	c.mv	s1,a1
	  for (; __first != __last; ++__first)
   24ad0:	00b51b63          	bne	a0,a1,24ae6 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x22>
	    std::_Destroy(std::__addressof(*__first));
	}
   24ad4:	60e2                	c.ldsp	ra,24(sp)
   24ad6:	6442                	c.ldsp	s0,16(sp)
   24ad8:	64a2                	c.ldsp	s1,8(sp)
   24ada:	6105                	c.addi16sp	sp,32
   24adc:	8082                	c.jr	ra
	  for (; __first != __last; ++__first)
   24ade:	03040413          	addi	s0,s0,48
   24ae2:	fe8489e3          	beq	s1,s0,24ad4 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x10>
      { return _M_dataplus._M_p; }
   24ae6:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24ae8:	01040793          	addi	a5,s0,16
   24aec:	fef509e3          	beq	a0,a5,24ade <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24af0:	9c1f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   24af4:	b7ed                	c.j	24ade <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1a>

0000000000024af6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   24af6:	7119                	c.addi16sp	sp,-128
   24af8:	fc86                	c.sdsp	ra,120(sp)
   24afa:	f8a2                	c.sdsp	s0,112(sp)
   24afc:	f4a6                	c.sdsp	s1,104(sp)
   24afe:	f0ca                	c.sdsp	s2,96(sp)
   24b00:	ecce                	c.sdsp	s3,88(sp)
   24b02:	e8d2                	c.sdsp	s4,80(sp)
   24b04:	e4d6                	c.sdsp	s5,72(sp)
   24b06:	e0da                	c.sdsp	s6,64(sp)
   24b08:	fc5e                	c.sdsp	s7,56(sp)
   24b0a:	f862                	c.sdsp	s8,48(sp)
   24b0c:	f466                	c.sdsp	s9,40(sp)
   24b0e:	f06a                	c.sdsp	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24b10:	00853a83          	ld	s5,8(a0)
   24b14:	00053b03          	ld	s6,0(a0)
   24b18:	416a87b3          	sub	a5,s5,s6
   24b1c:	8791                	c.srai	a5,0x4
   24b1e:	00009717          	auipc	a4,0x9
   24b22:	a8273703          	ld	a4,-1406(a4) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   24b26:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   24b2a:	0000a717          	auipc	a4,0xa
   24b2e:	b1673703          	ld	a4,-1258(a4) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24b32:	02e78a63          	beq	a5,a4,24b66 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x70>
   24b36:	8baa                	c.mv	s7,a0
   24b38:	8a2e                	c.mv	s4,a1
   24b3a:	8432                	c.mv	s0,a2
   24b3c:	8d2e                	c.mv	s10,a1
      return __a;
   24b3e:	873e                	c.mv	a4,a5
      if (__a < __b)
   24b40:	036a8963          	beq	s5,s6,24b72 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   24b44:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24b46:	1af76a63          	bltu	a4,a5,24cfa <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x204>
   24b4a:	8cba                	c.mv	s9,a4
   24b4c:	0000a797          	auipc	a5,0xa
   24b50:	af47b783          	ld	a5,-1292(a5) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24b54:	00e7f363          	bgeu	a5,a4,24b5a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64>
   24b58:	8cbe                	c.mv	s9,a5
   24b5a:	416a04b3          	sub	s1,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   24b5e:	4c01                	c.li	s8,0
   24b60:	1a070a63          	beq	a4,zero,24d14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21e>
   24b64:	a24d                	c.j	24d06 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
	  __throw_length_error(__N(__s));
   24b66:	00009517          	auipc	a0,0x9
   24b6a:	80250513          	addi	a0,a0,-2046 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   24b6e:	873f10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   24b72:	4705                	c.li	a4,1
   24b74:	bfc1                	c.j	24b44 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   24b76:	4681                	c.li	a3,0
   24b78:	4601                	c.li	a2,0
   24b7a:	858a                	c.mv	a1,sp
   24b7c:	8526                	c.mv	a0,s1
   24b7e:	f5cfd0ef          	jal	ra,222da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   24b82:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24b84:	081c                	c.addi4spn	a5,sp,16
   24b86:	00f50463          	beq	a0,a5,24b8e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24b8a:	927f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   24b8e:	010b0913          	addi	s2,s6,16
   24b92:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   24b94:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   24b96:	076d1663          	bne	s10,s6,24c02 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c>
	      ++__new_finish;
   24b9a:	03048493          	addi	s1,s1,48
   24b9e:	115d0463          	beq	s10,s5,24ca6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b0>
   24ba2:	010a0993          	addi	s3,s4,16
   24ba6:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   24ba8:	8426                	c.mv	s0,s1
   24baa:	a85d                	c.j	24c60 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16a>
      { return _M_dataplus._M_p; }
   24bac:	842a                	c.mv	s0,a0
   24bae:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24bb0:	081c                	c.addi4spn	a5,sp,16
   24bb2:	00f50463          	beq	a0,a5,24bba <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc4>
   24bb6:	8fbf10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   24bba:	8522                	c.mv	a0,s0
      __catch(...)
   24bbc:	ff4f10ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   24bc0:	120c1263          	bne	s8,zero,24ce4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ee>
      { return _M_dataplus._M_p; }
   24bc4:	6088                	c.ld	a0,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24bc6:	04c1                	c.addi	s1,16
	if (!_M_is_local())
   24bc8:	00950463          	beq	a0,s1,24bd0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24bcc:	8e5f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   24bd0:	9f1f10ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   24bd4:	842a                	c.mv	s0,a0
   24bd6:	a5bf10ef          	jal	ra,16630 <__cxa_end_catch@plt>
   24bda:	8522                	c.mv	a0,s0
   24bdc:	ab5f10ef          	jal	ra,16690 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24be0:	6410                	c.ld	a2,8(s0)
   24be2:	0605                	c.addi	a2,1
	if (__n == 0)
   24be4:	ca0d                	c.beqz	a2,24c16 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24be6:	85ca                	c.mv	a1,s2
   24be8:	969f10ef          	jal	ra,16550 <memcpy@plt>
   24bec:	a02d                	c.j	24c16 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x120>
   24bee:	8c3f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   24bf2:	03040413          	addi	s0,s0,48
   24bf6:	03048493          	addi	s1,s1,48
   24bfa:	03090913          	addi	s2,s2,48
   24bfe:	f9a40ee3          	beq	s0,s10,24b9a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24c02:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24c06:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   24c08:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24c0a:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   24c0c:	fd278ae3          	beq	a5,s2,24be0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xea>
      { _M_dataplus._M_p = __p; }
   24c10:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   24c12:	681c                	c.ld	a5,16(s0)
   24c14:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   24c16:	641c                	c.ld	a5,8(s0)
   24c18:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   24c1a:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24c1e:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24c22:	00040823          	sb	zero,16(s0)
class line_table::file {
   24c26:	701c                	c.ld	a5,32(s0)
   24c28:	f09c                	c.sd	a5,32(s1)
   24c2a:	741c                	c.ld	a5,40(s0)
   24c2c:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   24c2e:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24c30:	fb351fe3          	bne	a0,s3,24bee <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf8>
   24c34:	bf7d                	c.j	24bf2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24c36:	00893603          	ld	a2,8(s2)
   24c3a:	0605                	c.addi	a2,1
	if (__n == 0)
   24c3c:	ee1d                	c.bnez	a2,24c7a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x184>
      { _M_string_length = __length; }
   24c3e:	00893783          	ld	a5,8(s2)
   24c42:	e41c                	c.sd	a5,8(s0)
   24c44:	02093783          	ld	a5,32(s2)
   24c48:	f01c                	c.sd	a5,32(s0)
   24c4a:	02893783          	ld	a5,40(s2)
   24c4e:	f41c                	c.sd	a5,40(s0)
   24c50:	03090913          	addi	s2,s2,48
   24c54:	03040413          	addi	s0,s0,48
   24c58:	03098993          	addi	s3,s3,48
   24c5c:	03590263          	beq	s2,s5,24c80 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24c60:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24c64:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24c66:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24c6a:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   24c6c:	fd3785e3          	beq	a5,s3,24c36 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x140>
      { _M_dataplus._M_p = __p; }
   24c70:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24c72:	01093783          	ld	a5,16(s2)
   24c76:	e81c                	c.sd	a5,16(s0)
   24c78:	b7d9                	c.j	24c3e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x148>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24c7a:	8d7f10ef          	jal	ra,16550 <memcpy@plt>
   24c7e:	b7c1                	c.j	24c3e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x148>
   24c80:	414a87b3          	sub	a5,s5,s4
   24c84:	fd078793          	addi	a5,a5,-48
   24c88:	8391                	c.srli	a5,0x4
   24c8a:	0000a717          	auipc	a4,0xa
   24c8e:	9be73703          	ld	a4,-1602(a4) # 2e648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   24c92:	02e787b3          	mul	a5,a5,a4
   24c96:	0792                	c.slli	a5,0x4
   24c98:	8391                	c.srli	a5,0x4
   24c9a:	0785                	c.addi	a5,1
   24c9c:	00179713          	slli	a4,a5,0x1
   24ca0:	97ba                	c.add	a5,a4
   24ca2:	0792                	c.slli	a5,0x4
   24ca4:	94be                	c.add	s1,a5
	if (__p)
   24ca6:	000b0563          	beq	s6,zero,24cb0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ba>
   24caa:	855a                	c.mv	a0,s6
   24cac:	805f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   24cb0:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   24cb4:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   24cb8:	001c9793          	slli	a5,s9,0x1
   24cbc:	97e6                	c.add	a5,s9
   24cbe:	0792                	c.slli	a5,0x4
   24cc0:	97e2                	c.add	a5,s8
   24cc2:	00fbb823          	sd	a5,16(s7)
    }
   24cc6:	70e6                	c.ldsp	ra,120(sp)
   24cc8:	7446                	c.ldsp	s0,112(sp)
   24cca:	74a6                	c.ldsp	s1,104(sp)
   24ccc:	7906                	c.ldsp	s2,96(sp)
   24cce:	69e6                	c.ldsp	s3,88(sp)
   24cd0:	6a46                	c.ldsp	s4,80(sp)
   24cd2:	6aa6                	c.ldsp	s5,72(sp)
   24cd4:	6b06                	c.ldsp	s6,64(sp)
   24cd6:	7be2                	c.ldsp	s7,56(sp)
   24cd8:	7c42                	c.ldsp	s8,48(sp)
   24cda:	7ca2                	c.ldsp	s9,40(sp)
   24cdc:	7d02                	c.ldsp	s10,32(sp)
   24cde:	6109                	c.addi16sp	sp,128
   24ce0:	8082                	c.jr	ra
   24ce2:	bde9                	c.j	24bbc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc6>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   24ce4:	85e2                	c.mv	a1,s8
   24ce6:	8562                	c.mv	a0,s8
   24ce8:	00014317          	auipc	t1,0x14
   24cec:	5d033303          	ld	t1,1488(t1) # 392b8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x147f4>
   24cf0:	9302                	c.jalr	t1
   24cf2:	8562                	c.mv	a0,s8
   24cf4:	fbcf10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   24cf8:	bde1                	c.j	24bd0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda>
   24cfa:	416a04b3          	sub	s1,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24cfe:	0000ac97          	auipc	s9,0xa
   24d02:	942cbc83          	ld	s9,-1726(s9) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24d06:	001c9513          	slli	a0,s9,0x1
   24d0a:	9566                	c.add	a0,s9
   24d0c:	0512                	c.slli	a0,0x4
   24d0e:	fb2f10ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   24d12:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   24d14:	94e2                	c.add	s1,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24d16:	081c                	c.addi4spn	a5,sp,16
   24d18:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   24d1a:	600c                	c.ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   24d1c:	6410                	c.ld	a2,8(s0)
   24d1e:	4681                	c.li	a3,0
   24d20:	962e                	c.add	a2,a1
   24d22:	850a                	c.mv	a0,sp
   24d24:	00014317          	auipc	t1,0x14
   24d28:	5e433303          	ld	t1,1508(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14cba>
   24d2c:	9302                	c.jalr	t1
      }
   24d2e:	b5a1                	c.j	24b76 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>

0000000000024d30 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   24d30:	7119                	c.addi16sp	sp,-128
   24d32:	fc86                	c.sdsp	ra,120(sp)
   24d34:	f8a2                	c.sdsp	s0,112(sp)
   24d36:	f4a6                	c.sdsp	s1,104(sp)
   24d38:	f0ca                	c.sdsp	s2,96(sp)
   24d3a:	ecce                	c.sdsp	s3,88(sp)
   24d3c:	e8d2                	c.sdsp	s4,80(sp)
   24d3e:	e4d6                	c.sdsp	s5,72(sp)
   24d40:	e0da                	c.sdsp	s6,64(sp)
   24d42:	fc5e                	c.sdsp	s7,56(sp)
   24d44:	f862                	c.sdsp	s8,48(sp)
   24d46:	f466                	c.sdsp	s9,40(sp)
   24d48:	f06a                	c.sdsp	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24d4a:	00853a83          	ld	s5,8(a0)
   24d4e:	00053b03          	ld	s6,0(a0)
   24d52:	416a87b3          	sub	a5,s5,s6
   24d56:	8791                	c.srai	a5,0x4
   24d58:	00009717          	auipc	a4,0x9
   24d5c:	84873703          	ld	a4,-1976(a4) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   24d60:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   24d64:	0000a717          	auipc	a4,0xa
   24d68:	8dc73703          	ld	a4,-1828(a4) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24d6c:	02e78a63          	beq	a5,a4,24da0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>
   24d70:	8baa                	c.mv	s7,a0
   24d72:	8a2e                	c.mv	s4,a1
   24d74:	8432                	c.mv	s0,a2
   24d76:	8d2e                	c.mv	s10,a1
      return __a;
   24d78:	873e                	c.mv	a4,a5
      if (__a < __b)
   24d7a:	036a8963          	beq	s5,s6,24dac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   24d7e:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24d80:	1af76e63          	bltu	a4,a5,24f3c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x20c>
   24d84:	8cba                	c.mv	s9,a4
   24d86:	0000a797          	auipc	a5,0xa
   24d8a:	8ba7b783          	ld	a5,-1862(a5) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24d8e:	00e7f363          	bgeu	a5,a4,24d94 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x64>
   24d92:	8cbe                	c.mv	s9,a5
   24d94:	416a0933          	sub	s2,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   24d98:	4c01                	c.li	s8,0
   24d9a:	1a070e63          	beq	a4,zero,24f56 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x226>
   24d9e:	a26d                	c.j	24f48 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x218>
	  __throw_length_error(__N(__s));
   24da0:	00008517          	auipc	a0,0x8
   24da4:	5c850513          	addi	a0,a0,1480 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   24da8:	e38f10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   24dac:	4705                	c.li	a4,1
   24dae:	bfc1                	c.j	24d7e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24db0:	6410                	c.ld	a2,8(s0)
   24db2:	0605                	c.addi	a2,1
	if (__n == 0)
   24db4:	1a060c63          	beq	a2,zero,24f6c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x23c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24db8:	85a6                	c.mv	a1,s1
   24dba:	0808                	c.addi4spn	a0,sp,16
   24dbc:	f94f10ef          	jal	ra,16550 <memcpy@plt>
   24dc0:	a275                	c.j	24f6c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x23c>
      { return _M_dataplus._M_p; }
   24dc2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24dc4:	081c                	c.addi4spn	a5,sp,16
   24dc6:	00f50463          	beq	a0,a5,24dce <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x9e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24dca:	ee6f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   24dce:	010b0913          	addi	s2,s6,16
   24dd2:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   24dd4:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   24dd6:	076d1863          	bne	s10,s6,24e46 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x116>
	      ++__new_finish;
   24dda:	03048493          	addi	s1,s1,48
   24dde:	115d0663          	beq	s10,s5,24eea <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1ba>
   24de2:	010a0993          	addi	s3,s4,16
   24de6:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   24de8:	8426                	c.mv	s0,s1
   24dea:	a86d                	c.j	24ea4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x174>
      { return _M_dataplus._M_p; }
   24dec:	842a                	c.mv	s0,a0
   24dee:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24df0:	081c                	c.addi4spn	a5,sp,16
   24df2:	00f50463          	beq	a0,a5,24dfa <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xca>
   24df6:	ebaf10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      __catch(...)
   24dfa:	8522                	c.mv	a0,s0
   24dfc:	db4f10ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   24e00:	120c1363          	bne	s8,zero,24f26 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1f6>
      { return _M_dataplus._M_p; }
   24e04:	00093503          	ld	a0,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24e08:	01090493          	addi	s1,s2,16
	if (!_M_is_local())
   24e0c:	00950463          	beq	a0,s1,24e14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
   24e10:	ea0f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   24e14:	facf10ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   24e18:	842a                	c.mv	s0,a0
   24e1a:	817f10ef          	jal	ra,16630 <__cxa_end_catch@plt>
   24e1e:	8522                	c.mv	a0,s0
   24e20:	871f10ef          	jal	ra,16690 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24e24:	6410                	c.ld	a2,8(s0)
   24e26:	0605                	c.addi	a2,1
	if (__n == 0)
   24e28:	ca0d                	c.beqz	a2,24e5a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x12a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24e2a:	85ca                	c.mv	a1,s2
   24e2c:	f24f10ef          	jal	ra,16550 <memcpy@plt>
   24e30:	a02d                	c.j	24e5a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x12a>
   24e32:	e7ef10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   24e36:	03040413          	addi	s0,s0,48
   24e3a:	03048493          	addi	s1,s1,48
   24e3e:	03090913          	addi	s2,s2,48
   24e42:	f9a40ce3          	beq	s0,s10,24dda <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xaa>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24e46:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24e4a:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   24e4c:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24e4e:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   24e50:	fd278ae3          	beq	a5,s2,24e24 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xf4>
      { _M_dataplus._M_p = __p; }
   24e54:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   24e56:	681c                	c.ld	a5,16(s0)
   24e58:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   24e5a:	641c                	c.ld	a5,8(s0)
   24e5c:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   24e5e:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24e62:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24e66:	00040823          	sb	zero,16(s0)
   24e6a:	701c                	c.ld	a5,32(s0)
   24e6c:	f09c                	c.sd	a5,32(s1)
   24e6e:	741c                	c.ld	a5,40(s0)
   24e70:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   24e72:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24e74:	fb351fe3          	bne	a0,s3,24e32 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x102>
   24e78:	bf7d                	c.j	24e36 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x106>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24e7a:	00893603          	ld	a2,8(s2)
   24e7e:	0605                	c.addi	a2,1
	if (__n == 0)
   24e80:	ee1d                	c.bnez	a2,24ebe <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x18e>
      { _M_string_length = __length; }
   24e82:	00893783          	ld	a5,8(s2)
   24e86:	e41c                	c.sd	a5,8(s0)
   24e88:	02093783          	ld	a5,32(s2)
   24e8c:	f01c                	c.sd	a5,32(s0)
   24e8e:	02893783          	ld	a5,40(s2)
   24e92:	f41c                	c.sd	a5,40(s0)
   24e94:	03090913          	addi	s2,s2,48
   24e98:	03040413          	addi	s0,s0,48
   24e9c:	03098993          	addi	s3,s3,48
   24ea0:	03590263          	beq	s2,s5,24ec4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x194>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24ea4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24ea8:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24eaa:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24eae:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   24eb0:	fd3785e3          	beq	a5,s3,24e7a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14a>
      { _M_dataplus._M_p = __p; }
   24eb4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24eb6:	01093783          	ld	a5,16(s2)
   24eba:	e81c                	c.sd	a5,16(s0)
   24ebc:	b7d9                	c.j	24e82 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x152>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24ebe:	e92f10ef          	jal	ra,16550 <memcpy@plt>
   24ec2:	b7c1                	c.j	24e82 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x152>
   24ec4:	414a87b3          	sub	a5,s5,s4
   24ec8:	fd078793          	addi	a5,a5,-48
   24ecc:	8391                	c.srli	a5,0x4
   24ece:	00009717          	auipc	a4,0x9
   24ed2:	77a73703          	ld	a4,1914(a4) # 2e648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   24ed6:	02e787b3          	mul	a5,a5,a4
   24eda:	0792                	c.slli	a5,0x4
   24edc:	8391                	c.srli	a5,0x4
   24ede:	0785                	c.addi	a5,1
   24ee0:	00179713          	slli	a4,a5,0x1
   24ee4:	97ba                	c.add	a5,a4
   24ee6:	0792                	c.slli	a5,0x4
   24ee8:	94be                	c.add	s1,a5
	if (__p)
   24eea:	000b0563          	beq	s6,zero,24ef4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1c4>
   24eee:	855a                	c.mv	a0,s6
   24ef0:	dc0f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   24ef4:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   24ef8:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   24efc:	001c9793          	slli	a5,s9,0x1
   24f00:	97e6                	c.add	a5,s9
   24f02:	0792                	c.slli	a5,0x4
   24f04:	97e2                	c.add	a5,s8
   24f06:	00fbb823          	sd	a5,16(s7)
    }
   24f0a:	70e6                	c.ldsp	ra,120(sp)
   24f0c:	7446                	c.ldsp	s0,112(sp)
   24f0e:	74a6                	c.ldsp	s1,104(sp)
   24f10:	7906                	c.ldsp	s2,96(sp)
   24f12:	69e6                	c.ldsp	s3,88(sp)
   24f14:	6a46                	c.ldsp	s4,80(sp)
   24f16:	6aa6                	c.ldsp	s5,72(sp)
   24f18:	6b06                	c.ldsp	s6,64(sp)
   24f1a:	7be2                	c.ldsp	s7,56(sp)
   24f1c:	7c42                	c.ldsp	s8,48(sp)
   24f1e:	7ca2                	c.ldsp	s9,40(sp)
   24f20:	7d02                	c.ldsp	s10,32(sp)
   24f22:	6109                	c.addi16sp	sp,128
   24f24:	8082                	c.jr	ra
   24f26:	85e2                	c.mv	a1,s8
   24f28:	8562                	c.mv	a0,s8
   24f2a:	00014317          	auipc	t1,0x14
   24f2e:	38e33303          	ld	t1,910(t1) # 392b8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x147f4>
   24f32:	9302                	c.jalr	t1
   24f34:	8562                	c.mv	a0,s8
   24f36:	d7af10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   24f3a:	bde9                	c.j	24e14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
   24f3c:	416a0933          	sub	s2,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24f40:	00009c97          	auipc	s9,0x9
   24f44:	700cbc83          	ld	s9,1792(s9) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24f48:	001c9513          	slli	a0,s9,0x1
   24f4c:	9566                	c.add	a0,s9
   24f4e:	0512                	c.slli	a0,0x4
   24f50:	d70f10ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   24f54:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   24f56:	9962                	c.add	s2,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24f58:	081c                	c.addi4spn	a5,sp,16
   24f5a:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   24f5c:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24f5e:	01040493          	addi	s1,s0,16
	if (__str._M_is_local())
   24f62:	e49787e3          	beq	a5,s1,24db0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x80>
      { _M_dataplus._M_p = __p; }
   24f66:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   24f68:	681c                	c.ld	a5,16(s0)
   24f6a:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   24f6c:	641c                	c.ld	a5,8(s0)
   24f6e:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   24f70:	e004                	c.sd	s1,0(s0)
      { _M_string_length = __length; }
   24f72:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24f76:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   24f7a:	4681                	c.li	a3,0
   24f7c:	4601                	c.li	a2,0
   24f7e:	858a                	c.mv	a1,sp
   24f80:	854a                	c.mv	a0,s2
   24f82:	b58fd0ef          	jal	ra,222da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   24f86:	bd35                	c.j	24dc2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>

0000000000024f88 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   24f88:	715d                	c.addi16sp	sp,-80
   24f8a:	e486                	c.sdsp	ra,72(sp)
   24f8c:	e0a2                	c.sdsp	s0,64(sp)
   24f8e:	fc26                	c.sdsp	s1,56(sp)
   24f90:	f84a                	c.sdsp	s2,48(sp)
   24f92:	f44e                	c.sdsp	s3,40(sp)
   24f94:	84aa                	c.mv	s1,a0
   24f96:	842e                	c.mv	s0,a1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   24f98:	00853903          	ld	s2,8(a0)
   24f9c:	691c                	c.ld	a5,16(a0)
   24f9e:	06f90e63          	beq	s2,a5,2501a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24fa2:	081c                	c.addi4spn	a5,sp,16
   24fa4:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   24fa6:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24fa8:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   24fac:	03378463          	beq	a5,s3,24fd4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
      { _M_dataplus._M_p = __p; }
   24fb0:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   24fb2:	699c                	c.ld	a5,16(a1)
   24fb4:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   24fb6:	641c                	c.ld	a5,8(s0)
   24fb8:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   24fba:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24fbe:	00043423          	sd	zero,8(s0)
   24fc2:	00040823          	sb	zero,16(s0)
   24fc6:	4681                	c.li	a3,0
   24fc8:	4601                	c.li	a2,0
   24fca:	858a                	c.mv	a1,sp
   24fcc:	854a                	c.mv	a0,s2
   24fce:	b0cfd0ef          	jal	ra,222da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   24fd2:	a809                	c.j	24fe4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24fd4:	6590                	c.ld	a2,8(a1)
   24fd6:	0605                	c.addi	a2,1
	if (__n == 0)
   24fd8:	de79                	c.beqz	a2,24fb6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24fda:	85ce                	c.mv	a1,s3
   24fdc:	0808                	c.addi4spn	a0,sp,16
   24fde:	d72f10ef          	jal	ra,16550 <memcpy@plt>
   24fe2:	bfd1                	c.j	24fb6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e>
      { return _M_dataplus._M_p; }
   24fe4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24fe6:	081c                	c.addi4spn	a5,sp,16
   24fe8:	00f50463          	beq	a0,a5,24ff0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24fec:	cc4f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   24ff0:	649c                	c.ld	a5,8(s1)
   24ff2:	03078793          	addi	a5,a5,48
   24ff6:	e49c                	c.sd	a5,8(s1)
      }
   24ff8:	60a6                	c.ldsp	ra,72(sp)
   24ffa:	6406                	c.ldsp	s0,64(sp)
   24ffc:	74e2                	c.ldsp	s1,56(sp)
   24ffe:	7942                	c.ldsp	s2,48(sp)
   25000:	79a2                	c.ldsp	s3,40(sp)
   25002:	6161                	c.addi16sp	sp,80
   25004:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   25006:	842a                	c.mv	s0,a0
   25008:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2500a:	081c                	c.addi4spn	a5,sp,16
   2500c:	00f50463          	beq	a0,a5,25014 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x8c>
   25010:	ca0f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   25014:	8522                	c.mv	a0,s0
   25016:	e7af10ef          	jal	ra,16690 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2501a:	862e                	c.mv	a2,a1
   2501c:	85ca                	c.mv	a1,s2
   2501e:	00014317          	auipc	t1,0x14
   25022:	4a233303          	ld	t1,1186(t1) # 394c0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14790>
   25026:	9302                	c.jalr	t1
      }
   25028:	bfc1                	c.j	24ff8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>

000000000002502a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2502a:	7175                	c.addi16sp	sp,-144
   2502c:	e506                	c.sdsp	ra,136(sp)
   2502e:	e122                	c.sdsp	s0,128(sp)
   25030:	fca6                	c.sdsp	s1,120(sp)
   25032:	f8ca                	c.sdsp	s2,112(sp)
   25034:	f4ce                	c.sdsp	s3,104(sp)
   25036:	f0d2                	c.sdsp	s4,96(sp)
   25038:	ecd6                	c.sdsp	s5,88(sp)
   2503a:	e8da                	c.sdsp	s6,80(sp)
   2503c:	e4de                	c.sdsp	s7,72(sp)
   2503e:	e0e2                	c.sdsp	s8,64(sp)
   25040:	fc66                	c.sdsp	s9,56(sp)
   25042:	f86a                	c.sdsp	s10,48(sp)
   25044:	f46e                	c.sdsp	s11,40(sp)
   25046:	893a                	c.mv	s2,a4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   25048:	00853a83          	ld	s5,8(a0)
   2504c:	00053b03          	ld	s6,0(a0)
   25050:	416a87b3          	sub	a5,s5,s6
   25054:	8791                	c.srai	a5,0x4
   25056:	00008717          	auipc	a4,0x8
   2505a:	54a73703          	ld	a4,1354(a4) # 2d5a0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2505e:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   25062:	00009717          	auipc	a4,0x9
   25066:	5de73703          	ld	a4,1502(a4) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2506a:	02e78b63          	beq	a5,a4,250a0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x76>
   2506e:	8baa                	c.mv	s7,a0
   25070:	8a2e                	c.mv	s4,a1
   25072:	8432                	c.mv	s0,a2
   25074:	84b6                	c.mv	s1,a3
   25076:	8d2e                	c.mv	s10,a1
      return __a;
   25078:	873e                	c.mv	a4,a5
      if (__a < __b)
   2507a:	036a8963          	beq	s5,s6,250ac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x82>
	const size_type __len = size() + (std::max)(size(), __n);
   2507e:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25080:	1af76e63          	bltu	a4,a5,2523c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x212>
   25084:	8cba                	c.mv	s9,a4
   25086:	00009797          	auipc	a5,0x9
   2508a:	5ba7b783          	ld	a5,1466(a5) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2508e:	00e7f363          	bgeu	a5,a4,25094 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x6a>
   25092:	8cbe                	c.mv	s9,a5
   25094:	416a09b3          	sub	s3,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   25098:	4c01                	c.li	s8,0
   2509a:	1a070e63          	beq	a4,zero,25256 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x22c>
   2509e:	a26d                	c.j	25248 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x21e>
	  __throw_length_error(__N(__s));
   250a0:	00008517          	auipc	a0,0x8
   250a4:	2c850513          	addi	a0,a0,712 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   250a8:	b38f10ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   250ac:	4705                	c.li	a4,1
   250ae:	bfc1                	c.j	2507e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x54>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   250b0:	6410                	c.ld	a2,8(s0)
   250b2:	0605                	c.addi	a2,1
	if (__n == 0)
   250b4:	1a060c63          	beq	a2,zero,2526c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x242>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   250b8:	85ee                	c.mv	a1,s11
   250ba:	0808                	c.addi4spn	a0,sp,16
   250bc:	c94f10ef          	jal	ra,16550 <memcpy@plt>
   250c0:	a275                	c.j	2526c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x242>
      { return _M_dataplus._M_p; }
   250c2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   250c4:	081c                	c.addi4spn	a5,sp,16
   250c6:	00f50463          	beq	a0,a5,250ce <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   250ca:	be6f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   250ce:	010b0913          	addi	s2,s6,16
   250d2:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   250d4:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   250d6:	076d1763          	bne	s10,s6,25144 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x11a>
	      ++__new_finish;
   250da:	03048493          	addi	s1,s1,48
   250de:	115d0563          	beq	s10,s5,251e8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1be>
   250e2:	010a0993          	addi	s3,s4,16
   250e6:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   250e8:	8426                	c.mv	s0,s1
   250ea:	a865                	c.j	251a2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x178>
      { return _M_dataplus._M_p; }
   250ec:	842a                	c.mv	s0,a0
   250ee:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   250f0:	081c                	c.addi4spn	a5,sp,16
   250f2:	00f50463          	beq	a0,a5,250fa <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xd0>
   250f6:	bbaf10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      __catch(...)
   250fa:	8522                	c.mv	a0,s0
   250fc:	ab4f10ef          	jal	ra,163b0 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   25100:	120c1363          	bne	s8,zero,25226 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1fc>
      { return _M_dataplus._M_p; }
   25104:	0009b503          	ld	a0,0(s3)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25108:	09c1                	c.addi	s3,16
	if (!_M_is_local())
   2510a:	01350463          	beq	a0,s3,25112 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xe8>
   2510e:	ba2f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	  __throw_exception_again;
   25112:	caef10ef          	jal	ra,165c0 <__cxa_rethrow@plt>
      __catch(...)
   25116:	842a                	c.mv	s0,a0
   25118:	d18f10ef          	jal	ra,16630 <__cxa_end_catch@plt>
   2511c:	8522                	c.mv	a0,s0
   2511e:	d72f10ef          	jal	ra,16690 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25122:	6410                	c.ld	a2,8(s0)
   25124:	0605                	c.addi	a2,1
	if (__n == 0)
   25126:	ca0d                	c.beqz	a2,25158 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x12e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25128:	85ca                	c.mv	a1,s2
   2512a:	c26f10ef          	jal	ra,16550 <memcpy@plt>
   2512e:	a02d                	c.j	25158 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x12e>
   25130:	b80f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   25134:	03040413          	addi	s0,s0,48
   25138:	03048493          	addi	s1,s1,48
   2513c:	03090913          	addi	s2,s2,48
   25140:	f9a40de3          	beq	s0,s10,250da <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   25144:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25148:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2514a:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2514c:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   2514e:	fd278ae3          	beq	a5,s2,25122 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xf8>
      { _M_dataplus._M_p = __p; }
   25152:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   25154:	681c                	c.ld	a5,16(s0)
   25156:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   25158:	641c                	c.ld	a5,8(s0)
   2515a:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2515c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   25160:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25164:	00040823          	sb	zero,16(s0)
   25168:	701c                	c.ld	a5,32(s0)
   2516a:	f09c                	c.sd	a5,32(s1)
   2516c:	741c                	c.ld	a5,40(s0)
   2516e:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   25170:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   25172:	fb351fe3          	bne	a0,s3,25130 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x106>
   25176:	bf7d                	c.j	25134 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x10a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25178:	00893603          	ld	a2,8(s2)
   2517c:	0605                	c.addi	a2,1
	if (__n == 0)
   2517e:	ee1d                	c.bnez	a2,251bc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x192>
      { _M_string_length = __length; }
   25180:	00893783          	ld	a5,8(s2)
   25184:	e41c                	c.sd	a5,8(s0)
   25186:	02093783          	ld	a5,32(s2)
   2518a:	f01c                	c.sd	a5,32(s0)
   2518c:	02893783          	ld	a5,40(s2)
   25190:	f41c                	c.sd	a5,40(s0)
   25192:	03090913          	addi	s2,s2,48
   25196:	03040413          	addi	s0,s0,48
   2519a:	03098993          	addi	s3,s3,48
   2519e:	03590263          	beq	s2,s5,251c2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x198>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   251a2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   251a6:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   251a8:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   251ac:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   251ae:	fd3785e3          	beq	a5,s3,25178 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x14e>
      { _M_dataplus._M_p = __p; }
   251b2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   251b4:	01093783          	ld	a5,16(s2)
   251b8:	e81c                	c.sd	a5,16(s0)
   251ba:	b7d9                	c.j	25180 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x156>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   251bc:	b94f10ef          	jal	ra,16550 <memcpy@plt>
   251c0:	b7c1                	c.j	25180 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x156>
   251c2:	414a87b3          	sub	a5,s5,s4
   251c6:	fd078793          	addi	a5,a5,-48
   251ca:	8391                	c.srli	a5,0x4
   251cc:	00009717          	auipc	a4,0x9
   251d0:	47c73703          	ld	a4,1148(a4) # 2e648 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   251d4:	02e787b3          	mul	a5,a5,a4
   251d8:	0792                	c.slli	a5,0x4
   251da:	8391                	c.srli	a5,0x4
   251dc:	0785                	c.addi	a5,1
   251de:	00179713          	slli	a4,a5,0x1
   251e2:	97ba                	c.add	a5,a4
   251e4:	0792                	c.slli	a5,0x4
   251e6:	94be                	c.add	s1,a5
	if (__p)
   251e8:	000b0563          	beq	s6,zero,251f2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1c8>
   251ec:	855a                	c.mv	a0,s6
   251ee:	ac2f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   251f2:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   251f6:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   251fa:	001c9793          	slli	a5,s9,0x1
   251fe:	97e6                	c.add	a5,s9
   25200:	0792                	c.slli	a5,0x4
   25202:	97e2                	c.add	a5,s8
   25204:	00fbb823          	sd	a5,16(s7)
    }
   25208:	60aa                	c.ldsp	ra,136(sp)
   2520a:	640a                	c.ldsp	s0,128(sp)
   2520c:	74e6                	c.ldsp	s1,120(sp)
   2520e:	7946                	c.ldsp	s2,112(sp)
   25210:	79a6                	c.ldsp	s3,104(sp)
   25212:	7a06                	c.ldsp	s4,96(sp)
   25214:	6ae6                	c.ldsp	s5,88(sp)
   25216:	6b46                	c.ldsp	s6,80(sp)
   25218:	6ba6                	c.ldsp	s7,72(sp)
   2521a:	6c06                	c.ldsp	s8,64(sp)
   2521c:	7ce2                	c.ldsp	s9,56(sp)
   2521e:	7d42                	c.ldsp	s10,48(sp)
   25220:	7da2                	c.ldsp	s11,40(sp)
   25222:	6149                	c.addi16sp	sp,144
   25224:	8082                	c.jr	ra
   25226:	85e2                	c.mv	a1,s8
   25228:	8562                	c.mv	a0,s8
   2522a:	00014317          	auipc	t1,0x14
   2522e:	08e33303          	ld	t1,142(t1) # 392b8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x147f4>
   25232:	9302                	c.jalr	t1
   25234:	8562                	c.mv	a0,s8
   25236:	a7af10ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2523a:	bde1                	c.j	25112 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xe8>
   2523c:	416a09b3          	sub	s3,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25240:	00009c97          	auipc	s9,0x9
   25244:	400cbc83          	ld	s9,1024(s9) # 2e640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   25248:	001c9513          	slli	a0,s9,0x1
   2524c:	9566                	c.add	a0,s9
   2524e:	0512                	c.slli	a0,0x4
   25250:	a70f10ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   25254:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   25256:	99e2                	c.add	s3,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25258:	081c                	c.addi4spn	a5,sp,16
   2525a:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   2525c:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2525e:	01040d93          	addi	s11,s0,16
	if (__str._M_is_local())
   25262:	e5b787e3          	beq	a5,s11,250b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x86>
      { _M_dataplus._M_p = __p; }
   25266:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   25268:	681c                	c.ld	a5,16(s0)
   2526a:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   2526c:	641c                	c.ld	a5,8(s0)
   2526e:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   25270:	01b43023          	sd	s11,0(s0)
      { _M_string_length = __length; }
   25274:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25278:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2527c:	00093683          	ld	a3,0(s2)
   25280:	6090                	c.ld	a2,0(s1)
   25282:	858a                	c.mv	a1,sp
   25284:	854e                	c.mv	a0,s3
   25286:	854fd0ef          	jal	ra,222da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2528a:	bd25                	c.j	250c2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x98>

000000000002528c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2528c:	711d                	c.addi16sp	sp,-96
   2528e:	ec86                	c.sdsp	ra,88(sp)
   25290:	e8a2                	c.sdsp	s0,80(sp)
   25292:	e4a6                	c.sdsp	s1,72(sp)
   25294:	e0ca                	c.sdsp	s2,64(sp)
   25296:	fc4e                	c.sdsp	s3,56(sp)
   25298:	f852                	c.sdsp	s4,48(sp)
   2529a:	f456                	c.sdsp	s5,40(sp)
   2529c:	8aaa                	c.mv	s5,a0
   2529e:	842e                	c.mv	s0,a1
   252a0:	84b2                	c.mv	s1,a2
   252a2:	8936                	c.mv	s2,a3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   252a4:	00853983          	ld	s3,8(a0)
   252a8:	691c                	c.ld	a5,16(a0)
   252aa:	08f98363          	beq	s3,a5,25330 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   252ae:	081c                	c.addi4spn	a5,sp,16
   252b0:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   252b2:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   252b4:	01058a13          	addi	s4,a1,16
	if (__str._M_is_local())
   252b8:	03478563          	beq	a5,s4,252e2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x56>
      { _M_dataplus._M_p = __p; }
   252bc:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   252be:	699c                	c.ld	a5,16(a1)
   252c0:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   252c2:	641c                	c.ld	a5,8(s0)
   252c4:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   252c6:	01443023          	sd	s4,0(s0)
      { _M_string_length = __length; }
   252ca:	00043423          	sd	zero,8(s0)
   252ce:	00040823          	sb	zero,16(s0)
   252d2:	00093683          	ld	a3,0(s2)
   252d6:	6090                	c.ld	a2,0(s1)
   252d8:	858a                	c.mv	a1,sp
   252da:	854e                	c.mv	a0,s3
   252dc:	ffffc0ef          	jal	ra,222da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   252e0:	a809                	c.j	252f2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x66>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   252e2:	6590                	c.ld	a2,8(a1)
   252e4:	0605                	c.addi	a2,1
	if (__n == 0)
   252e6:	de71                	c.beqz	a2,252c2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   252e8:	85d2                	c.mv	a1,s4
   252ea:	0808                	c.addi4spn	a0,sp,16
   252ec:	a64f10ef          	jal	ra,16550 <memcpy@plt>
   252f0:	bfc9                	c.j	252c2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x36>
      { return _M_dataplus._M_p; }
   252f2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   252f4:	081c                	c.addi4spn	a5,sp,16
   252f6:	00f50463          	beq	a0,a5,252fe <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x72>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   252fa:	9b6f10ef          	jal	ra,164b0 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   252fe:	008ab783          	ld	a5,8(s5)
   25302:	03078793          	addi	a5,a5,48
   25306:	00fab423          	sd	a5,8(s5)
      }
   2530a:	60e6                	c.ldsp	ra,88(sp)
   2530c:	6446                	c.ldsp	s0,80(sp)
   2530e:	64a6                	c.ldsp	s1,72(sp)
   25310:	6906                	c.ldsp	s2,64(sp)
   25312:	79e2                	c.ldsp	s3,56(sp)
   25314:	7a42                	c.ldsp	s4,48(sp)
   25316:	7aa2                	c.ldsp	s5,40(sp)
   25318:	6125                	c.addi16sp	sp,96
   2531a:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   2531c:	842a                	c.mv	s0,a0
   2531e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25320:	081c                	c.addi4spn	a5,sp,16
   25322:	00f50463          	beq	a0,a5,2532a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x9e>
   25326:	98af10ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2532a:	8522                	c.mv	a0,s0
   2532c:	b64f10ef          	jal	ra,16690 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   25330:	8736                	c.mv	a4,a3
   25332:	86b2                	c.mv	a3,a2
   25334:	862e                	c.mv	a2,a1
   25336:	85ce                	c.mv	a1,s3
   25338:	00014317          	auipc	t1,0x14
   2533c:	19833303          	ld	t1,408(t1) # 394d0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x144a6>
   25340:	9302                	c.jalr	t1
      }
   25342:	b7e1                	c.j	2530a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x7e>

0000000000025344 <dwarf::at_sibling(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x0X
//

AT_REFERENCE(sibling);
   25344:	7139                	c.addi16sp	sp,-64
   25346:	fc06                	c.sdsp	ra,56(sp)
   25348:	f822                	c.sdsp	s0,48(sp)
   2534a:	f426                	c.sdsp	s1,40(sp)
   2534c:	842a                	c.mv	s0,a0
   2534e:	4605                	c.li	a2,1
   25350:	0024                	c.addi4spn	s1,sp,8
   25352:	8526                	c.mv	a0,s1
   25354:	b04f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25358:	85a6                	c.mv	a1,s1
   2535a:	8522                	c.mv	a0,s0
   2535c:	94df80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25360:	8522                	c.mv	a0,s0
   25362:	70e2                	c.ldsp	ra,56(sp)
   25364:	7442                	c.ldsp	s0,48(sp)
   25366:	74a2                	c.ldsp	s1,40(sp)
   25368:	6121                	c.addi16sp	sp,64
   2536a:	8082                	c.jr	ra

000000000002536c <dwarf::at_name[abi:cxx11](dwarf::die const&)>:
// XXX location
AT_STRING(name);
   2536c:	7139                	c.addi16sp	sp,-64
   2536e:	fc06                	c.sdsp	ra,56(sp)
   25370:	f822                	c.sdsp	s0,48(sp)
   25372:	f426                	c.sdsp	s1,40(sp)
   25374:	842a                	c.mv	s0,a0
   25376:	460d                	c.li	a2,3
   25378:	0024                	c.addi4spn	s1,sp,8
   2537a:	8526                	c.mv	a0,s1
   2537c:	adcf60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25380:	85a6                	c.mv	a1,s1
   25382:	8522                	c.mv	a0,s0
   25384:	8e1f80ef          	jal	ra,1dc64 <dwarf::value::as_string[abi:cxx11]() const>
   25388:	8522                	c.mv	a0,s0
   2538a:	70e2                	c.ldsp	ra,56(sp)
   2538c:	7442                	c.ldsp	s0,48(sp)
   2538e:	74a2                	c.ldsp	s1,40(sp)
   25390:	6121                	c.addi16sp	sp,64
   25392:	8082                	c.jr	ra

0000000000025394 <dwarf::at_ordering(dwarf::die const&)>:
AT_ENUM(ordering, DW_ORD);
   25394:	7179                	c.addi16sp	sp,-48
   25396:	f406                	c.sdsp	ra,40(sp)
   25398:	f022                	c.sdsp	s0,32(sp)
   2539a:	85aa                	c.mv	a1,a0
   2539c:	4625                	c.li	a2,9
   2539e:	0020                	c.addi4spn	s0,sp,8
   253a0:	8522                	c.mv	a0,s0
   253a2:	ab6f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   253a6:	8522                	c.mv	a0,s0
   253a8:	fdbf60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   253ac:	2501                	c.addiw	a0,0
   253ae:	70a2                	c.ldsp	ra,40(sp)
   253b0:	7402                	c.ldsp	s0,32(sp)
   253b2:	6145                	c.addi16sp	sp,48
   253b4:	8082                	c.jr	ra

00000000000253b6 <dwarf::at_low_pc(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x1X
//

// XXX stmt_list
AT_ADDRESS(low_pc);
   253b6:	7179                	c.addi16sp	sp,-48
   253b8:	f406                	c.sdsp	ra,40(sp)
   253ba:	f022                	c.sdsp	s0,32(sp)
   253bc:	85aa                	c.mv	a1,a0
   253be:	4645                	c.li	a2,17
   253c0:	0020                	c.addi4spn	s0,sp,8
   253c2:	8522                	c.mv	a0,s0
   253c4:	a94f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   253c8:	8522                	c.mv	a0,s0
   253ca:	9b9f60ef          	jal	ra,1bd82 <dwarf::value::as_address() const>
   253ce:	70a2                	c.ldsp	ra,40(sp)
   253d0:	7402                	c.ldsp	s0,32(sp)
   253d2:	6145                	c.addi16sp	sp,48
   253d4:	8082                	c.jr	ra

00000000000253d6 <dwarf::at_language(dwarf::die const&)>:
  default:
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
                       to_string(v.get_type()));
  }
}
AT_ENUM(language, DW_LANG);
   253d6:	7179                	c.addi16sp	sp,-48
   253d8:	f406                	c.sdsp	ra,40(sp)
   253da:	f022                	c.sdsp	s0,32(sp)
   253dc:	85aa                	c.mv	a1,a0
   253de:	464d                	c.li	a2,19
   253e0:	0020                	c.addi4spn	s0,sp,8
   253e2:	8522                	c.mv	a0,s0
   253e4:	a74f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   253e8:	8522                	c.mv	a0,s0
   253ea:	f99f60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   253ee:	2501                	c.addiw	a0,0
   253f0:	70a2                	c.ldsp	ra,40(sp)
   253f2:	7402                	c.ldsp	s0,32(sp)
   253f4:	6145                	c.addi16sp	sp,48
   253f6:	8082                	c.jr	ra

00000000000253f8 <dwarf::at_discr(dwarf::die const&)>:
AT_REFERENCE(discr);
   253f8:	7139                	c.addi16sp	sp,-64
   253fa:	fc06                	c.sdsp	ra,56(sp)
   253fc:	f822                	c.sdsp	s0,48(sp)
   253fe:	f426                	c.sdsp	s1,40(sp)
   25400:	842a                	c.mv	s0,a0
   25402:	4655                	c.li	a2,21
   25404:	0024                	c.addi4spn	s1,sp,8
   25406:	8526                	c.mv	a0,s1
   25408:	a50f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2540c:	85a6                	c.mv	a1,s1
   2540e:	8522                	c.mv	a0,s0
   25410:	899f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25414:	8522                	c.mv	a0,s0
   25416:	70e2                	c.ldsp	ra,56(sp)
   25418:	7442                	c.ldsp	s0,48(sp)
   2541a:	74a2                	c.ldsp	s1,40(sp)
   2541c:	6121                	c.addi16sp	sp,64
   2541e:	8082                	c.jr	ra

0000000000025420 <dwarf::at_discr_value(dwarf::die const&)>:
AT_ANY(discr_value); // XXX Signed or unsigned
   25420:	1141                	c.addi	sp,-16
   25422:	e406                	c.sdsp	ra,8(sp)
   25424:	e022                	c.sdsp	s0,0(sp)
   25426:	842a                	c.mv	s0,a0
   25428:	4659                	c.li	a2,22
   2542a:	a2ef60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2542e:	8522                	c.mv	a0,s0
   25430:	60a2                	c.ldsp	ra,8(sp)
   25432:	6402                	c.ldsp	s0,0(sp)
   25434:	0141                	c.addi	sp,16
   25436:	8082                	c.jr	ra

0000000000025438 <dwarf::at_visibility(dwarf::die const&)>:
AT_ENUM(visibility, DW_VIS);
   25438:	7179                	c.addi16sp	sp,-48
   2543a:	f406                	c.sdsp	ra,40(sp)
   2543c:	f022                	c.sdsp	s0,32(sp)
   2543e:	85aa                	c.mv	a1,a0
   25440:	465d                	c.li	a2,23
   25442:	0020                	c.addi4spn	s0,sp,8
   25444:	8522                	c.mv	a0,s0
   25446:	a12f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2544a:	8522                	c.mv	a0,s0
   2544c:	f37f60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   25450:	2501                	c.addiw	a0,0
   25452:	70a2                	c.ldsp	ra,40(sp)
   25454:	7402                	c.ldsp	s0,32(sp)
   25456:	6145                	c.addi16sp	sp,48
   25458:	8082                	c.jr	ra

000000000002545a <dwarf::at_import(dwarf::die const&)>:
AT_REFERENCE(import);
   2545a:	7139                	c.addi16sp	sp,-64
   2545c:	fc06                	c.sdsp	ra,56(sp)
   2545e:	f822                	c.sdsp	s0,48(sp)
   25460:	f426                	c.sdsp	s1,40(sp)
   25462:	842a                	c.mv	s0,a0
   25464:	4661                	c.li	a2,24
   25466:	0024                	c.addi4spn	s1,sp,8
   25468:	8526                	c.mv	a0,s1
   2546a:	9eef60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2546e:	85a6                	c.mv	a1,s1
   25470:	8522                	c.mv	a0,s0
   25472:	837f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25476:	8522                	c.mv	a0,s0
   25478:	70e2                	c.ldsp	ra,56(sp)
   2547a:	7442                	c.ldsp	s0,48(sp)
   2547c:	74a2                	c.ldsp	s1,40(sp)
   2547e:	6121                	c.addi16sp	sp,64
   25480:	8082                	c.jr	ra

0000000000025482 <dwarf::at_common_reference(dwarf::die const&)>:
// XXX string_length
AT_REFERENCE(common_reference);
   25482:	7139                	c.addi16sp	sp,-64
   25484:	fc06                	c.sdsp	ra,56(sp)
   25486:	f822                	c.sdsp	s0,48(sp)
   25488:	f426                	c.sdsp	s1,40(sp)
   2548a:	842a                	c.mv	s0,a0
   2548c:	4669                	c.li	a2,26
   2548e:	0024                	c.addi4spn	s1,sp,8
   25490:	8526                	c.mv	a0,s1
   25492:	9c6f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25496:	85a6                	c.mv	a1,s1
   25498:	8522                	c.mv	a0,s0
   2549a:	80ff80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   2549e:	8522                	c.mv	a0,s0
   254a0:	70e2                	c.ldsp	ra,56(sp)
   254a2:	7442                	c.ldsp	s0,48(sp)
   254a4:	74a2                	c.ldsp	s1,40(sp)
   254a6:	6121                	c.addi16sp	sp,64
   254a8:	8082                	c.jr	ra

00000000000254aa <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>:
AT_STRING(comp_dir);
   254aa:	7139                	c.addi16sp	sp,-64
   254ac:	fc06                	c.sdsp	ra,56(sp)
   254ae:	f822                	c.sdsp	s0,48(sp)
   254b0:	f426                	c.sdsp	s1,40(sp)
   254b2:	842a                	c.mv	s0,a0
   254b4:	466d                	c.li	a2,27
   254b6:	0024                	c.addi4spn	s1,sp,8
   254b8:	8526                	c.mv	a0,s1
   254ba:	99ef60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   254be:	85a6                	c.mv	a1,s1
   254c0:	8522                	c.mv	a0,s0
   254c2:	fa2f80ef          	jal	ra,1dc64 <dwarf::value::as_string[abi:cxx11]() const>
   254c6:	8522                	c.mv	a0,s0
   254c8:	70e2                	c.ldsp	ra,56(sp)
   254ca:	7442                	c.ldsp	s0,48(sp)
   254cc:	74a2                	c.ldsp	s1,40(sp)
   254ce:	6121                	c.addi16sp	sp,64
   254d0:	8082                	c.jr	ra

00000000000254d2 <dwarf::at_const_value(dwarf::die const&)>:
AT_ANY(const_value);
   254d2:	1141                	c.addi	sp,-16
   254d4:	e406                	c.sdsp	ra,8(sp)
   254d6:	e022                	c.sdsp	s0,0(sp)
   254d8:	842a                	c.mv	s0,a0
   254da:	4671                	c.li	a2,28
   254dc:	97cf60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   254e0:	8522                	c.mv	a0,s0
   254e2:	60a2                	c.ldsp	ra,8(sp)
   254e4:	6402                	c.ldsp	s0,0(sp)
   254e6:	0141                	c.addi	sp,16
   254e8:	8082                	c.jr	ra

00000000000254ea <dwarf::at_containing_type(dwarf::die const&)>:
AT_REFERENCE(containing_type);
   254ea:	7139                	c.addi16sp	sp,-64
   254ec:	fc06                	c.sdsp	ra,56(sp)
   254ee:	f822                	c.sdsp	s0,48(sp)
   254f0:	f426                	c.sdsp	s1,40(sp)
   254f2:	842a                	c.mv	s0,a0
   254f4:	4675                	c.li	a2,29
   254f6:	0024                	c.addi4spn	s1,sp,8
   254f8:	8526                	c.mv	a0,s1
   254fa:	95ef60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   254fe:	85a6                	c.mv	a1,s1
   25500:	8522                	c.mv	a0,s0
   25502:	fa6f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25506:	8522                	c.mv	a0,s0
   25508:	70e2                	c.ldsp	ra,56(sp)
   2550a:	7442                	c.ldsp	s0,48(sp)
   2550c:	74a2                	c.ldsp	s1,40(sp)
   2550e:	6121                	c.addi16sp	sp,64
   25510:	8082                	c.jr	ra

0000000000025512 <dwarf::at_inline(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x2X
//

DW_INL at_inline(const die &d) {
   25512:	7179                	c.addi16sp	sp,-48
   25514:	f406                	c.sdsp	ra,40(sp)
   25516:	f022                	c.sdsp	s0,32(sp)
   25518:	85aa                	c.mv	a1,a0
  // XXX Missing attribute is equivalent to DW_INL_not_inlined
  // (DWARF4 section 3.3.8)
  return (DW_INL)d[DW_AT::inline_].as_uconstant();
   2551a:	02000613          	addi	a2,zero,32
   2551e:	0020                	c.addi4spn	s0,sp,8
   25520:	8522                	c.mv	a0,s0
   25522:	936f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25526:	8522                	c.mv	a0,s0
   25528:	e5bf60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
}
   2552c:	2501                	c.addiw	a0,0
   2552e:	70a2                	c.ldsp	ra,40(sp)
   25530:	7402                	c.ldsp	s0,32(sp)
   25532:	6145                	c.addi16sp	sp,48
   25534:	8082                	c.jr	ra

0000000000025536 <dwarf::at_is_optional(dwarf::die const&)>:
AT_FLAG(is_optional);
   25536:	7179                	c.addi16sp	sp,-48
   25538:	f406                	c.sdsp	ra,40(sp)
   2553a:	f022                	c.sdsp	s0,32(sp)
   2553c:	85aa                	c.mv	a1,a0
   2553e:	02100613          	addi	a2,zero,33
   25542:	0020                	c.addi4spn	s0,sp,8
   25544:	8522                	c.mv	a0,s0
   25546:	912f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2554a:	8522                	c.mv	a0,s0
   2554c:	933f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25550:	70a2                	c.ldsp	ra,40(sp)
   25552:	7402                	c.ldsp	s0,32(sp)
   25554:	6145                	c.addi16sp	sp,48
   25556:	8082                	c.jr	ra

0000000000025558 <dwarf::at_producer[abi:cxx11](dwarf::die const&)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
AT_STRING(producer);
   25558:	7139                	c.addi16sp	sp,-64
   2555a:	fc06                	c.sdsp	ra,56(sp)
   2555c:	f822                	c.sdsp	s0,48(sp)
   2555e:	f426                	c.sdsp	s1,40(sp)
   25560:	842a                	c.mv	s0,a0
   25562:	02500613          	addi	a2,zero,37
   25566:	0024                	c.addi4spn	s1,sp,8
   25568:	8526                	c.mv	a0,s1
   2556a:	8eef60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2556e:	85a6                	c.mv	a1,s1
   25570:	8522                	c.mv	a0,s0
   25572:	ef2f80ef          	jal	ra,1dc64 <dwarf::value::as_string[abi:cxx11]() const>
   25576:	8522                	c.mv	a0,s0
   25578:	70e2                	c.ldsp	ra,56(sp)
   2557a:	7442                	c.ldsp	s0,48(sp)
   2557c:	74a2                	c.ldsp	s1,40(sp)
   2557e:	6121                	c.addi16sp	sp,64
   25580:	8082                	c.jr	ra

0000000000025582 <dwarf::at_prototyped(dwarf::die const&)>:
AT_FLAG(prototyped);
   25582:	7179                	c.addi16sp	sp,-48
   25584:	f406                	c.sdsp	ra,40(sp)
   25586:	f022                	c.sdsp	s0,32(sp)
   25588:	85aa                	c.mv	a1,a0
   2558a:	02700613          	addi	a2,zero,39
   2558e:	0020                	c.addi4spn	s0,sp,8
   25590:	8522                	c.mv	a0,s0
   25592:	8c6f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25596:	8522                	c.mv	a0,s0
   25598:	8e7f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   2559c:	70a2                	c.ldsp	ra,40(sp)
   2559e:	7402                	c.ldsp	s0,32(sp)
   255a0:	6145                	c.addi16sp	sp,48
   255a2:	8082                	c.jr	ra

00000000000255a4 <dwarf::at_abstract_origin(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x3X
//

AT_REFERENCE(abstract_origin);
   255a4:	7139                	c.addi16sp	sp,-64
   255a6:	fc06                	c.sdsp	ra,56(sp)
   255a8:	f822                	c.sdsp	s0,48(sp)
   255aa:	f426                	c.sdsp	s1,40(sp)
   255ac:	842a                	c.mv	s0,a0
   255ae:	03100613          	addi	a2,zero,49
   255b2:	0024                	c.addi4spn	s1,sp,8
   255b4:	8526                	c.mv	a0,s1
   255b6:	8a2f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   255ba:	85a6                	c.mv	a1,s1
   255bc:	8522                	c.mv	a0,s0
   255be:	eeaf80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   255c2:	8522                	c.mv	a0,s0
   255c4:	70e2                	c.ldsp	ra,56(sp)
   255c6:	7442                	c.ldsp	s0,48(sp)
   255c8:	74a2                	c.ldsp	s1,40(sp)
   255ca:	6121                	c.addi16sp	sp,64
   255cc:	8082                	c.jr	ra

00000000000255ce <dwarf::at_accessibility(dwarf::die const&)>:
AT_ENUM(accessibility, DW_ACCESS);
   255ce:	7179                	c.addi16sp	sp,-48
   255d0:	f406                	c.sdsp	ra,40(sp)
   255d2:	f022                	c.sdsp	s0,32(sp)
   255d4:	85aa                	c.mv	a1,a0
   255d6:	03200613          	addi	a2,zero,50
   255da:	0020                	c.addi4spn	s0,sp,8
   255dc:	8522                	c.mv	a0,s0
   255de:	87af60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   255e2:	8522                	c.mv	a0,s0
   255e4:	d9ff60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   255e8:	2501                	c.addiw	a0,0
   255ea:	70a2                	c.ldsp	ra,40(sp)
   255ec:	7402                	c.ldsp	s0,32(sp)
   255ee:	6145                	c.addi16sp	sp,48
   255f0:	8082                	c.jr	ra

00000000000255f2 <dwarf::at_artificial(dwarf::die const&)>:
// XXX const address_class
AT_FLAG(artificial);
   255f2:	7179                	c.addi16sp	sp,-48
   255f4:	f406                	c.sdsp	ra,40(sp)
   255f6:	f022                	c.sdsp	s0,32(sp)
   255f8:	85aa                	c.mv	a1,a0
   255fa:	03400613          	addi	a2,zero,52
   255fe:	0020                	c.addi4spn	s0,sp,8
   25600:	8522                	c.mv	a0,s0
   25602:	856f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25606:	8522                	c.mv	a0,s0
   25608:	877f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   2560c:	70a2                	c.ldsp	ra,40(sp)
   2560e:	7402                	c.ldsp	s0,32(sp)
   25610:	6145                	c.addi16sp	sp,48
   25612:	8082                	c.jr	ra

0000000000025614 <dwarf::at_calling_convention(dwarf::die const&)>:
// XXX base_types
AT_ENUM(calling_convention, DW_CC);
   25614:	7179                	c.addi16sp	sp,-48
   25616:	f406                	c.sdsp	ra,40(sp)
   25618:	f022                	c.sdsp	s0,32(sp)
   2561a:	85aa                	c.mv	a1,a0
   2561c:	03600613          	addi	a2,zero,54
   25620:	0020                	c.addi4spn	s0,sp,8
   25622:	8522                	c.mv	a0,s0
   25624:	834f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25628:	8522                	c.mv	a0,s0
   2562a:	d59f60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   2562e:	2501                	c.addiw	a0,0
   25630:	70a2                	c.ldsp	ra,40(sp)
   25632:	7402                	c.ldsp	s0,32(sp)
   25634:	6145                	c.addi16sp	sp,48
   25636:	8082                	c.jr	ra

0000000000025638 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)>:
AT_UDYNAMIC(count);
expr_result at_data_member_location(const die &d, expr_context *ctx, taddr base,
                                    taddr pc) {
   25638:	7135                	c.addi16sp	sp,-160
   2563a:	ed06                	c.sdsp	ra,152(sp)
   2563c:	e922                	c.sdsp	s0,144(sp)
   2563e:	e526                	c.sdsp	s1,136(sp)
   25640:	e14a                	c.sdsp	s2,128(sp)
   25642:	fcce                	c.sdsp	s3,120(sp)
   25644:	842a                	c.mv	s0,a0
   25646:	8932                	c.mv	s2,a2
   25648:	84b6                	c.mv	s1,a3
  value v(d[DW_AT::data_member_location]);
   2564a:	03800613          	addi	a2,zero,56
   2564e:	0088                	c.addi4spn	a0,sp,64
   25650:	808f60ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   25654:	47b6                	c.lwsp	a5,76(sp)
  switch (v.get_type()) {
   25656:	4719                	c.li	a4,6
   25658:	04e78b63          	beq	a5,a4,256ae <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x76>
   2565c:	02f74b63          	blt	a4,a5,25692 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x5a>
   25660:	37f5                	c.addiw	a5,-3
   25662:	4705                	c.li	a4,1
   25664:	06f76d63          	bltu	a4,a5,256de <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xa6>
  case value::type::constant:
  case value::type::uconstant:
    return {expr_result::type::address, base + v.as_uconstant()};
   25668:	00043023          	sd	zero,0(s0)
   2566c:	00043423          	sd	zero,8(s0)
   25670:	00043823          	sd	zero,16(s0)
   25674:	00043c23          	sd	zero,24(s0)
   25678:	0088                	c.addi4spn	a0,sp,64
   2567a:	d09f60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   2567e:	94aa                	c.add	s1,a0
   25680:	e404                	c.sd	s1,8(s0)
    throw std::runtime_error("not implemented");
  default:
    throw format_error("DW_AT_data_member_location has unexpected type " +
                       to_string(v.get_type()));
  }
}
   25682:	8522                	c.mv	a0,s0
   25684:	60ea                	c.ldsp	ra,152(sp)
   25686:	644a                	c.ldsp	s0,144(sp)
   25688:	64aa                	c.ldsp	s1,136(sp)
   2568a:	690a                	c.ldsp	s2,128(sp)
   2568c:	79e6                	c.ldsp	s3,120(sp)
   2568e:	610d                	c.addi16sp	sp,160
   25690:	8082                	c.jr	ra
  switch (v.get_type()) {
   25692:	4725                	c.li	a4,9
   25694:	04e79563          	bne	a5,a4,256de <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xa6>
    throw std::runtime_error("not implemented");
   25698:	4541                	c.li	a0,16
   2569a:	d37f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2569e:	842a                	c.mv	s0,a0
   256a0:	00009597          	auipc	a1,0x9
   256a4:	fb058593          	addi	a1,a1,-80 # 2e650 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x70>
   256a8:	cf9f00ef          	jal	ra,163a0 <std::runtime_error::runtime_error(char const*)@plt>
   256ac:	a831                	c.j	256c8 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x90>
    return v.as_exprloc().evaluate(ctx, base);
   256ae:	008c                	c.addi4spn	a1,sp,64
   256b0:	05810993          	addi	s3,sp,88
   256b4:	854e                	c.mv	a0,s3
   256b6:	c30f70ef          	jal	ra,1cae6 <dwarf::value::as_exprloc() const>
   256ba:	86a6                	c.mv	a3,s1
   256bc:	864a                	c.mv	a2,s2
   256be:	85ce                	c.mv	a1,s3
   256c0:	8522                	c.mv	a0,s0
   256c2:	84efc0ef          	jal	ra,21710 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>
   256c6:	bf75                	c.j	25682 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x4a>
    throw std::runtime_error("not implemented");
   256c8:	00014617          	auipc	a2,0x14
   256cc:	d3863603          	ld	a2,-712(a2) # 39400 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   256d0:	00014597          	auipc	a1,0x14
   256d4:	f205b583          	ld	a1,-224(a1) # 395f0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   256d8:	8522                	c.mv	a0,s0
   256da:	f87f00ef          	jal	ra,16660 <__cxa_throw@plt>
                       to_string(v.get_type()));
   256de:	4541                	c.li	a0,16
   256e0:	cf1f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   256e4:	84aa                	c.mv	s1,a0
   256e6:	45b6                	c.lwsp	a1,76(sp)
   256e8:	850a                	c.mv	a0,sp
   256ea:	615010ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   256ee:	00009617          	auipc	a2,0x9
   256f2:	f7260613          	addi	a2,a2,-142 # 2e660 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   256f6:	4581                	c.li	a1,0
   256f8:	850a                	c.mv	a0,sp
   256fa:	c47f00ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   256fe:	85aa                	c.mv	a1,a0
   25700:	1000                	c.addi4spn	s0,sp,32
   25702:	8522                	c.mv	a0,s0
   25704:	d0df00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   25708:	85a2                	c.mv	a1,s0
   2570a:	8526                	c.mv	a0,s1
   2570c:	e35f00ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25710:	00014797          	auipc	a5,0x14
   25714:	e407b783          	ld	a5,-448(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   25718:	07c1                	c.addi	a5,16
   2571a:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2571c:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2571e:	181c                	c.addi4spn	a5,sp,48
   25720:	00f50463          	beq	a0,a5,25728 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25724:	d8df00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25728:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2572a:	081c                	c.addi4spn	a5,sp,16
   2572c:	00f50463          	beq	a0,a5,25734 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xfc>
   25730:	d81f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   25734:	00014617          	auipc	a2,0x14
   25738:	c4463603          	ld	a2,-956(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   2573c:	00014597          	auipc	a1,0x14
   25740:	b6c5b583          	ld	a1,-1172(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   25744:	8526                	c.mv	a0,s1
   25746:	f1bf00ef          	jal	ra,16660 <__cxa_throw@plt>
    throw std::runtime_error("not implemented");
   2574a:	84aa                	c.mv	s1,a0
   2574c:	8522                	c.mv	a0,s0
   2574e:	d23f00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   25752:	8526                	c.mv	a0,s1
   25754:	f3df00ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   25758:	842a                	c.mv	s0,a0
   2575a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2575c:	181c                	c.addi4spn	a5,sp,48
   2575e:	00f50463          	beq	a0,a5,25766 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x12e>
   25762:	d4ff00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25766:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25768:	081c                	c.addi4spn	a5,sp,16
   2576a:	00f50463          	beq	a0,a5,25772 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x13a>
   2576e:	d43f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   25772:	8526                	c.mv	a0,s1
   25774:	cfdf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   25778:	8522                	c.mv	a0,s0
   2577a:	f17f00ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2577e:	842a                	c.mv	s0,a0
   25780:	b7dd                	c.j	25766 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x12e>
   25782:	842a                	c.mv	s0,a0
   25784:	b7fd                	c.j	25772 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x13a>

0000000000025786 <dwarf::at_declaration(dwarf::die const&)>:
// XXX decl_column decl_file decl_line
AT_FLAG(declaration);
   25786:	7179                	c.addi16sp	sp,-48
   25788:	f406                	c.sdsp	ra,40(sp)
   2578a:	f022                	c.sdsp	s0,32(sp)
   2578c:	85aa                	c.mv	a1,a0
   2578e:	03c00613          	addi	a2,zero,60
   25792:	0020                	c.addi4spn	s0,sp,8
   25794:	8522                	c.mv	a0,s0
   25796:	ec3f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2579a:	8522                	c.mv	a0,s0
   2579c:	ee2f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   257a0:	70a2                	c.ldsp	ra,40(sp)
   257a2:	7402                	c.ldsp	s0,32(sp)
   257a4:	6145                	c.addi16sp	sp,48
   257a6:	8082                	c.jr	ra

00000000000257a8 <dwarf::at_encoding(dwarf::die const&)>:
// XXX discr_list
AT_ENUM(encoding, DW_ATE);
   257a8:	7179                	c.addi16sp	sp,-48
   257aa:	f406                	c.sdsp	ra,40(sp)
   257ac:	f022                	c.sdsp	s0,32(sp)
   257ae:	85aa                	c.mv	a1,a0
   257b0:	03e00613          	addi	a2,zero,62
   257b4:	0020                	c.addi4spn	s0,sp,8
   257b6:	8522                	c.mv	a0,s0
   257b8:	ea1f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   257bc:	8522                	c.mv	a0,s0
   257be:	bc5f60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   257c2:	2501                	c.addiw	a0,0
   257c4:	70a2                	c.ldsp	ra,40(sp)
   257c6:	7402                	c.ldsp	s0,32(sp)
   257c8:	6145                	c.addi16sp	sp,48
   257ca:	8082                	c.jr	ra

00000000000257cc <dwarf::at_external(dwarf::die const&)>:
AT_FLAG(external);
   257cc:	7179                	c.addi16sp	sp,-48
   257ce:	f406                	c.sdsp	ra,40(sp)
   257d0:	f022                	c.sdsp	s0,32(sp)
   257d2:	85aa                	c.mv	a1,a0
   257d4:	03f00613          	addi	a2,zero,63
   257d8:	0020                	c.addi4spn	s0,sp,8
   257da:	8522                	c.mv	a0,s0
   257dc:	e7df50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   257e0:	8522                	c.mv	a0,s0
   257e2:	e9cf70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   257e6:	70a2                	c.ldsp	ra,40(sp)
   257e8:	7402                	c.ldsp	s0,32(sp)
   257ea:	6145                	c.addi16sp	sp,48
   257ec:	8082                	c.jr	ra

00000000000257ee <dwarf::at_friend(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x4X
//

// XXX frame_base
die at_friend(const die &d) { return d[DW_AT::friend_].as_reference(); }
   257ee:	7139                	c.addi16sp	sp,-64
   257f0:	fc06                	c.sdsp	ra,56(sp)
   257f2:	f822                	c.sdsp	s0,48(sp)
   257f4:	f426                	c.sdsp	s1,40(sp)
   257f6:	842a                	c.mv	s0,a0
   257f8:	04100613          	addi	a2,zero,65
   257fc:	0024                	c.addi4spn	s1,sp,8
   257fe:	8526                	c.mv	a0,s1
   25800:	e59f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25804:	85a6                	c.mv	a1,s1
   25806:	8522                	c.mv	a0,s0
   25808:	ca0f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   2580c:	8522                	c.mv	a0,s0
   2580e:	70e2                	c.ldsp	ra,56(sp)
   25810:	7442                	c.ldsp	s0,48(sp)
   25812:	74a2                	c.ldsp	s1,40(sp)
   25814:	6121                	c.addi16sp	sp,64
   25816:	8082                	c.jr	ra

0000000000025818 <dwarf::at_identifier_case(dwarf::die const&)>:
AT_ENUM(identifier_case, DW_ID);
   25818:	7179                	c.addi16sp	sp,-48
   2581a:	f406                	c.sdsp	ra,40(sp)
   2581c:	f022                	c.sdsp	s0,32(sp)
   2581e:	85aa                	c.mv	a1,a0
   25820:	04200613          	addi	a2,zero,66
   25824:	0020                	c.addi4spn	s0,sp,8
   25826:	8522                	c.mv	a0,s0
   25828:	e31f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2582c:	8522                	c.mv	a0,s0
   2582e:	b55f60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   25832:	2501                	c.addiw	a0,0
   25834:	70a2                	c.ldsp	ra,40(sp)
   25836:	7402                	c.ldsp	s0,32(sp)
   25838:	6145                	c.addi16sp	sp,48
   2583a:	8082                	c.jr	ra

000000000002583c <dwarf::at_namelist_item(dwarf::die const&)>:
// XXX macro_info
AT_REFERENCE(namelist_item);
   2583c:	7139                	c.addi16sp	sp,-64
   2583e:	fc06                	c.sdsp	ra,56(sp)
   25840:	f822                	c.sdsp	s0,48(sp)
   25842:	f426                	c.sdsp	s1,40(sp)
   25844:	842a                	c.mv	s0,a0
   25846:	04400613          	addi	a2,zero,68
   2584a:	0024                	c.addi4spn	s1,sp,8
   2584c:	8526                	c.mv	a0,s1
   2584e:	e0bf50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25852:	85a6                	c.mv	a1,s1
   25854:	8522                	c.mv	a0,s0
   25856:	c52f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   2585a:	8522                	c.mv	a0,s0
   2585c:	70e2                	c.ldsp	ra,56(sp)
   2585e:	7442                	c.ldsp	s0,48(sp)
   25860:	74a2                	c.ldsp	s1,40(sp)
   25862:	6121                	c.addi16sp	sp,64
   25864:	8082                	c.jr	ra

0000000000025866 <dwarf::at_priority(dwarf::die const&)>:
AT_REFERENCE(priority); // XXX Computed might be useful
   25866:	7139                	c.addi16sp	sp,-64
   25868:	fc06                	c.sdsp	ra,56(sp)
   2586a:	f822                	c.sdsp	s0,48(sp)
   2586c:	f426                	c.sdsp	s1,40(sp)
   2586e:	842a                	c.mv	s0,a0
   25870:	04500613          	addi	a2,zero,69
   25874:	0024                	c.addi4spn	s1,sp,8
   25876:	8526                	c.mv	a0,s1
   25878:	de1f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2587c:	85a6                	c.mv	a1,s1
   2587e:	8522                	c.mv	a0,s0
   25880:	c28f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25884:	8522                	c.mv	a0,s0
   25886:	70e2                	c.ldsp	ra,56(sp)
   25888:	7442                	c.ldsp	s0,48(sp)
   2588a:	74a2                	c.ldsp	s1,40(sp)
   2588c:	6121                	c.addi16sp	sp,64
   2588e:	8082                	c.jr	ra

0000000000025890 <dwarf::at_specification(dwarf::die const&)>:
// XXX segment
AT_REFERENCE(specification);
   25890:	7139                	c.addi16sp	sp,-64
   25892:	fc06                	c.sdsp	ra,56(sp)
   25894:	f822                	c.sdsp	s0,48(sp)
   25896:	f426                	c.sdsp	s1,40(sp)
   25898:	842a                	c.mv	s0,a0
   2589a:	04700613          	addi	a2,zero,71
   2589e:	0024                	c.addi4spn	s1,sp,8
   258a0:	8526                	c.mv	a0,s1
   258a2:	db7f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   258a6:	85a6                	c.mv	a1,s1
   258a8:	8522                	c.mv	a0,s0
   258aa:	bfef80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   258ae:	8522                	c.mv	a0,s0
   258b0:	70e2                	c.ldsp	ra,56(sp)
   258b2:	7442                	c.ldsp	s0,48(sp)
   258b4:	74a2                	c.ldsp	s1,40(sp)
   258b6:	6121                	c.addi16sp	sp,64
   258b8:	8082                	c.jr	ra

00000000000258ba <dwarf::at_type(dwarf::die const&)>:
// XXX static_link
AT_REFERENCE(type);
   258ba:	7139                	c.addi16sp	sp,-64
   258bc:	fc06                	c.sdsp	ra,56(sp)
   258be:	f822                	c.sdsp	s0,48(sp)
   258c0:	f426                	c.sdsp	s1,40(sp)
   258c2:	842a                	c.mv	s0,a0
   258c4:	04900613          	addi	a2,zero,73
   258c8:	0024                	c.addi4spn	s1,sp,8
   258ca:	8526                	c.mv	a0,s1
   258cc:	d8df50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   258d0:	85a6                	c.mv	a1,s1
   258d2:	8522                	c.mv	a0,s0
   258d4:	bd4f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   258d8:	8522                	c.mv	a0,s0
   258da:	70e2                	c.ldsp	ra,56(sp)
   258dc:	7442                	c.ldsp	s0,48(sp)
   258de:	74a2                	c.ldsp	s1,40(sp)
   258e0:	6121                	c.addi16sp	sp,64
   258e2:	8082                	c.jr	ra

00000000000258e4 <dwarf::at_variable_parameter(dwarf::die const&)>:
// XXX use_location
AT_FLAG(variable_parameter);
   258e4:	7179                	c.addi16sp	sp,-48
   258e6:	f406                	c.sdsp	ra,40(sp)
   258e8:	f022                	c.sdsp	s0,32(sp)
   258ea:	85aa                	c.mv	a1,a0
   258ec:	04b00613          	addi	a2,zero,75
   258f0:	0020                	c.addi4spn	s0,sp,8
   258f2:	8522                	c.mv	a0,s0
   258f4:	d65f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   258f8:	8522                	c.mv	a0,s0
   258fa:	d84f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   258fe:	70a2                	c.ldsp	ra,40(sp)
   25900:	7402                	c.ldsp	s0,32(sp)
   25902:	6145                	c.addi16sp	sp,48
   25904:	8082                	c.jr	ra

0000000000025906 <dwarf::at_virtuality(dwarf::die const&)>:
// XXX 7.11 The value DW_VIRTUALITY_none is equivalent to the absence
// of the DW_AT_virtuality attribute.
AT_ENUM(virtuality, DW_VIRTUALITY);
   25906:	7179                	c.addi16sp	sp,-48
   25908:	f406                	c.sdsp	ra,40(sp)
   2590a:	f022                	c.sdsp	s0,32(sp)
   2590c:	85aa                	c.mv	a1,a0
   2590e:	04c00613          	addi	a2,zero,76
   25912:	0020                	c.addi4spn	s0,sp,8
   25914:	8522                	c.mv	a0,s0
   25916:	d43f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2591a:	8522                	c.mv	a0,s0
   2591c:	a67f60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   25920:	2501                	c.addiw	a0,0
   25922:	70a2                	c.ldsp	ra,40(sp)
   25924:	7402                	c.ldsp	s0,32(sp)
   25926:	6145                	c.addi16sp	sp,48
   25928:	8082                	c.jr	ra

000000000002592a <dwarf::at_entry_pc(dwarf::die const&)>:
// 0x5X
//

// XXX data_location
AT_UDYNAMIC(byte_stride);
AT_ADDRESS(entry_pc);
   2592a:	7179                	c.addi16sp	sp,-48
   2592c:	f406                	c.sdsp	ra,40(sp)
   2592e:	f022                	c.sdsp	s0,32(sp)
   25930:	85aa                	c.mv	a1,a0
   25932:	05200613          	addi	a2,zero,82
   25936:	0020                	c.addi4spn	s0,sp,8
   25938:	8522                	c.mv	a0,s0
   2593a:	d1ff50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   2593e:	8522                	c.mv	a0,s0
   25940:	c42f60ef          	jal	ra,1bd82 <dwarf::value::as_address() const>
   25944:	70a2                	c.ldsp	ra,40(sp)
   25946:	7402                	c.ldsp	s0,32(sp)
   25948:	6145                	c.addi16sp	sp,48
   2594a:	8082                	c.jr	ra

000000000002594c <dwarf::at_use_UTF8(dwarf::die const&)>:
AT_FLAG(use_UTF8);
   2594c:	7179                	c.addi16sp	sp,-48
   2594e:	f406                	c.sdsp	ra,40(sp)
   25950:	f022                	c.sdsp	s0,32(sp)
   25952:	85aa                	c.mv	a1,a0
   25954:	05300613          	addi	a2,zero,83
   25958:	0020                	c.addi4spn	s0,sp,8
   2595a:	8522                	c.mv	a0,s0
   2595c:	cfdf50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25960:	8522                	c.mv	a0,s0
   25962:	d1cf70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25966:	70a2                	c.ldsp	ra,40(sp)
   25968:	7402                	c.ldsp	s0,32(sp)
   2596a:	6145                	c.addi16sp	sp,48
   2596c:	8082                	c.jr	ra

000000000002596e <dwarf::at_extension(dwarf::die const&)>:
AT_REFERENCE(extension);
   2596e:	7139                	c.addi16sp	sp,-64
   25970:	fc06                	c.sdsp	ra,56(sp)
   25972:	f822                	c.sdsp	s0,48(sp)
   25974:	f426                	c.sdsp	s1,40(sp)
   25976:	842a                	c.mv	s0,a0
   25978:	05400613          	addi	a2,zero,84
   2597c:	0024                	c.addi4spn	s1,sp,8
   2597e:	8526                	c.mv	a0,s1
   25980:	cd9f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25984:	85a6                	c.mv	a1,s1
   25986:	8522                	c.mv	a0,s0
   25988:	b20f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   2598c:	8522                	c.mv	a0,s0
   2598e:	70e2                	c.ldsp	ra,56(sp)
   25990:	7442                	c.ldsp	s0,48(sp)
   25992:	74a2                	c.ldsp	s1,40(sp)
   25994:	6121                	c.addi16sp	sp,64
   25996:	8082                	c.jr	ra

0000000000025998 <dwarf::at_ranges(dwarf::die const&)>:
rangelist at_ranges(const die &d) { return d[DW_AT::ranges].as_rangelist(); }
   25998:	7139                	c.addi16sp	sp,-64
   2599a:	fc06                	c.sdsp	ra,56(sp)
   2599c:	f822                	c.sdsp	s0,48(sp)
   2599e:	f426                	c.sdsp	s1,40(sp)
   259a0:	842a                	c.mv	s0,a0
   259a2:	05500613          	addi	a2,zero,85
   259a6:	0024                	c.addi4spn	s1,sp,8
   259a8:	8526                	c.mv	a0,s1
   259aa:	caff50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   259ae:	85a6                	c.mv	a1,s1
   259b0:	8522                	c.mv	a0,s0
   259b2:	834f80ef          	jal	ra,1d9e6 <dwarf::value::as_rangelist() const>
   259b6:	8522                	c.mv	a0,s0
   259b8:	70e2                	c.ldsp	ra,56(sp)
   259ba:	7442                	c.ldsp	s0,48(sp)
   259bc:	74a2                	c.ldsp	s1,40(sp)
   259be:	6121                	c.addi16sp	sp,64
   259c0:	8082                	c.jr	ra

00000000000259c2 <dwarf::at_description[abi:cxx11](dwarf::die const&)>:
// XXX trampoline
// XXX const call_column, call_file, call_line
AT_STRING(description);
   259c2:	7139                	c.addi16sp	sp,-64
   259c4:	fc06                	c.sdsp	ra,56(sp)
   259c6:	f822                	c.sdsp	s0,48(sp)
   259c8:	f426                	c.sdsp	s1,40(sp)
   259ca:	842a                	c.mv	s0,a0
   259cc:	05a00613          	addi	a2,zero,90
   259d0:	0024                	c.addi4spn	s1,sp,8
   259d2:	8526                	c.mv	a0,s1
   259d4:	c85f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   259d8:	85a6                	c.mv	a1,s1
   259da:	8522                	c.mv	a0,s0
   259dc:	a88f80ef          	jal	ra,1dc64 <dwarf::value::as_string[abi:cxx11]() const>
   259e0:	8522                	c.mv	a0,s0
   259e2:	70e2                	c.ldsp	ra,56(sp)
   259e4:	7442                	c.ldsp	s0,48(sp)
   259e6:	74a2                	c.ldsp	s1,40(sp)
   259e8:	6121                	c.addi16sp	sp,64
   259ea:	8082                	c.jr	ra

00000000000259ec <dwarf::at_small(dwarf::die const&)>:
// XXX const binary_scale
// XXX const decimal_scale
AT_REFERENCE(small);
   259ec:	7139                	c.addi16sp	sp,-64
   259ee:	fc06                	c.sdsp	ra,56(sp)
   259f0:	f822                	c.sdsp	s0,48(sp)
   259f2:	f426                	c.sdsp	s1,40(sp)
   259f4:	842a                	c.mv	s0,a0
   259f6:	05d00613          	addi	a2,zero,93
   259fa:	0024                	c.addi4spn	s1,sp,8
   259fc:	8526                	c.mv	a0,s1
   259fe:	c5bf50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a02:	85a6                	c.mv	a1,s1
   25a04:	8522                	c.mv	a0,s0
   25a06:	aa2f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25a0a:	8522                	c.mv	a0,s0
   25a0c:	70e2                	c.ldsp	ra,56(sp)
   25a0e:	7442                	c.ldsp	s0,48(sp)
   25a10:	74a2                	c.ldsp	s1,40(sp)
   25a12:	6121                	c.addi16sp	sp,64
   25a14:	8082                	c.jr	ra

0000000000025a16 <dwarf::at_picture_string[abi:cxx11](dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x6X
//

AT_STRING(picture_string);
   25a16:	7139                	c.addi16sp	sp,-64
   25a18:	fc06                	c.sdsp	ra,56(sp)
   25a1a:	f822                	c.sdsp	s0,48(sp)
   25a1c:	f426                	c.sdsp	s1,40(sp)
   25a1e:	842a                	c.mv	s0,a0
   25a20:	06000613          	addi	a2,zero,96
   25a24:	0024                	c.addi4spn	s1,sp,8
   25a26:	8526                	c.mv	a0,s1
   25a28:	c31f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a2c:	85a6                	c.mv	a1,s1
   25a2e:	8522                	c.mv	a0,s0
   25a30:	a34f80ef          	jal	ra,1dc64 <dwarf::value::as_string[abi:cxx11]() const>
   25a34:	8522                	c.mv	a0,s0
   25a36:	70e2                	c.ldsp	ra,56(sp)
   25a38:	7442                	c.ldsp	s0,48(sp)
   25a3a:	74a2                	c.ldsp	s1,40(sp)
   25a3c:	6121                	c.addi16sp	sp,64
   25a3e:	8082                	c.jr	ra

0000000000025a40 <dwarf::at_mutable(dwarf::die const&)>:
AT_FLAG_(mutable);
   25a40:	7179                	c.addi16sp	sp,-48
   25a42:	f406                	c.sdsp	ra,40(sp)
   25a44:	f022                	c.sdsp	s0,32(sp)
   25a46:	85aa                	c.mv	a1,a0
   25a48:	06100613          	addi	a2,zero,97
   25a4c:	0020                	c.addi4spn	s0,sp,8
   25a4e:	8522                	c.mv	a0,s0
   25a50:	c09f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a54:	8522                	c.mv	a0,s0
   25a56:	c28f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25a5a:	70a2                	c.ldsp	ra,40(sp)
   25a5c:	7402                	c.ldsp	s0,32(sp)
   25a5e:	6145                	c.addi16sp	sp,48
   25a60:	8082                	c.jr	ra

0000000000025a62 <dwarf::at_threads_scaled(dwarf::die const&)>:
AT_FLAG(threads_scaled);
   25a62:	7179                	c.addi16sp	sp,-48
   25a64:	f406                	c.sdsp	ra,40(sp)
   25a66:	f022                	c.sdsp	s0,32(sp)
   25a68:	85aa                	c.mv	a1,a0
   25a6a:	06200613          	addi	a2,zero,98
   25a6e:	0020                	c.addi4spn	s0,sp,8
   25a70:	8522                	c.mv	a0,s0
   25a72:	be7f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a76:	8522                	c.mv	a0,s0
   25a78:	c06f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25a7c:	70a2                	c.ldsp	ra,40(sp)
   25a7e:	7402                	c.ldsp	s0,32(sp)
   25a80:	6145                	c.addi16sp	sp,48
   25a82:	8082                	c.jr	ra

0000000000025a84 <dwarf::at_explicit(dwarf::die const&)>:
AT_FLAG_(explicit);
   25a84:	7179                	c.addi16sp	sp,-48
   25a86:	f406                	c.sdsp	ra,40(sp)
   25a88:	f022                	c.sdsp	s0,32(sp)
   25a8a:	85aa                	c.mv	a1,a0
   25a8c:	06300613          	addi	a2,zero,99
   25a90:	0020                	c.addi4spn	s0,sp,8
   25a92:	8522                	c.mv	a0,s0
   25a94:	bc5f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a98:	8522                	c.mv	a0,s0
   25a9a:	be4f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25a9e:	70a2                	c.ldsp	ra,40(sp)
   25aa0:	7402                	c.ldsp	s0,32(sp)
   25aa2:	6145                	c.addi16sp	sp,48
   25aa4:	8082                	c.jr	ra

0000000000025aa6 <dwarf::at_object_pointer(dwarf::die const&)>:
AT_REFERENCE(object_pointer);
   25aa6:	7139                	c.addi16sp	sp,-64
   25aa8:	fc06                	c.sdsp	ra,56(sp)
   25aaa:	f822                	c.sdsp	s0,48(sp)
   25aac:	f426                	c.sdsp	s1,40(sp)
   25aae:	842a                	c.mv	s0,a0
   25ab0:	06400613          	addi	a2,zero,100
   25ab4:	0024                	c.addi4spn	s1,sp,8
   25ab6:	8526                	c.mv	a0,s1
   25ab8:	ba1f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25abc:	85a6                	c.mv	a1,s1
   25abe:	8522                	c.mv	a0,s0
   25ac0:	9e8f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25ac4:	8522                	c.mv	a0,s0
   25ac6:	70e2                	c.ldsp	ra,56(sp)
   25ac8:	7442                	c.ldsp	s0,48(sp)
   25aca:	74a2                	c.ldsp	s1,40(sp)
   25acc:	6121                	c.addi16sp	sp,64
   25ace:	8082                	c.jr	ra

0000000000025ad0 <dwarf::at_endianity(dwarf::die const&)>:
AT_ENUM(endianity, DW_END);
   25ad0:	7179                	c.addi16sp	sp,-48
   25ad2:	f406                	c.sdsp	ra,40(sp)
   25ad4:	f022                	c.sdsp	s0,32(sp)
   25ad6:	85aa                	c.mv	a1,a0
   25ad8:	06500613          	addi	a2,zero,101
   25adc:	0020                	c.addi4spn	s0,sp,8
   25ade:	8522                	c.mv	a0,s0
   25ae0:	b79f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25ae4:	8522                	c.mv	a0,s0
   25ae6:	89df60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   25aea:	2501                	c.addiw	a0,0
   25aec:	70a2                	c.ldsp	ra,40(sp)
   25aee:	7402                	c.ldsp	s0,32(sp)
   25af0:	6145                	c.addi16sp	sp,48
   25af2:	8082                	c.jr	ra

0000000000025af4 <dwarf::at_elemental(dwarf::die const&)>:
AT_FLAG(elemental);
   25af4:	7179                	c.addi16sp	sp,-48
   25af6:	f406                	c.sdsp	ra,40(sp)
   25af8:	f022                	c.sdsp	s0,32(sp)
   25afa:	85aa                	c.mv	a1,a0
   25afc:	06600613          	addi	a2,zero,102
   25b00:	0020                	c.addi4spn	s0,sp,8
   25b02:	8522                	c.mv	a0,s0
   25b04:	b55f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25b08:	8522                	c.mv	a0,s0
   25b0a:	b74f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25b0e:	70a2                	c.ldsp	ra,40(sp)
   25b10:	7402                	c.ldsp	s0,32(sp)
   25b12:	6145                	c.addi16sp	sp,48
   25b14:	8082                	c.jr	ra

0000000000025b16 <dwarf::at_pure(dwarf::die const&)>:
AT_FLAG(pure);
   25b16:	7179                	c.addi16sp	sp,-48
   25b18:	f406                	c.sdsp	ra,40(sp)
   25b1a:	f022                	c.sdsp	s0,32(sp)
   25b1c:	85aa                	c.mv	a1,a0
   25b1e:	06700613          	addi	a2,zero,103
   25b22:	0020                	c.addi4spn	s0,sp,8
   25b24:	8522                	c.mv	a0,s0
   25b26:	b33f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25b2a:	8522                	c.mv	a0,s0
   25b2c:	b52f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25b30:	70a2                	c.ldsp	ra,40(sp)
   25b32:	7402                	c.ldsp	s0,32(sp)
   25b34:	6145                	c.addi16sp	sp,48
   25b36:	8082                	c.jr	ra

0000000000025b38 <dwarf::at_recursive(dwarf::die const&)>:
AT_FLAG(recursive);
   25b38:	7179                	c.addi16sp	sp,-48
   25b3a:	f406                	c.sdsp	ra,40(sp)
   25b3c:	f022                	c.sdsp	s0,32(sp)
   25b3e:	85aa                	c.mv	a1,a0
   25b40:	06800613          	addi	a2,zero,104
   25b44:	0020                	c.addi4spn	s0,sp,8
   25b46:	8522                	c.mv	a0,s0
   25b48:	b11f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25b4c:	8522                	c.mv	a0,s0
   25b4e:	b30f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25b52:	70a2                	c.ldsp	ra,40(sp)
   25b54:	7402                	c.ldsp	s0,32(sp)
   25b56:	6145                	c.addi16sp	sp,48
   25b58:	8082                	c.jr	ra

0000000000025b5a <dwarf::at_signature(dwarf::die const&)>:
AT_REFERENCE(signature); // XXX Computed might be useful
   25b5a:	7139                	c.addi16sp	sp,-64
   25b5c:	fc06                	c.sdsp	ra,56(sp)
   25b5e:	f822                	c.sdsp	s0,48(sp)
   25b60:	f426                	c.sdsp	s1,40(sp)
   25b62:	842a                	c.mv	s0,a0
   25b64:	06900613          	addi	a2,zero,105
   25b68:	0024                	c.addi4spn	s1,sp,8
   25b6a:	8526                	c.mv	a0,s1
   25b6c:	aedf50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25b70:	85a6                	c.mv	a1,s1
   25b72:	8522                	c.mv	a0,s0
   25b74:	934f80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25b78:	8522                	c.mv	a0,s0
   25b7a:	70e2                	c.ldsp	ra,56(sp)
   25b7c:	7442                	c.ldsp	s0,48(sp)
   25b7e:	74a2                	c.ldsp	s1,40(sp)
   25b80:	6121                	c.addi16sp	sp,64
   25b82:	8082                	c.jr	ra

0000000000025b84 <dwarf::at_main_subprogram(dwarf::die const&)>:
AT_FLAG(main_subprogram);
   25b84:	7179                	c.addi16sp	sp,-48
   25b86:	f406                	c.sdsp	ra,40(sp)
   25b88:	f022                	c.sdsp	s0,32(sp)
   25b8a:	85aa                	c.mv	a1,a0
   25b8c:	06a00613          	addi	a2,zero,106
   25b90:	0020                	c.addi4spn	s0,sp,8
   25b92:	8522                	c.mv	a0,s0
   25b94:	ac5f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25b98:	8522                	c.mv	a0,s0
   25b9a:	ae4f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25b9e:	70a2                	c.ldsp	ra,40(sp)
   25ba0:	7402                	c.ldsp	s0,32(sp)
   25ba2:	6145                	c.addi16sp	sp,48
   25ba4:	8082                	c.jr	ra

0000000000025ba6 <dwarf::at_const_expr(dwarf::die const&)>:
// XXX const data_bit_offset
AT_FLAG(const_expr);
   25ba6:	7179                	c.addi16sp	sp,-48
   25ba8:	f406                	c.sdsp	ra,40(sp)
   25baa:	f022                	c.sdsp	s0,32(sp)
   25bac:	85aa                	c.mv	a1,a0
   25bae:	06c00613          	addi	a2,zero,108
   25bb2:	0020                	c.addi4spn	s0,sp,8
   25bb4:	8522                	c.mv	a0,s0
   25bb6:	aa3f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25bba:	8522                	c.mv	a0,s0
   25bbc:	ac2f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25bc0:	70a2                	c.ldsp	ra,40(sp)
   25bc2:	7402                	c.ldsp	s0,32(sp)
   25bc4:	6145                	c.addi16sp	sp,48
   25bc6:	8082                	c.jr	ra

0000000000025bc8 <dwarf::at_enum_class(dwarf::die const&)>:
AT_FLAG(enum_class);
   25bc8:	7179                	c.addi16sp	sp,-48
   25bca:	f406                	c.sdsp	ra,40(sp)
   25bcc:	f022                	c.sdsp	s0,32(sp)
   25bce:	85aa                	c.mv	a1,a0
   25bd0:	06d00613          	addi	a2,zero,109
   25bd4:	0020                	c.addi4spn	s0,sp,8
   25bd6:	8522                	c.mv	a0,s0
   25bd8:	a81f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25bdc:	8522                	c.mv	a0,s0
   25bde:	aa0f70ef          	jal	ra,1ce7e <dwarf::value::as_flag() const>
   25be2:	70a2                	c.ldsp	ra,40(sp)
   25be4:	7402                	c.ldsp	s0,32(sp)
   25be6:	6145                	c.addi16sp	sp,48
   25be8:	8082                	c.jr	ra

0000000000025bea <dwarf::at_linkage_name[abi:cxx11](dwarf::die const&)>:
AT_STRING(linkage_name);
   25bea:	7139                	c.addi16sp	sp,-64
   25bec:	fc06                	c.sdsp	ra,56(sp)
   25bee:	f822                	c.sdsp	s0,48(sp)
   25bf0:	f426                	c.sdsp	s1,40(sp)
   25bf2:	842a                	c.mv	s0,a0
   25bf4:	06e00613          	addi	a2,zero,110
   25bf8:	0024                	c.addi4spn	s1,sp,8
   25bfa:	8526                	c.mv	a0,s1
   25bfc:	a5df50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
   25c00:	85a6                	c.mv	a1,s1
   25c02:	8522                	c.mv	a0,s0
   25c04:	860f80ef          	jal	ra,1dc64 <dwarf::value::as_string[abi:cxx11]() const>
   25c08:	8522                	c.mv	a0,s0
   25c0a:	70e2                	c.ldsp	ra,56(sp)
   25c0c:	7442                	c.ldsp	s0,48(sp)
   25c0e:	74a2                	c.ldsp	s1,40(sp)
   25c10:	6121                	c.addi16sp	sp,64
   25c12:	8082                	c.jr	ra

0000000000025c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>:
                             int depth = 0) {
   25c14:	7169                	c.addi16sp	sp,-304
   25c16:	f606                	c.sdsp	ra,296(sp)
   25c18:	f222                	c.sdsp	s0,288(sp)
   25c1a:	ee26                	c.sdsp	s1,280(sp)
   25c1c:	ea4a                	c.sdsp	s2,272(sp)
   25c1e:	e64e                	c.sdsp	s3,264(sp)
   25c20:	842a                	c.mv	s0,a0
  if (depth > 16)
   25c22:	47c1                	c.li	a5,16
   25c24:	02d7cf63          	blt	a5,a3,25c62 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x4e>
   25c28:	8932                	c.mv	s2,a2
   25c2a:	84b6                	c.mv	s1,a3
  value v(d[attr]);
   25c2c:	862a                	c.mv	a2,a0
   25c2e:	0988                	c.addi4spn	a0,sp,208
   25c30:	a29f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   25c34:	47fe                	c.lwsp	a5,220(sp)
  switch (v.get_type()) {
   25c36:	4719                	c.li	a4,6
   25c38:	0ce78c63          	beq	a5,a4,25d10 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xfc>
   25c3c:	08f75963          	bge	a4,a5,25cce <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xba>
   25c40:	4731                	c.li	a4,12
   25c42:	0ee79363          	bne	a5,a4,25d28 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x114>
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   25c46:	098c                	c.addi4spn	a1,sp,208
   25c48:	06010993          	addi	s3,sp,96
   25c4c:	854e                	c.mv	a0,s3
   25c4e:	85af80ef          	jal	ra,1dca8 <dwarf::value::as_reference() const>
   25c52:	0014869b          	addiw	a3,s1,1
   25c56:	864a                	c.mv	a2,s2
   25c58:	85ce                	c.mv	a1,s3
   25c5a:	8522                	c.mv	a0,s0
   25c5c:	fb9ff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25c60:	a079                	c.j	25cee <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xda>
    throw format_error("reference depth exceeded for " + to_string(attr));
   25c62:	4541                	c.li	a0,16
   25c64:	f6cf00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25c68:	84aa                	c.mv	s1,a0
   25c6a:	85a2                	c.mv	a1,s0
   25c6c:	0088                	c.addi4spn	a0,sp,64
   25c6e:	103030ef          	jal	ra,29570 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   25c72:	00009617          	auipc	a2,0x9
   25c76:	a1e60613          	addi	a2,a2,-1506 # 2e690 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb0>
   25c7a:	4581                	c.li	a1,0
   25c7c:	0088                	c.addi4spn	a0,sp,64
   25c7e:	ec2f00ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   25c82:	85aa                	c.mv	a1,a0
   25c84:	1080                	c.addi4spn	s0,sp,96
   25c86:	8522                	c.mv	a0,s0
   25c88:	f88f00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   25c8c:	85a2                	c.mv	a1,s0
   25c8e:	8526                	c.mv	a0,s1
   25c90:	8b1f00ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25c94:	00014797          	auipc	a5,0x14
   25c98:	8bc7b783          	ld	a5,-1860(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   25c9c:	07c1                	c.addi	a5,16
   25c9e:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   25ca0:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25ca2:	189c                	c.addi4spn	a5,sp,112
   25ca4:	00f50463          	beq	a0,a5,25cac <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x98>
   25ca8:	809f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25cac:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25cae:	089c                	c.addi4spn	a5,sp,80
   25cb0:	00f50463          	beq	a0,a5,25cb8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xa4>
   25cb4:	ffcf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   25cb8:	00013617          	auipc	a2,0x13
   25cbc:	6c063603          	ld	a2,1728(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   25cc0:	00013597          	auipc	a1,0x13
   25cc4:	5e85b583          	ld	a1,1512(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   25cc8:	8526                	c.mv	a0,s1
   25cca:	997f00ef          	jal	ra,16660 <__cxa_throw@plt>
  switch (v.get_type()) {
   25cce:	37f5                	c.addiw	a5,-3
   25cd0:	4705                	c.li	a4,1
   25cd2:	04f76b63          	bltu	a4,a5,25d28 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x114>
    return v.as_uconstant();
   25cd6:	0988                	c.addi4spn	a0,sp,208
   25cd8:	eaaf60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   25cdc:	842a                	c.mv	s0,a0
}
   25cde:	8522                	c.mv	a0,s0
   25ce0:	70b2                	c.ldsp	ra,296(sp)
   25ce2:	7412                	c.ldsp	s0,288(sp)
   25ce4:	64f2                	c.ldsp	s1,280(sp)
   25ce6:	6952                	c.ldsp	s2,272(sp)
   25ce8:	69b2                	c.ldsp	s3,264(sp)
   25cea:	6155                	c.addi16sp	sp,304
   25cec:	8082                	c.jr	ra
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   25cee:	842a                	c.mv	s0,a0
    for (T *p = base; p < end; ++p)
   25cf0:	754a                	c.ldsp	a0,176(sp)
   25cf2:	77ea                	c.ldsp	a5,184(sp)
   25cf4:	00f57763          	bgeu	a0,a5,25d02 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xee>
   25cf8:	87aa                	c.mv	a5,a0
   25cfa:	07a1                	c.addi	a5,8
   25cfc:	776a                	c.ldsp	a4,184(sp)
   25cfe:	fee7eee3          	bltu	a5,a4,25cfa <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xe6>
    if ((char *)base != buf)
   25d02:	011c                	c.addi4spn	a5,sp,128
   25d04:	fcf50de3          	beq	a0,a5,25cde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
      delete[] (char *)base;
   25d08:	d979                	c.beqz	a0,25cde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
   25d0a:	857f00ef          	jal	ra,16560 <operator delete[](void*)@plt>
   25d0e:	bfc1                	c.j	25cde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
    return v.as_exprloc().evaluate(ctx).value;
   25d10:	098c                	c.addi4spn	a1,sp,208
   25d12:	11a0                	c.addi4spn	s0,sp,232
   25d14:	8522                	c.mv	a0,s0
   25d16:	dd1f60ef          	jal	ra,1cae6 <dwarf::value::as_exprloc() const>
   25d1a:	864a                	c.mv	a2,s2
   25d1c:	85a2                	c.mv	a1,s0
   25d1e:	1088                	c.addi4spn	a0,sp,96
   25d20:	9d5fb0ef          	jal	ra,216f4 <dwarf::expr::evaluate(dwarf::expr_context*) const>
   25d24:	7426                	c.ldsp	s0,104(sp)
   25d26:	bf65                	c.j	25cde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
                       to_string(v.get_type()));
   25d28:	4541                	c.li	a0,16
   25d2a:	ea6f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25d2e:	84aa                	c.mv	s1,a0
    throw format_error(to_string(attr) + " has unexpected type " +
   25d30:	85a2                	c.mv	a1,s0
   25d32:	850a                	c.mv	a0,sp
   25d34:	03d030ef          	jal	ra,29570 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   25d38:	00009597          	auipc	a1,0x9
   25d3c:	97858593          	addi	a1,a1,-1672 # 2e6b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   25d40:	850a                	c.mv	a0,sp
   25d42:	9fff00ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25d46:	85aa                	c.mv	a1,a0
   25d48:	1008                	c.addi4spn	a0,sp,32
   25d4a:	ec6f00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   25d4e:	45fe                	c.lwsp	a1,220(sp)
   25d50:	0088                	c.addi4spn	a0,sp,64
   25d52:	7ac010ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(attr) + " has unexpected type " +
   25d56:	0090                	c.addi4spn	a2,sp,64
   25d58:	100c                	c.addi4spn	a1,sp,32
   25d5a:	1088                	c.addi4spn	a0,sp,96
   25d5c:	00013317          	auipc	t1,0x13
   25d60:	65c33303          	ld	t1,1628(t1) # 393b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14f4c>
   25d64:	9302                	c.jalr	t1
   25d66:	108c                	c.addi4spn	a1,sp,96
   25d68:	8526                	c.mv	a0,s1
   25d6a:	fd6f00ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25d6e:	00013797          	auipc	a5,0x13
   25d72:	7e27b783          	ld	a5,2018(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   25d76:	07c1                	c.addi	a5,16
   25d78:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   25d7a:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25d7c:	189c                	c.addi4spn	a5,sp,112
   25d7e:	00f50463          	beq	a0,a5,25d86 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x172>
   25d82:	f2ef00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d86:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25d88:	089c                	c.addi4spn	a5,sp,80
   25d8a:	00f50463          	beq	a0,a5,25d92 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x17e>
   25d8e:	f22f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d92:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   25d94:	181c                	c.addi4spn	a5,sp,48
   25d96:	00f50463          	beq	a0,a5,25d9e <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x18a>
   25d9a:	f16f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d9e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25da0:	081c                	c.addi4spn	a5,sp,16
   25da2:	00f50463          	beq	a0,a5,25daa <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x196>
   25da6:	f0af00ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   25daa:	00013617          	auipc	a2,0x13
   25dae:	5ce63603          	ld	a2,1486(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   25db2:	00013597          	auipc	a1,0x13
   25db6:	4f65b583          	ld	a1,1270(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   25dba:	8526                	c.mv	a0,s1
   25dbc:	8a5f00ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   25dc0:	842a                	c.mv	s0,a0
   25dc2:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25dc4:	189c                	c.addi4spn	a5,sp,112
   25dc6:	00f50463          	beq	a0,a5,25dce <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1ba>
   25dca:	ee6f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25dce:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25dd0:	089c                	c.addi4spn	a5,sp,80
   25dd2:	00f50463          	beq	a0,a5,25dda <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1c6>
   25dd6:	edaf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
    throw format_error("reference depth exceeded for " + to_string(attr));
   25dda:	8526                	c.mv	a0,s1
   25ddc:	e94f00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   25de0:	8522                	c.mv	a0,s0
   25de2:	8aff00ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   25de6:	842a                	c.mv	s0,a0
   25de8:	b7dd                	c.j	25dce <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1ba>
   25dea:	842a                	c.mv	s0,a0
   25dec:	b7fd                	c.j	25dda <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1c6>
    for (T *p = base; p < end; ++p)
   25dee:	842a                	c.mv	s0,a0
   25df0:	754a                	c.ldsp	a0,176(sp)
   25df2:	87aa                	c.mv	a5,a0
   25df4:	776a                	c.ldsp	a4,184(sp)
   25df6:	00e7eb63          	bltu	a5,a4,25e0c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f8>
    if ((char *)base != buf)
   25dfa:	011c                	c.addi4spn	a5,sp,128
   25dfc:	00f50563          	beq	a0,a5,25e06 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f2>
      delete[] (char *)base;
   25e00:	c119                	c.beqz	a0,25e06 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f2>
   25e02:	f5ef00ef          	jal	ra,16560 <operator delete[](void*)@plt>
   25e06:	8522                	c.mv	a0,s0
   25e08:	889f00ef          	jal	ra,16690 <_Unwind_Resume@plt>
    for (T *p = base; p < end; ++p)
   25e0c:	07a1                	c.addi	a5,8
   25e0e:	b7dd                	c.j	25df4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1e0>
   25e10:	842a                	c.mv	s0,a0
   25e12:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25e14:	189c                	c.addi4spn	a5,sp,112
   25e16:	00f50463          	beq	a0,a5,25e1e <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x20a>
   25e1a:	e96f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25e1e:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25e20:	089c                	c.addi4spn	a5,sp,80
   25e22:	00f50463          	beq	a0,a5,25e2a <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x216>
   25e26:	e8af00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25e2a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   25e2c:	181c                	c.addi4spn	a5,sp,48
   25e2e:	00f50463          	beq	a0,a5,25e36 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x222>
   25e32:	e7ef00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25e36:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25e38:	081c                	c.addi4spn	a5,sp,16
   25e3a:	00f50463          	beq	a0,a5,25e42 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x22e>
   25e3e:	e72f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   25e42:	8526                	c.mv	a0,s1
   25e44:	e2cf00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   25e48:	8522                	c.mv	a0,s0
   25e4a:	847f00ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   25e4e:	842a                	c.mv	s0,a0
   25e50:	b7f9                	c.j	25e1e <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x20a>
   25e52:	842a                	c.mv	s0,a0
   25e54:	bfd9                	c.j	25e2a <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x216>
   25e56:	842a                	c.mv	s0,a0
   25e58:	bff9                	c.j	25e36 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x222>
   25e5a:	842a                	c.mv	s0,a0
   25e5c:	b7dd                	c.j	25e42 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x22e>

0000000000025e5e <dwarf::at_byte_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_size);
   25e5e:	1141                	c.addi	sp,-16
   25e60:	e406                	c.sdsp	ra,8(sp)
   25e62:	862e                	c.mv	a2,a1
   25e64:	4681                	c.li	a3,0
   25e66:	85aa                	c.mv	a1,a0
   25e68:	452d                	c.li	a0,11
   25e6a:	dabff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25e6e:	60a2                	c.ldsp	ra,8(sp)
   25e70:	0141                	c.addi	sp,16
   25e72:	8082                	c.jr	ra

0000000000025e74 <dwarf::at_bit_offset(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_offset);
   25e74:	1141                	c.addi	sp,-16
   25e76:	e406                	c.sdsp	ra,8(sp)
   25e78:	862e                	c.mv	a2,a1
   25e7a:	4681                	c.li	a3,0
   25e7c:	85aa                	c.mv	a1,a0
   25e7e:	4531                	c.li	a0,12
   25e80:	d95ff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25e84:	60a2                	c.ldsp	ra,8(sp)
   25e86:	0141                	c.addi	sp,16
   25e88:	8082                	c.jr	ra

0000000000025e8a <dwarf::at_bit_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_size);
   25e8a:	1141                	c.addi	sp,-16
   25e8c:	e406                	c.sdsp	ra,8(sp)
   25e8e:	862e                	c.mv	a2,a1
   25e90:	4681                	c.li	a3,0
   25e92:	85aa                	c.mv	a1,a0
   25e94:	4535                	c.li	a0,13
   25e96:	d7fff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25e9a:	60a2                	c.ldsp	ra,8(sp)
   25e9c:	0141                	c.addi	sp,16
   25e9e:	8082                	c.jr	ra

0000000000025ea0 <dwarf::at_lower_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
   25ea0:	1141                	c.addi	sp,-16
   25ea2:	e406                	c.sdsp	ra,8(sp)
   25ea4:	862e                	c.mv	a2,a1
   25ea6:	4681                	c.li	a3,0
   25ea8:	85aa                	c.mv	a1,a0
   25eaa:	02200513          	addi	a0,zero,34
   25eae:	d67ff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25eb2:	60a2                	c.ldsp	ra,8(sp)
   25eb4:	0141                	c.addi	sp,16
   25eb6:	8082                	c.jr	ra

0000000000025eb8 <dwarf::at_bit_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_stride);
   25eb8:	1141                	c.addi	sp,-16
   25eba:	e406                	c.sdsp	ra,8(sp)
   25ebc:	862e                	c.mv	a2,a1
   25ebe:	4681                	c.li	a3,0
   25ec0:	85aa                	c.mv	a1,a0
   25ec2:	02e00513          	addi	a0,zero,46
   25ec6:	d4fff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25eca:	60a2                	c.ldsp	ra,8(sp)
   25ecc:	0141                	c.addi	sp,16
   25ece:	8082                	c.jr	ra

0000000000025ed0 <dwarf::at_upper_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(upper_bound);
   25ed0:	1141                	c.addi	sp,-16
   25ed2:	e406                	c.sdsp	ra,8(sp)
   25ed4:	862e                	c.mv	a2,a1
   25ed6:	4681                	c.li	a3,0
   25ed8:	85aa                	c.mv	a1,a0
   25eda:	02f00513          	addi	a0,zero,47
   25ede:	d37ff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25ee2:	60a2                	c.ldsp	ra,8(sp)
   25ee4:	0141                	c.addi	sp,16
   25ee6:	8082                	c.jr	ra

0000000000025ee8 <dwarf::at_count(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(count);
   25ee8:	1141                	c.addi	sp,-16
   25eea:	e406                	c.sdsp	ra,8(sp)
   25eec:	862e                	c.mv	a2,a1
   25eee:	4681                	c.li	a3,0
   25ef0:	85aa                	c.mv	a1,a0
   25ef2:	03700513          	addi	a0,zero,55
   25ef6:	d1fff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25efa:	60a2                	c.ldsp	ra,8(sp)
   25efc:	0141                	c.addi	sp,16
   25efe:	8082                	c.jr	ra

0000000000025f00 <dwarf::at_allocated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(allocated);
   25f00:	1141                	c.addi	sp,-16
   25f02:	e406                	c.sdsp	ra,8(sp)
   25f04:	862e                	c.mv	a2,a1
   25f06:	4681                	c.li	a3,0
   25f08:	85aa                	c.mv	a1,a0
   25f0a:	04e00513          	addi	a0,zero,78
   25f0e:	d07ff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25f12:	60a2                	c.ldsp	ra,8(sp)
   25f14:	0141                	c.addi	sp,16
   25f16:	8082                	c.jr	ra

0000000000025f18 <dwarf::at_associated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(associated);
   25f18:	1141                	c.addi	sp,-16
   25f1a:	e406                	c.sdsp	ra,8(sp)
   25f1c:	862e                	c.mv	a2,a1
   25f1e:	4681                	c.li	a3,0
   25f20:	85aa                	c.mv	a1,a0
   25f22:	04f00513          	addi	a0,zero,79
   25f26:	cefff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25f2a:	60a2                	c.ldsp	ra,8(sp)
   25f2c:	0141                	c.addi	sp,16
   25f2e:	8082                	c.jr	ra

0000000000025f30 <dwarf::at_byte_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_stride);
   25f30:	1141                	c.addi	sp,-16
   25f32:	e406                	c.sdsp	ra,8(sp)
   25f34:	862e                	c.mv	a2,a1
   25f36:	4681                	c.li	a3,0
   25f38:	85aa                	c.mv	a1,a0
   25f3a:	05100513          	addi	a0,zero,81
   25f3e:	cd7ff0ef          	jal	ra,25c14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25f42:	60a2                	c.ldsp	ra,8(sp)
   25f44:	0141                	c.addi	sp,16
   25f46:	8082                	c.jr	ra

0000000000025f48 <dwarf::at_high_pc(dwarf::die const&)>:
taddr at_high_pc(const die &d) {
   25f48:	7131                	c.addi16sp	sp,-192
   25f4a:	fd06                	c.sdsp	ra,184(sp)
   25f4c:	f922                	c.sdsp	s0,176(sp)
   25f4e:	f526                	c.sdsp	s1,168(sp)
   25f50:	842a                	c.mv	s0,a0
  value v(d[DW_AT::high_pc]);
   25f52:	4649                	c.li	a2,18
   25f54:	85aa                	c.mv	a1,a0
   25f56:	0128                	c.addi4spn	a0,sp,136
   25f58:	f00f50ef          	jal	ra,1b658 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   25f5c:	47da                	c.lwsp	a5,148(sp)
  switch (v.get_type()) {
   25f5e:	4705                	c.li	a4,1
   25f60:	02e78263          	beq	a5,a4,25f84 <dwarf::at_high_pc(dwarf::die const&)+0x3c>
   25f64:	37f5                	c.addiw	a5,-3
   25f66:	02f76363          	bltu	a4,a5,25f8c <dwarf::at_high_pc(dwarf::die const&)+0x44>
    return at_low_pc(d) + v.as_uconstant();
   25f6a:	8522                	c.mv	a0,s0
   25f6c:	c4aff0ef          	jal	ra,253b6 <dwarf::at_low_pc(dwarf::die const&)>
   25f70:	842a                	c.mv	s0,a0
   25f72:	0128                	c.addi4spn	a0,sp,136
   25f74:	c0ef60ef          	jal	ra,1c382 <dwarf::value::as_uconstant() const>
   25f78:	9522                	c.add	a0,s0
}
   25f7a:	70ea                	c.ldsp	ra,184(sp)
   25f7c:	744a                	c.ldsp	s0,176(sp)
   25f7e:	74aa                	c.ldsp	s1,168(sp)
   25f80:	6129                	c.addi16sp	sp,192
   25f82:	8082                	c.jr	ra
    return v.as_address();
   25f84:	0128                	c.addi4spn	a0,sp,136
   25f86:	dfdf50ef          	jal	ra,1bd82 <dwarf::value::as_address() const>
   25f8a:	bfc5                	c.j	25f7a <dwarf::at_high_pc(dwarf::die const&)+0x32>
                       to_string(v.get_type()));
   25f8c:	4541                	c.li	a0,16
   25f8e:	c42f00ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   25f92:	84aa                	c.mv	s1,a0
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   25f94:	45c9                	c.li	a1,18
   25f96:	0028                	c.addi4spn	a0,sp,8
   25f98:	5d8030ef          	jal	ra,29570 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   25f9c:	00008597          	auipc	a1,0x8
   25fa0:	71458593          	addi	a1,a1,1812 # 2e6b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   25fa4:	0028                	c.addi4spn	a0,sp,8
   25fa6:	f9af00ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25faa:	85aa                	c.mv	a1,a0
   25fac:	1028                	c.addi4spn	a0,sp,40
   25fae:	c62f00ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   25fb2:	45da                	c.lwsp	a1,148(sp)
   25fb4:	00a8                	c.addi4spn	a0,sp,72
   25fb6:	548010ef          	jal	ra,274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   25fba:	00b0                	c.addi4spn	a2,sp,72
   25fbc:	102c                	c.addi4spn	a1,sp,40
   25fbe:	10a8                	c.addi4spn	a0,sp,104
   25fc0:	00013317          	auipc	t1,0x13
   25fc4:	3f833303          	ld	t1,1016(t1) # 393b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14f4c>
   25fc8:	9302                	c.jalr	t1
      : std::runtime_error(what_arg) {}
   25fca:	10ac                	c.addi4spn	a1,sp,104
   25fcc:	8526                	c.mv	a0,s1
   25fce:	d72f00ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25fd2:	00013797          	auipc	a5,0x13
   25fd6:	57e7b783          	ld	a5,1406(a5) # 39550 <vtable for dwarf::format_error@@Base+0xc20>
   25fda:	07c1                	c.addi	a5,16
   25fdc:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   25fde:	7526                	c.ldsp	a0,104(sp)
	if (!_M_is_local())
   25fe0:	18bc                	c.addi4spn	a5,sp,120
   25fe2:	00f50463          	beq	a0,a5,25fea <dwarf::at_high_pc(dwarf::die const&)+0xa2>
   25fe6:	ccaf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25fea:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   25fec:	08bc                	c.addi4spn	a5,sp,88
   25fee:	00f50463          	beq	a0,a5,25ff6 <dwarf::at_high_pc(dwarf::die const&)+0xae>
   25ff2:	cbef00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25ff6:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   25ff8:	183c                	c.addi4spn	a5,sp,56
   25ffa:	00f50463          	beq	a0,a5,26002 <dwarf::at_high_pc(dwarf::die const&)+0xba>
   25ffe:	cb2f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26002:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   26004:	083c                	c.addi4spn	a5,sp,24
   26006:	00f50463          	beq	a0,a5,2600e <dwarf::at_high_pc(dwarf::die const&)+0xc6>
   2600a:	ca6f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2600e:	00013617          	auipc	a2,0x13
   26012:	36a63603          	ld	a2,874(a2) # 39378 <dwarf::format_error::~format_error()@@Base+0x1fc80>
   26016:	00013597          	auipc	a1,0x13
   2601a:	2925b583          	ld	a1,658(a1) # 392a8 <typeinfo for dwarf::format_error@@Base+0x9f0>
   2601e:	8526                	c.mv	a0,s1
   26020:	e40f00ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   26024:	842a                	c.mv	s0,a0
   26026:	7526                	c.ldsp	a0,104(sp)
	if (!_M_is_local())
   26028:	18bc                	c.addi4spn	a5,sp,120
   2602a:	00f50463          	beq	a0,a5,26032 <dwarf::at_high_pc(dwarf::die const&)+0xea>
   2602e:	c82f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26032:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   26034:	08bc                	c.addi4spn	a5,sp,88
   26036:	00f50463          	beq	a0,a5,2603e <dwarf::at_high_pc(dwarf::die const&)+0xf6>
   2603a:	c76f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2603e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   26040:	183c                	c.addi4spn	a5,sp,56
   26042:	00f50463          	beq	a0,a5,2604a <dwarf::at_high_pc(dwarf::die const&)+0x102>
   26046:	c6af00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2604a:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   2604c:	083c                	c.addi4spn	a5,sp,24
   2604e:	00f50463          	beq	a0,a5,26056 <dwarf::at_high_pc(dwarf::die const&)+0x10e>
   26052:	c5ef00ef          	jal	ra,164b0 <operator delete(void*)@plt>
   26056:	8526                	c.mv	a0,s1
   26058:	c18f00ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2605c:	8522                	c.mv	a0,s0
   2605e:	e32f00ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   26062:	842a                	c.mv	s0,a0
   26064:	b7f9                	c.j	26032 <dwarf::at_high_pc(dwarf::die const&)+0xea>
   26066:	842a                	c.mv	s0,a0
   26068:	bfd9                	c.j	2603e <dwarf::at_high_pc(dwarf::die const&)+0xf6>
   2606a:	842a                	c.mv	s0,a0
   2606c:	bff9                	c.j	2604a <dwarf::at_high_pc(dwarf::die const&)+0x102>
   2606e:	842a                	c.mv	s0,a0
   26070:	b7dd                	c.j	26056 <dwarf::at_high_pc(dwarf::die const&)+0x10e>

0000000000026072 <dwarf::die_pc_range(dwarf::die const&)>:

rangelist die_pc_range(const die &d) {
   26072:	7139                	c.addi16sp	sp,-64
   26074:	fc06                	c.sdsp	ra,56(sp)
   26076:	f822                	c.sdsp	s0,48(sp)
   26078:	f426                	c.sdsp	s1,40(sp)
   2607a:	f04a                	c.sdsp	s2,32(sp)
   2607c:	84aa                	c.mv	s1,a0
   2607e:	842e                	c.mv	s0,a1
  // DWARF4 section 2.17
  if (d.has(DW_AT::ranges))
   26080:	05500593          	addi	a1,zero,85
   26084:	8522                	c.mv	a0,s0
   26086:	daaf50ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   2608a:	cd01                	c.beqz	a0,260a2 <dwarf::die_pc_range(dwarf::die const&)+0x30>
    return at_ranges(d);
   2608c:	85a2                	c.mv	a1,s0
   2608e:	8526                	c.mv	a0,s1
   26090:	909ff0ef          	jal	ra,25998 <dwarf::at_ranges(dwarf::die const&)>
  taddr low = at_low_pc(d);
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
  return rangelist({{low, high}});
}
   26094:	8526                	c.mv	a0,s1
   26096:	70e2                	c.ldsp	ra,56(sp)
   26098:	7442                	c.ldsp	s0,48(sp)
   2609a:	74a2                	c.ldsp	s1,40(sp)
   2609c:	7902                	c.ldsp	s2,32(sp)
   2609e:	6121                	c.addi16sp	sp,64
   260a0:	8082                	c.jr	ra
  taddr low = at_low_pc(d);
   260a2:	8522                	c.mv	a0,s0
   260a4:	b12ff0ef          	jal	ra,253b6 <dwarf::at_low_pc(dwarf::die const&)>
   260a8:	892a                	c.mv	s2,a0
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   260aa:	45c9                	c.li	a1,18
   260ac:	8522                	c.mv	a0,s0
   260ae:	d82f50ef          	jal	ra,1b630 <dwarf::die::has(dwarf::DW_AT) const>
   260b2:	00190793          	addi	a5,s2,1
   260b6:	ed01                	c.bnez	a0,260ce <dwarf::die_pc_range(dwarf::die const&)+0x5c>
   260b8:	e84a                	c.sdsp	s2,16(sp)
   260ba:	ec3e                	c.sdsp	a5,24(sp)
  return rangelist({{low, high}});
   260bc:	081c                	c.addi4spn	a5,sp,16
   260be:	e03e                	c.sdsp	a5,0(sp)
   260c0:	4785                	c.li	a5,1
   260c2:	e43e                	c.sdsp	a5,8(sp)
   260c4:	858a                	c.mv	a1,sp
   260c6:	8526                	c.mv	a0,s1
   260c8:	dfffb0ef          	jal	ra,21ec6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>
   260cc:	b7e1                	c.j	26094 <dwarf::die_pc_range(dwarf::die const&)+0x22>
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   260ce:	8522                	c.mv	a0,s0
   260d0:	e79ff0ef          	jal	ra,25f48 <dwarf::at_high_pc(dwarf::die const&)>
   260d4:	87aa                	c.mv	a5,a0
   260d6:	b7cd                	c.j	260b8 <dwarf::die_pc_range(dwarf::die const&)+0x46>

00000000000260d8 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)>:
    {".debug_ranges", section_type::ranges},
    {".debug_str", section_type::str},
    {".debug_types", section_type::types},
};

bool elf::section_name_to_type(const char *name, section_type *out) {
   260d8:	7179                	c.addi16sp	sp,-48
   260da:	f406                	c.sdsp	ra,40(sp)
   260dc:	f022                	c.sdsp	s0,32(sp)
   260de:	ec26                	c.sdsp	s1,24(sp)
   260e0:	e84a                	c.sdsp	s2,16(sp)
   260e2:	e44e                	c.sdsp	s3,8(sp)
   260e4:	84aa                	c.mv	s1,a0
   260e6:	89ae                	c.mv	s3,a1
  for (auto &sec : sections) {
   260e8:	00012417          	auipc	s0,0x12
   260ec:	60840413          	addi	s0,s0,1544 # 386f0 <dwarf::sections>
   260f0:	00012917          	auipc	s2,0x12
   260f4:	6c090913          	addi	s2,s2,1728 # 387b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (strcmp(sec.name, name) == 0) {
   260f8:	85a6                	c.mv	a1,s1
   260fa:	6008                	c.ld	a0,0(s0)
   260fc:	a14f00ef          	jal	ra,16310 <strcmp@plt>
   26100:	cd01                	c.beqz	a0,26118 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x40>
  for (auto &sec : sections) {
   26102:	0441                	c.addi	s0,16
   26104:	ff241ae3          	bne	s0,s2,260f8 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x20>
      *out = sec.type;
      return true;
    }
  }
  return false;
   26108:	4501                	c.li	a0,0
}
   2610a:	70a2                	c.ldsp	ra,40(sp)
   2610c:	7402                	c.ldsp	s0,32(sp)
   2610e:	64e2                	c.ldsp	s1,24(sp)
   26110:	6942                	c.ldsp	s2,16(sp)
   26112:	69a2                	c.ldsp	s3,8(sp)
   26114:	6145                	c.addi16sp	sp,48
   26116:	8082                	c.jr	ra
      *out = sec.type;
   26118:	441c                	c.lw	a5,8(s0)
   2611a:	00f9a023          	sw	a5,0(s3)
      return true;
   2611e:	4505                	c.li	a0,1
   26120:	b7ed                	c.j	2610a <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x32>

0000000000026122 <dwarf::elf::section_type_to_name(dwarf::section_type)>:

const char *elf::section_type_to_name(section_type type) {
  for (auto &sec : sections) {
   26122:	00012797          	auipc	a5,0x12
   26126:	5ce78793          	addi	a5,a5,1486 # 386f0 <dwarf::sections>
   2612a:	00012697          	auipc	a3,0x12
   2612e:	68668693          	addi	a3,a3,1670 # 387b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (sec.type == type)
   26132:	4798                	c.lw	a4,8(a5)
   26134:	00a70763          	beq	a4,a0,26142 <dwarf::elf::section_type_to_name(dwarf::section_type)+0x20>
  for (auto &sec : sections) {
   26138:	07c1                	c.addi	a5,16
   2613a:	fed79ce3          	bne	a5,a3,26132 <dwarf::elf::section_type_to_name(dwarf::section_type)+0x10>
      return sec.name;
  }
  return nullptr;
   2613e:	4501                	c.li	a0,0
}
   26140:	8082                	c.jr	ra
      return sec.name;
   26142:	6388                	c.ld	a0,0(a5)
   26144:	8082                	c.jr	ra

0000000000026146 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)>:
        return "(DW_ORD)0x" + to_hex((int)v);
}

std::string
to_string(DW_DSC v)
{
   26146:	7139                	c.addi16sp	sp,-64
   26148:	fc06                	c.sdsp	ra,56(sp)
   2614a:	f822                	c.sdsp	s0,48(sp)
   2614c:	f426                	c.sdsp	s1,40(sp)
   2614e:	f04a                	c.sdsp	s2,32(sp)
   26150:	842a                	c.mv	s0,a0
        switch (v) {
   26152:	c595                	c.beqz	a1,2617e <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x38>
   26154:	4785                	c.li	a5,1
   26156:	04f58c63          	beq	a1,a5,261ae <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x68>
        case DW_DSC::label: return "DW_DSC_label";
        case DW_DSC::range: return "DW_DSC_range";
        }
        return "(DW_DSC)0x" + to_hex((int)v);
   2615a:	848a                	c.mv	s1,sp
   2615c:	8526                	c.mv	a0,s1
   2615e:	00013317          	auipc	t1,0x13
   26162:	2b233303          	ld	t1,690(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   26166:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26168:	4729                	c.li	a4,10
   2616a:	00008697          	auipc	a3,0x8
   2616e:	63e68693          	addi	a3,a3,1598 # 2e7a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c8>
   26172:	4601                	c.li	a2,0
   26174:	4581                	c.li	a1,0
   26176:	8526                	c.mv	a0,s1
   26178:	c88f00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2617c:	a899                	c.j	261d2 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2617e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26182:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26184:	4681                	c.li	a3,0
   26186:	00008617          	auipc	a2,0x8
   2618a:	60e60613          	addi	a2,a2,1550 # 2e794 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b4>
   2618e:	00008597          	auipc	a1,0x8
   26192:	5fa58593          	addi	a1,a1,1530 # 2e788 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a8>
   26196:	00013317          	auipc	t1,0x13
   2619a:	16a33303          	ld	t1,362(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2619e:	9302                	c.jalr	t1
}
   261a0:	8522                	c.mv	a0,s0
   261a2:	70e2                	c.ldsp	ra,56(sp)
   261a4:	7442                	c.ldsp	s0,48(sp)
   261a6:	74a2                	c.ldsp	s1,40(sp)
   261a8:	7902                	c.ldsp	s2,32(sp)
   261aa:	6121                	c.addi16sp	sp,64
   261ac:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   261ae:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   261b2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   261b4:	4681                	c.li	a3,0
   261b6:	00008617          	auipc	a2,0x8
   261ba:	5ee60613          	addi	a2,a2,1518 # 2e7a4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c4>
   261be:	00008597          	auipc	a1,0x8
   261c2:	5da58593          	addi	a1,a1,1498 # 2e798 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b8>
   261c6:	00013317          	auipc	t1,0x13
   261ca:	13a33303          	ld	t1,314(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   261ce:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   261d0:	bfc1                	c.j	261a0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   261d2:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   261d4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   261d8:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   261da:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   261dc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   261e0:	03278463          	beq	a5,s2,26208 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xc2>
      { _M_dataplus._M_p = __p; }
   261e4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   261e6:	689c                	c.ld	a5,16(s1)
   261e8:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   261ea:	649c                	c.ld	a5,8(s1)
   261ec:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   261ee:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   261f2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   261f6:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   261fa:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   261fc:	081c                	c.addi4spn	a5,sp,16
   261fe:	faf501e3          	beq	a0,a5,261a0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26202:	aaef00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26206:	bf69                	c.j	261a0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26208:	6490                	c.ld	a2,8(s1)
   2620a:	0605                	c.addi	a2,1
	if (__n == 0)
   2620c:	de79                	c.beqz	a2,261ea <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2620e:	85ca                	c.mv	a1,s2
   26210:	b40f00ef          	jal	ra,16550 <memcpy@plt>
   26214:	bfd9                	c.j	261ea <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xa4>
      { return _M_dataplus._M_p; }
   26216:	842a                	c.mv	s0,a0
   26218:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2621a:	081c                	c.addi4spn	a5,sp,16
   2621c:	00f50463          	beq	a0,a5,26224 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xde>
   26220:	a90f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26224:	8522                	c.mv	a0,s0
   26226:	c6af00ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002622a <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)>:
{
   2622a:	7139                	c.addi16sp	sp,-64
   2622c:	fc06                	c.sdsp	ra,56(sp)
   2622e:	f822                	c.sdsp	s0,48(sp)
   26230:	f426                	c.sdsp	s1,40(sp)
   26232:	f04a                	c.sdsp	s2,32(sp)
   26234:	842a                	c.mv	s0,a0
        switch (v) {
   26236:	c595                	c.beqz	a1,26262 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x38>
   26238:	4785                	c.li	a5,1
   2623a:	04f58c63          	beq	a1,a5,26292 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x68>
        return "(DW_ORD)0x" + to_hex((int)v);
   2623e:	848a                	c.mv	s1,sp
   26240:	8526                	c.mv	a0,s1
   26242:	00013317          	auipc	t1,0x13
   26246:	1ce33303          	ld	t1,462(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2624a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2624c:	4729                	c.li	a4,10
   2624e:	00008697          	auipc	a3,0x8
   26252:	59a68693          	addi	a3,a3,1434 # 2e7e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x208>
   26256:	4601                	c.li	a2,0
   26258:	4581                	c.li	a1,0
   2625a:	8526                	c.mv	a0,s1
   2625c:	ba4f00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26260:	a899                	c.j	262b6 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26262:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26266:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26268:	4681                	c.li	a3,0
   2626a:	00008617          	auipc	a2,0x8
   2626e:	55e60613          	addi	a2,a2,1374 # 2e7c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e8>
   26272:	00008597          	auipc	a1,0x8
   26276:	54658593          	addi	a1,a1,1350 # 2e7b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d8>
   2627a:	00013317          	auipc	t1,0x13
   2627e:	08633303          	ld	t1,134(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26282:	9302                	c.jalr	t1
}
   26284:	8522                	c.mv	a0,s0
   26286:	70e2                	c.ldsp	ra,56(sp)
   26288:	7442                	c.ldsp	s0,48(sp)
   2628a:	74a2                	c.ldsp	s1,40(sp)
   2628c:	7902                	c.ldsp	s2,32(sp)
   2628e:	6121                	c.addi16sp	sp,64
   26290:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26292:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26296:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26298:	4681                	c.li	a3,0
   2629a:	00008617          	auipc	a2,0x8
   2629e:	54660613          	addi	a2,a2,1350 # 2e7e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x200>
   262a2:	00008597          	auipc	a1,0x8
   262a6:	52e58593          	addi	a1,a1,1326 # 2e7d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0>
   262aa:	00013317          	auipc	t1,0x13
   262ae:	05633303          	ld	t1,86(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   262b2:	9302                	c.jalr	t1
   262b4:	bfc1                	c.j	26284 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   262b6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   262b8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   262bc:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   262be:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   262c0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   262c4:	03278463          	beq	a5,s2,262ec <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xc2>
      { _M_dataplus._M_p = __p; }
   262c8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   262ca:	689c                	c.ld	a5,16(s1)
   262cc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   262ce:	649c                	c.ld	a5,8(s1)
   262d0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   262d2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   262d6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   262da:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   262de:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   262e0:	081c                	c.addi4spn	a5,sp,16
   262e2:	faf501e3          	beq	a0,a5,26284 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   262e6:	9caf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   262ea:	bf69                	c.j	26284 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   262ec:	6490                	c.ld	a2,8(s1)
   262ee:	0605                	c.addi	a2,1
	if (__n == 0)
   262f0:	de79                	c.beqz	a2,262ce <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   262f2:	85ca                	c.mv	a1,s2
   262f4:	a5cf00ef          	jal	ra,16550 <memcpy@plt>
   262f8:	bfd9                	c.j	262ce <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xa4>
      { return _M_dataplus._M_p; }
   262fa:	842a                	c.mv	s0,a0
   262fc:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   262fe:	081c                	c.addi4spn	a5,sp,16
   26300:	00f50463          	beq	a0,a5,26308 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xde>
   26304:	9acf00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26308:	8522                	c.mv	a0,s0
   2630a:	b86f00ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002630e <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)>:
{
   2630e:	7139                	c.addi16sp	sp,-64
   26310:	fc06                	c.sdsp	ra,56(sp)
   26312:	f822                	c.sdsp	s0,48(sp)
   26314:	f426                	c.sdsp	s1,40(sp)
   26316:	f04a                	c.sdsp	s2,32(sp)
   26318:	842a                	c.mv	s0,a0
        switch (v) {
   2631a:	c595                	c.beqz	a1,26346 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x38>
   2631c:	4785                	c.li	a5,1
   2631e:	04f58c63          	beq	a1,a5,26376 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x68>
        return "(DW_CHILDREN)0x" + to_hex((int)v);
   26322:	848a                	c.mv	s1,sp
   26324:	8526                	c.mv	a0,s1
   26326:	00013317          	auipc	t1,0x13
   2632a:	0ea33303          	ld	t1,234(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2632e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26330:	473d                	c.li	a4,15
   26332:	00008697          	auipc	a3,0x8
   26336:	4e668693          	addi	a3,a3,1254 # 2e818 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x238>
   2633a:	4601                	c.li	a2,0
   2633c:	4581                	c.li	a1,0
   2633e:	8526                	c.mv	a0,s1
   26340:	ac0f00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26344:	a899                	c.j	2639a <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26346:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2634a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2634c:	4681                	c.li	a3,0
   2634e:	00008617          	auipc	a2,0x8
   26352:	4b860613          	addi	a2,a2,1208 # 2e806 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x226>
   26356:	00008597          	auipc	a1,0x8
   2635a:	4a258593          	addi	a1,a1,1186 # 2e7f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x218>
   2635e:	00013317          	auipc	t1,0x13
   26362:	fa233303          	ld	t1,-94(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26366:	9302                	c.jalr	t1
}
   26368:	8522                	c.mv	a0,s0
   2636a:	70e2                	c.ldsp	ra,56(sp)
   2636c:	7442                	c.ldsp	s0,48(sp)
   2636e:	74a2                	c.ldsp	s1,40(sp)
   26370:	7902                	c.ldsp	s2,32(sp)
   26372:	6121                	c.addi16sp	sp,64
   26374:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26376:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2637a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2637c:	4681                	c.li	a3,0
   2637e:	00008617          	auipc	a2,0x8
   26382:	49960613          	addi	a2,a2,1177 # 2e817 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x237>
   26386:	00008597          	auipc	a1,0x8
   2638a:	48258593          	addi	a1,a1,1154 # 2e808 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x228>
   2638e:	00013317          	auipc	t1,0x13
   26392:	f7233303          	ld	t1,-142(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26396:	9302                	c.jalr	t1
   26398:	bfc1                	c.j	26368 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2639a:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2639c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   263a0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   263a2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   263a4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   263a8:	03278463          	beq	a5,s2,263d0 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xc2>
      { _M_dataplus._M_p = __p; }
   263ac:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   263ae:	689c                	c.ld	a5,16(s1)
   263b0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   263b2:	649c                	c.ld	a5,8(s1)
   263b4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   263b6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   263ba:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   263be:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   263c2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   263c4:	081c                	c.addi4spn	a5,sp,16
   263c6:	faf501e3          	beq	a0,a5,26368 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   263ca:	8e6f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   263ce:	bf69                	c.j	26368 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   263d0:	6490                	c.ld	a2,8(s1)
   263d2:	0605                	c.addi	a2,1
	if (__n == 0)
   263d4:	de79                	c.beqz	a2,263b2 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   263d6:	85ca                	c.mv	a1,s2
   263d8:	978f00ef          	jal	ra,16550 <memcpy@plt>
   263dc:	bfd9                	c.j	263b2 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xa4>
      { return _M_dataplus._M_p; }
   263de:	842a                	c.mv	s0,a0
   263e0:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   263e2:	081c                	c.addi4spn	a5,sp,16
   263e4:	00f50463          	beq	a0,a5,263ec <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xde>
   263e8:	8c8f00ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   263ec:	8522                	c.mv	a0,s0
   263ee:	aa2f00ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000263f2 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)>:
{
   263f2:	7139                	c.addi16sp	sp,-64
   263f4:	fc06                	c.sdsp	ra,56(sp)
   263f6:	f822                	c.sdsp	s0,48(sp)
   263f8:	f426                	c.sdsp	s1,40(sp)
   263fa:	f04a                	c.sdsp	s2,32(sp)
   263fc:	842a                	c.mv	s0,a0
        switch (v) {
   263fe:	4789                	c.li	a5,2
   26400:	06f58263          	beq	a1,a5,26464 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x72>
   26404:	478d                	c.li	a5,3
   26406:	08f58163          	beq	a1,a5,26488 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x96>
   2640a:	4785                	c.li	a5,1
   2640c:	02f58463          	beq	a1,a5,26434 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x42>
        return "(DW_ACCESS)0x" + to_hex((int)v);
   26410:	848a                	c.mv	s1,sp
   26412:	8526                	c.mv	a0,s1
   26414:	00013317          	auipc	t1,0x13
   26418:	ffc33303          	ld	t1,-4(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2641c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2641e:	4735                	c.li	a4,13
   26420:	00008697          	auipc	a3,0x8
   26424:	45068693          	addi	a3,a3,1104 # 2e870 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x290>
   26428:	4601                	c.li	a2,0
   2642a:	4581                	c.li	a1,0
   2642c:	8526                	c.mv	a0,s1
   2642e:	9d2f00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26432:	a8ad                	c.j	264ac <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26434:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26438:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2643a:	4681                	c.li	a3,0
   2643c:	00008617          	auipc	a2,0x8
   26440:	3fc60613          	addi	a2,a2,1020 # 2e838 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x258>
   26444:	00008597          	auipc	a1,0x8
   26448:	3e458593          	addi	a1,a1,996 # 2e828 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x248>
   2644c:	00013317          	auipc	t1,0x13
   26450:	eb433303          	ld	t1,-332(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26454:	9302                	c.jalr	t1
}
   26456:	8522                	c.mv	a0,s0
   26458:	70e2                	c.ldsp	ra,56(sp)
   2645a:	7442                	c.ldsp	s0,48(sp)
   2645c:	74a2                	c.ldsp	s1,40(sp)
   2645e:	7902                	c.ldsp	s2,32(sp)
   26460:	6121                	c.addi16sp	sp,64
   26462:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26464:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26468:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2646a:	4681                	c.li	a3,0
   2646c:	00008617          	auipc	a2,0x8
   26470:	3e760613          	addi	a2,a2,999 # 2e853 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x273>
   26474:	00008597          	auipc	a1,0x8
   26478:	3cc58593          	addi	a1,a1,972 # 2e840 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x260>
   2647c:	00013317          	auipc	t1,0x13
   26480:	e8433303          	ld	t1,-380(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26484:	9302                	c.jalr	t1
   26486:	bfc1                	c.j	26456 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26488:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2648c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2648e:	4681                	c.li	a3,0
   26490:	00008617          	auipc	a2,0x8
   26494:	3d960613          	addi	a2,a2,985 # 2e869 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x289>
   26498:	00008597          	auipc	a1,0x8
   2649c:	3c058593          	addi	a1,a1,960 # 2e858 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x278>
   264a0:	00013317          	auipc	t1,0x13
   264a4:	e6033303          	ld	t1,-416(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   264a8:	9302                	c.jalr	t1
   264aa:	b775                	c.j	26456 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   264ac:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   264ae:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   264b2:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   264b4:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   264b6:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   264ba:	03278463          	beq	a5,s2,264e2 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xf0>
      { _M_dataplus._M_p = __p; }
   264be:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   264c0:	689c                	c.ld	a5,16(s1)
   264c2:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   264c4:	649c                	c.ld	a5,8(s1)
   264c6:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   264c8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   264cc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   264d0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   264d4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   264d6:	081c                	c.addi4spn	a5,sp,16
   264d8:	f6f50fe3          	beq	a0,a5,26456 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   264dc:	fd5ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   264e0:	bf9d                	c.j	26456 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   264e2:	6490                	c.ld	a2,8(s1)
   264e4:	0605                	c.addi	a2,1
	if (__n == 0)
   264e6:	de79                	c.beqz	a2,264c4 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   264e8:	85ca                	c.mv	a1,s2
   264ea:	866f00ef          	jal	ra,16550 <memcpy@plt>
   264ee:	bfd9                	c.j	264c4 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd2>
      { return _M_dataplus._M_p; }
   264f0:	842a                	c.mv	s0,a0
   264f2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   264f4:	081c                	c.addi4spn	a5,sp,16
   264f6:	00f50463          	beq	a0,a5,264fe <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x10c>
   264fa:	fb7ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   264fe:	8522                	c.mv	a0,s0
   26500:	990f00ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026504 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)>:
{
   26504:	7139                	c.addi16sp	sp,-64
   26506:	fc06                	c.sdsp	ra,56(sp)
   26508:	f822                	c.sdsp	s0,48(sp)
   2650a:	f426                	c.sdsp	s1,40(sp)
   2650c:	f04a                	c.sdsp	s2,32(sp)
   2650e:	842a                	c.mv	s0,a0
        switch (v) {
   26510:	4785                	c.li	a5,1
   26512:	06f58063          	beq	a1,a5,26572 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x6e>
   26516:	4789                	c.li	a5,2
   26518:	06f58f63          	beq	a1,a5,26596 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x92>
   2651c:	c19d                	c.beqz	a1,26542 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x3e>
        return "(DW_VIRTUALITY)0x" + to_hex((int)v);
   2651e:	848a                	c.mv	s1,sp
   26520:	8526                	c.mv	a0,s1
   26522:	00013317          	auipc	t1,0x13
   26526:	eee33303          	ld	t1,-274(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2652a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2652c:	4745                	c.li	a4,17
   2652e:	00008697          	auipc	a3,0x8
   26532:	3a268693          	addi	a3,a3,930 # 2e8d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2f0>
   26536:	4601                	c.li	a2,0
   26538:	4581                	c.li	a1,0
   2653a:	8526                	c.mv	a0,s1
   2653c:	8c4f00ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26540:	a8ad                	c.j	265ba <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26542:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26546:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26548:	4681                	c.li	a3,0
   2654a:	00008617          	auipc	a2,0x8
   2654e:	34860613          	addi	a2,a2,840 # 2e892 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b2>
   26552:	00008597          	auipc	a1,0x8
   26556:	32e58593          	addi	a1,a1,814 # 2e880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2a0>
   2655a:	00013317          	auipc	t1,0x13
   2655e:	da633303          	ld	t1,-602(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26562:	9302                	c.jalr	t1
}
   26564:	8522                	c.mv	a0,s0
   26566:	70e2                	c.ldsp	ra,56(sp)
   26568:	7442                	c.ldsp	s0,48(sp)
   2656a:	74a2                	c.ldsp	s1,40(sp)
   2656c:	7902                	c.ldsp	s2,32(sp)
   2656e:	6121                	c.addi16sp	sp,64
   26570:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26572:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26576:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26578:	4681                	c.li	a3,0
   2657a:	00008617          	auipc	a2,0x8
   2657e:	33360613          	addi	a2,a2,819 # 2e8ad <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2cd>
   26582:	00008597          	auipc	a1,0x8
   26586:	31658593          	addi	a1,a1,790 # 2e898 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b8>
   2658a:	00013317          	auipc	t1,0x13
   2658e:	d7633303          	ld	t1,-650(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26592:	9302                	c.jalr	t1
   26594:	bfc1                	c.j	26564 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26596:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2659a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2659c:	4681                	c.li	a3,0
   2659e:	00008617          	auipc	a2,0x8
   265a2:	32c60613          	addi	a2,a2,812 # 2e8ca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2ea>
   265a6:	00008597          	auipc	a1,0x8
   265aa:	30a58593          	addi	a1,a1,778 # 2e8b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2d0>
   265ae:	00013317          	auipc	t1,0x13
   265b2:	d5233303          	ld	t1,-686(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   265b6:	9302                	c.jalr	t1
   265b8:	b775                	c.j	26564 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   265ba:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   265bc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   265c0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   265c2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   265c4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   265c8:	03278463          	beq	a5,s2,265f0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xec>
      { _M_dataplus._M_p = __p; }
   265cc:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   265ce:	689c                	c.ld	a5,16(s1)
   265d0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   265d2:	649c                	c.ld	a5,8(s1)
   265d4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   265d6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   265da:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   265de:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   265e2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   265e4:	081c                	c.addi4spn	a5,sp,16
   265e6:	f6f50fe3          	beq	a0,a5,26564 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   265ea:	ec7ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   265ee:	bf9d                	c.j	26564 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   265f0:	6490                	c.ld	a2,8(s1)
   265f2:	0605                	c.addi	a2,1
	if (__n == 0)
   265f4:	de79                	c.beqz	a2,265d2 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xce>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   265f6:	85ca                	c.mv	a1,s2
   265f8:	f59ef0ef          	jal	ra,16550 <memcpy@plt>
   265fc:	bfd9                	c.j	265d2 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xce>
      { return _M_dataplus._M_p; }
   265fe:	842a                	c.mv	s0,a0
   26600:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26602:	081c                	c.addi4spn	a5,sp,16
   26604:	00f50463          	beq	a0,a5,2660c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x108>
   26608:	ea9ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2660c:	8522                	c.mv	a0,s0
   2660e:	882f00ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026612 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)>:
{
   26612:	7139                	c.addi16sp	sp,-64
   26614:	fc06                	c.sdsp	ra,56(sp)
   26616:	f822                	c.sdsp	s0,48(sp)
   26618:	f426                	c.sdsp	s1,40(sp)
   2661a:	f04a                	c.sdsp	s2,32(sp)
   2661c:	842a                	c.mv	s0,a0
        switch (v) {
   2661e:	4789                	c.li	a5,2
   26620:	06f58263          	beq	a1,a5,26684 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x72>
   26624:	478d                	c.li	a5,3
   26626:	08f58163          	beq	a1,a5,266a8 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x96>
   2662a:	4785                	c.li	a5,1
   2662c:	02f58463          	beq	a1,a5,26654 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x42>
        return "(DW_CC)0x" + to_hex((int)v);
   26630:	848a                	c.mv	s1,sp
   26632:	8526                	c.mv	a0,s1
   26634:	00013317          	auipc	t1,0x13
   26638:	ddc33303          	ld	t1,-548(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2663c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2663e:	4725                	c.li	a4,9
   26640:	00008697          	auipc	a3,0x8
   26644:	2d868693          	addi	a3,a3,728 # 2e918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x338>
   26648:	4601                	c.li	a2,0
   2664a:	4581                	c.li	a1,0
   2664c:	8526                	c.mv	a0,s1
   2664e:	fb3ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26652:	a8ad                	c.j	266cc <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26654:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26658:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2665a:	4681                	c.li	a3,0
   2665c:	00008617          	auipc	a2,0x8
   26660:	29860613          	addi	a2,a2,664 # 2e8f4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x314>
   26664:	00008597          	auipc	a1,0x8
   26668:	28458593          	addi	a1,a1,644 # 2e8e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x308>
   2666c:	00013317          	auipc	t1,0x13
   26670:	c9433303          	ld	t1,-876(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26674:	9302                	c.jalr	t1
}
   26676:	8522                	c.mv	a0,s0
   26678:	70e2                	c.ldsp	ra,56(sp)
   2667a:	7442                	c.ldsp	s0,48(sp)
   2667c:	74a2                	c.ldsp	s1,40(sp)
   2667e:	7902                	c.ldsp	s2,32(sp)
   26680:	6121                	c.addi16sp	sp,64
   26682:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26684:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26688:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2668a:	4681                	c.li	a3,0
   2668c:	00008617          	auipc	a2,0x8
   26690:	27960613          	addi	a2,a2,633 # 2e905 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x325>
   26694:	00008597          	auipc	a1,0x8
   26698:	26458593          	addi	a1,a1,612 # 2e8f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x318>
   2669c:	00013317          	auipc	t1,0x13
   266a0:	c6433303          	ld	t1,-924(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   266a4:	9302                	c.jalr	t1
   266a6:	bfc1                	c.j	26676 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   266a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   266ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   266ae:	4681                	c.li	a3,0
   266b0:	00008617          	auipc	a2,0x8
   266b4:	26460613          	addi	a2,a2,612 # 2e914 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x334>
   266b8:	00008597          	auipc	a1,0x8
   266bc:	25058593          	addi	a1,a1,592 # 2e908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x328>
   266c0:	00013317          	auipc	t1,0x13
   266c4:	c4033303          	ld	t1,-960(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   266c8:	9302                	c.jalr	t1
   266ca:	b775                	c.j	26676 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   266cc:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   266ce:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   266d2:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   266d4:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   266d6:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   266da:	03278463          	beq	a5,s2,26702 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xf0>
      { _M_dataplus._M_p = __p; }
   266de:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   266e0:	689c                	c.ld	a5,16(s1)
   266e2:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   266e4:	649c                	c.ld	a5,8(s1)
   266e6:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   266e8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   266ec:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   266f0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   266f4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   266f6:	081c                	c.addi4spn	a5,sp,16
   266f8:	f6f50fe3          	beq	a0,a5,26676 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   266fc:	db5ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26700:	bf9d                	c.j	26676 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26702:	6490                	c.ld	a2,8(s1)
   26704:	0605                	c.addi	a2,1
	if (__n == 0)
   26706:	de79                	c.beqz	a2,266e4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26708:	85ca                	c.mv	a1,s2
   2670a:	e47ef0ef          	jal	ra,16550 <memcpy@plt>
   2670e:	bfd9                	c.j	266e4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd2>
      { return _M_dataplus._M_p; }
   26710:	842a                	c.mv	s0,a0
   26712:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26714:	081c                	c.addi4spn	a5,sp,16
   26716:	00f50463          	beq	a0,a5,2671e <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x10c>
   2671a:	d97ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2671e:	8522                	c.mv	a0,s0
   26720:	f71ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026724 <dwarf::to_string[abi:cxx11](dwarf::DW_END)>:
{
   26724:	7139                	c.addi16sp	sp,-64
   26726:	fc06                	c.sdsp	ra,56(sp)
   26728:	f822                	c.sdsp	s0,48(sp)
   2672a:	f426                	c.sdsp	s1,40(sp)
   2672c:	f04a                	c.sdsp	s2,32(sp)
   2672e:	842a                	c.mv	s0,a0
        switch (v) {
   26730:	4785                	c.li	a5,1
   26732:	06f58063          	beq	a1,a5,26792 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x6e>
   26736:	4789                	c.li	a5,2
   26738:	06f58f63          	beq	a1,a5,267b6 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x92>
   2673c:	c19d                	c.beqz	a1,26762 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x3e>
        return "(DW_END)0x" + to_hex((int)v);
   2673e:	848a                	c.mv	s1,sp
   26740:	8526                	c.mv	a0,s1
   26742:	00013317          	auipc	t1,0x13
   26746:	cce33303          	ld	t1,-818(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2674a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2674c:	4729                	c.li	a4,10
   2674e:	00008697          	auipc	a3,0x8
   26752:	20a68693          	addi	a3,a3,522 # 2e958 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x378>
   26756:	4601                	c.li	a2,0
   26758:	4581                	c.li	a1,0
   2675a:	8526                	c.mv	a0,s1
   2675c:	ea5ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26760:	a8ad                	c.j	267da <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26762:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26766:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26768:	4681                	c.li	a3,0
   2676a:	00008617          	auipc	a2,0x8
   2676e:	1cc60613          	addi	a2,a2,460 # 2e936 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x356>
   26772:	00008597          	auipc	a1,0x8
   26776:	1b658593          	addi	a1,a1,438 # 2e928 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x348>
   2677a:	00013317          	auipc	t1,0x13
   2677e:	b8633303          	ld	t1,-1146(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26782:	9302                	c.jalr	t1
}
   26784:	8522                	c.mv	a0,s0
   26786:	70e2                	c.ldsp	ra,56(sp)
   26788:	7442                	c.ldsp	s0,48(sp)
   2678a:	74a2                	c.ldsp	s1,40(sp)
   2678c:	7902                	c.ldsp	s2,32(sp)
   2678e:	6121                	c.addi16sp	sp,64
   26790:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26792:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26796:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26798:	4681                	c.li	a3,0
   2679a:	00008617          	auipc	a2,0x8
   2679e:	1a860613          	addi	a2,a2,424 # 2e942 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x362>
   267a2:	00008597          	auipc	a1,0x8
   267a6:	19658593          	addi	a1,a1,406 # 2e938 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x358>
   267aa:	00013317          	auipc	t1,0x13
   267ae:	b5633303          	ld	t1,-1194(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   267b2:	9302                	c.jalr	t1
   267b4:	bfc1                	c.j	26784 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   267b6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   267ba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   267bc:	4681                	c.li	a3,0
   267be:	00008617          	auipc	a2,0x8
   267c2:	19760613          	addi	a2,a2,407 # 2e955 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x375>
   267c6:	00008597          	auipc	a1,0x8
   267ca:	18258593          	addi	a1,a1,386 # 2e948 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x368>
   267ce:	00013317          	auipc	t1,0x13
   267d2:	b3233303          	ld	t1,-1230(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   267d6:	9302                	c.jalr	t1
   267d8:	b775                	c.j	26784 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   267da:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   267dc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   267e0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   267e2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   267e4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   267e8:	03278463          	beq	a5,s2,26810 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xec>
      { _M_dataplus._M_p = __p; }
   267ec:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   267ee:	689c                	c.ld	a5,16(s1)
   267f0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   267f2:	649c                	c.ld	a5,8(s1)
   267f4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   267f6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   267fa:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   267fe:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26802:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26804:	081c                	c.addi4spn	a5,sp,16
   26806:	f6f50fe3          	beq	a0,a5,26784 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2680a:	ca7ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2680e:	bf9d                	c.j	26784 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26810:	6490                	c.ld	a2,8(s1)
   26812:	0605                	c.addi	a2,1
	if (__n == 0)
   26814:	de79                	c.beqz	a2,267f2 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xce>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26816:	85ca                	c.mv	a1,s2
   26818:	d39ef0ef          	jal	ra,16550 <memcpy@plt>
   2681c:	bfd9                	c.j	267f2 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xce>
      { return _M_dataplus._M_p; }
   2681e:	842a                	c.mv	s0,a0
   26820:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26822:	081c                	c.addi4spn	a5,sp,16
   26824:	00f50463          	beq	a0,a5,2682c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x108>
   26828:	c89ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2682c:	8522                	c.mv	a0,s0
   2682e:	e63ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026832 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)>:
{
   26832:	7139                	c.addi16sp	sp,-64
   26834:	fc06                	c.sdsp	ra,56(sp)
   26836:	f822                	c.sdsp	s0,48(sp)
   26838:	f426                	c.sdsp	s1,40(sp)
   2683a:	f04a                	c.sdsp	s2,32(sp)
   2683c:	842a                	c.mv	s0,a0
        switch (v) {
   2683e:	4789                	c.li	a5,2
   26840:	06f58263          	beq	a1,a5,268a4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x72>
   26844:	478d                	c.li	a5,3
   26846:	08f58163          	beq	a1,a5,268c8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x96>
   2684a:	4785                	c.li	a5,1
   2684c:	02f58463          	beq	a1,a5,26874 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x42>
        return "(DW_VIS)0x" + to_hex((int)v);
   26850:	848a                	c.mv	s1,sp
   26852:	8526                	c.mv	a0,s1
   26854:	00013317          	auipc	t1,0x13
   26858:	bbc33303          	ld	t1,-1092(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2685c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2685e:	4729                	c.li	a4,10
   26860:	00008697          	auipc	a3,0x8
   26864:	14068693          	addi	a3,a3,320 # 2e9a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3c0>
   26868:	4601                	c.li	a2,0
   2686a:	4581                	c.li	a1,0
   2686c:	8526                	c.mv	a0,s1
   2686e:	d93ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26872:	a8ad                	c.j	268ec <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26874:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26878:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2687a:	4681                	c.li	a3,0
   2687c:	00008617          	auipc	a2,0x8
   26880:	0f860613          	addi	a2,a2,248 # 2e974 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x394>
   26884:	00008597          	auipc	a1,0x8
   26888:	0e458593          	addi	a1,a1,228 # 2e968 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x388>
   2688c:	00013317          	auipc	t1,0x13
   26890:	a7433303          	ld	t1,-1420(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26894:	9302                	c.jalr	t1
}
   26896:	8522                	c.mv	a0,s0
   26898:	70e2                	c.ldsp	ra,56(sp)
   2689a:	7442                	c.ldsp	s0,48(sp)
   2689c:	74a2                	c.ldsp	s1,40(sp)
   2689e:	7902                	c.ldsp	s2,32(sp)
   268a0:	6121                	c.addi16sp	sp,64
   268a2:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   268a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   268a8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   268aa:	4681                	c.li	a3,0
   268ac:	00008617          	auipc	a2,0x8
   268b0:	0db60613          	addi	a2,a2,219 # 2e987 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a7>
   268b4:	00008597          	auipc	a1,0x8
   268b8:	0c458593          	addi	a1,a1,196 # 2e978 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x398>
   268bc:	00013317          	auipc	t1,0x13
   268c0:	a4433303          	ld	t1,-1468(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   268c4:	9302                	c.jalr	t1
   268c6:	bfc1                	c.j	26896 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   268c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   268cc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   268ce:	4681                	c.li	a3,0
   268d0:	00008617          	auipc	a2,0x8
   268d4:	0c860613          	addi	a2,a2,200 # 2e998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3b8>
   268d8:	00008597          	auipc	a1,0x8
   268dc:	0b058593          	addi	a1,a1,176 # 2e988 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a8>
   268e0:	00013317          	auipc	t1,0x13
   268e4:	a2033303          	ld	t1,-1504(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   268e8:	9302                	c.jalr	t1
   268ea:	b775                	c.j	26896 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   268ec:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   268ee:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   268f2:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   268f4:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   268f6:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   268fa:	03278463          	beq	a5,s2,26922 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xf0>
      { _M_dataplus._M_p = __p; }
   268fe:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26900:	689c                	c.ld	a5,16(s1)
   26902:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26904:	649c                	c.ld	a5,8(s1)
   26906:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26908:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2690c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26910:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26914:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26916:	081c                	c.addi4spn	a5,sp,16
   26918:	f6f50fe3          	beq	a0,a5,26896 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2691c:	b95ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26920:	bf9d                	c.j	26896 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26922:	6490                	c.ld	a2,8(s1)
   26924:	0605                	c.addi	a2,1
	if (__n == 0)
   26926:	de79                	c.beqz	a2,26904 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26928:	85ca                	c.mv	a1,s2
   2692a:	c27ef0ef          	jal	ra,16550 <memcpy@plt>
   2692e:	bfd9                	c.j	26904 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd2>
      { return _M_dataplus._M_p; }
   26930:	842a                	c.mv	s0,a0
   26932:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26934:	081c                	c.addi4spn	a5,sp,16
   26936:	00f50463          	beq	a0,a5,2693e <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x10c>
   2693a:	b77ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2693e:	8522                	c.mv	a0,s0
   26940:	d51ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026944 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)>:
{
   26944:	7139                	c.addi16sp	sp,-64
   26946:	fc06                	c.sdsp	ra,56(sp)
   26948:	f822                	c.sdsp	s0,48(sp)
   2694a:	f426                	c.sdsp	s1,40(sp)
   2694c:	f04a                	c.sdsp	s2,32(sp)
   2694e:	842a                	c.mv	s0,a0
        switch (v) {
   26950:	4789                	c.li	a5,2
   26952:	08f58763          	beq	a1,a5,269e0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x9c>
   26956:	02b7c863          	blt	a5,a1,26986 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x42>
   2695a:	c9b9                	c.beqz	a1,269b0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x6c>
   2695c:	4785                	c.li	a5,1
   2695e:	0af59363          	bne	a1,a5,26a04 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26962:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26966:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26968:	4681                	c.li	a3,0
   2696a:	00008617          	auipc	a2,0x8
   2696e:	06c60613          	addi	a2,a2,108 # 2e9d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f6>
   26972:	00008597          	auipc	a1,0x8
   26976:	05658593          	addi	a1,a1,86 # 2e9c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e8>
   2697a:	00013317          	auipc	t1,0x13
   2697e:	98633303          	ld	t1,-1658(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26982:	9302                	c.jalr	t1
   26984:	a0b9                	c.j	269d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
   26986:	478d                	c.li	a5,3
   26988:	06f59e63          	bne	a1,a5,26a04 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2698c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26990:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26992:	4681                	c.li	a3,0
   26994:	00008617          	auipc	a2,0x8
   26998:	07b60613          	addi	a2,a2,123 # 2ea0f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x42f>
   2699c:	00008597          	auipc	a1,0x8
   269a0:	05c58593          	addi	a1,a1,92 # 2e9f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x418>
   269a4:	00013317          	auipc	t1,0x13
   269a8:	95c33303          	ld	t1,-1700(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   269ac:	9302                	c.jalr	t1
   269ae:	a015                	c.j	269d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   269b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   269b4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   269b6:	4681                	c.li	a3,0
   269b8:	00008617          	auipc	a2,0x8
   269bc:	00a60613          	addi	a2,a2,10 # 2e9c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e2>
   269c0:	00008597          	auipc	a1,0x8
   269c4:	ff058593          	addi	a1,a1,-16 # 2e9b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3d0>
   269c8:	00013317          	auipc	t1,0x13
   269cc:	93833303          	ld	t1,-1736(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   269d0:	9302                	c.jalr	t1
}
   269d2:	8522                	c.mv	a0,s0
   269d4:	70e2                	c.ldsp	ra,56(sp)
   269d6:	7442                	c.ldsp	s0,48(sp)
   269d8:	74a2                	c.ldsp	s1,40(sp)
   269da:	7902                	c.ldsp	s2,32(sp)
   269dc:	6121                	c.addi16sp	sp,64
   269de:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   269e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   269e4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   269e6:	4681                	c.li	a3,0
   269e8:	00008617          	auipc	a2,0x8
   269ec:	00b60613          	addi	a2,a2,11 # 2e9f3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x413>
   269f0:	00008597          	auipc	a1,0x8
   269f4:	fe858593          	addi	a1,a1,-24 # 2e9d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f8>
   269f8:	00013317          	auipc	t1,0x13
   269fc:	90833303          	ld	t1,-1784(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26a00:	9302                	c.jalr	t1
   26a02:	bfc1                	c.j	269d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
        return "(DW_INL)0x" + to_hex((int)v);
   26a04:	848a                	c.mv	s1,sp
   26a06:	8526                	c.mv	a0,s1
   26a08:	00013317          	auipc	t1,0x13
   26a0c:	a0833303          	ld	t1,-1528(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   26a10:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26a12:	4729                	c.li	a4,10
   26a14:	00008697          	auipc	a3,0x8
   26a18:	ffc68693          	addi	a3,a3,-4 # 2ea10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x430>
   26a1c:	4601                	c.li	a2,0
   26a1e:	4581                	c.li	a1,0
   26a20:	8526                	c.mv	a0,s1
   26a22:	bdfef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26a26:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26a28:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26a2c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26a2e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26a30:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26a34:	03278463          	beq	a5,s2,26a5c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x118>
      { _M_dataplus._M_p = __p; }
   26a38:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26a3a:	689c                	c.ld	a5,16(s1)
   26a3c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26a3e:	649c                	c.ld	a5,8(s1)
   26a40:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26a42:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26a46:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26a4a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26a4e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26a50:	081c                	c.addi4spn	a5,sp,16
   26a52:	f8f500e3          	beq	a0,a5,269d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26a56:	a5bef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26a5a:	bfa5                	c.j	269d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26a5c:	6490                	c.ld	a2,8(s1)
   26a5e:	0605                	c.addi	a2,1
	if (__n == 0)
   26a60:	de79                	c.beqz	a2,26a3e <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xfa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26a62:	85ca                	c.mv	a1,s2
   26a64:	aedef0ef          	jal	ra,16550 <memcpy@plt>
   26a68:	bfd9                	c.j	26a3e <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xfa>
      { return _M_dataplus._M_p; }
   26a6a:	842a                	c.mv	s0,a0
   26a6c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26a6e:	081c                	c.addi4spn	a5,sp,16
   26a70:	00f50463          	beq	a0,a5,26a78 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x134>
   26a74:	a3def0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26a78:	8522                	c.mv	a0,s0
   26a7a:	c17ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026a7e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>:
        return "(DW_LNS)0x" + to_hex((int)v);
}

std::string
to_string(DW_LNE v)
{
   26a7e:	7139                	c.addi16sp	sp,-64
   26a80:	fc06                	c.sdsp	ra,56(sp)
   26a82:	f822                	c.sdsp	s0,48(sp)
   26a84:	f426                	c.sdsp	s1,40(sp)
   26a86:	f04a                	c.sdsp	s2,32(sp)
   26a88:	842a                	c.mv	s0,a0
        switch (v) {
   26a8a:	478d                	c.li	a5,3
   26a8c:	08f58963          	beq	a1,a5,26b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xa0>
   26a90:	02b7ca63          	blt	a5,a1,26ac4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x46>
   26a94:	4785                	c.li	a5,1
   26a96:	04f58c63          	beq	a1,a5,26aee <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x70>
   26a9a:	4789                	c.li	a5,2
   26a9c:	0af59363          	bne	a1,a5,26b42 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xc4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26aa0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26aa4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26aa6:	4681                	c.li	a3,0
   26aa8:	00008617          	auipc	a2,0x8
   26aac:	fa260613          	addi	a2,a2,-94 # 2ea4a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x46a>
   26ab0:	00008597          	auipc	a1,0x8
   26ab4:	f8858593          	addi	a1,a1,-120 # 2ea38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x458>
   26ab8:	00013317          	auipc	t1,0x13
   26abc:	84833303          	ld	t1,-1976(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26ac0:	9302                	c.jalr	t1
   26ac2:	a0b9                	c.j	26b10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
   26ac4:	4791                	c.li	a5,4
   26ac6:	06f59e63          	bne	a1,a5,26b42 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xc4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26aca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26ace:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26ad0:	4681                	c.li	a3,0
   26ad2:	00008617          	auipc	a2,0x8
   26ad6:	fae60613          	addi	a2,a2,-82 # 2ea80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a0>
   26ada:	00008597          	auipc	a1,0x8
   26ade:	f8e58593          	addi	a1,a1,-114 # 2ea68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x488>
   26ae2:	00013317          	auipc	t1,0x13
   26ae6:	81e33303          	ld	t1,-2018(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26aea:	9302                	c.jalr	t1
   26aec:	a015                	c.j	26b10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26aee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26af2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26af4:	4681                	c.li	a3,0
   26af6:	00008617          	auipc	a2,0x8
   26afa:	f3d60613          	addi	a2,a2,-195 # 2ea33 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x453>
   26afe:	00008597          	auipc	a1,0x8
   26b02:	f2258593          	addi	a1,a1,-222 # 2ea20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x440>
   26b06:	00012317          	auipc	t1,0x12
   26b0a:	7fa33303          	ld	t1,2042(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26b0e:	9302                	c.jalr	t1
        case DW_LNE::set_discriminator: return "DW_LNE_set_discriminator";
        case DW_LNE::lo_user: break;
        case DW_LNE::hi_user: break;
        }
        return "(DW_LNE)0x" + to_hex((int)v);
}
   26b10:	8522                	c.mv	a0,s0
   26b12:	70e2                	c.ldsp	ra,56(sp)
   26b14:	7442                	c.ldsp	s0,48(sp)
   26b16:	74a2                	c.ldsp	s1,40(sp)
   26b18:	7902                	c.ldsp	s2,32(sp)
   26b1a:	6121                	c.addi16sp	sp,64
   26b1c:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26b1e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26b22:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26b24:	4681                	c.li	a3,0
   26b26:	00008617          	auipc	a2,0x8
   26b2a:	f3c60613          	addi	a2,a2,-196 # 2ea62 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x482>
   26b2e:	00008597          	auipc	a1,0x8
   26b32:	f2258593          	addi	a1,a1,-222 # 2ea50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x470>
   26b36:	00012317          	auipc	t1,0x12
   26b3a:	7ca33303          	ld	t1,1994(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26b3e:	9302                	c.jalr	t1
   26b40:	bfc1                	c.j	26b10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
        return "(DW_LNE)0x" + to_hex((int)v);
   26b42:	848a                	c.mv	s1,sp
   26b44:	8526                	c.mv	a0,s1
   26b46:	00013317          	auipc	t1,0x13
   26b4a:	8ca33303          	ld	t1,-1846(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   26b4e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26b50:	4729                	c.li	a4,10
   26b52:	00008697          	auipc	a3,0x8
   26b56:	f3668693          	addi	a3,a3,-202 # 2ea88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a8>
   26b5a:	4601                	c.li	a2,0
   26b5c:	4581                	c.li	a1,0
   26b5e:	8526                	c.mv	a0,s1
   26b60:	aa1ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26b64:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26b66:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26b6a:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26b6c:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26b6e:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26b72:	03278463          	beq	a5,s2,26b9a <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x11c>
      { _M_dataplus._M_p = __p; }
   26b76:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26b78:	689c                	c.ld	a5,16(s1)
   26b7a:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26b7c:	649c                	c.ld	a5,8(s1)
   26b7e:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26b80:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26b84:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26b88:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26b8c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26b8e:	081c                	c.addi4spn	a5,sp,16
   26b90:	f8f500e3          	beq	a0,a5,26b10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26b94:	91def0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26b98:	bfa5                	c.j	26b10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26b9a:	6490                	c.ld	a2,8(s1)
   26b9c:	0605                	c.addi	a2,1
	if (__n == 0)
   26b9e:	de79                	c.beqz	a2,26b7c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xfe>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26ba0:	85ca                	c.mv	a1,s2
   26ba2:	9afef0ef          	jal	ra,16550 <memcpy@plt>
   26ba6:	bfd9                	c.j	26b7c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xfe>
      { return _M_dataplus._M_p; }
   26ba8:	842a                	c.mv	s0,a0
   26baa:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26bac:	081c                	c.addi4spn	a5,sp,16
   26bae:	00f50463          	beq	a0,a5,26bb6 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x138>
   26bb2:	8ffef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26bb6:	8522                	c.mv	a0,s0
   26bb8:	ad9ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026bbc <dwarf::to_string[abi:cxx11](dwarf::DW_ID)>:
{
   26bbc:	7139                	c.addi16sp	sp,-64
   26bbe:	fc06                	c.sdsp	ra,56(sp)
   26bc0:	f822                	c.sdsp	s0,48(sp)
   26bc2:	f426                	c.sdsp	s1,40(sp)
   26bc4:	f04a                	c.sdsp	s2,32(sp)
   26bc6:	842a                	c.mv	s0,a0
        switch (v) {
   26bc8:	4789                	c.li	a5,2
   26bca:	08f58763          	beq	a1,a5,26c58 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x9c>
   26bce:	02b7c863          	blt	a5,a1,26bfe <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x42>
   26bd2:	c9b9                	c.beqz	a1,26c28 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x6c>
   26bd4:	4785                	c.li	a5,1
   26bd6:	0af59363          	bne	a1,a5,26c7c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26bda:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26bde:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26be0:	4681                	c.li	a3,0
   26be2:	00008617          	auipc	a2,0x8
   26be6:	edb60613          	addi	a2,a2,-293 # 2eabd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4dd>
   26bea:	00008597          	auipc	a1,0x8
   26bee:	ec658593          	addi	a1,a1,-314 # 2eab0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4d0>
   26bf2:	00012317          	auipc	t1,0x12
   26bf6:	70e33303          	ld	t1,1806(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26bfa:	9302                	c.jalr	t1
   26bfc:	a0b9                	c.j	26c4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
   26bfe:	478d                	c.li	a5,3
   26c00:	06f59e63          	bne	a1,a5,26c7c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c08:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c0a:	4681                	c.li	a3,0
   26c0c:	00008617          	auipc	a2,0x8
   26c10:	eda60613          	addi	a2,a2,-294 # 2eae6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x506>
   26c14:	00008597          	auipc	a1,0x8
   26c18:	ebc58593          	addi	a1,a1,-324 # 2ead0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4f0>
   26c1c:	00012317          	auipc	t1,0x12
   26c20:	6e433303          	ld	t1,1764(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26c24:	9302                	c.jalr	t1
   26c26:	a015                	c.j	26c4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c2c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c2e:	4681                	c.li	a3,0
   26c30:	00008617          	auipc	a2,0x8
   26c34:	e7c60613          	addi	a2,a2,-388 # 2eaac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4cc>
   26c38:	00008597          	auipc	a1,0x8
   26c3c:	e6058593          	addi	a1,a1,-416 # 2ea98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4b8>
   26c40:	00012317          	auipc	t1,0x12
   26c44:	6c033303          	ld	t1,1728(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26c48:	9302                	c.jalr	t1
}
   26c4a:	8522                	c.mv	a0,s0
   26c4c:	70e2                	c.ldsp	ra,56(sp)
   26c4e:	7442                	c.ldsp	s0,48(sp)
   26c50:	74a2                	c.ldsp	s1,40(sp)
   26c52:	7902                	c.ldsp	s2,32(sp)
   26c54:	6121                	c.addi16sp	sp,64
   26c56:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c5c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c5e:	4681                	c.li	a3,0
   26c60:	00008617          	auipc	a2,0x8
   26c64:	e6f60613          	addi	a2,a2,-401 # 2eacf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4ef>
   26c68:	00008597          	auipc	a1,0x8
   26c6c:	e5858593          	addi	a1,a1,-424 # 2eac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4e0>
   26c70:	00012317          	auipc	t1,0x12
   26c74:	69033303          	ld	t1,1680(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26c78:	9302                	c.jalr	t1
   26c7a:	bfc1                	c.j	26c4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
        return "(DW_ID)0x" + to_hex((int)v);
   26c7c:	848a                	c.mv	s1,sp
   26c7e:	8526                	c.mv	a0,s1
   26c80:	00012317          	auipc	t1,0x12
   26c84:	79033303          	ld	t1,1936(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   26c88:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26c8a:	4725                	c.li	a4,9
   26c8c:	00008697          	auipc	a3,0x8
   26c90:	e5c68693          	addi	a3,a3,-420 # 2eae8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x508>
   26c94:	4601                	c.li	a2,0
   26c96:	4581                	c.li	a1,0
   26c98:	8526                	c.mv	a0,s1
   26c9a:	967ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26c9e:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26ca0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26ca4:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26ca6:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26ca8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26cac:	03278463          	beq	a5,s2,26cd4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x118>
      { _M_dataplus._M_p = __p; }
   26cb0:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26cb2:	689c                	c.ld	a5,16(s1)
   26cb4:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26cb6:	649c                	c.ld	a5,8(s1)
   26cb8:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26cba:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26cbe:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26cc2:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26cc6:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26cc8:	081c                	c.addi4spn	a5,sp,16
   26cca:	f8f500e3          	beq	a0,a5,26c4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26cce:	fe2ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26cd2:	bfa5                	c.j	26c4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26cd4:	6490                	c.ld	a2,8(s1)
   26cd6:	0605                	c.addi	a2,1
	if (__n == 0)
   26cd8:	de79                	c.beqz	a2,26cb6 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xfa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26cda:	85ca                	c.mv	a1,s2
   26cdc:	875ef0ef          	jal	ra,16550 <memcpy@plt>
   26ce0:	bfd9                	c.j	26cb6 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xfa>
      { return _M_dataplus._M_p; }
   26ce2:	842a                	c.mv	s0,a0
   26ce4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26ce6:	081c                	c.addi4spn	a5,sp,16
   26ce8:	00f50463          	beq	a0,a5,26cf0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x134>
   26cec:	fc4ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26cf0:	8522                	c.mv	a0,s0
   26cf2:	99fef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026cf6 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)>:
{
   26cf6:	7139                	c.addi16sp	sp,-64
   26cf8:	fc06                	c.sdsp	ra,56(sp)
   26cfa:	f822                	c.sdsp	s0,48(sp)
   26cfc:	f426                	c.sdsp	s1,40(sp)
   26cfe:	f04a                	c.sdsp	s2,32(sp)
   26d00:	842a                	c.mv	s0,a0
        switch (v) {
   26d02:	4795                	c.li	a5,5
   26d04:	0cb7ec63          	bltu	a5,a1,26ddc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0xe6>
   26d08:	00259793          	slli	a5,a1,0x2
   26d0c:	0000a717          	auipc	a4,0xa
   26d10:	90870713          	addi	a4,a4,-1784 # 30614 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2034>
   26d14:	97ba                	c.add	a5,a4
   26d16:	439c                	c.lw	a5,0(a5)
   26d18:	97ba                	c.add	a5,a4
   26d1a:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26d20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26d22:	4681                	c.li	a3,0
   26d24:	00008617          	auipc	a2,0x8
   26d28:	de260613          	addi	a2,a2,-542 # 2eb06 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x526>
   26d2c:	00008597          	auipc	a1,0x8
   26d30:	dcc58593          	addi	a1,a1,-564 # 2eaf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x518>
   26d34:	00012317          	auipc	t1,0x12
   26d38:	5cc33303          	ld	t1,1484(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26d3c:	9302                	c.jalr	t1
}
   26d3e:	8522                	c.mv	a0,s0
   26d40:	70e2                	c.ldsp	ra,56(sp)
   26d42:	7442                	c.ldsp	s0,48(sp)
   26d44:	74a2                	c.ldsp	s1,40(sp)
   26d46:	7902                	c.ldsp	s2,32(sp)
   26d48:	6121                	c.addi16sp	sp,64
   26d4a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26d50:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26d52:	4681                	c.li	a3,0
   26d54:	00008617          	auipc	a2,0x8
   26d58:	dcb60613          	addi	a2,a2,-565 # 2eb1f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x53f>
   26d5c:	00008597          	auipc	a1,0x8
   26d60:	dac58593          	addi	a1,a1,-596 # 2eb08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x528>
   26d64:	00012317          	auipc	t1,0x12
   26d68:	59c33303          	ld	t1,1436(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26d6c:	9302                	c.jalr	t1
   26d6e:	bfc1                	c.j	26d3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26d74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26d76:	4681                	c.li	a3,0
   26d78:	00008617          	auipc	a2,0x8
   26d7c:	dc060613          	addi	a2,a2,-576 # 2eb38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x558>
   26d80:	00008597          	auipc	a1,0x8
   26d84:	da058593          	addi	a1,a1,-608 # 2eb20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x540>
   26d88:	00012317          	auipc	t1,0x12
   26d8c:	57833303          	ld	t1,1400(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26d90:	9302                	c.jalr	t1
   26d92:	b775                	c.j	26d3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26d98:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26d9a:	4681                	c.li	a3,0
   26d9c:	00008617          	auipc	a2,0x8
   26da0:	dba60613          	addi	a2,a2,-582 # 2eb56 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x576>
   26da4:	00008597          	auipc	a1,0x8
   26da8:	d9c58593          	addi	a1,a1,-612 # 2eb40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x560>
   26dac:	00012317          	auipc	t1,0x12
   26db0:	55433303          	ld	t1,1364(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26db4:	9302                	c.jalr	t1
   26db6:	b761                	c.j	26d3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26db8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26dbc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26dbe:	4681                	c.li	a3,0
   26dc0:	00008617          	auipc	a2,0x8
   26dc4:	daf60613          	addi	a2,a2,-593 # 2eb6f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58f>
   26dc8:	00008597          	auipc	a1,0x8
   26dcc:	d9058593          	addi	a1,a1,-624 # 2eb58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x578>
   26dd0:	00012317          	auipc	t1,0x12
   26dd4:	53033303          	ld	t1,1328(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26dd8:	9302                	c.jalr	t1
   26dda:	b795                	c.j	26d3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
        return "(DW_DS)0x" + to_hex((int)v);
   26ddc:	848a                	c.mv	s1,sp
   26dde:	8526                	c.mv	a0,s1
   26de0:	00012317          	auipc	t1,0x12
   26de4:	63033303          	ld	t1,1584(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   26de8:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26dea:	4725                	c.li	a4,9
   26dec:	00008697          	auipc	a3,0x8
   26df0:	d8468693          	addi	a3,a3,-636 # 2eb70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x590>
   26df4:	4601                	c.li	a2,0
   26df6:	4581                	c.li	a1,0
   26df8:	8526                	c.mv	a0,s1
   26dfa:	807ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26dfe:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26e00:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26e04:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26e06:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26e08:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26e0c:	03278463          	beq	a5,s2,26e34 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x13e>
      { _M_dataplus._M_p = __p; }
   26e10:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26e12:	689c                	c.ld	a5,16(s1)
   26e14:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26e16:	649c                	c.ld	a5,8(s1)
   26e18:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26e1a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26e1e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26e22:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26e26:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26e28:	081c                	c.addi4spn	a5,sp,16
   26e2a:	f0f50ae3          	beq	a0,a5,26d3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26e2e:	e82ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26e32:	b731                	c.j	26d3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26e34:	6490                	c.ld	a2,8(s1)
   26e36:	0605                	c.addi	a2,1
	if (__n == 0)
   26e38:	de79                	c.beqz	a2,26e16 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26e3a:	85ca                	c.mv	a1,s2
   26e3c:	f14ef0ef          	jal	ra,16550 <memcpy@plt>
   26e40:	bfd9                	c.j	26e16 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x120>
      { return _M_dataplus._M_p; }
   26e42:	842a                	c.mv	s0,a0
   26e44:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26e46:	081c                	c.addi4spn	a5,sp,16
   26e48:	00f50463          	beq	a0,a5,26e50 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x15a>
   26e4c:	e64ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26e50:	8522                	c.mv	a0,s0
   26e52:	83fef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026e56 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)>:
{
   26e56:	715d                	c.addi16sp	sp,-80
   26e58:	e486                	c.sdsp	ra,72(sp)
   26e5a:	e0a2                	c.sdsp	s0,64(sp)
   26e5c:	fc26                	c.sdsp	s1,56(sp)
   26e5e:	f84a                	c.sdsp	s2,48(sp)
   26e60:	f44e                	c.sdsp	s3,40(sp)
   26e62:	f052                	c.sdsp	s4,32(sp)
   26e64:	842a                	c.mv	s0,a0
        switch (v) {
   26e66:	4791                	c.li	a5,4
   26e68:	0cb7ed63          	bltu	a5,a1,26f42 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0xec>
   26e6c:	058a                	c.slli	a1,0x2
   26e6e:	00009717          	auipc	a4,0x9
   26e72:	7be70713          	addi	a4,a4,1982 # 3062c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x204c>
   26e76:	95ba                	c.add	a1,a4
   26e78:	419c                	c.lw	a5,0(a1)
   26e7a:	97ba                	c.add	a5,a4
   26e7c:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26e7e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26e82:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26e84:	4681                	c.li	a3,0
   26e86:	00008617          	auipc	a2,0x8
   26e8a:	d1460613          	addi	a2,a2,-748 # 2eb9a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5ba>
   26e8e:	00008597          	auipc	a1,0x8
   26e92:	cf258593          	addi	a1,a1,-782 # 2eb80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5a0>
   26e96:	00012317          	auipc	t1,0x12
   26e9a:	46a33303          	ld	t1,1130(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26e9e:	9302                	c.jalr	t1
}
   26ea0:	8522                	c.mv	a0,s0
   26ea2:	60a6                	c.ldsp	ra,72(sp)
   26ea4:	6406                	c.ldsp	s0,64(sp)
   26ea6:	74e2                	c.ldsp	s1,56(sp)
   26ea8:	7942                	c.ldsp	s2,48(sp)
   26eaa:	79a2                	c.ldsp	s3,40(sp)
   26eac:	7a02                	c.ldsp	s4,32(sp)
   26eae:	6161                	c.addi16sp	sp,80
   26eb0:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26eb2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26eb6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26eb8:	4681                	c.li	a3,0
   26eba:	00008617          	auipc	a2,0x8
   26ebe:	cfc60613          	addi	a2,a2,-772 # 2ebb6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d6>
   26ec2:	00008597          	auipc	a1,0x8
   26ec6:	cde58593          	addi	a1,a1,-802 # 2eba0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5c0>
   26eca:	00012317          	auipc	t1,0x12
   26ece:	43633303          	ld	t1,1078(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26ed2:	9302                	c.jalr	t1
   26ed4:	b7f1                	c.j	26ea0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26ed6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26eda:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26edc:	4681                	c.li	a3,0
   26ede:	00008617          	auipc	a2,0x8
   26ee2:	cf460613          	addi	a2,a2,-780 # 2ebd2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f2>
   26ee6:	00008597          	auipc	a1,0x8
   26eea:	cd258593          	addi	a1,a1,-814 # 2ebb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d8>
   26eee:	00012317          	auipc	t1,0x12
   26ef2:	41233303          	ld	t1,1042(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26ef6:	9302                	c.jalr	t1
   26ef8:	b765                	c.j	26ea0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26efa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26efe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26f00:	4681                	c.li	a3,0
   26f02:	00008617          	auipc	a2,0x8
   26f06:	cf160613          	addi	a2,a2,-783 # 2ebf3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x613>
   26f0a:	00008597          	auipc	a1,0x8
   26f0e:	cce58593          	addi	a1,a1,-818 # 2ebd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f8>
   26f12:	00012317          	auipc	t1,0x12
   26f16:	3ee33303          	ld	t1,1006(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26f1a:	9302                	c.jalr	t1
   26f1c:	b751                	c.j	26ea0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26f1e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26f22:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26f24:	4681                	c.li	a3,0
   26f26:	00008617          	auipc	a2,0x8
   26f2a:	cea60613          	addi	a2,a2,-790 # 2ec10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x630>
   26f2e:	00008597          	auipc	a1,0x8
   26f32:	cca58593          	addi	a1,a1,-822 # 2ebf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x618>
   26f36:	00012317          	auipc	t1,0x12
   26f3a:	3ca33303          	ld	t1,970(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   26f3e:	9302                	c.jalr	t1
   26f40:	b785                	c.j	26ea0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
    const bool __neg = __val < 0;
   26f42:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   26f46:	0005891b          	addiw	s2,a1,0
   26f4a:	0405cb63          	blt	a1,zero,26fa0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x14a>
    const auto __len = __detail::__to_chars_len(__uval);
   26f4e:	45a9                	c.li	a1,10
   26f50:	854a                	c.mv	a0,s2
   26f52:	00012317          	auipc	t1,0x12
   26f56:	53e33303          	ld	t1,1342(t1) # 39490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15182>
   26f5a:	9302                	c.jalr	t1
   26f5c:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   26f60:	081c                	c.addi4spn	a5,sp,16
   26f62:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   26f64:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   26f68:	02d00613          	addi	a2,zero,45
   26f6c:	1582                	c.slli	a1,0x20
   26f6e:	9181                	c.srli	a1,0x20
   26f70:	848a                	c.mv	s1,sp
   26f72:	8526                	c.mv	a0,s1
   26f74:	d9cef0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   26f78:	864a                	c.mv	a2,s2
   26f7a:	85d2                	c.mv	a1,s4
   26f7c:	6502                	c.ldsp	a0,0(sp)
   26f7e:	954e                	c.add	a0,s3
   26f80:	00012317          	auipc	t1,0x12
   26f84:	53033303          	ld	t1,1328(t1) # 394b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15130>
   26f88:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26f8a:	474d                	c.li	a4,19
   26f8c:	00008697          	auipc	a3,0x8
   26f90:	c8c68693          	addi	a3,a3,-884 # 2ec18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x638>
   26f94:	4601                	c.li	a2,0
   26f96:	4581                	c.li	a1,0
   26f98:	8526                	c.mv	a0,s1
   26f9a:	e66ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26f9e:	a021                	c.j	26fa6 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x150>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   26fa0:	40b0093b          	subw	s2,zero,a1
   26fa4:	b76d                	c.j	26f4e <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0xf8>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26fa6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26fa8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26fac:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26fae:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26fb0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26fb4:	03278463          	beq	a5,s2,26fdc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x186>
      { _M_dataplus._M_p = __p; }
   26fb8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26fba:	689c                	c.ld	a5,16(s1)
   26fbc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26fbe:	649c                	c.ld	a5,8(s1)
   26fc0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26fc2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26fc6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26fca:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26fce:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26fd0:	081c                	c.addi4spn	a5,sp,16
   26fd2:	ecf507e3          	beq	a0,a5,26ea0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26fd6:	cdaef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26fda:	b5d9                	c.j	26ea0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26fdc:	6490                	c.ld	a2,8(s1)
   26fde:	0605                	c.addi	a2,1
	if (__n == 0)
   26fe0:	de79                	c.beqz	a2,26fbe <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x168>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26fe2:	85ca                	c.mv	a1,s2
   26fe4:	d6cef0ef          	jal	ra,16550 <memcpy@plt>
   26fe8:	bfd9                	c.j	26fbe <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x168>
      { return _M_dataplus._M_p; }
   26fea:	842a                	c.mv	s0,a0
   26fec:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26fee:	081c                	c.addi4spn	a5,sp,16
   26ff0:	00f50463          	beq	a0,a5,26ff8 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1a2>
   26ff4:	cbcef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26ff8:	8522                	c.mv	a0,s0
   26ffa:	e96ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000026ffe <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>:
{
   26ffe:	7139                	c.addi16sp	sp,-64
   27000:	fc06                	c.sdsp	ra,56(sp)
   27002:	f822                	c.sdsp	s0,48(sp)
   27004:	f426                	c.sdsp	s1,40(sp)
   27006:	f04a                	c.sdsp	s2,32(sp)
   27008:	842a                	c.mv	s0,a0
        switch (v) {
   2700a:	47b1                	c.li	a5,12
   2700c:	1cb7ea63          	bltu	a5,a1,271e0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x1e2>
   27010:	00259793          	slli	a5,a1,0x2
   27014:	00009717          	auipc	a4,0x9
   27018:	62c70713          	addi	a4,a4,1580 # 30640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2060>
   2701c:	97ba                	c.add	a5,a4
   2701e:	439c                	c.lw	a5,0(a5)
   27020:	97ba                	c.add	a5,a4
   27022:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27024:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27028:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2702a:	4681                	c.li	a3,0
   2702c:	00008617          	auipc	a2,0x8
   27030:	c0f60613          	addi	a2,a2,-1009 # 2ec3b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x65b>
   27034:	00008597          	auipc	a1,0x8
   27038:	bfc58593          	addi	a1,a1,-1028 # 2ec30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x650>
   2703c:	00012317          	auipc	t1,0x12
   27040:	2c433303          	ld	t1,708(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27044:	9302                	c.jalr	t1
}
   27046:	8522                	c.mv	a0,s0
   27048:	70e2                	c.ldsp	ra,56(sp)
   2704a:	7442                	c.ldsp	s0,48(sp)
   2704c:	74a2                	c.ldsp	s1,40(sp)
   2704e:	7902                	c.ldsp	s2,32(sp)
   27050:	6121                	c.addi16sp	sp,64
   27052:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27054:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27058:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2705a:	4681                	c.li	a3,0
   2705c:	00008617          	auipc	a2,0x8
   27060:	bf560613          	addi	a2,a2,-1035 # 2ec51 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x671>
   27064:	00008597          	auipc	a1,0x8
   27068:	bdc58593          	addi	a1,a1,-1060 # 2ec40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x660>
   2706c:	00012317          	auipc	t1,0x12
   27070:	29433303          	ld	t1,660(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27074:	9302                	c.jalr	t1
   27076:	bfc1                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27078:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2707c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2707e:	4681                	c.li	a3,0
   27080:	00008617          	auipc	a2,0x8
   27084:	beb60613          	addi	a2,a2,-1045 # 2ec6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68b>
   27088:	00008597          	auipc	a1,0x8
   2708c:	bd058593          	addi	a1,a1,-1072 # 2ec58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x678>
   27090:	00012317          	auipc	t1,0x12
   27094:	27033303          	ld	t1,624(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27098:	9302                	c.jalr	t1
   2709a:	b775                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2709c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   270a0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   270a2:	4681                	c.li	a3,0
   270a4:	00008617          	auipc	a2,0x8
   270a8:	bdb60613          	addi	a2,a2,-1061 # 2ec7f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x69f>
   270ac:	00008597          	auipc	a1,0x8
   270b0:	bc458593          	addi	a1,a1,-1084 # 2ec70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x690>
   270b4:	00012317          	auipc	t1,0x12
   270b8:	24c33303          	ld	t1,588(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   270bc:	9302                	c.jalr	t1
   270be:	b761                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   270c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   270c4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   270c6:	4681                	c.li	a3,0
   270c8:	00008617          	auipc	a2,0x8
   270cc:	bc960613          	addi	a2,a2,-1079 # 2ec91 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b1>
   270d0:	00008597          	auipc	a1,0x8
   270d4:	bb058593          	addi	a1,a1,-1104 # 2ec80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6a0>
   270d8:	00012317          	auipc	t1,0x12
   270dc:	22833303          	ld	t1,552(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   270e0:	9302                	c.jalr	t1
   270e2:	b795                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   270e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   270e8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   270ea:	4681                	c.li	a3,0
   270ec:	00008617          	auipc	a2,0x8
   270f0:	bbe60613          	addi	a2,a2,-1090 # 2ecaa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6ca>
   270f4:	00008597          	auipc	a1,0x8
   270f8:	ba458593          	addi	a1,a1,-1116 # 2ec98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b8>
   270fc:	00012317          	auipc	t1,0x12
   27100:	20433303          	ld	t1,516(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27104:	9302                	c.jalr	t1
   27106:	b781                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27108:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2710c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2710e:	4681                	c.li	a3,0
   27110:	00008617          	auipc	a2,0x8
   27114:	bb660613          	addi	a2,a2,-1098 # 2ecc6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e6>
   27118:	00008597          	auipc	a1,0x8
   2711c:	b9858593          	addi	a1,a1,-1128 # 2ecb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6d0>
   27120:	00012317          	auipc	t1,0x12
   27124:	1e033303          	ld	t1,480(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27128:	9302                	c.jalr	t1
   2712a:	bf31                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2712c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27130:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27132:	4681                	c.li	a3,0
   27134:	00008617          	auipc	a2,0x8
   27138:	ba760613          	addi	a2,a2,-1113 # 2ecdb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6fb>
   2713c:	00008597          	auipc	a1,0x8
   27140:	b8c58593          	addi	a1,a1,-1140 # 2ecc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e8>
   27144:	00012317          	auipc	t1,0x12
   27148:	1bc33303          	ld	t1,444(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2714c:	9302                	c.jalr	t1
   2714e:	bde5                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27150:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27154:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27156:	4681                	c.li	a3,0
   27158:	00008617          	auipc	a2,0x8
   2715c:	b9f60613          	addi	a2,a2,-1121 # 2ecf7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x717>
   27160:	00008597          	auipc	a1,0x8
   27164:	b8058593          	addi	a1,a1,-1152 # 2ece0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x700>
   27168:	00012317          	auipc	t1,0x12
   2716c:	19833303          	ld	t1,408(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27170:	9302                	c.jalr	t1
   27172:	bdd1                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27174:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27178:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2717a:	4681                	c.li	a3,0
   2717c:	00008617          	auipc	a2,0x8
   27180:	b9360613          	addi	a2,a2,-1133 # 2ed0f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x72f>
   27184:	00008597          	auipc	a1,0x8
   27188:	b7458593          	addi	a1,a1,-1164 # 2ecf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x718>
   2718c:	00012317          	auipc	t1,0x12
   27190:	17433303          	ld	t1,372(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27194:	9302                	c.jalr	t1
   27196:	bd45                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27198:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2719c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2719e:	4681                	c.li	a3,0
   271a0:	00008617          	auipc	a2,0x8
   271a4:	b8960613          	addi	a2,a2,-1143 # 2ed29 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x749>
   271a8:	00008597          	auipc	a1,0x8
   271ac:	b6858593          	addi	a1,a1,-1176 # 2ed10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x730>
   271b0:	00012317          	auipc	t1,0x12
   271b4:	15033303          	ld	t1,336(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   271b8:	9302                	c.jalr	t1
   271ba:	b571                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   271bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   271c0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   271c2:	4681                	c.li	a3,0
   271c4:	00008617          	auipc	a2,0x8
   271c8:	b7a60613          	addi	a2,a2,-1158 # 2ed3e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x75e>
   271cc:	00008597          	auipc	a1,0x8
   271d0:	b6458593          	addi	a1,a1,-1180 # 2ed30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x750>
   271d4:	00012317          	auipc	t1,0x12
   271d8:	12c33303          	ld	t1,300(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   271dc:	9302                	c.jalr	t1
   271de:	b5a5                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
        return "(DW_LNS)0x" + to_hex((int)v);
   271e0:	848a                	c.mv	s1,sp
   271e2:	8526                	c.mv	a0,s1
   271e4:	00012317          	auipc	t1,0x12
   271e8:	22c33303          	ld	t1,556(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   271ec:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   271ee:	4729                	c.li	a4,10
   271f0:	00008697          	auipc	a3,0x8
   271f4:	b5068693          	addi	a3,a3,-1200 # 2ed40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x760>
   271f8:	4601                	c.li	a2,0
   271fa:	4581                	c.li	a1,0
   271fc:	8526                	c.mv	a0,s1
   271fe:	c02ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27202:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27204:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27208:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2720a:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2720c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27210:	03278463          	beq	a5,s2,27238 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x23a>
      { _M_dataplus._M_p = __p; }
   27214:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27216:	689c                	c.ld	a5,16(s1)
   27218:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2721a:	649c                	c.ld	a5,8(s1)
   2721c:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2721e:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27222:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27226:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2722a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2722c:	081c                	c.addi4spn	a5,sp,16
   2722e:	e0f50ce3          	beq	a0,a5,27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27232:	a7eef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27236:	bd01                	c.j	27046 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27238:	6490                	c.ld	a2,8(s1)
   2723a:	0605                	c.addi	a2,1
	if (__n == 0)
   2723c:	de79                	c.beqz	a2,2721a <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x21c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2723e:	85ca                	c.mv	a1,s2
   27240:	b10ef0ef          	jal	ra,16550 <memcpy@plt>
   27244:	bfd9                	c.j	2721a <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x21c>
      { return _M_dataplus._M_p; }
   27246:	842a                	c.mv	s0,a0
   27248:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2724a:	081c                	c.addi4spn	a5,sp,16
   2724c:	00f50463          	beq	a0,a5,27254 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x256>
   27250:	a60ef0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27254:	8522                	c.mv	a0,s0
   27256:	c3aef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002725a <dwarf::to_string[abi:cxx11](dwarf::section_type)>:
{
   2725a:	715d                	c.addi16sp	sp,-80
   2725c:	e486                	c.sdsp	ra,72(sp)
   2725e:	e0a2                	c.sdsp	s0,64(sp)
   27260:	fc26                	c.sdsp	s1,56(sp)
   27262:	f84a                	c.sdsp	s2,48(sp)
   27264:	f44e                	c.sdsp	s3,40(sp)
   27266:	f052                	c.sdsp	s4,32(sp)
   27268:	842a                	c.mv	s0,a0
        switch (v) {
   2726a:	47ad                	c.li	a5,11
   2726c:	1cb7eb63          	bltu	a5,a1,27442 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x1e8>
   27270:	058a                	c.slli	a1,0x2
   27272:	00009717          	auipc	a4,0x9
   27276:	40270713          	addi	a4,a4,1026 # 30674 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2094>
   2727a:	95ba                	c.add	a1,a4
   2727c:	419c                	c.lw	a5,0(a1)
   2727e:	97ba                	c.add	a5,a4
   27280:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27282:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27286:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27288:	4681                	c.li	a3,0
   2728a:	00008617          	auipc	a2,0x8
   2728e:	ada60613          	addi	a2,a2,-1318 # 2ed64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x784>
   27292:	00008597          	auipc	a1,0x8
   27296:	abe58593          	addi	a1,a1,-1346 # 2ed50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x770>
   2729a:	00012317          	auipc	t1,0x12
   2729e:	06633303          	ld	t1,102(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   272a2:	9302                	c.jalr	t1
}
   272a4:	8522                	c.mv	a0,s0
   272a6:	60a6                	c.ldsp	ra,72(sp)
   272a8:	6406                	c.ldsp	s0,64(sp)
   272aa:	74e2                	c.ldsp	s1,56(sp)
   272ac:	7942                	c.ldsp	s2,48(sp)
   272ae:	79a2                	c.ldsp	s3,40(sp)
   272b0:	7a02                	c.ldsp	s4,32(sp)
   272b2:	6161                	c.addi16sp	sp,80
   272b4:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   272b6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   272ba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   272bc:	4681                	c.li	a3,0
   272be:	00008617          	auipc	a2,0x8
   272c2:	abf60613          	addi	a2,a2,-1345 # 2ed7d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x79d>
   272c6:	00008597          	auipc	a1,0x8
   272ca:	aa258593          	addi	a1,a1,-1374 # 2ed68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x788>
   272ce:	00012317          	auipc	t1,0x12
   272d2:	03233303          	ld	t1,50(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   272d6:	9302                	c.jalr	t1
   272d8:	b7f1                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   272da:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   272de:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   272e0:	4681                	c.li	a3,0
   272e2:	00008617          	auipc	a2,0x8
   272e6:	ab160613          	addi	a2,a2,-1359 # 2ed93 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b3>
   272ea:	00008597          	auipc	a1,0x8
   272ee:	a9658593          	addi	a1,a1,-1386 # 2ed80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7a0>
   272f2:	00012317          	auipc	t1,0x12
   272f6:	00e33303          	ld	t1,14(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   272fa:	9302                	c.jalr	t1
   272fc:	b765                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   272fe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27302:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27304:	4681                	c.li	a3,0
   27306:	00008617          	auipc	a2,0x8
   2730a:	aa460613          	addi	a2,a2,-1372 # 2edaa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7ca>
   2730e:	00008597          	auipc	a1,0x8
   27312:	a8a58593          	addi	a1,a1,-1398 # 2ed98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b8>
   27316:	00012317          	auipc	t1,0x12
   2731a:	fea33303          	ld	t1,-22(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2731e:	9302                	c.jalr	t1
   27320:	b751                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27322:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27326:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27328:	4681                	c.li	a3,0
   2732a:	00008617          	auipc	a2,0x8
   2732e:	a9860613          	addi	a2,a2,-1384 # 2edc2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e2>
   27332:	00008597          	auipc	a1,0x8
   27336:	a7e58593          	addi	a1,a1,-1410 # 2edb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7d0>
   2733a:	00012317          	auipc	t1,0x12
   2733e:	fc633303          	ld	t1,-58(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27342:	9302                	c.jalr	t1
   27344:	b785                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27346:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2734a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2734c:	4681                	c.li	a3,0
   2734e:	00008617          	auipc	a2,0x8
   27352:	a8b60613          	addi	a2,a2,-1397 # 2edd9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7f9>
   27356:	00008597          	auipc	a1,0x8
   2735a:	a7258593          	addi	a1,a1,-1422 # 2edc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e8>
   2735e:	00012317          	auipc	t1,0x12
   27362:	fa233303          	ld	t1,-94(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27366:	9302                	c.jalr	t1
   27368:	bf35                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2736a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2736e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27370:	4681                	c.li	a3,0
   27372:	00008617          	auipc	a2,0x8
   27376:	a8360613          	addi	a2,a2,-1405 # 2edf5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x815>
   2737a:	00008597          	auipc	a1,0x8
   2737e:	a6658593          	addi	a1,a1,-1434 # 2ede0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x800>
   27382:	00012317          	auipc	t1,0x12
   27386:	f7e33303          	ld	t1,-130(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2738a:	9302                	c.jalr	t1
   2738c:	bf21                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2738e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27392:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27394:	4681                	c.li	a3,0
   27396:	00008617          	auipc	a2,0x8
   2739a:	a7860613          	addi	a2,a2,-1416 # 2ee0e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x82e>
   2739e:	00008597          	auipc	a1,0x8
   273a2:	a5a58593          	addi	a1,a1,-1446 # 2edf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x818>
   273a6:	00012317          	auipc	t1,0x12
   273aa:	f5a33303          	ld	t1,-166(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   273ae:	9302                	c.jalr	t1
   273b0:	bdd5                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   273b2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   273b6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   273b8:	4681                	c.li	a3,0
   273ba:	00008617          	auipc	a2,0x8
   273be:	a6c60613          	addi	a2,a2,-1428 # 2ee26 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x846>
   273c2:	00008597          	auipc	a1,0x8
   273c6:	a4e58593          	addi	a1,a1,-1458 # 2ee10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x830>
   273ca:	00012317          	auipc	t1,0x12
   273ce:	f3633303          	ld	t1,-202(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   273d2:	9302                	c.jalr	t1
   273d4:	bdc1                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   273d6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   273da:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   273dc:	4681                	c.li	a3,0
   273de:	00008617          	auipc	a2,0x8
   273e2:	a5e60613          	addi	a2,a2,-1442 # 2ee3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x85c>
   273e6:	00008597          	auipc	a1,0x8
   273ea:	a4258593          	addi	a1,a1,-1470 # 2ee28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x848>
   273ee:	00012317          	auipc	t1,0x12
   273f2:	f1233303          	ld	t1,-238(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   273f6:	9302                	c.jalr	t1
   273f8:	b575                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   273fa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   273fe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27400:	4681                	c.li	a3,0
   27402:	00008617          	auipc	a2,0x8
   27406:	a4f60613          	addi	a2,a2,-1457 # 2ee51 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x871>
   2740a:	00008597          	auipc	a1,0x8
   2740e:	a3658593          	addi	a1,a1,-1482 # 2ee40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x860>
   27412:	00012317          	auipc	t1,0x12
   27416:	eee33303          	ld	t1,-274(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2741a:	9302                	c.jalr	t1
   2741c:	b561                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2741e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27422:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27424:	4681                	c.li	a3,0
   27426:	00008617          	auipc	a2,0x8
   2742a:	a4560613          	addi	a2,a2,-1467 # 2ee6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x88b>
   2742e:	00008597          	auipc	a1,0x8
   27432:	a2a58593          	addi	a1,a1,-1494 # 2ee58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x878>
   27436:	00012317          	auipc	t1,0x12
   2743a:	eca33303          	ld	t1,-310(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2743e:	9302                	c.jalr	t1
   27440:	b595                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
    const bool __neg = __val < 0;
   27442:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   27446:	0005891b          	addiw	s2,a1,0
   2744a:	0405cb63          	blt	a1,zero,274a0 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x246>
    const auto __len = __detail::__to_chars_len(__uval);
   2744e:	45a9                	c.li	a1,10
   27450:	854a                	c.mv	a0,s2
   27452:	00012317          	auipc	t1,0x12
   27456:	03e33303          	ld	t1,62(t1) # 39490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15182>
   2745a:	9302                	c.jalr	t1
   2745c:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   27460:	081c                	c.addi4spn	a5,sp,16
   27462:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   27464:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   27468:	02d00613          	addi	a2,zero,45
   2746c:	1582                	c.slli	a1,0x20
   2746e:	9181                	c.srli	a1,0x20
   27470:	848a                	c.mv	s1,sp
   27472:	8526                	c.mv	a0,s1
   27474:	89cef0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   27478:	864a                	c.mv	a2,s2
   2747a:	85d2                	c.mv	a1,s4
   2747c:	6502                	c.ldsp	a0,0(sp)
   2747e:	954e                	c.add	a0,s3
   27480:	00012317          	auipc	t1,0x12
   27484:	03033303          	ld	t1,48(t1) # 394b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15130>
   27488:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2748a:	4739                	c.li	a4,14
   2748c:	00008697          	auipc	a3,0x8
   27490:	9e468693          	addi	a3,a3,-1564 # 2ee70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x890>
   27494:	4601                	c.li	a2,0
   27496:	4581                	c.li	a1,0
   27498:	8526                	c.mv	a0,s1
   2749a:	966ef0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2749e:	a021                	c.j	274a6 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x24c>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   274a0:	40b0093b          	subw	s2,zero,a1
   274a4:	b76d                	c.j	2744e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x1f4>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   274a6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   274a8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   274ac:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   274ae:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   274b0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   274b4:	03278463          	beq	a5,s2,274dc <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x282>
      { _M_dataplus._M_p = __p; }
   274b8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   274ba:	689c                	c.ld	a5,16(s1)
   274bc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   274be:	649c                	c.ld	a5,8(s1)
   274c0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   274c2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   274c6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   274ca:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   274ce:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   274d0:	081c                	c.addi4spn	a5,sp,16
   274d2:	dcf509e3          	beq	a0,a5,272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   274d6:	fdbee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   274da:	b3e9                	c.j	272a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   274dc:	6490                	c.ld	a2,8(s1)
   274de:	0605                	c.addi	a2,1
	if (__n == 0)
   274e0:	de79                	c.beqz	a2,274be <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x264>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   274e2:	85ca                	c.mv	a1,s2
   274e4:	86cef0ef          	jal	ra,16550 <memcpy@plt>
   274e8:	bfd9                	c.j	274be <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x264>
      { return _M_dataplus._M_p; }
   274ea:	842a                	c.mv	s0,a0
   274ec:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   274ee:	081c                	c.addi4spn	a5,sp,16
   274f0:	00f50463          	beq	a0,a5,274f8 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x29e>
   274f4:	fbdee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   274f8:	8522                	c.mv	a0,s0
   274fa:	996ef0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000274fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>:
{
   274fe:	715d                	c.addi16sp	sp,-80
   27500:	e486                	c.sdsp	ra,72(sp)
   27502:	e0a2                	c.sdsp	s0,64(sp)
   27504:	fc26                	c.sdsp	s1,56(sp)
   27506:	f84a                	c.sdsp	s2,48(sp)
   27508:	f44e                	c.sdsp	s3,40(sp)
   2750a:	f052                	c.sdsp	s4,32(sp)
   2750c:	842a                	c.mv	s0,a0
        switch (v) {
   2750e:	47b5                	c.li	a5,13
   27510:	20b7ef63          	bltu	a5,a1,2772e <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x230>
   27514:	058a                	c.slli	a1,0x2
   27516:	00009717          	auipc	a4,0x9
   2751a:	18e70713          	addi	a4,a4,398 # 306a4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20c4>
   2751e:	95ba                	c.add	a1,a4
   27520:	419c                	c.lw	a5,0(a1)
   27522:	97ba                	c.add	a5,a4
   27524:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27526:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2752a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2752c:	4681                	c.li	a3,0
   2752e:	00008617          	auipc	a2,0x8
   27532:	96660613          	addi	a2,a2,-1690 # 2ee94 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b4>
   27536:	00008597          	auipc	a1,0x8
   2753a:	94a58593          	addi	a1,a1,-1718 # 2ee80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8a0>
   2753e:	00012317          	auipc	t1,0x12
   27542:	dc233303          	ld	t1,-574(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27546:	9302                	c.jalr	t1
}
   27548:	8522                	c.mv	a0,s0
   2754a:	60a6                	c.ldsp	ra,72(sp)
   2754c:	6406                	c.ldsp	s0,64(sp)
   2754e:	74e2                	c.ldsp	s1,56(sp)
   27550:	7942                	c.ldsp	s2,48(sp)
   27552:	79a2                	c.ldsp	s3,40(sp)
   27554:	7a02                	c.ldsp	s4,32(sp)
   27556:	6161                	c.addi16sp	sp,80
   27558:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2755a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2755e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27560:	4681                	c.li	a3,0
   27562:	00008617          	auipc	a2,0x8
   27566:	94a60613          	addi	a2,a2,-1718 # 2eeac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8cc>
   2756a:	00008597          	auipc	a1,0x8
   2756e:	92e58593          	addi	a1,a1,-1746 # 2ee98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b8>
   27572:	00012317          	auipc	t1,0x12
   27576:	d8e33303          	ld	t1,-626(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2757a:	9302                	c.jalr	t1
   2757c:	b7f1                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2757e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27582:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27584:	4681                	c.li	a3,0
   27586:	00008617          	auipc	a2,0x8
   2758a:	93c60613          	addi	a2,a2,-1732 # 2eec2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e2>
   2758e:	00008597          	auipc	a1,0x8
   27592:	92258593          	addi	a1,a1,-1758 # 2eeb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8d0>
   27596:	00012317          	auipc	t1,0x12
   2759a:	d6a33303          	ld	t1,-662(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2759e:	9302                	c.jalr	t1
   275a0:	b765                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   275a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   275a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   275a8:	4681                	c.li	a3,0
   275aa:	00008617          	auipc	a2,0x8
   275ae:	93360613          	addi	a2,a2,-1741 # 2eedd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8fd>
   275b2:	00008597          	auipc	a1,0x8
   275b6:	91658593          	addi	a1,a1,-1770 # 2eec8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e8>
   275ba:	00012317          	auipc	t1,0x12
   275be:	d4633303          	ld	t1,-698(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   275c2:	9302                	c.jalr	t1
   275c4:	b751                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   275c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   275ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   275cc:	4681                	c.li	a3,0
   275ce:	00008617          	auipc	a2,0x8
   275d2:	92860613          	addi	a2,a2,-1752 # 2eef6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x916>
   275d6:	00008597          	auipc	a1,0x8
   275da:	90a58593          	addi	a1,a1,-1782 # 2eee0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x900>
   275de:	00012317          	auipc	t1,0x12
   275e2:	d2233303          	ld	t1,-734(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   275e6:	9302                	c.jalr	t1
   275e8:	b785                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   275ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   275ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   275f0:	4681                	c.li	a3,0
   275f2:	00008617          	auipc	a2,0x8
   275f6:	91c60613          	addi	a2,a2,-1764 # 2ef0e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x92e>
   275fa:	00008597          	auipc	a1,0x8
   275fe:	8fe58593          	addi	a1,a1,-1794 # 2eef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x918>
   27602:	00012317          	auipc	t1,0x12
   27606:	cfe33303          	ld	t1,-770(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2760a:	9302                	c.jalr	t1
   2760c:	bf35                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2760e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27612:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27614:	4681                	c.li	a3,0
   27616:	00008617          	auipc	a2,0x8
   2761a:	90e60613          	addi	a2,a2,-1778 # 2ef24 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x944>
   2761e:	00008597          	auipc	a1,0x8
   27622:	8f258593          	addi	a1,a1,-1806 # 2ef10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x930>
   27626:	00012317          	auipc	t1,0x12
   2762a:	cda33303          	ld	t1,-806(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2762e:	9302                	c.jalr	t1
   27630:	bf21                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27632:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27636:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27638:	4681                	c.li	a3,0
   2763a:	00008617          	auipc	a2,0x8
   2763e:	8ff60613          	addi	a2,a2,-1793 # 2ef39 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x959>
   27642:	00008597          	auipc	a1,0x8
   27646:	8e658593          	addi	a1,a1,-1818 # 2ef28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x948>
   2764a:	00012317          	auipc	t1,0x12
   2764e:	cb633303          	ld	t1,-842(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27652:	9302                	c.jalr	t1
   27654:	bdd5                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27656:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2765a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2765c:	4681                	c.li	a3,0
   2765e:	00008617          	auipc	a2,0x8
   27662:	8f360613          	addi	a2,a2,-1805 # 2ef51 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x971>
   27666:	00008597          	auipc	a1,0x8
   2766a:	8da58593          	addi	a1,a1,-1830 # 2ef40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x960>
   2766e:	00012317          	auipc	t1,0x12
   27672:	c9233303          	ld	t1,-878(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27676:	9302                	c.jalr	t1
   27678:	bdc1                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2767a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2767e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27680:	4681                	c.li	a3,0
   27682:	00008617          	auipc	a2,0x8
   27686:	8ea60613          	addi	a2,a2,-1814 # 2ef6c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98c>
   2768a:	00008597          	auipc	a1,0x8
   2768e:	8ce58593          	addi	a1,a1,-1842 # 2ef58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x978>
   27692:	00012317          	auipc	t1,0x12
   27696:	c6e33303          	ld	t1,-914(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2769a:	9302                	c.jalr	t1
   2769c:	b575                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2769e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   276a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   276a4:	4681                	c.li	a3,0
   276a6:	00008617          	auipc	a2,0x8
   276aa:	8da60613          	addi	a2,a2,-1830 # 2ef80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a0>
   276ae:	00008597          	auipc	a1,0x8
   276b2:	8c258593          	addi	a1,a1,-1854 # 2ef70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x990>
   276b6:	00012317          	auipc	t1,0x12
   276ba:	c4a33303          	ld	t1,-950(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   276be:	9302                	c.jalr	t1
   276c0:	b561                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   276c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   276c6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   276c8:	4681                	c.li	a3,0
   276ca:	00008617          	auipc	a2,0x8
   276ce:	8d460613          	addi	a2,a2,-1836 # 2ef9e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9be>
   276d2:	00008597          	auipc	a1,0x8
   276d6:	8b658593          	addi	a1,a1,-1866 # 2ef88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a8>
   276da:	00012317          	auipc	t1,0x12
   276de:	c2633303          	ld	t1,-986(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   276e2:	9302                	c.jalr	t1
   276e4:	b595                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   276e6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   276ea:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   276ec:	4681                	c.li	a3,0
   276ee:	00008617          	auipc	a2,0x8
   276f2:	8c860613          	addi	a2,a2,-1848 # 2efb6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d6>
   276f6:	00008597          	auipc	a1,0x8
   276fa:	8aa58593          	addi	a1,a1,-1878 # 2efa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9c0>
   276fe:	00012317          	auipc	t1,0x12
   27702:	c0233303          	ld	t1,-1022(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27706:	9302                	c.jalr	t1
   27708:	b581                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2770a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2770e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27710:	4681                	c.li	a3,0
   27712:	00008617          	auipc	a2,0x8
   27716:	8b960613          	addi	a2,a2,-1863 # 2efcb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9eb>
   2771a:	00008597          	auipc	a1,0x8
   2771e:	89e58593          	addi	a1,a1,-1890 # 2efb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d8>
   27722:	00012317          	auipc	t1,0x12
   27726:	bde33303          	ld	t1,-1058(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2772a:	9302                	c.jalr	t1
   2772c:	bd31                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
    const bool __neg = __val < 0;
   2772e:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   27732:	0005891b          	addiw	s2,a1,0
   27736:	0405cb63          	blt	a1,zero,2778c <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x28e>
    const auto __len = __detail::__to_chars_len(__uval);
   2773a:	45a9                	c.li	a1,10
   2773c:	854a                	c.mv	a0,s2
   2773e:	00012317          	auipc	t1,0x12
   27742:	d5233303          	ld	t1,-686(t1) # 39490 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x15182>
   27746:	9302                	c.jalr	t1
   27748:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2774c:	081c                	c.addi4spn	a5,sp,16
   2774e:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   27750:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   27754:	02d00613          	addi	a2,zero,45
   27758:	1582                	c.slli	a1,0x20
   2775a:	9181                	c.srli	a1,0x20
   2775c:	848a                	c.mv	s1,sp
   2775e:	8526                	c.mv	a0,s1
   27760:	db1ee0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   27764:	864a                	c.mv	a2,s2
   27766:	85d2                	c.mv	a1,s4
   27768:	6502                	c.ldsp	a0,0(sp)
   2776a:	954e                	c.add	a0,s3
   2776c:	00012317          	auipc	t1,0x12
   27770:	d4433303          	ld	t1,-700(t1) # 394b0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15130>
   27774:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27776:	4735                	c.li	a4,13
   27778:	00008697          	auipc	a3,0x8
   2777c:	85868693          	addi	a3,a3,-1960 # 2efd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9f0>
   27780:	4601                	c.li	a2,0
   27782:	4581                	c.li	a1,0
   27784:	8526                	c.mv	a0,s1
   27786:	e7bee0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2778a:	a021                	c.j	27792 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x294>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2778c:	40b0093b          	subw	s2,zero,a1
   27790:	b76d                	c.j	2773a <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x23c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27792:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27794:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27798:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2779a:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2779c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   277a0:	03278463          	beq	a5,s2,277c8 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ca>
      { _M_dataplus._M_p = __p; }
   277a4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   277a6:	689c                	c.ld	a5,16(s1)
   277a8:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   277aa:	649c                	c.ld	a5,8(s1)
   277ac:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   277ae:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   277b2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   277b6:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   277ba:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   277bc:	081c                	c.addi4spn	a5,sp,16
   277be:	d8f505e3          	beq	a0,a5,27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   277c2:	cefee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   277c6:	b349                	c.j	27548 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   277c8:	6490                	c.ld	a2,8(s1)
   277ca:	0605                	c.addi	a2,1
	if (__n == 0)
   277cc:	de79                	c.beqz	a2,277aa <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ac>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   277ce:	85ca                	c.mv	a1,s2
   277d0:	d81ee0ef          	jal	ra,16550 <memcpy@plt>
   277d4:	bfd9                	c.j	277aa <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ac>
      { return _M_dataplus._M_p; }
   277d6:	842a                	c.mv	s0,a0
   277d8:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   277da:	081c                	c.addi4spn	a5,sp,16
   277dc:	00f50463          	beq	a0,a5,277e4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2e6>
   277e0:	cd1ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   277e4:	8522                	c.mv	a0,s0
   277e6:	eabee0ef          	jal	ra,16690 <_Unwind_Resume@plt>

00000000000277ea <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)>:
{
   277ea:	7139                	c.addi16sp	sp,-64
   277ec:	fc06                	c.sdsp	ra,56(sp)
   277ee:	f822                	c.sdsp	s0,48(sp)
   277f0:	f426                	c.sdsp	s1,40(sp)
   277f2:	f04a                	c.sdsp	s2,32(sp)
   277f4:	842a                	c.mv	s0,a0
        switch (v) {
   277f6:	47c1                	c.li	a5,16
   277f8:	26b7e263          	bltu	a5,a1,27a5c <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x272>
   277fc:	00259793          	slli	a5,a1,0x2
   27800:	00009717          	auipc	a4,0x9
   27804:	edc70713          	addi	a4,a4,-292 # 306dc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20fc>
   27808:	97ba                	c.add	a5,a4
   2780a:	439c                	c.lw	a5,0(a5)
   2780c:	97ba                	c.add	a5,a4
   2780e:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27810:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27814:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27816:	4681                	c.li	a3,0
   27818:	00007617          	auipc	a2,0x7
   2781c:	7d660613          	addi	a2,a2,2006 # 2efee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa0e>
   27820:	00007597          	auipc	a1,0x7
   27824:	7c058593          	addi	a1,a1,1984 # 2efe0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa00>
   27828:	00012317          	auipc	t1,0x12
   2782c:	ad833303          	ld	t1,-1320(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27830:	9302                	c.jalr	t1
}
   27832:	8522                	c.mv	a0,s0
   27834:	70e2                	c.ldsp	ra,56(sp)
   27836:	7442                	c.ldsp	s0,48(sp)
   27838:	74a2                	c.ldsp	s1,40(sp)
   2783a:	7902                	c.ldsp	s2,32(sp)
   2783c:	6121                	c.addi16sp	sp,64
   2783e:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27840:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27844:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27846:	4681                	c.li	a3,0
   27848:	00007617          	auipc	a2,0x7
   2784c:	7b660613          	addi	a2,a2,1974 # 2effe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa1e>
   27850:	00007597          	auipc	a1,0x7
   27854:	7a058593          	addi	a1,a1,1952 # 2eff0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa10>
   27858:	00012317          	auipc	t1,0x12
   2785c:	aa833303          	ld	t1,-1368(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27860:	9302                	c.jalr	t1
   27862:	bfc1                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27864:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27868:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2786a:	4681                	c.li	a3,0
   2786c:	00007617          	auipc	a2,0x7
   27870:	7a860613          	addi	a2,a2,1960 # 2f014 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa34>
   27874:	00007597          	auipc	a1,0x7
   27878:	78c58593          	addi	a1,a1,1932 # 2f000 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa20>
   2787c:	00012317          	auipc	t1,0x12
   27880:	a8433303          	ld	t1,-1404(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27884:	9302                	c.jalr	t1
   27886:	b775                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27888:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2788c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2788e:	4681                	c.li	a3,0
   27890:	00007617          	auipc	a2,0x7
   27894:	79460613          	addi	a2,a2,1940 # 2f024 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa44>
   27898:	00007597          	auipc	a1,0x7
   2789c:	78058593          	addi	a1,a1,1920 # 2f018 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa38>
   278a0:	00012317          	auipc	t1,0x12
   278a4:	a6033303          	ld	t1,-1440(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   278a8:	9302                	c.jalr	t1
   278aa:	b761                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   278ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   278b0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   278b2:	4681                	c.li	a3,0
   278b4:	00007617          	auipc	a2,0x7
   278b8:	78160613          	addi	a2,a2,1921 # 2f035 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa55>
   278bc:	00007597          	auipc	a1,0x7
   278c0:	76c58593          	addi	a1,a1,1900 # 2f028 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa48>
   278c4:	00012317          	auipc	t1,0x12
   278c8:	a3c33303          	ld	t1,-1476(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   278cc:	9302                	c.jalr	t1
   278ce:	b795                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   278d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   278d4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   278d6:	4681                	c.li	a3,0
   278d8:	00007617          	auipc	a2,0x7
   278dc:	77260613          	addi	a2,a2,1906 # 2f04a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa6a>
   278e0:	00007597          	auipc	a1,0x7
   278e4:	75858593          	addi	a1,a1,1880 # 2f038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa58>
   278e8:	00012317          	auipc	t1,0x12
   278ec:	a1833303          	ld	t1,-1512(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   278f0:	9302                	c.jalr	t1
   278f2:	b781                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   278f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   278f8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   278fa:	4681                	c.li	a3,0
   278fc:	00007617          	auipc	a2,0x7
   27900:	76360613          	addi	a2,a2,1891 # 2f05f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa7f>
   27904:	00007597          	auipc	a1,0x7
   27908:	74c58593          	addi	a1,a1,1868 # 2f050 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa70>
   2790c:	00012317          	auipc	t1,0x12
   27910:	9f433303          	ld	t1,-1548(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27914:	9302                	c.jalr	t1
   27916:	bf31                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27918:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2791c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2791e:	4681                	c.li	a3,0
   27920:	00007617          	auipc	a2,0x7
   27924:	75460613          	addi	a2,a2,1876 # 2f074 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa94>
   27928:	00007597          	auipc	a1,0x7
   2792c:	73858593          	addi	a1,a1,1848 # 2f060 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa80>
   27930:	00012317          	auipc	t1,0x12
   27934:	9d033303          	ld	t1,-1584(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27938:	9302                	c.jalr	t1
   2793a:	bde5                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2793c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27940:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27942:	4681                	c.li	a3,0
   27944:	00007617          	auipc	a2,0x7
   27948:	74a60613          	addi	a2,a2,1866 # 2f08e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaae>
   2794c:	00007597          	auipc	a1,0x7
   27950:	72c58593          	addi	a1,a1,1836 # 2f078 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa98>
   27954:	00012317          	auipc	t1,0x12
   27958:	9ac33303          	ld	t1,-1620(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2795c:	9302                	c.jalr	t1
   2795e:	bdd1                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27960:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27964:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27966:	4681                	c.li	a3,0
   27968:	00007617          	auipc	a2,0x7
   2796c:	73d60613          	addi	a2,a2,1853 # 2f0a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac5>
   27970:	00007597          	auipc	a1,0x7
   27974:	72058593          	addi	a1,a1,1824 # 2f090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xab0>
   27978:	00012317          	auipc	t1,0x12
   2797c:	98833303          	ld	t1,-1656(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27980:	9302                	c.jalr	t1
   27982:	bd45                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27984:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27988:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2798a:	4681                	c.li	a3,0
   2798c:	00007617          	auipc	a2,0x7
   27990:	73160613          	addi	a2,a2,1841 # 2f0bd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xadd>
   27994:	00007597          	auipc	a1,0x7
   27998:	71458593          	addi	a1,a1,1812 # 2f0a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac8>
   2799c:	00012317          	auipc	t1,0x12
   279a0:	96433303          	ld	t1,-1692(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   279a4:	9302                	c.jalr	t1
   279a6:	b571                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   279a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   279ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   279ae:	4681                	c.li	a3,0
   279b0:	00007617          	auipc	a2,0x7
   279b4:	71d60613          	addi	a2,a2,1821 # 2f0cd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaed>
   279b8:	00007597          	auipc	a1,0x7
   279bc:	70858593          	addi	a1,a1,1800 # 2f0c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xae0>
   279c0:	00012317          	auipc	t1,0x12
   279c4:	94033303          	ld	t1,-1728(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   279c8:	9302                	c.jalr	t1
   279ca:	b5a5                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   279cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   279d0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   279d2:	4681                	c.li	a3,0
   279d4:	00007617          	auipc	a2,0x7
   279d8:	70f60613          	addi	a2,a2,1807 # 2f0e3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb03>
   279dc:	00007597          	auipc	a1,0x7
   279e0:	6f458593          	addi	a1,a1,1780 # 2f0d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaf0>
   279e4:	00012317          	auipc	t1,0x12
   279e8:	91c33303          	ld	t1,-1764(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   279ec:	9302                	c.jalr	t1
   279ee:	b591                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   279f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   279f4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   279f6:	4681                	c.li	a3,0
   279f8:	00007617          	auipc	a2,0x7
   279fc:	70560613          	addi	a2,a2,1797 # 2f0fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb1d>
   27a00:	00007597          	auipc	a1,0x7
   27a04:	6e858593          	addi	a1,a1,1768 # 2f0e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb08>
   27a08:	00012317          	auipc	t1,0x12
   27a0c:	8f833303          	ld	t1,-1800(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27a10:	9302                	c.jalr	t1
   27a12:	b505                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27a18:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27a1a:	4681                	c.li	a3,0
   27a1c:	00007617          	auipc	a2,0x7
   27a20:	6f860613          	addi	a2,a2,1784 # 2f114 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb34>
   27a24:	00007597          	auipc	a1,0x7
   27a28:	6dc58593          	addi	a1,a1,1756 # 2f100 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb20>
   27a2c:	00012317          	auipc	t1,0x12
   27a30:	8d433303          	ld	t1,-1836(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27a34:	9302                	c.jalr	t1
   27a36:	bbf5                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27a3c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27a3e:	4681                	c.li	a3,0
   27a40:	00007617          	auipc	a2,0x7
   27a44:	6e260613          	addi	a2,a2,1762 # 2f122 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb42>
   27a48:	00007597          	auipc	a1,0x7
   27a4c:	6d058593          	addi	a1,a1,1744 # 2f118 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb38>
   27a50:	00012317          	auipc	t1,0x12
   27a54:	8b033303          	ld	t1,-1872(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27a58:	9302                	c.jalr	t1
   27a5a:	bbe1                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
        return "(DW_ATE)0x" + to_hex((int)v);
   27a5c:	848a                	c.mv	s1,sp
   27a5e:	8526                	c.mv	a0,s1
   27a60:	00012317          	auipc	t1,0x12
   27a64:	9b033303          	ld	t1,-1616(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   27a68:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27a6a:	4729                	c.li	a4,10
   27a6c:	00007697          	auipc	a3,0x7
   27a70:	6bc68693          	addi	a3,a3,1724 # 2f128 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb48>
   27a74:	4601                	c.li	a2,0
   27a76:	4581                	c.li	a1,0
   27a78:	8526                	c.mv	a0,s1
   27a7a:	b87ee0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27a7e:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a80:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27a84:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27a86:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27a88:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27a8c:	03278463          	beq	a5,s2,27ab4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ca>
      { _M_dataplus._M_p = __p; }
   27a90:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27a92:	689c                	c.ld	a5,16(s1)
   27a94:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27a96:	649c                	c.ld	a5,8(s1)
   27a98:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27a9a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27a9e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27aa2:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27aa6:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27aa8:	081c                	c.addi4spn	a5,sp,16
   27aaa:	d8f504e3          	beq	a0,a5,27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27aae:	a03ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27ab2:	b341                	c.j	27832 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27ab4:	6490                	c.ld	a2,8(s1)
   27ab6:	0605                	c.addi	a2,1
	if (__n == 0)
   27ab8:	de79                	c.beqz	a2,27a96 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ac>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27aba:	85ca                	c.mv	a1,s2
   27abc:	a95ee0ef          	jal	ra,16550 <memcpy@plt>
   27ac0:	bfd9                	c.j	27a96 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ac>
      { return _M_dataplus._M_p; }
   27ac2:	842a                	c.mv	s0,a0
   27ac4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27ac6:	081c                	c.addi4spn	a5,sp,16
   27ac8:	00f50463          	beq	a0,a5,27ad0 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2e6>
   27acc:	9e5ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27ad0:	8522                	c.mv	a0,s0
   27ad2:	bbfee0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000027ad6 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)>:
{
   27ad6:	7139                	c.addi16sp	sp,-64
   27ad8:	fc06                	c.sdsp	ra,56(sp)
   27ada:	f822                	c.sdsp	s0,48(sp)
   27adc:	f426                	c.sdsp	s1,40(sp)
   27ade:	f04a                	c.sdsp	s2,32(sp)
   27ae0:	842a                	c.mv	s0,a0
        switch (v) {
   27ae2:	47d1                	c.li	a5,20
   27ae4:	2eb7ea63          	bltu	a5,a1,27dd8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x302>
   27ae8:	00259793          	slli	a5,a1,0x2
   27aec:	00009717          	auipc	a4,0x9
   27af0:	c3470713          	addi	a4,a4,-972 # 30720 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2140>
   27af4:	97ba                	c.add	a5,a4
   27af6:	439c                	c.lw	a5,0(a5)
   27af8:	97ba                	c.add	a5,a4
   27afa:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27afc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b00:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b02:	4681                	c.li	a3,0
   27b04:	00007617          	auipc	a2,0x7
   27b08:	63f60613          	addi	a2,a2,1599 # 2f143 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb63>
   27b0c:	00007597          	auipc	a1,0x7
   27b10:	62c58593          	addi	a1,a1,1580 # 2f138 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb58>
   27b14:	00011317          	auipc	t1,0x11
   27b18:	7ec33303          	ld	t1,2028(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27b1c:	9302                	c.jalr	t1
}
   27b1e:	8522                	c.mv	a0,s0
   27b20:	70e2                	c.ldsp	ra,56(sp)
   27b22:	7442                	c.ldsp	s0,48(sp)
   27b24:	74a2                	c.ldsp	s1,40(sp)
   27b26:	7902                	c.ldsp	s2,32(sp)
   27b28:	6121                	c.addi16sp	sp,64
   27b2a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b30:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b32:	4681                	c.li	a3,0
   27b34:	00007617          	auipc	a2,0x7
   27b38:	61d60613          	addi	a2,a2,1565 # 2f151 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb71>
   27b3c:	00007597          	auipc	a1,0x7
   27b40:	60c58593          	addi	a1,a1,1548 # 2f148 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb68>
   27b44:	00011317          	auipc	t1,0x11
   27b48:	7bc33303          	ld	t1,1980(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27b4c:	9302                	c.jalr	t1
   27b4e:	bfc1                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b54:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b56:	4681                	c.li	a3,0
   27b58:	00007617          	auipc	a2,0x7
   27b5c:	60d60613          	addi	a2,a2,1549 # 2f165 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb85>
   27b60:	00007597          	auipc	a1,0x7
   27b64:	5f858593          	addi	a1,a1,1528 # 2f158 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb78>
   27b68:	00011317          	auipc	t1,0x11
   27b6c:	79833303          	ld	t1,1944(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27b70:	9302                	c.jalr	t1
   27b72:	b775                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b78:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b7a:	4681                	c.li	a3,0
   27b7c:	00007617          	auipc	a2,0x7
   27b80:	5ff60613          	addi	a2,a2,1535 # 2f17b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb9b>
   27b84:	00007597          	auipc	a1,0x7
   27b88:	5e458593          	addi	a1,a1,1508 # 2f168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb88>
   27b8c:	00011317          	auipc	t1,0x11
   27b90:	77433303          	ld	t1,1908(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27b94:	9302                	c.jalr	t1
   27b96:	b761                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b9c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b9e:	4681                	c.li	a3,0
   27ba0:	00007617          	auipc	a2,0x7
   27ba4:	5ef60613          	addi	a2,a2,1519 # 2f18f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbaf>
   27ba8:	00007597          	auipc	a1,0x7
   27bac:	5d858593          	addi	a1,a1,1496 # 2f180 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xba0>
   27bb0:	00011317          	auipc	t1,0x11
   27bb4:	75033303          	ld	t1,1872(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27bb8:	9302                	c.jalr	t1
   27bba:	b795                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27bbc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27bc0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27bc2:	4681                	c.li	a3,0
   27bc4:	00007617          	auipc	a2,0x7
   27bc8:	5db60613          	addi	a2,a2,1499 # 2f19f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbbf>
   27bcc:	00007597          	auipc	a1,0x7
   27bd0:	5c458593          	addi	a1,a1,1476 # 2f190 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbb0>
   27bd4:	00011317          	auipc	t1,0x11
   27bd8:	72c33303          	ld	t1,1836(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27bdc:	9302                	c.jalr	t1
   27bde:	b781                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27be0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27be4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27be6:	4681                	c.li	a3,0
   27be8:	00007617          	auipc	a2,0x7
   27bec:	5c960613          	addi	a2,a2,1481 # 2f1b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd1>
   27bf0:	00007597          	auipc	a1,0x7
   27bf4:	5b058593          	addi	a1,a1,1456 # 2f1a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbc0>
   27bf8:	00011317          	auipc	t1,0x11
   27bfc:	70833303          	ld	t1,1800(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27c00:	9302                	c.jalr	t1
   27c02:	bf31                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c08:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c0a:	4681                	c.li	a3,0
   27c0c:	00007617          	auipc	a2,0x7
   27c10:	5bd60613          	addi	a2,a2,1469 # 2f1c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   27c14:	00007597          	auipc	a1,0x7
   27c18:	5a458593          	addi	a1,a1,1444 # 2f1b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd8>
   27c1c:	00011317          	auipc	t1,0x11
   27c20:	6e433303          	ld	t1,1764(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27c24:	9302                	c.jalr	t1
   27c26:	bde5                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c2c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c2e:	4681                	c.li	a3,0
   27c30:	00007617          	auipc	a2,0x7
   27c34:	5b060613          	addi	a2,a2,1456 # 2f1e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc00>
   27c38:	00007597          	auipc	a1,0x7
   27c3c:	59858593          	addi	a1,a1,1432 # 2f1d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbf0>
   27c40:	00011317          	auipc	t1,0x11
   27c44:	6c033303          	ld	t1,1728(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27c48:	9302                	c.jalr	t1
   27c4a:	bdd1                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c50:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c52:	4681                	c.li	a3,0
   27c54:	00007617          	auipc	a2,0x7
   27c58:	5a360613          	addi	a2,a2,1443 # 2f1f7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc17>
   27c5c:	00007597          	auipc	a1,0x7
   27c60:	58c58593          	addi	a1,a1,1420 # 2f1e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc08>
   27c64:	00011317          	auipc	t1,0x11
   27c68:	69c33303          	ld	t1,1692(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27c6c:	9302                	c.jalr	t1
   27c6e:	bd45                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c76:	4681                	c.li	a3,0
   27c78:	00007617          	auipc	a2,0x7
   27c7c:	58c60613          	addi	a2,a2,1420 # 2f204 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc24>
   27c80:	00007597          	auipc	a1,0x7
   27c84:	57858593          	addi	a1,a1,1400 # 2f1f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc18>
   27c88:	00011317          	auipc	t1,0x11
   27c8c:	67833303          	ld	t1,1656(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27c90:	9302                	c.jalr	t1
   27c92:	b571                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c98:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c9a:	4681                	c.li	a3,0
   27c9c:	00007617          	auipc	a2,0x7
   27ca0:	57760613          	addi	a2,a2,1399 # 2f213 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc33>
   27ca4:	00007597          	auipc	a1,0x7
   27ca8:	56458593          	addi	a1,a1,1380 # 2f208 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc28>
   27cac:	00011317          	auipc	t1,0x11
   27cb0:	65433303          	ld	t1,1620(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27cb4:	9302                	c.jalr	t1
   27cb6:	b5a5                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27cb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27cbc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27cbe:	4681                	c.li	a3,0
   27cc0:	00007617          	auipc	a2,0x7
   27cc4:	56560613          	addi	a2,a2,1381 # 2f225 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc45>
   27cc8:	00007597          	auipc	a1,0x7
   27ccc:	55058593          	addi	a1,a1,1360 # 2f218 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc38>
   27cd0:	00011317          	auipc	t1,0x11
   27cd4:	63033303          	ld	t1,1584(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27cd8:	9302                	c.jalr	t1
   27cda:	b591                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27cdc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ce0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ce2:	4681                	c.li	a3,0
   27ce4:	00007617          	auipc	a2,0x7
   27ce8:	55560613          	addi	a2,a2,1365 # 2f239 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc59>
   27cec:	00007597          	auipc	a1,0x7
   27cf0:	53c58593          	addi	a1,a1,1340 # 2f228 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc48>
   27cf4:	00011317          	auipc	t1,0x11
   27cf8:	60c33303          	ld	t1,1548(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27cfc:	9302                	c.jalr	t1
   27cfe:	b505                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d04:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d06:	4681                	c.li	a3,0
   27d08:	00007617          	auipc	a2,0x7
   27d0c:	54360613          	addi	a2,a2,1347 # 2f24b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc6b>
   27d10:	00007597          	auipc	a1,0x7
   27d14:	53058593          	addi	a1,a1,1328 # 2f240 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc60>
   27d18:	00011317          	auipc	t1,0x11
   27d1c:	5e833303          	ld	t1,1512(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27d20:	9302                	c.jalr	t1
   27d22:	bbf5                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d28:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d2a:	4681                	c.li	a3,0
   27d2c:	00007617          	auipc	a2,0x7
   27d30:	53060613          	addi	a2,a2,1328 # 2f25c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc7c>
   27d34:	00007597          	auipc	a1,0x7
   27d38:	51c58593          	addi	a1,a1,1308 # 2f250 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc70>
   27d3c:	00011317          	auipc	t1,0x11
   27d40:	5c433303          	ld	t1,1476(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27d44:	9302                	c.jalr	t1
   27d46:	bbe1                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d4c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d4e:	4681                	c.li	a3,0
   27d50:	00007617          	auipc	a2,0x7
   27d54:	52660613          	addi	a2,a2,1318 # 2f276 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc96>
   27d58:	00007597          	auipc	a1,0x7
   27d5c:	50858593          	addi	a1,a1,1288 # 2f260 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc80>
   27d60:	00011317          	auipc	t1,0x11
   27d64:	5a033303          	ld	t1,1440(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27d68:	9302                	c.jalr	t1
   27d6a:	bb55                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d70:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d72:	4681                	c.li	a3,0
   27d74:	00007617          	auipc	a2,0x7
   27d78:	50f60613          	addi	a2,a2,1295 # 2f283 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca3>
   27d7c:	00007597          	auipc	a1,0x7
   27d80:	4fc58593          	addi	a1,a1,1276 # 2f278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc98>
   27d84:	00011317          	auipc	t1,0x11
   27d88:	57c33303          	ld	t1,1404(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27d8c:	9302                	c.jalr	t1
   27d8e:	bb41                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d94:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d96:	4681                	c.li	a3,0
   27d98:	00007617          	auipc	a2,0x7
   27d9c:	4f960613          	addi	a2,a2,1273 # 2f291 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb1>
   27da0:	00007597          	auipc	a1,0x7
   27da4:	4e858593          	addi	a1,a1,1256 # 2f288 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca8>
   27da8:	00011317          	auipc	t1,0x11
   27dac:	55833303          	ld	t1,1368(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27db0:	9302                	c.jalr	t1
   27db2:	b3b5                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27db4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27db8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27dba:	4681                	c.li	a3,0
   27dbc:	00007617          	auipc	a2,0x7
   27dc0:	4ea60613          	addi	a2,a2,1258 # 2f2a6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc6>
   27dc4:	00007597          	auipc	a1,0x7
   27dc8:	4d458593          	addi	a1,a1,1236 # 2f298 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb8>
   27dcc:	00011317          	auipc	t1,0x11
   27dd0:	53433303          	ld	t1,1332(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27dd4:	9302                	c.jalr	t1
   27dd6:	b3a1                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
        return "(DW_LANG)0x" + to_hex((int)v);
   27dd8:	848a                	c.mv	s1,sp
   27dda:	8526                	c.mv	a0,s1
   27ddc:	00011317          	auipc	t1,0x11
   27de0:	63433303          	ld	t1,1588(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   27de4:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27de6:	472d                	c.li	a4,11
   27de8:	00007697          	auipc	a3,0x7
   27dec:	4c068693          	addi	a3,a3,1216 # 2f2a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc8>
   27df0:	4601                	c.li	a2,0
   27df2:	4581                	c.li	a1,0
   27df4:	8526                	c.mv	a0,s1
   27df6:	80bee0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27dfa:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27dfc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27e00:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27e02:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27e04:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27e08:	03278463          	beq	a5,s2,27e30 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x35a>
      { _M_dataplus._M_p = __p; }
   27e0c:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27e0e:	689c                	c.ld	a5,16(s1)
   27e10:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27e12:	649c                	c.ld	a5,8(s1)
   27e14:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27e16:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27e1a:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27e1e:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27e22:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27e24:	081c                	c.addi4spn	a5,sp,16
   27e26:	cef50ce3          	beq	a0,a5,27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27e2a:	e86ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27e2e:	b9c5                	c.j	27b1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27e30:	6490                	c.ld	a2,8(s1)
   27e32:	0605                	c.addi	a2,1
	if (__n == 0)
   27e34:	de79                	c.beqz	a2,27e12 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x33c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27e36:	85ca                	c.mv	a1,s2
   27e38:	f18ee0ef          	jal	ra,16550 <memcpy@plt>
   27e3c:	bfd9                	c.j	27e12 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x33c>
      { return _M_dataplus._M_p; }
   27e3e:	842a                	c.mv	s0,a0
   27e40:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27e42:	081c                	c.addi4spn	a5,sp,16
   27e44:	00f50463          	beq	a0,a5,27e4c <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x376>
   27e48:	e68ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27e4c:	8522                	c.mv	a0,s0
   27e4e:	843ee0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000027e52 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>:
{
   27e52:	7139                	c.addi16sp	sp,-64
   27e54:	fc06                	c.sdsp	ra,56(sp)
   27e56:	f822                	c.sdsp	s0,48(sp)
   27e58:	f426                	c.sdsp	s1,40(sp)
   27e5a:	f04a                	c.sdsp	s2,32(sp)
   27e5c:	842a                	c.mv	s0,a0
        switch (v) {
   27e5e:	02000793          	addi	a5,zero,32
   27e62:	3ab7e463          	bltu	a5,a1,2820a <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3b8>
   27e66:	00259793          	slli	a5,a1,0x2
   27e6a:	00009717          	auipc	a4,0x9
   27e6e:	90a70713          	addi	a4,a4,-1782 # 30774 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2194>
   27e72:	97ba                	c.add	a5,a4
   27e74:	439c                	c.lw	a5,0(a5)
   27e76:	97ba                	c.add	a5,a4
   27e78:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e7a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e7e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e80:	4681                	c.li	a3,0
   27e82:	00007617          	auipc	a2,0x7
   27e86:	44260613          	addi	a2,a2,1090 # 2f2c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce4>
   27e8a:	00007597          	auipc	a1,0x7
   27e8e:	42e58593          	addi	a1,a1,1070 # 2f2b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcd8>
   27e92:	00011317          	auipc	t1,0x11
   27e96:	46e33303          	ld	t1,1134(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27e9a:	9302                	c.jalr	t1
}
   27e9c:	8522                	c.mv	a0,s0
   27e9e:	70e2                	c.ldsp	ra,56(sp)
   27ea0:	7442                	c.ldsp	s0,48(sp)
   27ea2:	74a2                	c.ldsp	s1,40(sp)
   27ea4:	7902                	c.ldsp	s2,32(sp)
   27ea6:	6121                	c.addi16sp	sp,64
   27ea8:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27eaa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27eae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27eb0:	4681                	c.li	a3,0
   27eb2:	00007617          	auipc	a2,0x7
   27eb6:	42460613          	addi	a2,a2,1060 # 2f2d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf6>
   27eba:	00007597          	auipc	a1,0x7
   27ebe:	40e58593          	addi	a1,a1,1038 # 2f2c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce8>
   27ec2:	00011317          	auipc	t1,0x11
   27ec6:	43e33303          	ld	t1,1086(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27eca:	9302                	c.jalr	t1
   27ecc:	bfc1                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27ece:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ed2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ed4:	4681                	c.li	a3,0
   27ed6:	00007617          	auipc	a2,0x7
   27eda:	41060613          	addi	a2,a2,1040 # 2f2e6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd06>
   27ede:	00007597          	auipc	a1,0x7
   27ee2:	3fa58593          	addi	a1,a1,1018 # 2f2d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf8>
   27ee6:	00011317          	auipc	t1,0x11
   27eea:	41a33303          	ld	t1,1050(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27eee:	9302                	c.jalr	t1
   27ef0:	b775                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27ef2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ef6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ef8:	4681                	c.li	a3,0
   27efa:	00007617          	auipc	a2,0x7
   27efe:	3fb60613          	addi	a2,a2,1019 # 2f2f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd15>
   27f02:	00007597          	auipc	a1,0x7
   27f06:	3e658593          	addi	a1,a1,998 # 2f2e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd08>
   27f0a:	00011317          	auipc	t1,0x11
   27f0e:	3f633303          	ld	t1,1014(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27f12:	9302                	c.jalr	t1
   27f14:	b761                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f16:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f1a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f1c:	4681                	c.li	a3,0
   27f1e:	00007617          	auipc	a2,0x7
   27f22:	3e760613          	addi	a2,a2,999 # 2f305 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd25>
   27f26:	00007597          	auipc	a1,0x7
   27f2a:	3d258593          	addi	a1,a1,978 # 2f2f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd18>
   27f2e:	00011317          	auipc	t1,0x11
   27f32:	3d233303          	ld	t1,978(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27f36:	9302                	c.jalr	t1
   27f38:	b795                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f3a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f3e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f40:	4681                	c.li	a3,0
   27f42:	00007617          	auipc	a2,0x7
   27f46:	3d360613          	addi	a2,a2,979 # 2f315 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd35>
   27f4a:	00007597          	auipc	a1,0x7
   27f4e:	3be58593          	addi	a1,a1,958 # 2f308 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd28>
   27f52:	00011317          	auipc	t1,0x11
   27f56:	3ae33303          	ld	t1,942(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27f5a:	9302                	c.jalr	t1
   27f5c:	b781                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f5e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f62:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f64:	4681                	c.li	a3,0
   27f66:	00007617          	auipc	a2,0x7
   27f6a:	3c060613          	addi	a2,a2,960 # 2f326 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd46>
   27f6e:	00007597          	auipc	a1,0x7
   27f72:	3aa58593          	addi	a1,a1,938 # 2f318 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd38>
   27f76:	00011317          	auipc	t1,0x11
   27f7a:	38a33303          	ld	t1,906(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27f7e:	9302                	c.jalr	t1
   27f80:	bf31                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f82:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f86:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f88:	4681                	c.li	a3,0
   27f8a:	00007617          	auipc	a2,0x7
   27f8e:	3ab60613          	addi	a2,a2,939 # 2f335 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd55>
   27f92:	00007597          	auipc	a1,0x7
   27f96:	39658593          	addi	a1,a1,918 # 2f328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd48>
   27f9a:	00011317          	auipc	t1,0x11
   27f9e:	36633303          	ld	t1,870(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27fa2:	9302                	c.jalr	t1
   27fa4:	bde5                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27fa6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27faa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27fac:	4681                	c.li	a3,0
   27fae:	00007617          	auipc	a2,0x7
   27fb2:	39860613          	addi	a2,a2,920 # 2f346 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd66>
   27fb6:	00007597          	auipc	a1,0x7
   27fba:	38258593          	addi	a1,a1,898 # 2f338 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd58>
   27fbe:	00011317          	auipc	t1,0x11
   27fc2:	34233303          	ld	t1,834(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27fc6:	9302                	c.jalr	t1
   27fc8:	bdd1                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27fca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27fce:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27fd0:	4681                	c.li	a3,0
   27fd2:	00007617          	auipc	a2,0x7
   27fd6:	38360613          	addi	a2,a2,899 # 2f355 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd75>
   27fda:	00007597          	auipc	a1,0x7
   27fde:	36e58593          	addi	a1,a1,878 # 2f348 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd68>
   27fe2:	00011317          	auipc	t1,0x11
   27fe6:	31e33303          	ld	t1,798(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   27fea:	9302                	c.jalr	t1
   27fec:	bd45                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27fee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ff2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ff4:	4681                	c.li	a3,0
   27ff6:	00007617          	auipc	a2,0x7
   27ffa:	36e60613          	addi	a2,a2,878 # 2f364 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd84>
   27ffe:	00007597          	auipc	a1,0x7
   28002:	35a58593          	addi	a1,a1,858 # 2f358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd78>
   28006:	00011317          	auipc	t1,0x11
   2800a:	2fa33303          	ld	t1,762(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2800e:	9302                	c.jalr	t1
   28010:	b571                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28012:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28016:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28018:	4681                	c.li	a3,0
   2801a:	00007617          	auipc	a2,0x7
   2801e:	35b60613          	addi	a2,a2,859 # 2f375 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd95>
   28022:	00007597          	auipc	a1,0x7
   28026:	34658593          	addi	a1,a1,838 # 2f368 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd88>
   2802a:	00011317          	auipc	t1,0x11
   2802e:	2d633303          	ld	t1,726(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28032:	9302                	c.jalr	t1
   28034:	b5a5                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28036:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2803a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2803c:	4681                	c.li	a3,0
   2803e:	00007617          	auipc	a2,0x7
   28042:	34660613          	addi	a2,a2,838 # 2f384 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda4>
   28046:	00007597          	auipc	a1,0x7
   2804a:	33258593          	addi	a1,a1,818 # 2f378 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd98>
   2804e:	00011317          	auipc	t1,0x11
   28052:	2b233303          	ld	t1,690(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28056:	9302                	c.jalr	t1
   28058:	b591                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2805a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2805e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28060:	4681                	c.li	a3,0
   28062:	00007617          	auipc	a2,0x7
   28066:	33360613          	addi	a2,a2,819 # 2f395 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb5>
   2806a:	00007597          	auipc	a1,0x7
   2806e:	31e58593          	addi	a1,a1,798 # 2f388 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda8>
   28072:	00011317          	auipc	t1,0x11
   28076:	28e33303          	ld	t1,654(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2807a:	9302                	c.jalr	t1
   2807c:	b505                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2807e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28082:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28084:	4681                	c.li	a3,0
   28086:	00007617          	auipc	a2,0x7
   2808a:	32260613          	addi	a2,a2,802 # 2f3a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdc8>
   2808e:	00007597          	auipc	a1,0x7
   28092:	30a58593          	addi	a1,a1,778 # 2f398 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb8>
   28096:	00011317          	auipc	t1,0x11
   2809a:	26a33303          	ld	t1,618(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2809e:	9302                	c.jalr	t1
   280a0:	bbf5                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280a8:	4681                	c.li	a3,0
   280aa:	00007617          	auipc	a2,0x7
   280ae:	31260613          	addi	a2,a2,786 # 2f3bc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xddc>
   280b2:	00007597          	auipc	a1,0x7
   280b6:	2fe58593          	addi	a1,a1,766 # 2f3b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdd0>
   280ba:	00011317          	auipc	t1,0x11
   280be:	24633303          	ld	t1,582(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   280c2:	9302                	c.jalr	t1
   280c4:	bbe1                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280cc:	4681                	c.li	a3,0
   280ce:	00007617          	auipc	a2,0x7
   280d2:	2fe60613          	addi	a2,a2,766 # 2f3cc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdec>
   280d6:	00007597          	auipc	a1,0x7
   280da:	2ea58593          	addi	a1,a1,746 # 2f3c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xde0>
   280de:	00011317          	auipc	t1,0x11
   280e2:	22233303          	ld	t1,546(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   280e6:	9302                	c.jalr	t1
   280e8:	bb55                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280f0:	4681                	c.li	a3,0
   280f2:	00007617          	auipc	a2,0x7
   280f6:	2ea60613          	addi	a2,a2,746 # 2f3dc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdfc>
   280fa:	00007597          	auipc	a1,0x7
   280fe:	2d658593          	addi	a1,a1,726 # 2f3d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdf0>
   28102:	00011317          	auipc	t1,0x11
   28106:	1fe33303          	ld	t1,510(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2810a:	9302                	c.jalr	t1
   2810c:	bb41                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2810e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28112:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28114:	4681                	c.li	a3,0
   28116:	00007617          	auipc	a2,0x7
   2811a:	2d660613          	addi	a2,a2,726 # 2f3ec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe0c>
   2811e:	00007597          	auipc	a1,0x7
   28122:	2c258593          	addi	a1,a1,706 # 2f3e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe00>
   28126:	00011317          	auipc	t1,0x11
   2812a:	1da33303          	ld	t1,474(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2812e:	9302                	c.jalr	t1
   28130:	b3b5                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28132:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28136:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28138:	4681                	c.li	a3,0
   2813a:	00007617          	auipc	a2,0x7
   2813e:	2c760613          	addi	a2,a2,711 # 2f401 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe21>
   28142:	00007597          	auipc	a1,0x7
   28146:	2ae58593          	addi	a1,a1,686 # 2f3f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe10>
   2814a:	00011317          	auipc	t1,0x11
   2814e:	1b633303          	ld	t1,438(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28152:	9302                	c.jalr	t1
   28154:	b3a1                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28156:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2815a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2815c:	4681                	c.li	a3,0
   2815e:	00007617          	auipc	a2,0x7
   28162:	2ba60613          	addi	a2,a2,698 # 2f418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe38>
   28166:	00007597          	auipc	a1,0x7
   2816a:	2a258593          	addi	a1,a1,674 # 2f408 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe28>
   2816e:	00011317          	auipc	t1,0x11
   28172:	19233303          	ld	t1,402(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28176:	9302                	c.jalr	t1
   28178:	b315                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2817a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2817e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28180:	4681                	c.li	a3,0
   28182:	00007617          	auipc	a2,0x7
   28186:	2b060613          	addi	a2,a2,688 # 2f432 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe52>
   2818a:	00007597          	auipc	a1,0x7
   2818e:	29658593          	addi	a1,a1,662 # 2f420 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe40>
   28192:	00011317          	auipc	t1,0x11
   28196:	16e33303          	ld	t1,366(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2819a:	9302                	c.jalr	t1
   2819c:	b301                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2819e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   281a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   281a4:	4681                	c.li	a3,0
   281a6:	00007617          	auipc	a2,0x7
   281aa:	2a160613          	addi	a2,a2,673 # 2f447 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe67>
   281ae:	00007597          	auipc	a1,0x7
   281b2:	28a58593          	addi	a1,a1,650 # 2f438 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe58>
   281b6:	00011317          	auipc	t1,0x11
   281ba:	14a33303          	ld	t1,330(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   281be:	9302                	c.jalr	t1
   281c0:	b9f1                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   281c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   281c6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   281c8:	4681                	c.li	a3,0
   281ca:	00007617          	auipc	a2,0x7
   281ce:	29260613          	addi	a2,a2,658 # 2f45c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe7c>
   281d2:	00007597          	auipc	a1,0x7
   281d6:	27658593          	addi	a1,a1,630 # 2f448 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe68>
   281da:	00011317          	auipc	t1,0x11
   281de:	12633303          	ld	t1,294(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   281e2:	9302                	c.jalr	t1
   281e4:	b965                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   281e6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   281ea:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   281ec:	4681                	c.li	a3,0
   281ee:	00007617          	auipc	a2,0x7
   281f2:	28260613          	addi	a2,a2,642 # 2f470 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe90>
   281f6:	00007597          	auipc	a1,0x7
   281fa:	26a58593          	addi	a1,a1,618 # 2f460 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe80>
   281fe:	00011317          	auipc	t1,0x11
   28202:	10233303          	ld	t1,258(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28206:	9302                	c.jalr	t1
   28208:	b951                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
        return "(DW_FORM)0x" + to_hex((int)v);
   2820a:	848a                	c.mv	s1,sp
   2820c:	8526                	c.mv	a0,s1
   2820e:	00011317          	auipc	t1,0x11
   28212:	20233303          	ld	t1,514(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   28216:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28218:	472d                	c.li	a4,11
   2821a:	00007697          	auipc	a3,0x7
   2821e:	25e68693          	addi	a3,a3,606 # 2f478 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe98>
   28222:	4601                	c.li	a2,0
   28224:	4581                	c.li	a1,0
   28226:	8526                	c.mv	a0,s1
   28228:	bd8ee0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2822c:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2822e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28232:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   28234:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   28236:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2823a:	03278463          	beq	a5,s2,28262 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x410>
      { _M_dataplus._M_p = __p; }
   2823e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   28240:	689c                	c.ld	a5,16(s1)
   28242:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   28244:	649c                	c.ld	a5,8(s1)
   28246:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   28248:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2824c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   28250:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   28254:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28256:	081c                	c.addi4spn	a5,sp,16
   28258:	c4f502e3          	beq	a0,a5,27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2825c:	a54ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28260:	b935                	c.j	27e9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   28262:	6490                	c.ld	a2,8(s1)
   28264:	0605                	c.addi	a2,1
	if (__n == 0)
   28266:	de79                	c.beqz	a2,28244 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3f2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28268:	85ca                	c.mv	a1,s2
   2826a:	ae6ee0ef          	jal	ra,16550 <memcpy@plt>
   2826e:	bfd9                	c.j	28244 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3f2>
      { return _M_dataplus._M_p; }
   28270:	842a                	c.mv	s0,a0
   28272:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28274:	081c                	c.addi4spn	a5,sp,16
   28276:	00f50463          	beq	a0,a5,2827e <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x42c>
   2827a:	a36ee0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2827e:	8522                	c.mv	a0,s0
   28280:	c10ee0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000028284 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>:
{
   28284:	7139                	c.addi16sp	sp,-64
   28286:	fc06                	c.sdsp	ra,56(sp)
   28288:	f822                	c.sdsp	s0,48(sp)
   2828a:	f426                	c.sdsp	s1,40(sp)
   2828c:	f04a                	c.sdsp	s2,32(sp)
   2828e:	842a                	c.mv	s0,a0
        switch (v) {
   28290:	04300793          	addi	a5,zero,67
   28294:	08b7ede3          	bltu	a5,a1,28b2e <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8aa>
   28298:	00259793          	slli	a5,a1,0x2
   2829c:	00008717          	auipc	a4,0x8
   282a0:	55c70713          	addi	a4,a4,1372 # 307f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2218>
   282a4:	97ba                	c.add	a5,a4
   282a6:	439c                	c.lw	a5,0(a5)
   282a8:	97ba                	c.add	a5,a4
   282aa:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   282b0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   282b2:	4681                	c.li	a3,0
   282b4:	00007617          	auipc	a2,0x7
   282b8:	1e560613          	addi	a2,a2,485 # 2f499 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeb9>
   282bc:	00007597          	auipc	a1,0x7
   282c0:	1cc58593          	addi	a1,a1,460 # 2f488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xea8>
   282c4:	00011317          	auipc	t1,0x11
   282c8:	03c33303          	ld	t1,60(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   282cc:	9302                	c.jalr	t1
}
   282ce:	8522                	c.mv	a0,s0
   282d0:	70e2                	c.ldsp	ra,56(sp)
   282d2:	7442                	c.ldsp	s0,48(sp)
   282d4:	74a2                	c.ldsp	s1,40(sp)
   282d6:	7902                	c.ldsp	s2,32(sp)
   282d8:	6121                	c.addi16sp	sp,64
   282da:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   282e0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   282e2:	4681                	c.li	a3,0
   282e4:	00007617          	auipc	a2,0x7
   282e8:	1cd60613          	addi	a2,a2,461 # 2f4b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed1>
   282ec:	00007597          	auipc	a1,0x7
   282f0:	1b458593          	addi	a1,a1,436 # 2f4a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xec0>
   282f4:	00011317          	auipc	t1,0x11
   282f8:	00c33303          	ld	t1,12(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   282fc:	9302                	c.jalr	t1
   282fe:	bfc1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28300:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28304:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28306:	4681                	c.li	a3,0
   28308:	00007617          	auipc	a2,0x7
   2830c:	1c260613          	addi	a2,a2,450 # 2f4ca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeea>
   28310:	00007597          	auipc	a1,0x7
   28314:	1a858593          	addi	a1,a1,424 # 2f4b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed8>
   28318:	00011317          	auipc	t1,0x11
   2831c:	fe833303          	ld	t1,-24(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28320:	9302                	c.jalr	t1
   28322:	b775                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28324:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28328:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2832a:	4681                	c.li	a3,0
   2832c:	00007617          	auipc	a2,0x7
   28330:	1bb60613          	addi	a2,a2,443 # 2f4e7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf07>
   28334:	00007597          	auipc	a1,0x7
   28338:	19c58593          	addi	a1,a1,412 # 2f4d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xef0>
   2833c:	00011317          	auipc	t1,0x11
   28340:	fc433303          	ld	t1,-60(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28344:	9302                	c.jalr	t1
   28346:	b761                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28348:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2834c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2834e:	4681                	c.li	a3,0
   28350:	00007617          	auipc	a2,0x7
   28354:	1af60613          	addi	a2,a2,431 # 2f4ff <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf1f>
   28358:	00007597          	auipc	a1,0x7
   2835c:	19058593          	addi	a1,a1,400 # 2f4e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf08>
   28360:	00011317          	auipc	t1,0x11
   28364:	fa033303          	ld	t1,-96(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28368:	9302                	c.jalr	t1
   2836a:	b795                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2836c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28370:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28372:	4681                	c.li	a3,0
   28374:	00007617          	auipc	a2,0x7
   28378:	1a760613          	addi	a2,a2,423 # 2f51b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf3b>
   2837c:	00007597          	auipc	a1,0x7
   28380:	18458593          	addi	a1,a1,388 # 2f500 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf20>
   28384:	00011317          	auipc	t1,0x11
   28388:	f7c33303          	ld	t1,-132(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2838c:	9302                	c.jalr	t1
   2838e:	b781                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28390:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28394:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28396:	4681                	c.li	a3,0
   28398:	00007617          	auipc	a2,0x7
   2839c:	19460613          	addi	a2,a2,404 # 2f52c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf4c>
   283a0:	00007597          	auipc	a1,0x7
   283a4:	18058593          	addi	a1,a1,384 # 2f520 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf40>
   283a8:	00011317          	auipc	t1,0x11
   283ac:	f5833303          	ld	t1,-168(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   283b0:	9302                	c.jalr	t1
   283b2:	bf31                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283b8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   283ba:	4681                	c.li	a3,0
   283bc:	00007617          	auipc	a2,0x7
   283c0:	18860613          	addi	a2,a2,392 # 2f544 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf64>
   283c4:	00007597          	auipc	a1,0x7
   283c8:	16c58593          	addi	a1,a1,364 # 2f530 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf50>
   283cc:	00011317          	auipc	t1,0x11
   283d0:	f3433303          	ld	t1,-204(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   283d4:	9302                	c.jalr	t1
   283d6:	bde5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283dc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   283de:	4681                	c.li	a3,0
   283e0:	00007617          	auipc	a2,0x7
   283e4:	17560613          	addi	a2,a2,373 # 2f555 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf75>
   283e8:	00007597          	auipc	a1,0x7
   283ec:	16058593          	addi	a1,a1,352 # 2f548 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf68>
   283f0:	00011317          	auipc	t1,0x11
   283f4:	f1033303          	ld	t1,-240(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   283f8:	9302                	c.jalr	t1
   283fa:	bdd1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28400:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28402:	4681                	c.li	a3,0
   28404:	00007617          	auipc	a2,0x7
   28408:	16760613          	addi	a2,a2,359 # 2f56b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf8b>
   2840c:	00007597          	auipc	a1,0x7
   28410:	14c58593          	addi	a1,a1,332 # 2f558 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf78>
   28414:	00011317          	auipc	t1,0x11
   28418:	eec33303          	ld	t1,-276(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2841c:	9302                	c.jalr	t1
   2841e:	bd45                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28420:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28424:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28426:	4681                	c.li	a3,0
   28428:	00007617          	auipc	a2,0x7
   2842c:	15d60613          	addi	a2,a2,349 # 2f585 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa5>
   28430:	00007597          	auipc	a1,0x7
   28434:	14058593          	addi	a1,a1,320 # 2f570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf90>
   28438:	00011317          	auipc	t1,0x11
   2843c:	ec833303          	ld	t1,-312(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28440:	9302                	c.jalr	t1
   28442:	b571                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28444:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28448:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2844a:	4681                	c.li	a3,0
   2844c:	00007617          	auipc	a2,0x7
   28450:	14f60613          	addi	a2,a2,335 # 2f59b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfbb>
   28454:	00007597          	auipc	a1,0x7
   28458:	13458593          	addi	a1,a1,308 # 2f588 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa8>
   2845c:	00011317          	auipc	t1,0x11
   28460:	ea433303          	ld	t1,-348(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28464:	9302                	c.jalr	t1
   28466:	b5a5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28468:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2846c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2846e:	4681                	c.li	a3,0
   28470:	00007617          	auipc	a2,0x7
   28474:	14260613          	addi	a2,a2,322 # 2f5b2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd2>
   28478:	00007597          	auipc	a1,0x7
   2847c:	12858593          	addi	a1,a1,296 # 2f5a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfc0>
   28480:	00011317          	auipc	t1,0x11
   28484:	e8033303          	ld	t1,-384(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28488:	9302                	c.jalr	t1
   2848a:	b591                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2848c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28490:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28492:	4681                	c.li	a3,0
   28494:	00007617          	auipc	a2,0x7
   28498:	13960613          	addi	a2,a2,313 # 2f5cd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfed>
   2849c:	00007597          	auipc	a1,0x7
   284a0:	11c58593          	addi	a1,a1,284 # 2f5b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd8>
   284a4:	00011317          	auipc	t1,0x11
   284a8:	e5c33303          	ld	t1,-420(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   284ac:	9302                	c.jalr	t1
   284ae:	b505                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284b4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284b6:	4681                	c.li	a3,0
   284b8:	00007617          	auipc	a2,0x7
   284bc:	12e60613          	addi	a2,a2,302 # 2f5e6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1006>
   284c0:	00007597          	auipc	a1,0x7
   284c4:	11058593          	addi	a1,a1,272 # 2f5d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xff0>
   284c8:	00011317          	auipc	t1,0x11
   284cc:	e3833303          	ld	t1,-456(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   284d0:	9302                	c.jalr	t1
   284d2:	bbf5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284d8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284da:	4681                	c.li	a3,0
   284dc:	00007617          	auipc	a2,0x7
   284e0:	11a60613          	addi	a2,a2,282 # 2f5f6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1016>
   284e4:	00007597          	auipc	a1,0x7
   284e8:	10458593          	addi	a1,a1,260 # 2f5e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1008>
   284ec:	00011317          	auipc	t1,0x11
   284f0:	e1433303          	ld	t1,-492(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   284f4:	9302                	c.jalr	t1
   284f6:	bbe1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284fc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284fe:	4681                	c.li	a3,0
   28500:	00007617          	auipc	a2,0x7
   28504:	10960613          	addi	a2,a2,265 # 2f609 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1029>
   28508:	00007597          	auipc	a1,0x7
   2850c:	0f058593          	addi	a1,a1,240 # 2f5f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1018>
   28510:	00011317          	auipc	t1,0x11
   28514:	df033303          	ld	t1,-528(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28518:	9302                	c.jalr	t1
   2851a:	bb55                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2851c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28520:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28522:	4681                	c.li	a3,0
   28524:	00007617          	auipc	a2,0x7
   28528:	10960613          	addi	a2,a2,265 # 2f62d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x104d>
   2852c:	00007597          	auipc	a1,0x7
   28530:	0e458593          	addi	a1,a1,228 # 2f610 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1030>
   28534:	00011317          	auipc	t1,0x11
   28538:	dcc33303          	ld	t1,-564(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2853c:	9302                	c.jalr	t1
   2853e:	bb41                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28540:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28544:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28546:	4681                	c.li	a3,0
   28548:	00007617          	auipc	a2,0x7
   2854c:	0f660613          	addi	a2,a2,246 # 2f63e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x105e>
   28550:	00007597          	auipc	a1,0x7
   28554:	0e058593          	addi	a1,a1,224 # 2f630 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1050>
   28558:	00011317          	auipc	t1,0x11
   2855c:	da833303          	ld	t1,-600(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28560:	9302                	c.jalr	t1
   28562:	b3b5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28564:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28568:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2856a:	4681                	c.li	a3,0
   2856c:	00007617          	auipc	a2,0x7
   28570:	0e760613          	addi	a2,a2,231 # 2f653 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1073>
   28574:	00007597          	auipc	a1,0x7
   28578:	0cc58593          	addi	a1,a1,204 # 2f640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1060>
   2857c:	00011317          	auipc	t1,0x11
   28580:	d8433303          	ld	t1,-636(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28584:	9302                	c.jalr	t1
   28586:	b3a1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28588:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2858c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2858e:	4681                	c.li	a3,0
   28590:	00007617          	auipc	a2,0x7
   28594:	0df60613          	addi	a2,a2,223 # 2f66f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x108f>
   28598:	00007597          	auipc	a1,0x7
   2859c:	0c058593          	addi	a1,a1,192 # 2f658 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1078>
   285a0:	00011317          	auipc	t1,0x11
   285a4:	d6033303          	ld	t1,-672(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   285a8:	9302                	c.jalr	t1
   285aa:	b315                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285b0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285b2:	4681                	c.li	a3,0
   285b4:	00007617          	auipc	a2,0x7
   285b8:	0ce60613          	addi	a2,a2,206 # 2f682 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a2>
   285bc:	00007597          	auipc	a1,0x7
   285c0:	0b458593          	addi	a1,a1,180 # 2f670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1090>
   285c4:	00011317          	auipc	t1,0x11
   285c8:	d3c33303          	ld	t1,-708(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   285cc:	9302                	c.jalr	t1
   285ce:	b301                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285d4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285d6:	4681                	c.li	a3,0
   285d8:	00007617          	auipc	a2,0x7
   285dc:	0c960613          	addi	a2,a2,201 # 2f6a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c1>
   285e0:	00007597          	auipc	a1,0x7
   285e4:	0a858593          	addi	a1,a1,168 # 2f688 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a8>
   285e8:	00011317          	auipc	t1,0x11
   285ec:	d1833303          	ld	t1,-744(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   285f0:	9302                	c.jalr	t1
   285f2:	b9f1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285f8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285fa:	4681                	c.li	a3,0
   285fc:	00007617          	auipc	a2,0x7
   28600:	0b960613          	addi	a2,a2,185 # 2f6b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d5>
   28604:	00007597          	auipc	a1,0x7
   28608:	0a458593          	addi	a1,a1,164 # 2f6a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c8>
   2860c:	00011317          	auipc	t1,0x11
   28610:	cf433303          	ld	t1,-780(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28614:	9302                	c.jalr	t1
   28616:	b965                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28618:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2861c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2861e:	4681                	c.li	a3,0
   28620:	00007617          	auipc	a2,0x7
   28624:	0b160613          	addi	a2,a2,177 # 2f6d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f1>
   28628:	00007597          	auipc	a1,0x7
   2862c:	09058593          	addi	a1,a1,144 # 2f6b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d8>
   28630:	00011317          	auipc	t1,0x11
   28634:	cd033303          	ld	t1,-816(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28638:	9302                	c.jalr	t1
   2863a:	b951                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2863c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28640:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28642:	4681                	c.li	a3,0
   28644:	00007617          	auipc	a2,0x7
   28648:	0a360613          	addi	a2,a2,163 # 2f6e7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1107>
   2864c:	00007597          	auipc	a1,0x7
   28650:	08c58593          	addi	a1,a1,140 # 2f6d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f8>
   28654:	00011317          	auipc	t1,0x11
   28658:	cac33303          	ld	t1,-852(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2865c:	9302                	c.jalr	t1
   2865e:	b985                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28660:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28664:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28666:	4681                	c.li	a3,0
   28668:	00007617          	auipc	a2,0x7
   2866c:	09460613          	addi	a2,a2,148 # 2f6fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x111c>
   28670:	00007597          	auipc	a1,0x7
   28674:	07858593          	addi	a1,a1,120 # 2f6e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1108>
   28678:	00011317          	auipc	t1,0x11
   2867c:	c8833303          	ld	t1,-888(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28680:	9302                	c.jalr	t1
   28682:	b1b1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28684:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28688:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2868a:	4681                	c.li	a3,0
   2868c:	00007617          	auipc	a2,0x7
   28690:	08460613          	addi	a2,a2,132 # 2f710 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1130>
   28694:	00007597          	auipc	a1,0x7
   28698:	06c58593          	addi	a1,a1,108 # 2f700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1120>
   2869c:	00011317          	auipc	t1,0x11
   286a0:	c6433303          	ld	t1,-924(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   286a4:	9302                	c.jalr	t1
   286a6:	b125                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286ae:	4681                	c.li	a3,0
   286b0:	00007617          	auipc	a2,0x7
   286b4:	08160613          	addi	a2,a2,129 # 2f731 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1151>
   286b8:	00007597          	auipc	a1,0x7
   286bc:	06058593          	addi	a1,a1,96 # 2f718 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1138>
   286c0:	00011317          	auipc	t1,0x11
   286c4:	c4033303          	ld	t1,-960(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   286c8:	9302                	c.jalr	t1
   286ca:	b111                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286d0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286d2:	4681                	c.li	a3,0
   286d4:	00007617          	auipc	a2,0x7
   286d8:	07460613          	addi	a2,a2,116 # 2f748 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1168>
   286dc:	00007597          	auipc	a1,0x7
   286e0:	05c58593          	addi	a1,a1,92 # 2f738 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1158>
   286e4:	00011317          	auipc	t1,0x11
   286e8:	c1c33303          	ld	t1,-996(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   286ec:	9302                	c.jalr	t1
   286ee:	b6c5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286f4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286f6:	4681                	c.li	a3,0
   286f8:	00007617          	auipc	a2,0x7
   286fc:	06a60613          	addi	a2,a2,106 # 2f762 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1182>
   28700:	00007597          	auipc	a1,0x7
   28704:	05058593          	addi	a1,a1,80 # 2f750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1170>
   28708:	00011317          	auipc	t1,0x11
   2870c:	bf833303          	ld	t1,-1032(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28710:	9302                	c.jalr	t1
   28712:	be75                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28714:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28718:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2871a:	4681                	c.li	a3,0
   2871c:	00007617          	auipc	a2,0x7
   28720:	05d60613          	addi	a2,a2,93 # 2f779 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1199>
   28724:	00007597          	auipc	a1,0x7
   28728:	04458593          	addi	a1,a1,68 # 2f768 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1188>
   2872c:	00011317          	auipc	t1,0x11
   28730:	bd433303          	ld	t1,-1068(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28734:	9302                	c.jalr	t1
   28736:	be61                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28738:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2873c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2873e:	4681                	c.li	a3,0
   28740:	00007617          	auipc	a2,0x7
   28744:	04f60613          	addi	a2,a2,79 # 2f78f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11af>
   28748:	00007597          	auipc	a1,0x7
   2874c:	03858593          	addi	a1,a1,56 # 2f780 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11a0>
   28750:	00011317          	auipc	t1,0x11
   28754:	bb033303          	ld	t1,-1104(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28758:	9302                	c.jalr	t1
   2875a:	be95                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2875c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28760:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28762:	4681                	c.li	a3,0
   28764:	00007617          	auipc	a2,0x7
   28768:	03d60613          	addi	a2,a2,61 # 2f7a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c1>
   2876c:	00007597          	auipc	a1,0x7
   28770:	02458593          	addi	a1,a1,36 # 2f790 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11b0>
   28774:	00011317          	auipc	t1,0x11
   28778:	b8c33303          	ld	t1,-1140(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2877c:	9302                	c.jalr	t1
   2877e:	be81                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28780:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28784:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28786:	4681                	c.li	a3,0
   28788:	00007617          	auipc	a2,0x7
   2878c:	03060613          	addi	a2,a2,48 # 2f7b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11d8>
   28790:	00007597          	auipc	a1,0x7
   28794:	01858593          	addi	a1,a1,24 # 2f7a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c8>
   28798:	00011317          	auipc	t1,0x11
   2879c:	b6833303          	ld	t1,-1176(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   287a0:	9302                	c.jalr	t1
   287a2:	b635                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287a8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287aa:	4681                	c.li	a3,0
   287ac:	00007617          	auipc	a2,0x7
   287b0:	02160613          	addi	a2,a2,33 # 2f7cd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ed>
   287b4:	00007597          	auipc	a1,0x7
   287b8:	00c58593          	addi	a1,a1,12 # 2f7c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11e0>
   287bc:	00011317          	auipc	t1,0x11
   287c0:	b4433303          	ld	t1,-1212(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   287c4:	9302                	c.jalr	t1
   287c6:	b621                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287cc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287ce:	4681                	c.li	a3,0
   287d0:	00007617          	auipc	a2,0x7
   287d4:	00f60613          	addi	a2,a2,15 # 2f7df <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ff>
   287d8:	00007597          	auipc	a1,0x7
   287dc:	ff858593          	addi	a1,a1,-8 # 2f7d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11f0>
   287e0:	00011317          	auipc	t1,0x11
   287e4:	b2033303          	ld	t1,-1248(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   287e8:	9302                	c.jalr	t1
   287ea:	b4d5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287f0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287f2:	4681                	c.li	a3,0
   287f4:	00007617          	auipc	a2,0x7
   287f8:	00060613          	addi	a2,a2,0 # 2f7f4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1214>
   287fc:	00007597          	auipc	a1,0x7
   28800:	fe458593          	addi	a1,a1,-28 # 2f7e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1200>
   28804:	00011317          	auipc	t1,0x11
   28808:	afc33303          	ld	t1,-1284(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2880c:	9302                	c.jalr	t1
   2880e:	b4c1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28810:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28814:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28816:	4681                	c.li	a3,0
   28818:	00007617          	auipc	a2,0x7
   2881c:	ff260613          	addi	a2,a2,-14 # 2f80a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x122a>
   28820:	00007597          	auipc	a1,0x7
   28824:	fd858593          	addi	a1,a1,-40 # 2f7f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1218>
   28828:	00011317          	auipc	t1,0x11
   2882c:	ad833303          	ld	t1,-1320(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28830:	9302                	c.jalr	t1
   28832:	bc71                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28834:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28838:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2883a:	4681                	c.li	a3,0
   2883c:	00007617          	auipc	a2,0x7
   28840:	fe560613          	addi	a2,a2,-27 # 2f821 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1241>
   28844:	00007597          	auipc	a1,0x7
   28848:	fcc58593          	addi	a1,a1,-52 # 2f810 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1230>
   2884c:	00011317          	auipc	t1,0x11
   28850:	ab433303          	ld	t1,-1356(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28854:	9302                	c.jalr	t1
   28856:	bca5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28858:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2885c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2885e:	4681                	c.li	a3,0
   28860:	00007617          	auipc	a2,0x7
   28864:	fe660613          	addi	a2,a2,-26 # 2f846 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1266>
   28868:	00007597          	auipc	a1,0x7
   2886c:	fc058593          	addi	a1,a1,-64 # 2f828 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1248>
   28870:	00011317          	auipc	t1,0x11
   28874:	a9033303          	ld	t1,-1392(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28878:	9302                	c.jalr	t1
   2887a:	bc91                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2887c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28880:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28882:	4681                	c.li	a3,0
   28884:	00007617          	auipc	a2,0x7
   28888:	fe360613          	addi	a2,a2,-29 # 2f867 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1287>
   2888c:	00007597          	auipc	a1,0x7
   28890:	fbc58593          	addi	a1,a1,-68 # 2f848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1268>
   28894:	00011317          	auipc	t1,0x11
   28898:	a6c33303          	ld	t1,-1428(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2889c:	9302                	c.jalr	t1
   2889e:	bc05                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   288a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   288a4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   288a6:	4681                	c.li	a3,0
   288a8:	00007617          	auipc	a2,0x7
   288ac:	fd260613          	addi	a2,a2,-46 # 2f87a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x129a>
   288b0:	00007597          	auipc	a1,0x7
   288b4:	fb858593          	addi	a1,a1,-72 # 2f868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1288>
   288b8:	00011317          	auipc	t1,0x11
   288bc:	a4833303          	ld	t1,-1464(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   288c0:	9302                	c.jalr	t1
   288c2:	b431                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   288c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   288c8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   288ca:	4681                	c.li	a3,0
   288cc:	00007617          	auipc	a2,0x7
   288d0:	fc460613          	addi	a2,a2,-60 # 2f890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b0>
   288d4:	00007597          	auipc	a1,0x7
   288d8:	fac58593          	addi	a1,a1,-84 # 2f880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12a0>
   288dc:	00011317          	auipc	t1,0x11
   288e0:	a2433303          	ld	t1,-1500(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   288e4:	9302                	c.jalr	t1
   288e6:	b2e5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   288e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   288ec:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   288ee:	4681                	c.li	a3,0
   288f0:	00007617          	auipc	a2,0x7
   288f4:	fbb60613          	addi	a2,a2,-69 # 2f8ab <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12cb>
   288f8:	00007597          	auipc	a1,0x7
   288fc:	fa058593          	addi	a1,a1,-96 # 2f898 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b8>
   28900:	00011317          	auipc	t1,0x11
   28904:	a0033303          	ld	t1,-1536(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28908:	9302                	c.jalr	t1
   2890a:	b2d1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2890c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28910:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28912:	4681                	c.li	a3,0
   28914:	00007617          	auipc	a2,0x7
   28918:	fab60613          	addi	a2,a2,-85 # 2f8bf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12df>
   2891c:	00007597          	auipc	a1,0x7
   28920:	f9458593          	addi	a1,a1,-108 # 2f8b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12d0>
   28924:	00011317          	auipc	t1,0x11
   28928:	9dc33303          	ld	t1,-1572(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2892c:	9302                	c.jalr	t1
   2892e:	b245                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28930:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28934:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28936:	4681                	c.li	a3,0
   28938:	00007617          	auipc	a2,0x7
   2893c:	f9c60613          	addi	a2,a2,-100 # 2f8d4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f4>
   28940:	00007597          	auipc	a1,0x7
   28944:	f8058593          	addi	a1,a1,-128 # 2f8c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12e0>
   28948:	00011317          	auipc	t1,0x11
   2894c:	9b833303          	ld	t1,-1608(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28950:	9302                	c.jalr	t1
   28952:	bab5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28954:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28958:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2895a:	4681                	c.li	a3,0
   2895c:	00007617          	auipc	a2,0x7
   28960:	f9260613          	addi	a2,a2,-110 # 2f8ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x130e>
   28964:	00007597          	auipc	a1,0x7
   28968:	f7458593          	addi	a1,a1,-140 # 2f8d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f8>
   2896c:	00011317          	auipc	t1,0x11
   28970:	99433303          	ld	t1,-1644(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28974:	9302                	c.jalr	t1
   28976:	baa1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28978:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2897c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2897e:	4681                	c.li	a3,0
   28980:	00007617          	auipc	a2,0x7
   28984:	f8460613          	addi	a2,a2,-124 # 2f904 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1324>
   28988:	00007597          	auipc	a1,0x7
   2898c:	f6858593          	addi	a1,a1,-152 # 2f8f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1310>
   28990:	00011317          	auipc	t1,0x11
   28994:	97033303          	ld	t1,-1680(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28998:	9302                	c.jalr	t1
   2899a:	ba15                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2899c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289a0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289a2:	4681                	c.li	a3,0
   289a4:	00007617          	auipc	a2,0x7
   289a8:	f7960613          	addi	a2,a2,-135 # 2f91d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x133d>
   289ac:	00007597          	auipc	a1,0x7
   289b0:	f5c58593          	addi	a1,a1,-164 # 2f908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1328>
   289b4:	00011317          	auipc	t1,0x11
   289b8:	94c33303          	ld	t1,-1716(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   289bc:	9302                	c.jalr	t1
   289be:	ba01                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   289c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289c4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289c6:	4681                	c.li	a3,0
   289c8:	00007617          	auipc	a2,0x7
   289cc:	f6860613          	addi	a2,a2,-152 # 2f930 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1350>
   289d0:	00007597          	auipc	a1,0x7
   289d4:	f5058593          	addi	a1,a1,-176 # 2f920 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1340>
   289d8:	00011317          	auipc	t1,0x11
   289dc:	92833303          	ld	t1,-1752(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   289e0:	9302                	c.jalr	t1
   289e2:	b0f5                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   289e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289e8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289ea:	4681                	c.li	a3,0
   289ec:	00007617          	auipc	a2,0x7
   289f0:	f6260613          	addi	a2,a2,-158 # 2f94e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x136e>
   289f4:	00007597          	auipc	a1,0x7
   289f8:	f4458593          	addi	a1,a1,-188 # 2f938 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1358>
   289fc:	00011317          	auipc	t1,0x11
   28a00:	90433303          	ld	t1,-1788(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28a04:	9302                	c.jalr	t1
   28a06:	b0e1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a0c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a0e:	4681                	c.li	a3,0
   28a10:	00007617          	auipc	a2,0x7
   28a14:	f5760613          	addi	a2,a2,-169 # 2f967 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1387>
   28a18:	00007597          	auipc	a1,0x7
   28a1c:	f3858593          	addi	a1,a1,-200 # 2f950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1370>
   28a20:	00011317          	auipc	t1,0x11
   28a24:	8e033303          	ld	t1,-1824(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28a28:	9302                	c.jalr	t1
   28a2a:	b055                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a30:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a32:	4681                	c.li	a3,0
   28a34:	00007617          	auipc	a2,0x7
   28a38:	f4760613          	addi	a2,a2,-185 # 2f97b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x139b>
   28a3c:	00007597          	auipc	a1,0x7
   28a40:	f2c58593          	addi	a1,a1,-212 # 2f968 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1388>
   28a44:	00011317          	auipc	t1,0x11
   28a48:	8bc33303          	ld	t1,-1860(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28a4c:	9302                	c.jalr	t1
   28a4e:	b041                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a54:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a56:	4681                	c.li	a3,0
   28a58:	00007617          	auipc	a2,0x7
   28a5c:	f3c60613          	addi	a2,a2,-196 # 2f994 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b4>
   28a60:	00007597          	auipc	a1,0x7
   28a64:	f2058593          	addi	a1,a1,-224 # 2f980 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13a0>
   28a68:	00011317          	auipc	t1,0x11
   28a6c:	89833303          	ld	t1,-1896(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28a70:	9302                	c.jalr	t1
   28a72:	b8b1                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a78:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a7a:	4681                	c.li	a3,0
   28a7c:	00007617          	auipc	a2,0x7
   28a80:	f2c60613          	addi	a2,a2,-212 # 2f9a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13c8>
   28a84:	00007597          	auipc	a1,0x7
   28a88:	f1458593          	addi	a1,a1,-236 # 2f998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b8>
   28a8c:	00011317          	auipc	t1,0x11
   28a90:	87433303          	ld	t1,-1932(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28a94:	9302                	c.jalr	t1
   28a96:	b825                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a9c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a9e:	4681                	c.li	a3,0
   28aa0:	00007617          	auipc	a2,0x7
   28aa4:	f2260613          	addi	a2,a2,-222 # 2f9c2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e2>
   28aa8:	00007597          	auipc	a1,0x7
   28aac:	f0858593          	addi	a1,a1,-248 # 2f9b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13d0>
   28ab0:	00011317          	auipc	t1,0x11
   28ab4:	85033303          	ld	t1,-1968(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28ab8:	9302                	c.jalr	t1
   28aba:	b811                	c.j	282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28abc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ac0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ac2:	4681                	c.li	a3,0
   28ac4:	00007617          	auipc	a2,0x7
   28ac8:	f1460613          	addi	a2,a2,-236 # 2f9d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13f8>
   28acc:	00007597          	auipc	a1,0x7
   28ad0:	efc58593          	addi	a1,a1,-260 # 2f9c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e8>
   28ad4:	00011317          	auipc	t1,0x11
   28ad8:	82c33303          	ld	t1,-2004(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28adc:	9302                	c.jalr	t1
   28ade:	ff0ff06f          	jal	zero,282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ae2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ae6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ae8:	4681                	c.li	a3,0
   28aea:	00007617          	auipc	a2,0x7
   28aee:	f1260613          	addi	a2,a2,-238 # 2f9fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x141c>
   28af2:	00007597          	auipc	a1,0x7
   28af6:	eee58593          	addi	a1,a1,-274 # 2f9e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1400>
   28afa:	00011317          	auipc	t1,0x11
   28afe:	80633303          	ld	t1,-2042(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28b02:	9302                	c.jalr	t1
   28b04:	fcaff06f          	jal	zero,282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b0c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b0e:	4681                	c.li	a3,0
   28b10:	00007617          	auipc	a2,0x7
   28b14:	f0560613          	addi	a2,a2,-251 # 2fa15 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1435>
   28b18:	00007597          	auipc	a1,0x7
   28b1c:	ee858593          	addi	a1,a1,-280 # 2fa00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1420>
   28b20:	00010317          	auipc	t1,0x10
   28b24:	7e033303          	ld	t1,2016(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28b28:	9302                	c.jalr	t1
   28b2a:	fa4ff06f          	jal	zero,282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
        return "(DW_TAG)0x" + to_hex((int)v);
   28b2e:	848a                	c.mv	s1,sp
   28b30:	8526                	c.mv	a0,s1
   28b32:	00011317          	auipc	t1,0x11
   28b36:	8de33303          	ld	t1,-1826(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   28b3a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28b3c:	4729                	c.li	a4,10
   28b3e:	00007697          	auipc	a3,0x7
   28b42:	eda68693          	addi	a3,a3,-294 # 2fa18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1438>
   28b46:	4601                	c.li	a2,0
   28b48:	4581                	c.li	a1,0
   28b4a:	8526                	c.mv	a0,s1
   28b4c:	ab5ed0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28b50:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b52:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28b56:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   28b58:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   28b5a:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   28b5e:	03278563          	beq	a5,s2,28b88 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x904>
      { _M_dataplus._M_p = __p; }
   28b62:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   28b64:	689c                	c.ld	a5,16(s1)
   28b66:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   28b68:	649c                	c.ld	a5,8(s1)
   28b6a:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   28b6c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   28b70:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   28b74:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   28b78:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28b7a:	081c                	c.addi4spn	a5,sp,16
   28b7c:	f4f50963          	beq	a0,a5,282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28b80:	931ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28b84:	f4aff06f          	jal	zero,282ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   28b88:	6490                	c.ld	a2,8(s1)
   28b8a:	0605                	c.addi	a2,1
	if (__n == 0)
   28b8c:	de71                	c.beqz	a2,28b68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8e4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28b8e:	85ca                	c.mv	a1,s2
   28b90:	9c1ed0ef          	jal	ra,16550 <memcpy@plt>
   28b94:	bfd1                	c.j	28b68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8e4>
      { return _M_dataplus._M_p; }
   28b96:	842a                	c.mv	s0,a0
   28b98:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28b9a:	081c                	c.addi4spn	a5,sp,16
   28b9c:	00f50463          	beq	a0,a5,28ba4 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x920>
   28ba0:	911ed0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   28ba4:	8522                	c.mv	a0,s0
   28ba6:	aebed0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000028baa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>:
{
   28baa:	7139                	c.addi16sp	sp,-64
   28bac:	fc06                	c.sdsp	ra,56(sp)
   28bae:	f822                	c.sdsp	s0,48(sp)
   28bb0:	f426                	c.sdsp	s1,40(sp)
   28bb2:	f04a                	c.sdsp	s2,32(sp)
   28bb4:	842a                	c.mv	s0,a0
        switch (v) {
   28bb6:	ffd5879b          	addiw	a5,a1,-3
   28bba:	0ff7f693          	andi	a3,a5,255
   28bbe:	09c00713          	addi	a4,zero,156
   28bc2:	12d769e3          	bltu	a4,a3,294f4 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x94a>
   28bc6:	00269793          	slli	a5,a3,0x2
   28bca:	00008717          	auipc	a4,0x8
   28bce:	d3e70713          	addi	a4,a4,-706 # 30908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2328>
   28bd2:	97ba                	c.add	a5,a4
   28bd4:	439c                	c.lw	a5,0(a5)
   28bd6:	97ba                	c.add	a5,a4
   28bd8:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28bda:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28bde:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28be0:	4681                	c.li	a3,0
   28be2:	00007617          	auipc	a2,0x7
   28be6:	e5060613          	addi	a2,a2,-432 # 2fa32 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1452>
   28bea:	00007597          	auipc	a1,0x7
   28bee:	e3e58593          	addi	a1,a1,-450 # 2fa28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1448>
   28bf2:	00010317          	auipc	t1,0x10
   28bf6:	70e33303          	ld	t1,1806(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28bfa:	9302                	c.jalr	t1
}
   28bfc:	8522                	c.mv	a0,s0
   28bfe:	70e2                	c.ldsp	ra,56(sp)
   28c00:	7442                	c.ldsp	s0,48(sp)
   28c02:	74a2                	c.ldsp	s1,40(sp)
   28c04:	7902                	c.ldsp	s2,32(sp)
   28c06:	6121                	c.addi16sp	sp,64
   28c08:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c0a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c0e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c10:	4681                	c.li	a3,0
   28c12:	00007617          	auipc	a2,0x7
   28c16:	e3160613          	addi	a2,a2,-463 # 2fa43 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1463>
   28c1a:	00007597          	auipc	a1,0x7
   28c1e:	e1e58593          	addi	a1,a1,-482 # 2fa38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1458>
   28c22:	00010317          	auipc	t1,0x10
   28c26:	6de33303          	ld	t1,1758(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28c2a:	9302                	c.jalr	t1
   28c2c:	bfc1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c2e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c32:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c34:	4681                	c.li	a3,0
   28c36:	00007617          	auipc	a2,0x7
   28c3a:	e1f60613          	addi	a2,a2,-481 # 2fa55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1475>
   28c3e:	00007597          	auipc	a1,0x7
   28c42:	e0a58593          	addi	a1,a1,-502 # 2fa48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1468>
   28c46:	00010317          	auipc	t1,0x10
   28c4a:	6ba33303          	ld	t1,1722(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28c4e:	9302                	c.jalr	t1
   28c50:	b775                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c52:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c56:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c58:	4681                	c.li	a3,0
   28c5a:	00007617          	auipc	a2,0x7
   28c5e:	e0b60613          	addi	a2,a2,-501 # 2fa65 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1485>
   28c62:	00007597          	auipc	a1,0x7
   28c66:	df658593          	addi	a1,a1,-522 # 2fa58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1478>
   28c6a:	00010317          	auipc	t1,0x10
   28c6e:	69633303          	ld	t1,1686(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28c72:	9302                	c.jalr	t1
   28c74:	b761                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c76:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c7a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c7c:	4681                	c.li	a3,0
   28c7e:	00007617          	auipc	a2,0x7
   28c82:	df760613          	addi	a2,a2,-521 # 2fa75 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1495>
   28c86:	00007597          	auipc	a1,0x7
   28c8a:	de258593          	addi	a1,a1,-542 # 2fa68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1488>
   28c8e:	00010317          	auipc	t1,0x10
   28c92:	67233303          	ld	t1,1650(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28c96:	9302                	c.jalr	t1
   28c98:	b795                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c9a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c9e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ca0:	4681                	c.li	a3,0
   28ca2:	00007617          	auipc	a2,0x7
   28ca6:	de360613          	addi	a2,a2,-541 # 2fa85 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a5>
   28caa:	00007597          	auipc	a1,0x7
   28cae:	dce58593          	addi	a1,a1,-562 # 2fa78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1498>
   28cb2:	00010317          	auipc	t1,0x10
   28cb6:	64e33303          	ld	t1,1614(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28cba:	9302                	c.jalr	t1
   28cbc:	b781                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28cbe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28cc2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28cc4:	4681                	c.li	a3,0
   28cc6:	00007617          	auipc	a2,0x7
   28cca:	dcf60613          	addi	a2,a2,-561 # 2fa95 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b5>
   28cce:	00007597          	auipc	a1,0x7
   28cd2:	dba58593          	addi	a1,a1,-582 # 2fa88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a8>
   28cd6:	00010317          	auipc	t1,0x10
   28cda:	62a33303          	ld	t1,1578(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28cde:	9302                	c.jalr	t1
   28ce0:	bf31                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ce2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ce6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ce8:	4681                	c.li	a3,0
   28cea:	00007617          	auipc	a2,0x7
   28cee:	dbb60613          	addi	a2,a2,-581 # 2faa5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c5>
   28cf2:	00007597          	auipc	a1,0x7
   28cf6:	da658593          	addi	a1,a1,-602 # 2fa98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b8>
   28cfa:	00010317          	auipc	t1,0x10
   28cfe:	60633303          	ld	t1,1542(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28d02:	9302                	c.jalr	t1
   28d04:	bde5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d06:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d0a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d0c:	4681                	c.li	a3,0
   28d0e:	00007617          	auipc	a2,0x7
   28d12:	da760613          	addi	a2,a2,-601 # 2fab5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d5>
   28d16:	00007597          	auipc	a1,0x7
   28d1a:	d9258593          	addi	a1,a1,-622 # 2faa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c8>
   28d1e:	00010317          	auipc	t1,0x10
   28d22:	5e233303          	ld	t1,1506(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28d26:	9302                	c.jalr	t1
   28d28:	bdd1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d2a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d2e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d30:	4681                	c.li	a3,0
   28d32:	00007617          	auipc	a2,0x7
   28d36:	d9360613          	addi	a2,a2,-621 # 2fac5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e5>
   28d3a:	00007597          	auipc	a1,0x7
   28d3e:	d7e58593          	addi	a1,a1,-642 # 2fab8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d8>
   28d42:	00010317          	auipc	t1,0x10
   28d46:	5be33303          	ld	t1,1470(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28d4a:	9302                	c.jalr	t1
   28d4c:	bd45                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d4e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d52:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d54:	4681                	c.li	a3,0
   28d56:	00007617          	auipc	a2,0x7
   28d5a:	d7e60613          	addi	a2,a2,-642 # 2fad4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f4>
   28d5e:	00007597          	auipc	a1,0x7
   28d62:	d6a58593          	addi	a1,a1,-662 # 2fac8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e8>
   28d66:	00010317          	auipc	t1,0x10
   28d6a:	59a33303          	ld	t1,1434(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28d6e:	9302                	c.jalr	t1
   28d70:	b571                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d72:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d76:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d78:	4681                	c.li	a3,0
   28d7a:	00007617          	auipc	a2,0x7
   28d7e:	d6a60613          	addi	a2,a2,-662 # 2fae4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1504>
   28d82:	00007597          	auipc	a1,0x7
   28d86:	d5658593          	addi	a1,a1,-682 # 2fad8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f8>
   28d8a:	00010317          	auipc	t1,0x10
   28d8e:	57633303          	ld	t1,1398(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28d92:	9302                	c.jalr	t1
   28d94:	b5a5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d96:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d9a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d9c:	4681                	c.li	a3,0
   28d9e:	00007617          	auipc	a2,0x7
   28da2:	d5360613          	addi	a2,a2,-685 # 2faf1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1511>
   28da6:	00007597          	auipc	a1,0x7
   28daa:	d4258593          	addi	a1,a1,-702 # 2fae8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1508>
   28dae:	00010317          	auipc	t1,0x10
   28db2:	55233303          	ld	t1,1362(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28db6:	9302                	c.jalr	t1
   28db8:	b591                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28dba:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28dbe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28dc0:	4681                	c.li	a3,0
   28dc2:	00007617          	auipc	a2,0x7
   28dc6:	d4060613          	addi	a2,a2,-704 # 2fb02 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1522>
   28dca:	00007597          	auipc	a1,0x7
   28dce:	d2e58593          	addi	a1,a1,-722 # 2faf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1518>
   28dd2:	00010317          	auipc	t1,0x10
   28dd6:	52e33303          	ld	t1,1326(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28dda:	9302                	c.jalr	t1
   28ddc:	b505                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28dde:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28de2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28de4:	4681                	c.li	a3,0
   28de6:	00007617          	auipc	a2,0x7
   28dea:	d2c60613          	addi	a2,a2,-724 # 2fb12 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1532>
   28dee:	00007597          	auipc	a1,0x7
   28df2:	d1a58593          	addi	a1,a1,-742 # 2fb08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1528>
   28df6:	00010317          	auipc	t1,0x10
   28dfa:	50a33303          	ld	t1,1290(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28dfe:	9302                	c.jalr	t1
   28e00:	bbf5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e02:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e06:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e08:	4681                	c.li	a3,0
   28e0a:	00007617          	auipc	a2,0x7
   28e0e:	d1860613          	addi	a2,a2,-744 # 2fb22 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1542>
   28e12:	00007597          	auipc	a1,0x7
   28e16:	d0658593          	addi	a1,a1,-762 # 2fb18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1538>
   28e1a:	00010317          	auipc	t1,0x10
   28e1e:	4e633303          	ld	t1,1254(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28e22:	9302                	c.jalr	t1
   28e24:	bbe1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e26:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e2a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e2c:	4681                	c.li	a3,0
   28e2e:	00007617          	auipc	a2,0x7
   28e32:	d0460613          	addi	a2,a2,-764 # 2fb32 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1552>
   28e36:	00007597          	auipc	a1,0x7
   28e3a:	cf258593          	addi	a1,a1,-782 # 2fb28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1548>
   28e3e:	00010317          	auipc	t1,0x10
   28e42:	4c233303          	ld	t1,1218(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28e46:	9302                	c.jalr	t1
   28e48:	bb55                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e4a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e4e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e50:	4681                	c.li	a3,0
   28e52:	00007617          	auipc	a2,0x7
   28e56:	cef60613          	addi	a2,a2,-785 # 2fb41 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1561>
   28e5a:	00007597          	auipc	a1,0x7
   28e5e:	cde58593          	addi	a1,a1,-802 # 2fb38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1558>
   28e62:	00010317          	auipc	t1,0x10
   28e66:	49e33303          	ld	t1,1182(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28e6a:	9302                	c.jalr	t1
   28e6c:	bb41                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e6e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e72:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e74:	4681                	c.li	a3,0
   28e76:	00007617          	auipc	a2,0x7
   28e7a:	cde60613          	addi	a2,a2,-802 # 2fb54 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1574>
   28e7e:	00007597          	auipc	a1,0x7
   28e82:	cca58593          	addi	a1,a1,-822 # 2fb48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1568>
   28e86:	00010317          	auipc	t1,0x10
   28e8a:	47a33303          	ld	t1,1146(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28e8e:	9302                	c.jalr	t1
   28e90:	b3b5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e92:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e96:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e98:	4681                	c.li	a3,0
   28e9a:	00007617          	auipc	a2,0x7
   28e9e:	cc760613          	addi	a2,a2,-825 # 2fb61 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1581>
   28ea2:	00007597          	auipc	a1,0x7
   28ea6:	cb658593          	addi	a1,a1,-842 # 2fb58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1578>
   28eaa:	00010317          	auipc	t1,0x10
   28eae:	45633303          	ld	t1,1110(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28eb2:	9302                	c.jalr	t1
   28eb4:	b3a1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28eb6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28eba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ebc:	4681                	c.li	a3,0
   28ebe:	00007617          	auipc	a2,0x7
   28ec2:	cb360613          	addi	a2,a2,-845 # 2fb71 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1591>
   28ec6:	00007597          	auipc	a1,0x7
   28eca:	ca258593          	addi	a1,a1,-862 # 2fb68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1588>
   28ece:	00010317          	auipc	t1,0x10
   28ed2:	43233303          	ld	t1,1074(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28ed6:	9302                	c.jalr	t1
   28ed8:	b315                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28eda:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ede:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ee0:	4681                	c.li	a3,0
   28ee2:	00007617          	auipc	a2,0x7
   28ee6:	c9f60613          	addi	a2,a2,-865 # 2fb81 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a1>
   28eea:	00007597          	auipc	a1,0x7
   28eee:	c8e58593          	addi	a1,a1,-882 # 2fb78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1598>
   28ef2:	00010317          	auipc	t1,0x10
   28ef6:	40e33303          	ld	t1,1038(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28efa:	9302                	c.jalr	t1
   28efc:	b301                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28efe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f02:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f04:	4681                	c.li	a3,0
   28f06:	00007617          	auipc	a2,0x7
   28f0a:	c8d60613          	addi	a2,a2,-883 # 2fb93 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b3>
   28f0e:	00007597          	auipc	a1,0x7
   28f12:	c7a58593          	addi	a1,a1,-902 # 2fb88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a8>
   28f16:	00010317          	auipc	t1,0x10
   28f1a:	3ea33303          	ld	t1,1002(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28f1e:	9302                	c.jalr	t1
   28f20:	b9f1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f22:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f26:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f28:	4681                	c.li	a3,0
   28f2a:	00007617          	auipc	a2,0x7
   28f2e:	c7760613          	addi	a2,a2,-905 # 2fba1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c1>
   28f32:	00007597          	auipc	a1,0x7
   28f36:	c6658593          	addi	a1,a1,-922 # 2fb98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b8>
   28f3a:	00010317          	auipc	t1,0x10
   28f3e:	3c633303          	ld	t1,966(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28f42:	9302                	c.jalr	t1
   28f44:	b965                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f46:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f4a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f4c:	4681                	c.li	a3,0
   28f4e:	00007617          	auipc	a2,0x7
   28f52:	c6360613          	addi	a2,a2,-925 # 2fbb1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d1>
   28f56:	00007597          	auipc	a1,0x7
   28f5a:	c5258593          	addi	a1,a1,-942 # 2fba8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c8>
   28f5e:	00010317          	auipc	t1,0x10
   28f62:	3a233303          	ld	t1,930(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28f66:	9302                	c.jalr	t1
   28f68:	b951                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f6a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f6e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f70:	4681                	c.li	a3,0
   28f72:	00007617          	auipc	a2,0x7
   28f76:	c4f60613          	addi	a2,a2,-945 # 2fbc1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e1>
   28f7a:	00007597          	auipc	a1,0x7
   28f7e:	c3e58593          	addi	a1,a1,-962 # 2fbb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d8>
   28f82:	00010317          	auipc	t1,0x10
   28f86:	37e33303          	ld	t1,894(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28f8a:	9302                	c.jalr	t1
   28f8c:	b985                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f8e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f92:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f94:	4681                	c.li	a3,0
   28f96:	00007617          	auipc	a2,0x7
   28f9a:	c3b60613          	addi	a2,a2,-965 # 2fbd1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f1>
   28f9e:	00007597          	auipc	a1,0x7
   28fa2:	c2a58593          	addi	a1,a1,-982 # 2fbc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e8>
   28fa6:	00010317          	auipc	t1,0x10
   28faa:	35a33303          	ld	t1,858(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28fae:	9302                	c.jalr	t1
   28fb0:	b1b1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28fb2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28fb6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28fb8:	4681                	c.li	a3,0
   28fba:	00007617          	auipc	a2,0x7
   28fbe:	c2660613          	addi	a2,a2,-986 # 2fbe0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1600>
   28fc2:	00007597          	auipc	a1,0x7
   28fc6:	c1658593          	addi	a1,a1,-1002 # 2fbd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f8>
   28fca:	00010317          	auipc	t1,0x10
   28fce:	33633303          	ld	t1,822(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28fd2:	9302                	c.jalr	t1
   28fd4:	b125                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28fd6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28fda:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28fdc:	4681                	c.li	a3,0
   28fde:	00007617          	auipc	a2,0x7
   28fe2:	c1460613          	addi	a2,a2,-1004 # 2fbf2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1612>
   28fe6:	00007597          	auipc	a1,0x7
   28fea:	c0258593          	addi	a1,a1,-1022 # 2fbe8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1608>
   28fee:	00010317          	auipc	t1,0x10
   28ff2:	31233303          	ld	t1,786(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   28ff6:	9302                	c.jalr	t1
   28ff8:	b111                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ffa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ffe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29000:	4681                	c.li	a3,0
   29002:	00007617          	auipc	a2,0x7
   29006:	c0760613          	addi	a2,a2,-1017 # 2fc09 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1629>
   2900a:	00007597          	auipc	a1,0x7
   2900e:	bee58593          	addi	a1,a1,-1042 # 2fbf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1618>
   29012:	00010317          	auipc	t1,0x10
   29016:	2ee33303          	ld	t1,750(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2901a:	9302                	c.jalr	t1
   2901c:	b6c5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2901e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29022:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29024:	4681                	c.li	a3,0
   29026:	00007617          	auipc	a2,0x7
   2902a:	bf360613          	addi	a2,a2,-1037 # 2fc19 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1639>
   2902e:	00007597          	auipc	a1,0x7
   29032:	be258593          	addi	a1,a1,-1054 # 2fc10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1630>
   29036:	00010317          	auipc	t1,0x10
   2903a:	2ca33303          	ld	t1,714(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2903e:	9302                	c.jalr	t1
   29040:	be75                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29042:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29046:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29048:	4681                	c.li	a3,0
   2904a:	00007617          	auipc	a2,0x7
   2904e:	bdf60613          	addi	a2,a2,-1057 # 2fc29 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1649>
   29052:	00007597          	auipc	a1,0x7
   29056:	bce58593          	addi	a1,a1,-1074 # 2fc20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1640>
   2905a:	00010317          	auipc	t1,0x10
   2905e:	2a633303          	ld	t1,678(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29062:	9302                	c.jalr	t1
   29064:	be61                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29066:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2906a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2906c:	4681                	c.li	a3,0
   2906e:	00007617          	auipc	a2,0x7
   29072:	bcc60613          	addi	a2,a2,-1076 # 2fc3a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x165a>
   29076:	00007597          	auipc	a1,0x7
   2907a:	bba58593          	addi	a1,a1,-1094 # 2fc30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1650>
   2907e:	00010317          	auipc	t1,0x10
   29082:	28233303          	ld	t1,642(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29086:	9302                	c.jalr	t1
   29088:	be95                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2908a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2908e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29090:	4681                	c.li	a3,0
   29092:	00007617          	auipc	a2,0x7
   29096:	bb760613          	addi	a2,a2,-1097 # 2fc49 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1669>
   2909a:	00007597          	auipc	a1,0x7
   2909e:	ba658593          	addi	a1,a1,-1114 # 2fc40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1660>
   290a2:	00010317          	auipc	t1,0x10
   290a6:	25e33303          	ld	t1,606(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   290aa:	9302                	c.jalr	t1
   290ac:	be81                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290ae:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290b2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290b4:	4681                	c.li	a3,0
   290b6:	00007617          	auipc	a2,0x7
   290ba:	ba460613          	addi	a2,a2,-1116 # 2fc5a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x167a>
   290be:	00007597          	auipc	a1,0x7
   290c2:	b9258593          	addi	a1,a1,-1134 # 2fc50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1670>
   290c6:	00010317          	auipc	t1,0x10
   290ca:	23a33303          	ld	t1,570(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   290ce:	9302                	c.jalr	t1
   290d0:	b635                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290d2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290d6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290d8:	4681                	c.li	a3,0
   290da:	00007617          	auipc	a2,0x7
   290de:	b8f60613          	addi	a2,a2,-1137 # 2fc69 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1689>
   290e2:	00007597          	auipc	a1,0x7
   290e6:	b7e58593          	addi	a1,a1,-1154 # 2fc60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1680>
   290ea:	00010317          	auipc	t1,0x10
   290ee:	21633303          	ld	t1,534(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   290f2:	9302                	c.jalr	t1
   290f4:	b621                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290f6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290fa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290fc:	4681                	c.li	a3,0
   290fe:	00007617          	auipc	a2,0x7
   29102:	b7a60613          	addi	a2,a2,-1158 # 2fc78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1698>
   29106:	00007597          	auipc	a1,0x7
   2910a:	b6a58593          	addi	a1,a1,-1174 # 2fc70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1690>
   2910e:	00010317          	auipc	t1,0x10
   29112:	1f233303          	ld	t1,498(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29116:	9302                	c.jalr	t1
   29118:	b4d5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2911a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2911e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29120:	4681                	c.li	a3,0
   29122:	00007617          	auipc	a2,0x7
   29126:	b6660613          	addi	a2,a2,-1178 # 2fc88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a8>
   2912a:	00007597          	auipc	a1,0x7
   2912e:	b5658593          	addi	a1,a1,-1194 # 2fc80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a0>
   29132:	00010317          	auipc	t1,0x10
   29136:	1ce33303          	ld	t1,462(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2913a:	9302                	c.jalr	t1
   2913c:	b4c1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2913e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29142:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29144:	4681                	c.li	a3,0
   29146:	00007617          	auipc	a2,0x7
   2914a:	b5260613          	addi	a2,a2,-1198 # 2fc98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b8>
   2914e:	00007597          	auipc	a1,0x7
   29152:	b4258593          	addi	a1,a1,-1214 # 2fc90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b0>
   29156:	00010317          	auipc	t1,0x10
   2915a:	1aa33303          	ld	t1,426(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2915e:	9302                	c.jalr	t1
   29160:	bc71                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29162:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29166:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29168:	4681                	c.li	a3,0
   2916a:	00007617          	auipc	a2,0x7
   2916e:	b3e60613          	addi	a2,a2,-1218 # 2fca8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c8>
   29172:	00007597          	auipc	a1,0x7
   29176:	b2e58593          	addi	a1,a1,-1234 # 2fca0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c0>
   2917a:	00010317          	auipc	t1,0x10
   2917e:	18633303          	ld	t1,390(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29182:	9302                	c.jalr	t1
   29184:	bca5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29186:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2918a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2918c:	4681                	c.li	a3,0
   2918e:	00007617          	auipc	a2,0x7
   29192:	b2a60613          	addi	a2,a2,-1238 # 2fcb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d8>
   29196:	00007597          	auipc	a1,0x7
   2919a:	b1a58593          	addi	a1,a1,-1254 # 2fcb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d0>
   2919e:	00010317          	auipc	t1,0x10
   291a2:	16233303          	ld	t1,354(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   291a6:	9302                	c.jalr	t1
   291a8:	bc91                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291aa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291ae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291b0:	4681                	c.li	a3,0
   291b2:	00007617          	auipc	a2,0x7
   291b6:	b1660613          	addi	a2,a2,-1258 # 2fcc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e8>
   291ba:	00007597          	auipc	a1,0x7
   291be:	b0658593          	addi	a1,a1,-1274 # 2fcc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e0>
   291c2:	00010317          	auipc	t1,0x10
   291c6:	13e33303          	ld	t1,318(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   291ca:	9302                	c.jalr	t1
   291cc:	bc05                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291ce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291d2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291d4:	4681                	c.li	a3,0
   291d6:	00007617          	auipc	a2,0x7
   291da:	b0460613          	addi	a2,a2,-1276 # 2fcda <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16fa>
   291de:	00007597          	auipc	a1,0x7
   291e2:	af258593          	addi	a1,a1,-1294 # 2fcd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16f0>
   291e6:	00010317          	auipc	t1,0x10
   291ea:	11a33303          	ld	t1,282(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   291ee:	9302                	c.jalr	t1
   291f0:	b431                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291f2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291f6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291f8:	4681                	c.li	a3,0
   291fa:	00007617          	auipc	a2,0x7
   291fe:	af160613          	addi	a2,a2,-1295 # 2fceb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x170b>
   29202:	00007597          	auipc	a1,0x7
   29206:	ade58593          	addi	a1,a1,-1314 # 2fce0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1700>
   2920a:	00010317          	auipc	t1,0x10
   2920e:	0f633303          	ld	t1,246(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29212:	9302                	c.jalr	t1
   29214:	b2e5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29216:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2921a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2921c:	4681                	c.li	a3,0
   2921e:	00007617          	auipc	a2,0x7
   29222:	adc60613          	addi	a2,a2,-1316 # 2fcfa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x171a>
   29226:	00007597          	auipc	a1,0x7
   2922a:	aca58593          	addi	a1,a1,-1334 # 2fcf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1710>
   2922e:	00010317          	auipc	t1,0x10
   29232:	0d233303          	ld	t1,210(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29236:	9302                	c.jalr	t1
   29238:	b2d1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2923a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2923e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29240:	4681                	c.li	a3,0
   29242:	00007617          	auipc	a2,0x7
   29246:	ac960613          	addi	a2,a2,-1335 # 2fd0b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x172b>
   2924a:	00007597          	auipc	a1,0x7
   2924e:	ab658593          	addi	a1,a1,-1354 # 2fd00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1720>
   29252:	00010317          	auipc	t1,0x10
   29256:	0ae33303          	ld	t1,174(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2925a:	9302                	c.jalr	t1
   2925c:	b245                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2925e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29262:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29264:	4681                	c.li	a3,0
   29266:	00007617          	auipc	a2,0x7
   2926a:	ab560613          	addi	a2,a2,-1355 # 2fd1b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x173b>
   2926e:	00007597          	auipc	a1,0x7
   29272:	aa258593          	addi	a1,a1,-1374 # 2fd10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1730>
   29276:	00010317          	auipc	t1,0x10
   2927a:	08a33303          	ld	t1,138(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2927e:	9302                	c.jalr	t1
   29280:	bab5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29282:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29286:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29288:	4681                	c.li	a3,0
   2928a:	00007617          	auipc	a2,0x7
   2928e:	aa260613          	addi	a2,a2,-1374 # 2fd2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x174c>
   29292:	00007597          	auipc	a1,0x7
   29296:	a8e58593          	addi	a1,a1,-1394 # 2fd20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1740>
   2929a:	00010317          	auipc	t1,0x10
   2929e:	06633303          	ld	t1,102(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   292a2:	9302                	c.jalr	t1
   292a4:	baa1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292a6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292aa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292ac:	4681                	c.li	a3,0
   292ae:	00007617          	auipc	a2,0x7
   292b2:	a8c60613          	addi	a2,a2,-1396 # 2fd3a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x175a>
   292b6:	00007597          	auipc	a1,0x7
   292ba:	a7a58593          	addi	a1,a1,-1414 # 2fd30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1750>
   292be:	00010317          	auipc	t1,0x10
   292c2:	04233303          	ld	t1,66(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   292c6:	9302                	c.jalr	t1
   292c8:	ba15                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292ca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292ce:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292d0:	4681                	c.li	a3,0
   292d2:	00007617          	auipc	a2,0x7
   292d6:	a7960613          	addi	a2,a2,-1415 # 2fd4b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x176b>
   292da:	00007597          	auipc	a1,0x7
   292de:	a6658593          	addi	a1,a1,-1434 # 2fd40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1760>
   292e2:	00010317          	auipc	t1,0x10
   292e6:	01e33303          	ld	t1,30(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   292ea:	9302                	c.jalr	t1
   292ec:	ba01                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292ee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292f2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292f4:	4681                	c.li	a3,0
   292f6:	00007617          	auipc	a2,0x7
   292fa:	a6560613          	addi	a2,a2,-1435 # 2fd5b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x177b>
   292fe:	00007597          	auipc	a1,0x7
   29302:	a5258593          	addi	a1,a1,-1454 # 2fd50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1770>
   29306:	00010317          	auipc	t1,0x10
   2930a:	ffa33303          	ld	t1,-6(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2930e:	9302                	c.jalr	t1
   29310:	b0f5                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29312:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29316:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29318:	4681                	c.li	a3,0
   2931a:	00007617          	auipc	a2,0x7
   2931e:	a5160613          	addi	a2,a2,-1455 # 2fd6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x178b>
   29322:	00007597          	auipc	a1,0x7
   29326:	a3e58593          	addi	a1,a1,-1474 # 2fd60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1780>
   2932a:	00010317          	auipc	t1,0x10
   2932e:	fd633303          	ld	t1,-42(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29332:	9302                	c.jalr	t1
   29334:	b0e1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29336:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2933a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2933c:	4681                	c.li	a3,0
   2933e:	00007617          	auipc	a2,0x7
   29342:	a4260613          	addi	a2,a2,-1470 # 2fd80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a0>
   29346:	00007597          	auipc	a1,0x7
   2934a:	a2a58593          	addi	a1,a1,-1494 # 2fd70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1790>
   2934e:	00010317          	auipc	t1,0x10
   29352:	fb233303          	ld	t1,-78(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29356:	9302                	c.jalr	t1
   29358:	b055                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2935a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2935e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29360:	4681                	c.li	a3,0
   29362:	00007617          	auipc	a2,0x7
   29366:	a3760613          	addi	a2,a2,-1481 # 2fd99 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17b9>
   2936a:	00007597          	auipc	a1,0x7
   2936e:	a1e58593          	addi	a1,a1,-1506 # 2fd88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a8>
   29372:	00010317          	auipc	t1,0x10
   29376:	f8e33303          	ld	t1,-114(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2937a:	9302                	c.jalr	t1
   2937c:	b041                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2937e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29382:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29384:	4681                	c.li	a3,0
   29386:	00007617          	auipc	a2,0x7
   2938a:	a2360613          	addi	a2,a2,-1501 # 2fda9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c9>
   2938e:	00007597          	auipc	a1,0x7
   29392:	a1258593          	addi	a1,a1,-1518 # 2fda0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c0>
   29396:	00010317          	auipc	t1,0x10
   2939a:	f6a33303          	ld	t1,-150(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2939e:	9302                	c.jalr	t1
   293a0:	b8b1                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293a8:	4681                	c.li	a3,0
   293aa:	00007617          	auipc	a2,0x7
   293ae:	a1f60613          	addi	a2,a2,-1505 # 2fdc9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17e9>
   293b2:	00007597          	auipc	a1,0x7
   293b6:	9fe58593          	addi	a1,a1,-1538 # 2fdb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17d0>
   293ba:	00010317          	auipc	t1,0x10
   293be:	f4633303          	ld	t1,-186(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   293c2:	9302                	c.jalr	t1
   293c4:	b825                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293cc:	4681                	c.li	a3,0
   293ce:	00007617          	auipc	a2,0x7
   293d2:	a0d60613          	addi	a2,a2,-1523 # 2fddb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17fb>
   293d6:	00007597          	auipc	a1,0x7
   293da:	9fa58593          	addi	a1,a1,-1542 # 2fdd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17f0>
   293de:	00010317          	auipc	t1,0x10
   293e2:	f2233303          	ld	t1,-222(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   293e6:	9302                	c.jalr	t1
   293e8:	b811                	c.j	28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293f0:	4681                	c.li	a3,0
   293f2:	00007617          	auipc	a2,0x7
   293f6:	9f960613          	addi	a2,a2,-1543 # 2fdeb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x180b>
   293fa:	00007597          	auipc	a1,0x7
   293fe:	9e658593          	addi	a1,a1,-1562 # 2fde0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1800>
   29402:	00010317          	auipc	t1,0x10
   29406:	efe33303          	ld	t1,-258(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2940a:	9302                	c.jalr	t1
   2940c:	ff0ff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29410:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29414:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29416:	4681                	c.li	a3,0
   29418:	00007617          	auipc	a2,0x7
   2941c:	9e660613          	addi	a2,a2,-1562 # 2fdfe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x181e>
   29420:	00007597          	auipc	a1,0x7
   29424:	9d058593          	addi	a1,a1,-1584 # 2fdf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1810>
   29428:	00010317          	auipc	t1,0x10
   2942c:	ed833303          	ld	t1,-296(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29430:	9302                	c.jalr	t1
   29432:	fcaff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29436:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2943a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2943c:	4681                	c.li	a3,0
   2943e:	00007617          	auipc	a2,0x7
   29442:	9d860613          	addi	a2,a2,-1576 # 2fe16 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1836>
   29446:	00007597          	auipc	a1,0x7
   2944a:	9ba58593          	addi	a1,a1,-1606 # 2fe00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1820>
   2944e:	00010317          	auipc	t1,0x10
   29452:	eb233303          	ld	t1,-334(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29456:	9302                	c.jalr	t1
   29458:	fa4ff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2945c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29460:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29462:	4681                	c.li	a3,0
   29464:	00007617          	auipc	a2,0x7
   29468:	9c860613          	addi	a2,a2,-1592 # 2fe2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x184c>
   2946c:	00007597          	auipc	a1,0x7
   29470:	9ac58593          	addi	a1,a1,-1620 # 2fe18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1838>
   29474:	00010317          	auipc	t1,0x10
   29478:	e8c33303          	ld	t1,-372(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2947c:	9302                	c.jalr	t1
   2947e:	f7eff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29482:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29486:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29488:	4681                	c.li	a3,0
   2948a:	00007617          	auipc	a2,0x7
   2948e:	9b560613          	addi	a2,a2,-1611 # 2fe3f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x185f>
   29492:	00007597          	auipc	a1,0x7
   29496:	99e58593          	addi	a1,a1,-1634 # 2fe30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1850>
   2949a:	00010317          	auipc	t1,0x10
   2949e:	e6633303          	ld	t1,-410(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   294a2:	9302                	c.jalr	t1
   294a4:	f58ff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   294a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   294ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   294ae:	4681                	c.li	a3,0
   294b0:	00007617          	auipc	a2,0x7
   294b4:	9a460613          	addi	a2,a2,-1628 # 2fe54 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1874>
   294b8:	00007597          	auipc	a1,0x7
   294bc:	98858593          	addi	a1,a1,-1656 # 2fe40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1860>
   294c0:	00010317          	auipc	t1,0x10
   294c4:	e4033303          	ld	t1,-448(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   294c8:	9302                	c.jalr	t1
   294ca:	f32ff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   294ce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   294d2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   294d4:	4681                	c.li	a3,0
   294d6:	00007617          	auipc	a2,0x7
   294da:	99360613          	addi	a2,a2,-1645 # 2fe69 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1889>
   294de:	00007597          	auipc	a1,0x7
   294e2:	97a58593          	addi	a1,a1,-1670 # 2fe58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1878>
   294e6:	00010317          	auipc	t1,0x10
   294ea:	e1a33303          	ld	t1,-486(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   294ee:	9302                	c.jalr	t1
   294f0:	f0cff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
        return "(DW_OP)0x" + to_hex((int)v);
   294f4:	848a                	c.mv	s1,sp
   294f6:	8526                	c.mv	a0,s1
   294f8:	00010317          	auipc	t1,0x10
   294fc:	f1833303          	ld	t1,-232(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   29500:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   29502:	4725                	c.li	a4,9
   29504:	00007697          	auipc	a3,0x7
   29508:	96c68693          	addi	a3,a3,-1684 # 2fe70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1890>
   2950c:	4601                	c.li	a2,0
   2950e:	4581                	c.li	a1,0
   29510:	8526                	c.mv	a0,s1
   29512:	8eeed0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   29516:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29518:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2951c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2951e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   29520:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   29524:	03278563          	beq	a5,s2,2954e <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x9a4>
      { _M_dataplus._M_p = __p; }
   29528:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2952a:	689c                	c.ld	a5,16(s1)
   2952c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2952e:	649c                	c.ld	a5,8(s1)
   29530:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   29532:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   29536:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2953a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2953e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29540:	081c                	c.addi4spn	a5,sp,16
   29542:	eaf50d63          	beq	a0,a5,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   29546:	f6bec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2954a:	eb2ff06f          	jal	zero,28bfc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2954e:	6490                	c.ld	a2,8(s1)
   29550:	0605                	c.addi	a2,1
	if (__n == 0)
   29552:	de71                	c.beqz	a2,2952e <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x984>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   29554:	85ca                	c.mv	a1,s2
   29556:	ffbec0ef          	jal	ra,16550 <memcpy@plt>
   2955a:	bfd1                	c.j	2952e <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x984>
      { return _M_dataplus._M_p; }
   2955c:	842a                	c.mv	s0,a0
   2955e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29560:	081c                	c.addi4spn	a5,sp,16
   29562:	00f50463          	beq	a0,a5,2956a <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x9c0>
   29566:	f4bec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2956a:	8522                	c.mv	a0,s0
   2956c:	924ed0ef          	jal	ra,16690 <_Unwind_Resume@plt>

0000000000029570 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>:
{
   29570:	7139                	c.addi16sp	sp,-64
   29572:	fc06                	c.sdsp	ra,56(sp)
   29574:	f822                	c.sdsp	s0,48(sp)
   29576:	f426                	c.sdsp	s1,40(sp)
   29578:	f04a                	c.sdsp	s2,32(sp)
   2957a:	842a                	c.mv	s0,a0
        switch (v) {
   2957c:	06e00793          	addi	a5,zero,110
   29580:	54b7ede3          	bltu	a5,a1,2a2da <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xd6a>
   29584:	00259793          	slli	a5,a1,0x2
   29588:	00007717          	auipc	a4,0x7
   2958c:	5f470713          	addi	a4,a4,1524 # 30b7c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x259c>
   29590:	97ba                	c.add	a5,a4
   29592:	439c                	c.lw	a5,0(a5)
   29594:	97ba                	c.add	a5,a4
   29596:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29598:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2959c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2959e:	4681                	c.li	a3,0
   295a0:	00007617          	auipc	a2,0x7
   295a4:	8ed60613          	addi	a2,a2,-1811 # 2fe8d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ad>
   295a8:	00007597          	auipc	a1,0x7
   295ac:	8d858593          	addi	a1,a1,-1832 # 2fe80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18a0>
   295b0:	00010317          	auipc	t1,0x10
   295b4:	d5033303          	ld	t1,-688(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   295b8:	9302                	c.jalr	t1
}
   295ba:	8522                	c.mv	a0,s0
   295bc:	70e2                	c.ldsp	ra,56(sp)
   295be:	7442                	c.ldsp	s0,48(sp)
   295c0:	74a2                	c.ldsp	s1,40(sp)
   295c2:	7902                	c.ldsp	s2,32(sp)
   295c4:	6121                	c.addi16sp	sp,64
   295c6:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   295c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   295cc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   295ce:	4681                	c.li	a3,0
   295d0:	00007617          	auipc	a2,0x7
   295d4:	8ce60613          	addi	a2,a2,-1842 # 2fe9e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18be>
   295d8:	00007597          	auipc	a1,0x7
   295dc:	8b858593          	addi	a1,a1,-1864 # 2fe90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18b0>
   295e0:	00010317          	auipc	t1,0x10
   295e4:	d2033303          	ld	t1,-736(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   295e8:	9302                	c.jalr	t1
   295ea:	bfc1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   295ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   295f0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   295f2:	4681                	c.li	a3,0
   295f4:	00007617          	auipc	a2,0x7
   295f8:	8b660613          	addi	a2,a2,-1866 # 2feaa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ca>
   295fc:	00007597          	auipc	a1,0x7
   29600:	8a458593          	addi	a1,a1,-1884 # 2fea0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18c0>
   29604:	00010317          	auipc	t1,0x10
   29608:	cfc33303          	ld	t1,-772(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2960c:	9302                	c.jalr	t1
   2960e:	b775                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29610:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29614:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29616:	4681                	c.li	a3,0
   29618:	00007617          	auipc	a2,0x7
   2961c:	8a660613          	addi	a2,a2,-1882 # 2febe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18de>
   29620:	00007597          	auipc	a1,0x7
   29624:	89058593          	addi	a1,a1,-1904 # 2feb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18d0>
   29628:	00010317          	auipc	t1,0x10
   2962c:	cd833303          	ld	t1,-808(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29630:	9302                	c.jalr	t1
   29632:	b761                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29634:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29638:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2963a:	4681                	c.li	a3,0
   2963c:	00007617          	auipc	a2,0x7
   29640:	89360613          	addi	a2,a2,-1901 # 2fecf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ef>
   29644:	00007597          	auipc	a1,0x7
   29648:	87c58593          	addi	a1,a1,-1924 # 2fec0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18e0>
   2964c:	00010317          	auipc	t1,0x10
   29650:	cb433303          	ld	t1,-844(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29654:	9302                	c.jalr	t1
   29656:	b795                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29658:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2965c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2965e:	4681                	c.li	a3,0
   29660:	00007617          	auipc	a2,0x7
   29664:	88060613          	addi	a2,a2,-1920 # 2fee0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1900>
   29668:	00007597          	auipc	a1,0x7
   2966c:	86858593          	addi	a1,a1,-1944 # 2fed0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18f0>
   29670:	00010317          	auipc	t1,0x10
   29674:	c9033303          	ld	t1,-880(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29678:	9302                	c.jalr	t1
   2967a:	b781                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2967c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29680:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29682:	4681                	c.li	a3,0
   29684:	00007617          	auipc	a2,0x7
   29688:	87260613          	addi	a2,a2,-1934 # 2fef6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1916>
   2968c:	00007597          	auipc	a1,0x7
   29690:	85c58593          	addi	a1,a1,-1956 # 2fee8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1908>
   29694:	00010317          	auipc	t1,0x10
   29698:	c6c33303          	ld	t1,-916(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2969c:	9302                	c.jalr	t1
   2969e:	bf31                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296a4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296a6:	4681                	c.li	a3,0
   296a8:	00007617          	auipc	a2,0x7
   296ac:	85f60613          	addi	a2,a2,-1953 # 2ff07 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1927>
   296b0:	00007597          	auipc	a1,0x7
   296b4:	84858593          	addi	a1,a1,-1976 # 2fef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1918>
   296b8:	00010317          	auipc	t1,0x10
   296bc:	c4833303          	ld	t1,-952(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   296c0:	9302                	c.jalr	t1
   296c2:	bde5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296c8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296ca:	4681                	c.li	a3,0
   296cc:	00007617          	auipc	a2,0x7
   296d0:	84860613          	addi	a2,a2,-1976 # 2ff14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1934>
   296d4:	00007597          	auipc	a1,0x7
   296d8:	83458593          	addi	a1,a1,-1996 # 2ff08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1928>
   296dc:	00010317          	auipc	t1,0x10
   296e0:	c2433303          	ld	t1,-988(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   296e4:	9302                	c.jalr	t1
   296e6:	bdd1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296ec:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296ee:	4681                	c.li	a3,0
   296f0:	00007617          	auipc	a2,0x7
   296f4:	83560613          	addi	a2,a2,-1995 # 2ff25 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1945>
   296f8:	00007597          	auipc	a1,0x7
   296fc:	82058593          	addi	a1,a1,-2016 # 2ff18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1938>
   29700:	00010317          	auipc	t1,0x10
   29704:	c0033303          	ld	t1,-1024(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29708:	9302                	c.jalr	t1
   2970a:	bd45                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2970c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29710:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29712:	4681                	c.li	a3,0
   29714:	00007617          	auipc	a2,0x7
   29718:	82260613          	addi	a2,a2,-2014 # 2ff36 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1956>
   2971c:	00007597          	auipc	a1,0x7
   29720:	80c58593          	addi	a1,a1,-2036 # 2ff28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1948>
   29724:	00010317          	auipc	t1,0x10
   29728:	bdc33303          	ld	t1,-1060(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2972c:	9302                	c.jalr	t1
   2972e:	b571                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29730:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29734:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29736:	4681                	c.li	a3,0
   29738:	00007617          	auipc	a2,0x7
   2973c:	80b60613          	addi	a2,a2,-2037 # 2ff43 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1963>
   29740:	00006597          	auipc	a1,0x6
   29744:	7f858593          	addi	a1,a1,2040 # 2ff38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1958>
   29748:	00010317          	auipc	t1,0x10
   2974c:	bb833303          	ld	t1,-1096(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29750:	9302                	c.jalr	t1
   29752:	b5a5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29754:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29758:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2975a:	4681                	c.li	a3,0
   2975c:	00006617          	auipc	a2,0x6
   29760:	7fd60613          	addi	a2,a2,2045 # 2ff59 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1979>
   29764:	00006597          	auipc	a1,0x6
   29768:	7e458593          	addi	a1,a1,2020 # 2ff48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1968>
   2976c:	00010317          	auipc	t1,0x10
   29770:	b9433303          	ld	t1,-1132(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29774:	9302                	c.jalr	t1
   29776:	b591                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29778:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2977c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2977e:	4681                	c.li	a3,0
   29780:	00006617          	auipc	a2,0x6
   29784:	7f060613          	addi	a2,a2,2032 # 2ff70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1990>
   29788:	00006597          	auipc	a1,0x6
   2978c:	7d858593          	addi	a1,a1,2008 # 2ff60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1980>
   29790:	00010317          	auipc	t1,0x10
   29794:	b7033303          	ld	t1,-1168(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29798:	9302                	c.jalr	t1
   2979a:	b505                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2979c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297a0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297a2:	4681                	c.li	a3,0
   297a4:	00006617          	auipc	a2,0x6
   297a8:	7e060613          	addi	a2,a2,2016 # 2ff84 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a4>
   297ac:	00006597          	auipc	a1,0x6
   297b0:	7cc58593          	addi	a1,a1,1996 # 2ff78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1998>
   297b4:	00010317          	auipc	t1,0x10
   297b8:	b4c33303          	ld	t1,-1204(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   297bc:	9302                	c.jalr	t1
   297be:	bbf5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   297c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297c4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297c6:	4681                	c.li	a3,0
   297c8:	00006617          	auipc	a2,0x6
   297cc:	7d360613          	addi	a2,a2,2003 # 2ff9b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19bb>
   297d0:	00006597          	auipc	a1,0x6
   297d4:	7b858593          	addi	a1,a1,1976 # 2ff88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a8>
   297d8:	00010317          	auipc	t1,0x10
   297dc:	b2833303          	ld	t1,-1240(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   297e0:	9302                	c.jalr	t1
   297e2:	bbe1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   297e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297e8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297ea:	4681                	c.li	a3,0
   297ec:	00006617          	auipc	a2,0x6
   297f0:	7ca60613          	addi	a2,a2,1994 # 2ffb6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d6>
   297f4:	00006597          	auipc	a1,0x6
   297f8:	7ac58593          	addi	a1,a1,1964 # 2ffa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19c0>
   297fc:	00010317          	auipc	t1,0x10
   29800:	b0433303          	ld	t1,-1276(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29804:	9302                	c.jalr	t1
   29806:	bb55                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29808:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2980c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2980e:	4681                	c.li	a3,0
   29810:	00006617          	auipc	a2,0x6
   29814:	7b660613          	addi	a2,a2,1974 # 2ffc6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e6>
   29818:	00006597          	auipc	a1,0x6
   2981c:	7a058593          	addi	a1,a1,1952 # 2ffb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d8>
   29820:	00010317          	auipc	t1,0x10
   29824:	ae033303          	ld	t1,-1312(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29828:	9302                	c.jalr	t1
   2982a:	bb41                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2982c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29830:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29832:	4681                	c.li	a3,0
   29834:	00006617          	auipc	a2,0x6
   29838:	7a560613          	addi	a2,a2,1957 # 2ffd9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19f9>
   2983c:	00006597          	auipc	a1,0x6
   29840:	78c58593          	addi	a1,a1,1932 # 2ffc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e8>
   29844:	00010317          	auipc	t1,0x10
   29848:	abc33303          	ld	t1,-1348(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2984c:	9302                	c.jalr	t1
   2984e:	b3b5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29850:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29854:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29856:	4681                	c.li	a3,0
   29858:	00006617          	auipc	a2,0x6
   2985c:	79d60613          	addi	a2,a2,1949 # 2fff5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a15>
   29860:	00006597          	auipc	a1,0x6
   29864:	78058593          	addi	a1,a1,1920 # 2ffe0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a00>
   29868:	00010317          	auipc	t1,0x10
   2986c:	a9833303          	ld	t1,-1384(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29870:	9302                	c.jalr	t1
   29872:	b3a1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29874:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29878:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2987a:	4681                	c.li	a3,0
   2987c:	00006617          	auipc	a2,0x6
   29880:	78f60613          	addi	a2,a2,1935 # 3000b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a2b>
   29884:	00006597          	auipc	a1,0x6
   29888:	77458593          	addi	a1,a1,1908 # 2fff8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a18>
   2988c:	00010317          	auipc	t1,0x10
   29890:	a7433303          	ld	t1,-1420(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29894:	9302                	c.jalr	t1
   29896:	b315                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29898:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2989c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2989e:	4681                	c.li	a3,0
   298a0:	00006617          	auipc	a2,0x6
   298a4:	77c60613          	addi	a2,a2,1916 # 3001c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a3c>
   298a8:	00006597          	auipc	a1,0x6
   298ac:	76858593          	addi	a1,a1,1896 # 30010 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a30>
   298b0:	00010317          	auipc	t1,0x10
   298b4:	a5033303          	ld	t1,-1456(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   298b8:	9302                	c.jalr	t1
   298ba:	b301                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   298bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   298c0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   298c2:	4681                	c.li	a3,0
   298c4:	00006617          	auipc	a2,0x6
   298c8:	76d60613          	addi	a2,a2,1901 # 30031 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a51>
   298cc:	00006597          	auipc	a1,0x6
   298d0:	75458593          	addi	a1,a1,1876 # 30020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a40>
   298d4:	00010317          	auipc	t1,0x10
   298d8:	a2c33303          	ld	t1,-1492(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   298dc:	9302                	c.jalr	t1
   298de:	b9f1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   298e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   298e4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   298e6:	4681                	c.li	a3,0
   298e8:	00006617          	auipc	a2,0x6
   298ec:	76160613          	addi	a2,a2,1889 # 30049 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a69>
   298f0:	00006597          	auipc	a1,0x6
   298f4:	74858593          	addi	a1,a1,1864 # 30038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a58>
   298f8:	00010317          	auipc	t1,0x10
   298fc:	a0833303          	ld	t1,-1528(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29900:	9302                	c.jalr	t1
   29902:	b965                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29904:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29908:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2990a:	4681                	c.li	a3,0
   2990c:	00006617          	auipc	a2,0x6
   29910:	75260613          	addi	a2,a2,1874 # 3005e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a7e>
   29914:	00006597          	auipc	a1,0x6
   29918:	73c58593          	addi	a1,a1,1852 # 30050 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a70>
   2991c:	00010317          	auipc	t1,0x10
   29920:	9e433303          	ld	t1,-1564(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29924:	9302                	c.jalr	t1
   29926:	b951                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29928:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2992c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2992e:	4681                	c.li	a3,0
   29930:	00006617          	auipc	a2,0x6
   29934:	74060613          	addi	a2,a2,1856 # 30070 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a90>
   29938:	00006597          	auipc	a1,0x6
   2993c:	72858593          	addi	a1,a1,1832 # 30060 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a80>
   29940:	00010317          	auipc	t1,0x10
   29944:	9c033303          	ld	t1,-1600(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29948:	9302                	c.jalr	t1
   2994a:	b985                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2994c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29950:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29952:	4681                	c.li	a3,0
   29954:	00006617          	auipc	a2,0x6
   29958:	73560613          	addi	a2,a2,1845 # 30089 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1aa9>
   2995c:	00006597          	auipc	a1,0x6
   29960:	71c58593          	addi	a1,a1,1820 # 30078 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a98>
   29964:	00010317          	auipc	t1,0x10
   29968:	99c33303          	ld	t1,-1636(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2996c:	9302                	c.jalr	t1
   2996e:	b1b1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29970:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29974:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29976:	4681                	c.li	a3,0
   29978:	00006617          	auipc	a2,0x6
   2997c:	72960613          	addi	a2,a2,1833 # 300a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac1>
   29980:	00006597          	auipc	a1,0x6
   29984:	71058593          	addi	a1,a1,1808 # 30090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ab0>
   29988:	00010317          	auipc	t1,0x10
   2998c:	97833303          	ld	t1,-1672(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29990:	9302                	c.jalr	t1
   29992:	b125                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29994:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29998:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2999a:	4681                	c.li	a3,0
   2999c:	00006617          	auipc	a2,0x6
   299a0:	71c60613          	addi	a2,a2,1820 # 300b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ad8>
   299a4:	00006597          	auipc	a1,0x6
   299a8:	70458593          	addi	a1,a1,1796 # 300a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac8>
   299ac:	00010317          	auipc	t1,0x10
   299b0:	95433303          	ld	t1,-1708(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   299b4:	9302                	c.jalr	t1
   299b6:	b111                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   299b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   299bc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   299be:	4681                	c.li	a3,0
   299c0:	00006617          	auipc	a2,0x6
   299c4:	71160613          	addi	a2,a2,1809 # 300d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af1>
   299c8:	00006597          	auipc	a1,0x6
   299cc:	6f858593          	addi	a1,a1,1784 # 300c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ae0>
   299d0:	00010317          	auipc	t1,0x10
   299d4:	93033303          	ld	t1,-1744(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   299d8:	9302                	c.jalr	t1
   299da:	b6c5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   299dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   299e0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   299e2:	4681                	c.li	a3,0
   299e4:	00006617          	auipc	a2,0x6
   299e8:	70960613          	addi	a2,a2,1801 # 300ed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b0d>
   299ec:	00006597          	auipc	a1,0x6
   299f0:	6ec58593          	addi	a1,a1,1772 # 300d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af8>
   299f4:	00010317          	auipc	t1,0x10
   299f8:	90c33303          	ld	t1,-1780(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   299fc:	9302                	c.jalr	t1
   299fe:	be75                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a04:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a06:	4681                	c.li	a3,0
   29a08:	00006617          	auipc	a2,0x6
   29a0c:	6fb60613          	addi	a2,a2,1787 # 30103 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b23>
   29a10:	00006597          	auipc	a1,0x6
   29a14:	6e058593          	addi	a1,a1,1760 # 300f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b10>
   29a18:	00010317          	auipc	t1,0x10
   29a1c:	8e833303          	ld	t1,-1816(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29a20:	9302                	c.jalr	t1
   29a22:	be61                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a28:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a2a:	4681                	c.li	a3,0
   29a2c:	00006617          	auipc	a2,0x6
   29a30:	6ef60613          	addi	a2,a2,1775 # 3011b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b3b>
   29a34:	00006597          	auipc	a1,0x6
   29a38:	6d458593          	addi	a1,a1,1748 # 30108 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b28>
   29a3c:	00010317          	auipc	t1,0x10
   29a40:	8c433303          	ld	t1,-1852(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29a44:	9302                	c.jalr	t1
   29a46:	be95                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a4c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a4e:	4681                	c.li	a3,0
   29a50:	00006617          	auipc	a2,0x6
   29a54:	6e060613          	addi	a2,a2,1760 # 30130 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b50>
   29a58:	00006597          	auipc	a1,0x6
   29a5c:	6c858593          	addi	a1,a1,1736 # 30120 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b40>
   29a60:	00010317          	auipc	t1,0x10
   29a64:	8a033303          	ld	t1,-1888(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29a68:	9302                	c.jalr	t1
   29a6a:	be81                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a70:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a72:	4681                	c.li	a3,0
   29a74:	00006617          	auipc	a2,0x6
   29a78:	6d460613          	addi	a2,a2,1748 # 30148 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b68>
   29a7c:	00006597          	auipc	a1,0x6
   29a80:	6bc58593          	addi	a1,a1,1724 # 30138 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b58>
   29a84:	00010317          	auipc	t1,0x10
   29a88:	87c33303          	ld	t1,-1924(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29a8c:	9302                	c.jalr	t1
   29a8e:	b635                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a94:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a96:	4681                	c.li	a3,0
   29a98:	00006617          	auipc	a2,0x6
   29a9c:	6d060613          	addi	a2,a2,1744 # 30168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b88>
   29aa0:	00006597          	auipc	a1,0x6
   29aa4:	6b058593          	addi	a1,a1,1712 # 30150 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b70>
   29aa8:	00010317          	auipc	t1,0x10
   29aac:	85833303          	ld	t1,-1960(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29ab0:	9302                	c.jalr	t1
   29ab2:	b621                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ab4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ab8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29aba:	4681                	c.li	a3,0
   29abc:	00006617          	auipc	a2,0x6
   29ac0:	6bf60613          	addi	a2,a2,1727 # 3017b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b9b>
   29ac4:	00006597          	auipc	a1,0x6
   29ac8:	6ac58593          	addi	a1,a1,1708 # 30170 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b90>
   29acc:	00010317          	auipc	t1,0x10
   29ad0:	83433303          	ld	t1,-1996(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29ad4:	9302                	c.jalr	t1
   29ad6:	b4d5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ad8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29adc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ade:	4681                	c.li	a3,0
   29ae0:	00006617          	auipc	a2,0x6
   29ae4:	6ba60613          	addi	a2,a2,1722 # 3019a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bba>
   29ae8:	00006597          	auipc	a1,0x6
   29aec:	69858593          	addi	a1,a1,1688 # 30180 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ba0>
   29af0:	00010317          	auipc	t1,0x10
   29af4:	81033303          	ld	t1,-2032(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29af8:	9302                	c.jalr	t1
   29afa:	b4c1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29afc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b00:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b02:	4681                	c.li	a3,0
   29b04:	00006617          	auipc	a2,0x6
   29b08:	6ad60613          	addi	a2,a2,1709 # 301b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd1>
   29b0c:	00006597          	auipc	a1,0x6
   29b10:	69458593          	addi	a1,a1,1684 # 301a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bc0>
   29b14:	0000f317          	auipc	t1,0xf
   29b18:	7ec33303          	ld	t1,2028(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29b1c:	9302                	c.jalr	t1
   29b1e:	bc71                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b24:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b26:	4681                	c.li	a3,0
   29b28:	00006617          	auipc	a2,0x6
   29b2c:	69f60613          	addi	a2,a2,1695 # 301c7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be7>
   29b30:	00006597          	auipc	a1,0x6
   29b34:	68858593          	addi	a1,a1,1672 # 301b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd8>
   29b38:	0000f317          	auipc	t1,0xf
   29b3c:	7c833303          	ld	t1,1992(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29b40:	9302                	c.jalr	t1
   29b42:	bca5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b48:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b4a:	4681                	c.li	a3,0
   29b4c:	00006617          	auipc	a2,0x6
   29b50:	68b60613          	addi	a2,a2,1675 # 301d7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf7>
   29b54:	00006597          	auipc	a1,0x6
   29b58:	67458593          	addi	a1,a1,1652 # 301c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be8>
   29b5c:	0000f317          	auipc	t1,0xf
   29b60:	7a433303          	ld	t1,1956(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29b64:	9302                	c.jalr	t1
   29b66:	bc91                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b6c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b6e:	4681                	c.li	a3,0
   29b70:	00006617          	auipc	a2,0x6
   29b74:	67960613          	addi	a2,a2,1657 # 301e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c09>
   29b78:	00006597          	auipc	a1,0x6
   29b7c:	66058593          	addi	a1,a1,1632 # 301d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf8>
   29b80:	0000f317          	auipc	t1,0xf
   29b84:	78033303          	ld	t1,1920(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29b88:	9302                	c.jalr	t1
   29b8a:	bc05                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b90:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b92:	4681                	c.li	a3,0
   29b94:	00006617          	auipc	a2,0x6
   29b98:	66c60613          	addi	a2,a2,1644 # 30200 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c20>
   29b9c:	00006597          	auipc	a1,0x6
   29ba0:	65458593          	addi	a1,a1,1620 # 301f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c10>
   29ba4:	0000f317          	auipc	t1,0xf
   29ba8:	75c33303          	ld	t1,1884(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29bac:	9302                	c.jalr	t1
   29bae:	b431                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bb4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bb6:	4681                	c.li	a3,0
   29bb8:	00006617          	auipc	a2,0x6
   29bbc:	65e60613          	addi	a2,a2,1630 # 30216 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c36>
   29bc0:	00006597          	auipc	a1,0x6
   29bc4:	64858593          	addi	a1,a1,1608 # 30208 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c28>
   29bc8:	0000f317          	auipc	t1,0xf
   29bcc:	73833303          	ld	t1,1848(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29bd0:	9302                	c.jalr	t1
   29bd2:	b2e5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bd4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bd8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bda:	4681                	c.li	a3,0
   29bdc:	00006617          	auipc	a2,0x6
   29be0:	64a60613          	addi	a2,a2,1610 # 30226 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c46>
   29be4:	00006597          	auipc	a1,0x6
   29be8:	63458593          	addi	a1,a1,1588 # 30218 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c38>
   29bec:	0000f317          	auipc	t1,0xf
   29bf0:	71433303          	ld	t1,1812(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29bf4:	9302                	c.jalr	t1
   29bf6:	b2d1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bf8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bfc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bfe:	4681                	c.li	a3,0
   29c00:	00006617          	auipc	a2,0x6
   29c04:	63860613          	addi	a2,a2,1592 # 30238 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c58>
   29c08:	00006597          	auipc	a1,0x6
   29c0c:	62058593          	addi	a1,a1,1568 # 30228 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c48>
   29c10:	0000f317          	auipc	t1,0xf
   29c14:	6f033303          	ld	t1,1776(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29c18:	9302                	c.jalr	t1
   29c1a:	b245                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c22:	4681                	c.li	a3,0
   29c24:	00006617          	auipc	a2,0x6
   29c28:	62860613          	addi	a2,a2,1576 # 3024c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c6c>
   29c2c:	00006597          	auipc	a1,0x6
   29c30:	61458593          	addi	a1,a1,1556 # 30240 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c60>
   29c34:	0000f317          	auipc	t1,0xf
   29c38:	6cc33303          	ld	t1,1740(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29c3c:	9302                	c.jalr	t1
   29c3e:	bab5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c44:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c46:	4681                	c.li	a3,0
   29c48:	00006617          	auipc	a2,0x6
   29c4c:	61d60613          	addi	a2,a2,1565 # 30265 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c85>
   29c50:	00006597          	auipc	a1,0x6
   29c54:	60058593          	addi	a1,a1,1536 # 30250 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c70>
   29c58:	0000f317          	auipc	t1,0xf
   29c5c:	6a833303          	ld	t1,1704(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29c60:	9302                	c.jalr	t1
   29c62:	baa1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c68:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c6a:	4681                	c.li	a3,0
   29c6c:	00006617          	auipc	a2,0x6
   29c70:	60c60613          	addi	a2,a2,1548 # 30278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c98>
   29c74:	00006597          	auipc	a1,0x6
   29c78:	5f458593          	addi	a1,a1,1524 # 30268 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c88>
   29c7c:	0000f317          	auipc	t1,0xf
   29c80:	68433303          	ld	t1,1668(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29c84:	9302                	c.jalr	t1
   29c86:	ba15                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c8c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c8e:	4681                	c.li	a3,0
   29c90:	00006617          	auipc	a2,0x6
   29c94:	60360613          	addi	a2,a2,1539 # 30293 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb3>
   29c98:	00006597          	auipc	a1,0x6
   29c9c:	5e858593          	addi	a1,a1,1512 # 30280 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ca0>
   29ca0:	0000f317          	auipc	t1,0xf
   29ca4:	66033303          	ld	t1,1632(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29ca8:	9302                	c.jalr	t1
   29caa:	ba01                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cb0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cb2:	4681                	c.li	a3,0
   29cb4:	00006617          	auipc	a2,0x6
   29cb8:	5f260613          	addi	a2,a2,1522 # 302a6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc6>
   29cbc:	00006597          	auipc	a1,0x6
   29cc0:	5dc58593          	addi	a1,a1,1500 # 30298 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb8>
   29cc4:	0000f317          	auipc	t1,0xf
   29cc8:	63c33303          	ld	t1,1596(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29ccc:	9302                	c.jalr	t1
   29cce:	b0f5                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cd0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cd4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cd6:	4681                	c.li	a3,0
   29cd8:	00006617          	auipc	a2,0x6
   29cdc:	5dd60613          	addi	a2,a2,1501 # 302b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd5>
   29ce0:	00006597          	auipc	a1,0x6
   29ce4:	5c858593          	addi	a1,a1,1480 # 302a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc8>
   29ce8:	0000f317          	auipc	t1,0xf
   29cec:	61833303          	ld	t1,1560(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29cf0:	9302                	c.jalr	t1
   29cf2:	b0e1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cf4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cf8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cfa:	4681                	c.li	a3,0
   29cfc:	00006617          	auipc	a2,0x6
   29d00:	5cf60613          	addi	a2,a2,1487 # 302cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ceb>
   29d04:	00006597          	auipc	a1,0x6
   29d08:	5b458593          	addi	a1,a1,1460 # 302b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd8>
   29d0c:	0000f317          	auipc	t1,0xf
   29d10:	5f433303          	ld	t1,1524(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29d14:	9302                	c.jalr	t1
   29d16:	b055                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d1c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d1e:	4681                	c.li	a3,0
   29d20:	00006617          	auipc	a2,0x6
   29d24:	5c160613          	addi	a2,a2,1473 # 302e1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d01>
   29d28:	00006597          	auipc	a1,0x6
   29d2c:	5a858593          	addi	a1,a1,1448 # 302d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cf0>
   29d30:	0000f317          	auipc	t1,0xf
   29d34:	5d033303          	ld	t1,1488(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29d38:	9302                	c.jalr	t1
   29d3a:	b041                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d40:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d42:	4681                	c.li	a3,0
   29d44:	00006617          	auipc	a2,0x6
   29d48:	5ae60613          	addi	a2,a2,1454 # 302f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d12>
   29d4c:	00006597          	auipc	a1,0x6
   29d50:	59c58593          	addi	a1,a1,1436 # 302e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d08>
   29d54:	0000f317          	auipc	t1,0xf
   29d58:	5ac33303          	ld	t1,1452(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29d5c:	9302                	c.jalr	t1
   29d5e:	b8b1                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d64:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d66:	4681                	c.li	a3,0
   29d68:	00006617          	auipc	a2,0x6
   29d6c:	5a260613          	addi	a2,a2,1442 # 3030a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d2a>
   29d70:	00006597          	auipc	a1,0x6
   29d74:	58858593          	addi	a1,a1,1416 # 302f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d18>
   29d78:	0000f317          	auipc	t1,0xf
   29d7c:	58833303          	ld	t1,1416(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29d80:	9302                	c.jalr	t1
   29d82:	b825                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d88:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d8a:	4681                	c.li	a3,0
   29d8c:	00006617          	auipc	a2,0x6
   29d90:	59c60613          	addi	a2,a2,1436 # 30328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d48>
   29d94:	00006597          	auipc	a1,0x6
   29d98:	57c58593          	addi	a1,a1,1404 # 30310 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d30>
   29d9c:	0000f317          	auipc	t1,0xf
   29da0:	56433303          	ld	t1,1380(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29da4:	9302                	c.jalr	t1
   29da6:	b811                	c.j	295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29da8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29dac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29dae:	4681                	c.li	a3,0
   29db0:	00006617          	auipc	a2,0x6
   29db4:	59060613          	addi	a2,a2,1424 # 30340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d60>
   29db8:	00006597          	auipc	a1,0x6
   29dbc:	57858593          	addi	a1,a1,1400 # 30330 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d50>
   29dc0:	0000f317          	auipc	t1,0xf
   29dc4:	54033303          	ld	t1,1344(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29dc8:	9302                	c.jalr	t1
   29dca:	ff0ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29dce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29dd2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29dd4:	4681                	c.li	a3,0
   29dd6:	00006617          	auipc	a2,0x6
   29dda:	58c60613          	addi	a2,a2,1420 # 30362 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d82>
   29dde:	00006597          	auipc	a1,0x6
   29de2:	56a58593          	addi	a1,a1,1386 # 30348 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d68>
   29de6:	0000f317          	auipc	t1,0xf
   29dea:	51a33303          	ld	t1,1306(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29dee:	9302                	c.jalr	t1
   29df0:	fcaff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29df4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29df8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29dfa:	4681                	c.li	a3,0
   29dfc:	00006617          	auipc	a2,0x6
   29e00:	57b60613          	addi	a2,a2,1403 # 30377 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d97>
   29e04:	00006597          	auipc	a1,0x6
   29e08:	56458593          	addi	a1,a1,1380 # 30368 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d88>
   29e0c:	0000f317          	auipc	t1,0xf
   29e10:	4f433303          	ld	t1,1268(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29e14:	9302                	c.jalr	t1
   29e16:	fa4ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e1a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e1e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e20:	4681                	c.li	a3,0
   29e22:	00006617          	auipc	a2,0x6
   29e26:	56660613          	addi	a2,a2,1382 # 30388 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1da8>
   29e2a:	00006597          	auipc	a1,0x6
   29e2e:	54e58593          	addi	a1,a1,1358 # 30378 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d98>
   29e32:	0000f317          	auipc	t1,0xf
   29e36:	4ce33303          	ld	t1,1230(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29e3a:	9302                	c.jalr	t1
   29e3c:	f7eff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e44:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e46:	4681                	c.li	a3,0
   29e48:	00006617          	auipc	a2,0x6
   29e4c:	55b60613          	addi	a2,a2,1371 # 303a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc3>
   29e50:	00006597          	auipc	a1,0x6
   29e54:	54058593          	addi	a1,a1,1344 # 30390 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1db0>
   29e58:	0000f317          	auipc	t1,0xf
   29e5c:	4a833303          	ld	t1,1192(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29e60:	9302                	c.jalr	t1
   29e62:	f58ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e66:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e6a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e6c:	4681                	c.li	a3,0
   29e6e:	00006617          	auipc	a2,0x6
   29e72:	54b60613          	addi	a2,a2,1355 # 303b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dd9>
   29e76:	00006597          	auipc	a1,0x6
   29e7a:	53258593          	addi	a1,a1,1330 # 303a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc8>
   29e7e:	0000f317          	auipc	t1,0xf
   29e82:	48233303          	ld	t1,1154(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29e86:	9302                	c.jalr	t1
   29e88:	f32ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e90:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e92:	4681                	c.li	a3,0
   29e94:	00006617          	auipc	a2,0x6
   29e98:	53a60613          	addi	a2,a2,1338 # 303ce <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dee>
   29e9c:	00006597          	auipc	a1,0x6
   29ea0:	52458593          	addi	a1,a1,1316 # 303c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1de0>
   29ea4:	0000f317          	auipc	t1,0xf
   29ea8:	45c33303          	ld	t1,1116(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29eac:	9302                	c.jalr	t1
   29eae:	f0cff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29eb2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29eb6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29eb8:	4681                	c.li	a3,0
   29eba:	00006617          	auipc	a2,0x6
   29ebe:	52460613          	addi	a2,a2,1316 # 303de <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dfe>
   29ec2:	00006597          	auipc	a1,0x6
   29ec6:	50e58593          	addi	a1,a1,1294 # 303d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1df0>
   29eca:	0000f317          	auipc	t1,0xf
   29ece:	43633303          	ld	t1,1078(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29ed2:	9302                	c.jalr	t1
   29ed4:	ee6ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ed8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29edc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ede:	4681                	c.li	a3,0
   29ee0:	00006617          	auipc	a2,0x6
   29ee4:	50f60613          	addi	a2,a2,1295 # 303ef <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e0f>
   29ee8:	00006597          	auipc	a1,0x6
   29eec:	4f858593          	addi	a1,a1,1272 # 303e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e00>
   29ef0:	0000f317          	auipc	t1,0xf
   29ef4:	41033303          	ld	t1,1040(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29ef8:	9302                	c.jalr	t1
   29efa:	ec0ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29efe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f02:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f04:	4681                	c.li	a3,0
   29f06:	00006617          	auipc	a2,0x6
   29f0a:	4f660613          	addi	a2,a2,1270 # 303fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e1c>
   29f0e:	00006597          	auipc	a1,0x6
   29f12:	4e258593          	addi	a1,a1,1250 # 303f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e10>
   29f16:	0000f317          	auipc	t1,0xf
   29f1a:	3ea33303          	ld	t1,1002(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29f1e:	9302                	c.jalr	t1
   29f20:	e9aff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f28:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f2a:	4681                	c.li	a3,0
   29f2c:	00006617          	auipc	a2,0x6
   29f30:	4e460613          	addi	a2,a2,1252 # 30410 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e30>
   29f34:	00006597          	auipc	a1,0x6
   29f38:	4cc58593          	addi	a1,a1,1228 # 30400 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e20>
   29f3c:	0000f317          	auipc	t1,0xf
   29f40:	3c433303          	ld	t1,964(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29f44:	9302                	c.jalr	t1
   29f46:	e74ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f4a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f4e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f50:	4681                	c.li	a3,0
   29f52:	00006617          	auipc	a2,0x6
   29f56:	4d760613          	addi	a2,a2,1239 # 30429 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e49>
   29f5a:	00006597          	auipc	a1,0x6
   29f5e:	4be58593          	addi	a1,a1,1214 # 30418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e38>
   29f62:	0000f317          	auipc	t1,0xf
   29f66:	39e33303          	ld	t1,926(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29f6a:	9302                	c.jalr	t1
   29f6c:	e4eff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f76:	4681                	c.li	a3,0
   29f78:	00006617          	auipc	a2,0x6
   29f7c:	4c760613          	addi	a2,a2,1223 # 3043f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e5f>
   29f80:	00006597          	auipc	a1,0x6
   29f84:	4b058593          	addi	a1,a1,1200 # 30430 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e50>
   29f88:	0000f317          	auipc	t1,0xf
   29f8c:	37833303          	ld	t1,888(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29f90:	9302                	c.jalr	t1
   29f92:	e28ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f96:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f9a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f9c:	4681                	c.li	a3,0
   29f9e:	00006617          	auipc	a2,0x6
   29fa2:	4b160613          	addi	a2,a2,1201 # 3044f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e6f>
   29fa6:	00006597          	auipc	a1,0x6
   29faa:	49a58593          	addi	a1,a1,1178 # 30440 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e60>
   29fae:	0000f317          	auipc	t1,0xf
   29fb2:	35233303          	ld	t1,850(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29fb6:	9302                	c.jalr	t1
   29fb8:	e02ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29fbc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29fc0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29fc2:	4681                	c.li	a3,0
   29fc4:	00006617          	auipc	a2,0x6
   29fc8:	49d60613          	addi	a2,a2,1181 # 30461 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e81>
   29fcc:	00006597          	auipc	a1,0x6
   29fd0:	48458593          	addi	a1,a1,1156 # 30450 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e70>
   29fd4:	0000f317          	auipc	t1,0xf
   29fd8:	32c33303          	ld	t1,812(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   29fdc:	9302                	c.jalr	t1
   29fde:	ddcff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29fe2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29fe6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29fe8:	4681                	c.li	a3,0
   29fea:	00006617          	auipc	a2,0x6
   29fee:	49060613          	addi	a2,a2,1168 # 3047a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e9a>
   29ff2:	00006597          	auipc	a1,0x6
   29ff6:	47658593          	addi	a1,a1,1142 # 30468 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e88>
   29ffa:	0000f317          	auipc	t1,0xf
   29ffe:	30633303          	ld	t1,774(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a002:	9302                	c.jalr	t1
   2a004:	db6ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a008:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a00c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a00e:	4681                	c.li	a3,0
   2a010:	00006617          	auipc	a2,0x6
   2a014:	48360613          	addi	a2,a2,1155 # 30493 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb3>
   2a018:	00006597          	auipc	a1,0x6
   2a01c:	46858593          	addi	a1,a1,1128 # 30480 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ea0>
   2a020:	0000f317          	auipc	t1,0xf
   2a024:	2e033303          	ld	t1,736(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a028:	9302                	c.jalr	t1
   2a02a:	d90ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a02e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a032:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a034:	4681                	c.li	a3,0
   2a036:	00006617          	auipc	a2,0x6
   2a03a:	46d60613          	addi	a2,a2,1133 # 304a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec3>
   2a03e:	00006597          	auipc	a1,0x6
   2a042:	45a58593          	addi	a1,a1,1114 # 30498 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb8>
   2a046:	0000f317          	auipc	t1,0xf
   2a04a:	2ba33303          	ld	t1,698(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a04e:	9302                	c.jalr	t1
   2a050:	d6aff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a054:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a058:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a05a:	4681                	c.li	a3,0
   2a05c:	00006617          	auipc	a2,0x6
   2a060:	45e60613          	addi	a2,a2,1118 # 304ba <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eda>
   2a064:	00006597          	auipc	a1,0x6
   2a068:	44458593          	addi	a1,a1,1092 # 304a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec8>
   2a06c:	0000f317          	auipc	t1,0xf
   2a070:	29433303          	ld	t1,660(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a074:	9302                	c.jalr	t1
   2a076:	d44ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a07a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a07e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a080:	4681                	c.li	a3,0
   2a082:	00006617          	auipc	a2,0x6
   2a086:	44f60613          	addi	a2,a2,1103 # 304d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef1>
   2a08a:	00006597          	auipc	a1,0x6
   2a08e:	43658593          	addi	a1,a1,1078 # 304c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ee0>
   2a092:	0000f317          	auipc	t1,0xf
   2a096:	26e33303          	ld	t1,622(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a09a:	9302                	c.jalr	t1
   2a09c:	d1eff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0a4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0a6:	4681                	c.li	a3,0
   2a0a8:	00006617          	auipc	a2,0x6
   2a0ac:	44460613          	addi	a2,a2,1092 # 304ec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0c>
   2a0b0:	00006597          	auipc	a1,0x6
   2a0b4:	42858593          	addi	a1,a1,1064 # 304d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef8>
   2a0b8:	0000f317          	auipc	t1,0xf
   2a0bc:	24833303          	ld	t1,584(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a0c0:	9302                	c.jalr	t1
   2a0c2:	cf8ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0cc:	4681                	c.li	a3,0
   2a0ce:	00006617          	auipc	a2,0x6
   2a0d2:	42f60613          	addi	a2,a2,1071 # 304fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f1d>
   2a0d6:	00006597          	auipc	a1,0x6
   2a0da:	41a58593          	addi	a1,a1,1050 # 304f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f10>
   2a0de:	0000f317          	auipc	t1,0xf
   2a0e2:	22233303          	ld	t1,546(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a0e6:	9302                	c.jalr	t1
   2a0e8:	cd2ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0f0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0f2:	4681                	c.li	a3,0
   2a0f4:	00006617          	auipc	a2,0x6
   2a0f8:	42060613          	addi	a2,a2,1056 # 30514 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f34>
   2a0fc:	00006597          	auipc	a1,0x6
   2a100:	40458593          	addi	a1,a1,1028 # 30500 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f20>
   2a104:	0000f317          	auipc	t1,0xf
   2a108:	1fc33303          	ld	t1,508(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a10c:	9302                	c.jalr	t1
   2a10e:	cacff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a112:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a116:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a118:	4681                	c.li	a3,0
   2a11a:	00006617          	auipc	a2,0x6
   2a11e:	40c60613          	addi	a2,a2,1036 # 30526 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f46>
   2a122:	00006597          	auipc	a1,0x6
   2a126:	3f658593          	addi	a1,a1,1014 # 30518 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f38>
   2a12a:	0000f317          	auipc	t1,0xf
   2a12e:	1d633303          	ld	t1,470(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a132:	9302                	c.jalr	t1
   2a134:	c86ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a138:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a13c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a13e:	4681                	c.li	a3,0
   2a140:	00006617          	auipc	a2,0x6
   2a144:	3fc60613          	addi	a2,a2,1020 # 3053c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f5c>
   2a148:	00006597          	auipc	a1,0x6
   2a14c:	3e058593          	addi	a1,a1,992 # 30528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f48>
   2a150:	0000f317          	auipc	t1,0xf
   2a154:	1b033303          	ld	t1,432(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a158:	9302                	c.jalr	t1
   2a15a:	c60ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a15e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a162:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a164:	4681                	c.li	a3,0
   2a166:	00006617          	auipc	a2,0x6
   2a16a:	3e960613          	addi	a2,a2,1001 # 3054f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f6f>
   2a16e:	00006597          	auipc	a1,0x6
   2a172:	3d258593          	addi	a1,a1,978 # 30540 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f60>
   2a176:	0000f317          	auipc	t1,0xf
   2a17a:	18a33303          	ld	t1,394(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a17e:	9302                	c.jalr	t1
   2a180:	c3aff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a184:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a188:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a18a:	4681                	c.li	a3,0
   2a18c:	00006617          	auipc	a2,0x6
   2a190:	3d360613          	addi	a2,a2,979 # 3055f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f7f>
   2a194:	00006597          	auipc	a1,0x6
   2a198:	3bc58593          	addi	a1,a1,956 # 30550 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f70>
   2a19c:	0000f317          	auipc	t1,0xf
   2a1a0:	16433303          	ld	t1,356(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a1a4:	9302                	c.jalr	t1
   2a1a6:	c14ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1aa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a1ae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a1b0:	4681                	c.li	a3,0
   2a1b2:	00006617          	auipc	a2,0x6
   2a1b6:	3b860613          	addi	a2,a2,952 # 3056a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f8a>
   2a1ba:	00006597          	auipc	a1,0x6
   2a1be:	3a658593          	addi	a1,a1,934 # 30560 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f80>
   2a1c2:	0000f317          	auipc	t1,0xf
   2a1c6:	13e33303          	ld	t1,318(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a1ca:	9302                	c.jalr	t1
   2a1cc:	beeff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a1d4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a1d6:	4681                	c.li	a3,0
   2a1d8:	00006617          	auipc	a2,0x6
   2a1dc:	3a760613          	addi	a2,a2,935 # 3057f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f9f>
   2a1e0:	00006597          	auipc	a1,0x6
   2a1e4:	39058593          	addi	a1,a1,912 # 30570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f90>
   2a1e8:	0000f317          	auipc	t1,0xf
   2a1ec:	11833303          	ld	t1,280(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a1f0:	9302                	c.jalr	t1
   2a1f2:	bc8ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1f6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a1fa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a1fc:	4681                	c.li	a3,0
   2a1fe:	00006617          	auipc	a2,0x6
   2a202:	39160613          	addi	a2,a2,913 # 3058f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1faf>
   2a206:	00006597          	auipc	a1,0x6
   2a20a:	37a58593          	addi	a1,a1,890 # 30580 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fa0>
   2a20e:	0000f317          	auipc	t1,0xf
   2a212:	0f233303          	ld	t1,242(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a216:	9302                	c.jalr	t1
   2a218:	ba2ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a21c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a220:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a222:	4681                	c.li	a3,0
   2a224:	00006617          	auipc	a2,0x6
   2a228:	38160613          	addi	a2,a2,897 # 305a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc5>
   2a22c:	00006597          	auipc	a1,0x6
   2a230:	36458593          	addi	a1,a1,868 # 30590 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fb0>
   2a234:	0000f317          	auipc	t1,0xf
   2a238:	0cc33303          	ld	t1,204(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a23c:	9302                	c.jalr	t1
   2a23e:	b7cff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a242:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a246:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a248:	4681                	c.li	a3,0
   2a24a:	00006617          	auipc	a2,0x6
   2a24e:	37360613          	addi	a2,a2,883 # 305bd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fdd>
   2a252:	00006597          	auipc	a1,0x6
   2a256:	35658593          	addi	a1,a1,854 # 305a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc8>
   2a25a:	0000f317          	auipc	t1,0xf
   2a25e:	0a633303          	ld	t1,166(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a262:	9302                	c.jalr	t1
   2a264:	b56ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a268:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a26c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a26e:	4681                	c.li	a3,0
   2a270:	00006617          	auipc	a2,0x6
   2a274:	36060613          	addi	a2,a2,864 # 305d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff0>
   2a278:	00006597          	auipc	a1,0x6
   2a27c:	34858593          	addi	a1,a1,840 # 305c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fe0>
   2a280:	0000f317          	auipc	t1,0xf
   2a284:	08033303          	ld	t1,128(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a288:	9302                	c.jalr	t1
   2a28a:	b30ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a28e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a292:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a294:	4681                	c.li	a3,0
   2a296:	00006617          	auipc	a2,0x6
   2a29a:	35260613          	addi	a2,a2,850 # 305e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2008>
   2a29e:	00006597          	auipc	a1,0x6
   2a2a2:	33a58593          	addi	a1,a1,826 # 305d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff8>
   2a2a6:	0000f317          	auipc	t1,0xf
   2a2aa:	05a33303          	ld	t1,90(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a2ae:	9302                	c.jalr	t1
   2a2b0:	b0aff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a2b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a2b8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a2ba:	4681                	c.li	a3,0
   2a2bc:	00006617          	auipc	a2,0x6
   2a2c0:	34660613          	addi	a2,a2,838 # 30602 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2022>
   2a2c4:	00006597          	auipc	a1,0x6
   2a2c8:	32c58593          	addi	a1,a1,812 # 305f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2010>
   2a2cc:	0000f317          	auipc	t1,0xf
   2a2d0:	03433303          	ld	t1,52(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a2d4:	9302                	c.jalr	t1
   2a2d6:	ae4ff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
        return "(DW_AT)0x" + to_hex((int)v);
   2a2da:	848a                	c.mv	s1,sp
   2a2dc:	8526                	c.mv	a0,s1
   2a2de:	0000f317          	auipc	t1,0xf
   2a2e2:	13233303          	ld	t1,306(t1) # 39410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf0ba>
   2a2e6:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2a2e8:	4725                	c.li	a4,9
   2a2ea:	00006697          	auipc	a3,0x6
   2a2ee:	31e68693          	addi	a3,a3,798 # 30608 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2028>
   2a2f2:	4601                	c.li	a2,0
   2a2f4:	4581                	c.li	a1,0
   2a2f6:	8526                	c.mv	a0,s1
   2a2f8:	b08ec0ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2a2fc:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a2fe:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2a302:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2a304:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a306:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2a30a:	03278563          	beq	a5,s2,2a334 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xdc4>
      { _M_dataplus._M_p = __p; }
   2a30e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2a310:	689c                	c.ld	a5,16(s1)
   2a312:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2a314:	649c                	c.ld	a5,8(s1)
   2a316:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2a318:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2a31c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2a320:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2a324:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2a326:	081c                	c.addi4spn	a5,sp,16
   2a328:	a8f50963          	beq	a0,a5,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2a32c:	984ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2a330:	a8aff06f          	jal	zero,295ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2a334:	6490                	c.ld	a2,8(s1)
   2a336:	0605                	c.addi	a2,1
	if (__n == 0)
   2a338:	de71                	c.beqz	a2,2a314 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xda4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2a33a:	85ca                	c.mv	a1,s2
   2a33c:	a14ec0ef          	jal	ra,16550 <memcpy@plt>
   2a340:	bfd1                	c.j	2a314 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xda4>
      { return _M_dataplus._M_p; }
   2a342:	842a                	c.mv	s0,a0
   2a344:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2a346:	081c                	c.addi4spn	a5,sp,16
   2a348:	00f50463          	beq	a0,a5,2a350 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xde0>
   2a34c:	964ec0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2a350:	8522                	c.mv	a0,s0
   2a352:	b3eec0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002a356 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)>:
template <typename T> std::string to_hex(T v) {
   2a356:	7179                	c.addi16sp	sp,-48
   2a358:	f406                	c.sdsp	ra,40(sp)
   2a35a:	f022                	c.sdsp	s0,32(sp)
   2a35c:	ec26                	c.sdsp	s1,24(sp)
   2a35e:	84aa                	c.mv	s1,a0
  if (v == 0)
   2a360:	c989                	c.beqz	a1,2a372 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x1c>
  *pos-- = '\0';
   2a362:	00010423          	sb	zero,8(sp)
   2a366:	00710413          	addi	s0,sp,7
    if (digit < 10)
   2a36a:	46a5                	c.li	a3,9
  while (v && pos >= buf) {
   2a36c:	fff10613          	addi	a2,sp,-1
   2a370:	a82d                	c.j	2a3aa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x54>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a372:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a376:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a378:	4681                	c.li	a3,0
   2a37a:	00005617          	auipc	a2,0x5
   2a37e:	e4f60613          	addi	a2,a2,-433 # 2f1c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   2a382:	00005597          	auipc	a1,0x5
   2a386:	e4658593          	addi	a1,a1,-442 # 2f1c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   2a38a:	0000f317          	auipc	t1,0xf
   2a38e:	f7633303          	ld	t1,-138(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a392:	9302                	c.jalr	t1
   2a394:	a0a1                	c.j	2a3dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x86>
   2a396:	00e40023          	sb	a4,0(s0)
    pos--;
   2a39a:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   2a39e:	4045d59b          	sraiw	a1,a1,0x4
  while (v && pos >= buf) {
   2a3a2:	cd89                	c.beqz	a1,2a3bc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x66>
   2a3a4:	00c78c63          	beq	a5,a2,2a3bc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x66>
    pos--;
   2a3a8:	843e                	c.mv	s0,a5
    int digit = v & 0xf;
   2a3aa:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   2a3ae:	05778713          	addi	a4,a5,87
    if (digit < 10)
   2a3b2:	fef6c2e3          	blt	a3,a5,2a396 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x40>
      *pos = '0' + digit;
   2a3b6:	03078713          	addi	a4,a5,48
   2a3ba:	bff1                	c.j	2a396 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x40>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a3bc:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2a3c0:	e09c                	c.sd	a5,0(s1)
	return __builtin_strlen(__s);
   2a3c2:	8522                	c.mv	a0,s0
   2a3c4:	ffdeb0ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2a3c8:	4681                	c.li	a3,0
   2a3ca:	00a40633          	add	a2,s0,a0
   2a3ce:	85a2                	c.mv	a1,s0
   2a3d0:	8526                	c.mv	a0,s1
   2a3d2:	0000f317          	auipc	t1,0xf
   2a3d6:	f2e33303          	ld	t1,-210(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2a3da:	9302                	c.jalr	t1
}
   2a3dc:	8526                	c.mv	a0,s1
   2a3de:	70a2                	c.ldsp	ra,40(sp)
   2a3e0:	7402                	c.ldsp	s0,32(sp)
   2a3e2:	64e2                	c.ldsp	s1,24(sp)
   2a3e4:	6145                	c.addi16sp	sp,48
   2a3e6:	8082                	c.jr	ra

000000000002a3e8 <elf::elf::get_hdr() const>:
    // isn't super-cheap.
    m->sections.push_back(section(*this, sec));
  }
}

const Ehdr<> &elf::get_hdr() const { return m->hdr; }
   2a3e8:	6108                	c.ld	a0,0(a0)
   2a3ea:	0541                	c.addi	a0,16
   2a3ec:	8082                	c.jr	ra

000000000002a3ee <elf::elf::get_loader() const>:

shared_ptr<loader> elf::get_loader() const { return m->l; }
   2a3ee:	1141                	c.addi	sp,-16
   2a3f0:	e406                	c.sdsp	ra,8(sp)
   2a3f2:	e022                	c.sdsp	s0,0(sp)
   2a3f4:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   2a3f6:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a3f8:	6398                	c.ld	a4,0(a5)
   2a3fa:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   2a3fc:	6788                	c.ld	a0,8(a5)
   2a3fe:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2a400:	c919                	c.beqz	a0,2a416 <elf::elf::get_loader() const+0x28>
    if (__is_single_threaded())
   2a402:	0000f797          	auipc	a5,0xf
   2a406:	0767b783          	ld	a5,118(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a40a:	0007c783          	lbu	a5,0(a5)
   2a40e:	cb89                	c.beqz	a5,2a420 <elf::elf::get_loader() const+0x32>
  { *__mem += __val; }
   2a410:	591c                	c.lw	a5,48(a0)
   2a412:	2785                	c.addiw	a5,1
   2a414:	d91c                	c.sw	a5,48(a0)
   2a416:	8522                	c.mv	a0,s0
   2a418:	60a2                	c.ldsp	ra,8(sp)
   2a41a:	6402                	c.ldsp	s0,0(sp)
   2a41c:	0141                	c.addi	sp,16
   2a41e:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2a420:	4585                	c.li	a1,1
   2a422:	03050513          	addi	a0,a0,48
   2a426:	edbeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a42a:	b7f5                	c.j	2a416 <elf::elf::get_loader() const+0x28>

000000000002a42c <elf::elf::sections() const>:

const std::vector<section> &elf::sections() const { return m->sections; }
   2a42c:	6108                	c.ld	a0,0(a0)
   2a42e:	05050513          	addi	a0,a0,80
   2a432:	8082                	c.jr	ra

000000000002a434 <elf::elf::segments() const>:

const std::vector<segment> &elf::segments() const { return m->segments; }
   2a434:	6108                	c.ld	a0,0(a0)
   2a436:	06850513          	addi	a0,a0,104
   2a43a:	8082                	c.jr	ra

000000000002a43c <elf::elf::get_section(unsigned int) const>:
    if (name == sec.get_name(nullptr))
      return sec;
  return m->invalid_section;
}

const section &elf::get_section(unsigned index) const {
   2a43c:	1101                	c.addi	sp,-32
   2a43e:	ec06                	c.sdsp	ra,24(sp)
   2a440:	e822                	c.sdsp	s0,16(sp)
   2a442:	e426                	c.sdsp	s1,8(sp)
   2a444:	84aa                	c.mv	s1,a0
  if (index >= sections().size())
   2a446:	02059413          	slli	s0,a1,0x20
   2a44a:	9001                	c.srli	s0,0x20
   2a44c:	fe1ff0ef          	jal	ra,2a42c <elf::elf::sections() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a450:	651c                	c.ld	a5,8(a0)
   2a452:	6118                	c.ld	a4,0(a0)
   2a454:	8f99                	c.sub	a5,a4
   2a456:	8791                	c.srai	a5,0x4
   2a458:	00f46a63          	bltu	s0,a5,2a46c <elf::elf::get_section(unsigned int) const+0x30>
    return m->invalid_section;
   2a45c:	6088                	c.ld	a0,0(s1)
   2a45e:	08050513          	addi	a0,a0,128
  return sections().at(index);
}
   2a462:	60e2                	c.ldsp	ra,24(sp)
   2a464:	6442                	c.ldsp	s0,16(sp)
   2a466:	64a2                	c.ldsp	s1,8(sp)
   2a468:	6105                	c.addi16sp	sp,32
   2a46a:	8082                	c.jr	ra
  return sections().at(index);
   2a46c:	8526                	c.mv	a0,s1
   2a46e:	fbfff0ef          	jal	ra,2a42c <elf::elf::sections() const>
   2a472:	611c                	c.ld	a5,0(a0)
   2a474:	6510                	c.ld	a2,8(a0)
   2a476:	8e1d                	c.sub	a2,a5
   2a478:	8611                	c.srai	a2,0x4
	return *(this->_M_impl._M_start + __n);
   2a47a:	00441713          	slli	a4,s0,0x4
   2a47e:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   2a482:	fec460e3          	bltu	s0,a2,2a462 <elf::elf::get_section(unsigned int) const+0x26>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   2a486:	85a2                	c.mv	a1,s0
   2a488:	00007517          	auipc	a0,0x7
   2a48c:	8b050513          	addi	a0,a0,-1872 # 30d38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   2a490:	950ec0ef          	jal	ra,165e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

000000000002a494 <elf::elf::get_segment(unsigned int) const>:

const segment &elf::get_segment(unsigned index) const {
   2a494:	1101                	c.addi	sp,-32
   2a496:	ec06                	c.sdsp	ra,24(sp)
   2a498:	e822                	c.sdsp	s0,16(sp)
   2a49a:	e426                	c.sdsp	s1,8(sp)
   2a49c:	84aa                	c.mv	s1,a0
  if (index >= segments().size())
   2a49e:	02059413          	slli	s0,a1,0x20
   2a4a2:	9001                	c.srli	s0,0x20
   2a4a4:	f91ff0ef          	jal	ra,2a434 <elf::elf::segments() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a4a8:	651c                	c.ld	a5,8(a0)
   2a4aa:	6118                	c.ld	a4,0(a0)
   2a4ac:	8f99                	c.sub	a5,a4
   2a4ae:	8791                	c.srai	a5,0x4
   2a4b0:	00f46a63          	bltu	s0,a5,2a4c4 <elf::elf::get_segment(unsigned int) const+0x30>
    return m->invalid_segment;
   2a4b4:	6088                	c.ld	a0,0(s1)
   2a4b6:	09050513          	addi	a0,a0,144
  return segments().at(index);
}
   2a4ba:	60e2                	c.ldsp	ra,24(sp)
   2a4bc:	6442                	c.ldsp	s0,16(sp)
   2a4be:	64a2                	c.ldsp	s1,8(sp)
   2a4c0:	6105                	c.addi16sp	sp,32
   2a4c2:	8082                	c.jr	ra
  return segments().at(index);
   2a4c4:	8526                	c.mv	a0,s1
   2a4c6:	f6fff0ef          	jal	ra,2a434 <elf::elf::segments() const>
   2a4ca:	611c                	c.ld	a5,0(a0)
   2a4cc:	6510                	c.ld	a2,8(a0)
   2a4ce:	8e1d                	c.sub	a2,a5
   2a4d0:	8611                	c.srai	a2,0x4
	return *(this->_M_impl._M_start + __n);
   2a4d2:	00441713          	slli	a4,s0,0x4
   2a4d6:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   2a4da:	fec460e3          	bltu	s0,a2,2a4ba <elf::elf::get_segment(unsigned int) const+0x26>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   2a4de:	85a2                	c.mv	a1,s0
   2a4e0:	00007517          	auipc	a0,0x7
   2a4e4:	85850513          	addi	a0,a0,-1960 # 30d38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   2a4e8:	8f8ec0ef          	jal	ra,165e0 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

000000000002a4ec <elf::segment::get_hdr() const>:

segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Phdr<> &segment::get_hdr() const { return m->hdr; }
   2a4ec:	6108                	c.ld	a0,0(a0)
   2a4ee:	0541                	c.addi	a0,16
   2a4f0:	8082                	c.jr	ra

000000000002a4f2 <elf::segment::data() const>:

const void *segment::data() const {
   2a4f2:	7179                	c.addi16sp	sp,-48
   2a4f4:	f406                	c.sdsp	ra,40(sp)
   2a4f6:	f022                	c.sdsp	s0,32(sp)
   2a4f8:	ec26                	c.sdsp	s1,24(sp)
   2a4fa:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   2a4fc:	610c                	c.ld	a1,0(a0)
  if (!m->data)
   2a4fe:	65bc                	c.ld	a5,72(a1)
   2a500:	cb81                	c.beqz	a5,2a510 <elf::segment::data() const+0x1e>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
  return m->data;
   2a502:	601c                	c.ld	a5,0(s0)
   2a504:	67a8                	c.ld	a0,72(a5)
}
   2a506:	70a2                	c.ldsp	ra,40(sp)
   2a508:	7402                	c.ldsp	s0,32(sp)
   2a50a:	64e2                	c.ldsp	s1,24(sp)
   2a50c:	6145                	c.addi16sp	sp,48
   2a50e:	8082                	c.jr	ra
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
   2a510:	850a                	c.mv	a0,sp
   2a512:	eddff0ef          	jal	ra,2a3ee <elf::elf::get_loader() const>
   2a516:	6502                	c.ldsp	a0,0(sp)
   2a518:	6004                	c.ld	s1,0(s0)
   2a51a:	611c                	c.ld	a5,0(a0)
   2a51c:	6b9c                	c.ld	a5,16(a5)
   2a51e:	7890                	c.ld	a2,48(s1)
   2a520:	6c8c                	c.ld	a1,24(s1)
   2a522:	9782                	c.jalr	a5
   2a524:	e4a8                	c.sd	a0,72(s1)
	if (_M_pi != nullptr)
   2a526:	64a2                	c.ldsp	s1,8(sp)
   2a528:	dce9                	c.beqz	s1,2a502 <elf::segment::data() const+0x10>
    if (__is_single_threaded())
   2a52a:	0000f797          	auipc	a5,0xf
   2a52e:	f4e7b783          	ld	a5,-178(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a532:	0007c783          	lbu	a5,0(a5)
   2a536:	c3a9                	c.beqz	a5,2a578 <elf::segment::data() const+0x86>
    _Atomic_word __result = *__mem;
   2a538:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2a53a:	fff5079b          	addiw	a5,a0,-1
   2a53e:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a540:	4785                	c.li	a5,1
   2a542:	fcf510e3          	bne	a0,a5,2a502 <elf::segment::data() const+0x10>
	_M_dispose();
   2a546:	609c                	c.ld	a5,0(s1)
   2a548:	6b9c                	c.ld	a5,16(a5)
   2a54a:	8526                	c.mv	a0,s1
   2a54c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a54e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a552:	0000f797          	auipc	a5,0xf
   2a556:	f267b783          	ld	a5,-218(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a55a:	0007c783          	lbu	a5,0(a5)
   2a55e:	c39d                	c.beqz	a5,2a584 <elf::segment::data() const+0x92>
    _Atomic_word __result = *__mem;
   2a560:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2a562:	fff5079b          	addiw	a5,a0,-1
   2a566:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a568:	4785                	c.li	a5,1
   2a56a:	f8f51ce3          	bne	a0,a5,2a502 <elf::segment::data() const+0x10>
	    _M_destroy();
   2a56e:	609c                	c.ld	a5,0(s1)
   2a570:	6f9c                	c.ld	a5,24(a5)
   2a572:	8526                	c.mv	a0,s1
   2a574:	9782                	c.jalr	a5
   2a576:	b771                	c.j	2a502 <elf::segment::data() const+0x10>
      return __exchange_and_add(__mem, __val);
   2a578:	55fd                	c.li	a1,-1
   2a57a:	03048513          	addi	a0,s1,48
   2a57e:	db3eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a582:	bf7d                	c.j	2a540 <elf::segment::data() const+0x4e>
   2a584:	55fd                	c.li	a1,-1
   2a586:	03448513          	addi	a0,s1,52
   2a58a:	da7eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a58e:	bfe9                	c.j	2a568 <elf::segment::data() const+0x76>
	if (_M_pi != nullptr)
   2a590:	842a                	c.mv	s0,a0
   2a592:	6522                	c.ldsp	a0,8(sp)
   2a594:	c511                	c.beqz	a0,2a5a0 <elf::segment::data() const+0xae>
	  _M_pi->_M_release();
   2a596:	0000f317          	auipc	t1,0xf
   2a59a:	e2a33303          	ld	t1,-470(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2a59e:	9302                	c.jalr	t1
   2a5a0:	8522                	c.mv	a0,s0
   2a5a2:	8eeec0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002a5a6 <elf::segment::file_size() const>:

size_t segment::file_size() const { return m->hdr.filesz; }
   2a5a6:	611c                	c.ld	a5,0(a0)
   2a5a8:	7b88                	c.ld	a0,48(a5)
   2a5aa:	8082                	c.jr	ra

000000000002a5ac <elf::segment::mem_size() const>:

size_t segment::mem_size() const { return m->hdr.memsz; }
   2a5ac:	611c                	c.ld	a5,0(a0)
   2a5ae:	7f88                	c.ld	a0,56(a5)
   2a5b0:	8082                	c.jr	ra

000000000002a5b2 <elf::section::get_hdr() const>:

section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Shdr<> &section::get_hdr() const { return m->hdr; }
   2a5b2:	6108                	c.ld	a0,0(a0)
   2a5b4:	0541                	c.addi	a0,16
   2a5b6:	8082                	c.jr	ra

000000000002a5b8 <elf::section::data() const>:
      { return _M_ptr; }
   2a5b8:	610c                	c.ld	a1,0(a0)
}

string section::get_name() const { return get_name(nullptr); }

const void *section::data() const {
  if (m->hdr.type == sht::nobits)
   2a5ba:	49d8                	c.lw	a4,20(a1)
   2a5bc:	47a1                	c.li	a5,8
   2a5be:	0af70063          	beq	a4,a5,2a65e <elf::section::data() const+0xa6>
const void *section::data() const {
   2a5c2:	7179                	c.addi16sp	sp,-48
   2a5c4:	f406                	c.sdsp	ra,40(sp)
   2a5c6:	f022                	c.sdsp	s0,32(sp)
   2a5c8:	ec26                	c.sdsp	s1,24(sp)
   2a5ca:	842a                	c.mv	s0,a0
    return nullptr;
  if (!m->data)
   2a5cc:	71bc                	c.ld	a5,96(a1)
   2a5ce:	cb81                	c.beqz	a5,2a5de <elf::section::data() const+0x26>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
  return m->data;
   2a5d0:	601c                	c.ld	a5,0(s0)
   2a5d2:	73a8                	c.ld	a0,96(a5)
}
   2a5d4:	70a2                	c.ldsp	ra,40(sp)
   2a5d6:	7402                	c.ldsp	s0,32(sp)
   2a5d8:	64e2                	c.ldsp	s1,24(sp)
   2a5da:	6145                	c.addi16sp	sp,48
   2a5dc:	8082                	c.jr	ra
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
   2a5de:	850a                	c.mv	a0,sp
   2a5e0:	e0fff0ef          	jal	ra,2a3ee <elf::elf::get_loader() const>
   2a5e4:	6502                	c.ldsp	a0,0(sp)
   2a5e6:	6004                	c.ld	s1,0(s0)
   2a5e8:	611c                	c.ld	a5,0(a0)
   2a5ea:	6b9c                	c.ld	a5,16(a5)
   2a5ec:	7890                	c.ld	a2,48(s1)
   2a5ee:	748c                	c.ld	a1,40(s1)
   2a5f0:	9782                	c.jalr	a5
   2a5f2:	f0a8                	c.sd	a0,96(s1)
	if (_M_pi != nullptr)
   2a5f4:	64a2                	c.ldsp	s1,8(sp)
   2a5f6:	dce9                	c.beqz	s1,2a5d0 <elf::section::data() const+0x18>
    if (__is_single_threaded())
   2a5f8:	0000f797          	auipc	a5,0xf
   2a5fc:	e807b783          	ld	a5,-384(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a600:	0007c783          	lbu	a5,0(a5)
   2a604:	c3a9                	c.beqz	a5,2a646 <elf::section::data() const+0x8e>
    _Atomic_word __result = *__mem;
   2a606:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2a608:	fff5079b          	addiw	a5,a0,-1
   2a60c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a60e:	4785                	c.li	a5,1
   2a610:	fcf510e3          	bne	a0,a5,2a5d0 <elf::section::data() const+0x18>
	_M_dispose();
   2a614:	609c                	c.ld	a5,0(s1)
   2a616:	6b9c                	c.ld	a5,16(a5)
   2a618:	8526                	c.mv	a0,s1
   2a61a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a61c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a620:	0000f797          	auipc	a5,0xf
   2a624:	e587b783          	ld	a5,-424(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a628:	0007c783          	lbu	a5,0(a5)
   2a62c:	c39d                	c.beqz	a5,2a652 <elf::section::data() const+0x9a>
    _Atomic_word __result = *__mem;
   2a62e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2a630:	fff5079b          	addiw	a5,a0,-1
   2a634:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a636:	4785                	c.li	a5,1
   2a638:	f8f51ce3          	bne	a0,a5,2a5d0 <elf::section::data() const+0x18>
	    _M_destroy();
   2a63c:	609c                	c.ld	a5,0(s1)
   2a63e:	6f9c                	c.ld	a5,24(a5)
   2a640:	8526                	c.mv	a0,s1
   2a642:	9782                	c.jalr	a5
   2a644:	b771                	c.j	2a5d0 <elf::section::data() const+0x18>
      return __exchange_and_add(__mem, __val);
   2a646:	55fd                	c.li	a1,-1
   2a648:	03048513          	addi	a0,s1,48
   2a64c:	ce5eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a650:	bf7d                	c.j	2a60e <elf::section::data() const+0x56>
   2a652:	55fd                	c.li	a1,-1
   2a654:	03448513          	addi	a0,s1,52
   2a658:	cd9eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a65c:	bfe9                	c.j	2a636 <elf::section::data() const+0x7e>
    return nullptr;
   2a65e:	4501                	c.li	a0,0
}
   2a660:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2a662:	842a                	c.mv	s0,a0
   2a664:	6522                	c.ldsp	a0,8(sp)
   2a666:	c511                	c.beqz	a0,2a672 <elf::section::data() const+0xba>
	  _M_pi->_M_release();
   2a668:	0000f317          	auipc	t1,0xf
   2a66c:	d5833303          	ld	t1,-680(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2a670:	9302                	c.jalr	t1
   2a672:	8522                	c.mv	a0,s0
   2a674:	81cec0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002a678 <elf::section::size() const>:

size_t section::size() const { return m->hdr.size; }
   2a678:	611c                	c.ld	a5,0(a0)
   2a67a:	7b88                	c.ld	a0,48(a5)
   2a67c:	8082                	c.jr	ra

000000000002a67e <elf::strtab::strtab(elf::elf, void const*, unsigned long)>:

  const elf f;
  const char *data, *end;
};

strtab::strtab(elf f, const void *data, size_t size)
   2a67e:	7179                	c.addi16sp	sp,-48
   2a680:	f406                	c.sdsp	ra,40(sp)
   2a682:	f022                	c.sdsp	s0,32(sp)
   2a684:	ec26                	c.sdsp	s1,24(sp)
   2a686:	e84a                	c.sdsp	s2,16(sp)
   2a688:	e44e                	c.sdsp	s3,8(sp)
   2a68a:	e052                	c.sdsp	s4,0(sp)
   2a68c:	892a                	c.mv	s2,a0
   2a68e:	84ae                	c.mv	s1,a1
   2a690:	89b2                	c.mv	s3,a2
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   2a692:	00d60a33          	add	s4,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2a696:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2a69a:	05800513          	addi	a0,zero,88
   2a69e:	e23eb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2a6a2:	842a                	c.mv	s0,a0
   2a6a4:	00052423          	sw	zero,8(a0)
   2a6a8:	00052623          	sw	zero,12(a0)
   2a6ac:	00052823          	sw	zero,16(a0)
   2a6b0:	00052a23          	sw	zero,20(a0)
   2a6b4:	00052c23          	sw	zero,24(a0)
   2a6b8:	00052e23          	sw	zero,28(a0)
   2a6bc:	02053023          	sd	zero,32(a0)
   2a6c0:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2a6c4:	4785                	c.li	a5,1
   2a6c6:	d91c                	c.sw	a5,48(a0)
   2a6c8:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2a6ca:	0000f797          	auipc	a5,0xf
   2a6ce:	f1e7b783          	ld	a5,-226(a5) # 395e8 <vtable for std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x908>
   2a6d2:	07c1                	c.addi	a5,16
   2a6d4:	e11c                	c.sd	a5,0(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a6d6:	609c                	c.ld	a5,0(s1)
   2a6d8:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2a6da:	6488                	c.ld	a0,8(s1)
   2a6dc:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2a6de:	c919                	c.beqz	a0,2a6f4 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x76>
    if (__is_single_threaded())
   2a6e0:	0000f717          	auipc	a4,0xf
   2a6e4:	d9873703          	ld	a4,-616(a4) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a6e8:	00074703          	lbu	a4,0(a4)
   2a6ec:	c715                	c.beqz	a4,2a718 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x9a>
  { *__mem += __val; }
   2a6ee:	5918                	c.lw	a4,48(a0)
   2a6f0:	2705                	c.addiw	a4,1
   2a6f2:	d918                	c.sw	a4,48(a0)
      : f(f), data(data), end(end) {}
   2a6f4:	05343423          	sd	s3,72(s0)
   2a6f8:	05443823          	sd	s4,80(s0)
	  _M_pi = __pi;
   2a6fc:	00893423          	sd	s0,8(s2)
   2a700:	03840413          	addi	s0,s0,56
	  __p = __pi->_M_ptr();
   2a704:	00893023          	sd	s0,0(s2)
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   2a708:	70a2                	c.ldsp	ra,40(sp)
   2a70a:	7402                	c.ldsp	s0,32(sp)
   2a70c:	64e2                	c.ldsp	s1,24(sp)
   2a70e:	6942                	c.ldsp	s2,16(sp)
   2a710:	69a2                	c.ldsp	s3,8(sp)
   2a712:	6a02                	c.ldsp	s4,0(sp)
   2a714:	6145                	c.addi16sp	sp,48
   2a716:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2a718:	4585                	c.li	a1,1
   2a71a:	03050513          	addi	a0,a0,48
   2a71e:	be3eb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a722:	bfc9                	c.j	2a6f4 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x76>

000000000002a724 <elf::section::as_strtab() const>:
strtab section::as_strtab() const {
   2a724:	7179                	c.addi16sp	sp,-48
   2a726:	f406                	c.sdsp	ra,40(sp)
   2a728:	f022                	c.sdsp	s0,32(sp)
   2a72a:	ec26                	c.sdsp	s1,24(sp)
   2a72c:	e84a                	c.sdsp	s2,16(sp)
      { return _M_ptr; }
   2a72e:	619c                	c.ld	a5,0(a1)
  if (m->hdr.type != sht::strtab)
   2a730:	4bd4                	c.lw	a3,20(a5)
   2a732:	470d                	c.li	a4,3
   2a734:	02e69763          	bne	a3,a4,2a762 <elf::section::as_strtab() const+0x3e>
   2a738:	892a                	c.mv	s2,a0
   2a73a:	842e                	c.mv	s0,a1
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a73c:	6398                	c.ld	a4,0(a5)
   2a73e:	e03a                	c.sdsp	a4,0(sp)
      : _M_pi(__r._M_pi)
   2a740:	6788                	c.ld	a0,8(a5)
   2a742:	e42a                	c.sdsp	a0,8(sp)
	if (_M_pi != nullptr)
   2a744:	c919                	c.beqz	a0,2a75a <elf::section::as_strtab() const+0x36>
    if (__is_single_threaded())
   2a746:	0000f717          	auipc	a4,0xf
   2a74a:	d3273703          	ld	a4,-718(a4) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a74e:	00074703          	lbu	a4,0(a4)
   2a752:	c339                	c.beqz	a4,2a798 <elf::section::as_strtab() const+0x74>
  { *__mem += __val; }
   2a754:	5918                	c.lw	a4,48(a0)
   2a756:	2705                	c.addiw	a4,1
   2a758:	d918                	c.sw	a4,48(a0)
  return strtab(m->f, data(), size());
   2a75a:	8522                	c.mv	a0,s0
   2a75c:	e5dff0ef          	jal	ra,2a5b8 <elf::section::data() const>
   2a760:	a091                	c.j	2a7a4 <elf::section::as_strtab() const+0x80>
    throw section_type_mismatch("cannot use section as strtab");
   2a762:	4541                	c.li	a0,16
   2a764:	c6deb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2a768:	842a                	c.mv	s0,a0
class section_type_mismatch : public std::logic_error {
public:
  explicit section_type_mismatch(const std::string &what_arg)
      : std::logic_error(what_arg) {}
  explicit section_type_mismatch(const char *what_arg)
      : std::logic_error(what_arg) {}
   2a76a:	00006597          	auipc	a1,0x6
   2a76e:	61e58593          	addi	a1,a1,1566 # 30d88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27a8>
   2a772:	dafeb0ef          	jal	ra,16520 <std::logic_error::logic_error(char const*)@plt>
   2a776:	0000f797          	auipc	a5,0xf
   2a77a:	c3a7b783          	ld	a5,-966(a5) # 393b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   2a77e:	07c1                	c.addi	a5,16
   2a780:	e01c                	c.sd	a5,0(s0)
   2a782:	0000f617          	auipc	a2,0xf
   2a786:	b1e63603          	ld	a2,-1250(a2) # 392a0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xd7e0>
   2a78a:	0000f597          	auipc	a1,0xf
   2a78e:	b4e5b583          	ld	a1,-1202(a1) # 392d8 <typeinfo for elf::section_type_mismatch@@Base+0x780>
   2a792:	8522                	c.mv	a0,s0
   2a794:	ecdeb0ef          	jal	ra,16660 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   2a798:	4585                	c.li	a1,1
   2a79a:	03050513          	addi	a0,a0,48
   2a79e:	b63eb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a7a2:	bf65                	c.j	2a75a <elf::section::as_strtab() const+0x36>
  return strtab(m->f, data(), size());
   2a7a4:	84aa                	c.mv	s1,a0
   2a7a6:	8522                	c.mv	a0,s0
   2a7a8:	ed1ff0ef          	jal	ra,2a678 <elf::section::size() const>
   2a7ac:	86aa                	c.mv	a3,a0
   2a7ae:	8626                	c.mv	a2,s1
   2a7b0:	858a                	c.mv	a1,sp
   2a7b2:	854a                	c.mv	a0,s2
   2a7b4:	ecbff0ef          	jal	ra,2a67e <elf::strtab::strtab(elf::elf, void const*, unsigned long)>
	if (_M_pi != nullptr)
   2a7b8:	6422                	c.ldsp	s0,8(sp)
   2a7ba:	cc19                	c.beqz	s0,2a7d8 <elf::section::as_strtab() const+0xb4>
    if (__is_single_threaded())
   2a7bc:	0000f797          	auipc	a5,0xf
   2a7c0:	cbc7b783          	ld	a5,-836(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a7c4:	0007c783          	lbu	a5,0(a5)
   2a7c8:	cf99                	c.beqz	a5,2a7e6 <elf::section::as_strtab() const+0xc2>
    _Atomic_word __result = *__mem;
   2a7ca:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2a7cc:	fff5079b          	addiw	a5,a0,-1
   2a7d0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a7d2:	4785                	c.li	a5,1
   2a7d4:	00f50f63          	beq	a0,a5,2a7f2 <elf::section::as_strtab() const+0xce>
}
   2a7d8:	854a                	c.mv	a0,s2
   2a7da:	70a2                	c.ldsp	ra,40(sp)
   2a7dc:	7402                	c.ldsp	s0,32(sp)
   2a7de:	64e2                	c.ldsp	s1,24(sp)
   2a7e0:	6942                	c.ldsp	s2,16(sp)
   2a7e2:	6145                	c.addi16sp	sp,48
   2a7e4:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2a7e6:	55fd                	c.li	a1,-1
   2a7e8:	03040513          	addi	a0,s0,48
   2a7ec:	b45eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a7f0:	b7cd                	c.j	2a7d2 <elf::section::as_strtab() const+0xae>
	_M_dispose();
   2a7f2:	601c                	c.ld	a5,0(s0)
   2a7f4:	6b9c                	c.ld	a5,16(a5)
   2a7f6:	8522                	c.mv	a0,s0
   2a7f8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a7fa:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a7fe:	0000f797          	auipc	a5,0xf
   2a802:	c7a7b783          	ld	a5,-902(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a806:	0007c783          	lbu	a5,0(a5)
   2a80a:	cf89                	c.beqz	a5,2a824 <elf::section::as_strtab() const+0x100>
    _Atomic_word __result = *__mem;
   2a80c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2a80e:	fff5079b          	addiw	a5,a0,-1
   2a812:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a814:	4785                	c.li	a5,1
   2a816:	fcf511e3          	bne	a0,a5,2a7d8 <elf::section::as_strtab() const+0xb4>
	    _M_destroy();
   2a81a:	601c                	c.ld	a5,0(s0)
   2a81c:	6f9c                	c.ld	a5,24(a5)
   2a81e:	8522                	c.mv	a0,s0
   2a820:	9782                	c.jalr	a5
  return strtab(m->f, data(), size());
   2a822:	bf5d                	c.j	2a7d8 <elf::section::as_strtab() const+0xb4>
      return __exchange_and_add(__mem, __val);
   2a824:	55fd                	c.li	a1,-1
   2a826:	03440513          	addi	a0,s0,52
   2a82a:	b07eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a82e:	b7dd                	c.j	2a814 <elf::section::as_strtab() const+0xf0>
    throw section_type_mismatch("cannot use section as strtab");
   2a830:	84aa                	c.mv	s1,a0
   2a832:	8522                	c.mv	a0,s0
   2a834:	c3deb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2a838:	8526                	c.mv	a0,s1
   2a83a:	e57eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2a83e:	842a                	c.mv	s0,a0
   2a840:	6522                	c.ldsp	a0,8(sp)
   2a842:	c511                	c.beqz	a0,2a84e <elf::section::as_strtab() const+0x12a>
	  _M_pi->_M_release();
   2a844:	0000f317          	auipc	t1,0xf
   2a848:	b7c33303          	ld	t1,-1156(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2a84c:	9302                	c.jalr	t1
   2a84e:	8522                	c.mv	a0,s0
   2a850:	e41eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002a854 <elf::strtab::get(unsigned long, unsigned long*) const>:

const char *strtab::get(Elf64::Off offset, size_t *len_out) const {
   2a854:	7119                	c.addi16sp	sp,-128
   2a856:	fc86                	c.sdsp	ra,120(sp)
   2a858:	f8a2                	c.sdsp	s0,112(sp)
   2a85a:	f4a6                	c.sdsp	s1,104(sp)
      { return _M_ptr; }
   2a85c:	611c                	c.ld	a5,0(a0)
  const char *start = m->data + offset;
   2a85e:	6b88                	c.ld	a0,16(a5)
   2a860:	952e                	c.add	a0,a1

  if (start >= m->end)
   2a862:	6f94                	c.ld	a3,24(a5)
    throw range_error("string offset " + std::to_string(offset) +
                      " exceeds section size");

  // Find the null terminator
  const char *p = start;
   2a864:	87aa                	c.mv	a5,a0
  if (start >= m->end)
   2a866:	02d57463          	bgeu	a0,a3,2a88e <elf::strtab::get(unsigned long, unsigned long*) const+0x3a>
  while (p < m->end && *p)
   2a86a:	0007c703          	lbu	a4,0(a5)
   2a86e:	16070263          	beq	a4,zero,2a9d2 <elf::strtab::get(unsigned long, unsigned long*) const+0x17e>
    p++;
   2a872:	0785                	c.addi	a5,1
  while (p < m->end && *p)
   2a874:	fef69be3          	bne	a3,a5,2a86a <elf::strtab::get(unsigned long, unsigned long*) const+0x16>
  if (p == m->end)
    throw format_error("unterminated string");
   2a878:	4541                	c.li	a0,16
   2a87a:	b57eb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2a87e:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2a880:	00003597          	auipc	a1,0x3
   2a884:	d6858593          	addi	a1,a1,-664 # 2d5e8 <std::piecewise_construct+0x38>
   2a888:	e89eb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2a88c:	aaa9                	c.j	2a9e6 <elf::strtab::get(unsigned long, unsigned long*) const+0x192>
   2a88e:	842e                	c.mv	s0,a1
                      " exceeds section size");
   2a890:	4541                	c.li	a0,16
   2a892:	b3feb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2a896:	84aa                	c.mv	s1,a0
   2a898:	87a2                	c.mv	a5,s0
      unsigned __n = 1;
   2a89a:	4585                	c.li	a1,1
	  if (__value < (unsigned)__base) return __n;
   2a89c:	4825                	c.li	a6,9
	  if (__value < __b2) return __n + 1;
   2a89e:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   2a8a2:	3e700613          	addi	a2,zero,999
	  if (__value < __b4) return __n + 3;
   2a8a6:	6709                	c.lui	a4,0x2
   2a8a8:	70f70693          	addi	a3,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   2a8ac:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   2a8b0:	00f87563          	bgeu	a6,a5,2a8ba <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  if (__value < __b2) return __n + 1;
   2a8b4:	00f56c63          	bltu	a0,a5,2a8cc <elf::strtab::get(unsigned long, unsigned long*) const+0x78>
   2a8b8:	2585                	c.addiw	a1,1
	: allocator_type(__a), _M_p(__dat) { }
   2a8ba:	081c                	c.addi4spn	a5,sp,16
   2a8bc:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   2a8be:	4601                	c.li	a2,0
   2a8c0:	1582                	c.slli	a1,0x20
   2a8c2:	9181                	c.srli	a1,0x20
   2a8c4:	850a                	c.mv	a0,sp
   2a8c6:	c4beb0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   2a8ca:	a829                	c.j	2a8e4 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b3) return __n + 2;
   2a8cc:	00f66463          	bltu	a2,a5,2a8d4 <elf::strtab::get(unsigned long, unsigned long*) const+0x80>
   2a8d0:	2589                	c.addiw	a1,2
   2a8d2:	b7e5                	c.j	2a8ba <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  if (__value < __b4) return __n + 3;
   2a8d4:	00f6e463          	bltu	a3,a5,2a8dc <elf::strtab::get(unsigned long, unsigned long*) const+0x88>
   2a8d8:	258d                	c.addiw	a1,3
   2a8da:	b7c5                	c.j	2a8ba <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  __value /= __b4;
   2a8dc:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   2a8e0:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   2a8e2:	b7f9                	c.j	2a8b0 <elf::strtab::get(unsigned long, unsigned long*) const+0x5c>
      { return _M_dataplus._M_p; }
   2a8e4:	6602                	c.ldsp	a2,0(sp)
      unsigned __pos = __len - 1;
   2a8e6:	67a2                	c.ldsp	a5,8(sp)
   2a8e8:	37fd                	c.addiw	a5,-1
      while (__val >= 100)
   2a8ea:	06300813          	addi	a6,zero,99
	  auto const __num = (__val % 100) * 2;
   2a8ee:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2a8f2:	0000f517          	auipc	a0,0xf
   2a8f6:	b6e53503          	ld	a0,-1170(a0) # 39460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb9b8>
      while (__val >= 100)
   2a8fa:	02886c63          	bltu	a6,s0,2a932 <elf::strtab::get(unsigned long, unsigned long*) const+0xde>
      if (__val >= 10)
   2a8fe:	47a5                	c.li	a5,9
   2a900:	0687f263          	bgeu	a5,s0,2a964 <elf::strtab::get(unsigned long, unsigned long*) const+0x110>
	  auto const __num = __val * 2;
   2a904:	0406                	c.slli	s0,0x1
	  __first[1] = __digits[__num + 1];
   2a906:	0000f797          	auipc	a5,0xf
   2a90a:	b5a7b783          	ld	a5,-1190(a5) # 39460 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb9b8>
   2a90e:	97a2                	c.add	a5,s0
   2a910:	0017c703          	lbu	a4,1(a5)
   2a914:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   2a918:	0007c783          	lbu	a5,0(a5)
   2a91c:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   2a920:	00006617          	auipc	a2,0x6
   2a924:	48860613          	addi	a2,a2,1160 # 30da8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27c8>
   2a928:	4581                	c.li	a1,0
   2a92a:	850a                	c.mv	a0,sp
   2a92c:	a15eb0ef          	jal	ra,16340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2a930:	a83d                	c.j	2a96e <elf::strtab::get(unsigned long, unsigned long*) const+0x11a>
	  auto const __num = (__val % 100) * 2;
   2a932:	02b47733          	remu	a4,s0,a1
   2a936:	0706                	c.slli	a4,0x1
	  __val /= 100;
   2a938:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   2a93c:	02079693          	slli	a3,a5,0x20
   2a940:	9281                	c.srli	a3,0x20
   2a942:	96b2                	c.add	a3,a2
   2a944:	972a                	c.add	a4,a0
   2a946:	00174883          	lbu	a7,1(a4)
   2a94a:	01168023          	sb	a7,0(a3)
	  __first[__pos - 1] = __digits[__num];
   2a94e:	fff7869b          	addiw	a3,a5,-1
   2a952:	1682                	c.slli	a3,0x20
   2a954:	9281                	c.srli	a3,0x20
   2a956:	96b2                	c.add	a3,a2
   2a958:	00074703          	lbu	a4,0(a4)
   2a95c:	00e68023          	sb	a4,0(a3)
	  __pos -= 2;
   2a960:	37f9                	c.addiw	a5,-2
   2a962:	bf61                	c.j	2a8fa <elf::strtab::get(unsigned long, unsigned long*) const+0xa6>
	__first[0] = '0' + __val;
   2a964:	0304079b          	addiw	a5,s0,48
   2a968:	0ff7f793          	andi	a5,a5,255
   2a96c:	bf45                	c.j	2a91c <elf::strtab::get(unsigned long, unsigned long*) const+0xc8>
   2a96e:	85aa                	c.mv	a1,a0
   2a970:	1000                	c.addi4spn	s0,sp,32
   2a972:	8522                	c.mv	a0,s0
   2a974:	a9deb0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2a978:	00006597          	auipc	a1,0x6
   2a97c:	44058593          	addi	a1,a1,1088 # 30db8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27d8>
   2a980:	8522                	c.mv	a0,s0
   2a982:	dbfeb0ef          	jal	ra,16740 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2a986:	85aa                	c.mv	a1,a0
   2a988:	0080                	c.addi4spn	s0,sp,64
   2a98a:	8522                	c.mv	a0,s0
   2a98c:	a85eb0ef          	jal	ra,16410 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw range_error("string offset " + std::to_string(offset) +
   2a990:	85a2                	c.mv	a1,s0
   2a992:	8526                	c.mv	a0,s1
   2a994:	dbdeb0ef          	jal	ra,16750 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2a998:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2a99a:	089c                	c.addi4spn	a5,sp,80
   2a99c:	00f50463          	beq	a0,a5,2a9a4 <elf::strtab::get(unsigned long, unsigned long*) const+0x150>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2a9a0:	b11eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a9a4:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2a9a6:	181c                	c.addi4spn	a5,sp,48
   2a9a8:	00f50463          	beq	a0,a5,2a9b0 <elf::strtab::get(unsigned long, unsigned long*) const+0x15c>
   2a9ac:	b05eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a9b0:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2a9b2:	081c                	c.addi4spn	a5,sp,16
   2a9b4:	00f50463          	beq	a0,a5,2a9bc <elf::strtab::get(unsigned long, unsigned long*) const+0x168>
   2a9b8:	af9eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                      " exceeds section size");
   2a9bc:	0000f617          	auipc	a2,0xf
   2a9c0:	a1c63603          	ld	a2,-1508(a2) # 393d8 <std::range_error::~range_error()@GLIBCXX_3.4>
   2a9c4:	0000f597          	auipc	a1,0xf
   2a9c8:	b845b583          	ld	a1,-1148(a1) # 39548 <typeinfo for std::range_error@GLIBCXX_3.4>
   2a9cc:	8526                	c.mv	a0,s1
   2a9ce:	c93eb0ef          	jal	ra,16660 <__cxa_throw@plt>
  if (p == m->end)
   2a9d2:	eaf683e3          	beq	a3,a5,2a878 <elf::strtab::get(unsigned long, unsigned long*) const+0x24>

  if (len_out)
   2a9d6:	c219                	c.beqz	a2,2a9dc <elf::strtab::get(unsigned long, unsigned long*) const+0x188>
    *len_out = p - start;
   2a9d8:	8f89                	c.sub	a5,a0
   2a9da:	e21c                	c.sd	a5,0(a2)
  return start;
}
   2a9dc:	70e6                	c.ldsp	ra,120(sp)
   2a9de:	7446                	c.ldsp	s0,112(sp)
   2a9e0:	74a6                	c.ldsp	s1,104(sp)
   2a9e2:	6109                	c.addi16sp	sp,128
   2a9e4:	8082                	c.jr	ra
   2a9e6:	0000f797          	auipc	a5,0xf
   2a9ea:	9527b783          	ld	a5,-1710(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2a9ee:	07c1                	c.addi	a5,16
   2a9f0:	e01c                	c.sd	a5,0(s0)
    throw format_error("unterminated string");
   2a9f2:	0000f617          	auipc	a2,0xf
   2a9f6:	b6e63603          	ld	a2,-1170(a2) # 39560 <elf::format_error::~format_error()@@Base+0xdbc0>
   2a9fa:	0000f597          	auipc	a1,0xf
   2a9fe:	91e5b583          	ld	a1,-1762(a1) # 39318 <typeinfo for elf::format_error@@Base+0x7d8>
   2aa02:	8522                	c.mv	a0,s0
   2aa04:	c5deb0ef          	jal	ra,16660 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2aa08:	842a                	c.mv	s0,a0
   2aa0a:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2aa0c:	089c                	c.addi4spn	a5,sp,80
   2aa0e:	00f50463          	beq	a0,a5,2aa16 <elf::strtab::get(unsigned long, unsigned long*) const+0x1c2>
   2aa12:	a9feb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2aa16:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2aa18:	181c                	c.addi4spn	a5,sp,48
   2aa1a:	00f50463          	beq	a0,a5,2aa22 <elf::strtab::get(unsigned long, unsigned long*) const+0x1ce>
   2aa1e:	a93eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2aa22:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2aa24:	081c                	c.addi4spn	a5,sp,16
   2aa26:	00f50463          	beq	a0,a5,2aa2e <elf::strtab::get(unsigned long, unsigned long*) const+0x1da>
   2aa2a:	a87eb0ef          	jal	ra,164b0 <operator delete(void*)@plt>
                      " exceeds section size");
   2aa2e:	8526                	c.mv	a0,s1
   2aa30:	a41eb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2aa34:	8522                	c.mv	a0,s0
   2aa36:	c5beb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2aa3a:	842a                	c.mv	s0,a0
   2aa3c:	bfe9                	c.j	2aa16 <elf::strtab::get(unsigned long, unsigned long*) const+0x1c2>
   2aa3e:	842a                	c.mv	s0,a0
   2aa40:	b7cd                	c.j	2aa22 <elf::strtab::get(unsigned long, unsigned long*) const+0x1ce>
   2aa42:	842a                	c.mv	s0,a0
   2aa44:	b7ed                	c.j	2aa2e <elf::strtab::get(unsigned long, unsigned long*) const+0x1da>
    throw format_error("unterminated string");
   2aa46:	84aa                	c.mv	s1,a0
   2aa48:	8522                	c.mv	a0,s0
   2aa4a:	a27eb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2aa4e:	8526                	c.mv	a0,s1
   2aa50:	c41eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002aa54 <elf::section::get_name(unsigned long*) const>:
const char *section::get_name(size_t *len_out) const {
   2aa54:	7139                	c.addi16sp	sp,-64
   2aa56:	fc06                	c.sdsp	ra,56(sp)
   2aa58:	f822                	c.sdsp	s0,48(sp)
   2aa5a:	f426                	c.sdsp	s1,40(sp)
   2aa5c:	f04a                	c.sdsp	s2,32(sp)
   2aa5e:	ec4e                	c.sdsp	s3,24(sp)
   2aa60:	842a                	c.mv	s0,a0
   2aa62:	84ae                	c.mv	s1,a1
   2aa64:	00053903          	ld	s2,0(a0)
  if (!m->name)
   2aa68:	05093783          	ld	a5,80(s2)
   2aa6c:	cf91                	c.beqz	a5,2aa88 <elf::section::get_name(unsigned long*) const+0x34>
  if (len_out)
   2aa6e:	c481                	c.beqz	s1,2aa76 <elf::section::get_name(unsigned long*) const+0x22>
    *len_out = m->name_len;
   2aa70:	601c                	c.ld	a5,0(s0)
   2aa72:	6fbc                	c.ld	a5,88(a5)
   2aa74:	e09c                	c.sd	a5,0(s1)
  return m->name;
   2aa76:	601c                	c.ld	a5,0(s0)
   2aa78:	6ba8                	c.ld	a0,80(a5)
}
   2aa7a:	70e2                	c.ldsp	ra,56(sp)
   2aa7c:	7442                	c.ldsp	s0,48(sp)
   2aa7e:	74a2                	c.ldsp	s1,40(sp)
   2aa80:	7902                	c.ldsp	s2,32(sp)
   2aa82:	69e2                	c.ldsp	s3,24(sp)
   2aa84:	6121                	c.addi16sp	sp,64
   2aa86:	8082                	c.jr	ra
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   2aa88:	854a                	c.mv	a0,s2
   2aa8a:	95fff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2aa8e:	03e55583          	lhu	a1,62(a0)
   2aa92:	854a                	c.mv	a0,s2
   2aa94:	9a9ff0ef          	jal	ra,2a43c <elf::elf::get_section(unsigned int) const>
   2aa98:	85aa                	c.mv	a1,a0
                  .as_strtab()
   2aa9a:	890a                	c.mv	s2,sp
   2aa9c:	854a                	c.mv	a0,s2
   2aa9e:	c87ff0ef          	jal	ra,2a724 <elf::section::as_strtab() const>
   2aaa2:	00043983          	ld	s3,0(s0)
                  .get(m->hdr.name, &m->name_len);
   2aaa6:	05898613          	addi	a2,s3,88
   2aaaa:	0109e583          	lwu	a1,16(s3)
   2aaae:	854a                	c.mv	a0,s2
   2aab0:	da5ff0ef          	jal	ra,2a854 <elf::strtab::get(unsigned long, unsigned long*) const>
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   2aab4:	04a9b823          	sd	a0,80(s3)
	if (_M_pi != nullptr)
   2aab8:	6922                	c.ldsp	s2,8(sp)
   2aaba:	fa090ae3          	beq	s2,zero,2aa6e <elf::section::get_name(unsigned long*) const+0x1a>
    if (__is_single_threaded())
   2aabe:	0000f797          	auipc	a5,0xf
   2aac2:	9ba7b783          	ld	a5,-1606(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2aac6:	0007c783          	lbu	a5,0(a5)
   2aaca:	c7b9                	c.beqz	a5,2ab18 <elf::section::get_name(unsigned long*) const+0xc4>
    _Atomic_word __result = *__mem;
   2aacc:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   2aad0:	fff5079b          	addiw	a5,a0,-1
   2aad4:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2aad8:	4785                	c.li	a5,1
   2aada:	f8f51ae3          	bne	a0,a5,2aa6e <elf::section::get_name(unsigned long*) const+0x1a>
	_M_dispose();
   2aade:	00093783          	ld	a5,0(s2)
   2aae2:	6b9c                	c.ld	a5,16(a5)
   2aae4:	854a                	c.mv	a0,s2
   2aae6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2aae8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2aaec:	0000f797          	auipc	a5,0xf
   2aaf0:	98c7b783          	ld	a5,-1652(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2aaf4:	0007c783          	lbu	a5,0(a5)
   2aaf8:	c795                	c.beqz	a5,2ab24 <elf::section::get_name(unsigned long*) const+0xd0>
    _Atomic_word __result = *__mem;
   2aafa:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   2aafe:	fff5079b          	addiw	a5,a0,-1
   2ab02:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2ab06:	4785                	c.li	a5,1
   2ab08:	f6f513e3          	bne	a0,a5,2aa6e <elf::section::get_name(unsigned long*) const+0x1a>
	    _M_destroy();
   2ab0c:	00093783          	ld	a5,0(s2)
   2ab10:	6f9c                	c.ld	a5,24(a5)
   2ab12:	854a                	c.mv	a0,s2
   2ab14:	9782                	c.jalr	a5
   2ab16:	bfa1                	c.j	2aa6e <elf::section::get_name(unsigned long*) const+0x1a>
      return __exchange_and_add(__mem, __val);
   2ab18:	55fd                	c.li	a1,-1
   2ab1a:	03090513          	addi	a0,s2,48
   2ab1e:	813eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ab22:	bf5d                	c.j	2aad8 <elf::section::get_name(unsigned long*) const+0x84>
   2ab24:	55fd                	c.li	a1,-1
   2ab26:	03490513          	addi	a0,s2,52
   2ab2a:	807eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ab2e:	bfe1                	c.j	2ab06 <elf::section::get_name(unsigned long*) const+0xb2>
	if (_M_pi != nullptr)
   2ab30:	842a                	c.mv	s0,a0
   2ab32:	6522                	c.ldsp	a0,8(sp)
   2ab34:	c511                	c.beqz	a0,2ab40 <elf::section::get_name(unsigned long*) const+0xec>
	  _M_pi->_M_release();
   2ab36:	0000f317          	auipc	t1,0xf
   2ab3a:	88a33303          	ld	t1,-1910(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2ab3e:	9302                	c.jalr	t1
   2ab40:	8522                	c.mv	a0,s0
   2ab42:	b4feb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002ab46 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
const section &elf::get_section(const std::string &name) const {
   2ab46:	7179                	c.addi16sp	sp,-48
   2ab48:	f406                	c.sdsp	ra,40(sp)
   2ab4a:	f022                	c.sdsp	s0,32(sp)
   2ab4c:	ec26                	c.sdsp	s1,24(sp)
   2ab4e:	e84a                	c.sdsp	s2,16(sp)
   2ab50:	e44e                	c.sdsp	s3,8(sp)
   2ab52:	e052                	c.sdsp	s4,0(sp)
   2ab54:	8a2a                	c.mv	s4,a0
   2ab56:	84ae                	c.mv	s1,a1
  for (auto &sec : sections())
   2ab58:	8d5ff0ef          	jal	ra,2a42c <elf::elf::sections() const>
      : _M_current(__i) { }
   2ab5c:	6100                	c.ld	s0,0(a0)
   2ab5e:	00853983          	ld	s3,8(a0)
   2ab62:	01340f63          	beq	s0,s3,2ab80 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x3a>
   2ab66:	8922                	c.mv	s2,s0
    if (name == sec.get_name(nullptr))
   2ab68:	4581                	c.li	a1,0
   2ab6a:	8522                	c.mv	a0,s0
   2ab6c:	ee9ff0ef          	jal	ra,2aa54 <elf::section::get_name(unsigned long*) const>
    { return __lhs.compare(__rhs) == 0; }
   2ab70:	85aa                	c.mv	a1,a0
   2ab72:	8526                	c.mv	a0,s1
   2ab74:	fdceb0ef          	jal	ra,16350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   2ab78:	c901                	c.beqz	a0,2ab88 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x42>
  for (auto &sec : sections())
   2ab7a:	0441                	c.addi	s0,16
   2ab7c:	fe8995e3          	bne	s3,s0,2ab66 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x20>
  return m->invalid_section;
   2ab80:	000a3903          	ld	s2,0(s4)
   2ab84:	08090913          	addi	s2,s2,128
}
   2ab88:	854a                	c.mv	a0,s2
   2ab8a:	70a2                	c.ldsp	ra,40(sp)
   2ab8c:	7402                	c.ldsp	s0,32(sp)
   2ab8e:	64e2                	c.ldsp	s1,24(sp)
   2ab90:	6942                	c.ldsp	s2,16(sp)
   2ab92:	69a2                	c.ldsp	s3,8(sp)
   2ab94:	6a02                	c.ldsp	s4,0(sp)
   2ab96:	6145                	c.addi16sp	sp,48
   2ab98:	8082                	c.jr	ra

000000000002ab9a <elf::sym::get_name(unsigned long*) const>:

sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const char *sym::get_name(size_t *len_out) const {
   2ab9a:	1141                	c.addi	sp,-16
   2ab9c:	e406                	c.sdsp	ra,8(sp)
   2ab9e:	862e                	c.mv	a2,a1
  return strs.get(get_data().name, len_out);
   2aba0:	01056583          	lwu	a1,16(a0)
   2aba4:	cb1ff0ef          	jal	ra,2a854 <elf::strtab::get(unsigned long, unsigned long*) const>
}
   2aba8:	60a2                	c.ldsp	ra,8(sp)
   2abaa:	0141                	c.addi	sp,16
   2abac:	8082                	c.jr	ra

000000000002abae <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>:
  const elf f;
  const char *data, *end;
  const strtab strs;
};

symtab::symtab(elf f, const void *data, size_t size, strtab strs)
   2abae:	715d                	c.addi16sp	sp,-80
   2abb0:	e486                	c.sdsp	ra,72(sp)
   2abb2:	e0a2                	c.sdsp	s0,64(sp)
   2abb4:	fc26                	c.sdsp	s1,56(sp)
   2abb6:	f84a                	c.sdsp	s2,48(sp)
   2abb8:	f44e                	c.sdsp	s3,40(sp)
   2abba:	f052                	c.sdsp	s4,32(sp)
   2abbc:	ec56                	c.sdsp	s5,24(sp)
   2abbe:	e85a                	c.sdsp	s6,16(sp)
   2abc0:	e45e                	c.sdsp	s7,8(sp)
   2abc2:	892a                	c.mv	s2,a0
   2abc4:	8a2e                	c.mv	s4,a1
   2abc6:	89b2                	c.mv	s3,a2
   2abc8:	84ba                	c.mv	s1,a4
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size,
   2abca:	00d60ab3          	add	s5,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2abce:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2abd2:	06800513          	addi	a0,zero,104
   2abd6:	8ebeb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2abda:	842a                	c.mv	s0,a0
   2abdc:	00052423          	sw	zero,8(a0)
   2abe0:	00052623          	sw	zero,12(a0)
   2abe4:	00052823          	sw	zero,16(a0)
   2abe8:	00052a23          	sw	zero,20(a0)
   2abec:	00052c23          	sw	zero,24(a0)
   2abf0:	00052e23          	sw	zero,28(a0)
   2abf4:	02053023          	sd	zero,32(a0)
   2abf8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2abfc:	4785                	c.li	a5,1
   2abfe:	d91c                	c.sw	a5,48(a0)
   2ac00:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2ac02:	0000e797          	auipc	a5,0xe
   2ac06:	73e7b783          	ld	a5,1854(a5) # 39340 <vtable for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x628>
   2ac0a:	07c1                	c.addi	a5,16
   2ac0c:	e11c                	c.sd	a5,0(a0)
   2ac0e:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ac12:	0004bb83          	ld	s7,0(s1)
      : _M_pi(__r._M_pi)
   2ac16:	6484                	c.ld	s1,8(s1)
	if (_M_pi != nullptr)
   2ac18:	c899                	c.beqz	s1,2ac2e <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x80>
    if (__is_single_threaded())
   2ac1a:	0000f797          	auipc	a5,0xf
   2ac1e:	85e7b783          	ld	a5,-1954(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ac22:	0007c783          	lbu	a5,0(a5)
   2ac26:	cfad                	c.beqz	a5,2aca0 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xf2>
  { *__mem += __val; }
   2ac28:	589c                	c.lw	a5,48(s1)
   2ac2a:	2785                	c.addiw	a5,1
   2ac2c:	d89c                	c.sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ac2e:	000a3783          	ld	a5,0(s4)
   2ac32:	fc1c                	c.sd	a5,56(s0)
      : _M_pi(__r._M_pi)
   2ac34:	008a3503          	ld	a0,8(s4)
   2ac38:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2ac3a:	c919                	c.beqz	a0,2ac50 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xa2>
    if (__is_single_threaded())
   2ac3c:	0000f717          	auipc	a4,0xf
   2ac40:	83c73703          	ld	a4,-1988(a4) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ac44:	00074703          	lbu	a4,0(a4)
   2ac48:	c335                	c.beqz	a4,2acac <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xfe>
  { *__mem += __val; }
   2ac4a:	5918                	c.lw	a4,48(a0)
   2ac4c:	2705                	c.addiw	a4,1
   2ac4e:	d918                	c.sw	a4,48(a0)
      : f(f), data(data), end(end), strs(strs) {}
   2ac50:	05343423          	sd	s3,72(s0)
   2ac54:	05543823          	sd	s5,80(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ac58:	05743c23          	sd	s7,88(s0)
      : _M_pi(__r._M_pi)
   2ac5c:	f024                	c.sd	s1,96(s0)
	if (_M_pi != nullptr)
   2ac5e:	c095                	c.beqz	s1,2ac82 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
    if (__is_single_threaded())
   2ac60:	0000f797          	auipc	a5,0xf
   2ac64:	8187b783          	ld	a5,-2024(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ac68:	0007c783          	lbu	a5,0(a5)
   2ac6c:	c7b1                	c.beqz	a5,2acb8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x10a>
  { *__mem += __val; }
   2ac6e:	589c                	c.lw	a5,48(s1)
   2ac70:	2785                	c.addiw	a5,1
   2ac72:	d89c                	c.sw	a5,48(s1)
    _Atomic_word __result = *__mem;
   2ac74:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2ac76:	fff5079b          	addiw	a5,a0,-1
   2ac7a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2ac7c:	4785                	c.li	a5,1
   2ac7e:	04f50f63          	beq	a0,a5,2acdc <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x12e>
	  _M_pi = __pi;
   2ac82:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2ac86:	01693023          	sd	s6,0(s2)
                          strs)) {}
   2ac8a:	60a6                	c.ldsp	ra,72(sp)
   2ac8c:	6406                	c.ldsp	s0,64(sp)
   2ac8e:	74e2                	c.ldsp	s1,56(sp)
   2ac90:	7942                	c.ldsp	s2,48(sp)
   2ac92:	79a2                	c.ldsp	s3,40(sp)
   2ac94:	7a02                	c.ldsp	s4,32(sp)
   2ac96:	6ae2                	c.ldsp	s5,24(sp)
   2ac98:	6b42                	c.ldsp	s6,16(sp)
   2ac9a:	6ba2                	c.ldsp	s7,8(sp)
   2ac9c:	6161                	c.addi16sp	sp,80
   2ac9e:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2aca0:	4585                	c.li	a1,1
   2aca2:	03048513          	addi	a0,s1,48
   2aca6:	e5aeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2acaa:	b751                	c.j	2ac2e <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x80>
   2acac:	4585                	c.li	a1,1
   2acae:	03050513          	addi	a0,a0,48
   2acb2:	e4eeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2acb6:	bf69                	c.j	2ac50 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xa2>
   2acb8:	4585                	c.li	a1,1
   2acba:	03048513          	addi	a0,s1,48
   2acbe:	e42eb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   2acc2:	0000e797          	auipc	a5,0xe
   2acc6:	7b67b783          	ld	a5,1974(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2acca:	0007c783          	lbu	a5,0(a5)
   2acce:	f3dd                	c.bnez	a5,2ac74 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xc6>
      return __exchange_and_add(__mem, __val);
   2acd0:	55fd                	c.li	a1,-1
   2acd2:	03048513          	addi	a0,s1,48
   2acd6:	e5aeb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2acda:	b74d                	c.j	2ac7c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xce>
	_M_dispose();
   2acdc:	609c                	c.ld	a5,0(s1)
   2acde:	6b9c                	c.ld	a5,16(a5)
   2ace0:	8526                	c.mv	a0,s1
   2ace2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2ace4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2ace8:	0000e797          	auipc	a5,0xe
   2acec:	7907b783          	ld	a5,1936(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2acf0:	0007c783          	lbu	a5,0(a5)
   2acf4:	cf89                	c.beqz	a5,2ad0e <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x160>
    _Atomic_word __result = *__mem;
   2acf6:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2acf8:	fff5079b          	addiw	a5,a0,-1
   2acfc:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2acfe:	4785                	c.li	a5,1
   2ad00:	f8f511e3          	bne	a0,a5,2ac82 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
	    _M_destroy();
   2ad04:	609c                	c.ld	a5,0(s1)
   2ad06:	6f9c                	c.ld	a5,24(a5)
   2ad08:	8526                	c.mv	a0,s1
   2ad0a:	9782                	c.jalr	a5
   2ad0c:	bf9d                	c.j	2ac82 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
      return __exchange_and_add(__mem, __val);
   2ad0e:	55fd                	c.li	a1,-1
   2ad10:	03448513          	addi	a0,s1,52
   2ad14:	e1ceb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ad18:	b7dd                	c.j	2acfe <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x150>

000000000002ad1a <elf::section::as_symtab() const>:
symtab section::as_symtab() const {
   2ad1a:	715d                	c.addi16sp	sp,-80
   2ad1c:	e486                	c.sdsp	ra,72(sp)
   2ad1e:	e0a2                	c.sdsp	s0,64(sp)
   2ad20:	fc26                	c.sdsp	s1,56(sp)
   2ad22:	f84a                	c.sdsp	s2,48(sp)
   2ad24:	f44e                	c.sdsp	s3,40(sp)
   2ad26:	f052                	c.sdsp	s4,32(sp)
   2ad28:	84aa                	c.mv	s1,a0
   2ad2a:	842e                	c.mv	s0,a1
      { return _M_ptr; }
   2ad2c:	619c                	c.ld	a5,0(a1)
  if (m->hdr.type != sht::symtab && m->hdr.type != sht::dynsym)
   2ad2e:	4bd8                	c.lw	a4,20(a5)
   2ad30:	4689                	c.li	a3,2
   2ad32:	00d70563          	beq	a4,a3,2ad3c <elf::section::as_symtab() const+0x22>
   2ad36:	46ad                	c.li	a3,11
   2ad38:	02d71563          	bne	a4,a3,2ad62 <elf::section::as_symtab() const+0x48>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ad3c:	6398                	c.ld	a4,0(a5)
   2ad3e:	e03a                	c.sdsp	a4,0(sp)
      : _M_pi(__r._M_pi)
   2ad40:	6788                	c.ld	a0,8(a5)
   2ad42:	e42a                	c.sdsp	a0,8(sp)
	if (_M_pi != nullptr)
   2ad44:	c919                	c.beqz	a0,2ad5a <elf::section::as_symtab() const+0x40>
    if (__is_single_threaded())
   2ad46:	0000e797          	auipc	a5,0xe
   2ad4a:	7327b783          	ld	a5,1842(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ad4e:	0007c783          	lbu	a5,0(a5)
   2ad52:	c3b9                	c.beqz	a5,2ad98 <elf::section::as_symtab() const+0x7e>
  { *__mem += __val; }
   2ad54:	591c                	c.lw	a5,48(a0)
   2ad56:	2785                	c.addiw	a5,1
   2ad58:	d91c                	c.sw	a5,48(a0)
                m->f.get_section(get_hdr().link).as_strtab());
   2ad5a:	8522                	c.mv	a0,s0
   2ad5c:	85dff0ef          	jal	ra,2a5b8 <elf::section::data() const>
   2ad60:	a091                	c.j	2ada4 <elf::section::as_symtab() const+0x8a>
    throw section_type_mismatch("cannot use section as symtab");
   2ad62:	4541                	c.li	a0,16
   2ad64:	e6ceb0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2ad68:	842a                	c.mv	s0,a0
      : std::logic_error(what_arg) {}
   2ad6a:	00006597          	auipc	a1,0x6
   2ad6e:	06658593          	addi	a1,a1,102 # 30dd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27f0>
   2ad72:	faeeb0ef          	jal	ra,16520 <std::logic_error::logic_error(char const*)@plt>
   2ad76:	0000e797          	auipc	a5,0xe
   2ad7a:	63a7b783          	ld	a5,1594(a5) # 393b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   2ad7e:	07c1                	c.addi	a5,16
   2ad80:	e01c                	c.sd	a5,0(s0)
   2ad82:	0000e617          	auipc	a2,0xe
   2ad86:	51e63603          	ld	a2,1310(a2) # 392a0 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xd7e0>
   2ad8a:	0000e597          	auipc	a1,0xe
   2ad8e:	54e5b583          	ld	a1,1358(a1) # 392d8 <typeinfo for elf::section_type_mismatch@@Base+0x780>
   2ad92:	8522                	c.mv	a0,s0
   2ad94:	8cdeb0ef          	jal	ra,16660 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   2ad98:	4585                	c.li	a1,1
   2ad9a:	03050513          	addi	a0,a0,48
   2ad9e:	d62eb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2ada2:	bf65                	c.j	2ad5a <elf::section::as_symtab() const+0x40>
                m->f.get_section(get_hdr().link).as_strtab());
   2ada4:	892a                	c.mv	s2,a0
   2ada6:	8522                	c.mv	a0,s0
   2ada8:	8d1ff0ef          	jal	ra,2a678 <elf::section::size() const>
   2adac:	89aa                	c.mv	s3,a0
   2adae:	00043a03          	ld	s4,0(s0)
   2adb2:	8522                	c.mv	a0,s0
   2adb4:	ffeff0ef          	jal	ra,2a5b2 <elf::section::get_hdr() const>
   2adb8:	02855583          	lhu	a1,40(a0)
   2adbc:	8552                	c.mv	a0,s4
   2adbe:	e7eff0ef          	jal	ra,2a43c <elf::elf::get_section(unsigned int) const>
   2adc2:	85aa                	c.mv	a1,a0
   2adc4:	0808                	c.addi4spn	a0,sp,16
   2adc6:	95fff0ef          	jal	ra,2a724 <elf::section::as_strtab() const>
   2adca:	0818                	c.addi4spn	a4,sp,16
   2adcc:	86ce                	c.mv	a3,s3
   2adce:	864a                	c.mv	a2,s2
   2add0:	858a                	c.mv	a1,sp
   2add2:	8526                	c.mv	a0,s1
   2add4:	ddbff0ef          	jal	ra,2abae <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>
	if (_M_pi != nullptr)
   2add8:	6462                	c.ldsp	s0,24(sp)
   2adda:	cc19                	c.beqz	s0,2adf8 <elf::section::as_symtab() const+0xde>
    if (__is_single_threaded())
   2addc:	0000e797          	auipc	a5,0xe
   2ade0:	69c7b783          	ld	a5,1692(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ade4:	0007c783          	lbu	a5,0(a5)
   2ade8:	c3a9                	c.beqz	a5,2ae2a <elf::section::as_symtab() const+0x110>
    _Atomic_word __result = *__mem;
   2adea:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2adec:	fff5079b          	addiw	a5,a0,-1
   2adf0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2adf2:	4785                	c.li	a5,1
   2adf4:	04f50163          	beq	a0,a5,2ae36 <elf::section::as_symtab() const+0x11c>
	if (_M_pi != nullptr)
   2adf8:	6422                	c.ldsp	s0,8(sp)
   2adfa:	cc19                	c.beqz	s0,2ae18 <elf::section::as_symtab() const+0xfe>
    if (__is_single_threaded())
   2adfc:	0000e797          	auipc	a5,0xe
   2ae00:	67c7b783          	ld	a5,1660(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ae04:	0007c783          	lbu	a5,0(a5)
   2ae08:	c7b5                	c.beqz	a5,2ae74 <elf::section::as_symtab() const+0x15a>
    _Atomic_word __result = *__mem;
   2ae0a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2ae0c:	fff5079b          	addiw	a5,a0,-1
   2ae10:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2ae12:	4785                	c.li	a5,1
   2ae14:	06f50663          	beq	a0,a5,2ae80 <elf::section::as_symtab() const+0x166>
}
   2ae18:	8526                	c.mv	a0,s1
   2ae1a:	60a6                	c.ldsp	ra,72(sp)
   2ae1c:	6406                	c.ldsp	s0,64(sp)
   2ae1e:	74e2                	c.ldsp	s1,56(sp)
   2ae20:	7942                	c.ldsp	s2,48(sp)
   2ae22:	79a2                	c.ldsp	s3,40(sp)
   2ae24:	7a02                	c.ldsp	s4,32(sp)
   2ae26:	6161                	c.addi16sp	sp,80
   2ae28:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2ae2a:	55fd                	c.li	a1,-1
   2ae2c:	03040513          	addi	a0,s0,48
   2ae30:	d00eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ae34:	bf7d                	c.j	2adf2 <elf::section::as_symtab() const+0xd8>
	_M_dispose();
   2ae36:	601c                	c.ld	a5,0(s0)
   2ae38:	6b9c                	c.ld	a5,16(a5)
   2ae3a:	8522                	c.mv	a0,s0
   2ae3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2ae3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2ae42:	0000e797          	auipc	a5,0xe
   2ae46:	6367b783          	ld	a5,1590(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ae4a:	0007c783          	lbu	a5,0(a5)
   2ae4e:	cf89                	c.beqz	a5,2ae68 <elf::section::as_symtab() const+0x14e>
    _Atomic_word __result = *__mem;
   2ae50:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2ae52:	fff5079b          	addiw	a5,a0,-1
   2ae56:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2ae58:	4785                	c.li	a5,1
   2ae5a:	f8f51fe3          	bne	a0,a5,2adf8 <elf::section::as_symtab() const+0xde>
	    _M_destroy();
   2ae5e:	601c                	c.ld	a5,0(s0)
   2ae60:	6f9c                	c.ld	a5,24(a5)
   2ae62:	8522                	c.mv	a0,s0
   2ae64:	9782                	c.jalr	a5
   2ae66:	bf49                	c.j	2adf8 <elf::section::as_symtab() const+0xde>
      return __exchange_and_add(__mem, __val);
   2ae68:	55fd                	c.li	a1,-1
   2ae6a:	03440513          	addi	a0,s0,52
   2ae6e:	cc2eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ae72:	b7dd                	c.j	2ae58 <elf::section::as_symtab() const+0x13e>
   2ae74:	55fd                	c.li	a1,-1
   2ae76:	03040513          	addi	a0,s0,48
   2ae7a:	cb6eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ae7e:	bf51                	c.j	2ae12 <elf::section::as_symtab() const+0xf8>
	_M_dispose();
   2ae80:	601c                	c.ld	a5,0(s0)
   2ae82:	6b9c                	c.ld	a5,16(a5)
   2ae84:	8522                	c.mv	a0,s0
   2ae86:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2ae88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2ae8c:	0000e797          	auipc	a5,0xe
   2ae90:	5ec7b783          	ld	a5,1516(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ae94:	0007c783          	lbu	a5,0(a5)
   2ae98:	cf89                	c.beqz	a5,2aeb2 <elf::section::as_symtab() const+0x198>
    _Atomic_word __result = *__mem;
   2ae9a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2ae9c:	fff5079b          	addiw	a5,a0,-1
   2aea0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2aea2:	4785                	c.li	a5,1
   2aea4:	f6f51ae3          	bne	a0,a5,2ae18 <elf::section::as_symtab() const+0xfe>
	    _M_destroy();
   2aea8:	601c                	c.ld	a5,0(s0)
   2aeaa:	6f9c                	c.ld	a5,24(a5)
   2aeac:	8522                	c.mv	a0,s0
   2aeae:	9782                	c.jalr	a5
                m->f.get_section(get_hdr().link).as_strtab());
   2aeb0:	b7a5                	c.j	2ae18 <elf::section::as_symtab() const+0xfe>
      return __exchange_and_add(__mem, __val);
   2aeb2:	55fd                	c.li	a1,-1
   2aeb4:	03440513          	addi	a0,s0,52
   2aeb8:	c78eb0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2aebc:	b7dd                	c.j	2aea2 <elf::section::as_symtab() const+0x188>
    throw section_type_mismatch("cannot use section as symtab");
   2aebe:	84aa                	c.mv	s1,a0
   2aec0:	8522                	c.mv	a0,s0
   2aec2:	daeeb0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2aec6:	8526                	c.mv	a0,s1
   2aec8:	fc8eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2aecc:	842a                	c.mv	s0,a0
   2aece:	6562                	c.ldsp	a0,24(sp)
   2aed0:	c511                	c.beqz	a0,2aedc <elf::section::as_symtab() const+0x1c2>
	  _M_pi->_M_release();
   2aed2:	0000e317          	auipc	t1,0xe
   2aed6:	4ee33303          	ld	t1,1262(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2aeda:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   2aedc:	6522                	c.ldsp	a0,8(sp)
   2aede:	c511                	c.beqz	a0,2aeea <elf::section::as_symtab() const+0x1d0>
	  _M_pi->_M_release();
   2aee0:	0000e317          	auipc	t1,0xe
   2aee4:	4e033303          	ld	t1,1248(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2aee8:	9302                	c.jalr	t1
   2aeea:	8522                	c.mv	a0,s0
   2aeec:	fa4eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2aef0:	842a                	c.mv	s0,a0
   2aef2:	b7ed                	c.j	2aedc <elf::section::as_symtab() const+0x1c2>

000000000002aef4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>:

symtab::iterator::iterator(const symtab &tab, const char *pos)
   2aef4:	1101                	c.addi	sp,-32
   2aef6:	ec06                	c.sdsp	ra,24(sp)
   2aef8:	e822                	c.sdsp	s0,16(sp)
   2aefa:	e426                	c.sdsp	s1,8(sp)
   2aefc:	e04a                	c.sdsp	s2,0(sp)
   2aefe:	842a                	c.mv	s0,a0
   2af00:	84ae                	c.mv	s1,a1
   2af02:	8932                	c.mv	s2,a2
      { return _M_ptr; }
   2af04:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2af06:	6398                	c.ld	a4,0(a5)
   2af08:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   2af0a:	6788                	c.ld	a0,8(a5)
   2af0c:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2af0e:	c919                	c.beqz	a0,2af24 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x30>
    if (__is_single_threaded())
   2af10:	0000e797          	auipc	a5,0xe
   2af14:	5687b783          	ld	a5,1384(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2af18:	0007c783          	lbu	a5,0(a5)
   2af1c:	cb95                	c.beqz	a5,2af50 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x5c>
  { *__mem += __val; }
   2af1e:	591c                	c.lw	a5,48(a0)
   2af20:	2785                	c.addiw	a5,1
   2af22:	d91c                	c.sw	a5,48(a0)
      { return _M_ptr; }
   2af24:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2af26:	7398                	c.ld	a4,32(a5)
   2af28:	e818                	c.sd	a4,16(s0)
      : _M_pi(__r._M_pi)
   2af2a:	7788                	c.ld	a0,40(a5)
   2af2c:	ec08                	c.sd	a0,24(s0)
	if (_M_pi != nullptr)
   2af2e:	c919                	c.beqz	a0,2af44 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x50>
    if (__is_single_threaded())
   2af30:	0000e797          	auipc	a5,0xe
   2af34:	5487b783          	ld	a5,1352(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2af38:	0007c783          	lbu	a5,0(a5)
   2af3c:	c385                	c.beqz	a5,2af5c <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x68>
  { *__mem += __val; }
   2af3e:	591c                	c.lw	a5,48(a0)
   2af40:	2785                	c.addiw	a5,1
   2af42:	d91c                	c.sw	a5,48(a0)
    : f(tab.m->f), strs(tab.m->strs), pos(pos) {
   2af44:	03243023          	sd	s2,32(s0)
  if (f.get_hdr().ei_class == elfclass::_32)
   2af48:	8522                	c.mv	a0,s0
   2af4a:	c9eff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2af4e:	a829                	c.j	2af68 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x74>
      __atomic_add(__mem, __val);
   2af50:	4585                	c.li	a1,1
   2af52:	03050513          	addi	a0,a0,48
   2af56:	baaeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2af5a:	b7e9                	c.j	2af24 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x30>
   2af5c:	4585                	c.li	a1,1
   2af5e:	03050513          	addi	a0,a0,48
   2af62:	b9eeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2af66:	bff9                	c.j	2af44 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x50>
   2af68:	00454683          	lbu	a3,4(a0)
   2af6c:	4705                	c.li	a4,1
    stride = sizeof(Sym<Elf32>);
  else
    stride = sizeof(Sym<Elf64>);
   2af6e:	47e1                	c.li	a5,24
  if (f.get_hdr().ei_class == elfclass::_32)
   2af70:	00e68963          	beq	a3,a4,2af82 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x8e>
   2af74:	f41c                	c.sd	a5,40(s0)
}
   2af76:	60e2                	c.ldsp	ra,24(sp)
   2af78:	6442                	c.ldsp	s0,16(sp)
   2af7a:	64a2                	c.ldsp	s1,8(sp)
   2af7c:	6902                	c.ldsp	s2,0(sp)
   2af7e:	6105                	c.addi16sp	sp,32
   2af80:	8082                	c.jr	ra
    stride = sizeof(Sym<Elf32>);
   2af82:	47c1                	c.li	a5,16
   2af84:	bfc5                	c.j	2af74 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x80>
	if (_M_pi != nullptr)
   2af86:	84aa                	c.mv	s1,a0
   2af88:	6c08                	c.ld	a0,24(s0)
   2af8a:	c511                	c.beqz	a0,2af96 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xa2>
	  _M_pi->_M_release();
   2af8c:	0000e317          	auipc	t1,0xe
   2af90:	43433303          	ld	t1,1076(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2af94:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   2af96:	6408                	c.ld	a0,8(s0)
   2af98:	c511                	c.beqz	a0,2afa4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xb0>
	  _M_pi->_M_release();
   2af9a:	0000e317          	auipc	t1,0xe
   2af9e:	42633303          	ld	t1,1062(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2afa2:	9302                	c.jalr	t1
   2afa4:	8526                	c.mv	a0,s1
   2afa6:	eeaeb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002afaa <elf::symtab::begin() const>:

symtab::iterator symtab::begin() const { return iterator(*this, m->data); }
   2afaa:	1141                	c.addi	sp,-16
   2afac:	e406                	c.sdsp	ra,8(sp)
   2afae:	e022                	c.sdsp	s0,0(sp)
   2afb0:	842a                	c.mv	s0,a0
   2afb2:	619c                	c.ld	a5,0(a1)
   2afb4:	6b90                	c.ld	a2,16(a5)
   2afb6:	f3fff0ef          	jal	ra,2aef4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   2afba:	8522                	c.mv	a0,s0
   2afbc:	60a2                	c.ldsp	ra,8(sp)
   2afbe:	6402                	c.ldsp	s0,0(sp)
   2afc0:	0141                	c.addi	sp,16
   2afc2:	8082                	c.jr	ra

000000000002afc4 <elf::symtab::end() const>:

symtab::iterator symtab::end() const { return iterator(*this, m->end); }
   2afc4:	1141                	c.addi	sp,-16
   2afc6:	e406                	c.sdsp	ra,8(sp)
   2afc8:	e022                	c.sdsp	s0,0(sp)
   2afca:	842a                	c.mv	s0,a0
   2afcc:	619c                	c.ld	a5,0(a1)
   2afce:	6f90                	c.ld	a2,24(a5)
   2afd0:	f25ff0ef          	jal	ra,2aef4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   2afd4:	8522                	c.mv	a0,s0
   2afd6:	60a2                	c.ldsp	ra,8(sp)
   2afd8:	6402                	c.ldsp	s0,0(sp)
   2afda:	0141                	c.addi	sp,16
   2afdc:	8082                	c.jr	ra

000000000002afde <elf::segment::segment(elf::elf const&, void const*)>:
segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   2afde:	7179                	c.addi16sp	sp,-48
   2afe0:	f406                	c.sdsp	ra,40(sp)
   2afe2:	f022                	c.sdsp	s0,32(sp)
   2afe4:	ec26                	c.sdsp	s1,24(sp)
   2afe6:	e84a                	c.sdsp	s2,16(sp)
   2afe8:	e44e                	c.sdsp	s3,8(sp)
   2afea:	e052                	c.sdsp	s4,0(sp)
   2afec:	892a                	c.mv	s2,a0
   2afee:	84ae                	c.mv	s1,a1
   2aff0:	89b2                	c.mv	s3,a2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2aff2:	00053023          	sd	zero,0(a0)
   2aff6:	08800513          	addi	a0,zero,136
   2affa:	cc6eb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2affe:	842a                	c.mv	s0,a0
   2b000:	00052423          	sw	zero,8(a0)
   2b004:	00052623          	sw	zero,12(a0)
   2b008:	00052823          	sw	zero,16(a0)
   2b00c:	00052a23          	sw	zero,20(a0)
   2b010:	00052c23          	sw	zero,24(a0)
   2b014:	00052e23          	sw	zero,28(a0)
   2b018:	02053023          	sd	zero,32(a0)
   2b01c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2b020:	4785                	c.li	a5,1
   2b022:	d91c                	c.sw	a5,48(a0)
   2b024:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2b026:	0000e797          	auipc	a5,0xe
   2b02a:	44a7b783          	ld	a5,1098(a5) # 39470 <vtable for std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x800>
   2b02e:	07c1                	c.addi	a5,16
   2b030:	e11c                	c.sd	a5,0(a0)
   2b032:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b036:	609c                	c.ld	a5,0(s1)
   2b038:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2b03a:	6488                	c.ld	a0,8(s1)
   2b03c:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2b03e:	c919                	c.beqz	a0,2b054 <elf::segment::segment(elf::elf const&, void const*)+0x76>
    if (__is_single_threaded())
   2b040:	0000e717          	auipc	a4,0xe
   2b044:	43873703          	ld	a4,1080(a4) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b048:	00074703          	lbu	a4,0(a4)
   2b04c:	c305                	c.beqz	a4,2b06c <elf::segment::segment(elf::elf const&, void const*)+0x8e>
  { *__mem += __val; }
   2b04e:	5918                	c.lw	a4,48(a0)
   2b050:	2705                	c.addiw	a4,1
   2b052:	d918                	c.sw	a4,48(a0)
  impl(const elf &f) : f(f), data(nullptr) {}
   2b054:	08043023          	sd	zero,128(s0)
	  _M_pi = __pi;
   2b058:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2b05c:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2b060:	04840413          	addi	s0,s0,72
   2b064:	8526                	c.mv	a0,s1
   2b066:	b82ff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2b06a:	a039                	c.j	2b078 <elf::segment::segment(elf::elf const&, void const*)+0x9a>
      __atomic_add(__mem, __val);
   2b06c:	4585                	c.li	a1,1
   2b06e:	03050513          	addi	a0,a0,48
   2b072:	a8eeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b076:	bff9                	c.j	2b054 <elf::segment::segment(elf::elf const&, void const*)+0x76>
   2b078:	00454a03          	lbu	s4,4(a0)
   2b07c:	8526                	c.mv	a0,s1
   2b07e:	b6aff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2b082:	00554683          	lbu	a3,5(a0)
   2b086:	8652                	c.mv	a2,s4
   2b088:	85ce                	c.mv	a1,s3
   2b08a:	8522                	c.mv	a0,s0
   2b08c:	0000e317          	auipc	t1,0xe
   2b090:	53c33303          	ld	t1,1340(t1) # 395c8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd046>
   2b094:	9302                	c.jalr	t1
}
   2b096:	70a2                	c.ldsp	ra,40(sp)
   2b098:	7402                	c.ldsp	s0,32(sp)
   2b09a:	64e2                	c.ldsp	s1,24(sp)
   2b09c:	6942                	c.ldsp	s2,16(sp)
   2b09e:	69a2                	c.ldsp	s3,8(sp)
   2b0a0:	6a02                	c.ldsp	s4,0(sp)
   2b0a2:	6145                	c.addi16sp	sp,48
   2b0a4:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2b0a6:	842a                	c.mv	s0,a0
   2b0a8:	00893503          	ld	a0,8(s2)
   2b0ac:	c511                	c.beqz	a0,2b0b8 <elf::segment::segment(elf::elf const&, void const*)+0xda>
	  _M_pi->_M_release();
   2b0ae:	0000e317          	auipc	t1,0xe
   2b0b2:	31233303          	ld	t1,786(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2b0b6:	9302                	c.jalr	t1
   2b0b8:	8522                	c.mv	a0,s0
   2b0ba:	dd6eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002b0be <elf::section::section(elf::elf const&, void const*)>:
section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   2b0be:	7179                	c.addi16sp	sp,-48
   2b0c0:	f406                	c.sdsp	ra,40(sp)
   2b0c2:	f022                	c.sdsp	s0,32(sp)
   2b0c4:	ec26                	c.sdsp	s1,24(sp)
   2b0c6:	e84a                	c.sdsp	s2,16(sp)
   2b0c8:	e44e                	c.sdsp	s3,8(sp)
   2b0ca:	e052                	c.sdsp	s4,0(sp)
   2b0cc:	892a                	c.mv	s2,a0
   2b0ce:	84ae                	c.mv	s1,a1
   2b0d0:	89b2                	c.mv	s3,a2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2b0d2:	00053023          	sd	zero,0(a0)
   2b0d6:	0a000513          	addi	a0,zero,160
   2b0da:	be6eb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2b0de:	842a                	c.mv	s0,a0
   2b0e0:	00052423          	sw	zero,8(a0)
   2b0e4:	00052623          	sw	zero,12(a0)
   2b0e8:	00052823          	sw	zero,16(a0)
   2b0ec:	00052a23          	sw	zero,20(a0)
   2b0f0:	00052c23          	sw	zero,24(a0)
   2b0f4:	00052e23          	sw	zero,28(a0)
   2b0f8:	02053023          	sd	zero,32(a0)
   2b0fc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2b100:	4785                	c.li	a5,1
   2b102:	d91c                	c.sw	a5,48(a0)
   2b104:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2b106:	0000e797          	auipc	a5,0xe
   2b10a:	31a7b783          	ld	a5,794(a5) # 39420 <vtable for std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x778>
   2b10e:	07c1                	c.addi	a5,16
   2b110:	e11c                	c.sd	a5,0(a0)
   2b112:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b116:	609c                	c.ld	a5,0(s1)
   2b118:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2b11a:	6488                	c.ld	a0,8(s1)
   2b11c:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2b11e:	c919                	c.beqz	a0,2b134 <elf::section::section(elf::elf const&, void const*)+0x76>
    if (__is_single_threaded())
   2b120:	0000e717          	auipc	a4,0xe
   2b124:	35873703          	ld	a4,856(a4) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b128:	00074703          	lbu	a4,0(a4)
   2b12c:	c315                	c.beqz	a4,2b150 <elf::section::section(elf::elf const&, void const*)+0x92>
  { *__mem += __val; }
   2b12e:	5918                	c.lw	a4,48(a0)
   2b130:	2705                	c.addiw	a4,1
   2b132:	d918                	c.sw	a4,48(a0)
  impl(const elf &f) : f(f), name(nullptr), data(nullptr) {}
   2b134:	08043423          	sd	zero,136(s0)
   2b138:	08043c23          	sd	zero,152(s0)
	  _M_pi = __pi;
   2b13c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2b140:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2b144:	04840413          	addi	s0,s0,72
   2b148:	8526                	c.mv	a0,s1
   2b14a:	a9eff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2b14e:	a039                	c.j	2b15c <elf::section::section(elf::elf const&, void const*)+0x9e>
      __atomic_add(__mem, __val);
   2b150:	4585                	c.li	a1,1
   2b152:	03050513          	addi	a0,a0,48
   2b156:	9aaeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b15a:	bfe9                	c.j	2b134 <elf::section::section(elf::elf const&, void const*)+0x76>
   2b15c:	00454a03          	lbu	s4,4(a0)
   2b160:	8526                	c.mv	a0,s1
   2b162:	a86ff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2b166:	00554683          	lbu	a3,5(a0)
   2b16a:	8652                	c.mv	a2,s4
   2b16c:	85ce                	c.mv	a1,s3
   2b16e:	8522                	c.mv	a0,s0
   2b170:	0000e317          	auipc	t1,0xe
   2b174:	40833303          	ld	t1,1032(t1) # 39578 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xced0>
   2b178:	9302                	c.jalr	t1
}
   2b17a:	70a2                	c.ldsp	ra,40(sp)
   2b17c:	7402                	c.ldsp	s0,32(sp)
   2b17e:	64e2                	c.ldsp	s1,24(sp)
   2b180:	6942                	c.ldsp	s2,16(sp)
   2b182:	69a2                	c.ldsp	s3,8(sp)
   2b184:	6a02                	c.ldsp	s4,0(sp)
   2b186:	6145                	c.addi16sp	sp,48
   2b188:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2b18a:	842a                	c.mv	s0,a0
   2b18c:	00893503          	ld	a0,8(s2)
   2b190:	c511                	c.beqz	a0,2b19c <elf::section::section(elf::elf const&, void const*)+0xde>
	  _M_pi->_M_release();
   2b192:	0000e317          	auipc	t1,0xe
   2b196:	22e33303          	ld	t1,558(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2b19a:	9302                	c.jalr	t1
   2b19c:	8522                	c.mv	a0,s0
   2b19e:	cf2eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002b1a2 <elf::sym::sym(elf::elf, void const*, elf::strtab)>:
sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
   2b1a2:	7179                	c.addi16sp	sp,-48
   2b1a4:	f406                	c.sdsp	ra,40(sp)
   2b1a6:	f022                	c.sdsp	s0,32(sp)
   2b1a8:	ec26                	c.sdsp	s1,24(sp)
   2b1aa:	e84a                	c.sdsp	s2,16(sp)
   2b1ac:	e44e                	c.sdsp	s3,8(sp)
   2b1ae:	e052                	c.sdsp	s4,0(sp)
   2b1b0:	842a                	c.mv	s0,a0
   2b1b2:	84ae                	c.mv	s1,a1
   2b1b4:	8932                	c.mv	s2,a2
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b1b6:	629c                	c.ld	a5,0(a3)
   2b1b8:	e11c                	c.sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   2b1ba:	6688                	c.ld	a0,8(a3)
   2b1bc:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2b1be:	c919                	c.beqz	a0,2b1d4 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x32>
    if (__is_single_threaded())
   2b1c0:	0000e797          	auipc	a5,0xe
   2b1c4:	2b87b783          	ld	a5,696(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b1c8:	0007c783          	lbu	a5,0(a5)
   2b1cc:	cb91                	c.beqz	a5,2b1e0 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x3e>
  { *__mem += __val; }
   2b1ce:	591c                	c.lw	a5,48(a0)
   2b1d0:	2785                	c.addiw	a5,1
   2b1d2:	d91c                	c.sw	a5,48(a0)
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2b1d4:	01040993          	addi	s3,s0,16
   2b1d8:	8526                	c.mv	a0,s1
   2b1da:	a0eff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2b1de:	a039                	c.j	2b1ec <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x4a>
      __atomic_add(__mem, __val);
   2b1e0:	4585                	c.li	a1,1
   2b1e2:	03050513          	addi	a0,a0,48
   2b1e6:	91aeb0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b1ea:	b7ed                	c.j	2b1d4 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x32>
   2b1ec:	00454a03          	lbu	s4,4(a0)
   2b1f0:	8526                	c.mv	a0,s1
   2b1f2:	9f6ff0ef          	jal	ra,2a3e8 <elf::elf::get_hdr() const>
   2b1f6:	00554683          	lbu	a3,5(a0)
   2b1fa:	8652                	c.mv	a2,s4
   2b1fc:	85ca                	c.mv	a1,s2
   2b1fe:	854e                	c.mv	a0,s3
   2b200:	0000e317          	auipc	t1,0xe
   2b204:	33833303          	ld	t1,824(t1) # 39538 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcd32>
   2b208:	9302                	c.jalr	t1
}
   2b20a:	70a2                	c.ldsp	ra,40(sp)
   2b20c:	7402                	c.ldsp	s0,32(sp)
   2b20e:	64e2                	c.ldsp	s1,24(sp)
   2b210:	6942                	c.ldsp	s2,16(sp)
   2b212:	69a2                	c.ldsp	s3,8(sp)
   2b214:	6a02                	c.ldsp	s4,0(sp)
   2b216:	6145                	c.addi16sp	sp,48
   2b218:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2b21a:	84aa                	c.mv	s1,a0
   2b21c:	6408                	c.ld	a0,8(s0)
   2b21e:	c511                	c.beqz	a0,2b22a <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x88>
	  _M_pi->_M_release();
   2b220:	0000e317          	auipc	t1,0xe
   2b224:	1a033303          	ld	t1,416(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2b228:	9302                	c.jalr	t1
   2b22a:	8526                	c.mv	a0,s1
   2b22c:	c64eb0ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002b230 <elf::section::get_name[abi:cxx11]() const>:
string section::get_name() const { return get_name(nullptr); }
   2b230:	1101                	c.addi	sp,-32
   2b232:	ec06                	c.sdsp	ra,24(sp)
   2b234:	e822                	c.sdsp	s0,16(sp)
   2b236:	e426                	c.sdsp	s1,8(sp)
   2b238:	842a                	c.mv	s0,a0
   2b23a:	852e                	c.mv	a0,a1
   2b23c:	4581                	c.li	a1,0
   2b23e:	817ff0ef          	jal	ra,2aa54 <elf::section::get_name(unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b242:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b246:	e01c                	c.sd	a5,0(s0)
	if (__s == 0)
   2b248:	c505                	c.beqz	a0,2b270 <elf::section::get_name[abi:cxx11]() const+0x40>
   2b24a:	84aa                	c.mv	s1,a0
   2b24c:	974eb0ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2b250:	4681                	c.li	a3,0
   2b252:	00a48633          	add	a2,s1,a0
   2b256:	85a6                	c.mv	a1,s1
   2b258:	8522                	c.mv	a0,s0
   2b25a:	0000e317          	auipc	t1,0xe
   2b25e:	0a633303          	ld	t1,166(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2b262:	9302                	c.jalr	t1
   2b264:	8522                	c.mv	a0,s0
   2b266:	60e2                	c.ldsp	ra,24(sp)
   2b268:	6442                	c.ldsp	s0,16(sp)
   2b26a:	64a2                	c.ldsp	s1,8(sp)
   2b26c:	6105                	c.addi16sp	sp,32
   2b26e:	8082                	c.jr	ra
	  std::__throw_logic_error(__N("basic_string: "
   2b270:	00002517          	auipc	a0,0x2
   2b274:	cb050513          	addi	a0,a0,-848 # 2cf20 <__libc_csu_fini+0x8>
   2b278:	9e8eb0ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>

000000000002b27c <elf::strtab::get[abi:cxx11](unsigned long) const>:
std::string strtab::get(Elf64::Off offset) const {
   2b27c:	1101                	c.addi	sp,-32
   2b27e:	ec06                	c.sdsp	ra,24(sp)
   2b280:	e822                	c.sdsp	s0,16(sp)
   2b282:	e426                	c.sdsp	s1,8(sp)
   2b284:	842a                	c.mv	s0,a0
   2b286:	852e                	c.mv	a0,a1
   2b288:	85b2                	c.mv	a1,a2
  return get(offset, nullptr);
   2b28a:	4601                	c.li	a2,0
   2b28c:	dc8ff0ef          	jal	ra,2a854 <elf::strtab::get(unsigned long, unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b290:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b294:	e01c                	c.sd	a5,0(s0)
	if (__s == 0)
   2b296:	c505                	c.beqz	a0,2b2be <elf::strtab::get[abi:cxx11](unsigned long) const+0x42>
   2b298:	84aa                	c.mv	s1,a0
   2b29a:	926eb0ef          	jal	ra,163c0 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2b29e:	4681                	c.li	a3,0
   2b2a0:	00a48633          	add	a2,s1,a0
   2b2a4:	85a6                	c.mv	a1,s1
   2b2a6:	8522                	c.mv	a0,s0
   2b2a8:	0000e317          	auipc	t1,0xe
   2b2ac:	05833303          	ld	t1,88(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2b2b0:	9302                	c.jalr	t1
}
   2b2b2:	8522                	c.mv	a0,s0
   2b2b4:	60e2                	c.ldsp	ra,24(sp)
   2b2b6:	6442                	c.ldsp	s0,16(sp)
   2b2b8:	64a2                	c.ldsp	s1,8(sp)
   2b2ba:	6105                	c.addi16sp	sp,32
   2b2bc:	8082                	c.jr	ra
	  std::__throw_logic_error(__N("basic_string: "
   2b2be:	00002517          	auipc	a0,0x2
   2b2c2:	c6250513          	addi	a0,a0,-926 # 2cf20 <__libc_csu_fini+0x8>
   2b2c6:	99aeb0ef          	jal	ra,16460 <std::__throw_logic_error(char const*)@plt>

000000000002b2ca <elf::sym::get_name[abi:cxx11]() const>:
std::string sym::get_name() const { return strs.get(get_data().name); }
   2b2ca:	1141                	c.addi	sp,-16
   2b2cc:	e406                	c.sdsp	ra,8(sp)
   2b2ce:	e022                	c.sdsp	s0,0(sp)
   2b2d0:	842a                	c.mv	s0,a0
   2b2d2:	0105e603          	lwu	a2,16(a1)
   2b2d6:	fa7ff0ef          	jal	ra,2b27c <elf::strtab::get[abi:cxx11](unsigned long) const>
   2b2da:	8522                	c.mv	a0,s0
   2b2dc:	60a2                	c.ldsp	ra,8(sp)
   2b2de:	6402                	c.ldsp	s0,0(sp)
   2b2e0:	0141                	c.addi	sp,16
   2b2e2:	8082                	c.jr	ra

000000000002b2e4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)>:
std::string enums::to_string(shn v) {
   2b2e4:	1101                	c.addi	sp,-32
   2b2e6:	ec06                	c.sdsp	ra,24(sp)
   2b2e8:	e822                	c.sdsp	s0,16(sp)
   2b2ea:	e426                	c.sdsp	s1,8(sp)
   2b2ec:	e04a                	c.sdsp	s2,0(sp)
   2b2ee:	84aa                	c.mv	s1,a0
  if (v == shn::undef)
   2b2f0:	cda9                	c.beqz	a1,2b34a <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x66>
  if (v == shn::abs)
   2b2f2:	0005871b          	addiw	a4,a1,0
   2b2f6:	67c1                	c.lui	a5,0x10
   2b2f8:	17c5                	c.addi	a5,-15 # fff1 <__abi_tag-0x2a3>
   2b2fa:	08f70063          	beq	a4,a5,2b37a <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x96>
  if (v == shn::common)
   2b2fe:	0005871b          	addiw	a4,a1,0
   2b302:	67c1                	c.lui	a5,0x10
   2b304:	17c9                	c.addi	a5,-14 # fff2 <__abi_tag-0x2a2>
   2b306:	08f70c63          	beq	a4,a5,2b39e <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xba>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2b30a:	0005841b          	addiw	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   2b30e:	47a5                	c.li	a5,9
   2b310:	0a87f963          	bgeu	a5,s0,2b3c2 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xde>
	  if (__value < __b2) return __n + 1;
   2b314:	06300793          	addi	a5,zero,99
   2b318:	1487ff63          	bgeu	a5,s0,2b476 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x192>
	  if (__value < __b3) return __n + 2;
   2b31c:	3e700793          	addi	a5,zero,999
   2b320:	1687f563          	bgeu	a5,s0,2b48a <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1a6>
	  if (__value < __b4) return __n + 3;
   2b324:	6689                	c.lui	a3,0x2
   2b326:	70f68693          	addi	a3,a3,1807 # 270f <__abi_tag-0xdb85>
	  __n += 4;
   2b32a:	0086b933          	sltu	s2,a3,s0
   2b32e:	0911                	c.addi	s2,4
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b330:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2b334:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2b336:	02d00613          	addi	a2,zero,45
   2b33a:	85ca                	c.mv	a1,s2
   2b33c:	8526                	c.mv	a0,s1
   2b33e:	9d2eb0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b342:	608c                	c.ld	a1,0(s1)
      unsigned __pos = __len - 1;
   2b344:	fff9069b          	addiw	a3,s2,-1
      while (__val >= 100)
   2b348:	a859                	c.j	2b3de <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xfa>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b34a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b34e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2b350:	4681                	c.li	a3,0
   2b352:	00006617          	auipc	a2,0x6
   2b356:	aa360613          	addi	a2,a2,-1373 # 30df5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2815>
   2b35a:	00006597          	auipc	a1,0x6
   2b35e:	a9658593          	addi	a1,a1,-1386 # 30df0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2810>
   2b362:	0000e317          	auipc	t1,0xe
   2b366:	f9e33303          	ld	t1,-98(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2b36a:	9302                	c.jalr	t1
}
   2b36c:	8526                	c.mv	a0,s1
   2b36e:	60e2                	c.ldsp	ra,24(sp)
   2b370:	6442                	c.ldsp	s0,16(sp)
   2b372:	64a2                	c.ldsp	s1,8(sp)
   2b374:	6902                	c.ldsp	s2,0(sp)
   2b376:	6105                	c.addi16sp	sp,32
   2b378:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b37a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b37e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2b380:	4681                	c.li	a3,0
   2b382:	00006617          	auipc	a2,0x6
   2b386:	a7960613          	addi	a2,a2,-1415 # 30dfb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x281b>
   2b38a:	00006597          	auipc	a1,0x6
   2b38e:	a6e58593          	addi	a1,a1,-1426 # 30df8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2818>
   2b392:	0000e317          	auipc	t1,0xe
   2b396:	f6e33303          	ld	t1,-146(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2b39a:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2b39c:	bfc1                	c.j	2b36c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b39e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b3a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2b3a4:	4681                	c.li	a3,0
   2b3a6:	00006617          	auipc	a2,0x6
   2b3aa:	a6060613          	addi	a2,a2,-1440 # 30e06 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2826>
   2b3ae:	00006597          	auipc	a1,0x6
   2b3b2:	a5258593          	addi	a1,a1,-1454 # 30e00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2820>
   2b3b6:	0000e317          	auipc	t1,0xe
   2b3ba:	f4a33303          	ld	t1,-182(t1) # 39300 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f4f8>
   2b3be:	9302                	c.jalr	t1
   2b3c0:	b775                	c.j	2b36c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b3c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b3c6:	e11c                	c.sd	a5,0(a0)
      { _M_construct(__n, __c); }
   2b3c8:	02d00613          	addi	a2,zero,45
   2b3cc:	4585                	c.li	a1,1
   2b3ce:	942eb0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b3d2:	608c                	c.ld	a1,0(s1)
   2b3d4:	06300793          	addi	a5,zero,99
   2b3d8:	0687f063          	bgeu	a5,s0,2b438 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x154>
      unsigned __pos = __len - 1;
   2b3dc:	4681                	c.li	a3,0
	  auto const __num = (__val % 100) * 2;
   2b3de:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   2b3e2:	0000e517          	auipc	a0,0xe
   2b3e6:	f7653503          	ld	a0,-138(a0) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
      while (__val >= 100)
   2b3ea:	6309                	c.lui	t1,0x2
   2b3ec:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2b3f0:	030477bb          	remuw	a5,s0,a6
   2b3f4:	0017979b          	slliw	a5,a5,0x1
   2b3f8:	0004089b          	addiw	a7,s0,0
	  __val /= 100;
   2b3fc:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   2b400:	02069613          	slli	a2,a3,0x20
   2b404:	9201                	c.srli	a2,0x20
   2b406:	962e                	c.add	a2,a1
   2b408:	0017871b          	addiw	a4,a5,1
   2b40c:	1702                	c.slli	a4,0x20
   2b40e:	9301                	c.srli	a4,0x20
   2b410:	972a                	c.add	a4,a0
   2b412:	00074703          	lbu	a4,0(a4)
   2b416:	00e60023          	sb	a4,0(a2)
	  __first[__pos - 1] = __digits[__num];
   2b41a:	fff6871b          	addiw	a4,a3,-1
   2b41e:	1702                	c.slli	a4,0x20
   2b420:	9301                	c.srli	a4,0x20
   2b422:	972e                	c.add	a4,a1
   2b424:	1782                	c.slli	a5,0x20
   2b426:	9381                	c.srli	a5,0x20
   2b428:	97aa                	c.add	a5,a0
   2b42a:	0007c783          	lbu	a5,0(a5)
   2b42e:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2b432:	36f9                	c.addiw	a3,-2
      while (__val >= 100)
   2b434:	fb136ee3          	bltu	t1,a7,2b3f0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x10c>
      if (__val >= 10)
   2b438:	47a5                	c.li	a5,9
   2b43a:	0287f963          	bgeu	a5,s0,2b46c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x188>
	  auto const __num = __val * 2;
   2b43e:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   2b442:	0000e717          	auipc	a4,0xe
   2b446:	f1673703          	ld	a4,-234(a4) # 39358 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbea0>
   2b44a:	0014079b          	addiw	a5,s0,1
   2b44e:	1782                	c.slli	a5,0x20
   2b450:	9381                	c.srli	a5,0x20
   2b452:	97ba                	c.add	a5,a4
   2b454:	0007c783          	lbu	a5,0(a5)
   2b458:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   2b45c:	1402                	c.slli	s0,0x20
   2b45e:	9001                	c.srli	s0,0x20
   2b460:	9722                	c.add	a4,s0
   2b462:	00074783          	lbu	a5,0(a4)
   2b466:	00f58023          	sb	a5,0(a1)
   2b46a:	b709                	c.j	2b36c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	__first[0] = '0' + __val;
   2b46c:	0304041b          	addiw	s0,s0,48
   2b470:	00858023          	sb	s0,0(a1)
   2b474:	bde5                	c.j	2b36c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b476:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b47a:	e11c                	c.sd	a5,0(a0)
      { _M_construct(__n, __c); }
   2b47c:	02d00613          	addi	a2,zero,45
   2b480:	4589                	c.li	a1,2
   2b482:	88eeb0ef          	jal	ra,16510 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b486:	608c                	c.ld	a1,0(s1)
      while (__val >= 100)
   2b488:	bf45                	c.j	2b438 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x154>
	  if (__value < __b3) return __n + 2;
   2b48a:	490d                	c.li	s2,3
   2b48c:	b555                	c.j	2b330 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x4c>

000000000002b48e <elf::elf::elf(std::shared_ptr<elf::loader> const&)>:
elf::elf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   2b48e:	7159                	c.addi16sp	sp,-112
   2b490:	f486                	c.sdsp	ra,104(sp)
   2b492:	f0a2                	c.sdsp	s0,96(sp)
   2b494:	eca6                	c.sdsp	s1,88(sp)
   2b496:	e8ca                	c.sdsp	s2,80(sp)
   2b498:	e4ce                	c.sdsp	s3,72(sp)
   2b49a:	e0d2                	c.sdsp	s4,64(sp)
   2b49c:	fc56                	c.sdsp	s5,56(sp)
   2b49e:	f85a                	c.sdsp	s6,48(sp)
   2b4a0:	f45e                	c.sdsp	s7,40(sp)
   2b4a2:	f062                	c.sdsp	s8,32(sp)
   2b4a4:	84aa                	c.mv	s1,a0
   2b4a6:	8aae                	c.mv	s5,a1
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2b4a8:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b4ac:	0d800513          	addi	a0,zero,216
   2b4b0:	810eb0ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2b4b4:	842a                	c.mv	s0,a0
   2b4b6:	00052423          	sw	zero,8(a0)
   2b4ba:	00052623          	sw	zero,12(a0)
   2b4be:	00052823          	sw	zero,16(a0)
   2b4c2:	00052a23          	sw	zero,20(a0)
   2b4c6:	00052c23          	sw	zero,24(a0)
   2b4ca:	00052e23          	sw	zero,28(a0)
   2b4ce:	02053023          	sd	zero,32(a0)
   2b4d2:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2b4d6:	4785                	c.li	a5,1
   2b4d8:	d91c                	c.sw	a5,48(a0)
   2b4da:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2b4dc:	0000e797          	auipc	a5,0xe
   2b4e0:	ec47b783          	ld	a5,-316(a5) # 393a0 <vtable for std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x768>
   2b4e4:	07c1                	c.addi	a5,16
   2b4e6:	e11c                	c.sd	a5,0(a0)
   2b4e8:	03850913          	addi	s2,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b4ec:	000ab783          	ld	a5,0(s5)
   2b4f0:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2b4f2:	008ab503          	ld	a0,8(s5)
   2b4f6:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2b4f8:	c919                	c.beqz	a0,2b50e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x80>
    if (__is_single_threaded())
   2b4fa:	0000e797          	auipc	a5,0xe
   2b4fe:	f7e7b783          	ld	a5,-130(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b502:	0007c783          	lbu	a5,0(a5)
   2b506:	c3b9                	c.beqz	a5,2b54c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xbe>
  { *__mem += __val; }
   2b508:	591c                	c.lw	a5,48(a0)
   2b50a:	2785                	c.addiw	a5,1
   2b50c:	d91c                	c.sw	a5,48(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   2b50e:	08043423          	sd	zero,136(s0)
   2b512:	08043823          	sd	zero,144(s0)
   2b516:	08043c23          	sd	zero,152(s0)
   2b51a:	0a043023          	sd	zero,160(s0)
   2b51e:	0a043423          	sd	zero,168(s0)
   2b522:	0a043823          	sd	zero,176(s0)
      : _M_ptr(0), _M_refcount()
   2b526:	0a043c23          	sd	zero,184(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b52a:	0c043023          	sd	zero,192(s0)
      : _M_ptr(0), _M_refcount()
   2b52e:	0c043423          	sd	zero,200(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b532:	0c043823          	sd	zero,208(s0)
	  _M_pi = __pi;
   2b536:	e480                	c.sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   2b538:	0124b023          	sd	s2,0(s1)
      { return _M_ptr; }
   2b53c:	000ab503          	ld	a0,0(s5)
  } *core_hdr = (struct core_hdr *)l->load(0, sizeof *core_hdr);
   2b540:	611c                	c.ld	a5,0(a0)
   2b542:	6b9c                	c.ld	a5,16(a5)
   2b544:	461d                	c.li	a2,7
   2b546:	4581                	c.li	a1,0
   2b548:	9782                	c.jalr	a5
   2b54a:	a039                	c.j	2b558 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xca>
      __atomic_add(__mem, __val);
   2b54c:	4585                	c.li	a1,1
   2b54e:	03050513          	addi	a0,a0,48
   2b552:	dafea0ef          	jal	ra,16300 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b556:	bf65                	c.j	2b50e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x80>
   2b558:	842a                	c.mv	s0,a0
  if (strncmp(core_hdr->ei_magic,
   2b55a:	4611                	c.li	a2,4
   2b55c:	00006597          	auipc	a1,0x6
   2b560:	8ac58593          	addi	a1,a1,-1876 # 30e08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2828>
   2b564:	8eceb0ef          	jal	ra,16650 <strncmp@plt>
   2b568:	e139                	c.bnez	a0,2b5ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x120>
  if (core_hdr->ei_version != 1)
   2b56a:	00644703          	lbu	a4,6(s0)
   2b56e:	4785                	c.li	a5,1
   2b570:	06f71d63          	bne	a4,a5,2b5ea <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x15c>
  if (core_hdr->ei_class != elfclass::_32 &&
   2b574:	00444703          	lbu	a4,4(s0)
   2b578:	fff7079b          	addiw	a5,a4,-1
   2b57c:	0ff7f793          	andi	a5,a5,255
   2b580:	4685                	c.li	a3,1
   2b582:	0af6e063          	bltu	a3,a5,2b622 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x194>
  if (core_hdr->ei_data != elfdata::lsb && core_hdr->ei_data != elfdata::msb)
   2b586:	00544783          	lbu	a5,5(s0)
   2b58a:	37fd                	c.addiw	a5,-1
   2b58c:	0ff7f793          	andi	a5,a5,255
   2b590:	4685                	c.li	a3,1
   2b592:	0cf6e463          	bltu	a3,a5,2b65a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x1cc>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   2b596:	4785                	c.li	a5,1
   2b598:	04000613          	addi	a2,zero,64
   2b59c:	0ef70b63          	beq	a4,a5,2b692 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x204>
   2b5a0:	000ab503          	ld	a0,0(s5)
  const void *hdr = l->load(0, hdr_size);
   2b5a4:	611c                	c.ld	a5,0(a0)
   2b5a6:	6b9c                	c.ld	a5,16(a5)
   2b5a8:	4581                	c.li	a1,0
   2b5aa:	9782                	c.jalr	a5
   2b5ac:	a0f5                	c.j	2b698 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x20a>
    throw format_error("bad ELF magic number");
   2b5ae:	4541                	c.li	a0,16
   2b5b0:	e21ea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2b5b4:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2b5b6:	00006597          	auipc	a1,0x6
   2b5ba:	85a58593          	addi	a1,a1,-1958 # 30e10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2830>
   2b5be:	952eb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2b5c2:	0000e797          	auipc	a5,0xe
   2b5c6:	d767b783          	ld	a5,-650(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b5ca:	07c1                	c.addi	a5,16
   2b5cc:	00f93023          	sd	a5,0(s2)
   2b5d0:	0000e617          	auipc	a2,0xe
   2b5d4:	f9063603          	ld	a2,-112(a2) # 39560 <elf::format_error::~format_error()@@Base+0xdbc0>
   2b5d8:	0000e597          	auipc	a1,0xe
   2b5dc:	d405b583          	ld	a1,-704(a1) # 39318 <typeinfo for elf::format_error@@Base+0x7d8>
   2b5e0:	854a                	c.mv	a0,s2
   2b5e2:	87eeb0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   2b5e6:	842a                	c.mv	s0,a0
   2b5e8:	a635                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("unknown ELF version");
   2b5ea:	4541                	c.li	a0,16
   2b5ec:	de5ea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2b5f0:	892a                	c.mv	s2,a0
   2b5f2:	00006597          	auipc	a1,0x6
   2b5f6:	83658593          	addi	a1,a1,-1994 # 30e28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2848>
   2b5fa:	916eb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2b5fe:	0000e797          	auipc	a5,0xe
   2b602:	d3a7b783          	ld	a5,-710(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b606:	07c1                	c.addi	a5,16
   2b608:	00f93023          	sd	a5,0(s2)
   2b60c:	0000e617          	auipc	a2,0xe
   2b610:	f5463603          	ld	a2,-172(a2) # 39560 <elf::format_error::~format_error()@@Base+0xdbc0>
   2b614:	0000e597          	auipc	a1,0xe
   2b618:	d045b583          	ld	a1,-764(a1) # 39318 <typeinfo for elf::format_error@@Base+0x7d8>
   2b61c:	854a                	c.mv	a0,s2
   2b61e:	842eb0ef          	jal	ra,16660 <__cxa_throw@plt>
    throw format_error("bad ELF class");
   2b622:	4541                	c.li	a0,16
   2b624:	dadea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2b628:	892a                	c.mv	s2,a0
   2b62a:	00006597          	auipc	a1,0x6
   2b62e:	81658593          	addi	a1,a1,-2026 # 30e40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2860>
   2b632:	8deeb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2b636:	0000e797          	auipc	a5,0xe
   2b63a:	d027b783          	ld	a5,-766(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b63e:	07c1                	c.addi	a5,16
   2b640:	00f93023          	sd	a5,0(s2)
   2b644:	0000e617          	auipc	a2,0xe
   2b648:	f1c63603          	ld	a2,-228(a2) # 39560 <elf::format_error::~format_error()@@Base+0xdbc0>
   2b64c:	0000e597          	auipc	a1,0xe
   2b650:	ccc5b583          	ld	a1,-820(a1) # 39318 <typeinfo for elf::format_error@@Base+0x7d8>
   2b654:	854a                	c.mv	a0,s2
   2b656:	80aeb0ef          	jal	ra,16660 <__cxa_throw@plt>
    throw format_error("bad ELF data order");
   2b65a:	4541                	c.li	a0,16
   2b65c:	d75ea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2b660:	892a                	c.mv	s2,a0
   2b662:	00005597          	auipc	a1,0x5
   2b666:	7ee58593          	addi	a1,a1,2030 # 30e50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2870>
   2b66a:	8a6eb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2b66e:	0000e797          	auipc	a5,0xe
   2b672:	cca7b783          	ld	a5,-822(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b676:	07c1                	c.addi	a5,16
   2b678:	00f93023          	sd	a5,0(s2)
   2b67c:	0000e617          	auipc	a2,0xe
   2b680:	ee463603          	ld	a2,-284(a2) # 39560 <elf::format_error::~format_error()@@Base+0xdbc0>
   2b684:	0000e597          	auipc	a1,0xe
   2b688:	c945b583          	ld	a1,-876(a1) # 39318 <typeinfo for elf::format_error@@Base+0x7d8>
   2b68c:	854a                	c.mv	a0,s2
   2b68e:	fd3ea0ef          	jal	ra,16660 <__cxa_throw@plt>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   2b692:	03400613          	addi	a2,zero,52
   2b696:	b729                	c.j	2b5a0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x112>
  const void *hdr = l->load(0, hdr_size);
   2b698:	85aa                	c.mv	a1,a0
  canon_hdr(&m->hdr, hdr, core_hdr->ei_class, core_hdr->ei_data);
   2b69a:	6088                	c.ld	a0,0(s1)
   2b69c:	00544683          	lbu	a3,5(s0)
   2b6a0:	00444603          	lbu	a2,4(s0)
   2b6a4:	0541                	c.addi	a0,16
   2b6a6:	0000e317          	auipc	t1,0xe
   2b6aa:	c8a33303          	ld	t1,-886(t1) # 39330 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd21a>
   2b6ae:	9302                	c.jalr	t1
      { return _M_ptr; }
   2b6b0:	609c                	c.ld	a5,0(s1)
  if (m->hdr.version != 1)
   2b6b2:	53d4                	c.lw	a3,36(a5)
   2b6b4:	4705                	c.li	a4,1
   2b6b6:	02e69663          	bne	a3,a4,2b6e2 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x254>
  if (m->hdr.shnum && m->hdr.shstrndx >= m->hdr.shnum)
   2b6ba:	04c7d703          	lhu	a4,76(a5)
   2b6be:	c709                	c.beqz	a4,2b6c8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x23a>
   2b6c0:	04e7d683          	lhu	a3,78(a5)
   2b6c4:	04e6fb63          	bgeu	a3,a4,2b71a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x28c>
   2b6c8:	000ab503          	ld	a0,0(s5)
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   2b6cc:	0467d603          	lhu	a2,70(a5)
   2b6d0:	0487d683          	lhu	a3,72(a5)
   2b6d4:	6118                	c.ld	a4,0(a0)
   2b6d6:	6b18                	c.ld	a4,16(a4)
   2b6d8:	02d6063b          	mulw	a2,a2,a3
   2b6dc:	7b8c                	c.ld	a1,48(a5)
   2b6de:	9702                	c.jalr	a4
   2b6e0:	a881                	c.j	2b730 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2a2>
    throw format_error("bad section ELF version");
   2b6e2:	4541                	c.li	a0,16
   2b6e4:	cedea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2b6e8:	892a                	c.mv	s2,a0
   2b6ea:	00005597          	auipc	a1,0x5
   2b6ee:	77e58593          	addi	a1,a1,1918 # 30e68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2888>
   2b6f2:	81eeb0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2b6f6:	0000e797          	auipc	a5,0xe
   2b6fa:	c427b783          	ld	a5,-958(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b6fe:	07c1                	c.addi	a5,16
   2b700:	00f93023          	sd	a5,0(s2)
   2b704:	0000e617          	auipc	a2,0xe
   2b708:	e5c63603          	ld	a2,-420(a2) # 39560 <elf::format_error::~format_error()@@Base+0xdbc0>
   2b70c:	0000e597          	auipc	a1,0xe
   2b710:	c0c5b583          	ld	a1,-1012(a1) # 39318 <typeinfo for elf::format_error@@Base+0x7d8>
   2b714:	854a                	c.mv	a0,s2
   2b716:	f4bea0ef          	jal	ra,16660 <__cxa_throw@plt>
    throw format_error("bad section name string table index");
   2b71a:	4541                	c.li	a0,16
   2b71c:	cb5ea0ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2b720:	892a                	c.mv	s2,a0
   2b722:	00005597          	auipc	a1,0x5
   2b726:	75e58593          	addi	a1,a1,1886 # 30e80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x28a0>
   2b72a:	fe7ea0ef          	jal	ra,16710 <std::runtime_error::runtime_error(char const*)@plt>
   2b72e:	a015                	c.j	2b752 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2c4>
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   2b730:	89aa                	c.mv	s3,a0
   2b732:	6080                	c.ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   2b734:	04845783          	lhu	a5,72(s0)
   2b738:	4901                	c.li	s2,0
   2b73a:	c7e5                	c.beqz	a5,2b822 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x394>
    m->segments.push_back(segment(*this, seg));
   2b73c:	8a0a                	c.mv	s4,sp
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b73e:	0000ec17          	auipc	s8,0xe
   2b742:	dc2c3c03          	ld	s8,-574(s8) # 39500 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)@@Base+0xcbf0>
    return ::__libc_single_threaded;
   2b746:	0000eb17          	auipc	s6,0xe
   2b74a:	d32b3b03          	ld	s6,-718(s6) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b74e:	4b85                	c.li	s7,1
   2b750:	a09d                	c.j	2b7b6 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x328>
   2b752:	0000e797          	auipc	a5,0xe
   2b756:	be67b783          	ld	a5,-1050(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b75a:	07c1                	c.addi	a5,16
   2b75c:	00f93023          	sd	a5,0(s2)
    throw format_error("bad section name string table index");
   2b760:	0000e617          	auipc	a2,0xe
   2b764:	e0063603          	ld	a2,-512(a2) # 39560 <elf::format_error::~format_error()@@Base+0xdbc0>
   2b768:	0000e597          	auipc	a1,0xe
   2b76c:	bb05b583          	ld	a1,-1104(a1) # 39318 <typeinfo for elf::format_error@@Base+0x7d8>
   2b770:	854a                	c.mv	a0,s2
   2b772:	eefea0ef          	jal	ra,16660 <__cxa_throw@plt>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2b776:	782c                	c.ld	a1,112(s0)
   2b778:	7c3c                	c.ld	a5,120(s0)
   2b77a:	04f58a63          	beq	a1,a5,2b7ce <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x340>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2b77e:	6782                	c.ldsp	a5,0(sp)
   2b780:	e19c                	c.sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b782:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2b786:	67a2                	c.ldsp	a5,8(sp)
	__r._M_pi = _M_pi;
   2b788:	e402                	c.sdsp	zero,8(sp)
	_M_pi = __tmp;
   2b78a:	e59c                	c.sd	a5,8(a1)
	__r._M_ptr = nullptr;
   2b78c:	e002                	c.sdsp	zero,0(sp)
	    ++this->_M_impl._M_finish;
   2b78e:	783c                	c.ld	a5,112(s0)
   2b790:	07c1                	c.addi	a5,16
   2b792:	f83c                	c.sd	a5,112(s0)
	if (_M_pi != nullptr)
   2b794:	6422                	c.ldsp	s0,8(sp)
   2b796:	c811                	c.beqz	s0,2b7aa <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
    if (__is_single_threaded())
   2b798:	000b4783          	lbu	a5,0(s6)
   2b79c:	cf95                	c.beqz	a5,2b7d8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x34a>
    _Atomic_word __result = *__mem;
   2b79e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2b7a0:	fff5079b          	addiw	a5,a0,-1
   2b7a4:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b7a6:	03750f63          	beq	a0,s7,2b7e4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x356>
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   2b7aa:	2905                	c.addiw	s2,1
      { return _M_ptr; }
   2b7ac:	6080                	c.ld	s0,0(s1)
   2b7ae:	04845783          	lhu	a5,72(s0)
   2b7b2:	06f97863          	bgeu	s2,a5,2b822 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x394>
    const void *seg = ((const char *)seg_data) + i * m->hdr.phentsize;
   2b7b6:	04645603          	lhu	a2,70(s0)
   2b7ba:	0326063b          	mulw	a2,a2,s2
   2b7be:	1602                	c.slli	a2,0x20
   2b7c0:	9201                	c.srli	a2,0x20
    m->segments.push_back(segment(*this, seg));
   2b7c2:	964e                	c.add	a2,s3
   2b7c4:	85a6                	c.mv	a1,s1
   2b7c6:	8552                	c.mv	a0,s4
   2b7c8:	817ff0ef          	jal	ra,2afde <elf::segment::segment(elf::elf const&, void const*)>
   2b7cc:	b76d                	c.j	2b776 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2e8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b7ce:	8652                	c.mv	a2,s4
   2b7d0:	06840513          	addi	a0,s0,104
   2b7d4:	9c02                	c.jalr	s8
   2b7d6:	bf7d                	c.j	2b794 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x306>
      return __exchange_and_add(__mem, __val);
   2b7d8:	55fd                	c.li	a1,-1
   2b7da:	03040513          	addi	a0,s0,48
   2b7de:	b53ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b7e2:	b7d1                	c.j	2b7a6 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x318>
	_M_dispose();
   2b7e4:	601c                	c.ld	a5,0(s0)
   2b7e6:	6b9c                	c.ld	a5,16(a5)
   2b7e8:	8522                	c.mv	a0,s0
   2b7ea:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b7ec:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b7f0:	0000e797          	auipc	a5,0xe
   2b7f4:	c887b783          	ld	a5,-888(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b7f8:	0007c783          	lbu	a5,0(a5)
   2b7fc:	cf89                	c.beqz	a5,2b816 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x388>
    _Atomic_word __result = *__mem;
   2b7fe:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2b800:	fff5079b          	addiw	a5,a0,-1
   2b804:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b806:	4785                	c.li	a5,1
   2b808:	faf511e3          	bne	a0,a5,2b7aa <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
	    _M_destroy();
   2b80c:	601c                	c.ld	a5,0(s0)
   2b80e:	6f9c                	c.ld	a5,24(a5)
   2b810:	8522                	c.mv	a0,s0
   2b812:	9782                	c.jalr	a5
   2b814:	bf59                	c.j	2b7aa <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
      return __exchange_and_add(__mem, __val);
   2b816:	55fd                	c.li	a1,-1
   2b818:	03440513          	addi	a0,s0,52
   2b81c:	b15ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b820:	b7dd                	c.j	2b806 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x378>
      { return _M_ptr; }
   2b822:	000ab503          	ld	a0,0(s5)
  const void *sec_data = l->load(m->hdr.shoff, m->hdr.shentsize * m->hdr.shnum);
   2b826:	04a45603          	lhu	a2,74(s0)
   2b82a:	04c45703          	lhu	a4,76(s0)
   2b82e:	611c                	c.ld	a5,0(a0)
   2b830:	6b9c                	c.ld	a5,16(a5)
   2b832:	02e6063b          	mulw	a2,a2,a4
   2b836:	7c0c                	c.ld	a1,56(s0)
   2b838:	9782                	c.jalr	a5
   2b83a:	89aa                	c.mv	s3,a0
   2b83c:	6080                	c.ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   2b83e:	04c45783          	lhu	a5,76(s0)
   2b842:	12078e63          	beq	a5,zero,2b97e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4f0>
   2b846:	4901                	c.li	s2,0
    m->sections.push_back(section(*this, sec));
   2b848:	01010a13          	addi	s4,sp,16
   2b84c:	0000eb97          	auipc	s7,0xe
   2b850:	a74bbb83          	ld	s7,-1420(s7) # 392c0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)@@Base+0xc8ae>
    return ::__libc_single_threaded;
   2b854:	0000ea97          	auipc	s5,0xe
   2b858:	c24aba83          	ld	s5,-988(s5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b85c:	4b05                	c.li	s6,1
   2b85e:	a089                	c.j	2b8a0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x412>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2b860:	6c2c                	c.ld	a1,88(s0)
   2b862:	703c                	c.ld	a5,96(s0)
   2b864:	04f58a63          	beq	a1,a5,2b8b8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x42a>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2b868:	67c2                	c.ldsp	a5,16(sp)
   2b86a:	e19c                	c.sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b86c:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2b870:	67e2                	c.ldsp	a5,24(sp)
	__r._M_pi = _M_pi;
   2b872:	ec02                	c.sdsp	zero,24(sp)
	_M_pi = __tmp;
   2b874:	e59c                	c.sd	a5,8(a1)
	__r._M_ptr = nullptr;
   2b876:	e802                	c.sdsp	zero,16(sp)
	    ++this->_M_impl._M_finish;
   2b878:	6c3c                	c.ld	a5,88(s0)
   2b87a:	07c1                	c.addi	a5,16
   2b87c:	ec3c                	c.sd	a5,88(s0)
	if (_M_pi != nullptr)
   2b87e:	6462                	c.ldsp	s0,24(sp)
   2b880:	c811                	c.beqz	s0,2b894 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
    if (__is_single_threaded())
   2b882:	000ac783          	lbu	a5,0(s5)
   2b886:	cf95                	c.beqz	a5,2b8c2 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x434>
    _Atomic_word __result = *__mem;
   2b888:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2b88a:	fff5079b          	addiw	a5,a0,-1
   2b88e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b890:	03650f63          	beq	a0,s6,2b8ce <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x440>
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   2b894:	2905                	c.addiw	s2,1
      { return _M_ptr; }
   2b896:	6080                	c.ld	s0,0(s1)
   2b898:	04c45783          	lhu	a5,76(s0)
   2b89c:	0ef97163          	bgeu	s2,a5,2b97e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4f0>
    const void *sec = ((const char *)sec_data) + i * m->hdr.shentsize;
   2b8a0:	04a45603          	lhu	a2,74(s0)
   2b8a4:	0326063b          	mulw	a2,a2,s2
   2b8a8:	1602                	c.slli	a2,0x20
   2b8aa:	9201                	c.srli	a2,0x20
    m->sections.push_back(section(*this, sec));
   2b8ac:	964e                	c.add	a2,s3
   2b8ae:	85a6                	c.mv	a1,s1
   2b8b0:	8552                	c.mv	a0,s4
   2b8b2:	80dff0ef          	jal	ra,2b0be <elf::section::section(elf::elf const&, void const*)>
   2b8b6:	b76d                	c.j	2b860 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3d2>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b8b8:	8652                	c.mv	a2,s4
   2b8ba:	05040513          	addi	a0,s0,80
   2b8be:	9b82                	c.jalr	s7
   2b8c0:	bf7d                	c.j	2b87e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3f0>
      return __exchange_and_add(__mem, __val);
   2b8c2:	55fd                	c.li	a1,-1
   2b8c4:	03040513          	addi	a0,s0,48
   2b8c8:	a69ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b8cc:	b7d1                	c.j	2b890 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x402>
	_M_dispose();
   2b8ce:	601c                	c.ld	a5,0(s0)
   2b8d0:	6b9c                	c.ld	a5,16(a5)
   2b8d2:	8522                	c.mv	a0,s0
   2b8d4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b8d6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b8da:	0000e797          	auipc	a5,0xe
   2b8de:	b9e7b783          	ld	a5,-1122(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b8e2:	0007c783          	lbu	a5,0(a5)
   2b8e6:	cf89                	c.beqz	a5,2b900 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x472>
    _Atomic_word __result = *__mem;
   2b8e8:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2b8ea:	fff5079b          	addiw	a5,a0,-1
   2b8ee:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b8f0:	4785                	c.li	a5,1
   2b8f2:	faf511e3          	bne	a0,a5,2b894 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
	    _M_destroy();
   2b8f6:	601c                	c.ld	a5,0(s0)
   2b8f8:	6f9c                	c.ld	a5,24(a5)
   2b8fa:	8522                	c.mv	a0,s0
   2b8fc:	9782                	c.jalr	a5
   2b8fe:	bf59                	c.j	2b894 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
      return __exchange_and_add(__mem, __val);
   2b900:	55fd                	c.li	a1,-1
   2b902:	03440513          	addi	a0,s0,52
   2b906:	a2bea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b90a:	b7dd                	c.j	2b8f0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x462>
    throw format_error("bad ELF magic number");
   2b90c:	842a                	c.mv	s0,a0
   2b90e:	854a                	c.mv	a0,s2
   2b910:	b61ea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2b914:	6488                	c.ld	a0,8(s1)
   2b916:	c511                	c.beqz	a0,2b922 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x494>
	  _M_pi->_M_release();
   2b918:	0000e317          	auipc	t1,0xe
   2b91c:	aa833303          	ld	t1,-1368(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2b920:	9302                	c.jalr	t1
   2b922:	8522                	c.mv	a0,s0
   2b924:	d6dea0ef          	jal	ra,16690 <_Unwind_Resume@plt>
    throw format_error("unknown ELF version");
   2b928:	842a                	c.mv	s0,a0
   2b92a:	854a                	c.mv	a0,s2
   2b92c:	b45ea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2b930:	b7d5                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad ELF class");
   2b932:	842a                	c.mv	s0,a0
   2b934:	854a                	c.mv	a0,s2
   2b936:	b3bea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2b93a:	bfe9                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad ELF data order");
   2b93c:	842a                	c.mv	s0,a0
   2b93e:	854a                	c.mv	a0,s2
   2b940:	b31ea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2b944:	bfc1                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad section ELF version");
   2b946:	842a                	c.mv	s0,a0
   2b948:	854a                	c.mv	a0,s2
   2b94a:	b27ea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2b94e:	b7d9                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad section name string table index");
   2b950:	842a                	c.mv	s0,a0
   2b952:	854a                	c.mv	a0,s2
   2b954:	b1dea0ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2b958:	bf75                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	if (_M_pi != nullptr)
   2b95a:	842a                	c.mv	s0,a0
   2b95c:	6522                	c.ldsp	a0,8(sp)
   2b95e:	d95d                	c.beqz	a0,2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	  _M_pi->_M_release();
   2b960:	0000e317          	auipc	t1,0xe
   2b964:	a6033303          	ld	t1,-1440(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2b968:	9302                	c.jalr	t1
   2b96a:	b76d                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	if (_M_pi != nullptr)
   2b96c:	842a                	c.mv	s0,a0
   2b96e:	6562                	c.ldsp	a0,24(sp)
   2b970:	d155                	c.beqz	a0,2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	  _M_pi->_M_release();
   2b972:	0000e317          	auipc	t1,0xe
   2b976:	a4e33303          	ld	t1,-1458(t1) # 393c0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22638>
   2b97a:	9302                	c.jalr	t1
   2b97c:	bf61                	c.j	2b914 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
}
   2b97e:	70a6                	c.ldsp	ra,104(sp)
   2b980:	7406                	c.ldsp	s0,96(sp)
   2b982:	64e6                	c.ldsp	s1,88(sp)
   2b984:	6946                	c.ldsp	s2,80(sp)
   2b986:	69a6                	c.ldsp	s3,72(sp)
   2b988:	6a06                	c.ldsp	s4,64(sp)
   2b98a:	7ae2                	c.ldsp	s5,56(sp)
   2b98c:	7b42                	c.ldsp	s6,48(sp)
   2b98e:	7ba2                	c.ldsp	s7,40(sp)
   2b990:	7c02                	c.ldsp	s8,32(sp)
   2b992:	6165                	c.addi16sp	sp,112
   2b994:	8082                	c.jr	ra

000000000002b996 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2b996:	8082                	c.jr	ra

000000000002b998 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b998:	8082                	c.jr	ra

000000000002b99a <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b99a:	8082                	c.jr	ra

000000000002b99c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b99c:	8082                	c.jr	ra

000000000002b99e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b99e:	8082                	c.jr	ra

000000000002b9a0 <elf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   2b9a0:	1141                	c.addi	sp,-16
   2b9a2:	e406                	c.sdsp	ra,8(sp)
   2b9a4:	0000e797          	auipc	a5,0xe
   2b9a8:	9947b783          	ld	a5,-1644(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b9ac:	07c1                	c.addi	a5,16
   2b9ae:	e11c                	c.sd	a5,0(a0)
   2b9b0:	b31ea0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   2b9b4:	60a2                	c.ldsp	ra,8(sp)
   2b9b6:	0141                	c.addi	sp,16
   2b9b8:	8082                	c.jr	ra

000000000002b9ba <elf::format_error::~format_error()>:
   2b9ba:	1141                	c.addi	sp,-16
   2b9bc:	e406                	c.sdsp	ra,8(sp)
   2b9be:	e022                	c.sdsp	s0,0(sp)
   2b9c0:	842a                	c.mv	s0,a0
   2b9c2:	0000e797          	auipc	a5,0xe
   2b9c6:	9767b783          	ld	a5,-1674(a5) # 39338 <vtable for elf::format_error@@Base+0x750>
   2b9ca:	07c1                	c.addi	a5,16
   2b9cc:	e11c                	c.sd	a5,0(a0)
   2b9ce:	b13ea0ef          	jal	ra,164e0 <std::runtime_error::~runtime_error()@plt>
   2b9d2:	8522                	c.mv	a0,s0
   2b9d4:	addea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2b9d8:	60a2                	c.ldsp	ra,8(sp)
   2b9da:	6402                	c.ldsp	s0,0(sp)
   2b9dc:	0141                	c.addi	sp,16
   2b9de:	8082                	c.jr	ra

000000000002b9e0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b9e0:	1141                	c.addi	sp,-16
   2b9e2:	e406                	c.sdsp	ra,8(sp)
   2b9e4:	acdea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2b9e8:	60a2                	c.ldsp	ra,8(sp)
   2b9ea:	0141                	c.addi	sp,16
   2b9ec:	8082                	c.jr	ra

000000000002b9ee <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b9ee:	1141                	c.addi	sp,-16
   2b9f0:	e406                	c.sdsp	ra,8(sp)
   2b9f2:	abfea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2b9f6:	60a2                	c.ldsp	ra,8(sp)
   2b9f8:	0141                	c.addi	sp,16
   2b9fa:	8082                	c.jr	ra

000000000002b9fc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b9fc:	1141                	c.addi	sp,-16
   2b9fe:	e406                	c.sdsp	ra,8(sp)
   2ba00:	ab1ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2ba04:	60a2                	c.ldsp	ra,8(sp)
   2ba06:	0141                	c.addi	sp,16
   2ba08:	8082                	c.jr	ra

000000000002ba0a <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2ba0a:	1141                	c.addi	sp,-16
   2ba0c:	e406                	c.sdsp	ra,8(sp)
   2ba0e:	aa3ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2ba12:	60a2                	c.ldsp	ra,8(sp)
   2ba14:	0141                	c.addi	sp,16
   2ba16:	8082                	c.jr	ra

000000000002ba18 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2ba18:	1141                	c.addi	sp,-16
   2ba1a:	e406                	c.sdsp	ra,8(sp)
   2ba1c:	a95ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2ba20:	60a2                	c.ldsp	ra,8(sp)
   2ba22:	0141                	c.addi	sp,16
   2ba24:	8082                	c.jr	ra

000000000002ba26 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2ba26:	1141                	c.addi	sp,-16
   2ba28:	e406                	c.sdsp	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ba2a:	a87ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2ba2e:	60a2                	c.ldsp	ra,8(sp)
   2ba30:	0141                	c.addi	sp,16
   2ba32:	8082                	c.jr	ra

000000000002ba34 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2ba34:	1141                	c.addi	sp,-16
   2ba36:	e406                	c.sdsp	ra,8(sp)
   2ba38:	a79ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2ba3c:	60a2                	c.ldsp	ra,8(sp)
   2ba3e:	0141                	c.addi	sp,16
   2ba40:	8082                	c.jr	ra

000000000002ba42 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2ba42:	1141                	c.addi	sp,-16
   2ba44:	e406                	c.sdsp	ra,8(sp)
   2ba46:	a6bea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2ba4a:	60a2                	c.ldsp	ra,8(sp)
   2ba4c:	0141                	c.addi	sp,16
   2ba4e:	8082                	c.jr	ra

000000000002ba50 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2ba50:	1141                	c.addi	sp,-16
   2ba52:	e406                	c.sdsp	ra,8(sp)
   2ba54:	a5dea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2ba58:	60a2                	c.ldsp	ra,8(sp)
   2ba5a:	0141                	c.addi	sp,16
   2ba5c:	8082                	c.jr	ra

000000000002ba5e <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2ba5e:	1141                	c.addi	sp,-16
   2ba60:	e406                	c.sdsp	ra,8(sp)
   2ba62:	a4fea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2ba66:	60a2                	c.ldsp	ra,8(sp)
   2ba68:	0141                	c.addi	sp,16
   2ba6a:	8082                	c.jr	ra

000000000002ba6c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2ba6c:	1141                	c.addi	sp,-16
   2ba6e:	e406                	c.sdsp	ra,8(sp)
   2ba70:	e022                	c.sdsp	s0,0(sp)
   2ba72:	03850413          	addi	s0,a0,56
	    ||
   2ba76:	0000e797          	auipc	a5,0xe
   2ba7a:	aba7b783          	ld	a5,-1350(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   2ba7e:	02f58a63          	beq	a1,a5,2bab2 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2ba82:	6588                	c.ld	a0,8(a1)
   2ba84:	0000e797          	auipc	a5,0xe
   2ba88:	9847b783          	ld	a5,-1660(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2ba8c:	02f50363          	beq	a0,a5,2bab2 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2ba90:	00054703          	lbu	a4,0(a0)
   2ba94:	02a00793          	addi	a5,zero,42
   2ba98:	02f70263          	beq	a4,a5,2babc <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2ba9c:	0000e597          	auipc	a1,0xe
   2baa0:	96c5b583          	ld	a1,-1684(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2baa4:	86dea0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   2baa8:	00153513          	sltiu	a0,a0,1
   2baac:	40a00533          	sub	a0,zero,a0
   2bab0:	8c69                	c.and	s0,a0
      }
   2bab2:	8522                	c.mv	a0,s0
   2bab4:	60a2                	c.ldsp	ra,8(sp)
   2bab6:	6402                	c.ldsp	s0,0(sp)
   2bab8:	0141                	c.addi	sp,16
   2baba:	8082                	c.jr	ra
	return nullptr;
   2babc:	4401                	c.li	s0,0
   2babe:	bfd5                	c.j	2bab2 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002bac0 <elf::section_type_mismatch::~section_type_mismatch()>:
class section_type_mismatch : public std::logic_error {
   2bac0:	1141                	c.addi	sp,-16
   2bac2:	e406                	c.sdsp	ra,8(sp)
   2bac4:	0000e797          	auipc	a5,0xe
   2bac8:	8ec7b783          	ld	a5,-1812(a5) # 393b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   2bacc:	07c1                	c.addi	a5,16
   2bace:	e11c                	c.sd	a5,0(a0)
   2bad0:	bd1ea0ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   2bad4:	60a2                	c.ldsp	ra,8(sp)
   2bad6:	0141                	c.addi	sp,16
   2bad8:	8082                	c.jr	ra

000000000002bada <elf::section_type_mismatch::~section_type_mismatch()>:
   2bada:	1141                	c.addi	sp,-16
   2badc:	e406                	c.sdsp	ra,8(sp)
   2bade:	e022                	c.sdsp	s0,0(sp)
   2bae0:	842a                	c.mv	s0,a0
   2bae2:	0000e797          	auipc	a5,0xe
   2bae6:	8ce7b783          	ld	a5,-1842(a5) # 393b0 <vtable for elf::section_type_mismatch@@Base+0x7a0>
   2baea:	07c1                	c.addi	a5,16
   2baec:	e11c                	c.sd	a5,0(a0)
   2baee:	bb3ea0ef          	jal	ra,166a0 <std::logic_error::~logic_error()@plt>
   2baf2:	8522                	c.mv	a0,s0
   2baf4:	9bdea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2baf8:	60a2                	c.ldsp	ra,8(sp)
   2bafa:	6402                	c.ldsp	s0,0(sp)
   2bafc:	0141                	c.addi	sp,16
   2bafe:	8082                	c.jr	ra

000000000002bb00 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2bb00:	1141                	c.addi	sp,-16
   2bb02:	e406                	c.sdsp	ra,8(sp)
   2bb04:	e022                	c.sdsp	s0,0(sp)
   2bb06:	03850413          	addi	s0,a0,56
	    ||
   2bb0a:	0000e797          	auipc	a5,0xe
   2bb0e:	a267b783          	ld	a5,-1498(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   2bb12:	02f58a63          	beq	a1,a5,2bb46 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2bb16:	6588                	c.ld	a0,8(a1)
   2bb18:	0000e797          	auipc	a5,0xe
   2bb1c:	8f07b783          	ld	a5,-1808(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bb20:	02f50363          	beq	a0,a5,2bb46 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2bb24:	00054703          	lbu	a4,0(a0)
   2bb28:	02a00793          	addi	a5,zero,42
   2bb2c:	02f70263          	beq	a4,a5,2bb50 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2bb30:	0000e597          	auipc	a1,0xe
   2bb34:	8d85b583          	ld	a1,-1832(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bb38:	fd8ea0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   2bb3c:	00153513          	sltiu	a0,a0,1
   2bb40:	40a00533          	sub	a0,zero,a0
   2bb44:	8c69                	c.and	s0,a0
      }
   2bb46:	8522                	c.mv	a0,s0
   2bb48:	60a2                	c.ldsp	ra,8(sp)
   2bb4a:	6402                	c.ldsp	s0,0(sp)
   2bb4c:	0141                	c.addi	sp,16
   2bb4e:	8082                	c.jr	ra
	return nullptr;
   2bb50:	4401                	c.li	s0,0
   2bb52:	bfd5                	c.j	2bb46 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002bb54 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2bb54:	1141                	c.addi	sp,-16
   2bb56:	e406                	c.sdsp	ra,8(sp)
   2bb58:	e022                	c.sdsp	s0,0(sp)
   2bb5a:	03850413          	addi	s0,a0,56
	    ||
   2bb5e:	0000e797          	auipc	a5,0xe
   2bb62:	9d27b783          	ld	a5,-1582(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   2bb66:	02f58a63          	beq	a1,a5,2bb9a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2bb6a:	6588                	c.ld	a0,8(a1)
   2bb6c:	0000e797          	auipc	a5,0xe
   2bb70:	89c7b783          	ld	a5,-1892(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bb74:	02f50363          	beq	a0,a5,2bb9a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2bb78:	00054703          	lbu	a4,0(a0)
   2bb7c:	02a00793          	addi	a5,zero,42
   2bb80:	02f70263          	beq	a4,a5,2bba4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2bb84:	0000e597          	auipc	a1,0xe
   2bb88:	8845b583          	ld	a1,-1916(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bb8c:	f84ea0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   2bb90:	00153513          	sltiu	a0,a0,1
   2bb94:	40a00533          	sub	a0,zero,a0
   2bb98:	8c69                	c.and	s0,a0
      }
   2bb9a:	8522                	c.mv	a0,s0
   2bb9c:	60a2                	c.ldsp	ra,8(sp)
   2bb9e:	6402                	c.ldsp	s0,0(sp)
   2bba0:	0141                	c.addi	sp,16
   2bba2:	8082                	c.jr	ra
	return nullptr;
   2bba4:	4401                	c.li	s0,0
   2bba6:	bfd5                	c.j	2bb9a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002bba8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2bba8:	1141                	c.addi	sp,-16
   2bbaa:	e406                	c.sdsp	ra,8(sp)
   2bbac:	e022                	c.sdsp	s0,0(sp)
   2bbae:	03850413          	addi	s0,a0,56
	    ||
   2bbb2:	0000e797          	auipc	a5,0xe
   2bbb6:	97e7b783          	ld	a5,-1666(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   2bbba:	02f58a63          	beq	a1,a5,2bbee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2bbbe:	6588                	c.ld	a0,8(a1)
   2bbc0:	0000e797          	auipc	a5,0xe
   2bbc4:	8487b783          	ld	a5,-1976(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bbc8:	02f50363          	beq	a0,a5,2bbee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2bbcc:	00054703          	lbu	a4,0(a0)
   2bbd0:	02a00793          	addi	a5,zero,42
   2bbd4:	02f70263          	beq	a4,a5,2bbf8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2bbd8:	0000e597          	auipc	a1,0xe
   2bbdc:	8305b583          	ld	a1,-2000(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bbe0:	f30ea0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   2bbe4:	00153513          	sltiu	a0,a0,1
   2bbe8:	40a00533          	sub	a0,zero,a0
   2bbec:	8c69                	c.and	s0,a0
      }
   2bbee:	8522                	c.mv	a0,s0
   2bbf0:	60a2                	c.ldsp	ra,8(sp)
   2bbf2:	6402                	c.ldsp	s0,0(sp)
   2bbf4:	0141                	c.addi	sp,16
   2bbf6:	8082                	c.jr	ra
	return nullptr;
   2bbf8:	4401                	c.li	s0,0
   2bbfa:	bfd5                	c.j	2bbee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002bbfc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2bbfc:	1141                	c.addi	sp,-16
   2bbfe:	e406                	c.sdsp	ra,8(sp)
   2bc00:	e022                	c.sdsp	s0,0(sp)
   2bc02:	03850413          	addi	s0,a0,56
	    ||
   2bc06:	0000e797          	auipc	a5,0xe
   2bc0a:	92a7b783          	ld	a5,-1750(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   2bc0e:	02f58a63          	beq	a1,a5,2bc42 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2bc12:	6588                	c.ld	a0,8(a1)
   2bc14:	0000d797          	auipc	a5,0xd
   2bc18:	7f47b783          	ld	a5,2036(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bc1c:	02f50363          	beq	a0,a5,2bc42 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2bc20:	00054703          	lbu	a4,0(a0)
   2bc24:	02a00793          	addi	a5,zero,42
   2bc28:	02f70263          	beq	a4,a5,2bc4c <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2bc2c:	0000d597          	auipc	a1,0xd
   2bc30:	7dc5b583          	ld	a1,2012(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2bc34:	edcea0ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   2bc38:	00153513          	sltiu	a0,a0,1
   2bc3c:	40a00533          	sub	a0,zero,a0
   2bc40:	8c69                	c.and	s0,a0
      }
   2bc42:	8522                	c.mv	a0,s0
   2bc44:	60a2                	c.ldsp	ra,8(sp)
   2bc46:	6402                	c.ldsp	s0,0(sp)
   2bc48:	0141                	c.addi	sp,16
   2bc4a:	8082                	c.jr	ra
	return nullptr;
   2bc4c:	4401                	c.li	s0,0
   2bc4e:	bfd5                	c.j	2bc42 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002bc50 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bc50:	1141                	c.addi	sp,-16
   2bc52:	e406                	c.sdsp	ra,8(sp)
   2bc54:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2bc56:	6120                	c.ld	s0,64(a0)
   2bc58:	cc19                	c.beqz	s0,2bc76 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2bc5a:	0000e797          	auipc	a5,0xe
   2bc5e:	81e7b783          	ld	a5,-2018(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bc62:	0007c783          	lbu	a5,0(a5)
   2bc66:	cf81                	c.beqz	a5,2bc7e <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2bc68:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bc6a:	fff5079b          	addiw	a5,a0,-1
   2bc6e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bc70:	4785                	c.li	a5,1
   2bc72:	00f50c63          	beq	a0,a5,2bc8a <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2bc76:	60a2                	c.ldsp	ra,8(sp)
   2bc78:	6402                	c.ldsp	s0,0(sp)
   2bc7a:	0141                	c.addi	sp,16
   2bc7c:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bc7e:	55fd                	c.li	a1,-1
   2bc80:	03040513          	addi	a0,s0,48
   2bc84:	eacea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bc88:	b7e5                	c.j	2bc70 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2bc8a:	601c                	c.ld	a5,0(s0)
   2bc8c:	6b9c                	c.ld	a5,16(a5)
   2bc8e:	8522                	c.mv	a0,s0
   2bc90:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bc92:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bc96:	0000d797          	auipc	a5,0xd
   2bc9a:	7e27b783          	ld	a5,2018(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bc9e:	0007c783          	lbu	a5,0(a5)
   2bca2:	cf89                	c.beqz	a5,2bcbc <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bca4:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bca6:	fff5079b          	addiw	a5,a0,-1
   2bcaa:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bcac:	4785                	c.li	a5,1
   2bcae:	fcf514e3          	bne	a0,a5,2bc76 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2bcb2:	601c                	c.ld	a5,0(s0)
   2bcb4:	6f9c                	c.ld	a5,24(a5)
   2bcb6:	8522                	c.mv	a0,s0
   2bcb8:	9782                	c.jalr	a5
      }
   2bcba:	bf75                	c.j	2bc76 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2bcbc:	55fd                	c.li	a1,-1
   2bcbe:	03440513          	addi	a0,s0,52
   2bcc2:	e6eea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bcc6:	b7dd                	c.j	2bcac <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002bcc8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bcc8:	1141                	c.addi	sp,-16
   2bcca:	e406                	c.sdsp	ra,8(sp)
   2bccc:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2bcce:	6120                	c.ld	s0,64(a0)
   2bcd0:	cc19                	c.beqz	s0,2bcee <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2bcd2:	0000d797          	auipc	a5,0xd
   2bcd6:	7a67b783          	ld	a5,1958(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bcda:	0007c783          	lbu	a5,0(a5)
   2bcde:	cf81                	c.beqz	a5,2bcf6 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2bce0:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bce2:	fff5079b          	addiw	a5,a0,-1
   2bce6:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bce8:	4785                	c.li	a5,1
   2bcea:	00f50c63          	beq	a0,a5,2bd02 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2bcee:	60a2                	c.ldsp	ra,8(sp)
   2bcf0:	6402                	c.ldsp	s0,0(sp)
   2bcf2:	0141                	c.addi	sp,16
   2bcf4:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bcf6:	55fd                	c.li	a1,-1
   2bcf8:	03040513          	addi	a0,s0,48
   2bcfc:	e34ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bd00:	b7e5                	c.j	2bce8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2bd02:	601c                	c.ld	a5,0(s0)
   2bd04:	6b9c                	c.ld	a5,16(a5)
   2bd06:	8522                	c.mv	a0,s0
   2bd08:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bd0a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bd0e:	0000d797          	auipc	a5,0xd
   2bd12:	76a7b783          	ld	a5,1898(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bd16:	0007c783          	lbu	a5,0(a5)
   2bd1a:	cf89                	c.beqz	a5,2bd34 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bd1c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bd1e:	fff5079b          	addiw	a5,a0,-1
   2bd22:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bd24:	4785                	c.li	a5,1
   2bd26:	fcf514e3          	bne	a0,a5,2bcee <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2bd2a:	601c                	c.ld	a5,0(s0)
   2bd2c:	6f9c                	c.ld	a5,24(a5)
   2bd2e:	8522                	c.mv	a0,s0
   2bd30:	9782                	c.jalr	a5
      }
   2bd32:	bf75                	c.j	2bcee <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2bd34:	55fd                	c.li	a1,-1
   2bd36:	03440513          	addi	a0,s0,52
   2bd3a:	df6ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bd3e:	b7dd                	c.j	2bd24 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002bd40 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bd40:	1141                	c.addi	sp,-16
   2bd42:	e406                	c.sdsp	ra,8(sp)
   2bd44:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2bd46:	6120                	c.ld	s0,64(a0)
   2bd48:	cc19                	c.beqz	s0,2bd66 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2bd4a:	0000d797          	auipc	a5,0xd
   2bd4e:	72e7b783          	ld	a5,1838(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bd52:	0007c783          	lbu	a5,0(a5)
   2bd56:	cf81                	c.beqz	a5,2bd6e <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2bd58:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bd5a:	fff5079b          	addiw	a5,a0,-1
   2bd5e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bd60:	4785                	c.li	a5,1
   2bd62:	00f50c63          	beq	a0,a5,2bd7a <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2bd66:	60a2                	c.ldsp	ra,8(sp)
   2bd68:	6402                	c.ldsp	s0,0(sp)
   2bd6a:	0141                	c.addi	sp,16
   2bd6c:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bd6e:	55fd                	c.li	a1,-1
   2bd70:	03040513          	addi	a0,s0,48
   2bd74:	dbcea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bd78:	b7e5                	c.j	2bd60 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2bd7a:	601c                	c.ld	a5,0(s0)
   2bd7c:	6b9c                	c.ld	a5,16(a5)
   2bd7e:	8522                	c.mv	a0,s0
   2bd80:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bd82:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bd86:	0000d797          	auipc	a5,0xd
   2bd8a:	6f27b783          	ld	a5,1778(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bd8e:	0007c783          	lbu	a5,0(a5)
   2bd92:	cf89                	c.beqz	a5,2bdac <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bd94:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bd96:	fff5079b          	addiw	a5,a0,-1
   2bd9a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bd9c:	4785                	c.li	a5,1
   2bd9e:	fcf514e3          	bne	a0,a5,2bd66 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2bda2:	601c                	c.ld	a5,0(s0)
   2bda4:	6f9c                	c.ld	a5,24(a5)
   2bda6:	8522                	c.mv	a0,s0
   2bda8:	9782                	c.jalr	a5
      }
   2bdaa:	bf75                	c.j	2bd66 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2bdac:	55fd                	c.li	a1,-1
   2bdae:	03440513          	addi	a0,s0,52
   2bdb2:	d7eea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bdb6:	b7dd                	c.j	2bd9c <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002bdb8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bdb8:	1101                	c.addi	sp,-32
   2bdba:	ec06                	c.sdsp	ra,24(sp)
   2bdbc:	e822                	c.sdsp	s0,16(sp)
   2bdbe:	e426                	c.sdsp	s1,8(sp)
   2bdc0:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   2bdc2:	7124                	c.ld	s1,96(a0)
   2bdc4:	cc99                	c.beqz	s1,2bde2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
    if (__is_single_threaded())
   2bdc6:	0000d797          	auipc	a5,0xd
   2bdca:	6b27b783          	ld	a5,1714(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bdce:	0007c783          	lbu	a5,0(a5)
   2bdd2:	cf8d                	c.beqz	a5,2be0c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
    _Atomic_word __result = *__mem;
   2bdd4:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2bdd6:	fff5079b          	addiw	a5,a0,-1
   2bdda:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bddc:	4785                	c.li	a5,1
   2bdde:	02f50d63          	beq	a0,a5,2be18 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x60>
	if (_M_pi != nullptr)
   2bde2:	6020                	c.ld	s0,64(s0)
   2bde4:	cc19                	c.beqz	s0,2be02 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
    if (__is_single_threaded())
   2bde6:	0000d797          	auipc	a5,0xd
   2bdea:	6927b783          	ld	a5,1682(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bdee:	0007c783          	lbu	a5,0(a5)
   2bdf2:	c3b5                	c.beqz	a5,2be56 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9e>
    _Atomic_word __result = *__mem;
   2bdf4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bdf6:	fff5079b          	addiw	a5,a0,-1
   2bdfa:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bdfc:	4785                	c.li	a5,1
   2bdfe:	06f50263          	beq	a0,a5,2be62 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xaa>
      }
   2be02:	60e2                	c.ldsp	ra,24(sp)
   2be04:	6442                	c.ldsp	s0,16(sp)
   2be06:	64a2                	c.ldsp	s1,8(sp)
   2be08:	6105                	c.addi16sp	sp,32
   2be0a:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2be0c:	55fd                	c.li	a1,-1
   2be0e:	03048513          	addi	a0,s1,48
   2be12:	d1eea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be16:	b7d9                	c.j	2bddc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x24>
	_M_dispose();
   2be18:	609c                	c.ld	a5,0(s1)
   2be1a:	6b9c                	c.ld	a5,16(a5)
   2be1c:	8526                	c.mv	a0,s1
   2be1e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2be20:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2be24:	0000d797          	auipc	a5,0xd
   2be28:	6547b783          	ld	a5,1620(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2be2c:	0007c783          	lbu	a5,0(a5)
   2be30:	cf89                	c.beqz	a5,2be4a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
    _Atomic_word __result = *__mem;
   2be32:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2be34:	fff5079b          	addiw	a5,a0,-1
   2be38:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2be3a:	4785                	c.li	a5,1
   2be3c:	faf513e3          	bne	a0,a5,2bde2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
	    _M_destroy();
   2be40:	609c                	c.ld	a5,0(s1)
   2be42:	6f9c                	c.ld	a5,24(a5)
   2be44:	8526                	c.mv	a0,s1
   2be46:	9782                	c.jalr	a5
   2be48:	bf69                	c.j	2bde2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
      return __exchange_and_add(__mem, __val);
   2be4a:	55fd                	c.li	a1,-1
   2be4c:	03448513          	addi	a0,s1,52
   2be50:	ce0ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be54:	b7dd                	c.j	2be3a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x82>
   2be56:	55fd                	c.li	a1,-1
   2be58:	03040513          	addi	a0,s0,48
   2be5c:	cd4ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be60:	bf71                	c.j	2bdfc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x44>
	_M_dispose();
   2be62:	601c                	c.ld	a5,0(s0)
   2be64:	6b9c                	c.ld	a5,16(a5)
   2be66:	8522                	c.mv	a0,s0
   2be68:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2be6a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2be6e:	0000d797          	auipc	a5,0xd
   2be72:	60a7b783          	ld	a5,1546(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2be76:	0007c783          	lbu	a5,0(a5)
   2be7a:	cf89                	c.beqz	a5,2be94 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xdc>
    _Atomic_word __result = *__mem;
   2be7c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2be7e:	fff5079b          	addiw	a5,a0,-1
   2be82:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2be84:	4785                	c.li	a5,1
   2be86:	f6f51ee3          	bne	a0,a5,2be02 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
	    _M_destroy();
   2be8a:	601c                	c.ld	a5,0(s0)
   2be8c:	6f9c                	c.ld	a5,24(a5)
   2be8e:	8522                	c.mv	a0,s0
   2be90:	9782                	c.jalr	a5
      }
   2be92:	bf85                	c.j	2be02 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
      return __exchange_and_add(__mem, __val);
   2be94:	55fd                	c.li	a1,-1
   2be96:	03440513          	addi	a0,s0,52
   2be9a:	c96ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be9e:	b7dd                	c.j	2be84 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xcc>

000000000002bea0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bea0:	7139                	c.addi16sp	sp,-64
   2bea2:	fc06                	c.sdsp	ra,56(sp)
   2bea4:	f822                	c.sdsp	s0,48(sp)
   2bea6:	f426                	c.sdsp	s1,40(sp)
   2bea8:	f04a                	c.sdsp	s2,32(sp)
   2beaa:	ec4e                	c.sdsp	s3,24(sp)
   2beac:	e852                	c.sdsp	s4,16(sp)
   2beae:	e456                	c.sdsp	s5,8(sp)
   2beb0:	892a                	c.mv	s2,a0
	if (_M_pi != nullptr)
   2beb2:	6960                	c.ld	s0,208(a0)
   2beb4:	cc19                	c.beqz	s0,2bed2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
    if (__is_single_threaded())
   2beb6:	0000d797          	auipc	a5,0xd
   2beba:	5c27b783          	ld	a5,1474(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bebe:	0007c783          	lbu	a5,0(a5)
   2bec2:	c7a9                	c.beqz	a5,2bf0c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bec4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bec6:	fff5079b          	addiw	a5,a0,-1
   2beca:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2becc:	4785                	c.li	a5,1
   2bece:	04f50563          	beq	a0,a5,2bf18 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x78>
	if (_M_pi != nullptr)
   2bed2:	0c093403          	ld	s0,192(s2)
   2bed6:	cc19                	c.beqz	s0,2bef4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
    if (__is_single_threaded())
   2bed8:	0000d797          	auipc	a5,0xd
   2bedc:	5a07b783          	ld	a5,1440(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bee0:	0007c783          	lbu	a5,0(a5)
   2bee4:	cbad                	c.beqz	a5,2bf56 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb6>
    _Atomic_word __result = *__mem;
   2bee6:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bee8:	fff5079b          	addiw	a5,a0,-1
   2beec:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2beee:	4785                	c.li	a5,1
   2bef0:	06f50963          	beq	a0,a5,2bf62 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2bef4:	0a093403          	ld	s0,160(s2)
   2bef8:	0a893983          	ld	s3,168(s2)
	  for (; __first != __last; ++__first)
   2befc:	11340563          	beq	s0,s3,2c006 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x166>
    return ::__libc_single_threaded;
   2bf00:	0000da97          	auipc	s5,0xd
   2bf04:	578aba83          	ld	s5,1400(s5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bf08:	4a05                	c.li	s4,1
   2bf0a:	a065                	c.j	2bfb2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x112>
      return __exchange_and_add(__mem, __val);
   2bf0c:	55fd                	c.li	a1,-1
   2bf0e:	03040513          	addi	a0,s0,48
   2bf12:	c1eea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bf16:	bf5d                	c.j	2becc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c>
	_M_dispose();
   2bf18:	601c                	c.ld	a5,0(s0)
   2bf1a:	6b9c                	c.ld	a5,16(a5)
   2bf1c:	8522                	c.mv	a0,s0
   2bf1e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bf20:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bf24:	0000d797          	auipc	a5,0xd
   2bf28:	5547b783          	ld	a5,1364(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bf2c:	0007c783          	lbu	a5,0(a5)
   2bf30:	cf89                	c.beqz	a5,2bf4a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xaa>
    _Atomic_word __result = *__mem;
   2bf32:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bf34:	fff5079b          	addiw	a5,a0,-1
   2bf38:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bf3a:	4785                	c.li	a5,1
   2bf3c:	f8f51be3          	bne	a0,a5,2bed2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
	    _M_destroy();
   2bf40:	601c                	c.ld	a5,0(s0)
   2bf42:	6f9c                	c.ld	a5,24(a5)
   2bf44:	8522                	c.mv	a0,s0
   2bf46:	9782                	c.jalr	a5
   2bf48:	b769                	c.j	2bed2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
      return __exchange_and_add(__mem, __val);
   2bf4a:	55fd                	c.li	a1,-1
   2bf4c:	03440513          	addi	a0,s0,52
   2bf50:	be0ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bf54:	b7dd                	c.j	2bf3a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9a>
   2bf56:	55fd                	c.li	a1,-1
   2bf58:	03040513          	addi	a0,s0,48
   2bf5c:	bd4ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bf60:	b779                	c.j	2beee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4e>
	_M_dispose();
   2bf62:	601c                	c.ld	a5,0(s0)
   2bf64:	6b9c                	c.ld	a5,16(a5)
   2bf66:	8522                	c.mv	a0,s0
   2bf68:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bf6a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bf6e:	0000d797          	auipc	a5,0xd
   2bf72:	50a7b783          	ld	a5,1290(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bf76:	0007c783          	lbu	a5,0(a5)
   2bf7a:	cf89                	c.beqz	a5,2bf94 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf4>
    _Atomic_word __result = *__mem;
   2bf7c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bf7e:	fff5079b          	addiw	a5,a0,-1
   2bf82:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bf84:	4785                	c.li	a5,1
   2bf86:	f6f517e3          	bne	a0,a5,2bef4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
	    _M_destroy();
   2bf8a:	601c                	c.ld	a5,0(s0)
   2bf8c:	6f9c                	c.ld	a5,24(a5)
   2bf8e:	8522                	c.mv	a0,s0
   2bf90:	9782                	c.jalr	a5
   2bf92:	b78d                	c.j	2bef4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
      return __exchange_and_add(__mem, __val);
   2bf94:	55fd                	c.li	a1,-1
   2bf96:	03440513          	addi	a0,s0,52
   2bf9a:	b96ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bf9e:	b7dd                	c.j	2bf84 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
    _Atomic_word __result = *__mem;
   2bfa0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2bfa2:	fff5079b          	addiw	a5,a0,-1
   2bfa6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bfa8:	03450063          	beq	a0,s4,2bfc8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x128>
   2bfac:	0441                	c.addi	s0,16
   2bfae:	04898c63          	beq	s3,s0,2c006 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x166>
	if (_M_pi != nullptr)
   2bfb2:	6404                	c.ld	s1,8(s0)
   2bfb4:	dce5                	c.beqz	s1,2bfac <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
    if (__is_single_threaded())
   2bfb6:	000ac783          	lbu	a5,0(s5)
   2bfba:	f3fd                	c.bnez	a5,2bfa0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x100>
      return __exchange_and_add(__mem, __val);
   2bfbc:	55fd                	c.li	a1,-1
   2bfbe:	03048513          	addi	a0,s1,48
   2bfc2:	b6eea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bfc6:	b7cd                	c.j	2bfa8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x108>
	_M_dispose();
   2bfc8:	609c                	c.ld	a5,0(s1)
   2bfca:	6b9c                	c.ld	a5,16(a5)
   2bfcc:	8526                	c.mv	a0,s1
   2bfce:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bfd0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bfd4:	0000d797          	auipc	a5,0xd
   2bfd8:	4a47b783          	ld	a5,1188(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bfdc:	0007c783          	lbu	a5,0(a5)
   2bfe0:	cf89                	c.beqz	a5,2bffa <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15a>
    _Atomic_word __result = *__mem;
   2bfe2:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2bfe4:	fff5079b          	addiw	a5,a0,-1
   2bfe8:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bfea:	4785                	c.li	a5,1
   2bfec:	fcf510e3          	bne	a0,a5,2bfac <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
	    _M_destroy();
   2bff0:	609c                	c.ld	a5,0(s1)
   2bff2:	6f9c                	c.ld	a5,24(a5)
   2bff4:	8526                	c.mv	a0,s1
   2bff6:	9782                	c.jalr	a5
   2bff8:	bf55                	c.j	2bfac <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
      return __exchange_and_add(__mem, __val);
   2bffa:	55fd                	c.li	a1,-1
   2bffc:	03448513          	addi	a0,s1,52
   2c000:	b30ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c004:	b7dd                	c.j	2bfea <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x14a>
	_M_deallocate(_M_impl._M_start,
   2c006:	0a093503          	ld	a0,160(s2)
	if (__p)
   2c00a:	c119                	c.beqz	a0,2c010 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
   2c00c:	ca4ea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2c010:	08893403          	ld	s0,136(s2)
   2c014:	09093983          	ld	s3,144(s2)
   2c018:	07340b63          	beq	s0,s3,2c08e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1ee>
    return ::__libc_single_threaded;
   2c01c:	0000da97          	auipc	s5,0xd
   2c020:	45caba83          	ld	s5,1116(s5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c024:	4a05                	c.li	s4,1
   2c026:	a811                	c.j	2c03a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x19a>
    _Atomic_word __result = *__mem;
   2c028:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2c02a:	fff5079b          	addiw	a5,a0,-1
   2c02e:	d89c                	c.sw	a5,48(s1)
   2c030:	03450063          	beq	a0,s4,2c050 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1b0>
   2c034:	0441                	c.addi	s0,16
   2c036:	04898c63          	beq	s3,s0,2c08e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1ee>
	if (_M_pi != nullptr)
   2c03a:	6404                	c.ld	s1,8(s0)
   2c03c:	dce5                	c.beqz	s1,2c034 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
    if (__is_single_threaded())
   2c03e:	000ac783          	lbu	a5,0(s5)
   2c042:	f3fd                	c.bnez	a5,2c028 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x188>
      return __exchange_and_add(__mem, __val);
   2c044:	55fd                	c.li	a1,-1
   2c046:	03048513          	addi	a0,s1,48
   2c04a:	ae6ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c04e:	b7cd                	c.j	2c030 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x190>
	_M_dispose();
   2c050:	609c                	c.ld	a5,0(s1)
   2c052:	6b9c                	c.ld	a5,16(a5)
   2c054:	8526                	c.mv	a0,s1
   2c056:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c058:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c05c:	0000d797          	auipc	a5,0xd
   2c060:	41c7b783          	ld	a5,1052(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2c064:	0007c783          	lbu	a5,0(a5)
   2c068:	cf89                	c.beqz	a5,2c082 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1e2>
    _Atomic_word __result = *__mem;
   2c06a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2c06c:	fff5079b          	addiw	a5,a0,-1
   2c070:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c072:	4785                	c.li	a5,1
   2c074:	fcf510e3          	bne	a0,a5,2c034 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
	    _M_destroy();
   2c078:	609c                	c.ld	a5,0(s1)
   2c07a:	6f9c                	c.ld	a5,24(a5)
   2c07c:	8526                	c.mv	a0,s1
   2c07e:	9782                	c.jalr	a5
   2c080:	bf55                	c.j	2c034 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
      return __exchange_and_add(__mem, __val);
   2c082:	55fd                	c.li	a1,-1
   2c084:	03448513          	addi	a0,s1,52
   2c088:	aa8ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c08c:	b7dd                	c.j	2c072 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d2>
	_M_deallocate(_M_impl._M_start,
   2c08e:	08893503          	ld	a0,136(s2)
	if (__p)
   2c092:	c119                	c.beqz	a0,2c098 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f8>
   2c094:	c1cea0ef          	jal	ra,164b0 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2c098:	04093403          	ld	s0,64(s2)
   2c09c:	cc19                	c.beqz	s0,2c0ba <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
    if (__is_single_threaded())
   2c09e:	0000d797          	auipc	a5,0xd
   2c0a2:	3da7b783          	ld	a5,986(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2c0a6:	0007c783          	lbu	a5,0(a5)
   2c0aa:	c38d                	c.beqz	a5,2c0cc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x22c>
    _Atomic_word __result = *__mem;
   2c0ac:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2c0ae:	fff5079b          	addiw	a5,a0,-1
   2c0b2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2c0b4:	4785                	c.li	a5,1
   2c0b6:	02f50163          	beq	a0,a5,2c0d8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
      }
   2c0ba:	70e2                	c.ldsp	ra,56(sp)
   2c0bc:	7442                	c.ldsp	s0,48(sp)
   2c0be:	74a2                	c.ldsp	s1,40(sp)
   2c0c0:	7902                	c.ldsp	s2,32(sp)
   2c0c2:	69e2                	c.ldsp	s3,24(sp)
   2c0c4:	6a42                	c.ldsp	s4,16(sp)
   2c0c6:	6aa2                	c.ldsp	s5,8(sp)
   2c0c8:	6121                	c.addi16sp	sp,64
   2c0ca:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2c0cc:	55fd                	c.li	a1,-1
   2c0ce:	03040513          	addi	a0,s0,48
   2c0d2:	a5eea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c0d6:	bff9                	c.j	2c0b4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x214>
	_M_dispose();
   2c0d8:	601c                	c.ld	a5,0(s0)
   2c0da:	6b9c                	c.ld	a5,16(a5)
   2c0dc:	8522                	c.mv	a0,s0
   2c0de:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2c0e0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2c0e4:	0000d797          	auipc	a5,0xd
   2c0e8:	3947b783          	ld	a5,916(a5) # 39478 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2c0ec:	0007c783          	lbu	a5,0(a5)
   2c0f0:	cf89                	c.beqz	a5,2c10a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26a>
    _Atomic_word __result = *__mem;
   2c0f2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2c0f4:	fff5079b          	addiw	a5,a0,-1
   2c0f8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2c0fa:	4785                	c.li	a5,1
   2c0fc:	faf51fe3          	bne	a0,a5,2c0ba <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
	    _M_destroy();
   2c100:	601c                	c.ld	a5,0(s0)
   2c102:	6f9c                	c.ld	a5,24(a5)
   2c104:	8522                	c.mv	a0,s0
   2c106:	9782                	c.jalr	a5
      }
   2c108:	bf4d                	c.j	2c0ba <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
      return __exchange_and_add(__mem, __val);
   2c10a:	55fd                	c.li	a1,-1
   2c10c:	03440513          	addi	a0,s0,52
   2c110:	a20ea0ef          	jal	ra,16330 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c114:	b7dd                	c.j	2c0fa <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x25a>

000000000002c116 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c116:	1101                	c.addi	sp,-32
   2c118:	ec06                	c.sdsp	ra,24(sp)
   2c11a:	e822                	c.sdsp	s0,16(sp)
   2c11c:	e426                	c.sdsp	s1,8(sp)
   2c11e:	84aa                	c.mv	s1,a0
   2c120:	842e                	c.mv	s0,a1
  switch (ei_class) {
   2c122:	4785                	c.li	a5,1
   2c124:	00f60a63          	beq	a2,a5,2c138 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c128:	4789                	c.li	a5,2
   2c12a:	22f60e63          	beq	a2,a5,2c366 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x250>
}
   2c12e:	60e2                	c.ldsp	ra,24(sp)
   2c130:	6442                	c.ldsp	s0,16(sp)
   2c132:	64a2                	c.ldsp	s1,8(sp)
   2c134:	6105                	c.addi16sp	sp,32
   2c136:	8082                	c.jr	ra
   2c138:	4785                	c.li	a5,1
   2c13a:	14f68863          	beq	a3,a5,2c28a <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x174>
   2c13e:	4789                	c.li	a5,2
   2c140:	fef697e3          	bne	a3,a5,2c12e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
  typename E::Half shentsize; // Size of section header entry
  typename E::Half shnum;     // Number of section header entries
  typename E::Half shstrndx;  // Section name string table index

  template <typename E2> void from(const E2 &o) {
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c144:	0005c603          	lbu	a2,0(a1)
   2c148:	0015c683          	lbu	a3,1(a1)
   2c14c:	0025c703          	lbu	a4,2(a1)
   2c150:	0035c783          	lbu	a5,3(a1)
   2c154:	00c50023          	sb	a2,0(a0)
   2c158:	00d500a3          	sb	a3,1(a0)
   2c15c:	00e50123          	sb	a4,2(a0)
   2c160:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c164:	0045c783          	lbu	a5,4(a1)
   2c168:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c16c:	0055c783          	lbu	a5,5(a1)
   2c170:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c174:	0065c783          	lbu	a5,6(a1)
   2c178:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c17c:	0075c783          	lbu	a5,7(a1)
   2c180:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c184:	0085c783          	lbu	a5,8(a1)
   2c188:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c18c:	0095c883          	lbu	a7,9(a1)
   2c190:	00a5c803          	lbu	a6,10(a1)
   2c194:	00b5c503          	lbu	a0,11(a1)
   2c198:	00c5c583          	lbu	a1,12(a1)
   2c19c:	00d44603          	lbu	a2,13(s0)
   2c1a0:	00e44683          	lbu	a3,14(s0)
   2c1a4:	00f44703          	lbu	a4,15(s0)
   2c1a8:	011484a3          	sb	a7,9(s1)
   2c1ac:	01048523          	sb	a6,10(s1)
   2c1b0:	00a485a3          	sb	a0,11(s1)
   2c1b4:	00b48623          	sb	a1,12(s1)
   2c1b8:	00c486a3          	sb	a2,13(s1)
   2c1bc:	00d48723          	sb	a3,14(s1)
   2c1c0:	00e487a3          	sb	a4,15(s1)

    type = swizzle(o.type, o.order, order);
   2c1c4:	01045783          	lhu	a5,16(s0)
  switch (sizeof(T)) {
  case 1:
    return v;
  case 2: {
    std::uint16_t x = (std::uint16_t)v;
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c1c8:	0087d71b          	srliw	a4,a5,0x8
   2c1cc:	0087979b          	slliw	a5,a5,0x8
   2c1d0:	8fd9                	c.or	a5,a4
   2c1d2:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c1d6:	01245783          	lhu	a5,18(s0)
   2c1da:	0087d71b          	srliw	a4,a5,0x8
   2c1de:	0087979b          	slliw	a5,a5,0x8
   2c1e2:	8fd9                	c.or	a5,a4
   2c1e4:	00f49923          	sh	a5,18(s1)
  }
  case 4:
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c1e8:	4848                	c.lw	a0,20(s0)
   2c1ea:	936ea0ef          	jal	ra,16320 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   2c1ee:	c8c8                	c.sw	a0,20(s1)
   2c1f0:	4c08                	c.lw	a0,24(s0)
   2c1f2:	92eea0ef          	jal	ra,16320 <__bswapsi2@plt>
    entry = swizzle(o.entry, o.order, order);
   2c1f6:	1502                	c.slli	a0,0x20
   2c1f8:	9101                	c.srli	a0,0x20
   2c1fa:	ec88                	c.sd	a0,24(s1)
   2c1fc:	4c48                	c.lw	a0,28(s0)
   2c1fe:	922ea0ef          	jal	ra,16320 <__bswapsi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   2c202:	1502                	c.slli	a0,0x20
   2c204:	9101                	c.srli	a0,0x20
   2c206:	f088                	c.sd	a0,32(s1)
   2c208:	5008                	c.lw	a0,32(s0)
   2c20a:	916ea0ef          	jal	ra,16320 <__bswapsi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   2c20e:	1502                	c.slli	a0,0x20
   2c210:	9101                	c.srli	a0,0x20
   2c212:	f488                	c.sd	a0,40(s1)
   2c214:	5048                	c.lw	a0,36(s0)
   2c216:	90aea0ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c21a:	d888                	c.sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c21c:	02845783          	lhu	a5,40(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c220:	0087d71b          	srliw	a4,a5,0x8
   2c224:	0087979b          	slliw	a5,a5,0x8
   2c228:	8fd9                	c.or	a5,a4
   2c22a:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c22e:	02a45783          	lhu	a5,42(s0)
   2c232:	0087d71b          	srliw	a4,a5,0x8
   2c236:	0087979b          	slliw	a5,a5,0x8
   2c23a:	8fd9                	c.or	a5,a4
   2c23c:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c240:	02c45783          	lhu	a5,44(s0)
   2c244:	0087d71b          	srliw	a4,a5,0x8
   2c248:	0087979b          	slliw	a5,a5,0x8
   2c24c:	8fd9                	c.or	a5,a4
   2c24e:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c252:	02e45783          	lhu	a5,46(s0)
   2c256:	0087d71b          	srliw	a4,a5,0x8
   2c25a:	0087979b          	slliw	a5,a5,0x8
   2c25e:	8fd9                	c.or	a5,a4
   2c260:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c264:	03045783          	lhu	a5,48(s0)
   2c268:	0087d71b          	srliw	a4,a5,0x8
   2c26c:	0087979b          	slliw	a5,a5,0x8
   2c270:	8fd9                	c.or	a5,a4
   2c272:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c276:	03245783          	lhu	a5,50(s0)
   2c27a:	0087d71b          	srliw	a4,a5,0x8
   2c27e:	0087979b          	slliw	a5,a5,0x8
   2c282:	8fd9                	c.or	a5,a4
   2c284:	02f49f23          	sh	a5,62(s1)
  }
   2c288:	b55d                	c.j	2c12e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c28a:	0005c603          	lbu	a2,0(a1)
   2c28e:	0015c683          	lbu	a3,1(a1)
   2c292:	0025c703          	lbu	a4,2(a1)
   2c296:	0035c783          	lbu	a5,3(a1)
   2c29a:	00c50023          	sb	a2,0(a0)
   2c29e:	00d500a3          	sb	a3,1(a0)
   2c2a2:	00e50123          	sb	a4,2(a0)
   2c2a6:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c2aa:	0045c783          	lbu	a5,4(a1)
   2c2ae:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c2b2:	0055c783          	lbu	a5,5(a1)
   2c2b6:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c2ba:	0065c783          	lbu	a5,6(a1)
   2c2be:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c2c2:	0075c783          	lbu	a5,7(a1)
   2c2c6:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c2ca:	0085c783          	lbu	a5,8(a1)
   2c2ce:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c2d2:	0095c883          	lbu	a7,9(a1)
   2c2d6:	00a5c803          	lbu	a6,10(a1)
   2c2da:	00b5c503          	lbu	a0,11(a1)
   2c2de:	00c5c583          	lbu	a1,12(a1)
   2c2e2:	00d44603          	lbu	a2,13(s0)
   2c2e6:	00e44683          	lbu	a3,14(s0)
   2c2ea:	00f44703          	lbu	a4,15(s0)
   2c2ee:	011484a3          	sb	a7,9(s1)
   2c2f2:	01048523          	sb	a6,10(s1)
   2c2f6:	00a485a3          	sb	a0,11(s1)
   2c2fa:	00b48623          	sb	a1,12(s1)
   2c2fe:	00c486a3          	sb	a2,13(s1)
   2c302:	00d48723          	sb	a3,14(s1)
   2c306:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2c30a:	01045783          	lhu	a5,16(s0)
   2c30e:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c312:	01245783          	lhu	a5,18(s0)
   2c316:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   2c31a:	485c                	c.lw	a5,20(s0)
   2c31c:	c8dc                	c.sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   2c31e:	01846783          	lwu	a5,24(s0)
   2c322:	ec9c                	c.sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   2c324:	01c46783          	lwu	a5,28(s0)
   2c328:	f09c                	c.sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   2c32a:	02046783          	lwu	a5,32(s0)
   2c32e:	f49c                	c.sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   2c330:	505c                	c.lw	a5,36(s0)
   2c332:	d89c                	c.sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c334:	02845783          	lhu	a5,40(s0)
   2c338:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c33c:	02a45783          	lhu	a5,42(s0)
   2c340:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c344:	02c45783          	lhu	a5,44(s0)
   2c348:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c34c:	02e45783          	lhu	a5,46(s0)
   2c350:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c354:	03045783          	lhu	a5,48(s0)
   2c358:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c35c:	03245783          	lhu	a5,50(s0)
   2c360:	02f49f23          	sh	a5,62(s1)
  }
   2c364:	b3e9                	c.j	2c12e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c366:	4785                	c.li	a5,1
   2c368:	14f68263          	beq	a3,a5,2c4ac <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x396>
   2c36c:	4789                	c.li	a5,2
   2c36e:	dcf690e3          	bne	a3,a5,2c12e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c372:	0005c603          	lbu	a2,0(a1)
   2c376:	0015c683          	lbu	a3,1(a1)
   2c37a:	0025c703          	lbu	a4,2(a1)
   2c37e:	0035c783          	lbu	a5,3(a1)
   2c382:	00c50023          	sb	a2,0(a0)
   2c386:	00d500a3          	sb	a3,1(a0)
   2c38a:	00e50123          	sb	a4,2(a0)
   2c38e:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c392:	0045c783          	lbu	a5,4(a1)
   2c396:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c39a:	0055c783          	lbu	a5,5(a1)
   2c39e:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c3a2:	0065c783          	lbu	a5,6(a1)
   2c3a6:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c3aa:	0075c783          	lbu	a5,7(a1)
   2c3ae:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c3b2:	0085c783          	lbu	a5,8(a1)
   2c3b6:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c3ba:	0095c883          	lbu	a7,9(a1)
   2c3be:	00a5c803          	lbu	a6,10(a1)
   2c3c2:	00b5c503          	lbu	a0,11(a1)
   2c3c6:	00c5c583          	lbu	a1,12(a1)
   2c3ca:	00d44603          	lbu	a2,13(s0)
   2c3ce:	00e44683          	lbu	a3,14(s0)
   2c3d2:	00f44703          	lbu	a4,15(s0)
   2c3d6:	011484a3          	sb	a7,9(s1)
   2c3da:	01048523          	sb	a6,10(s1)
   2c3de:	00a485a3          	sb	a0,11(s1)
   2c3e2:	00b48623          	sb	a1,12(s1)
   2c3e6:	00c486a3          	sb	a2,13(s1)
   2c3ea:	00d48723          	sb	a3,14(s1)
   2c3ee:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2c3f2:	01045783          	lhu	a5,16(s0)
   2c3f6:	0087d71b          	srliw	a4,a5,0x8
   2c3fa:	0087979b          	slliw	a5,a5,0x8
   2c3fe:	8fd9                	c.or	a5,a4
   2c400:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c404:	01245783          	lhu	a5,18(s0)
   2c408:	0087d71b          	srliw	a4,a5,0x8
   2c40c:	0087979b          	slliw	a5,a5,0x8
   2c410:	8fd9                	c.or	a5,a4
   2c412:	00f49923          	sh	a5,18(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c416:	4848                	c.lw	a0,20(s0)
   2c418:	f09e90ef          	jal	ra,16320 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   2c41c:	c8c8                	c.sw	a0,20(s1)
  case 8:
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c41e:	6c08                	c.ld	a0,24(s0)
   2c420:	8d0ea0ef          	jal	ra,164f0 <__bswapdi2@plt>
    entry = swizzle(o.entry, o.order, order);
   2c424:	ec88                	c.sd	a0,24(s1)
   2c426:	7008                	c.ld	a0,32(s0)
   2c428:	8c8ea0ef          	jal	ra,164f0 <__bswapdi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   2c42c:	f088                	c.sd	a0,32(s1)
   2c42e:	7408                	c.ld	a0,40(s0)
   2c430:	8c0ea0ef          	jal	ra,164f0 <__bswapdi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   2c434:	f488                	c.sd	a0,40(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c436:	5808                	c.lw	a0,48(s0)
   2c438:	ee9e90ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c43c:	d888                	c.sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c43e:	03445783          	lhu	a5,52(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c442:	0087d71b          	srliw	a4,a5,0x8
   2c446:	0087979b          	slliw	a5,a5,0x8
   2c44a:	8fd9                	c.or	a5,a4
   2c44c:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c450:	03645783          	lhu	a5,54(s0)
   2c454:	0087d71b          	srliw	a4,a5,0x8
   2c458:	0087979b          	slliw	a5,a5,0x8
   2c45c:	8fd9                	c.or	a5,a4
   2c45e:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c462:	03845783          	lhu	a5,56(s0)
   2c466:	0087d71b          	srliw	a4,a5,0x8
   2c46a:	0087979b          	slliw	a5,a5,0x8
   2c46e:	8fd9                	c.or	a5,a4
   2c470:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c474:	03a45783          	lhu	a5,58(s0)
   2c478:	0087d71b          	srliw	a4,a5,0x8
   2c47c:	0087979b          	slliw	a5,a5,0x8
   2c480:	8fd9                	c.or	a5,a4
   2c482:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c486:	03c45783          	lhu	a5,60(s0)
   2c48a:	0087d71b          	srliw	a4,a5,0x8
   2c48e:	0087979b          	slliw	a5,a5,0x8
   2c492:	8fd9                	c.or	a5,a4
   2c494:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c498:	03e45783          	lhu	a5,62(s0)
   2c49c:	0087d71b          	srliw	a4,a5,0x8
   2c4a0:	0087979b          	slliw	a5,a5,0x8
   2c4a4:	8fd9                	c.or	a5,a4
   2c4a6:	02f49f23          	sh	a5,62(s1)
  }
   2c4aa:	b151                	c.j	2c12e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c4ac:	0005c603          	lbu	a2,0(a1)
   2c4b0:	0015c683          	lbu	a3,1(a1)
   2c4b4:	0025c703          	lbu	a4,2(a1)
   2c4b8:	0035c783          	lbu	a5,3(a1)
   2c4bc:	00c50023          	sb	a2,0(a0)
   2c4c0:	00d500a3          	sb	a3,1(a0)
   2c4c4:	00e50123          	sb	a4,2(a0)
   2c4c8:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c4cc:	0045c783          	lbu	a5,4(a1)
   2c4d0:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c4d4:	0055c783          	lbu	a5,5(a1)
   2c4d8:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c4dc:	0065c783          	lbu	a5,6(a1)
   2c4e0:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c4e4:	0075c783          	lbu	a5,7(a1)
   2c4e8:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c4ec:	0085c783          	lbu	a5,8(a1)
   2c4f0:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c4f4:	0095c883          	lbu	a7,9(a1)
   2c4f8:	00a5c803          	lbu	a6,10(a1)
   2c4fc:	00b5c503          	lbu	a0,11(a1)
   2c500:	00c5c583          	lbu	a1,12(a1)
   2c504:	00d44603          	lbu	a2,13(s0)
   2c508:	00e44683          	lbu	a3,14(s0)
   2c50c:	00f44703          	lbu	a4,15(s0)
   2c510:	011484a3          	sb	a7,9(s1)
   2c514:	01048523          	sb	a6,10(s1)
   2c518:	00a485a3          	sb	a0,11(s1)
   2c51c:	00b48623          	sb	a1,12(s1)
   2c520:	00c486a3          	sb	a2,13(s1)
   2c524:	00d48723          	sb	a3,14(s1)
   2c528:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2c52c:	01045783          	lhu	a5,16(s0)
   2c530:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c534:	01245783          	lhu	a5,18(s0)
   2c538:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   2c53c:	485c                	c.lw	a5,20(s0)
   2c53e:	c8dc                	c.sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   2c540:	6c1c                	c.ld	a5,24(s0)
   2c542:	ec9c                	c.sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   2c544:	701c                	c.ld	a5,32(s0)
   2c546:	f09c                	c.sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   2c548:	741c                	c.ld	a5,40(s0)
   2c54a:	f49c                	c.sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   2c54c:	581c                	c.lw	a5,48(s0)
   2c54e:	d89c                	c.sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c550:	03445783          	lhu	a5,52(s0)
   2c554:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c558:	03645783          	lhu	a5,54(s0)
   2c55c:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c560:	03845783          	lhu	a5,56(s0)
   2c564:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c568:	03a45783          	lhu	a5,58(s0)
   2c56c:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c570:	03c45783          	lhu	a5,60(s0)
   2c574:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c578:	03e45783          	lhu	a5,62(s0)
   2c57c:	02f49f23          	sh	a5,62(s1)
  }
   2c580:	b67d                	c.j	2c12e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c582 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c582:	1101                	c.addi	sp,-32
   2c584:	ec06                	c.sdsp	ra,24(sp)
   2c586:	e822                	c.sdsp	s0,16(sp)
   2c588:	e426                	c.sdsp	s1,8(sp)
   2c58a:	842a                	c.mv	s0,a0
   2c58c:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2c58e:	4785                	c.li	a5,1
   2c590:	00f60a63          	beq	a2,a5,2c5a4 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c594:	4789                	c.li	a5,2
   2c596:	0af60163          	beq	a2,a5,2c638 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xb6>
}
   2c59a:	60e2                	c.ldsp	ra,24(sp)
   2c59c:	6442                	c.ldsp	s0,16(sp)
   2c59e:	64a2                	c.ldsp	s1,8(sp)
   2c5a0:	6105                	c.addi16sp	sp,32
   2c5a2:	8082                	c.jr	ra
   2c5a4:	4785                	c.li	a5,1
   2c5a6:	06f68263          	beq	a3,a5,2c60a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x88>
   2c5aa:	4789                	c.li	a5,2
   2c5ac:	fef697e3          	bne	a3,a5,2c59a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c5b0:	4188                	c.lw	a0,0(a1)
   2c5b2:	d6fe90ef          	jal	ra,16320 <__bswapsi2@plt>
  Elf64::Xword filesz; // Size of segment in file
  Elf64::Xword memsz;  // Size of segment in memory
  Elf64::Xword align;  // Alignment of segment

  template <typename E2> void from(const E2 &o) {
    type = swizzle(o.type, o.order, order);
   2c5b6:	c008                	c.sw	a0,0(s0)
   2c5b8:	40c8                	c.lw	a0,4(s1)
   2c5ba:	d67e90ef          	jal	ra,16320 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c5be:	1502                	c.slli	a0,0x20
   2c5c0:	9101                	c.srli	a0,0x20
   2c5c2:	e408                	c.sd	a0,8(s0)
   2c5c4:	4488                	c.lw	a0,8(s1)
   2c5c6:	d5be90ef          	jal	ra,16320 <__bswapsi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   2c5ca:	1502                	c.slli	a0,0x20
   2c5cc:	9101                	c.srli	a0,0x20
   2c5ce:	e808                	c.sd	a0,16(s0)
   2c5d0:	44c8                	c.lw	a0,12(s1)
   2c5d2:	d4fe90ef          	jal	ra,16320 <__bswapsi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   2c5d6:	1502                	c.slli	a0,0x20
   2c5d8:	9101                	c.srli	a0,0x20
   2c5da:	ec08                	c.sd	a0,24(s0)
   2c5dc:	4888                	c.lw	a0,16(s1)
   2c5de:	d43e90ef          	jal	ra,16320 <__bswapsi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   2c5e2:	1502                	c.slli	a0,0x20
   2c5e4:	9101                	c.srli	a0,0x20
   2c5e6:	f008                	c.sd	a0,32(s0)
   2c5e8:	48c8                	c.lw	a0,20(s1)
   2c5ea:	d37e90ef          	jal	ra,16320 <__bswapsi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   2c5ee:	1502                	c.slli	a0,0x20
   2c5f0:	9101                	c.srli	a0,0x20
   2c5f2:	f408                	c.sd	a0,40(s0)
   2c5f4:	4c88                	c.lw	a0,24(s1)
   2c5f6:	d2be90ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c5fa:	c048                	c.sw	a0,4(s0)
   2c5fc:	4cc8                	c.lw	a0,28(s1)
   2c5fe:	d23e90ef          	jal	ra,16320 <__bswapsi2@plt>
    align = swizzle(o.align, o.order, order);
   2c602:	1502                	c.slli	a0,0x20
   2c604:	9101                	c.srli	a0,0x20
   2c606:	f808                	c.sd	a0,48(s0)
  }
   2c608:	bf49                	c.j	2c59a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    type = swizzle(o.type, o.order, order);
   2c60a:	419c                	c.lw	a5,0(a1)
   2c60c:	c11c                	c.sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   2c60e:	0045e783          	lwu	a5,4(a1)
   2c612:	e51c                	c.sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   2c614:	0085e783          	lwu	a5,8(a1)
   2c618:	e91c                	c.sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   2c61a:	00c5e783          	lwu	a5,12(a1)
   2c61e:	ed1c                	c.sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   2c620:	0105e783          	lwu	a5,16(a1)
   2c624:	f11c                	c.sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   2c626:	0145e783          	lwu	a5,20(a1)
   2c62a:	f51c                	c.sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   2c62c:	4d9c                	c.lw	a5,24(a1)
   2c62e:	c15c                	c.sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   2c630:	01c5e783          	lwu	a5,28(a1)
   2c634:	f91c                	c.sd	a5,48(a0)
  }
   2c636:	b795                	c.j	2c59a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c638:	4785                	c.li	a5,1
   2c63a:	04f68663          	beq	a3,a5,2c686 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x104>
   2c63e:	4789                	c.li	a5,2
   2c640:	f4f69de3          	bne	a3,a5,2c59a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c644:	4188                	c.lw	a0,0(a1)
   2c646:	cdbe90ef          	jal	ra,16320 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2c64a:	c008                	c.sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c64c:	6488                	c.ld	a0,8(s1)
   2c64e:	ea3e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c652:	e408                	c.sd	a0,8(s0)
   2c654:	6888                	c.ld	a0,16(s1)
   2c656:	e9be90ef          	jal	ra,164f0 <__bswapdi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   2c65a:	e808                	c.sd	a0,16(s0)
   2c65c:	6c88                	c.ld	a0,24(s1)
   2c65e:	e93e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   2c662:	ec08                	c.sd	a0,24(s0)
   2c664:	7088                	c.ld	a0,32(s1)
   2c666:	e8be90ef          	jal	ra,164f0 <__bswapdi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   2c66a:	f008                	c.sd	a0,32(s0)
   2c66c:	7488                	c.ld	a0,40(s1)
   2c66e:	e83e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   2c672:	f408                	c.sd	a0,40(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c674:	40c8                	c.lw	a0,4(s1)
   2c676:	cabe90ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c67a:	c048                	c.sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c67c:	7888                	c.ld	a0,48(s1)
   2c67e:	e73e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    align = swizzle(o.align, o.order, order);
   2c682:	f808                	c.sd	a0,48(s0)
  }
   2c684:	bf19                	c.j	2c59a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    type = swizzle(o.type, o.order, order);
   2c686:	419c                	c.lw	a5,0(a1)
   2c688:	c11c                	c.sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   2c68a:	659c                	c.ld	a5,8(a1)
   2c68c:	e51c                	c.sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   2c68e:	699c                	c.ld	a5,16(a1)
   2c690:	e91c                	c.sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   2c692:	6d9c                	c.ld	a5,24(a1)
   2c694:	ed1c                	c.sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   2c696:	719c                	c.ld	a5,32(a1)
   2c698:	f11c                	c.sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   2c69a:	759c                	c.ld	a5,40(a1)
   2c69c:	f51c                	c.sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   2c69e:	41dc                	c.lw	a5,4(a1)
   2c6a0:	c15c                	c.sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   2c6a2:	799c                	c.ld	a5,48(a1)
   2c6a4:	f91c                	c.sd	a5,48(a0)
  }
   2c6a6:	bdd5                	c.j	2c59a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c6a8 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c6a8:	1101                	c.addi	sp,-32
   2c6aa:	ec06                	c.sdsp	ra,24(sp)
   2c6ac:	e822                	c.sdsp	s0,16(sp)
   2c6ae:	e426                	c.sdsp	s1,8(sp)
   2c6b0:	842a                	c.mv	s0,a0
   2c6b2:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2c6b4:	4785                	c.li	a5,1
   2c6b6:	00f60a63          	beq	a2,a5,2c6ca <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c6ba:	4789                	c.li	a5,2
   2c6bc:	0af60f63          	beq	a2,a5,2c77a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xd2>
}
   2c6c0:	60e2                	c.ldsp	ra,24(sp)
   2c6c2:	6442                	c.ldsp	s0,16(sp)
   2c6c4:	64a2                	c.ldsp	s1,8(sp)
   2c6c6:	6105                	c.addi16sp	sp,32
   2c6c8:	8082                	c.jr	ra
   2c6ca:	4785                	c.li	a5,1
   2c6cc:	06f68b63          	beq	a3,a5,2c742 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x9a>
   2c6d0:	4789                	c.li	a5,2
   2c6d2:	fef697e3          	bne	a3,a5,2c6c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c6d6:	4188                	c.lw	a0,0(a1)
   2c6d8:	c49e90ef          	jal	ra,16320 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2c6dc:	c008                	c.sw	a0,0(s0)
   2c6de:	40c8                	c.lw	a0,4(s1)
   2c6e0:	c41e90ef          	jal	ra,16320 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2c6e4:	c048                	c.sw	a0,4(s0)
   2c6e6:	4488                	c.lw	a0,8(s1)
   2c6e8:	c39e90ef          	jal	ra,16320 <__bswapsi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c6ec:	1502                	c.slli	a0,0x20
   2c6ee:	9101                	c.srli	a0,0x20
   2c6f0:	e408                	c.sd	a0,8(s0)
   2c6f2:	44c8                	c.lw	a0,12(s1)
   2c6f4:	c2de90ef          	jal	ra,16320 <__bswapsi2@plt>
    addr = swizzle(o.addr, o.order, order);
   2c6f8:	1502                	c.slli	a0,0x20
   2c6fa:	9101                	c.srli	a0,0x20
   2c6fc:	e808                	c.sd	a0,16(s0)
   2c6fe:	4888                	c.lw	a0,16(s1)
   2c700:	c21e90ef          	jal	ra,16320 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c704:	1502                	c.slli	a0,0x20
   2c706:	9101                	c.srli	a0,0x20
   2c708:	ec08                	c.sd	a0,24(s0)
   2c70a:	48c8                	c.lw	a0,20(s1)
   2c70c:	c15e90ef          	jal	ra,16320 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   2c710:	1502                	c.slli	a0,0x20
   2c712:	9101                	c.srli	a0,0x20
   2c714:	f008                	c.sd	a0,32(s0)
   2c716:	4c88                	c.lw	a0,24(s1)
   2c718:	c09e90ef          	jal	ra,16320 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c71c:	02a41423          	sh	a0,40(s0)
   2c720:	4cc8                	c.lw	a0,28(s1)
   2c722:	bffe90ef          	jal	ra,16320 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   2c726:	d448                	c.sw	a0,44(s0)
   2c728:	5088                	c.lw	a0,32(s1)
   2c72a:	bf7e90ef          	jal	ra,16320 <__bswapsi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   2c72e:	1502                	c.slli	a0,0x20
   2c730:	9101                	c.srli	a0,0x20
   2c732:	f808                	c.sd	a0,48(s0)
   2c734:	50c8                	c.lw	a0,36(s1)
   2c736:	bebe90ef          	jal	ra,16320 <__bswapsi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   2c73a:	1502                	c.slli	a0,0x20
   2c73c:	9101                	c.srli	a0,0x20
   2c73e:	fc08                	c.sd	a0,56(s0)
  }
   2c740:	b741                	c.j	2c6c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c742:	419c                	c.lw	a5,0(a1)
   2c744:	c11c                	c.sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   2c746:	41dc                	c.lw	a5,4(a1)
   2c748:	c15c                	c.sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c74a:	0085e783          	lwu	a5,8(a1)
   2c74e:	e51c                	c.sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   2c750:	00c5e783          	lwu	a5,12(a1)
   2c754:	e91c                	c.sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   2c756:	0105e783          	lwu	a5,16(a1)
   2c75a:	ed1c                	c.sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   2c75c:	0145e783          	lwu	a5,20(a1)
   2c760:	f11c                	c.sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c762:	4d9c                	c.lw	a5,24(a1)
   2c764:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   2c768:	4ddc                	c.lw	a5,28(a1)
   2c76a:	d55c                	c.sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   2c76c:	0205e783          	lwu	a5,32(a1)
   2c770:	f91c                	c.sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   2c772:	0245e783          	lwu	a5,36(a1)
   2c776:	fd1c                	c.sd	a5,56(a0)
  }
   2c778:	b7a1                	c.j	2c6c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c77a:	4785                	c.li	a5,1
   2c77c:	04f68f63          	beq	a3,a5,2c7da <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x132>
   2c780:	4789                	c.li	a5,2
   2c782:	f2f69fe3          	bne	a3,a5,2c6c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c786:	4188                	c.lw	a0,0(a1)
   2c788:	b99e90ef          	jal	ra,16320 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2c78c:	c008                	c.sw	a0,0(s0)
   2c78e:	40c8                	c.lw	a0,4(s1)
   2c790:	b91e90ef          	jal	ra,16320 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2c794:	c048                	c.sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c796:	6488                	c.ld	a0,8(s1)
   2c798:	d59e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c79c:	e408                	c.sd	a0,8(s0)
   2c79e:	6888                	c.ld	a0,16(s1)
   2c7a0:	d51e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    addr = swizzle(o.addr, o.order, order);
   2c7a4:	e808                	c.sd	a0,16(s0)
   2c7a6:	6c88                	c.ld	a0,24(s1)
   2c7a8:	d49e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c7ac:	ec08                	c.sd	a0,24(s0)
   2c7ae:	7088                	c.ld	a0,32(s1)
   2c7b0:	d41e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   2c7b4:	f008                	c.sd	a0,32(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c7b6:	5488                	c.lw	a0,40(s1)
   2c7b8:	b69e90ef          	jal	ra,16320 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c7bc:	02a41423          	sh	a0,40(s0)
   2c7c0:	54c8                	c.lw	a0,44(s1)
   2c7c2:	b5fe90ef          	jal	ra,16320 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   2c7c6:	d448                	c.sw	a0,44(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c7c8:	7888                	c.ld	a0,48(s1)
   2c7ca:	d27e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   2c7ce:	f808                	c.sd	a0,48(s0)
   2c7d0:	7c88                	c.ld	a0,56(s1)
   2c7d2:	d1fe90ef          	jal	ra,164f0 <__bswapdi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   2c7d6:	fc08                	c.sd	a0,56(s0)
  }
   2c7d8:	b5e5                	c.j	2c6c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c7da:	419c                	c.lw	a5,0(a1)
   2c7dc:	c11c                	c.sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   2c7de:	41dc                	c.lw	a5,4(a1)
   2c7e0:	c15c                	c.sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c7e2:	659c                	c.ld	a5,8(a1)
   2c7e4:	e51c                	c.sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   2c7e6:	699c                	c.ld	a5,16(a1)
   2c7e8:	e91c                	c.sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   2c7ea:	6d9c                	c.ld	a5,24(a1)
   2c7ec:	ed1c                	c.sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   2c7ee:	719c                	c.ld	a5,32(a1)
   2c7f0:	f11c                	c.sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c7f2:	559c                	c.lw	a5,40(a1)
   2c7f4:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   2c7f8:	55dc                	c.lw	a5,44(a1)
   2c7fa:	d55c                	c.sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   2c7fc:	799c                	c.ld	a5,48(a1)
   2c7fe:	f91c                	c.sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   2c800:	7d9c                	c.ld	a5,56(a1)
   2c802:	fd1c                	c.sd	a5,56(a0)
  }
   2c804:	bd75                	c.j	2c6c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c806 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c806:	1101                	c.addi	sp,-32
   2c808:	ec06                	c.sdsp	ra,24(sp)
   2c80a:	e822                	c.sdsp	s0,16(sp)
   2c80c:	e426                	c.sdsp	s1,8(sp)
   2c80e:	842a                	c.mv	s0,a0
   2c810:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2c812:	4785                	c.li	a5,1
   2c814:	00f60a63          	beq	a2,a5,2c828 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c818:	4789                	c.li	a5,2
   2c81a:	08f60463          	beq	a2,a5,2c8a2 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x9c>
}
   2c81e:	60e2                	c.ldsp	ra,24(sp)
   2c820:	6442                	c.ldsp	s0,16(sp)
   2c822:	64a2                	c.ldsp	s1,8(sp)
   2c824:	6105                	c.addi16sp	sp,32
   2c826:	8082                	c.jr	ra
   2c828:	4785                	c.li	a5,1
   2c82a:	04f68763          	beq	a3,a5,2c878 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x72>
   2c82e:	4789                	c.li	a5,2
   2c830:	fef697e3          	bne	a3,a5,2c81e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c834:	4188                	c.lw	a0,0(a1)
   2c836:	aebe90ef          	jal	ra,16320 <__bswapsi2@plt>
  shn shnxd;           // Section table index
  Elf64::Addr value;   // Symbol value (address)
  Elf64::Xword size;   // Size of object

  template <typename E2> void from(const E2 &o) {
    name = swizzle(o.name, o.order, order);
   2c83a:	c008                	c.sw	a0,0(s0)
   2c83c:	40c8                	c.lw	a0,4(s1)
   2c83e:	ae3e90ef          	jal	ra,16320 <__bswapsi2@plt>
    value = swizzle(o.value, o.order, order);
   2c842:	1502                	c.slli	a0,0x20
   2c844:	9101                	c.srli	a0,0x20
   2c846:	e408                	c.sd	a0,8(s0)
   2c848:	4488                	c.lw	a0,8(s1)
   2c84a:	ad7e90ef          	jal	ra,16320 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   2c84e:	1502                	c.slli	a0,0x20
   2c850:	9101                	c.srli	a0,0x20
   2c852:	e808                	c.sd	a0,16(s0)
    info = o.info;
   2c854:	00c4c783          	lbu	a5,12(s1)
   2c858:	00f40223          	sb	a5,4(s0)
    other = o.other;
   2c85c:	00d4c783          	lbu	a5,13(s1)
   2c860:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c864:	00e4d783          	lhu	a5,14(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c868:	0087d71b          	srliw	a4,a5,0x8
   2c86c:	0087979b          	slliw	a5,a5,0x8
   2c870:	8fd9                	c.or	a5,a4
   2c872:	00f41323          	sh	a5,6(s0)
  }
   2c876:	b765                	c.j	2c81e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c878:	419c                	c.lw	a5,0(a1)
   2c87a:	c11c                	c.sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   2c87c:	0045e783          	lwu	a5,4(a1)
   2c880:	e51c                	c.sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   2c882:	0085e783          	lwu	a5,8(a1)
   2c886:	e91c                	c.sd	a5,16(a0)
    info = o.info;
   2c888:	00c5c783          	lbu	a5,12(a1)
   2c88c:	00f50223          	sb	a5,4(a0)
    other = o.other;
   2c890:	00d5c783          	lbu	a5,13(a1)
   2c894:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c898:	00e5d783          	lhu	a5,14(a1)
   2c89c:	00f51323          	sh	a5,6(a0)
  }
   2c8a0:	bfbd                	c.j	2c81e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c8a2:	4785                	c.li	a5,1
   2c8a4:	04f68363          	beq	a3,a5,2c8ea <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xe4>
   2c8a8:	4789                	c.li	a5,2
   2c8aa:	f6f69ae3          	bne	a3,a5,2c81e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c8ae:	4188                	c.lw	a0,0(a1)
   2c8b0:	a71e90ef          	jal	ra,16320 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2c8b4:	c008                	c.sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c8b6:	6488                	c.ld	a0,8(s1)
   2c8b8:	c39e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    value = swizzle(o.value, o.order, order);
   2c8bc:	e408                	c.sd	a0,8(s0)
   2c8be:	6888                	c.ld	a0,16(s1)
   2c8c0:	c31e90ef          	jal	ra,164f0 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   2c8c4:	e808                	c.sd	a0,16(s0)
    info = o.info;
   2c8c6:	0044c783          	lbu	a5,4(s1)
   2c8ca:	00f40223          	sb	a5,4(s0)
    other = o.other;
   2c8ce:	0054c783          	lbu	a5,5(s1)
   2c8d2:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c8d6:	0064d783          	lhu	a5,6(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c8da:	0087d71b          	srliw	a4,a5,0x8
   2c8de:	0087979b          	slliw	a5,a5,0x8
   2c8e2:	8fd9                	c.or	a5,a4
   2c8e4:	00f41323          	sh	a5,6(s0)
  }
   2c8e8:	bf1d                	c.j	2c81e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c8ea:	419c                	c.lw	a5,0(a1)
   2c8ec:	c11c                	c.sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   2c8ee:	659c                	c.ld	a5,8(a1)
   2c8f0:	e51c                	c.sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   2c8f2:	699c                	c.ld	a5,16(a1)
   2c8f4:	e91c                	c.sd	a5,16(a0)
    info = o.info;
   2c8f6:	0045c783          	lbu	a5,4(a1)
   2c8fa:	00f50223          	sb	a5,4(a0)
    other = o.other;
   2c8fe:	0055c783          	lbu	a5,5(a1)
   2c902:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c906:	0065d783          	lhu	a5,6(a1)
   2c90a:	00f51323          	sh	a5,6(a0)
  }
   2c90e:	bf01                	c.j	2c81e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c910 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)>:
      vector<_Tp, _Alloc>::
   2c910:	715d                	c.addi16sp	sp,-80
   2c912:	e486                	c.sdsp	ra,72(sp)
   2c914:	e0a2                	c.sdsp	s0,64(sp)
   2c916:	fc26                	c.sdsp	s1,56(sp)
   2c918:	f84a                	c.sdsp	s2,48(sp)
   2c91a:	f44e                	c.sdsp	s3,40(sp)
   2c91c:	f052                	c.sdsp	s4,32(sp)
   2c91e:	ec56                	c.sdsp	s5,24(sp)
   2c920:	e85a                	c.sdsp	s6,16(sp)
   2c922:	e45e                	c.sdsp	s7,8(sp)
   2c924:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2c926:	00853903          	ld	s2,8(a0)
   2c92a:	00053a03          	ld	s4,0(a0)
   2c92e:	414907b3          	sub	a5,s2,s4
   2c932:	8791                	c.srai	a5,0x4
	if (max_size() - size() < __n)
   2c934:	577d                	c.li	a4,-1
   2c936:	8315                	c.srli	a4,0x5
   2c938:	02e78763          	beq	a5,a4,2c966 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x56>
   2c93c:	8aaa                	c.mv	s5,a0
   2c93e:	8bae                	c.mv	s7,a1
   2c940:	84b2                	c.mv	s1,a2
   2c942:	842e                	c.mv	s0,a1
      return __a;
   2c944:	873e                	c.mv	a4,a5
      if (__a < __b)
   2c946:	03490663          	beq	s2,s4,2c972 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   2c94a:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c94c:	02f76763          	bltu	a4,a5,2c97a <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x6a>
   2c950:	8b3a                	c.mv	s6,a4
   2c952:	57fd                	c.li	a5,-1
   2c954:	8395                	c.srli	a5,0x5
   2c956:	00e7f363          	bgeu	a5,a4,2c95c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x4c>
   2c95a:	8b3e                	c.mv	s6,a5
    { return __lhs.base() - __rhs.base(); }
   2c95c:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2c960:	4981                	c.li	s3,0
   2c962:	c715                	c.beqz	a4,2c98e <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x7e>
   2c964:	a005                	c.j	2c984 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x74>
	  __throw_length_error(__N(__s));
   2c966:	00001517          	auipc	a0,0x1
   2c96a:	a0250513          	addi	a0,a0,-1534 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2c96e:	a73e90ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2c972:	4705                	c.li	a4,1
   2c974:	bfd9                	c.j	2c94a <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x3a>
      _ForwardIterator __cur = __result;
   2c976:	86ce                	c.mv	a3,s3
   2c978:	a0a1                	c.j	2c9c0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xb0>
   2c97a:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c97e:	5b7d                	c.li	s6,-1
   2c980:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2c984:	004b1513          	slli	a0,s6,0x4
   2c988:	b39e90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2c98c:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   2c98e:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c992:	6098                	c.ld	a4,0(s1)
   2c994:	e398                	c.sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2c996:	6498                	c.ld	a4,8(s1)
	__r._M_pi = _M_pi;
   2c998:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   2c99c:	e798                	c.sd	a4,8(a5)
	__r._M_ptr = nullptr;
   2c99e:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2c9a2:	fd440ae3          	beq	s0,s4,2c976 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x66>
   2c9a6:	414b86b3          	sub	a3,s7,s4
   2c9aa:	96ce                	c.add	a3,s3
   2c9ac:	8752                	c.mv	a4,s4
      _ForwardIterator __cur = __result;
   2c9ae:	87ce                	c.mv	a5,s3
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c9b0:	6310                	c.ld	a2,0(a4)
   2c9b2:	e390                	c.sd	a2,0(a5)
	_M_pi = __tmp;
   2c9b4:	6710                	c.ld	a2,8(a4)
   2c9b6:	e790                	c.sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2c9b8:	0741                	c.addi	a4,16
   2c9ba:	07c1                	c.addi	a5,16
   2c9bc:	fed79ae3          	bne	a5,a3,2c9b0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa0>
	      ++__new_finish;
   2c9c0:	01068493          	addi	s1,a3,16
   2c9c4:	01240e63          	beq	s0,s2,2c9e0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xd0>
   2c9c8:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   2c9cc:	87a6                	c.mv	a5,s1
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c9ce:	6018                	c.ld	a4,0(s0)
   2c9d0:	e398                	c.sd	a4,0(a5)
	_M_pi = __tmp;
   2c9d2:	6418                	c.ld	a4,8(s0)
   2c9d4:	e798                	c.sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2c9d6:	0441                	c.addi	s0,16
   2c9d8:	07c1                	c.addi	a5,16
   2c9da:	ff241ae3          	bne	s0,s2,2c9ce <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xbe>
   2c9de:	94de                	c.add	s1,s7
	if (__p)
   2c9e0:	000a0563          	beq	s4,zero,2c9ea <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c9e4:	8552                	c.mv	a0,s4
   2c9e6:	acbe90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2c9ea:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2c9ee:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2c9f2:	0b12                	c.slli	s6,0x4
   2c9f4:	99da                	c.add	s3,s6
   2c9f6:	013ab823          	sd	s3,16(s5)
    }
   2c9fa:	60a6                	c.ldsp	ra,72(sp)
   2c9fc:	6406                	c.ldsp	s0,64(sp)
   2c9fe:	74e2                	c.ldsp	s1,56(sp)
   2ca00:	7942                	c.ldsp	s2,48(sp)
   2ca02:	79a2                	c.ldsp	s3,40(sp)
   2ca04:	7a02                	c.ldsp	s4,32(sp)
   2ca06:	6ae2                	c.ldsp	s5,24(sp)
   2ca08:	6b42                	c.ldsp	s6,16(sp)
   2ca0a:	6ba2                	c.ldsp	s7,8(sp)
   2ca0c:	6c02                	c.ldsp	s8,0(sp)
   2ca0e:	6161                	c.addi16sp	sp,80
   2ca10:	8082                	c.jr	ra

000000000002ca12 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)>:
      vector<_Tp, _Alloc>::
   2ca12:	715d                	c.addi16sp	sp,-80
   2ca14:	e486                	c.sdsp	ra,72(sp)
   2ca16:	e0a2                	c.sdsp	s0,64(sp)
   2ca18:	fc26                	c.sdsp	s1,56(sp)
   2ca1a:	f84a                	c.sdsp	s2,48(sp)
   2ca1c:	f44e                	c.sdsp	s3,40(sp)
   2ca1e:	f052                	c.sdsp	s4,32(sp)
   2ca20:	ec56                	c.sdsp	s5,24(sp)
   2ca22:	e85a                	c.sdsp	s6,16(sp)
   2ca24:	e45e                	c.sdsp	s7,8(sp)
   2ca26:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2ca28:	00853903          	ld	s2,8(a0)
   2ca2c:	00053a03          	ld	s4,0(a0)
   2ca30:	414907b3          	sub	a5,s2,s4
   2ca34:	8791                	c.srai	a5,0x4
	if (max_size() - size() < __n)
   2ca36:	577d                	c.li	a4,-1
   2ca38:	8315                	c.srli	a4,0x5
   2ca3a:	02e78763          	beq	a5,a4,2ca68 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x56>
   2ca3e:	8aaa                	c.mv	s5,a0
   2ca40:	8bae                	c.mv	s7,a1
   2ca42:	84b2                	c.mv	s1,a2
   2ca44:	842e                	c.mv	s0,a1
      return __a;
   2ca46:	873e                	c.mv	a4,a5
      if (__a < __b)
   2ca48:	03490663          	beq	s2,s4,2ca74 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   2ca4c:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2ca4e:	02f76763          	bltu	a4,a5,2ca7c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x6a>
   2ca52:	8b3a                	c.mv	s6,a4
   2ca54:	57fd                	c.li	a5,-1
   2ca56:	8395                	c.srli	a5,0x5
   2ca58:	00e7f363          	bgeu	a5,a4,2ca5e <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x4c>
   2ca5c:	8b3e                	c.mv	s6,a5
   2ca5e:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2ca62:	4981                	c.li	s3,0
   2ca64:	c715                	c.beqz	a4,2ca90 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x7e>
   2ca66:	a005                	c.j	2ca86 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x74>
	  __throw_length_error(__N(__s));
   2ca68:	00001517          	auipc	a0,0x1
   2ca6c:	90050513          	addi	a0,a0,-1792 # 2d368 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2ca70:	971e90ef          	jal	ra,163e0 <std::__throw_length_error(char const*)@plt>
	return __b;
   2ca74:	4705                	c.li	a4,1
   2ca76:	bfd9                	c.j	2ca4c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x3a>
      _ForwardIterator __cur = __result;
   2ca78:	86ce                	c.mv	a3,s3
   2ca7a:	a0a1                	c.j	2cac2 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xb0>
   2ca7c:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2ca80:	5b7d                	c.li	s6,-1
   2ca82:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2ca86:	004b1513          	slli	a0,s6,0x4
   2ca8a:	a37e90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2ca8e:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   2ca90:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   2ca94:	6098                	c.ld	a4,0(s1)
   2ca96:	e398                	c.sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2ca98:	6498                	c.ld	a4,8(s1)
	__r._M_pi = _M_pi;
   2ca9a:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   2ca9e:	e798                	c.sd	a4,8(a5)
	__r._M_ptr = nullptr;
   2caa0:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2caa4:	fd440ae3          	beq	s0,s4,2ca78 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x66>
   2caa8:	414b86b3          	sub	a3,s7,s4
   2caac:	96ce                	c.add	a3,s3
   2caae:	8752                	c.mv	a4,s4
      _ForwardIterator __cur = __result;
   2cab0:	87ce                	c.mv	a5,s3
      : _M_ptr(__r._M_ptr), _M_refcount()
   2cab2:	6310                	c.ld	a2,0(a4)
   2cab4:	e390                	c.sd	a2,0(a5)
	_M_pi = __tmp;
   2cab6:	6710                	c.ld	a2,8(a4)
   2cab8:	e790                	c.sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2caba:	0741                	c.addi	a4,16
   2cabc:	07c1                	c.addi	a5,16
   2cabe:	fed79ae3          	bne	a5,a3,2cab2 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa0>
	      ++__new_finish;
   2cac2:	01068493          	addi	s1,a3,16
   2cac6:	01240e63          	beq	s0,s2,2cae2 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xd0>
   2caca:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   2cace:	87a6                	c.mv	a5,s1
      : _M_ptr(__r._M_ptr), _M_refcount()
   2cad0:	6018                	c.ld	a4,0(s0)
   2cad2:	e398                	c.sd	a4,0(a5)
	_M_pi = __tmp;
   2cad4:	6418                	c.ld	a4,8(s0)
   2cad6:	e798                	c.sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2cad8:	0441                	c.addi	s0,16
   2cada:	07c1                	c.addi	a5,16
   2cadc:	ff241ae3          	bne	s0,s2,2cad0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xbe>
   2cae0:	94de                	c.add	s1,s7
	if (__p)
   2cae2:	000a0563          	beq	s4,zero,2caec <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2cae6:	8552                	c.mv	a0,s4
   2cae8:	9c9e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2caec:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2caf0:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2caf4:	0b12                	c.slli	s6,0x4
   2caf6:	99da                	c.add	s3,s6
   2caf8:	013ab823          	sd	s3,16(s5)
    }
   2cafc:	60a6                	c.ldsp	ra,72(sp)
   2cafe:	6406                	c.ldsp	s0,64(sp)
   2cb00:	74e2                	c.ldsp	s1,56(sp)
   2cb02:	7942                	c.ldsp	s2,48(sp)
   2cb04:	79a2                	c.ldsp	s3,40(sp)
   2cb06:	7a02                	c.ldsp	s4,32(sp)
   2cb08:	6ae2                	c.ldsp	s5,24(sp)
   2cb0a:	6b42                	c.ldsp	s6,16(sp)
   2cb0c:	6ba2                	c.ldsp	s7,8(sp)
   2cb0e:	6c02                	c.ldsp	s8,0(sp)
   2cb10:	6161                	c.addi16sp	sp,80
   2cb12:	8082                	c.jr	ra

000000000002cb14 <elf::create_mmap_loader(int)>:
      throw range_error("offset exceeds file size");
    return (const char *)base + offset;
  }
};

std::shared_ptr<loader> create_mmap_loader(int fd) {
   2cb14:	715d                	c.addi16sp	sp,-80
   2cb16:	e486                	c.sdsp	ra,72(sp)
   2cb18:	e0a2                	c.sdsp	s0,64(sp)
   2cb1a:	fc26                	c.sdsp	s1,56(sp)
   2cb1c:	f84a                	c.sdsp	s2,48(sp)
   2cb1e:	f44e                	c.sdsp	s3,40(sp)
   2cb20:	892a                	c.mv	s2,a0
   2cb22:	84ae                	c.mv	s1,a1
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2cb24:	05000513          	addi	a0,zero,80
   2cb28:	999e90ef          	jal	ra,164c0 <operator new(unsigned long)@plt>
   2cb2c:	842a                	c.mv	s0,a0
   2cb2e:	00052423          	sw	zero,8(a0)
   2cb32:	00052623          	sw	zero,12(a0)
   2cb36:	00052823          	sw	zero,16(a0)
   2cb3a:	00052a23          	sw	zero,20(a0)
   2cb3e:	00052c23          	sw	zero,24(a0)
   2cb42:	00052e23          	sw	zero,28(a0)
   2cb46:	02053023          	sd	zero,32(a0)
   2cb4a:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2cb4e:	4785                	c.li	a5,1
   2cb50:	d91c                	c.sw	a5,48(a0)
   2cb52:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2cb54:	0000d797          	auipc	a5,0xd
   2cb58:	9547b783          	ld	a5,-1708(a5) # 394a8 <vtable for std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x6f0>
   2cb5c:	07c1                	c.addi	a5,16
   2cb5e:	e11c                	c.sd	a5,0(a0)
   2cb60:	03850993          	addi	s3,a0,56
  mmap_loader(int fd) {
   2cb64:	0000d797          	auipc	a5,0xd
   2cb68:	8f47b783          	ld	a5,-1804(a5) # 39458 <vtable for elf::mmap_loader@@Base+0x6c8>
   2cb6c:	07c1                	c.addi	a5,16
   2cb6e:	fd1c                	c.sd	a5,56(a0)
    off_t end = lseek(fd, 0, SEEK_END);
   2cb70:	4609                	c.li	a2,2
   2cb72:	4581                	c.li	a1,0
   2cb74:	8526                	c.mv	a0,s1
   2cb76:	a9be90ef          	jal	ra,16610 <lseek@plt>
    if (end == (off_t)-1)
   2cb7a:	57fd                	c.li	a5,-1
   2cb7c:	02f50363          	beq	a0,a5,2cba2 <elf::create_mmap_loader(int)+0x8e>
   2cb80:	85aa                	c.mv	a1,a0
    lim = end;
   2cb82:	e428                	c.sd	a0,72(s0)
    base = mmap(nullptr, lim, PROT_READ, MAP_SHARED, fd, 0);
   2cb84:	4781                	c.li	a5,0
   2cb86:	8726                	c.mv	a4,s1
   2cb88:	4685                	c.li	a3,1
   2cb8a:	4605                	c.li	a2,1
   2cb8c:	4501                	c.li	a0,0
   2cb8e:	8b3e90ef          	jal	ra,16440 <mmap@plt>
   2cb92:	e028                	c.sd	a0,64(s0)
    if (base == MAP_FAILED)
   2cb94:	57fd                	c.li	a5,-1
   2cb96:	04f50a63          	beq	a0,a5,2cbea <elf::create_mmap_loader(int)+0xd6>
    close(fd);
   2cb9a:	8526                	c.mv	a0,s1
   2cb9c:	bd5e90ef          	jal	ra,16770 <close@plt>
   2cba0:	a075                	c.j	2cc4c <elf::create_mmap_loader(int)+0x138>
      throw system_error(errno, system_category(), "finding file length");
   2cba2:	02000513          	addi	a0,zero,32
   2cba6:	82be90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2cbaa:	892a                	c.mv	s2,a0
   2cbac:	bb5e90ef          	jal	ra,16760 <__errno_location@plt>
   2cbb0:	4104                	c.lw	s1,0(a0)
   2cbb2:	84fe90ef          	jal	ra,16400 <std::_V2::system_category()@plt>
   2cbb6:	862a                	c.mv	a2,a0
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }
   2cbb8:	c826                	c.swsp	s1,16(sp)

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }
   2cbba:	00004697          	auipc	a3,0x4
   2cbbe:	4fe68693          	addi	a3,a3,1278 # 310b8 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   2cbc2:	65c2                	c.ldsp	a1,16(sp)
   2cbc4:	854a                	c.mv	a0,s2
   2cbc6:	0000d317          	auipc	t1,0xd
   2cbca:	86233303          	ld	t1,-1950(t1) # 39428 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc6a8>
   2cbce:	9302                	c.jalr	t1
   2cbd0:	0000d617          	auipc	a2,0xd
   2cbd4:	84863603          	ld	a2,-1976(a2) # 39418 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   2cbd8:	0000c597          	auipc	a1,0xc
   2cbdc:	7105b583          	ld	a1,1808(a1) # 392e8 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   2cbe0:	854a                	c.mv	a0,s2
   2cbe2:	a7fe90ef          	jal	ra,16660 <__cxa_throw@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2cbe6:	84aa                	c.mv	s1,a0
   2cbe8:	a0b9                	c.j	2cc36 <elf::create_mmap_loader(int)+0x122>
      throw system_error(errno, system_category(), "mmap'ing file");
   2cbea:	02000513          	addi	a0,zero,32
   2cbee:	fe2e90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2cbf2:	892a                	c.mv	s2,a0
   2cbf4:	b6de90ef          	jal	ra,16760 <__errno_location@plt>
   2cbf8:	4104                	c.lw	s1,0(a0)
   2cbfa:	807e90ef          	jal	ra,16400 <std::_V2::system_category()@plt>
   2cbfe:	862a                	c.mv	a2,a0
    : _M_value(__v), _M_cat(&__cat) { }
   2cc00:	c026                	c.swsp	s1,0(sp)
    : system_error(error_code(__v, __ecat), __what) { }
   2cc02:	00004697          	auipc	a3,0x4
   2cc06:	4ce68693          	addi	a3,a3,1230 # 310d0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98>
   2cc0a:	6582                	c.ldsp	a1,0(sp)
   2cc0c:	854a                	c.mv	a0,s2
   2cc0e:	0000d317          	auipc	t1,0xd
   2cc12:	81a33303          	ld	t1,-2022(t1) # 39428 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc6a8>
   2cc16:	9302                	c.jalr	t1
   2cc18:	0000d617          	auipc	a2,0xd
   2cc1c:	80063603          	ld	a2,-2048(a2) # 39418 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   2cc20:	0000c597          	auipc	a1,0xc
   2cc24:	6c85b583          	ld	a1,1736(a1) # 392e8 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   2cc28:	854a                	c.mv	a0,s2
   2cc2a:	a37e90ef          	jal	ra,16660 <__cxa_throw@plt>
      throw system_error(errno, system_category(), "finding file length");
   2cc2e:	84aa                	c.mv	s1,a0
   2cc30:	854a                	c.mv	a0,s2
   2cc32:	83fe90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2cc36:	8522                	c.mv	a0,s0
   2cc38:	879e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2cc3c:	8526                	c.mv	a0,s1
   2cc3e:	a53e90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      throw system_error(errno, system_category(), "mmap'ing file");
   2cc42:	84aa                	c.mv	s1,a0
   2cc44:	854a                	c.mv	a0,s2
   2cc46:	82be90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2cc4a:	b7f5                	c.j	2cc36 <elf::create_mmap_loader(int)+0x122>
	: _M_ptr(__r._M_ptr), _M_refcount()
   2cc4c:	01393023          	sd	s3,0(s2)
	_M_pi = __tmp;
   2cc50:	00893423          	sd	s0,8(s2)
  return make_shared<mmap_loader>(fd);
}
   2cc54:	854a                	c.mv	a0,s2
   2cc56:	60a6                	c.ldsp	ra,72(sp)
   2cc58:	6406                	c.ldsp	s0,64(sp)
   2cc5a:	74e2                	c.ldsp	s1,56(sp)
   2cc5c:	7942                	c.ldsp	s2,48(sp)
   2cc5e:	79a2                	c.ldsp	s3,40(sp)
   2cc60:	6161                	c.addi16sp	sp,80
   2cc62:	8082                	c.jr	ra

000000000002cc64 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2cc64:	8082                	c.jr	ra

000000000002cc66 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2cc66:	1141                	c.addi	sp,-16
   2cc68:	e406                	c.sdsp	ra,8(sp)
      __pointer->~_Tp();
   2cc6a:	7d1c                	c.ld	a5,56(a0)
   2cc6c:	639c                	c.ld	a5,0(a5)
   2cc6e:	03850513          	addi	a0,a0,56
   2cc72:	9782                	c.jalr	a5
      }
   2cc74:	60a2                	c.ldsp	ra,8(sp)
   2cc76:	0141                	c.addi	sp,16
   2cc78:	8082                	c.jr	ra

000000000002cc7a <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2cc7a:	1141                	c.addi	sp,-16
   2cc7c:	e406                	c.sdsp	ra,8(sp)
   2cc7e:	e022                	c.sdsp	s0,0(sp)
   2cc80:	03850413          	addi	s0,a0,56
	    ||
   2cc84:	0000d797          	auipc	a5,0xd
   2cc88:	8ac7b783          	ld	a5,-1876(a5) # 39530 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc2c0>
   2cc8c:	02f58a63          	beq	a1,a5,2ccc0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2cc90:	6588                	c.ld	a0,8(a1)
   2cc92:	0000c797          	auipc	a5,0xc
   2cc96:	7767b783          	ld	a5,1910(a5) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2cc9a:	02f50363          	beq	a0,a5,2ccc0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2cc9e:	00054703          	lbu	a4,0(a0)
   2cca2:	02a00793          	addi	a5,zero,42
   2cca6:	02f70263          	beq	a4,a5,2ccca <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2ccaa:	0000c597          	auipc	a1,0xc
   2ccae:	75e5b583          	ld	a1,1886(a1) # 39408 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc3e8>
   2ccb2:	e5ee90ef          	jal	ra,16310 <strcmp@plt>
	return nullptr;
   2ccb6:	00153513          	sltiu	a0,a0,1
   2ccba:	40a00533          	sub	a0,zero,a0
   2ccbe:	8c69                	c.and	s0,a0
      }
   2ccc0:	8522                	c.mv	a0,s0
   2ccc2:	60a2                	c.ldsp	ra,8(sp)
   2ccc4:	6402                	c.ldsp	s0,0(sp)
   2ccc6:	0141                	c.addi	sp,16
   2ccc8:	8082                	c.jr	ra
	return nullptr;
   2ccca:	4401                	c.li	s0,0
   2cccc:	bfd5                	c.j	2ccc0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002ccce <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2ccce:	1141                	c.addi	sp,-16
   2ccd0:	e406                	c.sdsp	ra,8(sp)
   2ccd2:	fdee90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2ccd6:	60a2                	c.ldsp	ra,8(sp)
   2ccd8:	0141                	c.addi	sp,16
   2ccda:	8082                	c.jr	ra

000000000002ccdc <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2ccdc:	1141                	c.addi	sp,-16
   2ccde:	e406                	c.sdsp	ra,8(sp)
   2cce0:	fd0e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      }
   2cce4:	60a2                	c.ldsp	ra,8(sp)
   2cce6:	0141                	c.addi	sp,16
   2cce8:	8082                	c.jr	ra

000000000002ccea <elf::mmap_loader::load(long, unsigned long)>:
    if (offset + size > lim)
   2ccea:	962e                	c.add	a2,a1
   2ccec:	691c                	c.ld	a5,16(a0)
   2ccee:	00c7e563          	bltu	a5,a2,2ccf8 <elf::mmap_loader::load(long, unsigned long)+0xe>
    return (const char *)base + offset;
   2ccf2:	6508                	c.ld	a0,8(a0)
   2ccf4:	952e                	c.add	a0,a1
  }
   2ccf6:	8082                	c.jr	ra
  const void *load(off_t offset, size_t size) {
   2ccf8:	1101                	c.addi	sp,-32
   2ccfa:	ec06                	c.sdsp	ra,24(sp)
   2ccfc:	e822                	c.sdsp	s0,16(sp)
   2ccfe:	e426                	c.sdsp	s1,8(sp)
      throw range_error("offset exceeds file size");
   2cd00:	4541                	c.li	a0,16
   2cd02:	ecee90ef          	jal	ra,163d0 <__cxa_allocate_exception@plt>
   2cd06:	84aa                	c.mv	s1,a0
   2cd08:	00004597          	auipc	a1,0x4
   2cd0c:	38858593          	addi	a1,a1,904 # 31090 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58>
   2cd10:	961e90ef          	jal	ra,16670 <std::range_error::range_error(char const*)@plt>
   2cd14:	0000c617          	auipc	a2,0xc
   2cd18:	6c463603          	ld	a2,1732(a2) # 393d8 <std::range_error::~range_error()@GLIBCXX_3.4>
   2cd1c:	0000d597          	auipc	a1,0xd
   2cd20:	82c5b583          	ld	a1,-2004(a1) # 39548 <typeinfo for std::range_error@GLIBCXX_3.4>
   2cd24:	8526                	c.mv	a0,s1
   2cd26:	93be90ef          	jal	ra,16660 <__cxa_throw@plt>
   2cd2a:	842a                	c.mv	s0,a0
   2cd2c:	8526                	c.mv	a0,s1
   2cd2e:	f42e90ef          	jal	ra,16470 <__cxa_free_exception@plt>
   2cd32:	8522                	c.mv	a0,s0
   2cd34:	95de90ef          	jal	ra,16690 <_Unwind_Resume@plt>

000000000002cd38 <elf::mmap_loader::~mmap_loader()>:
  ~mmap_loader() { munmap(base, lim); }
   2cd38:	1141                	c.addi	sp,-16
   2cd3a:	e406                	c.sdsp	ra,8(sp)
   2cd3c:	0000c797          	auipc	a5,0xc
   2cd40:	71c7b783          	ld	a5,1820(a5) # 39458 <vtable for elf::mmap_loader@@Base+0x6c8>
   2cd44:	07c1                	c.addi	a5,16
   2cd46:	e11c                	c.sd	a5,0(a0)
   2cd48:	690c                	c.ld	a1,16(a0)
   2cd4a:	6508                	c.ld	a0,8(a0)
   2cd4c:	f34e90ef          	jal	ra,16480 <munmap@plt>
   2cd50:	60a2                	c.ldsp	ra,8(sp)
   2cd52:	0141                	c.addi	sp,16
   2cd54:	8082                	c.jr	ra

000000000002cd56 <elf::mmap_loader::~mmap_loader()>:
   2cd56:	1141                	c.addi	sp,-16
   2cd58:	e406                	c.sdsp	ra,8(sp)
   2cd5a:	e022                	c.sdsp	s0,0(sp)
   2cd5c:	842a                	c.mv	s0,a0
   2cd5e:	0000c797          	auipc	a5,0xc
   2cd62:	6fa7b783          	ld	a5,1786(a5) # 39458 <vtable for elf::mmap_loader@@Base+0x6c8>
   2cd66:	07c1                	c.addi	a5,16
   2cd68:	e11c                	c.sd	a5,0(a0)
   2cd6a:	690c                	c.ld	a1,16(a0)
   2cd6c:	6508                	c.ld	a0,8(a0)
   2cd6e:	f12e90ef          	jal	ra,16480 <munmap@plt>
   2cd72:	8522                	c.mv	a0,s0
   2cd74:	f3ce90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2cd78:	60a2                	c.ldsp	ra,8(sp)
   2cd7a:	6402                	c.ldsp	s0,0(sp)
   2cd7c:	0141                	c.addi	sp,16
   2cd7e:	8082                	c.jr	ra

000000000002cd80 <std::system_error::system_error(std::error_code, char const*)>:
    system_error(error_code __ec, const char* __what)
   2cd80:	7135                	c.addi16sp	sp,-160
   2cd82:	ed06                	c.sdsp	ra,152(sp)
   2cd84:	e922                	c.sdsp	s0,144(sp)
   2cd86:	e526                	c.sdsp	s1,136(sp)
   2cd88:	e14a                	c.sdsp	s2,128(sp)
   2cd8a:	fcce                	c.sdsp	s3,120(sp)
   2cd8c:	84aa                	c.mv	s1,a0
   2cd8e:	872e                	c.mv	a4,a1
   2cd90:	e02e                	c.sdsp	a1,0(sp)
   2cd92:	e432                	c.sdsp	a2,8(sp)
   2cd94:	8936                	c.mv	s2,a3
    category() const noexcept { return *_M_cat; }
   2cd96:	85b2                	c.mv	a1,a2
    { return category().message(value()); }
   2cd98:	621c                	c.ld	a5,0(a2)
   2cd9a:	739c                	c.ld	a5,32(a5)
   2cd9c:	0007061b          	addiw	a2,a4,0
   2cda0:	0880                	c.addi4spn	s0,sp,80
   2cda2:	8522                	c.mv	a0,s0
   2cda4:	9782                	c.jalr	a5
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2cda6:	4709                	c.li	a4,2
   2cda8:	00004697          	auipc	a3,0x4
   2cdac:	30868693          	addi	a3,a3,776 # 310b0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x78>
   2cdb0:	4601                	c.li	a2,0
   2cdb2:	4581                	c.li	a1,0
   2cdb4:	8522                	c.mv	a0,s0
   2cdb6:	84be90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2cdba:	842a                	c.mv	s0,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2cdbc:	009c                	c.addi4spn	a5,sp,64
   2cdbe:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   2cdc0:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2cdc2:	01050993          	addi	s3,a0,16
	if (__str._M_is_local())
   2cdc6:	03378863          	beq	a5,s3,2cdf6 <std::system_error::system_error(std::error_code, char const*)+0x76>
      { _M_dataplus._M_p = __p; }
   2cdca:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   2cdcc:	691c                	c.ld	a5,16(a0)
   2cdce:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   2cdd0:	641c                	c.ld	a5,8(s0)
   2cdd2:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   2cdd4:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2cdd8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2cddc:	00040823          	sb	zero,16(s0)
	return __builtin_strlen(__s);
   2cde0:	854a                	c.mv	a0,s2
   2cde2:	ddee90ef          	jal	ra,163c0 <strlen@plt>
   2cde6:	872a                	c.mv	a4,a0
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2cde8:	86ca                	c.mv	a3,s2
   2cdea:	4601                	c.li	a2,0
   2cdec:	4581                	c.li	a1,0
   2cdee:	1808                	c.addi4spn	a0,sp,48
   2cdf0:	811e90ef          	jal	ra,16600 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2cdf4:	a809                	c.j	2ce06 <std::system_error::system_error(std::error_code, char const*)+0x86>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2cdf6:	6510                	c.ld	a2,8(a0)
   2cdf8:	0605                	c.addi	a2,1
	if (__n == 0)
   2cdfa:	da79                	c.beqz	a2,2cdd0 <std::system_error::system_error(std::error_code, char const*)+0x50>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2cdfc:	85ce                	c.mv	a1,s3
   2cdfe:	0088                	c.addi4spn	a0,sp,64
   2ce00:	f50e90ef          	jal	ra,16550 <memcpy@plt>
   2ce04:	b7f1                	c.j	2cdd0 <std::system_error::system_error(std::error_code, char const*)+0x50>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ce06:	842a                	c.mv	s0,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ce08:	101c                	c.addi4spn	a5,sp,32
   2ce0a:	e83e                	c.sdsp	a5,16(sp)
      { return _M_dataplus._M_p; }
   2ce0c:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ce0e:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   2ce12:	03278263          	beq	a5,s2,2ce36 <std::system_error::system_error(std::error_code, char const*)+0xb6>
      { _M_dataplus._M_p = __p; }
   2ce16:	e83e                	c.sdsp	a5,16(sp)
      { _M_allocated_capacity = __capacity; }
   2ce18:	691c                	c.ld	a5,16(a0)
   2ce1a:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   2ce1c:	641c                	c.ld	a5,8(s0)
   2ce1e:	ec3e                	c.sdsp	a5,24(sp)
      { _M_dataplus._M_p = __p; }
   2ce20:	01243023          	sd	s2,0(s0)
      { _M_string_length = __length; }
   2ce24:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2ce28:	00040823          	sb	zero,16(s0)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
   2ce2c:	080c                	c.addi4spn	a1,sp,16
   2ce2e:	8526                	c.mv	a0,s1
   2ce30:	f10e90ef          	jal	ra,16540 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2ce34:	a809                	c.j	2ce46 <std::system_error::system_error(std::error_code, char const*)+0xc6>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ce36:	6510                	c.ld	a2,8(a0)
   2ce38:	0605                	c.addi	a2,1
	if (__n == 0)
   2ce3a:	d26d                	c.beqz	a2,2ce1c <std::system_error::system_error(std::error_code, char const*)+0x9c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ce3c:	85ca                	c.mv	a1,s2
   2ce3e:	1008                	c.addi4spn	a0,sp,32
   2ce40:	f10e90ef          	jal	ra,16550 <memcpy@plt>
   2ce44:	bfe1                	c.j	2ce1c <std::system_error::system_error(std::error_code, char const*)+0x9c>
      { return _M_dataplus._M_p; }
   2ce46:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2ce48:	101c                	c.addi4spn	a5,sp,32
   2ce4a:	00f50463          	beq	a0,a5,2ce52 <std::system_error::system_error(std::error_code, char const*)+0xd2>
   2ce4e:	e62e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2ce52:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2ce54:	009c                	c.addi4spn	a5,sp,64
   2ce56:	00f50463          	beq	a0,a5,2ce5e <std::system_error::system_error(std::error_code, char const*)+0xde>
   2ce5a:	e56e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2ce5e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   2ce60:	109c                	c.addi4spn	a5,sp,96
   2ce62:	00f50463          	beq	a0,a5,2ce6a <std::system_error::system_error(std::error_code, char const*)+0xea>
   2ce66:	e4ae90ef          	jal	ra,164b0 <operator delete(void*)@plt>
   2ce6a:	0000c797          	auipc	a5,0xc
   2ce6e:	7167b783          	ld	a5,1814(a5) # 39580 <vtable for std::system_error@GLIBCXX_3.4.11>
   2ce72:	07c1                	c.addi	a5,16
   2ce74:	e09c                	c.sd	a5,0(s1)
   2ce76:	6782                	c.ldsp	a5,0(sp)
   2ce78:	e89c                	c.sd	a5,16(s1)
   2ce7a:	67a2                	c.ldsp	a5,8(sp)
   2ce7c:	ec9c                	c.sd	a5,24(s1)
   2ce7e:	60ea                	c.ldsp	ra,152(sp)
   2ce80:	644a                	c.ldsp	s0,144(sp)
   2ce82:	64aa                	c.ldsp	s1,136(sp)
   2ce84:	690a                	c.ldsp	s2,128(sp)
   2ce86:	79e6                	c.ldsp	s3,120(sp)
   2ce88:	610d                	c.addi16sp	sp,160
   2ce8a:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   2ce8c:	842a                	c.mv	s0,a0
   2ce8e:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2ce90:	101c                	c.addi4spn	a5,sp,32
   2ce92:	00f50463          	beq	a0,a5,2ce9a <std::system_error::system_error(std::error_code, char const*)+0x11a>
   2ce96:	e1ae90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2ce9a:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2ce9c:	009c                	c.addi4spn	a5,sp,64
   2ce9e:	00f50463          	beq	a0,a5,2cea6 <std::system_error::system_error(std::error_code, char const*)+0x126>
   2cea2:	e0ee90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cea6:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   2cea8:	109c                	c.addi4spn	a5,sp,96
   2ceaa:	00f50463          	beq	a0,a5,2ceb2 <std::system_error::system_error(std::error_code, char const*)+0x132>
   2ceae:	e02e90ef          	jal	ra,164b0 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ceb2:	8522                	c.mv	a0,s0
   2ceb4:	fdce90ef          	jal	ra,16690 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2ceb8:	842a                	c.mv	s0,a0
   2ceba:	b7c5                	c.j	2ce9a <std::system_error::system_error(std::error_code, char const*)+0x11a>
   2cebc:	842a                	c.mv	s0,a0
   2cebe:	b7e5                	c.j	2cea6 <std::system_error::system_error(std::error_code, char const*)+0x126>

000000000002cec0 <__libc_csu_init>:
   the libc.a module in that it doesn't call the preinit array.  */


void
__libc_csu_init (int argc, char **argv, char **envp)
{
   2cec0:	7139                	c.addi16sp	sp,-64
   2cec2:	f822                	c.sdsp	s0,48(sp)
   2cec4:	f04a                	c.sdsp	s2,32(sp)

#if ELF_INITFINI
  _init ();
#endif

  const size_t size = __init_array_end - __init_array_start;
   2cec6:	0000c797          	auipc	a5,0xc
   2ceca:	82278793          	addi	a5,a5,-2014 # 386e8 <__do_global_dtors_aux_fini_array_entry>
   2cece:	0000c417          	auipc	s0,0xc
   2ced2:	80a40413          	addi	s0,s0,-2038 # 386d8 <__frame_dummy_init_array_entry>
{
   2ced6:	fc06                	c.sdsp	ra,56(sp)
   2ced8:	f426                	c.sdsp	s1,40(sp)
   2ceda:	ec4e                	c.sdsp	s3,24(sp)
   2cedc:	e852                	c.sdsp	s4,16(sp)
   2cede:	e456                	c.sdsp	s5,8(sp)
  const size_t size = __init_array_end - __init_array_start;
   2cee0:	40878933          	sub	s2,a5,s0
  for (size_t i = 0; i < size; i++)
   2cee4:	02878163          	beq	a5,s0,2cf06 <__libc_csu_init+0x46>
   2cee8:	89aa                	c.mv	s3,a0
   2ceea:	8a2e                	c.mv	s4,a1
   2ceec:	8ab2                	c.mv	s5,a2
   2ceee:	40395913          	srai	s2,s2,0x3
   2cef2:	4481                	c.li	s1,0
      (*__init_array_start [i]) (argc, argv, envp);
   2cef4:	601c                	c.ld	a5,0(s0)
   2cef6:	8656                	c.mv	a2,s5
   2cef8:	85d2                	c.mv	a1,s4
   2cefa:	854e                	c.mv	a0,s3
  for (size_t i = 0; i < size; i++)
   2cefc:	0485                	c.addi	s1,1
      (*__init_array_start [i]) (argc, argv, envp);
   2cefe:	9782                	c.jalr	a5
  for (size_t i = 0; i < size; i++)
   2cf00:	0421                	c.addi	s0,8
   2cf02:	ff24e9e3          	bltu	s1,s2,2cef4 <__libc_csu_init+0x34>
}
   2cf06:	70e2                	c.ldsp	ra,56(sp)
   2cf08:	7442                	c.ldsp	s0,48(sp)
   2cf0a:	74a2                	c.ldsp	s1,40(sp)
   2cf0c:	7902                	c.ldsp	s2,32(sp)
   2cf0e:	69e2                	c.ldsp	s3,24(sp)
   2cf10:	6a42                	c.ldsp	s4,16(sp)
   2cf12:	6aa2                	c.ldsp	s5,8(sp)
   2cf14:	6121                	c.addi16sp	sp,64
   2cf16:	8082                	c.jr	ra

000000000002cf18 <__libc_csu_fini>:

# if ELF_INITFINI
  _fini ();
# endif
#endif
}
   2cf18:	8082                	c.jr	ra
