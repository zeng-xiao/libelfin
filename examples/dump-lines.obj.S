
dump-lines:     file format elf64-littleriscv


Disassembly of section .plt:

0000000000016310 <_PROCEDURE_LINKAGE_TABLE_>:
   16310:	97 c3 02 00 33 03 c3 41 03 be 83 d0 13 03 43 fd     ....3..A......C.
   16320:	93 82 83 d0 13 53 13 00 83 b2 82 00 67 00 0e 00     .....S......g...

0000000000016330 <operator new[](unsigned long)@plt>:
   16330:	0002ce17          	auipc	t3,0x2c
   16334:	cf8e3e03          	ld	t3,-776(t3) # 42028 <operator new[](unsigned long)@GLIBCXX_3.4>
   16338:	000e0367          	jalr	t1,0(t3)
   1633c:	00000013          	addi	zero,zero,0

0000000000016340 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>:
   16340:	0002ce17          	auipc	t3,0x2c
   16344:	cf0e3e03          	ld	t3,-784(t3) # 42030 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4>
   16348:	000e0367          	jalr	t1,0(t3)
   1634c:	00000013          	addi	zero,zero,0

0000000000016350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>:
   16350:	0002ce17          	auipc	t3,0x2c
   16354:	ce8e3e03          	ld	t3,-792(t3) # 42038 <__gnu_cxx::__atomic_add(int volatile*, int)@GLIBCXX_3.4>
   16358:	000e0367          	jalr	t1,0(t3)
   1635c:	00000013          	addi	zero,zero,0

0000000000016360 <strcmp@plt>:
   16360:	0002ce17          	auipc	t3,0x2c
   16364:	ce0e3e03          	ld	t3,-800(t3) # 42040 <strcmp@GLIBC_2.27>
   16368:	000e0367          	jalr	t1,0(t3)
   1636c:	00000013          	addi	zero,zero,0

0000000000016370 <__bswapsi2@plt>:
   16370:	0002ce17          	auipc	t3,0x2c
   16374:	cd8e3e03          	ld	t3,-808(t3) # 42048 <__bswapsi2@GCC_4.3.0>
   16378:	000e0367          	jalr	t1,0(t3)
   1637c:	00000013          	addi	zero,zero,0

0000000000016380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>:
   16380:	0002ce17          	auipc	t3,0x2c
   16384:	cd0e3e03          	ld	t3,-816(t3) # 42050 <__gnu_cxx::__exchange_and_add(int volatile*, int)@GLIBCXX_3.4>
   16388:	000e0367          	jalr	t1,0(t3)
   1638c:	00000013          	addi	zero,zero,0

0000000000016390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>:
   16390:	0002ce17          	auipc	t3,0x2c
   16394:	cc8e3e03          	ld	t3,-824(t3) # 42058 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@GLIBCXX_3.4.21>
   16398:	000e0367          	jalr	t1,0(t3)
   1639c:	00000013          	addi	zero,zero,0

00000000000163a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
   163a0:	0002ce17          	auipc	t3,0x2c
   163a4:	cc0e3e03          	ld	t3,-832(t3) # 42060 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
   163a8:	000e0367          	jalr	t1,0(t3)
   163ac:	00000013          	addi	zero,zero,0

00000000000163b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>:
   163b0:	0002ce17          	auipc	t3,0x2c
   163b4:	cb8e3e03          	ld	t3,-840(t3) # 42068 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@GLIBCXX_3.4.21>
   163b8:	000e0367          	jalr	t1,0(t3)
   163bc:	00000013          	addi	zero,zero,0

00000000000163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>:
   163c0:	0002ce17          	auipc	t3,0x2c
   163c4:	cb0e3e03          	ld	t3,-848(t3) # 42070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@GLIBCXX_3.4.21>
   163c8:	000e0367          	jalr	t1,0(t3)
   163cc:	00000013          	addi	zero,zero,0

00000000000163d0 <__libc_start_main@plt>:
   163d0:	0002ce17          	auipc	t3,0x2c
   163d4:	ca8e3e03          	ld	t3,-856(t3) # 42078 <__libc_start_main@GLIBC_2.27>
   163d8:	000e0367          	jalr	t1,0(t3)
   163dc:	00000013          	addi	zero,zero,0

00000000000163e0 <std::__throw_bad_alloc()@plt>:
   163e0:	0002ce17          	auipc	t3,0x2c
   163e4:	ca0e3e03          	ld	t3,-864(t3) # 42080 <std::__throw_bad_alloc()@GLIBCXX_3.4>
   163e8:	000e0367          	jalr	t1,0(t3)
   163ec:	00000013          	addi	zero,zero,0

00000000000163f0 <std::runtime_error::runtime_error(char const*)@plt>:
   163f0:	0002ce17          	auipc	t3,0x2c
   163f4:	c98e3e03          	ld	t3,-872(t3) # 42088 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   163f8:	000e0367          	jalr	t1,0(t3)
   163fc:	00000013          	addi	zero,zero,0

0000000000016400 <__cxa_begin_catch@plt>:
   16400:	0002ce17          	auipc	t3,0x2c
   16404:	c90e3e03          	ld	t3,-880(t3) # 42090 <__cxa_begin_catch@CXXABI_1.3>
   16408:	000e0367          	jalr	t1,0(t3)
   1640c:	00000013          	addi	zero,zero,0

0000000000016410 <strlen@plt>:
   16410:	0002ce17          	auipc	t3,0x2c
   16414:	c88e3e03          	ld	t3,-888(t3) # 42098 <strlen@GLIBC_2.27>
   16418:	000e0367          	jalr	t1,0(t3)
   1641c:	00000013          	addi	zero,zero,0

0000000000016420 <__cxa_allocate_exception@plt>:
   16420:	0002ce17          	auipc	t3,0x2c
   16424:	c80e3e03          	ld	t3,-896(t3) # 420a0 <__cxa_allocate_exception@CXXABI_1.3>
   16428:	000e0367          	jalr	t1,0(t3)
   1642c:	00000013          	addi	zero,zero,0

0000000000016430 <putchar@plt>:
   16430:	0002ce17          	auipc	t3,0x2c
   16434:	c78e3e03          	ld	t3,-904(t3) # 420a8 <putchar@GLIBC_2.27>
   16438:	000e0367          	jalr	t1,0(t3)
   1643c:	00000013          	addi	zero,zero,0

0000000000016440 <std::__throw_length_error(char const*)@plt>:
   16440:	0002ce17          	auipc	t3,0x2c
   16444:	c70e3e03          	ld	t3,-912(t3) # 420b0 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
   16448:	000e0367          	jalr	t1,0(t3)
   1644c:	00000013          	addi	zero,zero,0

0000000000016450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16450:	0002ce17          	auipc	t3,0x2c
   16454:	c68e3e03          	ld	t3,-920(t3) # 420b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16458:	000e0367          	jalr	t1,0(t3)
   1645c:	00000013          	addi	zero,zero,0

0000000000016460 <std::_V2::system_category()@plt>:
   16460:	0002ce17          	auipc	t3,0x2c
   16464:	c60e3e03          	ld	t3,-928(t3) # 420c0 <std::_V2::system_category()@GLIBCXX_3.4.21>
   16468:	000e0367          	jalr	t1,0(t3)
   1646c:	00000013          	addi	zero,zero,0

0000000000016470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
   16470:	0002ce17          	auipc	t3,0x2c
   16474:	c58e3e03          	ld	t3,-936(t3) # 420c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
   16478:	000e0367          	jalr	t1,0(t3)
   1647c:	00000013          	addi	zero,zero,0

0000000000016480 <open@plt>:
   16480:	0002ce17          	auipc	t3,0x2c
   16484:	c50e3e03          	ld	t3,-944(t3) # 420d0 <open@GLIBC_2.27>
   16488:	000e0367          	jalr	t1,0(t3)
   1648c:	00000013          	addi	zero,zero,0

0000000000016490 <__cxa_guard_release@plt>:
   16490:	0002ce17          	auipc	t3,0x2c
   16494:	c48e3e03          	ld	t3,-952(t3) # 420d8 <__cxa_guard_release@CXXABI_1.3>
   16498:	000e0367          	jalr	t1,0(t3)
   1649c:	00000013          	addi	zero,zero,0

00000000000164a0 <mmap@plt>:
   164a0:	0002ce17          	auipc	t3,0x2c
   164a4:	c40e3e03          	ld	t3,-960(t3) # 420e0 <mmap@GLIBC_2.27>
   164a8:	000e0367          	jalr	t1,0(t3)
   164ac:	00000013          	addi	zero,zero,0

00000000000164b0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>:
   164b0:	0002ce17          	auipc	t3,0x2c
   164b4:	c38e3e03          	ld	t3,-968(t3) # 420e8 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   164b8:	000e0367          	jalr	t1,0(t3)
   164bc:	00000013          	addi	zero,zero,0

00000000000164c0 <std::__throw_logic_error(char const*)@plt>:
   164c0:	0002ce17          	auipc	t3,0x2c
   164c4:	c30e3e03          	ld	t3,-976(t3) # 420f0 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
   164c8:	000e0367          	jalr	t1,0(t3)
   164cc:	00000013          	addi	zero,zero,0

00000000000164d0 <__cxa_free_exception@plt>:
   164d0:	0002ce17          	auipc	t3,0x2c
   164d4:	c28e3e03          	ld	t3,-984(t3) # 420f8 <__cxa_free_exception@CXXABI_1.3>
   164d8:	000e0367          	jalr	t1,0(t3)
   164dc:	00000013          	addi	zero,zero,0

00000000000164e0 <munmap@plt>:
   164e0:	0002ce17          	auipc	t3,0x2c
   164e4:	c20e3e03          	ld	t3,-992(t3) # 42100 <munmap@GLIBC_2.27>
   164e8:	000e0367          	jalr	t1,0(t3)
   164ec:	00000013          	addi	zero,zero,0

00000000000164f0 <std::__throw_bad_array_new_length()@plt>:
   164f0:	0002ce17          	auipc	t3,0x2c
   164f4:	c18e3e03          	ld	t3,-1000(t3) # 42108 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
   164f8:	000e0367          	jalr	t1,0(t3)
   164fc:	00000013          	addi	zero,zero,0

0000000000016500 <__assert_fail@plt>:
   16500:	0002ce17          	auipc	t3,0x2c
   16504:	c10e3e03          	ld	t3,-1008(t3) # 42110 <__assert_fail@GLIBC_2.27>
   16508:	000e0367          	jalr	t1,0(t3)
   1650c:	00000013          	addi	zero,zero,0

0000000000016510 <operator delete(void*)@plt>:
   16510:	0002ce17          	auipc	t3,0x2c
   16514:	c08e3e03          	ld	t3,-1016(t3) # 42118 <operator delete(void*)@GLIBCXX_3.4>
   16518:	000e0367          	jalr	t1,0(t3)
   1651c:	00000013          	addi	zero,zero,0

0000000000016520 <operator new(unsigned long)@plt>:
   16520:	0002ce17          	auipc	t3,0x2c
   16524:	c00e3e03          	ld	t3,-1024(t3) # 42120 <operator new(unsigned long)@GLIBCXX_3.4>
   16528:	000e0367          	jalr	t1,0(t3)
   1652c:	00000013          	addi	zero,zero,0

0000000000016530 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>:
   16530:	0002ce17          	auipc	t3,0x2c
   16534:	bf8e3e03          	ld	t3,-1032(t3) # 42128 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   16538:	000e0367          	jalr	t1,0(t3)
   1653c:	00000013          	addi	zero,zero,0

0000000000016540 <std::runtime_error::~runtime_error()@plt>:
   16540:	0002ce17          	auipc	t3,0x2c
   16544:	bf0e3e03          	ld	t3,-1040(t3) # 42130 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   16548:	000e0367          	jalr	t1,0(t3)
   1654c:	00000013          	addi	zero,zero,0

0000000000016550 <__bswapdi2@plt>:
   16550:	0002ce17          	auipc	t3,0x2c
   16554:	be8e3e03          	ld	t3,-1048(t3) # 42138 <__bswapdi2@GCC_4.3.0>
   16558:	000e0367          	jalr	t1,0(t3)
   1655c:	00000013          	addi	zero,zero,0

0000000000016560 <__dynamic_cast@plt>:
   16560:	0002ce17          	auipc	t3,0x2c
   16564:	be0e3e03          	ld	t3,-1056(t3) # 42140 <__dynamic_cast@CXXABI_1.3>
   16568:	000e0367          	jalr	t1,0(t3)
   1656c:	00000013          	addi	zero,zero,0

0000000000016570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
   16570:	0002ce17          	auipc	t3,0x2c
   16574:	bd8e3e03          	ld	t3,-1064(t3) # 42148 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
   16578:	000e0367          	jalr	t1,0(t3)
   1657c:	00000013          	addi	zero,zero,0

0000000000016580 <std::logic_error::logic_error(char const*)@plt>:
   16580:	0002ce17          	auipc	t3,0x2c
   16584:	bd0e3e03          	ld	t3,-1072(t3) # 42150 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16588:	000e0367          	jalr	t1,0(t3)
   1658c:	00000013          	addi	zero,zero,0

0000000000016590 <strerror@plt>:
   16590:	0002ce17          	auipc	t3,0x2c
   16594:	bc8e3e03          	ld	t3,-1080(t3) # 42158 <strerror@GLIBC_2.27>
   16598:	000e0367          	jalr	t1,0(t3)
   1659c:	00000013          	addi	zero,zero,0

00000000000165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   165a0:	0002ce17          	auipc	t3,0x2c
   165a4:	bc0e3e03          	ld	t3,-1088(t3) # 42160 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   165a8:	000e0367          	jalr	t1,0(t3)
   165ac:	00000013          	addi	zero,zero,0

00000000000165b0 <memcpy@plt>:
   165b0:	0002ce17          	auipc	t3,0x2c
   165b4:	bb8e3e03          	ld	t3,-1096(t3) # 42168 <memcpy@GLIBC_2.27>
   165b8:	000e0367          	jalr	t1,0(t3)
   165bc:	00000013          	addi	zero,zero,0

00000000000165c0 <operator delete[](void*)@plt>:
   165c0:	0002ce17          	auipc	t3,0x2c
   165c4:	bb0e3e03          	ld	t3,-1104(t3) # 42170 <operator delete[](void*)@GLIBCXX_3.4>
   165c8:	000e0367          	jalr	t1,0(t3)
   165cc:	00000013          	addi	zero,zero,0

00000000000165d0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
   165d0:	0002ce17          	auipc	t3,0x2c
   165d4:	ba8e3e03          	ld	t3,-1112(t3) # 42178 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
   165d8:	000e0367          	jalr	t1,0(t3)
   165dc:	00000013          	addi	zero,zero,0

00000000000165e0 <memset@plt>:
   165e0:	0002ce17          	auipc	t3,0x2c
   165e4:	ba0e3e03          	ld	t3,-1120(t3) # 42180 <memset@GLIBC_2.27>
   165e8:	000e0367          	jalr	t1,0(t3)
   165ec:	00000013          	addi	zero,zero,0

00000000000165f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
   165f0:	0002ce17          	auipc	t3,0x2c
   165f4:	b98e3e03          	ld	t3,-1128(t3) # 42188 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@GLIBCXX_3.4.21>
   165f8:	000e0367          	jalr	t1,0(t3)
   165fc:	00000013          	addi	zero,zero,0

0000000000016600 <std::runtime_error::what() const@plt>:
   16600:	0002ce17          	auipc	t3,0x2c
   16604:	b90e3e03          	ld	t3,-1136(t3) # 42190 <std::runtime_error::what() const@GLIBCXX_3.4>
   16608:	000e0367          	jalr	t1,0(t3)
   1660c:	00000013          	addi	zero,zero,0

0000000000016610 <std::logic_error::logic_error(char const*)@plt>:
   16610:	0002ce17          	auipc	t3,0x2c
   16614:	b88e3e03          	ld	t3,-1144(t3) # 42198 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16618:	000e0367          	jalr	t1,0(t3)
   1661c:	00000013          	addi	zero,zero,0

0000000000016620 <__cxa_rethrow@plt>:
   16620:	0002ce17          	auipc	t3,0x2c
   16624:	b80e3e03          	ld	t3,-1152(t3) # 421a0 <__cxa_rethrow@CXXABI_1.3>
   16628:	000e0367          	jalr	t1,0(t3)
   1662c:	00000013          	addi	zero,zero,0

0000000000016630 <std::logic_error::what() const@plt>:
   16630:	0002ce17          	auipc	t3,0x2c
   16634:	b78e3e03          	ld	t3,-1160(t3) # 421a8 <std::logic_error::what() const@GLIBCXX_3.4>
   16638:	000e0367          	jalr	t1,0(t3)
   1663c:	00000013          	addi	zero,zero,0

0000000000016640 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
   16640:	0002ce17          	auipc	t3,0x2c
   16644:	b70e3e03          	ld	t3,-1168(t3) # 421b0 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
   16648:	000e0367          	jalr	t1,0(t3)
   1664c:	00000013          	addi	zero,zero,0

0000000000016650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16650:	0002ce17          	auipc	t3,0x2c
   16654:	b68e3e03          	ld	t3,-1176(t3) # 421b8 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16658:	000e0367          	jalr	t1,0(t3)
   1665c:	00000013          	addi	zero,zero,0

0000000000016660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16660:	0002ce17          	auipc	t3,0x2c
   16664:	b60e3e03          	ld	t3,-1184(t3) # 421c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16668:	000e0367          	jalr	t1,0(t3)
   1666c:	00000013          	addi	zero,zero,0

0000000000016670 <lseek@plt>:
   16670:	0002ce17          	auipc	t3,0x2c
   16674:	b58e3e03          	ld	t3,-1192(t3) # 421c8 <lseek@GLIBC_2.27>
   16678:	000e0367          	jalr	t1,0(t3)
   1667c:	00000013          	addi	zero,zero,0

0000000000016680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16680:	0002ce17          	auipc	t3,0x2c
   16684:	b50e3e03          	ld	t3,-1200(t3) # 421d0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16688:	000e0367          	jalr	t1,0(t3)
   1668c:	00000013          	addi	zero,zero,0

0000000000016690 <__cxa_end_catch@plt>:
   16690:	0002ce17          	auipc	t3,0x2c
   16694:	b48e3e03          	ld	t3,-1208(t3) # 421d8 <__cxa_end_catch@CXXABI_1.3>
   16698:	000e0367          	jalr	t1,0(t3)
   1669c:	00000013          	addi	zero,zero,0

00000000000166a0 <__gxx_personality_v0@plt>:
   166a0:	0002ce17          	auipc	t3,0x2c
   166a4:	b40e3e03          	ld	t3,-1216(t3) # 421e0 <__gxx_personality_v0@CXXABI_1.3>
   166a8:	000e0367          	jalr	t1,0(t3)
   166ac:	00000013          	addi	zero,zero,0

00000000000166b0 <strncmp@plt>:
   166b0:	0002ce17          	auipc	t3,0x2c
   166b4:	b38e3e03          	ld	t3,-1224(t3) # 421e8 <strncmp@GLIBC_2.27>
   166b8:	000e0367          	jalr	t1,0(t3)
   166bc:	00000013          	addi	zero,zero,0

00000000000166c0 <__cxa_throw@plt>:
   166c0:	0002ce17          	auipc	t3,0x2c
   166c4:	b30e3e03          	ld	t3,-1232(t3) # 421f0 <__cxa_throw@CXXABI_1.3>
   166c8:	000e0367          	jalr	t1,0(t3)
   166cc:	00000013          	addi	zero,zero,0

00000000000166d0 <std::range_error::range_error(char const*)@plt>:
   166d0:	0002ce17          	auipc	t3,0x2c
   166d4:	b28e3e03          	ld	t3,-1240(t3) # 421f8 <std::range_error::range_error(char const*)@GLIBCXX_3.4.21>
   166d8:	000e0367          	jalr	t1,0(t3)
   166dc:	00000013          	addi	zero,zero,0

00000000000166e0 <fprintf@plt>:
   166e0:	0002ce17          	auipc	t3,0x2c
   166e4:	b20e3e03          	ld	t3,-1248(t3) # 42200 <fprintf@GLIBC_2.27>
   166e8:	000e0367          	jalr	t1,0(t3)
   166ec:	00000013          	addi	zero,zero,0

00000000000166f0 <_Unwind_Resume@plt>:
   166f0:	0002ce17          	auipc	t3,0x2c
   166f4:	b18e3e03          	ld	t3,-1256(t3) # 42208 <_Unwind_Resume@GCC_3.0>
   166f8:	000e0367          	jalr	t1,0(t3)
   166fc:	00000013          	addi	zero,zero,0

0000000000016700 <std::logic_error::~logic_error()@plt>:
   16700:	0002ce17          	auipc	t3,0x2c
   16704:	b10e3e03          	ld	t3,-1264(t3) # 42210 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   16708:	000e0367          	jalr	t1,0(t3)
   1670c:	00000013          	addi	zero,zero,0

0000000000016710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
   16710:	0002ce17          	auipc	t3,0x2c
   16714:	b08e3e03          	ld	t3,-1272(t3) # 42218 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
   16718:	000e0367          	jalr	t1,0(t3)
   1671c:	00000013          	addi	zero,zero,0

0000000000016720 <__cxa_atexit@plt>:
   16720:	0002ce17          	auipc	t3,0x2c
   16724:	b00e3e03          	ld	t3,-1280(t3) # 42220 <__cxa_atexit@GLIBC_2.27>
   16728:	000e0367          	jalr	t1,0(t3)
   1672c:	00000013          	addi	zero,zero,0

0000000000016730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16730:	0002ce17          	auipc	t3,0x2c
   16734:	af8e3e03          	ld	t3,-1288(t3) # 42228 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16738:	000e0367          	jalr	t1,0(t3)
   1673c:	00000013          	addi	zero,zero,0

0000000000016740 <__cxa_guard_acquire@plt>:
   16740:	0002ce17          	auipc	t3,0x2c
   16744:	af0e3e03          	ld	t3,-1296(t3) # 42230 <__cxa_guard_acquire@CXXABI_1.3>
   16748:	000e0367          	jalr	t1,0(t3)
   1674c:	00000013          	addi	zero,zero,0

0000000000016750 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>:
   16750:	0002ce17          	auipc	t3,0x2c
   16754:	ae8e3e03          	ld	t3,-1304(t3) # 42238 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@GLIBCXX_3.4.21>
   16758:	000e0367          	jalr	t1,0(t3)
   1675c:	00000013          	addi	zero,zero,0

0000000000016760 <printf@plt>:
   16760:	0002ce17          	auipc	t3,0x2c
   16764:	ae0e3e03          	ld	t3,-1312(t3) # 42240 <printf@GLIBC_2.27>
   16768:	000e0367          	jalr	t1,0(t3)
   1676c:	00000013          	addi	zero,zero,0

0000000000016770 <std::runtime_error::runtime_error(char const*)@plt>:
   16770:	0002ce17          	auipc	t3,0x2c
   16774:	ad8e3e03          	ld	t3,-1320(t3) # 42248 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16778:	000e0367          	jalr	t1,0(t3)
   1677c:	00000013          	addi	zero,zero,0

0000000000016780 <memmove@plt>:
   16780:	0002ce17          	auipc	t3,0x2c
   16784:	ad0e3e03          	ld	t3,-1328(t3) # 42250 <memmove@GLIBC_2.27>
   16788:	000e0367          	jalr	t1,0(t3)
   1678c:	00000013          	addi	zero,zero,0

0000000000016790 <__cxa_pure_virtual@plt>:
   16790:	0002ce17          	auipc	t3,0x2c
   16794:	ac8e3e03          	ld	t3,-1336(t3) # 42258 <__cxa_pure_virtual@CXXABI_1.3>
   16798:	000e0367          	jalr	t1,0(t3)
   1679c:	00000013          	addi	zero,zero,0

00000000000167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
   167a0:	0002ce17          	auipc	t3,0x2c
   167a4:	ac0e3e03          	ld	t3,-1344(t3) # 42260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
   167a8:	000e0367          	jalr	t1,0(t3)
   167ac:	00000013          	addi	zero,zero,0

00000000000167b0 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   167b0:	0002ce17          	auipc	t3,0x2c
   167b4:	ab8e3e03          	ld	t3,-1352(t3) # 42268 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   167b8:	000e0367          	jalr	t1,0(t3)
   167bc:	00000013          	addi	zero,zero,0

00000000000167c0 <__errno_location@plt>:
   167c0:	0002ce17          	auipc	t3,0x2c
   167c4:	ab0e3e03          	ld	t3,-1360(t3) # 42270 <__errno_location@GLIBC_2.27>
   167c8:	000e0367          	jalr	t1,0(t3)
   167cc:	00000013          	addi	zero,zero,0

00000000000167d0 <close@plt>:
   167d0:	0002ce17          	auipc	t3,0x2c
   167d4:	aa8e3e03          	ld	t3,-1368(t3) # 42278 <close@GLIBC_2.27>
   167d8:	000e0367          	jalr	t1,0(t3)
   167dc:	00000013          	addi	zero,zero,0

00000000000167e0 <std::underflow_error::underflow_error(char const*)@plt>:
   167e0:	0002ce17          	auipc	t3,0x2c
   167e4:	aa0e3e03          	ld	t3,-1376(t3) # 42280 <std::underflow_error::underflow_error(char const*)@GLIBCXX_3.4.21>
   167e8:	000e0367          	jalr	t1,0(t3)
   167ec:	00000013          	addi	zero,zero,0

00000000000167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   167f0:	0002ce17          	auipc	t3,0x2c
   167f4:	a98e3e03          	ld	t3,-1384(t3) # 42288 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   167f8:	000e0367          	jalr	t1,0(t3)
   167fc:	00000013          	addi	zero,zero,0

Disassembly of section .text:

0000000000016800 <_start>:
ENTRY (ENTRY_POINT)
	/* Terminate call stack by noting ra is undefined.  Use a dummy
	   .cfi_label to force starting the FDE.  */
	.cfi_label .Ldummy
	cfi_undefined (ra)
	call  load_gp
   16800:	02e000ef          	jal	ra,1682e <load_gp>
	mv    a5, a0  /* rtld_fini.  */
   16804:	87aa                	c.mv	a5,a0
	/* main may be in a shared library.  */
	la   a0, main
   16806:	00000517          	auipc	a0,0x0
   1680a:	11e50513          	addi	a0,a0,286 # 16924 <main>
	REG_L a1, 0(sp)      /* argc.  */
   1680e:	6582                	c.ldsp	a1,0(sp)
	addi  a2, sp, SZREG  /* argv.  */
   16810:	0030                	c.addi4spn	a2,sp,8
	andi  sp, sp, ALMASK /* Align stack. */
   16812:	ff017113          	andi	sp,sp,-16
	lla   a3, __libc_csu_init
   16816:	00020697          	auipc	a3,0x20
   1681a:	bfa68693          	addi	a3,a3,-1030 # 36410 <__libc_csu_init>
	lla   a4, __libc_csu_fini
   1681e:	00020717          	auipc	a4,0x20
   16822:	c4a70713          	addi	a4,a4,-950 # 36468 <__libc_csu_fini>
	mv    a6, sp  /* stack_end.  */
   16826:	880a                	c.mv	a6,sp

	call  __libc_start_main@plt
   16828:	ba9ff0ef          	jal	ra,163d0 <__libc_start_main@plt>
	ebreak
   1682c:	9002                	c.ebreak

000000000001682e <load_gp>:
   So we redundantly initialize it at the beginning of _start.  */

load_gp:
.option push
.option norelax
	lla   gp, __global_pointer$
   1682e:	0002c197          	auipc	gp,0x2c
   16832:	fd218193          	addi	gp,gp,-46 # 42800 <__global_pointer$>
.option pop
	ret
   16836:	8082                	c.jr	ra
	...

000000000001683a <deregister_tm_clones>:
   1683a:	81818793          	addi	a5,gp,-2024 # 42018 <__TMC_END__>
   1683e:	81818713          	addi	a4,gp,-2024 # 42018 <__TMC_END__>
   16842:	00f70863          	beq	a4,a5,16852 <deregister_tm_clones+0x18>
   16846:	00000793          	addi	a5,zero,0
   1684a:	c781                	c.beqz	a5,16852 <deregister_tm_clones+0x18>
   1684c:	81818513          	addi	a0,gp,-2024 # 42018 <__TMC_END__>
   16850:	8782                	c.jr	a5
   16852:	8082                	c.jr	ra

0000000000016854 <register_tm_clones>:
   16854:	81818793          	addi	a5,gp,-2024 # 42018 <__TMC_END__>
   16858:	81818593          	addi	a1,gp,-2024 # 42018 <__TMC_END__>
   1685c:	8d9d                	c.sub	a1,a5
   1685e:	4035d793          	srai	a5,a1,0x3
   16862:	91fd                	c.srli	a1,0x3f
   16864:	95be                	c.add	a1,a5
   16866:	8585                	c.srai	a1,0x1
   16868:	c599                	c.beqz	a1,16876 <register_tm_clones+0x22>
   1686a:	00000793          	addi	a5,zero,0
   1686e:	c781                	c.beqz	a5,16876 <register_tm_clones+0x22>
   16870:	81818513          	addi	a0,gp,-2024 # 42018 <__TMC_END__>
   16874:	8782                	c.jr	a5
   16876:	8082                	c.jr	ra

0000000000016878 <__do_global_dtors_aux>:
   16878:	1141                	c.addi	sp,-16
   1687a:	e022                	c.sdsp	s0,0(sp)
   1687c:	e211c783          	lbu	a5,-479(gp) # 42621 <completed.0>
   16880:	e406                	c.sdsp	ra,8(sp)
   16882:	e791                	c.bnez	a5,1688e <__do_global_dtors_aux+0x16>
   16884:	fb7ff0ef          	jal	ra,1683a <deregister_tm_clones>
   16888:	4785                	c.li	a5,1
   1688a:	e2f180a3          	sb	a5,-479(gp) # 42621 <completed.0>
   1688e:	60a2                	c.ldsp	ra,8(sp)
   16890:	6402                	c.ldsp	s0,0(sp)
   16892:	0141                	c.addi	sp,16
   16894:	8082                	c.jr	ra

0000000000016896 <frame_dummy>:
   16896:	bf7d                	c.j	16854 <register_tm_clones>

0000000000016898 <dump_line_table(dwarf::line_table const&)>:
#include <fcntl.h>
#include <inttypes.h>

using namespace std;

void dump_line_table(const dwarf::line_table &lt) {
   16898:	ef010113          	addi	sp,sp,-272
   1689c:	10113423          	sd	ra,264(sp)
   168a0:	10813023          	sd	s0,256(sp)
   168a4:	00050413          	addi	s0,a0,0
  for (auto &line : lt) {
   168a8:	00050593          	addi	a1,a0,0
   168ac:	00010513          	addi	a0,sp,0
   168b0:	23c130ef          	jal	ra,29aec <dwarf::line_table::begin() const>
   168b4:	00040593          	addi	a1,s0,0
   168b8:	08010513          	addi	a0,sp,128
   168bc:	274130ef          	jal	ra,29b30 <dwarf::line_table::end() const>
    if (line.end_sequence)
      printf("\n");
    else
      printf("%-40s%8d%#20" PRIx64 "\n", line.file->path.c_str(), line.line,
   168c0:	00036437          	lui	s0,0x36
   168c4:	0140006f          	jal	zero,168d8 <dump_line_table(dwarf::line_table const&)+0x40>
      printf("\n");
   168c8:	00a00513          	addi	a0,zero,10
   168cc:	b65ff0ef          	jal	ra,16430 <putchar@plt>
  for (auto &line : lt) {
   168d0:	00010513          	addi	a0,sp,0
   168d4:	599120ef          	jal	ra,2966c <dwarf::line_table::iterator::operator++()>
  /** Dereference operator */
  const line_table::entry *operator->() const { return &entry; }

  /** Equality operator */
  bool operator==(const iterator &o) const {
    return o.pos == pos && o.table == table;
   168d8:	0f813703          	ld	a4,248(sp)
   168dc:	07813783          	ld	a5,120(sp)
   168e0:	02f70463          	beq	a4,a5,16908 <dump_line_table(dwarf::line_table const&)+0x70>
    if (line.end_sequence)
   168e4:	02e14783          	lbu	a5,46(sp)
   168e8:	fe0790e3          	bne	a5,zero,168c8 <dump_line_table(dwarf::line_table const&)+0x30>
      printf("%-40s%8d%#20" PRIx64 "\n", line.file->path.c_str(), line.line,
   168ec:	00813683          	ld	a3,8(sp)
   168f0:	02412603          	lw	a2,36(sp)
   168f4:	01813783          	ld	a5,24(sp)
   168f8:	0007b583          	ld	a1,0(a5)
   168fc:	4a840513          	addi	a0,s0,1192 # 364a8 <__libc_csu_fini+0x40>
   16900:	e61ff0ef          	jal	ra,16760 <printf@plt>
   16904:	fcdff06f          	jal	zero,168d0 <dump_line_table(dwarf::line_table const&)+0x38>
   16908:	08013703          	ld	a4,128(sp)
   1690c:	00013783          	ld	a5,0(sp)
   16910:	fcf71ae3          	bne	a4,a5,168e4 <dump_line_table(dwarf::line_table const&)+0x4c>
             line.address);
  }
}
   16914:	10813083          	ld	ra,264(sp)
   16918:	10013403          	ld	s0,256(sp)
   1691c:	11010113          	addi	sp,sp,272
   16920:	00008067          	jalr	zero,0(ra)

0000000000016924 <main>:

int main(int argc, char **argv) {
   16924:	f6010113          	addi	sp,sp,-160
   16928:	08113c23          	sd	ra,152(sp)
   1692c:	08813823          	sd	s0,144(sp)
   16930:	08913423          	sd	s1,136(sp)
   16934:	09213023          	sd	s2,128(sp)
   16938:	07313c23          	sd	s3,120(sp)
   1693c:	07413823          	sd	s4,112(sp)
   16940:	07513423          	sd	s5,104(sp)
   16944:	00058413          	addi	s0,a1,0
  if (argc != 2) {
   16948:	00200793          	addi	a5,zero,2
   1694c:	02f51863          	bne	a0,a5,1697c <main+0x58>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
    return 2;
  }

  int fd = open(argv[1], O_RDONLY);
   16950:	00000593          	addi	a1,zero,0
   16954:	00843503          	ld	a0,8(s0)
   16958:	b29ff0ef          	jal	ra,16480 <open@plt>
   1695c:	00050593          	addi	a1,a0,0
  if (fd < 0) {
   16960:	02054c63          	blt	a0,zero,16998 <main+0x74>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
    return 1;
  }

  elf::elf ef(elf::create_mmap_loader(fd));
   16964:	04010513          	addi	a0,sp,64
   16968:	53c1f0ef          	jal	ra,35ea4 <elf::create_mmap_loader(int)>
   1696c:	04010593          	addi	a1,sp,64
   16970:	03010513          	addi	a0,sp,48
   16974:	5d41d0ef          	jal	ra,33f48 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>
   16978:	0540006f          	jal	zero,169cc <main+0xa8>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
   1697c:	0005b603          	ld	a2,0(a1)
   16980:	000365b7          	lui	a1,0x36
   16984:	4b858593          	addi	a1,a1,1208 # 364b8 <__libc_csu_fini+0x50>
   16988:	e181b503          	ld	a0,-488(gp) # 42618 <stderr@GLIBC_2.27>
   1698c:	d55ff0ef          	jal	ra,166e0 <fprintf@plt>
    return 2;
   16990:	00200513          	addi	a0,zero,2
   16994:	1b80006f          	jal	zero,16b4c <main+0x228>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
   16998:	e181b483          	ld	s1,-488(gp) # 42618 <stderr@GLIBC_2.27>
   1699c:	00843403          	ld	s0,8(s0)
   169a0:	e21ff0ef          	jal	ra,167c0 <__errno_location@plt>
   169a4:	00052503          	lw	a0,0(a0)
   169a8:	be9ff0ef          	jal	ra,16590 <strerror@plt>
   169ac:	00050693          	addi	a3,a0,0
   169b0:	00040613          	addi	a2,s0,0
   169b4:	000365b7          	lui	a1,0x36
   169b8:	4d058593          	addi	a1,a1,1232 # 364d0 <__libc_csu_fini+0x68>
   169bc:	00048513          	addi	a0,s1,0
   169c0:	d21ff0ef          	jal	ra,166e0 <fprintf@plt>
    return 1;
   169c4:	00100513          	addi	a0,zero,1
   169c8:	1840006f          	jal	zero,16b4c <main+0x228>
      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   169cc:	04813503          	ld	a0,72(sp)
   169d0:	00050463          	beq	a0,zero,169d8 <main+0xb4>
	  _M_pi->_M_release();
   169d4:	4a0000ef          	jal	ra,16e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   169d8:	05000513          	addi	a0,zero,80
   169dc:	b45ff0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   169e0:	00050413          	addi	s0,a0,0
    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex() 
    { 
   169e4:	00052423          	sw	zero,8(a0)
   169e8:	00052623          	sw	zero,12(a0)
   169ec:	00052823          	sw	zero,16(a0)
   169f0:	00052a23          	sw	zero,20(a0)
   169f4:	00052c23          	sw	zero,24(a0)
   169f8:	00052e23          	sw	zero,28(a0)
   169fc:	02053023          	sd	zero,32(a0)
   16a00:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   16a04:	00100793          	addi	a5,zero,1
   16a08:	02f52823          	sw	a5,48(a0)
   16a0c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   16a10:	000367b7          	lui	a5,0x36
   16a14:	78078793          	addi	a5,a5,1920 # 36780 <vtable for std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10>
   16a18:	00f53023          	sd	a5,0(a0)
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   16a1c:	03850493          	addi	s1,a0,56

template <typename Elf> class elf_loader : public loader {
  Elf f;

public:
  elf_loader(const Elf &file) : f(file) {}
   16a20:	000367b7          	lui	a5,0x36
   16a24:	75878793          	addi	a5,a5,1880 # 36758 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16a28:	02f53c23          	sd	a5,56(a0)
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   16a2c:	03013783          	ld	a5,48(sp)
   16a30:	04f53023          	sd	a5,64(a0)
      : _M_pi(__r._M_pi)
   16a34:	03813503          	ld	a0,56(sp)
   16a38:	04a43423          	sd	a0,72(s0)
	if (_M_pi != nullptr)
   16a3c:	00050c63          	beq	a0,zero,16a54 <main+0x130>

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   16a40:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16a44:	02078463          	beq	a5,zero,16a6c <main+0x148>
  { *__mem += __val; }
   16a48:	03052783          	lw	a5,48(a0)
   16a4c:	0017879b          	addiw	a5,a5,1
   16a50:	02f52823          	sw	a5,48(a0)
	__r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount()
   16a54:	04913823          	sd	s1,80(sp)
	_M_pi = __tmp;
   16a58:	04813c23          	sd	s0,88(sp)
  dwarf::dwarf dw(dwarf::elf::create_loader(ef));
   16a5c:	05010593          	addi	a1,sp,80
   16a60:	02010513          	addi	a0,sp,32
   16a64:	62c010ef          	jal	ra,18090 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>
   16a68:	0140006f          	jal	zero,16a7c <main+0x158>
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
   16a6c:	00100593          	addi	a1,zero,1
   16a70:	03050513          	addi	a0,a0,48
   16a74:	8ddff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16a78:	fddff06f          	jal	zero,16a54 <main+0x130>
	if (_M_pi != nullptr)
   16a7c:	05813503          	ld	a0,88(sp)
   16a80:	00050463          	beq	a0,zero,16a88 <main+0x164>
	  _M_pi->_M_release();
   16a84:	3f0000ef          	jal	ra,16e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>

  for (auto cu : dw.compilation_units()) {
   16a88:	02010513          	addi	a0,sp,32
   16a8c:	748000ef          	jal	ra,171d4 <dwarf::dwarf::compilation_units() const>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   16a90:	00053403          	ld	s0,0(a0)
   16a94:	00853983          	ld	s3,8(a0)
   16a98:	08898e63          	beq	s3,s0,16b34 <main+0x210>
class unit {
   16a9c:	00036937          	lui	s2,0x36
   16aa0:	71890913          	addi	s2,s2,1816 # 36718 <vtable for dwarf::unit+0x10>
  compilation_unit(const compilation_unit &o) = default;
   16aa4:	000364b7          	lui	s1,0x36
   16aa8:	73848493          	addi	s1,s1,1848 # 36738 <vtable for dwarf::compilation_unit+0x10>
    printf("--- <%x>\n", (unsigned int)cu.get_section_offset());
   16aac:	00036a37          	lui	s4,0x36
   16ab0:	0480006f          	jal	zero,16af8 <main+0x1d4>
   16ab4:	00100593          	addi	a1,zero,1
   16ab8:	03050513          	addi	a0,a0,48
   16abc:	895ff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16ac0:	0640006f          	jal	zero,16b24 <main+0x200>
   16ac4:	0005059b          	addiw	a1,a0,0
   16ac8:	4d8a0513          	addi	a0,s4,1240 # 364d8 <__libc_csu_fini+0x70>
   16acc:	c95ff0ef          	jal	ra,16760 <printf@plt>
    dump_line_table(cu.get_line_table());
   16ad0:	00810513          	addi	a0,sp,8
   16ad4:	5d4030ef          	jal	ra,1a0a8 <dwarf::compilation_unit::get_line_table() const>
   16ad8:	dc1ff0ef          	jal	ra,16898 <dump_line_table(dwarf::line_table const&)>
    printf("\n");
   16adc:	00a00513          	addi	a0,zero,10
   16ae0:	951ff0ef          	jal	ra,16430 <putchar@plt>
class compilation_unit : public unit {
   16ae4:	00913423          	sd	s1,8(sp)
   16ae8:	00810513          	addi	a0,sp,8
   16aec:	754000ef          	jal	ra,17240 <dwarf::unit::~unit()>

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
   16af0:	01840413          	addi	s0,s0,24
  for (auto cu : dw.compilation_units()) {
   16af4:	04898063          	beq	s3,s0,16b34 <main+0x210>
class unit {
   16af8:	01213423          	sd	s2,8(sp)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16afc:	00843783          	ld	a5,8(s0)
   16b00:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   16b04:	01043503          	ld	a0,16(s0)
   16b08:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   16b0c:	00050c63          	beq	a0,zero,16b24 <main+0x200>
    if (__is_single_threaded())
   16b10:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16b14:	fa0780e3          	beq	a5,zero,16ab4 <main+0x190>
  { *__mem += __val; }
   16b18:	03052783          	lw	a5,48(a0)
   16b1c:	0017879b          	addiw	a5,a5,1
   16b20:	02f52823          	sw	a5,48(a0)
  compilation_unit(const compilation_unit &o) = default;
   16b24:	00913423          	sd	s1,8(sp)
    printf("--- <%x>\n", (unsigned int)cu.get_section_offset());
   16b28:	00810513          	addi	a0,sp,8
   16b2c:	00d000ef          	jal	ra,17338 <dwarf::unit::get_section_offset() const>
   16b30:	f95ff06f          	jal	zero,16ac4 <main+0x1a0>
  }

  return 0;
}
   16b34:	02010513          	addi	a0,sp,32
   16b38:	5e8000ef          	jal	ra,17120 <dwarf::dwarf::~dwarf()>
	if (_M_pi != nullptr)
   16b3c:	03813503          	ld	a0,56(sp)
   16b40:	00050463          	beq	a0,zero,16b48 <main+0x224>
	  _M_pi->_M_release();
   16b44:	330000ef          	jal	ra,16e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
  return 0;
   16b48:	00000513          	addi	a0,zero,0
}
   16b4c:	09813083          	ld	ra,152(sp)
   16b50:	09013403          	ld	s0,144(sp)
   16b54:	08813483          	ld	s1,136(sp)
   16b58:	08013903          	ld	s2,128(sp)
   16b5c:	07813983          	ld	s3,120(sp)
   16b60:	07013a03          	ld	s4,112(sp)
   16b64:	06813a83          	ld	s5,104(sp)
   16b68:	0a010113          	addi	sp,sp,160
   16b6c:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   16b70:	00050413          	addi	s0,a0,0
   16b74:	04813503          	ld	a0,72(sp)
   16b78:	00050463          	beq	a0,zero,16b80 <main+0x25c>
	  _M_pi->_M_release();
   16b7c:	2f8000ef          	jal	ra,16e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16b80:	00040513          	addi	a0,s0,0
   16b84:	b6dff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   16b88:	00050413          	addi	s0,a0,0
   16b8c:	05813503          	ld	a0,88(sp)
   16b90:	00050463          	beq	a0,zero,16b98 <main+0x274>
	  _M_pi->_M_release();
   16b94:	2e0000ef          	jal	ra,16e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	if (_M_pi != nullptr)
   16b98:	03813503          	ld	a0,56(sp)
   16b9c:	00050463          	beq	a0,zero,16ba4 <main+0x280>
	  _M_pi->_M_release();
   16ba0:	2d4000ef          	jal	ra,16e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16ba4:	00040513          	addi	a0,s0,0
   16ba8:	b49ff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
class compilation_unit : public unit {
   16bac:	00050413          	addi	s0,a0,0
   16bb0:	000367b7          	lui	a5,0x36
   16bb4:	73878793          	addi	a5,a5,1848 # 36738 <vtable for dwarf::compilation_unit+0x10>
   16bb8:	00f13423          	sd	a5,8(sp)
   16bbc:	00810513          	addi	a0,sp,8
   16bc0:	680000ef          	jal	ra,17240 <dwarf::unit::~unit()>
   16bc4:	02010513          	addi	a0,sp,32
   16bc8:	558000ef          	jal	ra,17120 <dwarf::dwarf::~dwarf()>
   16bcc:	fcdff06f          	jal	zero,16b98 <main+0x274>
   16bd0:	00050413          	addi	s0,a0,0
   16bd4:	ff1ff06f          	jal	zero,16bc4 <main+0x2a0>
	if (_M_pi != nullptr)
   16bd8:	00050413          	addi	s0,a0,0
   16bdc:	fbdff06f          	jal	zero,16b98 <main+0x274>

0000000000016be0 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16be0:	00008067          	jalr	zero,0(ra)

0000000000016be4 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   16be4:	ff010113          	addi	sp,sp,-16
   16be8:	00113423          	sd	ra,8(sp)
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
   16bec:	03853783          	ld	a5,56(a0)
   16bf0:	0007b783          	ld	a5,0(a5)
   16bf4:	03850513          	addi	a0,a0,56
   16bf8:	000780e7          	jalr	ra,0(a5)
      }
   16bfc:	00813083          	ld	ra,8(sp)
   16c00:	01010113          	addi	sp,sp,16
   16c04:	00008067          	jalr	zero,0(ra)

0000000000016c08 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   16c08:	ff010113          	addi	sp,sp,-16
   16c0c:	00113423          	sd	ra,8(sp)
   16c10:	00813023          	sd	s0,0(sp)
   16c14:	03850413          	addi	s0,a0,56
	    ||
   16c18:	000367b7          	lui	a5,0x36
   16c1c:	7a878793          	addi	a5,a5,1960 # 367a8 <std::_Sp_make_shared_tag::_S_ti()::__tag>
   16c20:	02f58c63          	beq	a1,a5,16c58 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
  type_info::operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
   16c24:	0085b503          	ld	a0,8(a1)
   16c28:	000367b7          	lui	a5,0x36
   16c2c:	55878793          	addi	a5,a5,1368 # 36558 <typeinfo name for std::_Sp_make_shared_tag>
   16c30:	02f50463          	beq	a0,a5,16c58 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
#if !__GXX_TYPEINFO_EQUALITY_INLINE
    // ABI requires comparisons to be non-inline.
    return __equal(__arg);
#elif !__GXX_MERGED_TYPEINFO_NAMES
    // Need to do string comparison.
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   16c34:	00054703          	lbu	a4,0(a0)
   16c38:	02a00793          	addi	a5,zero,42
   16c3c:	02f70863          	beq	a4,a5,16c6c <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   16c40:	000365b7          	lui	a1,0x36
   16c44:	55858593          	addi	a1,a1,1368 # 36558 <typeinfo name for std::_Sp_make_shared_tag>
   16c48:	f18ff0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   16c4c:	00153513          	sltiu	a0,a0,1
   16c50:	40a00533          	sub	a0,zero,a0
   16c54:	00a47433          	and	s0,s0,a0
      }
   16c58:	00040513          	addi	a0,s0,0
   16c5c:	00813083          	ld	ra,8(sp)
   16c60:	00013403          	ld	s0,0(sp)
   16c64:	01010113          	addi	sp,sp,16
   16c68:	00008067          	jalr	zero,0(ra)
	return nullptr;
   16c6c:	00000413          	addi	s0,zero,0
   16c70:	fe9ff06f          	jal	zero,16c58 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000016c74 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16c74:	ff010113          	addi	sp,sp,-16
   16c78:	00113423          	sd	ra,8(sp)
   16c7c:	895ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   16c80:	00813083          	ld	ra,8(sp)
   16c84:	01010113          	addi	sp,sp,16
   16c88:	00008067          	jalr	zero,0(ra)

0000000000016c8c <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   16c8c:	ff010113          	addi	sp,sp,-16
   16c90:	00113423          	sd	ra,8(sp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16c94:	87dff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   16c98:	00813083          	ld	ra,8(sp)
   16c9c:	01010113          	addi	sp,sp,16
   16ca0:	00008067          	jalr	zero,0(ra)

0000000000016ca4 <dwarf::compilation_unit::~compilation_unit()>:
   16ca4:	ff010113          	addi	sp,sp,-16
   16ca8:	00113423          	sd	ra,8(sp)
   16cac:	000367b7          	lui	a5,0x36
   16cb0:	73878793          	addi	a5,a5,1848 # 36738 <vtable for dwarf::compilation_unit+0x10>
   16cb4:	00f53023          	sd	a5,0(a0)
   16cb8:	588000ef          	jal	ra,17240 <dwarf::unit::~unit()>
   16cbc:	00813083          	ld	ra,8(sp)
   16cc0:	01010113          	addi	sp,sp,16
   16cc4:	00008067          	jalr	zero,0(ra)

0000000000016cc8 <dwarf::compilation_unit::~compilation_unit()>:
   16cc8:	ff010113          	addi	sp,sp,-16
   16ccc:	00113423          	sd	ra,8(sp)
   16cd0:	00813023          	sd	s0,0(sp)
   16cd4:	00050413          	addi	s0,a0,0
   16cd8:	000367b7          	lui	a5,0x36
   16cdc:	73878793          	addi	a5,a5,1848 # 36738 <vtable for dwarf::compilation_unit+0x10>
   16ce0:	00f53023          	sd	a5,0(a0)
   16ce4:	55c000ef          	jal	ra,17240 <dwarf::unit::~unit()>
   16ce8:	00040513          	addi	a0,s0,0
   16cec:	825ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   16cf0:	00813083          	ld	ra,8(sp)
   16cf4:	00013403          	ld	s0,0(sp)
   16cf8:	01010113          	addi	sp,sp,16
   16cfc:	00008067          	jalr	zero,0(ra)

0000000000016d00 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
template <typename Elf> class elf_loader : public loader {
   16d00:	ff010113          	addi	sp,sp,-16
   16d04:	00113423          	sd	ra,8(sp)
   16d08:	00813023          	sd	s0,0(sp)
   16d0c:	000367b7          	lui	a5,0x36
   16d10:	75878793          	addi	a5,a5,1880 # 36758 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16d14:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   16d18:	01053403          	ld	s0,16(a0)
   16d1c:	02040063          	beq	s0,zero,16d3c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
    if (__is_single_threaded())
   16d20:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16d24:	02078463          	beq	a5,zero,16d4c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x4c>
    _Atomic_word __result = *__mem;
   16d28:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   16d2c:	fff5079b          	addiw	a5,a0,-1
   16d30:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16d34:	00100793          	addi	a5,zero,1
   16d38:	02f50263          	beq	a0,a5,16d5c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x5c>
   16d3c:	00813083          	ld	ra,8(sp)
   16d40:	00013403          	ld	s0,0(sp)
   16d44:	01010113          	addi	sp,sp,16
   16d48:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   16d4c:	fff00593          	addi	a1,zero,-1
   16d50:	03040513          	addi	a0,s0,48
   16d54:	e2cff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16d58:	fddff06f          	jal	zero,16d34 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x34>
	_M_dispose();
   16d5c:	00043783          	ld	a5,0(s0)
   16d60:	0107b783          	ld	a5,16(a5)
   16d64:	00040513          	addi	a0,s0,0
   16d68:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16d6c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16d70:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16d74:	02078663          	beq	a5,zero,16da0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0xa0>
    _Atomic_word __result = *__mem;
   16d78:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   16d7c:	fff5079b          	addiw	a5,a0,-1
   16d80:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16d84:	00100793          	addi	a5,zero,1
   16d88:	faf51ae3          	bne	a0,a5,16d3c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
	    _M_destroy();
   16d8c:	00043783          	ld	a5,0(s0)
   16d90:	0187b783          	ld	a5,24(a5)
   16d94:	00040513          	addi	a0,s0,0
   16d98:	000780e7          	jalr	ra,0(a5)
   16d9c:	fa1ff06f          	jal	zero,16d3c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
      return __exchange_and_add(__mem, __val);
   16da0:	fff00593          	addi	a1,zero,-1
   16da4:	03440513          	addi	a0,s0,52
   16da8:	dd8ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16dac:	fd9ff06f          	jal	zero,16d84 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x84>

0000000000016db0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
   16db0:	fe010113          	addi	sp,sp,-32
   16db4:	00113c23          	sd	ra,24(sp)
   16db8:	00813823          	sd	s0,16(sp)
   16dbc:	00913423          	sd	s1,8(sp)
   16dc0:	00050413          	addi	s0,a0,0
   16dc4:	000367b7          	lui	a5,0x36
   16dc8:	75878793          	addi	a5,a5,1880 # 36758 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16dcc:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   16dd0:	01053483          	ld	s1,16(a0)
   16dd4:	02048063          	beq	s1,zero,16df4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
    if (__is_single_threaded())
   16dd8:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16ddc:	02078a63          	beq	a5,zero,16e10 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x60>
    _Atomic_word __result = *__mem;
   16de0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   16de4:	fff5079b          	addiw	a5,a0,-1
   16de8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16dec:	00100793          	addi	a5,zero,1
   16df0:	02f50863          	beq	a0,a5,16e20 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x70>
   16df4:	00040513          	addi	a0,s0,0
   16df8:	f18ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   16dfc:	01813083          	ld	ra,24(sp)
   16e00:	01013403          	ld	s0,16(sp)
   16e04:	00813483          	ld	s1,8(sp)
   16e08:	02010113          	addi	sp,sp,32
   16e0c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   16e10:	fff00593          	addi	a1,zero,-1
   16e14:	03048513          	addi	a0,s1,48
   16e18:	d68ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16e1c:	fd1ff06f          	jal	zero,16dec <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
	_M_dispose();
   16e20:	0004b783          	ld	a5,0(s1)
   16e24:	0107b783          	ld	a5,16(a5)
   16e28:	00048513          	addi	a0,s1,0
   16e2c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16e30:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16e34:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16e38:	02078663          	beq	a5,zero,16e64 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0xb4>
    _Atomic_word __result = *__mem;
   16e3c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   16e40:	fff5079b          	addiw	a5,a0,-1
   16e44:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16e48:	00100793          	addi	a5,zero,1
   16e4c:	faf514e3          	bne	a0,a5,16df4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
	    _M_destroy();
   16e50:	0004b783          	ld	a5,0(s1)
   16e54:	0187b783          	ld	a5,24(a5)
   16e58:	00048513          	addi	a0,s1,0
   16e5c:	000780e7          	jalr	ra,0(a5)
   16e60:	f95ff06f          	jal	zero,16df4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x44>
      return __exchange_and_add(__mem, __val);
   16e64:	fff00593          	addi	a1,zero,-1
   16e68:	03448513          	addi	a0,s1,52
   16e6c:	d14ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16e70:	fd9ff06f          	jal	zero,16e48 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x98>

0000000000016e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>:
    {
   16e74:	ff010113          	addi	sp,sp,-16
   16e78:	00113423          	sd	ra,8(sp)
   16e7c:	00813023          	sd	s0,0(sp)
   16e80:	00050413          	addi	s0,a0,0
    if (__is_single_threaded())
   16e84:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16e88:	02078463          	beq	a5,zero,16eb0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x3c>
    _Atomic_word __result = *__mem;
   16e8c:	03052503          	lw	a0,48(a0)
    *__mem += __val;
   16e90:	fff5079b          	addiw	a5,a0,-1
   16e94:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16e98:	00100793          	addi	a5,zero,1
   16e9c:	02f50263          	beq	a0,a5,16ec0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x4c>
    }
   16ea0:	00813083          	ld	ra,8(sp)
   16ea4:	00013403          	ld	s0,0(sp)
   16ea8:	01010113          	addi	sp,sp,16
   16eac:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   16eb0:	fff00593          	addi	a1,zero,-1
   16eb4:	03050513          	addi	a0,a0,48
   16eb8:	cc8ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16ebc:	fddff06f          	jal	zero,16e98 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x24>
	_M_dispose();
   16ec0:	00043783          	ld	a5,0(s0)
   16ec4:	0107b783          	ld	a5,16(a5)
   16ec8:	00040513          	addi	a0,s0,0
   16ecc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16ed0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16ed4:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16ed8:	02078663          	beq	a5,zero,16f04 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x90>
    _Atomic_word __result = *__mem;
   16edc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   16ee0:	fff5079b          	addiw	a5,a0,-1
   16ee4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16ee8:	00100793          	addi	a5,zero,1
   16eec:	faf51ae3          	bne	a0,a5,16ea0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x2c>
	    _M_destroy();
   16ef0:	00043783          	ld	a5,0(s0)
   16ef4:	0187b783          	ld	a5,24(a5)
   16ef8:	00040513          	addi	a0,s0,0
   16efc:	000780e7          	jalr	ra,0(a5)
    }
   16f00:	fa1ff06f          	jal	zero,16ea0 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x2c>
      return __exchange_and_add(__mem, __val);
   16f04:	fff00593          	addi	a1,zero,-1
   16f08:	03440513          	addi	a0,s0,52
   16f0c:	c74ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f10:	fd9ff06f          	jal	zero,16ee8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x74>

0000000000016f14 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)>:

  const void *load(section_type section, size_t *size_out) {
   16f14:	f9010113          	addi	sp,sp,-112
   16f18:	06113423          	sd	ra,104(sp)
   16f1c:	06813023          	sd	s0,96(sp)
   16f20:	04913c23          	sd	s1,88(sp)
   16f24:	05213823          	sd	s2,80(sp)
   16f28:	05313423          	sd	s3,72(sp)
   16f2c:	00060913          	addi	s2,a2,0
    auto sec = f.get_section(section_type_to_name(section));
   16f30:	00850993          	addi	s3,a0,8
   16f34:	00058513          	addi	a0,a1,0
   16f38:	1ec160ef          	jal	ra,2d124 <dwarf::elf::section_type_to_name(dwarf::section_type)>
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
#else
	_GLIBCXX20_CONSTEXPR
	_Alloc_hider(pointer __dat, const _Alloc& __a)
	: allocator_type(__a), _M_p(__dat) { }
   16f3c:	02010793          	addi	a5,sp,32
   16f40:	00f13823          	sd	a5,16(sp)
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
   16f44:	04050863          	beq	a0,zero,16f94 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x80>
   16f48:	00050493          	addi	s1,a0,0
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   16f4c:	cc4ff0ef          	jal	ra,16410 <strlen@plt>
   16f50:	00050413          	addi	s0,a0,0
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   16f54:	00a13423          	sd	a0,8(sp)

	if (__dnew > size_type(_S_local_capacity))
   16f58:	00f00793          	addi	a5,zero,15
   16f5c:	04a7e263          	bltu	a5,a0,16fa0 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x8c>
	if (__n == 1)
   16f60:	00100793          	addi	a5,zero,1
   16f64:	06f51463          	bne	a0,a5,16fcc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xb8>
	__c1 = __c2;
   16f68:	0004c783          	lbu	a5,0(s1)
   16f6c:	02f10023          	sb	a5,32(sp)

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
   16f70:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   16f74:	00e13c23          	sd	a4,24(sp)
   16f78:	01013783          	ld	a5,16(sp)
   16f7c:	00e787b3          	add	a5,a5,a4
   16f80:	00078023          	sb	zero,0(a5)
   16f84:	01010593          	addi	a1,sp,16
   16f88:	00098513          	addi	a0,s3,0
   16f8c:	2301c0ef          	jal	ra,331bc <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>
   16f90:	0480006f          	jal	zero,16fd8 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xc4>
	  std::__throw_logic_error(__N("basic_string: "
   16f94:	00036537          	lui	a0,0x36
   16f98:	47050513          	addi	a0,a0,1136 # 36470 <__libc_csu_fini+0x8>
   16f9c:	d24ff0ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>
	    _M_data(_M_create(__dnew, size_type(0)));
   16fa0:	00000613          	addi	a2,zero,0
   16fa4:	00810593          	addi	a1,sp,8
   16fa8:	01010513          	addi	a0,sp,16
   16fac:	f64ff0ef          	jal	ra,16710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   16fb0:	00a13823          	sd	a0,16(sp)
      { _M_allocated_capacity = __capacity; }
   16fb4:	00813783          	ld	a5,8(sp)
   16fb8:	02f13023          	sd	a5,32(sp)
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   16fbc:	00040613          	addi	a2,s0,0
   16fc0:	00048593          	addi	a1,s1,0
   16fc4:	decff0ef          	jal	ra,165b0 <memcpy@plt>
   16fc8:	fa9ff06f          	jal	zero,16f70 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5c>
	if (__n == 0)
   16fcc:	fa0502e3          	beq	a0,zero,16f70 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5c>
      { return _M_dataplus._M_p; }
   16fd0:	02010513          	addi	a0,sp,32
   16fd4:	fe9ff06f          	jal	zero,16fbc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xa8>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16fd8:	00053783          	ld	a5,0(a0)
   16fdc:	02f13823          	sd	a5,48(sp)
      : _M_pi(__r._M_pi)
   16fe0:	00853503          	ld	a0,8(a0)
   16fe4:	02a13c23          	sd	a0,56(sp)
	if (_M_pi != nullptr)
   16fe8:	00050c63          	beq	a0,zero,17000 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
    if (__is_single_threaded())
   16fec:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   16ff0:	02078a63          	beq	a5,zero,17024 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x110>
  { *__mem += __val; }
   16ff4:	03052783          	lw	a5,48(a0)
   16ff8:	0017879b          	addiw	a5,a5,1
   16ffc:	02f52823          	sw	a5,48(a0)
   17000:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   17004:	02010793          	addi	a5,sp,32
   17008:	00f50463          	beq	a0,a5,17010 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xfc>
   1700c:	d04ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }
   17010:	03013403          	ld	s0,48(sp)
    if (!sec.valid())
   17014:	02040863          	beq	s0,zero,17044 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x130>
      return nullptr;
    *size_out = sec.size();
   17018:	03010513          	addi	a0,sp,48
   1701c:	2d11b0ef          	jal	ra,32aec <elf::section::size() const>
   17020:	0140006f          	jal	zero,17034 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x120>
      __atomic_add(__mem, __val);
   17024:	00100593          	addi	a1,zero,1
   17028:	03050513          	addi	a0,a0,48
   1702c:	b24ff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17030:	fd1ff06f          	jal	zero,17000 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
   17034:	00a93023          	sd	a0,0(s2)
    return sec.data();
   17038:	03010513          	addi	a0,sp,48
   1703c:	1811b0ef          	jal	ra,329bc <elf::section::data() const>
   17040:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   17044:	03813483          	ld	s1,56(sp)
   17048:	02048063          	beq	s1,zero,17068 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
    if (__is_single_threaded())
   1704c:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   17050:	02078c63          	beq	a5,zero,17088 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x174>
    _Atomic_word __result = *__mem;
   17054:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   17058:	fff5079b          	addiw	a5,a0,-1
   1705c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17060:	00100793          	addi	a5,zero,1
   17064:	02f50a63          	beq	a0,a5,17098 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x184>
  }
   17068:	00040513          	addi	a0,s0,0
   1706c:	06813083          	ld	ra,104(sp)
   17070:	06013403          	ld	s0,96(sp)
   17074:	05813483          	ld	s1,88(sp)
   17078:	05013903          	ld	s2,80(sp)
   1707c:	04813983          	ld	s3,72(sp)
   17080:	07010113          	addi	sp,sp,112
   17084:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17088:	fff00593          	addi	a1,zero,-1
   1708c:	03048513          	addi	a0,s1,48
   17090:	af0ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17094:	fcdff06f          	jal	zero,17060 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x14c>
	_M_dispose();
   17098:	0004b783          	ld	a5,0(s1)
   1709c:	0107b783          	ld	a5,16(a5)
   170a0:	00048513          	addi	a0,s1,0
   170a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   170a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   170ac:	e201c783          	lbu	a5,-480(gp) # 42620 <__libc_single_threaded@GLIBC_2.32>
   170b0:	02078663          	beq	a5,zero,170dc <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1c8>
    _Atomic_word __result = *__mem;
   170b4:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   170b8:	fff5079b          	addiw	a5,a0,-1
   170bc:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   170c0:	00100793          	addi	a5,zero,1
   170c4:	faf512e3          	bne	a0,a5,17068 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
	    _M_destroy();
   170c8:	0004b783          	ld	a5,0(s1)
   170cc:	0187b783          	ld	a5,24(a5)
   170d0:	00048513          	addi	a0,s1,0
   170d4:	000780e7          	jalr	ra,0(a5)
   170d8:	f91ff06f          	jal	zero,17068 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x154>
      return __exchange_and_add(__mem, __val);
   170dc:	fff00593          	addi	a1,zero,-1
   170e0:	03448513          	addi	a0,s1,52
   170e4:	a9cff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   170e8:	fd9ff06f          	jal	zero,170c0 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1ac>
      { return _M_dataplus._M_p; }
   170ec:	00050413          	addi	s0,a0,0
   170f0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   170f4:	02010793          	addi	a5,sp,32
   170f8:	00f50463          	beq	a0,a5,17100 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x1ec>
   170fc:	c14ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   17100:	00040513          	addi	a0,s0,0
   17104:	decff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   17108:	00050413          	addi	s0,a0,0
   1710c:	03813503          	ld	a0,56(sp)
   17110:	00050463          	beq	a0,zero,17118 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x204>
	  _M_pi->_M_release();
   17114:	d61ff0ef          	jal	ra,16e74 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   17118:	00040513          	addi	a0,s0,0
   1711c:	dd4ff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000017120 <dwarf::dwarf::~dwarf()>:
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
    infocur.subsection();
  }
}

dwarf::~dwarf() {}
   17120:	ff010113          	addi	sp,sp,-16
   17124:	00113423          	sd	ra,8(sp)
   17128:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   1712c:	00853403          	ld	s0,8(a0)
   17130:	02040463          	beq	s0,zero,17158 <dwarf::dwarf::~dwarf()+0x38>
    if (__is_single_threaded())
   17134:	0002b797          	auipc	a5,0x2b
   17138:	34c7b783          	ld	a5,844(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1713c:	0007c783          	lbu	a5,0(a5)
   17140:	02078463          	beq	a5,zero,17168 <dwarf::dwarf::~dwarf()+0x48>
    _Atomic_word __result = *__mem;
   17144:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17148:	fff5079b          	addiw	a5,a0,-1
   1714c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17150:	00100793          	addi	a5,zero,1
   17154:	02f50263          	beq	a0,a5,17178 <dwarf::dwarf::~dwarf()+0x58>
   17158:	00813083          	ld	ra,8(sp)
   1715c:	00013403          	ld	s0,0(sp)
   17160:	01010113          	addi	sp,sp,16
   17164:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17168:	fff00593          	addi	a1,zero,-1
   1716c:	03040513          	addi	a0,s0,48
   17170:	a10ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17174:	fddff06f          	jal	zero,17150 <dwarf::dwarf::~dwarf()+0x30>
	_M_dispose();
   17178:	00043783          	ld	a5,0(s0)
   1717c:	0107b783          	ld	a5,16(a5)
   17180:	00040513          	addi	a0,s0,0
   17184:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17188:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1718c:	0002b797          	auipc	a5,0x2b
   17190:	2f47b783          	ld	a5,756(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17194:	0007c783          	lbu	a5,0(a5)
   17198:	02078663          	beq	a5,zero,171c4 <dwarf::dwarf::~dwarf()+0xa4>
    _Atomic_word __result = *__mem;
   1719c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   171a0:	fff5079b          	addiw	a5,a0,-1
   171a4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   171a8:	00100793          	addi	a5,zero,1
   171ac:	faf516e3          	bne	a0,a5,17158 <dwarf::dwarf::~dwarf()+0x38>
	    _M_destroy();
   171b0:	00043783          	ld	a5,0(s0)
   171b4:	0187b783          	ld	a5,24(a5)
   171b8:	00040513          	addi	a0,s0,0
   171bc:	000780e7          	jalr	ra,0(a5)
   171c0:	f99ff06f          	jal	zero,17158 <dwarf::dwarf::~dwarf()+0x38>
      return __exchange_and_add(__mem, __val);
   171c4:	fff00593          	addi	a1,zero,-1
   171c8:	03440513          	addi	a0,s0,52
   171cc:	9b4ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   171d0:	fd9ff06f          	jal	zero,171a8 <dwarf::dwarf::~dwarf()+0x88>

00000000000171d4 <dwarf::dwarf::compilation_units() const>:

const std::vector<compilation_unit> &dwarf::compilation_units() const {
   171d4:	ff010113          	addi	sp,sp,-16
   171d8:	00113423          	sd	ra,8(sp)
   171dc:	00813023          	sd	s0,0(sp)
   171e0:	00050413          	addi	s0,a0,0
  static std::vector<compilation_unit> empty;
   171e4:	e4018513          	addi	a0,gp,-448 # 42640 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   171e8:	d58ff0ef          	jal	ra,16740 <__cxa_guard_acquire@plt>
   171ec:	02051063          	bne	a0,zero,1720c <dwarf::dwarf::compilation_units() const+0x38>
      { return _M_ptr != nullptr; }
   171f0:	00043503          	ld	a0,0(s0)
  if (!m)
   171f4:	04050263          	beq	a0,zero,17238 <dwarf::dwarf::compilation_units() const+0x64>
    return empty;
  return m->compilation_units;
   171f8:	03050513          	addi	a0,a0,48
}
   171fc:	00813083          	ld	ra,8(sp)
   17200:	00013403          	ld	s0,0(sp)
   17204:	01010113          	addi	sp,sp,16
   17208:	00008067          	jalr	zero,0(ra)
	pointer _M_finish;
	pointer _M_end_of_storage;

	_GLIBCXX20_CONSTEXPR
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   1720c:	e2818593          	addi	a1,gp,-472 # 42628 <dwarf::dwarf::compilation_units() const::empty>
   17210:	0005b023          	sd	zero,0(a1)
   17214:	0005b423          	sd	zero,8(a1)
   17218:	0005b823          	sd	zero,16(a1)
  static std::vector<compilation_unit> empty;
   1721c:	e0818613          	addi	a2,gp,-504 # 42608 <__dso_handle>
   17220:	0002b517          	auipc	a0,0x2b
   17224:	15053503          	ld	a0,336(a0) # 42370 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()@@Base+0x27950>
   17228:	cf8ff0ef          	jal	ra,16720 <__cxa_atexit@plt>
   1722c:	e4018513          	addi	a0,gp,-448 # 42640 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   17230:	a60ff0ef          	jal	ra,16490 <__cxa_guard_release@plt>
   17234:	fbdff06f          	jal	zero,171f0 <dwarf::dwarf::compilation_units() const+0x1c>
    return empty;
   17238:	e2818513          	addi	a0,gp,-472 # 42628 <dwarf::dwarf::compilation_units() const::empty>
   1723c:	fc1ff06f          	jal	zero,171fc <dwarf::dwarf::compilation_units() const+0x28>

0000000000017240 <dwarf::unit::~unit()>:
        have_abbrevs(false) {}

  void force_abbrevs();
};

unit::~unit() {}
   17240:	ff010113          	addi	sp,sp,-16
   17244:	00113423          	sd	ra,8(sp)
   17248:	00813023          	sd	s0,0(sp)
   1724c:	0002b797          	auipc	a5,0x2b
   17250:	3647b783          	ld	a5,868(a5) # 425b0 <vtable for dwarf::unit@@Base+0xbea8>
   17254:	01078793          	addi	a5,a5,16
   17258:	00f53023          	sd	a5,0(a0)
	if (_M_pi != nullptr)
   1725c:	01053403          	ld	s0,16(a0)
   17260:	02040463          	beq	s0,zero,17288 <dwarf::unit::~unit()+0x48>
    if (__is_single_threaded())
   17264:	0002b797          	auipc	a5,0x2b
   17268:	21c7b783          	ld	a5,540(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1726c:	0007c783          	lbu	a5,0(a5)
   17270:	02078463          	beq	a5,zero,17298 <dwarf::unit::~unit()+0x58>
    _Atomic_word __result = *__mem;
   17274:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17278:	fff5079b          	addiw	a5,a0,-1
   1727c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17280:	00100793          	addi	a5,zero,1
   17284:	02f50263          	beq	a0,a5,172a8 <dwarf::unit::~unit()+0x68>
   17288:	00813083          	ld	ra,8(sp)
   1728c:	00013403          	ld	s0,0(sp)
   17290:	01010113          	addi	sp,sp,16
   17294:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   17298:	fff00593          	addi	a1,zero,-1
   1729c:	03040513          	addi	a0,s0,48
   172a0:	8e0ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   172a4:	fddff06f          	jal	zero,17280 <dwarf::unit::~unit()+0x40>
	_M_dispose();
   172a8:	00043783          	ld	a5,0(s0)
   172ac:	0107b783          	ld	a5,16(a5)
   172b0:	00040513          	addi	a0,s0,0
   172b4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   172b8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   172bc:	0002b797          	auipc	a5,0x2b
   172c0:	1c47b783          	ld	a5,452(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   172c4:	0007c783          	lbu	a5,0(a5)
   172c8:	02078663          	beq	a5,zero,172f4 <dwarf::unit::~unit()+0xb4>
    _Atomic_word __result = *__mem;
   172cc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   172d0:	fff5079b          	addiw	a5,a0,-1
   172d4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   172d8:	00100793          	addi	a5,zero,1
   172dc:	faf516e3          	bne	a0,a5,17288 <dwarf::unit::~unit()+0x48>
	    _M_destroy();
   172e0:	00043783          	ld	a5,0(s0)
   172e4:	0187b783          	ld	a5,24(a5)
   172e8:	00040513          	addi	a0,s0,0
   172ec:	000780e7          	jalr	ra,0(a5)
   172f0:	f99ff06f          	jal	zero,17288 <dwarf::unit::~unit()+0x48>
      return __exchange_and_add(__mem, __val);
   172f4:	fff00593          	addi	a1,zero,-1
   172f8:	03440513          	addi	a0,s0,52
   172fc:	884ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17300:	fd9ff06f          	jal	zero,172d8 <dwarf::unit::~unit()+0x98>

0000000000017304 <dwarf::unit::~unit()>:
   17304:	ff010113          	addi	sp,sp,-16
   17308:	00113423          	sd	ra,8(sp)
   1730c:	00813023          	sd	s0,0(sp)
   17310:	00050413          	addi	s0,a0,0
   17314:	f2dff0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   17318:	00040513          	addi	a0,s0,0
   1731c:	9f4ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   17320:	00813083          	ld	ra,8(sp)
   17324:	00013403          	ld	s0,0(sp)
   17328:	01010113          	addi	sp,sp,16
   1732c:	00008067          	jalr	zero,0(ra)

0000000000017330 <dwarf::unit::get_dwarf() const>:

const dwarf &unit::get_dwarf() const { return m->file; }
   17330:	00853503          	ld	a0,8(a0)
   17334:	00008067          	jalr	zero,0(ra)

0000000000017338 <dwarf::unit::get_section_offset() const>:

section_offset unit::get_section_offset() const { return m->offset; }
   17338:	00853783          	ld	a5,8(a0)
   1733c:	0107b503          	ld	a0,16(a5)
   17340:	00008067          	jalr	zero,0(ra)

0000000000017344 <dwarf::unit::data() const>:
    m->root.read(m->root_offset);
  }
  return m->root;
}

const std::shared_ptr<section> &unit::data() const { return m->subsec; }
   17344:	00853503          	ld	a0,8(a0)
   17348:	01850513          	addi	a0,a0,24
   1734c:	00008067          	jalr	zero,0(ra)

0000000000017350 <dwarf::type_unit::get_type_signature() const>:

  m = make_shared<impl>(file, offset, subsec, debug_abbrev_offset,
                        sub.get_section_offset(), type_signature, type_offset);
}

uint64_t type_unit::get_type_signature() const { return m->type_signature; }
   17350:	00853783          	ld	a5,8(a0)
   17354:	0387b503          	ld	a0,56(a5)
   17358:	00008067          	jalr	zero,0(ra)

000000000001735c <dwarf::dwarf::get_section(dwarf::section_type) const>:
std::shared_ptr<section> dwarf::get_section(section_type type) const {
   1735c:	f5010113          	addi	sp,sp,-176
   17360:	0a113423          	sd	ra,168(sp)
   17364:	0a813023          	sd	s0,160(sp)
   17368:	08913c23          	sd	s1,152(sp)
   1736c:	09213823          	sd	s2,144(sp)
   17370:	09313423          	sd	s3,136(sp)
   17374:	09413023          	sd	s4,128(sp)
   17378:	00050413          	addi	s0,a0,0
   1737c:	00058493          	addi	s1,a1,0
   17380:	00c12623          	sw	a2,12(sp)
  if (type == section_type::info)
   17384:	00300713          	addi	a4,zero,3
   17388:	06e60263          	beq	a2,a4,173ec <dwarf::dwarf::get_section(dwarf::section_type) const+0x90>
   1738c:	00060793          	addi	a5,a2,0
  if (type == section_type::abbrev)
   17390:	0a061a63          	bne	a2,zero,17444 <dwarf::dwarf::get_section(dwarf::section_type) const+0xe8>
      { return _M_ptr; }
   17394:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17398:	0207b703          	ld	a4,32(a5)
   1739c:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   173a0:	0287b503          	ld	a0,40(a5)
   173a4:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   173a8:	02050063          	beq	a0,zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   173ac:	0002b797          	auipc	a5,0x2b
   173b0:	0d47b783          	ld	a5,212(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   173b4:	0007c783          	lbu	a5,0(a5)
   173b8:	06078e63          	beq	a5,zero,17434 <dwarf::dwarf::get_section(dwarf::section_type) const+0xd8>
  { *__mem += __val; }
   173bc:	03052783          	lw	a5,48(a0)
   173c0:	0017879b          	addiw	a5,a5,1
   173c4:	02f52823          	sw	a5,48(a0)
}
   173c8:	00040513          	addi	a0,s0,0
   173cc:	0a813083          	ld	ra,168(sp)
   173d0:	0a013403          	ld	s0,160(sp)
   173d4:	09813483          	ld	s1,152(sp)
   173d8:	09013903          	ld	s2,144(sp)
   173dc:	08813983          	ld	s3,136(sp)
   173e0:	08013a03          	ld	s4,128(sp)
   173e4:	0b010113          	addi	sp,sp,176
   173e8:	00008067          	jalr	zero,0(ra)
      { return _M_ptr; }
   173ec:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   173f0:	0107b703          	ld	a4,16(a5)
   173f4:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   173f8:	0187b503          	ld	a0,24(a5)
   173fc:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   17400:	fc0504e3          	beq	a0,zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   17404:	0002b797          	auipc	a5,0x2b
   17408:	07c7b783          	ld	a5,124(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1740c:	0007c783          	lbu	a5,0(a5)
   17410:	00078a63          	beq	a5,zero,17424 <dwarf::dwarf::get_section(dwarf::section_type) const+0xc8>
  { *__mem += __val; }
   17414:	03052783          	lw	a5,48(a0)
   17418:	0017879b          	addiw	a5,a5,1
   1741c:	02f52823          	sw	a5,48(a0)
   17420:	fa9ff06f          	jal	zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      __atomic_add(__mem, __val);
   17424:	00100593          	addi	a1,zero,1
   17428:	03050513          	addi	a0,a0,48
   1742c:	f25fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17430:	f99ff06f          	jal	zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
   17434:	00100593          	addi	a1,zero,1
   17438:	03050513          	addi	a0,a0,48
   1743c:	f15fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17440:	f89ff06f          	jal	zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      { return _M_ptr; }
   17444:	0005b583          	ld	a1,0(a1)
      _M_rightmost() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_mbegin() const _GLIBCXX_NOEXCEPT
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17448:	0985b703          	ld	a4,152(a1)
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   1744c:	09058513          	addi	a0,a1,144
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   17450:	38070e63          	beq	a4,zero,177ec <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
   17454:	00050613          	addi	a2,a0,0
   17458:	00c0006f          	jal	zero,17464 <dwarf::dwarf::get_section(dwarf::section_type) const+0x108>
      { return static_cast<_Link_type>(__x->_M_right); }
   1745c:	01873703          	ld	a4,24(a4)
      while (__x != 0)
   17460:	00070c63          	beq	a4,zero,17478 <dwarf::dwarf::get_section(dwarf::section_type) const+0x11c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17464:	02072683          	lw	a3,32(a4)
   17468:	fef6cae3          	blt	a3,a5,1745c <dwarf::dwarf::get_section(dwarf::section_type) const+0x100>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1746c:	00070613          	addi	a2,a4,0
	  __y = __x, __x = _S_left(__x);
   17470:	01073703          	ld	a4,16(a4)
   17474:	fedff06f          	jal	zero,17460 <dwarf::dwarf::get_section(dwarf::section_type) const+0x104>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   17478:	36c50a63          	beq	a0,a2,177ec <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
	      || _M_impl._M_key_compare(__k,
   1747c:	02062703          	lw	a4,32(a2)
   17480:	36e7c663          	blt	a5,a4,177ec <dwarf::dwarf::get_section(dwarf::section_type) const+0x490>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17484:	02863783          	ld	a5,40(a2)
   17488:	00f43023          	sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   1748c:	03063503          	ld	a0,48(a2)
   17490:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   17494:	f2050ae3          	beq	a0,zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   17498:	0002b797          	auipc	a5,0x2b
   1749c:	fe87b783          	ld	a5,-24(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   174a0:	0007c783          	lbu	a5,0(a5)
   174a4:	00078a63          	beq	a5,zero,174b8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x15c>
  { *__mem += __val; }
   174a8:	03052783          	lw	a5,48(a0)
   174ac:	0017879b          	addiw	a5,a5,1
   174b0:	02f52823          	sw	a5,48(a0)
   174b4:	f15ff06f          	jal	zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      __atomic_add(__mem, __val);
   174b8:	00100593          	addi	a1,zero,1
   174bc:	03050513          	addi	a0,a0,48
   174c0:	e91fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   174c4:	f05ff06f          	jal	zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
                       " section missing");
   174c8:	01000513          	addi	a0,zero,16
   174cc:	f55fe0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   174d0:	00050493          	addi	s1,a0,0
    throw format_error(std::string(elf::section_type_to_name(type)) +
   174d4:	00c12503          	lw	a0,12(sp)
   174d8:	44d150ef          	jal	ra,2d124 <dwarf::elf::section_type_to_name(dwarf::section_type)>
   174dc:	00050593          	addi	a1,a0,0
   174e0:	05810613          	addi	a2,sp,88
   174e4:	01010513          	addi	a0,sp,16
   174e8:	908ff0ef          	jal	ra,165f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
   174ec:	0001f597          	auipc	a1,0x1f
   174f0:	2ec58593          	addi	a1,a1,748 # 367d8 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x30>
   174f4:	01010513          	addi	a0,sp,16
   174f8:	aa8ff0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   174fc:	00050593          	addi	a1,a0,0
   17500:	03010413          	addi	s0,sp,48
   17504:	00040513          	addi	a0,s0,0
   17508:	f69fe0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1750c:	00040593          	addi	a1,s0,0
   17510:	00048513          	addi	a0,s1,0
   17514:	88cff0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   17518:	0002b797          	auipc	a5,0x2b
   1751c:	0407b783          	ld	a5,64(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   17520:	01078793          	addi	a5,a5,16
   17524:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   17528:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1752c:	04010793          	addi	a5,sp,64
   17530:	00f50463          	beq	a0,a5,17538 <dwarf::dwarf::get_section(dwarf::section_type) const+0x1dc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17534:	fddfe0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17538:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1753c:	02010793          	addi	a5,sp,32
   17540:	00f50463          	beq	a0,a5,17548 <dwarf::dwarf::get_section(dwarf::section_type) const+0x1ec>
   17544:	fcdfe0ef          	jal	ra,16510 <operator delete(void*)@plt>
                       " section missing");
   17548:	0002b617          	auipc	a2,0x2b
   1754c:	e3863603          	ld	a2,-456(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   17550:	0002b597          	auipc	a1,0x2b
   17554:	d605b583          	ld	a1,-672(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   17558:	00048513          	addi	a0,s1,0
   1755c:	964ff0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return static_cast<_Link_type>(__x->_M_right); }
   17560:	0187b783          	ld	a5,24(a5)
      while (__x != 0)
   17564:	00078c63          	beq	a5,zero,1757c <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17568:	0207a703          	lw	a4,32(a5)
   1756c:	fed74ae3          	blt	a4,a3,17560 <dwarf::dwarf::get_section(dwarf::section_type) const+0x204>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17570:	00078913          	addi	s2,a5,0
	  __y = __x, __x = _S_left(__x);
   17574:	0107b783          	ld	a5,16(a5)
   17578:	fedff06f          	jal	zero,17564 <dwarf::dwarf::get_section(dwarf::section_type) const+0x208>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   1757c:	10c90663          	beq	s2,a2,17688 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32c>
   17580:	02092783          	lw	a5,32(s2)
   17584:	02f6da63          	bge	a3,a5,175b8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x25c>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   17588:	00c10793          	addi	a5,sp,12
   1758c:	06f13423          	sd	a5,104(sp)
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17590:	06010713          	addi	a4,sp,96
   17594:	06810693          	addi	a3,sp,104
   17598:	0001f617          	auipc	a2,0x1f
   1759c:	55060613          	addi	a2,a2,1360 # 36ae8 <std::piecewise_construct>
   175a0:	00090593          	addi	a1,s2,0
   175a4:	08850513          	addi	a0,a0,136
   175a8:	0002b317          	auipc	t1,0x2b
   175ac:	df833303          	ld	t1,-520(t1) # 423a0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x26724>
   175b0:	000300e7          	jalr	ra,0(t1)
   175b4:	00050913          	addi	s2,a0,0
      { return _M_ptr; }
   175b8:	0004b783          	ld	a5,0(s1)
   175bc:	0107ba03          	ld	s4,16(a5)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   175c0:	06000513          	addi	a0,zero,96
   175c4:	f5dfe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   175c8:	00052423          	sw	zero,8(a0)
   175cc:	00052623          	sw	zero,12(a0)
   175d0:	00052823          	sw	zero,16(a0)
   175d4:	00052a23          	sw	zero,20(a0)
   175d8:	00052c23          	sw	zero,24(a0)
   175dc:	00052e23          	sw	zero,28(a0)
   175e0:	02053023          	sd	zero,32(a0)
   175e4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   175e8:	00100793          	addi	a5,zero,1
   175ec:	02f52823          	sw	a5,48(a0)
   175f0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   175f4:	0002b797          	auipc	a5,0x2b
   175f8:	fcc7b783          	ld	a5,-52(a5) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   175fc:	01078793          	addi	a5,a5,16
   17600:	00f53023          	sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   17604:	01ca2703          	lw	a4,28(s4)
  const byte_order ord;
  unsigned addr_size;

  section(section_type type, const void *begin, section_length length,
          byte_order ord, format fmt = format::unknown, unsigned addr_size = 0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17608:	00a00793          	addi	a5,zero,10
   1760c:	02f52c23          	sw	a5,56(a0)
   17610:	05353023          	sd	s3,64(a0)
   17614:	05013783          	ld	a5,80(sp)
   17618:	00f987b3          	add	a5,s3,a5
   1761c:	04f53423          	sd	a5,72(a0)
   17620:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17624:	04e52a23          	sw	a4,84(a0)
   17628:	04052c23          	sw	zero,88(a0)
   1762c:	03850793          	addi	a5,a0,56
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   17630:	02f93423          	sd	a5,40(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17634:	03093983          	ld	s3,48(s2)
	__r._M_pi = _M_pi;
   17638:	02a93823          	sd	a0,48(s2)
	if (_M_pi != nullptr)
   1763c:	02098463          	beq	s3,zero,17664 <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
    if (__is_single_threaded())
   17640:	0002b797          	auipc	a5,0x2b
   17644:	e407b783          	ld	a5,-448(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17648:	0007c783          	lbu	a5,0(a5)
   1764c:	04078263          	beq	a5,zero,17690 <dwarf::dwarf::get_section(dwarf::section_type) const+0x334>
    _Atomic_word __result = *__mem;
   17650:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   17654:	fff5079b          	addiw	a5,a0,-1
   17658:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1765c:	00100793          	addi	a5,zero,1
   17660:	04f50063          	beq	a0,a5,176a0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x344>
      { return _M_ptr; }
   17664:	0004b503          	ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17668:	09853783          	ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   1766c:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17670:	10078c63          	beq	a5,zero,17788 <dwarf::dwarf::get_section(dwarf::section_type) const+0x42c>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   17674:	00c12683          	lw	a3,12(sp)
   17678:	00060593          	addi	a1,a2,0
   1767c:	08c0006f          	jal	zero,17708 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3ac>
   17680:	00060913          	addi	s2,a2,0
   17684:	f05ff06f          	jal	zero,17588 <dwarf::dwarf::get_section(dwarf::section_type) const+0x22c>
   17688:	00060913          	addi	s2,a2,0
   1768c:	efdff06f          	jal	zero,17588 <dwarf::dwarf::get_section(dwarf::section_type) const+0x22c>
      return __exchange_and_add(__mem, __val);
   17690:	fff00593          	addi	a1,zero,-1
   17694:	03098513          	addi	a0,s3,48
   17698:	ce9fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1769c:	fc1ff06f          	jal	zero,1765c <dwarf::dwarf::get_section(dwarf::section_type) const+0x300>
	_M_dispose();
   176a0:	0009b783          	ld	a5,0(s3)
   176a4:	0107b783          	ld	a5,16(a5)
   176a8:	00098513          	addi	a0,s3,0
   176ac:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   176b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   176b4:	0002b797          	auipc	a5,0x2b
   176b8:	dcc7b783          	ld	a5,-564(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   176bc:	0007c783          	lbu	a5,0(a5)
   176c0:	02078663          	beq	a5,zero,176ec <dwarf::dwarf::get_section(dwarf::section_type) const+0x390>
    _Atomic_word __result = *__mem;
   176c4:	0349a783          	lw	a5,52(s3)
    *__mem += __val;
   176c8:	fff7871b          	addiw	a4,a5,-1
   176cc:	02e9aa23          	sw	a4,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   176d0:	00100713          	addi	a4,zero,1
   176d4:	f8e798e3          	bne	a5,a4,17664 <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
	    _M_destroy();
   176d8:	0009b783          	ld	a5,0(s3)
   176dc:	0187b783          	ld	a5,24(a5)
   176e0:	00098513          	addi	a0,s3,0
   176e4:	000780e7          	jalr	ra,0(a5)
   176e8:	f7dff06f          	jal	zero,17664 <dwarf::dwarf::get_section(dwarf::section_type) const+0x308>
      return __exchange_and_add(__mem, __val);
   176ec:	fff00593          	addi	a1,zero,-1
   176f0:	03498513          	addi	a0,s3,52
   176f4:	c8dfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   176f8:	00050793          	addi	a5,a0,0
   176fc:	fd5ff06f          	jal	zero,176d0 <dwarf::dwarf::get_section(dwarf::section_type) const+0x374>
      { return static_cast<_Link_type>(__x->_M_right); }
   17700:	0187b783          	ld	a5,24(a5)
      while (__x != 0)
   17704:	00078c63          	beq	a5,zero,1771c <dwarf::dwarf::get_section(dwarf::section_type) const+0x3c0>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17708:	0207a703          	lw	a4,32(a5)
   1770c:	fed74ae3          	blt	a4,a3,17700 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3a4>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17710:	00078593          	addi	a1,a5,0
	  __y = __x, __x = _S_left(__x);
   17714:	0107b783          	ld	a5,16(a5)
   17718:	fedff06f          	jal	zero,17704 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3a8>
	if (__i == end() || key_comp()(__k, (*__i).first))
   1771c:	06c58a63          	beq	a1,a2,17790 <dwarf::dwarf::get_section(dwarf::section_type) const+0x434>
   17720:	0205a783          	lw	a5,32(a1)
   17724:	02f6d863          	bge	a3,a5,17754 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3f8>
   17728:	00c10793          	addi	a5,sp,12
   1772c:	06f13c23          	sd	a5,120(sp)
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17730:	07010713          	addi	a4,sp,112
   17734:	07810693          	addi	a3,sp,120
   17738:	0001f617          	auipc	a2,0x1f
   1773c:	3b060613          	addi	a2,a2,944 # 36ae8 <std::piecewise_construct>
   17740:	08850513          	addi	a0,a0,136
   17744:	0002b317          	auipc	t1,0x2b
   17748:	c5c33303          	ld	t1,-932(t1) # 423a0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x26724>
   1774c:	000300e7          	jalr	ra,0(t1)
   17750:	00050593          	addi	a1,a0,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17754:	0285b783          	ld	a5,40(a1)
   17758:	00f43023          	sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   1775c:	0305b503          	ld	a0,48(a1)
   17760:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   17764:	c60502e3          	beq	a0,zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
    if (__is_single_threaded())
   17768:	0002b797          	auipc	a5,0x2b
   1776c:	d187b783          	ld	a5,-744(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17770:	0007c783          	lbu	a5,0(a5)
   17774:	02078263          	beq	a5,zero,17798 <dwarf::dwarf::get_section(dwarf::section_type) const+0x43c>
  { *__mem += __val; }
   17778:	03052783          	lw	a5,48(a0)
   1777c:	0017879b          	addiw	a5,a5,1
   17780:	02f52823          	sw	a5,48(a0)
   17784:	c45ff06f          	jal	zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      while (__x != 0)
   17788:	00060593          	addi	a1,a2,0
   1778c:	f9dff06f          	jal	zero,17728 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3cc>
   17790:	00060593          	addi	a1,a2,0
   17794:	f95ff06f          	jal	zero,17728 <dwarf::dwarf::get_section(dwarf::section_type) const+0x3cc>
      __atomic_add(__mem, __val);
   17798:	00100593          	addi	a1,zero,1
   1779c:	03050513          	addi	a0,a0,48
   177a0:	bb1fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   177a4:	c25ff06f          	jal	zero,173c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x6c>
      { return _M_dataplus._M_p; }
   177a8:	00050413          	addi	s0,a0,0
   177ac:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   177b0:	04010793          	addi	a5,sp,64
   177b4:	00f50463          	beq	a0,a5,177bc <dwarf::dwarf::get_section(dwarf::section_type) const+0x460>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   177b8:	d59fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   177bc:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   177c0:	02010793          	addi	a5,sp,32
   177c4:	00f50463          	beq	a0,a5,177cc <dwarf::dwarf::get_section(dwarf::section_type) const+0x470>
   177c8:	d49fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
   177cc:	00048513          	addi	a0,s1,0
   177d0:	d01fe0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   177d4:	00040513          	addi	a0,s0,0
   177d8:	f19fe0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   177dc:	00050413          	addi	s0,a0,0
   177e0:	fddff06f          	jal	zero,177bc <dwarf::dwarf::get_section(dwarf::section_type) const+0x460>
   177e4:	00050413          	addi	s0,a0,0
   177e8:	fe5ff06f          	jal	zero,177cc <dwarf::dwarf::get_section(dwarf::section_type) const+0x470>
      { return _M_ptr; }
   177ec:	0005b503          	ld	a0,0(a1)
  const void *data = m->l->load(type, &size);
   177f0:	00053703          	ld	a4,0(a0)
   177f4:	01073703          	ld	a4,16(a4)
   177f8:	05010613          	addi	a2,sp,80
   177fc:	00078593          	addi	a1,a5,0
   17800:	000700e7          	jalr	ra,0(a4)
   17804:	00050993          	addi	s3,a0,0
  if (!data)
   17808:	cc0500e3          	beq	a0,zero,174c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x16c>
   1780c:	0004b503          	ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   17810:	09853783          	ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   17814:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17818:	e60784e3          	beq	a5,zero,17680 <dwarf::dwarf::get_section(dwarf::section_type) const+0x324>
   1781c:	00c12683          	lw	a3,12(sp)
   17820:	00060913          	addi	s2,a2,0
   17824:	d45ff06f          	jal	zero,17568 <dwarf::dwarf::get_section(dwarf::section_type) const+0x20c>

0000000000017828 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>:
compilation_unit::compilation_unit(const dwarf &file, section_offset offset) {
   17828:	f3010113          	addi	sp,sp,-208
   1782c:	0c113423          	sd	ra,200(sp)
   17830:	0c813023          	sd	s0,192(sp)
   17834:	0a913c23          	sd	s1,184(sp)
   17838:	0b213823          	sd	s2,176(sp)
   1783c:	0b313423          	sd	s3,168(sp)
   17840:	0b413023          	sd	s4,160(sp)
   17844:	09513c23          	sd	s5,152(sp)
   17848:	09613823          	sd	s6,144(sp)
   1784c:	00050493          	addi	s1,a0,0
   17850:	00058913          	addi	s2,a1,0
   17854:	00060993          	addi	s3,a2,0
      : _M_ptr(0), _M_refcount()
   17858:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1785c:	00053823          	sd	zero,16(a0)
   17860:	0002b797          	auipc	a5,0x2b
   17864:	a587b783          	ld	a5,-1448(a5) # 422b8 <vtable for dwarf::compilation_unit@@Base+0xbb90>
   17868:	01078793          	addi	a5,a5,16
   1786c:	00f53023          	sd	a5,0(a0)
  cursor cur(file.get_section(section_type::info), offset);
   17870:	00300613          	addi	a2,zero,3
   17874:	08010513          	addi	a0,sp,128
   17878:	ae5ff0ef          	jal	ra,1735c <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1787c:	08013783          	ld	a5,128(sp)
   17880:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   17884:	08813503          	ld	a0,136(sp)
   17888:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   1788c:	02050063          	beq	a0,zero,178ac <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
    if (__is_single_threaded())
   17890:	0002b797          	auipc	a5,0x2b
   17894:	bf07b783          	ld	a5,-1040(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17898:	0007c783          	lbu	a5,0(a5)
   1789c:	04078e63          	beq	a5,zero,178f8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xd0>
  { *__mem += __val; }
   178a0:	03052783          	lw	a5,48(a0)
   178a4:	0017879b          	addiw	a5,a5,1
   178a8:	02f52823          	sw	a5,48(a0)
  std::shared_ptr<section> sec;
  const char *pos;

  cursor() : pos(nullptr) {}
  cursor(const std::shared_ptr<section> sec, section_offset offset = 0)
      : sec(sec), pos(sec->begin + offset) {}
   178ac:	08013783          	ld	a5,128(sp)
   178b0:	0087b783          	ld	a5,8(a5)
   178b4:	013787b3          	add	a5,a5,s3
   178b8:	02f13023          	sd	a5,32(sp)
	if (_M_pi != nullptr)
   178bc:	08813403          	ld	s0,136(sp)
   178c0:	02040463          	beq	s0,zero,178e8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
    if (__is_single_threaded())
   178c4:	0002b797          	auipc	a5,0x2b
   178c8:	bbc7b783          	ld	a5,-1092(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   178cc:	0007c783          	lbu	a5,0(a5)
   178d0:	02078c63          	beq	a5,zero,17908 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xe0>
    _Atomic_word __result = *__mem;
   178d4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   178d8:	fff5079b          	addiw	a5,a0,-1
   178dc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   178e0:	00100793          	addi	a5,zero,1
   178e4:	02f50a63          	beq	a0,a5,17918 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xf0>
  std::shared_ptr<section> subsec = cur.subsection();
   178e8:	01010593          	addi	a1,sp,16
   178ec:	00010513          	addi	a0,sp,0
   178f0:	5a0050ef          	jal	ra,1ce90 <dwarf::cursor::subsection()>
   178f4:	0800006f          	jal	zero,17974 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x14c>
      __atomic_add(__mem, __val);
   178f8:	00100593          	addi	a1,zero,1
   178fc:	03050513          	addi	a0,a0,48
   17900:	a51fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17904:	fa9ff06f          	jal	zero,178ac <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
      return __exchange_and_add(__mem, __val);
   17908:	fff00593          	addi	a1,zero,-1
   1790c:	03040513          	addi	a0,s0,48
   17910:	a71fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17914:	fcdff06f          	jal	zero,178e0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xb8>
	_M_dispose();
   17918:	00043783          	ld	a5,0(s0)
   1791c:	0107b783          	ld	a5,16(a5)
   17920:	00040513          	addi	a0,s0,0
   17924:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17928:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1792c:	0002b797          	auipc	a5,0x2b
   17930:	b547b783          	ld	a5,-1196(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17934:	0007c783          	lbu	a5,0(a5)
   17938:	02078663          	beq	a5,zero,17964 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x13c>
    _Atomic_word __result = *__mem;
   1793c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17940:	fff5079b          	addiw	a5,a0,-1
   17944:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17948:	00100793          	addi	a5,zero,1
   1794c:	f8f51ee3          	bne	a0,a5,178e8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
	    _M_destroy();
   17950:	00043783          	ld	a5,0(s0)
   17954:	0187b783          	ld	a5,24(a5)
   17958:	00040513          	addi	a0,s0,0
   1795c:	000780e7          	jalr	ra,0(a5)
   17960:	f89ff06f          	jal	zero,178e8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xc0>
      return __exchange_and_add(__mem, __val);
   17964:	fff00593          	addi	a1,zero,-1
   17968:	03440513          	addi	a0,s0,52
   1796c:	a15fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17970:	fd9ff06f          	jal	zero,17948 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x120>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17974:	00013a03          	ld	s4,0(sp)
      : _M_pi(__r._M_pi)
   17978:	00813403          	ld	s0,8(sp)
	if (_M_pi != nullptr)
   1797c:	6e040c63          	beq	s0,zero,18074 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84c>
    if (__is_single_threaded())
   17980:	0002b797          	auipc	a5,0x2b
   17984:	b007b783          	ld	a5,-1280(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17988:	0007c783          	lbu	a5,0(a5)
   1798c:	0a078663          	beq	a5,zero,17a38 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x210>
  { *__mem += __val; }
   17990:	03042783          	lw	a5,48(s0)
   17994:	0017879b          	addiw	a5,a5,1
   17998:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1799c:	03413423          	sd	s4,40(sp)
      : _M_pi(__r._M_pi)
   179a0:	02813823          	sd	s0,48(sp)
    if (__is_single_threaded())
   179a4:	0002b797          	auipc	a5,0x2b
   179a8:	adc7b783          	ld	a5,-1316(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   179ac:	0007c783          	lbu	a5,0(a5)
   179b0:	08078c63          	beq	a5,zero,17a48 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x220>
  { *__mem += __val; }
   179b4:	03042783          	lw	a5,48(s0)
   179b8:	0017879b          	addiw	a5,a5,1
   179bc:	02f42823          	sw	a5,48(s0)
   179c0:	008a3783          	ld	a5,8(s4)
   179c4:	02f13c23          	sd	a5,56(sp)
    if (__is_single_threaded())
   179c8:	0002b797          	auipc	a5,0x2b
   179cc:	ab87b783          	ld	a5,-1352(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   179d0:	0007c783          	lbu	a5,0(a5)
   179d4:	08078263          	beq	a5,zero,17a58 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x230>
    _Atomic_word __result = *__mem;
   179d8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   179dc:	fff5079b          	addiw	a5,a0,-1
   179e0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   179e4:	00100793          	addi	a5,zero,1
   179e8:	68f51e63          	bne	a0,a5,18084 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
	_M_dispose();
   179ec:	00043783          	ld	a5,0(s0)
   179f0:	0107b783          	ld	a5,16(a5)
   179f4:	00040513          	addi	a0,s0,0
   179f8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   179fc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17a00:	0002b797          	auipc	a5,0x2b
   17a04:	a807b783          	ld	a5,-1408(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17a08:	0007c783          	lbu	a5,0(a5)
   17a0c:	04078e63          	beq	a5,zero,17a68 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x240>
    _Atomic_word __result = *__mem;
   17a10:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17a14:	fff5079b          	addiw	a5,a0,-1
   17a18:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17a1c:	00100793          	addi	a5,zero,1
   17a20:	66f51263          	bne	a0,a5,18084 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
	    _M_destroy();
   17a24:	00043783          	ld	a5,0(s0)
   17a28:	0187b783          	ld	a5,24(a5)
   17a2c:	00040513          	addi	a0,s0,0
   17a30:	000780e7          	jalr	ra,0(a5)
   17a34:	6500006f          	jal	zero,18084 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x85c>
      __atomic_add(__mem, __val);
   17a38:	00100593          	addi	a1,zero,1
   17a3c:	03040513          	addi	a0,s0,48
   17a40:	911fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17a44:	f59ff06f          	jal	zero,1799c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x174>
   17a48:	00100593          	addi	a1,zero,1
   17a4c:	03040513          	addi	a0,s0,48
   17a50:	901fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17a54:	f6dff06f          	jal	zero,179c0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x198>
      return __exchange_and_add(__mem, __val);
   17a58:	fff00593          	addi	a1,zero,-1
   17a5c:	03040513          	addi	a0,s0,48
   17a60:	921fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17a64:	f81ff06f          	jal	zero,179e4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1bc>
   17a68:	fff00593          	addi	a1,zero,-1
   17a6c:	03440513          	addi	a0,s0,52
   17a70:	911fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17a74:	fa9ff06f          	jal	zero,17a1c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1f4>
  section_offset offset();
  void string(std::string &out);
  const char *cstr(size_t *size_out = nullptr);

  void ensure(section_offset bytes) {
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17a78:	02813783          	ld	a5,40(sp)
   17a7c:	0107b703          	ld	a4,16(a5)
   17a80:	03813783          	ld	a5,56(sp)
   17a84:	40f70633          	sub	a2,a4,a5
   17a88:	00100693          	addi	a3,zero,1
   17a8c:	00c6f463          	bgeu	a3,a2,17a94 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x26c>
   17a90:	00e7e663          	bltu	a5,a4,17a9c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x274>
      underflow();
   17a94:	02810513          	addi	a0,sp,40
   17a98:	6b5040ef          	jal	ra,1c94c <dwarf::cursor::underflow()>

  template <typename T> T fixed() {
    ensure(sizeof(T));
    static_assert(sizeof(T) <= 8, "T too big");
    uint64_t val = 0;
    const unsigned char *p = (const unsigned char *)pos;
   17a9c:	03813703          	ld	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   17aa0:	02813783          	ld	a5,40(sp)
   17aa4:	01c7a783          	lw	a5,28(a5)
   17aa8:	04079263          	bne	a5,zero,17aec <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2c4>
      for (unsigned i = 0; i < sizeof(T); i++)
        val |= ((uint64_t)p[i]) << (i * 8);
   17aac:	00174783          	lbu	a5,1(a4)
   17ab0:	00879793          	slli	a5,a5,0x8
   17ab4:	00074683          	lbu	a3,0(a4)
   17ab8:	00d7e7b3          	or	a5,a5,a3
    } else {
      for (unsigned i = 0; i < sizeof(T); i++)
        val = (val << 8) | (uint64_t)p[i];
    }
    pos += sizeof(T);
   17abc:	00270713          	addi	a4,a4,2
   17ac0:	02e13c23          	sd	a4,56(sp)
    return (T)val;
   17ac4:	03079413          	slli	s0,a5,0x30
   17ac8:	03045413          	srli	s0,s0,0x30
  if (version < 2 || version > 4)
   17acc:	ffe7879b          	addiw	a5,a5,-2
   17ad0:	03079793          	slli	a5,a5,0x30
   17ad4:	0307d793          	srli	a5,a5,0x30
   17ad8:	00200713          	addi	a4,zero,2
   17adc:	02f76263          	bltu	a4,a5,17b00 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2d8>
  section_offset debug_abbrev_offset = sub.offset();
   17ae0:	02810513          	addi	a0,sp,40
   17ae4:	5f4050ef          	jal	ra,1d0d8 <dwarf::cursor::offset()>
   17ae8:	0bc0006f          	jal	zero,17ba4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x37c>
        val = (val << 8) | (uint64_t)p[i];
   17aec:	00074783          	lbu	a5,0(a4)
   17af0:	00879793          	slli	a5,a5,0x8
   17af4:	00174683          	lbu	a3,1(a4)
   17af8:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17afc:	fc1ff06f          	jal	zero,17abc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x294>
                       std::to_string(version));
   17b00:	01000513          	addi	a0,zero,16
   17b04:	91dfe0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   17b08:	00050913          	addi	s2,a0,0
   17b0c:	00040593          	addi	a1,s0,0
   17b10:	06010413          	addi	s0,sp,96
   17b14:	00040513          	addi	a0,s0,0
   17b18:	0002b317          	auipc	t1,0x2b
   17b1c:	97833303          	ld	t1,-1672(t1) # 42490 <std::__cxx11::to_string(int)@@Base+0x27884>
   17b20:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   17b24:	0001f617          	auipc	a2,0x1f
   17b28:	ccc60613          	addi	a2,a2,-820 # 367f0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x48>
   17b2c:	00000593          	addi	a1,zero,0
   17b30:	00040513          	addi	a0,s0,0
   17b34:	85dfe0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   17b38:	00050593          	addi	a1,a0,0
   17b3c:	04010413          	addi	s0,sp,64
   17b40:	00040513          	addi	a0,s0,0
   17b44:	92dfe0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   17b48:	00040593          	addi	a1,s0,0
   17b4c:	00090513          	addi	a0,s2,0
   17b50:	a51fe0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   17b54:	0002b797          	auipc	a5,0x2b
   17b58:	a047b783          	ld	a5,-1532(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   17b5c:	01078793          	addi	a5,a5,16
   17b60:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   17b64:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   17b68:	05010793          	addi	a5,sp,80
   17b6c:	00f50463          	beq	a0,a5,17b74 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x34c>
   17b70:	9a1fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17b74:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   17b78:	07010793          	addi	a5,sp,112
   17b7c:	00f50463          	beq	a0,a5,17b84 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x35c>
   17b80:	991fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
   17b84:	0002a617          	auipc	a2,0x2a
   17b88:	7fc63603          	ld	a2,2044(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   17b8c:	0002a597          	auipc	a1,0x2a
   17b90:	7245b583          	ld	a1,1828(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   17b94:	00090513          	addi	a0,s2,0
   17b98:	b29fe0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   17b9c:	00050413          	addi	s0,a0,0
   17ba0:	4480006f          	jal	zero,17fe8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7c0>
  section_offset debug_abbrev_offset = sub.offset();
   17ba4:	00050a93          	addi	s5,a0,0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17ba8:	02813783          	ld	a5,40(sp)
   17bac:	0107b703          	ld	a4,16(a5)
   17bb0:	03813783          	ld	a5,56(sp)
   17bb4:	00e7e663          	bltu	a5,a4,17bc0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x398>
      underflow();
   17bb8:	02810513          	addi	a0,sp,40
   17bbc:	591040ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   17bc0:	03813783          	ld	a5,56(sp)
      { return _M_ptr; }
   17bc4:	02813703          	ld	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   17bc8:	01c72683          	lw	a3,28(a4)
   17bcc:	48068063          	beq	a3,zero,1804c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x824>
        val = (val << 8) | (uint64_t)p[i];
   17bd0:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   17bd4:	47c0006f          	jal	zero,18050 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x828>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17bd8:	00050413          	addi	s0,a0,0
   17bdc:	00052423          	sw	zero,8(a0)
   17be0:	00052623          	sw	zero,12(a0)
   17be4:	00052823          	sw	zero,16(a0)
   17be8:	00052a23          	sw	zero,20(a0)
   17bec:	00052c23          	sw	zero,24(a0)
   17bf0:	00052e23          	sw	zero,28(a0)
   17bf4:	02053023          	sd	zero,32(a0)
   17bf8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17bfc:	00100793          	addi	a5,zero,1
   17c00:	02f52823          	sw	a5,48(a0)
   17c04:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   17c08:	0002b797          	auipc	a5,0x2b
   17c0c:	8307b783          	ld	a5,-2000(a5) # 42438 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   17c10:	01078793          	addi	a5,a5,16
   17c14:	00f53023          	sd	a5,0(a0)
   17c18:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17c1c:	00093783          	ld	a5,0(s2)
   17c20:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   17c24:	00893503          	ld	a0,8(s2)
   17c28:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   17c2c:	02050063          	beq	a0,zero,17c4c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x424>
    if (__is_single_threaded())
   17c30:	0002b797          	auipc	a5,0x2b
   17c34:	8507b783          	ld	a5,-1968(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17c38:	0007c783          	lbu	a5,0(a5)
   17c3c:	1a078863          	beq	a5,zero,17dec <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
  { *__mem += __val; }
   17c40:	03052783          	lw	a5,48(a0)
   17c44:	0017879b          	addiw	a5,a5,1
   17c48:	02f52823          	sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   17c4c:	05343423          	sd	s3,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17c50:	00013783          	ld	a5,0(sp)
   17c54:	04f43823          	sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   17c58:	00813503          	ld	a0,8(sp)
   17c5c:	04a43c23          	sd	a0,88(s0)
	if (_M_pi != nullptr)
   17c60:	02050063          	beq	a0,zero,17c80 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x458>
    if (__is_single_threaded())
   17c64:	0002b797          	auipc	a5,0x2b
   17c68:	81c7b783          	ld	a5,-2020(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17c6c:	0007c783          	lbu	a5,0(a5)
   17c70:	18078663          	beq	a5,zero,17dfc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5d4>
  { *__mem += __val; }
   17c74:	03052783          	lw	a5,48(a0)
   17c78:	0017879b          	addiw	a5,a5,1
   17c7c:	02f52823          	sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   17c80:	07543023          	sd	s5,96(s0)
   17c84:	07443423          	sd	s4,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   17c88:	06043823          	sd	zero,112(s0)
   17c8c:	06043c23          	sd	zero,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   17c90:	08043423          	sd	zero,136(s0)
   17c94:	08043823          	sd	zero,144(s0)
  typedef T value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;
  typedef size_t size_type;

  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   17c98:	0a040793          	addi	a5,s0,160
   17c9c:	0cf43823          	sd	a5,208(s0)
   17ca0:	0cf43c23          	sd	a5,216(s0)
   17ca4:	0d040793          	addi	a5,s0,208
   17ca8:	0ef43023          	sd	a5,224(s0)
   17cac:	0e043c23          	sd	zero,248(s0)
   17cb0:	10043023          	sd	zero,256(s0)
   17cb4:	11040793          	addi	a5,s0,272
   17cb8:	14f43023          	sd	a5,320(s0)
   17cbc:	14f43423          	sd	a5,328(s0)
   17cc0:	14040793          	addi	a5,s0,320
   17cc4:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   17cc8:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17ccc:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   17cd0:	16040823          	sb	zero,368(s0)
   17cd4:	16043c23          	sd	zero,376(s0)
   17cd8:	18043023          	sd	zero,384(s0)
   17cdc:	18043423          	sd	zero,392(s0)
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
   17ce0:	1c040793          	addi	a5,s0,448
   17ce4:	18f43823          	sd	a5,400(s0)
   17ce8:	00100793          	addi	a5,zero,1
   17cec:	18f43c23          	sd	a5,408(s0)
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
   17cf0:	1a043023          	sd	zero,416(s0)
   17cf4:	1a043423          	sd	zero,424(s0)
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   17cf8:	0001f797          	auipc	a5,0x1f
   17cfc:	de87a787          	flw	fa5,-536(a5) # 36ae0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   17d00:	1af42827          	fsw	fa5,432(s0)
   17d04:	1a043c23          	sd	zero,440(s0)
   17d08:	1c043023          	sd	zero,448(s0)
   17d0c:	0164b423          	sd	s6,8(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17d10:	0104b903          	ld	s2,16(s1)
	__r._M_pi = _M_pi;
   17d14:	0084b823          	sd	s0,16(s1)
	if (_M_pi != nullptr)
   17d18:	02090463          	beq	s2,zero,17d40 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
    if (__is_single_threaded())
   17d1c:	0002a797          	auipc	a5,0x2a
   17d20:	7647b783          	ld	a5,1892(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17d24:	0007c783          	lbu	a5,0(a5)
   17d28:	0e078263          	beq	a5,zero,17e0c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5e4>
    _Atomic_word __result = *__mem;
   17d2c:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   17d30:	fff5079b          	addiw	a5,a0,-1
   17d34:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17d38:	00100793          	addi	a5,zero,1
   17d3c:	0ef50063          	beq	a0,a5,17e1c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
	if (_M_pi != nullptr)
   17d40:	03013403          	ld	s0,48(sp)
   17d44:	02040463          	beq	s0,zero,17d6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
    if (__is_single_threaded())
   17d48:	0002a797          	auipc	a5,0x2a
   17d4c:	7387b783          	ld	a5,1848(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17d50:	0007c783          	lbu	a5,0(a5)
   17d54:	12078263          	beq	a5,zero,17e78 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x650>
    _Atomic_word __result = *__mem;
   17d58:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17d5c:	fff5079b          	addiw	a5,a0,-1
   17d60:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17d64:	00100793          	addi	a5,zero,1
   17d68:	12f50063          	beq	a0,a5,17e88 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x660>
	if (_M_pi != nullptr)
   17d6c:	00813403          	ld	s0,8(sp)
   17d70:	02040463          	beq	s0,zero,17d98 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
    if (__is_single_threaded())
   17d74:	0002a797          	auipc	a5,0x2a
   17d78:	70c7b783          	ld	a5,1804(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17d7c:	0007c783          	lbu	a5,0(a5)
   17d80:	16078263          	beq	a5,zero,17ee4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6bc>
    _Atomic_word __result = *__mem;
   17d84:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17d88:	fff5079b          	addiw	a5,a0,-1
   17d8c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17d90:	00100793          	addi	a5,zero,1
   17d94:	16f50063          	beq	a0,a5,17ef4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6cc>
	if (_M_pi != nullptr)
   17d98:	01813403          	ld	s0,24(sp)
   17d9c:	02040463          	beq	s0,zero,17dc4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
    if (__is_single_threaded())
   17da0:	0002a797          	auipc	a5,0x2a
   17da4:	6e07b783          	ld	a5,1760(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17da8:	0007c783          	lbu	a5,0(a5)
   17dac:	1a078263          	beq	a5,zero,17f50 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x728>
    _Atomic_word __result = *__mem;
   17db0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   17db4:	fff5079b          	addiw	a5,a0,-1
   17db8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17dbc:	00100793          	addi	a5,zero,1
   17dc0:	1af50063          	beq	a0,a5,17f60 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x738>
}
   17dc4:	0c813083          	ld	ra,200(sp)
   17dc8:	0c013403          	ld	s0,192(sp)
   17dcc:	0b813483          	ld	s1,184(sp)
   17dd0:	0b013903          	ld	s2,176(sp)
   17dd4:	0a813983          	ld	s3,168(sp)
   17dd8:	0a013a03          	ld	s4,160(sp)
   17ddc:	09813a83          	ld	s5,152(sp)
   17de0:	09013b03          	ld	s6,144(sp)
   17de4:	0d010113          	addi	sp,sp,208
   17de8:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   17dec:	00100593          	addi	a1,zero,1
   17df0:	03050513          	addi	a0,a0,48
   17df4:	d5cfe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17df8:	e55ff06f          	jal	zero,17c4c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x424>
   17dfc:	00100593          	addi	a1,zero,1
   17e00:	03050513          	addi	a0,a0,48
   17e04:	d4cfe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17e08:	e79ff06f          	jal	zero,17c80 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x458>
      return __exchange_and_add(__mem, __val);
   17e0c:	fff00593          	addi	a1,zero,-1
   17e10:	03090513          	addi	a0,s2,48
   17e14:	d6cfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17e18:	f21ff06f          	jal	zero,17d38 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x510>
	_M_dispose();
   17e1c:	00093783          	ld	a5,0(s2)
   17e20:	0107b783          	ld	a5,16(a5)
   17e24:	00090513          	addi	a0,s2,0
   17e28:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17e2c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17e30:	0002a797          	auipc	a5,0x2a
   17e34:	6507b783          	ld	a5,1616(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e38:	0007c783          	lbu	a5,0(a5)
   17e3c:	02078663          	beq	a5,zero,17e68 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x640>
    _Atomic_word __result = *__mem;
   17e40:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   17e44:	fff5079b          	addiw	a5,a0,-1
   17e48:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17e4c:	00100793          	addi	a5,zero,1
   17e50:	eef518e3          	bne	a0,a5,17d40 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
	    _M_destroy();
   17e54:	00093783          	ld	a5,0(s2)
   17e58:	0187b783          	ld	a5,24(a5)
   17e5c:	00090513          	addi	a0,s2,0
   17e60:	000780e7          	jalr	ra,0(a5)
   17e64:	eddff06f          	jal	zero,17d40 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x518>
      return __exchange_and_add(__mem, __val);
   17e68:	fff00593          	addi	a1,zero,-1
   17e6c:	03490513          	addi	a0,s2,52
   17e70:	d10fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17e74:	fd9ff06f          	jal	zero,17e4c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x624>
   17e78:	fff00593          	addi	a1,zero,-1
   17e7c:	03040513          	addi	a0,s0,48
   17e80:	d00fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17e84:	ee1ff06f          	jal	zero,17d64 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x53c>
	_M_dispose();
   17e88:	00043783          	ld	a5,0(s0)
   17e8c:	0107b783          	ld	a5,16(a5)
   17e90:	00040513          	addi	a0,s0,0
   17e94:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17e98:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17e9c:	0002a797          	auipc	a5,0x2a
   17ea0:	5e47b783          	ld	a5,1508(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17ea4:	0007c783          	lbu	a5,0(a5)
   17ea8:	02078663          	beq	a5,zero,17ed4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6ac>
    _Atomic_word __result = *__mem;
   17eac:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17eb0:	fff5079b          	addiw	a5,a0,-1
   17eb4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17eb8:	00100793          	addi	a5,zero,1
   17ebc:	eaf518e3          	bne	a0,a5,17d6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
	    _M_destroy();
   17ec0:	00043783          	ld	a5,0(s0)
   17ec4:	0187b783          	ld	a5,24(a5)
   17ec8:	00040513          	addi	a0,s0,0
   17ecc:	000780e7          	jalr	ra,0(a5)
   17ed0:	e9dff06f          	jal	zero,17d6c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x544>
      return __exchange_and_add(__mem, __val);
   17ed4:	fff00593          	addi	a1,zero,-1
   17ed8:	03440513          	addi	a0,s0,52
   17edc:	ca4fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17ee0:	fd9ff06f          	jal	zero,17eb8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x690>
   17ee4:	fff00593          	addi	a1,zero,-1
   17ee8:	03040513          	addi	a0,s0,48
   17eec:	c94fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17ef0:	ea1ff06f          	jal	zero,17d90 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x568>
	_M_dispose();
   17ef4:	00043783          	ld	a5,0(s0)
   17ef8:	0107b783          	ld	a5,16(a5)
   17efc:	00040513          	addi	a0,s0,0
   17f00:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17f04:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17f08:	0002a797          	auipc	a5,0x2a
   17f0c:	5787b783          	ld	a5,1400(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f10:	0007c783          	lbu	a5,0(a5)
   17f14:	02078663          	beq	a5,zero,17f40 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x718>
    _Atomic_word __result = *__mem;
   17f18:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17f1c:	fff5079b          	addiw	a5,a0,-1
   17f20:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17f24:	00100793          	addi	a5,zero,1
   17f28:	e6f518e3          	bne	a0,a5,17d98 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
	    _M_destroy();
   17f2c:	00043783          	ld	a5,0(s0)
   17f30:	0187b783          	ld	a5,24(a5)
   17f34:	00040513          	addi	a0,s0,0
   17f38:	000780e7          	jalr	ra,0(a5)
   17f3c:	e5dff06f          	jal	zero,17d98 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x570>
      return __exchange_and_add(__mem, __val);
   17f40:	fff00593          	addi	a1,zero,-1
   17f44:	03440513          	addi	a0,s0,52
   17f48:	c38fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17f4c:	fd9ff06f          	jal	zero,17f24 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x6fc>
   17f50:	fff00593          	addi	a1,zero,-1
   17f54:	03040513          	addi	a0,s0,48
   17f58:	c28fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17f5c:	e61ff06f          	jal	zero,17dbc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x594>
	_M_dispose();
   17f60:	00043783          	ld	a5,0(s0)
   17f64:	0107b783          	ld	a5,16(a5)
   17f68:	00040513          	addi	a0,s0,0
   17f6c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17f70:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17f74:	0002a797          	auipc	a5,0x2a
   17f78:	50c7b783          	ld	a5,1292(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f7c:	0007c783          	lbu	a5,0(a5)
   17f80:	02078663          	beq	a5,zero,17fac <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x784>
    _Atomic_word __result = *__mem;
   17f84:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   17f88:	fff5079b          	addiw	a5,a0,-1
   17f8c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17f90:	00100793          	addi	a5,zero,1
   17f94:	e2f518e3          	bne	a0,a5,17dc4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
	    _M_destroy();
   17f98:	00043783          	ld	a5,0(s0)
   17f9c:	0187b783          	ld	a5,24(a5)
   17fa0:	00040513          	addi	a0,s0,0
   17fa4:	000780e7          	jalr	ra,0(a5)
   17fa8:	e1dff06f          	jal	zero,17dc4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59c>
      return __exchange_and_add(__mem, __val);
   17fac:	fff00593          	addi	a1,zero,-1
   17fb0:	03440513          	addi	a0,s0,52
   17fb4:	bccfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17fb8:	fd9ff06f          	jal	zero,17f90 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x768>
      { return _M_dataplus._M_p; }
   17fbc:	00050413          	addi	s0,a0,0
   17fc0:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   17fc4:	05010793          	addi	a5,sp,80
   17fc8:	00f50463          	beq	a0,a5,17fd0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17fcc:	d44fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17fd0:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   17fd4:	07010793          	addi	a5,sp,112
   17fd8:	00f50463          	beq	a0,a5,17fe0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7b8>
   17fdc:	d34fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
                       std::to_string(version));
   17fe0:	00090513          	addi	a0,s2,0
   17fe4:	cecfe0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   17fe8:	03013503          	ld	a0,48(sp)
   17fec:	00050863          	beq	a0,zero,17ffc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7d4>
	  _M_pi->_M_release();
   17ff0:	0002a317          	auipc	t1,0x2a
   17ff4:	3d833303          	ld	t1,984(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   17ff8:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   17ffc:	00813503          	ld	a0,8(sp)
   18000:	00050863          	beq	a0,zero,18010 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7e8>
	  _M_pi->_M_release();
   18004:	0002a317          	auipc	t1,0x2a
   18008:	3c433303          	ld	t1,964(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1800c:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   18010:	01813503          	ld	a0,24(sp)
   18014:	00050863          	beq	a0,zero,18024 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7fc>
	  _M_pi->_M_release();
   18018:	0002a317          	auipc	t1,0x2a
   1801c:	3b033303          	ld	t1,944(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   18020:	000300e7          	jalr	ra,0(t1)
}
   18024:	00048513          	addi	a0,s1,0
   18028:	a18ff0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   1802c:	00040513          	addi	a0,s0,0
   18030:	ec0fe0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   18034:	00050413          	addi	s0,a0,0
   18038:	f99ff06f          	jal	zero,17fd0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a8>
	if (_M_pi != nullptr)
   1803c:	00050413          	addi	s0,a0,0
   18040:	fd1ff06f          	jal	zero,18010 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7e8>
   18044:	00050413          	addi	s0,a0,0
   18048:	fddff06f          	jal	zero,18024 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7fc>
        val |= ((uint64_t)p[i]) << (i * 8);
   1804c:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   18050:	00178793          	addi	a5,a5,1
   18054:	02f13c23          	sd	a5,56(sp)
  subsec->addr_size = address_size;
   18058:	00013683          	ld	a3,0(sp)
   1805c:	02c6a023          	sw	a2,32(a3)

  bool end() const { return pos >= sec->end; }

  bool valid() const { return !!pos; }

  section_offset get_section_offset() const { return pos - sec->begin; }
   18060:	00873703          	ld	a4,8(a4)
   18064:	40e78a33          	sub	s4,a5,a4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   18068:	1c800513          	addi	a0,zero,456
   1806c:	cb4fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   18070:	b69ff06f          	jal	zero,17bd8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3b0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18074:	03413423          	sd	s4,40(sp)
      : _M_pi(__r._M_pi)
   18078:	02013823          	sd	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1807c:	008a3783          	ld	a5,8(s4)
   18080:	02f13c23          	sd	a5,56(sp)
  sub.skip_initial_length();
   18084:	02810513          	addi	a0,sp,40
   18088:	72c040ef          	jal	ra,1c7b4 <dwarf::cursor::skip_initial_length()>
   1808c:	9edff06f          	jal	zero,17a78 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x250>

0000000000018090 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>:
dwarf::dwarf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   18090:	f6010113          	addi	sp,sp,-160
   18094:	08113c23          	sd	ra,152(sp)
   18098:	08813823          	sd	s0,144(sp)
   1809c:	08913423          	sd	s1,136(sp)
   180a0:	09213023          	sd	s2,128(sp)
   180a4:	07313c23          	sd	s3,120(sp)
   180a8:	07413823          	sd	s4,112(sp)
   180ac:	07513423          	sd	s5,104(sp)
   180b0:	07613023          	sd	s6,96(sp)
   180b4:	05713c23          	sd	s7,88(sp)
   180b8:	00050493          	addi	s1,a0,0
   180bc:	00058913          	addi	s2,a1,0

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   180c0:	00053023          	sd	zero,0(a0)
   180c4:	0f000513          	addi	a0,zero,240
   180c8:	c58fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   180cc:	00050413          	addi	s0,a0,0
   180d0:	00052423          	sw	zero,8(a0)
   180d4:	00052623          	sw	zero,12(a0)
   180d8:	00052823          	sw	zero,16(a0)
   180dc:	00052a23          	sw	zero,20(a0)
   180e0:	00052c23          	sw	zero,24(a0)
   180e4:	00052e23          	sw	zero,28(a0)
   180e8:	02053023          	sd	zero,32(a0)
   180ec:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   180f0:	00100793          	addi	a5,zero,1
   180f4:	02f52823          	sw	a5,48(a0)
   180f8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   180fc:	0002a797          	auipc	a5,0x2a
   18100:	4347b783          	ld	a5,1076(a5) # 42530 <vtable for std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xb80>
   18104:	01078793          	addi	a5,a5,16
   18108:	00f53023          	sd	a5,0(a0)
   1810c:	03850993          	addi	s3,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18110:	00093783          	ld	a5,0(s2)
   18114:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   18118:	00893503          	ld	a0,8(s2)
   1811c:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   18120:	02050063          	beq	a0,zero,18140 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb0>
    if (__is_single_threaded())
   18124:	0002a797          	auipc	a5,0x2a
   18128:	35c7b783          	ld	a5,860(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1812c:	0007c783          	lbu	a5,0(a5)
   18130:	08078c63          	beq	a5,zero,181c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x138>
  { *__mem += __val; }
   18134:	03052783          	lw	a5,48(a0)
   18138:	0017879b          	addiw	a5,a5,1
   1813c:	02f52823          	sw	a5,48(a0)
      : _M_ptr(0), _M_refcount()
   18140:	04043423          	sd	zero,72(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18144:	04043823          	sd	zero,80(s0)
      : _M_ptr(0), _M_refcount()
   18148:	04043c23          	sd	zero,88(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1814c:	06043023          	sd	zero,96(s0)
   18150:	06043423          	sd	zero,104(s0)
   18154:	06043823          	sd	zero,112(s0)
   18158:	06043c23          	sd	zero,120(s0)
   1815c:	0b040793          	addi	a5,s0,176
   18160:	08f43023          	sd	a5,128(s0)
   18164:	00100793          	addi	a5,zero,1
   18168:	08f43423          	sd	a5,136(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   1816c:	08043823          	sd	zero,144(s0)
   18170:	08043c23          	sd	zero,152(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   18174:	0001f797          	auipc	a5,0x1f
   18178:	96c7a787          	flw	fa5,-1684(a5) # 36ae0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   1817c:	0af42027          	fsw	fa5,160(s0)
   18180:	0a043423          	sd	zero,168(s0)
   18184:	0a043823          	sd	zero,176(s0)
  impl(const std::shared_ptr<loader> &l) : l(l), have_type_units(false) {}
   18188:	0a040c23          	sb	zero,184(s0)
      _M_header._M_color = _S_red;
   1818c:	0c042423          	sw	zero,200(s0)
      _M_header._M_parent = 0;
   18190:	0c043823          	sd	zero,208(s0)
      _M_header._M_left = &_M_header;
   18194:	0c840793          	addi	a5,s0,200
   18198:	0cf43c23          	sd	a5,216(s0)
      _M_header._M_right = &_M_header;
   1819c:	0ef43023          	sd	a5,224(s0)
      _M_node_count = 0;
   181a0:	0e043423          	sd	zero,232(s0)
	  _M_pi = __pi;
   181a4:	0084b423          	sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   181a8:	0134b023          	sd	s3,0(s1)
      { return _M_ptr; }
   181ac:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::info, &size);
   181b0:	00053783          	ld	a5,0(a0)
   181b4:	0107b783          	ld	a5,16(a5)
   181b8:	00010613          	addi	a2,sp,0
   181bc:	00300593          	addi	a1,zero,3
   181c0:	000780e7          	jalr	ra,0(a5)
   181c4:	0140006f          	jal	zero,181d8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x148>
      __atomic_add(__mem, __val);
   181c8:	00100593          	addi	a1,zero,1
   181cc:	03050513          	addi	a0,a0,48
   181d0:	980fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   181d4:	f6dff06f          	jal	zero,18140 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb0>
   181d8:	00050413          	addi	s0,a0,0
  if (!data)
   181dc:	00050a63          	beq	a0,zero,181f0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x160>
   181e0:	0004ba03          	ld	s4,0(s1)
   181e4:	06000513          	addi	a0,zero,96
   181e8:	b38fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   181ec:	04c0006f          	jal	zero,18238 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1a8>
    throw format_error("required .debug_info section missing");
   181f0:	01000513          	addi	a0,zero,16
   181f4:	a2cfe0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   181f8:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   181fc:	0001e597          	auipc	a1,0x1e
   18200:	61c58593          	addi	a1,a1,1564 # 36818 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x70>
   18204:	d6cfe0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   18208:	0002a797          	auipc	a5,0x2a
   1820c:	3507b783          	ld	a5,848(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   18210:	01078793          	addi	a5,a5,16
   18214:	00f93023          	sd	a5,0(s2)
   18218:	0002a617          	auipc	a2,0x2a
   1821c:	16863603          	ld	a2,360(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   18220:	0002a597          	auipc	a1,0x2a
   18224:	0905b583          	ld	a1,144(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   18228:	00090513          	addi	a0,s2,0
   1822c:	c94fe0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   18230:	00050413          	addi	s0,a0,0
   18234:	1610006f          	jal	zero,18b94 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
   18238:	00052423          	sw	zero,8(a0)
   1823c:	00052623          	sw	zero,12(a0)
   18240:	00052823          	sw	zero,16(a0)
   18244:	00052a23          	sw	zero,20(a0)
   18248:	00052c23          	sw	zero,24(a0)
   1824c:	00052e23          	sw	zero,28(a0)
   18250:	02053023          	sd	zero,32(a0)
   18254:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   18258:	00100793          	addi	a5,zero,1
   1825c:	02f52823          	sw	a5,48(a0)
   18260:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   18264:	0002a797          	auipc	a5,0x2a
   18268:	35c7b783          	ld	a5,860(a5) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   1826c:	01078793          	addi	a5,a5,16
   18270:	00f53023          	sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   18274:	00300793          	addi	a5,zero,3
   18278:	02f52c23          	sw	a5,56(a0)
   1827c:	04853023          	sd	s0,64(a0)
   18280:	00013783          	ld	a5,0(sp)
   18284:	00f407b3          	add	a5,s0,a5
   18288:	04f53423          	sd	a5,72(a0)
   1828c:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   18290:	04052a23          	sw	zero,84(a0)
   18294:	04052c23          	sw	zero,88(a0)
   18298:	03850793          	addi	a5,a0,56
   1829c:	00fa3823          	sd	a5,16(s4)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   182a0:	018a3983          	ld	s3,24(s4)
	__r._M_pi = _M_pi;
   182a4:	00aa3c23          	sd	a0,24(s4)
	if (_M_pi != nullptr)
   182a8:	02098463          	beq	s3,zero,182d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
    if (__is_single_threaded())
   182ac:	0002a797          	auipc	a5,0x2a
   182b0:	1d47b783          	ld	a5,468(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   182b4:	0007c783          	lbu	a5,0(a5)
   182b8:	0e078063          	beq	a5,zero,18398 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x308>
    _Atomic_word __result = *__mem;
   182bc:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   182c0:	fff5079b          	addiw	a5,a0,-1
   182c4:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   182c8:	00100793          	addi	a5,zero,1
   182cc:	0cf50e63          	beq	a0,a5,183a8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x318>
      { return _M_ptr; }
   182d0:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   182d4:	0107ba03          	ld	s4,16(a5)
      : _M_pi(__r._M_pi)
   182d8:	0187b983          	ld	s3,24(a5)
	if (_M_pi != nullptr)
   182dc:	12098ae3          	beq	s3,zero,18c10 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb80>
    if (__is_single_threaded())
   182e0:	0002a797          	auipc	a5,0x2a
   182e4:	1a07b783          	ld	a5,416(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   182e8:	0007c783          	lbu	a5,0(a5)
   182ec:	10078c63          	beq	a5,zero,18404 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x374>
  { *__mem += __val; }
   182f0:	0309a783          	lw	a5,48(s3)
   182f4:	0017879b          	addiw	a5,a5,1
   182f8:	02f9a823          	sw	a5,48(s3)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   182fc:	01413423          	sd	s4,8(sp)
      : _M_pi(__r._M_pi)
   18300:	01313823          	sd	s3,16(sp)
    if (__is_single_threaded())
   18304:	0002a797          	auipc	a5,0x2a
   18308:	17c7b783          	ld	a5,380(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1830c:	0007c783          	lbu	a5,0(a5)
   18310:	10078263          	beq	a5,zero,18414 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x384>
  { *__mem += __val; }
   18314:	0309a783          	lw	a5,48(s3)
   18318:	0017879b          	addiw	a5,a5,1
   1831c:	02f9a823          	sw	a5,48(s3)
      : sec(sec), pos(sec->begin + offset) {}
   18320:	008a3783          	ld	a5,8(s4)
   18324:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   18328:	0002a797          	auipc	a5,0x2a
   1832c:	1587b783          	ld	a5,344(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18330:	0007c783          	lbu	a5,0(a5)
   18334:	0e078863          	beq	a5,zero,18424 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x394>
    _Atomic_word __result = *__mem;
   18338:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   1833c:	fff5079b          	addiw	a5,a0,-1
   18340:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18344:	00100793          	addi	a5,zero,1
   18348:	0cf51ce3          	bne	a0,a5,18c20 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
	_M_dispose();
   1834c:	0009b783          	ld	a5,0(s3)
   18350:	0107b783          	ld	a5,16(a5)
   18354:	00098513          	addi	a0,s3,0
   18358:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1835c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18360:	0002a797          	auipc	a5,0x2a
   18364:	1207b783          	ld	a5,288(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18368:	0007c783          	lbu	a5,0(a5)
   1836c:	0c078463          	beq	a5,zero,18434 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3a4>
    _Atomic_word __result = *__mem;
   18370:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   18374:	fff5079b          	addiw	a5,a0,-1
   18378:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1837c:	00100793          	addi	a5,zero,1
   18380:	0af510e3          	bne	a0,a5,18c20 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
	    _M_destroy();
   18384:	0009b783          	ld	a5,0(s3)
   18388:	0187b783          	ld	a5,24(a5)
   1838c:	00098513          	addi	a0,s3,0
   18390:	000780e7          	jalr	ra,0(a5)
   18394:	08d0006f          	jal	zero,18c20 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb90>
      return __exchange_and_add(__mem, __val);
   18398:	fff00593          	addi	a1,zero,-1
   1839c:	03098513          	addi	a0,s3,48
   183a0:	fe1fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   183a4:	f25ff06f          	jal	zero,182c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x238>
	_M_dispose();
   183a8:	0009b783          	ld	a5,0(s3)
   183ac:	0107b783          	ld	a5,16(a5)
   183b0:	00098513          	addi	a0,s3,0
   183b4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   183b8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   183bc:	0002a797          	auipc	a5,0x2a
   183c0:	0c47b783          	ld	a5,196(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   183c4:	0007c783          	lbu	a5,0(a5)
   183c8:	02078663          	beq	a5,zero,183f4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x364>
    _Atomic_word __result = *__mem;
   183cc:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   183d0:	fff5079b          	addiw	a5,a0,-1
   183d4:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   183d8:	00100793          	addi	a5,zero,1
   183dc:	eef51ae3          	bne	a0,a5,182d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
	    _M_destroy();
   183e0:	0009b783          	ld	a5,0(s3)
   183e4:	0187b783          	ld	a5,24(a5)
   183e8:	00098513          	addi	a0,s3,0
   183ec:	000780e7          	jalr	ra,0(a5)
   183f0:	ee1ff06f          	jal	zero,182d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x240>
      return __exchange_and_add(__mem, __val);
   183f4:	fff00593          	addi	a1,zero,-1
   183f8:	03498513          	addi	a0,s3,52
   183fc:	f85fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18400:	fd9ff06f          	jal	zero,183d8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x348>
      __atomic_add(__mem, __val);
   18404:	00100593          	addi	a1,zero,1
   18408:	03098513          	addi	a0,s3,48
   1840c:	f45fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18410:	eedff06f          	jal	zero,182fc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x26c>
   18414:	00100593          	addi	a1,zero,1
   18418:	03098513          	addi	a0,s3,48
   1841c:	f35fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18420:	f01ff06f          	jal	zero,18320 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x290>
      return __exchange_and_add(__mem, __val);
   18424:	fff00593          	addi	a1,zero,-1
   18428:	03098513          	addi	a0,s3,48
   1842c:	f55fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18430:	f15ff06f          	jal	zero,18344 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2b4>
   18434:	fff00593          	addi	a1,zero,-1
   18438:	03498513          	addi	a0,s3,52
   1843c:	f45fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18440:	f3dff06f          	jal	zero,1837c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ec>
    const unsigned char *p = (const unsigned char *)pos;
   18444:	01813583          	ld	a1,24(sp)
      { return _M_ptr; }
   18448:	00813803          	ld	a6,8(sp)
    if (sec->ord == byte_order::lsb) {
   1844c:	01c82783          	lw	a5,28(a6)
   18450:	06079263          	bne	a5,zero,184b4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x424>
   18454:	00058613          	addi	a2,a1,0
   18458:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1845c:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   18460:	00064683          	lbu	a3,0(a2)
   18464:	00e696b3          	sll	a3,a3,a4
   18468:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1846c:	00160613          	addi	a2,a2,1
   18470:	0087071b          	addiw	a4,a4,8
   18474:	fea716e3          	bne	a4,a0,18460 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3d0>
    pos += sizeof(T);
   18478:	00458593          	addi	a1,a1,4
   1847c:	00b13c23          	sd	a1,24(sp)
  if (length == 0xffffffff)
   18480:	0007879b          	addiw	a5,a5,0
   18484:	fff00713          	addi	a4,zero,-1
   18488:	04e78863          	beq	a5,a4,184d8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x448>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1848c:	00813783          	ld	a5,8(sp)
   18490:	0107b703          	ld	a4,16(a5)
   18494:	01813783          	ld	a5,24(sp)
   18498:	40f70633          	sub	a2,a4,a5
   1849c:	00100693          	addi	a3,zero,1
   184a0:	00c6f463          	bgeu	a3,a2,184a8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x418>
   184a4:	06e7e063          	bltu	a5,a4,18504 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x474>
      underflow();
   184a8:	00810513          	addi	a0,sp,8
   184ac:	4a0040ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   184b0:	0540006f          	jal	zero,18504 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x474>
   184b4:	00058713          	addi	a4,a1,0
   184b8:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   184bc:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   184c0:	00879793          	slli	a5,a5,0x8
   184c4:	00074683          	lbu	a3,0(a4)
   184c8:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   184cc:	00170713          	addi	a4,a4,1
   184d0:	fec718e3          	bne	a4,a2,184c0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x430>
   184d4:	fa5ff06f          	jal	zero,18478 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3e8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   184d8:	01083783          	ld	a5,16(a6)
   184dc:	40b786b3          	sub	a3,a5,a1
   184e0:	00700713          	addi	a4,zero,7
   184e4:	00d77463          	bgeu	a4,a3,184ec <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x45c>
   184e8:	00f5e663          	bltu	a1,a5,184f4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x464>
      underflow();
   184ec:	00810513          	addi	a0,sp,8
   184f0:	45c040ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    pos += sizeof(T);
   184f4:	01813783          	ld	a5,24(sp)
   184f8:	00878793          	addi	a5,a5,8
   184fc:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   18500:	f8dff06f          	jal	zero,1848c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3fc>
    const unsigned char *p = (const unsigned char *)pos;
   18504:	01813703          	ld	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   18508:	00813783          	ld	a5,8(sp)
   1850c:	01c7a783          	lw	a5,28(a5)
   18510:	04079c63          	bne	a5,zero,18568 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4d8>
        val |= ((uint64_t)p[i]) << (i * 8);
   18514:	00174783          	lbu	a5,1(a4)
   18518:	00879793          	slli	a5,a5,0x8
   1851c:	00074683          	lbu	a3,0(a4)
   18520:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   18524:	00270713          	addi	a4,a4,2
   18528:	00e13c23          	sd	a4,24(sp)
    return (T)val;
   1852c:	03079793          	slli	a5,a5,0x30
   18530:	0307d793          	srli	a5,a5,0x30
  uhalf versionbe = (version >> 8) | ((version & 0xFF) << 8);
   18534:	0087d71b          	srliw	a4,a5,0x8
   18538:	0087969b          	slliw	a3,a5,0x8
   1853c:	00d76733          	or	a4,a4,a3
  if (versionbe < version) {
   18540:	03071713          	slli	a4,a4,0x30
   18544:	03075713          	srli	a4,a4,0x30
   18548:	02f76a63          	bltu	a4,a5,1857c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4ec>
   1854c:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::abbrev, &size);
   18550:	00053783          	ld	a5,0(a0)
   18554:	0107b783          	ld	a5,16(a5)
   18558:	00010613          	addi	a2,sp,0
   1855c:	00000593          	addi	a1,zero,0
   18560:	000780e7          	jalr	ra,0(a5)
   18564:	12c0006f          	jal	zero,18690 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x600>
        val = (val << 8) | (uint64_t)p[i];
   18568:	00074783          	lbu	a5,0(a4)
   1856c:	00879793          	slli	a5,a5,0x8
   18570:	00174683          	lbu	a3,1(a4)
   18574:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   18578:	fadff06f          	jal	zero,18524 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x494>
   1857c:	0004b983          	ld	s3,0(s1)
   18580:	06000513          	addi	a0,zero,96
   18584:	f9dfd0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   18588:	00052423          	sw	zero,8(a0)
   1858c:	00052623          	sw	zero,12(a0)
   18590:	00052823          	sw	zero,16(a0)
   18594:	00052a23          	sw	zero,20(a0)
   18598:	00052c23          	sw	zero,24(a0)
   1859c:	00052e23          	sw	zero,28(a0)
   185a0:	02053023          	sd	zero,32(a0)
   185a4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   185a8:	00100793          	addi	a5,zero,1
   185ac:	02f52823          	sw	a5,48(a0)
   185b0:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   185b4:	0002a717          	auipc	a4,0x2a
   185b8:	00c73703          	ld	a4,12(a4) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   185bc:	01070713          	addi	a4,a4,16
   185c0:	00e53023          	sd	a4,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   185c4:	00300713          	addi	a4,zero,3
   185c8:	02e52c23          	sw	a4,56(a0)
   185cc:	04853023          	sd	s0,64(a0)
   185d0:	00013703          	ld	a4,0(sp)
   185d4:	00e40733          	add	a4,s0,a4
   185d8:	04e53423          	sd	a4,72(a0)
   185dc:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   185e0:	04f52a23          	sw	a5,84(a0)
   185e4:	04052c23          	sw	zero,88(a0)
   185e8:	03850793          	addi	a5,a0,56
   185ec:	00f9b823          	sd	a5,16(s3)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   185f0:	0189b403          	ld	s0,24(s3)
	__r._M_pi = _M_pi;
   185f4:	00a9bc23          	sd	a0,24(s3)
	if (_M_pi != nullptr)
   185f8:	f4040ae3          	beq	s0,zero,1854c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
    if (__is_single_threaded())
   185fc:	0002a797          	auipc	a5,0x2a
   18600:	e847b783          	ld	a5,-380(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18604:	0007c783          	lbu	a5,0(a5)
   18608:	06078263          	beq	a5,zero,1866c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5dc>
    _Atomic_word __result = *__mem;
   1860c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18610:	fff5079b          	addiw	a5,a0,-1
   18614:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18618:	00100793          	addi	a5,zero,1
   1861c:	f2f518e3          	bne	a0,a5,1854c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
	_M_dispose();
   18620:	00043783          	ld	a5,0(s0)
   18624:	0107b783          	ld	a5,16(a5)
   18628:	00040513          	addi	a0,s0,0
   1862c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18630:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18634:	0002a797          	auipc	a5,0x2a
   18638:	e4c7b783          	ld	a5,-436(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1863c:	0007c783          	lbu	a5,0(a5)
   18640:	02078e63          	beq	a5,zero,1867c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ec>
    _Atomic_word __result = *__mem;
   18644:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   18648:	fff7871b          	addiw	a4,a5,-1
   1864c:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18650:	00100713          	addi	a4,zero,1
   18654:	eee79ce3          	bne	a5,a4,1854c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
	    _M_destroy();
   18658:	00043783          	ld	a5,0(s0)
   1865c:	0187b783          	ld	a5,24(a5)
   18660:	00040513          	addi	a0,s0,0
   18664:	000780e7          	jalr	ra,0(a5)
   18668:	ee5ff06f          	jal	zero,1854c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4bc>
      return __exchange_and_add(__mem, __val);
   1866c:	fff00593          	addi	a1,zero,-1
   18670:	03040513          	addi	a0,s0,48
   18674:	d0dfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18678:	fa1ff06f          	jal	zero,18618 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x588>
   1867c:	fff00593          	addi	a1,zero,-1
   18680:	03440513          	addi	a0,s0,52
   18684:	cfdfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18688:	00050793          	addi	a5,a0,0
   1868c:	fc5ff06f          	jal	zero,18650 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5c0>
   18690:	00050413          	addi	s0,a0,0
  if (!data)
   18694:	00050c63          	beq	a0,zero,186ac <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x61c>
      { return _M_ptr; }
   18698:	0004b903          	ld	s2,0(s1)
   1869c:	01093983          	ld	s3,16(s2)
   186a0:	06000513          	addi	a0,zero,96
   186a4:	e7dfd0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   186a8:	04c0006f          	jal	zero,186f4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x664>
    throw format_error("required .debug_abbrev section missing");
   186ac:	01000513          	addi	a0,zero,16
   186b0:	d71fd0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   186b4:	00050913          	addi	s2,a0,0
   186b8:	0001e597          	auipc	a1,0x1e
   186bc:	18858593          	addi	a1,a1,392 # 36840 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x98>
   186c0:	8b0fe0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   186c4:	0002a797          	auipc	a5,0x2a
   186c8:	e947b783          	ld	a5,-364(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   186cc:	01078793          	addi	a5,a5,16
   186d0:	00f93023          	sd	a5,0(s2)
   186d4:	0002a617          	auipc	a2,0x2a
   186d8:	cac63603          	ld	a2,-852(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   186dc:	0002a597          	auipc	a1,0x2a
   186e0:	bd45b583          	ld	a1,-1068(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   186e4:	00090513          	addi	a0,s2,0
   186e8:	fd9fd0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   186ec:	00050413          	addi	s0,a0,0
   186f0:	4cc0006f          	jal	zero,18bbc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
   186f4:	00052423          	sw	zero,8(a0)
   186f8:	00052623          	sw	zero,12(a0)
   186fc:	00052823          	sw	zero,16(a0)
   18700:	00052a23          	sw	zero,20(a0)
   18704:	00052c23          	sw	zero,24(a0)
   18708:	00052e23          	sw	zero,28(a0)
   1870c:	02053023          	sd	zero,32(a0)
   18710:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   18714:	00100793          	addi	a5,zero,1
   18718:	02f52823          	sw	a5,48(a0)
   1871c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   18720:	0002a797          	auipc	a5,0x2a
   18724:	ea07b783          	ld	a5,-352(a5) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   18728:	01078793          	addi	a5,a5,16
   1872c:	00f53023          	sd	a5,0(a0)
   18730:	01c9a783          	lw	a5,28(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   18734:	02052c23          	sw	zero,56(a0)
   18738:	04853023          	sd	s0,64(a0)
   1873c:	00013703          	ld	a4,0(sp)
   18740:	00e40433          	add	s0,s0,a4
   18744:	04853423          	sd	s0,72(a0)
   18748:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   1874c:	04f52a23          	sw	a5,84(a0)
   18750:	04052c23          	sw	zero,88(a0)
   18754:	03850793          	addi	a5,a0,56
   18758:	02f93023          	sd	a5,32(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1875c:	02893403          	ld	s0,40(s2)
	__r._M_pi = _M_pi;
   18760:	02a93423          	sd	a0,40(s2)
	if (_M_pi != nullptr)
   18764:	02040463          	beq	s0,zero,1878c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
    if (__is_single_threaded())
   18768:	0002a797          	auipc	a5,0x2a
   1876c:	d187b783          	ld	a5,-744(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18770:	0007c783          	lbu	a5,0(a5)
   18774:	0c078463          	beq	a5,zero,1883c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7ac>
    _Atomic_word __result = *__mem;
   18778:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1877c:	fff5079b          	addiw	a5,a0,-1
   18780:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18784:	00100793          	addi	a5,zero,1
   18788:	0cf50263          	beq	a0,a5,1884c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7bc>
      { return _M_ptr; }
   1878c:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18790:	0107b903          	ld	s2,16(a5)
      : _M_pi(__r._M_pi)
   18794:	0187b403          	ld	s0,24(a5)
	if (_M_pi != nullptr)
   18798:	44040c63          	beq	s0,zero,18bf0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb60>
    if (__is_single_threaded())
   1879c:	0002a797          	auipc	a5,0x2a
   187a0:	ce47b783          	ld	a5,-796(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   187a4:	0007c783          	lbu	a5,0(a5)
   187a8:	10078063          	beq	a5,zero,188a8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x818>
  { *__mem += __val; }
   187ac:	03042783          	lw	a5,48(s0)
   187b0:	0017879b          	addiw	a5,a5,1
   187b4:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   187b8:	03213023          	sd	s2,32(sp)
      : _M_pi(__r._M_pi)
   187bc:	02813423          	sd	s0,40(sp)
    if (__is_single_threaded())
   187c0:	0002a797          	auipc	a5,0x2a
   187c4:	cc07b783          	ld	a5,-832(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   187c8:	0007c783          	lbu	a5,0(a5)
   187cc:	0e078663          	beq	a5,zero,188b8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x828>
  { *__mem += __val; }
   187d0:	03042783          	lw	a5,48(s0)
   187d4:	0017879b          	addiw	a5,a5,1
   187d8:	02f42823          	sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   187dc:	00893783          	ld	a5,8(s2)
   187e0:	02f13823          	sd	a5,48(sp)
    if (__is_single_threaded())
   187e4:	0002a797          	auipc	a5,0x2a
   187e8:	c9c7b783          	ld	a5,-868(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   187ec:	0007c783          	lbu	a5,0(a5)
   187f0:	0c078c63          	beq	a5,zero,188c8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x838>
    _Atomic_word __result = *__mem;
   187f4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   187f8:	fff5079b          	addiw	a5,a0,-1
   187fc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18800:	00100793          	addi	a5,zero,1
   18804:	0cf50a63          	beq	a0,a5,188d8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x848>
  bool end() const { return pos >= sec->end; }
   18808:	03013603          	ld	a2,48(sp)
      { return _M_ptr; }
   1880c:	02013783          	ld	a5,32(sp)
  while (!infocur.end()) {
   18810:	0107b703          	ld	a4,16(a5)
   18814:	20e67c63          	bgeu	a2,a4,18a2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x99c>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   18818:	03810b13          	addi	s6,sp,56
   1881c:	0002ab97          	auipc	s7,0x2a
   18820:	accbbb83          	ld	s7,-1332(s7) # 422e8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)@@Base+0x26594>
    infocur.subsection();
   18824:	04010913          	addi	s2,sp,64
   18828:	02010993          	addi	s3,sp,32
    return ::__libc_single_threaded;
   1882c:	0002aa17          	auipc	s4,0x2a
   18830:	c54a3a03          	ld	s4,-940(s4) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18834:	00100a93          	addi	s5,zero,1
   18838:	1600006f          	jal	zero,18998 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x908>
      return __exchange_and_add(__mem, __val);
   1883c:	fff00593          	addi	a1,zero,-1
   18840:	03040513          	addi	a0,s0,48
   18844:	b3dfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18848:	f3dff06f          	jal	zero,18784 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6f4>
	_M_dispose();
   1884c:	00043783          	ld	a5,0(s0)
   18850:	0107b783          	ld	a5,16(a5)
   18854:	00040513          	addi	a0,s0,0
   18858:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1885c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18860:	0002a797          	auipc	a5,0x2a
   18864:	c207b783          	ld	a5,-992(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18868:	0007c783          	lbu	a5,0(a5)
   1886c:	02078663          	beq	a5,zero,18898 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x808>
    _Atomic_word __result = *__mem;
   18870:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18874:	fff5079b          	addiw	a5,a0,-1
   18878:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1887c:	00100793          	addi	a5,zero,1
   18880:	f0f516e3          	bne	a0,a5,1878c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
	    _M_destroy();
   18884:	00043783          	ld	a5,0(s0)
   18888:	0187b783          	ld	a5,24(a5)
   1888c:	00040513          	addi	a0,s0,0
   18890:	000780e7          	jalr	ra,0(a5)
   18894:	ef9ff06f          	jal	zero,1878c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6fc>
      return __exchange_and_add(__mem, __val);
   18898:	fff00593          	addi	a1,zero,-1
   1889c:	03440513          	addi	a0,s0,52
   188a0:	ae1fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   188a4:	fd9ff06f          	jal	zero,1887c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7ec>
      __atomic_add(__mem, __val);
   188a8:	00100593          	addi	a1,zero,1
   188ac:	03040513          	addi	a0,s0,48
   188b0:	aa1fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   188b4:	f05ff06f          	jal	zero,187b8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x728>
   188b8:	00100593          	addi	a1,zero,1
   188bc:	03040513          	addi	a0,s0,48
   188c0:	a91fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   188c4:	f19ff06f          	jal	zero,187dc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x74c>
      return __exchange_and_add(__mem, __val);
   188c8:	fff00593          	addi	a1,zero,-1
   188cc:	03040513          	addi	a0,s0,48
   188d0:	ab1fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   188d4:	f2dff06f          	jal	zero,18800 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x770>
	_M_dispose();
   188d8:	00043783          	ld	a5,0(s0)
   188dc:	0107b783          	ld	a5,16(a5)
   188e0:	00040513          	addi	a0,s0,0
   188e4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   188e8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   188ec:	0002a797          	auipc	a5,0x2a
   188f0:	b947b783          	ld	a5,-1132(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   188f4:	0007c783          	lbu	a5,0(a5)
   188f8:	02078663          	beq	a5,zero,18924 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x894>
    _Atomic_word __result = *__mem;
   188fc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18900:	fff5079b          	addiw	a5,a0,-1
   18904:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18908:	00100793          	addi	a5,zero,1
   1890c:	eef51ee3          	bne	a0,a5,18808 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x778>
	    _M_destroy();
   18910:	00043783          	ld	a5,0(s0)
   18914:	0187b783          	ld	a5,24(a5)
   18918:	00040513          	addi	a0,s0,0
   1891c:	000780e7          	jalr	ra,0(a5)
   18920:	ee9ff06f          	jal	zero,18808 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x778>
      return __exchange_and_add(__mem, __val);
   18924:	fff00593          	addi	a1,zero,-1
   18928:	03440513          	addi	a0,s0,52
   1892c:	a55fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18930:	fd9ff06f          	jal	zero,18908 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x878>
	    ++this->_M_impl._M_finish;
   18934:	03843783          	ld	a5,56(s0)
   18938:	01878793          	addi	a5,a5,24
   1893c:	02f43c23          	sd	a5,56(s0)
   18940:	00098593          	addi	a1,s3,0
   18944:	00090513          	addi	a0,s2,0
   18948:	548040ef          	jal	ra,1ce90 <dwarf::cursor::subsection()>
   1894c:	01c0006f          	jal	zero,18968 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8d8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   18950:	000b0693          	addi	a3,s6,0
   18954:	00048613          	addi	a2,s1,0
   18958:	00050593          	addi	a1,a0,0
   1895c:	03040513          	addi	a0,s0,48
   18960:	000b80e7          	jalr	ra,0(s7)
   18964:	fddff06f          	jal	zero,18940 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8b0>
	if (_M_pi != nullptr)
   18968:	04813403          	ld	s0,72(sp)
   1896c:	00040e63          	beq	s0,zero,18988 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
    if (__is_single_threaded())
   18970:	000a4783          	lbu	a5,0(s4)
   18974:	04078663          	beq	a5,zero,189c0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x930>
    _Atomic_word __result = *__mem;
   18978:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1897c:	fff5079b          	addiw	a5,a0,-1
   18980:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18984:	05550663          	beq	a0,s5,189d0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x940>
   18988:	03013603          	ld	a2,48(sp)
      { return _M_ptr; }
   1898c:	02013783          	ld	a5,32(sp)
  while (!infocur.end()) {
   18990:	0107b703          	ld	a4,16(a5)
   18994:	08e67c63          	bgeu	a2,a4,18a2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x99c>
   18998:	0004b403          	ld	s0,0(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1899c:	0087b783          	ld	a5,8(a5)
   189a0:	40f60633          	sub	a2,a2,a5
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
   189a4:	02c13c23          	sd	a2,56(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   189a8:	03843503          	ld	a0,56(s0)
   189ac:	04043783          	ld	a5,64(s0)
   189b0:	faf500e3          	beq	a0,a5,18950 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8c0>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   189b4:	00048593          	addi	a1,s1,0
   189b8:	e71fe0ef          	jal	ra,17828 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
   189bc:	f79ff06f          	jal	zero,18934 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8a4>
      return __exchange_and_add(__mem, __val);
   189c0:	fff00593          	addi	a1,zero,-1
   189c4:	03040513          	addi	a0,s0,48
   189c8:	9b9fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   189cc:	fb9ff06f          	jal	zero,18984 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f4>
	_M_dispose();
   189d0:	00043783          	ld	a5,0(s0)
   189d4:	0107b783          	ld	a5,16(a5)
   189d8:	00040513          	addi	a0,s0,0
   189dc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   189e0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   189e4:	0002a797          	auipc	a5,0x2a
   189e8:	a9c7b783          	ld	a5,-1380(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   189ec:	0007c783          	lbu	a5,0(a5)
   189f0:	02078663          	beq	a5,zero,18a1c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x98c>
    _Atomic_word __result = *__mem;
   189f4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   189f8:	fff5079b          	addiw	a5,a0,-1
   189fc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18a00:	00100793          	addi	a5,zero,1
   18a04:	f8f512e3          	bne	a0,a5,18988 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
	    _M_destroy();
   18a08:	00043783          	ld	a5,0(s0)
   18a0c:	0187b783          	ld	a5,24(a5)
   18a10:	00040513          	addi	a0,s0,0
   18a14:	000780e7          	jalr	ra,0(a5)
   18a18:	f71ff06f          	jal	zero,18988 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x8f8>
      return __exchange_and_add(__mem, __val);
   18a1c:	fff00593          	addi	a1,zero,-1
   18a20:	03440513          	addi	a0,s0,52
   18a24:	95dfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a28:	fd9ff06f          	jal	zero,18a00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x970>
	if (_M_pi != nullptr)
   18a2c:	02813403          	ld	s0,40(sp)
   18a30:	02040463          	beq	s0,zero,18a58 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
    if (__is_single_threaded())
   18a34:	0002a797          	auipc	a5,0x2a
   18a38:	a4c7b783          	ld	a5,-1460(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18a3c:	0007c783          	lbu	a5,0(a5)
   18a40:	06078863          	beq	a5,zero,18ab0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa20>
    _Atomic_word __result = *__mem;
   18a44:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18a48:	fff5079b          	addiw	a5,a0,-1
   18a4c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18a50:	00100793          	addi	a5,zero,1
   18a54:	06f50663          	beq	a0,a5,18ac0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa30>
	if (_M_pi != nullptr)
   18a58:	01013403          	ld	s0,16(sp)
   18a5c:	02040463          	beq	s0,zero,18a84 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
    if (__is_single_threaded())
   18a60:	0002a797          	auipc	a5,0x2a
   18a64:	a207b783          	ld	a5,-1504(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18a68:	0007c783          	lbu	a5,0(a5)
   18a6c:	0a078863          	beq	a5,zero,18b1c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa8c>
    _Atomic_word __result = *__mem;
   18a70:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18a74:	fff5079b          	addiw	a5,a0,-1
   18a78:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18a7c:	00100793          	addi	a5,zero,1
   18a80:	0af50663          	beq	a0,a5,18b2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa9c>
}
   18a84:	09813083          	ld	ra,152(sp)
   18a88:	09013403          	ld	s0,144(sp)
   18a8c:	08813483          	ld	s1,136(sp)
   18a90:	08013903          	ld	s2,128(sp)
   18a94:	07813983          	ld	s3,120(sp)
   18a98:	07013a03          	ld	s4,112(sp)
   18a9c:	06813a83          	ld	s5,104(sp)
   18aa0:	06013b03          	ld	s6,96(sp)
   18aa4:	05813b83          	ld	s7,88(sp)
   18aa8:	0a010113          	addi	sp,sp,160
   18aac:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   18ab0:	fff00593          	addi	a1,zero,-1
   18ab4:	03040513          	addi	a0,s0,48
   18ab8:	8c9fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18abc:	f95ff06f          	jal	zero,18a50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c0>
	_M_dispose();
   18ac0:	00043783          	ld	a5,0(s0)
   18ac4:	0107b783          	ld	a5,16(a5)
   18ac8:	00040513          	addi	a0,s0,0
   18acc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18ad0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18ad4:	0002a797          	auipc	a5,0x2a
   18ad8:	9ac7b783          	ld	a5,-1620(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18adc:	0007c783          	lbu	a5,0(a5)
   18ae0:	02078663          	beq	a5,zero,18b0c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa7c>
    _Atomic_word __result = *__mem;
   18ae4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18ae8:	fff5079b          	addiw	a5,a0,-1
   18aec:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18af0:	00100793          	addi	a5,zero,1
   18af4:	f6f512e3          	bne	a0,a5,18a58 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
	    _M_destroy();
   18af8:	00043783          	ld	a5,0(s0)
   18afc:	0187b783          	ld	a5,24(a5)
   18b00:	00040513          	addi	a0,s0,0
   18b04:	000780e7          	jalr	ra,0(a5)
   18b08:	f51ff06f          	jal	zero,18a58 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
      return __exchange_and_add(__mem, __val);
   18b0c:	fff00593          	addi	a1,zero,-1
   18b10:	03440513          	addi	a0,s0,52
   18b14:	86dfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b18:	fd9ff06f          	jal	zero,18af0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xa60>
   18b1c:	fff00593          	addi	a1,zero,-1
   18b20:	03040513          	addi	a0,s0,48
   18b24:	85dfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b28:	f55ff06f          	jal	zero,18a7c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9ec>
	_M_dispose();
   18b2c:	00043783          	ld	a5,0(s0)
   18b30:	0107b783          	ld	a5,16(a5)
   18b34:	00040513          	addi	a0,s0,0
   18b38:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18b3c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18b40:	0002a797          	auipc	a5,0x2a
   18b44:	9407b783          	ld	a5,-1728(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18b48:	0007c783          	lbu	a5,0(a5)
   18b4c:	02078663          	beq	a5,zero,18b78 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xae8>
    _Atomic_word __result = *__mem;
   18b50:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18b54:	fff5079b          	addiw	a5,a0,-1
   18b58:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18b5c:	00100793          	addi	a5,zero,1
   18b60:	f2f512e3          	bne	a0,a5,18a84 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
	    _M_destroy();
   18b64:	00043783          	ld	a5,0(s0)
   18b68:	0187b783          	ld	a5,24(a5)
   18b6c:	00040513          	addi	a0,s0,0
   18b70:	000780e7          	jalr	ra,0(a5)
   18b74:	f11ff06f          	jal	zero,18a84 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9f4>
      return __exchange_and_add(__mem, __val);
   18b78:	fff00593          	addi	a1,zero,-1
   18b7c:	03440513          	addi	a0,s0,52
   18b80:	801fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18b84:	fd9ff06f          	jal	zero,18b5c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xacc>
    throw format_error("required .debug_info section missing");
   18b88:	00050413          	addi	s0,a0,0
   18b8c:	00090513          	addi	a0,s2,0
   18b90:	941fd0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18b94:	0084b503          	ld	a0,8(s1)
   18b98:	00050863          	beq	a0,zero,18ba8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb18>
	  _M_pi->_M_release();
   18b9c:	0002a317          	auipc	t1,0x2a
   18ba0:	82c33303          	ld	t1,-2004(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   18ba4:	000300e7          	jalr	ra,0(t1)
   18ba8:	00040513          	addi	a0,s0,0
   18bac:	b45fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    throw format_error("required .debug_abbrev section missing");
   18bb0:	00050413          	addi	s0,a0,0
   18bb4:	00090513          	addi	a0,s2,0
   18bb8:	919fd0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18bbc:	01013503          	ld	a0,16(sp)
   18bc0:	fc050ae3          	beq	a0,zero,18b94 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
	  _M_pi->_M_release();
   18bc4:	0002a317          	auipc	t1,0x2a
   18bc8:	80433303          	ld	t1,-2044(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   18bcc:	000300e7          	jalr	ra,0(t1)
   18bd0:	fc5ff06f          	jal	zero,18b94 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb04>
	if (_M_pi != nullptr)
   18bd4:	00050413          	addi	s0,a0,0
   18bd8:	02813503          	ld	a0,40(sp)
   18bdc:	fe0500e3          	beq	a0,zero,18bbc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
	  _M_pi->_M_release();
   18be0:	00029317          	auipc	t1,0x29
   18be4:	7e833303          	ld	t1,2024(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   18be8:	000300e7          	jalr	ra,0(t1)
   18bec:	fd1ff06f          	jal	zero,18bbc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xb2c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18bf0:	03213023          	sd	s2,32(sp)
      : _M_pi(__r._M_pi)
   18bf4:	02013423          	sd	zero,40(sp)
      : sec(sec), pos(sec->begin + offset) {}
   18bf8:	00893603          	ld	a2,8(s2)
   18bfc:	02c13823          	sd	a2,48(sp)
      { return _M_ptr; }
   18c00:	00090793          	addi	a5,s2,0
  while (!infocur.end()) {
   18c04:	01093703          	ld	a4,16(s2)
   18c08:	c0e668e3          	bltu	a2,a4,18818 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x788>
   18c0c:	e4dff06f          	jal	zero,18a58 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x9c8>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18c10:	01413423          	sd	s4,8(sp)
      : _M_pi(__r._M_pi)
   18c14:	00013823          	sd	zero,16(sp)
   18c18:	008a3783          	ld	a5,8(s4)
   18c1c:	00f13c23          	sd	a5,24(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18c20:	00813783          	ld	a5,8(sp)
   18c24:	0107b703          	ld	a4,16(a5)
   18c28:	01813783          	ld	a5,24(sp)
   18c2c:	40f70633          	sub	a2,a4,a5
   18c30:	00300693          	addi	a3,zero,3
   18c34:	00c6f463          	bgeu	a3,a2,18c3c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xbac>
   18c38:	80e7e6e3          	bltu	a5,a4,18444 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3b4>
      underflow();
   18c3c:	00810513          	addi	a0,sp,8
   18c40:	50d030ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   18c44:	801ff06f          	jal	zero,18444 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3b4>

0000000000018c48 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>:
type_unit::type_unit(const dwarf &file, section_offset offset) {
   18c48:	f2010113          	addi	sp,sp,-224
   18c4c:	0c113c23          	sd	ra,216(sp)
   18c50:	0c813823          	sd	s0,208(sp)
   18c54:	0c913423          	sd	s1,200(sp)
   18c58:	0d213023          	sd	s2,192(sp)
   18c5c:	0b313c23          	sd	s3,184(sp)
   18c60:	0b413823          	sd	s4,176(sp)
   18c64:	0b513423          	sd	s5,168(sp)
   18c68:	0b613023          	sd	s6,160(sp)
   18c6c:	09713c23          	sd	s7,152(sp)
   18c70:	09813823          	sd	s8,144(sp)
   18c74:	00050913          	addi	s2,a0,0
   18c78:	00058993          	addi	s3,a1,0
   18c7c:	00060a13          	addi	s4,a2,0
      : _M_ptr(0), _M_refcount()
   18c80:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18c84:	00053823          	sd	zero,16(a0)
   18c88:	00029797          	auipc	a5,0x29
   18c8c:	6d07b783          	ld	a5,1744(a5) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   18c90:	01078793          	addi	a5,a5,16
   18c94:	00f53023          	sd	a5,0(a0)
  cursor cur(file.get_section(section_type::types), offset);
   18c98:	00b00613          	addi	a2,zero,11
   18c9c:	08010513          	addi	a0,sp,128
   18ca0:	ebcfe0ef          	jal	ra,1735c <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18ca4:	08013783          	ld	a5,128(sp)
   18ca8:	00f13823          	sd	a5,16(sp)
      : _M_pi(__r._M_pi)
   18cac:	08813503          	ld	a0,136(sp)
   18cb0:	00a13c23          	sd	a0,24(sp)
	if (_M_pi != nullptr)
   18cb4:	02050063          	beq	a0,zero,18cd4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8c>
    if (__is_single_threaded())
   18cb8:	00029797          	auipc	a5,0x29
   18cbc:	7c87b783          	ld	a5,1992(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18cc0:	0007c783          	lbu	a5,0(a5)
   18cc4:	04078e63          	beq	a5,zero,18d20 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xd8>
  { *__mem += __val; }
   18cc8:	03052783          	lw	a5,48(a0)
   18ccc:	0017879b          	addiw	a5,a5,1
   18cd0:	02f52823          	sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   18cd4:	08013783          	ld	a5,128(sp)
   18cd8:	0087b783          	ld	a5,8(a5)
   18cdc:	014787b3          	add	a5,a5,s4
   18ce0:	02f13023          	sd	a5,32(sp)
	if (_M_pi != nullptr)
   18ce4:	08813403          	ld	s0,136(sp)
   18ce8:	02040463          	beq	s0,zero,18d10 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
    if (__is_single_threaded())
   18cec:	00029797          	auipc	a5,0x29
   18cf0:	7947b783          	ld	a5,1940(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18cf4:	0007c783          	lbu	a5,0(a5)
   18cf8:	02078c63          	beq	a5,zero,18d30 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xe8>
    _Atomic_word __result = *__mem;
   18cfc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18d00:	fff5079b          	addiw	a5,a0,-1
   18d04:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18d08:	00100793          	addi	a5,zero,1
   18d0c:	02f50a63          	beq	a0,a5,18d40 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xf8>
  std::shared_ptr<section> subsec = cur.subsection();
   18d10:	01010593          	addi	a1,sp,16
   18d14:	00010513          	addi	a0,sp,0
   18d18:	178040ef          	jal	ra,1ce90 <dwarf::cursor::subsection()>
   18d1c:	0800006f          	jal	zero,18d9c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x154>
      __atomic_add(__mem, __val);
   18d20:	00100593          	addi	a1,zero,1
   18d24:	03050513          	addi	a0,a0,48
   18d28:	e28fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18d2c:	fa9ff06f          	jal	zero,18cd4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8c>
      return __exchange_and_add(__mem, __val);
   18d30:	fff00593          	addi	a1,zero,-1
   18d34:	03040513          	addi	a0,s0,48
   18d38:	e48fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18d3c:	fcdff06f          	jal	zero,18d08 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc0>
	_M_dispose();
   18d40:	00043783          	ld	a5,0(s0)
   18d44:	0107b783          	ld	a5,16(a5)
   18d48:	00040513          	addi	a0,s0,0
   18d4c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18d50:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18d54:	00029797          	auipc	a5,0x29
   18d58:	72c7b783          	ld	a5,1836(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18d5c:	0007c783          	lbu	a5,0(a5)
   18d60:	02078663          	beq	a5,zero,18d8c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x144>
    _Atomic_word __result = *__mem;
   18d64:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18d68:	fff5079b          	addiw	a5,a0,-1
   18d6c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18d70:	00100793          	addi	a5,zero,1
   18d74:	f8f51ee3          	bne	a0,a5,18d10 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
	    _M_destroy();
   18d78:	00043783          	ld	a5,0(s0)
   18d7c:	0187b783          	ld	a5,24(a5)
   18d80:	00040513          	addi	a0,s0,0
   18d84:	000780e7          	jalr	ra,0(a5)
   18d88:	f89ff06f          	jal	zero,18d10 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc8>
      return __exchange_and_add(__mem, __val);
   18d8c:	fff00593          	addi	a1,zero,-1
   18d90:	03440513          	addi	a0,s0,52
   18d94:	decfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18d98:	fd9ff06f          	jal	zero,18d70 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x128>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18d9c:	00013483          	ld	s1,0(sp)
      : _M_pi(__r._M_pi)
   18da0:	00813403          	ld	s0,8(sp)
	if (_M_pi != nullptr)
   18da4:	78040463          	beq	s0,zero,1952c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8e4>
    if (__is_single_threaded())
   18da8:	00029797          	auipc	a5,0x29
   18dac:	6d87b783          	ld	a5,1752(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18db0:	0007c783          	lbu	a5,0(a5)
   18db4:	0a078663          	beq	a5,zero,18e60 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x218>
  { *__mem += __val; }
   18db8:	03042783          	lw	a5,48(s0)
   18dbc:	0017879b          	addiw	a5,a5,1
   18dc0:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18dc4:	02913423          	sd	s1,40(sp)
      : _M_pi(__r._M_pi)
   18dc8:	02813823          	sd	s0,48(sp)
    if (__is_single_threaded())
   18dcc:	00029797          	auipc	a5,0x29
   18dd0:	6b47b783          	ld	a5,1716(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18dd4:	0007c783          	lbu	a5,0(a5)
   18dd8:	08078c63          	beq	a5,zero,18e70 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x228>
  { *__mem += __val; }
   18ddc:	03042783          	lw	a5,48(s0)
   18de0:	0017879b          	addiw	a5,a5,1
   18de4:	02f42823          	sw	a5,48(s0)
   18de8:	0084b783          	ld	a5,8(s1)
   18dec:	02f13c23          	sd	a5,56(sp)
    if (__is_single_threaded())
   18df0:	00029797          	auipc	a5,0x29
   18df4:	6907b783          	ld	a5,1680(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18df8:	0007c783          	lbu	a5,0(a5)
   18dfc:	08078263          	beq	a5,zero,18e80 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x238>
    _Atomic_word __result = *__mem;
   18e00:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   18e04:	fff5079b          	addiw	a5,a0,-1
   18e08:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18e0c:	00100793          	addi	a5,zero,1
   18e10:	72f51663          	bne	a0,a5,1953c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
	_M_dispose();
   18e14:	00043783          	ld	a5,0(s0)
   18e18:	0107b783          	ld	a5,16(a5)
   18e1c:	00040513          	addi	a0,s0,0
   18e20:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18e24:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18e28:	00029797          	auipc	a5,0x29
   18e2c:	6587b783          	ld	a5,1624(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18e30:	0007c783          	lbu	a5,0(a5)
   18e34:	04078e63          	beq	a5,zero,18e90 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x248>
    _Atomic_word __result = *__mem;
   18e38:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   18e3c:	fff5079b          	addiw	a5,a0,-1
   18e40:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18e44:	00100793          	addi	a5,zero,1
   18e48:	6ef51a63          	bne	a0,a5,1953c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
	    _M_destroy();
   18e4c:	00043783          	ld	a5,0(s0)
   18e50:	0187b783          	ld	a5,24(a5)
   18e54:	00040513          	addi	a0,s0,0
   18e58:	000780e7          	jalr	ra,0(a5)
   18e5c:	6e00006f          	jal	zero,1953c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8f4>
      __atomic_add(__mem, __val);
   18e60:	00100593          	addi	a1,zero,1
   18e64:	03040513          	addi	a0,s0,48
   18e68:	ce8fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18e6c:	f59ff06f          	jal	zero,18dc4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x17c>
   18e70:	00100593          	addi	a1,zero,1
   18e74:	03040513          	addi	a0,s0,48
   18e78:	cd8fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18e7c:	f6dff06f          	jal	zero,18de8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1a0>
      return __exchange_and_add(__mem, __val);
   18e80:	fff00593          	addi	a1,zero,-1
   18e84:	03040513          	addi	a0,s0,48
   18e88:	cf8fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18e8c:	f81ff06f          	jal	zero,18e0c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1c4>
   18e90:	fff00593          	addi	a1,zero,-1
   18e94:	03440513          	addi	a0,s0,52
   18e98:	ce8fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18e9c:	fa9ff06f          	jal	zero,18e44 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1fc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18ea0:	02813783          	ld	a5,40(sp)
   18ea4:	0107b703          	ld	a4,16(a5)
   18ea8:	03813783          	ld	a5,56(sp)
   18eac:	40f70633          	sub	a2,a4,a5
   18eb0:	00100693          	addi	a3,zero,1
   18eb4:	00c6f463          	bgeu	a3,a2,18ebc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x274>
   18eb8:	00e7e663          	bltu	a5,a4,18ec4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x27c>
      underflow();
   18ebc:	02810513          	addi	a0,sp,40
   18ec0:	28d030ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18ec4:	03813703          	ld	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   18ec8:	02813783          	ld	a5,40(sp)
   18ecc:	01c7a783          	lw	a5,28(a5)
   18ed0:	02079c63          	bne	a5,zero,18f08 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2c0>
        val |= ((uint64_t)p[i]) << (i * 8);
   18ed4:	00174783          	lbu	a5,1(a4)
   18ed8:	00879793          	slli	a5,a5,0x8
   18edc:	00074683          	lbu	a3,0(a4)
   18ee0:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   18ee4:	00270713          	addi	a4,a4,2
   18ee8:	02e13c23          	sd	a4,56(sp)
    return (T)val;
   18eec:	03079413          	slli	s0,a5,0x30
   18ef0:	03045413          	srli	s0,s0,0x30
  if (version != 4)
   18ef4:	00400713          	addi	a4,zero,4
   18ef8:	02e79263          	bne	a5,a4,18f1c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2d4>
  section_offset debug_abbrev_offset = sub.offset();
   18efc:	02810513          	addi	a0,sp,40
   18f00:	1d8040ef          	jal	ra,1d0d8 <dwarf::cursor::offset()>
   18f04:	0bc0006f          	jal	zero,18fc0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x378>
        val = (val << 8) | (uint64_t)p[i];
   18f08:	00074783          	lbu	a5,0(a4)
   18f0c:	00879793          	slli	a5,a5,0x8
   18f10:	00174683          	lbu	a3,1(a4)
   18f14:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   18f18:	fcdff06f          	jal	zero,18ee4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x29c>
    throw format_error("unknown type unit version " + std::to_string(version));
   18f1c:	01000513          	addi	a0,zero,16
   18f20:	d00fd0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   18f24:	00050493          	addi	s1,a0,0
   18f28:	00040593          	addi	a1,s0,0
   18f2c:	06010413          	addi	s0,sp,96
   18f30:	00040513          	addi	a0,s0,0
   18f34:	00029317          	auipc	t1,0x29
   18f38:	55c33303          	ld	t1,1372(t1) # 42490 <std::__cxx11::to_string(int)@@Base+0x27884>
   18f3c:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   18f40:	0001e617          	auipc	a2,0x1e
   18f44:	92860613          	addi	a2,a2,-1752 # 36868 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xc0>
   18f48:	00000593          	addi	a1,zero,0
   18f4c:	00040513          	addi	a0,s0,0
   18f50:	c40fd0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   18f54:	00050593          	addi	a1,a0,0
   18f58:	04010413          	addi	s0,sp,64
   18f5c:	00040513          	addi	a0,s0,0
   18f60:	d10fd0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   18f64:	00040593          	addi	a1,s0,0
   18f68:	00048513          	addi	a0,s1,0
   18f6c:	e34fd0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   18f70:	00029797          	auipc	a5,0x29
   18f74:	5e87b783          	ld	a5,1512(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   18f78:	01078793          	addi	a5,a5,16
   18f7c:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   18f80:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   18f84:	05010793          	addi	a5,sp,80
   18f88:	00f50463          	beq	a0,a5,18f90 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x348>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18f8c:	d84fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18f90:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   18f94:	07010793          	addi	a5,sp,112
   18f98:	00f50463          	beq	a0,a5,18fa0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x358>
   18f9c:	d74fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
   18fa0:	00029617          	auipc	a2,0x29
   18fa4:	3e063603          	ld	a2,992(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   18fa8:	00029597          	auipc	a1,0x29
   18fac:	3085b583          	ld	a1,776(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   18fb0:	00048513          	addi	a0,s1,0
   18fb4:	f0cfd0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   18fb8:	00050413          	addi	s0,a0,0
   18fbc:	4d80006f          	jal	zero,19494 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x84c>
  section_offset debug_abbrev_offset = sub.offset();
   18fc0:	00050a93          	addi	s5,a0,0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18fc4:	02813783          	ld	a5,40(sp)
   18fc8:	0107b703          	ld	a4,16(a5)
   18fcc:	03813783          	ld	a5,56(sp)
   18fd0:	00e7e663          	bltu	a5,a4,18fdc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x394>
      underflow();
   18fd4:	02810513          	addi	a0,sp,40
   18fd8:	175030ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18fdc:	03813783          	ld	a5,56(sp)
      { return _M_ptr; }
   18fe0:	02813703          	ld	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   18fe4:	01c72683          	lw	a3,28(a4)
   18fe8:	50068863          	beq	a3,zero,194f8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8b0>
        val = (val << 8) | (uint64_t)p[i];
   18fec:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   18ff0:	50c0006f          	jal	zero,194fc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8b4>
    const unsigned char *p = (const unsigned char *)pos;
   18ff4:	03813603          	ld	a2,56(sp)
    if (sec->ord == byte_order::lsb) {
   18ff8:	02813783          	ld	a5,40(sp)
   18ffc:	01c7a783          	lw	a5,28(a5)
   19000:	02079e63          	bne	a5,zero,1903c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3f4>
   19004:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   19008:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1900c:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   19010:	0006c703          	lbu	a4,0(a3)
   19014:	00f71733          	sll	a4,a4,a5
   19018:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1901c:	00168693          	addi	a3,a3,1
   19020:	0087879b          	addiw	a5,a5,8
   19024:	feb796e3          	bne	a5,a1,19010 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3c8>
    pos += sizeof(T);
   19028:	00860613          	addi	a2,a2,8
   1902c:	02c13c23          	sd	a2,56(sp)
  section_offset type_offset = sub.offset();
   19030:	02810513          	addi	a0,sp,40
   19034:	0a4040ef          	jal	ra,1d0d8 <dwarf::cursor::offset()>
   19038:	0280006f          	jal	zero,19060 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x418>
   1903c:	00060793          	addi	a5,a2,0
   19040:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   19044:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   19048:	00849493          	slli	s1,s1,0x8
   1904c:	0007c703          	lbu	a4,0(a5)
   19050:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   19054:	00178793          	addi	a5,a5,1
   19058:	fef698e3          	bne	a3,a5,19048 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x400>
   1905c:	fcdff06f          	jal	zero,19028 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3e0>
   19060:	00050b13          	addi	s6,a0,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   19064:	02813783          	ld	a5,40(sp)
   19068:	0087b783          	ld	a5,8(a5)
   1906c:	03813b83          	ld	s7,56(sp)
   19070:	40fb8bb3          	sub	s7,s7,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   19074:	1c800513          	addi	a0,zero,456
   19078:	ca8fd0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1907c:	00050413          	addi	s0,a0,0
   19080:	00052423          	sw	zero,8(a0)
   19084:	00052623          	sw	zero,12(a0)
   19088:	00052823          	sw	zero,16(a0)
   1908c:	00052a23          	sw	zero,20(a0)
   19090:	00052c23          	sw	zero,24(a0)
   19094:	00052e23          	sw	zero,28(a0)
   19098:	02053023          	sd	zero,32(a0)
   1909c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   190a0:	00100793          	addi	a5,zero,1
   190a4:	02f52823          	sw	a5,48(a0)
   190a8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   190ac:	00029797          	auipc	a5,0x29
   190b0:	38c7b783          	ld	a5,908(a5) # 42438 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   190b4:	01078793          	addi	a5,a5,16
   190b8:	00f53023          	sd	a5,0(a0)
   190bc:	03850c13          	addi	s8,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   190c0:	0009b783          	ld	a5,0(s3)
   190c4:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   190c8:	0089b503          	ld	a0,8(s3)
   190cc:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   190d0:	02050063          	beq	a0,zero,190f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
    if (__is_single_threaded())
   190d4:	00029797          	auipc	a5,0x29
   190d8:	3ac7b783          	ld	a5,940(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   190dc:	0007c783          	lbu	a5,0(a5)
   190e0:	1a078c63          	beq	a5,zero,19298 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x650>
  { *__mem += __val; }
   190e4:	03052783          	lw	a5,48(a0)
   190e8:	0017879b          	addiw	a5,a5,1
   190ec:	02f52823          	sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   190f0:	05443423          	sd	s4,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   190f4:	00013783          	ld	a5,0(sp)
   190f8:	04f43823          	sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   190fc:	00813503          	ld	a0,8(sp)
   19100:	04a43c23          	sd	a0,88(s0)
	if (_M_pi != nullptr)
   19104:	02050063          	beq	a0,zero,19124 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4dc>
    if (__is_single_threaded())
   19108:	00029797          	auipc	a5,0x29
   1910c:	3787b783          	ld	a5,888(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19110:	0007c783          	lbu	a5,0(a5)
   19114:	18078a63          	beq	a5,zero,192a8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x660>
  { *__mem += __val; }
   19118:	03052783          	lw	a5,48(a0)
   1911c:	0017879b          	addiw	a5,a5,1
   19120:	02f52823          	sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   19124:	07543023          	sd	s5,96(s0)
   19128:	07743423          	sd	s7,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   1912c:	06943823          	sd	s1,112(s0)
   19130:	07643c23          	sd	s6,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   19134:	08043423          	sd	zero,136(s0)
   19138:	08043823          	sd	zero,144(s0)
   1913c:	0a040793          	addi	a5,s0,160
   19140:	0cf43823          	sd	a5,208(s0)
   19144:	0cf43c23          	sd	a5,216(s0)
   19148:	0d040793          	addi	a5,s0,208
   1914c:	0ef43023          	sd	a5,224(s0)
   19150:	0e043c23          	sd	zero,248(s0)
   19154:	10043023          	sd	zero,256(s0)
   19158:	11040793          	addi	a5,s0,272
   1915c:	14f43023          	sd	a5,320(s0)
   19160:	14f43423          	sd	a5,328(s0)
   19164:	14040793          	addi	a5,s0,320
   19168:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   1916c:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   19170:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   19174:	16040823          	sb	zero,368(s0)
   19178:	16043c23          	sd	zero,376(s0)
   1917c:	18043023          	sd	zero,384(s0)
   19180:	18043423          	sd	zero,392(s0)
   19184:	1c040793          	addi	a5,s0,448
   19188:	18f43823          	sd	a5,400(s0)
   1918c:	00100793          	addi	a5,zero,1
   19190:	18f43c23          	sd	a5,408(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   19194:	1a043023          	sd	zero,416(s0)
   19198:	1a043423          	sd	zero,424(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   1919c:	0001e797          	auipc	a5,0x1e
   191a0:	9447a787          	flw	fa5,-1724(a5) # 36ae0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   191a4:	1af42827          	fsw	fa5,432(s0)
   191a8:	1a043c23          	sd	zero,440(s0)
   191ac:	1c043023          	sd	zero,448(s0)
   191b0:	01893423          	sd	s8,8(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   191b4:	01093483          	ld	s1,16(s2)
	__r._M_pi = _M_pi;
   191b8:	00893823          	sd	s0,16(s2)
	if (_M_pi != nullptr)
   191bc:	02048463          	beq	s1,zero,191e4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
    if (__is_single_threaded())
   191c0:	00029797          	auipc	a5,0x29
   191c4:	2c07b783          	ld	a5,704(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   191c8:	0007c783          	lbu	a5,0(a5)
   191cc:	0e078663          	beq	a5,zero,192b8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x670>
    _Atomic_word __result = *__mem;
   191d0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   191d4:	fff5079b          	addiw	a5,a0,-1
   191d8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   191dc:	00100793          	addi	a5,zero,1
   191e0:	0ef50463          	beq	a0,a5,192c8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x680>
	if (_M_pi != nullptr)
   191e4:	03013403          	ld	s0,48(sp)
   191e8:	02040463          	beq	s0,zero,19210 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
    if (__is_single_threaded())
   191ec:	00029797          	auipc	a5,0x29
   191f0:	2947b783          	ld	a5,660(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   191f4:	0007c783          	lbu	a5,0(a5)
   191f8:	12078663          	beq	a5,zero,19324 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6dc>
    _Atomic_word __result = *__mem;
   191fc:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19200:	fff5079b          	addiw	a5,a0,-1
   19204:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19208:	00100793          	addi	a5,zero,1
   1920c:	12f50463          	beq	a0,a5,19334 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6ec>
	if (_M_pi != nullptr)
   19210:	00813403          	ld	s0,8(sp)
   19214:	02040463          	beq	s0,zero,1923c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
    if (__is_single_threaded())
   19218:	00029797          	auipc	a5,0x29
   1921c:	2687b783          	ld	a5,616(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19220:	0007c783          	lbu	a5,0(a5)
   19224:	16078663          	beq	a5,zero,19390 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x748>
    _Atomic_word __result = *__mem;
   19228:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1922c:	fff5079b          	addiw	a5,a0,-1
   19230:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19234:	00100793          	addi	a5,zero,1
   19238:	16f50463          	beq	a0,a5,193a0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x758>
	if (_M_pi != nullptr)
   1923c:	01813403          	ld	s0,24(sp)
   19240:	02040463          	beq	s0,zero,19268 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
    if (__is_single_threaded())
   19244:	00029797          	auipc	a5,0x29
   19248:	23c7b783          	ld	a5,572(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1924c:	0007c783          	lbu	a5,0(a5)
   19250:	1a078663          	beq	a5,zero,193fc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7b4>
    _Atomic_word __result = *__mem;
   19254:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19258:	fff5079b          	addiw	a5,a0,-1
   1925c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19260:	00100793          	addi	a5,zero,1
   19264:	1af50463          	beq	a0,a5,1940c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7c4>
}
   19268:	0d813083          	ld	ra,216(sp)
   1926c:	0d013403          	ld	s0,208(sp)
   19270:	0c813483          	ld	s1,200(sp)
   19274:	0c013903          	ld	s2,192(sp)
   19278:	0b813983          	ld	s3,184(sp)
   1927c:	0b013a03          	ld	s4,176(sp)
   19280:	0a813a83          	ld	s5,168(sp)
   19284:	0a013b03          	ld	s6,160(sp)
   19288:	09813b83          	ld	s7,152(sp)
   1928c:	09013c03          	ld	s8,144(sp)
   19290:	0e010113          	addi	sp,sp,224
   19294:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   19298:	00100593          	addi	a1,zero,1
   1929c:	03050513          	addi	a0,a0,48
   192a0:	8b0fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   192a4:	e4dff06f          	jal	zero,190f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
   192a8:	00100593          	addi	a1,zero,1
   192ac:	03050513          	addi	a0,a0,48
   192b0:	8a0fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   192b4:	e71ff06f          	jal	zero,19124 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4dc>
      return __exchange_and_add(__mem, __val);
   192b8:	fff00593          	addi	a1,zero,-1
   192bc:	03048513          	addi	a0,s1,48
   192c0:	8c0fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   192c4:	f19ff06f          	jal	zero,191dc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x594>
	_M_dispose();
   192c8:	0004b783          	ld	a5,0(s1)
   192cc:	0107b783          	ld	a5,16(a5)
   192d0:	00048513          	addi	a0,s1,0
   192d4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   192d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   192dc:	00029797          	auipc	a5,0x29
   192e0:	1a47b783          	ld	a5,420(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   192e4:	0007c783          	lbu	a5,0(a5)
   192e8:	02078663          	beq	a5,zero,19314 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6cc>
    _Atomic_word __result = *__mem;
   192ec:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   192f0:	fff5079b          	addiw	a5,a0,-1
   192f4:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   192f8:	00100793          	addi	a5,zero,1
   192fc:	eef514e3          	bne	a0,a5,191e4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
	    _M_destroy();
   19300:	0004b783          	ld	a5,0(s1)
   19304:	0187b783          	ld	a5,24(a5)
   19308:	00048513          	addi	a0,s1,0
   1930c:	000780e7          	jalr	ra,0(a5)
   19310:	ed5ff06f          	jal	zero,191e4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x59c>
      return __exchange_and_add(__mem, __val);
   19314:	fff00593          	addi	a1,zero,-1
   19318:	03448513          	addi	a0,s1,52
   1931c:	864fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19320:	fd9ff06f          	jal	zero,192f8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x6b0>
   19324:	fff00593          	addi	a1,zero,-1
   19328:	03040513          	addi	a0,s0,48
   1932c:	854fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19330:	ed9ff06f          	jal	zero,19208 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c0>
	_M_dispose();
   19334:	00043783          	ld	a5,0(s0)
   19338:	0107b783          	ld	a5,16(a5)
   1933c:	00040513          	addi	a0,s0,0
   19340:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19344:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19348:	00029797          	auipc	a5,0x29
   1934c:	1387b783          	ld	a5,312(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19350:	0007c783          	lbu	a5,0(a5)
   19354:	02078663          	beq	a5,zero,19380 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x738>
    _Atomic_word __result = *__mem;
   19358:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1935c:	fff5079b          	addiw	a5,a0,-1
   19360:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19364:	00100793          	addi	a5,zero,1
   19368:	eaf514e3          	bne	a0,a5,19210 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
	    _M_destroy();
   1936c:	00043783          	ld	a5,0(s0)
   19370:	0187b783          	ld	a5,24(a5)
   19374:	00040513          	addi	a0,s0,0
   19378:	000780e7          	jalr	ra,0(a5)
   1937c:	e95ff06f          	jal	zero,19210 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5c8>
      return __exchange_and_add(__mem, __val);
   19380:	fff00593          	addi	a1,zero,-1
   19384:	03440513          	addi	a0,s0,52
   19388:	ff9fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1938c:	fd9ff06f          	jal	zero,19364 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x71c>
   19390:	fff00593          	addi	a1,zero,-1
   19394:	03040513          	addi	a0,s0,48
   19398:	fe9fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1939c:	e99ff06f          	jal	zero,19234 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5ec>
	_M_dispose();
   193a0:	00043783          	ld	a5,0(s0)
   193a4:	0107b783          	ld	a5,16(a5)
   193a8:	00040513          	addi	a0,s0,0
   193ac:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   193b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   193b4:	00029797          	auipc	a5,0x29
   193b8:	0cc7b783          	ld	a5,204(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   193bc:	0007c783          	lbu	a5,0(a5)
   193c0:	02078663          	beq	a5,zero,193ec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7a4>
    _Atomic_word __result = *__mem;
   193c4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   193c8:	fff5079b          	addiw	a5,a0,-1
   193cc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   193d0:	00100793          	addi	a5,zero,1
   193d4:	e6f514e3          	bne	a0,a5,1923c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
	    _M_destroy();
   193d8:	00043783          	ld	a5,0(s0)
   193dc:	0187b783          	ld	a5,24(a5)
   193e0:	00040513          	addi	a0,s0,0
   193e4:	000780e7          	jalr	ra,0(a5)
   193e8:	e55ff06f          	jal	zero,1923c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f4>
      return __exchange_and_add(__mem, __val);
   193ec:	fff00593          	addi	a1,zero,-1
   193f0:	03440513          	addi	a0,s0,52
   193f4:	f8dfc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   193f8:	fd9ff06f          	jal	zero,193d0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x788>
   193fc:	fff00593          	addi	a1,zero,-1
   19400:	03040513          	addi	a0,s0,48
   19404:	f7dfc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19408:	e59ff06f          	jal	zero,19260 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x618>
	_M_dispose();
   1940c:	00043783          	ld	a5,0(s0)
   19410:	0107b783          	ld	a5,16(a5)
   19414:	00040513          	addi	a0,s0,0
   19418:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1941c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19420:	00029797          	auipc	a5,0x29
   19424:	0607b783          	ld	a5,96(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19428:	0007c783          	lbu	a5,0(a5)
   1942c:	02078663          	beq	a5,zero,19458 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x810>
    _Atomic_word __result = *__mem;
   19430:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19434:	fff5079b          	addiw	a5,a0,-1
   19438:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1943c:	00100793          	addi	a5,zero,1
   19440:	e2f514e3          	bne	a0,a5,19268 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
	    _M_destroy();
   19444:	00043783          	ld	a5,0(s0)
   19448:	0187b783          	ld	a5,24(a5)
   1944c:	00040513          	addi	a0,s0,0
   19450:	000780e7          	jalr	ra,0(a5)
   19454:	e15ff06f          	jal	zero,19268 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x620>
      return __exchange_and_add(__mem, __val);
   19458:	fff00593          	addi	a1,zero,-1
   1945c:	03440513          	addi	a0,s0,52
   19460:	f21fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19464:	fd9ff06f          	jal	zero,1943c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7f4>
      { return _M_dataplus._M_p; }
   19468:	00050413          	addi	s0,a0,0
   1946c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   19470:	05010793          	addi	a5,sp,80
   19474:	00f50463          	beq	a0,a5,1947c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x834>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19478:	898fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1947c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   19480:	07010793          	addi	a5,sp,112
   19484:	00f50463          	beq	a0,a5,1948c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x844>
   19488:	888fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw format_error("unknown type unit version " + std::to_string(version));
   1948c:	00048513          	addi	a0,s1,0
   19490:	840fd0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   19494:	03013503          	ld	a0,48(sp)
   19498:	00050863          	beq	a0,zero,194a8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x860>
	  _M_pi->_M_release();
   1949c:	00029317          	auipc	t1,0x29
   194a0:	f2c33303          	ld	t1,-212(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   194a4:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   194a8:	00813503          	ld	a0,8(sp)
   194ac:	00050863          	beq	a0,zero,194bc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x874>
	  _M_pi->_M_release();
   194b0:	00029317          	auipc	t1,0x29
   194b4:	f1833303          	ld	t1,-232(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   194b8:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   194bc:	01813503          	ld	a0,24(sp)
   194c0:	00050863          	beq	a0,zero,194d0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x888>
	  _M_pi->_M_release();
   194c4:	00029317          	auipc	t1,0x29
   194c8:	f0433303          	ld	t1,-252(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   194cc:	000300e7          	jalr	ra,0(t1)
}
   194d0:	00090513          	addi	a0,s2,0
   194d4:	d6dfd0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   194d8:	00040513          	addi	a0,s0,0
   194dc:	a14fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   194e0:	00050413          	addi	s0,a0,0
   194e4:	f99ff06f          	jal	zero,1947c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x834>
	if (_M_pi != nullptr)
   194e8:	00050413          	addi	s0,a0,0
   194ec:	fd1ff06f          	jal	zero,194bc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x874>
   194f0:	00050413          	addi	s0,a0,0
   194f4:	fddff06f          	jal	zero,194d0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x888>
        val |= ((uint64_t)p[i]) << (i * 8);
   194f8:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   194fc:	00178793          	addi	a5,a5,1
   19500:	02f13c23          	sd	a5,56(sp)
  subsec->addr_size = address_size;
   19504:	00013683          	ld	a3,0(sp)
   19508:	02c6a023          	sw	a2,32(a3)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1950c:	01073703          	ld	a4,16(a4)
   19510:	40f70633          	sub	a2,a4,a5
   19514:	00700693          	addi	a3,zero,7
   19518:	00c6f463          	bgeu	a3,a2,19520 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x8d8>
   1951c:	ace7ece3          	bltu	a5,a4,18ff4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3ac>
      underflow();
   19520:	02810513          	addi	a0,sp,40
   19524:	428030ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   19528:	acdff06f          	jal	zero,18ff4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x3ac>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1952c:	02913423          	sd	s1,40(sp)
      : _M_pi(__r._M_pi)
   19530:	02013823          	sd	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   19534:	0084b783          	ld	a5,8(s1)
   19538:	02f13c23          	sd	a5,56(sp)
  sub.skip_initial_length();
   1953c:	02810513          	addi	a0,sp,40
   19540:	274030ef          	jal	ra,1c7b4 <dwarf::cursor::skip_initial_length()>
   19544:	95dff06f          	jal	zero,18ea0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x258>

0000000000019548 <dwarf::dwarf::get_type_unit(unsigned long) const>:
const type_unit &dwarf::get_type_unit(uint64_t type_signature) const {
   19548:	f2010113          	addi	sp,sp,-224
   1954c:	0c113c23          	sd	ra,216(sp)
   19550:	0c813823          	sd	s0,208(sp)
   19554:	0c913423          	sd	s1,200(sp)
   19558:	0d213023          	sd	s2,192(sp)
   1955c:	0b313c23          	sd	s3,184(sp)
   19560:	0b413823          	sd	s4,176(sp)
   19564:	0b513423          	sd	s5,168(sp)
   19568:	0b613023          	sd	s6,160(sp)
   1956c:	09713c23          	sd	s7,152(sp)
   19570:	09813823          	sd	s8,144(sp)
   19574:	09913423          	sd	s9,136(sp)
   19578:	09a13023          	sd	s10,128(sp)
   1957c:	00050913          	addi	s2,a0,0
   19580:	00b13423          	sd	a1,8(sp)
  if (!m->have_type_units) {
   19584:	00053783          	ld	a5,0(a0)
   19588:	0807c783          	lbu	a5,128(a5)
   1958c:	32079c63          	bne	a5,zero,198c4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
    cursor tucur(get_section(section_type::types));
   19590:	00b00613          	addi	a2,zero,11
   19594:	00050593          	addi	a1,a0,0
   19598:	05810513          	addi	a0,sp,88
   1959c:	dc1fd0ef          	jal	ra,1735c <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   195a0:	05813783          	ld	a5,88(sp)
   195a4:	00f13c23          	sd	a5,24(sp)
      : _M_pi(__r._M_pi)
   195a8:	06013503          	ld	a0,96(sp)
   195ac:	02a13023          	sd	a0,32(sp)
	if (_M_pi != nullptr)
   195b0:	02050063          	beq	a0,zero,195d0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x88>
    if (__is_single_threaded())
   195b4:	00029797          	auipc	a5,0x29
   195b8:	ecc7b783          	ld	a5,-308(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   195bc:	0007c783          	lbu	a5,0(a5)
   195c0:	08078463          	beq	a5,zero,19648 <dwarf::dwarf::get_type_unit(unsigned long) const+0x100>
  { *__mem += __val; }
   195c4:	03052783          	lw	a5,48(a0)
   195c8:	0017879b          	addiw	a5,a5,1
   195cc:	02f52823          	sw	a5,48(a0)
   195d0:	05813783          	ld	a5,88(sp)
   195d4:	0087b783          	ld	a5,8(a5)
   195d8:	02f13423          	sd	a5,40(sp)
	if (_M_pi != nullptr)
   195dc:	06013403          	ld	s0,96(sp)
   195e0:	02040463          	beq	s0,zero,19608 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
    if (__is_single_threaded())
   195e4:	00029797          	auipc	a5,0x29
   195e8:	e9c7b783          	ld	a5,-356(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   195ec:	0007c783          	lbu	a5,0(a5)
   195f0:	06078463          	beq	a5,zero,19658 <dwarf::dwarf::get_type_unit(unsigned long) const+0x110>
    _Atomic_word __result = *__mem;
   195f4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   195f8:	fff5079b          	addiw	a5,a0,-1
   195fc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19600:	00100793          	addi	a5,zero,1
   19604:	06f50263          	beq	a0,a5,19668 <dwarf::dwarf::get_type_unit(unsigned long) const+0x120>
  bool end() const { return pos >= sec->end; }
   19608:	02813783          	ld	a5,40(sp)
      { return _M_ptr; }
   1960c:	01813703          	ld	a4,24(sp)
    while (!tucur.end()) {
   19610:	01073683          	ld	a3,16(a4)
   19614:	26d7fc63          	bgeu	a5,a3,1988c <dwarf::dwarf::get_type_unit(unsigned long) const+0x344>
      type_unit tu(*this, tucur.get_section_offset());
   19618:	03810993          	addi	s3,sp,56
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
   1961c:	06810b13          	addi	s6,sp,104
   19620:	00029b97          	auipc	s7,0x29
   19624:	e68bbb83          	ld	s7,-408(s7) # 42488 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)@@Base+0x261e4>
    return ::__libc_single_threaded;
   19628:	00029a97          	auipc	s5,0x29
   1962c:	e58aba83          	ld	s5,-424(s5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      tucur.subsection();
   19630:	07010c13          	addi	s8,sp,112
   19634:	01810c93          	addi	s9,sp,24
class type_unit : public unit {
   19638:	00029a17          	auipc	s4,0x29
   1963c:	d20a3a03          	ld	s4,-736(s4) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   19640:	010a0a13          	addi	s4,s4,16
   19644:	1c40006f          	jal	zero,19808 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2c0>
      __atomic_add(__mem, __val);
   19648:	00100593          	addi	a1,zero,1
   1964c:	03050513          	addi	a0,a0,48
   19650:	d01fc0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19654:	f7dff06f          	jal	zero,195d0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x88>
      return __exchange_and_add(__mem, __val);
   19658:	fff00593          	addi	a1,zero,-1
   1965c:	03040513          	addi	a0,s0,48
   19660:	d21fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19664:	f9dff06f          	jal	zero,19600 <dwarf::dwarf::get_type_unit(unsigned long) const+0xb8>
	_M_dispose();
   19668:	00043783          	ld	a5,0(s0)
   1966c:	0107b783          	ld	a5,16(a5)
   19670:	00040513          	addi	a0,s0,0
   19674:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19678:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1967c:	00029797          	auipc	a5,0x29
   19680:	e047b783          	ld	a5,-508(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19684:	0007c783          	lbu	a5,0(a5)
   19688:	02078663          	beq	a5,zero,196b4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x16c>
    _Atomic_word __result = *__mem;
   1968c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19690:	fff5079b          	addiw	a5,a0,-1
   19694:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19698:	00100793          	addi	a5,zero,1
   1969c:	f6f516e3          	bne	a0,a5,19608 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
	    _M_destroy();
   196a0:	00043783          	ld	a5,0(s0)
   196a4:	0187b783          	ld	a5,24(a5)
   196a8:	00040513          	addi	a0,s0,0
   196ac:	000780e7          	jalr	ra,0(a5)
   196b0:	f59ff06f          	jal	zero,19608 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc0>
      return __exchange_and_add(__mem, __val);
   196b4:	fff00593          	addi	a1,zero,-1
   196b8:	03440513          	addi	a0,s0,52
   196bc:	cc5fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   196c0:	fd9ff06f          	jal	zero,19698 <dwarf::dwarf::get_type_unit(unsigned long) const+0x150>
      { return _M_ptr; }
   196c4:	00093403          	ld	s0,0(s2)
      m->type_units[tu.get_type_signature()] = tu;
   196c8:	00098513          	addi	a0,s3,0
   196cc:	c85fd0ef          	jal	ra,17350 <dwarf::type_unit::get_type_signature() const>
   196d0:	06a13423          	sd	a0,104(sp)
   196d4:	000b0593          	addi	a1,s6,0
   196d8:	04840513          	addi	a0,s0,72
   196dc:	000b80e7          	jalr	ra,0(s7)
   196e0:	00050413          	addi	s0,a0,0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   196e4:	04013783          	ld	a5,64(sp)
   196e8:	00f53423          	sd	a5,8(a0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   196ec:	04813483          	ld	s1,72(sp)
	if (__tmp != _M_pi)
   196f0:	01053783          	ld	a5,16(a0)
   196f4:	02f48e63          	beq	s1,a5,19730 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e8>
	    if (__tmp != nullptr)
   196f8:	04048a63          	beq	s1,zero,1974c <dwarf::dwarf::get_type_unit(unsigned long) const+0x204>
    if (__is_single_threaded())
   196fc:	000ac783          	lbu	a5,0(s5)
   19700:	04078063          	beq	a5,zero,19740 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1f8>
  { *__mem += __val; }
   19704:	0304a783          	lw	a5,48(s1)
   19708:	0017879b          	addiw	a5,a5,1
   1970c:	02f4a823          	sw	a5,48(s1)
	    if (_M_pi != nullptr)
   19710:	01053d03          	ld	s10,16(a0)
   19714:	000d0c63          	beq	s10,zero,1972c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
    _Atomic_word __result = *__mem;
   19718:	030d2503          	lw	a0,48(s10)
    *__mem += __val;
   1971c:	fff5079b          	addiw	a5,a0,-1
   19720:	02fd2823          	sw	a5,48(s10)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19724:	00100793          	addi	a5,zero,1
   19728:	04f50263          	beq	a0,a5,1976c <dwarf::dwarf::get_type_unit(unsigned long) const+0x224>
	    _M_pi = __tmp;
   1972c:	00943823          	sd	s1,16(s0)
      tucur.subsection();
   19730:	000c8593          	addi	a1,s9,0
   19734:	000c0513          	addi	a0,s8,0
   19738:	758030ef          	jal	ra,1ce90 <dwarf::cursor::subsection()>
   1973c:	08c0006f          	jal	zero,197c8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x280>
      __atomic_add(__mem, __val);
   19740:	00100593          	addi	a1,zero,1
   19744:	03048513          	addi	a0,s1,48
   19748:	c09fc0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
	    if (_M_pi != nullptr)
   1974c:	01043d03          	ld	s10,16(s0)
   19750:	fc0d0ee3          	beq	s10,zero,1972c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
    if (__is_single_threaded())
   19754:	000ac783          	lbu	a5,0(s5)
   19758:	fc0790e3          	bne	a5,zero,19718 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1d0>
      return __exchange_and_add(__mem, __val);
   1975c:	fff00593          	addi	a1,zero,-1
   19760:	030d0513          	addi	a0,s10,48
   19764:	c1dfc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19768:	fbdff06f          	jal	zero,19724 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1dc>
	_M_dispose();
   1976c:	000d3783          	ld	a5,0(s10)
   19770:	0107b783          	ld	a5,16(a5)
   19774:	000d0513          	addi	a0,s10,0
   19778:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1977c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19780:	00029797          	auipc	a5,0x29
   19784:	d007b783          	ld	a5,-768(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19788:	0007c783          	lbu	a5,0(a5)
   1978c:	02078663          	beq	a5,zero,197b8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    _Atomic_word __result = *__mem;
   19790:	034d2503          	lw	a0,52(s10)
    *__mem += __val;
   19794:	fff5079b          	addiw	a5,a0,-1
   19798:	02fd2a23          	sw	a5,52(s10)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1979c:	00100793          	addi	a5,zero,1
   197a0:	f8f516e3          	bne	a0,a5,1972c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
	    _M_destroy();
   197a4:	000d3783          	ld	a5,0(s10)
   197a8:	0187b783          	ld	a5,24(a5)
   197ac:	000d0513          	addi	a0,s10,0
   197b0:	000780e7          	jalr	ra,0(a5)
   197b4:	f79ff06f          	jal	zero,1972c <dwarf::dwarf::get_type_unit(unsigned long) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   197b8:	fff00593          	addi	a1,zero,-1
   197bc:	034d0513          	addi	a0,s10,52
   197c0:	bc1fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   197c4:	fd9ff06f          	jal	zero,1979c <dwarf::dwarf::get_type_unit(unsigned long) const+0x254>
	if (_M_pi != nullptr)
   197c8:	07813403          	ld	s0,120(sp)
   197cc:	02040063          	beq	s0,zero,197ec <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
    if (__is_single_threaded())
   197d0:	000ac783          	lbu	a5,0(s5)
   197d4:	04078663          	beq	a5,zero,19820 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2d8>
    _Atomic_word __result = *__mem;
   197d8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   197dc:	fff5079b          	addiw	a5,a0,-1
   197e0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   197e4:	00100793          	addi	a5,zero,1
   197e8:	04f50463          	beq	a0,a5,19830 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2e8>
   197ec:	03413c23          	sd	s4,56(sp)
   197f0:	00098513          	addi	a0,s3,0
   197f4:	a4dfd0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   197f8:	02813783          	ld	a5,40(sp)
      { return _M_ptr; }
   197fc:	01813703          	ld	a4,24(sp)
    while (!tucur.end()) {
   19800:	01073683          	ld	a3,16(a4)
   19804:	08d7f463          	bgeu	a5,a3,1988c <dwarf::dwarf::get_type_unit(unsigned long) const+0x344>
  section_offset get_section_offset() const { return pos - sec->begin; }
   19808:	00873603          	ld	a2,8(a4)
      type_unit tu(*this, tucur.get_section_offset());
   1980c:	40c78633          	sub	a2,a5,a2
   19810:	00090593          	addi	a1,s2,0
   19814:	00098513          	addi	a0,s3,0
   19818:	c30ff0ef          	jal	ra,18c48 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>
   1981c:	ea9ff06f          	jal	zero,196c4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x17c>
      return __exchange_and_add(__mem, __val);
   19820:	fff00593          	addi	a1,zero,-1
   19824:	03040513          	addi	a0,s0,48
   19828:	b59fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1982c:	fb9ff06f          	jal	zero,197e4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x29c>
	_M_dispose();
   19830:	00043783          	ld	a5,0(s0)
   19834:	0107b783          	ld	a5,16(a5)
   19838:	00040513          	addi	a0,s0,0
   1983c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19840:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19844:	00029797          	auipc	a5,0x29
   19848:	c3c7b783          	ld	a5,-964(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1984c:	0007c783          	lbu	a5,0(a5)
   19850:	02078663          	beq	a5,zero,1987c <dwarf::dwarf::get_type_unit(unsigned long) const+0x334>
    _Atomic_word __result = *__mem;
   19854:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19858:	fff5079b          	addiw	a5,a0,-1
   1985c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19860:	00100793          	addi	a5,zero,1
   19864:	f8f514e3          	bne	a0,a5,197ec <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
	    _M_destroy();
   19868:	00043783          	ld	a5,0(s0)
   1986c:	0187b783          	ld	a5,24(a5)
   19870:	00040513          	addi	a0,s0,0
   19874:	000780e7          	jalr	ra,0(a5)
   19878:	f75ff06f          	jal	zero,197ec <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
      return __exchange_and_add(__mem, __val);
   1987c:	fff00593          	addi	a1,zero,-1
   19880:	03440513          	addi	a0,s0,52
   19884:	afdfc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19888:	fd9ff06f          	jal	zero,19860 <dwarf::dwarf::get_type_unit(unsigned long) const+0x318>
      { return _M_ptr; }
   1988c:	00093783          	ld	a5,0(s2)
    m->have_type_units = true;
   19890:	00100713          	addi	a4,zero,1
   19894:	08e78023          	sb	a4,128(a5)
	if (_M_pi != nullptr)
   19898:	02013403          	ld	s0,32(sp)
   1989c:	02040463          	beq	s0,zero,198c4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
    if (__is_single_threaded())
   198a0:	00029797          	auipc	a5,0x29
   198a4:	be07b783          	ld	a5,-1056(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   198a8:	0007c783          	lbu	a5,0(a5)
   198ac:	06078463          	beq	a5,zero,19914 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3cc>
    _Atomic_word __result = *__mem;
   198b0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   198b4:	fff5079b          	addiw	a5,a0,-1
   198b8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   198bc:	00100793          	addi	a5,zero,1
   198c0:	06f50263          	beq	a0,a5,19924 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3dc>
      { return _M_ptr; }
   198c4:	00093783          	ld	a5,0(s2)
      { return _M_h.count(__x); }
   198c8:	04878413          	addi	s0,a5,72
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    -> const_iterator
    {
      if (size() <= __small_size_threshold())
   198cc:	0607b703          	ld	a4,96(a5)
   198d0:	0a071863          	bne	a4,zero,19980 <dwarf::dwarf::get_type_unit(unsigned long) const+0x438>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   198d4:	0587b783          	ld	a5,88(a5)
	{
	  for (auto __it = begin(); __it != end(); ++__it)
   198d8:	00078c63          	beq	a5,zero,198f0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
      { return __x == __y; }
   198dc:	00813683          	ld	a3,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   198e0:	0087b703          	ld	a4,8(a5)
   198e4:	0ce68463          	beq	a3,a4,199ac <dwarf::dwarf::get_type_unit(unsigned long) const+0x464>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   198e8:	0007b783          	ld	a5,0(a5)
	  for (auto __it = begin(); __it != end(); ++__it)
   198ec:	fe079ae3          	bne	a5,zero,198e0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x398>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   198f0:	01000513          	addi	a0,zero,16
   198f4:	b2dfc0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   198f8:	00050493          	addi	s1,a0,0
   198fc:	00813583          	ld	a1,8(sp)
   19900:	01810513          	addi	a0,sp,24
   19904:	00029317          	auipc	t1,0x29
   19908:	9f433303          	ld	t1,-1548(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   1990c:	000300e7          	jalr	ra,0(t1)
   19910:	0e80006f          	jal	zero,199f8 <dwarf::dwarf::get_type_unit(unsigned long) const+0x4b0>
      return __exchange_and_add(__mem, __val);
   19914:	fff00593          	addi	a1,zero,-1
   19918:	03040513          	addi	a0,s0,48
   1991c:	a65fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19920:	f9dff06f          	jal	zero,198bc <dwarf::dwarf::get_type_unit(unsigned long) const+0x374>
	_M_dispose();
   19924:	00043783          	ld	a5,0(s0)
   19928:	0107b783          	ld	a5,16(a5)
   1992c:	00040513          	addi	a0,s0,0
   19930:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19934:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19938:	00029797          	auipc	a5,0x29
   1993c:	b487b783          	ld	a5,-1208(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19940:	0007c783          	lbu	a5,0(a5)
   19944:	02078663          	beq	a5,zero,19970 <dwarf::dwarf::get_type_unit(unsigned long) const+0x428>
    _Atomic_word __result = *__mem;
   19948:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1994c:	fff5079b          	addiw	a5,a0,-1
   19950:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19954:	00100793          	addi	a5,zero,1
   19958:	f6f516e3          	bne	a0,a5,198c4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
	    _M_destroy();
   1995c:	00043783          	ld	a5,0(s0)
   19960:	0187b783          	ld	a5,24(a5)
   19964:	00040513          	addi	a0,s0,0
   19968:	000780e7          	jalr	ra,0(a5)
   1996c:	f59ff06f          	jal	zero,198c4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x37c>
      return __exchange_and_add(__mem, __val);
   19970:	fff00593          	addi	a1,zero,-1
   19974:	03440513          	addi	a0,s0,52
   19978:	a09fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1997c:	fd9ff06f          	jal	zero,19954 <dwarf::dwarf::get_type_unit(unsigned long) const+0x40c>
      __hash_code
      _M_hash_code(const _Key& __k) const
      {
	static_assert(__is_invocable<const _Hash&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_hash()(__k);
   19980:	00813683          	ld	a3,8(sp)
    { return __num % __den; }
   19984:	0507b583          	ld	a1,80(a5)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   19988:	00810613          	addi	a2,sp,8
   1998c:	02b6f5b3          	remu	a1,a3,a1
   19990:	00040513          	addi	a0,s0,0
   19994:	00029317          	auipc	t1,0x29
   19998:	98433303          	ld	t1,-1660(t1) # 42318 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26920>
   1999c:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   199a0:	f40508e3          	beq	a0,zero,198f0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
  if (!m->type_units.count(type_signature))
   199a4:	00053783          	ld	a5,0(a0)
   199a8:	f40784e3          	beq	a5,zero,198f0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a8>
      { return _M_h[__k]; }
   199ac:	00810593          	addi	a1,sp,8
   199b0:	00040513          	addi	a0,s0,0
   199b4:	00029317          	auipc	t1,0x29
   199b8:	b5c33303          	ld	t1,-1188(t1) # 42510 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x26184>
   199bc:	000300e7          	jalr	ra,0(t1)
}
   199c0:	0d813083          	ld	ra,216(sp)
   199c4:	0d013403          	ld	s0,208(sp)
   199c8:	0c813483          	ld	s1,200(sp)
   199cc:	0c013903          	ld	s2,192(sp)
   199d0:	0b813983          	ld	s3,184(sp)
   199d4:	0b013a03          	ld	s4,176(sp)
   199d8:	0a813a83          	ld	s5,168(sp)
   199dc:	0a013b03          	ld	s6,160(sp)
   199e0:	09813b83          	ld	s7,152(sp)
   199e4:	09013c03          	ld	s8,144(sp)
   199e8:	08813c83          	ld	s9,136(sp)
   199ec:	08013d03          	ld	s10,128(sp)
   199f0:	0e010113          	addi	sp,sp,224
   199f4:	00008067          	jalr	zero,0(ra)
    { return std::move(__rhs.insert(0, __lhs)); }
   199f8:	0001d617          	auipc	a2,0x1d
   199fc:	36060613          	addi	a2,a2,864 # 36d58 <std::piecewise_construct+0x270>
   19a00:	00000593          	addi	a1,zero,0
   19a04:	01810513          	addi	a0,sp,24
   19a08:	989fc0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   19a0c:	00050593          	addi	a1,a0,0
   19a10:	03810413          	addi	s0,sp,56
   19a14:	00040513          	addi	a0,s0,0
   19a18:	a59fc0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   19a1c:	00040593          	addi	a1,s0,0
   19a20:	00048513          	addi	a0,s1,0
   19a24:	c2dfc0ef          	jal	ra,16650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   19a28:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   19a2c:	04810793          	addi	a5,sp,72
   19a30:	00f50463          	beq	a0,a5,19a38 <dwarf::dwarf::get_type_unit(unsigned long) const+0x4f0>
   19a34:	addfc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19a38:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   19a3c:	02810793          	addi	a5,sp,40
   19a40:	00f50463          	beq	a0,a5,19a48 <dwarf::dwarf::get_type_unit(unsigned long) const+0x500>
   19a44:	acdfc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19a48:	00029617          	auipc	a2,0x29
   19a4c:	a7863603          	ld	a2,-1416(a2) # 424c0 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   19a50:	00029597          	auipc	a1,0x29
   19a54:	b205b583          	ld	a1,-1248(a1) # 42570 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   19a58:	00048513          	addi	a0,s1,0
   19a5c:	c65fc0ef          	jal	ra,166c0 <__cxa_throw@plt>
   19a60:	00050413          	addi	s0,a0,0
   19a64:	00029797          	auipc	a5,0x29
   19a68:	8f47b783          	ld	a5,-1804(a5) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   19a6c:	01078793          	addi	a5,a5,16
   19a70:	02f13c23          	sd	a5,56(sp)
   19a74:	03810513          	addi	a0,sp,56
   19a78:	fc8fd0ef          	jal	ra,17240 <dwarf::unit::~unit()>
	if (_M_pi != nullptr)
   19a7c:	02013503          	ld	a0,32(sp)
   19a80:	00050863          	beq	a0,zero,19a90 <dwarf::dwarf::get_type_unit(unsigned long) const+0x548>
	  _M_pi->_M_release();
   19a84:	00029317          	auipc	t1,0x29
   19a88:	94433303          	ld	t1,-1724(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   19a8c:	000300e7          	jalr	ra,0(t1)
   19a90:	00040513          	addi	a0,s0,0
   19a94:	c5dfc0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   19a98:	00050413          	addi	s0,a0,0
   19a9c:	fe1ff06f          	jal	zero,19a7c <dwarf::dwarf::get_type_unit(unsigned long) const+0x534>
      { return _M_dataplus._M_p; }
   19aa0:	00050413          	addi	s0,a0,0
   19aa4:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   19aa8:	04810793          	addi	a5,sp,72
   19aac:	00f50463          	beq	a0,a5,19ab4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x56c>
   19ab0:	a61fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19ab4:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   19ab8:	02810793          	addi	a5,sp,40
   19abc:	00f50463          	beq	a0,a5,19ac4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x57c>
   19ac0:	a51fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19ac4:	00048513          	addi	a0,s1,0
   19ac8:	a09fc0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   19acc:	00040513          	addi	a0,s0,0
   19ad0:	c21fc0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   19ad4:	00050413          	addi	s0,a0,0
   19ad8:	fddff06f          	jal	zero,19ab4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x56c>
   19adc:	00050413          	addi	s0,a0,0
   19ae0:	fe5ff06f          	jal	zero,19ac4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x57c>

0000000000019ae4 <dwarf::unit::impl::force_abbrevs()>:
  if (have_abbrevs)
   19ae4:	13854783          	lbu	a5,312(a0)
   19ae8:	00078463          	beq	a5,zero,19af0 <dwarf::unit::impl::force_abbrevs()+0xc>
   19aec:	00008067          	jalr	zero,0(ra)
void unit::impl::force_abbrevs() {
   19af0:	f6010113          	addi	sp,sp,-160
   19af4:	08113c23          	sd	ra,152(sp)
   19af8:	08813823          	sd	s0,144(sp)
   19afc:	08913423          	sd	s1,136(sp)
   19b00:	09213023          	sd	s2,128(sp)
   19b04:	07313c23          	sd	s3,120(sp)
   19b08:	07413823          	sd	s4,112(sp)
   19b0c:	07513423          	sd	s5,104(sp)
   19b10:	07613023          	sd	s6,96(sp)
   19b14:	05713c23          	sd	s7,88(sp)
   19b18:	00050493          	addi	s1,a0,0
  cursor c(file.get_section(section_type::abbrev), debug_abbrev_offset);
   19b1c:	00000613          	addi	a2,zero,0
   19b20:	00050593          	addi	a1,a0,0
   19b24:	04010513          	addi	a0,sp,64
   19b28:	835fd0ef          	jal	ra,1735c <dwarf::dwarf::get_section(dwarf::section_type) const>
   19b2c:	0284b403          	ld	s0,40(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   19b30:	04013783          	ld	a5,64(sp)
   19b34:	02f13423          	sd	a5,40(sp)
      : _M_pi(__r._M_pi)
   19b38:	04813503          	ld	a0,72(sp)
   19b3c:	02a13823          	sd	a0,48(sp)
	if (_M_pi != nullptr)
   19b40:	02050063          	beq	a0,zero,19b60 <dwarf::unit::impl::force_abbrevs()+0x7c>
    if (__is_single_threaded())
   19b44:	00029797          	auipc	a5,0x29
   19b48:	93c7b783          	ld	a5,-1732(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19b4c:	0007c783          	lbu	a5,0(a5)
   19b50:	08078263          	beq	a5,zero,19bd4 <dwarf::unit::impl::force_abbrevs()+0xf0>
  { *__mem += __val; }
   19b54:	03052783          	lw	a5,48(a0)
   19b58:	0017879b          	addiw	a5,a5,1
   19b5c:	02f52823          	sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   19b60:	04013783          	ld	a5,64(sp)
   19b64:	0087b783          	ld	a5,8(a5)
   19b68:	008787b3          	add	a5,a5,s0
   19b6c:	02f13c23          	sd	a5,56(sp)
	if (_M_pi != nullptr)
   19b70:	04813403          	ld	s0,72(sp)
   19b74:	02040463          	beq	s0,zero,19b9c <dwarf::unit::impl::force_abbrevs()+0xb8>
    if (__is_single_threaded())
   19b78:	00029797          	auipc	a5,0x29
   19b7c:	9087b783          	ld	a5,-1784(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19b80:	0007c783          	lbu	a5,0(a5)
   19b84:	06078063          	beq	a5,zero,19be4 <dwarf::unit::impl::force_abbrevs()+0x100>
    _Atomic_word __result = *__mem;
   19b88:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19b8c:	fff5079b          	addiw	a5,a0,-1
   19b90:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19b94:	00100793          	addi	a5,zero,1
   19b98:	04f50e63          	beq	a0,a5,19bf4 <dwarf::unit::impl::force_abbrevs()+0x110>
  abbrev_code code;
  DW_TAG tag;
  bool children;
  std::vector<attribute_spec> attributes;

  abbrev_entry() : code(0) {}
   19b9c:	00013023          	sd	zero,0(sp)
   19ba0:	00013823          	sd	zero,16(sp)
   19ba4:	00013c23          	sd	zero,24(sp)
   19ba8:	02013023          	sd	zero,32(sp)
  abbrev_code highest = 0;
   19bac:	00000913          	addi	s2,zero,0
  while (entry.read(&c)) {
   19bb0:	02810993          	addi	s3,sp,40
   19bb4:	00010413          	addi	s0,sp,0
   19bb8:	15848a13          	addi	s4,s1,344
   19bbc:	00029a97          	auipc	s5,0x29
   19bc0:	924aba83          	ld	s5,-1756(s5) # 424e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x25e14>
struct abbrev_entry {
   19bc4:	01010b13          	addi	s6,sp,16
   19bc8:	00029b97          	auipc	s7,0x29
   19bcc:	a20bbb83          	ld	s7,-1504(s7) # 425e8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)@@Base+0x27730>
   19bd0:	0b00006f          	jal	zero,19c80 <dwarf::unit::impl::force_abbrevs()+0x19c>
      __atomic_add(__mem, __val);
   19bd4:	00100593          	addi	a1,zero,1
   19bd8:	03050513          	addi	a0,a0,48
   19bdc:	f74fc0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   19be0:	f81ff06f          	jal	zero,19b60 <dwarf::unit::impl::force_abbrevs()+0x7c>
      return __exchange_and_add(__mem, __val);
   19be4:	fff00593          	addi	a1,zero,-1
   19be8:	03040513          	addi	a0,s0,48
   19bec:	f94fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19bf0:	fa5ff06f          	jal	zero,19b94 <dwarf::unit::impl::force_abbrevs()+0xb0>
	_M_dispose();
   19bf4:	00043783          	ld	a5,0(s0)
   19bf8:	0107b783          	ld	a5,16(a5)
   19bfc:	00040513          	addi	a0,s0,0
   19c00:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19c04:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19c08:	00029797          	auipc	a5,0x29
   19c0c:	8787b783          	ld	a5,-1928(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19c10:	0007c783          	lbu	a5,0(a5)
   19c14:	02078663          	beq	a5,zero,19c40 <dwarf::unit::impl::force_abbrevs()+0x15c>
    _Atomic_word __result = *__mem;
   19c18:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19c1c:	fff5079b          	addiw	a5,a0,-1
   19c20:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19c24:	00100793          	addi	a5,zero,1
   19c28:	f6f51ae3          	bne	a0,a5,19b9c <dwarf::unit::impl::force_abbrevs()+0xb8>
	    _M_destroy();
   19c2c:	00043783          	ld	a5,0(s0)
   19c30:	0187b783          	ld	a5,24(a5)
   19c34:	00040513          	addi	a0,s0,0
   19c38:	000780e7          	jalr	ra,0(a5)
   19c3c:	f61ff06f          	jal	zero,19b9c <dwarf::unit::impl::force_abbrevs()+0xb8>
      return __exchange_and_add(__mem, __val);
   19c40:	fff00593          	addi	a1,zero,-1
   19c44:	03440513          	addi	a0,s0,52
   19c48:	f38fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c4c:	fd9ff06f          	jal	zero,19c24 <dwarf::unit::impl::force_abbrevs()+0x140>
   19c50:	00013783          	ld	a5,0(sp)
   19c54:	00f53023          	sd	a5,0(a0)
   19c58:	00812783          	lw	a5,8(sp)
   19c5c:	00f52423          	sw	a5,8(a0)
   19c60:	00c14783          	lbu	a5,12(sp)
   19c64:	00f50623          	sb	a5,12(a0)
   19c68:	000b0593          	addi	a1,s6,0
   19c6c:	01050513          	addi	a0,a0,16
   19c70:	000b80e7          	jalr	ra,0(s7)
    if (entry.code > highest)
   19c74:	00013783          	ld	a5,0(sp)
   19c78:	00f97463          	bgeu	s2,a5,19c80 <dwarf::unit::impl::force_abbrevs()+0x19c>
   19c7c:	00078913          	addi	s2,a5,0
  while (entry.read(&c)) {
   19c80:	00098593          	addi	a1,s3,0
   19c84:	00040513          	addi	a0,s0,0
   19c88:	261090ef          	jal	ra,236e8 <dwarf::abbrev_entry::read(dwarf::cursor*)>
   19c8c:	00050a63          	beq	a0,zero,19ca0 <dwarf::unit::impl::force_abbrevs()+0x1bc>
   19c90:	00040593          	addi	a1,s0,0
   19c94:	000a0513          	addi	a0,s4,0
   19c98:	000a80e7          	jalr	ra,0(s5)
   19c9c:	fb5ff06f          	jal	zero,19c50 <dwarf::unit::impl::force_abbrevs()+0x16c>
  if (highest * 10 < abbrevs_map.size() * 15) {
   19ca0:	00291793          	slli	a5,s2,0x2
   19ca4:	012787b3          	add	a5,a5,s2
   19ca8:	00179793          	slli	a5,a5,0x1
   19cac:	1704b683          	ld	a3,368(s1)
   19cb0:	00469713          	slli	a4,a3,0x4
   19cb4:	40d70733          	sub	a4,a4,a3
   19cb8:	06e7e863          	bltu	a5,a4,19d28 <dwarf::unit::impl::force_abbrevs()+0x244>
  have_abbrevs = true;
   19cbc:	00100793          	addi	a5,zero,1
   19cc0:	12f48c23          	sb	a5,312(s1)
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19cc4:	01013503          	ld	a0,16(sp)
	if (__p)
   19cc8:	00050463          	beq	a0,zero,19cd0 <dwarf::unit::impl::force_abbrevs()+0x1ec>
   19ccc:	845fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19cd0:	03013403          	ld	s0,48(sp)
   19cd4:	02040463          	beq	s0,zero,19cfc <dwarf::unit::impl::force_abbrevs()+0x218>
    if (__is_single_threaded())
   19cd8:	00028797          	auipc	a5,0x28
   19cdc:	7a87b783          	ld	a5,1960(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19ce0:	0007c783          	lbu	a5,0(a5)
   19ce4:	14078263          	beq	a5,zero,19e28 <dwarf::unit::impl::force_abbrevs()+0x344>
    _Atomic_word __result = *__mem;
   19ce8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   19cec:	fff5079b          	addiw	a5,a0,-1
   19cf0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19cf4:	00100793          	addi	a5,zero,1
   19cf8:	14f50063          	beq	a0,a5,19e38 <dwarf::unit::impl::force_abbrevs()+0x354>
}
   19cfc:	09813083          	ld	ra,152(sp)
   19d00:	09013403          	ld	s0,144(sp)
   19d04:	08813483          	ld	s1,136(sp)
   19d08:	08013903          	ld	s2,128(sp)
   19d0c:	07813983          	ld	s3,120(sp)
   19d10:	07013a03          	ld	s4,112(sp)
   19d14:	06813a83          	ld	s5,104(sp)
   19d18:	06013b03          	ld	s6,96(sp)
   19d1c:	05813b83          	ld	s7,88(sp)
   19d20:	0a010113          	addi	sp,sp,160
   19d24:	00008067          	jalr	zero,0(ra)
    abbrevs_vec.resize(highest + 1);
   19d28:	00190913          	addi	s2,s2,1
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19d2c:	1484b983          	ld	s3,328(s1)
   19d30:	1404b783          	ld	a5,320(s1)
   19d34:	40f985b3          	sub	a1,s3,a5
   19d38:	4035d593          	srai	a1,a1,0x3
   19d3c:	0001d717          	auipc	a4,0x1d
   19d40:	d8c73703          	ld	a4,-628(a4) # 36ac8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   19d44:	02e585b3          	mul	a1,a1,a4
       */
      _GLIBCXX20_CONSTEXPR
      void
      resize(size_type __new_size)
      {
	if (__new_size > size())
   19d48:	0325e263          	bltu	a1,s2,19d6c <dwarf::unit::impl::force_abbrevs()+0x288>
	  _M_default_append(__new_size - size());
	else if (__new_size < size())
   19d4c:	04b97a63          	bgeu	s2,a1,19da0 <dwarf::unit::impl::force_abbrevs()+0x2bc>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   19d50:	00291713          	slli	a4,s2,0x2
   19d54:	01270733          	add	a4,a4,s2
   19d58:	00371713          	slli	a4,a4,0x3
   19d5c:	00e78933          	add	s2,a5,a4
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   19d60:	05298063          	beq	s3,s2,19da0 <dwarf::unit::impl::force_abbrevs()+0x2bc>
   19d64:	00090413          	addi	s0,s2,0
   19d68:	0240006f          	jal	zero,19d8c <dwarf::unit::impl::force_abbrevs()+0x2a8>
	  _M_default_append(__new_size - size());
   19d6c:	40b905b3          	sub	a1,s2,a1
   19d70:	14048513          	addi	a0,s1,320
   19d74:	00028317          	auipc	t1,0x28
   19d78:	61c33303          	ld	t1,1564(t1) # 42390 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)@@Base+0x26bb4>
   19d7c:	000300e7          	jalr	ra,0(t1)
   19d80:	0200006f          	jal	zero,19da0 <dwarf::unit::impl::force_abbrevs()+0x2bc>
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   19d84:	02840413          	addi	s0,s0,40
   19d88:	00898a63          	beq	s3,s0,19d9c <dwarf::unit::impl::force_abbrevs()+0x2b8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19d8c:	01043503          	ld	a0,16(s0)
	if (__p)
   19d90:	fe050ae3          	beq	a0,zero,19d84 <dwarf::unit::impl::force_abbrevs()+0x2a0>
   19d94:	f7cfc0ef          	jal	ra,16510 <operator delete(void*)@plt>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
   19d98:	fedff06f          	jal	zero,19d84 <dwarf::unit::impl::force_abbrevs()+0x2a0>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   19d9c:	1524b423          	sd	s2,328(s1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19da0:	1684b403          	ld	s0,360(s1)
    for (auto &entry : abbrevs_map)
   19da4:	02041263          	bne	s0,zero,19dc8 <dwarf::unit::impl::force_abbrevs()+0x2e4>
      { _M_h.clear(); }
   19da8:	15848513          	addi	a0,s1,344
   19dac:	00028317          	auipc	t1,0x28
   19db0:	52c33303          	ld	t1,1324(t1) # 422d8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x26d98>
   19db4:	000300e7          	jalr	ra,0(t1)
   19db8:	f05ff06f          	jal	zero,19cbc <dwarf::unit::impl::force_abbrevs()+0x1d8>
   19dbc:	f54fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   19dc0:	00043403          	ld	s0,0(s0)
   19dc4:	fe0402e3          	beq	s0,zero,19da8 <dwarf::unit::impl::force_abbrevs()+0x2c4>
	return *(this->_M_impl._M_start + __n);
   19dc8:	00843783          	ld	a5,8(s0)
   19dcc:	00279713          	slli	a4,a5,0x2
   19dd0:	00f70733          	add	a4,a4,a5
   19dd4:	00371713          	slli	a4,a4,0x3
   19dd8:	1404b783          	ld	a5,320(s1)
   19ddc:	00e787b3          	add	a5,a5,a4
   19de0:	01043703          	ld	a4,16(s0)
   19de4:	00e7b023          	sd	a4,0(a5)
   19de8:	01842703          	lw	a4,24(s0)
   19dec:	00e7a423          	sw	a4,8(a5)
   19df0:	01c44703          	lbu	a4,28(s0)
   19df4:	00e78623          	sb	a4,12(a5)
	  _M_start = __x._M_start;
   19df8:	0107b503          	ld	a0,16(a5)
   19dfc:	02043703          	ld	a4,32(s0)
   19e00:	00e7b823          	sd	a4,16(a5)
	  _M_finish = __x._M_finish;
   19e04:	02843703          	ld	a4,40(s0)
   19e08:	00e7bc23          	sd	a4,24(a5)
	  _M_end_of_storage = __x._M_end_of_storage;
   19e0c:	03043703          	ld	a4,48(s0)
   19e10:	02e7b023          	sd	a4,32(a5)
	  _M_start = __x._M_start;
   19e14:	02043023          	sd	zero,32(s0)
	  _M_finish = __x._M_finish;
   19e18:	02043423          	sd	zero,40(s0)
	  _M_end_of_storage = __x._M_end_of_storage;
   19e1c:	02043823          	sd	zero,48(s0)
	if (__p)
   19e20:	f8051ee3          	bne	a0,zero,19dbc <dwarf::unit::impl::force_abbrevs()+0x2d8>
   19e24:	f9dff06f          	jal	zero,19dc0 <dwarf::unit::impl::force_abbrevs()+0x2dc>
      return __exchange_and_add(__mem, __val);
   19e28:	fff00593          	addi	a1,zero,-1
   19e2c:	03040513          	addi	a0,s0,48
   19e30:	d50fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e34:	ec1ff06f          	jal	zero,19cf4 <dwarf::unit::impl::force_abbrevs()+0x210>
	_M_dispose();
   19e38:	00043783          	ld	a5,0(s0)
   19e3c:	0107b783          	ld	a5,16(a5)
   19e40:	00040513          	addi	a0,s0,0
   19e44:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19e48:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19e4c:	00028797          	auipc	a5,0x28
   19e50:	6347b783          	ld	a5,1588(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19e54:	0007c783          	lbu	a5,0(a5)
   19e58:	02078663          	beq	a5,zero,19e84 <dwarf::unit::impl::force_abbrevs()+0x3a0>
    _Atomic_word __result = *__mem;
   19e5c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   19e60:	fff5079b          	addiw	a5,a0,-1
   19e64:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19e68:	00100793          	addi	a5,zero,1
   19e6c:	e8f518e3          	bne	a0,a5,19cfc <dwarf::unit::impl::force_abbrevs()+0x218>
	    _M_destroy();
   19e70:	00043783          	ld	a5,0(s0)
   19e74:	0187b783          	ld	a5,24(a5)
   19e78:	00040513          	addi	a0,s0,0
   19e7c:	000780e7          	jalr	ra,0(a5)
   19e80:	e7dff06f          	jal	zero,19cfc <dwarf::unit::impl::force_abbrevs()+0x218>
      return __exchange_and_add(__mem, __val);
   19e84:	fff00593          	addi	a1,zero,-1
   19e88:	03440513          	addi	a0,s0,52
   19e8c:	cf4fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19e90:	fd9ff06f          	jal	zero,19e68 <dwarf::unit::impl::force_abbrevs()+0x384>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19e94:	00050413          	addi	s0,a0,0
   19e98:	01013503          	ld	a0,16(sp)
	if (__p)
   19e9c:	00050463          	beq	a0,zero,19ea4 <dwarf::unit::impl::force_abbrevs()+0x3c0>
   19ea0:	e70fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19ea4:	03013503          	ld	a0,48(sp)
   19ea8:	00050863          	beq	a0,zero,19eb8 <dwarf::unit::impl::force_abbrevs()+0x3d4>
	  _M_pi->_M_release();
   19eac:	00028317          	auipc	t1,0x28
   19eb0:	51c33303          	ld	t1,1308(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   19eb4:	000300e7          	jalr	ra,0(t1)
   19eb8:	00040513          	addi	a0,s0,0
   19ebc:	835fc0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000019ec0 <dwarf::unit::root() const>:
const die &unit::root() const {
   19ec0:	f5010113          	addi	sp,sp,-176
   19ec4:	0a113423          	sd	ra,168(sp)
   19ec8:	0a813023          	sd	s0,160(sp)
   19ecc:	08913c23          	sd	s1,152(sp)
   19ed0:	09213823          	sd	s2,144(sp)
   19ed4:	09313423          	sd	s3,136(sp)
   19ed8:	09413023          	sd	s4,128(sp)
   19edc:	07513c23          	sd	s5,120(sp)
   19ee0:	07613823          	sd	s6,112(sp)
   19ee4:	00050493          	addi	s1,a0,0
      { return _M_ptr; }
   19ee8:	00853503          	ld	a0,8(a0)
  if (!m->root.valid()) {
   19eec:	05853783          	ld	a5,88(a0)
   19ef0:	02078a63          	beq	a5,zero,19f24 <dwarf::unit::root() const+0x64>
  return m->root;
   19ef4:	0084b503          	ld	a0,8(s1)
   19ef8:	04850513          	addi	a0,a0,72
}
   19efc:	0a813083          	ld	ra,168(sp)
   19f00:	0a013403          	ld	s0,160(sp)
   19f04:	09813483          	ld	s1,152(sp)
   19f08:	09013903          	ld	s2,144(sp)
   19f0c:	08813983          	ld	s3,136(sp)
   19f10:	08013a03          	ld	s4,128(sp)
   19f14:	07813a83          	ld	s5,120(sp)
   19f18:	07013b03          	ld	s6,112(sp)
   19f1c:	0b010113          	addi	sp,sp,176
   19f20:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   19f24:	bc1ff0ef          	jal	ra,19ae4 <dwarf::unit::impl::force_abbrevs()>
   19f28:	0084b403          	ld	s0,8(s1)
    m->root = die(this);
   19f2c:	00048593          	addi	a1,s1,0
   19f30:	00010513          	addi	a0,sp,0
   19f34:	330030ef          	jal	ra,1d264 <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   19f38:	00012783          	lw	a5,0(sp)
   19f3c:	04f42423          	sw	a5,72(s0)
   19f40:	00813783          	ld	a5,8(sp)
   19f44:	04f43823          	sd	a5,80(s0)
   19f48:	01013783          	ld	a5,16(sp)
   19f4c:	04f43c23          	sd	a5,88(s0)
   19f50:	01813783          	ld	a5,24(sp)
   19f54:	06f43023          	sd	a5,96(s0)
      new (&base[i]) T(o[i]);
    end = base + osize;
    return *this;
  }

  size_type size() const { return end - base; }
   19f58:	05813983          	ld	s3,88(sp)
   19f5c:	05013783          	ld	a5,80(sp)
   19f60:	40f989b3          	sub	s3,s3,a5
   19f64:	4039d913          	srai	s2,s3,0x3
    end--;
    end->~T();
  }

  void clear() {
    for (T *p = base; p < end; ++p)
   19f68:	09843683          	ld	a3,152(s0)
   19f6c:	0a043783          	ld	a5,160(s0)
   19f70:	00f6fa63          	bgeu	a3,a5,19f84 <dwarf::unit::root() const+0xc4>
   19f74:	00068793          	addi	a5,a3,0
   19f78:	00878793          	addi	a5,a5,8
   19f7c:	0a043703          	ld	a4,160(s0)
   19f80:	fee7ece3          	bltu	a5,a4,19f78 <dwarf::unit::root() const+0xb8>
      p->~T();
    end = base;
   19f84:	0ad43023          	sd	a3,160(s0)
    if (n <= (size_type)(cap - base))
   19f88:	0a843503          	ld	a0,168(s0)
   19f8c:	40d50533          	sub	a0,a0,a3
   19f90:	07357863          	bgeu	a0,s3,1a000 <dwarf::unit::root() const+0x140>
   19f94:	40355513          	srai	a0,a0,0x3
   19f98:	00051463          	bne	a0,zero,19fa0 <dwarf::unit::root() const+0xe0>
   19f9c:	00100513          	addi	a0,zero,1
    while (target < n)
   19fa0:	01257663          	bgeu	a0,s2,19fac <dwarf::unit::root() const+0xec>
      target <<= 1;
   19fa4:	00151513          	slli	a0,a0,0x1
    while (target < n)
   19fa8:	ff256ee3          	bltu	a0,s2,19fa4 <dwarf::unit::root() const+0xe4>
    char *newbuf = new char[sizeof(T[target])];
   19fac:	00351a13          	slli	s4,a0,0x3
   19fb0:	000a0513          	addi	a0,s4,0
   19fb4:	b7cfc0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   19fb8:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   19fbc:	09843503          	ld	a0,152(s0)
    for (; src < end; src++, dest++) {
   19fc0:	0a043783          	ld	a5,160(s0)
   19fc4:	0cf57063          	bgeu	a0,a5,1a084 <dwarf::unit::root() const+0x1c4>
    T *src = base, *dest = (T *)newbuf;
   19fc8:	00050793          	addi	a5,a0,0
   19fcc:	000b0a93          	addi	s5,s6,0
    for (; src < end; src++, dest++) {
   19fd0:	00878793          	addi	a5,a5,8
   19fd4:	008a8a93          	addi	s5,s5,8
   19fd8:	0a043703          	ld	a4,160(s0)
   19fdc:	fee7eae3          	bltu	a5,a4,19fd0 <dwarf::unit::root() const+0x110>
   19fe0:	06840793          	addi	a5,s0,104
    if ((char *)base != buf)
   19fe4:	00f50663          	beq	a0,a5,19ff0 <dwarf::unit::root() const+0x130>
      delete[] (char *)base;
   19fe8:	00050463          	beq	a0,zero,19ff0 <dwarf::unit::root() const+0x130>
   19fec:	dd4fc0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   19ff0:	09643c23          	sd	s6,152(s0)
    end = dest;
   19ff4:	0b543023          	sd	s5,160(s0)
    cap = base + target;
   19ff8:	014b0b33          	add	s6,s6,s4
   19ffc:	0b643423          	sd	s6,168(s0)
    for (size_type i = 0; i < osize; i++)
   1a000:	02090663          	beq	s2,zero,1a02c <dwarf::unit::root() const+0x16c>
   1a004:	00000793          	addi	a5,zero,0
   1a008:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1a00c:	05013703          	ld	a4,80(sp)
   1a010:	00d70733          	add	a4,a4,a3
   1a014:	00073603          	ld	a2,0(a4)
   1a018:	09843703          	ld	a4,152(s0)
   1a01c:	00d70733          	add	a4,a4,a3
   1a020:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1a024:	00178793          	addi	a5,a5,1
   1a028:	fef910e3          	bne	s2,a5,1a008 <dwarf::unit::root() const+0x148>
    end = base + osize;
   1a02c:	09843783          	ld	a5,152(s0)
   1a030:	013787b3          	add	a5,a5,s3
   1a034:	0af43023          	sd	a5,160(s0)
   1a038:	06813783          	ld	a5,104(sp)
   1a03c:	0af43823          	sd	a5,176(s0)
    for (T *p = base; p < end; ++p)
   1a040:	05013503          	ld	a0,80(sp)
   1a044:	05813783          	ld	a5,88(sp)
   1a048:	00f57a63          	bgeu	a0,a5,1a05c <dwarf::unit::root() const+0x19c>
   1a04c:	00050793          	addi	a5,a0,0
   1a050:	00878793          	addi	a5,a5,8
   1a054:	05813703          	ld	a4,88(sp)
   1a058:	fee7ece3          	bltu	a5,a4,1a050 <dwarf::unit::root() const+0x190>
    end = base;
   1a05c:	04a13c23          	sd	a0,88(sp)
    if ((char *)base != buf)
   1a060:	02010793          	addi	a5,sp,32
   1a064:	00f50663          	beq	a0,a5,1a070 <dwarf::unit::root() const+0x1b0>
      delete[] (char *)base;
   1a068:	00050463          	beq	a0,zero,1a070 <dwarf::unit::root() const+0x1b0>
   1a06c:	d54fc0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1a070:	0084b503          	ld	a0,8(s1)
    m->root.read(m->root_offset);
   1a074:	03053583          	ld	a1,48(a0)
   1a078:	04850513          	addi	a0,a0,72
   1a07c:	240030ef          	jal	ra,1d2bc <dwarf::die::read(unsigned long)>
   1a080:	e75ff06f          	jal	zero,19ef4 <dwarf::unit::root() const+0x34>
    T *src = base, *dest = (T *)newbuf;
   1a084:	000b0a93          	addi	s5,s6,0
   1a088:	f59ff06f          	jal	zero,19fe0 <dwarf::unit::root() const+0x120>
class die {
   1a08c:	00050413          	addi	s0,a0,0
   1a090:	02010513          	addi	a0,sp,32
   1a094:	00028317          	auipc	t1,0x28
   1a098:	35433303          	ld	t1,852(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1a09c:	000300e7          	jalr	ra,0(t1)
   1a0a0:	00040513          	addi	a0,s0,0
   1a0a4:	e4cfc0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001a0a8 <dwarf::compilation_unit::get_line_table() const>:
const line_table &compilation_unit::get_line_table() const {
   1a0a8:	f4010113          	addi	sp,sp,-192
   1a0ac:	0a113c23          	sd	ra,184(sp)
   1a0b0:	0a813823          	sd	s0,176(sp)
   1a0b4:	0a913423          	sd	s1,168(sp)
   1a0b8:	0b213023          	sd	s2,160(sp)
   1a0bc:	09313c23          	sd	s3,152(sp)
   1a0c0:	09413823          	sd	s4,144(sp)
   1a0c4:	00050413          	addi	s0,a0,0
      { return _M_ptr != nullptr; }
   1a0c8:	00853783          	ld	a5,8(a0)
  if (!m->lt.valid()) {
   1a0cc:	1287b783          	ld	a5,296(a5)
   1a0d0:	02078663          	beq	a5,zero,1a0fc <dwarf::compilation_unit::get_line_table() const+0x54>
  return m->lt;
   1a0d4:	00843503          	ld	a0,8(s0)
   1a0d8:	12850513          	addi	a0,a0,296
}
   1a0dc:	0b813083          	ld	ra,184(sp)
   1a0e0:	0b013403          	ld	s0,176(sp)
   1a0e4:	0a813483          	ld	s1,168(sp)
   1a0e8:	0a013903          	ld	s2,160(sp)
   1a0ec:	09813983          	ld	s3,152(sp)
   1a0f0:	09013a03          	ld	s4,144(sp)
   1a0f4:	0c010113          	addi	sp,sp,192
   1a0f8:	00008067          	jalr	zero,0(ra)
    const die &d = root();
   1a0fc:	dc5ff0ef          	jal	ra,19ec0 <dwarf::unit::root() const>
   1a100:	00050493          	addi	s1,a0,0
    if (!d.has(DW_AT::stmt_list) || !d.has(DW_AT::name))
   1a104:	01000593          	addi	a1,zero,16
   1a108:	6ec030ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1a10c:	fc0504e3          	beq	a0,zero,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
   1a110:	00300593          	addi	a1,zero,3
   1a114:	00048513          	addi	a0,s1,0
   1a118:	6dc030ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1a11c:	fa050ce3          	beq	a0,zero,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
    shared_ptr<section> sec;
   1a120:	00013423          	sd	zero,8(sp)
   1a124:	00013823          	sd	zero,16(sp)
      sec = m->file.get_section(section_type::line);
   1a128:	00400613          	addi	a2,zero,4
   1a12c:	00843583          	ld	a1,8(s0)
   1a130:	05810513          	addi	a0,sp,88
   1a134:	a28fd0ef          	jal	ra,1735c <dwarf::dwarf::get_section(dwarf::section_type) const>
      : _M_ptr(__r._M_ptr), _M_refcount()
   1a138:	05813703          	ld	a4,88(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a13c:	06013783          	ld	a5,96(sp)
	__r._M_pi = _M_pi;
   1a140:	06013023          	sd	zero,96(sp)
	__r._M_ptr = nullptr;
   1a144:	04013c23          	sd	zero,88(sp)
   1a148:	00e13423          	sd	a4,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a14c:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   1a150:	00f13823          	sd	a5,16(sp)
	if (_M_pi != nullptr)
   1a154:	0a090a63          	beq	s2,zero,1a208 <dwarf::compilation_unit::get_line_table() const+0x160>
    if (__is_single_threaded())
   1a158:	00028797          	auipc	a5,0x28
   1a15c:	3287b783          	ld	a5,808(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a160:	0007c783          	lbu	a5,0(a5)
   1a164:	06078263          	beq	a5,zero,1a1c8 <dwarf::compilation_unit::get_line_table() const+0x120>
    _Atomic_word __result = *__mem;
   1a168:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   1a16c:	fff7871b          	addiw	a4,a5,-1
   1a170:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a174:	00100713          	addi	a4,zero,1
   1a178:	08e79863          	bne	a5,a4,1a208 <dwarf::compilation_unit::get_line_table() const+0x160>
	_M_dispose();
   1a17c:	00093783          	ld	a5,0(s2)
   1a180:	0107b783          	ld	a5,16(a5)
   1a184:	00090513          	addi	a0,s2,0
   1a188:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a18c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a190:	00028797          	auipc	a5,0x28
   1a194:	2f07b783          	ld	a5,752(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a198:	0007c783          	lbu	a5,0(a5)
   1a19c:	06078e63          	beq	a5,zero,1a218 <dwarf::compilation_unit::get_line_table() const+0x170>
    _Atomic_word __result = *__mem;
   1a1a0:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   1a1a4:	fff7871b          	addiw	a4,a5,-1
   1a1a8:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a1ac:	00100713          	addi	a4,zero,1
   1a1b0:	02e79663          	bne	a5,a4,1a1dc <dwarf::compilation_unit::get_line_table() const+0x134>
	    _M_destroy();
   1a1b4:	00093783          	ld	a5,0(s2)
   1a1b8:	0187b783          	ld	a5,24(a5)
   1a1bc:	00090513          	addi	a0,s2,0
   1a1c0:	000780e7          	jalr	ra,0(a5)
   1a1c4:	0180006f          	jal	zero,1a1dc <dwarf::compilation_unit::get_line_table() const+0x134>
      return __exchange_and_add(__mem, __val);
   1a1c8:	fff00593          	addi	a1,zero,-1
   1a1cc:	03090513          	addi	a0,s2,48
   1a1d0:	9b0fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a1d4:	00100793          	addi	a5,zero,1
   1a1d8:	faf502e3          	beq	a0,a5,1a17c <dwarf::compilation_unit::get_line_table() const+0xd4>
	if (_M_pi != nullptr)
   1a1dc:	06013903          	ld	s2,96(sp)
   1a1e0:	02090463          	beq	s2,zero,1a208 <dwarf::compilation_unit::get_line_table() const+0x160>
    if (__is_single_threaded())
   1a1e4:	00028797          	auipc	a5,0x28
   1a1e8:	29c7b783          	ld	a5,668(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a1ec:	0007c783          	lbu	a5,0(a5)
   1a1f0:	02078e63          	beq	a5,zero,1a22c <dwarf::compilation_unit::get_line_table() const+0x184>
    _Atomic_word __result = *__mem;
   1a1f4:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1a1f8:	fff5079b          	addiw	a5,a0,-1
   1a1fc:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a200:	00100793          	addi	a5,zero,1
   1a204:	02f50c63          	beq	a0,a5,1a23c <dwarf::compilation_unit::get_line_table() const+0x194>
    auto comp_dir = d.has(DW_AT::comp_dir) ? at_comp_dir(d) : "";
   1a208:	01b00593          	addi	a1,zero,27
   1a20c:	00048513          	addi	a0,s1,0
   1a210:	5e4030ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1a214:	0880006f          	jal	zero,1a29c <dwarf::compilation_unit::get_line_table() const+0x1f4>
      return __exchange_and_add(__mem, __val);
   1a218:	fff00593          	addi	a1,zero,-1
   1a21c:	03490513          	addi	a0,s2,52
   1a220:	960fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a224:	00050793          	addi	a5,a0,0
   1a228:	f85ff06f          	jal	zero,1a1ac <dwarf::compilation_unit::get_line_table() const+0x104>
   1a22c:	fff00593          	addi	a1,zero,-1
   1a230:	03090513          	addi	a0,s2,48
   1a234:	94cfc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a238:	fc9ff06f          	jal	zero,1a200 <dwarf::compilation_unit::get_line_table() const+0x158>
	_M_dispose();
   1a23c:	00093783          	ld	a5,0(s2)
   1a240:	0107b783          	ld	a5,16(a5)
   1a244:	00090513          	addi	a0,s2,0
   1a248:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a24c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a250:	00028797          	auipc	a5,0x28
   1a254:	2307b783          	ld	a5,560(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a258:	0007c783          	lbu	a5,0(a5)
   1a25c:	02078663          	beq	a5,zero,1a288 <dwarf::compilation_unit::get_line_table() const+0x1e0>
    _Atomic_word __result = *__mem;
   1a260:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   1a264:	fff7871b          	addiw	a4,a5,-1
   1a268:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a26c:	00100713          	addi	a4,zero,1
   1a270:	f8e79ce3          	bne	a5,a4,1a208 <dwarf::compilation_unit::get_line_table() const+0x160>
	    _M_destroy();
   1a274:	00093783          	ld	a5,0(s2)
   1a278:	0187b783          	ld	a5,24(a5)
   1a27c:	00090513          	addi	a0,s2,0
   1a280:	000780e7          	jalr	ra,0(a5)
   1a284:	f85ff06f          	jal	zero,1a208 <dwarf::compilation_unit::get_line_table() const+0x160>
      return __exchange_and_add(__mem, __val);
   1a288:	fff00593          	addi	a1,zero,-1
   1a28c:	03490513          	addi	a0,s2,52
   1a290:	8f0fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a294:	00050793          	addi	a5,a0,0
   1a298:	fd5ff06f          	jal	zero,1a26c <dwarf::compilation_unit::get_line_table() const+0x1c4>
   1a29c:	00050a63          	beq	a0,zero,1a2b0 <dwarf::compilation_unit::get_line_table() const+0x208>
   1a2a0:	00048593          	addi	a1,s1,0
   1a2a4:	01810513          	addi	a0,sp,24
   1a2a8:	29d110ef          	jal	ra,2bd44 <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>
   1a2ac:	02c0006f          	jal	zero,1a2d8 <dwarf::compilation_unit::get_line_table() const+0x230>
	: allocator_type(__a), _M_p(__dat) { }
   1a2b0:	02810793          	addi	a5,sp,40
   1a2b4:	00f13c23          	sd	a5,24(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   1a2b8:	00000693          	addi	a3,zero,0
   1a2bc:	0001d617          	auipc	a2,0x1d
   1a2c0:	61c60613          	addi	a2,a2,1564 # 378d8 <typeinfo name for dwarf::expr_context+0xb8>
   1a2c4:	00060593          	addi	a1,a2,0
   1a2c8:	01810513          	addi	a0,sp,24
   1a2cc:	00028317          	auipc	t1,0x28
   1a2d0:	03c33303          	ld	t1,60(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   1a2d4:	000300e7          	jalr	ra,0(t1)
      { return _M_ptr; }
   1a2d8:	00843903          	ld	s2,8(s0)
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1a2dc:	01000613          	addi	a2,zero,16
   1a2e0:	00048593          	addi	a1,s1,0
   1a2e4:	07810513          	addi	a0,sp,120
   1a2e8:	550030ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1a2ec:	07810513          	addi	a0,sp,120
   1a2f0:	1ec060ef          	jal	ra,204dc <dwarf::value::as_sec_offset() const>
   1a2f4:	00050993          	addi	s3,a0,0
   1a2f8:	00843783          	ld	a5,8(s0)
   1a2fc:	0187b783          	ld	a5,24(a5)
   1a300:	0207aa03          	lw	s4,32(a5)
                       m->subsec->addr_size, comp_dir, at_name(d));
   1a304:	00048593          	addi	a1,s1,0
   1a308:	03810513          	addi	a0,sp,56
   1a30c:	001110ef          	jal	ra,2bb0c <dwarf::at_name[abi:cxx11](dwarf::die const&)>
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   1a310:	03810793          	addi	a5,sp,56
   1a314:	01810713          	addi	a4,sp,24
   1a318:	000a0693          	addi	a3,s4,0
   1a31c:	00098613          	addi	a2,s3,0
   1a320:	00810593          	addi	a1,sp,8
   1a324:	06810513          	addi	a0,sp,104
   1a328:	0790d0ef          	jal	ra,27ba0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
      : _M_ptr(__r._M_ptr), _M_refcount()
   1a32c:	06813703          	ld	a4,104(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a330:	07013783          	ld	a5,112(sp)
	__r._M_pi = _M_pi;
   1a334:	06013823          	sd	zero,112(sp)
	__r._M_ptr = nullptr;
   1a338:	06013423          	sd	zero,104(sp)
   1a33c:	12e93423          	sd	a4,296(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1a340:	13093483          	ld	s1,304(s2)
	__r._M_pi = _M_pi;
   1a344:	12f93823          	sd	a5,304(s2)
	if (_M_pi != nullptr)
   1a348:	0a048a63          	beq	s1,zero,1a3fc <dwarf::compilation_unit::get_line_table() const+0x354>
    if (__is_single_threaded())
   1a34c:	00028797          	auipc	a5,0x28
   1a350:	1347b783          	ld	a5,308(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a354:	0007c783          	lbu	a5,0(a5)
   1a358:	06078263          	beq	a5,zero,1a3bc <dwarf::compilation_unit::get_line_table() const+0x314>
    _Atomic_word __result = *__mem;
   1a35c:	0304a783          	lw	a5,48(s1)
    *__mem += __val;
   1a360:	fff7871b          	addiw	a4,a5,-1
   1a364:	02e4a823          	sw	a4,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a368:	00100713          	addi	a4,zero,1
   1a36c:	08e79863          	bne	a5,a4,1a3fc <dwarf::compilation_unit::get_line_table() const+0x354>
	_M_dispose();
   1a370:	0004b783          	ld	a5,0(s1)
   1a374:	0107b783          	ld	a5,16(a5)
   1a378:	00048513          	addi	a0,s1,0
   1a37c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a380:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a384:	00028797          	auipc	a5,0x28
   1a388:	0fc7b783          	ld	a5,252(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a38c:	0007c783          	lbu	a5,0(a5)
   1a390:	10078263          	beq	a5,zero,1a494 <dwarf::compilation_unit::get_line_table() const+0x3ec>
    _Atomic_word __result = *__mem;
   1a394:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1a398:	fff7871b          	addiw	a4,a5,-1
   1a39c:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a3a0:	00100713          	addi	a4,zero,1
   1a3a4:	02e79663          	bne	a5,a4,1a3d0 <dwarf::compilation_unit::get_line_table() const+0x328>
	    _M_destroy();
   1a3a8:	0004b783          	ld	a5,0(s1)
   1a3ac:	0187b783          	ld	a5,24(a5)
   1a3b0:	00048513          	addi	a0,s1,0
   1a3b4:	000780e7          	jalr	ra,0(a5)
   1a3b8:	0180006f          	jal	zero,1a3d0 <dwarf::compilation_unit::get_line_table() const+0x328>
      return __exchange_and_add(__mem, __val);
   1a3bc:	fff00593          	addi	a1,zero,-1
   1a3c0:	03048513          	addi	a0,s1,48
   1a3c4:	fbdfb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a3c8:	00100793          	addi	a5,zero,1
   1a3cc:	faf502e3          	beq	a0,a5,1a370 <dwarf::compilation_unit::get_line_table() const+0x2c8>
	if (_M_pi != nullptr)
   1a3d0:	07013483          	ld	s1,112(sp)
   1a3d4:	02048463          	beq	s1,zero,1a3fc <dwarf::compilation_unit::get_line_table() const+0x354>
    if (__is_single_threaded())
   1a3d8:	00028797          	auipc	a5,0x28
   1a3dc:	0a87b783          	ld	a5,168(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a3e0:	0007c783          	lbu	a5,0(a5)
   1a3e4:	0c078263          	beq	a5,zero,1a4a8 <dwarf::compilation_unit::get_line_table() const+0x400>
    _Atomic_word __result = *__mem;
   1a3e8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1a3ec:	fff5079b          	addiw	a5,a0,-1
   1a3f0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a3f4:	00100793          	addi	a5,zero,1
   1a3f8:	0cf50063          	beq	a0,a5,1a4b8 <dwarf::compilation_unit::get_line_table() const+0x410>
      { return _M_dataplus._M_p; }
   1a3fc:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1a400:	04810793          	addi	a5,sp,72
   1a404:	00f50463          	beq	a0,a5,1a40c <dwarf::compilation_unit::get_line_table() const+0x364>
   1a408:	908fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a40c:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1a410:	02810793          	addi	a5,sp,40
   1a414:	00f50463          	beq	a0,a5,1a41c <dwarf::compilation_unit::get_line_table() const+0x374>
   1a418:	8f8fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1a41c:	01013483          	ld	s1,16(sp)
   1a420:	ca048ae3          	beq	s1,zero,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
    if (__is_single_threaded())
   1a424:	00028797          	auipc	a5,0x28
   1a428:	05c7b783          	ld	a5,92(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a42c:	0007c783          	lbu	a5,0(a5)
   1a430:	0e078463          	beq	a5,zero,1a518 <dwarf::compilation_unit::get_line_table() const+0x470>
    _Atomic_word __result = *__mem;
   1a434:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1a438:	fff5079b          	addiw	a5,a0,-1
   1a43c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1a440:	00100793          	addi	a5,zero,1
   1a444:	c8f518e3          	bne	a0,a5,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
	_M_dispose();
   1a448:	0004b783          	ld	a5,0(s1)
   1a44c:	0107b783          	ld	a5,16(a5)
   1a450:	00048513          	addi	a0,s1,0
   1a454:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a458:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a45c:	00028797          	auipc	a5,0x28
   1a460:	0247b783          	ld	a5,36(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a464:	0007c783          	lbu	a5,0(a5)
   1a468:	0c078063          	beq	a5,zero,1a528 <dwarf::compilation_unit::get_line_table() const+0x480>
    _Atomic_word __result = *__mem;
   1a46c:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1a470:	fff7871b          	addiw	a4,a5,-1
   1a474:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a478:	00100713          	addi	a4,zero,1
   1a47c:	c4e79ce3          	bne	a5,a4,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
	    _M_destroy();
   1a480:	0004b783          	ld	a5,0(s1)
   1a484:	0187b783          	ld	a5,24(a5)
   1a488:	00048513          	addi	a0,s1,0
   1a48c:	000780e7          	jalr	ra,0(a5)
   1a490:	c45ff06f          	jal	zero,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
      return __exchange_and_add(__mem, __val);
   1a494:	fff00593          	addi	a1,zero,-1
   1a498:	03448513          	addi	a0,s1,52
   1a49c:	ee5fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a4a0:	00050793          	addi	a5,a0,0
   1a4a4:	efdff06f          	jal	zero,1a3a0 <dwarf::compilation_unit::get_line_table() const+0x2f8>
   1a4a8:	fff00593          	addi	a1,zero,-1
   1a4ac:	03048513          	addi	a0,s1,48
   1a4b0:	ed1fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a4b4:	f41ff06f          	jal	zero,1a3f4 <dwarf::compilation_unit::get_line_table() const+0x34c>
	_M_dispose();
   1a4b8:	0004b783          	ld	a5,0(s1)
   1a4bc:	0107b783          	ld	a5,16(a5)
   1a4c0:	00048513          	addi	a0,s1,0
   1a4c4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1a4c8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1a4cc:	00028797          	auipc	a5,0x28
   1a4d0:	fb47b783          	ld	a5,-76(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1a4d4:	0007c783          	lbu	a5,0(a5)
   1a4d8:	02078663          	beq	a5,zero,1a504 <dwarf::compilation_unit::get_line_table() const+0x45c>
    _Atomic_word __result = *__mem;
   1a4dc:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   1a4e0:	fff7871b          	addiw	a4,a5,-1
   1a4e4:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1a4e8:	00100713          	addi	a4,zero,1
   1a4ec:	f0e798e3          	bne	a5,a4,1a3fc <dwarf::compilation_unit::get_line_table() const+0x354>
	    _M_destroy();
   1a4f0:	0004b783          	ld	a5,0(s1)
   1a4f4:	0187b783          	ld	a5,24(a5)
   1a4f8:	00048513          	addi	a0,s1,0
   1a4fc:	000780e7          	jalr	ra,0(a5)
   1a500:	efdff06f          	jal	zero,1a3fc <dwarf::compilation_unit::get_line_table() const+0x354>
      return __exchange_and_add(__mem, __val);
   1a504:	fff00593          	addi	a1,zero,-1
   1a508:	03448513          	addi	a0,s1,52
   1a50c:	e75fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a510:	00050793          	addi	a5,a0,0
   1a514:	fd5ff06f          	jal	zero,1a4e8 <dwarf::compilation_unit::get_line_table() const+0x440>
   1a518:	fff00593          	addi	a1,zero,-1
   1a51c:	03048513          	addi	a0,s1,48
   1a520:	e61fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a524:	f1dff06f          	jal	zero,1a440 <dwarf::compilation_unit::get_line_table() const+0x398>
   1a528:	fff00593          	addi	a1,zero,-1
   1a52c:	03448513          	addi	a0,s1,52
   1a530:	e51fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1a534:	00050793          	addi	a5,a0,0
   1a538:	f41ff06f          	jal	zero,1a478 <dwarf::compilation_unit::get_line_table() const+0x3d0>
	if (_M_pi != nullptr)
   1a53c:	01013503          	ld	a0,16(sp)
   1a540:	b8050ae3          	beq	a0,zero,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
	  _M_pi->_M_release();
   1a544:	00028317          	auipc	t1,0x28
   1a548:	e8433303          	ld	t1,-380(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1a54c:	000300e7          	jalr	ra,0(t1)
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   1a550:	b85ff06f          	jal	zero,1a0d4 <dwarf::compilation_unit::get_line_table() const+0x2c>
    } catch (format_error &e) {
   1a554:	00100793          	addi	a5,zero,1
   1a558:	02f58263          	beq	a1,a5,1a57c <dwarf::compilation_unit::get_line_table() const+0x4d4>
   1a55c:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   1a560:	01013503          	ld	a0,16(sp)
   1a564:	00050863          	beq	a0,zero,1a574 <dwarf::compilation_unit::get_line_table() const+0x4cc>
	  _M_pi->_M_release();
   1a568:	00028317          	auipc	t1,0x28
   1a56c:	e6033303          	ld	t1,-416(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1a570:	000300e7          	jalr	ra,0(t1)
   1a574:	00040513          	addi	a0,s0,0
   1a578:	978fc0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   1a57c:	e85fb0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
    }
   1a580:	910fc0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1a584:	fb9ff06f          	jal	zero,1a53c <dwarf::compilation_unit::get_line_table() const+0x494>
      { return _M_dataplus._M_p; }
   1a588:	00050413          	addi	s0,a0,0
   1a58c:	03813503          	ld	a0,56(sp)
	if (!_M_is_local())
   1a590:	04810793          	addi	a5,sp,72
   1a594:	00f50463          	beq	a0,a5,1a59c <dwarf::compilation_unit::get_line_table() const+0x4f4>
   1a598:	f79fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a59c:	01813503          	ld	a0,24(sp)
	if (!_M_is_local())
   1a5a0:	02810793          	addi	a5,sp,40
   1a5a4:	faf50ee3          	beq	a0,a5,1a560 <dwarf::compilation_unit::get_line_table() const+0x4b8>
   1a5a8:	f69fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1a5ac:	fb5ff06f          	jal	zero,1a560 <dwarf::compilation_unit::get_line_table() const+0x4b8>
      { return _M_dataplus._M_p; }
   1a5b0:	00050413          	addi	s0,a0,0
   1a5b4:	fe9ff06f          	jal	zero,1a59c <dwarf::compilation_unit::get_line_table() const+0x4f4>
	if (_M_pi != nullptr)
   1a5b8:	00050413          	addi	s0,a0,0
   1a5bc:	fa5ff06f          	jal	zero,1a560 <dwarf::compilation_unit::get_line_table() const+0x4b8>

000000000001a5c0 <dwarf::unit::get_abbrev(unsigned long) const>:
const abbrev_entry &unit::get_abbrev(abbrev_code acode) const {
   1a5c0:	f9010113          	addi	sp,sp,-112
   1a5c4:	06113423          	sd	ra,104(sp)
   1a5c8:	06813023          	sd	s0,96(sp)
   1a5cc:	04913c23          	sd	s1,88(sp)
   1a5d0:	00050413          	addi	s0,a0,0
   1a5d4:	00b13423          	sd	a1,8(sp)
      { return _M_ptr; }
   1a5d8:	00853503          	ld	a0,8(a0)
  if (!m->have_abbrevs)
   1a5dc:	13854783          	lbu	a5,312(a0)
   1a5e0:	04078e63          	beq	a5,zero,1a63c <dwarf::unit::get_abbrev(unsigned long) const+0x7c>
   1a5e4:	00843703          	ld	a4,8(s0)
      : _M_current(__i) { }
   1a5e8:	14073503          	ld	a0,320(a4)
   1a5ec:	14873783          	ld	a5,328(a4)
  if (!m->abbrevs_vec.empty()) {
   1a5f0:	04a78a63          	beq	a5,a0,1a644 <dwarf::unit::get_abbrev(unsigned long) const+0x84>
    if (acode >= m->abbrevs_vec.size())
   1a5f4:	00813703          	ld	a4,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a5f8:	40a787b3          	sub	a5,a5,a0
   1a5fc:	4037d793          	srai	a5,a5,0x3
   1a600:	0001c697          	auipc	a3,0x1c
   1a604:	4c86b683          	ld	a3,1224(a3) # 36ac8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1a608:	02d787b3          	mul	a5,a5,a3
   1a60c:	04f77e63          	bgeu	a4,a5,1a668 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
	return *(this->_M_impl._M_start + __n);
   1a610:	00271793          	slli	a5,a4,0x2
   1a614:	00e787b3          	add	a5,a5,a4
   1a618:	00379793          	slli	a5,a5,0x3
   1a61c:	00f50533          	add	a0,a0,a5
    if (entry.code == 0)
   1a620:	00053783          	ld	a5,0(a0)
   1a624:	04078263          	beq	a5,zero,1a668 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
}
   1a628:	06813083          	ld	ra,104(sp)
   1a62c:	06013403          	ld	s0,96(sp)
   1a630:	05813483          	ld	s1,88(sp)
   1a634:	07010113          	addi	sp,sp,112
   1a638:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1a63c:	ca8ff0ef          	jal	ra,19ae4 <dwarf::unit::impl::force_abbrevs()>
   1a640:	fa5ff06f          	jal	zero,1a5e4 <dwarf::unit::get_abbrev(unsigned long) const+0x24>
      if (size() <= __small_size_threshold())
   1a644:	17073783          	ld	a5,368(a4)
   1a648:	04079263          	bne	a5,zero,1a68c <dwarf::unit::get_abbrev(unsigned long) const+0xcc>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a64c:	16873503          	ld	a0,360(a4)
	  for (auto __it = begin(); __it != end(); ++__it)
   1a650:	00050c63          	beq	a0,zero,1a668 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
   1a654:	00813703          	ld	a4,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   1a658:	00853783          	ld	a5,8(a0)
   1a65c:	04f70e63          	beq	a4,a5,1a6b8 <dwarf::unit::get_abbrev(unsigned long) const+0xf8>
   1a660:	00053503          	ld	a0,0(a0)
	  for (auto __it = begin(); __it != end(); ++__it)
   1a664:	fe051ae3          	bne	a0,zero,1a658 <dwarf::unit::get_abbrev(unsigned long) const+0x98>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   1a668:	01000513          	addi	a0,zero,16
   1a66c:	db5fb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1a670:	00050493          	addi	s1,a0,0
   1a674:	00813583          	ld	a1,8(sp)
   1a678:	01010513          	addi	a0,sp,16
   1a67c:	00028317          	auipc	t1,0x28
   1a680:	c7c33303          	ld	t1,-900(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   1a684:	000300e7          	jalr	ra,0(t1)
   1a688:	0380006f          	jal	zero,1a6c0 <dwarf::unit::get_abbrev(unsigned long) const+0x100>
	return _M_hash()(__k);
   1a68c:	00813683          	ld	a3,8(sp)
    { return __num % __den; }
   1a690:	16073583          	ld	a1,352(a4)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a694:	00810613          	addi	a2,sp,8
   1a698:	02b6f5b3          	remu	a1,a3,a1
   1a69c:	15870513          	addi	a0,a4,344
   1a6a0:	00028317          	auipc	t1,0x28
   1a6a4:	ea833303          	ld	t1,-344(t1) # 42548 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26558>
   1a6a8:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1a6ac:	fa050ee3          	beq	a0,zero,1a668 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1a6b0:	00053503          	ld	a0,0(a0)
    if (it == m->abbrevs_map.end())
   1a6b4:	fa050ae3          	beq	a0,zero,1a668 <dwarf::unit::get_abbrev(unsigned long) const+0xa8>
    return it->second;
   1a6b8:	01050513          	addi	a0,a0,16
   1a6bc:	f6dff06f          	jal	zero,1a628 <dwarf::unit::get_abbrev(unsigned long) const+0x68>
    { return std::move(__rhs.insert(0, __lhs)); }
   1a6c0:	0001c617          	auipc	a2,0x1c
   1a6c4:	1c860613          	addi	a2,a2,456 # 36888 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xe0>
   1a6c8:	00000593          	addi	a1,zero,0
   1a6cc:	01010513          	addi	a0,sp,16
   1a6d0:	cc1fb0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1a6d4:	00050593          	addi	a1,a0,0
   1a6d8:	03010413          	addi	s0,sp,48
   1a6dc:	00040513          	addi	a0,s0,0
   1a6e0:	d91fb0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1a6e4:	00040593          	addi	a1,s0,0
   1a6e8:	00048513          	addi	a0,s1,0
   1a6ec:	eb5fb0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1a6f0:	00028797          	auipc	a5,0x28
   1a6f4:	e687b783          	ld	a5,-408(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   1a6f8:	01078793          	addi	a5,a5,16
   1a6fc:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1a700:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1a704:	04010793          	addi	a5,sp,64
   1a708:	00f50463          	beq	a0,a5,1a710 <dwarf::unit::get_abbrev(unsigned long) const+0x150>
   1a70c:	e05fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a710:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1a714:	02010793          	addi	a5,sp,32
   1a718:	00f50463          	beq	a0,a5,1a720 <dwarf::unit::get_abbrev(unsigned long) const+0x160>
   1a71c:	df5fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   1a720:	00028617          	auipc	a2,0x28
   1a724:	c6063603          	ld	a2,-928(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   1a728:	00028597          	auipc	a1,0x28
   1a72c:	b885b583          	ld	a1,-1144(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1a730:	00048513          	addi	a0,s1,0
   1a734:	f8dfb0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1a738:	00050413          	addi	s0,a0,0
   1a73c:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   1a740:	04010793          	addi	a5,sp,64
   1a744:	00f50463          	beq	a0,a5,1a74c <dwarf::unit::get_abbrev(unsigned long) const+0x18c>
   1a748:	dc9fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1a74c:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   1a750:	02010793          	addi	a5,sp,32
   1a754:	00f50463          	beq	a0,a5,1a75c <dwarf::unit::get_abbrev(unsigned long) const+0x19c>
   1a758:	db9fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1a75c:	00048513          	addi	a0,s1,0
   1a760:	d71fb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1a764:	00040513          	addi	a0,s0,0
   1a768:	f89fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1a76c:	00050413          	addi	s0,a0,0
   1a770:	fddff06f          	jal	zero,1a74c <dwarf::unit::get_abbrev(unsigned long) const+0x18c>
   1a774:	00050413          	addi	s0,a0,0
   1a778:	fe5ff06f          	jal	zero,1a75c <dwarf::unit::get_abbrev(unsigned long) const+0x19c>

000000000001a77c <dwarf::type_unit::type() const>:

const die &type_unit::type() const {
   1a77c:	f5010113          	addi	sp,sp,-176
   1a780:	0a113423          	sd	ra,168(sp)
   1a784:	0a813023          	sd	s0,160(sp)
   1a788:	08913c23          	sd	s1,152(sp)
   1a78c:	09213823          	sd	s2,144(sp)
   1a790:	09313423          	sd	s3,136(sp)
   1a794:	09413023          	sd	s4,128(sp)
   1a798:	07513c23          	sd	s5,120(sp)
   1a79c:	07613823          	sd	s6,112(sp)
   1a7a0:	00050493          	addi	s1,a0,0
   1a7a4:	00853503          	ld	a0,8(a0)
  if (!m->type.valid()) {
   1a7a8:	0c853783          	ld	a5,200(a0)
   1a7ac:	02078a63          	beq	a5,zero,1a7e0 <dwarf::type_unit::type() const+0x64>
    m->force_abbrevs();
    m->type = die(this);
    m->type.read(m->type_offset);
  }
  return m->type;
   1a7b0:	0084b503          	ld	a0,8(s1)
   1a7b4:	0b850513          	addi	a0,a0,184
}
   1a7b8:	0a813083          	ld	ra,168(sp)
   1a7bc:	0a013403          	ld	s0,160(sp)
   1a7c0:	09813483          	ld	s1,152(sp)
   1a7c4:	09013903          	ld	s2,144(sp)
   1a7c8:	08813983          	ld	s3,136(sp)
   1a7cc:	08013a03          	ld	s4,128(sp)
   1a7d0:	07813a83          	ld	s5,120(sp)
   1a7d4:	07013b03          	ld	s6,112(sp)
   1a7d8:	0b010113          	addi	sp,sp,176
   1a7dc:	00008067          	jalr	zero,0(ra)
    m->force_abbrevs();
   1a7e0:	b04ff0ef          	jal	ra,19ae4 <dwarf::unit::impl::force_abbrevs()>
   1a7e4:	0084b403          	ld	s0,8(s1)
    m->type = die(this);
   1a7e8:	00048593          	addi	a1,s1,0
   1a7ec:	00010513          	addi	a0,sp,0
   1a7f0:	275020ef          	jal	ra,1d264 <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   1a7f4:	00012783          	lw	a5,0(sp)
   1a7f8:	0af42c23          	sw	a5,184(s0)
   1a7fc:	00813783          	ld	a5,8(sp)
   1a800:	0cf43023          	sd	a5,192(s0)
   1a804:	01013783          	ld	a5,16(sp)
   1a808:	0cf43423          	sd	a5,200(s0)
   1a80c:	01813783          	ld	a5,24(sp)
   1a810:	0cf43823          	sd	a5,208(s0)
  size_type size() const { return end - base; }
   1a814:	05813983          	ld	s3,88(sp)
   1a818:	05013783          	ld	a5,80(sp)
   1a81c:	40f989b3          	sub	s3,s3,a5
   1a820:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   1a824:	10843683          	ld	a3,264(s0)
   1a828:	11043783          	ld	a5,272(s0)
   1a82c:	00f6fa63          	bgeu	a3,a5,1a840 <dwarf::type_unit::type() const+0xc4>
   1a830:	00068793          	addi	a5,a3,0
   1a834:	00878793          	addi	a5,a5,8
   1a838:	11043703          	ld	a4,272(s0)
   1a83c:	fee7ece3          	bltu	a5,a4,1a834 <dwarf::type_unit::type() const+0xb8>
    end = base;
   1a840:	10d43823          	sd	a3,272(s0)
    if (n <= (size_type)(cap - base))
   1a844:	11843503          	ld	a0,280(s0)
   1a848:	40d50533          	sub	a0,a0,a3
   1a84c:	07357863          	bgeu	a0,s3,1a8bc <dwarf::type_unit::type() const+0x140>
   1a850:	40355513          	srai	a0,a0,0x3
   1a854:	00051463          	bne	a0,zero,1a85c <dwarf::type_unit::type() const+0xe0>
   1a858:	00100513          	addi	a0,zero,1
    while (target < n)
   1a85c:	01257663          	bgeu	a0,s2,1a868 <dwarf::type_unit::type() const+0xec>
      target <<= 1;
   1a860:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1a864:	ff256ee3          	bltu	a0,s2,1a860 <dwarf::type_unit::type() const+0xe4>
    char *newbuf = new char[sizeof(T[target])];
   1a868:	00351a13          	slli	s4,a0,0x3
   1a86c:	000a0513          	addi	a0,s4,0
   1a870:	ac1fb0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1a874:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   1a878:	10843503          	ld	a0,264(s0)
    for (; src < end; src++, dest++) {
   1a87c:	11043783          	ld	a5,272(s0)
   1a880:	0cf57063          	bgeu	a0,a5,1a940 <dwarf::type_unit::type() const+0x1c4>
    T *src = base, *dest = (T *)newbuf;
   1a884:	00050793          	addi	a5,a0,0
   1a888:	000b0a93          	addi	s5,s6,0
    for (; src < end; src++, dest++) {
   1a88c:	00878793          	addi	a5,a5,8
   1a890:	008a8a93          	addi	s5,s5,8
   1a894:	11043703          	ld	a4,272(s0)
   1a898:	fee7eae3          	bltu	a5,a4,1a88c <dwarf::type_unit::type() const+0x110>
   1a89c:	0d840793          	addi	a5,s0,216
    if ((char *)base != buf)
   1a8a0:	00f50663          	beq	a0,a5,1a8ac <dwarf::type_unit::type() const+0x130>
      delete[] (char *)base;
   1a8a4:	00050463          	beq	a0,zero,1a8ac <dwarf::type_unit::type() const+0x130>
   1a8a8:	d19fb0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1a8ac:	11643423          	sd	s6,264(s0)
    end = dest;
   1a8b0:	11543823          	sd	s5,272(s0)
    cap = base + target;
   1a8b4:	014b0b33          	add	s6,s6,s4
   1a8b8:	11643c23          	sd	s6,280(s0)
    for (size_type i = 0; i < osize; i++)
   1a8bc:	02090663          	beq	s2,zero,1a8e8 <dwarf::type_unit::type() const+0x16c>
   1a8c0:	00000793          	addi	a5,zero,0
   1a8c4:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1a8c8:	05013703          	ld	a4,80(sp)
   1a8cc:	00d70733          	add	a4,a4,a3
   1a8d0:	00073603          	ld	a2,0(a4)
   1a8d4:	10843703          	ld	a4,264(s0)
   1a8d8:	00d70733          	add	a4,a4,a3
   1a8dc:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1a8e0:	00178793          	addi	a5,a5,1
   1a8e4:	fef910e3          	bne	s2,a5,1a8c4 <dwarf::type_unit::type() const+0x148>
    end = base + osize;
   1a8e8:	10843783          	ld	a5,264(s0)
   1a8ec:	013787b3          	add	a5,a5,s3
   1a8f0:	10f43823          	sd	a5,272(s0)
   1a8f4:	06813783          	ld	a5,104(sp)
   1a8f8:	12f43023          	sd	a5,288(s0)
    for (T *p = base; p < end; ++p)
   1a8fc:	05013503          	ld	a0,80(sp)
   1a900:	05813783          	ld	a5,88(sp)
   1a904:	00f57a63          	bgeu	a0,a5,1a918 <dwarf::type_unit::type() const+0x19c>
   1a908:	00050793          	addi	a5,a0,0
   1a90c:	00878793          	addi	a5,a5,8
   1a910:	05813703          	ld	a4,88(sp)
   1a914:	fee7ece3          	bltu	a5,a4,1a90c <dwarf::type_unit::type() const+0x190>
    end = base;
   1a918:	04a13c23          	sd	a0,88(sp)
    if ((char *)base != buf)
   1a91c:	02010793          	addi	a5,sp,32
   1a920:	00f50663          	beq	a0,a5,1a92c <dwarf::type_unit::type() const+0x1b0>
      delete[] (char *)base;
   1a924:	00050463          	beq	a0,zero,1a92c <dwarf::type_unit::type() const+0x1b0>
   1a928:	c99fb0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1a92c:	0084b503          	ld	a0,8(s1)
    m->type.read(m->type_offset);
   1a930:	04053583          	ld	a1,64(a0)
   1a934:	0b850513          	addi	a0,a0,184
   1a938:	185020ef          	jal	ra,1d2bc <dwarf::die::read(unsigned long)>
   1a93c:	e75ff06f          	jal	zero,1a7b0 <dwarf::type_unit::type() const+0x34>
    T *src = base, *dest = (T *)newbuf;
   1a940:	000b0a93          	addi	s5,s6,0
   1a944:	f59ff06f          	jal	zero,1a89c <dwarf::type_unit::type() const+0x120>
class die {
   1a948:	00050413          	addi	s0,a0,0
   1a94c:	02010513          	addi	a0,sp,32
   1a950:	00028317          	auipc	t1,0x28
   1a954:	a9833303          	ld	t1,-1384(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1a958:	000300e7          	jalr	ra,0(t1)
   1a95c:	00040513          	addi	a0,s0,0
   1a960:	d91fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001a964 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1a964:	00008067          	jalr	zero,0(ra)

000000000001a968 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1a968:	00008067          	jalr	zero,0(ra)

000000000001a96c <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1a96c:	00008067          	jalr	zero,0(ra)

000000000001a970 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      }
   1a970:	00008067          	jalr	zero,0(ra)

000000000001a974 <dwarf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   1a974:	ff010113          	addi	sp,sp,-16
   1a978:	00113423          	sd	ra,8(sp)
   1a97c:	00028797          	auipc	a5,0x28
   1a980:	bdc7b783          	ld	a5,-1060(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   1a984:	01078793          	addi	a5,a5,16
   1a988:	00f53023          	sd	a5,0(a0)
   1a98c:	bb5fb0ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   1a990:	00813083          	ld	ra,8(sp)
   1a994:	01010113          	addi	sp,sp,16
   1a998:	00008067          	jalr	zero,0(ra)

000000000001a99c <dwarf::format_error::~format_error()>:
   1a99c:	ff010113          	addi	sp,sp,-16
   1a9a0:	00113423          	sd	ra,8(sp)
   1a9a4:	00813023          	sd	s0,0(sp)
   1a9a8:	00050413          	addi	s0,a0,0
   1a9ac:	00028797          	auipc	a5,0x28
   1a9b0:	bac7b783          	ld	a5,-1108(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   1a9b4:	01078793          	addi	a5,a5,16
   1a9b8:	00f53023          	sd	a5,0(a0)
   1a9bc:	b85fb0ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   1a9c0:	00040513          	addi	a0,s0,0
   1a9c4:	b4dfb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1a9c8:	00813083          	ld	ra,8(sp)
   1a9cc:	00013403          	ld	s0,0(sp)
   1a9d0:	01010113          	addi	sp,sp,16
   1a9d4:	00008067          	jalr	zero,0(ra)

000000000001a9d8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1a9d8:	ff010113          	addi	sp,sp,-16
   1a9dc:	00113423          	sd	ra,8(sp)
   1a9e0:	b31fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1a9e4:	00813083          	ld	ra,8(sp)
   1a9e8:	01010113          	addi	sp,sp,16
   1a9ec:	00008067          	jalr	zero,0(ra)

000000000001a9f0 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1a9f0:	ff010113          	addi	sp,sp,-16
   1a9f4:	00113423          	sd	ra,8(sp)
   1a9f8:	b19fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1a9fc:	00813083          	ld	ra,8(sp)
   1aa00:	01010113          	addi	sp,sp,16
   1aa04:	00008067          	jalr	zero,0(ra)

000000000001aa08 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1aa08:	ff010113          	addi	sp,sp,-16
   1aa0c:	00113423          	sd	ra,8(sp)
   1aa10:	b01fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1aa14:	00813083          	ld	ra,8(sp)
   1aa18:	01010113          	addi	sp,sp,16
   1aa1c:	00008067          	jalr	zero,0(ra)

000000000001aa20 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   1aa20:	fe010113          	addi	sp,sp,-32
   1aa24:	00113c23          	sd	ra,24(sp)
   1aa28:	00813823          	sd	s0,16(sp)
   1aa2c:	00913423          	sd	s1,8(sp)
   1aa30:	01213023          	sd	s2,0(sp)
   1aa34:	00050913          	addi	s2,a0,0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1aa38:	00053403          	ld	s0,0(a0)
   1aa3c:	00853483          	ld	s1,8(a0)
   1aa40:	00940e63          	beq	s0,s1,1aa5c <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x3c>
      __pointer->~_Tp();
   1aa44:	00043783          	ld	a5,0(s0)
   1aa48:	0007b783          	ld	a5,0(a5)
   1aa4c:	00040513          	addi	a0,s0,0
   1aa50:	000780e7          	jalr	ra,0(a5)
	  for (; __first != __last; ++__first)
   1aa54:	01840413          	addi	s0,s0,24
   1aa58:	fe8496e3          	bne	s1,s0,1aa44 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x24>
	_M_deallocate(_M_impl._M_start,
   1aa5c:	00093503          	ld	a0,0(s2)
	if (__p)
   1aa60:	00050463          	beq	a0,zero,1aa68 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x48>
   1aa64:	aadfb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   1aa68:	01813083          	ld	ra,24(sp)
   1aa6c:	01013403          	ld	s0,16(sp)
   1aa70:	00813483          	ld	s1,8(sp)
   1aa74:	00013903          	ld	s2,0(sp)
   1aa78:	02010113          	addi	sp,sp,32
   1aa7c:	00008067          	jalr	zero,0(ra)

000000000001aa80 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1aa80:	ff010113          	addi	sp,sp,-16
   1aa84:	00113423          	sd	ra,8(sp)
   1aa88:	a89fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   1aa8c:	00813083          	ld	ra,8(sp)
   1aa90:	01010113          	addi	sp,sp,16
   1aa94:	00008067          	jalr	zero,0(ra)

000000000001aa98 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1aa98:	ff010113          	addi	sp,sp,-16
   1aa9c:	00113423          	sd	ra,8(sp)
   1aaa0:	a71fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   1aaa4:	00813083          	ld	ra,8(sp)
   1aaa8:	01010113          	addi	sp,sp,16
   1aaac:	00008067          	jalr	zero,0(ra)

000000000001aab0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1aab0:	ff010113          	addi	sp,sp,-16
   1aab4:	00113423          	sd	ra,8(sp)
   1aab8:	a59fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   1aabc:	00813083          	ld	ra,8(sp)
   1aac0:	01010113          	addi	sp,sp,16
   1aac4:	00008067          	jalr	zero,0(ra)

000000000001aac8 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1aac8:	ff010113          	addi	sp,sp,-16
   1aacc:	00113423          	sd	ra,8(sp)
   1aad0:	00813023          	sd	s0,0(sp)
   1aad4:	03850413          	addi	s0,a0,56
	    ||
   1aad8:	00028797          	auipc	a5,0x28
   1aadc:	a607b783          	ld	a5,-1440(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   1aae0:	02f58c63          	beq	a1,a5,1ab18 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1aae4:	0085b503          	ld	a0,8(a1)
   1aae8:	00028797          	auipc	a5,0x28
   1aaec:	9287b783          	ld	a5,-1752(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   1aaf0:	02f50463          	beq	a0,a5,1ab18 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1aaf4:	00054703          	lbu	a4,0(a0)
   1aaf8:	02a00793          	addi	a5,zero,42
   1aafc:	02f70863          	beq	a4,a5,1ab2c <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1ab00:	00028597          	auipc	a1,0x28
   1ab04:	9105b583          	ld	a1,-1776(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   1ab08:	859fb0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   1ab0c:	00153513          	sltiu	a0,a0,1
   1ab10:	40a00533          	sub	a0,zero,a0
   1ab14:	00a47433          	and	s0,s0,a0
      }
   1ab18:	00040513          	addi	a0,s0,0
   1ab1c:	00813083          	ld	ra,8(sp)
   1ab20:	00013403          	ld	s0,0(sp)
   1ab24:	01010113          	addi	sp,sp,16
   1ab28:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1ab2c:	00000413          	addi	s0,zero,0
   1ab30:	fe9ff06f          	jal	zero,1ab18 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001ab34 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1ab34:	ff010113          	addi	sp,sp,-16
   1ab38:	00113423          	sd	ra,8(sp)
   1ab3c:	00813023          	sd	s0,0(sp)
   1ab40:	03850413          	addi	s0,a0,56
	    ||
   1ab44:	00028797          	auipc	a5,0x28
   1ab48:	9f47b783          	ld	a5,-1548(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   1ab4c:	02f58c63          	beq	a1,a5,1ab84 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1ab50:	0085b503          	ld	a0,8(a1)
   1ab54:	00028797          	auipc	a5,0x28
   1ab58:	8bc7b783          	ld	a5,-1860(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   1ab5c:	02f50463          	beq	a0,a5,1ab84 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1ab60:	00054703          	lbu	a4,0(a0)
   1ab64:	02a00793          	addi	a5,zero,42
   1ab68:	02f70863          	beq	a4,a5,1ab98 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1ab6c:	00028597          	auipc	a1,0x28
   1ab70:	8a45b583          	ld	a1,-1884(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   1ab74:	fecfb0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   1ab78:	00153513          	sltiu	a0,a0,1
   1ab7c:	40a00533          	sub	a0,zero,a0
   1ab80:	00a47433          	and	s0,s0,a0
      }
   1ab84:	00040513          	addi	a0,s0,0
   1ab88:	00813083          	ld	ra,8(sp)
   1ab8c:	00013403          	ld	s0,0(sp)
   1ab90:	01010113          	addi	sp,sp,16
   1ab94:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1ab98:	00000413          	addi	s0,zero,0
   1ab9c:	fe9ff06f          	jal	zero,1ab84 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001aba0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   1aba0:	ff010113          	addi	sp,sp,-16
   1aba4:	00113423          	sd	ra,8(sp)
   1aba8:	00813023          	sd	s0,0(sp)
   1abac:	03850413          	addi	s0,a0,56
	    ||
   1abb0:	00028797          	auipc	a5,0x28
   1abb4:	9887b783          	ld	a5,-1656(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   1abb8:	02f58c63          	beq	a1,a5,1abf0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   1abbc:	0085b503          	ld	a0,8(a1)
   1abc0:	00028797          	auipc	a5,0x28
   1abc4:	8507b783          	ld	a5,-1968(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   1abc8:	02f50463          	beq	a0,a5,1abf0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   1abcc:	00054703          	lbu	a4,0(a0)
   1abd0:	02a00793          	addi	a5,zero,42
   1abd4:	02f70863          	beq	a4,a5,1ac04 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   1abd8:	00028597          	auipc	a1,0x28
   1abdc:	8385b583          	ld	a1,-1992(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   1abe0:	f80fb0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   1abe4:	00153513          	sltiu	a0,a0,1
   1abe8:	40a00533          	sub	a0,zero,a0
   1abec:	00a47433          	and	s0,s0,a0
      }
   1abf0:	00040513          	addi	a0,s0,0
   1abf4:	00813083          	ld	ra,8(sp)
   1abf8:	00013403          	ld	s0,0(sp)
   1abfc:	01010113          	addi	sp,sp,16
   1ac00:	00008067          	jalr	zero,0(ra)
	return nullptr;
   1ac04:	00000413          	addi	s0,zero,0
   1ac08:	fe9ff06f          	jal	zero,1abf0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000001ac0c <std::__cxx11::to_string(int)>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
   1ac0c:	fd010113          	addi	sp,sp,-48
   1ac10:	02113423          	sd	ra,40(sp)
   1ac14:	02813023          	sd	s0,32(sp)
   1ac18:	00913c23          	sd	s1,24(sp)
   1ac1c:	01213823          	sd	s2,16(sp)
   1ac20:	01313423          	sd	s3,8(sp)
   1ac24:	00050913          	addi	s2,a0,0
    const bool __neg = __val < 0;
   1ac28:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   1ac2c:	0005849b          	addiw	s1,a1,0
   1ac30:	0605c863          	blt	a1,zero,1aca0 <std::__cxx11::to_string(int)+0x94>
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
   1ac34:	00900793          	addi	a5,zero,9
   1ac38:	1c97f063          	bgeu	a5,s1,1adf8 <std::__cxx11::to_string(int)+0x1ec>
	  if (__value < __b2) return __n + 1;
   1ac3c:	06300793          	addi	a5,zero,99
   1ac40:	0697f463          	bgeu	a5,s1,1aca8 <std::__cxx11::to_string(int)+0x9c>
	  if (__value < __b3) return __n + 2;
   1ac44:	3e700793          	addi	a5,zero,999
   1ac48:	0a97f063          	bgeu	a5,s1,1ace8 <std::__cxx11::to_string(int)+0xdc>
	  if (__value < __b4) return __n + 3;
   1ac4c:	02049713          	slli	a4,s1,0x20
   1ac50:	02075713          	srli	a4,a4,0x20
   1ac54:	000027b7          	lui	a5,0x2
   1ac58:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   1ac5c:	1897fa63          	bgeu	a5,s1,1adf0 <std::__cxx11::to_string(int)+0x1e4>
      unsigned __n = 1;
   1ac60:	00100413          	addi	s0,zero,1
	  __value /= __b4;
   1ac64:	000026b7          	lui	a3,0x2
   1ac68:	71068593          	addi	a1,a3,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   1ac6c:	00900613          	addi	a2,zero,9
	  if (__value < __b2) return __n + 1;
   1ac70:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   1ac74:	3e700813          	addi	a6,zero,999
	  if (__value < __b4) return __n + 3;
   1ac78:	00078693          	addi	a3,a5,0
	  __value /= __b4;
   1ac7c:	02b75733          	divu	a4,a4,a1
   1ac80:	0007079b          	addiw	a5,a4,0
	  __n += 4;
   1ac84:	0044041b          	addiw	s0,s0,4
	  if (__value < (unsigned)__base) return __n;
   1ac88:	06f67463          	bgeu	a2,a5,1acf0 <std::__cxx11::to_string(int)+0xe4>
	  if (__value < __b2) return __n + 1;
   1ac8c:	02f57063          	bgeu	a0,a5,1acac <std::__cxx11::to_string(int)+0xa0>
	  if (__value < __b3) return __n + 2;
   1ac90:	04f87e63          	bgeu	a6,a5,1acec <std::__cxx11::to_string(int)+0xe0>
	  if (__value < __b4) return __n + 3;
   1ac94:	fef6e4e3          	bltu	a3,a5,1ac7c <std::__cxx11::to_string(int)+0x70>
   1ac98:	0034041b          	addiw	s0,s0,3
   1ac9c:	0540006f          	jal	zero,1acf0 <std::__cxx11::to_string(int)+0xe4>
   1aca0:	40b004bb          	subw	s1,zero,a1
   1aca4:	f91ff06f          	jal	zero,1ac34 <std::__cxx11::to_string(int)+0x28>
      unsigned __n = 1;
   1aca8:	00100413          	addi	s0,zero,1
	  if (__value < __b2) return __n + 1;
   1acac:	0014041b          	addiw	s0,s0,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1acb0:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1acb4:	00f93023          	sd	a5,0(s2)
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
   1acb8:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1acbc:	02d00613          	addi	a2,zero,45
   1acc0:	02059593          	slli	a1,a1,0x20
   1acc4:	0205d593          	srli	a1,a1,0x20
   1acc8:	00090513          	addi	a0,s2,0
   1accc:	8a5fb0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1acd0:	00093583          	ld	a1,0(s2)
   1acd4:	013585b3          	add	a1,a1,s3
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
   1acd8:	06300793          	addi	a5,zero,99
   1acdc:	0a97fa63          	bgeu	a5,s1,1ad90 <std::__cxx11::to_string(int)+0x184>
      unsigned __pos = __len - 1;
   1ace0:	fff4071b          	addiw	a4,s0,-1
   1ace4:	0380006f          	jal	zero,1ad1c <std::__cxx11::to_string(int)+0x110>
      unsigned __n = 1;
   1ace8:	00100413          	addi	s0,zero,1
	  if (__value < __b3) return __n + 2;
   1acec:	0024041b          	addiw	s0,s0,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1acf0:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   1acf4:	00f93023          	sd	a5,0(s2)
    string __str(__neg + __len, '-');
   1acf8:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1acfc:	02d00613          	addi	a2,zero,45
   1ad00:	02059593          	slli	a1,a1,0x20
   1ad04:	0205d593          	srli	a1,a1,0x20
   1ad08:	00090513          	addi	a0,s2,0
   1ad0c:	865fb0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1ad10:	00093583          	ld	a1,0(s2)
   1ad14:	013585b3          	add	a1,a1,s3
      unsigned __pos = __len - 1;
   1ad18:	fff4071b          	addiw	a4,s0,-1
	{
	  auto const __num = (__val % 100) * 2;
   1ad1c:	06400813          	addi	a6,zero,100
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   1ad20:	00027517          	auipc	a0,0x27
   1ad24:	64053503          	ld	a0,1600(a0) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
      while (__val >= 100)
   1ad28:	00002337          	lui	t1,0x2
   1ad2c:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   1ad30:	0304f7bb          	remuw	a5,s1,a6
   1ad34:	0017979b          	slliw	a5,a5,0x1
   1ad38:	0004889b          	addiw	a7,s1,0
	  __val /= 100;
   1ad3c:	0304d4bb          	divuw	s1,s1,a6
	  __first[__pos] = __digits[__num + 1];
   1ad40:	02071613          	slli	a2,a4,0x20
   1ad44:	02065613          	srli	a2,a2,0x20
   1ad48:	00c58633          	add	a2,a1,a2
   1ad4c:	0017869b          	addiw	a3,a5,1
   1ad50:	02069693          	slli	a3,a3,0x20
   1ad54:	0206d693          	srli	a3,a3,0x20
   1ad58:	00d506b3          	add	a3,a0,a3
   1ad5c:	0006c683          	lbu	a3,0(a3)
   1ad60:	00d60023          	sb	a3,0(a2)
	  __first[__pos - 1] = __digits[__num];
   1ad64:	fff7069b          	addiw	a3,a4,-1
   1ad68:	02069693          	slli	a3,a3,0x20
   1ad6c:	0206d693          	srli	a3,a3,0x20
   1ad70:	00d586b3          	add	a3,a1,a3
   1ad74:	02079793          	slli	a5,a5,0x20
   1ad78:	0207d793          	srli	a5,a5,0x20
   1ad7c:	00f507b3          	add	a5,a0,a5
   1ad80:	0007c783          	lbu	a5,0(a5)
   1ad84:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   1ad88:	ffe7071b          	addiw	a4,a4,-2
      while (__val >= 100)
   1ad8c:	fb1362e3          	bltu	t1,a7,1ad30 <std::__cxx11::to_string(int)+0x124>
	}
      if (__val >= 10)
   1ad90:	00900793          	addi	a5,zero,9
   1ad94:	0697f663          	bgeu	a5,s1,1ae00 <std::__cxx11::to_string(int)+0x1f4>
	{
	  auto const __num = __val * 2;
   1ad98:	0014949b          	slliw	s1,s1,0x1
	  __first[1] = __digits[__num + 1];
   1ad9c:	00027717          	auipc	a4,0x27
   1ada0:	5c473703          	ld	a4,1476(a4) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
   1ada4:	0014879b          	addiw	a5,s1,1
   1ada8:	02079793          	slli	a5,a5,0x20
   1adac:	0207d793          	srli	a5,a5,0x20
   1adb0:	00f707b3          	add	a5,a4,a5
   1adb4:	0007c783          	lbu	a5,0(a5)
   1adb8:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   1adbc:	02049493          	slli	s1,s1,0x20
   1adc0:	0204d493          	srli	s1,s1,0x20
   1adc4:	00970733          	add	a4,a4,s1
   1adc8:	00074483          	lbu	s1,0(a4)
   1adcc:	00958023          	sb	s1,0(a1)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
   1add0:	00090513          	addi	a0,s2,0
   1add4:	02813083          	ld	ra,40(sp)
   1add8:	02013403          	ld	s0,32(sp)
   1addc:	01813483          	ld	s1,24(sp)
   1ade0:	01013903          	ld	s2,16(sp)
   1ade4:	00813983          	ld	s3,8(sp)
   1ade8:	03010113          	addi	sp,sp,48
   1adec:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   1adf0:	00100413          	addi	s0,zero,1
   1adf4:	ea5ff06f          	jal	zero,1ac98 <std::__cxx11::to_string(int)+0x8c>
   1adf8:	00100413          	addi	s0,zero,1
   1adfc:	eb5ff06f          	jal	zero,1acb0 <std::__cxx11::to_string(int)+0xa4>
	}
      else
	__first[0] = '0' + __val;
   1ae00:	0304849b          	addiw	s1,s1,48
   1ae04:	0ff4f493          	andi	s1,s1,255
   1ae08:	fc5ff06f          	jal	zero,1adcc <std::__cxx11::to_string(int)+0x1c0>

000000000001ae0c <dwarf::type_unit::~type_unit()>:
class type_unit : public unit {
   1ae0c:	ff010113          	addi	sp,sp,-16
   1ae10:	00113423          	sd	ra,8(sp)
   1ae14:	00027797          	auipc	a5,0x27
   1ae18:	5447b783          	ld	a5,1348(a5) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   1ae1c:	01078793          	addi	a5,a5,16
   1ae20:	00f53023          	sd	a5,0(a0)
   1ae24:	c1cfc0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   1ae28:	00813083          	ld	ra,8(sp)
   1ae2c:	01010113          	addi	sp,sp,16
   1ae30:	00008067          	jalr	zero,0(ra)

000000000001ae34 <dwarf::type_unit::~type_unit()>:
   1ae34:	ff010113          	addi	sp,sp,-16
   1ae38:	00113423          	sd	ra,8(sp)
   1ae3c:	00813023          	sd	s0,0(sp)
   1ae40:	00050413          	addi	s0,a0,0
   1ae44:	00027797          	auipc	a5,0x27
   1ae48:	5147b783          	ld	a5,1300(a5) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   1ae4c:	01078793          	addi	a5,a5,16
   1ae50:	00f53023          	sd	a5,0(a0)
   1ae54:	becfc0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   1ae58:	00040513          	addi	a0,s0,0
   1ae5c:	eb4fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1ae60:	00813083          	ld	ra,8(sp)
   1ae64:	00013403          	ld	s0,0(sp)
   1ae68:	01010113          	addi	sp,sp,16
   1ae6c:	00008067          	jalr	zero,0(ra)

000000000001ae70 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>:
  ~small_vector() {
   1ae70:	00050693          	addi	a3,a0,0
    for (T *p = base; p < end; ++p)
   1ae74:	03053503          	ld	a0,48(a0)
   1ae78:	0386b783          	ld	a5,56(a3)
   1ae7c:	00f57a63          	bgeu	a0,a5,1ae90 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x20>
   1ae80:	00050793          	addi	a5,a0,0
   1ae84:	00878793          	addi	a5,a5,8
   1ae88:	0386b703          	ld	a4,56(a3)
   1ae8c:	fee7ece3          	bltu	a5,a4,1ae84 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x14>
    end = base;
   1ae90:	02a6bc23          	sd	a0,56(a3)
    if ((char *)base != buf)
   1ae94:	02a68063          	beq	a3,a0,1aeb4 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x44>
      delete[] (char *)base;
   1ae98:	00050e63          	beq	a0,zero,1aeb4 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x44>
  ~small_vector() {
   1ae9c:	ff010113          	addi	sp,sp,-16
   1aea0:	00113423          	sd	ra,8(sp)
      delete[] (char *)base;
   1aea4:	f1cfb0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
  }
   1aea8:	00813083          	ld	ra,8(sp)
   1aeac:	01010113          	addi	sp,sp,16
   1aeb0:	00008067          	jalr	zero,0(ra)
   1aeb4:	00008067          	jalr	zero,0(ra)

000000000001aeb8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)>:
    }

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
   1aeb8:	fd010113          	addi	sp,sp,-48
   1aebc:	02113423          	sd	ra,40(sp)
   1aec0:	02813023          	sd	s0,32(sp)
   1aec4:	00913c23          	sd	s1,24(sp)
   1aec8:	01213823          	sd	s2,16(sp)
   1aecc:	01313423          	sd	s3,8(sp)
   1aed0:	01413023          	sd	s4,0(sp)
   1aed4:	00050493          	addi	s1,a0,0
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (std::__addressof(__x) != this)
   1aed8:	0aa58a63          	beq	a1,a0,1af8c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xd4>
   1aedc:	00058913          	addi	s2,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1aee0:	0085ba03          	ld	s4,8(a1)
   1aee4:	0005b403          	ld	s0,0(a1)
   1aee8:	408a09b3          	sub	s3,s4,s0
			 - this->_M_impl._M_start); }
   1aeec:	00053503          	ld	a0,0(a0)
   1aef0:	0104b783          	ld	a5,16(s1)
   1aef4:	40a787b3          	sub	a5,a5,a0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   1aef8:	0337e263          	bltu	a5,s3,1af1c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x64>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1aefc:	0084b603          	ld	a2,8(s1)
   1af00:	40a60633          	sub	a2,a2,a0
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
   1af04:	0d366063          	bltu	a2,s3,1afc4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x10c>
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   1af08:	068a0c63          	beq	s4,s0,1af80 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1af0c:	00098613          	addi	a2,s3,0
   1af10:	00040593          	addi	a1,s0,0
   1af14:	86dfb0ef          	jal	ra,16780 <memmove@plt>
   1af18:	0680006f          	jal	zero,1af80 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1af1c:	0a098063          	beq	s3,zero,1afbc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x104>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1af20:	ff100793          	addi	a5,zero,-15
   1af24:	0017d793          	srli	a5,a5,0x1
   1af28:	0937e463          	bltu	a5,s3,1afb0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xf8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1af2c:	00098513          	addi	a0,s3,0
   1af30:	df0fb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1af34:	00050913          	addi	s2,a0,0
		     _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      __try
	{
	  for (; __first != __last; ++__first, (void)++__cur)
   1af38:	028a0863          	beq	s4,s0,1af68 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xb0>
   1af3c:	00040593          	addi	a1,s0,0
      _ForwardIterator __cur = __result;
   1af40:	00090793          	addi	a5,s2,0
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1af44:	0005a703          	lw	a4,0(a1)
   1af48:	00e7a023          	sw	a4,0(a5)
   1af4c:	0045a703          	lw	a4,4(a1)
   1af50:	00e7a223          	sw	a4,4(a5)
   1af54:	0085a703          	lw	a4,8(a1)
   1af58:	00e7a423          	sw	a4,8(a5)
	  for (; __first != __last; ++__first, (void)++__cur)
   1af5c:	00c78793          	addi	a5,a5,12
   1af60:	00c58593          	addi	a1,a1,12
   1af64:	feba10e3          	bne	s4,a1,1af44 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x8c>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1af68:	0004b503          	ld	a0,0(s1)
	if (__p)
   1af6c:	00050463          	beq	a0,zero,1af74 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xbc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1af70:	da0fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __tmp;
   1af74:	0124b023          	sd	s2,0(s1)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   1af78:	01390933          	add	s2,s2,s3
   1af7c:	0124b823          	sd	s2,16(s1)
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   1af80:	0004b783          	ld	a5,0(s1)
   1af84:	013787b3          	add	a5,a5,s3
   1af88:	00f4b423          	sd	a5,8(s1)
	}
      return *this;
    }
   1af8c:	00048513          	addi	a0,s1,0
   1af90:	02813083          	ld	ra,40(sp)
   1af94:	02013403          	ld	s0,32(sp)
   1af98:	01813483          	ld	s1,24(sp)
   1af9c:	01013903          	ld	s2,16(sp)
   1afa0:	00813983          	ld	s3,8(sp)
   1afa4:	00013a03          	ld	s4,0(sp)
   1afa8:	03010113          	addi	sp,sp,48
   1afac:	00008067          	jalr	zero,0(ra)
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1afb0:	0009d463          	bge	s3,zero,1afb8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x100>
	      std::__throw_bad_array_new_length();
   1afb4:	d3cfb0ef          	jal	ra,164f0 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1afb8:	c28fb0ef          	jal	ra,163e0 <std::__throw_bad_alloc()@plt>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1afbc:	00000913          	addi	s2,zero,0
   1afc0:	f79ff06f          	jal	zero,1af38 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x80>
	  if (_Num)
   1afc4:	00060663          	beq	a2,zero,1afd0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x118>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   1afc8:	00040593          	addi	a1,s0,0
   1afcc:	fb4fb0ef          	jal	ra,16780 <memmove@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1afd0:	0084b703          	ld	a4,8(s1)
   1afd4:	0004b683          	ld	a3,0(s1)
   1afd8:	40d706b3          	sub	a3,a4,a3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   1afdc:	00093783          	ld	a5,0(s2)
   1afe0:	00d787b3          	add	a5,a5,a3
					  __x._M_impl._M_finish,
   1afe4:	00893603          	ld	a2,8(s2)
   1afe8:	f8c78ce3          	beq	a5,a2,1af80 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
   1afec:	0007a683          	lw	a3,0(a5)
   1aff0:	00d72023          	sw	a3,0(a4)
   1aff4:	0047a683          	lw	a3,4(a5)
   1aff8:	00d72223          	sw	a3,4(a4)
   1affc:	0087a683          	lw	a3,8(a5)
   1b000:	00d72423          	sw	a3,8(a4)
   1b004:	00c78793          	addi	a5,a5,12
   1b008:	00c70713          	addi	a4,a4,12
   1b00c:	fef610e3          	bne	a2,a5,1afec <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x134>
   1b010:	f71ff06f          	jal	zero,1af80 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>

000000000001b014 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)>:
      while (__x != 0)
   1b014:	12058063          	beq	a1,zero,1b134 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x120>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1b018:	fc010113          	addi	sp,sp,-64
   1b01c:	02113c23          	sd	ra,56(sp)
   1b020:	02813823          	sd	s0,48(sp)
   1b024:	02913423          	sd	s1,40(sp)
   1b028:	03213023          	sd	s2,32(sp)
   1b02c:	01313c23          	sd	s3,24(sp)
   1b030:	01413823          	sd	s4,16(sp)
   1b034:	01513423          	sd	s5,8(sp)
   1b038:	01613023          	sd	s6,0(sp)
   1b03c:	00050a93          	addi	s5,a0,0
   1b040:	00058413          	addi	s0,a1,0
	  _M_erase(_S_right(__x));
   1b044:	00027b17          	auipc	s6,0x27
   1b048:	36cb3b03          	ld	s6,876(s6) # 423b0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x2739c>
    return ::__libc_single_threaded;
   1b04c:	00027917          	auipc	s2,0x27
   1b050:	43493903          	ld	s2,1076(s2) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b054:	00100493          	addi	s1,zero,1
   1b058:	0280006f          	jal	zero,1b080 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x6c>
    if (__is_single_threaded())
   1b05c:	00094783          	lbu	a5,0(s2)
   1b060:	04078063          	beq	a5,zero,1b0a0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x8c>
    _Atomic_word __result = *__mem;
   1b064:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   1b068:	fff5079b          	addiw	a5,a0,-1
   1b06c:	02f9a823          	sw	a5,48(s3)
   1b070:	04950063          	beq	a0,s1,1b0b0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x9c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b074:	000a0513          	addi	a0,s4,0
   1b078:	c98fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      while (__x != 0)
   1b07c:	08040863          	beq	s0,zero,1b10c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xf8>
	  _M_erase(_S_right(__x));
   1b080:	01843583          	ld	a1,24(s0)
   1b084:	000a8513          	addi	a0,s5,0
   1b088:	000b00e7          	jalr	ra,0(s6)
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1b08c:	00040a13          	addi	s4,s0,0
      { return static_cast<_Link_type>(__x->_M_left); }
   1b090:	01043403          	ld	s0,16(s0)
	if (_M_pi != nullptr)
   1b094:	030a3983          	ld	s3,48(s4)
   1b098:	fc0992e3          	bne	s3,zero,1b05c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x48>
   1b09c:	fd9ff06f          	jal	zero,1b074 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
      return __exchange_and_add(__mem, __val);
   1b0a0:	fff00593          	addi	a1,zero,-1
   1b0a4:	03098513          	addi	a0,s3,48
   1b0a8:	ad8fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b0ac:	fc5ff06f          	jal	zero,1b070 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x5c>
	_M_dispose();
   1b0b0:	0009b783          	ld	a5,0(s3)
   1b0b4:	0107b783          	ld	a5,16(a5)
   1b0b8:	00098513          	addi	a0,s3,0
   1b0bc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b0c0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b0c4:	00027797          	auipc	a5,0x27
   1b0c8:	3bc7b783          	ld	a5,956(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b0cc:	0007c783          	lbu	a5,0(a5)
   1b0d0:	02078663          	beq	a5,zero,1b0fc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xe8>
    _Atomic_word __result = *__mem;
   1b0d4:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   1b0d8:	fff5079b          	addiw	a5,a0,-1
   1b0dc:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b0e0:	00100793          	addi	a5,zero,1
   1b0e4:	f8f518e3          	bne	a0,a5,1b074 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
	    _M_destroy();
   1b0e8:	0009b783          	ld	a5,0(s3)
   1b0ec:	0187b783          	ld	a5,24(a5)
   1b0f0:	00098513          	addi	a0,s3,0
   1b0f4:	000780e7          	jalr	ra,0(a5)
   1b0f8:	f7dff06f          	jal	zero,1b074 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x60>
      return __exchange_and_add(__mem, __val);
   1b0fc:	fff00593          	addi	a1,zero,-1
   1b100:	03498513          	addi	a0,s3,52
   1b104:	a7cfb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b108:	fd9ff06f          	jal	zero,1b0e0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xcc>
    }
   1b10c:	03813083          	ld	ra,56(sp)
   1b110:	03013403          	ld	s0,48(sp)
   1b114:	02813483          	ld	s1,40(sp)
   1b118:	02013903          	ld	s2,32(sp)
   1b11c:	01813983          	ld	s3,24(sp)
   1b120:	01013a03          	ld	s4,16(sp)
   1b124:	00813a83          	ld	s5,8(sp)
   1b128:	00013b03          	ld	s6,0(sp)
   1b12c:	04010113          	addi	sp,sp,64
   1b130:	00008067          	jalr	zero,0(ra)
   1b134:	00008067          	jalr	zero,0(ra)

000000000001b138 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1b138:	fd010113          	addi	sp,sp,-48
   1b13c:	02113423          	sd	ra,40(sp)
   1b140:	02813023          	sd	s0,32(sp)
   1b144:	00913c23          	sd	s1,24(sp)
   1b148:	01213823          	sd	s2,16(sp)
   1b14c:	01313423          	sd	s3,8(sp)
   1b150:	00050913          	addi	s2,a0,0
      { _M_erase(_M_begin()); }
   1b154:	0d053583          	ld	a1,208(a0)
   1b158:	0c050513          	addi	a0,a0,192
   1b15c:	00027317          	auipc	t1,0x27
   1b160:	25433303          	ld	t1,596(t1) # 423b0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x2739c>
   1b164:	000300e7          	jalr	ra,0(t1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1b168:	09093403          	ld	s0,144(s2)

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    {
      while (__n)
   1b16c:	02040863          	beq	s0,zero,1b19c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   1b170:	00027997          	auipc	s3,0x27
   1b174:	1e89b983          	ld	s3,488(s3) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   1b178:	01098993          	addi	s3,s3,16
      _M_next() const noexcept
   1b17c:	00040493          	addi	s1,s0,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1b180:	00043403          	ld	s0,0(s0)
   1b184:	0134b823          	sd	s3,16(s1)
   1b188:	01048513          	addi	a0,s1,16
   1b18c:	8b4fc0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   1b190:	00048513          	addi	a0,s1,0
   1b194:	b7cfb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      while (__n)
   1b198:	fe0412e3          	bne	s0,zero,1b17c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x44>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0,
   1b19c:	08893603          	ld	a2,136(s2)
   1b1a0:	00361613          	slli	a2,a2,0x3
   1b1a4:	00000593          	addi	a1,zero,0
   1b1a8:	08093503          	ld	a0,128(s2)
   1b1ac:	c34fb0ef          	jal	ra,165e0 <memset@plt>
		       _M_bucket_count * sizeof(__node_base_ptr));
      _M_element_count = 0;
   1b1b0:	08093c23          	sd	zero,152(s2)
      _M_before_begin._M_nxt = nullptr;
   1b1b4:	08093823          	sd	zero,144(s2)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1b1b8:	08093503          	ld	a0,128(s2)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1b1bc:	0b090793          	addi	a5,s2,176
	if (_M_uses_single_bucket(__bkts))
   1b1c0:	00f50463          	beq	a0,a5,1b1c8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x90>
   1b1c4:	b4cfb0ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b1c8:	06893403          	ld	s0,104(s2)
   1b1cc:	07093483          	ld	s1,112(s2)
	  for (; __first != __last; ++__first)
   1b1d0:	00940e63          	beq	s0,s1,1b1ec <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      __pointer->~_Tp();
   1b1d4:	00043783          	ld	a5,0(s0)
   1b1d8:	0007b783          	ld	a5,0(a5)
   1b1dc:	00040513          	addi	a0,s0,0
   1b1e0:	000780e7          	jalr	ra,0(a5)
	  for (; __first != __last; ++__first)
   1b1e4:	01840413          	addi	s0,s0,24
   1b1e8:	fe8496e3          	bne	s1,s0,1b1d4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9c>
	_M_deallocate(_M_impl._M_start,
   1b1ec:	06893503          	ld	a0,104(s2)
	if (__p)
   1b1f0:	00050463          	beq	a0,zero,1b1f8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc0>
   1b1f4:	b1cfb0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1b1f8:	06093403          	ld	s0,96(s2)
   1b1fc:	02040463          	beq	s0,zero,1b224 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
    if (__is_single_threaded())
   1b200:	00027797          	auipc	a5,0x27
   1b204:	2807b783          	ld	a5,640(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b208:	0007c783          	lbu	a5,0(a5)
   1b20c:	08078663          	beq	a5,zero,1b298 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x160>
    _Atomic_word __result = *__mem;
   1b210:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b214:	fff5079b          	addiw	a5,a0,-1
   1b218:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b21c:	00100793          	addi	a5,zero,1
   1b220:	08f50463          	beq	a0,a5,1b2a8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
	if (_M_pi != nullptr)
   1b224:	05093403          	ld	s0,80(s2)
   1b228:	02040463          	beq	s0,zero,1b250 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
    if (__is_single_threaded())
   1b22c:	00027797          	auipc	a5,0x27
   1b230:	2547b783          	ld	a5,596(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b234:	0007c783          	lbu	a5,0(a5)
   1b238:	0c078663          	beq	a5,zero,1b304 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1cc>
    _Atomic_word __result = *__mem;
   1b23c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b240:	fff5079b          	addiw	a5,a0,-1
   1b244:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b248:	00100793          	addi	a5,zero,1
   1b24c:	0cf50463          	beq	a0,a5,1b314 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1dc>
	if (_M_pi != nullptr)
   1b250:	04093403          	ld	s0,64(s2)
   1b254:	02040463          	beq	s0,zero,1b27c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    if (__is_single_threaded())
   1b258:	00027797          	auipc	a5,0x27
   1b25c:	2287b783          	ld	a5,552(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b260:	0007c783          	lbu	a5,0(a5)
   1b264:	10078663          	beq	a5,zero,1b370 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
    _Atomic_word __result = *__mem;
   1b268:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b26c:	fff5079b          	addiw	a5,a0,-1
   1b270:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b274:	00100793          	addi	a5,zero,1
   1b278:	10f50463          	beq	a0,a5,1b380 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x248>
      }
   1b27c:	02813083          	ld	ra,40(sp)
   1b280:	02013403          	ld	s0,32(sp)
   1b284:	01813483          	ld	s1,24(sp)
   1b288:	01013903          	ld	s2,16(sp)
   1b28c:	00813983          	ld	s3,8(sp)
   1b290:	03010113          	addi	sp,sp,48
   1b294:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1b298:	fff00593          	addi	a1,zero,-1
   1b29c:	03040513          	addi	a0,s0,48
   1b2a0:	8e0fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b2a4:	f79ff06f          	jal	zero,1b21c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
	_M_dispose();
   1b2a8:	00043783          	ld	a5,0(s0)
   1b2ac:	0107b783          	ld	a5,16(a5)
   1b2b0:	00040513          	addi	a0,s0,0
   1b2b4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b2b8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b2bc:	00027797          	auipc	a5,0x27
   1b2c0:	1c47b783          	ld	a5,452(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b2c4:	0007c783          	lbu	a5,0(a5)
   1b2c8:	02078663          	beq	a5,zero,1b2f4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1bc>
    _Atomic_word __result = *__mem;
   1b2cc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b2d0:	fff5079b          	addiw	a5,a0,-1
   1b2d4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b2d8:	00100793          	addi	a5,zero,1
   1b2dc:	f4f514e3          	bne	a0,a5,1b224 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
	    _M_destroy();
   1b2e0:	00043783          	ld	a5,0(s0)
   1b2e4:	0187b783          	ld	a5,24(a5)
   1b2e8:	00040513          	addi	a0,s0,0
   1b2ec:	000780e7          	jalr	ra,0(a5)
   1b2f0:	f35ff06f          	jal	zero,1b224 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
      return __exchange_and_add(__mem, __val);
   1b2f4:	fff00593          	addi	a1,zero,-1
   1b2f8:	03440513          	addi	a0,s0,52
   1b2fc:	884fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b300:	fd9ff06f          	jal	zero,1b2d8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a0>
   1b304:	fff00593          	addi	a1,zero,-1
   1b308:	03040513          	addi	a0,s0,48
   1b30c:	874fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b310:	f39ff06f          	jal	zero,1b248 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
	_M_dispose();
   1b314:	00043783          	ld	a5,0(s0)
   1b318:	0107b783          	ld	a5,16(a5)
   1b31c:	00040513          	addi	a0,s0,0
   1b320:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b324:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b328:	00027797          	auipc	a5,0x27
   1b32c:	1587b783          	ld	a5,344(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b330:	0007c783          	lbu	a5,0(a5)
   1b334:	02078663          	beq	a5,zero,1b360 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x228>
    _Atomic_word __result = *__mem;
   1b338:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b33c:	fff5079b          	addiw	a5,a0,-1
   1b340:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b344:	00100793          	addi	a5,zero,1
   1b348:	f0f514e3          	bne	a0,a5,1b250 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
	    _M_destroy();
   1b34c:	00043783          	ld	a5,0(s0)
   1b350:	0187b783          	ld	a5,24(a5)
   1b354:	00040513          	addi	a0,s0,0
   1b358:	000780e7          	jalr	ra,0(a5)
   1b35c:	ef5ff06f          	jal	zero,1b250 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x118>
      return __exchange_and_add(__mem, __val);
   1b360:	fff00593          	addi	a1,zero,-1
   1b364:	03440513          	addi	a0,s0,52
   1b368:	818fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b36c:	fd9ff06f          	jal	zero,1b344 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20c>
   1b370:	fff00593          	addi	a1,zero,-1
   1b374:	03040513          	addi	a0,s0,48
   1b378:	808fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b37c:	ef9ff06f          	jal	zero,1b274 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x13c>
	_M_dispose();
   1b380:	00043783          	ld	a5,0(s0)
   1b384:	0107b783          	ld	a5,16(a5)
   1b388:	00040513          	addi	a0,s0,0
   1b38c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b390:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b394:	00027797          	auipc	a5,0x27
   1b398:	0ec7b783          	ld	a5,236(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b39c:	0007c783          	lbu	a5,0(a5)
   1b3a0:	02078663          	beq	a5,zero,1b3cc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x294>
    _Atomic_word __result = *__mem;
   1b3a4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b3a8:	fff5079b          	addiw	a5,a0,-1
   1b3ac:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b3b0:	00100793          	addi	a5,zero,1
   1b3b4:	ecf514e3          	bne	a0,a5,1b27c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
	    _M_destroy();
   1b3b8:	00043783          	ld	a5,0(s0)
   1b3bc:	0187b783          	ld	a5,24(a5)
   1b3c0:	00040513          	addi	a0,s0,0
   1b3c4:	000780e7          	jalr	ra,0(a5)
      }
   1b3c8:	eb5ff06f          	jal	zero,1b27c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
      return __exchange_and_add(__mem, __val);
   1b3cc:	fff00593          	addi	a1,zero,-1
   1b3d0:	03440513          	addi	a0,s0,52
   1b3d4:	fadfa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b3d8:	fd9ff06f          	jal	zero,1b3b0 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x278>

000000000001b3dc <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   1b3dc:	fd010113          	addi	sp,sp,-48
   1b3e0:	02113423          	sd	ra,40(sp)
   1b3e4:	02813023          	sd	s0,32(sp)
   1b3e8:	00913c23          	sd	s1,24(sp)
   1b3ec:	01213823          	sd	s2,16(sp)
   1b3f0:	00050413          	addi	s0,a0,0
   1b3f4:	00058913          	addi	s2,a1,0
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   1b3f8:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   1b3fc:	00913423          	sd	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   1b400:	00f00793          	addi	a5,zero,15
   1b404:	0497e263          	bltu	a5,s1,1b448 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x6c>
      { return _M_dataplus._M_p; }
   1b408:	00053503          	ld	a0,0(a0)
	if (__n == 1)
   1b40c:	00100793          	addi	a5,zero,1
   1b410:	06f49063          	bne	s1,a5,1b470 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x94>
	__c1 = __c2;
   1b414:	0005c783          	lbu	a5,0(a1)
   1b418:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   1b41c:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   1b420:	00e43423          	sd	a4,8(s0)
   1b424:	00043783          	ld	a5,0(s0)
   1b428:	00e787b3          	add	a5,a5,a4
   1b42c:	00078023          	sb	zero,0(a5)
      }
   1b430:	02813083          	ld	ra,40(sp)
   1b434:	02013403          	ld	s0,32(sp)
   1b438:	01813483          	ld	s1,24(sp)
   1b43c:	01013903          	ld	s2,16(sp)
   1b440:	03010113          	addi	sp,sp,48
   1b444:	00008067          	jalr	zero,0(ra)
	    _M_data(_M_create(__dnew, size_type(0)));
   1b448:	00000613          	addi	a2,zero,0
   1b44c:	00810593          	addi	a1,sp,8
   1b450:	ac0fb0ef          	jal	ra,16710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   1b454:	00a43023          	sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   1b458:	00813783          	ld	a5,8(sp)
   1b45c:	00f43823          	sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1b460:	00048613          	addi	a2,s1,0
   1b464:	00090593          	addi	a1,s2,0
   1b468:	948fb0ef          	jal	ra,165b0 <memcpy@plt>
   1b46c:	fb1ff06f          	jal	zero,1b41c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x40>
	if (__n == 0)
   1b470:	fa0486e3          	beq	s1,zero,1b41c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x40>
   1b474:	fedff06f          	jal	zero,1b460 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x84>

000000000001b478 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)>:
#define _ELFPP_TO_HEX_HH_

#include <string>
#include <type_traits>

template <typename T> std::string to_hex(T v) {
   1b478:	fc010113          	addi	sp,sp,-64
   1b47c:	02113c23          	sd	ra,56(sp)
   1b480:	02813823          	sd	s0,48(sp)
   1b484:	02913423          	sd	s1,40(sp)
   1b488:	00050493          	addi	s1,a0,0
  static_assert(std::is_integral<T>::value,
                "to_hex applied to non-integral type");
  if (v == 0)
   1b48c:	00058c63          	beq	a1,zero,1b4a4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x2c>
    return std::string("0");
  char buf[sizeof(T) * 2 + 1];
  char *pos = &buf[sizeof(buf) - 1];
  *pos-- = '\0';
   1b490:	00010c23          	sb	zero,24(sp)
   1b494:	01710413          	addi	s0,sp,23
  while (v && pos >= buf) {
    int digit = v & 0xf;
    if (digit < 10)
   1b498:	00900693          	addi	a3,zero,9
  while (v && pos >= buf) {
   1b49c:	00710613          	addi	a2,sp,7
   1b4a0:	0480006f          	jal	zero,1b4e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x70>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1b4a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   1b4a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   1b4ac:	00000693          	addi	a3,zero,0
   1b4b0:	0001d617          	auipc	a2,0x1d
   1b4b4:	25160613          	addi	a2,a2,593 # 38701 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   1b4b8:	0001d597          	auipc	a1,0x1d
   1b4bc:	24858593          	addi	a1,a1,584 # 38700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   1b4c0:	00027317          	auipc	t1,0x27
   1b4c4:	e4833303          	ld	t1,-440(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   1b4c8:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1b4cc:	05c0006f          	jal	zero,1b528 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0xb0>
   1b4d0:	00e40023          	sb	a4,0(s0)
      *pos = '0' + digit;
    else
      *pos = 'a' + (digit - 10);
    pos--;
   1b4d4:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   1b4d8:	0045d593          	srli	a1,a1,0x4
  while (v && pos >= buf) {
   1b4dc:	02058063          	beq	a1,zero,1b4fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
   1b4e0:	00c78e63          	beq	a5,a2,1b4fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
    pos--;
   1b4e4:	00078413          	addi	s0,a5,0
    int digit = v & 0xf;
   1b4e8:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   1b4ec:	05778713          	addi	a4,a5,87
    if (digit < 10)
   1b4f0:	fef6c0e3          	blt	a3,a5,1b4d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x58>
      *pos = '0' + digit;
   1b4f4:	03078713          	addi	a4,a5,48
   1b4f8:	fd9ff06f          	jal	zero,1b4d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x58>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1b4fc:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   1b500:	00f4b023          	sd	a5,0(s1)
	return __builtin_strlen(__s);
   1b504:	00040513          	addi	a0,s0,0
   1b508:	f09fa0ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1b50c:	00000693          	addi	a3,zero,0
   1b510:	00a40633          	add	a2,s0,a0
   1b514:	00040593          	addi	a1,s0,0
   1b518:	00048513          	addi	a0,s1,0
   1b51c:	00027317          	auipc	t1,0x27
   1b520:	dec33303          	ld	t1,-532(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   1b524:	000300e7          	jalr	ra,0(t1)
  }
  return std::string(pos + 1);
}
   1b528:	00048513          	addi	a0,s1,0
   1b52c:	03813083          	ld	ra,56(sp)
   1b530:	03013403          	ld	s0,48(sp)
   1b534:	02813483          	ld	s1,40(sp)
   1b538:	04010113          	addi	sp,sp,64
   1b53c:	00008067          	jalr	zero,0(ra)

000000000001b540 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b540:	fe010113          	addi	sp,sp,-32
   1b544:	00113c23          	sd	ra,24(sp)
   1b548:	00813823          	sd	s0,16(sp)
   1b54c:	00913423          	sd	s1,8(sp)
   1b550:	01213023          	sd	s2,0(sp)
   1b554:	00050913          	addi	s2,a0,0
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1b558:	01053403          	ld	s0,16(a0)
   1b55c:	04041263          	bne	s0,zero,1b5a0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x60>
      __builtin_memset(_M_buckets, 0,
   1b560:	00893603          	ld	a2,8(s2)
   1b564:	00361613          	slli	a2,a2,0x3
   1b568:	00000593          	addi	a1,zero,0
   1b56c:	00093503          	ld	a0,0(s2)
   1b570:	870fb0ef          	jal	ra,165e0 <memset@plt>
      _M_element_count = 0;
   1b574:	00093c23          	sd	zero,24(s2)
      _M_before_begin._M_nxt = nullptr;
   1b578:	00093823          	sd	zero,16(s2)
    }
   1b57c:	01813083          	ld	ra,24(sp)
   1b580:	01013403          	ld	s0,16(sp)
   1b584:	00813483          	ld	s1,8(sp)
   1b588:	00013903          	ld	s2,0(sp)
   1b58c:	02010113          	addi	sp,sp,32
   1b590:	00008067          	jalr	zero,0(ra)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b594:	00048513          	addi	a0,s1,0
   1b598:	f79fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1b59c:	fc0402e3          	beq	s0,zero,1b560 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x20>
      _M_next() const noexcept
   1b5a0:	00040493          	addi	s1,s0,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1b5a4:	00043403          	ld	s0,0(s0)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b5a8:	0204b503          	ld	a0,32(s1)
	if (__p)
   1b5ac:	fe0504e3          	beq	a0,zero,1b594 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x54>
   1b5b0:	f61fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1b5b4:	fe1ff06f          	jal	zero,1b594 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x54>

000000000001b5b8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   1b5b8:	fd010113          	addi	sp,sp,-48
   1b5bc:	02113423          	sd	ra,40(sp)
   1b5c0:	02813023          	sd	s0,32(sp)
   1b5c4:	00913c23          	sd	s1,24(sp)
   1b5c8:	01213823          	sd	s2,16(sp)
   1b5cc:	01313423          	sd	s3,8(sp)
   1b5d0:	00050413          	addi	s0,a0,0
   1b5d4:	03850993          	addi	s3,a0,56
      clear();
   1b5d8:	19050513          	addi	a0,a0,400
   1b5dc:	00027317          	auipc	t1,0x27
   1b5e0:	cfc33303          	ld	t1,-772(t1) # 422d8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x26d98>
   1b5e4:	000300e7          	jalr	ra,0(t1)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1b5e8:	19043503          	ld	a0,400(s0)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1b5ec:	1c040793          	addi	a5,s0,448
	if (_M_uses_single_bucket(__bkts))
   1b5f0:	00f50463          	beq	a0,a5,1b5f8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
   1b5f4:	f1dfa0ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b5f8:	17843483          	ld	s1,376(s0)
   1b5fc:	18043903          	ld	s2,384(s0)
   1b600:	0f249a63          	bne	s1,s2,1b6f4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x13c>
	_M_deallocate(_M_impl._M_start,
   1b604:	17843503          	ld	a0,376(s0)
	if (__p)
   1b608:	00050463          	beq	a0,zero,1b610 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
   1b60c:	f05fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1b610:	16843483          	ld	s1,360(s0)
   1b614:	02048463          	beq	s1,zero,1b63c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
    if (__is_single_threaded())
   1b618:	00027797          	auipc	a5,0x27
   1b61c:	e687b783          	ld	a5,-408(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b620:	0007c783          	lbu	a5,0(a5)
   1b624:	0e078063          	beq	a5,zero,1b704 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x14c>
    _Atomic_word __result = *__mem;
   1b628:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1b62c:	fff5079b          	addiw	a5,a0,-1
   1b630:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b634:	00100793          	addi	a5,zero,1
   1b638:	0cf50e63          	beq	a0,a5,1b714 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15c>
class die {
   1b63c:	11040693          	addi	a3,s0,272
    for (T *p = base; p < end; ++p)
   1b640:	14043503          	ld	a0,320(s0)
   1b644:	14843783          	ld	a5,328(s0)
   1b648:	00f57a63          	bgeu	a0,a5,1b65c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
   1b64c:	00050793          	addi	a5,a0,0
   1b650:	00878793          	addi	a5,a5,8
   1b654:	14843703          	ld	a4,328(s0)
   1b658:	fee7ece3          	bltu	a5,a4,1b650 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
    end = base;
   1b65c:	14a43423          	sd	a0,328(s0)
    if ((char *)base != buf)
   1b660:	00a68663          	beq	a3,a0,1b66c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      delete[] (char *)base;
   1b664:	00050463          	beq	a0,zero,1b66c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   1b668:	f59fa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1b66c:	0a040693          	addi	a3,s0,160
    for (T *p = base; p < end; ++p)
   1b670:	0d043503          	ld	a0,208(s0)
   1b674:	0d843783          	ld	a5,216(s0)
   1b678:	00f57a63          	bgeu	a0,a5,1b68c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
   1b67c:	00050793          	addi	a5,a0,0
   1b680:	00878793          	addi	a5,a5,8
   1b684:	0d843703          	ld	a4,216(s0)
   1b688:	fee7ece3          	bltu	a5,a4,1b680 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc8>
    end = base;
   1b68c:	0ca43c23          	sd	a0,216(s0)
    if ((char *)base != buf)
   1b690:	00a68663          	beq	a3,a0,1b69c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
      delete[] (char *)base;
   1b694:	00050463          	beq	a0,zero,1b69c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
   1b698:	f29fa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
	if (_M_pi != nullptr)
   1b69c:	05843403          	ld	s0,88(s0)
   1b6a0:	02040463          	beq	s0,zero,1b6c8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
    if (__is_single_threaded())
   1b6a4:	00027797          	auipc	a5,0x27
   1b6a8:	ddc7b783          	ld	a5,-548(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b6ac:	0007c783          	lbu	a5,0(a5)
   1b6b0:	0c078063          	beq	a5,zero,1b770 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1b8>
    _Atomic_word __result = *__mem;
   1b6b4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1b6b8:	fff5079b          	addiw	a5,a0,-1
   1b6bc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b6c0:	00100793          	addi	a5,zero,1
   1b6c4:	0af50e63          	beq	a0,a5,1b780 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1c8>
struct unit::impl {
   1b6c8:	00098513          	addi	a0,s3,0
   1b6cc:	a55fb0ef          	jal	ra,17120 <dwarf::dwarf::~dwarf()>
      }
   1b6d0:	02813083          	ld	ra,40(sp)
   1b6d4:	02013403          	ld	s0,32(sp)
   1b6d8:	01813483          	ld	s1,24(sp)
   1b6dc:	01013903          	ld	s2,16(sp)
   1b6e0:	00813983          	ld	s3,8(sp)
   1b6e4:	03010113          	addi	sp,sp,48
   1b6e8:	00008067          	jalr	zero,0(ra)
   1b6ec:	02848493          	addi	s1,s1,40
   1b6f0:	f0990ae3          	beq	s2,s1,1b604 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b6f4:	0104b503          	ld	a0,16(s1)
	if (__p)
   1b6f8:	fe050ae3          	beq	a0,zero,1b6ec <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
   1b6fc:	e15fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1b700:	fedff06f          	jal	zero,1b6ec <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
      return __exchange_and_add(__mem, __val);
   1b704:	fff00593          	addi	a1,zero,-1
   1b708:	03048513          	addi	a0,s1,48
   1b70c:	c75fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b710:	f25ff06f          	jal	zero,1b634 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
	_M_dispose();
   1b714:	0004b783          	ld	a5,0(s1)
   1b718:	0107b783          	ld	a5,16(a5)
   1b71c:	00048513          	addi	a0,s1,0
   1b720:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b724:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b728:	00027797          	auipc	a5,0x27
   1b72c:	d587b783          	ld	a5,-680(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b730:	0007c783          	lbu	a5,0(a5)
   1b734:	02078663          	beq	a5,zero,1b760 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a8>
    _Atomic_word __result = *__mem;
   1b738:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1b73c:	fff5079b          	addiw	a5,a0,-1
   1b740:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b744:	00100793          	addi	a5,zero,1
   1b748:	eef51ae3          	bne	a0,a5,1b63c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
	    _M_destroy();
   1b74c:	0004b783          	ld	a5,0(s1)
   1b750:	0187b783          	ld	a5,24(a5)
   1b754:	00048513          	addi	a0,s1,0
   1b758:	000780e7          	jalr	ra,0(a5)
   1b75c:	ee1ff06f          	jal	zero,1b63c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
      return __exchange_and_add(__mem, __val);
   1b760:	fff00593          	addi	a1,zero,-1
   1b764:	03448513          	addi	a0,s1,52
   1b768:	c19fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b76c:	fd9ff06f          	jal	zero,1b744 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x18c>
   1b770:	fff00593          	addi	a1,zero,-1
   1b774:	03040513          	addi	a0,s0,48
   1b778:	c09fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b77c:	f45ff06f          	jal	zero,1b6c0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x108>
	_M_dispose();
   1b780:	00043783          	ld	a5,0(s0)
   1b784:	0107b783          	ld	a5,16(a5)
   1b788:	00040513          	addi	a0,s0,0
   1b78c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b790:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b794:	00027797          	auipc	a5,0x27
   1b798:	cec7b783          	ld	a5,-788(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b79c:	0007c783          	lbu	a5,0(a5)
   1b7a0:	02078663          	beq	a5,zero,1b7cc <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x214>
    _Atomic_word __result = *__mem;
   1b7a4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1b7a8:	fff5079b          	addiw	a5,a0,-1
   1b7ac:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b7b0:	00100793          	addi	a5,zero,1
   1b7b4:	f0f51ae3          	bne	a0,a5,1b6c8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
	    _M_destroy();
   1b7b8:	00043783          	ld	a5,0(s0)
   1b7bc:	0187b783          	ld	a5,24(a5)
   1b7c0:	00040513          	addi	a0,s0,0
   1b7c4:	000780e7          	jalr	ra,0(a5)
   1b7c8:	f01ff06f          	jal	zero,1b6c8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>
      return __exchange_and_add(__mem, __val);
   1b7cc:	fff00593          	addi	a1,zero,-1
   1b7d0:	03440513          	addi	a0,s0,52
   1b7d4:	badfa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b7d8:	fd9ff06f          	jal	zero,1b7b0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f8>

000000000001b7dc <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1b7dc:	1c058a63          	beq	a1,zero,1b9b0 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x1d4>
    vector<_Tp, _Alloc>::
   1b7e0:	fc010113          	addi	sp,sp,-64
   1b7e4:	02113c23          	sd	ra,56(sp)
   1b7e8:	02813823          	sd	s0,48(sp)
   1b7ec:	02913423          	sd	s1,40(sp)
   1b7f0:	03213023          	sd	s2,32(sp)
   1b7f4:	01313c23          	sd	s3,24(sp)
   1b7f8:	01413823          	sd	s4,16(sp)
   1b7fc:	01513423          	sd	s5,8(sp)
   1b800:	00050913          	addi	s2,a0,0
   1b804:	00058493          	addi	s1,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b808:	00853683          	ld	a3,8(a0)
   1b80c:	00053783          	ld	a5,0(a0)
   1b810:	40f68433          	sub	s0,a3,a5
   1b814:	40345993          	srai	s3,s0,0x3
   1b818:	0001b617          	auipc	a2,0x1b
   1b81c:	2b063603          	ld	a2,688(a2) # 36ac8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   1b820:	02c989b3          	mul	s3,s3,a2
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
   1b824:	0001b797          	auipc	a5,0x1b
   1b828:	29c7b783          	ld	a5,668(a5) # 36ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1b82c:	41378733          	sub	a4,a5,s3
					 - this->_M_impl._M_finish);
   1b830:	01053783          	ld	a5,16(a0)
   1b834:	40d787b3          	sub	a5,a5,a3
   1b838:	4037d793          	srai	a5,a5,0x3
   1b83c:	02c787b3          	mul	a5,a5,a2
	    __builtin_unreachable();

	  if (__navail >= __n)
   1b840:	06b7e063          	bltu	a5,a1,1b8a0 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xc4>
   1b844:	00058713          	addi	a4,a1,0
      template<typename _ForwardIterator, typename _Size>
	_GLIBCXX20_CONSTEXPR
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
   1b848:	00068793          	addi	a5,a3,0
  abbrev_entry() : code(0) {}
   1b84c:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1b850:	0007b823          	sd	zero,16(a5)
   1b854:	0007bc23          	sd	zero,24(a5)
   1b858:	0207b023          	sd	zero,32(a5)
	  __try
	    {
	      for (; __n > 0; --__n, (void) ++__cur)
   1b85c:	fff70713          	addi	a4,a4,-1
   1b860:	02878793          	addi	a5,a5,40
   1b864:	fe0714e3          	bne	a4,zero,1b84c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x70>
   1b868:	00249793          	slli	a5,s1,0x2
   1b86c:	009787b3          	add	a5,a5,s1
   1b870:	00379793          	slli	a5,a5,0x3
   1b874:	00f686b3          	add	a3,a3,a5
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   1b878:	00d93423          	sd	a3,8(s2)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   1b87c:	03813083          	ld	ra,56(sp)
   1b880:	03013403          	ld	s0,48(sp)
   1b884:	02813483          	ld	s1,40(sp)
   1b888:	02013903          	ld	s2,32(sp)
   1b88c:	01813983          	ld	s3,24(sp)
   1b890:	01013a03          	ld	s4,16(sp)
   1b894:	00813a83          	ld	s5,8(sp)
   1b898:	04010113          	addi	sp,sp,64
   1b89c:	00008067          	jalr	zero,0(ra)
	if (max_size() - size() < __n)
   1b8a0:	02b76c63          	bltu	a4,a1,1b8d8 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xfc>
	const size_type __len = size() + (std::max)(size(), __n);
   1b8a4:	00058793          	addi	a5,a1,0
   1b8a8:	0135f463          	bgeu	a1,s3,1b8b0 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd4>
   1b8ac:	00098793          	addi	a5,s3,0
   1b8b0:	013787b3          	add	a5,a5,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1b8b4:	0337e863          	bltu	a5,s3,1b8e4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x108>
   1b8b8:	00078a93          	addi	s5,a5,0
   1b8bc:	0001b717          	auipc	a4,0x1b
   1b8c0:	20473703          	ld	a4,516(a4) # 36ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1b8c4:	00f77463          	bgeu	a4,a5,1b8cc <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xf0>
   1b8c8:	00070a93          	addi	s5,a4,0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1b8cc:	00000a13          	addi	s4,zero,0
   1b8d0:	02078863          	beq	a5,zero,1b900 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x124>
   1b8d4:	0180006f          	jal	zero,1b8ec <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x110>
	  __throw_length_error(__N(__s));
   1b8d8:	0001b517          	auipc	a0,0x1b
   1b8dc:	ee050513          	addi	a0,a0,-288 # 367b8 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   1b8e0:	b61fa0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1b8e4:	0001ba97          	auipc	s5,0x1b
   1b8e8:	1dcaba83          	ld	s5,476(s5) # 36ac0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1b8ec:	002a9513          	slli	a0,s5,0x2
   1b8f0:	01550533          	add	a0,a0,s5
   1b8f4:	00351513          	slli	a0,a0,0x3
   1b8f8:	c29fa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1b8fc:	00050a13          	addi	s4,a0,0
		      std::__uninitialized_default_n_a(__new_start + __size,
   1b900:	008a07b3          	add	a5,s4,s0
   1b904:	00048713          	addi	a4,s1,0
   1b908:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1b90c:	0007b823          	sd	zero,16(a5)
   1b910:	0007bc23          	sd	zero,24(a5)
   1b914:	0207b023          	sd	zero,32(a5)
   1b918:	fff70713          	addi	a4,a4,-1
   1b91c:	02878793          	addi	a5,a5,40
   1b920:	fe0714e3          	bne	a4,zero,1b908 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x12c>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1b924:	00093503          	ld	a0,0(s2)
   1b928:	00893603          	ld	a2,8(s2)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   1b92c:	04c50463          	beq	a0,a2,1b974 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x198>
   1b930:	00050793          	addi	a5,a0,0
      _ForwardIterator __cur = __result;
   1b934:	000a0713          	addi	a4,s4,0
struct abbrev_entry {
   1b938:	0007b683          	ld	a3,0(a5)
   1b93c:	00d73023          	sd	a3,0(a4)
   1b940:	0087a683          	lw	a3,8(a5)
   1b944:	00d72423          	sw	a3,8(a4)
   1b948:	00c7c683          	lbu	a3,12(a5)
   1b94c:	00d70623          	sb	a3,12(a4)
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   1b950:	0107b683          	ld	a3,16(a5)
   1b954:	00d73823          	sd	a3,16(a4)
   1b958:	0187b683          	ld	a3,24(a5)
   1b95c:	00d73c23          	sd	a3,24(a4)
	  _M_end_of_storage(__x._M_end_of_storage)
   1b960:	0207b683          	ld	a3,32(a5)
   1b964:	02d73023          	sd	a3,32(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1b968:	02878793          	addi	a5,a5,40
   1b96c:	02870713          	addi	a4,a4,40
   1b970:	fcf614e3          	bne	a2,a5,1b938 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x15c>
	if (__p)
   1b974:	00050463          	beq	a0,zero,1b97c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x1a0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b978:	b99fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   1b97c:	01493023          	sd	s4,0(s2)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1b980:	013484b3          	add	s1,s1,s3
   1b984:	00249793          	slli	a5,s1,0x2
   1b988:	009787b3          	add	a5,a5,s1
   1b98c:	00379793          	slli	a5,a5,0x3
   1b990:	00fa07b3          	add	a5,s4,a5
   1b994:	00f93423          	sd	a5,8(s2)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1b998:	002a9793          	slli	a5,s5,0x2
   1b99c:	015787b3          	add	a5,a5,s5
   1b9a0:	00379793          	slli	a5,a5,0x3
   1b9a4:	00fa0a33          	add	s4,s4,a5
   1b9a8:	01493823          	sd	s4,16(s2)
    }
   1b9ac:	ed1ff06f          	jal	zero,1b87c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xa0>
   1b9b0:	00008067          	jalr	zero,0(ra)

000000000001b9b4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1b9b4:	ff010113          	addi	sp,sp,-16
   1b9b8:	00113423          	sd	ra,8(sp)
   1b9bc:	00813023          	sd	s0,0(sp)
   1b9c0:	00853403          	ld	s0,8(a0)
   1b9c4:	02040263          	beq	s0,zero,1b9e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()+0x34>
class type_unit : public unit {
   1b9c8:	00027797          	auipc	a5,0x27
   1b9cc:	9907b783          	ld	a5,-1648(a5) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   1b9d0:	01078793          	addi	a5,a5,16
   1b9d4:	00f43823          	sd	a5,16(s0)
   1b9d8:	01040513          	addi	a0,s0,16
   1b9dc:	865fb0ef          	jal	ra,17240 <dwarf::unit::~unit()>
   1b9e0:	00040513          	addi	a0,s0,0
   1b9e4:	b2dfa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1b9e8:	00813083          	ld	ra,8(sp)
   1b9ec:	00013403          	ld	s0,0(sp)
   1b9f0:	01010113          	addi	sp,sp,16
   1b9f4:	00008067          	jalr	zero,0(ra)

000000000001b9f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1b9f8:	00050693          	addi	a3,a0,0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1b9fc:	00053783          	ld	a5,0(a0)
   1ba00:	00359713          	slli	a4,a1,0x3
   1ba04:	00e787b3          	add	a5,a5,a4
   1ba08:	0007b503          	ld	a0,0(a5)
      if (!__prev_p)
   1ba0c:	04050263          	beq	a0,zero,1ba50 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1ba10:	00053783          	ld	a5,0(a0)
   1ba14:	00063603          	ld	a2,0(a2)
   1ba18:	0080006f          	jal	zero,1ba20 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x28>
	   __p = __p->_M_next())
   1ba1c:	00070793          	addi	a5,a4,0
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1ba20:	0087b703          	ld	a4,8(a5)
   1ba24:	02c70663          	beq	a4,a2,1ba50 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1ba28:	0007b703          	ld	a4,0(a5)
   1ba2c:	02070063          	beq	a4,zero,1ba4c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x54>
	  __prev_p = __p;
   1ba30:	00078513          	addi	a0,a5,0
    { return __num % __den; }
   1ba34:	00873783          	ld	a5,8(a4)
   1ba38:	0086b803          	ld	a6,8(a3)
   1ba3c:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1ba40:	fcf58ee3          	beq	a1,a5,1ba1c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x24>
      return nullptr;
   1ba44:	00000513          	addi	a0,zero,0
   1ba48:	00008067          	jalr	zero,0(ra)
   1ba4c:	00070513          	addi	a0,a4,0
    }
   1ba50:	00008067          	jalr	zero,0(ra)

000000000001ba54 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1ba54:	fd010113          	addi	sp,sp,-48
   1ba58:	02113423          	sd	ra,40(sp)
   1ba5c:	02813023          	sd	s0,32(sp)
   1ba60:	00913c23          	sd	s1,24(sp)
   1ba64:	00058493          	addi	s1,a1,0
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1ba68:	01053403          	ld	s0,16(a0)
      while (__x != 0)
   1ba6c:	00040a63          	beq	s0,zero,1ba80 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x2c>
      { return __x < __y; }
   1ba70:	0005a683          	lw	a3,0(a1)
      { return static_cast<_Link_type>(__x->_M_right); }
   1ba74:	00000813          	addi	a6,zero,0
   1ba78:	00100613          	addi	a2,zero,1
   1ba7c:	0340006f          	jal	zero,1bab0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x5c>
      { return &this->_M_impl._M_header; }
   1ba80:	00850413          	addi	s0,a0,8
	  if (__j == begin())
   1ba84:	01853783          	ld	a5,24(a0)
   1ba88:	06878663          	beq	a5,s0,1baf4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0xa0>
	_M_node = _Rb_tree_decrement(_M_node);
   1ba8c:	00040513          	addi	a0,s0,0
   1ba90:	aa1fa0ef          	jal	ra,16530 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	return *this;
   1ba94:	00040593          	addi	a1,s0,0
	_M_node = _Rb_tree_decrement(_M_node);
   1ba98:	00050413          	addi	s0,a0,0
	return *this;
   1ba9c:	0300006f          	jal	zero,1bacc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x78>
      { return static_cast<_Link_type>(__x->_M_right); }
   1baa0:	01843783          	ld	a5,24(s0)
   1baa4:	00080713          	addi	a4,a6,0
      while (__x != 0)
   1baa8:	00078e63          	beq	a5,zero,1bac4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x70>
   1baac:	00078413          	addi	s0,a5,0
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1bab0:	02042783          	lw	a5,32(s0)
   1bab4:	fef6d6e3          	bge	a3,a5,1baa0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4c>
      { return static_cast<_Link_type>(__x->_M_left); }
   1bab8:	01043783          	ld	a5,16(s0)
   1babc:	00060713          	addi	a4,a2,0
   1bac0:	fe9ff06f          	jal	zero,1baa8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x54>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1bac4:	00040593          	addi	a1,s0,0
      if (__comp)
   1bac8:	fa071ee3          	bne	a4,zero,1ba84 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x30>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1bacc:	02042703          	lw	a4,32(s0)
   1bad0:	0004a783          	lw	a5,0(s1)
   1bad4:	02f74663          	blt	a4,a5,1bb00 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0xac>
   1bad8:	00000593          	addi	a1,zero,0
    }
   1badc:	00040513          	addi	a0,s0,0
   1bae0:	02813083          	ld	ra,40(sp)
   1bae4:	02013403          	ld	s0,32(sp)
   1bae8:	01813483          	ld	s1,24(sp)
   1baec:	03010113          	addi	sp,sp,48
   1baf0:	00008067          	jalr	zero,0(ra)
   1baf4:	00040593          	addi	a1,s0,0
   1baf8:	00000413          	addi	s0,zero,0
   1bafc:	fe1ff06f          	jal	zero,1badc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x88>
   1bb00:	00000413          	addi	s0,zero,0
   1bb04:	fd9ff06f          	jal	zero,1badc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x88>

000000000001bb08 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1bb08:	fc010113          	addi	sp,sp,-64
   1bb0c:	02113c23          	sd	ra,56(sp)
   1bb10:	02813823          	sd	s0,48(sp)
   1bb14:	02913423          	sd	s1,40(sp)
   1bb18:	03213023          	sd	s2,32(sp)
   1bb1c:	01313c23          	sd	s3,24(sp)
   1bb20:	00050993          	addi	s3,a0,0
   1bb24:	00060493          	addi	s1,a2,0
      { return &this->_M_impl._M_header; }
   1bb28:	00850713          	addi	a4,a0,8
      if (__pos._M_node == _M_end())
   1bb2c:	04e58063          	beq	a1,a4,1bb6c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x64>
   1bb30:	00058413          	addi	s0,a1,0
   1bb34:	00062903          	lw	s2,0(a2)
   1bb38:	0205a703          	lw	a4,32(a1)
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1bb3c:	0ce95663          	bge	s2,a4,1bc08 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x100>
	  if (__pos._M_node == _M_leftmost()) // begin()
   1bb40:	01853703          	ld	a4,24(a0)
   1bb44:	08b70663          	beq	a4,a1,1bbd0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xc8>
	_M_node = _Rb_tree_decrement(_M_node);
   1bb48:	00058513          	addi	a0,a1,0
   1bb4c:	9e5fa0ef          	jal	ra,16530 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1bb50:	02052783          	lw	a5,32(a0)
   1bb54:	0927da63          	bge	a5,s2,1bbe8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xe0>
	      if (_S_right(__before._M_node) == 0)
   1bb58:	01853783          	ld	a5,24(a0)
   1bb5c:	08078063          	beq	a5,zero,1bbdc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xd4>
		return _Res(__pos._M_node, __pos._M_node);
   1bb60:	00813023          	sd	s0,0(sp)
   1bb64:	00813423          	sd	s0,8(sp)
   1bb68:	0440006f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1bb6c:	02853783          	ld	a5,40(a0)
   1bb70:	02078063          	beq	a5,zero,1bb90 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x88>
   1bb74:	02053783          	ld	a5,32(a0)
   1bb78:	00062683          	lw	a3,0(a2)
   1bb7c:	0207a703          	lw	a4,32(a5)
   1bb80:	00d75863          	bge	a4,a3,1bb90 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x88>
	    return _Res(0, _M_rightmost());
   1bb84:	00013023          	sd	zero,0(sp)
   1bb88:	00f13423          	sd	a5,8(sp)
   1bb8c:	0200006f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1bb90:	00048593          	addi	a1,s1,0
   1bb94:	00098513          	addi	a0,s3,0
   1bb98:	00027317          	auipc	t1,0x27
   1bb9c:	8b833303          	ld	t1,-1864(t1) # 42450 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x269fc>
   1bba0:	000300e7          	jalr	ra,0(t1)
   1bba4:	00a13023          	sd	a0,0(sp)
   1bba8:	00b13423          	sd	a1,8(sp)
    }
   1bbac:	00013503          	ld	a0,0(sp)
   1bbb0:	00813583          	ld	a1,8(sp)
   1bbb4:	03813083          	ld	ra,56(sp)
   1bbb8:	03013403          	ld	s0,48(sp)
   1bbbc:	02813483          	ld	s1,40(sp)
   1bbc0:	02013903          	ld	s2,32(sp)
   1bbc4:	01813983          	ld	s3,24(sp)
   1bbc8:	04010113          	addi	sp,sp,64
   1bbcc:	00008067          	jalr	zero,0(ra)
	    return _Res(_M_leftmost(), _M_leftmost());
   1bbd0:	00e13023          	sd	a4,0(sp)
   1bbd4:	00e13423          	sd	a4,8(sp)
   1bbd8:	fd5ff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
		return _Res(0, __before._M_node);
   1bbdc:	00013023          	sd	zero,0(sp)
   1bbe0:	00a13423          	sd	a0,8(sp)
   1bbe4:	fc9ff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1bbe8:	00048593          	addi	a1,s1,0
   1bbec:	00098513          	addi	a0,s3,0
   1bbf0:	00027317          	auipc	t1,0x27
   1bbf4:	86033303          	ld	t1,-1952(t1) # 42450 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x269fc>
   1bbf8:	000300e7          	jalr	ra,0(t1)
   1bbfc:	00a13023          	sd	a0,0(sp)
   1bc00:	00b13423          	sd	a1,8(sp)
   1bc04:	fa9ff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1bc08:	07275463          	bge	a4,s2,1bc70 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x168>
	  if (__pos._M_node == _M_rightmost())
   1bc0c:	02053703          	ld	a4,32(a0)
   1bc10:	02b70463          	beq	a4,a1,1bc38 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x130>
	_M_node = _Rb_tree_increment(_M_node);
   1bc14:	00058513          	addi	a0,a1,0
   1bc18:	899fa0ef          	jal	ra,164b0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1bc1c:	02052783          	lw	a5,32(a0)
   1bc20:	02f95863          	bge	s2,a5,1bc50 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x148>
	      if (_S_right(__pos._M_node) == 0)
   1bc24:	01843783          	ld	a5,24(s0)
   1bc28:	00078e63          	beq	a5,zero,1bc44 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x13c>
		return _Res(__after._M_node, __after._M_node);
   1bc2c:	00a13023          	sd	a0,0(sp)
   1bc30:	00a13423          	sd	a0,8(sp)
   1bc34:	f79ff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _Res(0, _M_rightmost());
   1bc38:	00013023          	sd	zero,0(sp)
   1bc3c:	00e13423          	sd	a4,8(sp)
   1bc40:	f6dff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
		return _Res(0, __pos._M_node);
   1bc44:	00013023          	sd	zero,0(sp)
   1bc48:	00813423          	sd	s0,8(sp)
   1bc4c:	f61ff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	    return _M_get_insert_unique_pos(__k);
   1bc50:	00048593          	addi	a1,s1,0
   1bc54:	00098513          	addi	a0,s3,0
   1bc58:	00026317          	auipc	t1,0x26
   1bc5c:	7f833303          	ld	t1,2040(t1) # 42450 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x269fc>
   1bc60:	000300e7          	jalr	ra,0(t1)
   1bc64:	00a13023          	sd	a0,0(sp)
   1bc68:	00b13423          	sd	a1,8(sp)
   1bc6c:	f41ff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>
	return _Res(__pos._M_node, 0);
   1bc70:	00b13023          	sd	a1,0(sp)
   1bc74:	00013423          	sd	zero,8(sp)
   1bc78:	f35ff06f          	jal	zero,1bbac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xa4>

000000000001bc7c <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1bc7c:	fc010113          	addi	sp,sp,-64
   1bc80:	02113c23          	sd	ra,56(sp)
   1bc84:	02813823          	sd	s0,48(sp)
   1bc88:	02913423          	sd	s1,40(sp)
   1bc8c:	03213023          	sd	s2,32(sp)
   1bc90:	01313c23          	sd	s3,24(sp)
   1bc94:	00050493          	addi	s1,a0,0
   1bc98:	00058913          	addi	s2,a1,0
   1bc9c:	00068993          	addi	s3,a3,0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1bca0:	03800513          	addi	a0,zero,56
   1bca4:	87dfa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1bca8:	00050413          	addi	s0,a0,0
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1bcac:	0009b783          	ld	a5,0(s3)
   1bcb0:	0007a983          	lw	s3,0(a5)
   1bcb4:	03352023          	sw	s3,32(a0)
      : _M_ptr(0), _M_refcount()
   1bcb8:	02053423          	sd	zero,40(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1bcbc:	02053823          	sd	zero,48(a0)
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1bcc0:	02050613          	addi	a2,a0,32
   1bcc4:	00090593          	addi	a1,s2,0
   1bcc8:	00048513          	addi	a0,s1,0
   1bccc:	00026317          	auipc	t1,0x26
   1bcd0:	69c33303          	ld	t1,1692(t1) # 42368 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)@@Base+0x26860>
   1bcd4:	000300e7          	jalr	ra,0(t1)
   1bcd8:	00a13023          	sd	a0,0(sp)
   1bcdc:	00b13423          	sd	a1,8(sp)
	if (__res.second)
   1bce0:	06058263          	beq	a1,zero,1bd44 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0xc8>
   1bce4:	00050713          	addi	a4,a0,0
			    || _M_impl._M_key_compare(_S_key(__z),
   1bce8:	00100513          	addi	a0,zero,1
   1bcec:	04070263          	beq	a4,zero,1bd30 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0xb4>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1bcf0:	00848693          	addi	a3,s1,8
   1bcf4:	00058613          	addi	a2,a1,0
   1bcf8:	00040593          	addi	a1,s0,0
   1bcfc:	e44fa0ef          	jal	ra,16340 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
      ++_M_impl._M_node_count;
   1bd00:	0284b783          	ld	a5,40(s1)
   1bd04:	00178793          	addi	a5,a5,1
   1bd08:	02f4b423          	sd	a5,40(s1)
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1bd0c:	00040493          	addi	s1,s0,0
      }
   1bd10:	00048513          	addi	a0,s1,0
   1bd14:	03813083          	ld	ra,56(sp)
   1bd18:	03013403          	ld	s0,48(sp)
   1bd1c:	02813483          	ld	s1,40(sp)
   1bd20:	02013903          	ld	s2,32(sp)
   1bd24:	01813983          	ld	s3,24(sp)
   1bd28:	04010113          	addi	sp,sp,64
   1bd2c:	00008067          	jalr	zero,0(ra)
      { return &this->_M_impl._M_header; }
   1bd30:	00848713          	addi	a4,s1,8
      bool __insert_left = (__x != 0 || __p == _M_end()
   1bd34:	fae58ee3          	beq	a1,a4,1bcf0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x74>
			    || _M_impl._M_key_compare(_S_key(__z),
   1bd38:	0205a503          	lw	a0,32(a1)
   1bd3c:	00a9a533          	slt	a0,s3,a0
   1bd40:	fb1ff06f          	jal	zero,1bcf0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x74>
	return iterator(__res.first);
   1bd44:	00050493          	addi	s1,a0,0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bd48:	00040513          	addi	a0,s0,0
   1bd4c:	fc4fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   1bd50:	fc1ff06f          	jal	zero,1bd10 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x94>

000000000001bd54 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   1bd54:	fa010113          	addi	sp,sp,-96
   1bd58:	04113c23          	sd	ra,88(sp)
   1bd5c:	04813823          	sd	s0,80(sp)
   1bd60:	04913423          	sd	s1,72(sp)
   1bd64:	05213023          	sd	s2,64(sp)
   1bd68:	03313c23          	sd	s3,56(sp)
   1bd6c:	03413823          	sd	s4,48(sp)
   1bd70:	03513423          	sd	s5,40(sp)
   1bd74:	03613023          	sd	s6,32(sp)
   1bd78:	01713c23          	sd	s7,24(sp)
   1bd7c:	01813823          	sd	s8,16(sp)
   1bd80:	01913423          	sd	s9,8(sp)
   1bd84:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bd88:	00853983          	ld	s3,8(a0)
   1bd8c:	00053a83          	ld	s5,0(a0)
   1bd90:	415987b3          	sub	a5,s3,s5
   1bd94:	4037d793          	srai	a5,a5,0x3
   1bd98:	0001b717          	auipc	a4,0x1b
   1bd9c:	d4073703          	ld	a4,-704(a4) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1bda0:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1bda4:	0001b717          	auipc	a4,0x1b
   1bda8:	d2c73703          	ld	a4,-724(a4) # 36ad0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1bdac:	04e78463          	beq	a5,a4,1bdf4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xa0>
   1bdb0:	00050a13          	addi	s4,a0,0
   1bdb4:	00060413          	addi	s0,a2,0
   1bdb8:	00068493          	addi	s1,a3,0
   1bdbc:	00058913          	addi	s2,a1,0
      return __a;
   1bdc0:	00078713          	addi	a4,a5,0
      if (__a < __b)
   1bdc4:	03598e63          	beq	s3,s5,1be00 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   1bdc8:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bdcc:	1ef76663          	bltu	a4,a5,1bfb8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x264>
   1bdd0:	00070b93          	addi	s7,a4,0
   1bdd4:	0001b797          	auipc	a5,0x1b
   1bdd8:	cfc7b783          	ld	a5,-772(a5) # 36ad0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1bddc:	00e7f463          	bgeu	a5,a4,1bde4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x90>
   1bde0:	00078b93          	addi	s7,a5,0
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1bde4:	41558c33          	sub	s8,a1,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bde8:	00000b13          	addi	s6,zero,0
   1bdec:	1e070663          	beq	a4,zero,1bfd8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x284>
   1bdf0:	1d40006f          	jal	zero,1bfc4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x270>
	  __throw_length_error(__N(__s));
   1bdf4:	0001b517          	auipc	a0,0x1b
   1bdf8:	aac50513          	addi	a0,a0,-1364 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1bdfc:	e44fa0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   1be00:	00100713          	addi	a4,zero,1
   1be04:	fc5ff06f          	jal	zero,1bdc8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x74>
   1be08:	09590663          	beq	s2,s5,1be94 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x140>
   1be0c:	000a8493          	addi	s1,s5,0
      _ForwardIterator __cur = __result;
   1be10:	000b0413          	addi	s0,s6,0
class unit {
   1be14:	00026c97          	auipc	s9,0x26
   1be18:	79ccbc83          	ld	s9,1948(s9) # 425b0 <vtable for dwarf::unit@@Base+0xbea8>
   1be1c:	010c8c93          	addi	s9,s9,16
    return ::__libc_single_threaded;
   1be20:	00026d17          	auipc	s10,0x26
   1be24:	660d3d03          	ld	s10,1632(s10) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1be28:	00026c17          	auipc	s8,0x26
   1be2c:	490c3c03          	ld	s8,1168(s8) # 422b8 <vtable for dwarf::compilation_unit@@Base+0xbb90>
   1be30:	010c0c13          	addi	s8,s8,16
   1be34:	0300006f          	jal	zero,1be64 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
      __atomic_add(__mem, __val);
   1be38:	00100593          	addi	a1,zero,1
   1be3c:	03050513          	addi	a0,a0,48
   1be40:	d10fa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1be44:	01843023          	sd	s8,0(s0)

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   1be48:	0004b783          	ld	a5,0(s1)
   1be4c:	0007b783          	ld	a5,0(a5)
   1be50:	00048513          	addi	a0,s1,0
   1be54:	000780e7          	jalr	ra,0(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1be58:	01848493          	addi	s1,s1,24
   1be5c:	01840413          	addi	s0,s0,24
   1be60:	02990c63          	beq	s2,s1,1be98 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
class unit {
   1be64:	01943023          	sd	s9,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1be68:	0084b783          	ld	a5,8(s1)
   1be6c:	00f43423          	sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1be70:	0104b503          	ld	a0,16(s1)
   1be74:	00a43823          	sd	a0,16(s0)
	if (_M_pi != nullptr)
   1be78:	fc0506e3          	beq	a0,zero,1be44 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xf0>
    if (__is_single_threaded())
   1be7c:	000d4703          	lbu	a4,0(s10)
   1be80:	fa070ce3          	beq	a4,zero,1be38 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe4>
  { *__mem += __val; }
   1be84:	03052703          	lw	a4,48(a0)
   1be88:	0017071b          	addiw	a4,a4,1
   1be8c:	02e52823          	sw	a4,48(a0)
   1be90:	fb5ff06f          	jal	zero,1be44 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xf0>
      _ForwardIterator __cur = __result;
   1be94:	000b0413          	addi	s0,s6,0
	      ++__new_finish;
   1be98:	01840413          	addi	s0,s0,24
      for (; __first != __last; ++__first, (void)++__cur)
   1be9c:	09390263          	beq	s2,s3,1bf20 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1cc>
   1bea0:	00026c17          	auipc	s8,0x26
   1bea4:	710c3c03          	ld	s8,1808(s8) # 425b0 <vtable for dwarf::unit@@Base+0xbea8>
   1bea8:	010c0c13          	addi	s8,s8,16
    return ::__libc_single_threaded;
   1beac:	00026c97          	auipc	s9,0x26
   1beb0:	5d4cbc83          	ld	s9,1492(s9) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1beb4:	00026497          	auipc	s1,0x26
   1beb8:	4044b483          	ld	s1,1028(s1) # 422b8 <vtable for dwarf::compilation_unit@@Base+0xbb90>
   1bebc:	01048493          	addi	s1,s1,16
   1bec0:	0300006f          	jal	zero,1bef0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x19c>
      __atomic_add(__mem, __val);
   1bec4:	00100593          	addi	a1,zero,1
   1bec8:	03050513          	addi	a0,a0,48
   1becc:	c84fa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bed0:	00943023          	sd	s1,0(s0)
   1bed4:	00093783          	ld	a5,0(s2)
   1bed8:	0007b783          	ld	a5,0(a5)
   1bedc:	00090513          	addi	a0,s2,0
   1bee0:	000780e7          	jalr	ra,0(a5)
   1bee4:	01890913          	addi	s2,s2,24
   1bee8:	01840413          	addi	s0,s0,24
   1beec:	03390a63          	beq	s2,s3,1bf20 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1cc>
class unit {
   1bef0:	01843023          	sd	s8,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bef4:	00893783          	ld	a5,8(s2)
   1bef8:	00f43423          	sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1befc:	01093503          	ld	a0,16(s2)
   1bf00:	00a43823          	sd	a0,16(s0)
	if (_M_pi != nullptr)
   1bf04:	fc0506e3          	beq	a0,zero,1bed0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x17c>
    if (__is_single_threaded())
   1bf08:	000cc703          	lbu	a4,0(s9)
   1bf0c:	fa070ce3          	beq	a4,zero,1bec4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x170>
  { *__mem += __val; }
   1bf10:	03052703          	lw	a4,48(a0)
   1bf14:	0017071b          	addiw	a4,a4,1
   1bf18:	02e52823          	sw	a4,48(a0)
   1bf1c:	fb5ff06f          	jal	zero,1bed0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x17c>
	if (__p)
   1bf20:	000a8663          	beq	s5,zero,1bf2c <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1d8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bf24:	000a8513          	addi	a0,s5,0
   1bf28:	de8fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1bf2c:	016a3023          	sd	s6,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1bf30:	008a3423          	sd	s0,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1bf34:	001b9793          	slli	a5,s7,0x1
   1bf38:	017787b3          	add	a5,a5,s7
   1bf3c:	00379793          	slli	a5,a5,0x3
   1bf40:	00fb07b3          	add	a5,s6,a5
   1bf44:	00fa3823          	sd	a5,16(s4)
    }
   1bf48:	05813083          	ld	ra,88(sp)
   1bf4c:	05013403          	ld	s0,80(sp)
   1bf50:	04813483          	ld	s1,72(sp)
   1bf54:	04013903          	ld	s2,64(sp)
   1bf58:	03813983          	ld	s3,56(sp)
   1bf5c:	03013a03          	ld	s4,48(sp)
   1bf60:	02813a83          	ld	s5,40(sp)
   1bf64:	02013b03          	ld	s6,32(sp)
   1bf68:	01813b83          	ld	s7,24(sp)
   1bf6c:	01013c03          	ld	s8,16(sp)
   1bf70:	00813c83          	ld	s9,8(sp)
   1bf74:	00013d03          	ld	s10,0(sp)
   1bf78:	06010113          	addi	sp,sp,96
   1bf7c:	00008067          	jalr	zero,0(ra)
      __catch(...)
   1bf80:	c80fa0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   1bf84:	020b1463          	bne	s6,zero,1bfac <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x258>
	{ __p->~_Up(); }
   1bf88:	000c3783          	ld	a5,0(s8)
   1bf8c:	0007b783          	ld	a5,0(a5)
   1bf90:	000c0513          	addi	a0,s8,0
   1bf94:	000780e7          	jalr	ra,0(a5)
	  __throw_exception_again;
   1bf98:	e88fa0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   1bf9c:	00050413          	addi	s0,a0,0
   1bfa0:	ef0fa0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1bfa4:	00040513          	addi	a0,s0,0
   1bfa8:	f48fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bfac:	000b0513          	addi	a0,s6,0
   1bfb0:	d60fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1bfb4:	fe5ff06f          	jal	zero,1bf98 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x244>
   1bfb8:	41558c33          	sub	s8,a1,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bfbc:	0001bb97          	auipc	s7,0x1b
   1bfc0:	b14bbb83          	ld	s7,-1260(s7) # 36ad0 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1bfc4:	001b9513          	slli	a0,s7,0x1
   1bfc8:	01750533          	add	a0,a0,s7
   1bfcc:	00351513          	slli	a0,a0,0x3
   1bfd0:	d50fa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1bfd4:	00050b13          	addi	s6,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   1bfd8:	018b0c33          	add	s8,s6,s8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1bfdc:	0004b603          	ld	a2,0(s1)
   1bfe0:	00040593          	addi	a1,s0,0
   1bfe4:	000c0513          	addi	a0,s8,0
   1bfe8:	841fb0ef          	jal	ra,17828 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
   1bfec:	e1dff06f          	jal	zero,1be08 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb4>

000000000001bff0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1bff0:	00050693          	addi	a3,a0,0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1bff4:	00053783          	ld	a5,0(a0)
   1bff8:	00359713          	slli	a4,a1,0x3
   1bffc:	00e787b3          	add	a5,a5,a4
   1c000:	0007b503          	ld	a0,0(a5)
      if (!__prev_p)
   1c004:	04050263          	beq	a0,zero,1c048 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1c008:	00053783          	ld	a5,0(a0)
      { return __x == __y; }
   1c00c:	00063603          	ld	a2,0(a2)
   1c010:	0080006f          	jal	zero,1c018 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x28>
	   __p = __p->_M_next())
   1c014:	00070793          	addi	a5,a4,0
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1c018:	0087b703          	ld	a4,8(a5)
   1c01c:	02c70663          	beq	a4,a2,1c048 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x58>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1c020:	0007b703          	ld	a4,0(a5)
   1c024:	02070063          	beq	a4,zero,1c044 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x54>
	  __prev_p = __p;
   1c028:	00078513          	addi	a0,a5,0
    { return __num % __den; }
   1c02c:	00873783          	ld	a5,8(a4)
   1c030:	0086b803          	ld	a6,8(a3)
   1c034:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1c038:	fcf58ee3          	beq	a1,a5,1c014 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x24>
      return nullptr;
   1c03c:	00000513          	addi	a0,zero,0
   1c040:	00008067          	jalr	zero,0(ra)
   1c044:	00070513          	addi	a0,a4,0
    }
   1c048:	00008067          	jalr	zero,0(ra)

000000000001c04c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c04c:	fd010113          	addi	sp,sp,-48
   1c050:	02113423          	sd	ra,40(sp)
   1c054:	02813023          	sd	s0,32(sp)
   1c058:	00913c23          	sd	s1,24(sp)
   1c05c:	01213823          	sd	s2,16(sp)
   1c060:	01313423          	sd	s3,8(sp)
   1c064:	00050493          	addi	s1,a0,0
   1c068:	00058413          	addi	s0,a1,0
	if (__builtin_expect(__bkt_count == 1, false))
   1c06c:	00100793          	addi	a5,zero,1
   1c070:	04f58263          	beq	a1,a5,1c0b4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c074:	fff00793          	addi	a5,zero,-1
   1c078:	0047d793          	srli	a5,a5,0x4
   1c07c:	04b7e263          	bltu	a5,a1,1c0c0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x74>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c080:	00359993          	slli	s3,a1,0x3
   1c084:	00098513          	addi	a0,s3,0
   1c088:	c98fa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1c08c:	00050913          	addi	s2,a0,0
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1c090:	00098613          	addi	a2,s3,0
   1c094:	00000593          	addi	a1,zero,0
   1c098:	d48fa0ef          	jal	ra,165e0 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1c09c:	0104b603          	ld	a2,16(s1)
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
   1c0a0:	0004b823          	sd	zero,16(s1)
      std::size_t __bbegin_bkt = 0;
      while (__p)
   1c0a4:	08060c63          	beq	a2,zero,1c13c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      std::size_t __bbegin_bkt = 0;
   1c0a8:	00000593          	addi	a1,zero,0
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
   1c0ac:	01048893          	addi	a7,s1,16
   1c0b0:	0380006f          	jal	zero,1c0e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
	    _M_single_bucket = nullptr;
   1c0b4:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1c0b8:	03050913          	addi	s2,a0,48
   1c0bc:	fe1ff06f          	jal	zero,1c09c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x50>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c0c0:	fff00793          	addi	a5,zero,-1
   1c0c4:	0037d793          	srli	a5,a5,0x3
   1c0c8:	00b7f463          	bgeu	a5,a1,1c0d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x84>
	      std::__throw_bad_array_new_length();
   1c0cc:	c24fa0ef          	jal	ra,164f0 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1c0d0:	b10fa0ef          	jal	ra,163e0 <std::__throw_bad_alloc()@plt>
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1c0d4:	00083683          	ld	a3,0(a6)
   1c0d8:	00d73023          	sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1c0dc:	0007b783          	ld	a5,0(a5)
   1c0e0:	00e7b023          	sd	a4,0(a5)
      while (__p)
   1c0e4:	04060c63          	beq	a2,zero,1c13c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      _M_next() const noexcept
   1c0e8:	00060713          	addi	a4,a2,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1c0ec:	00063603          	ld	a2,0(a2)
    { return __num % __den; }
   1c0f0:	00873683          	ld	a3,8(a4)
   1c0f4:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1c0f8:	00369793          	slli	a5,a3,0x3
   1c0fc:	00f907b3          	add	a5,s2,a5
   1c100:	0007b803          	ld	a6,0(a5)
   1c104:	fc0818e3          	bne	a6,zero,1c0d4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x88>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1c108:	0104b503          	ld	a0,16(s1)
   1c10c:	00a73023          	sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1c110:	00e4b823          	sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1c114:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1c118:	00073783          	ld	a5,0(a4)
   1c11c:	00078c63          	beq	a5,zero,1c134 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xe8>
		__new_buckets[__bbegin_bkt] = __p;
   1c120:	00359593          	slli	a1,a1,0x3
   1c124:	00b905b3          	add	a1,s2,a1
   1c128:	00e5b023          	sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1c12c:	00068593          	addi	a1,a3,0
   1c130:	fb5ff06f          	jal	zero,1c0e4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
   1c134:	00068593          	addi	a1,a3,0
   1c138:	fadff06f          	jal	zero,1c0e4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1c13c:	0004b503          	ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1c140:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1c144:	00f50463          	beq	a0,a5,1c14c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x100>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c148:	bc8fa0ef          	jal	ra,16510 <operator delete(void*)@plt>

	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
   1c14c:	0084b423          	sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1c150:	0124b023          	sd	s2,0(s1)
    }
   1c154:	02813083          	ld	ra,40(sp)
   1c158:	02013403          	ld	s0,32(sp)
   1c15c:	01813483          	ld	s1,24(sp)
   1c160:	01013903          	ld	s2,16(sp)
   1c164:	00813983          	ld	s3,8(sp)
   1c168:	03010113          	addi	sp,sp,48
   1c16c:	00008067          	jalr	zero,0(ra)

000000000001c170 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c170:	fc010113          	addi	sp,sp,-64
   1c174:	02113c23          	sd	ra,56(sp)
   1c178:	02813823          	sd	s0,48(sp)
   1c17c:	02913423          	sd	s1,40(sp)
   1c180:	03213023          	sd	s2,32(sp)
   1c184:	01313c23          	sd	s3,24(sp)
   1c188:	01413823          	sd	s4,16(sp)
   1c18c:	00050413          	addi	s0,a0,0
   1c190:	00058493          	addi	s1,a1,0
   1c194:	00060993          	addi	s3,a2,0
   1c198:	00068913          	addi	s2,a3,0
    { return _M_next_resize; }
   1c19c:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1c1a0:	00070693          	addi	a3,a4,0
   1c1a4:	01853603          	ld	a2,24(a0)
   1c1a8:	00853583          	ld	a1,8(a0)
   1c1ac:	02050513          	addi	a0,a0,32
   1c1b0:	c20fa0ef          	jal	ra,165d0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1c1b4:	00a13023          	sd	a0,0(sp)
   1c1b8:	00b13423          	sd	a1,8(sp)
      if (__do_rehash.first)
   1c1bc:	0ff57513          	andi	a0,a0,255
   1c1c0:	06051063          	bne	a0,zero,1c220 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xb0>
      if (_M_buckets[__bkt])
   1c1c4:	00349593          	slli	a1,s1,0x3
   1c1c8:	00043783          	ld	a5,0(s0)
   1c1cc:	00b787b3          	add	a5,a5,a1
   1c1d0:	0007b783          	ld	a5,0(a5)
   1c1d4:	08078663          	beq	a5,zero,1c260 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xf0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1c1d8:	0007b783          	ld	a5,0(a5)
   1c1dc:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1c1e0:	00043783          	ld	a5,0(s0)
   1c1e4:	00b787b3          	add	a5,a5,a1
   1c1e8:	0007b783          	ld	a5,0(a5)
   1c1ec:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1c1f0:	01843783          	ld	a5,24(s0)
   1c1f4:	00178793          	addi	a5,a5,1
   1c1f8:	00f43c23          	sd	a5,24(s0)
    }
   1c1fc:	00090513          	addi	a0,s2,0
   1c200:	03813083          	ld	ra,56(sp)
   1c204:	03013403          	ld	s0,48(sp)
   1c208:	02813483          	ld	s1,40(sp)
   1c20c:	02013903          	ld	s2,32(sp)
   1c210:	01813983          	ld	s3,24(sp)
   1c214:	01013a03          	ld	s4,16(sp)
   1c218:	04010113          	addi	sp,sp,64
   1c21c:	00008067          	jalr	zero,0(ra)
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1c220:	00000613          	addi	a2,zero,0
   1c224:	00040513          	addi	a0,s0,0
   1c228:	00026317          	auipc	t1,0x26
   1c22c:	1b033303          	ld	t1,432(t1) # 423d8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x2638c>
   1c230:	000300e7          	jalr	ra,0(t1)
   1c234:	0200006f          	jal	zero,1c254 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xe4>
      __catch(...)
   1c238:	9c8fa0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1c23c:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1c240:	be0fa0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   1c244:	00050413          	addi	s0,a0,0
   1c248:	c48fa0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1c24c:	00040513          	addi	a0,s0,0
   1c250:	ca0fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    { return __num % __den; }
   1c254:	00843583          	ld	a1,8(s0)
   1c258:	02b9f4b3          	remu	s1,s3,a1
   1c25c:	f69ff06f          	jal	zero,1c1c4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x54>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1c260:	01043783          	ld	a5,16(s0)
   1c264:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1c268:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1c26c:	00093783          	ld	a5,0(s2)
   1c270:	02078063          	beq	a5,zero,1c290 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x120>
   1c274:	0087b783          	ld	a5,8(a5)
   1c278:	00843703          	ld	a4,8(s0)
   1c27c:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1c280:	00043703          	ld	a4,0(s0)
   1c284:	00379793          	slli	a5,a5,0x3
   1c288:	00f707b3          	add	a5,a4,a5
   1c28c:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1c290:	00043783          	ld	a5,0(s0)
   1c294:	00b787b3          	add	a5,a5,a1
   1c298:	01040713          	addi	a4,s0,16
   1c29c:	00e7b023          	sd	a4,0(a5)
   1c2a0:	f51ff06f          	jal	zero,1c1f0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x80>

000000000001c2a4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1c2a4:	fc010113          	addi	sp,sp,-64
   1c2a8:	02113c23          	sd	ra,56(sp)
   1c2ac:	02813823          	sd	s0,48(sp)
   1c2b0:	02913423          	sd	s1,40(sp)
   1c2b4:	03213023          	sd	s2,32(sp)
   1c2b8:	01313c23          	sd	s3,24(sp)
   1c2bc:	00050493          	addi	s1,a0,0
   1c2c0:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1c2c4:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1c2c8:	00853903          	ld	s2,8(a0)
   1c2cc:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1c2d0:	00098693          	addi	a3,s3,0
   1c2d4:	00058613          	addi	a2,a1,0
   1c2d8:	00090593          	addi	a1,s2,0
   1c2dc:	00026317          	auipc	t1,0x26
   1c2e0:	03c33303          	ld	t1,60(t1) # 42318 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26920>
   1c2e4:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1c2e8:	02050663          	beq	a0,zero,1c314 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x70>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1c2ec:	00053503          	ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1c2f0:	02050263          	beq	a0,zero,1c314 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x70>
	return __node->_M_v().second;
   1c2f4:	01050513          	addi	a0,a0,16
    }
   1c2f8:	03813083          	ld	ra,56(sp)
   1c2fc:	03013403          	ld	s0,48(sp)
   1c300:	02813483          	ld	s1,40(sp)
   1c304:	02013903          	ld	s2,32(sp)
   1c308:	01813983          	ld	s3,24(sp)
   1c30c:	04010113          	addi	sp,sp,64
   1c310:	00008067          	jalr	zero,0(ra)
	  : _M_h(__h),
   1c314:	00913023          	sd	s1,0(sp)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c318:	02800513          	addi	a0,zero,40
   1c31c:	a04fa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1c320:	00050693          	addi	a3,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1c324:	00053023          	sd	zero,0(a0)
   1c328:	00043783          	ld	a5,0(s0)
   1c32c:	00f53423          	sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1c330:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1c334:	02053023          	sd	zero,32(a0)
  type_unit() = default;
   1c338:	00026797          	auipc	a5,0x26
   1c33c:	0207b783          	ld	a5,32(a5) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   1c340:	01078793          	addi	a5,a5,16
   1c344:	00f53823          	sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1c348:	00a13423          	sd	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1c34c:	00100713          	addi	a4,zero,1
   1c350:	00098613          	addi	a2,s3,0
   1c354:	00090593          	addi	a1,s2,0
   1c358:	00048513          	addi	a0,s1,0
   1c35c:	00026317          	auipc	t1,0x26
   1c360:	07433303          	ld	t1,116(t1) # 423d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x26260>
   1c364:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1c368:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1c36c:	f8dff06f          	jal	zero,1c2f8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x54>
    }
   1c370:	00050413          	addi	s0,a0,0
   1c374:	00010513          	addi	a0,sp,0
   1c378:	00026317          	auipc	t1,0x26
   1c37c:	01033303          	ld	t1,16(t1) # 42388 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x269d4>
   1c380:	000300e7          	jalr	ra,0(t1)
   1c384:	00040513          	addi	a0,s0,0
   1c388:	b68fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001c38c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1c38c:	fc010113          	addi	sp,sp,-64
   1c390:	02113c23          	sd	ra,56(sp)
   1c394:	02813823          	sd	s0,48(sp)
   1c398:	02913423          	sd	s1,40(sp)
   1c39c:	03213023          	sd	s2,32(sp)
   1c3a0:	01313c23          	sd	s3,24(sp)
   1c3a4:	00050493          	addi	s1,a0,0
   1c3a8:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1c3ac:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1c3b0:	00853903          	ld	s2,8(a0)
   1c3b4:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1c3b8:	00098693          	addi	a3,s3,0
   1c3bc:	00058613          	addi	a2,a1,0
   1c3c0:	00090593          	addi	a1,s2,0
   1c3c4:	00026317          	auipc	t1,0x26
   1c3c8:	f5433303          	ld	t1,-172(t1) # 42318 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26920>
   1c3cc:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1c3d0:	02050663          	beq	a0,zero,1c3fc <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x70>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1c3d4:	00053503          	ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1c3d8:	02050263          	beq	a0,zero,1c3fc <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x70>
	return __node->_M_v().second;
   1c3dc:	01050513          	addi	a0,a0,16
    }
   1c3e0:	03813083          	ld	ra,56(sp)
   1c3e4:	03013403          	ld	s0,48(sp)
   1c3e8:	02813483          	ld	s1,40(sp)
   1c3ec:	02013903          	ld	s2,32(sp)
   1c3f0:	01813983          	ld	s3,24(sp)
   1c3f4:	04010113          	addi	sp,sp,64
   1c3f8:	00008067          	jalr	zero,0(ra)
	  : _M_h(__h),
   1c3fc:	00913023          	sd	s1,0(sp)
   1c400:	02800513          	addi	a0,zero,40
   1c404:	91cfa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1c408:	00050693          	addi	a3,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1c40c:	00053023          	sd	zero,0(a0)
   1c410:	00043783          	ld	a5,0(s0)
   1c414:	00f53423          	sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1c418:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1c41c:	02053023          	sd	zero,32(a0)
   1c420:	00026797          	auipc	a5,0x26
   1c424:	f387b783          	ld	a5,-200(a5) # 42358 <vtable for dwarf::type_unit@@Base+0xa00>
   1c428:	01078793          	addi	a5,a5,16
   1c42c:	00f53823          	sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1c430:	00a13423          	sd	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1c434:	00100713          	addi	a4,zero,1
   1c438:	00098613          	addi	a2,s3,0
   1c43c:	00090593          	addi	a1,s2,0
   1c440:	00048513          	addi	a0,s1,0
   1c444:	00026317          	auipc	t1,0x26
   1c448:	f8c33303          	ld	t1,-116(t1) # 423d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x26260>
   1c44c:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1c450:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1c454:	f8dff06f          	jal	zero,1c3e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x54>
    }
   1c458:	00050413          	addi	s0,a0,0
   1c45c:	00010513          	addi	a0,sp,0
   1c460:	00026317          	auipc	t1,0x26
   1c464:	f2833303          	ld	t1,-216(t1) # 42388 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x269d4>
   1c468:	000300e7          	jalr	ra,0(t1)
   1c46c:	00040513          	addi	a0,s0,0
   1c470:	a80fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001c474 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c474:	fd010113          	addi	sp,sp,-48
   1c478:	02113423          	sd	ra,40(sp)
   1c47c:	02813023          	sd	s0,32(sp)
   1c480:	00913c23          	sd	s1,24(sp)
   1c484:	01213823          	sd	s2,16(sp)
   1c488:	01313423          	sd	s3,8(sp)
   1c48c:	00050493          	addi	s1,a0,0
   1c490:	00058413          	addi	s0,a1,0
	if (__builtin_expect(__bkt_count == 1, false))
   1c494:	00100793          	addi	a5,zero,1
   1c498:	04f58263          	beq	a1,a5,1c4dc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1c49c:	fff00793          	addi	a5,zero,-1
   1c4a0:	0047d793          	srli	a5,a5,0x4
   1c4a4:	04b7e263          	bltu	a5,a1,1c4e8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x74>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c4a8:	00359993          	slli	s3,a1,0x3
   1c4ac:	00098513          	addi	a0,s3,0
   1c4b0:	870fa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1c4b4:	00050913          	addi	s2,a0,0
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1c4b8:	00098613          	addi	a2,s3,0
   1c4bc:	00000593          	addi	a1,zero,0
   1c4c0:	920fa0ef          	jal	ra,165e0 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1c4c4:	0104b603          	ld	a2,16(s1)
      _M_before_begin._M_nxt = nullptr;
   1c4c8:	0004b823          	sd	zero,16(s1)
      while (__p)
   1c4cc:	08060c63          	beq	a2,zero,1c564 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      std::size_t __bbegin_bkt = 0;
   1c4d0:	00000593          	addi	a1,zero,0
	      __new_buckets[__bkt] = &_M_before_begin;
   1c4d4:	01048893          	addi	a7,s1,16
   1c4d8:	0380006f          	jal	zero,1c510 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
	    _M_single_bucket = nullptr;
   1c4dc:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1c4e0:	03050913          	addi	s2,a0,48
   1c4e4:	fe1ff06f          	jal	zero,1c4c4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x50>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1c4e8:	fff00793          	addi	a5,zero,-1
   1c4ec:	0037d793          	srli	a5,a5,0x3
   1c4f0:	00b7f463          	bgeu	a5,a1,1c4f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x84>
	      std::__throw_bad_array_new_length();
   1c4f4:	ffdf90ef          	jal	ra,164f0 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1c4f8:	ee9f90ef          	jal	ra,163e0 <std::__throw_bad_alloc()@plt>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1c4fc:	00083683          	ld	a3,0(a6)
   1c500:	00d73023          	sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1c504:	0007b783          	ld	a5,0(a5)
   1c508:	00e7b023          	sd	a4,0(a5)
      while (__p)
   1c50c:	04060c63          	beq	a2,zero,1c564 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xf0>
      _M_next() const noexcept
   1c510:	00060713          	addi	a4,a2,0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1c514:	00063603          	ld	a2,0(a2)
    { return __num % __den; }
   1c518:	00873683          	ld	a3,8(a4)
   1c51c:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1c520:	00369793          	slli	a5,a3,0x3
   1c524:	00f907b3          	add	a5,s2,a5
   1c528:	0007b803          	ld	a6,0(a5)
   1c52c:	fc0818e3          	bne	a6,zero,1c4fc <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x88>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1c530:	0104b503          	ld	a0,16(s1)
   1c534:	00a73023          	sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1c538:	00e4b823          	sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1c53c:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1c540:	00073783          	ld	a5,0(a4)
   1c544:	00078c63          	beq	a5,zero,1c55c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xe8>
		__new_buckets[__bbegin_bkt] = __p;
   1c548:	00359593          	slli	a1,a1,0x3
   1c54c:	00b905b3          	add	a1,s2,a1
   1c550:	00e5b023          	sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1c554:	00068593          	addi	a1,a3,0
   1c558:	fb5ff06f          	jal	zero,1c50c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
   1c55c:	00068593          	addi	a1,a3,0
   1c560:	fadff06f          	jal	zero,1c50c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1c564:	0004b503          	ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1c568:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1c56c:	00f50463          	beq	a0,a5,1c574 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x100>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c570:	fa1f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      _M_bucket_count = __bkt_count;
   1c574:	0084b423          	sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1c578:	0124b023          	sd	s2,0(s1)
    }
   1c57c:	02813083          	ld	ra,40(sp)
   1c580:	02013403          	ld	s0,32(sp)
   1c584:	01813483          	ld	s1,24(sp)
   1c588:	01013903          	ld	s2,16(sp)
   1c58c:	00813983          	ld	s3,8(sp)
   1c590:	03010113          	addi	sp,sp,48
   1c594:	00008067          	jalr	zero,0(ra)

000000000001c598 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1c598:	fc010113          	addi	sp,sp,-64
   1c59c:	02113c23          	sd	ra,56(sp)
   1c5a0:	02813823          	sd	s0,48(sp)
   1c5a4:	02913423          	sd	s1,40(sp)
   1c5a8:	03213023          	sd	s2,32(sp)
   1c5ac:	01313c23          	sd	s3,24(sp)
   1c5b0:	01413823          	sd	s4,16(sp)
   1c5b4:	00050413          	addi	s0,a0,0
   1c5b8:	00058493          	addi	s1,a1,0
   1c5bc:	00060993          	addi	s3,a2,0
   1c5c0:	00068913          	addi	s2,a3,0
    { return _M_next_resize; }
   1c5c4:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1c5c8:	00070693          	addi	a3,a4,0
   1c5cc:	01853603          	ld	a2,24(a0)
   1c5d0:	00853583          	ld	a1,8(a0)
   1c5d4:	02050513          	addi	a0,a0,32
   1c5d8:	ff9f90ef          	jal	ra,165d0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1c5dc:	00a13023          	sd	a0,0(sp)
   1c5e0:	00b13423          	sd	a1,8(sp)
      if (__do_rehash.first)
   1c5e4:	0ff57513          	andi	a0,a0,255
   1c5e8:	06051063          	bne	a0,zero,1c648 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xb0>
      if (_M_buckets[__bkt])
   1c5ec:	00349593          	slli	a1,s1,0x3
   1c5f0:	00043783          	ld	a5,0(s0)
   1c5f4:	00b787b3          	add	a5,a5,a1
   1c5f8:	0007b783          	ld	a5,0(a5)
   1c5fc:	08078663          	beq	a5,zero,1c688 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xf0>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1c600:	0007b783          	ld	a5,0(a5)
   1c604:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1c608:	00043783          	ld	a5,0(s0)
   1c60c:	00b787b3          	add	a5,a5,a1
   1c610:	0007b783          	ld	a5,0(a5)
   1c614:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1c618:	01843783          	ld	a5,24(s0)
   1c61c:	00178793          	addi	a5,a5,1
   1c620:	00f43c23          	sd	a5,24(s0)
    }
   1c624:	00090513          	addi	a0,s2,0
   1c628:	03813083          	ld	ra,56(sp)
   1c62c:	03013403          	ld	s0,48(sp)
   1c630:	02813483          	ld	s1,40(sp)
   1c634:	02013903          	ld	s2,32(sp)
   1c638:	01813983          	ld	s3,24(sp)
   1c63c:	01013a03          	ld	s4,16(sp)
   1c640:	04010113          	addi	sp,sp,64
   1c644:	00008067          	jalr	zero,0(ra)
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1c648:	00000613          	addi	a2,zero,0
   1c64c:	00040513          	addi	a0,s0,0
   1c650:	00026317          	auipc	t1,0x26
   1c654:	c4833303          	ld	t1,-952(t1) # 42298 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x25e24>
   1c658:	000300e7          	jalr	ra,0(t1)
   1c65c:	0200006f          	jal	zero,1c67c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xe4>
      __catch(...)
   1c660:	da1f90ef          	jal	ra,16400 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1c664:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1c668:	fb9f90ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   1c66c:	00050413          	addi	s0,a0,0
   1c670:	820fa0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1c674:	00040513          	addi	a0,s0,0
   1c678:	878fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    { return __num % __den; }
   1c67c:	00843583          	ld	a1,8(s0)
   1c680:	02b9f4b3          	remu	s1,s3,a1
   1c684:	f69ff06f          	jal	zero,1c5ec <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x54>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1c688:	01043783          	ld	a5,16(s0)
   1c68c:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1c690:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1c694:	00093783          	ld	a5,0(s2)
   1c698:	02078063          	beq	a5,zero,1c6b8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x120>
   1c69c:	0087b783          	ld	a5,8(a5)
   1c6a0:	00843703          	ld	a4,8(s0)
   1c6a4:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1c6a8:	00043703          	ld	a4,0(s0)
   1c6ac:	00379793          	slli	a5,a5,0x3
   1c6b0:	00f707b3          	add	a5,a4,a5
   1c6b4:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1c6b8:	00043783          	ld	a5,0(s0)
   1c6bc:	00b787b3          	add	a5,a5,a1
   1c6c0:	01040713          	addi	a4,s0,16
   1c6c4:	00e7b023          	sd	a4,0(a5)
   1c6c8:	f51ff06f          	jal	zero,1c618 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x80>

000000000001c6cc <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1c6cc:	fd010113          	addi	sp,sp,-48
   1c6d0:	02113423          	sd	ra,40(sp)
   1c6d4:	02813023          	sd	s0,32(sp)
   1c6d8:	00913c23          	sd	s1,24(sp)
   1c6dc:	01213823          	sd	s2,16(sp)
   1c6e0:	01313423          	sd	s3,8(sp)
   1c6e4:	01413023          	sd	s4,0(sp)
   1c6e8:	00050913          	addi	s2,a0,0
   1c6ec:	00058413          	addi	s0,a1,0
	return _M_hash()(__k);
   1c6f0:	0005ba03          	ld	s4,0(a1)
    { return __num % __den; }
   1c6f4:	00853983          	ld	s3,8(a0)
   1c6f8:	033a79b3          	remu	s3,s4,s3
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1c6fc:	000a0693          	addi	a3,s4,0
   1c700:	00058613          	addi	a2,a1,0
   1c704:	00098593          	addi	a1,s3,0
   1c708:	00026317          	auipc	t1,0x26
   1c70c:	e4033303          	ld	t1,-448(t1) # 42548 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x26558>
   1c710:	000300e7          	jalr	ra,0(t1)
	if (__before_n)
   1c714:	02050863          	beq	a0,zero,1c744 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x78>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1c718:	00053783          	ld	a5,0(a0)
	return __node->_M_v().second;
   1c71c:	01078513          	addi	a0,a5,16
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1c720:	02078263          	beq	a5,zero,1c744 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x78>
    }
   1c724:	02813083          	ld	ra,40(sp)
   1c728:	02013403          	ld	s0,32(sp)
   1c72c:	01813483          	ld	s1,24(sp)
   1c730:	01013903          	ld	s2,16(sp)
   1c734:	00813983          	ld	s3,8(sp)
   1c738:	00013a03          	ld	s4,0(sp)
   1c73c:	03010113          	addi	sp,sp,48
   1c740:	00008067          	jalr	zero,0(ra)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1c744:	03800513          	addi	a0,zero,56
   1c748:	dd9f90ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1c74c:	00050493          	addi	s1,a0,0
    _Hash_node_base() noexcept : _M_nxt() { }
   1c750:	00053023          	sd	zero,0(a0)
   1c754:	00043783          	ld	a5,0(s0)
   1c758:	00f53423          	sd	a5,8(a0)
  abbrev_entry() : code(0) {}
   1c75c:	00053823          	sd	zero,16(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1c760:	02053023          	sd	zero,32(a0)
   1c764:	02053423          	sd	zero,40(a0)
   1c768:	02053823          	sd	zero,48(a0)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1c76c:	00100713          	addi	a4,zero,1
   1c770:	00050693          	addi	a3,a0,0
   1c774:	000a0613          	addi	a2,s4,0
   1c778:	00098593          	addi	a1,s3,0
   1c77c:	00090513          	addi	a0,s2,0
   1c780:	00026317          	auipc	t1,0x26
   1c784:	de033303          	ld	t1,-544(t1) # 42560 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)@@Base+0x25fc8>
   1c788:	000300e7          	jalr	ra,0(t1)
      return __pos->second;
   1c78c:	01050513          	addi	a0,a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1c790:	f95ff06f          	jal	zero,1c724 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x58>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1c794:	00050413          	addi	s0,a0,0
   1c798:	0204b503          	ld	a0,32(s1)
	if (__p)
   1c79c:	00050463          	beq	a0,zero,1c7a4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1c7a0:	d71f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1c7a4:	00048513          	addi	a0,s1,0
   1c7a8:	d69f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1c7ac:	00040513          	addi	a0,s0,0
   1c7b0:	f41f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001c7b4 <dwarf::cursor::skip_initial_length()>:
  pos = begin + length;
  return make_shared<section>(sec->type, begin, length, sec->ord, fmt);
}

void cursor::skip_initial_length() {
  switch (sec->fmt) {
   1c7b4:	00053783          	ld	a5,0(a0)
   1c7b8:	0187a783          	lw	a5,24(a5)
   1c7bc:	00100713          	addi	a4,zero,1
   1c7c0:	00e79a63          	bne	a5,a4,1c7d4 <dwarf::cursor::skip_initial_length()+0x20>
  case format::dwarf32:
    pos += sizeof(uword);
   1c7c4:	01053783          	ld	a5,16(a0)
   1c7c8:	00478793          	addi	a5,a5,4
   1c7cc:	00f53823          	sd	a5,16(a0)
   1c7d0:	00008067          	jalr	zero,0(ra)
  switch (sec->fmt) {
   1c7d4:	00200713          	addi	a4,zero,2
   1c7d8:	00e79863          	bne	a5,a4,1c7e8 <dwarf::cursor::skip_initial_length()+0x34>
    break;
  case format::dwarf64:
    pos += sizeof(uword) + sizeof(uint64_t);
   1c7dc:	01053783          	ld	a5,16(a0)
   1c7e0:	00c78793          	addi	a5,a5,12
    break;
   1c7e4:	fe9ff06f          	jal	zero,1c7cc <dwarf::cursor::skip_initial_length()+0x18>
void cursor::skip_initial_length() {
   1c7e8:	fe010113          	addi	sp,sp,-32
   1c7ec:	00113c23          	sd	ra,24(sp)
   1c7f0:	00813823          	sd	s0,16(sp)
   1c7f4:	00913423          	sd	s1,8(sp)
  default:
    throw logic_error("cannot skip initial length with unknown format");
   1c7f8:	01000513          	addi	a0,zero,16
   1c7fc:	c25f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1c800:	00050493          	addi	s1,a0,0
   1c804:	0001a597          	auipc	a1,0x1a
   1c808:	2ec58593          	addi	a1,a1,748 # 36af0 <std::piecewise_construct+0x8>
   1c80c:	e05f90ef          	jal	ra,16610 <std::logic_error::logic_error(char const*)@plt>
   1c810:	00026617          	auipc	a2,0x26
   1c814:	c6063603          	ld	a2,-928(a2) # 42470 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1c818:	00026597          	auipc	a1,0x26
   1c81c:	d605b583          	ld	a1,-672(a1) # 42578 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1c820:	00048513          	addi	a0,s1,0
   1c824:	e9df90ef          	jal	ra,166c0 <__cxa_throw@plt>
   1c828:	00050413          	addi	s0,a0,0
   1c82c:	00048513          	addi	a0,s1,0
   1c830:	ca1f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1c834:	00040513          	addi	a0,s0,0
   1c838:	eb9f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001c83c <dwarf::cursor::cstr(unsigned long*)>:
  const char *p = this->cstr(&size);
  out.resize(size);
  memmove(&out.front(), p, size);
}

const char *cursor::cstr(size_t *size_out) {
   1c83c:	00050613          	addi	a2,a0,0
  // Scan string size
  const char *p = pos;
   1c840:	01053503          	ld	a0,16(a0)
      { return _M_ptr; }
   1c844:	00063803          	ld	a6,0(a2)
  while (pos < sec->end && *pos)
   1c848:	01083703          	ld	a4,16(a6)
   1c84c:	04e57063          	bgeu	a0,a4,1c88c <dwarf::cursor::cstr(unsigned long*)+0x50>
   1c850:	00050793          	addi	a5,a0,0
   1c854:	0007c683          	lbu	a3,0(a5)
   1c858:	00068a63          	beq	a3,zero,1c86c <dwarf::cursor::cstr(unsigned long*)+0x30>
    pos++;
   1c85c:	00178793          	addi	a5,a5,1
   1c860:	00f63823          	sd	a5,16(a2)
  while (pos < sec->end && *pos)
   1c864:	01083703          	ld	a4,16(a6)
   1c868:	fee7e6e3          	bltu	a5,a4,1c854 <dwarf::cursor::cstr(unsigned long*)+0x18>
  if (pos == sec->end)
   1c86c:	02e78463          	beq	a5,a4,1c894 <dwarf::cursor::cstr(unsigned long*)+0x58>
    throw format_error("unterminated string");
  if (size_out)
   1c870:	00058663          	beq	a1,zero,1c87c <dwarf::cursor::cstr(unsigned long*)+0x40>
    *size_out = pos - p;
   1c874:	40a787b3          	sub	a5,a5,a0
   1c878:	00f5b023          	sd	a5,0(a1)
  pos++;
   1c87c:	01063783          	ld	a5,16(a2)
   1c880:	00178793          	addi	a5,a5,1
   1c884:	00f63823          	sd	a5,16(a2)
  return p;
}
   1c888:	00008067          	jalr	zero,0(ra)
  while (pos < sec->end && *pos)
   1c88c:	00050793          	addi	a5,a0,0
   1c890:	fddff06f          	jal	zero,1c86c <dwarf::cursor::cstr(unsigned long*)+0x30>
const char *cursor::cstr(size_t *size_out) {
   1c894:	fe010113          	addi	sp,sp,-32
   1c898:	00113c23          	sd	ra,24(sp)
   1c89c:	00813823          	sd	s0,16(sp)
   1c8a0:	00913423          	sd	s1,8(sp)
    throw format_error("unterminated string");
   1c8a4:	01000513          	addi	a0,zero,16
   1c8a8:	b79f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1c8ac:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1c8b0:	0001a597          	auipc	a1,0x1a
   1c8b4:	27058593          	addi	a1,a1,624 # 36b20 <std::piecewise_construct+0x38>
   1c8b8:	eb9f90ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   1c8bc:	00026797          	auipc	a5,0x26
   1c8c0:	c9c7b783          	ld	a5,-868(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   1c8c4:	01078793          	addi	a5,a5,16
   1c8c8:	00f43023          	sd	a5,0(s0)
   1c8cc:	00026617          	auipc	a2,0x26
   1c8d0:	ab463603          	ld	a2,-1356(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   1c8d4:	00026597          	auipc	a1,0x26
   1c8d8:	9dc5b583          	ld	a1,-1572(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1c8dc:	00040513          	addi	a0,s0,0
   1c8e0:	de1f90ef          	jal	ra,166c0 <__cxa_throw@plt>
   1c8e4:	00050493          	addi	s1,a0,0
   1c8e8:	00040513          	addi	a0,s0,0
   1c8ec:	be5f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1c8f0:	00048513          	addi	a0,s1,0
   1c8f4:	dfdf90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001c8f8 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
void cursor::string(std::string &out) {
   1c8f8:	fd010113          	addi	sp,sp,-48
   1c8fc:	02113423          	sd	ra,40(sp)
   1c900:	02813023          	sd	s0,32(sp)
   1c904:	00913c23          	sd	s1,24(sp)
   1c908:	00058413          	addi	s0,a1,0
  const char *p = this->cstr(&size);
   1c90c:	00810593          	addi	a1,sp,8
   1c910:	f2dff0ef          	jal	ra,1c83c <dwarf::cursor::cstr(unsigned long*)>
   1c914:	00050493          	addi	s1,a0,0
      { this->resize(__n, _CharT()); }
   1c918:	00000613          	addi	a2,zero,0
   1c91c:	00813583          	ld	a1,8(sp)
   1c920:	00040513          	addi	a0,s0,0
   1c924:	a8df90ef          	jal	ra,163b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&out.front(), p, size);
   1c928:	00813603          	ld	a2,8(sp)
   1c92c:	00048593          	addi	a1,s1,0
   1c930:	00043503          	ld	a0,0(s0)
   1c934:	e4df90ef          	jal	ra,16780 <memmove@plt>
}
   1c938:	02813083          	ld	ra,40(sp)
   1c93c:	02013403          	ld	s0,32(sp)
   1c940:	01813483          	ld	s1,24(sp)
   1c944:	03010113          	addi	sp,sp,48
   1c948:	00008067          	jalr	zero,0(ra)

000000000001c94c <dwarf::cursor::underflow()>:
  default:
    throw format_error("unknown form " + to_string(form));
  }
}

void cursor::underflow() {
   1c94c:	fe010113          	addi	sp,sp,-32
   1c950:	00113c23          	sd	ra,24(sp)
   1c954:	00813823          	sd	s0,16(sp)
   1c958:	00913423          	sd	s1,8(sp)
  throw underflow_error("cannot read past end of DWARF section");
   1c95c:	01000513          	addi	a0,zero,16
   1c960:	ac1f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1c964:	00050413          	addi	s0,a0,0
   1c968:	0001a597          	auipc	a1,0x1a
   1c96c:	1d058593          	addi	a1,a1,464 # 36b38 <std::piecewise_construct+0x50>
   1c970:	e71f90ef          	jal	ra,167e0 <std::underflow_error::underflow_error(char const*)@plt>
   1c974:	00026617          	auipc	a2,0x26
   1c978:	c6c63603          	ld	a2,-916(a2) # 425e0 <std::underflow_error::~underflow_error()@GLIBCXX_3.4>
   1c97c:	00026597          	auipc	a1,0x26
   1c980:	a7c5b583          	ld	a1,-1412(a1) # 423f8 <typeinfo for std::underflow_error@GLIBCXX_3.4>
   1c984:	00040513          	addi	a0,s0,0
   1c988:	d39f90ef          	jal	ra,166c0 <__cxa_throw@plt>
   1c98c:	00050493          	addi	s1,a0,0
   1c990:	00040513          	addi	a0,s0,0
   1c994:	b3df90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1c998:	00048513          	addi	a0,s1,0
   1c99c:	d55f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001c9a0 <dwarf::cursor::sleb128()>:
   1c9a0:	00053583          	ld	a1,0(a0)
  unsigned shift = 0;
   1c9a4:	00000713          	addi	a4,zero,0
  uint64_t result = 0;
   1c9a8:	00000613          	addi	a2,zero,0
  while (pos < sec->end) {
   1c9ac:	01053783          	ld	a5,16(a0)
   1c9b0:	0105b683          	ld	a3,16(a1)
   1c9b4:	04d7f863          	bgeu	a5,a3,1ca04 <dwarf::cursor::sleb128()+0x64>
    uint8_t byte = *(uint8_t *)(pos++);
   1c9b8:	00178693          	addi	a3,a5,1
   1c9bc:	00d53823          	sd	a3,16(a0)
   1c9c0:	0007c683          	lbu	a3,0(a5)
    result |= (uint64_t)(byte & 0x7f) << shift;
   1c9c4:	07f6f793          	andi	a5,a3,127
   1c9c8:	00e797b3          	sll	a5,a5,a4
   1c9cc:	00f66633          	or	a2,a2,a5
    shift += 7;
   1c9d0:	0077071b          	addiw	a4,a4,7
    if ((byte & 0x80) == 0) {
   1c9d4:	0186979b          	slliw	a5,a3,0x18
   1c9d8:	4187d79b          	sraiw	a5,a5,0x18
   1c9dc:	fc07c8e3          	blt	a5,zero,1c9ac <dwarf::cursor::sleb128()+0xc>
      if (shift < sizeof(result) * 8 && (byte & 0x40))
   1c9e0:	03f00793          	addi	a5,zero,63
   1c9e4:	00e7ec63          	bltu	a5,a4,1c9fc <dwarf::cursor::sleb128()+0x5c>
   1c9e8:	0406f693          	andi	a3,a3,64
   1c9ec:	00068863          	beq	a3,zero,1c9fc <dwarf::cursor::sleb128()+0x5c>
        result |= -((uint64_t)1 << shift);
   1c9f0:	fff00793          	addi	a5,zero,-1
   1c9f4:	00e797b3          	sll	a5,a5,a4
   1c9f8:	00f66633          	or	a2,a2,a5
      return result;
   1c9fc:	00060513          	addi	a0,a2,0
}
   1ca00:	00008067          	jalr	zero,0(ra)
int64_t cursor::sleb128() {
   1ca04:	ff010113          	addi	sp,sp,-16
   1ca08:	00113423          	sd	ra,8(sp)
  underflow();
   1ca0c:	f41ff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
  return 0;
   1ca10:	00000513          	addi	a0,zero,0
}
   1ca14:	00813083          	ld	ra,8(sp)
   1ca18:	01010113          	addi	sp,sp,16
   1ca1c:	00008067          	jalr	zero,0(ra)

000000000001ca20 <dwarf::cursor::skip_form(dwarf::DW_FORM)>:
void cursor::skip_form(DW_FORM form) {
   1ca20:	fa010113          	addi	sp,sp,-96
   1ca24:	04113c23          	sd	ra,88(sp)
   1ca28:	04813823          	sd	s0,80(sp)
   1ca2c:	04913423          	sd	s1,72(sp)
   1ca30:	05213023          	sd	s2,64(sp)
   1ca34:	00058493          	addi	s1,a1,0
  switch (form) {
   1ca38:	02000793          	addi	a5,zero,32
   1ca3c:	34b7ec63          	bltu	a5,a1,1cd94 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x374>
   1ca40:	00050413          	addi	s0,a0,0
   1ca44:	00259793          	slli	a5,a1,0x2
   1ca48:	0001a717          	auipc	a4,0x1a
   1ca4c:	1a070713          	addi	a4,a4,416 # 36be8 <std::piecewise_construct+0x100>
   1ca50:	00e787b3          	add	a5,a5,a4
   1ca54:	0007a783          	lw	a5,0(a5)
   1ca58:	00e787b3          	add	a5,a5,a4
   1ca5c:	00078067          	jalr	zero,0(a5)
    while (pos < sec->end) {
   1ca60:	01053783          	ld	a5,16(a0)
   1ca64:	00053503          	ld	a0,0(a0)
   1ca68:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   1ca6c:	00000593          	addi	a1,zero,0
    int shift = 0;
   1ca70:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1ca74:	02e7fa63          	bgeu	a5,a4,1caa8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x88>
      uint8_t byte = *(uint8_t *)(pos++);
   1ca78:	00178793          	addi	a5,a5,1
   1ca7c:	00f43823          	sd	a5,16(s0)
   1ca80:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1ca84:	07f77693          	andi	a3,a4,127
   1ca88:	00c696b3          	sll	a3,a3,a2
   1ca8c:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1ca90:	0187171b          	slliw	a4,a4,0x18
   1ca94:	4187571b          	sraiw	a4,a4,0x18
   1ca98:	00075e63          	bge	a4,zero,1cab4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x94>
      shift += 7;
   1ca9c:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1caa0:	01053703          	ld	a4,16(a0)
   1caa4:	fce7eae3          	bltu	a5,a4,1ca78 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x58>
    underflow();
   1caa8:	00040513          	addi	a0,s0,0
   1caac:	ea1ff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   1cab0:	00000593          	addi	a1,zero,0
    skip_form((DW_FORM)uleb128());
   1cab4:	0005859b          	addiw	a1,a1,0
   1cab8:	00040513          	addi	a0,s0,0
   1cabc:	f65ff0ef          	jal	ra,1ca20 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
    break;
   1cac0:	0640006f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end) {
   1cac4:	01053783          	ld	a5,16(a0)
   1cac8:	00053503          	ld	a0,0(a0)
   1cacc:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   1cad0:	00000593          	addi	a1,zero,0
    int shift = 0;
   1cad4:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1cad8:	02e7fa63          	bgeu	a5,a4,1cb0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xec>
      uint8_t byte = *(uint8_t *)(pos++);
   1cadc:	00178793          	addi	a5,a5,1
   1cae0:	00f43823          	sd	a5,16(s0)
   1cae4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1cae8:	07f77693          	andi	a3,a4,127
   1caec:	00c696b3          	sll	a3,a3,a2
   1caf0:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1caf4:	0187171b          	slliw	a4,a4,0x18
   1caf8:	4187571b          	sraiw	a4,a4,0x18
   1cafc:	00075e63          	bge	a4,zero,1cb18 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xf8>
      shift += 7;
   1cb00:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1cb04:	01053703          	ld	a4,16(a0)
   1cb08:	fce7eae3          	bltu	a5,a4,1cadc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xbc>
    underflow();
   1cb0c:	00040513          	addi	a0,s0,0
   1cb10:	e3dff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   1cb14:	00000593          	addi	a1,zero,0
    pos += tmp;
   1cb18:	01043783          	ld	a5,16(s0)
   1cb1c:	00b787b3          	add	a5,a5,a1
   1cb20:	00f43823          	sd	a5,16(s0)
}
   1cb24:	05813083          	ld	ra,88(sp)
   1cb28:	05013403          	ld	s0,80(sp)
   1cb2c:	04813483          	ld	s1,72(sp)
   1cb30:	04013903          	ld	s2,64(sp)
   1cb34:	06010113          	addi	sp,sp,96
   1cb38:	00008067          	jalr	zero,0(ra)
    pos += sec->addr_size;
   1cb3c:	00053783          	ld	a5,0(a0)
   1cb40:	0207e703          	lwu	a4,32(a5)
   1cb44:	01053783          	ld	a5,16(a0)
   1cb48:	00e787b3          	add	a5,a5,a4
   1cb4c:	00f53823          	sd	a5,16(a0)
    break;
   1cb50:	fd5ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    switch (sec->fmt) {
   1cb54:	00053783          	ld	a5,0(a0)
   1cb58:	0187a783          	lw	a5,24(a5)
   1cb5c:	00200713          	addi	a4,zero,2
   1cb60:	02e78263          	beq	a5,a4,1cb84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x164>
   1cb64:	fcf740e3          	blt	a4,a5,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
   1cb68:	02078663          	beq	a5,zero,1cb94 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x174>
   1cb6c:	00100713          	addi	a4,zero,1
   1cb70:	fae79ae3          	bne	a5,a4,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      pos += 4;
   1cb74:	01053783          	ld	a5,16(a0)
   1cb78:	00478793          	addi	a5,a5,4
   1cb7c:	00f53823          	sd	a5,16(a0)
      break;
   1cb80:	fa5ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      pos += 8;
   1cb84:	01053783          	ld	a5,16(a0)
   1cb88:	00878793          	addi	a5,a5,8
   1cb8c:	00f53823          	sd	a5,16(a0)
      break;
   1cb90:	f95ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
      throw logic_error("cannot read form with unknown format");
   1cb94:	01000513          	addi	a0,zero,16
   1cb98:	889f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1cb9c:	00050413          	addi	s0,a0,0
   1cba0:	0001a597          	auipc	a1,0x1a
   1cba4:	fc058593          	addi	a1,a1,-64 # 36b60 <std::piecewise_construct+0x78>
   1cba8:	a69f90ef          	jal	ra,16610 <std::logic_error::logic_error(char const*)@plt>
   1cbac:	00026617          	auipc	a2,0x26
   1cbb0:	8c463603          	ld	a2,-1852(a2) # 42470 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1cbb4:	00026597          	auipc	a1,0x26
   1cbb8:	9c45b583          	ld	a1,-1596(a1) # 42578 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1cbbc:	00040513          	addi	a0,s0,0
   1cbc0:	b01f90ef          	jal	ra,166c0 <__cxa_throw@plt>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cbc4:	00053783          	ld	a5,0(a0)
   1cbc8:	0107b703          	ld	a4,16(a5)
   1cbcc:	01053783          	ld	a5,16(a0)
   1cbd0:	00e7e463          	bltu	a5,a4,1cbd8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1b8>
      underflow();
   1cbd4:	d79ff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cbd8:	01043783          	ld	a5,16(s0)
    if (sec->ord == byte_order::lsb) {
   1cbdc:	00043703          	ld	a4,0(s0)
   1cbe0:	01c72703          	lw	a4,28(a4)
   1cbe4:	28070c63          	beq	a4,zero,1ce7c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x45c>
        val = (val << 8) | (uint64_t)p[i];
   1cbe8:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1cbec:	2940006f          	jal	zero,1ce80 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x460>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cbf0:	00053783          	ld	a5,0(a0)
   1cbf4:	0107b703          	ld	a4,16(a5)
   1cbf8:	01053783          	ld	a5,16(a0)
   1cbfc:	40f70633          	sub	a2,a4,a5
   1cc00:	00100693          	addi	a3,zero,1
   1cc04:	00c6f463          	bgeu	a3,a2,1cc0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ec>
   1cc08:	00e7e663          	bltu	a5,a4,1cc14 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1f4>
      underflow();
   1cc0c:	00040513          	addi	a0,s0,0
   1cc10:	d3dff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cc14:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1cc18:	00043783          	ld	a5,0(s0)
   1cc1c:	01c7a783          	lw	a5,28(a5)
   1cc20:	02079263          	bne	a5,zero,1cc44 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x224>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cc24:	00174783          	lbu	a5,1(a4)
   1cc28:	00879793          	slli	a5,a5,0x8
   1cc2c:	00074683          	lbu	a3,0(a4)
   1cc30:	00d7e7b3          	or	a5,a5,a3
    pos += tmp;
   1cc34:	00278793          	addi	a5,a5,2
   1cc38:	00f70733          	add	a4,a4,a5
   1cc3c:	00e43823          	sd	a4,16(s0)
    break;
   1cc40:	ee5ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
        val = (val << 8) | (uint64_t)p[i];
   1cc44:	00074783          	lbu	a5,0(a4)
   1cc48:	00879793          	slli	a5,a5,0x8
   1cc4c:	00174683          	lbu	a3,1(a4)
   1cc50:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc54:	fe1ff06f          	jal	zero,1cc34 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x214>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cc58:	00053783          	ld	a5,0(a0)
   1cc5c:	0107b703          	ld	a4,16(a5)
   1cc60:	01053783          	ld	a5,16(a0)
   1cc64:	40f70633          	sub	a2,a4,a5
   1cc68:	00300693          	addi	a3,zero,3
   1cc6c:	00c6f463          	bgeu	a3,a2,1cc74 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x254>
   1cc70:	00e7e663          	bltu	a5,a4,1cc7c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x25c>
      underflow();
   1cc74:	00040513          	addi	a0,s0,0
   1cc78:	cd5ff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cc7c:	01043583          	ld	a1,16(s0)
    if (sec->ord == byte_order::lsb) {
   1cc80:	00043783          	ld	a5,0(s0)
   1cc84:	01c7a783          	lw	a5,28(a5)
   1cc88:	04079063          	bne	a5,zero,1ccc8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2a8>
   1cc8c:	00058613          	addi	a2,a1,0
   1cc90:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1cc94:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1cc98:	00064683          	lbu	a3,0(a2)
   1cc9c:	00e696b3          	sll	a3,a3,a4
   1cca0:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1cca4:	00160613          	addi	a2,a2,1
   1cca8:	0087071b          	addiw	a4,a4,8
   1ccac:	fea716e3          	bne	a4,a0,1cc98 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x278>
    pos += tmp;
   1ccb0:	02079793          	slli	a5,a5,0x20
   1ccb4:	0207d793          	srli	a5,a5,0x20
   1ccb8:	00478793          	addi	a5,a5,4
   1ccbc:	00f585b3          	add	a1,a1,a5
   1ccc0:	00b43823          	sd	a1,16(s0)
    break;
   1ccc4:	e61ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
   1ccc8:	00058713          	addi	a4,a1,0
   1cccc:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1ccd0:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1ccd4:	00879793          	slli	a5,a5,0x8
   1ccd8:	00074683          	lbu	a3,0(a4)
   1ccdc:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1cce0:	00170713          	addi	a4,a4,1
   1cce4:	fee618e3          	bne	a2,a4,1ccd4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2b4>
   1cce8:	fc9ff06f          	jal	zero,1ccb0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x290>
    pos += 1;
   1ccec:	01053783          	ld	a5,16(a0)
   1ccf0:	00178793          	addi	a5,a5,1
   1ccf4:	00f53823          	sd	a5,16(a0)
    break;
   1ccf8:	e2dff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 2;
   1ccfc:	01053783          	ld	a5,16(a0)
   1cd00:	00278793          	addi	a5,a5,2
   1cd04:	00f53823          	sd	a5,16(a0)
    break;
   1cd08:	e1dff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 4;
   1cd0c:	01053783          	ld	a5,16(a0)
   1cd10:	00478793          	addi	a5,a5,4
   1cd14:	00f53823          	sd	a5,16(a0)
    break;
   1cd18:	e0dff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    pos += 8;
   1cd1c:	01053783          	ld	a5,16(a0)
   1cd20:	00878793          	addi	a5,a5,8
   1cd24:	00f53823          	sd	a5,16(a0)
    break;
   1cd28:	dfdff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1cd2c:	01053783          	ld	a5,16(a0)
   1cd30:	00053683          	ld	a3,0(a0)
   1cd34:	0106b703          	ld	a4,16(a3)
   1cd38:	00e7fe63          	bgeu	a5,a4,1cd54 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x334>
   1cd3c:	00078703          	lb	a4,0(a5)
   1cd40:	00075a63          	bge	a4,zero,1cd54 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x334>
      pos++;
   1cd44:	00178793          	addi	a5,a5,1
   1cd48:	00f43823          	sd	a5,16(s0)
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1cd4c:	0106b703          	ld	a4,16(a3)
   1cd50:	fee7e6e3          	bltu	a5,a4,1cd3c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x31c>
    pos++;
   1cd54:	00178793          	addi	a5,a5,1
   1cd58:	00f43823          	sd	a5,16(s0)
    break;
   1cd5c:	dc9ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    while (pos < sec->end && *pos)
   1cd60:	01053783          	ld	a5,16(a0)
   1cd64:	00053683          	ld	a3,0(a0)
   1cd68:	0106b703          	ld	a4,16(a3)
   1cd6c:	00e7fe63          	bgeu	a5,a4,1cd88 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x368>
   1cd70:	0007c703          	lbu	a4,0(a5)
   1cd74:	00070a63          	beq	a4,zero,1cd88 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x368>
      pos++;
   1cd78:	00178793          	addi	a5,a5,1
   1cd7c:	00f43823          	sd	a5,16(s0)
    while (pos < sec->end && *pos)
   1cd80:	0106b703          	ld	a4,16(a3)
   1cd84:	fee7e6e3          	bltu	a5,a4,1cd70 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x350>
    pos++;
   1cd88:	00178793          	addi	a5,a5,1
   1cd8c:	00f43823          	sd	a5,16(s0)
    break;
   1cd90:	d95ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>
    throw format_error("unknown form " + to_string(form));
   1cd94:	01000513          	addi	a0,zero,16
   1cd98:	e88f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1cd9c:	00050913          	addi	s2,a0,0
   1cda0:	00048593          	addi	a1,s1,0
   1cda4:	00010513          	addi	a0,sp,0
   1cda8:	2e1120ef          	jal	ra,2f888 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1cdac:	0001a617          	auipc	a2,0x1a
   1cdb0:	ddc60613          	addi	a2,a2,-548 # 36b88 <std::piecewise_construct+0xa0>
   1cdb4:	00000593          	addi	a1,zero,0
   1cdb8:	00010513          	addi	a0,sp,0
   1cdbc:	dd4f90ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1cdc0:	00050593          	addi	a1,a0,0
   1cdc4:	02010413          	addi	s0,sp,32
   1cdc8:	00040513          	addi	a0,s0,0
   1cdcc:	ea4f90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1cdd0:	00040593          	addi	a1,s0,0
   1cdd4:	00090513          	addi	a0,s2,0
   1cdd8:	fc8f90ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1cddc:	00025797          	auipc	a5,0x25
   1cde0:	77c7b783          	ld	a5,1916(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   1cde4:	01078793          	addi	a5,a5,16
   1cde8:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1cdec:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1cdf0:	03010793          	addi	a5,sp,48
   1cdf4:	00f50463          	beq	a0,a5,1cdfc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x3dc>
   1cdf8:	f18f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cdfc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1ce00:	01010793          	addi	a5,sp,16
   1ce04:	00f50463          	beq	a0,a5,1ce0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x3ec>
   1ce08:	f08f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1ce0c:	00025617          	auipc	a2,0x25
   1ce10:	57463603          	ld	a2,1396(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   1ce14:	00025597          	auipc	a1,0x25
   1ce18:	49c5b583          	ld	a1,1180(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1ce1c:	00090513          	addi	a0,s2,0
   1ce20:	8a1f90ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw logic_error("cannot read form with unknown format");
   1ce24:	00050493          	addi	s1,a0,0
   1ce28:	00040513          	addi	a0,s0,0
   1ce2c:	ea4f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1ce30:	00048513          	addi	a0,s1,0
   1ce34:	8bdf90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ce38:	00050413          	addi	s0,a0,0
   1ce3c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1ce40:	03010793          	addi	a5,sp,48
   1ce44:	00f50463          	beq	a0,a5,1ce4c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x42c>
   1ce48:	ec8f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ce4c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1ce50:	01010793          	addi	a5,sp,16
   1ce54:	00f50463          	beq	a0,a5,1ce5c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x43c>
   1ce58:	eb8f90ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw format_error("unknown form " + to_string(form));
   1ce5c:	00090513          	addi	a0,s2,0
   1ce60:	e70f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1ce64:	00040513          	addi	a0,s0,0
   1ce68:	889f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ce6c:	00050413          	addi	s0,a0,0
   1ce70:	fddff06f          	jal	zero,1ce4c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x42c>
   1ce74:	00050413          	addi	s0,a0,0
   1ce78:	fe5ff06f          	jal	zero,1ce5c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x43c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ce7c:	0007c703          	lbu	a4,0(a5)
    pos += tmp;
   1ce80:	00170713          	addi	a4,a4,1
   1ce84:	00e787b3          	add	a5,a5,a4
   1ce88:	00f43823          	sd	a5,16(s0)
    break;
   1ce8c:	c99ff06f          	jal	zero,1cb24 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x104>

000000000001ce90 <dwarf::cursor::subsection()>:
shared_ptr<section> cursor::subsection() {
   1ce90:	fd010113          	addi	sp,sp,-48
   1ce94:	02113423          	sd	ra,40(sp)
   1ce98:	02813023          	sd	s0,32(sp)
   1ce9c:	00913c23          	sd	s1,24(sp)
   1cea0:	01213823          	sd	s2,16(sp)
   1cea4:	01313423          	sd	s3,8(sp)
   1cea8:	01413023          	sd	s4,0(sp)
   1ceac:	00050913          	addi	s2,a0,0
   1ceb0:	00058493          	addi	s1,a1,0
  const char *begin = pos;
   1ceb4:	0105b983          	ld	s3,16(a1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ceb8:	0005b783          	ld	a5,0(a1)
   1cebc:	0107b783          	ld	a5,16(a5)
   1cec0:	413786b3          	sub	a3,a5,s3
   1cec4:	00300713          	addi	a4,zero,3
   1cec8:	00d77463          	bgeu	a4,a3,1ced0 <dwarf::cursor::subsection()+0x40>
   1cecc:	00f9e663          	bltu	s3,a5,1ced8 <dwarf::cursor::subsection()+0x48>
      underflow();
   1ced0:	00048513          	addi	a0,s1,0
   1ced4:	a79ff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ced8:	0104b583          	ld	a1,16(s1)
   1cedc:	0004b503          	ld	a0,0(s1)
    if (sec->ord == byte_order::lsb) {
   1cee0:	01c52783          	lw	a5,28(a0)
   1cee4:	0e079a63          	bne	a5,zero,1cfd8 <dwarf::cursor::subsection()+0x148>
   1cee8:	00058613          	addi	a2,a1,0
   1ceec:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1cef0:	02000813          	addi	a6,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1cef4:	00064683          	lbu	a3,0(a2)
   1cef8:	00e696b3          	sll	a3,a3,a4
   1cefc:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1cf00:	00160613          	addi	a2,a2,1
   1cf04:	0087071b          	addiw	a4,a4,8
   1cf08:	ff0716e3          	bne	a4,a6,1cef4 <dwarf::cursor::subsection()+0x64>
    pos += sizeof(T);
   1cf0c:	00458593          	addi	a1,a1,4
   1cf10:	00b4b823          	sd	a1,16(s1)
   1cf14:	02079793          	slli	a5,a5,0x20
   1cf18:	0207d793          	srli	a5,a5,0x20
  if (length < 0xfffffff0) {
   1cf1c:	00100713          	addi	a4,zero,1
   1cf20:	02071713          	slli	a4,a4,0x20
   1cf24:	fef70713          	addi	a4,a4,-17
   1cf28:	0cf76a63          	bltu	a4,a5,1cffc <dwarf::cursor::subsection()+0x16c>
    length += sizeof(uword);
   1cf2c:	00478793          	addi	a5,a5,4
    fmt = format::dwarf32;
   1cf30:	00100a13          	addi	s4,zero,1
  pos = begin + length;
   1cf34:	00f98433          	add	s0,s3,a5
   1cf38:	0084b823          	sd	s0,16(s1)
   1cf3c:	0004b483          	ld	s1,0(s1)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1cf40:	00093023          	sd	zero,0(s2)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1cf44:	06000513          	addi	a0,zero,96
   1cf48:	dd8f90ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1cf4c:	00052423          	sw	zero,8(a0)
   1cf50:	00052623          	sw	zero,12(a0)
   1cf54:	00052823          	sw	zero,16(a0)
   1cf58:	00052a23          	sw	zero,20(a0)
   1cf5c:	00052c23          	sw	zero,24(a0)
   1cf60:	00052e23          	sw	zero,28(a0)
   1cf64:	02053023          	sd	zero,32(a0)
   1cf68:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1cf6c:	00100793          	addi	a5,zero,1
   1cf70:	02f52823          	sw	a5,48(a0)
   1cf74:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   1cf78:	00025797          	auipc	a5,0x25
   1cf7c:	6487b783          	ld	a5,1608(a5) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   1cf80:	01078793          	addi	a5,a5,16
   1cf84:	00f53023          	sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1cf88:	0004a703          	lw	a4,0(s1)
   1cf8c:	01c4a783          	lw	a5,28(s1)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1cf90:	02e52c23          	sw	a4,56(a0)
   1cf94:	05353023          	sd	s3,64(a0)
   1cf98:	04853423          	sd	s0,72(a0)
   1cf9c:	05452823          	sw	s4,80(a0)
        ord(ord), addr_size(addr_size) {}
   1cfa0:	04f52a23          	sw	a5,84(a0)
   1cfa4:	04052c23          	sw	zero,88(a0)
	  _M_pi = __pi;
   1cfa8:	00a93423          	sd	a0,8(s2)
   1cfac:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   1cfb0:	00f93023          	sd	a5,0(s2)
}
   1cfb4:	00090513          	addi	a0,s2,0
   1cfb8:	02813083          	ld	ra,40(sp)
   1cfbc:	02013403          	ld	s0,32(sp)
   1cfc0:	01813483          	ld	s1,24(sp)
   1cfc4:	01013903          	ld	s2,16(sp)
   1cfc8:	00813983          	ld	s3,8(sp)
   1cfcc:	00013a03          	ld	s4,0(sp)
   1cfd0:	03010113          	addi	sp,sp,48
   1cfd4:	00008067          	jalr	zero,0(ra)
   1cfd8:	00058713          	addi	a4,a1,0
   1cfdc:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1cfe0:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1cfe4:	00879793          	slli	a5,a5,0x8
   1cfe8:	00074683          	lbu	a3,0(a4)
   1cfec:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1cff0:	00170713          	addi	a4,a4,1
   1cff4:	fec718e3          	bne	a4,a2,1cfe4 <dwarf::cursor::subsection()+0x154>
   1cff8:	f15ff06f          	jal	zero,1cf0c <dwarf::cursor::subsection()+0x7c>
  } else if (length == 0xffffffff) {
   1cffc:	fff00713          	addi	a4,zero,-1
   1d000:	02075713          	srli	a4,a4,0x20
   1d004:	08e79063          	bne	a5,a4,1d084 <dwarf::cursor::subsection()+0x1f4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d008:	01053783          	ld	a5,16(a0)
   1d00c:	40b786b3          	sub	a3,a5,a1
   1d010:	00700713          	addi	a4,zero,7
   1d014:	00d77463          	bgeu	a4,a3,1d01c <dwarf::cursor::subsection()+0x18c>
   1d018:	00f5e663          	bltu	a1,a5,1d024 <dwarf::cursor::subsection()+0x194>
      underflow();
   1d01c:	00048513          	addi	a0,s1,0
   1d020:	92dff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d024:	0104b703          	ld	a4,16(s1)
    if (sec->ord == byte_order::lsb) {
   1d028:	0004b783          	ld	a5,0(s1)
   1d02c:	01c7a783          	lw	a5,28(a5)
   1d030:	02079863          	bne	a5,zero,1d060 <dwarf::cursor::subsection()+0x1d0>
   1d034:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d038:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d03c:	00074603          	lbu	a2,0(a4)
   1d040:	00d61633          	sll	a2,a2,a3
   1d044:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1d048:	00170713          	addi	a4,a4,1
   1d04c:	0086869b          	addiw	a3,a3,8
   1d050:	feb696e3          	bne	a3,a1,1d03c <dwarf::cursor::subsection()+0x1ac>
    length += sizeof(uword) + sizeof(uint64_t);
   1d054:	00c78793          	addi	a5,a5,12
    fmt = format::dwarf64;
   1d058:	00200a13          	addi	s4,zero,2
   1d05c:	ed9ff06f          	jal	zero,1cf34 <dwarf::cursor::subsection()+0xa4>
   1d060:	00070693          	addi	a3,a4,0
   1d064:	00870713          	addi	a4,a4,8
    uint64_t val = 0;
   1d068:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1d06c:	00879793          	slli	a5,a5,0x8
   1d070:	0006c603          	lbu	a2,0(a3)
   1d074:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1d078:	00168693          	addi	a3,a3,1
   1d07c:	fee698e3          	bne	a3,a4,1d06c <dwarf::cursor::subsection()+0x1dc>
   1d080:	fd5ff06f          	jal	zero,1d054 <dwarf::cursor::subsection()+0x1c4>
    throw format_error("initial length has reserved value");
   1d084:	01000513          	addi	a0,zero,16
   1d088:	b98f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1d08c:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1d090:	0001a597          	auipc	a1,0x1a
   1d094:	b0858593          	addi	a1,a1,-1272 # 36b98 <std::piecewise_construct+0xb0>
   1d098:	ed8f90ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   1d09c:	00025797          	auipc	a5,0x25
   1d0a0:	4bc7b783          	ld	a5,1212(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   1d0a4:	01078793          	addi	a5,a5,16
   1d0a8:	00f43023          	sd	a5,0(s0)
   1d0ac:	00025617          	auipc	a2,0x25
   1d0b0:	2d463603          	ld	a2,724(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   1d0b4:	00025597          	auipc	a1,0x25
   1d0b8:	1fc5b583          	ld	a1,508(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1d0bc:	00040513          	addi	a0,s0,0
   1d0c0:	e00f90ef          	jal	ra,166c0 <__cxa_throw@plt>
   1d0c4:	00050493          	addi	s1,a0,0
   1d0c8:	00040513          	addi	a0,s0,0
   1d0cc:	c04f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1d0d0:	00048513          	addi	a0,s1,0
   1d0d4:	e1cf90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001d0d8 <dwarf::cursor::offset()>:
section_offset cursor::offset() {
   1d0d8:	fe010113          	addi	sp,sp,-32
   1d0dc:	00113c23          	sd	ra,24(sp)
   1d0e0:	00813823          	sd	s0,16(sp)
   1d0e4:	00913423          	sd	s1,8(sp)
   1d0e8:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   1d0ec:	00053783          	ld	a5,0(a0)
  switch (sec->fmt) {
   1d0f0:	0187a703          	lw	a4,24(a5)
   1d0f4:	00100693          	addi	a3,zero,1
   1d0f8:	06d70463          	beq	a4,a3,1d160 <dwarf::cursor::offset()+0x88>
   1d0fc:	00200693          	addi	a3,zero,2
   1d100:	12d71063          	bne	a4,a3,1d220 <dwarf::cursor::offset()+0x148>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d104:	0107b703          	ld	a4,16(a5)
   1d108:	01053783          	ld	a5,16(a0)
   1d10c:	40f70633          	sub	a2,a4,a5
   1d110:	00700693          	addi	a3,zero,7
   1d114:	00c6f463          	bgeu	a3,a2,1d11c <dwarf::cursor::offset()+0x44>
   1d118:	00e7e663          	bltu	a5,a4,1d124 <dwarf::cursor::offset()+0x4c>
      underflow();
   1d11c:	00040513          	addi	a0,s0,0
   1d120:	82dff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d124:	01043603          	ld	a2,16(s0)
    if (sec->ord == byte_order::lsb) {
   1d128:	00043783          	ld	a5,0(s0)
   1d12c:	01c7a783          	lw	a5,28(a5)
   1d130:	0c079663          	bne	a5,zero,1d1fc <dwarf::cursor::offset()+0x124>
   1d134:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1d138:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d13c:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d140:	0006c703          	lbu	a4,0(a3)
   1d144:	00f71733          	sll	a4,a4,a5
   1d148:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d14c:	00168693          	addi	a3,a3,1
   1d150:	0087879b          	addiw	a5,a5,8
   1d154:	feb796e3          	bne	a5,a1,1d140 <dwarf::cursor::offset()+0x68>
    pos += sizeof(T);
   1d158:	00860713          	addi	a4,a2,8
    return fixed<uint64_t>();
   1d15c:	0640006f          	jal	zero,1d1c0 <dwarf::cursor::offset()+0xe8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d160:	0107b703          	ld	a4,16(a5)
   1d164:	01053783          	ld	a5,16(a0)
   1d168:	40f70633          	sub	a2,a4,a5
   1d16c:	00300693          	addi	a3,zero,3
   1d170:	00c6f463          	bgeu	a3,a2,1d178 <dwarf::cursor::offset()+0xa0>
   1d174:	00e7e663          	bltu	a5,a4,1d180 <dwarf::cursor::offset()+0xa8>
      underflow();
   1d178:	00040513          	addi	a0,s0,0
   1d17c:	fd0ff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d180:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1d184:	00043783          	ld	a5,0(s0)
   1d188:	01c7a783          	lw	a5,28(a5)
   1d18c:	04079663          	bne	a5,zero,1d1d8 <dwarf::cursor::offset()+0x100>
   1d190:	00070593          	addi	a1,a4,0
   1d194:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d198:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1d19c:	0005c603          	lbu	a2,0(a1)
   1d1a0:	00d61633          	sll	a2,a2,a3
   1d1a4:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1d1a8:	00158593          	addi	a1,a1,1
   1d1ac:	0086869b          	addiw	a3,a3,8
   1d1b0:	fea696e3          	bne	a3,a0,1d19c <dwarf::cursor::offset()+0xc4>
    pos += sizeof(T);
   1d1b4:	00470713          	addi	a4,a4,4
   1d1b8:	02079513          	slli	a0,a5,0x20
   1d1bc:	02055513          	srli	a0,a0,0x20
   1d1c0:	00e43823          	sd	a4,16(s0)
}
   1d1c4:	01813083          	ld	ra,24(sp)
   1d1c8:	01013403          	ld	s0,16(sp)
   1d1cc:	00813483          	ld	s1,8(sp)
   1d1d0:	02010113          	addi	sp,sp,32
   1d1d4:	00008067          	jalr	zero,0(ra)
   1d1d8:	00070693          	addi	a3,a4,0
   1d1dc:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1d1e0:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1d1e4:	00879793          	slli	a5,a5,0x8
   1d1e8:	0006c603          	lbu	a2,0(a3)
   1d1ec:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1d1f0:	00168693          	addi	a3,a3,1
   1d1f4:	feb698e3          	bne	a3,a1,1d1e4 <dwarf::cursor::offset()+0x10c>
   1d1f8:	fbdff06f          	jal	zero,1d1b4 <dwarf::cursor::offset()+0xdc>
   1d1fc:	00060793          	addi	a5,a2,0
   1d200:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1d204:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1d208:	00851513          	slli	a0,a0,0x8
   1d20c:	0007c703          	lbu	a4,0(a5)
   1d210:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d214:	00178793          	addi	a5,a5,1
   1d218:	fed798e3          	bne	a5,a3,1d208 <dwarf::cursor::offset()+0x130>
   1d21c:	f3dff06f          	jal	zero,1d158 <dwarf::cursor::offset()+0x80>
    throw logic_error("cannot read offset with unknown format");
   1d220:	01000513          	addi	a0,zero,16
   1d224:	9fcf90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1d228:	00050413          	addi	s0,a0,0
   1d22c:	0001a597          	auipc	a1,0x1a
   1d230:	99458593          	addi	a1,a1,-1644 # 36bc0 <std::piecewise_construct+0xd8>
   1d234:	bdcf90ef          	jal	ra,16610 <std::logic_error::logic_error(char const*)@plt>
   1d238:	00025617          	auipc	a2,0x25
   1d23c:	23863603          	ld	a2,568(a2) # 42470 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1d240:	00025597          	auipc	a1,0x25
   1d244:	3385b583          	ld	a1,824(a1) # 42578 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1d248:	00040513          	addi	a0,s0,0
   1d24c:	c74f90ef          	jal	ra,166c0 <__cxa_throw@plt>
   1d250:	00050493          	addi	s1,a0,0
   1d254:	00040513          	addi	a0,s0,0
   1d258:	a78f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1d25c:	00048513          	addi	a0,s1,0
   1d260:	c90f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001d264 <dwarf::die::die(dwarf::unit const*)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

die::die(const unit *cu) : cu(cu), abbrev(nullptr) {}
   1d264:	00b53423          	sd	a1,8(a0)
   1d268:	00053823          	sd	zero,16(a0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1d26c:	02050793          	addi	a5,a0,32
   1d270:	04f53823          	sd	a5,80(a0)
   1d274:	04f53c23          	sd	a5,88(a0)
   1d278:	05050793          	addi	a5,a0,80
   1d27c:	06f53023          	sd	a5,96(a0)
   1d280:	00008067          	jalr	zero,0(ra)

000000000001d284 <dwarf::die::get_unit() const>:

const unit &die::get_unit() const { return *cu; }
   1d284:	00853503          	ld	a0,8(a0)
   1d288:	00008067          	jalr	zero,0(ra)

000000000001d28c <dwarf::die::get_section_offset() const>:

section_offset die::get_section_offset() const {
   1d28c:	ff010113          	addi	sp,sp,-16
   1d290:	00113423          	sd	ra,8(sp)
   1d294:	00813023          	sd	s0,0(sp)
   1d298:	00050413          	addi	s0,a0,0
  return cu->get_section_offset() + offset;
   1d29c:	00853503          	ld	a0,8(a0)
   1d2a0:	898fa0ef          	jal	ra,17338 <dwarf::unit::get_section_offset() const>
   1d2a4:	01843783          	ld	a5,24(s0)
}
   1d2a8:	00f50533          	add	a0,a0,a5
   1d2ac:	00813083          	ld	ra,8(sp)
   1d2b0:	00013403          	ld	s0,0(sp)
   1d2b4:	01010113          	addi	sp,sp,16
   1d2b8:	00008067          	jalr	zero,0(ra)

000000000001d2bc <dwarf::die::read(unsigned long)>:

void die::read(section_offset off) {
   1d2bc:	f9010113          	addi	sp,sp,-112
   1d2c0:	06113423          	sd	ra,104(sp)
   1d2c4:	06813023          	sd	s0,96(sp)
   1d2c8:	04913c23          	sd	s1,88(sp)
   1d2cc:	05213823          	sd	s2,80(sp)
   1d2d0:	05313423          	sd	s3,72(sp)
   1d2d4:	05413023          	sd	s4,64(sp)
   1d2d8:	03513c23          	sd	s5,56(sp)
   1d2dc:	03613823          	sd	s6,48(sp)
   1d2e0:	03713423          	sd	s7,40(sp)
   1d2e4:	03813023          	sd	s8,32(sp)
   1d2e8:	00050493          	addi	s1,a0,0
   1d2ec:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), off);
   1d2f0:	00853503          	ld	a0,8(a0)
   1d2f4:	850fa0ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d2f8:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1d2fc:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   1d300:	48040463          	beq	s0,zero,1d788 <dwarf::die::read(unsigned long)+0x4cc>
    if (__is_single_threaded())
   1d304:	00025797          	auipc	a5,0x25
   1d308:	17c7b783          	ld	a5,380(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d30c:	0007c783          	lbu	a5,0(a5)
   1d310:	0a078863          	beq	a5,zero,1d3c0 <dwarf::die::read(unsigned long)+0x104>
  { *__mem += __val; }
   1d314:	03042783          	lw	a5,48(s0)
   1d318:	0017879b          	addiw	a5,a5,1
   1d31c:	02f42823          	sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d320:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d324:	00813823          	sd	s0,16(sp)
    if (__is_single_threaded())
   1d328:	00025797          	auipc	a5,0x25
   1d32c:	1587b783          	ld	a5,344(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d330:	0007c783          	lbu	a5,0(a5)
   1d334:	08078e63          	beq	a5,zero,1d3d0 <dwarf::die::read(unsigned long)+0x114>
  { *__mem += __val; }
   1d338:	03042783          	lw	a5,48(s0)
   1d33c:	0017879b          	addiw	a5,a5,1
   1d340:	02f42823          	sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   1d344:	0089b783          	ld	a5,8(s3)
   1d348:	012787b3          	add	a5,a5,s2
   1d34c:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   1d350:	00025797          	auipc	a5,0x25
   1d354:	1307b783          	ld	a5,304(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d358:	0007c783          	lbu	a5,0(a5)
   1d35c:	08078263          	beq	a5,zero,1d3e0 <dwarf::die::read(unsigned long)+0x124>
    _Atomic_word __result = *__mem;
   1d360:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1d364:	fff5079b          	addiw	a5,a0,-1
   1d368:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d36c:	00100793          	addi	a5,zero,1
   1d370:	42f51663          	bne	a0,a5,1d79c <dwarf::die::read(unsigned long)+0x4e0>
	_M_dispose();
   1d374:	00043783          	ld	a5,0(s0)
   1d378:	0107b783          	ld	a5,16(a5)
   1d37c:	00040513          	addi	a0,s0,0
   1d380:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d384:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d388:	00025797          	auipc	a5,0x25
   1d38c:	0f87b783          	ld	a5,248(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d390:	0007c783          	lbu	a5,0(a5)
   1d394:	04078e63          	beq	a5,zero,1d3f0 <dwarf::die::read(unsigned long)+0x134>
    _Atomic_word __result = *__mem;
   1d398:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1d39c:	fff7871b          	addiw	a4,a5,-1
   1d3a0:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d3a4:	00100713          	addi	a4,zero,1
   1d3a8:	3ee79a63          	bne	a5,a4,1d79c <dwarf::die::read(unsigned long)+0x4e0>
	    _M_destroy();
   1d3ac:	00043783          	ld	a5,0(s0)
   1d3b0:	0187b783          	ld	a5,24(a5)
   1d3b4:	00040513          	addi	a0,s0,0
   1d3b8:	000780e7          	jalr	ra,0(a5)
   1d3bc:	3e00006f          	jal	zero,1d79c <dwarf::die::read(unsigned long)+0x4e0>
      __atomic_add(__mem, __val);
   1d3c0:	00100593          	addi	a1,zero,1
   1d3c4:	03040513          	addi	a0,s0,48
   1d3c8:	f89f80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d3cc:	f55ff06f          	jal	zero,1d320 <dwarf::die::read(unsigned long)+0x64>
   1d3d0:	00100593          	addi	a1,zero,1
   1d3d4:	03040513          	addi	a0,s0,48
   1d3d8:	f79f80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d3dc:	f69ff06f          	jal	zero,1d344 <dwarf::die::read(unsigned long)+0x88>
      return __exchange_and_add(__mem, __val);
   1d3e0:	fff00593          	addi	a1,zero,-1
   1d3e4:	03040513          	addi	a0,s0,48
   1d3e8:	f99f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d3ec:	f81ff06f          	jal	zero,1d36c <dwarf::die::read(unsigned long)+0xb0>
   1d3f0:	fff00593          	addi	a1,zero,-1
   1d3f4:	03440513          	addi	a0,s0,52
   1d3f8:	f89f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d3fc:	00050793          	addi	a5,a0,0
   1d400:	fa5ff06f          	jal	zero,1d3a4 <dwarf::die::read(unsigned long)+0xe8>
    return 0;
   1d404:	00000593          	addi	a1,zero,0

  offset = off;

  abbrev_code acode = cur.uleb128();
  if (acode == 0) {
   1d408:	0e059463          	bne	a1,zero,1d4f0 <dwarf::die::read(unsigned long)+0x234>
    abbrev = nullptr;
   1d40c:	0004b823          	sd	zero,16(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1d410:	00813783          	ld	a5,8(sp)
   1d414:	0087b703          	ld	a4,8(a5)
   1d418:	01813783          	ld	a5,24(sp)
   1d41c:	40e787b3          	sub	a5,a5,a4
    next = cur.get_section_offset();
   1d420:	06f4b423          	sd	a5,104(s1)
	if (_M_pi != nullptr)
   1d424:	01013403          	ld	s0,16(sp)
   1d428:	02040463          	beq	s0,zero,1d450 <dwarf::die::read(unsigned long)+0x194>
    if (__is_single_threaded())
   1d42c:	00025797          	auipc	a5,0x25
   1d430:	0547b783          	ld	a5,84(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d434:	0007c783          	lbu	a5,0(a5)
   1d438:	04078463          	beq	a5,zero,1d480 <dwarf::die::read(unsigned long)+0x1c4>
    _Atomic_word __result = *__mem;
   1d43c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1d440:	fff5079b          	addiw	a5,a0,-1
   1d444:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d448:	00100793          	addi	a5,zero,1
   1d44c:	04f50263          	beq	a0,a5,1d490 <dwarf::die::read(unsigned long)+0x1d4>
  for (auto &attr : abbrev->attributes) {
    attrs.push_back(cur.get_section_offset());
    cur.skip_form(attr.form);
  }
  next = cur.get_section_offset();
}
   1d450:	06813083          	ld	ra,104(sp)
   1d454:	06013403          	ld	s0,96(sp)
   1d458:	05813483          	ld	s1,88(sp)
   1d45c:	05013903          	ld	s2,80(sp)
   1d460:	04813983          	ld	s3,72(sp)
   1d464:	04013a03          	ld	s4,64(sp)
   1d468:	03813a83          	ld	s5,56(sp)
   1d46c:	03013b03          	ld	s6,48(sp)
   1d470:	02813b83          	ld	s7,40(sp)
   1d474:	02013c03          	ld	s8,32(sp)
   1d478:	07010113          	addi	sp,sp,112
   1d47c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1d480:	fff00593          	addi	a1,zero,-1
   1d484:	03040513          	addi	a0,s0,48
   1d488:	ef9f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d48c:	fbdff06f          	jal	zero,1d448 <dwarf::die::read(unsigned long)+0x18c>
	_M_dispose();
   1d490:	00043783          	ld	a5,0(s0)
   1d494:	0107b783          	ld	a5,16(a5)
   1d498:	00040513          	addi	a0,s0,0
   1d49c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d4a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d4a4:	00025797          	auipc	a5,0x25
   1d4a8:	fdc7b783          	ld	a5,-36(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d4ac:	0007c783          	lbu	a5,0(a5)
   1d4b0:	02078663          	beq	a5,zero,1d4dc <dwarf::die::read(unsigned long)+0x220>
    _Atomic_word __result = *__mem;
   1d4b4:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1d4b8:	fff7871b          	addiw	a4,a5,-1
   1d4bc:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d4c0:	00100713          	addi	a4,zero,1
   1d4c4:	f8e796e3          	bne	a5,a4,1d450 <dwarf::die::read(unsigned long)+0x194>
	    _M_destroy();
   1d4c8:	00043783          	ld	a5,0(s0)
   1d4cc:	0187b783          	ld	a5,24(a5)
   1d4d0:	00040513          	addi	a0,s0,0
   1d4d4:	000780e7          	jalr	ra,0(a5)
   1d4d8:	f79ff06f          	jal	zero,1d450 <dwarf::die::read(unsigned long)+0x194>
      return __exchange_and_add(__mem, __val);
   1d4dc:	fff00593          	addi	a1,zero,-1
   1d4e0:	03440513          	addi	a0,s0,52
   1d4e4:	e9df80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d4e8:	00050793          	addi	a5,a0,0
   1d4ec:	fd5ff06f          	jal	zero,1d4c0 <dwarf::die::read(unsigned long)+0x204>
  abbrev = &cu->get_abbrev(acode);
   1d4f0:	0084b503          	ld	a0,8(s1)
   1d4f4:	8ccfd0ef          	jal	ra,1a5c0 <dwarf::unit::get_abbrev(unsigned long) const>
   1d4f8:	00a4b823          	sd	a0,16(s1)
  tag = abbrev->tag;
   1d4fc:	00852783          	lw	a5,8(a0)
   1d500:	00f4a023          	sw	a5,0(s1)
  attrs.clear();
   1d504:	02048b13          	addi	s6,s1,32
    for (T *p = base; p < end; ++p)
   1d508:	0504b683          	ld	a3,80(s1)
   1d50c:	0584b783          	ld	a5,88(s1)
   1d510:	00f6fa63          	bgeu	a3,a5,1d524 <dwarf::die::read(unsigned long)+0x268>
   1d514:	00068793          	addi	a5,a3,0
   1d518:	00878793          	addi	a5,a5,8
   1d51c:	0584b703          	ld	a4,88(s1)
   1d520:	fee7ece3          	bltu	a5,a4,1d518 <dwarf::die::read(unsigned long)+0x25c>
    end = base;
   1d524:	04d4bc23          	sd	a3,88(s1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1d528:	01853703          	ld	a4,24(a0)
   1d52c:	01053783          	ld	a5,16(a0)
   1d530:	40f70733          	sub	a4,a4,a5
   1d534:	40275713          	srai	a4,a4,0x2
   1d538:	00019797          	auipc	a5,0x19
   1d53c:	5a07b783          	ld	a5,1440(a5) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1d540:	02f70733          	mul	a4,a4,a5
    if (n <= (size_type)(cap - base))
   1d544:	0604b783          	ld	a5,96(s1)
   1d548:	40d787b3          	sub	a5,a5,a3
   1d54c:	4037d793          	srai	a5,a5,0x3
   1d550:	06e7f863          	bgeu	a5,a4,1d5c0 <dwarf::die::read(unsigned long)+0x304>
   1d554:	00079463          	bne	a5,zero,1d55c <dwarf::die::read(unsigned long)+0x2a0>
   1d558:	00100793          	addi	a5,zero,1
    while (target < n)
   1d55c:	00e7f663          	bgeu	a5,a4,1d568 <dwarf::die::read(unsigned long)+0x2ac>
      target <<= 1;
   1d560:	00179793          	slli	a5,a5,0x1
    while (target < n)
   1d564:	fee7eee3          	bltu	a5,a4,1d560 <dwarf::die::read(unsigned long)+0x2a4>
    char *newbuf = new char[sizeof(T[target])];
   1d568:	00379413          	slli	s0,a5,0x3
   1d56c:	00040513          	addi	a0,s0,0
   1d570:	dc1f80ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1d574:	00050993          	addi	s3,a0,0
    T *src = base, *dest = (T *)newbuf;
   1d578:	0504b503          	ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1d57c:	0584b703          	ld	a4,88(s1)
   1d580:	04e57c63          	bgeu	a0,a4,1d5d8 <dwarf::die::read(unsigned long)+0x31c>
    T *src = base, *dest = (T *)newbuf;
   1d584:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1d588:	00878793          	addi	a5,a5,8
   1d58c:	fee7eee3          	bltu	a5,a4,1d588 <dwarf::die::read(unsigned long)+0x2cc>
   1d590:	fff70913          	addi	s2,a4,-1
   1d594:	40a90933          	sub	s2,s2,a0
   1d598:	ff897913          	andi	s2,s2,-8
   1d59c:	00890913          	addi	s2,s2,8
   1d5a0:	01298933          	add	s2,s3,s2
    if ((char *)base != buf)
   1d5a4:	00ab0663          	beq	s6,a0,1d5b0 <dwarf::die::read(unsigned long)+0x2f4>
      delete[] (char *)base;
   1d5a8:	00050463          	beq	a0,zero,1d5b0 <dwarf::die::read(unsigned long)+0x2f4>
   1d5ac:	814f90ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1d5b0:	0534b823          	sd	s3,80(s1)
    end = dest;
   1d5b4:	0524bc23          	sd	s2,88(s1)
    cap = base + target;
   1d5b8:	008989b3          	add	s3,s3,s0
   1d5bc:	0734b023          	sd	s3,96(s1)
  for (auto &attr : abbrev->attributes) {
   1d5c0:	0104b783          	ld	a5,16(s1)
      : _M_current(__i) { }
   1d5c4:	0107b903          	ld	s2,16(a5)
   1d5c8:	0187ba03          	ld	s4,24(a5)
   1d5cc:	0f2a0663          	beq	s4,s2,1d6b8 <dwarf::die::read(unsigned long)+0x3fc>
    cur.skip_form(attr.form);
   1d5d0:	00810a93          	addi	s5,sp,8
   1d5d4:	08c0006f          	jal	zero,1d660 <dwarf::die::read(unsigned long)+0x3a4>
    T *src = base, *dest = (T *)newbuf;
   1d5d8:	00098913          	addi	s2,s3,0
   1d5dc:	fc9ff06f          	jal	zero,1d5a4 <dwarf::die::read(unsigned long)+0x2e8>
    char *newbuf = new char[sizeof(T[target])];
   1d5e0:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   1d5e4:	0504b503          	ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1d5e8:	0584b703          	ld	a4,88(s1)
   1d5ec:	06e57263          	bgeu	a0,a4,1d650 <dwarf::die::read(unsigned long)+0x394>
    T *src = base, *dest = (T *)newbuf;
   1d5f0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1d5f4:	00878793          	addi	a5,a5,8
   1d5f8:	fee7eee3          	bltu	a5,a4,1d5f4 <dwarf::die::read(unsigned long)+0x338>
   1d5fc:	fff70b93          	addi	s7,a4,-1
   1d600:	40ab8bb3          	sub	s7,s7,a0
   1d604:	ff8bfb93          	andi	s7,s7,-8
   1d608:	008b8b93          	addi	s7,s7,8
   1d60c:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   1d610:	00ab0663          	beq	s6,a0,1d61c <dwarf::die::read(unsigned long)+0x360>
      delete[] (char *)base;
   1d614:	00050463          	beq	a0,zero,1d61c <dwarf::die::read(unsigned long)+0x360>
   1d618:	fa9f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1d61c:	0584b823          	sd	s8,80(s1)
    end = dest;
   1d620:	0574bc23          	sd	s7,88(s1)
    cap = base + target;
   1d624:	008c0c33          	add	s8,s8,s0
   1d628:	0784b023          	sd	s8,96(s1)
    new (end) T(std::move(x));
   1d62c:	0584b783          	ld	a5,88(s1)
   1d630:	0137b023          	sd	s3,0(a5)
    end++;
   1d634:	0584b783          	ld	a5,88(s1)
   1d638:	00878793          	addi	a5,a5,8
   1d63c:	04f4bc23          	sd	a5,88(s1)
   1d640:	00492583          	lw	a1,4(s2)
   1d644:	000a8513          	addi	a0,s5,0
   1d648:	bd8ff0ef          	jal	ra,1ca20 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
   1d64c:	00c0006f          	jal	zero,1d658 <dwarf::die::read(unsigned long)+0x39c>
    T *src = base, *dest = (T *)newbuf;
   1d650:	000c0b93          	addi	s7,s8,0
   1d654:	fbdff06f          	jal	zero,1d610 <dwarf::die::read(unsigned long)+0x354>
  for (auto &attr : abbrev->attributes) {
   1d658:	00c90913          	addi	s2,s2,12
   1d65c:	052a0e63          	beq	s4,s2,1d6b8 <dwarf::die::read(unsigned long)+0x3fc>
   1d660:	00813783          	ld	a5,8(sp)
   1d664:	0087b783          	ld	a5,8(a5)
   1d668:	01813983          	ld	s3,24(sp)
   1d66c:	40f989b3          	sub	s3,s3,a5
  size_type size() const { return end - base; }
   1d670:	0504b683          	ld	a3,80(s1)
   1d674:	0584b703          	ld	a4,88(s1)
   1d678:	40d70733          	sub	a4,a4,a3
   1d67c:	40375713          	srai	a4,a4,0x3
    reserve(size() + 1);
   1d680:	00170713          	addi	a4,a4,1
    if (n <= (size_type)(cap - base))
   1d684:	0604b783          	ld	a5,96(s1)
   1d688:	40d787b3          	sub	a5,a5,a3
   1d68c:	4037d793          	srai	a5,a5,0x3
   1d690:	f8e7fee3          	bgeu	a5,a4,1d62c <dwarf::die::read(unsigned long)+0x370>
   1d694:	00079463          	bne	a5,zero,1d69c <dwarf::die::read(unsigned long)+0x3e0>
   1d698:	00100793          	addi	a5,zero,1
    while (target < n)
   1d69c:	00e7f663          	bgeu	a5,a4,1d6a8 <dwarf::die::read(unsigned long)+0x3ec>
      target <<= 1;
   1d6a0:	00179793          	slli	a5,a5,0x1
    while (target < n)
   1d6a4:	fee7eee3          	bltu	a5,a4,1d6a0 <dwarf::die::read(unsigned long)+0x3e4>
    char *newbuf = new char[sizeof(T[target])];
   1d6a8:	00379413          	slli	s0,a5,0x3
   1d6ac:	00040513          	addi	a0,s0,0
   1d6b0:	c81f80ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1d6b4:	f2dff06f          	jal	zero,1d5e0 <dwarf::die::read(unsigned long)+0x324>
   1d6b8:	00813783          	ld	a5,8(sp)
   1d6bc:	0087b703          	ld	a4,8(a5)
   1d6c0:	01813783          	ld	a5,24(sp)
   1d6c4:	40e787b3          	sub	a5,a5,a4
  next = cur.get_section_offset();
   1d6c8:	06f4b423          	sd	a5,104(s1)
	if (_M_pi != nullptr)
   1d6cc:	01013403          	ld	s0,16(sp)
   1d6d0:	d80400e3          	beq	s0,zero,1d450 <dwarf::die::read(unsigned long)+0x194>
    if (__is_single_threaded())
   1d6d4:	00025797          	auipc	a5,0x25
   1d6d8:	dac7b783          	ld	a5,-596(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d6dc:	0007c783          	lbu	a5,0(a5)
   1d6e0:	06078263          	beq	a5,zero,1d744 <dwarf::die::read(unsigned long)+0x488>
    _Atomic_word __result = *__mem;
   1d6e4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1d6e8:	fff5079b          	addiw	a5,a0,-1
   1d6ec:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d6f0:	00100793          	addi	a5,zero,1
   1d6f4:	d4f51ee3          	bne	a0,a5,1d450 <dwarf::die::read(unsigned long)+0x194>
	_M_dispose();
   1d6f8:	00043783          	ld	a5,0(s0)
   1d6fc:	0107b783          	ld	a5,16(a5)
   1d700:	00040513          	addi	a0,s0,0
   1d704:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d708:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d70c:	00025797          	auipc	a5,0x25
   1d710:	d747b783          	ld	a5,-652(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d714:	0007c783          	lbu	a5,0(a5)
   1d718:	02078e63          	beq	a5,zero,1d754 <dwarf::die::read(unsigned long)+0x498>
    _Atomic_word __result = *__mem;
   1d71c:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   1d720:	fff7871b          	addiw	a4,a5,-1
   1d724:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d728:	00100713          	addi	a4,zero,1
   1d72c:	d2e792e3          	bne	a5,a4,1d450 <dwarf::die::read(unsigned long)+0x194>
	    _M_destroy();
   1d730:	00043783          	ld	a5,0(s0)
   1d734:	0187b783          	ld	a5,24(a5)
   1d738:	00040513          	addi	a0,s0,0
   1d73c:	000780e7          	jalr	ra,0(a5)
   1d740:	d11ff06f          	jal	zero,1d450 <dwarf::die::read(unsigned long)+0x194>
      return __exchange_and_add(__mem, __val);
   1d744:	fff00593          	addi	a1,zero,-1
   1d748:	03040513          	addi	a0,s0,48
   1d74c:	c35f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d750:	fa1ff06f          	jal	zero,1d6f0 <dwarf::die::read(unsigned long)+0x434>
   1d754:	fff00593          	addi	a1,zero,-1
   1d758:	03440513          	addi	a0,s0,52
   1d75c:	c25f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d760:	00050793          	addi	a5,a0,0
   1d764:	fc5ff06f          	jal	zero,1d728 <dwarf::die::read(unsigned long)+0x46c>
	if (_M_pi != nullptr)
   1d768:	00050413          	addi	s0,a0,0
   1d76c:	01013503          	ld	a0,16(sp)
   1d770:	00050863          	beq	a0,zero,1d780 <dwarf::die::read(unsigned long)+0x4c4>
	  _M_pi->_M_release();
   1d774:	00025317          	auipc	t1,0x25
   1d778:	c5433303          	ld	t1,-940(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1d77c:	000300e7          	jalr	ra,0(t1)
   1d780:	00040513          	addi	a0,s0,0
   1d784:	f6df80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d788:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d78c:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d790:	0089b783          	ld	a5,8(s3)
   1d794:	012787b3          	add	a5,a5,s2
   1d798:	00f13c23          	sd	a5,24(sp)
  offset = off;
   1d79c:	0124bc23          	sd	s2,24(s1)
    while (pos < sec->end) {
   1d7a0:	01813783          	ld	a5,24(sp)
      { return _M_ptr; }
   1d7a4:	00813503          	ld	a0,8(sp)
   1d7a8:	01053703          	ld	a4,16(a0)
   1d7ac:	02e7fe63          	bgeu	a5,a4,1d7e8 <dwarf::die::read(unsigned long)+0x52c>
    std::uint64_t result = 0;
   1d7b0:	00000593          	addi	a1,zero,0
    int shift = 0;
   1d7b4:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   1d7b8:	00178793          	addi	a5,a5,1
   1d7bc:	00f13c23          	sd	a5,24(sp)
   1d7c0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1d7c4:	07f77693          	andi	a3,a4,127
   1d7c8:	00c696b3          	sll	a3,a3,a2
   1d7cc:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   1d7d0:	0187171b          	slliw	a4,a4,0x18
   1d7d4:	4187571b          	sraiw	a4,a4,0x18
   1d7d8:	c20758e3          	bge	a4,zero,1d408 <dwarf::die::read(unsigned long)+0x14c>
      shift += 7;
   1d7dc:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1d7e0:	01053703          	ld	a4,16(a0)
   1d7e4:	fce7eae3          	bltu	a5,a4,1d7b8 <dwarf::die::read(unsigned long)+0x4fc>
    underflow();
   1d7e8:	00810513          	addi	a0,sp,8
   1d7ec:	960ff0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   1d7f0:	c15ff06f          	jal	zero,1d404 <dwarf::die::read(unsigned long)+0x148>

000000000001d7f4 <dwarf::die::has(dwarf::DW_AT) const>:

bool die::has(DW_AT attr) const {
  if (!abbrev)
   1d7f4:	01053703          	ld	a4,16(a0)
   1d7f8:	02070463          	beq	a4,zero,1d820 <dwarf::die::has(dwarf::DW_AT) const+0x2c>
   1d7fc:	01073783          	ld	a5,16(a4)
   1d800:	01873683          	ld	a3,24(a4)
    return false;
  // XXX Totally lame
  for (auto &a : abbrev->attributes)
   1d804:	02f68263          	beq	a3,a5,1d828 <dwarf::die::has(dwarf::DW_AT) const+0x34>
    if (a.name == attr)
   1d808:	0007a703          	lw	a4,0(a5)
   1d80c:	02b70263          	beq	a4,a1,1d830 <dwarf::die::has(dwarf::DW_AT) const+0x3c>
  for (auto &a : abbrev->attributes)
   1d810:	00c78793          	addi	a5,a5,12
   1d814:	fef69ae3          	bne	a3,a5,1d808 <dwarf::die::has(dwarf::DW_AT) const+0x14>
      return true;
  return false;
   1d818:	00000513          	addi	a0,zero,0
   1d81c:	00008067          	jalr	zero,0(ra)
    return false;
   1d820:	00000513          	addi	a0,zero,0
   1d824:	00008067          	jalr	zero,0(ra)
  return false;
   1d828:	00000513          	addi	a0,zero,0
   1d82c:	00008067          	jalr	zero,0(ra)
      return true;
   1d830:	00100513          	addi	a0,zero,1
}
   1d834:	00008067          	jalr	zero,0(ra)

000000000001d838 <dwarf::die::operator[](dwarf::DW_AT) const>:

value die::operator[](DW_AT attr) const {
   1d838:	fa010113          	addi	sp,sp,-96
   1d83c:	04113c23          	sd	ra,88(sp)
   1d840:	04813823          	sd	s0,80(sp)
   1d844:	04913423          	sd	s1,72(sp)
   1d848:	00060413          	addi	s0,a2,0
  // XXX We can pre-compute almost all of this work in the
  // abbrev_entry.
  if (abbrev) {
   1d84c:	0105b783          	ld	a5,16(a1)
   1d850:	06078863          	beq	a5,zero,1d8c0 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
   1d854:	00050493          	addi	s1,a0,0
   1d858:	0107b683          	ld	a3,16(a5)
   1d85c:	0187b603          	ld	a2,24(a5)
    int i = 0;
    for (auto &a : abbrev->attributes) {
   1d860:	06d60063          	beq	a2,a3,1d8c0 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
    int i = 0;
   1d864:	00000793          	addi	a5,zero,0
   1d868:	0100006f          	jal	zero,1d878 <dwarf::die::operator[](dwarf::DW_AT) const+0x40>
      if (a.name == attr)
        return value(cu, a.name, a.form, a.type, attrs[i]);
      i++;
   1d86c:	0017879b          	addiw	a5,a5,1
    for (auto &a : abbrev->attributes) {
   1d870:	00c68693          	addi	a3,a3,12
   1d874:	04d60663          	beq	a2,a3,1d8c0 <dwarf::die::operator[](dwarf::DW_AT) const+0x88>
      if (a.name == attr)
   1d878:	0006a703          	lw	a4,0(a3)
   1d87c:	fe8718e3          	bne	a4,s0,1d86c <dwarf::die::operator[](dwarf::DW_AT) const+0x34>
        return value(cu, a.name, a.form, a.type, attrs[i]);
   1d880:	0505b703          	ld	a4,80(a1)
   1d884:	00379793          	slli	a5,a5,0x3
   1d888:	00f707b3          	add	a5,a4,a5
   1d88c:	0007b783          	ld	a5,0(a5)
   1d890:	0086a703          	lw	a4,8(a3)
   1d894:	0046a683          	lw	a3,4(a3)
   1d898:	00040613          	addi	a2,s0,0
   1d89c:	0085b583          	ld	a1,8(a1)
   1d8a0:	00048513          	addi	a0,s1,0
   1d8a4:	38c030ef          	jal	ra,20c30 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
    }
  }
  throw out_of_range("DIE does not have attribute " + to_string(attr));
}
   1d8a8:	00048513          	addi	a0,s1,0
   1d8ac:	05813083          	ld	ra,88(sp)
   1d8b0:	05013403          	ld	s0,80(sp)
   1d8b4:	04813483          	ld	s1,72(sp)
   1d8b8:	06010113          	addi	sp,sp,96
   1d8bc:	00008067          	jalr	zero,0(ra)
  throw out_of_range("DIE does not have attribute " + to_string(attr));
   1d8c0:	01000513          	addi	a0,zero,16
   1d8c4:	b5df80ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1d8c8:	00050493          	addi	s1,a0,0
   1d8cc:	00040593          	addi	a1,s0,0
   1d8d0:	00010513          	addi	a0,sp,0
   1d8d4:	465130ef          	jal	ra,31538 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d8d8:	00019617          	auipc	a2,0x19
   1d8dc:	39860613          	addi	a2,a2,920 # 36c70 <std::piecewise_construct+0x188>
   1d8e0:	00000593          	addi	a1,zero,0
   1d8e4:	00010513          	addi	a0,sp,0
   1d8e8:	aa9f80ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d8ec:	00050593          	addi	a1,a0,0
   1d8f0:	02010413          	addi	s0,sp,32
   1d8f4:	00040513          	addi	a0,s0,0
   1d8f8:	b79f80ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d8fc:	00040593          	addi	a1,s0,0
   1d900:	00048513          	addi	a0,s1,0
   1d904:	d4df80ef          	jal	ra,16650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1d908:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1d90c:	03010793          	addi	a5,sp,48
   1d910:	00f50463          	beq	a0,a5,1d918 <dwarf::die::operator[](dwarf::DW_AT) const+0xe0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1d914:	bfdf80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d918:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1d91c:	01010793          	addi	a5,sp,16
   1d920:	00f50463          	beq	a0,a5,1d928 <dwarf::die::operator[](dwarf::DW_AT) const+0xf0>
   1d924:	bedf80ef          	jal	ra,16510 <operator delete(void*)@plt>
   1d928:	00025617          	auipc	a2,0x25
   1d92c:	b9863603          	ld	a2,-1128(a2) # 424c0 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   1d930:	00025597          	auipc	a1,0x25
   1d934:	c405b583          	ld	a1,-960(a1) # 42570 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   1d938:	00048513          	addi	a0,s1,0
   1d93c:	d85f80ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1d940:	00050413          	addi	s0,a0,0
   1d944:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1d948:	03010793          	addi	a5,sp,48
   1d94c:	00f50463          	beq	a0,a5,1d954 <dwarf::die::operator[](dwarf::DW_AT) const+0x11c>
   1d950:	bc1f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d954:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1d958:	01010793          	addi	a5,sp,16
   1d95c:	00f50463          	beq	a0,a5,1d964 <dwarf::die::operator[](dwarf::DW_AT) const+0x12c>
   1d960:	bb1f80ef          	jal	ra,16510 <operator delete(void*)@plt>
   1d964:	00048513          	addi	a0,s1,0
   1d968:	b69f80ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1d96c:	00040513          	addi	a0,s0,0
   1d970:	d81f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d974:	00050413          	addi	s0,a0,0
   1d978:	fddff06f          	jal	zero,1d954 <dwarf::die::operator[](dwarf::DW_AT) const+0x11c>
   1d97c:	00050413          	addi	s0,a0,0
   1d980:	fe5ff06f          	jal	zero,1d964 <dwarf::die::operator[](dwarf::DW_AT) const+0x12c>

000000000001d984 <dwarf::die::operator==(dwarf::die const&) const>:
  }
  return res;
}

bool die::operator==(const die &o) const {
  return cu == o.cu && offset == o.offset;
   1d984:	00853703          	ld	a4,8(a0)
   1d988:	0085b783          	ld	a5,8(a1)
   1d98c:	00f70663          	beq	a4,a5,1d998 <dwarf::die::operator==(dwarf::die const&) const+0x14>
   1d990:	00000513          	addi	a0,zero,0
}
   1d994:	00008067          	jalr	zero,0(ra)
  return cu == o.cu && offset == o.offset;
   1d998:	01853503          	ld	a0,24(a0)
   1d99c:	0185b783          	ld	a5,24(a1)
   1d9a0:	40f50533          	sub	a0,a0,a5
   1d9a4:	00153513          	sltiu	a0,a0,1
   1d9a8:	00008067          	jalr	zero,0(ra)

000000000001d9ac <dwarf::die::operator!=(dwarf::die const&) const>:

bool die::operator!=(const die &o) const { return !(*this == o); }
   1d9ac:	ff010113          	addi	sp,sp,-16
   1d9b0:	00113423          	sd	ra,8(sp)
   1d9b4:	fd1ff0ef          	jal	ra,1d984 <dwarf::die::operator==(dwarf::die const&) const>
   1d9b8:	00154513          	xori	a0,a0,1
   1d9bc:	0ff57513          	andi	a0,a0,255
   1d9c0:	00813083          	ld	ra,8(sp)
   1d9c4:	01010113          	addi	sp,sp,16
   1d9c8:	00008067          	jalr	zero,0(ra)

000000000001d9cc <std::hash<dwarf::die>::operator()(dwarf::die const&) const>:

DWARFPP_END_NAMESPACE

size_t std::hash<dwarf::die>::operator()(const dwarf::die &a) const {
  return hash<decltype(a.cu)>()(a.cu) ^
         hash<decltype(a.get_unit_offset())>()(a.get_unit_offset());
   1d9cc:	0085b503          	ld	a0,8(a1)
   1d9d0:	0185b783          	ld	a5,24(a1)
}
   1d9d4:	00f54533          	xor	a0,a0,a5
   1d9d8:	00008067          	jalr	zero,0(ra)

000000000001d9dc <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>:
die::iterator::iterator(const unit *cu, section_offset off) : d(cu) {
   1d9dc:	fe010113          	addi	sp,sp,-32
   1d9e0:	00113c23          	sd	ra,24(sp)
   1d9e4:	00813823          	sd	s0,16(sp)
   1d9e8:	00913423          	sd	s1,8(sp)
   1d9ec:	00050413          	addi	s0,a0,0
   1d9f0:	00060493          	addi	s1,a2,0
   1d9f4:	871ff0ef          	jal	ra,1d264 <dwarf::die::die(dwarf::unit const*)>
  d.read(off);
   1d9f8:	00048593          	addi	a1,s1,0
   1d9fc:	00040513          	addi	a0,s0,0
   1da00:	8bdff0ef          	jal	ra,1d2bc <dwarf::die::read(unsigned long)>
   1da04:	0200006f          	jal	zero,1da24 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)+0x48>
class die {
   1da08:	00050493          	addi	s1,a0,0
   1da0c:	02040513          	addi	a0,s0,32
   1da10:	00025317          	auipc	t1,0x25
   1da14:	9d833303          	ld	t1,-1576(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1da18:	000300e7          	jalr	ra,0(t1)
   1da1c:	00048513          	addi	a0,s1,0
   1da20:	cd1f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
}
   1da24:	01813083          	ld	ra,24(sp)
   1da28:	01013403          	ld	s0,16(sp)
   1da2c:	00813483          	ld	s1,8(sp)
   1da30:	02010113          	addi	sp,sp,32
   1da34:	00008067          	jalr	zero,0(ra)

000000000001da38 <dwarf::die::begin() const>:
die::iterator die::begin() const {
   1da38:	ff010113          	addi	sp,sp,-16
   1da3c:	00113423          	sd	ra,8(sp)
   1da40:	00813023          	sd	s0,0(sp)
   1da44:	00050413          	addi	s0,a0,0
  if (!abbrev || !abbrev->children)
   1da48:	0105b783          	ld	a5,16(a1)
   1da4c:	00078663          	beq	a5,zero,1da58 <dwarf::die::begin() const+0x20>
   1da50:	00c7c783          	lbu	a5,12(a5)
   1da54:	04079c63          	bne	a5,zero,1daac <dwarf::die::begin() const+0x74>
inline die::iterator die::end() const { return iterator(); }
   1da58:	00043023          	sd	zero,0(s0)
   1da5c:	00043423          	sd	zero,8(s0)
   1da60:	00043823          	sd	zero,16(s0)
   1da64:	00043c23          	sd	zero,24(s0)
   1da68:	02043023          	sd	zero,32(s0)
   1da6c:	02043423          	sd	zero,40(s0)
   1da70:	02043823          	sd	zero,48(s0)
   1da74:	02043c23          	sd	zero,56(s0)
   1da78:	04043023          	sd	zero,64(s0)
   1da7c:	04043423          	sd	zero,72(s0)
   1da80:	06043423          	sd	zero,104(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1da84:	02040793          	addi	a5,s0,32
   1da88:	04f43823          	sd	a5,80(s0)
   1da8c:	04f43c23          	sd	a5,88(s0)
   1da90:	05040793          	addi	a5,s0,80
   1da94:	06f43023          	sd	a5,96(s0)
}
   1da98:	00040513          	addi	a0,s0,0
   1da9c:	00813083          	ld	ra,8(sp)
   1daa0:	00013403          	ld	s0,0(sp)
   1daa4:	01010113          	addi	sp,sp,16
   1daa8:	00008067          	jalr	zero,0(ra)
  return iterator(cu, next);
   1daac:	0685b603          	ld	a2,104(a1)
   1dab0:	0085b583          	ld	a1,8(a1)
   1dab4:	f29ff0ef          	jal	ra,1d9dc <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
   1dab8:	fe1ff06f          	jal	zero,1da98 <dwarf::die::begin() const+0x60>

000000000001dabc <dwarf::die::resolve(dwarf::DW_AT) const>:
value die::resolve(DW_AT attr) const {
   1dabc:	eb010113          	addi	sp,sp,-336
   1dac0:	14113423          	sd	ra,328(sp)
   1dac4:	14813023          	sd	s0,320(sp)
   1dac8:	12913c23          	sd	s1,312(sp)
   1dacc:	13213823          	sd	s2,304(sp)
   1dad0:	00050493          	addi	s1,a0,0
   1dad4:	00058413          	addi	s0,a1,0
   1dad8:	00060913          	addi	s2,a2,0
  if (has(attr))
   1dadc:	00060593          	addi	a1,a2,0
   1dae0:	00040513          	addi	a0,s0,0
   1dae4:	d11ff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1dae8:	02050863          	beq	a0,zero,1db18 <dwarf::die::resolve(dwarf::DW_AT) const+0x5c>
    return (*this)[attr];
   1daec:	00090613          	addi	a2,s2,0
   1daf0:	00040593          	addi	a1,s0,0
   1daf4:	00048513          	addi	a0,s1,0
   1daf8:	d41ff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
}
   1dafc:	00048513          	addi	a0,s1,0
   1db00:	14813083          	ld	ra,328(sp)
   1db04:	14013403          	ld	s0,320(sp)
   1db08:	13813483          	ld	s1,312(sp)
   1db0c:	13013903          	ld	s2,304(sp)
   1db10:	15010113          	addi	sp,sp,336
   1db14:	00008067          	jalr	zero,0(ra)
  if (has(DW_AT::abstract_origin)) {
   1db18:	03100593          	addi	a1,zero,49
   1db1c:	00040513          	addi	a0,s0,0
   1db20:	cd5ff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1db24:	16050263          	beq	a0,zero,1dc88 <dwarf::die::resolve(dwarf::DW_AT) const+0x1cc>
    die ao = (*this)[DW_AT::abstract_origin].as_reference();
   1db28:	03100613          	addi	a2,zero,49
   1db2c:	00040593          	addi	a1,s0,0
   1db30:	0e810413          	addi	s0,sp,232
   1db34:	00040513          	addi	a0,s0,0
   1db38:	d01ff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1db3c:	00040593          	addi	a1,s0,0
   1db40:	00810413          	addi	s0,sp,8
   1db44:	00040513          	addi	a0,s0,0
   1db48:	558030ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
    if (ao.has(attr))
   1db4c:	00090593          	addi	a1,s2,0
   1db50:	00040513          	addi	a0,s0,0
   1db54:	ca1ff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1db58:	00050c63          	beq	a0,zero,1db70 <dwarf::die::resolve(dwarf::DW_AT) const+0xb4>
      return ao[attr];
   1db5c:	00090613          	addi	a2,s2,0
   1db60:	00040593          	addi	a1,s0,0
   1db64:	00048513          	addi	a0,s1,0
   1db68:	cd1ff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1db6c:	0e80006f          	jal	zero,1dc54 <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
    if (ao.has(DW_AT::specification)) {
   1db70:	04700593          	addi	a1,zero,71
   1db74:	00810513          	addi	a0,sp,8
   1db78:	c7dff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1db7c:	06050a63          	beq	a0,zero,1dbf0 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
      die s = ao[DW_AT::specification].as_reference();
   1db80:	04700613          	addi	a2,zero,71
   1db84:	00810593          	addi	a1,sp,8
   1db88:	10010513          	addi	a0,sp,256
   1db8c:	cadff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1db90:	10010593          	addi	a1,sp,256
   1db94:	07810513          	addi	a0,sp,120
   1db98:	508030ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
      if (s.has(attr))
   1db9c:	00090593          	addi	a1,s2,0
   1dba0:	07810513          	addi	a0,sp,120
   1dba4:	c51ff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1dba8:	00050c63          	beq	a0,zero,1dbc0 <dwarf::die::resolve(dwarf::DW_AT) const+0x104>
        return s[attr];
   1dbac:	00090613          	addi	a2,s2,0
   1dbb0:	07810593          	addi	a1,sp,120
   1dbb4:	00048513          	addi	a0,s1,0
   1dbb8:	c81ff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dbbc:	0680006f          	jal	zero,1dc24 <dwarf::die::resolve(dwarf::DW_AT) const+0x168>
    for (T *p = base; p < end; ++p)
   1dbc0:	0c813503          	ld	a0,200(sp)
   1dbc4:	0d013783          	ld	a5,208(sp)
   1dbc8:	00f57a63          	bgeu	a0,a5,1dbdc <dwarf::die::resolve(dwarf::DW_AT) const+0x120>
   1dbcc:	00050793          	addi	a5,a0,0
   1dbd0:	00878793          	addi	a5,a5,8
   1dbd4:	0d013703          	ld	a4,208(sp)
   1dbd8:	fee7ece3          	bltu	a5,a4,1dbd0 <dwarf::die::resolve(dwarf::DW_AT) const+0x114>
    end = base;
   1dbdc:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1dbe0:	09810793          	addi	a5,sp,152
   1dbe4:	00f50663          	beq	a0,a5,1dbf0 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
      delete[] (char *)base;
   1dbe8:	00050463          	beq	a0,zero,1dbf0 <dwarf::die::resolve(dwarf::DW_AT) const+0x134>
   1dbec:	9d5f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1dbf0:	05813503          	ld	a0,88(sp)
   1dbf4:	06013783          	ld	a5,96(sp)
   1dbf8:	00f57a63          	bgeu	a0,a5,1dc0c <dwarf::die::resolve(dwarf::DW_AT) const+0x150>
   1dbfc:	00050793          	addi	a5,a0,0
   1dc00:	00878793          	addi	a5,a5,8
   1dc04:	06013703          	ld	a4,96(sp)
   1dc08:	fee7ece3          	bltu	a5,a4,1dc00 <dwarf::die::resolve(dwarf::DW_AT) const+0x144>
    end = base;
   1dc0c:	06a13023          	sd	a0,96(sp)
    if ((char *)base != buf)
   1dc10:	02810793          	addi	a5,sp,40
   1dc14:	08f50263          	beq	a0,a5,1dc98 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
      delete[] (char *)base;
   1dc18:	08050063          	beq	a0,zero,1dc98 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
   1dc1c:	9a5f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1dc20:	0780006f          	jal	zero,1dc98 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
    for (T *p = base; p < end; ++p)
   1dc24:	0c813503          	ld	a0,200(sp)
   1dc28:	0d013783          	ld	a5,208(sp)
   1dc2c:	00f57a63          	bgeu	a0,a5,1dc40 <dwarf::die::resolve(dwarf::DW_AT) const+0x184>
   1dc30:	00050793          	addi	a5,a0,0
   1dc34:	00878793          	addi	a5,a5,8
   1dc38:	0d013703          	ld	a4,208(sp)
   1dc3c:	fee7ece3          	bltu	a5,a4,1dc34 <dwarf::die::resolve(dwarf::DW_AT) const+0x178>
    end = base;
   1dc40:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1dc44:	09810793          	addi	a5,sp,152
   1dc48:	00f50663          	beq	a0,a5,1dc54 <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
      delete[] (char *)base;
   1dc4c:	00050463          	beq	a0,zero,1dc54 <dwarf::die::resolve(dwarf::DW_AT) const+0x198>
   1dc50:	971f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1dc54:	05813503          	ld	a0,88(sp)
   1dc58:	06013783          	ld	a5,96(sp)
   1dc5c:	00f57a63          	bgeu	a0,a5,1dc70 <dwarf::die::resolve(dwarf::DW_AT) const+0x1b4>
   1dc60:	00050793          	addi	a5,a0,0
   1dc64:	00878793          	addi	a5,a5,8
   1dc68:	06013703          	ld	a4,96(sp)
   1dc6c:	fee7ece3          	bltu	a5,a4,1dc64 <dwarf::die::resolve(dwarf::DW_AT) const+0x1a8>
    end = base;
   1dc70:	06a13023          	sd	a0,96(sp)
    if ((char *)base != buf)
   1dc74:	02810793          	addi	a5,sp,40
   1dc78:	e8f502e3          	beq	a0,a5,1dafc <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
      delete[] (char *)base;
   1dc7c:	e80500e3          	beq	a0,zero,1dafc <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
   1dc80:	941f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1dc84:	e79ff06f          	jal	zero,1dafc <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
  } else if (has(DW_AT::specification)) {
   1dc88:	04700593          	addi	a1,zero,71
   1dc8c:	00040513          	addi	a0,s0,0
   1dc90:	b65ff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1dc94:	00051863          	bne	a0,zero,1dca4 <dwarf::die::resolve(dwarf::DW_AT) const+0x1e8>
  value() : cu(nullptr), typ(type::invalid) {}
   1dc98:	0004b023          	sd	zero,0(s1)
   1dc9c:	0004a623          	sw	zero,12(s1)
   1dca0:	e5dff06f          	jal	zero,1dafc <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
    die s = (*this)[DW_AT::specification].as_reference();
   1dca4:	04700613          	addi	a2,zero,71
   1dca8:	00040593          	addi	a1,s0,0
   1dcac:	11810413          	addi	s0,sp,280
   1dcb0:	00040513          	addi	a0,s0,0
   1dcb4:	b85ff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dcb8:	00040593          	addi	a1,s0,0
   1dcbc:	07810413          	addi	s0,sp,120
   1dcc0:	00040513          	addi	a0,s0,0
   1dcc4:	3dc030ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
    if (s.has(attr))
   1dcc8:	00090593          	addi	a1,s2,0
   1dccc:	00040513          	addi	a0,s0,0
   1dcd0:	b25ff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1dcd4:	00050c63          	beq	a0,zero,1dcec <dwarf::die::resolve(dwarf::DW_AT) const+0x230>
      return s[attr];
   1dcd8:	00090613          	addi	a2,s2,0
   1dcdc:	00040593          	addi	a1,s0,0
   1dce0:	00048513          	addi	a0,s1,0
   1dce4:	b55ff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1dce8:	0380006f          	jal	zero,1dd20 <dwarf::die::resolve(dwarf::DW_AT) const+0x264>
    for (T *p = base; p < end; ++p)
   1dcec:	0c813503          	ld	a0,200(sp)
   1dcf0:	0d013783          	ld	a5,208(sp)
   1dcf4:	00f57a63          	bgeu	a0,a5,1dd08 <dwarf::die::resolve(dwarf::DW_AT) const+0x24c>
   1dcf8:	00050793          	addi	a5,a0,0
   1dcfc:	00878793          	addi	a5,a5,8
   1dd00:	0d013703          	ld	a4,208(sp)
   1dd04:	fee7ece3          	bltu	a5,a4,1dcfc <dwarf::die::resolve(dwarf::DW_AT) const+0x240>
    end = base;
   1dd08:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1dd0c:	09810793          	addi	a5,sp,152
   1dd10:	f8f504e3          	beq	a0,a5,1dc98 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
      delete[] (char *)base;
   1dd14:	f80502e3          	beq	a0,zero,1dc98 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
   1dd18:	8a9f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1dd1c:	f7dff06f          	jal	zero,1dc98 <dwarf::die::resolve(dwarf::DW_AT) const+0x1dc>
    for (T *p = base; p < end; ++p)
   1dd20:	0c813503          	ld	a0,200(sp)
   1dd24:	0d013783          	ld	a5,208(sp)
   1dd28:	00f57a63          	bgeu	a0,a5,1dd3c <dwarf::die::resolve(dwarf::DW_AT) const+0x280>
   1dd2c:	00050793          	addi	a5,a0,0
   1dd30:	00878793          	addi	a5,a5,8
   1dd34:	0d013703          	ld	a4,208(sp)
   1dd38:	fee7ece3          	bltu	a5,a4,1dd30 <dwarf::die::resolve(dwarf::DW_AT) const+0x274>
    end = base;
   1dd3c:	0ca13823          	sd	a0,208(sp)
    if ((char *)base != buf)
   1dd40:	09810793          	addi	a5,sp,152
   1dd44:	daf50ce3          	beq	a0,a5,1dafc <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
      delete[] (char *)base;
   1dd48:	da050ae3          	beq	a0,zero,1dafc <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
   1dd4c:	875f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1dd50:	dadff06f          	jal	zero,1dafc <dwarf::die::resolve(dwarf::DW_AT) const+0x40>
class die {
   1dd54:	00050413          	addi	s0,a0,0
   1dd58:	09810513          	addi	a0,sp,152
   1dd5c:	00024317          	auipc	t1,0x24
   1dd60:	68c33303          	ld	t1,1676(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1dd64:	000300e7          	jalr	ra,0(t1)
   1dd68:	02810513          	addi	a0,sp,40
   1dd6c:	00024317          	auipc	t1,0x24
   1dd70:	67c33303          	ld	t1,1660(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1dd74:	000300e7          	jalr	ra,0(t1)
   1dd78:	00040513          	addi	a0,s0,0
   1dd7c:	975f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   1dd80:	00050413          	addi	s0,a0,0
   1dd84:	fe5ff06f          	jal	zero,1dd68 <dwarf::die::resolve(dwarf::DW_AT) const+0x2ac>
   1dd88:	00050413          	addi	s0,a0,0
   1dd8c:	09810513          	addi	a0,sp,152
   1dd90:	00024317          	auipc	t1,0x24
   1dd94:	65833303          	ld	t1,1624(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1dd98:	000300e7          	jalr	ra,0(t1)
   1dd9c:	00040513          	addi	a0,s0,0
   1dda0:	951f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001dda4 <dwarf::die::iterator::operator++()>:
die::iterator &die::iterator::operator++() {
   1dda4:	f3010113          	addi	sp,sp,-208
   1dda8:	0c113423          	sd	ra,200(sp)
   1ddac:	0c813023          	sd	s0,192(sp)
   1ddb0:	0a913c23          	sd	s1,184(sp)
   1ddb4:	0b213823          	sd	s2,176(sp)
   1ddb8:	0b313423          	sd	s3,168(sp)
   1ddbc:	0b413023          	sd	s4,160(sp)
   1ddc0:	09513c23          	sd	s5,152(sp)
   1ddc4:	00050413          	addi	s0,a0,0
  if (!d.abbrev)
   1ddc8:	01053783          	ld	a5,16(a0)
   1ddcc:	00078a63          	beq	a5,zero,1dde0 <dwarf::die::iterator::operator++()+0x3c>
  if (!d.abbrev->children) {
   1ddd0:	00c7c783          	lbu	a5,12(a5)
   1ddd4:	02079a63          	bne	a5,zero,1de08 <dwarf::die::iterator::operator++()+0x64>
    d.read(d.next);
   1ddd8:	06853583          	ld	a1,104(a0)
   1dddc:	ce0ff0ef          	jal	ra,1d2bc <dwarf::die::read(unsigned long)>
}
   1dde0:	00040513          	addi	a0,s0,0
   1dde4:	0c813083          	ld	ra,200(sp)
   1dde8:	0c013403          	ld	s0,192(sp)
   1ddec:	0b813483          	ld	s1,184(sp)
   1ddf0:	0b013903          	ld	s2,176(sp)
   1ddf4:	0a813983          	ld	s3,168(sp)
   1ddf8:	0a013a03          	ld	s4,160(sp)
   1ddfc:	09813a83          	ld	s5,152(sp)
   1de00:	0d010113          	addi	sp,sp,208
   1de04:	00008067          	jalr	zero,0(ra)
  } else if (d.has(DW_AT::sibling)) {
   1de08:	00100593          	addi	a1,zero,1
   1de0c:	9e9ff0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   1de10:	16050663          	beq	a0,zero,1df7c <dwarf::die::iterator::operator++()+0x1d8>
    d = d[DW_AT::sibling].as_reference();
   1de14:	00100613          	addi	a2,zero,1
   1de18:	00040593          	addi	a1,s0,0
   1de1c:	07810493          	addi	s1,sp,120
   1de20:	00048513          	addi	a0,s1,0
   1de24:	a15ff0ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   1de28:	00048593          	addi	a1,s1,0
   1de2c:	00810513          	addi	a0,sp,8
   1de30:	270030ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
  die &operator=(die &&o) = default;
   1de34:	00812783          	lw	a5,8(sp)
   1de38:	00f42023          	sw	a5,0(s0)
   1de3c:	01013783          	ld	a5,16(sp)
   1de40:	00f43423          	sd	a5,8(s0)
   1de44:	01813783          	ld	a5,24(sp)
   1de48:	00f43823          	sd	a5,16(s0)
   1de4c:	02013783          	ld	a5,32(sp)
   1de50:	00f43c23          	sd	a5,24(s0)
  size_type size() const { return end - base; }
   1de54:	06013903          	ld	s2,96(sp)
   1de58:	05813783          	ld	a5,88(sp)
   1de5c:	40f90933          	sub	s2,s2,a5
   1de60:	40395493          	srai	s1,s2,0x3
    for (T *p = base; p < end; ++p)
   1de64:	05043683          	ld	a3,80(s0)
   1de68:	05843783          	ld	a5,88(s0)
   1de6c:	00f6fa63          	bgeu	a3,a5,1de80 <dwarf::die::iterator::operator++()+0xdc>
   1de70:	00068793          	addi	a5,a3,0
   1de74:	00878793          	addi	a5,a5,8
   1de78:	05843703          	ld	a4,88(s0)
   1de7c:	fee7ece3          	bltu	a5,a4,1de74 <dwarf::die::iterator::operator++()+0xd0>
    end = base;
   1de80:	04d43c23          	sd	a3,88(s0)
    if (n <= (size_type)(cap - base))
   1de84:	06043503          	ld	a0,96(s0)
   1de88:	40d50533          	sub	a0,a0,a3
   1de8c:	07257c63          	bgeu	a0,s2,1df04 <dwarf::die::iterator::operator++()+0x160>
   1de90:	40355513          	srai	a0,a0,0x3
   1de94:	00051463          	bne	a0,zero,1de9c <dwarf::die::iterator::operator++()+0xf8>
   1de98:	00100513          	addi	a0,zero,1
    while (target < n)
   1de9c:	00957663          	bgeu	a0,s1,1dea8 <dwarf::die::iterator::operator++()+0x104>
      target <<= 1;
   1dea0:	00151513          	slli	a0,a0,0x1
    while (target < n)
   1dea4:	fe956ee3          	bltu	a0,s1,1dea0 <dwarf::die::iterator::operator++()+0xfc>
    char *newbuf = new char[sizeof(T[target])];
   1dea8:	00351993          	slli	s3,a0,0x3
   1deac:	00098513          	addi	a0,s3,0
   1deb0:	c80f80ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1deb4:	00050a93          	addi	s5,a0,0
    T *src = base, *dest = (T *)newbuf;
   1deb8:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1debc:	05843703          	ld	a4,88(s0)
   1dec0:	0ae57a63          	bgeu	a0,a4,1df74 <dwarf::die::iterator::operator++()+0x1d0>
    T *src = base, *dest = (T *)newbuf;
   1dec4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   1dec8:	00878793          	addi	a5,a5,8
   1decc:	fee7eee3          	bltu	a5,a4,1dec8 <dwarf::die::iterator::operator++()+0x124>
   1ded0:	fff70a13          	addi	s4,a4,-1
   1ded4:	40aa0a33          	sub	s4,s4,a0
   1ded8:	ff8a7a13          	andi	s4,s4,-8
   1dedc:	008a0a13          	addi	s4,s4,8
   1dee0:	014a8a33          	add	s4,s5,s4
   1dee4:	02040793          	addi	a5,s0,32
    if ((char *)base != buf)
   1dee8:	00f50663          	beq	a0,a5,1def4 <dwarf::die::iterator::operator++()+0x150>
      delete[] (char *)base;
   1deec:	00050463          	beq	a0,zero,1def4 <dwarf::die::iterator::operator++()+0x150>
   1def0:	ed0f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1def4:	05543823          	sd	s5,80(s0)
    end = dest;
   1def8:	05443c23          	sd	s4,88(s0)
    cap = base + target;
   1defc:	013a8ab3          	add	s5,s5,s3
   1df00:	07543023          	sd	s5,96(s0)
    for (size_type i = 0; i < osize; i++)
   1df04:	02048663          	beq	s1,zero,1df30 <dwarf::die::iterator::operator++()+0x18c>
   1df08:	00000793          	addi	a5,zero,0
   1df0c:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1df10:	05813703          	ld	a4,88(sp)
   1df14:	00d70733          	add	a4,a4,a3
   1df18:	00073603          	ld	a2,0(a4)
   1df1c:	05043703          	ld	a4,80(s0)
   1df20:	00d70733          	add	a4,a4,a3
   1df24:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1df28:	00178793          	addi	a5,a5,1
   1df2c:	fef490e3          	bne	s1,a5,1df0c <dwarf::die::iterator::operator++()+0x168>
    end = base + osize;
   1df30:	05043783          	ld	a5,80(s0)
   1df34:	012787b3          	add	a5,a5,s2
   1df38:	04f43c23          	sd	a5,88(s0)
   1df3c:	07013783          	ld	a5,112(sp)
   1df40:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1df44:	05813503          	ld	a0,88(sp)
   1df48:	06013783          	ld	a5,96(sp)
   1df4c:	00f57a63          	bgeu	a0,a5,1df60 <dwarf::die::iterator::operator++()+0x1bc>
   1df50:	00050793          	addi	a5,a0,0
   1df54:	00878793          	addi	a5,a5,8
   1df58:	06013703          	ld	a4,96(sp)
   1df5c:	fee7ece3          	bltu	a5,a4,1df54 <dwarf::die::iterator::operator++()+0x1b0>
    if ((char *)base != buf)
   1df60:	02810793          	addi	a5,sp,40
   1df64:	e6f50ee3          	beq	a0,a5,1dde0 <dwarf::die::iterator::operator++()+0x3c>
      delete[] (char *)base;
   1df68:	e6050ce3          	beq	a0,zero,1dde0 <dwarf::die::iterator::operator++()+0x3c>
   1df6c:	e54f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1df70:	e71ff06f          	jal	zero,1dde0 <dwarf::die::iterator::operator++()+0x3c>
    T *src = base, *dest = (T *)newbuf;
   1df74:	000a8a13          	addi	s4,s5,0
   1df78:	f6dff06f          	jal	zero,1dee4 <dwarf::die::iterator::operator++()+0x140>
    iterator sub(d.cu, d.next);
   1df7c:	06843603          	ld	a2,104(s0)
   1df80:	00843583          	ld	a1,8(s0)
   1df84:	00810513          	addi	a0,sp,8
   1df88:	a55ff0ef          	jal	ra,1d9dc <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
      ++sub;
   1df8c:	00810493          	addi	s1,sp,8
    while (sub->abbrev)
   1df90:	01813783          	ld	a5,24(sp)
   1df94:	00078863          	beq	a5,zero,1dfa4 <dwarf::die::iterator::operator++()+0x200>
      ++sub;
   1df98:	00048513          	addi	a0,s1,0
   1df9c:	e09ff0ef          	jal	ra,1dda4 <dwarf::die::iterator::operator++()>
   1dfa0:	ff1ff06f          	jal	zero,1df90 <dwarf::die::iterator::operator++()+0x1ec>
    d.read(sub->next);
   1dfa4:	07013583          	ld	a1,112(sp)
   1dfa8:	00040513          	addi	a0,s0,0
   1dfac:	b10ff0ef          	jal	ra,1d2bc <dwarf::die::read(unsigned long)>
    for (T *p = base; p < end; ++p)
   1dfb0:	05813503          	ld	a0,88(sp)
   1dfb4:	06013783          	ld	a5,96(sp)
   1dfb8:	00f57a63          	bgeu	a0,a5,1dfcc <dwarf::die::iterator::operator++()+0x228>
   1dfbc:	00050793          	addi	a5,a0,0
   1dfc0:	00878793          	addi	a5,a5,8
   1dfc4:	06013703          	ld	a4,96(sp)
   1dfc8:	fee7ece3          	bltu	a5,a4,1dfc0 <dwarf::die::iterator::operator++()+0x21c>
    if ((char *)base != buf)
   1dfcc:	02810793          	addi	a5,sp,40
   1dfd0:	e0f508e3          	beq	a0,a5,1dde0 <dwarf::die::iterator::operator++()+0x3c>
      delete[] (char *)base;
   1dfd4:	e00506e3          	beq	a0,zero,1dde0 <dwarf::die::iterator::operator++()+0x3c>
   1dfd8:	de8f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1dfdc:	e05ff06f          	jal	zero,1dde0 <dwarf::die::iterator::operator++()+0x3c>
class die {
   1dfe0:	00050413          	addi	s0,a0,0
   1dfe4:	02810513          	addi	a0,sp,40
   1dfe8:	00024317          	auipc	t1,0x24
   1dfec:	40033303          	ld	t1,1024(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1dff0:	000300e7          	jalr	ra,0(t1)
   1dff4:	00040513          	addi	a0,s0,0
   1dff8:	ef8f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   1dffc:	00050413          	addi	s0,a0,0
   1e000:	02810513          	addi	a0,sp,40
   1e004:	00024317          	auipc	t1,0x24
   1e008:	3e433303          	ld	t1,996(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   1e00c:	000300e7          	jalr	ra,0(t1)
   1e010:	00040513          	addi	a0,s0,0
   1e014:	edcf80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001e018 <dwarf::die::attributes() const>:
const vector<pair<DW_AT, value>> die::attributes() const {
   1e018:	f7010113          	addi	sp,sp,-144
   1e01c:	08113423          	sd	ra,136(sp)
   1e020:	08813023          	sd	s0,128(sp)
   1e024:	06913c23          	sd	s1,120(sp)
   1e028:	07213823          	sd	s2,112(sp)
   1e02c:	07313423          	sd	s3,104(sp)
   1e030:	07413023          	sd	s4,96(sp)
   1e034:	05513c23          	sd	s5,88(sp)
   1e038:	05613823          	sd	s6,80(sp)
   1e03c:	05713423          	sd	s7,72(sp)
   1e040:	00050493          	addi	s1,a0,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   1e044:	00053023          	sd	zero,0(a0)
   1e048:	00053423          	sd	zero,8(a0)
   1e04c:	00053823          	sd	zero,16(a0)
  if (!abbrev)
   1e050:	0105b783          	ld	a5,16(a1)
   1e054:	0e078063          	beq	a5,zero,1e134 <dwarf::die::attributes() const+0x11c>
   1e058:	00058993          	addi	s3,a1,0
   1e05c:	0107b403          	ld	s0,16(a5)
   1e060:	0187ba03          	ld	s4,24(a5)
  for (auto &a : abbrev->attributes) {
   1e064:	0c8a0863          	beq	s4,s0,1e134 <dwarf::die::attributes() const+0x11c>
   1e068:	00000913          	addi	s2,zero,0
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1e06c:	02810a93          	addi	s5,sp,40
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1e070:	00810b13          	addi	s6,sp,8
   1e074:	00024b97          	auipc	s7,0x24
   1e078:	484bbb83          	ld	s7,1156(s7) # 424f8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)@@Base+0x24394>
   1e07c:	0680006f          	jal	zero,1e0e4 <dwarf::die::attributes() const+0xcc>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1e080:	00042783          	lw	a5,0(s0)
   1e084:	00f12423          	sw	a5,8(sp)
   1e088:	02813783          	ld	a5,40(sp)
   1e08c:	00f13823          	sd	a5,16(sp)
   1e090:	03013783          	ld	a5,48(sp)
   1e094:	00f13c23          	sd	a5,24(sp)
   1e098:	03813783          	ld	a5,56(sp)
   1e09c:	02f13023          	sd	a5,32(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1e0a0:	0084b583          	ld	a1,8(s1)
   1e0a4:	0104b783          	ld	a5,16(s1)
   1e0a8:	06f58263          	beq	a1,a5,1e10c <dwarf::die::attributes() const+0xf4>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1e0ac:	00813783          	ld	a5,8(sp)
   1e0b0:	00f5b023          	sd	a5,0(a1)
   1e0b4:	01013783          	ld	a5,16(sp)
   1e0b8:	00f5b423          	sd	a5,8(a1)
   1e0bc:	01813783          	ld	a5,24(sp)
   1e0c0:	00f5b823          	sd	a5,16(a1)
   1e0c4:	02013783          	ld	a5,32(sp)
   1e0c8:	00f5bc23          	sd	a5,24(a1)
	    ++this->_M_impl._M_finish;
   1e0cc:	0084b783          	ld	a5,8(s1)
   1e0d0:	02078793          	addi	a5,a5,32
   1e0d4:	00f4b423          	sd	a5,8(s1)
  for (auto &a : abbrev->attributes) {
   1e0d8:	00c40413          	addi	s0,s0,12
   1e0dc:	00890913          	addi	s2,s2,8
   1e0e0:	048a0a63          	beq	s4,s0,1e134 <dwarf::die::attributes() const+0x11c>
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1e0e4:	0509b783          	ld	a5,80(s3)
   1e0e8:	012787b3          	add	a5,a5,s2
   1e0ec:	0007b783          	ld	a5,0(a5)
   1e0f0:	00842703          	lw	a4,8(s0)
   1e0f4:	00442683          	lw	a3,4(s0)
   1e0f8:	00042603          	lw	a2,0(s0)
   1e0fc:	0089b583          	ld	a1,8(s3)
   1e100:	000a8513          	addi	a0,s5,0
   1e104:	32d020ef          	jal	ra,20c30 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
   1e108:	f79ff06f          	jal	zero,1e080 <dwarf::die::attributes() const+0x68>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1e10c:	000b0613          	addi	a2,s6,0
   1e110:	00048513          	addi	a0,s1,0
   1e114:	000b80e7          	jalr	ra,0(s7)
   1e118:	fc1ff06f          	jal	zero,1e0d8 <dwarf::die::attributes() const+0xc0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1e11c:	00050413          	addi	s0,a0,0
   1e120:	0004b503          	ld	a0,0(s1)
	if (__p)
   1e124:	00050463          	beq	a0,zero,1e12c <dwarf::die::attributes() const+0x114>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e128:	be8f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e12c:	00040513          	addi	a0,s0,0
   1e130:	dc0f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
}
   1e134:	00048513          	addi	a0,s1,0
   1e138:	08813083          	ld	ra,136(sp)
   1e13c:	08013403          	ld	s0,128(sp)
   1e140:	07813483          	ld	s1,120(sp)
   1e144:	07013903          	ld	s2,112(sp)
   1e148:	06813983          	ld	s3,104(sp)
   1e14c:	06013a03          	ld	s4,96(sp)
   1e150:	05813a83          	ld	s5,88(sp)
   1e154:	05013b03          	ld	s6,80(sp)
   1e158:	04813b83          	ld	s7,72(sp)
   1e15c:	09010113          	addi	sp,sp,144
   1e160:	00008067          	jalr	zero,0(ra)

000000000001e164 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)>:
      vector<_Tp, _Alloc>::
   1e164:	fb010113          	addi	sp,sp,-80
   1e168:	04113423          	sd	ra,72(sp)
   1e16c:	04813023          	sd	s0,64(sp)
   1e170:	02913c23          	sd	s1,56(sp)
   1e174:	03213823          	sd	s2,48(sp)
   1e178:	03313423          	sd	s3,40(sp)
   1e17c:	03413023          	sd	s4,32(sp)
   1e180:	01513c23          	sd	s5,24(sp)
   1e184:	01613823          	sd	s6,16(sp)
   1e188:	01713423          	sd	s7,8(sp)
   1e18c:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1e190:	00853903          	ld	s2,8(a0)
   1e194:	00053a03          	ld	s4,0(a0)
   1e198:	414907b3          	sub	a5,s2,s4
   1e19c:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   1e1a0:	fff00713          	addi	a4,zero,-1
   1e1a4:	00675713          	srli	a4,a4,0x6
   1e1a8:	04e78463          	beq	a5,a4,1e1f0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x8c>
   1e1ac:	00050a93          	addi	s5,a0,0
   1e1b0:	00058b93          	addi	s7,a1,0
   1e1b4:	00060493          	addi	s1,a2,0
   1e1b8:	00058413          	addi	s0,a1,0
      return __a;
   1e1bc:	00078713          	addi	a4,a5,0
      if (__a < __b)
   1e1c0:	03490e63          	beq	s2,s4,1e1fc <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   1e1c4:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1e1c8:	04f76263          	bltu	a4,a5,1e20c <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa8>
   1e1cc:	00070b13          	addi	s6,a4,0
   1e1d0:	fff00793          	addi	a5,zero,-1
   1e1d4:	0067d793          	srli	a5,a5,0x6
   1e1d8:	00e7f463          	bgeu	a5,a4,1e1e0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x7c>
   1e1dc:	00078b13          	addi	s6,a5,0
    { return __lhs.base() - __rhs.base(); }
   1e1e0:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1e1e4:	00000993          	addi	s3,zero,0
   1e1e8:	02070e63          	beq	a4,zero,1e224 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xc0>
   1e1ec:	02c0006f          	jal	zero,1e218 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xb4>
	  __throw_length_error(__N(__s));
   1e1f0:	00018517          	auipc	a0,0x18
   1e1f4:	6b050513          	addi	a0,a0,1712 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1e1f8:	a48f80ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   1e1fc:	00100713          	addi	a4,zero,1
   1e200:	fc5ff06f          	jal	zero,1e1c4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x60>
      _ForwardIterator __cur = __result;
   1e204:	00098493          	addi	s1,s3,0
   1e208:	0800006f          	jal	zero,1e288 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x124>
   1e20c:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1e210:	fff00b13          	addi	s6,zero,-1
   1e214:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1e218:	005b1513          	slli	a0,s6,0x5
   1e21c:	b04f80ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1e220:	00050993          	addi	s3,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1e224:	018987b3          	add	a5,s3,s8
   1e228:	0004b583          	ld	a1,0(s1)
   1e22c:	0084b603          	ld	a2,8(s1)
   1e230:	0104b683          	ld	a3,16(s1)
   1e234:	0184b703          	ld	a4,24(s1)
   1e238:	00b7b023          	sd	a1,0(a5)
   1e23c:	00c7b423          	sd	a2,8(a5)
   1e240:	00d7b823          	sd	a3,16(a5)
   1e244:	00e7bc23          	sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1e248:	fb440ee3          	beq	s0,s4,1e204 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa0>
   1e24c:	414b84b3          	sub	s1,s7,s4
   1e250:	009984b3          	add	s1,s3,s1
      _ForwardIterator __cur = __result;
   1e254:	00098793          	addi	a5,s3,0
      for (; __first != __last; ++__first, (void)++__cur)
   1e258:	000a0713          	addi	a4,s4,0
   1e25c:	00073503          	ld	a0,0(a4)
   1e260:	00873583          	ld	a1,8(a4)
   1e264:	01073603          	ld	a2,16(a4)
   1e268:	01873683          	ld	a3,24(a4)
   1e26c:	00a7b023          	sd	a0,0(a5)
   1e270:	00b7b423          	sd	a1,8(a5)
   1e274:	00c7b823          	sd	a2,16(a5)
   1e278:	00d7bc23          	sd	a3,24(a5)
   1e27c:	02070713          	addi	a4,a4,32
   1e280:	02078793          	addi	a5,a5,32
   1e284:	fc979ce3          	bne	a5,s1,1e25c <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xf8>
	      ++__new_finish;
   1e288:	02048493          	addi	s1,s1,32
   1e28c:	03240e63          	beq	s0,s2,1e2c8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x164>
   1e290:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   1e294:	00048793          	addi	a5,s1,0
   1e298:	00043503          	ld	a0,0(s0)
   1e29c:	00843603          	ld	a2,8(s0)
   1e2a0:	01043683          	ld	a3,16(s0)
   1e2a4:	01843703          	ld	a4,24(s0)
   1e2a8:	00a7b023          	sd	a0,0(a5)
   1e2ac:	00c7b423          	sd	a2,8(a5)
   1e2b0:	00d7b823          	sd	a3,16(a5)
   1e2b4:	00e7bc23          	sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1e2b8:	02040413          	addi	s0,s0,32
   1e2bc:	02078793          	addi	a5,a5,32
   1e2c0:	fd241ce3          	bne	s0,s2,1e298 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x134>
   1e2c4:	017484b3          	add	s1,s1,s7
	if (__p)
   1e2c8:	000a0663          	beq	s4,zero,1e2d4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x170>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e2cc:	000a0513          	addi	a0,s4,0
   1e2d0:	a40f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1e2d4:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   1e2d8:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1e2dc:	005b1b13          	slli	s6,s6,0x5
   1e2e0:	016989b3          	add	s3,s3,s6
   1e2e4:	013ab823          	sd	s3,16(s5)
    }
   1e2e8:	04813083          	ld	ra,72(sp)
   1e2ec:	04013403          	ld	s0,64(sp)
   1e2f0:	03813483          	ld	s1,56(sp)
   1e2f4:	03013903          	ld	s2,48(sp)
   1e2f8:	02813983          	ld	s3,40(sp)
   1e2fc:	02013a03          	ld	s4,32(sp)
   1e300:	01813a83          	ld	s5,24(sp)
   1e304:	01013b03          	ld	s6,16(sp)
   1e308:	00813b83          	ld	s7,8(sp)
   1e30c:	00013c03          	ld	s8,0(sp)
   1e310:	05010113          	addi	sp,sp,80
   1e314:	00008067          	jalr	zero,0(ra)

000000000001e318 <dwarf::value::get_section_offset() const>:
    : cu(cu), form(form), typ(typ), offset(offset) {
  if (form == DW_FORM::indirect)
    resolve_indirect(name);
}

section_offset value::get_section_offset() const {
   1e318:	ff010113          	addi	sp,sp,-16
   1e31c:	00113423          	sd	ra,8(sp)
   1e320:	00813023          	sd	s0,0(sp)
   1e324:	00050413          	addi	s0,a0,0
  return cu->get_section_offset() + offset;
   1e328:	00053503          	ld	a0,0(a0)
   1e32c:	80cf90ef          	jal	ra,17338 <dwarf::unit::get_section_offset() const>
   1e330:	01043783          	ld	a5,16(s0)
}
   1e334:	00f50533          	add	a0,a0,a5
   1e338:	00813083          	ld	ra,8(sp)
   1e33c:	00013403          	ld	s0,0(sp)
   1e340:	01010113          	addi	sp,sp,16
   1e344:	00008067          	jalr	zero,0(ra)

000000000001e348 <dwarf::value::as_address() const>:

taddr value::as_address() const {
   1e348:	f6010113          	addi	sp,sp,-160
   1e34c:	08113c23          	sd	ra,152(sp)
   1e350:	08813823          	sd	s0,144(sp)
   1e354:	08913423          	sd	s1,136(sp)
   1e358:	09213023          	sd	s2,128(sp)
   1e35c:	00050413          	addi	s0,a0,0
  if (form != DW_FORM::addr)
   1e360:	00852703          	lw	a4,8(a0)
   1e364:	00100793          	addi	a5,zero,1
   1e368:	0cf71c63          	bne	a4,a5,1e440 <dwarf::value::as_address() const+0xf8>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");

  cursor cur(cu->data(), offset);
   1e36c:	00053503          	ld	a0,0(a0)
   1e370:	fd5f80ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e374:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1e378:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1e37c:	2e048c63          	beq	s1,zero,1e674 <dwarf::value::as_address() const+0x32c>
    if (__is_single_threaded())
   1e380:	00024797          	auipc	a5,0x24
   1e384:	1007b783          	ld	a5,256(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e388:	0007c783          	lbu	a5,0(a5)
   1e38c:	16078a63          	beq	a5,zero,1e500 <dwarf::value::as_address() const+0x1b8>
  { *__mem += __val; }
   1e390:	0304a783          	lw	a5,48(s1)
   1e394:	0017879b          	addiw	a5,a5,1
   1e398:	02f4a823          	sw	a5,48(s1)
   1e39c:	01043403          	ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e3a0:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1e3a4:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1e3a8:	00024797          	auipc	a5,0x24
   1e3ac:	0d87b783          	ld	a5,216(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e3b0:	0007c783          	lbu	a5,0(a5)
   1e3b4:	14078e63          	beq	a5,zero,1e510 <dwarf::value::as_address() const+0x1c8>
  { *__mem += __val; }
   1e3b8:	0304a783          	lw	a5,48(s1)
   1e3bc:	0017879b          	addiw	a5,a5,1
   1e3c0:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1e3c4:	00893783          	ld	a5,8(s2)
   1e3c8:	008787b3          	add	a5,a5,s0
   1e3cc:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1e3d0:	00024797          	auipc	a5,0x24
   1e3d4:	0b07b783          	ld	a5,176(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e3d8:	0007c783          	lbu	a5,0(a5)
   1e3dc:	14078263          	beq	a5,zero,1e520 <dwarf::value::as_address() const+0x1d8>
    _Atomic_word __result = *__mem;
   1e3e0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1e3e4:	fff5079b          	addiw	a5,a0,-1
   1e3e8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e3ec:	00100793          	addi	a5,zero,1
   1e3f0:	28f51e63          	bne	a0,a5,1e68c <dwarf::value::as_address() const+0x344>
	_M_dispose();
   1e3f4:	0004b783          	ld	a5,0(s1)
   1e3f8:	0107b783          	ld	a5,16(a5)
   1e3fc:	00048513          	addi	a0,s1,0
   1e400:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e404:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e408:	00024797          	auipc	a5,0x24
   1e40c:	0787b783          	ld	a5,120(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e410:	0007c783          	lbu	a5,0(a5)
   1e414:	10078e63          	beq	a5,zero,1e530 <dwarf::value::as_address() const+0x1e8>
    _Atomic_word __result = *__mem;
   1e418:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1e41c:	fff5079b          	addiw	a5,a0,-1
   1e420:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e424:	00100793          	addi	a5,zero,1
   1e428:	26f51263          	bne	a0,a5,1e68c <dwarf::value::as_address() const+0x344>
	    _M_destroy();
   1e42c:	0004b783          	ld	a5,0(s1)
   1e430:	0187b783          	ld	a5,24(a5)
   1e434:	00048513          	addi	a0,s1,0
   1e438:	000780e7          	jalr	ra,0(a5)
   1e43c:	2500006f          	jal	zero,1e68c <dwarf::value::as_address() const+0x344>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1e440:	01000513          	addi	a0,zero,16
   1e444:	fddf70ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1e448:	00050493          	addi	s1,a0,0
   1e44c:	00c42583          	lw	a1,12(s0)
   1e450:	00810513          	addi	a0,sp,8
   1e454:	025100ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1e458:	00019617          	auipc	a2,0x19
   1e45c:	85860613          	addi	a2,a2,-1960 # 36cb0 <std::piecewise_construct+0x1c8>
   1e460:	00000593          	addi	a1,zero,0
   1e464:	00810513          	addi	a0,sp,8
   1e468:	f29f70ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e46c:	00050593          	addi	a1,a0,0
   1e470:	02810413          	addi	s0,sp,40
   1e474:	00040513          	addi	a0,s0,0
   1e478:	ff9f70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1e47c:	00019597          	auipc	a1,0x19
   1e480:	84458593          	addi	a1,a1,-1980 # 36cc0 <std::piecewise_construct+0x1d8>
   1e484:	00040513          	addi	a0,s0,0
   1e488:	b18f80ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1e48c:	00050593          	addi	a1,a0,0
   1e490:	04810413          	addi	s0,sp,72
   1e494:	00040513          	addi	a0,s0,0
   1e498:	fd9f70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1e49c:	00040593          	addi	a1,s0,0
   1e4a0:	00048513          	addi	a0,s1,0
   1e4a4:	b4cf80ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e4a8:	00024797          	auipc	a5,0x24
   1e4ac:	fa07b783          	ld	a5,-96(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1e4b0:	01078793          	addi	a5,a5,16
   1e4b4:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1e4b8:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1e4bc:	05810793          	addi	a5,sp,88
   1e4c0:	00f50463          	beq	a0,a5,1e4c8 <dwarf::value::as_address() const+0x180>
   1e4c4:	84cf80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e4c8:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1e4cc:	03810793          	addi	a5,sp,56
   1e4d0:	00f50463          	beq	a0,a5,1e4d8 <dwarf::value::as_address() const+0x190>
   1e4d4:	83cf80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e4d8:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1e4dc:	01810793          	addi	a5,sp,24
   1e4e0:	00f50463          	beq	a0,a5,1e4e8 <dwarf::value::as_address() const+0x1a0>
   1e4e4:	82cf80ef          	jal	ra,16510 <operator delete(void*)@plt>
   1e4e8:	00024617          	auipc	a2,0x24
   1e4ec:	0f063603          	ld	a2,240(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   1e4f0:	00024597          	auipc	a1,0x24
   1e4f4:	0a85b583          	ld	a1,168(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1e4f8:	00048513          	addi	a0,s1,0
   1e4fc:	9c4f80ef          	jal	ra,166c0 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   1e500:	00100593          	addi	a1,zero,1
   1e504:	03048513          	addi	a0,s1,48
   1e508:	e49f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e50c:	e91ff06f          	jal	zero,1e39c <dwarf::value::as_address() const+0x54>
   1e510:	00100593          	addi	a1,zero,1
   1e514:	03048513          	addi	a0,s1,48
   1e518:	e39f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e51c:	ea9ff06f          	jal	zero,1e3c4 <dwarf::value::as_address() const+0x7c>
      return __exchange_and_add(__mem, __val);
   1e520:	fff00593          	addi	a1,zero,-1
   1e524:	03048513          	addi	a0,s1,48
   1e528:	e59f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e52c:	ec1ff06f          	jal	zero,1e3ec <dwarf::value::as_address() const+0xa4>
   1e530:	fff00593          	addi	a1,zero,-1
   1e534:	03448513          	addi	a0,s1,52
   1e538:	e49f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e53c:	ee9ff06f          	jal	zero,1e424 <dwarf::value::as_address() const+0xdc>
  return cur.address();
   1e540:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   1e544:	07013483          	ld	s1,112(sp)
   1e548:	02048463          	beq	s1,zero,1e570 <dwarf::value::as_address() const+0x228>
    if (__is_single_threaded())
   1e54c:	00024797          	auipc	a5,0x24
   1e550:	f347b783          	ld	a5,-204(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e554:	0007c783          	lbu	a5,0(a5)
   1e558:	02078a63          	beq	a5,zero,1e58c <dwarf::value::as_address() const+0x244>
    _Atomic_word __result = *__mem;
   1e55c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1e560:	fff5079b          	addiw	a5,a0,-1
   1e564:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e568:	00100793          	addi	a5,zero,1
   1e56c:	02f50863          	beq	a0,a5,1e59c <dwarf::value::as_address() const+0x254>
}
   1e570:	00040513          	addi	a0,s0,0
   1e574:	09813083          	ld	ra,152(sp)
   1e578:	09013403          	ld	s0,144(sp)
   1e57c:	08813483          	ld	s1,136(sp)
   1e580:	08013903          	ld	s2,128(sp)
   1e584:	0a010113          	addi	sp,sp,160
   1e588:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1e58c:	fff00593          	addi	a1,zero,-1
   1e590:	03048513          	addi	a0,s1,48
   1e594:	dedf70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e598:	fd1ff06f          	jal	zero,1e568 <dwarf::value::as_address() const+0x220>
	_M_dispose();
   1e59c:	0004b783          	ld	a5,0(s1)
   1e5a0:	0107b783          	ld	a5,16(a5)
   1e5a4:	00048513          	addi	a0,s1,0
   1e5a8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e5ac:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e5b0:	00024797          	auipc	a5,0x24
   1e5b4:	ed07b783          	ld	a5,-304(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e5b8:	0007c783          	lbu	a5,0(a5)
   1e5bc:	02078663          	beq	a5,zero,1e5e8 <dwarf::value::as_address() const+0x2a0>
    _Atomic_word __result = *__mem;
   1e5c0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1e5c4:	fff5079b          	addiw	a5,a0,-1
   1e5c8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e5cc:	00100793          	addi	a5,zero,1
   1e5d0:	faf510e3          	bne	a0,a5,1e570 <dwarf::value::as_address() const+0x228>
	    _M_destroy();
   1e5d4:	0004b783          	ld	a5,0(s1)
   1e5d8:	0187b783          	ld	a5,24(a5)
   1e5dc:	00048513          	addi	a0,s1,0
   1e5e0:	000780e7          	jalr	ra,0(a5)
  return cur.address();
   1e5e4:	f8dff06f          	jal	zero,1e570 <dwarf::value::as_address() const+0x228>
      return __exchange_and_add(__mem, __val);
   1e5e8:	fff00593          	addi	a1,zero,-1
   1e5ec:	03448513          	addi	a0,s1,52
   1e5f0:	d91f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e5f4:	fd9ff06f          	jal	zero,1e5cc <dwarf::value::as_address() const+0x284>
      { return _M_dataplus._M_p; }
   1e5f8:	00050413          	addi	s0,a0,0
   1e5fc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1e600:	05810793          	addi	a5,sp,88
   1e604:	00f50463          	beq	a0,a5,1e60c <dwarf::value::as_address() const+0x2c4>
   1e608:	f09f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e60c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1e610:	03810793          	addi	a5,sp,56
   1e614:	00f50463          	beq	a0,a5,1e61c <dwarf::value::as_address() const+0x2d4>
   1e618:	ef9f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e61c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1e620:	01810793          	addi	a5,sp,24
   1e624:	00f50463          	beq	a0,a5,1e62c <dwarf::value::as_address() const+0x2e4>
   1e628:	ee9f70ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1e62c:	00048513          	addi	a0,s1,0
   1e630:	ea1f70ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1e634:	00040513          	addi	a0,s0,0
   1e638:	8b8f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1e63c:	00050413          	addi	s0,a0,0
   1e640:	fcdff06f          	jal	zero,1e60c <dwarf::value::as_address() const+0x2c4>
   1e644:	00050413          	addi	s0,a0,0
   1e648:	fd5ff06f          	jal	zero,1e61c <dwarf::value::as_address() const+0x2d4>
   1e64c:	00050413          	addi	s0,a0,0
   1e650:	fddff06f          	jal	zero,1e62c <dwarf::value::as_address() const+0x2e4>
	if (_M_pi != nullptr)
   1e654:	00050413          	addi	s0,a0,0
   1e658:	07013503          	ld	a0,112(sp)
   1e65c:	00050863          	beq	a0,zero,1e66c <dwarf::value::as_address() const+0x324>
	  _M_pi->_M_release();
   1e660:	00024317          	auipc	t1,0x24
   1e664:	d6833303          	ld	t1,-664(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1e668:	000300e7          	jalr	ra,0(t1)
   1e66c:	00040513          	addi	a0,s0,0
   1e670:	880f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
  cursor cur(cu->data(), offset);
   1e674:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e678:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1e67c:	06013823          	sd	zero,112(sp)
   1e680:	00893783          	ld	a5,8(s2)
   1e684:	00e787b3          	add	a5,a5,a4
   1e688:	06f13c23          	sd	a5,120(sp)
  return cur.address();
   1e68c:	06810513          	addi	a0,sp,104
   1e690:	00024317          	auipc	t1,0x24
   1e694:	ce833303          	ld	t1,-792(t1) # 42378 <dwarf::cursor::address()@@Base+0x1f584>
   1e698:	000300e7          	jalr	ra,0(t1)
   1e69c:	ea5ff06f          	jal	zero,1e540 <dwarf::value::as_address() const+0x1f8>

000000000001e6a0 <dwarf::value::as_block(unsigned long*) const>:

const void *value::as_block(size_t *size_out) const {
   1e6a0:	f5010113          	addi	sp,sp,-176
   1e6a4:	0a113423          	sd	ra,168(sp)
   1e6a8:	0a813023          	sd	s0,160(sp)
   1e6ac:	08913c23          	sd	s1,152(sp)
   1e6b0:	09213823          	sd	s2,144(sp)
   1e6b4:	09313423          	sd	s3,136(sp)
   1e6b8:	09413023          	sd	s4,128(sp)
   1e6bc:	00050493          	addi	s1,a0,0
   1e6c0:	00058413          	addi	s0,a1,0
  // XXX Blocks can contain all sorts of things, including
  // references, which couldn't be resolved by callers in the
  // current minimal API.
  cursor cur(cu->data(), offset);
   1e6c4:	00053503          	ld	a0,0(a0)
   1e6c8:	c7df80ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e6cc:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1e6d0:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1e6d4:	4a090863          	beq	s2,zero,1eb84 <dwarf::value::as_block(unsigned long*) const+0x4e4>
    if (__is_single_threaded())
   1e6d8:	00024797          	auipc	a5,0x24
   1e6dc:	da87b783          	ld	a5,-600(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e6e0:	0007c783          	lbu	a5,0(a5)
   1e6e4:	0a078a63          	beq	a5,zero,1e798 <dwarf::value::as_block(unsigned long*) const+0xf8>
  { *__mem += __val; }
   1e6e8:	03092783          	lw	a5,48(s2)
   1e6ec:	0017879b          	addiw	a5,a5,1
   1e6f0:	02f92823          	sw	a5,48(s2)
   1e6f4:	0104ba03          	ld	s4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e6f8:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1e6fc:	07213823          	sd	s2,112(sp)
    if (__is_single_threaded())
   1e700:	00024797          	auipc	a5,0x24
   1e704:	d807b783          	ld	a5,-640(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e708:	0007c783          	lbu	a5,0(a5)
   1e70c:	08078e63          	beq	a5,zero,1e7a8 <dwarf::value::as_block(unsigned long*) const+0x108>
  { *__mem += __val; }
   1e710:	03092783          	lw	a5,48(s2)
   1e714:	0017879b          	addiw	a5,a5,1
   1e718:	02f92823          	sw	a5,48(s2)
   1e71c:	0089b783          	ld	a5,8(s3)
   1e720:	014787b3          	add	a5,a5,s4
   1e724:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1e728:	00024797          	auipc	a5,0x24
   1e72c:	d587b783          	ld	a5,-680(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e730:	0007c783          	lbu	a5,0(a5)
   1e734:	08078263          	beq	a5,zero,1e7b8 <dwarf::value::as_block(unsigned long*) const+0x118>
    _Atomic_word __result = *__mem;
   1e738:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1e73c:	fff5079b          	addiw	a5,a0,-1
   1e740:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e744:	00100793          	addi	a5,zero,1
   1e748:	44f51a63          	bne	a0,a5,1eb9c <dwarf::value::as_block(unsigned long*) const+0x4fc>
	_M_dispose();
   1e74c:	00093783          	ld	a5,0(s2)
   1e750:	0107b783          	ld	a5,16(a5)
   1e754:	00090513          	addi	a0,s2,0
   1e758:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e75c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e760:	00024797          	auipc	a5,0x24
   1e764:	d207b783          	ld	a5,-736(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e768:	0007c783          	lbu	a5,0(a5)
   1e76c:	04078e63          	beq	a5,zero,1e7c8 <dwarf::value::as_block(unsigned long*) const+0x128>
    _Atomic_word __result = *__mem;
   1e770:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1e774:	fff5079b          	addiw	a5,a0,-1
   1e778:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e77c:	00100793          	addi	a5,zero,1
   1e780:	40f51e63          	bne	a0,a5,1eb9c <dwarf::value::as_block(unsigned long*) const+0x4fc>
	    _M_destroy();
   1e784:	00093783          	ld	a5,0(s2)
   1e788:	0187b783          	ld	a5,24(a5)
   1e78c:	00090513          	addi	a0,s2,0
   1e790:	000780e7          	jalr	ra,0(a5)
   1e794:	4080006f          	jal	zero,1eb9c <dwarf::value::as_block(unsigned long*) const+0x4fc>
      __atomic_add(__mem, __val);
   1e798:	00100593          	addi	a1,zero,1
   1e79c:	03090513          	addi	a0,s2,48
   1e7a0:	bb1f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e7a4:	f51ff06f          	jal	zero,1e6f4 <dwarf::value::as_block(unsigned long*) const+0x54>
   1e7a8:	00100593          	addi	a1,zero,1
   1e7ac:	03090513          	addi	a0,s2,48
   1e7b0:	ba1f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1e7b4:	f69ff06f          	jal	zero,1e71c <dwarf::value::as_block(unsigned long*) const+0x7c>
      return __exchange_and_add(__mem, __val);
   1e7b8:	fff00593          	addi	a1,zero,-1
   1e7bc:	03090513          	addi	a0,s2,48
   1e7c0:	bc1f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e7c4:	f81ff06f          	jal	zero,1e744 <dwarf::value::as_block(unsigned long*) const+0xa4>
   1e7c8:	fff00593          	addi	a1,zero,-1
   1e7cc:	03490513          	addi	a0,s2,52
   1e7d0:	bb1f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e7d4:	fa9ff06f          	jal	zero,1e77c <dwarf::value::as_block(unsigned long*) const+0xdc>
    while (pos < sec->end) {
   1e7d8:	07813703          	ld	a4,120(sp)
      { return _M_ptr; }
   1e7dc:	06813503          	ld	a0,104(sp)
   1e7e0:	01053683          	ld	a3,16(a0)
    std::uint64_t result = 0;
   1e7e4:	00000793          	addi	a5,zero,0
    int shift = 0;
   1e7e8:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   1e7ec:	02d77a63          	bgeu	a4,a3,1e820 <dwarf::value::as_block(unsigned long*) const+0x180>
      uint8_t byte = *(uint8_t *)(pos++);
   1e7f0:	00170713          	addi	a4,a4,1
   1e7f4:	06e13c23          	sd	a4,120(sp)
   1e7f8:	fff74683          	lbu	a3,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1e7fc:	07f6f613          	andi	a2,a3,127
   1e800:	00b61633          	sll	a2,a2,a1
   1e804:	00c7e7b3          	or	a5,a5,a2
      if ((byte & 0x80) == 0)
   1e808:	0186969b          	slliw	a3,a3,0x18
   1e80c:	4186d69b          	sraiw	a3,a3,0x18
   1e810:	3406d663          	bge	a3,zero,1eb5c <dwarf::value::as_block(unsigned long*) const+0x4bc>
      shift += 7;
   1e814:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   1e818:	01053683          	ld	a3,16(a0)
   1e81c:	fcd76ae3          	bltu	a4,a3,1e7f0 <dwarf::value::as_block(unsigned long*) const+0x150>
    underflow();
   1e820:	06810513          	addi	a0,sp,104
   1e824:	928fe0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   1e828:	1280006f          	jal	zero,1e950 <dwarf::value::as_block(unsigned long*) const+0x2b0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e82c:	06813783          	ld	a5,104(sp)
   1e830:	0107b703          	ld	a4,16(a5)
   1e834:	07813783          	ld	a5,120(sp)
   1e838:	00e7e663          	bltu	a5,a4,1e844 <dwarf::value::as_block(unsigned long*) const+0x1a4>
      underflow();
   1e83c:	06810513          	addi	a0,sp,104
   1e840:	90cfe0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e844:	07813703          	ld	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1e848:	06813783          	ld	a5,104(sp)
   1e84c:	01c7a783          	lw	a5,28(a5)
   1e850:	30078063          	beq	a5,zero,1eb50 <dwarf::value::as_block(unsigned long*) const+0x4b0>
        val = (val << 8) | (uint64_t)p[i];
   1e854:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1e858:	2fc0006f          	jal	zero,1eb54 <dwarf::value::as_block(unsigned long*) const+0x4b4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e85c:	06813783          	ld	a5,104(sp)
   1e860:	0107b703          	ld	a4,16(a5)
   1e864:	07813783          	ld	a5,120(sp)
   1e868:	40f70633          	sub	a2,a4,a5
   1e86c:	00100693          	addi	a3,zero,1
   1e870:	00c6f463          	bgeu	a3,a2,1e878 <dwarf::value::as_block(unsigned long*) const+0x1d8>
   1e874:	00e7e663          	bltu	a5,a4,1e880 <dwarf::value::as_block(unsigned long*) const+0x1e0>
      underflow();
   1e878:	06810513          	addi	a0,sp,104
   1e87c:	8d0fe0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e880:	07813703          	ld	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1e884:	06813783          	ld	a5,104(sp)
   1e888:	01c7a783          	lw	a5,28(a5)
   1e88c:	02079063          	bne	a5,zero,1e8ac <dwarf::value::as_block(unsigned long*) const+0x20c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1e890:	00174783          	lbu	a5,1(a4)
   1e894:	00879793          	slli	a5,a5,0x8
   1e898:	00074683          	lbu	a3,0(a4)
   1e89c:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   1e8a0:	00270713          	addi	a4,a4,2
   1e8a4:	06e13c23          	sd	a4,120(sp)
  case DW_FORM::block1:
    *size_out = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    *size_out = cur.fixed<uint16_t>();
    break;
   1e8a8:	2b40006f          	jal	zero,1eb5c <dwarf::value::as_block(unsigned long*) const+0x4bc>
        val = (val << 8) | (uint64_t)p[i];
   1e8ac:	00074783          	lbu	a5,0(a4)
   1e8b0:	00879793          	slli	a5,a5,0x8
   1e8b4:	00174683          	lbu	a3,1(a4)
   1e8b8:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1e8bc:	fe5ff06f          	jal	zero,1e8a0 <dwarf::value::as_block(unsigned long*) const+0x200>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1e8c0:	06813783          	ld	a5,104(sp)
   1e8c4:	0107b703          	ld	a4,16(a5)
   1e8c8:	07813783          	ld	a5,120(sp)
   1e8cc:	40f70633          	sub	a2,a4,a5
   1e8d0:	00300693          	addi	a3,zero,3
   1e8d4:	00c6f463          	bgeu	a3,a2,1e8dc <dwarf::value::as_block(unsigned long*) const+0x23c>
   1e8d8:	00e7e663          	bltu	a5,a4,1e8e4 <dwarf::value::as_block(unsigned long*) const+0x244>
      underflow();
   1e8dc:	06810513          	addi	a0,sp,104
   1e8e0:	86cfe0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1e8e4:	07813583          	ld	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1e8e8:	06813783          	ld	a5,104(sp)
   1e8ec:	01c7a783          	lw	a5,28(a5)
   1e8f0:	02079e63          	bne	a5,zero,1e92c <dwarf::value::as_block(unsigned long*) const+0x28c>
   1e8f4:	00058613          	addi	a2,a1,0
   1e8f8:	00000713          	addi	a4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1e8fc:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1e900:	00064683          	lbu	a3,0(a2)
   1e904:	00e696b3          	sll	a3,a3,a4
   1e908:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1e90c:	00160613          	addi	a2,a2,1
   1e910:	0087071b          	addiw	a4,a4,8
   1e914:	fea716e3          	bne	a4,a0,1e900 <dwarf::value::as_block(unsigned long*) const+0x260>
    pos += sizeof(T);
   1e918:	00458593          	addi	a1,a1,4
   1e91c:	06b13c23          	sd	a1,120(sp)
   1e920:	02079793          	slli	a5,a5,0x20
   1e924:	0207d793          	srli	a5,a5,0x20
  case DW_FORM::block4:
    *size_out = cur.fixed<uint32_t>();
    break;
   1e928:	2340006f          	jal	zero,1eb5c <dwarf::value::as_block(unsigned long*) const+0x4bc>
   1e92c:	00058713          	addi	a4,a1,0
   1e930:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1e934:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1e938:	00879793          	slli	a5,a5,0x8
   1e93c:	00074683          	lbu	a3,0(a4)
   1e940:	00f6e7b3          	or	a5,a3,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   1e944:	00170713          	addi	a4,a4,1
   1e948:	fec718e3          	bne	a4,a2,1e938 <dwarf::value::as_block(unsigned long*) const+0x298>
   1e94c:	fcdff06f          	jal	zero,1e918 <dwarf::value::as_block(unsigned long*) const+0x278>
    return 0;
   1e950:	00000793          	addi	a5,zero,0
  case DW_FORM::block:
  case DW_FORM::exprloc:
    *size_out = cur.uleb128();
    break;
   1e954:	2080006f          	jal	zero,1eb5c <dwarf::value::as_block(unsigned long*) const+0x4bc>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1e958:	01000513          	addi	a0,zero,16
   1e95c:	ac5f70ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1e960:	00050913          	addi	s2,a0,0
   1e964:	00c4a583          	lw	a1,12(s1)
   1e968:	00810513          	addi	a0,sp,8
   1e96c:	30c100ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1e970:	00018617          	auipc	a2,0x18
   1e974:	34060613          	addi	a2,a2,832 # 36cb0 <std::piecewise_construct+0x1c8>
   1e978:	00000593          	addi	a1,zero,0
   1e97c:	00810513          	addi	a0,sp,8
   1e980:	a11f70ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e984:	00050593          	addi	a1,a0,0
   1e988:	02810413          	addi	s0,sp,40
   1e98c:	00040513          	addi	a0,s0,0
   1e990:	ae1f70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1e994:	00018597          	auipc	a1,0x18
   1e998:	33c58593          	addi	a1,a1,828 # 36cd0 <std::piecewise_construct+0x1e8>
   1e99c:	00040513          	addi	a0,s0,0
   1e9a0:	e01f70ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1e9a4:	00050593          	addi	a1,a0,0
   1e9a8:	04810413          	addi	s0,sp,72
   1e9ac:	00040513          	addi	a0,s0,0
   1e9b0:	ac1f70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1e9b4:	00040593          	addi	a1,s0,0
   1e9b8:	00090513          	addi	a0,s2,0
   1e9bc:	e35f70ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e9c0:	00024797          	auipc	a5,0x24
   1e9c4:	a887b783          	ld	a5,-1400(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1e9c8:	01078793          	addi	a5,a5,16
   1e9cc:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1e9d0:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1e9d4:	05810793          	addi	a5,sp,88
   1e9d8:	00f50463          	beq	a0,a5,1e9e0 <dwarf::value::as_block(unsigned long*) const+0x340>
   1e9dc:	b35f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e9e0:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1e9e4:	03810793          	addi	a5,sp,56
   1e9e8:	00f50463          	beq	a0,a5,1e9f0 <dwarf::value::as_block(unsigned long*) const+0x350>
   1e9ec:	b25f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e9f0:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1e9f4:	01810793          	addi	a5,sp,24
   1e9f8:	00f50463          	beq	a0,a5,1ea00 <dwarf::value::as_block(unsigned long*) const+0x360>
   1e9fc:	b15f70ef          	jal	ra,16510 <operator delete(void*)@plt>
   1ea00:	00024617          	auipc	a2,0x24
   1ea04:	bd863603          	ld	a2,-1064(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   1ea08:	00024597          	auipc	a1,0x24
   1ea0c:	b905b583          	ld	a1,-1136(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1ea10:	00090513          	addi	a0,s2,0
   1ea14:	cadf70ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1ea18:	00050413          	addi	s0,a0,0
   1ea1c:	1000006f          	jal	zero,1eb1c <dwarf::value::as_block(unsigned long*) const+0x47c>
  }
  cur.ensure(*size_out);
  return cur.pos;
   1ea20:	07813483          	ld	s1,120(sp)
   1ea24:	07013403          	ld	s0,112(sp)
   1ea28:	02040463          	beq	s0,zero,1ea50 <dwarf::value::as_block(unsigned long*) const+0x3b0>
    if (__is_single_threaded())
   1ea2c:	00024797          	auipc	a5,0x24
   1ea30:	a547b783          	ld	a5,-1452(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ea34:	0007c783          	lbu	a5,0(a5)
   1ea38:	02078e63          	beq	a5,zero,1ea74 <dwarf::value::as_block(unsigned long*) const+0x3d4>
    _Atomic_word __result = *__mem;
   1ea3c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1ea40:	fff5079b          	addiw	a5,a0,-1
   1ea44:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ea48:	00100793          	addi	a5,zero,1
   1ea4c:	02f50c63          	beq	a0,a5,1ea84 <dwarf::value::as_block(unsigned long*) const+0x3e4>
}
   1ea50:	00048513          	addi	a0,s1,0
   1ea54:	0a813083          	ld	ra,168(sp)
   1ea58:	0a013403          	ld	s0,160(sp)
   1ea5c:	09813483          	ld	s1,152(sp)
   1ea60:	09013903          	ld	s2,144(sp)
   1ea64:	08813983          	ld	s3,136(sp)
   1ea68:	08013a03          	ld	s4,128(sp)
   1ea6c:	0b010113          	addi	sp,sp,176
   1ea70:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1ea74:	fff00593          	addi	a1,zero,-1
   1ea78:	03040513          	addi	a0,s0,48
   1ea7c:	905f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ea80:	fc9ff06f          	jal	zero,1ea48 <dwarf::value::as_block(unsigned long*) const+0x3a8>
	_M_dispose();
   1ea84:	00043783          	ld	a5,0(s0)
   1ea88:	0107b783          	ld	a5,16(a5)
   1ea8c:	00040513          	addi	a0,s0,0
   1ea90:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ea94:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ea98:	00024797          	auipc	a5,0x24
   1ea9c:	9e87b783          	ld	a5,-1560(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1eaa0:	0007c783          	lbu	a5,0(a5)
   1eaa4:	02078663          	beq	a5,zero,1ead0 <dwarf::value::as_block(unsigned long*) const+0x430>
    _Atomic_word __result = *__mem;
   1eaa8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1eaac:	fff5079b          	addiw	a5,a0,-1
   1eab0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1eab4:	00100793          	addi	a5,zero,1
   1eab8:	f8f51ce3          	bne	a0,a5,1ea50 <dwarf::value::as_block(unsigned long*) const+0x3b0>
	    _M_destroy();
   1eabc:	00043783          	ld	a5,0(s0)
   1eac0:	0187b783          	ld	a5,24(a5)
   1eac4:	00040513          	addi	a0,s0,0
   1eac8:	000780e7          	jalr	ra,0(a5)
  return cur.pos;
   1eacc:	f85ff06f          	jal	zero,1ea50 <dwarf::value::as_block(unsigned long*) const+0x3b0>
      return __exchange_and_add(__mem, __val);
   1ead0:	fff00593          	addi	a1,zero,-1
   1ead4:	03440513          	addi	a0,s0,52
   1ead8:	8a9f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1eadc:	fd9ff06f          	jal	zero,1eab4 <dwarf::value::as_block(unsigned long*) const+0x414>
      { return _M_dataplus._M_p; }
   1eae0:	00050413          	addi	s0,a0,0
   1eae4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1eae8:	05810793          	addi	a5,sp,88
   1eaec:	00f50463          	beq	a0,a5,1eaf4 <dwarf::value::as_block(unsigned long*) const+0x454>
   1eaf0:	a21f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eaf4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1eaf8:	03810793          	addi	a5,sp,56
   1eafc:	00f50463          	beq	a0,a5,1eb04 <dwarf::value::as_block(unsigned long*) const+0x464>
   1eb00:	a11f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eb04:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1eb08:	01810793          	addi	a5,sp,24
   1eb0c:	00f50463          	beq	a0,a5,1eb14 <dwarf::value::as_block(unsigned long*) const+0x474>
   1eb10:	a01f70ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1eb14:	00090513          	addi	a0,s2,0
   1eb18:	9b9f70ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1eb1c:	07013503          	ld	a0,112(sp)
   1eb20:	00050863          	beq	a0,zero,1eb30 <dwarf::value::as_block(unsigned long*) const+0x490>
	  _M_pi->_M_release();
   1eb24:	00024317          	auipc	t1,0x24
   1eb28:	8a433303          	ld	t1,-1884(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1eb2c:	000300e7          	jalr	ra,0(t1)
   1eb30:	00040513          	addi	a0,s0,0
   1eb34:	bbdf70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1eb38:	00050413          	addi	s0,a0,0
   1eb3c:	fb9ff06f          	jal	zero,1eaf4 <dwarf::value::as_block(unsigned long*) const+0x454>
   1eb40:	00050413          	addi	s0,a0,0
   1eb44:	fc1ff06f          	jal	zero,1eb04 <dwarf::value::as_block(unsigned long*) const+0x464>
   1eb48:	00050413          	addi	s0,a0,0
   1eb4c:	fc9ff06f          	jal	zero,1eb14 <dwarf::value::as_block(unsigned long*) const+0x474>
        val |= ((uint64_t)p[i]) << (i * 8);
   1eb50:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   1eb54:	00170713          	addi	a4,a4,1
   1eb58:	06e13c23          	sd	a4,120(sp)
    *size_out = cur.fixed<uint8_t>();
   1eb5c:	00f43023          	sd	a5,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1eb60:	06813703          	ld	a4,104(sp)
   1eb64:	01073683          	ld	a3,16(a4)
   1eb68:	07813703          	ld	a4,120(sp)
   1eb6c:	40e68633          	sub	a2,a3,a4
   1eb70:	00f66463          	bltu	a2,a5,1eb78 <dwarf::value::as_block(unsigned long*) const+0x4d8>
   1eb74:	ead766e3          	bltu	a4,a3,1ea20 <dwarf::value::as_block(unsigned long*) const+0x380>
      underflow();
   1eb78:	06810513          	addi	a0,sp,104
   1eb7c:	dd1fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   1eb80:	ea1ff06f          	jal	zero,1ea20 <dwarf::value::as_block(unsigned long*) const+0x380>
  cursor cur(cu->data(), offset);
   1eb84:	0104b703          	ld	a4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1eb88:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1eb8c:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1eb90:	0089b783          	ld	a5,8(s3)
   1eb94:	00e787b3          	add	a5,a5,a4
   1eb98:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1eb9c:	0084a783          	lw	a5,8(s1)
   1eba0:	ffd7879b          	addiw	a5,a5,-3
   1eba4:	0007869b          	addiw	a3,a5,0
   1eba8:	01500713          	addi	a4,zero,21
   1ebac:	dad766e3          	bltu	a4,a3,1e958 <dwarf::value::as_block(unsigned long*) const+0x2b8>
   1ebb0:	02079713          	slli	a4,a5,0x20
   1ebb4:	01e75793          	srli	a5,a4,0x1e
   1ebb8:	00018717          	auipc	a4,0x18
   1ebbc:	28870713          	addi	a4,a4,648 # 36e40 <std::piecewise_construct+0x358>
   1ebc0:	00e787b3          	add	a5,a5,a4
   1ebc4:	0007a783          	lw	a5,0(a5)
   1ebc8:	00e787b3          	add	a5,a5,a4
   1ebcc:	00078067          	jalr	zero,0(a5)

000000000001ebd0 <dwarf::value::as_uconstant() const>:

uint64_t value::as_uconstant() const {
   1ebd0:	f5010113          	addi	sp,sp,-176
   1ebd4:	0a113423          	sd	ra,168(sp)
   1ebd8:	0a813023          	sd	s0,160(sp)
   1ebdc:	08913c23          	sd	s1,152(sp)
   1ebe0:	09213823          	sd	s2,144(sp)
   1ebe4:	09313423          	sd	s3,136(sp)
   1ebe8:	00050413          	addi	s0,a0,0
  cursor cur(cu->data(), offset);
   1ebec:	00053503          	ld	a0,0(a0)
   1ebf0:	f54f80ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ebf4:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1ebf8:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1ebfc:	50048463          	beq	s1,zero,1f104 <dwarf::value::as_uconstant() const+0x534>
    if (__is_single_threaded())
   1ec00:	00024797          	auipc	a5,0x24
   1ec04:	8807b783          	ld	a5,-1920(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ec08:	0007c783          	lbu	a5,0(a5)
   1ec0c:	0a078a63          	beq	a5,zero,1ecc0 <dwarf::value::as_uconstant() const+0xf0>
  { *__mem += __val; }
   1ec10:	0304a783          	lw	a5,48(s1)
   1ec14:	0017879b          	addiw	a5,a5,1
   1ec18:	02f4a823          	sw	a5,48(s1)
   1ec1c:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ec20:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1ec24:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1ec28:	00024797          	auipc	a5,0x24
   1ec2c:	8587b783          	ld	a5,-1960(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ec30:	0007c783          	lbu	a5,0(a5)
   1ec34:	08078e63          	beq	a5,zero,1ecd0 <dwarf::value::as_uconstant() const+0x100>
  { *__mem += __val; }
   1ec38:	0304a783          	lw	a5,48(s1)
   1ec3c:	0017879b          	addiw	a5,a5,1
   1ec40:	02f4a823          	sw	a5,48(s1)
   1ec44:	00893783          	ld	a5,8(s2)
   1ec48:	013787b3          	add	a5,a5,s3
   1ec4c:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1ec50:	00024797          	auipc	a5,0x24
   1ec54:	8307b783          	ld	a5,-2000(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ec58:	0007c783          	lbu	a5,0(a5)
   1ec5c:	08078263          	beq	a5,zero,1ece0 <dwarf::value::as_uconstant() const+0x110>
    _Atomic_word __result = *__mem;
   1ec60:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1ec64:	fff5079b          	addiw	a5,a0,-1
   1ec68:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ec6c:	00100793          	addi	a5,zero,1
   1ec70:	4af51663          	bne	a0,a5,1f11c <dwarf::value::as_uconstant() const+0x54c>
	_M_dispose();
   1ec74:	0004b783          	ld	a5,0(s1)
   1ec78:	0107b783          	ld	a5,16(a5)
   1ec7c:	00048513          	addi	a0,s1,0
   1ec80:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ec84:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ec88:	00023797          	auipc	a5,0x23
   1ec8c:	7f87b783          	ld	a5,2040(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ec90:	0007c783          	lbu	a5,0(a5)
   1ec94:	04078e63          	beq	a5,zero,1ecf0 <dwarf::value::as_uconstant() const+0x120>
    _Atomic_word __result = *__mem;
   1ec98:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1ec9c:	fff5079b          	addiw	a5,a0,-1
   1eca0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1eca4:	00100793          	addi	a5,zero,1
   1eca8:	46f51a63          	bne	a0,a5,1f11c <dwarf::value::as_uconstant() const+0x54c>
	    _M_destroy();
   1ecac:	0004b783          	ld	a5,0(s1)
   1ecb0:	0187b783          	ld	a5,24(a5)
   1ecb4:	00048513          	addi	a0,s1,0
   1ecb8:	000780e7          	jalr	ra,0(a5)
   1ecbc:	4600006f          	jal	zero,1f11c <dwarf::value::as_uconstant() const+0x54c>
      __atomic_add(__mem, __val);
   1ecc0:	00100593          	addi	a1,zero,1
   1ecc4:	03048513          	addi	a0,s1,48
   1ecc8:	e88f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1eccc:	f51ff06f          	jal	zero,1ec1c <dwarf::value::as_uconstant() const+0x4c>
   1ecd0:	00100593          	addi	a1,zero,1
   1ecd4:	03048513          	addi	a0,s1,48
   1ecd8:	e78f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ecdc:	f69ff06f          	jal	zero,1ec44 <dwarf::value::as_uconstant() const+0x74>
      return __exchange_and_add(__mem, __val);
   1ece0:	fff00593          	addi	a1,zero,-1
   1ece4:	03048513          	addi	a0,s1,48
   1ece8:	e98f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ecec:	f81ff06f          	jal	zero,1ec6c <dwarf::value::as_uconstant() const+0x9c>
   1ecf0:	fff00593          	addi	a1,zero,-1
   1ecf4:	03448513          	addi	a0,s1,52
   1ecf8:	e88f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ecfc:	fa9ff06f          	jal	zero,1eca4 <dwarf::value::as_uconstant() const+0xd4>
    while (pos < sec->end) {
   1ed00:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   1ed04:	06813583          	ld	a1,104(sp)
   1ed08:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   1ed0c:	00000413          	addi	s0,zero,0
    int shift = 0;
   1ed10:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   1ed14:	02e7fa63          	bgeu	a5,a4,1ed48 <dwarf::value::as_uconstant() const+0x178>
      uint8_t byte = *(uint8_t *)(pos++);
   1ed18:	00178793          	addi	a5,a5,1
   1ed1c:	06f13c23          	sd	a5,120(sp)
   1ed20:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1ed24:	07f77693          	andi	a3,a4,127
   1ed28:	00c696b3          	sll	a3,a3,a2
   1ed2c:	00d46433          	or	s0,s0,a3
      if ((byte & 0x80) == 0)
   1ed30:	0187171b          	slliw	a4,a4,0x18
   1ed34:	4187571b          	sraiw	a4,a4,0x18
   1ed38:	38075063          	bge	a4,zero,1f0b8 <dwarf::value::as_uconstant() const+0x4e8>
      shift += 7;
   1ed3c:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   1ed40:	0105b703          	ld	a4,16(a1)
   1ed44:	fce7eae3          	bltu	a5,a4,1ed18 <dwarf::value::as_uconstant() const+0x148>
    underflow();
   1ed48:	06810513          	addi	a0,sp,104
   1ed4c:	c01fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   1ed50:	2780006f          	jal	zero,1efc8 <dwarf::value::as_uconstant() const+0x3f8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ed54:	06813783          	ld	a5,104(sp)
   1ed58:	0107b703          	ld	a4,16(a5)
   1ed5c:	07813783          	ld	a5,120(sp)
   1ed60:	00e7e663          	bltu	a5,a4,1ed6c <dwarf::value::as_uconstant() const+0x19c>
      underflow();
   1ed64:	06810513          	addi	a0,sp,104
   1ed68:	be5fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ed6c:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1ed70:	06813703          	ld	a4,104(sp)
   1ed74:	01c72703          	lw	a4,28(a4)
   1ed78:	32070a63          	beq	a4,zero,1f0ac <dwarf::value::as_uconstant() const+0x4dc>
        val = (val << 8) | (uint64_t)p[i];
   1ed7c:	0007c403          	lbu	s0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1ed80:	3300006f          	jal	zero,1f0b0 <dwarf::value::as_uconstant() const+0x4e0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ed84:	06813783          	ld	a5,104(sp)
   1ed88:	0107b703          	ld	a4,16(a5)
   1ed8c:	07813783          	ld	a5,120(sp)
   1ed90:	40f70633          	sub	a2,a4,a5
   1ed94:	00100693          	addi	a3,zero,1
   1ed98:	00c6f463          	bgeu	a3,a2,1eda0 <dwarf::value::as_uconstant() const+0x1d0>
   1ed9c:	00e7e663          	bltu	a5,a4,1eda8 <dwarf::value::as_uconstant() const+0x1d8>
      underflow();
   1eda0:	06810513          	addi	a0,sp,104
   1eda4:	ba9fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1eda8:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1edac:	06813703          	ld	a4,104(sp)
   1edb0:	01c72703          	lw	a4,28(a4)
   1edb4:	02071063          	bne	a4,zero,1edd4 <dwarf::value::as_uconstant() const+0x204>
        val |= ((uint64_t)p[i]) << (i * 8);
   1edb8:	0017c403          	lbu	s0,1(a5)
   1edbc:	00841413          	slli	s0,s0,0x8
   1edc0:	0007c703          	lbu	a4,0(a5)
   1edc4:	00e46433          	or	s0,s0,a4
    pos += sizeof(T);
   1edc8:	00278793          	addi	a5,a5,2
   1edcc:	06f13c23          	sd	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<uint8_t>();
  case DW_FORM::data2:
    return cur.fixed<uint16_t>();
   1edd0:	2e80006f          	jal	zero,1f0b8 <dwarf::value::as_uconstant() const+0x4e8>
        val = (val << 8) | (uint64_t)p[i];
   1edd4:	0007c403          	lbu	s0,0(a5)
   1edd8:	00841413          	slli	s0,s0,0x8
   1eddc:	0017c703          	lbu	a4,1(a5)
   1ede0:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1ede4:	fe5ff06f          	jal	zero,1edc8 <dwarf::value::as_uconstant() const+0x1f8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ede8:	06813783          	ld	a5,104(sp)
   1edec:	0107b703          	ld	a4,16(a5)
   1edf0:	07813783          	ld	a5,120(sp)
   1edf4:	40f70633          	sub	a2,a4,a5
   1edf8:	00300693          	addi	a3,zero,3
   1edfc:	00c6f463          	bgeu	a3,a2,1ee04 <dwarf::value::as_uconstant() const+0x234>
   1ee00:	00e7e663          	bltu	a5,a4,1ee0c <dwarf::value::as_uconstant() const+0x23c>
      underflow();
   1ee04:	06810513          	addi	a0,sp,104
   1ee08:	b45fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ee0c:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1ee10:	06813783          	ld	a5,104(sp)
   1ee14:	01c7a783          	lw	a5,28(a5)
   1ee18:	02079e63          	bne	a5,zero,1ee54 <dwarf::value::as_uconstant() const+0x284>
   1ee1c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1ee20:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1ee24:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1ee28:	0006c703          	lbu	a4,0(a3)
   1ee2c:	00f71733          	sll	a4,a4,a5
   1ee30:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1ee34:	00168693          	addi	a3,a3,1
   1ee38:	0087879b          	addiw	a5,a5,8
   1ee3c:	feb796e3          	bne	a5,a1,1ee28 <dwarf::value::as_uconstant() const+0x258>
    pos += sizeof(T);
   1ee40:	00460613          	addi	a2,a2,4
   1ee44:	06c13c23          	sd	a2,120(sp)
   1ee48:	02041413          	slli	s0,s0,0x20
   1ee4c:	02045413          	srli	s0,s0,0x20
  case DW_FORM::data4:
    return cur.fixed<uint32_t>();
   1ee50:	2680006f          	jal	zero,1f0b8 <dwarf::value::as_uconstant() const+0x4e8>
   1ee54:	00060793          	addi	a5,a2,0
   1ee58:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1ee5c:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1ee60:	00841413          	slli	s0,s0,0x8
   1ee64:	0007c703          	lbu	a4,0(a5)
   1ee68:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   1ee6c:	00178793          	addi	a5,a5,1
   1ee70:	fef698e3          	bne	a3,a5,1ee60 <dwarf::value::as_uconstant() const+0x290>
   1ee74:	fcdff06f          	jal	zero,1ee40 <dwarf::value::as_uconstant() const+0x270>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ee78:	06813783          	ld	a5,104(sp)
   1ee7c:	0107b703          	ld	a4,16(a5)
   1ee80:	07813783          	ld	a5,120(sp)
   1ee84:	40f70633          	sub	a2,a4,a5
   1ee88:	00700693          	addi	a3,zero,7
   1ee8c:	00c6f463          	bgeu	a3,a2,1ee94 <dwarf::value::as_uconstant() const+0x2c4>
   1ee90:	00e7e663          	bltu	a5,a4,1ee9c <dwarf::value::as_uconstant() const+0x2cc>
      underflow();
   1ee94:	06810513          	addi	a0,sp,104
   1ee98:	ab5fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ee9c:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1eea0:	06813783          	ld	a5,104(sp)
   1eea4:	01c7a783          	lw	a5,28(a5)
   1eea8:	02079a63          	bne	a5,zero,1eedc <dwarf::value::as_uconstant() const+0x30c>
   1eeac:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1eeb0:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1eeb4:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1eeb8:	0006c703          	lbu	a4,0(a3)
   1eebc:	00f71733          	sll	a4,a4,a5
   1eec0:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1eec4:	00168693          	addi	a3,a3,1
   1eec8:	0087879b          	addiw	a5,a5,8
   1eecc:	feb796e3          	bne	a5,a1,1eeb8 <dwarf::value::as_uconstant() const+0x2e8>
    pos += sizeof(T);
   1eed0:	00860613          	addi	a2,a2,8
   1eed4:	06c13c23          	sd	a2,120(sp)
   1eed8:	1e00006f          	jal	zero,1f0b8 <dwarf::value::as_uconstant() const+0x4e8>
   1eedc:	00060793          	addi	a5,a2,0
   1eee0:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1eee4:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1eee8:	00841413          	slli	s0,s0,0x8
   1eeec:	0007c703          	lbu	a4,0(a5)
   1eef0:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   1eef4:	00178793          	addi	a5,a5,1
   1eef8:	fed798e3          	bne	a5,a3,1eee8 <dwarf::value::as_uconstant() const+0x318>
   1eefc:	fd5ff06f          	jal	zero,1eed0 <dwarf::value::as_uconstant() const+0x300>
    return cur.fixed<uint64_t>();
  case DW_FORM::udata:
    return cur.uleb128();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as uconstant");
   1ef00:	01000513          	addi	a0,zero,16
   1ef04:	d1cf70ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1ef08:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1ef0c:	00c42583          	lw	a1,12(s0)
   1ef10:	00810513          	addi	a0,sp,8
   1ef14:	5650f0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1ef18:	00018617          	auipc	a2,0x18
   1ef1c:	d9860613          	addi	a2,a2,-616 # 36cb0 <std::piecewise_construct+0x1c8>
   1ef20:	00000593          	addi	a1,zero,0
   1ef24:	00810513          	addi	a0,sp,8
   1ef28:	c68f70ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ef2c:	00050593          	addi	a1,a0,0
   1ef30:	02810413          	addi	s0,sp,40
   1ef34:	00040513          	addi	a0,s0,0
   1ef38:	d38f70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1ef3c:	00018597          	auipc	a1,0x18
   1ef40:	da458593          	addi	a1,a1,-604 # 36ce0 <std::piecewise_construct+0x1f8>
   1ef44:	00040513          	addi	a0,s0,0
   1ef48:	859f70ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1ef4c:	00050593          	addi	a1,a0,0
   1ef50:	04810413          	addi	s0,sp,72
   1ef54:	00040513          	addi	a0,s0,0
   1ef58:	d18f70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1ef5c:	00040593          	addi	a1,s0,0
   1ef60:	00048513          	addi	a0,s1,0
   1ef64:	88df70ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ef68:	00023797          	auipc	a5,0x23
   1ef6c:	4e07b783          	ld	a5,1248(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1ef70:	01078793          	addi	a5,a5,16
   1ef74:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1ef78:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1ef7c:	05810793          	addi	a5,sp,88
   1ef80:	00f50463          	beq	a0,a5,1ef88 <dwarf::value::as_uconstant() const+0x3b8>
   1ef84:	d8cf70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ef88:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1ef8c:	03810793          	addi	a5,sp,56
   1ef90:	00f50463          	beq	a0,a5,1ef98 <dwarf::value::as_uconstant() const+0x3c8>
   1ef94:	d7cf70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ef98:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1ef9c:	01810793          	addi	a5,sp,24
   1efa0:	00f50463          	beq	a0,a5,1efa8 <dwarf::value::as_uconstant() const+0x3d8>
   1efa4:	d6cf70ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as uconstant");
   1efa8:	00023617          	auipc	a2,0x23
   1efac:	63063603          	ld	a2,1584(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   1efb0:	00023597          	auipc	a1,0x23
   1efb4:	5e85b583          	ld	a1,1512(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1efb8:	00048513          	addi	a0,s1,0
   1efbc:	f04f70ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1efc0:	00050413          	addi	s0,a0,0
   1efc4:	0b40006f          	jal	zero,1f078 <dwarf::value::as_uconstant() const+0x4a8>
    return 0;
   1efc8:	00000413          	addi	s0,zero,0
   1efcc:	0ec0006f          	jal	zero,1f0b8 <dwarf::value::as_uconstant() const+0x4e8>
   1efd0:	fff00593          	addi	a1,zero,-1
   1efd4:	03048513          	addi	a0,s1,48
   1efd8:	ba8f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1efdc:	1000006f          	jal	zero,1f0dc <dwarf::value::as_uconstant() const+0x50c>
	_M_dispose();
   1efe0:	0004b783          	ld	a5,0(s1)
   1efe4:	0107b783          	ld	a5,16(a5)
   1efe8:	00048513          	addi	a0,s1,0
   1efec:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1eff0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1eff4:	00023797          	auipc	a5,0x23
   1eff8:	48c7b783          	ld	a5,1164(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1effc:	0007c783          	lbu	a5,0(a5)
   1f000:	02078663          	beq	a5,zero,1f02c <dwarf::value::as_uconstant() const+0x45c>
    _Atomic_word __result = *__mem;
   1f004:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f008:	fff5079b          	addiw	a5,a0,-1
   1f00c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f010:	00100793          	addi	a5,zero,1
   1f014:	0cf51863          	bne	a0,a5,1f0e4 <dwarf::value::as_uconstant() const+0x514>
	    _M_destroy();
   1f018:	0004b783          	ld	a5,0(s1)
   1f01c:	0187b783          	ld	a5,24(a5)
   1f020:	00048513          	addi	a0,s1,0
   1f024:	000780e7          	jalr	ra,0(a5)
   1f028:	0bc0006f          	jal	zero,1f0e4 <dwarf::value::as_uconstant() const+0x514>
      return __exchange_and_add(__mem, __val);
   1f02c:	fff00593          	addi	a1,zero,-1
   1f030:	03448513          	addi	a0,s1,52
   1f034:	b4cf70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f038:	fd9ff06f          	jal	zero,1f010 <dwarf::value::as_uconstant() const+0x440>
      { return _M_dataplus._M_p; }
   1f03c:	00050413          	addi	s0,a0,0
   1f040:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f044:	05810793          	addi	a5,sp,88
   1f048:	00f50463          	beq	a0,a5,1f050 <dwarf::value::as_uconstant() const+0x480>
   1f04c:	cc4f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f050:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f054:	03810793          	addi	a5,sp,56
   1f058:	00f50463          	beq	a0,a5,1f060 <dwarf::value::as_uconstant() const+0x490>
   1f05c:	cb4f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f060:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f064:	01810793          	addi	a5,sp,24
   1f068:	00f50463          	beq	a0,a5,1f070 <dwarf::value::as_uconstant() const+0x4a0>
   1f06c:	ca4f70ef          	jal	ra,16510 <operator delete(void*)@plt>
   1f070:	00048513          	addi	a0,s1,0
   1f074:	c5cf70ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1f078:	07013503          	ld	a0,112(sp)
   1f07c:	00050863          	beq	a0,zero,1f08c <dwarf::value::as_uconstant() const+0x4bc>
	  _M_pi->_M_release();
   1f080:	00023317          	auipc	t1,0x23
   1f084:	34833303          	ld	t1,840(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1f088:	000300e7          	jalr	ra,0(t1)
   1f08c:	00040513          	addi	a0,s0,0
   1f090:	e60f70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f094:	00050413          	addi	s0,a0,0
   1f098:	fb9ff06f          	jal	zero,1f050 <dwarf::value::as_uconstant() const+0x480>
   1f09c:	00050413          	addi	s0,a0,0
   1f0a0:	fc1ff06f          	jal	zero,1f060 <dwarf::value::as_uconstant() const+0x490>
   1f0a4:	00050413          	addi	s0,a0,0
   1f0a8:	fc9ff06f          	jal	zero,1f070 <dwarf::value::as_uconstant() const+0x4a0>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f0ac:	0007c403          	lbu	s0,0(a5)
    pos += sizeof(T);
   1f0b0:	00178793          	addi	a5,a5,1
   1f0b4:	06f13c23          	sd	a5,120(sp)
	if (_M_pi != nullptr)
   1f0b8:	07013483          	ld	s1,112(sp)
   1f0bc:	02048463          	beq	s1,zero,1f0e4 <dwarf::value::as_uconstant() const+0x514>
    if (__is_single_threaded())
   1f0c0:	00023797          	auipc	a5,0x23
   1f0c4:	3c07b783          	ld	a5,960(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f0c8:	0007c783          	lbu	a5,0(a5)
   1f0cc:	f00782e3          	beq	a5,zero,1efd0 <dwarf::value::as_uconstant() const+0x400>
    _Atomic_word __result = *__mem;
   1f0d0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f0d4:	fff5079b          	addiw	a5,a0,-1
   1f0d8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f0dc:	00100793          	addi	a5,zero,1
   1f0e0:	f0f500e3          	beq	a0,a5,1efe0 <dwarf::value::as_uconstant() const+0x410>
  }
}
   1f0e4:	00040513          	addi	a0,s0,0
   1f0e8:	0a813083          	ld	ra,168(sp)
   1f0ec:	0a013403          	ld	s0,160(sp)
   1f0f0:	09813483          	ld	s1,152(sp)
   1f0f4:	09013903          	ld	s2,144(sp)
   1f0f8:	08813983          	ld	s3,136(sp)
   1f0fc:	0b010113          	addi	sp,sp,176
   1f100:	00008067          	jalr	zero,0(ra)
  cursor cur(cu->data(), offset);
   1f104:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f108:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f10c:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1f110:	00893783          	ld	a5,8(s2)
   1f114:	00e787b3          	add	a5,a5,a4
   1f118:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1f11c:	00842783          	lw	a5,8(s0)
   1f120:	ffb7879b          	addiw	a5,a5,-5
   1f124:	0007869b          	addiw	a3,a5,0
   1f128:	00a00713          	addi	a4,zero,10
   1f12c:	dcd76ae3          	bltu	a4,a3,1ef00 <dwarf::value::as_uconstant() const+0x330>
   1f130:	02079713          	slli	a4,a5,0x20
   1f134:	01e75793          	srli	a5,a4,0x1e
   1f138:	00018717          	auipc	a4,0x18
   1f13c:	d6070713          	addi	a4,a4,-672 # 36e98 <std::piecewise_construct+0x3b0>
   1f140:	00e787b3          	add	a5,a5,a4
   1f144:	0007a783          	lw	a5,0(a5)
   1f148:	00e787b3          	add	a5,a5,a4
   1f14c:	00078067          	jalr	zero,0(a5)

000000000001f150 <dwarf::value::as_sconstant() const>:

int64_t value::as_sconstant() const {
   1f150:	f5010113          	addi	sp,sp,-176
   1f154:	0a113423          	sd	ra,168(sp)
   1f158:	0a813023          	sd	s0,160(sp)
   1f15c:	08913c23          	sd	s1,152(sp)
   1f160:	09213823          	sd	s2,144(sp)
   1f164:	09313423          	sd	s3,136(sp)
   1f168:	00050413          	addi	s0,a0,0
  cursor cur(cu->data(), offset);
   1f16c:	00053503          	ld	a0,0(a0)
   1f170:	9d4f80ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f174:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1f178:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1f17c:	4c048663          	beq	s1,zero,1f648 <dwarf::value::as_sconstant() const+0x4f8>
    if (__is_single_threaded())
   1f180:	00023797          	auipc	a5,0x23
   1f184:	3007b783          	ld	a5,768(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f188:	0007c783          	lbu	a5,0(a5)
   1f18c:	0a078a63          	beq	a5,zero,1f240 <dwarf::value::as_sconstant() const+0xf0>
  { *__mem += __val; }
   1f190:	0304a783          	lw	a5,48(s1)
   1f194:	0017879b          	addiw	a5,a5,1
   1f198:	02f4a823          	sw	a5,48(s1)
   1f19c:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f1a0:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f1a4:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1f1a8:	00023797          	auipc	a5,0x23
   1f1ac:	2d87b783          	ld	a5,728(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f1b0:	0007c783          	lbu	a5,0(a5)
   1f1b4:	08078e63          	beq	a5,zero,1f250 <dwarf::value::as_sconstant() const+0x100>
  { *__mem += __val; }
   1f1b8:	0304a783          	lw	a5,48(s1)
   1f1bc:	0017879b          	addiw	a5,a5,1
   1f1c0:	02f4a823          	sw	a5,48(s1)
   1f1c4:	00893783          	ld	a5,8(s2)
   1f1c8:	013787b3          	add	a5,a5,s3
   1f1cc:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1f1d0:	00023797          	auipc	a5,0x23
   1f1d4:	2b07b783          	ld	a5,688(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f1d8:	0007c783          	lbu	a5,0(a5)
   1f1dc:	08078263          	beq	a5,zero,1f260 <dwarf::value::as_sconstant() const+0x110>
    _Atomic_word __result = *__mem;
   1f1e0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f1e4:	fff5079b          	addiw	a5,a0,-1
   1f1e8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f1ec:	00100793          	addi	a5,zero,1
   1f1f0:	46f51863          	bne	a0,a5,1f660 <dwarf::value::as_sconstant() const+0x510>
	_M_dispose();
   1f1f4:	0004b783          	ld	a5,0(s1)
   1f1f8:	0107b783          	ld	a5,16(a5)
   1f1fc:	00048513          	addi	a0,s1,0
   1f200:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f204:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f208:	00023797          	auipc	a5,0x23
   1f20c:	2787b783          	ld	a5,632(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f210:	0007c783          	lbu	a5,0(a5)
   1f214:	04078e63          	beq	a5,zero,1f270 <dwarf::value::as_sconstant() const+0x120>
    _Atomic_word __result = *__mem;
   1f218:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f21c:	fff5079b          	addiw	a5,a0,-1
   1f220:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f224:	00100793          	addi	a5,zero,1
   1f228:	42f51c63          	bne	a0,a5,1f660 <dwarf::value::as_sconstant() const+0x510>
	    _M_destroy();
   1f22c:	0004b783          	ld	a5,0(s1)
   1f230:	0187b783          	ld	a5,24(a5)
   1f234:	00048513          	addi	a0,s1,0
   1f238:	000780e7          	jalr	ra,0(a5)
   1f23c:	4240006f          	jal	zero,1f660 <dwarf::value::as_sconstant() const+0x510>
      __atomic_add(__mem, __val);
   1f240:	00100593          	addi	a1,zero,1
   1f244:	03048513          	addi	a0,s1,48
   1f248:	908f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f24c:	f51ff06f          	jal	zero,1f19c <dwarf::value::as_sconstant() const+0x4c>
   1f250:	00100593          	addi	a1,zero,1
   1f254:	03048513          	addi	a0,s1,48
   1f258:	8f8f70ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f25c:	f69ff06f          	jal	zero,1f1c4 <dwarf::value::as_sconstant() const+0x74>
      return __exchange_and_add(__mem, __val);
   1f260:	fff00593          	addi	a1,zero,-1
   1f264:	03048513          	addi	a0,s1,48
   1f268:	918f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f26c:	f81ff06f          	jal	zero,1f1ec <dwarf::value::as_sconstant() const+0x9c>
   1f270:	fff00593          	addi	a1,zero,-1
   1f274:	03448513          	addi	a0,s1,52
   1f278:	908f70ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f27c:	fa9ff06f          	jal	zero,1f224 <dwarf::value::as_sconstant() const+0xd4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f280:	06813783          	ld	a5,104(sp)
   1f284:	0107b703          	ld	a4,16(a5)
   1f288:	07813783          	ld	a5,120(sp)
   1f28c:	00e7e663          	bltu	a5,a4,1f298 <dwarf::value::as_sconstant() const+0x148>
      underflow();
   1f290:	06810513          	addi	a0,sp,104
   1f294:	eb8fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f298:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f29c:	06813703          	ld	a4,104(sp)
   1f2a0:	01c72703          	lw	a4,28(a4)
   1f2a4:	34070263          	beq	a4,zero,1f5e8 <dwarf::value::as_sconstant() const+0x498>
        val = (val << 8) | (uint64_t)p[i];
   1f2a8:	0007c503          	lbu	a0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1f2ac:	3400006f          	jal	zero,1f5ec <dwarf::value::as_sconstant() const+0x49c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f2b0:	06813783          	ld	a5,104(sp)
   1f2b4:	0107b703          	ld	a4,16(a5)
   1f2b8:	07813783          	ld	a5,120(sp)
   1f2bc:	40f70633          	sub	a2,a4,a5
   1f2c0:	00100693          	addi	a3,zero,1
   1f2c4:	00c6f463          	bgeu	a3,a2,1f2cc <dwarf::value::as_sconstant() const+0x17c>
   1f2c8:	00e7e663          	bltu	a5,a4,1f2d4 <dwarf::value::as_sconstant() const+0x184>
      underflow();
   1f2cc:	06810513          	addi	a0,sp,104
   1f2d0:	e7cfd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f2d4:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f2d8:	06813703          	ld	a4,104(sp)
   1f2dc:	01c72703          	lw	a4,28(a4)
   1f2e0:	02071463          	bne	a4,zero,1f308 <dwarf::value::as_sconstant() const+0x1b8>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f2e4:	0017c503          	lbu	a0,1(a5)
   1f2e8:	00851513          	slli	a0,a0,0x8
   1f2ec:	0007c703          	lbu	a4,0(a5)
   1f2f0:	00e56533          	or	a0,a0,a4
    pos += sizeof(T);
   1f2f4:	00278793          	addi	a5,a5,2
   1f2f8:	06f13c23          	sd	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<int8_t>();
  case DW_FORM::data2:
    return cur.fixed<int16_t>();
   1f2fc:	0105141b          	slliw	s0,a0,0x10
   1f300:	4104541b          	sraiw	s0,s0,0x10
   1f304:	2f80006f          	jal	zero,1f5fc <dwarf::value::as_sconstant() const+0x4ac>
        val = (val << 8) | (uint64_t)p[i];
   1f308:	0007c503          	lbu	a0,0(a5)
   1f30c:	00851513          	slli	a0,a0,0x8
   1f310:	0017c703          	lbu	a4,1(a5)
   1f314:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f318:	fddff06f          	jal	zero,1f2f4 <dwarf::value::as_sconstant() const+0x1a4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f31c:	06813783          	ld	a5,104(sp)
   1f320:	0107b703          	ld	a4,16(a5)
   1f324:	07813783          	ld	a5,120(sp)
   1f328:	40f70633          	sub	a2,a4,a5
   1f32c:	00300693          	addi	a3,zero,3
   1f330:	00c6f463          	bgeu	a3,a2,1f338 <dwarf::value::as_sconstant() const+0x1e8>
   1f334:	00e7e663          	bltu	a5,a4,1f340 <dwarf::value::as_sconstant() const+0x1f0>
      underflow();
   1f338:	06810513          	addi	a0,sp,104
   1f33c:	e10fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f340:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f344:	06813783          	ld	a5,104(sp)
   1f348:	01c7a783          	lw	a5,28(a5)
   1f34c:	02079c63          	bne	a5,zero,1f384 <dwarf::value::as_sconstant() const+0x234>
   1f350:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1f354:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f358:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1f35c:	0006c703          	lbu	a4,0(a3)
   1f360:	00f71733          	sll	a4,a4,a5
   1f364:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f368:	00168693          	addi	a3,a3,1
   1f36c:	0087879b          	addiw	a5,a5,8
   1f370:	feb796e3          	bne	a5,a1,1f35c <dwarf::value::as_sconstant() const+0x20c>
    pos += sizeof(T);
   1f374:	00460613          	addi	a2,a2,4
   1f378:	06c13c23          	sd	a2,120(sp)
  case DW_FORM::data4:
    return cur.fixed<int32_t>();
   1f37c:	0005041b          	addiw	s0,a0,0
   1f380:	27c0006f          	jal	zero,1f5fc <dwarf::value::as_sconstant() const+0x4ac>
   1f384:	00060793          	addi	a5,a2,0
   1f388:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1f38c:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f390:	00851513          	slli	a0,a0,0x8
   1f394:	0007c703          	lbu	a4,0(a5)
   1f398:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f39c:	00178793          	addi	a5,a5,1
   1f3a0:	fef698e3          	bne	a3,a5,1f390 <dwarf::value::as_sconstant() const+0x240>
   1f3a4:	fd1ff06f          	jal	zero,1f374 <dwarf::value::as_sconstant() const+0x224>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f3a8:	06813783          	ld	a5,104(sp)
   1f3ac:	0107b703          	ld	a4,16(a5)
   1f3b0:	07813783          	ld	a5,120(sp)
   1f3b4:	40f70633          	sub	a2,a4,a5
   1f3b8:	00700693          	addi	a3,zero,7
   1f3bc:	00c6f463          	bgeu	a3,a2,1f3c4 <dwarf::value::as_sconstant() const+0x274>
   1f3c0:	00e7e663          	bltu	a5,a4,1f3cc <dwarf::value::as_sconstant() const+0x27c>
      underflow();
   1f3c4:	06810513          	addi	a0,sp,104
   1f3c8:	d84fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f3cc:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f3d0:	06813783          	ld	a5,104(sp)
   1f3d4:	01c7a783          	lw	a5,28(a5)
   1f3d8:	02079c63          	bne	a5,zero,1f410 <dwarf::value::as_sconstant() const+0x2c0>
   1f3dc:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   1f3e0:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f3e4:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1f3e8:	0006c703          	lbu	a4,0(a3)
   1f3ec:	00f71733          	sll	a4,a4,a5
   1f3f0:	00e56533          	or	a0,a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f3f4:	00168693          	addi	a3,a3,1
   1f3f8:	0087879b          	addiw	a5,a5,8
   1f3fc:	feb796e3          	bne	a5,a1,1f3e8 <dwarf::value::as_sconstant() const+0x298>
    pos += sizeof(T);
   1f400:	00860613          	addi	a2,a2,8
   1f404:	06c13c23          	sd	a2,120(sp)
    return (T)val;
   1f408:	00050413          	addi	s0,a0,0
   1f40c:	1f00006f          	jal	zero,1f5fc <dwarf::value::as_sconstant() const+0x4ac>
   1f410:	00060793          	addi	a5,a2,0
   1f414:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1f418:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f41c:	00851513          	slli	a0,a0,0x8
   1f420:	0007c703          	lbu	a4,0(a5)
   1f424:	00a76533          	or	a0,a4,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f428:	00178793          	addi	a5,a5,1
   1f42c:	fed798e3          	bne	a5,a3,1f41c <dwarf::value::as_sconstant() const+0x2cc>
   1f430:	fd1ff06f          	jal	zero,1f400 <dwarf::value::as_sconstant() const+0x2b0>
  case DW_FORM::data8:
    return cur.fixed<int64_t>();
  case DW_FORM::sdata:
    return cur.sleb128();
   1f434:	06810513          	addi	a0,sp,104
   1f438:	d68fd0ef          	jal	ra,1c9a0 <dwarf::cursor::sleb128()>
   1f43c:	00050413          	addi	s0,a0,0
   1f440:	1bc0006f          	jal	zero,1f5fc <dwarf::value::as_sconstant() const+0x4ac>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sconstant");
   1f444:	01000513          	addi	a0,zero,16
   1f448:	fd9f60ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1f44c:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1f450:	00c42583          	lw	a1,12(s0)
   1f454:	00810513          	addi	a0,sp,8
   1f458:	0210f0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f45c:	00018617          	auipc	a2,0x18
   1f460:	85460613          	addi	a2,a2,-1964 # 36cb0 <std::piecewise_construct+0x1c8>
   1f464:	00000593          	addi	a1,zero,0
   1f468:	00810513          	addi	a0,sp,8
   1f46c:	f25f60ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f470:	00050593          	addi	a1,a0,0
   1f474:	02810413          	addi	s0,sp,40
   1f478:	00040513          	addi	a0,s0,0
   1f47c:	ff5f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f480:	00018597          	auipc	a1,0x18
   1f484:	87058593          	addi	a1,a1,-1936 # 36cf0 <std::piecewise_construct+0x208>
   1f488:	00040513          	addi	a0,s0,0
   1f48c:	b14f70ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f490:	00050593          	addi	a1,a0,0
   1f494:	04810413          	addi	s0,sp,72
   1f498:	00040513          	addi	a0,s0,0
   1f49c:	fd5f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1f4a0:	00040593          	addi	a1,s0,0
   1f4a4:	00048513          	addi	a0,s1,0
   1f4a8:	b48f70ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f4ac:	00023797          	auipc	a5,0x23
   1f4b0:	f9c7b783          	ld	a5,-100(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1f4b4:	01078793          	addi	a5,a5,16
   1f4b8:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1f4bc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f4c0:	05810793          	addi	a5,sp,88
   1f4c4:	00f50463          	beq	a0,a5,1f4cc <dwarf::value::as_sconstant() const+0x37c>
   1f4c8:	848f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f4cc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f4d0:	03810793          	addi	a5,sp,56
   1f4d4:	00f50463          	beq	a0,a5,1f4dc <dwarf::value::as_sconstant() const+0x38c>
   1f4d8:	838f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f4dc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f4e0:	01810793          	addi	a5,sp,24
   1f4e4:	00f50463          	beq	a0,a5,1f4ec <dwarf::value::as_sconstant() const+0x39c>
   1f4e8:	828f70ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as sconstant");
   1f4ec:	00023617          	auipc	a2,0x23
   1f4f0:	0ec63603          	ld	a2,236(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   1f4f4:	00023597          	auipc	a1,0x23
   1f4f8:	0a45b583          	ld	a1,164(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1f4fc:	00048513          	addi	a0,s1,0
   1f500:	9c0f70ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1f504:	00050413          	addi	s0,a0,0
   1f508:	0ac0006f          	jal	zero,1f5b4 <dwarf::value::as_sconstant() const+0x464>
   1f50c:	fff00593          	addi	a1,zero,-1
   1f510:	03048513          	addi	a0,s1,48
   1f514:	e6df60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f518:	1080006f          	jal	zero,1f620 <dwarf::value::as_sconstant() const+0x4d0>
	_M_dispose();
   1f51c:	0004b783          	ld	a5,0(s1)
   1f520:	0107b783          	ld	a5,16(a5)
   1f524:	00048513          	addi	a0,s1,0
   1f528:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f52c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f530:	00023797          	auipc	a5,0x23
   1f534:	f507b783          	ld	a5,-176(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f538:	0007c783          	lbu	a5,0(a5)
   1f53c:	02078663          	beq	a5,zero,1f568 <dwarf::value::as_sconstant() const+0x418>
    _Atomic_word __result = *__mem;
   1f540:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1f544:	fff5079b          	addiw	a5,a0,-1
   1f548:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f54c:	00100793          	addi	a5,zero,1
   1f550:	0cf51c63          	bne	a0,a5,1f628 <dwarf::value::as_sconstant() const+0x4d8>
	    _M_destroy();
   1f554:	0004b783          	ld	a5,0(s1)
   1f558:	0187b783          	ld	a5,24(a5)
   1f55c:	00048513          	addi	a0,s1,0
   1f560:	000780e7          	jalr	ra,0(a5)
   1f564:	0c40006f          	jal	zero,1f628 <dwarf::value::as_sconstant() const+0x4d8>
      return __exchange_and_add(__mem, __val);
   1f568:	fff00593          	addi	a1,zero,-1
   1f56c:	03448513          	addi	a0,s1,52
   1f570:	e11f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f574:	fd9ff06f          	jal	zero,1f54c <dwarf::value::as_sconstant() const+0x3fc>
      { return _M_dataplus._M_p; }
   1f578:	00050413          	addi	s0,a0,0
   1f57c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f580:	05810793          	addi	a5,sp,88
   1f584:	00f50463          	beq	a0,a5,1f58c <dwarf::value::as_sconstant() const+0x43c>
   1f588:	f89f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f58c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f590:	03810793          	addi	a5,sp,56
   1f594:	00f50463          	beq	a0,a5,1f59c <dwarf::value::as_sconstant() const+0x44c>
   1f598:	f79f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f59c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f5a0:	01810793          	addi	a5,sp,24
   1f5a4:	00f50463          	beq	a0,a5,1f5ac <dwarf::value::as_sconstant() const+0x45c>
   1f5a8:	f69f60ef          	jal	ra,16510 <operator delete(void*)@plt>
   1f5ac:	00048513          	addi	a0,s1,0
   1f5b0:	f21f60ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1f5b4:	07013503          	ld	a0,112(sp)
   1f5b8:	00050863          	beq	a0,zero,1f5c8 <dwarf::value::as_sconstant() const+0x478>
	  _M_pi->_M_release();
   1f5bc:	00023317          	auipc	t1,0x23
   1f5c0:	e0c33303          	ld	t1,-500(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1f5c4:	000300e7          	jalr	ra,0(t1)
   1f5c8:	00040513          	addi	a0,s0,0
   1f5cc:	924f70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f5d0:	00050413          	addi	s0,a0,0
   1f5d4:	fb9ff06f          	jal	zero,1f58c <dwarf::value::as_sconstant() const+0x43c>
   1f5d8:	00050413          	addi	s0,a0,0
   1f5dc:	fc1ff06f          	jal	zero,1f59c <dwarf::value::as_sconstant() const+0x44c>
   1f5e0:	00050413          	addi	s0,a0,0
   1f5e4:	fc9ff06f          	jal	zero,1f5ac <dwarf::value::as_sconstant() const+0x45c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f5e8:	0007c503          	lbu	a0,0(a5)
    pos += sizeof(T);
   1f5ec:	00178793          	addi	a5,a5,1
   1f5f0:	06f13c23          	sd	a5,120(sp)
    return cur.fixed<int8_t>();
   1f5f4:	0185141b          	slliw	s0,a0,0x18
   1f5f8:	4184541b          	sraiw	s0,s0,0x18
	if (_M_pi != nullptr)
   1f5fc:	07013483          	ld	s1,112(sp)
   1f600:	02048463          	beq	s1,zero,1f628 <dwarf::value::as_sconstant() const+0x4d8>
    if (__is_single_threaded())
   1f604:	00023797          	auipc	a5,0x23
   1f608:	e7c7b783          	ld	a5,-388(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f60c:	0007c783          	lbu	a5,0(a5)
   1f610:	ee078ee3          	beq	a5,zero,1f50c <dwarf::value::as_sconstant() const+0x3bc>
    _Atomic_word __result = *__mem;
   1f614:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1f618:	fff5079b          	addiw	a5,a0,-1
   1f61c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f620:	00100793          	addi	a5,zero,1
   1f624:	eef50ce3          	beq	a0,a5,1f51c <dwarf::value::as_sconstant() const+0x3cc>
  }
}
   1f628:	00040513          	addi	a0,s0,0
   1f62c:	0a813083          	ld	ra,168(sp)
   1f630:	0a013403          	ld	s0,160(sp)
   1f634:	09813483          	ld	s1,152(sp)
   1f638:	09013903          	ld	s2,144(sp)
   1f63c:	08813983          	ld	s3,136(sp)
   1f640:	0b010113          	addi	sp,sp,176
   1f644:	00008067          	jalr	zero,0(ra)
  cursor cur(cu->data(), offset);
   1f648:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f64c:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   1f650:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1f654:	00893783          	ld	a5,8(s2)
   1f658:	00e787b3          	add	a5,a5,a4
   1f65c:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1f660:	00842783          	lw	a5,8(s0)
   1f664:	ffb7879b          	addiw	a5,a5,-5
   1f668:	0007869b          	addiw	a3,a5,0
   1f66c:	00800713          	addi	a4,zero,8
   1f670:	dcd76ae3          	bltu	a4,a3,1f444 <dwarf::value::as_sconstant() const+0x2f4>
   1f674:	02079713          	slli	a4,a5,0x20
   1f678:	01e75793          	srli	a5,a4,0x1e
   1f67c:	00018717          	auipc	a4,0x18
   1f680:	84870713          	addi	a4,a4,-1976 # 36ec4 <std::piecewise_construct+0x3dc>
   1f684:	00e787b3          	add	a5,a5,a4
   1f688:	0007a783          	lw	a5,0(a5)
   1f68c:	00e787b3          	add	a5,a5,a4
   1f690:	00078067          	jalr	zero,0(a5)

000000000001f694 <dwarf::value::as_exprloc() const>:

expr value::as_exprloc() const {
   1f694:	f5010113          	addi	sp,sp,-176
   1f698:	0a113423          	sd	ra,168(sp)
   1f69c:	0a813023          	sd	s0,160(sp)
   1f6a0:	08913c23          	sd	s1,152(sp)
   1f6a4:	09213823          	sd	s2,144(sp)
   1f6a8:	09313423          	sd	s3,136(sp)
   1f6ac:	09413023          	sd	s4,128(sp)
   1f6b0:	00050493          	addi	s1,a0,0
   1f6b4:	00058413          	addi	s0,a1,0
  cursor cur(cu->data(), offset);
   1f6b8:	0005b503          	ld	a0,0(a1)
   1f6bc:	c89f70ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f6c0:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1f6c4:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1f6c8:	4a090263          	beq	s2,zero,1fb6c <dwarf::value::as_exprloc() const+0x4d8>
    if (__is_single_threaded())
   1f6cc:	00023797          	auipc	a5,0x23
   1f6d0:	db47b783          	ld	a5,-588(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f6d4:	0007c783          	lbu	a5,0(a5)
   1f6d8:	0a078a63          	beq	a5,zero,1f78c <dwarf::value::as_exprloc() const+0xf8>
  { *__mem += __val; }
   1f6dc:	03092783          	lw	a5,48(s2)
   1f6e0:	0017879b          	addiw	a5,a5,1
   1f6e4:	02f92823          	sw	a5,48(s2)
   1f6e8:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1f6ec:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1f6f0:	07213823          	sd	s2,112(sp)
    if (__is_single_threaded())
   1f6f4:	00023797          	auipc	a5,0x23
   1f6f8:	d8c7b783          	ld	a5,-628(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f6fc:	0007c783          	lbu	a5,0(a5)
   1f700:	08078e63          	beq	a5,zero,1f79c <dwarf::value::as_exprloc() const+0x108>
  { *__mem += __val; }
   1f704:	03092783          	lw	a5,48(s2)
   1f708:	0017879b          	addiw	a5,a5,1
   1f70c:	02f92823          	sw	a5,48(s2)
   1f710:	0089b783          	ld	a5,8(s3)
   1f714:	014787b3          	add	a5,a5,s4
   1f718:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1f71c:	00023797          	auipc	a5,0x23
   1f720:	d647b783          	ld	a5,-668(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f724:	0007c783          	lbu	a5,0(a5)
   1f728:	08078263          	beq	a5,zero,1f7ac <dwarf::value::as_exprloc() const+0x118>
    _Atomic_word __result = *__mem;
   1f72c:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1f730:	fff5079b          	addiw	a5,a0,-1
   1f734:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1f738:	00100793          	addi	a5,zero,1
   1f73c:	44f51463          	bne	a0,a5,1fb84 <dwarf::value::as_exprloc() const+0x4f0>
	_M_dispose();
   1f740:	00093783          	ld	a5,0(s2)
   1f744:	0107b783          	ld	a5,16(a5)
   1f748:	00090513          	addi	a0,s2,0
   1f74c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1f750:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1f754:	00023797          	auipc	a5,0x23
   1f758:	d2c7b783          	ld	a5,-724(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1f75c:	0007c783          	lbu	a5,0(a5)
   1f760:	04078e63          	beq	a5,zero,1f7bc <dwarf::value::as_exprloc() const+0x128>
    _Atomic_word __result = *__mem;
   1f764:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1f768:	fff5079b          	addiw	a5,a0,-1
   1f76c:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1f770:	00100793          	addi	a5,zero,1
   1f774:	40f51863          	bne	a0,a5,1fb84 <dwarf::value::as_exprloc() const+0x4f0>
	    _M_destroy();
   1f778:	00093783          	ld	a5,0(s2)
   1f77c:	0187b783          	ld	a5,24(a5)
   1f780:	00090513          	addi	a0,s2,0
   1f784:	000780e7          	jalr	ra,0(a5)
   1f788:	3fc0006f          	jal	zero,1fb84 <dwarf::value::as_exprloc() const+0x4f0>
      __atomic_add(__mem, __val);
   1f78c:	00100593          	addi	a1,zero,1
   1f790:	03090513          	addi	a0,s2,48
   1f794:	bbdf60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f798:	f51ff06f          	jal	zero,1f6e8 <dwarf::value::as_exprloc() const+0x54>
   1f79c:	00100593          	addi	a1,zero,1
   1f7a0:	03090513          	addi	a0,s2,48
   1f7a4:	badf60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1f7a8:	f69ff06f          	jal	zero,1f710 <dwarf::value::as_exprloc() const+0x7c>
      return __exchange_and_add(__mem, __val);
   1f7ac:	fff00593          	addi	a1,zero,-1
   1f7b0:	03090513          	addi	a0,s2,48
   1f7b4:	bcdf60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f7b8:	f81ff06f          	jal	zero,1f738 <dwarf::value::as_exprloc() const+0xa4>
   1f7bc:	fff00593          	addi	a1,zero,-1
   1f7c0:	03490513          	addi	a0,s2,52
   1f7c4:	bbdf60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1f7c8:	fa9ff06f          	jal	zero,1f770 <dwarf::value::as_exprloc() const+0xdc>
    while (pos < sec->end) {
   1f7cc:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   1f7d0:	06813503          	ld	a0,104(sp)
   1f7d4:	01053703          	ld	a4,16(a0)
   1f7d8:	02e7fe63          	bgeu	a5,a4,1f814 <dwarf::value::as_exprloc() const+0x180>
    std::uint64_t result = 0;
   1f7dc:	00000693          	addi	a3,zero,0
    int shift = 0;
   1f7e0:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   1f7e4:	00178793          	addi	a5,a5,1
   1f7e8:	06f13c23          	sd	a5,120(sp)
   1f7ec:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f7f0:	07f77613          	andi	a2,a4,127
   1f7f4:	00b61633          	sll	a2,a2,a1
   1f7f8:	00c6e6b3          	or	a3,a3,a2
      if ((byte & 0x80) == 0)
   1f7fc:	0187171b          	slliw	a4,a4,0x18
   1f800:	4187571b          	sraiw	a4,a4,0x18
   1f804:	34075463          	bge	a4,zero,1fb4c <dwarf::value::as_exprloc() const+0x4b8>
      shift += 7;
   1f808:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   1f80c:	01053703          	ld	a4,16(a0)
   1f810:	fce7eae3          	bltu	a5,a4,1f7e4 <dwarf::value::as_exprloc() const+0x150>
    underflow();
   1f814:	06810513          	addi	a0,sp,104
   1f818:	934fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   1f81c:	1f00006f          	jal	zero,1fa0c <dwarf::value::as_exprloc() const+0x378>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f820:	06813783          	ld	a5,104(sp)
   1f824:	0107b703          	ld	a4,16(a5)
   1f828:	07813783          	ld	a5,120(sp)
   1f82c:	00e7e663          	bltu	a5,a4,1f838 <dwarf::value::as_exprloc() const+0x1a4>
      underflow();
   1f830:	06810513          	addi	a0,sp,104
   1f834:	918fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f838:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f83c:	06813703          	ld	a4,104(sp)
   1f840:	01c72703          	lw	a4,28(a4)
   1f844:	2e070e63          	beq	a4,zero,1fb40 <dwarf::value::as_exprloc() const+0x4ac>
        val = (val << 8) | (uint64_t)p[i];
   1f848:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1f84c:	2f80006f          	jal	zero,1fb44 <dwarf::value::as_exprloc() const+0x4b0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f850:	06813783          	ld	a5,104(sp)
   1f854:	0107b703          	ld	a4,16(a5)
   1f858:	07813783          	ld	a5,120(sp)
   1f85c:	40f70633          	sub	a2,a4,a5
   1f860:	00100693          	addi	a3,zero,1
   1f864:	00c6f463          	bgeu	a3,a2,1f86c <dwarf::value::as_exprloc() const+0x1d8>
   1f868:	00e7e663          	bltu	a5,a4,1f874 <dwarf::value::as_exprloc() const+0x1e0>
      underflow();
   1f86c:	06810513          	addi	a0,sp,104
   1f870:	8dcfd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f874:	07813783          	ld	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f878:	06813703          	ld	a4,104(sp)
   1f87c:	01c72703          	lw	a4,28(a4)
   1f880:	02071063          	bne	a4,zero,1f8a0 <dwarf::value::as_exprloc() const+0x20c>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f884:	0017c683          	lbu	a3,1(a5)
   1f888:	00869693          	slli	a3,a3,0x8
   1f88c:	0007c703          	lbu	a4,0(a5)
   1f890:	00e6e6b3          	or	a3,a3,a4
    pos += sizeof(T);
   1f894:	00278793          	addi	a5,a5,2
   1f898:	06f13c23          	sd	a5,120(sp)
  case DW_FORM::block1:
    size = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    size = cur.fixed<uint16_t>();
    break;
   1f89c:	2b00006f          	jal	zero,1fb4c <dwarf::value::as_exprloc() const+0x4b8>
        val = (val << 8) | (uint64_t)p[i];
   1f8a0:	0007c683          	lbu	a3,0(a5)
   1f8a4:	00869693          	slli	a3,a3,0x8
   1f8a8:	0017c703          	lbu	a4,1(a5)
   1f8ac:	00e6e6b3          	or	a3,a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f8b0:	fe5ff06f          	jal	zero,1f894 <dwarf::value::as_exprloc() const+0x200>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f8b4:	06813783          	ld	a5,104(sp)
   1f8b8:	0107b703          	ld	a4,16(a5)
   1f8bc:	07813783          	ld	a5,120(sp)
   1f8c0:	40f70633          	sub	a2,a4,a5
   1f8c4:	00300693          	addi	a3,zero,3
   1f8c8:	00c6f463          	bgeu	a3,a2,1f8d0 <dwarf::value::as_exprloc() const+0x23c>
   1f8cc:	00e7e663          	bltu	a5,a4,1f8d8 <dwarf::value::as_exprloc() const+0x244>
      underflow();
   1f8d0:	06810513          	addi	a0,sp,104
   1f8d4:	878fd0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f8d8:	07813583          	ld	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1f8dc:	06813783          	ld	a5,104(sp)
   1f8e0:	01c7a783          	lw	a5,28(a5)
   1f8e4:	02079e63          	bne	a5,zero,1f920 <dwarf::value::as_exprloc() const+0x28c>
   1f8e8:	00058613          	addi	a2,a1,0
    uint64_t val = 0;
   1f8ec:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f8f0:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1f8f4:	00064703          	lbu	a4,0(a2)
   1f8f8:	00f71733          	sll	a4,a4,a5
   1f8fc:	00e6e6b3          	or	a3,a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1f900:	00160613          	addi	a2,a2,1
   1f904:	0087879b          	addiw	a5,a5,8
   1f908:	fea796e3          	bne	a5,a0,1f8f4 <dwarf::value::as_exprloc() const+0x260>
    pos += sizeof(T);
   1f90c:	00458593          	addi	a1,a1,4
   1f910:	06b13c23          	sd	a1,120(sp)
   1f914:	02069693          	slli	a3,a3,0x20
   1f918:	0206d693          	srli	a3,a3,0x20
  case DW_FORM::block4:
    size = cur.fixed<uint32_t>();
    break;
   1f91c:	2300006f          	jal	zero,1fb4c <dwarf::value::as_exprloc() const+0x4b8>
   1f920:	00058793          	addi	a5,a1,0
   1f924:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1f928:	00000693          	addi	a3,zero,0
        val = (val << 8) | (uint64_t)p[i];
   1f92c:	00869693          	slli	a3,a3,0x8
   1f930:	0007c703          	lbu	a4,0(a5)
   1f934:	00d766b3          	or	a3,a4,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f938:	00178793          	addi	a5,a5,1
   1f93c:	fec798e3          	bne	a5,a2,1f92c <dwarf::value::as_exprloc() const+0x298>
   1f940:	fcdff06f          	jal	zero,1f90c <dwarf::value::as_exprloc() const+0x278>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1f944:	01000513          	addi	a0,zero,16
   1f948:	ad9f60ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1f94c:	00050493          	addi	s1,a0,0
   1f950:	00c42583          	lw	a1,12(s0)
   1f954:	00810513          	addi	a0,sp,8
   1f958:	3200f0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f95c:	00017617          	auipc	a2,0x17
   1f960:	35460613          	addi	a2,a2,852 # 36cb0 <std::piecewise_construct+0x1c8>
   1f964:	00000593          	addi	a1,zero,0
   1f968:	00810513          	addi	a0,sp,8
   1f96c:	a25f60ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f970:	00050593          	addi	a1,a0,0
   1f974:	02810413          	addi	s0,sp,40
   1f978:	00040513          	addi	a0,s0,0
   1f97c:	af5f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f980:	00017597          	auipc	a1,0x17
   1f984:	38058593          	addi	a1,a1,896 # 36d00 <std::piecewise_construct+0x218>
   1f988:	00040513          	addi	a0,s0,0
   1f98c:	e15f60ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f990:	00050593          	addi	a1,a0,0
   1f994:	04810413          	addi	s0,sp,72
   1f998:	00040513          	addi	a0,s0,0
   1f99c:	ad5f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1f9a0:	00040593          	addi	a1,s0,0
   1f9a4:	00048513          	addi	a0,s1,0
   1f9a8:	e49f60ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f9ac:	00023797          	auipc	a5,0x23
   1f9b0:	a9c7b783          	ld	a5,-1380(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1f9b4:	01078793          	addi	a5,a5,16
   1f9b8:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1f9bc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1f9c0:	05810793          	addi	a5,sp,88
   1f9c4:	00f50463          	beq	a0,a5,1f9cc <dwarf::value::as_exprloc() const+0x338>
   1f9c8:	b49f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f9cc:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1f9d0:	03810793          	addi	a5,sp,56
   1f9d4:	00f50463          	beq	a0,a5,1f9dc <dwarf::value::as_exprloc() const+0x348>
   1f9d8:	b39f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f9dc:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1f9e0:	01810793          	addi	a5,sp,24
   1f9e4:	00f50463          	beq	a0,a5,1f9ec <dwarf::value::as_exprloc() const+0x358>
   1f9e8:	b29f60ef          	jal	ra,16510 <operator delete(void*)@plt>
   1f9ec:	00023617          	auipc	a2,0x23
   1f9f0:	bec63603          	ld	a2,-1044(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   1f9f4:	00023597          	auipc	a1,0x23
   1f9f8:	ba45b583          	ld	a1,-1116(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1f9fc:	00048513          	addi	a0,s1,0
   1fa00:	cc1f60ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1fa04:	00050413          	addi	s0,a0,0
   1fa08:	1040006f          	jal	zero,1fb0c <dwarf::value::as_exprloc() const+0x478>
    return 0;
   1fa0c:	00000693          	addi	a3,zero,0
   1fa10:	13c0006f          	jal	zero,1fb4c <dwarf::value::as_exprloc() const+0x4b8>
   1fa14:	07013403          	ld	s0,112(sp)
   1fa18:	02040463          	beq	s0,zero,1fa40 <dwarf::value::as_exprloc() const+0x3ac>
    if (__is_single_threaded())
   1fa1c:	00023797          	auipc	a5,0x23
   1fa20:	a647b783          	ld	a5,-1436(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fa24:	0007c783          	lbu	a5,0(a5)
   1fa28:	02078e63          	beq	a5,zero,1fa64 <dwarf::value::as_exprloc() const+0x3d0>
    _Atomic_word __result = *__mem;
   1fa2c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1fa30:	fff5079b          	addiw	a5,a0,-1
   1fa34:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fa38:	00100793          	addi	a5,zero,1
   1fa3c:	02f50c63          	beq	a0,a5,1fa74 <dwarf::value::as_exprloc() const+0x3e0>
  }
  return expr(cu, cur.get_section_offset(), size);
}
   1fa40:	00048513          	addi	a0,s1,0
   1fa44:	0a813083          	ld	ra,168(sp)
   1fa48:	0a013403          	ld	s0,160(sp)
   1fa4c:	09813483          	ld	s1,152(sp)
   1fa50:	09013903          	ld	s2,144(sp)
   1fa54:	08813983          	ld	s3,136(sp)
   1fa58:	08013a03          	ld	s4,128(sp)
   1fa5c:	0b010113          	addi	sp,sp,176
   1fa60:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   1fa64:	fff00593          	addi	a1,zero,-1
   1fa68:	03040513          	addi	a0,s0,48
   1fa6c:	915f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fa70:	fc9ff06f          	jal	zero,1fa38 <dwarf::value::as_exprloc() const+0x3a4>
	_M_dispose();
   1fa74:	00043783          	ld	a5,0(s0)
   1fa78:	0107b783          	ld	a5,16(a5)
   1fa7c:	00040513          	addi	a0,s0,0
   1fa80:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fa84:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fa88:	00023797          	auipc	a5,0x23
   1fa8c:	9f87b783          	ld	a5,-1544(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fa90:	0007c783          	lbu	a5,0(a5)
   1fa94:	02078663          	beq	a5,zero,1fac0 <dwarf::value::as_exprloc() const+0x42c>
    _Atomic_word __result = *__mem;
   1fa98:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1fa9c:	fff5079b          	addiw	a5,a0,-1
   1faa0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1faa4:	00100793          	addi	a5,zero,1
   1faa8:	f8f51ce3          	bne	a0,a5,1fa40 <dwarf::value::as_exprloc() const+0x3ac>
	    _M_destroy();
   1faac:	00043783          	ld	a5,0(s0)
   1fab0:	0187b783          	ld	a5,24(a5)
   1fab4:	00040513          	addi	a0,s0,0
   1fab8:	000780e7          	jalr	ra,0(a5)
  return expr(cu, cur.get_section_offset(), size);
   1fabc:	f85ff06f          	jal	zero,1fa40 <dwarf::value::as_exprloc() const+0x3ac>
      return __exchange_and_add(__mem, __val);
   1fac0:	fff00593          	addi	a1,zero,-1
   1fac4:	03440513          	addi	a0,s0,52
   1fac8:	8b9f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1facc:	fd9ff06f          	jal	zero,1faa4 <dwarf::value::as_exprloc() const+0x410>
      { return _M_dataplus._M_p; }
   1fad0:	00050413          	addi	s0,a0,0
   1fad4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   1fad8:	05810793          	addi	a5,sp,88
   1fadc:	00f50463          	beq	a0,a5,1fae4 <dwarf::value::as_exprloc() const+0x450>
   1fae0:	a31f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fae4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   1fae8:	03810793          	addi	a5,sp,56
   1faec:	00f50463          	beq	a0,a5,1faf4 <dwarf::value::as_exprloc() const+0x460>
   1faf0:	a21f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1faf4:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   1faf8:	01810793          	addi	a5,sp,24
   1fafc:	00f50463          	beq	a0,a5,1fb04 <dwarf::value::as_exprloc() const+0x470>
   1fb00:	a11f60ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1fb04:	00048513          	addi	a0,s1,0
   1fb08:	9c9f60ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1fb0c:	07013503          	ld	a0,112(sp)
   1fb10:	00050863          	beq	a0,zero,1fb20 <dwarf::value::as_exprloc() const+0x48c>
	  _M_pi->_M_release();
   1fb14:	00023317          	auipc	t1,0x23
   1fb18:	8b433303          	ld	t1,-1868(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1fb1c:	000300e7          	jalr	ra,0(t1)
   1fb20:	00040513          	addi	a0,s0,0
   1fb24:	bcdf60ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fb28:	00050413          	addi	s0,a0,0
   1fb2c:	fb9ff06f          	jal	zero,1fae4 <dwarf::value::as_exprloc() const+0x450>
   1fb30:	00050413          	addi	s0,a0,0
   1fb34:	fc1ff06f          	jal	zero,1faf4 <dwarf::value::as_exprloc() const+0x460>
   1fb38:	00050413          	addi	s0,a0,0
   1fb3c:	fc9ff06f          	jal	zero,1fb04 <dwarf::value::as_exprloc() const+0x470>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fb40:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   1fb44:	00178793          	addi	a5,a5,1
   1fb48:	06f13c23          	sd	a5,120(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1fb4c:	06813783          	ld	a5,104(sp)
   1fb50:	0087b783          	ld	a5,8(a5)
  return expr(cu, cur.get_section_offset(), size);
   1fb54:	07813603          	ld	a2,120(sp)
   1fb58:	40f60633          	sub	a2,a2,a5
   1fb5c:	00043583          	ld	a1,0(s0)
   1fb60:	00048513          	addi	a0,s1,0
   1fb64:	16c040ef          	jal	ra,23cd0 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>
   1fb68:	eadff06f          	jal	zero,1fa14 <dwarf::value::as_exprloc() const+0x380>
  cursor cur(cu->data(), offset);
   1fb6c:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fb70:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1fb74:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1fb78:	0089b783          	ld	a5,8(s3)
   1fb7c:	00e787b3          	add	a5,a5,a4
   1fb80:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   1fb84:	00842783          	lw	a5,8(s0)
   1fb88:	ffd7879b          	addiw	a5,a5,-3
   1fb8c:	0007869b          	addiw	a3,a5,0
   1fb90:	01500713          	addi	a4,zero,21
   1fb94:	dad768e3          	bltu	a4,a3,1f944 <dwarf::value::as_exprloc() const+0x2b0>
   1fb98:	02079713          	slli	a4,a5,0x20
   1fb9c:	01e75793          	srli	a5,a4,0x1e
   1fba0:	00017717          	auipc	a4,0x17
   1fba4:	34870713          	addi	a4,a4,840 # 36ee8 <std::piecewise_construct+0x400>
   1fba8:	00e787b3          	add	a5,a5,a4
   1fbac:	0007a783          	lw	a5,0(a5)
   1fbb0:	00e787b3          	add	a5,a5,a4
   1fbb4:	00078067          	jalr	zero,0(a5)

000000000001fbb8 <dwarf::value::as_flag() const>:

bool value::as_flag() const {
   1fbb8:	f8010113          	addi	sp,sp,-128
   1fbbc:	06113c23          	sd	ra,120(sp)
   1fbc0:	06813823          	sd	s0,112(sp)
   1fbc4:	06913423          	sd	s1,104(sp)
   1fbc8:	07213023          	sd	s2,96(sp)
   1fbcc:	00050413          	addi	s0,a0,0
  switch (form) {
   1fbd0:	00852783          	lw	a5,8(a0)
   1fbd4:	00c00713          	addi	a4,zero,12
   1fbd8:	02e78663          	beq	a5,a4,1fc04 <dwarf::value::as_flag() const+0x4c>
   1fbdc:	01900713          	addi	a4,zero,25
   1fbe0:	00100493          	addi	s1,zero,1
   1fbe4:	16e79663          	bne	a5,a4,1fd50 <dwarf::value::as_flag() const+0x198>
  case DW_FORM::flag_present:
    return true;
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
  }
}
   1fbe8:	00048513          	addi	a0,s1,0
   1fbec:	07813083          	ld	ra,120(sp)
   1fbf0:	07013403          	ld	s0,112(sp)
   1fbf4:	06813483          	ld	s1,104(sp)
   1fbf8:	06013903          	ld	s2,96(sp)
   1fbfc:	08010113          	addi	sp,sp,128
   1fc00:	00008067          	jalr	zero,0(ra)
    cursor cur(cu->data(), offset);
   1fc04:	00053503          	ld	a0,0(a0)
   1fc08:	f3cf70ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fc0c:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1fc10:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1fc14:	30048063          	beq	s1,zero,1ff14 <dwarf::value::as_flag() const+0x35c>
    if (__is_single_threaded())
   1fc18:	00023797          	auipc	a5,0x23
   1fc1c:	8687b783          	ld	a5,-1944(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc20:	0007c783          	lbu	a5,0(a5)
   1fc24:	0a078a63          	beq	a5,zero,1fcd8 <dwarf::value::as_flag() const+0x120>
  { *__mem += __val; }
   1fc28:	0304a783          	lw	a5,48(s1)
   1fc2c:	0017879b          	addiw	a5,a5,1
   1fc30:	02f4a823          	sw	a5,48(s1)
   1fc34:	01043403          	ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fc38:	05213023          	sd	s2,64(sp)
      : _M_pi(__r._M_pi)
   1fc3c:	04913423          	sd	s1,72(sp)
    if (__is_single_threaded())
   1fc40:	00023797          	auipc	a5,0x23
   1fc44:	8407b783          	ld	a5,-1984(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc48:	0007c783          	lbu	a5,0(a5)
   1fc4c:	08078e63          	beq	a5,zero,1fce8 <dwarf::value::as_flag() const+0x130>
  { *__mem += __val; }
   1fc50:	0304a783          	lw	a5,48(s1)
   1fc54:	0017879b          	addiw	a5,a5,1
   1fc58:	02f4a823          	sw	a5,48(s1)
   1fc5c:	00893783          	ld	a5,8(s2)
   1fc60:	008787b3          	add	a5,a5,s0
   1fc64:	04f13823          	sd	a5,80(sp)
    if (__is_single_threaded())
   1fc68:	00023797          	auipc	a5,0x23
   1fc6c:	8187b783          	ld	a5,-2024(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc70:	0007c783          	lbu	a5,0(a5)
   1fc74:	08078263          	beq	a5,zero,1fcf8 <dwarf::value::as_flag() const+0x140>
    _Atomic_word __result = *__mem;
   1fc78:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1fc7c:	fff5079b          	addiw	a5,a0,-1
   1fc80:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fc84:	00100793          	addi	a5,zero,1
   1fc88:	2af51263          	bne	a0,a5,1ff2c <dwarf::value::as_flag() const+0x374>
	_M_dispose();
   1fc8c:	0004b783          	ld	a5,0(s1)
   1fc90:	0107b783          	ld	a5,16(a5)
   1fc94:	00048513          	addi	a0,s1,0
   1fc98:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fc9c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fca0:	00022797          	auipc	a5,0x22
   1fca4:	7e07b783          	ld	a5,2016(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fca8:	0007c783          	lbu	a5,0(a5)
   1fcac:	04078e63          	beq	a5,zero,1fd08 <dwarf::value::as_flag() const+0x150>
    _Atomic_word __result = *__mem;
   1fcb0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   1fcb4:	fff5079b          	addiw	a5,a0,-1
   1fcb8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1fcbc:	00100793          	addi	a5,zero,1
   1fcc0:	26f51663          	bne	a0,a5,1ff2c <dwarf::value::as_flag() const+0x374>
	    _M_destroy();
   1fcc4:	0004b783          	ld	a5,0(s1)
   1fcc8:	0187b783          	ld	a5,24(a5)
   1fccc:	00048513          	addi	a0,s1,0
   1fcd0:	000780e7          	jalr	ra,0(a5)
   1fcd4:	2580006f          	jal	zero,1ff2c <dwarf::value::as_flag() const+0x374>
      __atomic_add(__mem, __val);
   1fcd8:	00100593          	addi	a1,zero,1
   1fcdc:	03048513          	addi	a0,s1,48
   1fce0:	e70f60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fce4:	f51ff06f          	jal	zero,1fc34 <dwarf::value::as_flag() const+0x7c>
   1fce8:	00100593          	addi	a1,zero,1
   1fcec:	03048513          	addi	a0,s1,48
   1fcf0:	e60f60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fcf4:	f69ff06f          	jal	zero,1fc5c <dwarf::value::as_flag() const+0xa4>
      return __exchange_and_add(__mem, __val);
   1fcf8:	fff00593          	addi	a1,zero,-1
   1fcfc:	03048513          	addi	a0,s1,48
   1fd00:	e80f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fd04:	f81ff06f          	jal	zero,1fc84 <dwarf::value::as_flag() const+0xcc>
   1fd08:	fff00593          	addi	a1,zero,-1
   1fd0c:	03448513          	addi	a0,s1,52
   1fd10:	e70f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fd14:	fa9ff06f          	jal	zero,1fcbc <dwarf::value::as_flag() const+0x104>
    const unsigned char *p = (const unsigned char *)pos;
   1fd18:	05013783          	ld	a5,80(sp)
    if (sec->ord == byte_order::lsb) {
   1fd1c:	04013703          	ld	a4,64(sp)
   1fd20:	01c72703          	lw	a4,28(a4)
   1fd24:	16070463          	beq	a4,zero,1fe8c <dwarf::value::as_flag() const+0x2d4>
        val = (val << 8) | (uint64_t)p[i];
   1fd28:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1fd2c:	1640006f          	jal	zero,1fe90 <dwarf::value::as_flag() const+0x2d8>
   1fd30:	fff00593          	addi	a1,zero,-1
   1fd34:	03040513          	addi	a0,s0,48
   1fd38:	e48f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fd3c:	1840006f          	jal	zero,1fec0 <dwarf::value::as_flag() const+0x308>
   1fd40:	fff00593          	addi	a1,zero,-1
   1fd44:	03440513          	addi	a0,s0,52
   1fd48:	e38f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fd4c:	1ac0006f          	jal	zero,1fef8 <dwarf::value::as_flag() const+0x340>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
   1fd50:	01000513          	addi	a0,zero,16
   1fd54:	eccf60ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1fd58:	00050493          	addi	s1,a0,0
   1fd5c:	00c42583          	lw	a1,12(s0)
   1fd60:	00010513          	addi	a0,sp,0
   1fd64:	7150e0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1fd68:	00017617          	auipc	a2,0x17
   1fd6c:	f4860613          	addi	a2,a2,-184 # 36cb0 <std::piecewise_construct+0x1c8>
   1fd70:	00000593          	addi	a1,zero,0
   1fd74:	00010513          	addi	a0,sp,0
   1fd78:	e18f60ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1fd7c:	00050593          	addi	a1,a0,0
   1fd80:	02010413          	addi	s0,sp,32
   1fd84:	00040513          	addi	a0,s0,0
   1fd88:	ee8f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1fd8c:	00017597          	auipc	a1,0x17
   1fd90:	f8458593          	addi	a1,a1,-124 # 36d10 <std::piecewise_construct+0x228>
   1fd94:	00040513          	addi	a0,s0,0
   1fd98:	a09f60ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1fd9c:	00050593          	addi	a1,a0,0
   1fda0:	04010413          	addi	s0,sp,64
   1fda4:	00040513          	addi	a0,s0,0
   1fda8:	ec8f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1fdac:	00040593          	addi	a1,s0,0
   1fdb0:	00048513          	addi	a0,s1,0
   1fdb4:	a3df60ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1fdb8:	00022797          	auipc	a5,0x22
   1fdbc:	6907b783          	ld	a5,1680(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1fdc0:	01078793          	addi	a5,a5,16
   1fdc4:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1fdc8:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   1fdcc:	05010793          	addi	a5,sp,80
   1fdd0:	00f50463          	beq	a0,a5,1fdd8 <dwarf::value::as_flag() const+0x220>
   1fdd4:	f3cf60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fdd8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1fddc:	03010793          	addi	a5,sp,48
   1fde0:	00f50463          	beq	a0,a5,1fde8 <dwarf::value::as_flag() const+0x230>
   1fde4:	f2cf60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fde8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1fdec:	01010793          	addi	a5,sp,16
   1fdf0:	00f50463          	beq	a0,a5,1fdf8 <dwarf::value::as_flag() const+0x240>
   1fdf4:	f1cf60ef          	jal	ra,16510 <operator delete(void*)@plt>
   1fdf8:	00022617          	auipc	a2,0x22
   1fdfc:	7e063603          	ld	a2,2016(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   1fe00:	00022597          	auipc	a1,0x22
   1fe04:	7985b583          	ld	a1,1944(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1fe08:	00048513          	addi	a0,s1,0
   1fe0c:	8b5f60ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1fe10:	00050413          	addi	s0,a0,0
   1fe14:	04813503          	ld	a0,72(sp)
   1fe18:	00050863          	beq	a0,zero,1fe28 <dwarf::value::as_flag() const+0x270>
	  _M_pi->_M_release();
   1fe1c:	00022317          	auipc	t1,0x22
   1fe20:	5ac33303          	ld	t1,1452(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   1fe24:	000300e7          	jalr	ra,0(t1)
   1fe28:	00040513          	addi	a0,s0,0
   1fe2c:	8c5f60ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fe30:	00050413          	addi	s0,a0,0
   1fe34:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   1fe38:	05010793          	addi	a5,sp,80
   1fe3c:	00f50463          	beq	a0,a5,1fe44 <dwarf::value::as_flag() const+0x28c>
   1fe40:	ed0f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fe44:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   1fe48:	03010793          	addi	a5,sp,48
   1fe4c:	00f50463          	beq	a0,a5,1fe54 <dwarf::value::as_flag() const+0x29c>
   1fe50:	ec0f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1fe54:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   1fe58:	01010793          	addi	a5,sp,16
   1fe5c:	00f50463          	beq	a0,a5,1fe64 <dwarf::value::as_flag() const+0x2ac>
   1fe60:	eb0f60ef          	jal	ra,16510 <operator delete(void*)@plt>
   1fe64:	00048513          	addi	a0,s1,0
   1fe68:	e68f60ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1fe6c:	00040513          	addi	a0,s0,0
   1fe70:	881f60ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1fe74:	00050413          	addi	s0,a0,0
   1fe78:	fcdff06f          	jal	zero,1fe44 <dwarf::value::as_flag() const+0x28c>
   1fe7c:	00050413          	addi	s0,a0,0
   1fe80:	fd5ff06f          	jal	zero,1fe54 <dwarf::value::as_flag() const+0x29c>
   1fe84:	00050413          	addi	s0,a0,0
   1fe88:	fddff06f          	jal	zero,1fe64 <dwarf::value::as_flag() const+0x2ac>
        val |= ((uint64_t)p[i]) << (i * 8);
   1fe8c:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   1fe90:	00178793          	addi	a5,a5,1
   1fe94:	04f13823          	sd	a5,80(sp)
    return cur.fixed<ubyte>() != 0;
   1fe98:	009034b3          	sltu	s1,zero,s1
	if (_M_pi != nullptr)
   1fe9c:	04813403          	ld	s0,72(sp)
   1fea0:	d40404e3          	beq	s0,zero,1fbe8 <dwarf::value::as_flag() const+0x30>
    if (__is_single_threaded())
   1fea4:	00022797          	auipc	a5,0x22
   1fea8:	5dc7b783          	ld	a5,1500(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1feac:	0007c783          	lbu	a5,0(a5)
   1feb0:	e80780e3          	beq	a5,zero,1fd30 <dwarf::value::as_flag() const+0x178>
    _Atomic_word __result = *__mem;
   1feb4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   1feb8:	fff5079b          	addiw	a5,a0,-1
   1febc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fec0:	00100793          	addi	a5,zero,1
   1fec4:	d2f512e3          	bne	a0,a5,1fbe8 <dwarf::value::as_flag() const+0x30>
	_M_dispose();
   1fec8:	00043783          	ld	a5,0(s0)
   1fecc:	0107b783          	ld	a5,16(a5)
   1fed0:	00040513          	addi	a0,s0,0
   1fed4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fed8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fedc:	00022797          	auipc	a5,0x22
   1fee0:	5a47b783          	ld	a5,1444(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fee4:	0007c783          	lbu	a5,0(a5)
   1fee8:	e4078ce3          	beq	a5,zero,1fd40 <dwarf::value::as_flag() const+0x188>
    _Atomic_word __result = *__mem;
   1feec:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   1fef0:	fff5079b          	addiw	a5,a0,-1
   1fef4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1fef8:	00100793          	addi	a5,zero,1
   1fefc:	cef516e3          	bne	a0,a5,1fbe8 <dwarf::value::as_flag() const+0x30>
	    _M_destroy();
   1ff00:	00043783          	ld	a5,0(s0)
   1ff04:	0187b783          	ld	a5,24(a5)
   1ff08:	00040513          	addi	a0,s0,0
   1ff0c:	000780e7          	jalr	ra,0(a5)
   1ff10:	cd9ff06f          	jal	zero,1fbe8 <dwarf::value::as_flag() const+0x30>
    cursor cur(cu->data(), offset);
   1ff14:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ff18:	05213023          	sd	s2,64(sp)
      : _M_pi(__r._M_pi)
   1ff1c:	04013423          	sd	zero,72(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1ff20:	00893783          	ld	a5,8(s2)
   1ff24:	00e787b3          	add	a5,a5,a4
   1ff28:	04f13823          	sd	a5,80(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ff2c:	04013783          	ld	a5,64(sp)
   1ff30:	0107b703          	ld	a4,16(a5)
   1ff34:	05013783          	ld	a5,80(sp)
   1ff38:	dee7e0e3          	bltu	a5,a4,1fd18 <dwarf::value::as_flag() const+0x160>
      underflow();
   1ff3c:	04010513          	addi	a0,sp,64
   1ff40:	a0dfc0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   1ff44:	dd5ff06f          	jal	zero,1fd18 <dwarf::value::as_flag() const+0x160>

000000000001ff48 <dwarf::value::as_cstr(unsigned long*) const>:
  size_t size;
  const char *s = as_cstr(&size);
  return string(s, size);
}

const char *value::as_cstr(size_t *size_out) const {
   1ff48:	f4010113          	addi	sp,sp,-192
   1ff4c:	0a113c23          	sd	ra,184(sp)
   1ff50:	0a813823          	sd	s0,176(sp)
   1ff54:	0a913423          	sd	s1,168(sp)
   1ff58:	0b213023          	sd	s2,160(sp)
   1ff5c:	09313c23          	sd	s3,152(sp)
   1ff60:	09413823          	sd	s4,144(sp)
   1ff64:	00050413          	addi	s0,a0,0
   1ff68:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), offset);
   1ff6c:	00053503          	ld	a0,0(a0)
   1ff70:	bd4f70ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ff74:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1ff78:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   1ff7c:	4c048a63          	beq	s1,zero,20450 <dwarf::value::as_cstr(unsigned long*) const+0x508>
    if (__is_single_threaded())
   1ff80:	00022797          	auipc	a5,0x22
   1ff84:	5007b783          	ld	a5,1280(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ff88:	0007c783          	lbu	a5,0(a5)
   1ff8c:	0a078a63          	beq	a5,zero,20040 <dwarf::value::as_cstr(unsigned long*) const+0xf8>
  { *__mem += __val; }
   1ff90:	0304a783          	lw	a5,48(s1)
   1ff94:	0017879b          	addiw	a5,a5,1
   1ff98:	02f4a823          	sw	a5,48(s1)
   1ff9c:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ffa0:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   1ffa4:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   1ffa8:	00022797          	auipc	a5,0x22
   1ffac:	4d87b783          	ld	a5,1240(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ffb0:	0007c783          	lbu	a5,0(a5)
   1ffb4:	08078e63          	beq	a5,zero,20050 <dwarf::value::as_cstr(unsigned long*) const+0x108>
  { *__mem += __val; }
   1ffb8:	0304a783          	lw	a5,48(s1)
   1ffbc:	0017879b          	addiw	a5,a5,1
   1ffc0:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1ffc4:	0089b783          	ld	a5,8(s3)
   1ffc8:	014787b3          	add	a5,a5,s4
   1ffcc:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   1ffd0:	00022797          	auipc	a5,0x22
   1ffd4:	4b07b783          	ld	a5,1200(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ffd8:	0007c783          	lbu	a5,0(a5)
   1ffdc:	08078263          	beq	a5,zero,20060 <dwarf::value::as_cstr(unsigned long*) const+0x118>
    _Atomic_word __result = *__mem;
   1ffe0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   1ffe4:	fff5079b          	addiw	a5,a0,-1
   1ffe8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ffec:	00100793          	addi	a5,zero,1
   1fff0:	46f51c63          	bne	a0,a5,20468 <dwarf::value::as_cstr(unsigned long*) const+0x520>
	_M_dispose();
   1fff4:	0004b783          	ld	a5,0(s1)
   1fff8:	0107b783          	ld	a5,16(a5)
   1fffc:	00048513          	addi	a0,s1,0
   20000:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20004:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20008:	00022797          	auipc	a5,0x22
   2000c:	4787b783          	ld	a5,1144(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20010:	0007c783          	lbu	a5,0(a5)
   20014:	04078e63          	beq	a5,zero,20070 <dwarf::value::as_cstr(unsigned long*) const+0x128>
    _Atomic_word __result = *__mem;
   20018:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2001c:	fff5079b          	addiw	a5,a0,-1
   20020:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20024:	00100793          	addi	a5,zero,1
   20028:	44f51063          	bne	a0,a5,20468 <dwarf::value::as_cstr(unsigned long*) const+0x520>
	    _M_destroy();
   2002c:	0004b783          	ld	a5,0(s1)
   20030:	0187b783          	ld	a5,24(a5)
   20034:	00048513          	addi	a0,s1,0
   20038:	000780e7          	jalr	ra,0(a5)
   2003c:	42c0006f          	jal	zero,20468 <dwarf::value::as_cstr(unsigned long*) const+0x520>
      __atomic_add(__mem, __val);
   20040:	00100593          	addi	a1,zero,1
   20044:	03048513          	addi	a0,s1,48
   20048:	b08f60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2004c:	f51ff06f          	jal	zero,1ff9c <dwarf::value::as_cstr(unsigned long*) const+0x54>
   20050:	00100593          	addi	a1,zero,1
   20054:	03048513          	addi	a0,s1,48
   20058:	af8f60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2005c:	f69ff06f          	jal	zero,1ffc4 <dwarf::value::as_cstr(unsigned long*) const+0x7c>
      return __exchange_and_add(__mem, __val);
   20060:	fff00593          	addi	a1,zero,-1
   20064:	03048513          	addi	a0,s1,48
   20068:	b18f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2006c:	f81ff06f          	jal	zero,1ffec <dwarf::value::as_cstr(unsigned long*) const+0xa4>
   20070:	fff00593          	addi	a1,zero,-1
   20074:	03448513          	addi	a0,s1,52
   20078:	b08f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2007c:	fa9ff06f          	jal	zero,20024 <dwarf::value::as_cstr(unsigned long*) const+0xdc>
  switch (form) {
  case DW_FORM::string:
    return cur.cstr(size_out);
   20080:	00090593          	addi	a1,s2,0
   20084:	06810513          	addi	a0,sp,104
   20088:	fb4fc0ef          	jal	ra,1c83c <dwarf::cursor::cstr(unsigned long*)>
   2008c:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   20090:	07013483          	ld	s1,112(sp)
   20094:	02048463          	beq	s1,zero,200bc <dwarf::value::as_cstr(unsigned long*) const+0x174>
    if (__is_single_threaded())
   20098:	00022797          	auipc	a5,0x22
   2009c:	3e87b783          	ld	a5,1000(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   200a0:	0007c783          	lbu	a5,0(a5)
   200a4:	2a078a63          	beq	a5,zero,20358 <dwarf::value::as_cstr(unsigned long*) const+0x410>
    _Atomic_word __result = *__mem;
   200a8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   200ac:	fff5079b          	addiw	a5,a0,-1
   200b0:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   200b4:	00100793          	addi	a5,zero,1
   200b8:	2af50863          	beq	a0,a5,20368 <dwarf::value::as_cstr(unsigned long*) const+0x420>
    return scur.cstr(size_out);
  }
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
  }
}
   200bc:	00040513          	addi	a0,s0,0
   200c0:	0b813083          	ld	ra,184(sp)
   200c4:	0b013403          	ld	s0,176(sp)
   200c8:	0a813483          	ld	s1,168(sp)
   200cc:	0a013903          	ld	s2,160(sp)
   200d0:	09813983          	ld	s3,152(sp)
   200d4:	09013a03          	ld	s4,144(sp)
   200d8:	0c010113          	addi	sp,sp,192
   200dc:	00008067          	jalr	zero,0(ra)
    section_offset off = cur.offset();
   200e0:	00050493          	addi	s1,a0,0
    cursor scur(cu->get_dwarf().get_section(section_type::str), off);
   200e4:	00043503          	ld	a0,0(s0)
   200e8:	a48f70ef          	jal	ra,17330 <dwarf::unit::get_dwarf() const>
   200ec:	00050593          	addi	a1,a0,0
   200f0:	00a00613          	addi	a2,zero,10
   200f4:	08010513          	addi	a0,sp,128
   200f8:	a64f70ef          	jal	ra,1735c <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   200fc:	08013783          	ld	a5,128(sp)
   20100:	04f13423          	sd	a5,72(sp)
      : _M_pi(__r._M_pi)
   20104:	08813503          	ld	a0,136(sp)
   20108:	04a13823          	sd	a0,80(sp)
	if (_M_pi != nullptr)
   2010c:	02050063          	beq	a0,zero,2012c <dwarf::value::as_cstr(unsigned long*) const+0x1e4>
    if (__is_single_threaded())
   20110:	00022797          	auipc	a5,0x22
   20114:	3707b783          	ld	a5,880(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20118:	0007c783          	lbu	a5,0(a5)
   2011c:	04078e63          	beq	a5,zero,20178 <dwarf::value::as_cstr(unsigned long*) const+0x230>
  { *__mem += __val; }
   20120:	03052783          	lw	a5,48(a0)
   20124:	0017879b          	addiw	a5,a5,1
   20128:	02f52823          	sw	a5,48(a0)
   2012c:	08013783          	ld	a5,128(sp)
   20130:	0087b783          	ld	a5,8(a5)
   20134:	00978533          	add	a0,a5,s1
   20138:	04a13c23          	sd	a0,88(sp)
	if (_M_pi != nullptr)
   2013c:	08813403          	ld	s0,136(sp)
   20140:	02040463          	beq	s0,zero,20168 <dwarf::value::as_cstr(unsigned long*) const+0x220>
    if (__is_single_threaded())
   20144:	00022797          	auipc	a5,0x22
   20148:	33c7b783          	ld	a5,828(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2014c:	0007c783          	lbu	a5,0(a5)
   20150:	02078c63          	beq	a5,zero,20188 <dwarf::value::as_cstr(unsigned long*) const+0x240>
    _Atomic_word __result = *__mem;
   20154:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20158:	fff5079b          	addiw	a5,a0,-1
   2015c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20160:	00100793          	addi	a5,zero,1
   20164:	02f50a63          	beq	a0,a5,20198 <dwarf::value::as_cstr(unsigned long*) const+0x250>
    return scur.cstr(size_out);
   20168:	00090593          	addi	a1,s2,0
   2016c:	04810513          	addi	a0,sp,72
   20170:	eccfc0ef          	jal	ra,1c83c <dwarf::cursor::cstr(unsigned long*)>
   20174:	0800006f          	jal	zero,201f4 <dwarf::value::as_cstr(unsigned long*) const+0x2ac>
      __atomic_add(__mem, __val);
   20178:	00100593          	addi	a1,zero,1
   2017c:	03050513          	addi	a0,a0,48
   20180:	9d0f60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20184:	fa9ff06f          	jal	zero,2012c <dwarf::value::as_cstr(unsigned long*) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   20188:	fff00593          	addi	a1,zero,-1
   2018c:	03040513          	addi	a0,s0,48
   20190:	9f0f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20194:	fcdff06f          	jal	zero,20160 <dwarf::value::as_cstr(unsigned long*) const+0x218>
	_M_dispose();
   20198:	00043783          	ld	a5,0(s0)
   2019c:	0107b783          	ld	a5,16(a5)
   201a0:	00040513          	addi	a0,s0,0
   201a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   201a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   201ac:	00022797          	auipc	a5,0x22
   201b0:	2d47b783          	ld	a5,724(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   201b4:	0007c783          	lbu	a5,0(a5)
   201b8:	02078663          	beq	a5,zero,201e4 <dwarf::value::as_cstr(unsigned long*) const+0x29c>
    _Atomic_word __result = *__mem;
   201bc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   201c0:	fff5079b          	addiw	a5,a0,-1
   201c4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   201c8:	00100793          	addi	a5,zero,1
   201cc:	f8f51ee3          	bne	a0,a5,20168 <dwarf::value::as_cstr(unsigned long*) const+0x220>
	    _M_destroy();
   201d0:	00043783          	ld	a5,0(s0)
   201d4:	0187b783          	ld	a5,24(a5)
   201d8:	00040513          	addi	a0,s0,0
   201dc:	000780e7          	jalr	ra,0(a5)
   201e0:	f89ff06f          	jal	zero,20168 <dwarf::value::as_cstr(unsigned long*) const+0x220>
      return __exchange_and_add(__mem, __val);
   201e4:	fff00593          	addi	a1,zero,-1
   201e8:	03440513          	addi	a0,s0,52
   201ec:	994f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   201f0:	fd9ff06f          	jal	zero,201c8 <dwarf::value::as_cstr(unsigned long*) const+0x280>
   201f4:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   201f8:	05013483          	ld	s1,80(sp)
   201fc:	e8048ae3          	beq	s1,zero,20090 <dwarf::value::as_cstr(unsigned long*) const+0x148>
    if (__is_single_threaded())
   20200:	00022797          	auipc	a5,0x22
   20204:	2807b783          	ld	a5,640(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20208:	0007c783          	lbu	a5,0(a5)
   2020c:	06078263          	beq	a5,zero,20270 <dwarf::value::as_cstr(unsigned long*) const+0x328>
    _Atomic_word __result = *__mem;
   20210:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20214:	fff5079b          	addiw	a5,a0,-1
   20218:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2021c:	00100793          	addi	a5,zero,1
   20220:	e6f518e3          	bne	a0,a5,20090 <dwarf::value::as_cstr(unsigned long*) const+0x148>
	_M_dispose();
   20224:	0004b783          	ld	a5,0(s1)
   20228:	0107b783          	ld	a5,16(a5)
   2022c:	00048513          	addi	a0,s1,0
   20230:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20234:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20238:	00022797          	auipc	a5,0x22
   2023c:	2487b783          	ld	a5,584(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20240:	0007c783          	lbu	a5,0(a5)
   20244:	02078e63          	beq	a5,zero,20280 <dwarf::value::as_cstr(unsigned long*) const+0x338>
    _Atomic_word __result = *__mem;
   20248:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2024c:	fff5079b          	addiw	a5,a0,-1
   20250:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20254:	00100793          	addi	a5,zero,1
   20258:	e2f51ce3          	bne	a0,a5,20090 <dwarf::value::as_cstr(unsigned long*) const+0x148>
	    _M_destroy();
   2025c:	0004b783          	ld	a5,0(s1)
   20260:	0187b783          	ld	a5,24(a5)
   20264:	00048513          	addi	a0,s1,0
   20268:	000780e7          	jalr	ra,0(a5)
   2026c:	e25ff06f          	jal	zero,20090 <dwarf::value::as_cstr(unsigned long*) const+0x148>
      return __exchange_and_add(__mem, __val);
   20270:	fff00593          	addi	a1,zero,-1
   20274:	03048513          	addi	a0,s1,48
   20278:	908f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2027c:	fa1ff06f          	jal	zero,2021c <dwarf::value::as_cstr(unsigned long*) const+0x2d4>
   20280:	fff00593          	addi	a1,zero,-1
   20284:	03448513          	addi	a0,s1,52
   20288:	8f8f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2028c:	fc9ff06f          	jal	zero,20254 <dwarf::value::as_cstr(unsigned long*) const+0x30c>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
   20290:	01000513          	addi	a0,zero,16
   20294:	98cf60ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   20298:	00050493          	addi	s1,a0,0
   2029c:	00c42583          	lw	a1,12(s0)
   202a0:	00810513          	addi	a0,sp,8
   202a4:	1d50e0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   202a8:	00017617          	auipc	a2,0x17
   202ac:	a0860613          	addi	a2,a2,-1528 # 36cb0 <std::piecewise_construct+0x1c8>
   202b0:	00000593          	addi	a1,zero,0
   202b4:	00810513          	addi	a0,sp,8
   202b8:	8d8f60ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   202bc:	00050593          	addi	a1,a0,0
   202c0:	02810413          	addi	s0,sp,40
   202c4:	00040513          	addi	a0,s0,0
   202c8:	9a8f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   202cc:	00017597          	auipc	a1,0x17
   202d0:	a5458593          	addi	a1,a1,-1452 # 36d20 <std::piecewise_construct+0x238>
   202d4:	00040513          	addi	a0,s0,0
   202d8:	cc8f60ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   202dc:	00050593          	addi	a1,a0,0
   202e0:	04810413          	addi	s0,sp,72
   202e4:	00040513          	addi	a0,s0,0
   202e8:	988f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   202ec:	00040593          	addi	a1,s0,0
   202f0:	00048513          	addi	a0,s1,0
   202f4:	cfcf60ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   202f8:	00022797          	auipc	a5,0x22
   202fc:	1507b783          	ld	a5,336(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   20300:	01078793          	addi	a5,a5,16
   20304:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   20308:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2030c:	05810793          	addi	a5,sp,88
   20310:	00f50463          	beq	a0,a5,20318 <dwarf::value::as_cstr(unsigned long*) const+0x3d0>
   20314:	9fcf60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20318:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2031c:	03810793          	addi	a5,sp,56
   20320:	00f50463          	beq	a0,a5,20328 <dwarf::value::as_cstr(unsigned long*) const+0x3e0>
   20324:	9ecf60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20328:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2032c:	01810793          	addi	a5,sp,24
   20330:	00f50463          	beq	a0,a5,20338 <dwarf::value::as_cstr(unsigned long*) const+0x3f0>
   20334:	9dcf60ef          	jal	ra,16510 <operator delete(void*)@plt>
   20338:	00022617          	auipc	a2,0x22
   2033c:	2a063603          	ld	a2,672(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   20340:	00022597          	auipc	a1,0x22
   20344:	2585b583          	ld	a1,600(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   20348:	00048513          	addi	a0,s1,0
   2034c:	b74f60ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   20350:	00050413          	addi	s0,a0,0
   20354:	0880006f          	jal	zero,203dc <dwarf::value::as_cstr(unsigned long*) const+0x494>
   20358:	fff00593          	addi	a1,zero,-1
   2035c:	03048513          	addi	a0,s1,48
   20360:	820f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20364:	d51ff06f          	jal	zero,200b4 <dwarf::value::as_cstr(unsigned long*) const+0x16c>
	_M_dispose();
   20368:	0004b783          	ld	a5,0(s1)
   2036c:	0107b783          	ld	a5,16(a5)
   20370:	00048513          	addi	a0,s1,0
   20374:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20378:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2037c:	00022797          	auipc	a5,0x22
   20380:	1047b783          	ld	a5,260(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20384:	0007c783          	lbu	a5,0(a5)
   20388:	02078663          	beq	a5,zero,203b4 <dwarf::value::as_cstr(unsigned long*) const+0x46c>
    _Atomic_word __result = *__mem;
   2038c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   20390:	fff5079b          	addiw	a5,a0,-1
   20394:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20398:	00100793          	addi	a5,zero,1
   2039c:	d2f510e3          	bne	a0,a5,200bc <dwarf::value::as_cstr(unsigned long*) const+0x174>
	    _M_destroy();
   203a0:	0004b783          	ld	a5,0(s1)
   203a4:	0187b783          	ld	a5,24(a5)
   203a8:	00048513          	addi	a0,s1,0
   203ac:	000780e7          	jalr	ra,0(a5)
   203b0:	d0dff06f          	jal	zero,200bc <dwarf::value::as_cstr(unsigned long*) const+0x174>
      return __exchange_and_add(__mem, __val);
   203b4:	fff00593          	addi	a1,zero,-1
   203b8:	03448513          	addi	a0,s1,52
   203bc:	fc5f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   203c0:	fd9ff06f          	jal	zero,20398 <dwarf::value::as_cstr(unsigned long*) const+0x450>
	if (_M_pi != nullptr)
   203c4:	00050413          	addi	s0,a0,0
   203c8:	05013503          	ld	a0,80(sp)
   203cc:	00050863          	beq	a0,zero,203dc <dwarf::value::as_cstr(unsigned long*) const+0x494>
	  _M_pi->_M_release();
   203d0:	00022317          	auipc	t1,0x22
   203d4:	ff833303          	ld	t1,-8(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   203d8:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   203dc:	07013503          	ld	a0,112(sp)
   203e0:	00050863          	beq	a0,zero,203f0 <dwarf::value::as_cstr(unsigned long*) const+0x4a8>
	  _M_pi->_M_release();
   203e4:	00022317          	auipc	t1,0x22
   203e8:	fe433303          	ld	t1,-28(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   203ec:	000300e7          	jalr	ra,0(t1)
   203f0:	00040513          	addi	a0,s0,0
   203f4:	afcf60ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   203f8:	00050413          	addi	s0,a0,0
   203fc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   20400:	05810793          	addi	a5,sp,88
   20404:	00f50463          	beq	a0,a5,2040c <dwarf::value::as_cstr(unsigned long*) const+0x4c4>
   20408:	908f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2040c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   20410:	03810793          	addi	a5,sp,56
   20414:	00f50463          	beq	a0,a5,2041c <dwarf::value::as_cstr(unsigned long*) const+0x4d4>
   20418:	8f8f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2041c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   20420:	01810793          	addi	a5,sp,24
   20424:	00f50463          	beq	a0,a5,2042c <dwarf::value::as_cstr(unsigned long*) const+0x4e4>
   20428:	8e8f60ef          	jal	ra,16510 <operator delete(void*)@plt>
   2042c:	00048513          	addi	a0,s1,0
   20430:	8a0f60ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   20434:	fa9ff06f          	jal	zero,203dc <dwarf::value::as_cstr(unsigned long*) const+0x494>
      { return _M_dataplus._M_p; }
   20438:	00050413          	addi	s0,a0,0
   2043c:	fd1ff06f          	jal	zero,2040c <dwarf::value::as_cstr(unsigned long*) const+0x4c4>
   20440:	00050413          	addi	s0,a0,0
   20444:	fd9ff06f          	jal	zero,2041c <dwarf::value::as_cstr(unsigned long*) const+0x4d4>
   20448:	00050413          	addi	s0,a0,0
   2044c:	fe1ff06f          	jal	zero,2042c <dwarf::value::as_cstr(unsigned long*) const+0x4e4>
  cursor cur(cu->data(), offset);
   20450:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20454:	07313423          	sd	s3,104(sp)
      : _M_pi(__r._M_pi)
   20458:	06013823          	sd	zero,112(sp)
   2045c:	0089b783          	ld	a5,8(s3)
   20460:	00e787b3          	add	a5,a5,a4
   20464:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   20468:	00842783          	lw	a5,8(s0)
   2046c:	00800713          	addi	a4,zero,8
   20470:	c0e788e3          	beq	a5,a4,20080 <dwarf::value::as_cstr(unsigned long*) const+0x138>
   20474:	00e00713          	addi	a4,zero,14
   20478:	e0e79ce3          	bne	a5,a4,20290 <dwarf::value::as_cstr(unsigned long*) const+0x348>
    section_offset off = cur.offset();
   2047c:	06810513          	addi	a0,sp,104
   20480:	c59fc0ef          	jal	ra,1d0d8 <dwarf::cursor::offset()>
   20484:	c5dff06f          	jal	zero,200e0 <dwarf::value::as_cstr(unsigned long*) const+0x198>

0000000000020488 <dwarf::value::as_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const>:
void value::as_string(string &buf) const {
   20488:	fd010113          	addi	sp,sp,-48
   2048c:	02113423          	sd	ra,40(sp)
   20490:	02813023          	sd	s0,32(sp)
   20494:	00913c23          	sd	s1,24(sp)
   20498:	00058413          	addi	s0,a1,0
  const char *p = as_cstr(&size);
   2049c:	00810593          	addi	a1,sp,8
   204a0:	aa9ff0ef          	jal	ra,1ff48 <dwarf::value::as_cstr(unsigned long*) const>
   204a4:	00050493          	addi	s1,a0,0
      { this->resize(__n, _CharT()); }
   204a8:	00000613          	addi	a2,zero,0
   204ac:	00813583          	ld	a1,8(sp)
   204b0:	00040513          	addi	a0,s0,0
   204b4:	efdf50ef          	jal	ra,163b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&buf.front(), p, size);
   204b8:	00813603          	ld	a2,8(sp)
   204bc:	00048593          	addi	a1,s1,0
   204c0:	00043503          	ld	a0,0(s0)
   204c4:	abcf60ef          	jal	ra,16780 <memmove@plt>
}
   204c8:	02813083          	ld	ra,40(sp)
   204cc:	02013403          	ld	s0,32(sp)
   204d0:	01813483          	ld	s1,24(sp)
   204d4:	03010113          	addi	sp,sp,48
   204d8:	00008067          	jalr	zero,0(ra)

00000000000204dc <dwarf::value::as_sec_offset() const>:

section_offset value::as_sec_offset() const {
   204dc:	f5010113          	addi	sp,sp,-176
   204e0:	0a113423          	sd	ra,168(sp)
   204e4:	0a813023          	sd	s0,160(sp)
   204e8:	08913c23          	sd	s1,152(sp)
   204ec:	09213823          	sd	s2,144(sp)
   204f0:	09313423          	sd	s3,136(sp)
   204f4:	00050913          	addi	s2,a0,0
  // Prior to DWARF 4, sec_offsets were encoded as data4 or
  // data8.
  cursor cur(cu->data(), offset);
   204f8:	00053503          	ld	a0,0(a0)
   204fc:	e49f60ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20500:	00053483          	ld	s1,0(a0)
      : _M_pi(__r._M_pi)
   20504:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   20508:	40040c63          	beq	s0,zero,20920 <dwarf::value::as_sec_offset() const+0x444>
    if (__is_single_threaded())
   2050c:	00022797          	auipc	a5,0x22
   20510:	f747b783          	ld	a5,-140(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20514:	0007c783          	lbu	a5,0(a5)
   20518:	0a078a63          	beq	a5,zero,205cc <dwarf::value::as_sec_offset() const+0xf0>
  { *__mem += __val; }
   2051c:	03042783          	lw	a5,48(s0)
   20520:	0017879b          	addiw	a5,a5,1
   20524:	02f42823          	sw	a5,48(s0)
   20528:	01093983          	ld	s3,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2052c:	06913423          	sd	s1,104(sp)
      : _M_pi(__r._M_pi)
   20530:	06813823          	sd	s0,112(sp)
    if (__is_single_threaded())
   20534:	00022797          	auipc	a5,0x22
   20538:	f4c7b783          	ld	a5,-180(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2053c:	0007c783          	lbu	a5,0(a5)
   20540:	08078e63          	beq	a5,zero,205dc <dwarf::value::as_sec_offset() const+0x100>
  { *__mem += __val; }
   20544:	03042783          	lw	a5,48(s0)
   20548:	0017879b          	addiw	a5,a5,1
   2054c:	02f42823          	sw	a5,48(s0)
   20550:	0084b783          	ld	a5,8(s1)
   20554:	013787b3          	add	a5,a5,s3
   20558:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   2055c:	00022797          	auipc	a5,0x22
   20560:	f247b783          	ld	a5,-220(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20564:	0007c783          	lbu	a5,0(a5)
   20568:	08078263          	beq	a5,zero,205ec <dwarf::value::as_sec_offset() const+0x110>
    _Atomic_word __result = *__mem;
   2056c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20570:	fff5079b          	addiw	a5,a0,-1
   20574:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20578:	00100793          	addi	a5,zero,1
   2057c:	3af51e63          	bne	a0,a5,20938 <dwarf::value::as_sec_offset() const+0x45c>
	_M_dispose();
   20580:	00043783          	ld	a5,0(s0)
   20584:	0107b783          	ld	a5,16(a5)
   20588:	00040513          	addi	a0,s0,0
   2058c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20590:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20594:	00022797          	auipc	a5,0x22
   20598:	eec7b783          	ld	a5,-276(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2059c:	0007c783          	lbu	a5,0(a5)
   205a0:	04078e63          	beq	a5,zero,205fc <dwarf::value::as_sec_offset() const+0x120>
    _Atomic_word __result = *__mem;
   205a4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   205a8:	fff5079b          	addiw	a5,a0,-1
   205ac:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   205b0:	00100793          	addi	a5,zero,1
   205b4:	38f51263          	bne	a0,a5,20938 <dwarf::value::as_sec_offset() const+0x45c>
	    _M_destroy();
   205b8:	00043783          	ld	a5,0(s0)
   205bc:	0187b783          	ld	a5,24(a5)
   205c0:	00040513          	addi	a0,s0,0
   205c4:	000780e7          	jalr	ra,0(a5)
   205c8:	3700006f          	jal	zero,20938 <dwarf::value::as_sec_offset() const+0x45c>
      __atomic_add(__mem, __val);
   205cc:	00100593          	addi	a1,zero,1
   205d0:	03040513          	addi	a0,s0,48
   205d4:	d7df50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   205d8:	f51ff06f          	jal	zero,20528 <dwarf::value::as_sec_offset() const+0x4c>
   205dc:	00100593          	addi	a1,zero,1
   205e0:	03040513          	addi	a0,s0,48
   205e4:	d6df50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   205e8:	f69ff06f          	jal	zero,20550 <dwarf::value::as_sec_offset() const+0x74>
      return __exchange_and_add(__mem, __val);
   205ec:	fff00593          	addi	a1,zero,-1
   205f0:	03040513          	addi	a0,s0,48
   205f4:	d8df50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   205f8:	f81ff06f          	jal	zero,20578 <dwarf::value::as_sec_offset() const+0x9c>
   205fc:	fff00593          	addi	a1,zero,-1
   20600:	03440513          	addi	a0,s0,52
   20604:	d7df50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20608:	fa9ff06f          	jal	zero,205b0 <dwarf::value::as_sec_offset() const+0xd4>
  switch (form) {
   2060c:	00600713          	addi	a4,zero,6
   20610:	16e79663          	bne	a5,a4,2077c <dwarf::value::as_sec_offset() const+0x2a0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20614:	06813783          	ld	a5,104(sp)
   20618:	0107b703          	ld	a4,16(a5)
   2061c:	07813783          	ld	a5,120(sp)
   20620:	40f70633          	sub	a2,a4,a5
   20624:	00300693          	addi	a3,zero,3
   20628:	00c6f463          	bgeu	a3,a2,20630 <dwarf::value::as_sec_offset() const+0x154>
   2062c:	00e7e663          	bltu	a5,a4,20638 <dwarf::value::as_sec_offset() const+0x15c>
      underflow();
   20630:	06810513          	addi	a0,sp,104
   20634:	b18fc0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20638:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   2063c:	06813783          	ld	a5,104(sp)
   20640:	01c7a783          	lw	a5,28(a5)
   20644:	08079263          	bne	a5,zero,206c8 <dwarf::value::as_sec_offset() const+0x1ec>
   20648:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   2064c:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20650:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   20654:	0006c703          	lbu	a4,0(a3)
   20658:	00f71733          	sll	a4,a4,a5
   2065c:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20660:	00168693          	addi	a3,a3,1
   20664:	0087879b          	addiw	a5,a5,8
   20668:	feb796e3          	bne	a5,a1,20654 <dwarf::value::as_sec_offset() const+0x178>
    pos += sizeof(T);
   2066c:	00460613          	addi	a2,a2,4
   20670:	06c13c23          	sd	a2,120(sp)
   20674:	02041413          	slli	s0,s0,0x20
   20678:	02045413          	srli	s0,s0,0x20
	if (_M_pi != nullptr)
   2067c:	07013483          	ld	s1,112(sp)
   20680:	02048463          	beq	s1,zero,206a8 <dwarf::value::as_sec_offset() const+0x1cc>
    if (__is_single_threaded())
   20684:	00022797          	auipc	a5,0x22
   20688:	dfc7b783          	ld	a5,-516(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2068c:	0007c783          	lbu	a5,0(a5)
   20690:	1a078a63          	beq	a5,zero,20844 <dwarf::value::as_sec_offset() const+0x368>
    _Atomic_word __result = *__mem;
   20694:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20698:	fff5079b          	addiw	a5,a0,-1
   2069c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   206a0:	00100793          	addi	a5,zero,1
   206a4:	1af50863          	beq	a0,a5,20854 <dwarf::value::as_sec_offset() const+0x378>
    return cur.offset();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sec_offset");
  }
}
   206a8:	00040513          	addi	a0,s0,0
   206ac:	0a813083          	ld	ra,168(sp)
   206b0:	0a013403          	ld	s0,160(sp)
   206b4:	09813483          	ld	s1,152(sp)
   206b8:	09013903          	ld	s2,144(sp)
   206bc:	08813983          	ld	s3,136(sp)
   206c0:	0b010113          	addi	sp,sp,176
   206c4:	00008067          	jalr	zero,0(ra)
   206c8:	00060793          	addi	a5,a2,0
   206cc:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   206d0:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   206d4:	00841413          	slli	s0,s0,0x8
   206d8:	0007c703          	lbu	a4,0(a5)
   206dc:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   206e0:	00178793          	addi	a5,a5,1
   206e4:	fed798e3          	bne	a5,a3,206d4 <dwarf::value::as_sec_offset() const+0x1f8>
   206e8:	f85ff06f          	jal	zero,2066c <dwarf::value::as_sec_offset() const+0x190>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   206ec:	06813783          	ld	a5,104(sp)
   206f0:	0107b703          	ld	a4,16(a5)
   206f4:	07813783          	ld	a5,120(sp)
   206f8:	40f70633          	sub	a2,a4,a5
   206fc:	00700693          	addi	a3,zero,7
   20700:	00c6f463          	bgeu	a3,a2,20708 <dwarf::value::as_sec_offset() const+0x22c>
   20704:	00e7e663          	bltu	a5,a4,20710 <dwarf::value::as_sec_offset() const+0x234>
      underflow();
   20708:	06810513          	addi	a0,sp,104
   2070c:	a40fc0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20710:	07813603          	ld	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   20714:	06813783          	ld	a5,104(sp)
   20718:	01c7a783          	lw	a5,28(a5)
   2071c:	02079a63          	bne	a5,zero,20750 <dwarf::value::as_sec_offset() const+0x274>
   20720:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   20724:	00000413          	addi	s0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20728:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   2072c:	0006c703          	lbu	a4,0(a3)
   20730:	00f71733          	sll	a4,a4,a5
   20734:	00e46433          	or	s0,s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20738:	00168693          	addi	a3,a3,1
   2073c:	0087879b          	addiw	a5,a5,8
   20740:	feb796e3          	bne	a5,a1,2072c <dwarf::value::as_sec_offset() const+0x250>
    pos += sizeof(T);
   20744:	00860613          	addi	a2,a2,8
   20748:	06c13c23          	sd	a2,120(sp)
   2074c:	f31ff06f          	jal	zero,2067c <dwarf::value::as_sec_offset() const+0x1a0>
   20750:	00060793          	addi	a5,a2,0
   20754:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   20758:	00000413          	addi	s0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   2075c:	00841413          	slli	s0,s0,0x8
   20760:	0007c703          	lbu	a4,0(a5)
   20764:	00876433          	or	s0,a4,s0
      for (unsigned i = 0; i < sizeof(T); i++)
   20768:	00178793          	addi	a5,a5,1
   2076c:	fed798e3          	bne	a5,a3,2075c <dwarf::value::as_sec_offset() const+0x280>
   20770:	fd5ff06f          	jal	zero,20744 <dwarf::value::as_sec_offset() const+0x268>
    return cur.offset();
   20774:	00050413          	addi	s0,a0,0
   20778:	f05ff06f          	jal	zero,2067c <dwarf::value::as_sec_offset() const+0x1a0>
                              " as sec_offset");
   2077c:	01000513          	addi	a0,zero,16
   20780:	ca1f50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   20784:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   20788:	00c92583          	lw	a1,12(s2)
   2078c:	00810513          	addi	a0,sp,8
   20790:	4e80e0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   20794:	00016617          	auipc	a2,0x16
   20798:	51c60613          	addi	a2,a2,1308 # 36cb0 <std::piecewise_construct+0x1c8>
   2079c:	00000593          	addi	a1,zero,0
   207a0:	00810513          	addi	a0,sp,8
   207a4:	bedf50ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   207a8:	00050593          	addi	a1,a0,0
   207ac:	02810413          	addi	s0,sp,40
   207b0:	00040513          	addi	a0,s0,0
   207b4:	cbdf50ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   207b8:	00016597          	auipc	a1,0x16
   207bc:	57858593          	addi	a1,a1,1400 # 36d30 <std::piecewise_construct+0x248>
   207c0:	00040513          	addi	a0,s0,0
   207c4:	fddf50ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   207c8:	00050593          	addi	a1,a0,0
   207cc:	04810413          	addi	s0,sp,72
   207d0:	00040513          	addi	a0,s0,0
   207d4:	c9df50ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   207d8:	00040593          	addi	a1,s0,0
   207dc:	00048513          	addi	a0,s1,0
   207e0:	810f60ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   207e4:	00022797          	auipc	a5,0x22
   207e8:	c647b783          	ld	a5,-924(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   207ec:	01078793          	addi	a5,a5,16
   207f0:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   207f4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   207f8:	05810793          	addi	a5,sp,88
   207fc:	00f50463          	beq	a0,a5,20804 <dwarf::value::as_sec_offset() const+0x328>
   20800:	d11f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20804:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   20808:	03810793          	addi	a5,sp,56
   2080c:	00f50463          	beq	a0,a5,20814 <dwarf::value::as_sec_offset() const+0x338>
   20810:	d01f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20814:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   20818:	01810793          	addi	a5,sp,24
   2081c:	00f50463          	beq	a0,a5,20824 <dwarf::value::as_sec_offset() const+0x348>
   20820:	cf1f50ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as sec_offset");
   20824:	00022617          	auipc	a2,0x22
   20828:	db463603          	ld	a2,-588(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   2082c:	00022597          	auipc	a1,0x22
   20830:	d6c5b583          	ld	a1,-660(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   20834:	00048513          	addi	a0,s1,0
   20838:	e89f50ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   2083c:	00050413          	addi	s0,a0,0
   20840:	0ac0006f          	jal	zero,208ec <dwarf::value::as_sec_offset() const+0x410>
      return __exchange_and_add(__mem, __val);
   20844:	fff00593          	addi	a1,zero,-1
   20848:	03048513          	addi	a0,s1,48
   2084c:	b35f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20850:	e51ff06f          	jal	zero,206a0 <dwarf::value::as_sec_offset() const+0x1c4>
	_M_dispose();
   20854:	0004b783          	ld	a5,0(s1)
   20858:	0107b783          	ld	a5,16(a5)
   2085c:	00048513          	addi	a0,s1,0
   20860:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20864:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20868:	00022797          	auipc	a5,0x22
   2086c:	c187b783          	ld	a5,-1000(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20870:	0007c783          	lbu	a5,0(a5)
   20874:	02078663          	beq	a5,zero,208a0 <dwarf::value::as_sec_offset() const+0x3c4>
    _Atomic_word __result = *__mem;
   20878:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2087c:	fff5079b          	addiw	a5,a0,-1
   20880:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20884:	00100793          	addi	a5,zero,1
   20888:	e2f510e3          	bne	a0,a5,206a8 <dwarf::value::as_sec_offset() const+0x1cc>
	    _M_destroy();
   2088c:	0004b783          	ld	a5,0(s1)
   20890:	0187b783          	ld	a5,24(a5)
   20894:	00048513          	addi	a0,s1,0
   20898:	000780e7          	jalr	ra,0(a5)
   2089c:	e0dff06f          	jal	zero,206a8 <dwarf::value::as_sec_offset() const+0x1cc>
      return __exchange_and_add(__mem, __val);
   208a0:	fff00593          	addi	a1,zero,-1
   208a4:	03448513          	addi	a0,s1,52
   208a8:	ad9f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   208ac:	fd9ff06f          	jal	zero,20884 <dwarf::value::as_sec_offset() const+0x3a8>
      { return _M_dataplus._M_p; }
   208b0:	00050413          	addi	s0,a0,0
   208b4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   208b8:	05810793          	addi	a5,sp,88
   208bc:	00f50463          	beq	a0,a5,208c4 <dwarf::value::as_sec_offset() const+0x3e8>
   208c0:	c51f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   208c4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   208c8:	03810793          	addi	a5,sp,56
   208cc:	00f50463          	beq	a0,a5,208d4 <dwarf::value::as_sec_offset() const+0x3f8>
   208d0:	c41f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   208d4:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   208d8:	01810793          	addi	a5,sp,24
   208dc:	00f50463          	beq	a0,a5,208e4 <dwarf::value::as_sec_offset() const+0x408>
   208e0:	c31f50ef          	jal	ra,16510 <operator delete(void*)@plt>
   208e4:	00048513          	addi	a0,s1,0
   208e8:	be9f50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   208ec:	07013503          	ld	a0,112(sp)
   208f0:	00050863          	beq	a0,zero,20900 <dwarf::value::as_sec_offset() const+0x424>
	  _M_pi->_M_release();
   208f4:	00022317          	auipc	t1,0x22
   208f8:	ad433303          	ld	t1,-1324(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   208fc:	000300e7          	jalr	ra,0(t1)
   20900:	00040513          	addi	a0,s0,0
   20904:	dedf50ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   20908:	00050413          	addi	s0,a0,0
   2090c:	fb9ff06f          	jal	zero,208c4 <dwarf::value::as_sec_offset() const+0x3e8>
   20910:	00050413          	addi	s0,a0,0
   20914:	fc1ff06f          	jal	zero,208d4 <dwarf::value::as_sec_offset() const+0x3f8>
   20918:	00050413          	addi	s0,a0,0
   2091c:	fc9ff06f          	jal	zero,208e4 <dwarf::value::as_sec_offset() const+0x408>
  cursor cur(cu->data(), offset);
   20920:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20924:	06913423          	sd	s1,104(sp)
      : _M_pi(__r._M_pi)
   20928:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   2092c:	0084b783          	ld	a5,8(s1)
   20930:	00e787b3          	add	a5,a5,a4
   20934:	06f13c23          	sd	a5,120(sp)
  switch (form) {
   20938:	00892783          	lw	a5,8(s2)
   2093c:	00700713          	addi	a4,zero,7
   20940:	dae786e3          	beq	a5,a4,206ec <dwarf::value::as_sec_offset() const+0x210>
   20944:	01700713          	addi	a4,zero,23
   20948:	cce792e3          	bne	a5,a4,2060c <dwarf::value::as_sec_offset() const+0x130>
    return cur.offset();
   2094c:	06810513          	addi	a0,sp,104
   20950:	f88fc0ef          	jal	ra,1d0d8 <dwarf::cursor::offset()>
   20954:	e21ff06f          	jal	zero,20774 <dwarf::value::as_sec_offset() const+0x298>

0000000000020958 <dwarf::value::resolve_indirect(dwarf::DW_AT)>:

void value::resolve_indirect(DW_AT name) {
  if (form != DW_FORM::indirect)
   20958:	00852703          	lw	a4,8(a0)
   2095c:	01600793          	addi	a5,zero,22
   20960:	00f70463          	beq	a4,a5,20968 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x10>
   20964:	00008067          	jalr	zero,0(ra)
void value::resolve_indirect(DW_AT name) {
   20968:	fa010113          	addi	sp,sp,-96
   2096c:	04113c23          	sd	ra,88(sp)
   20970:	04813823          	sd	s0,80(sp)
   20974:	04913423          	sd	s1,72(sp)
   20978:	05213023          	sd	s2,64(sp)
   2097c:	03313c23          	sd	s3,56(sp)
   20980:	03413823          	sd	s4,48(sp)
   20984:	00050413          	addi	s0,a0,0
   20988:	00058913          	addi	s2,a1,0
    return;

  cursor c(cu->data(), offset);
   2098c:	00053503          	ld	a0,0(a0)
   20990:	9b5f60ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20994:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   20998:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   2099c:	26048663          	beq	s1,zero,20c08 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2b0>
    if (__is_single_threaded())
   209a0:	00022797          	auipc	a5,0x22
   209a4:	ae07b783          	ld	a5,-1312(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   209a8:	0007c783          	lbu	a5,0(a5)
   209ac:	0a078a63          	beq	a5,zero,20a60 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x108>
  { *__mem += __val; }
   209b0:	0304a783          	lw	a5,48(s1)
   209b4:	0017879b          	addiw	a5,a5,1
   209b8:	02f4a823          	sw	a5,48(s1)
   209bc:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   209c0:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   209c4:	00913823          	sd	s1,16(sp)
    if (__is_single_threaded())
   209c8:	00022797          	auipc	a5,0x22
   209cc:	ab87b783          	ld	a5,-1352(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   209d0:	0007c783          	lbu	a5,0(a5)
   209d4:	08078e63          	beq	a5,zero,20a70 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x118>
  { *__mem += __val; }
   209d8:	0304a783          	lw	a5,48(s1)
   209dc:	0017879b          	addiw	a5,a5,1
   209e0:	02f4a823          	sw	a5,48(s1)
   209e4:	0089b783          	ld	a5,8(s3)
   209e8:	014787b3          	add	a5,a5,s4
   209ec:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   209f0:	00022797          	auipc	a5,0x22
   209f4:	a907b783          	ld	a5,-1392(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   209f8:	0007c783          	lbu	a5,0(a5)
   209fc:	08078263          	beq	a5,zero,20a80 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x128>
    _Atomic_word __result = *__mem;
   20a00:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   20a04:	fff5079b          	addiw	a5,a0,-1
   20a08:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20a0c:	00100793          	addi	a5,zero,1
   20a10:	20f51863          	bne	a0,a5,20c20 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
	_M_dispose();
   20a14:	0004b783          	ld	a5,0(s1)
   20a18:	0107b783          	ld	a5,16(a5)
   20a1c:	00048513          	addi	a0,s1,0
   20a20:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20a24:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20a28:	00022797          	auipc	a5,0x22
   20a2c:	a587b783          	ld	a5,-1448(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20a30:	0007c783          	lbu	a5,0(a5)
   20a34:	04078e63          	beq	a5,zero,20a90 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x138>
    _Atomic_word __result = *__mem;
   20a38:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   20a3c:	fff7871b          	addiw	a4,a5,-1
   20a40:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20a44:	00100713          	addi	a4,zero,1
   20a48:	1ce79c63          	bne	a5,a4,20c20 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
	    _M_destroy();
   20a4c:	0004b783          	ld	a5,0(s1)
   20a50:	0187b783          	ld	a5,24(a5)
   20a54:	00048513          	addi	a0,s1,0
   20a58:	000780e7          	jalr	ra,0(a5)
   20a5c:	1c40006f          	jal	zero,20c20 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2c8>
      __atomic_add(__mem, __val);
   20a60:	00100593          	addi	a1,zero,1
   20a64:	03048513          	addi	a0,s1,48
   20a68:	8e9f50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20a6c:	f51ff06f          	jal	zero,209bc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x64>
   20a70:	00100593          	addi	a1,zero,1
   20a74:	03048513          	addi	a0,s1,48
   20a78:	8d9f50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20a7c:	f69ff06f          	jal	zero,209e4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x8c>
      return __exchange_and_add(__mem, __val);
   20a80:	fff00593          	addi	a1,zero,-1
   20a84:	03048513          	addi	a0,s1,48
   20a88:	8f9f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20a8c:	f81ff06f          	jal	zero,20a0c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xb4>
   20a90:	fff00593          	addi	a1,zero,-1
   20a94:	03448513          	addi	a0,s1,52
   20a98:	8e9f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20a9c:	00050793          	addi	a5,a0,0
   20aa0:	fa5ff06f          	jal	zero,20a44 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xec>
    return 0;
   20aa4:	00000613          	addi	a2,zero,0
  DW_FORM form;
  do {
    form = (DW_FORM)c.uleb128();
   20aa8:	0006061b          	addiw	a2,a2,0
  } while (form == DW_FORM::indirect);
   20aac:	04961c63          	bne	a2,s1,20b04 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ac>
    while (pos < sec->end) {
   20ab0:	01813783          	ld	a5,24(sp)
      { return _M_ptr; }
   20ab4:	00813583          	ld	a1,8(sp)
   20ab8:	0105b703          	ld	a4,16(a1)
   20abc:	02e7fe63          	bgeu	a5,a4,20af8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1a0>
    std::uint64_t result = 0;
   20ac0:	00000613          	addi	a2,zero,0
    int shift = 0;
   20ac4:	00098813          	addi	a6,s3,0
      uint8_t byte = *(uint8_t *)(pos++);
   20ac8:	00178793          	addi	a5,a5,1
   20acc:	00f13c23          	sd	a5,24(sp)
   20ad0:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   20ad4:	07f77693          	andi	a3,a4,127
   20ad8:	010696b3          	sll	a3,a3,a6
   20adc:	00d66633          	or	a2,a2,a3
      if ((byte & 0x80) == 0)
   20ae0:	0187171b          	slliw	a4,a4,0x18
   20ae4:	4187571b          	sraiw	a4,a4,0x18
   20ae8:	fc0750e3          	bge	a4,zero,20aa8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x150>
      shift += 7;
   20aec:	0078081b          	addiw	a6,a6,7
    while (pos < sec->end) {
   20af0:	0105b703          	ld	a4,16(a1)
   20af4:	fce7eae3          	bltu	a5,a4,20ac8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x170>
    underflow();
   20af8:	000a0513          	addi	a0,s4,0
   20afc:	e51fb0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   20b00:	fa5ff06f          	jal	zero,20aa4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x14c>
  typ = attribute_spec(name, form).type;
   20b04:	00090593          	addi	a1,s2,0
   20b08:	02010513          	addi	a0,sp,32
   20b0c:	049020ef          	jal	ra,23354 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
   20b10:	02812783          	lw	a5,40(sp)
   20b14:	00f42623          	sw	a5,12(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   20b18:	00813783          	ld	a5,8(sp)
   20b1c:	0087b703          	ld	a4,8(a5)
   20b20:	01813783          	ld	a5,24(sp)
   20b24:	40e787b3          	sub	a5,a5,a4
  offset = c.get_section_offset();
   20b28:	00f43823          	sd	a5,16(s0)
	if (_M_pi != nullptr)
   20b2c:	01013403          	ld	s0,16(sp)
   20b30:	02040463          	beq	s0,zero,20b58 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
    if (__is_single_threaded())
   20b34:	00022797          	auipc	a5,0x22
   20b38:	94c7b783          	ld	a5,-1716(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20b3c:	0007c783          	lbu	a5,0(a5)
   20b40:	02078c63          	beq	a5,zero,20b78 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x220>
    _Atomic_word __result = *__mem;
   20b44:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20b48:	fff5079b          	addiw	a5,a0,-1
   20b4c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20b50:	00100793          	addi	a5,zero,1
   20b54:	02f50a63          	beq	a0,a5,20b88 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x230>
}
   20b58:	05813083          	ld	ra,88(sp)
   20b5c:	05013403          	ld	s0,80(sp)
   20b60:	04813483          	ld	s1,72(sp)
   20b64:	04013903          	ld	s2,64(sp)
   20b68:	03813983          	ld	s3,56(sp)
   20b6c:	03013a03          	ld	s4,48(sp)
   20b70:	06010113          	addi	sp,sp,96
   20b74:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   20b78:	fff00593          	addi	a1,zero,-1
   20b7c:	03040513          	addi	a0,s0,48
   20b80:	801f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20b84:	fcdff06f          	jal	zero,20b50 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1f8>
	_M_dispose();
   20b88:	00043783          	ld	a5,0(s0)
   20b8c:	0107b783          	ld	a5,16(a5)
   20b90:	00040513          	addi	a0,s0,0
   20b94:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20b98:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20b9c:	00022797          	auipc	a5,0x22
   20ba0:	8e47b783          	ld	a5,-1820(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20ba4:	0007c783          	lbu	a5,0(a5)
   20ba8:	02078663          	beq	a5,zero,20bd4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x27c>
    _Atomic_word __result = *__mem;
   20bac:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   20bb0:	fff7871b          	addiw	a4,a5,-1
   20bb4:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20bb8:	00100713          	addi	a4,zero,1
   20bbc:	f8e79ee3          	bne	a5,a4,20b58 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
	    _M_destroy();
   20bc0:	00043783          	ld	a5,0(s0)
   20bc4:	0187b783          	ld	a5,24(a5)
   20bc8:	00040513          	addi	a0,s0,0
   20bcc:	000780e7          	jalr	ra,0(a5)
   20bd0:	f89ff06f          	jal	zero,20b58 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x200>
      return __exchange_and_add(__mem, __val);
   20bd4:	fff00593          	addi	a1,zero,-1
   20bd8:	03440513          	addi	a0,s0,52
   20bdc:	fa4f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20be0:	00050793          	addi	a5,a0,0
   20be4:	fd5ff06f          	jal	zero,20bb8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x260>
	if (_M_pi != nullptr)
   20be8:	00050413          	addi	s0,a0,0
   20bec:	01013503          	ld	a0,16(sp)
   20bf0:	00050863          	beq	a0,zero,20c00 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x2a8>
	  _M_pi->_M_release();
   20bf4:	00021317          	auipc	t1,0x21
   20bf8:	7d433303          	ld	t1,2004(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   20bfc:	000300e7          	jalr	ra,0(t1)
   20c00:	00040513          	addi	a0,s0,0
   20c04:	aedf50ef          	jal	ra,166f0 <_Unwind_Resume@plt>
  cursor c(cu->data(), offset);
   20c08:	01043703          	ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20c0c:	01313423          	sd	s3,8(sp)
      : _M_pi(__r._M_pi)
   20c10:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   20c14:	0089b783          	ld	a5,8(s3)
   20c18:	00e787b3          	add	a5,a5,a4
   20c1c:	00f13c23          	sd	a5,24(sp)
    underflow();
   20c20:	00810a13          	addi	s4,sp,8
    int shift = 0;
   20c24:	00000993          	addi	s3,zero,0
  } while (form == DW_FORM::indirect);
   20c28:	01600493          	addi	s1,zero,22
   20c2c:	e85ff06f          	jal	zero,20ab0 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x158>

0000000000020c30 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>:
    : cu(cu), form(form), typ(typ), offset(offset) {
   20c30:	00b53023          	sd	a1,0(a0)
   20c34:	00d52423          	sw	a3,8(a0)
   20c38:	00e52623          	sw	a4,12(a0)
   20c3c:	00f53823          	sd	a5,16(a0)
  if (form == DW_FORM::indirect)
   20c40:	01600793          	addi	a5,zero,22
   20c44:	00f68463          	beq	a3,a5,20c4c <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)+0x1c>
   20c48:	00008067          	jalr	zero,0(ra)
value::value(const unit *cu, DW_AT name, DW_FORM form, type typ,
   20c4c:	ff010113          	addi	sp,sp,-16
   20c50:	00113423          	sd	ra,8(sp)
    resolve_indirect(name);
   20c54:	00060593          	addi	a1,a2,0
   20c58:	d01ff0ef          	jal	ra,20958 <dwarf::value::resolve_indirect(dwarf::DW_AT)>
}
   20c5c:	00813083          	ld	ra,8(sp)
   20c60:	01010113          	addi	sp,sp,16
   20c64:	00008067          	jalr	zero,0(ra)

0000000000020c68 <dwarf::value::as_rangelist() const>:
rangelist value::as_rangelist() const {
   20c68:	f3010113          	addi	sp,sp,-208
   20c6c:	0c113423          	sd	ra,200(sp)
   20c70:	0c813023          	sd	s0,192(sp)
   20c74:	0a913c23          	sd	s1,184(sp)
   20c78:	0b213823          	sd	s2,176(sp)
   20c7c:	0b313423          	sd	s3,168(sp)
   20c80:	0b413023          	sd	s4,160(sp)
   20c84:	09513c23          	sd	s5,152(sp)
   20c88:	09613823          	sd	s6,144(sp)
   20c8c:	09713423          	sd	s7,136(sp)
   20c90:	09813023          	sd	s8,128(sp)
   20c94:	00050a13          	addi	s4,a0,0
   20c98:	00058913          	addi	s2,a1,0
  section_offset off = as_sec_offset();
   20c9c:	00058513          	addi	a0,a1,0
   20ca0:	83dff0ef          	jal	ra,204dc <dwarf::value::as_sec_offset() const>
   20ca4:	00050a93          	addi	s5,a0,0
  die cudie = cu->root();
   20ca8:	00093503          	ld	a0,0(s2)
   20cac:	a14f90ef          	jal	ra,19ec0 <dwarf::unit::root() const>
   20cb0:	00050413          	addi	s0,a0,0
  die(const die &o) = default;
   20cb4:	00052783          	lw	a5,0(a0)
   20cb8:	00f12823          	sw	a5,16(sp)
   20cbc:	00853783          	ld	a5,8(a0)
   20cc0:	00f13c23          	sd	a5,24(sp)
   20cc4:	01053783          	ld	a5,16(a0)
   20cc8:	02f13023          	sd	a5,32(sp)
   20ccc:	01853783          	ld	a5,24(a0)
   20cd0:	02f13423          	sd	a5,40(sp)
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   20cd4:	03010793          	addi	a5,sp,48
   20cd8:	06f13023          	sd	a5,96(sp)
   20cdc:	06f13423          	sd	a5,104(sp)
   20ce0:	06010793          	addi	a5,sp,96
   20ce4:	06f13823          	sd	a5,112(sp)
  size_type size() const { return end - base; }
   20ce8:	05853983          	ld	s3,88(a0)
   20cec:	05053783          	ld	a5,80(a0)
   20cf0:	40f989b3          	sub	s3,s3,a5
   20cf4:	4039d493          	srai	s1,s3,0x3
    if (n <= (size_type)(cap - base))
   20cf8:	03000793          	addi	a5,zero,48
   20cfc:	0737f663          	bgeu	a5,s3,20d68 <dwarf::value::as_rangelist() const+0x100>
    size_type target = cap - base;
   20d00:	00600513          	addi	a0,zero,6
      target <<= 1;
   20d04:	00151513          	slli	a0,a0,0x1
    while (target < n)
   20d08:	fe956ee3          	bltu	a0,s1,20d04 <dwarf::value::as_rangelist() const+0x9c>
    char *newbuf = new char[sizeof(T[target])];
   20d0c:	00351b13          	slli	s6,a0,0x3
   20d10:	000b0513          	addi	a0,s6,0
   20d14:	e1cf50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   20d18:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   20d1c:	06013503          	ld	a0,96(sp)
    for (; src < end; src++, dest++) {
   20d20:	06813703          	ld	a4,104(sp)
   20d24:	08e57a63          	bgeu	a0,a4,20db8 <dwarf::value::as_rangelist() const+0x150>
    T *src = base, *dest = (T *)newbuf;
   20d28:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   20d2c:	00878793          	addi	a5,a5,8
   20d30:	fee7eee3          	bltu	a5,a4,20d2c <dwarf::value::as_rangelist() const+0xc4>
   20d34:	fff70b93          	addi	s7,a4,-1
   20d38:	40ab8bb3          	sub	s7,s7,a0
   20d3c:	ff8bfb93          	andi	s7,s7,-8
   20d40:	008b8b93          	addi	s7,s7,8
   20d44:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   20d48:	03010793          	addi	a5,sp,48
   20d4c:	00f50663          	beq	a0,a5,20d58 <dwarf::value::as_rangelist() const+0xf0>
      delete[] (char *)base;
   20d50:	00050463          	beq	a0,zero,20d58 <dwarf::value::as_rangelist() const+0xf0>
   20d54:	86df50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20d58:	07813023          	sd	s8,96(sp)
    end = dest;
   20d5c:	07713423          	sd	s7,104(sp)
    cap = base + target;
   20d60:	016c0c33          	add	s8,s8,s6
   20d64:	07813823          	sd	s8,112(sp)
    for (size_type i = 0; i < osize; i++)
   20d68:	02048663          	beq	s1,zero,20d94 <dwarf::value::as_rangelist() const+0x12c>
   20d6c:	00000793          	addi	a5,zero,0
   20d70:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   20d74:	05043703          	ld	a4,80(s0)
   20d78:	00d70733          	add	a4,a4,a3
   20d7c:	00073603          	ld	a2,0(a4)
   20d80:	06013703          	ld	a4,96(sp)
   20d84:	00d70733          	add	a4,a4,a3
   20d88:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   20d8c:	00178793          	addi	a5,a5,1
   20d90:	fef490e3          	bne	s1,a5,20d70 <dwarf::value::as_rangelist() const+0x108>
    end = base + osize;
   20d94:	06013783          	ld	a5,96(sp)
   20d98:	013787b3          	add	a5,a5,s3
   20d9c:	06f13423          	sd	a5,104(sp)
   20da0:	06843783          	ld	a5,104(s0)
   20da4:	06f13c23          	sd	a5,120(sp)
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   20da8:	01100593          	addi	a1,zero,17
   20dac:	01010513          	addi	a0,sp,16
   20db0:	a45fc0ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   20db4:	00c0006f          	jal	zero,20dc0 <dwarf::value::as_rangelist() const+0x158>
    T *src = base, *dest = (T *)newbuf;
   20db8:	000c0b93          	addi	s7,s8,0
   20dbc:	f8dff06f          	jal	zero,20d48 <dwarf::value::as_rangelist() const+0xe0>
   20dc0:	00050e63          	beq	a0,zero,20ddc <dwarf::value::as_rangelist() const+0x174>
   20dc4:	01010513          	addi	a0,sp,16
   20dc8:	5c90a0ef          	jal	ra,2bb90 <dwarf::at_low_pc(dwarf::die const&)>
   20dcc:	00050493          	addi	s1,a0,0
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   20dd0:	00093503          	ld	a0,0(s2)
   20dd4:	d5cf60ef          	jal	ra,17330 <dwarf::unit::get_dwarf() const>
   20dd8:	00c0006f          	jal	zero,20de4 <dwarf::value::as_rangelist() const+0x17c>
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   20ddc:	00000493          	addi	s1,zero,0
   20de0:	ff1ff06f          	jal	zero,20dd0 <dwarf::value::as_rangelist() const+0x168>
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   20de4:	00050593          	addi	a1,a0,0
   20de8:	00900613          	addi	a2,zero,9
   20dec:	00010513          	addi	a0,sp,0
   20df0:	d6cf60ef          	jal	ra,1735c <dwarf::dwarf::get_section(dwarf::section_type) const>
  auto cusec = cu->data();
   20df4:	00093503          	ld	a0,0(s2)
   20df8:	d4cf60ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   20dfc:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   20e00:	00853403          	ld	s0,8(a0)
	if (_M_pi != nullptr)
   20e04:	02040063          	beq	s0,zero,20e24 <dwarf::value::as_rangelist() const+0x1bc>
    if (__is_single_threaded())
   20e08:	00021797          	auipc	a5,0x21
   20e0c:	6787b783          	ld	a5,1656(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20e10:	0007c783          	lbu	a5,0(a5)
   20e14:	02078663          	beq	a5,zero,20e40 <dwarf::value::as_rangelist() const+0x1d8>
  { *__mem += __val; }
   20e18:	03042783          	lw	a5,48(s0)
   20e1c:	0017879b          	addiw	a5,a5,1
   20e20:	02f42823          	sw	a5,48(s0)
  return rangelist(sec, off, cusec->addr_size, cu_low_pc);
   20e24:	00048713          	addi	a4,s1,0
   20e28:	02092683          	lw	a3,32(s2)
   20e2c:	000a8613          	addi	a2,s5,0
   20e30:	00010593          	addi	a1,sp,0
   20e34:	000a0513          	addi	a0,s4,0
   20e38:	095050ef          	jal	ra,266cc <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>
   20e3c:	0140006f          	jal	zero,20e50 <dwarf::value::as_rangelist() const+0x1e8>
      __atomic_add(__mem, __val);
   20e40:	00100593          	addi	a1,zero,1
   20e44:	03040513          	addi	a0,s0,48
   20e48:	d08f50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20e4c:	fd9ff06f          	jal	zero,20e24 <dwarf::value::as_rangelist() const+0x1bc>
	if (_M_pi != nullptr)
   20e50:	02040463          	beq	s0,zero,20e78 <dwarf::value::as_rangelist() const+0x210>
    if (__is_single_threaded())
   20e54:	00021797          	auipc	a5,0x21
   20e58:	62c7b783          	ld	a5,1580(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20e5c:	0007c783          	lbu	a5,0(a5)
   20e60:	0a078263          	beq	a5,zero,20f04 <dwarf::value::as_rangelist() const+0x29c>
    _Atomic_word __result = *__mem;
   20e64:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20e68:	fff5079b          	addiw	a5,a0,-1
   20e6c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20e70:	00100793          	addi	a5,zero,1
   20e74:	0af50063          	beq	a0,a5,20f14 <dwarf::value::as_rangelist() const+0x2ac>
	if (_M_pi != nullptr)
   20e78:	00813403          	ld	s0,8(sp)
   20e7c:	02040463          	beq	s0,zero,20ea4 <dwarf::value::as_rangelist() const+0x23c>
    if (__is_single_threaded())
   20e80:	00021797          	auipc	a5,0x21
   20e84:	6007b783          	ld	a5,1536(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20e88:	0007c783          	lbu	a5,0(a5)
   20e8c:	0e078263          	beq	a5,zero,20f70 <dwarf::value::as_rangelist() const+0x308>
    _Atomic_word __result = *__mem;
   20e90:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   20e94:	fff5079b          	addiw	a5,a0,-1
   20e98:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20e9c:	00100793          	addi	a5,zero,1
   20ea0:	0ef50063          	beq	a0,a5,20f80 <dwarf::value::as_rangelist() const+0x318>
    for (T *p = base; p < end; ++p)
   20ea4:	06013503          	ld	a0,96(sp)
   20ea8:	06813783          	ld	a5,104(sp)
   20eac:	00f57a63          	bgeu	a0,a5,20ec0 <dwarf::value::as_rangelist() const+0x258>
   20eb0:	00050793          	addi	a5,a0,0
   20eb4:	00878793          	addi	a5,a5,8
   20eb8:	06813703          	ld	a4,104(sp)
   20ebc:	fee7ece3          	bltu	a5,a4,20eb4 <dwarf::value::as_rangelist() const+0x24c>
    if ((char *)base != buf)
   20ec0:	03010793          	addi	a5,sp,48
   20ec4:	00f50663          	beq	a0,a5,20ed0 <dwarf::value::as_rangelist() const+0x268>
      delete[] (char *)base;
   20ec8:	00050463          	beq	a0,zero,20ed0 <dwarf::value::as_rangelist() const+0x268>
   20ecc:	ef4f50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
}
   20ed0:	000a0513          	addi	a0,s4,0
   20ed4:	0c813083          	ld	ra,200(sp)
   20ed8:	0c013403          	ld	s0,192(sp)
   20edc:	0b813483          	ld	s1,184(sp)
   20ee0:	0b013903          	ld	s2,176(sp)
   20ee4:	0a813983          	ld	s3,168(sp)
   20ee8:	0a013a03          	ld	s4,160(sp)
   20eec:	09813a83          	ld	s5,152(sp)
   20ef0:	09013b03          	ld	s6,144(sp)
   20ef4:	08813b83          	ld	s7,136(sp)
   20ef8:	08013c03          	ld	s8,128(sp)
   20efc:	0d010113          	addi	sp,sp,208
   20f00:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   20f04:	fff00593          	addi	a1,zero,-1
   20f08:	03040513          	addi	a0,s0,48
   20f0c:	c74f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20f10:	f61ff06f          	jal	zero,20e70 <dwarf::value::as_rangelist() const+0x208>
	_M_dispose();
   20f14:	00043783          	ld	a5,0(s0)
   20f18:	0107b783          	ld	a5,16(a5)
   20f1c:	00040513          	addi	a0,s0,0
   20f20:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20f24:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20f28:	00021797          	auipc	a5,0x21
   20f2c:	5587b783          	ld	a5,1368(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20f30:	0007c783          	lbu	a5,0(a5)
   20f34:	02078663          	beq	a5,zero,20f60 <dwarf::value::as_rangelist() const+0x2f8>
    _Atomic_word __result = *__mem;
   20f38:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   20f3c:	fff5079b          	addiw	a5,a0,-1
   20f40:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20f44:	00100793          	addi	a5,zero,1
   20f48:	f2f518e3          	bne	a0,a5,20e78 <dwarf::value::as_rangelist() const+0x210>
	    _M_destroy();
   20f4c:	00043783          	ld	a5,0(s0)
   20f50:	0187b783          	ld	a5,24(a5)
   20f54:	00040513          	addi	a0,s0,0
   20f58:	000780e7          	jalr	ra,0(a5)
   20f5c:	f1dff06f          	jal	zero,20e78 <dwarf::value::as_rangelist() const+0x210>
      return __exchange_and_add(__mem, __val);
   20f60:	fff00593          	addi	a1,zero,-1
   20f64:	03440513          	addi	a0,s0,52
   20f68:	c18f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20f6c:	fd9ff06f          	jal	zero,20f44 <dwarf::value::as_rangelist() const+0x2dc>
   20f70:	fff00593          	addi	a1,zero,-1
   20f74:	03040513          	addi	a0,s0,48
   20f78:	c08f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20f7c:	f21ff06f          	jal	zero,20e9c <dwarf::value::as_rangelist() const+0x234>
	_M_dispose();
   20f80:	00043783          	ld	a5,0(s0)
   20f84:	0107b783          	ld	a5,16(a5)
   20f88:	00040513          	addi	a0,s0,0
   20f8c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20f90:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20f94:	00021797          	auipc	a5,0x21
   20f98:	4ec7b783          	ld	a5,1260(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20f9c:	0007c783          	lbu	a5,0(a5)
   20fa0:	02078663          	beq	a5,zero,20fcc <dwarf::value::as_rangelist() const+0x364>
    _Atomic_word __result = *__mem;
   20fa4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   20fa8:	fff5079b          	addiw	a5,a0,-1
   20fac:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20fb0:	00100793          	addi	a5,zero,1
   20fb4:	eef518e3          	bne	a0,a5,20ea4 <dwarf::value::as_rangelist() const+0x23c>
	    _M_destroy();
   20fb8:	00043783          	ld	a5,0(s0)
   20fbc:	0187b783          	ld	a5,24(a5)
   20fc0:	00040513          	addi	a0,s0,0
   20fc4:	000780e7          	jalr	ra,0(a5)
   20fc8:	eddff06f          	jal	zero,20ea4 <dwarf::value::as_rangelist() const+0x23c>
      return __exchange_and_add(__mem, __val);
   20fcc:	fff00593          	addi	a1,zero,-1
   20fd0:	03440513          	addi	a0,s0,52
   20fd4:	bacf50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20fd8:	fd9ff06f          	jal	zero,20fb0 <dwarf::value::as_rangelist() const+0x348>
	if (_M_pi != nullptr)
   20fdc:	00050493          	addi	s1,a0,0
   20fe0:	00040a63          	beq	s0,zero,20ff4 <dwarf::value::as_rangelist() const+0x38c>
	  _M_pi->_M_release();
   20fe4:	00040513          	addi	a0,s0,0
   20fe8:	00021317          	auipc	t1,0x21
   20fec:	3e033303          	ld	t1,992(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   20ff0:	000300e7          	jalr	ra,0(t1)
   20ff4:	00048413          	addi	s0,s1,0
	if (_M_pi != nullptr)
   20ff8:	00813503          	ld	a0,8(sp)
   20ffc:	00050863          	beq	a0,zero,2100c <dwarf::value::as_rangelist() const+0x3a4>
	  _M_pi->_M_release();
   21000:	00021317          	auipc	t1,0x21
   21004:	3c833303          	ld	t1,968(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   21008:	000300e7          	jalr	ra,0(t1)
class die {
   2100c:	03010513          	addi	a0,sp,48
   21010:	00021317          	auipc	t1,0x21
   21014:	3d833303          	ld	t1,984(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   21018:	000300e7          	jalr	ra,0(t1)
   2101c:	00040513          	addi	a0,s0,0
   21020:	ed0f50ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   21024:	00050413          	addi	s0,a0,0
   21028:	fd1ff06f          	jal	zero,20ff8 <dwarf::value::as_rangelist() const+0x390>
   2102c:	00050413          	addi	s0,a0,0
   21030:	fddff06f          	jal	zero,2100c <dwarf::value::as_rangelist() const+0x3a4>

0000000000021034 <dwarf::value::as_string[abi:cxx11]() const>:
string value::as_string() const {
   21034:	fe010113          	addi	sp,sp,-32
   21038:	00113c23          	sd	ra,24(sp)
   2103c:	00813823          	sd	s0,16(sp)
   21040:	00050413          	addi	s0,a0,0
   21044:	00058513          	addi	a0,a1,0
  const char *s = as_cstr(&size);
   21048:	00810593          	addi	a1,sp,8
   2104c:	efdfe0ef          	jal	ra,1ff48 <dwarf::value::as_cstr(unsigned long*) const>
   21050:	00050593          	addi	a1,a0,0
  return string(s, size);
   21054:	00813603          	ld	a2,8(sp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   21058:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2105c:	00f43023          	sd	a5,0(s0)
	if (__s == 0 && __n > 0)
   21060:	02050863          	beq	a0,zero,21090 <dwarf::value::as_string[abi:cxx11]() const+0x5c>
	_M_construct(__s, __s + __n, std::forward_iterator_tag());
   21064:	00000693          	addi	a3,zero,0
   21068:	00c58633          	add	a2,a1,a2
   2106c:	00040513          	addi	a0,s0,0
   21070:	00021317          	auipc	t1,0x21
   21074:	29833303          	ld	t1,664(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   21078:	000300e7          	jalr	ra,0(t1)
}
   2107c:	00040513          	addi	a0,s0,0
   21080:	01813083          	ld	ra,24(sp)
   21084:	01013403          	ld	s0,16(sp)
   21088:	02010113          	addi	sp,sp,32
   2108c:	00008067          	jalr	zero,0(ra)
	if (__s == 0 && __n > 0)
   21090:	fc060ae3          	beq	a2,zero,21064 <dwarf::value::as_string[abi:cxx11]() const+0x30>
	  std::__throw_logic_error(__N("basic_string: "
   21094:	00015517          	auipc	a0,0x15
   21098:	3dc50513          	addi	a0,a0,988 # 36470 <__libc_csu_fini+0x8>
   2109c:	c24f50ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>

00000000000210a0 <dwarf::value::as_reference() const>:
die value::as_reference() const {
   210a0:	e7010113          	addi	sp,sp,-400
   210a4:	18113423          	sd	ra,392(sp)
   210a8:	18813023          	sd	s0,384(sp)
   210ac:	16913c23          	sd	s1,376(sp)
   210b0:	17213823          	sd	s2,368(sp)
   210b4:	17313423          	sd	s3,360(sp)
   210b8:	17413023          	sd	s4,352(sp)
   210bc:	15513c23          	sd	s5,344(sp)
   210c0:	15613823          	sd	s6,336(sp)
   210c4:	15713423          	sd	s7,328(sp)
   210c8:	00050413          	addi	s0,a0,0
   210cc:	00058913          	addi	s2,a1,0
  cursor cur(cu->data(), offset);
   210d0:	0005b503          	ld	a0,0(a1)
   210d4:	a70f60ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   210d8:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   210dc:	00853483          	ld	s1,8(a0)
	if (_M_pi != nullptr)
   210e0:	380488e3          	beq	s1,zero,21c70 <dwarf::value::as_reference() const+0xbd0>
    if (__is_single_threaded())
   210e4:	00021797          	auipc	a5,0x21
   210e8:	39c7b783          	ld	a5,924(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   210ec:	0007c783          	lbu	a5,0(a5)
   210f0:	0a078a63          	beq	a5,zero,211a4 <dwarf::value::as_reference() const+0x104>
  { *__mem += __val; }
   210f4:	0304a783          	lw	a5,48(s1)
   210f8:	0017879b          	addiw	a5,a5,1
   210fc:	02f4a823          	sw	a5,48(s1)
   21100:	01093a03          	ld	s4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21104:	13313423          	sd	s3,296(sp)
      : _M_pi(__r._M_pi)
   21108:	12913823          	sd	s1,304(sp)
    if (__is_single_threaded())
   2110c:	00021797          	auipc	a5,0x21
   21110:	3747b783          	ld	a5,884(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21114:	0007c783          	lbu	a5,0(a5)
   21118:	08078e63          	beq	a5,zero,211b4 <dwarf::value::as_reference() const+0x114>
  { *__mem += __val; }
   2111c:	0304a783          	lw	a5,48(s1)
   21120:	0017879b          	addiw	a5,a5,1
   21124:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   21128:	0089b783          	ld	a5,8(s3)
   2112c:	014787b3          	add	a5,a5,s4
   21130:	12f13c23          	sd	a5,312(sp)
    if (__is_single_threaded())
   21134:	00021797          	auipc	a5,0x21
   21138:	34c7b783          	ld	a5,844(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2113c:	0007c783          	lbu	a5,0(a5)
   21140:	08078263          	beq	a5,zero,211c4 <dwarf::value::as_reference() const+0x124>
    _Atomic_word __result = *__mem;
   21144:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   21148:	fff5079b          	addiw	a5,a0,-1
   2114c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21150:	00100793          	addi	a5,zero,1
   21154:	32f51ae3          	bne	a0,a5,21c88 <dwarf::value::as_reference() const+0xbe8>
	_M_dispose();
   21158:	0004b783          	ld	a5,0(s1)
   2115c:	0107b783          	ld	a5,16(a5)
   21160:	00048513          	addi	a0,s1,0
   21164:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21168:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2116c:	00021797          	auipc	a5,0x21
   21170:	3147b783          	ld	a5,788(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21174:	0007c783          	lbu	a5,0(a5)
   21178:	04078e63          	beq	a5,zero,211d4 <dwarf::value::as_reference() const+0x134>
    _Atomic_word __result = *__mem;
   2117c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21180:	fff5079b          	addiw	a5,a0,-1
   21184:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21188:	00100793          	addi	a5,zero,1
   2118c:	2ef51ee3          	bne	a0,a5,21c88 <dwarf::value::as_reference() const+0xbe8>
	    _M_destroy();
   21190:	0004b783          	ld	a5,0(s1)
   21194:	0187b783          	ld	a5,24(a5)
   21198:	00048513          	addi	a0,s1,0
   2119c:	000780e7          	jalr	ra,0(a5)
   211a0:	2e90006f          	jal	zero,21c88 <dwarf::value::as_reference() const+0xbe8>
      __atomic_add(__mem, __val);
   211a4:	00100593          	addi	a1,zero,1
   211a8:	03048513          	addi	a0,s1,48
   211ac:	9a4f50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   211b0:	f51ff06f          	jal	zero,21100 <dwarf::value::as_reference() const+0x60>
   211b4:	00100593          	addi	a1,zero,1
   211b8:	03048513          	addi	a0,s1,48
   211bc:	994f50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   211c0:	f69ff06f          	jal	zero,21128 <dwarf::value::as_reference() const+0x88>
      return __exchange_and_add(__mem, __val);
   211c4:	fff00593          	addi	a1,zero,-1
   211c8:	03048513          	addi	a0,s1,48
   211cc:	9b4f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   211d0:	f81ff06f          	jal	zero,21150 <dwarf::value::as_reference() const+0xb0>
   211d4:	fff00593          	addi	a1,zero,-1
   211d8:	03448513          	addi	a0,s1,52
   211dc:	9a4f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   211e0:	fa9ff06f          	jal	zero,21188 <dwarf::value::as_reference() const+0xe8>
    while (pos < sec->end) {
   211e4:	13813783          	ld	a5,312(sp)
      { return _M_ptr; }
   211e8:	12813583          	ld	a1,296(sp)
   211ec:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   211f0:	00000493          	addi	s1,zero,0
    int shift = 0;
   211f4:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   211f8:	02e7fa63          	bgeu	a5,a4,2122c <dwarf::value::as_reference() const+0x18c>
      uint8_t byte = *(uint8_t *)(pos++);
   211fc:	00178793          	addi	a5,a5,1
   21200:	12f13c23          	sd	a5,312(sp)
   21204:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21208:	07f77693          	andi	a3,a4,127
   2120c:	00c696b3          	sll	a3,a3,a2
   21210:	00d4e4b3          	or	s1,s1,a3
      if ((byte & 0x80) == 0)
   21214:	0187171b          	slliw	a4,a4,0x18
   21218:	4187571b          	sraiw	a4,a4,0x18
   2121c:	240752e3          	bge	a4,zero,21c60 <dwarf::value::as_reference() const+0xbc0>
      shift += 7;
   21220:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   21224:	0105b703          	ld	a4,16(a1)
   21228:	fce7eae3          	bltu	a5,a4,211fc <dwarf::value::as_reference() const+0x15c>
    underflow();
   2122c:	12810513          	addi	a0,sp,296
   21230:	f1cfb0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   21234:	6280006f          	jal	zero,2185c <dwarf::value::as_reference() const+0x7bc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   21238:	12813783          	ld	a5,296(sp)
   2123c:	0107b703          	ld	a4,16(a5)
   21240:	13813783          	ld	a5,312(sp)
   21244:	00e7e663          	bltu	a5,a4,21250 <dwarf::value::as_reference() const+0x1b0>
      underflow();
   21248:	12810513          	addi	a0,sp,296
   2124c:	f00fb0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21250:	13813783          	ld	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   21254:	12813703          	ld	a4,296(sp)
   21258:	01c72703          	lw	a4,28(a4)
   2125c:	1e070ce3          	beq	a4,zero,21c54 <dwarf::value::as_reference() const+0xbb4>
        val = (val << 8) | (uint64_t)p[i];
   21260:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   21264:	1f50006f          	jal	zero,21c58 <dwarf::value::as_reference() const+0xbb8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   21268:	12813783          	ld	a5,296(sp)
   2126c:	0107b703          	ld	a4,16(a5)
   21270:	13813783          	ld	a5,312(sp)
   21274:	40f70633          	sub	a2,a4,a5
   21278:	00100693          	addi	a3,zero,1
   2127c:	00c6f463          	bgeu	a3,a2,21284 <dwarf::value::as_reference() const+0x1e4>
   21280:	00e7e663          	bltu	a5,a4,2128c <dwarf::value::as_reference() const+0x1ec>
      underflow();
   21284:	12810513          	addi	a0,sp,296
   21288:	ec4fb0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2128c:	13813783          	ld	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   21290:	12813703          	ld	a4,296(sp)
   21294:	01c72703          	lw	a4,28(a4)
   21298:	02071063          	bne	a4,zero,212b8 <dwarf::value::as_reference() const+0x218>
        val |= ((uint64_t)p[i]) << (i * 8);
   2129c:	0017c483          	lbu	s1,1(a5)
   212a0:	00849493          	slli	s1,s1,0x8
   212a4:	0007c703          	lbu	a4,0(a5)
   212a8:	00e4e4b3          	or	s1,s1,a4
    pos += sizeof(T);
   212ac:	00278793          	addi	a5,a5,2
   212b0:	12f13c23          	sd	a5,312(sp)
    break;
   212b4:	1ad0006f          	jal	zero,21c60 <dwarf::value::as_reference() const+0xbc0>
        val = (val << 8) | (uint64_t)p[i];
   212b8:	0007c483          	lbu	s1,0(a5)
   212bc:	00849493          	slli	s1,s1,0x8
   212c0:	0017c703          	lbu	a4,1(a5)
   212c4:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   212c8:	fe5ff06f          	jal	zero,212ac <dwarf::value::as_reference() const+0x20c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   212cc:	12813783          	ld	a5,296(sp)
   212d0:	0107b703          	ld	a4,16(a5)
   212d4:	13813783          	ld	a5,312(sp)
   212d8:	40f70633          	sub	a2,a4,a5
   212dc:	00300693          	addi	a3,zero,3
   212e0:	00c6f463          	bgeu	a3,a2,212e8 <dwarf::value::as_reference() const+0x248>
   212e4:	00e7e663          	bltu	a5,a4,212f0 <dwarf::value::as_reference() const+0x250>
      underflow();
   212e8:	12810513          	addi	a0,sp,296
   212ec:	e60fb0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   212f0:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   212f4:	12813783          	ld	a5,296(sp)
   212f8:	01c7a783          	lw	a5,28(a5)
   212fc:	02079e63          	bne	a5,zero,21338 <dwarf::value::as_reference() const+0x298>
   21300:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   21304:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   21308:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   2130c:	0006c703          	lbu	a4,0(a3)
   21310:	00f71733          	sll	a4,a4,a5
   21314:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21318:	00168693          	addi	a3,a3,1
   2131c:	0087879b          	addiw	a5,a5,8
   21320:	feb796e3          	bne	a5,a1,2130c <dwarf::value::as_reference() const+0x26c>
    pos += sizeof(T);
   21324:	00460613          	addi	a2,a2,4
   21328:	12c13c23          	sd	a2,312(sp)
   2132c:	02049493          	slli	s1,s1,0x20
   21330:	0204d493          	srli	s1,s1,0x20
    break;
   21334:	12d0006f          	jal	zero,21c60 <dwarf::value::as_reference() const+0xbc0>
   21338:	00060793          	addi	a5,a2,0
   2133c:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   21340:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   21344:	00849493          	slli	s1,s1,0x8
   21348:	0007c703          	lbu	a4,0(a5)
   2134c:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   21350:	00178793          	addi	a5,a5,1
   21354:	fef698e3          	bne	a3,a5,21344 <dwarf::value::as_reference() const+0x2a4>
   21358:	fcdff06f          	jal	zero,21324 <dwarf::value::as_reference() const+0x284>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2135c:	12813783          	ld	a5,296(sp)
   21360:	0107b703          	ld	a4,16(a5)
   21364:	13813783          	ld	a5,312(sp)
   21368:	40f70633          	sub	a2,a4,a5
   2136c:	00700693          	addi	a3,zero,7
   21370:	00c6f463          	bgeu	a3,a2,21378 <dwarf::value::as_reference() const+0x2d8>
   21374:	00e7e663          	bltu	a5,a4,21380 <dwarf::value::as_reference() const+0x2e0>
      underflow();
   21378:	12810513          	addi	a0,sp,296
   2137c:	dd0fb0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21380:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   21384:	12813783          	ld	a5,296(sp)
   21388:	01c7a783          	lw	a5,28(a5)
   2138c:	02079a63          	bne	a5,zero,213c0 <dwarf::value::as_reference() const+0x320>
   21390:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   21394:	00000493          	addi	s1,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   21398:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   2139c:	0006c703          	lbu	a4,0(a3)
   213a0:	00f71733          	sll	a4,a4,a5
   213a4:	00e4e4b3          	or	s1,s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   213a8:	00168693          	addi	a3,a3,1
   213ac:	0087879b          	addiw	a5,a5,8
   213b0:	feb796e3          	bne	a5,a1,2139c <dwarf::value::as_reference() const+0x2fc>
    pos += sizeof(T);
   213b4:	00860613          	addi	a2,a2,8
   213b8:	12c13c23          	sd	a2,312(sp)
   213bc:	0a50006f          	jal	zero,21c60 <dwarf::value::as_reference() const+0xbc0>
   213c0:	00060793          	addi	a5,a2,0
   213c4:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   213c8:	00000493          	addi	s1,zero,0
        val = (val << 8) | (uint64_t)p[i];
   213cc:	00849493          	slli	s1,s1,0x8
   213d0:	0007c703          	lbu	a4,0(a5)
   213d4:	009764b3          	or	s1,a4,s1
      for (unsigned i = 0; i < sizeof(T); i++)
   213d8:	00178793          	addi	a5,a5,1
   213dc:	fef698e3          	bne	a3,a5,213cc <dwarf::value::as_reference() const+0x32c>
   213e0:	fd5ff06f          	jal	zero,213b4 <dwarf::value::as_reference() const+0x314>
    off = cur.offset();
   213e4:	12810513          	addi	a0,sp,296
   213e8:	cf1fb0ef          	jal	ra,1d0d8 <dwarf::cursor::offset()>
   213ec:	00050993          	addi	s3,a0,0
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   213f0:	00093503          	ld	a0,0(s2)
   213f4:	f3df50ef          	jal	ra,17330 <dwarf::unit::get_dwarf() const>
   213f8:	dddf50ef          	jal	ra,171d4 <dwarf::dwarf::compilation_units() const>
      : _M_current(__i) { }
   213fc:	00053483          	ld	s1,0(a0)
   21400:	00853a83          	ld	s5,8(a0)
   21404:	049a8063          	beq	s5,s1,21444 <dwarf::value::as_reference() const+0x3a4>
    const compilation_unit *base_cu = nullptr;
   21408:	00000913          	addi	s2,zero,0
   2140c:	0100006f          	jal	zero,2141c <dwarf::value::as_reference() const+0x37c>
      if (file_cu.get_section_offset() > off)
   21410:	02a9e263          	bltu	s3,a0,21434 <dwarf::value::as_reference() const+0x394>
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   21414:	01848493          	addi	s1,s1,24
   21418:	009a8c63          	beq	s5,s1,21430 <dwarf::value::as_reference() const+0x390>
   2141c:	00090a13          	addi	s4,s2,0
   21420:	00048913          	addi	s2,s1,0
      if (file_cu.get_section_offset() > off)
   21424:	00048513          	addi	a0,s1,0
   21428:	f11f50ef          	jal	ra,17338 <dwarf::unit::get_section_offset() const>
   2142c:	fe5ff06f          	jal	zero,21410 <dwarf::value::as_reference() const+0x370>
   21430:	00090a13          	addi	s4,s2,0
    die d(base_cu);
   21434:	000a0593          	addi	a1,s4,0
   21438:	04810513          	addi	a0,sp,72
   2143c:	e29fb0ef          	jal	ra,1d264 <dwarf::die::die(dwarf::unit const*)>
   21440:	00c0006f          	jal	zero,2144c <dwarf::value::as_reference() const+0x3ac>
    const compilation_unit *base_cu = nullptr;
   21444:	00000a13          	addi	s4,zero,0
   21448:	fedff06f          	jal	zero,21434 <dwarf::value::as_reference() const+0x394>
    d.read(off - base_cu->get_section_offset());
   2144c:	000a0513          	addi	a0,s4,0
   21450:	ee9f50ef          	jal	ra,17338 <dwarf::unit::get_section_offset() const>
   21454:	40a985b3          	sub	a1,s3,a0
   21458:	04810513          	addi	a0,sp,72
   2145c:	e61fb0ef          	jal	ra,1d2bc <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   21460:	04812783          	lw	a5,72(sp)
   21464:	00f42023          	sw	a5,0(s0)
   21468:	05013783          	ld	a5,80(sp)
   2146c:	00f43423          	sd	a5,8(s0)
   21470:	05813783          	ld	a5,88(sp)
   21474:	00f43823          	sd	a5,16(s0)
   21478:	06013783          	ld	a5,96(sp)
   2147c:	00f43c23          	sd	a5,24(s0)
   21480:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   21484:	05443823          	sd	s4,80(s0)
   21488:	05443c23          	sd	s4,88(s0)
   2148c:	05040793          	addi	a5,s0,80
   21490:	06f43023          	sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   21494:	09813703          	ld	a4,152(sp)
   21498:	06810693          	addi	a3,sp,104
   2149c:	06d70463          	beq	a4,a3,21504 <dwarf::value::as_reference() const+0x464>
      base = o.base;
   214a0:	04e43823          	sd	a4,80(s0)
      end = o.end;
   214a4:	0a013783          	ld	a5,160(sp)
   214a8:	04f43c23          	sd	a5,88(s0)
      cap = o.cap;
   214ac:	0a813783          	ld	a5,168(sp)
   214b0:	06f43023          	sd	a5,96(s0)
      o.base = (T *)o.buf;
   214b4:	06810793          	addi	a5,sp,104
   214b8:	08f13c23          	sd	a5,152(sp)
      o.end = o.base;
   214bc:	0af13023          	sd	a5,160(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   214c0:	09810793          	addi	a5,sp,152
   214c4:	0af13423          	sd	a5,168(sp)
   214c8:	0b013783          	ld	a5,176(sp)
   214cc:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   214d0:	09813503          	ld	a0,152(sp)
   214d4:	0a013783          	ld	a5,160(sp)
   214d8:	00f57a63          	bgeu	a0,a5,214ec <dwarf::value::as_reference() const+0x44c>
   214dc:	00050793          	addi	a5,a0,0
   214e0:	00878793          	addi	a5,a5,8
   214e4:	0a013703          	ld	a4,160(sp)
   214e8:	fee7ece3          	bltu	a5,a4,214e0 <dwarf::value::as_reference() const+0x440>
    end = base;
   214ec:	0aa13023          	sd	a0,160(sp)
    if ((char *)base != buf)
   214f0:	06810793          	addi	a5,sp,104
   214f4:	40f50e63          	beq	a0,a5,21910 <dwarf::value::as_reference() const+0x870>
      delete[] (char *)base;
   214f8:	40050c63          	beq	a0,zero,21910 <dwarf::value::as_reference() const+0x870>
   214fc:	8c4f50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   21500:	4100006f          	jal	zero,21910 <dwarf::value::as_reference() const+0x870>
  size_type size() const { return end - base; }
   21504:	0a013983          	ld	s3,160(sp)
   21508:	40d989b3          	sub	s3,s3,a3
   2150c:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   21510:	414787b3          	sub	a5,a5,s4
   21514:	0737fa63          	bgeu	a5,s3,21588 <dwarf::value::as_reference() const+0x4e8>
   21518:	4037d793          	srai	a5,a5,0x3
   2151c:	00079463          	bne	a5,zero,21524 <dwarf::value::as_reference() const+0x484>
   21520:	00100793          	addi	a5,zero,1
    while (target < n)
   21524:	0127f663          	bgeu	a5,s2,21530 <dwarf::value::as_reference() const+0x490>
      target <<= 1;
   21528:	00179793          	slli	a5,a5,0x1
    while (target < n)
   2152c:	ff27eee3          	bltu	a5,s2,21528 <dwarf::value::as_reference() const+0x488>
    char *newbuf = new char[sizeof(T[target])];
   21530:	00379493          	slli	s1,a5,0x3
   21534:	00048513          	addi	a0,s1,0
   21538:	df9f40ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   2153c:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   21540:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   21544:	05843703          	ld	a4,88(s0)
   21548:	08e57e63          	bgeu	a0,a4,215e4 <dwarf::value::as_reference() const+0x544>
    T *src = base, *dest = (T *)newbuf;
   2154c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   21550:	00878793          	addi	a5,a5,8
   21554:	fee7eee3          	bltu	a5,a4,21550 <dwarf::value::as_reference() const+0x4b0>
   21558:	fff70a93          	addi	s5,a4,-1
   2155c:	40aa8ab3          	sub	s5,s5,a0
   21560:	ff8afa93          	andi	s5,s5,-8
   21564:	008a8a93          	addi	s5,s5,8
   21568:	015b0ab3          	add	s5,s6,s5
    if ((char *)base != buf)
   2156c:	00aa0663          	beq	s4,a0,21578 <dwarf::value::as_reference() const+0x4d8>
      delete[] (char *)base;
   21570:	00050463          	beq	a0,zero,21578 <dwarf::value::as_reference() const+0x4d8>
   21574:	84cf50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   21578:	05643823          	sd	s6,80(s0)
    end = dest;
   2157c:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   21580:	009b0b33          	add	s6,s6,s1
   21584:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   21588:	02090663          	beq	s2,zero,215b4 <dwarf::value::as_reference() const+0x514>
   2158c:	00000793          	addi	a5,zero,0
   21590:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   21594:	09813703          	ld	a4,152(sp)
   21598:	00d70733          	add	a4,a4,a3
   2159c:	00073603          	ld	a2,0(a4)
   215a0:	05043703          	ld	a4,80(s0)
   215a4:	00d70733          	add	a4,a4,a3
   215a8:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   215ac:	00178793          	addi	a5,a5,1
   215b0:	fef910e3          	bne	s2,a5,21590 <dwarf::value::as_reference() const+0x4f0>
    end = base + osize;
   215b4:	05043783          	ld	a5,80(s0)
   215b8:	013787b3          	add	a5,a5,s3
   215bc:	04f43c23          	sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   215c0:	09813683          	ld	a3,152(sp)
   215c4:	0a013783          	ld	a5,160(sp)
   215c8:	00f6fa63          	bgeu	a3,a5,215dc <dwarf::value::as_reference() const+0x53c>
   215cc:	00068793          	addi	a5,a3,0
   215d0:	00878793          	addi	a5,a5,8
   215d4:	0a013703          	ld	a4,160(sp)
   215d8:	fee7ece3          	bltu	a5,a4,215d0 <dwarf::value::as_reference() const+0x530>
    end = base;
   215dc:	0ad13023          	sd	a3,160(sp)
  }
   215e0:	ee9ff06f          	jal	zero,214c8 <dwarf::value::as_reference() const+0x428>
    T *src = base, *dest = (T *)newbuf;
   215e4:	000b0a93          	addi	s5,s6,0
   215e8:	f85ff06f          	jal	zero,2156c <dwarf::value::as_reference() const+0x4cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   215ec:	12813783          	ld	a5,296(sp)
   215f0:	0107b703          	ld	a4,16(a5)
   215f4:	13813783          	ld	a5,312(sp)
   215f8:	40f70633          	sub	a2,a4,a5
   215fc:	00700693          	addi	a3,zero,7
   21600:	00c6f463          	bgeu	a3,a2,21608 <dwarf::value::as_reference() const+0x568>
   21604:	00e7e663          	bltu	a5,a4,21610 <dwarf::value::as_reference() const+0x570>
      underflow();
   21608:	12810513          	addi	a0,sp,296
   2160c:	b40fb0ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   21610:	13813603          	ld	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   21614:	12813783          	ld	a5,296(sp)
   21618:	01c7a783          	lw	a5,28(a5)
   2161c:	02079e63          	bne	a5,zero,21658 <dwarf::value::as_reference() const+0x5b8>
   21620:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   21624:	00000a93          	addi	s5,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   21628:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   2162c:	0006c703          	lbu	a4,0(a3)
   21630:	00f71733          	sll	a4,a4,a5
   21634:	00eaeab3          	or	s5,s5,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   21638:	00168693          	addi	a3,a3,1
   2163c:	0087879b          	addiw	a5,a5,8
   21640:	feb796e3          	bne	a5,a1,2162c <dwarf::value::as_reference() const+0x58c>
    pos += sizeof(T);
   21644:	00860613          	addi	a2,a2,8
   21648:	12c13c23          	sd	a2,312(sp)
      return cu->get_dwarf().get_type_unit(sig).type();
   2164c:	00093503          	ld	a0,0(s2)
   21650:	ce1f50ef          	jal	ra,17330 <dwarf::unit::get_dwarf() const>
   21654:	0280006f          	jal	zero,2167c <dwarf::value::as_reference() const+0x5dc>
   21658:	00060793          	addi	a5,a2,0
   2165c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   21660:	00000a93          	addi	s5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   21664:	008a9a93          	slli	s5,s5,0x8
   21668:	0007c703          	lbu	a4,0(a5)
   2166c:	01576ab3          	or	s5,a4,s5
      for (unsigned i = 0; i < sizeof(T); i++)
   21670:	00178793          	addi	a5,a5,1
   21674:	fef698e3          	bne	a3,a5,21664 <dwarf::value::as_reference() const+0x5c4>
   21678:	fcdff06f          	jal	zero,21644 <dwarf::value::as_reference() const+0x5a4>
   2167c:	000a8593          	addi	a1,s5,0
   21680:	ec9f70ef          	jal	ra,19548 <dwarf::dwarf::get_type_unit(unsigned long) const>
   21684:	8f8f90ef          	jal	ra,1a77c <dwarf::type_unit::type() const>
   21688:	00050493          	addi	s1,a0,0
  die(const die &o) = default;
   2168c:	00052783          	lw	a5,0(a0)
   21690:	00f42023          	sw	a5,0(s0)
   21694:	00853783          	ld	a5,8(a0)
   21698:	00f43423          	sd	a5,8(s0)
   2169c:	01053783          	ld	a5,16(a0)
   216a0:	00f43823          	sd	a5,16(s0)
   216a4:	01853783          	ld	a5,24(a0)
   216a8:	00f43c23          	sd	a5,24(s0)
   216ac:	02040b13          	addi	s6,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   216b0:	05643823          	sd	s6,80(s0)
   216b4:	05643c23          	sd	s6,88(s0)
   216b8:	05040793          	addi	a5,s0,80
   216bc:	06f43023          	sd	a5,96(s0)
  size_type size() const { return end - base; }
   216c0:	05853983          	ld	s3,88(a0)
   216c4:	05053703          	ld	a4,80(a0)
   216c8:	40e989b3          	sub	s3,s3,a4
   216cc:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   216d0:	416787b3          	sub	a5,a5,s6
   216d4:	0737fa63          	bgeu	a5,s3,21748 <dwarf::value::as_reference() const+0x6a8>
   216d8:	4037d793          	srai	a5,a5,0x3
   216dc:	00079463          	bne	a5,zero,216e4 <dwarf::value::as_reference() const+0x644>
   216e0:	00100793          	addi	a5,zero,1
    while (target < n)
   216e4:	0127f663          	bgeu	a5,s2,216f0 <dwarf::value::as_reference() const+0x650>
      target <<= 1;
   216e8:	00179793          	slli	a5,a5,0x1
    while (target < n)
   216ec:	ff27eee3          	bltu	a5,s2,216e8 <dwarf::value::as_reference() const+0x648>
    char *newbuf = new char[sizeof(T[target])];
   216f0:	00379a13          	slli	s4,a5,0x3
   216f4:	000a0513          	addi	a0,s4,0
   216f8:	c39f40ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   216fc:	00050b93          	addi	s7,a0,0
    T *src = base, *dest = (T *)newbuf;
   21700:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   21704:	05843703          	ld	a4,88(s0)
   21708:	08e57263          	bgeu	a0,a4,2178c <dwarf::value::as_reference() const+0x6ec>
    T *src = base, *dest = (T *)newbuf;
   2170c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   21710:	00878793          	addi	a5,a5,8
   21714:	fee7eee3          	bltu	a5,a4,21710 <dwarf::value::as_reference() const+0x670>
   21718:	fff70a93          	addi	s5,a4,-1
   2171c:	40aa8ab3          	sub	s5,s5,a0
   21720:	ff8afa93          	andi	s5,s5,-8
   21724:	008a8a93          	addi	s5,s5,8
   21728:	015b8ab3          	add	s5,s7,s5
    if ((char *)base != buf)
   2172c:	00ab0663          	beq	s6,a0,21738 <dwarf::value::as_reference() const+0x698>
      delete[] (char *)base;
   21730:	00050463          	beq	a0,zero,21738 <dwarf::value::as_reference() const+0x698>
   21734:	e8df40ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   21738:	05743823          	sd	s7,80(s0)
    end = dest;
   2173c:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   21740:	014b8bb3          	add	s7,s7,s4
   21744:	07743023          	sd	s7,96(s0)
    for (size_type i = 0; i < osize; i++)
   21748:	02090663          	beq	s2,zero,21774 <dwarf::value::as_reference() const+0x6d4>
   2174c:	00000793          	addi	a5,zero,0
   21750:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   21754:	0504b703          	ld	a4,80(s1)
   21758:	00d70733          	add	a4,a4,a3
   2175c:	00073603          	ld	a2,0(a4)
   21760:	05043703          	ld	a4,80(s0)
   21764:	00d70733          	add	a4,a4,a3
   21768:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   2176c:	00178793          	addi	a5,a5,1
   21770:	fef910e3          	bne	s2,a5,21750 <dwarf::value::as_reference() const+0x6b0>
    end = base + osize;
   21774:	05043783          	ld	a5,80(s0)
   21778:	013787b3          	add	a5,a5,s3
   2177c:	04f43c23          	sd	a5,88(s0)
   21780:	0684b783          	ld	a5,104(s1)
   21784:	06f43423          	sd	a5,104(s0)
   21788:	1880006f          	jal	zero,21910 <dwarf::value::as_reference() const+0x870>
    T *src = base, *dest = (T *)newbuf;
   2178c:	000b8a93          	addi	s5,s7,0
   21790:	f9dff06f          	jal	zero,2172c <dwarf::value::as_reference() const+0x68c>
                              " as reference");
   21794:	01000513          	addi	a0,zero,16
   21798:	c89f40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2179c:	00050493          	addi	s1,a0,0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   217a0:	00c92583          	lw	a1,12(s2)
   217a4:	00810513          	addi	a0,sp,8
   217a8:	4d00d0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   217ac:	00015617          	auipc	a2,0x15
   217b0:	50460613          	addi	a2,a2,1284 # 36cb0 <std::piecewise_construct+0x1c8>
   217b4:	00000593          	addi	a1,zero,0
   217b8:	00810513          	addi	a0,sp,8
   217bc:	bd5f40ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   217c0:	00050593          	addi	a1,a0,0
   217c4:	02810413          	addi	s0,sp,40
   217c8:	00040513          	addi	a0,s0,0
   217cc:	ca5f40ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   217d0:	00015597          	auipc	a1,0x15
   217d4:	57058593          	addi	a1,a1,1392 # 36d40 <std::piecewise_construct+0x258>
   217d8:	00040513          	addi	a0,s0,0
   217dc:	fc5f40ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   217e0:	00050593          	addi	a1,a0,0
   217e4:	04810413          	addi	s0,sp,72
   217e8:	00040513          	addi	a0,s0,0
   217ec:	c85f40ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   217f0:	00040593          	addi	a1,s0,0
   217f4:	00048513          	addi	a0,s1,0
   217f8:	ff9f40ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   217fc:	00021797          	auipc	a5,0x21
   21800:	c4c7b783          	ld	a5,-948(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   21804:	01078793          	addi	a5,a5,16
   21808:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2180c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21810:	05810793          	addi	a5,sp,88
   21814:	00f50463          	beq	a0,a5,2181c <dwarf::value::as_reference() const+0x77c>
   21818:	cf9f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2181c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21820:	03810793          	addi	a5,sp,56
   21824:	00f50463          	beq	a0,a5,2182c <dwarf::value::as_reference() const+0x78c>
   21828:	ce9f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2182c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   21830:	01810793          	addi	a5,sp,24
   21834:	00f50463          	beq	a0,a5,2183c <dwarf::value::as_reference() const+0x79c>
   21838:	cd9f40ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as reference");
   2183c:	00021617          	auipc	a2,0x21
   21840:	d9c63603          	ld	a2,-612(a2) # 425d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1f848>
   21844:	00021597          	auipc	a1,0x21
   21848:	d545b583          	ld	a1,-684(a1) # 42598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   2184c:	00048513          	addi	a0,s1,0
   21850:	e71f40ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   21854:	00050413          	addi	s0,a0,0
   21858:	27c0006f          	jal	zero,21ad4 <dwarf::value::as_reference() const+0xa34>
    return 0;
   2185c:	00000493          	addi	s1,zero,0
   21860:	4000006f          	jal	zero,21c60 <dwarf::value::as_reference() const+0xbc0>
  d.read(off);
   21864:	00048593          	addi	a1,s1,0
   21868:	0b810513          	addi	a0,sp,184
   2186c:	a51fb0ef          	jal	ra,1d2bc <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   21870:	0b812783          	lw	a5,184(sp)
   21874:	00f42023          	sw	a5,0(s0)
   21878:	0c013783          	ld	a5,192(sp)
   2187c:	00f43423          	sd	a5,8(s0)
   21880:	0c813783          	ld	a5,200(sp)
   21884:	00f43823          	sd	a5,16(s0)
   21888:	0d013783          	ld	a5,208(sp)
   2188c:	00f43c23          	sd	a5,24(s0)
   21890:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   21894:	05443823          	sd	s4,80(s0)
   21898:	05443c23          	sd	s4,88(s0)
   2189c:	05040793          	addi	a5,s0,80
   218a0:	06f43023          	sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   218a4:	10813703          	ld	a4,264(sp)
   218a8:	0d810693          	addi	a3,sp,216
   218ac:	0cd70063          	beq	a4,a3,2196c <dwarf::value::as_reference() const+0x8cc>
      base = o.base;
   218b0:	04e43823          	sd	a4,80(s0)
      end = o.end;
   218b4:	11013783          	ld	a5,272(sp)
   218b8:	04f43c23          	sd	a5,88(s0)
      cap = o.cap;
   218bc:	11813783          	ld	a5,280(sp)
   218c0:	06f43023          	sd	a5,96(s0)
      o.base = (T *)o.buf;
   218c4:	0d810793          	addi	a5,sp,216
   218c8:	10f13423          	sd	a5,264(sp)
      o.end = o.base;
   218cc:	10f13823          	sd	a5,272(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   218d0:	10810793          	addi	a5,sp,264
   218d4:	10f13c23          	sd	a5,280(sp)
   218d8:	12013783          	ld	a5,288(sp)
   218dc:	06f43423          	sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   218e0:	10813503          	ld	a0,264(sp)
   218e4:	11013783          	ld	a5,272(sp)
   218e8:	00f57a63          	bgeu	a0,a5,218fc <dwarf::value::as_reference() const+0x85c>
   218ec:	00050793          	addi	a5,a0,0
   218f0:	00878793          	addi	a5,a5,8
   218f4:	11013703          	ld	a4,272(sp)
   218f8:	fee7ece3          	bltu	a5,a4,218f0 <dwarf::value::as_reference() const+0x850>
    end = base;
   218fc:	10a13823          	sd	a0,272(sp)
    if ((char *)base != buf)
   21900:	0d810793          	addi	a5,sp,216
   21904:	00f50663          	beq	a0,a5,21910 <dwarf::value::as_reference() const+0x870>
      delete[] (char *)base;
   21908:	00050463          	beq	a0,zero,21910 <dwarf::value::as_reference() const+0x870>
   2190c:	cb5f40ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   21910:	13013483          	ld	s1,304(sp)
   21914:	02048463          	beq	s1,zero,2193c <dwarf::value::as_reference() const+0x89c>
    if (__is_single_threaded())
   21918:	00021797          	auipc	a5,0x21
   2191c:	b687b783          	ld	a5,-1176(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21920:	0007c783          	lbu	a5,0(a5)
   21924:	12078863          	beq	a5,zero,21a54 <dwarf::value::as_reference() const+0x9b4>
    _Atomic_word __result = *__mem;
   21928:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   2192c:	fff5079b          	addiw	a5,a0,-1
   21930:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21934:	00100793          	addi	a5,zero,1
   21938:	12f50663          	beq	a0,a5,21a64 <dwarf::value::as_reference() const+0x9c4>
}
   2193c:	00040513          	addi	a0,s0,0
   21940:	18813083          	ld	ra,392(sp)
   21944:	18013403          	ld	s0,384(sp)
   21948:	17813483          	ld	s1,376(sp)
   2194c:	17013903          	ld	s2,368(sp)
   21950:	16813983          	ld	s3,360(sp)
   21954:	16013a03          	ld	s4,352(sp)
   21958:	15813a83          	ld	s5,344(sp)
   2195c:	15013b03          	ld	s6,336(sp)
   21960:	14813b83          	ld	s7,328(sp)
   21964:	19010113          	addi	sp,sp,400
   21968:	00008067          	jalr	zero,0(ra)
  size_type size() const { return end - base; }
   2196c:	11013983          	ld	s3,272(sp)
   21970:	40d989b3          	sub	s3,s3,a3
   21974:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   21978:	414787b3          	sub	a5,a5,s4
   2197c:	0737fa63          	bgeu	a5,s3,219f0 <dwarf::value::as_reference() const+0x950>
   21980:	4037d793          	srai	a5,a5,0x3
   21984:	00079463          	bne	a5,zero,2198c <dwarf::value::as_reference() const+0x8ec>
   21988:	00100793          	addi	a5,zero,1
    while (target < n)
   2198c:	0127f663          	bgeu	a5,s2,21998 <dwarf::value::as_reference() const+0x8f8>
      target <<= 1;
   21990:	00179793          	slli	a5,a5,0x1
    while (target < n)
   21994:	ff27eee3          	bltu	a5,s2,21990 <dwarf::value::as_reference() const+0x8f0>
    char *newbuf = new char[sizeof(T[target])];
   21998:	00379493          	slli	s1,a5,0x3
   2199c:	00048513          	addi	a0,s1,0
   219a0:	991f40ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   219a4:	00050b13          	addi	s6,a0,0
    T *src = base, *dest = (T *)newbuf;
   219a8:	05043503          	ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   219ac:	05843703          	ld	a4,88(s0)
   219b0:	08e57e63          	bgeu	a0,a4,21a4c <dwarf::value::as_reference() const+0x9ac>
    T *src = base, *dest = (T *)newbuf;
   219b4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   219b8:	00878793          	addi	a5,a5,8
   219bc:	fee7eee3          	bltu	a5,a4,219b8 <dwarf::value::as_reference() const+0x918>
   219c0:	fff70a93          	addi	s5,a4,-1
   219c4:	40aa8ab3          	sub	s5,s5,a0
   219c8:	ff8afa93          	andi	s5,s5,-8
   219cc:	008a8a93          	addi	s5,s5,8
   219d0:	015b0ab3          	add	s5,s6,s5
    if ((char *)base != buf)
   219d4:	00aa0663          	beq	s4,a0,219e0 <dwarf::value::as_reference() const+0x940>
      delete[] (char *)base;
   219d8:	00050463          	beq	a0,zero,219e0 <dwarf::value::as_reference() const+0x940>
   219dc:	be5f40ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   219e0:	05643823          	sd	s6,80(s0)
    end = dest;
   219e4:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   219e8:	009b0b33          	add	s6,s6,s1
   219ec:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   219f0:	02090663          	beq	s2,zero,21a1c <dwarf::value::as_reference() const+0x97c>
   219f4:	00000793          	addi	a5,zero,0
   219f8:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   219fc:	10813703          	ld	a4,264(sp)
   21a00:	00d70733          	add	a4,a4,a3
   21a04:	00073603          	ld	a2,0(a4)
   21a08:	05043703          	ld	a4,80(s0)
   21a0c:	00d70733          	add	a4,a4,a3
   21a10:	00c73023          	sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   21a14:	00178793          	addi	a5,a5,1
   21a18:	fef910e3          	bne	s2,a5,219f8 <dwarf::value::as_reference() const+0x958>
    end = base + osize;
   21a1c:	05043783          	ld	a5,80(s0)
   21a20:	013787b3          	add	a5,a5,s3
   21a24:	04f43c23          	sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   21a28:	10813683          	ld	a3,264(sp)
   21a2c:	11013783          	ld	a5,272(sp)
   21a30:	00f6fa63          	bgeu	a3,a5,21a44 <dwarf::value::as_reference() const+0x9a4>
   21a34:	00068793          	addi	a5,a3,0
   21a38:	00878793          	addi	a5,a5,8
   21a3c:	11013703          	ld	a4,272(sp)
   21a40:	fee7ece3          	bltu	a5,a4,21a38 <dwarf::value::as_reference() const+0x998>
    end = base;
   21a44:	10d13823          	sd	a3,272(sp)
  }
   21a48:	e91ff06f          	jal	zero,218d8 <dwarf::value::as_reference() const+0x838>
    T *src = base, *dest = (T *)newbuf;
   21a4c:	000b0a93          	addi	s5,s6,0
   21a50:	f85ff06f          	jal	zero,219d4 <dwarf::value::as_reference() const+0x934>
      return __exchange_and_add(__mem, __val);
   21a54:	fff00593          	addi	a1,zero,-1
   21a58:	03048513          	addi	a0,s1,48
   21a5c:	925f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21a60:	ed5ff06f          	jal	zero,21934 <dwarf::value::as_reference() const+0x894>
	_M_dispose();
   21a64:	0004b783          	ld	a5,0(s1)
   21a68:	0107b783          	ld	a5,16(a5)
   21a6c:	00048513          	addi	a0,s1,0
   21a70:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21a74:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21a78:	00021797          	auipc	a5,0x21
   21a7c:	a087b783          	ld	a5,-1528(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21a80:	0007c783          	lbu	a5,0(a5)
   21a84:	02078663          	beq	a5,zero,21ab0 <dwarf::value::as_reference() const+0xa10>
    _Atomic_word __result = *__mem;
   21a88:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   21a8c:	fff5079b          	addiw	a5,a0,-1
   21a90:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21a94:	00100793          	addi	a5,zero,1
   21a98:	eaf512e3          	bne	a0,a5,2193c <dwarf::value::as_reference() const+0x89c>
	    _M_destroy();
   21a9c:	0004b783          	ld	a5,0(s1)
   21aa0:	0187b783          	ld	a5,24(a5)
   21aa4:	00048513          	addi	a0,s1,0
   21aa8:	000780e7          	jalr	ra,0(a5)
   21aac:	e91ff06f          	jal	zero,2193c <dwarf::value::as_reference() const+0x89c>
      return __exchange_and_add(__mem, __val);
   21ab0:	fff00593          	addi	a1,zero,-1
   21ab4:	03448513          	addi	a0,s1,52
   21ab8:	8c9f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21abc:	fd9ff06f          	jal	zero,21a94 <dwarf::value::as_reference() const+0x9f4>
class die {
   21ac0:	00050413          	addi	s0,a0,0
   21ac4:	06810513          	addi	a0,sp,104
   21ac8:	00021317          	auipc	t1,0x21
   21acc:	92033303          	ld	t1,-1760(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   21ad0:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   21ad4:	13013503          	ld	a0,304(sp)
   21ad8:	00050863          	beq	a0,zero,21ae8 <dwarf::value::as_reference() const+0xa48>
	  _M_pi->_M_release();
   21adc:	00021317          	auipc	t1,0x21
   21ae0:	8ec33303          	ld	t1,-1812(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   21ae4:	000300e7          	jalr	ra,0(t1)
   21ae8:	00040513          	addi	a0,s0,0
   21aec:	c05f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    } catch (std::out_of_range &e) {
   21af0:	00100793          	addi	a5,zero,1
   21af4:	00050413          	addi	s0,a0,0
   21af8:	fcf59ee3          	bne	a1,a5,21ad4 <dwarf::value::as_reference() const+0xa34>
   21afc:	905f40ef          	jal	ra,16400 <__cxa_begin_catch@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   21b00:	01000513          	addi	a0,zero,16
   21b04:	91df40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   21b08:	00050493          	addi	s1,a0,0
   21b0c:	000a8593          	addi	a1,s5,0
   21b10:	02810513          	addi	a0,sp,40
   21b14:	00020317          	auipc	t1,0x20
   21b18:	7e433303          	ld	t1,2020(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   21b1c:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   21b20:	00015617          	auipc	a2,0x15
   21b24:	23060613          	addi	a2,a2,560 # 36d50 <std::piecewise_construct+0x268>
   21b28:	00000593          	addi	a1,zero,0
   21b2c:	02810513          	addi	a0,sp,40
   21b30:	861f40ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21b34:	00050593          	addi	a1,a0,0
   21b38:	04810413          	addi	s0,sp,72
   21b3c:	00040513          	addi	a0,s0,0
   21b40:	931f40ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   21b44:	00040593          	addi	a1,s0,0
   21b48:	00048513          	addi	a0,s1,0
   21b4c:	a55f40ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   21b50:	00021797          	auipc	a5,0x21
   21b54:	a087b783          	ld	a5,-1528(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   21b58:	01078793          	addi	a5,a5,16
   21b5c:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   21b60:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21b64:	05810793          	addi	a5,sp,88
   21b68:	00f50463          	beq	a0,a5,21b70 <dwarf::value::as_reference() const+0xad0>
   21b6c:	9a5f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21b70:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21b74:	03810793          	addi	a5,sp,56
   21b78:	00f50463          	beq	a0,a5,21b80 <dwarf::value::as_reference() const+0xae0>
   21b7c:	995f40ef          	jal	ra,16510 <operator delete(void*)@plt>
   21b80:	00021617          	auipc	a2,0x21
   21b84:	80063603          	ld	a2,-2048(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   21b88:	00020597          	auipc	a1,0x20
   21b8c:	7285b583          	ld	a1,1832(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   21b90:	00048513          	addi	a0,s1,0
   21b94:	b2df40ef          	jal	ra,166c0 <__cxa_throw@plt>
    }
   21b98:	00050413          	addi	s0,a0,0
   21b9c:	0300006f          	jal	zero,21bcc <dwarf::value::as_reference() const+0xb2c>
      { return _M_dataplus._M_p; }
   21ba0:	00050413          	addi	s0,a0,0
   21ba4:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21ba8:	05810793          	addi	a5,sp,88
   21bac:	00f50463          	beq	a0,a5,21bb4 <dwarf::value::as_reference() const+0xb14>
   21bb0:	961f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21bb4:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21bb8:	03810793          	addi	a5,sp,56
   21bbc:	00f50463          	beq	a0,a5,21bc4 <dwarf::value::as_reference() const+0xb24>
   21bc0:	951f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   21bc4:	00048513          	addi	a0,s1,0
   21bc8:	909f40ef          	jal	ra,164d0 <__cxa_free_exception@plt>
    }
   21bcc:	ac5f40ef          	jal	ra,16690 <__cxa_end_catch@plt>
   21bd0:	f05ff06f          	jal	zero,21ad4 <dwarf::value::as_reference() const+0xa34>
      { return _M_dataplus._M_p; }
   21bd4:	00050413          	addi	s0,a0,0
   21bd8:	fddff06f          	jal	zero,21bb4 <dwarf::value::as_reference() const+0xb14>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   21bdc:	00050413          	addi	s0,a0,0
   21be0:	fe5ff06f          	jal	zero,21bc4 <dwarf::value::as_reference() const+0xb24>
   21be4:	00050413          	addi	s0,a0,0
   21be8:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   21bec:	05810793          	addi	a5,sp,88
   21bf0:	00f50463          	beq	a0,a5,21bf8 <dwarf::value::as_reference() const+0xb58>
   21bf4:	91df40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21bf8:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   21bfc:	03810793          	addi	a5,sp,56
   21c00:	00f50463          	beq	a0,a5,21c08 <dwarf::value::as_reference() const+0xb68>
   21c04:	90df40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21c08:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   21c0c:	01810793          	addi	a5,sp,24
   21c10:	00f50463          	beq	a0,a5,21c18 <dwarf::value::as_reference() const+0xb78>
   21c14:	8fdf40ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as reference");
   21c18:	00048513          	addi	a0,s1,0
   21c1c:	8b5f40ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   21c20:	eb5ff06f          	jal	zero,21ad4 <dwarf::value::as_reference() const+0xa34>
      { return _M_dataplus._M_p; }
   21c24:	00050413          	addi	s0,a0,0
   21c28:	fd1ff06f          	jal	zero,21bf8 <dwarf::value::as_reference() const+0xb58>
   21c2c:	00050413          	addi	s0,a0,0
   21c30:	fd9ff06f          	jal	zero,21c08 <dwarf::value::as_reference() const+0xb68>
   21c34:	00050413          	addi	s0,a0,0
   21c38:	fe1ff06f          	jal	zero,21c18 <dwarf::value::as_reference() const+0xb78>
class die {
   21c3c:	00050413          	addi	s0,a0,0
   21c40:	0d810513          	addi	a0,sp,216
   21c44:	00020317          	auipc	t1,0x20
   21c48:	7a433303          	ld	t1,1956(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   21c4c:	000300e7          	jalr	ra,0(t1)
   21c50:	e85ff06f          	jal	zero,21ad4 <dwarf::value::as_reference() const+0xa34>
        val |= ((uint64_t)p[i]) << (i * 8);
   21c54:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   21c58:	00178793          	addi	a5,a5,1
   21c5c:	12f13c23          	sd	a5,312(sp)
  die d(cu);
   21c60:	00093583          	ld	a1,0(s2)
   21c64:	0b810513          	addi	a0,sp,184
   21c68:	dfcfb0ef          	jal	ra,1d264 <dwarf::die::die(dwarf::unit const*)>
   21c6c:	bf9ff06f          	jal	zero,21864 <dwarf::value::as_reference() const+0x7c4>
  cursor cur(cu->data(), offset);
   21c70:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21c74:	13313423          	sd	s3,296(sp)
      : _M_pi(__r._M_pi)
   21c78:	12013823          	sd	zero,304(sp)
      : sec(sec), pos(sec->begin + offset) {}
   21c7c:	0089b783          	ld	a5,8(s3)
   21c80:	00e787b3          	add	a5,a5,a4
   21c84:	12f13c23          	sd	a5,312(sp)
  switch (form) {
   21c88:	00892783          	lw	a5,8(s2)
   21c8c:	ff07879b          	addiw	a5,a5,-16
   21c90:	0007869b          	addiw	a3,a5,0
   21c94:	01000713          	addi	a4,zero,16
   21c98:	aed76ee3          	bltu	a4,a3,21794 <dwarf::value::as_reference() const+0x6f4>
   21c9c:	02079713          	slli	a4,a5,0x20
   21ca0:	01e75793          	srli	a5,a4,0x1e
   21ca4:	00015717          	auipc	a4,0x15
   21ca8:	29c70713          	addi	a4,a4,668 # 36f40 <std::piecewise_construct+0x458>
   21cac:	00e787b3          	add	a5,a5,a4
   21cb0:	0007a783          	lw	a5,0(a5)
   21cb4:	00e787b3          	add	a5,a5,a4
   21cb8:	00078067          	jalr	zero,0(a5)

0000000000021cbc <dwarf::to_string[abi:cxx11](dwarf::value const&)>:

string to_string(const value &v) {
   21cbc:	ed010113          	addi	sp,sp,-304
   21cc0:	12113423          	sd	ra,296(sp)
   21cc4:	12813023          	sd	s0,288(sp)
   21cc8:	10913c23          	sd	s1,280(sp)
   21ccc:	11213823          	sd	s2,272(sp)
   21cd0:	11313423          	sd	s3,264(sp)
   21cd4:	11413023          	sd	s4,256(sp)
   21cd8:	0f513c23          	sd	s5,248(sp)
   21cdc:	0f613823          	sd	s6,240(sp)
   21ce0:	0f713423          	sd	s7,232(sp)
   21ce4:	0f813023          	sd	s8,224(sp)
   21ce8:	0d913c23          	sd	s9,216(sp)
   21cec:	0da13823          	sd	s10,208(sp)
   21cf0:	0db13423          	sd	s11,200(sp)
   21cf4:	00050413          	addi	s0,a0,0
   21cf8:	00058513          	addi	a0,a1,0
  type get_type() const { return typ; }
   21cfc:	00c5a583          	lw	a1,12(a1)
  switch (v.get_type()) {
   21d00:	00d00713          	addi	a4,zero,13
   21d04:	00b77463          	bgeu	a4,a1,21d0c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x50>
   21d08:	6b50006f          	jal	zero,22bbc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf00>
   21d0c:	00259793          	slli	a5,a1,0x2
   21d10:	00015717          	auipc	a4,0x15
   21d14:	27470713          	addi	a4,a4,628 # 36f84 <std::piecewise_construct+0x49c>
   21d18:	00e787b3          	add	a5,a5,a4
   21d1c:	0007a783          	lw	a5,0(a5)
   21d20:	00e787b3          	add	a5,a5,a4
   21d24:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   21d28:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   21d2c:	00f43023          	sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   21d30:	00000693          	addi	a3,zero,0
   21d34:	00015617          	auipc	a2,0x15
   21d38:	06060613          	addi	a2,a2,96 # 36d94 <std::piecewise_construct+0x2ac>
   21d3c:	00015597          	auipc	a1,0x15
   21d40:	04458593          	addi	a1,a1,68 # 36d80 <std::piecewise_construct+0x298>
   21d44:	00040513          	addi	a0,s0,0
   21d48:	00020317          	auipc	t1,0x20
   21d4c:	5c033303          	ld	t1,1472(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   21d50:	000300e7          	jalr	ra,0(t1)
  }
  case value::type::string:
    return v.as_string();
  }
  return "<unexpected value type " + to_string(v.get_type()) + ">";
}
   21d54:	00040513          	addi	a0,s0,0
   21d58:	12813083          	ld	ra,296(sp)
   21d5c:	12013403          	ld	s0,288(sp)
   21d60:	11813483          	ld	s1,280(sp)
   21d64:	11013903          	ld	s2,272(sp)
   21d68:	10813983          	ld	s3,264(sp)
   21d6c:	10013a03          	ld	s4,256(sp)
   21d70:	0f813a83          	ld	s5,248(sp)
   21d74:	0f013b03          	ld	s6,240(sp)
   21d78:	0e813b83          	ld	s7,232(sp)
   21d7c:	0e013c03          	ld	s8,224(sp)
   21d80:	0d813c83          	ld	s9,216(sp)
   21d84:	0d013d03          	ld	s10,208(sp)
   21d88:	0c813d83          	ld	s11,200(sp)
   21d8c:	13010113          	addi	sp,sp,304
   21d90:	00008067          	jalr	zero,0(ra)
    return "0x" + to_hex(v.as_address());
   21d94:	db4fc0ef          	jal	ra,1e348 <dwarf::value::as_address() const>
   21d98:	00050593          	addi	a1,a0,0
   21d9c:	05010493          	addi	s1,sp,80
   21da0:	00048513          	addi	a0,s1,0
   21da4:	00020317          	auipc	t1,0x20
   21da8:	55433303          	ld	t1,1364(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   21dac:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   21db0:	00200713          	addi	a4,zero,2
   21db4:	00016697          	auipc	a3,0x16
   21db8:	f3468693          	addi	a3,a3,-204 # 37ce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   21dbc:	00000613          	addi	a2,zero,0
   21dc0:	00000593          	addi	a1,zero,0
   21dc4:	00048513          	addi	a0,s1,0
   21dc8:	899f40ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   21dcc:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   21dd0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   21dd4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   21dd8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   21ddc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   21de0:	03278c63          	beq	a5,s2,21e18 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x15c>
      { _M_dataplus._M_p = __p; }
   21de4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   21de8:	0104b783          	ld	a5,16(s1)
   21dec:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   21df0:	0084b783          	ld	a5,8(s1)
   21df4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   21df8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   21dfc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   21e00:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   21e04:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   21e08:	06010793          	addi	a5,sp,96
   21e0c:	f4f504e3          	beq	a0,a5,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   21e10:	f00f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   21e14:	f41ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   21e18:	0084b603          	ld	a2,8(s1)
   21e1c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   21e20:	fc0608e3          	beq	a2,zero,21df0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x134>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   21e24:	00090593          	addi	a1,s2,0
   21e28:	f88f40ef          	jal	ra,165b0 <memcpy@plt>
   21e2c:	fc5ff06f          	jal	zero,21df0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x134>
    const char *b = (const char *)v.as_block(&size);
   21e30:	01010593          	addi	a1,sp,16
   21e34:	86dfc0ef          	jal	ra,1e6a0 <dwarf::value::as_block(unsigned long*) const>
   21e38:	00050a13          	addi	s4,a0,0
    string res = ::to_string(size) + " byte block:";
   21e3c:	01013483          	ld	s1,16(sp)
  to_string(unsigned long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
    string __str(__detail::__to_chars_len(__val), '\0');
   21e40:	00a00593          	addi	a1,zero,10
   21e44:	00048513          	addi	a0,s1,0
   21e48:	00020317          	auipc	t1,0x20
   21e4c:	6e033303          	ld	t1,1760(t1) # 42528 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f304>
   21e50:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   21e54:	06010793          	addi	a5,sp,96
   21e58:	04f13823          	sd	a5,80(sp)
      { _M_construct(__n, __c); }
   21e5c:	00000613          	addi	a2,zero,0
   21e60:	02051593          	slli	a1,a0,0x20
   21e64:	0205d593          	srli	a1,a1,0x20
   21e68:	05010513          	addi	a0,sp,80
   21e6c:	f04f40ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   21e70:	00048613          	addi	a2,s1,0
   21e74:	05812583          	lw	a1,88(sp)
   21e78:	05013503          	ld	a0,80(sp)
   21e7c:	00020317          	auipc	t1,0x20
   21e80:	57433303          	ld	t1,1396(t1) # 423f0 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1f13c>
   21e84:	000300e7          	jalr	ra,0(t1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   21e88:	fff00793          	addi	a5,zero,-1
   21e8c:	0027d793          	srli	a5,a5,0x2
   21e90:	05813703          	ld	a4,88(sp)
   21e94:	40e787b3          	sub	a5,a5,a4
   21e98:	00b00713          	addi	a4,zero,11
   21e9c:	00f77e63          	bgeu	a4,a5,21eb8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1fc>
	return _M_append(__s, __n);
   21ea0:	00c00613          	addi	a2,zero,12
   21ea4:	00015597          	auipc	a1,0x15
   21ea8:	f0c58593          	addi	a1,a1,-244 # 36db0 <std::piecewise_construct+0x2c8>
   21eac:	05010513          	addi	a0,sp,80
   21eb0:	d10f40ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   21eb4:	02c0006f          	jal	zero,21ee0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x224>
	  __throw_length_error(__N(__s));
   21eb8:	00015517          	auipc	a0,0x15
   21ebc:	ee050513          	addi	a0,a0,-288 # 36d98 <std::piecewise_construct+0x2b0>
   21ec0:	d80f40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   21ec4:	00050413          	addi	s0,a0,0
   21ec8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   21ecc:	06010793          	addi	a5,sp,96
   21ed0:	00f50463          	beq	a0,a5,21ed8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x21c>
   21ed4:	e3cf40ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   21ed8:	00040513          	addi	a0,s0,0
   21edc:	815f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   21ee0:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   21ee4:	04010793          	addi	a5,sp,64
   21ee8:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   21eec:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   21ef0:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   21ef4:	07278263          	beq	a5,s2,21f58 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x29c>
      { _M_dataplus._M_p = __p; }
   21ef8:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   21efc:	01053783          	ld	a5,16(a0)
   21f00:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   21f04:	0084b783          	ld	a5,8(s1)
   21f08:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   21f0c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   21f10:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   21f14:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   21f18:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   21f1c:	06010793          	addi	a5,sp,96
   21f20:	00f50463          	beq	a0,a5,21f28 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x26c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   21f24:	decf40ef          	jal	ra,16510 <operator delete(void*)@plt>
    for (size_t pos = 0; pos < size; ++pos) {
   21f28:	01013783          	ld	a5,16(sp)
   21f2c:	1a078e63          	beq	a5,zero,220e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x42c>
   21f30:	00000493          	addi	s1,zero,0
	return _M_is_local() ? size_type(_S_local_capacity)
   21f34:	04010b13          	addi	s6,sp,64
   21f38:	00f00c93          	addi	s9,zero,15
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   21f3c:	03010993          	addi	s3,sp,48
	: allocator_type(__a), _M_p(__dat) { }
   21f40:	05010b93          	addi	s7,sp,80
   21f44:	06010913          	addi	s2,sp,96
    pos--;
   21f48:	00810c13          	addi	s8,sp,8
	if (this->max_size() - (this->size() - __n1) < __n2)
   21f4c:	fff00a93          	addi	s5,zero,-1
   21f50:	002ada93          	srli	s5,s5,0x2
   21f54:	0e80006f          	jal	zero,2203c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x380>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   21f58:	00853603          	ld	a2,8(a0)
   21f5c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   21f60:	fa0602e3          	beq	a2,zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x248>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   21f64:	00090593          	addi	a1,s2,0
   21f68:	04010513          	addi	a0,sp,64
   21f6c:	e44f40ef          	jal	ra,165b0 <memcpy@plt>
   21f70:	f95ff06f          	jal	zero,21f04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x248>
	return _M_is_local() ? size_type(_S_local_capacity)
   21f74:	000c8793          	addi	a5,s9,0
   21f78:	0d80006f          	jal	zero,22050 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x394>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   21f7c:	00100713          	addi	a4,zero,1
   21f80:	00000693          	addi	a3,zero,0
   21f84:	00000613          	addi	a2,zero,0
   21f88:	000d8593          	addi	a1,s11,0
   21f8c:	00098513          	addi	a0,s3,0
   21f90:	fa0f40ef          	jal	ra,16730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   21f94:	0c00006f          	jal	zero,22054 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x398>
	: allocator_type(__a), _M_p(__dat) { }
   21f98:	05213823          	sd	s2,80(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   21f9c:	00000693          	addi	a3,zero,0
   21fa0:	00016617          	auipc	a2,0x16
   21fa4:	76160613          	addi	a2,a2,1889 # 38701 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   21fa8:	00016597          	auipc	a1,0x16
   21fac:	75858593          	addi	a1,a1,1880 # 38700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   21fb0:	000b8513          	addi	a0,s7,0
   21fb4:	00020317          	auipc	t1,0x20
   21fb8:	35433303          	ld	t1,852(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   21fbc:	000300e7          	jalr	ra,0(t1)
   21fc0:	00c0006f          	jal	zero,21fcc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x310>
  *pos-- = '\0';
   21fc4:	00910d13          	addi	s10,sp,9
   21fc8:	0f40006f          	jal	zero,220bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x400>
      { return _M_dataplus._M_p; }
   21fcc:	05013583          	ld	a1,80(sp)
      { return _M_string_length; }
   21fd0:	05813603          	ld	a2,88(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   21fd4:	03813783          	ld	a5,56(sp)
   21fd8:	40fa87b3          	sub	a5,s5,a5
   21fdc:	00c7e863          	bltu	a5,a2,21fec <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x330>
	return _M_append(__s, __n);
   21fe0:	00098513          	addi	a0,s3,0
   21fe4:	bdcf40ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   21fe8:	03c0006f          	jal	zero,22024 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x368>
	  __throw_length_error(__N(__s));
   21fec:	00015517          	auipc	a0,0x15
   21ff0:	dac50513          	addi	a0,a0,-596 # 36d98 <std::piecewise_construct+0x2b0>
   21ff4:	c4cf40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   21ff8:	00050413          	addi	s0,a0,0
   21ffc:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22000:	06010793          	addi	a5,sp,96
   22004:	00f50463          	beq	a0,a5,2200c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x350>
   22008:	d08f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2200c:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22010:	04010793          	addi	a5,sp,64
   22014:	00f50463          	beq	a0,a5,2201c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x360>
   22018:	cf8f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2201c:	00040513          	addi	a0,s0,0
   22020:	ed0f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22024:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22028:	01250463          	beq	a0,s2,22030 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x374>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2202c:	ce4f40ef          	jal	ra,16510 <operator delete(void*)@plt>
   22030:	00148493          	addi	s1,s1,1
   22034:	01013783          	ld	a5,16(sp)
   22038:	0af4f863          	bgeu	s1,a5,220e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x42c>
      { return _M_string_length; }
   2203c:	03813d83          	ld	s11,56(sp)
	if (__size + 1 > this->capacity())
   22040:	001d8d13          	addi	s10,s11,1
	return _M_is_local() ? size_type(_S_local_capacity)
   22044:	03013783          	ld	a5,48(sp)
   22048:	f36786e3          	beq	a5,s6,21f74 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2b8>
   2204c:	04013783          	ld	a5,64(sp)
	if (__size + 1 > this->capacity())
   22050:	f3a7e6e3          	bltu	a5,s10,21f7c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2c0>
	__c1 = __c2;
   22054:	03013583          	ld	a1,48(sp)
   22058:	01b585b3          	add	a1,a1,s11
   2205c:	02000793          	addi	a5,zero,32
   22060:	00f58023          	sb	a5,0(a1)
      { _M_string_length = __length; }
   22064:	03a13c23          	sd	s10,56(sp)
   22068:	03013783          	ld	a5,48(sp)
   2206c:	01a787b3          	add	a5,a5,s10
   22070:	00078023          	sb	zero,0(a5)
      res += to_hex(b[pos]);
   22074:	009a07b3          	add	a5,s4,s1
   22078:	0007c783          	lbu	a5,0(a5)
  if (v == 0)
   2207c:	f0078ee3          	beq	a5,zero,21f98 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2dc>
  *pos-- = '\0';
   22080:	00010523          	sb	zero,10(sp)
  while (v && pos >= buf) {
   22084:	00f7f713          	andi	a4,a5,15
    if (digit < 10)
   22088:	00900613          	addi	a2,zero,9
      *pos = '0' + digit;
   2208c:	03070693          	addi	a3,a4,48
    if (digit < 10)
   22090:	00e67463          	bgeu	a2,a4,22098 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x3dc>
      *pos = 'a' + (digit - 10);
   22094:	05770693          	addi	a3,a4,87
   22098:	00d104a3          	sb	a3,9(sp)
    v >>= 4;
   2209c:	0047d793          	srli	a5,a5,0x4
  while (v && pos >= buf) {
   220a0:	f20782e3          	beq	a5,zero,21fc4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x308>
    if (digit < 10)
   220a4:	00900693          	addi	a3,zero,9
      *pos = 'a' + (digit - 10);
   220a8:	05778713          	addi	a4,a5,87
    if (digit < 10)
   220ac:	00f6e463          	bltu	a3,a5,220b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x3f8>
      *pos = '0' + digit;
   220b0:	03078713          	addi	a4,a5,48
   220b4:	00e10423          	sb	a4,8(sp)
    pos--;
   220b8:	000c0d13          	addi	s10,s8,0
	: allocator_type(__a), _M_p(__dat) { }
   220bc:	05213823          	sd	s2,80(sp)
	return __builtin_strlen(__s);
   220c0:	000d0513          	addi	a0,s10,0
   220c4:	b4cf40ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   220c8:	00000693          	addi	a3,zero,0
   220cc:	00ad0633          	add	a2,s10,a0
   220d0:	000d0593          	addi	a1,s10,0
   220d4:	000b8513          	addi	a0,s7,0
   220d8:	00020317          	auipc	t1,0x20
   220dc:	23033303          	ld	t1,560(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   220e0:	000300e7          	jalr	ra,0(t1)
      }
   220e4:	ee9ff06f          	jal	zero,21fcc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x310>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   220e8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   220ec:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   220f0:	03013783          	ld	a5,48(sp)
	if (__str._M_is_local())
   220f4:	04010713          	addi	a4,sp,64
   220f8:	00e78e63          	beq	a5,a4,22114 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x458>
      { _M_dataplus._M_p = __p; }
   220fc:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22100:	04013783          	ld	a5,64(sp)
   22104:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22108:	03813783          	ld	a5,56(sp)
   2210c:	00f43423          	sd	a5,8(s0)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22110:	c45ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22114:	03813603          	ld	a2,56(sp)
   22118:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2211c:	fe0606e3          	beq	a2,zero,22108 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x44c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22120:	00070593          	addi	a1,a4,0
   22124:	c8cf40ef          	jal	ra,165b0 <memcpy@plt>
   22128:	fe1ff06f          	jal	zero,22108 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x44c>
    return "0x" + to_hex(v.as_uconstant());
   2212c:	aa5fc0ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   22130:	00050593          	addi	a1,a0,0
   22134:	05010493          	addi	s1,sp,80
   22138:	00048513          	addi	a0,s1,0
   2213c:	00020317          	auipc	t1,0x20
   22140:	1bc33303          	ld	t1,444(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   22144:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22148:	00200713          	addi	a4,zero,2
   2214c:	00016697          	auipc	a3,0x16
   22150:	b9c68693          	addi	a3,a3,-1124 # 37ce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   22154:	00000613          	addi	a2,zero,0
   22158:	00000593          	addi	a1,zero,0
   2215c:	00048513          	addi	a0,s1,0
   22160:	d00f40ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22164:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22168:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2216c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22170:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22174:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22178:	03278c63          	beq	a5,s2,221b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4f4>
      { _M_dataplus._M_p = __p; }
   2217c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22180:	0104b783          	ld	a5,16(s1)
   22184:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22188:	0084b783          	ld	a5,8(s1)
   2218c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22190:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22194:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22198:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2219c:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   221a0:	06010793          	addi	a5,sp,96
   221a4:	baf508e3          	beq	a0,a5,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   221a8:	b68f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   221ac:	ba9ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   221b0:	0084b603          	ld	a2,8(s1)
   221b4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   221b8:	fc0608e3          	beq	a2,zero,22188 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4cc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   221bc:	00090593          	addi	a1,s2,0
   221c0:	bf0f40ef          	jal	ra,165b0 <memcpy@plt>
   221c4:	fc5ff06f          	jal	zero,22188 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4cc>
    return ::to_string(v.as_uconstant());
   221c8:	a09fc0ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   221cc:	00050493          	addi	s1,a0,0
    string __str(__detail::__to_chars_len(__val), '\0');
   221d0:	00a00593          	addi	a1,zero,10
   221d4:	00020317          	auipc	t1,0x20
   221d8:	35433303          	ld	t1,852(t1) # 42528 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f304>
   221dc:	000300e7          	jalr	ra,0(t1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   221e0:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   221e4:	00f43023          	sd	a5,0(s0)
      { _M_construct(__n, __c); }
   221e8:	00000613          	addi	a2,zero,0
   221ec:	02051593          	slli	a1,a0,0x20
   221f0:	0205d593          	srli	a1,a1,0x20
   221f4:	00040513          	addi	a0,s0,0
   221f8:	b78f40ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   221fc:	00048613          	addi	a2,s1,0
   22200:	00842583          	lw	a1,8(s0)
   22204:	00043503          	ld	a0,0(s0)
   22208:	00020317          	auipc	t1,0x20
   2220c:	1e833303          	ld	t1,488(t1) # 423f0 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1f13c>
   22210:	000300e7          	jalr	ra,0(t1)
    return __str;
   22214:	b41ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return ::to_string(v.as_sconstant());
   22218:	f39fc0ef          	jal	ra,1f150 <dwarf::value::as_sconstant() const>
    const bool __neg = __val < 0;
   2221c:	03f55913          	srli	s2,a0,0x3f
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
   22220:	43f55793          	srai	a5,a0,0x3f
   22224:	00a7c4b3          	xor	s1,a5,a0
   22228:	40f484b3          	sub	s1,s1,a5
    const auto __len = __detail::__to_chars_len(__uval);
   2222c:	00a00593          	addi	a1,zero,10
   22230:	00048513          	addi	a0,s1,0
   22234:	00020317          	auipc	t1,0x20
   22238:	2f433303          	ld	t1,756(t1) # 42528 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1f304>
   2223c:	000300e7          	jalr	ra,0(t1)
   22240:	0005099b          	addiw	s3,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22244:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   22248:	00f43023          	sd	a5,0(s0)
    string __str(__neg + __len, '-');
   2224c:	00a905bb          	addw	a1,s2,a0
      { _M_construct(__n, __c); }
   22250:	02d00613          	addi	a2,zero,45
   22254:	02059593          	slli	a1,a1,0x20
   22258:	0205d593          	srli	a1,a1,0x20
   2225c:	00040513          	addi	a0,s0,0
   22260:	b10f40ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   22264:	00043503          	ld	a0,0(s0)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   22268:	00048613          	addi	a2,s1,0
   2226c:	00098593          	addi	a1,s3,0
   22270:	01250533          	add	a0,a0,s2
   22274:	00020317          	auipc	t1,0x20
   22278:	17c33303          	ld	t1,380(t1) # 423f0 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1f13c>
   2227c:	000300e7          	jalr	ra,0(t1)
    return __str;
   22280:	ad5ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22284:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   22288:	00f43023          	sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   2228c:	00000693          	addi	a3,zero,0
   22290:	00015617          	auipc	a2,0x15
   22294:	b3960613          	addi	a2,a2,-1223 # 36dc9 <std::piecewise_construct+0x2e1>
   22298:	00015597          	auipc	a1,0x15
   2229c:	b2858593          	addi	a1,a1,-1240 # 36dc0 <std::piecewise_construct+0x2d8>
   222a0:	00040513          	addi	a0,s0,0
   222a4:	00020317          	auipc	t1,0x20
   222a8:	06433303          	ld	t1,100(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   222ac:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   222b0:	aa5ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return v.as_flag() ? "true" : "false";
   222b4:	905fd0ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   222b8:	00015497          	auipc	s1,0x15
   222bc:	ac048493          	addi	s1,s1,-1344 # 36d78 <std::piecewise_construct+0x290>
   222c0:	00050663          	beq	a0,zero,222cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x610>
   222c4:	00015497          	auipc	s1,0x15
   222c8:	aac48493          	addi	s1,s1,-1364 # 36d70 <std::piecewise_construct+0x288>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   222cc:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   222d0:	00f43023          	sd	a5,0(s0)
	return __builtin_strlen(__s);
   222d4:	00048513          	addi	a0,s1,0
   222d8:	938f40ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   222dc:	00000693          	addi	a3,zero,0
   222e0:	00a48633          	add	a2,s1,a0
   222e4:	00048593          	addi	a1,s1,0
   222e8:	00040513          	addi	a0,s0,0
   222ec:	00020317          	auipc	t1,0x20
   222f0:	01c33303          	ld	t1,28(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   222f4:	000300e7          	jalr	ra,0(t1)
   222f8:	a5dff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
    return "<line 0x" + to_hex(v.as_sec_offset()) + ">";
   222fc:	9e0fe0ef          	jal	ra,204dc <dwarf::value::as_sec_offset() const>
   22300:	00050593          	addi	a1,a0,0
   22304:	03010493          	addi	s1,sp,48
   22308:	00048513          	addi	a0,s1,0
   2230c:	00020317          	auipc	t1,0x20
   22310:	fec33303          	ld	t1,-20(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   22314:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22318:	00800713          	addi	a4,zero,8
   2231c:	00015697          	auipc	a3,0x15
   22320:	ab468693          	addi	a3,a3,-1356 # 36dd0 <std::piecewise_construct+0x2e8>
   22324:	00000613          	addi	a2,zero,0
   22328:	00000593          	addi	a1,zero,0
   2232c:	00048513          	addi	a0,s1,0
   22330:	b30f40ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22334:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22338:	06010793          	addi	a5,sp,96
   2233c:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   22340:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22344:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22348:	05278663          	beq	a5,s2,22394 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6d8>
      { _M_dataplus._M_p = __p; }
   2234c:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22350:	01053783          	ld	a5,16(a0)
   22354:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22358:	0084b783          	ld	a5,8(s1)
   2235c:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22360:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22364:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22368:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2236c:	05813703          	ld	a4,88(sp)
   22370:	fff00793          	addi	a5,zero,-1
   22374:	0027d793          	srli	a5,a5,0x2
   22378:	02f70c63          	beq	a4,a5,223b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6f4>
	return _M_append(__s, __n);
   2237c:	00100613          	addi	a2,zero,1
   22380:	00015597          	auipc	a1,0x15
   22384:	a4858593          	addi	a1,a1,-1464 # 36dc8 <std::piecewise_construct+0x2e0>
   22388:	05010513          	addi	a0,sp,80
   2238c:	834f40ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22390:	0580006f          	jal	zero,223e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x72c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22394:	00853603          	ld	a2,8(a0)
   22398:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2239c:	fa060ee3          	beq	a2,zero,22358 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x69c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   223a0:	00090593          	addi	a1,s2,0
   223a4:	06010513          	addi	a0,sp,96
   223a8:	a08f40ef          	jal	ra,165b0 <memcpy@plt>
   223ac:	fadff06f          	jal	zero,22358 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x69c>
	  __throw_length_error(__N(__s));
   223b0:	00015517          	auipc	a0,0x15
   223b4:	9e850513          	addi	a0,a0,-1560 # 36d98 <std::piecewise_construct+0x2b0>
   223b8:	888f40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   223bc:	00050413          	addi	s0,a0,0
   223c0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   223c4:	06010793          	addi	a5,sp,96
   223c8:	00f50463          	beq	a0,a5,223d0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x714>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   223cc:	944f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   223d0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   223d4:	04010793          	addi	a5,sp,64
   223d8:	00f50463          	beq	a0,a5,223e0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x724>
   223dc:	934f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   223e0:	00040513          	addi	a0,s0,0
   223e4:	b0cf40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   223e8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   223ec:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   223f0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   223f4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   223f8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   223fc:	05278463          	beq	a5,s2,22444 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x788>
      { _M_dataplus._M_p = __p; }
   22400:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22404:	0104b783          	ld	a5,16(s1)
   22408:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2240c:	0084b783          	ld	a5,8(s1)
   22410:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22414:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22418:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2241c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22420:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22424:	06010793          	addi	a5,sp,96
   22428:	00f50463          	beq	a0,a5,22430 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x774>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2242c:	8e4f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22430:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22434:	04010793          	addi	a5,sp,64
   22438:	90f50ee3          	beq	a0,a5,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   2243c:	8d4f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22440:	915ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22444:	0084b603          	ld	a2,8(s1)
   22448:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2244c:	fc0600e3          	beq	a2,zero,2240c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x750>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22450:	00090593          	addi	a1,s2,0
   22454:	95cf40ef          	jal	ra,165b0 <memcpy@plt>
   22458:	fb5ff06f          	jal	zero,2240c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x750>
    return "<loclist 0x" + to_hex(v.as_sec_offset()) + ">";
   2245c:	880fe0ef          	jal	ra,204dc <dwarf::value::as_sec_offset() const>
   22460:	00050593          	addi	a1,a0,0
   22464:	03010493          	addi	s1,sp,48
   22468:	00048513          	addi	a0,s1,0
   2246c:	00020317          	auipc	t1,0x20
   22470:	e8c33303          	ld	t1,-372(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   22474:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22478:	00b00713          	addi	a4,zero,11
   2247c:	00015697          	auipc	a3,0x15
   22480:	96468693          	addi	a3,a3,-1692 # 36de0 <std::piecewise_construct+0x2f8>
   22484:	00000613          	addi	a2,zero,0
   22488:	00000593          	addi	a1,zero,0
   2248c:	00048513          	addi	a0,s1,0
   22490:	9d0f40ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22494:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22498:	06010793          	addi	a5,sp,96
   2249c:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   224a0:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   224a4:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   224a8:	05278663          	beq	a5,s2,224f4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x838>
      { _M_dataplus._M_p = __p; }
   224ac:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   224b0:	01053783          	ld	a5,16(a0)
   224b4:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   224b8:	0084b783          	ld	a5,8(s1)
   224bc:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   224c0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   224c4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   224c8:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   224cc:	05813703          	ld	a4,88(sp)
   224d0:	fff00793          	addi	a5,zero,-1
   224d4:	0027d793          	srli	a5,a5,0x2
   224d8:	02f70c63          	beq	a4,a5,22510 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x854>
	return _M_append(__s, __n);
   224dc:	00100613          	addi	a2,zero,1
   224e0:	00015597          	auipc	a1,0x15
   224e4:	8e858593          	addi	a1,a1,-1816 # 36dc8 <std::piecewise_construct+0x2e0>
   224e8:	05010513          	addi	a0,sp,80
   224ec:	ed5f30ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   224f0:	0580006f          	jal	zero,22548 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x88c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   224f4:	00853603          	ld	a2,8(a0)
   224f8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   224fc:	fa060ee3          	beq	a2,zero,224b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22500:	00090593          	addi	a1,s2,0
   22504:	06010513          	addi	a0,sp,96
   22508:	8a8f40ef          	jal	ra,165b0 <memcpy@plt>
   2250c:	fadff06f          	jal	zero,224b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fc>
	  __throw_length_error(__N(__s));
   22510:	00015517          	auipc	a0,0x15
   22514:	88850513          	addi	a0,a0,-1912 # 36d98 <std::piecewise_construct+0x2b0>
   22518:	f29f30ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2251c:	00050413          	addi	s0,a0,0
   22520:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22524:	06010793          	addi	a5,sp,96
   22528:	00f50463          	beq	a0,a5,22530 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x874>
   2252c:	fe5f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22530:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22534:	04010793          	addi	a5,sp,64
   22538:	00f50463          	beq	a0,a5,22540 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x884>
   2253c:	fd5f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22540:	00040513          	addi	a0,s0,0
   22544:	9acf40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22548:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2254c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22550:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22554:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22558:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2255c:	05278463          	beq	a5,s2,225a4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8e8>
      { _M_dataplus._M_p = __p; }
   22560:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22564:	0104b783          	ld	a5,16(s1)
   22568:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2256c:	0084b783          	ld	a5,8(s1)
   22570:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22574:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22578:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2257c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22580:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22584:	06010793          	addi	a5,sp,96
   22588:	00f50463          	beq	a0,a5,22590 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8d4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2258c:	f85f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22590:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22594:	04010793          	addi	a5,sp,64
   22598:	faf50e63          	beq	a0,a5,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   2259c:	f75f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   225a0:	fb4ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   225a4:	0084b603          	ld	a2,8(s1)
   225a8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   225ac:	fc0600e3          	beq	a2,zero,2256c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8b0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   225b0:	00090593          	addi	a1,s2,0
   225b4:	ffdf30ef          	jal	ra,165b0 <memcpy@plt>
   225b8:	fb5ff06f          	jal	zero,2256c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8b0>
    return "<mac 0x" + to_hex(v.as_sec_offset()) + ">";
   225bc:	f21fd0ef          	jal	ra,204dc <dwarf::value::as_sec_offset() const>
   225c0:	00050593          	addi	a1,a0,0
   225c4:	03010493          	addi	s1,sp,48
   225c8:	00048513          	addi	a0,s1,0
   225cc:	00020317          	auipc	t1,0x20
   225d0:	d2c33303          	ld	t1,-724(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   225d4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   225d8:	00700713          	addi	a4,zero,7
   225dc:	00015697          	auipc	a3,0x15
   225e0:	81468693          	addi	a3,a3,-2028 # 36df0 <std::piecewise_construct+0x308>
   225e4:	00000613          	addi	a2,zero,0
   225e8:	00000593          	addi	a1,zero,0
   225ec:	00048513          	addi	a0,s1,0
   225f0:	870f40ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   225f4:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   225f8:	06010793          	addi	a5,sp,96
   225fc:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   22600:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22604:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22608:	05278663          	beq	a5,s2,22654 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x998>
      { _M_dataplus._M_p = __p; }
   2260c:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22610:	01053783          	ld	a5,16(a0)
   22614:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22618:	0084b783          	ld	a5,8(s1)
   2261c:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22620:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22624:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22628:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2262c:	05813703          	ld	a4,88(sp)
   22630:	fff00793          	addi	a5,zero,-1
   22634:	0027d793          	srli	a5,a5,0x2
   22638:	02f70c63          	beq	a4,a5,22670 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9b4>
	return _M_append(__s, __n);
   2263c:	00100613          	addi	a2,zero,1
   22640:	00014597          	auipc	a1,0x14
   22644:	78858593          	addi	a1,a1,1928 # 36dc8 <std::piecewise_construct+0x2e0>
   22648:	05010513          	addi	a0,sp,80
   2264c:	d75f30ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22650:	0580006f          	jal	zero,226a8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9ec>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22654:	00853603          	ld	a2,8(a0)
   22658:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2265c:	fa060ee3          	beq	a2,zero,22618 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x95c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22660:	00090593          	addi	a1,s2,0
   22664:	06010513          	addi	a0,sp,96
   22668:	f49f30ef          	jal	ra,165b0 <memcpy@plt>
   2266c:	fadff06f          	jal	zero,22618 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x95c>
	  __throw_length_error(__N(__s));
   22670:	00014517          	auipc	a0,0x14
   22674:	72850513          	addi	a0,a0,1832 # 36d98 <std::piecewise_construct+0x2b0>
   22678:	dc9f30ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2267c:	00050413          	addi	s0,a0,0
   22680:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22684:	06010793          	addi	a5,sp,96
   22688:	00f50463          	beq	a0,a5,22690 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9d4>
   2268c:	e85f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22690:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22694:	04010793          	addi	a5,sp,64
   22698:	00f50463          	beq	a0,a5,226a0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9e4>
   2269c:	e75f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   226a0:	00040513          	addi	a0,s0,0
   226a4:	84cf40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   226a8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   226ac:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   226b0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   226b4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   226b8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   226bc:	05278463          	beq	a5,s2,22704 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa48>
      { _M_dataplus._M_p = __p; }
   226c0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   226c4:	0104b783          	ld	a5,16(s1)
   226c8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   226cc:	0084b783          	ld	a5,8(s1)
   226d0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   226d4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   226d8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   226dc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   226e0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   226e4:	06010793          	addi	a5,sp,96
   226e8:	00f50463          	beq	a0,a5,226f0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa34>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   226ec:	e25f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   226f0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   226f4:	04010793          	addi	a5,sp,64
   226f8:	e4f50e63          	beq	a0,a5,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   226fc:	e15f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22700:	e54ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22704:	0084b603          	ld	a2,8(s1)
   22708:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2270c:	fc0600e3          	beq	a2,zero,226cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa10>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22710:	00090593          	addi	a1,s2,0
   22714:	e9df30ef          	jal	ra,165b0 <memcpy@plt>
   22718:	fb5ff06f          	jal	zero,226cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa10>
    return "<rangelist 0x" + to_hex(v.as_sec_offset()) + ">";
   2271c:	dc1fd0ef          	jal	ra,204dc <dwarf::value::as_sec_offset() const>
   22720:	00050593          	addi	a1,a0,0
   22724:	03010493          	addi	s1,sp,48
   22728:	00048513          	addi	a0,s1,0
   2272c:	00020317          	auipc	t1,0x20
   22730:	bcc33303          	ld	t1,-1076(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   22734:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22738:	00d00713          	addi	a4,zero,13
   2273c:	00014697          	auipc	a3,0x14
   22740:	6bc68693          	addi	a3,a3,1724 # 36df8 <std::piecewise_construct+0x310>
   22744:	00000613          	addi	a2,zero,0
   22748:	00000593          	addi	a1,zero,0
   2274c:	00048513          	addi	a0,s1,0
   22750:	f11f30ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22754:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22758:	06010793          	addi	a5,sp,96
   2275c:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   22760:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22764:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22768:	05278663          	beq	a5,s2,227b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xaf8>
      { _M_dataplus._M_p = __p; }
   2276c:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22770:	01053783          	ld	a5,16(a0)
   22774:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22778:	0084b783          	ld	a5,8(s1)
   2277c:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22780:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22784:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22788:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2278c:	05813703          	ld	a4,88(sp)
   22790:	fff00793          	addi	a5,zero,-1
   22794:	0027d793          	srli	a5,a5,0x2
   22798:	02f70c63          	beq	a4,a5,227d0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb14>
	return _M_append(__s, __n);
   2279c:	00100613          	addi	a2,zero,1
   227a0:	00014597          	auipc	a1,0x14
   227a4:	62858593          	addi	a1,a1,1576 # 36dc8 <std::piecewise_construct+0x2e0>
   227a8:	05010513          	addi	a0,sp,80
   227ac:	c15f30ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   227b0:	0580006f          	jal	zero,22808 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb4c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   227b4:	00853603          	ld	a2,8(a0)
   227b8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   227bc:	fa060ee3          	beq	a2,zero,22778 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xabc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   227c0:	00090593          	addi	a1,s2,0
   227c4:	06010513          	addi	a0,sp,96
   227c8:	de9f30ef          	jal	ra,165b0 <memcpy@plt>
   227cc:	fadff06f          	jal	zero,22778 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xabc>
	  __throw_length_error(__N(__s));
   227d0:	00014517          	auipc	a0,0x14
   227d4:	5c850513          	addi	a0,a0,1480 # 36d98 <std::piecewise_construct+0x2b0>
   227d8:	c69f30ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   227dc:	00050413          	addi	s0,a0,0
   227e0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   227e4:	06010793          	addi	a5,sp,96
   227e8:	00f50463          	beq	a0,a5,227f0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb34>
   227ec:	d25f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   227f0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   227f4:	04010793          	addi	a5,sp,64
   227f8:	00f50463          	beq	a0,a5,22800 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb44>
   227fc:	d15f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22800:	00040513          	addi	a0,s0,0
   22804:	eedf30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22808:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2280c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22810:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22814:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22818:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2281c:	05278463          	beq	a5,s2,22864 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xba8>
      { _M_dataplus._M_p = __p; }
   22820:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22824:	0104b783          	ld	a5,16(s1)
   22828:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2282c:	0084b783          	ld	a5,8(s1)
   22830:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22834:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22838:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2283c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22840:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22844:	06010793          	addi	a5,sp,96
   22848:	00f50463          	beq	a0,a5,22850 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb94>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2284c:	cc5f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22850:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22854:	04010793          	addi	a5,sp,64
   22858:	cef50e63          	beq	a0,a5,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   2285c:	cb5f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22860:	cf4ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22864:	0084b603          	ld	a2,8(s1)
   22868:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2286c:	fc0600e3          	beq	a2,zero,2282c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb70>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22870:	00090593          	addi	a1,s2,0
   22874:	d3df30ef          	jal	ra,165b0 <memcpy@plt>
   22878:	fb5ff06f          	jal	zero,2282c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb70>
    die d = v.as_reference();
   2287c:	00050593          	addi	a1,a0,0
   22880:	05010493          	addi	s1,sp,80
   22884:	00048513          	addi	a0,s1,0
   22888:	819fe0ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
    auto tu = dynamic_cast<const type_unit *>(&d.get_unit());
   2288c:	00048513          	addi	a0,s1,0
   22890:	9f5fa0ef          	jal	ra,1d284 <dwarf::die::get_unit() const>
   22894:	18050863          	beq	a0,zero,22a24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd68>
   22898:	00000693          	addi	a3,zero,0
   2289c:	00020617          	auipc	a2,0x20
   228a0:	d0c63603          	ld	a2,-756(a2) # 425a8 <typeinfo for dwarf::type_unit@@Base+0xcd8>
   228a4:	00020597          	auipc	a1,0x20
   228a8:	9fc5b583          	ld	a1,-1540(a1) # 422a0 <typeinfo for dwarf::unit@@Base+0xbca0>
   228ac:	cb5f30ef          	jal	ra,16560 <__dynamic_cast@plt>
    if (tu)
   228b0:	16050a63          	beq	a0,zero,22a24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd68>
      return "<.debug_types+0x" + to_hex(d.get_section_offset()) + ">";
   228b4:	00048513          	addi	a0,s1,0
   228b8:	9d5fa0ef          	jal	ra,1d28c <dwarf::die::get_section_offset() const>
   228bc:	00050593          	addi	a1,a0,0
   228c0:	01010513          	addi	a0,sp,16
   228c4:	00020317          	auipc	t1,0x20
   228c8:	a3433303          	ld	t1,-1484(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   228cc:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   228d0:	01000713          	addi	a4,zero,16
   228d4:	00014697          	auipc	a3,0x14
   228d8:	53468693          	addi	a3,a3,1332 # 36e08 <std::piecewise_construct+0x320>
   228dc:	00000613          	addi	a2,zero,0
   228e0:	00000593          	addi	a1,zero,0
   228e4:	01010513          	addi	a0,sp,16
   228e8:	d79f30ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   228ec:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   228f0:	04010793          	addi	a5,sp,64
   228f4:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   228f8:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   228fc:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22900:	05278663          	beq	a5,s2,2294c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc90>
      { _M_dataplus._M_p = __p; }
   22904:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   22908:	01053783          	ld	a5,16(a0)
   2290c:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   22910:	0084b783          	ld	a5,8(s1)
   22914:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   22918:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2291c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22920:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22924:	03813703          	ld	a4,56(sp)
   22928:	fff00793          	addi	a5,zero,-1
   2292c:	0027d793          	srli	a5,a5,0x2
   22930:	02f70c63          	beq	a4,a5,22968 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcac>
	return _M_append(__s, __n);
   22934:	00100613          	addi	a2,zero,1
   22938:	00014597          	auipc	a1,0x14
   2293c:	49058593          	addi	a1,a1,1168 # 36dc8 <std::piecewise_construct+0x2e0>
   22940:	03010513          	addi	a0,sp,48
   22944:	a7df30ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22948:	0680006f          	jal	zero,229b0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcf4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2294c:	00853603          	ld	a2,8(a0)
   22950:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22954:	fa060ee3          	beq	a2,zero,22910 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc54>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22958:	00090593          	addi	a1,s2,0
   2295c:	04010513          	addi	a0,sp,64
   22960:	c51f30ef          	jal	ra,165b0 <memcpy@plt>
   22964:	fadff06f          	jal	zero,22910 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc54>
	  __throw_length_error(__N(__s));
   22968:	00014517          	auipc	a0,0x14
   2296c:	43050513          	addi	a0,a0,1072 # 36d98 <std::piecewise_construct+0x2b0>
   22970:	ad1f30ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22974:	00050413          	addi	s0,a0,0
   22978:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   2297c:	04010793          	addi	a5,sp,64
   22980:	00f50463          	beq	a0,a5,22988 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xccc>
   22984:	b8df30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22988:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   2298c:	02010793          	addi	a5,sp,32
   22990:	00f50463          	beq	a0,a5,22998 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   22994:	b7df30ef          	jal	ra,16510 <operator delete(void*)@plt>
class die {
   22998:	07010513          	addi	a0,sp,112
   2299c:	00020317          	auipc	t1,0x20
   229a0:	a4c33303          	ld	t1,-1460(t1) # 423e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x27578>
   229a4:	000300e7          	jalr	ra,0(t1)
   229a8:	00040513          	addi	a0,s0,0
   229ac:	d45f30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   229b0:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   229b4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   229b8:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   229bc:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   229c0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   229c4:	05278463          	beq	a5,s2,22a0c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd50>
      { _M_dataplus._M_p = __p; }
   229c8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   229cc:	0104b783          	ld	a5,16(s1)
   229d0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   229d4:	0084b783          	ld	a5,8(s1)
   229d8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   229dc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   229e0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   229e4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   229e8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   229ec:	04010793          	addi	a5,sp,64
   229f0:	00f50463          	beq	a0,a5,229f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd3c>
   229f4:	b1df30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   229f8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   229fc:	02010793          	addi	a5,sp,32
   22a00:	16f50263          	beq	a0,a5,22b64 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
   22a04:	b0df30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22a08:	15c0006f          	jal	zero,22b64 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22a0c:	0084b603          	ld	a2,8(s1)
   22a10:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22a14:	fc0600e3          	beq	a2,zero,229d4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd18>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22a18:	00090593          	addi	a1,s2,0
   22a1c:	b95f30ef          	jal	ra,165b0 <memcpy@plt>
   22a20:	fb5ff06f          	jal	zero,229d4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xd18>
    return "<0x" + to_hex(d.get_section_offset()) + ">";
   22a24:	05010513          	addi	a0,sp,80
   22a28:	865fa0ef          	jal	ra,1d28c <dwarf::die::get_section_offset() const>
   22a2c:	00050593          	addi	a1,a0,0
   22a30:	01010513          	addi	a0,sp,16
   22a34:	00020317          	auipc	t1,0x20
   22a38:	8c433303          	ld	t1,-1852(t1) # 422f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x26e80>
   22a3c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22a40:	00300713          	addi	a4,zero,3
   22a44:	00014697          	auipc	a3,0x14
   22a48:	3dc68693          	addi	a3,a3,988 # 36e20 <std::piecewise_construct+0x338>
   22a4c:	00000613          	addi	a2,zero,0
   22a50:	00000593          	addi	a1,zero,0
   22a54:	01010513          	addi	a0,sp,16
   22a58:	c09f30ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22a5c:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22a60:	04010793          	addi	a5,sp,64
   22a64:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   22a68:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22a6c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22a70:	05278663          	beq	a5,s2,22abc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe00>
      { _M_dataplus._M_p = __p; }
   22a74:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   22a78:	01053783          	ld	a5,16(a0)
   22a7c:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   22a80:	0084b783          	ld	a5,8(s1)
   22a84:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   22a88:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22a8c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22a90:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22a94:	03813703          	ld	a4,56(sp)
   22a98:	fff00793          	addi	a5,zero,-1
   22a9c:	0027d793          	srli	a5,a5,0x2
   22aa0:	02f70c63          	beq	a4,a5,22ad8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe1c>
	return _M_append(__s, __n);
   22aa4:	00100613          	addi	a2,zero,1
   22aa8:	00014597          	auipc	a1,0x14
   22aac:	32058593          	addi	a1,a1,800 # 36dc8 <std::piecewise_construct+0x2e0>
   22ab0:	03010513          	addi	a0,sp,48
   22ab4:	90df30ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22ab8:	0540006f          	jal	zero,22b0c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe50>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22abc:	00853603          	ld	a2,8(a0)
   22ac0:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22ac4:	fa060ee3          	beq	a2,zero,22a80 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xdc4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22ac8:	00090593          	addi	a1,s2,0
   22acc:	04010513          	addi	a0,sp,64
   22ad0:	ae1f30ef          	jal	ra,165b0 <memcpy@plt>
   22ad4:	fadff06f          	jal	zero,22a80 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xdc4>
	  __throw_length_error(__N(__s));
   22ad8:	00014517          	auipc	a0,0x14
   22adc:	2c050513          	addi	a0,a0,704 # 36d98 <std::piecewise_construct+0x2b0>
   22ae0:	961f30ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22ae4:	00050413          	addi	s0,a0,0
   22ae8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22aec:	04010793          	addi	a5,sp,64
   22af0:	00f50463          	beq	a0,a5,22af8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe3c>
   22af4:	a1df30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22af8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   22afc:	02010793          	addi	a5,sp,32
   22b00:	e8f50ce3          	beq	a0,a5,22998 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   22b04:	a0df30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22b08:	e91ff06f          	jal	zero,22998 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
	return _M_append(__s, __n);
   22b0c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22b10:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22b14:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22b18:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22b1c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22b20:	07278a63          	beq	a5,s2,22b94 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xed8>
      { _M_dataplus._M_p = __p; }
   22b24:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22b28:	0104b783          	ld	a5,16(s1)
   22b2c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22b30:	0084b783          	ld	a5,8(s1)
   22b34:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22b38:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22b3c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22b40:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22b44:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22b48:	04010793          	addi	a5,sp,64
   22b4c:	00f50463          	beq	a0,a5,22b54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe98>
   22b50:	9c1f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22b54:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   22b58:	02010793          	addi	a5,sp,32
   22b5c:	00f50463          	beq	a0,a5,22b64 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xea8>
   22b60:	9b1f30ef          	jal	ra,16510 <operator delete(void*)@plt>
    for (T *p = base; p < end; ++p)
   22b64:	0a013503          	ld	a0,160(sp)
   22b68:	0a813783          	ld	a5,168(sp)
   22b6c:	00f57a63          	bgeu	a0,a5,22b80 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xec4>
   22b70:	00050793          	addi	a5,a0,0
   22b74:	00878793          	addi	a5,a5,8
   22b78:	0a813703          	ld	a4,168(sp)
   22b7c:	fee7ece3          	bltu	a5,a4,22b74 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xeb8>
    if ((char *)base != buf)
   22b80:	07010793          	addi	a5,sp,112
   22b84:	9cf50863          	beq	a0,a5,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
      delete[] (char *)base;
   22b88:	9c050663          	beq	a0,zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   22b8c:	a35f30ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   22b90:	9c4ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22b94:	0084b603          	ld	a2,8(s1)
   22b98:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22b9c:	f8060ae3          	beq	a2,zero,22b30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe74>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22ba0:	00090593          	addi	a1,s2,0
   22ba4:	a0df30ef          	jal	ra,165b0 <memcpy@plt>
   22ba8:	f89ff06f          	jal	zero,22b30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe74>
    return v.as_string();
   22bac:	00050593          	addi	a1,a0,0
   22bb0:	00040513          	addi	a0,s0,0
   22bb4:	c80fe0ef          	jal	ra,21034 <dwarf::value::as_string[abi:cxx11]() const>
   22bb8:	99cff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
  return "<unexpected value type " + to_string(v.get_type()) + ">";
   22bbc:	03010493          	addi	s1,sp,48
   22bc0:	00048513          	addi	a0,s1,0
   22bc4:	0b40c0ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   22bc8:	01700713          	addi	a4,zero,23
   22bcc:	00014697          	auipc	a3,0x14
   22bd0:	25c68693          	addi	a3,a3,604 # 36e28 <std::piecewise_construct+0x340>
   22bd4:	00000613          	addi	a2,zero,0
   22bd8:	00000593          	addi	a1,zero,0
   22bdc:	00048513          	addi	a0,s1,0
   22be0:	a81f30ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22be4:	00050493          	addi	s1,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22be8:	06010793          	addi	a5,sp,96
   22bec:	04f13823          	sd	a5,80(sp)
      { return _M_dataplus._M_p; }
   22bf0:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22bf4:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   22bf8:	05278663          	beq	a5,s2,22c44 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf88>
      { _M_dataplus._M_p = __p; }
   22bfc:	04f13823          	sd	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   22c00:	01053783          	ld	a5,16(a0)
   22c04:	06f13023          	sd	a5,96(sp)
      { _M_string_length = __length; }
   22c08:	0084b783          	ld	a5,8(s1)
   22c0c:	04f13c23          	sd	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   22c10:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22c14:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22c18:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22c1c:	05813703          	ld	a4,88(sp)
   22c20:	fff00793          	addi	a5,zero,-1
   22c24:	0027d793          	srli	a5,a5,0x2
   22c28:	02f70c63          	beq	a4,a5,22c60 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfa4>
	return _M_append(__s, __n);
   22c2c:	00100613          	addi	a2,zero,1
   22c30:	00014597          	auipc	a1,0x14
   22c34:	19858593          	addi	a1,a1,408 # 36dc8 <std::piecewise_construct+0x2e0>
   22c38:	05010513          	addi	a0,sp,80
   22c3c:	f84f30ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22c40:	0580006f          	jal	zero,22c98 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfdc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22c44:	00853603          	ld	a2,8(a0)
   22c48:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22c4c:	fa060ee3          	beq	a2,zero,22c08 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22c50:	00090593          	addi	a1,s2,0
   22c54:	06010513          	addi	a0,sp,96
   22c58:	959f30ef          	jal	ra,165b0 <memcpy@plt>
   22c5c:	fadff06f          	jal	zero,22c08 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xf4c>
	  __throw_length_error(__N(__s));
   22c60:	00014517          	auipc	a0,0x14
   22c64:	13850513          	addi	a0,a0,312 # 36d98 <std::piecewise_construct+0x2b0>
   22c68:	fd8f30ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22c6c:	00050413          	addi	s0,a0,0
   22c70:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22c74:	06010793          	addi	a5,sp,96
   22c78:	00f50463          	beq	a0,a5,22c80 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfc4>
   22c7c:	895f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22c80:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22c84:	04010793          	addi	a5,sp,64
   22c88:	00f50463          	beq	a0,a5,22c90 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfd4>
   22c8c:	885f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22c90:	00040513          	addi	a0,s0,0
   22c94:	a5df30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   22c98:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22c9c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22ca0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   22ca4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   22ca8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   22cac:	05278663          	beq	a5,s2,22cf8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x103c>
      { _M_dataplus._M_p = __p; }
   22cb0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   22cb4:	0104b783          	ld	a5,16(s1)
   22cb8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   22cbc:	0084b783          	ld	a5,8(s1)
   22cc0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   22cc4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   22cc8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   22ccc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   22cd0:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22cd4:	06010793          	addi	a5,sp,96
   22cd8:	00f50463          	beq	a0,a5,22ce0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1024>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22cdc:	835f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22ce0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   22ce4:	04010793          	addi	a5,sp,64
   22ce8:	00f51463          	bne	a0,a5,22cf0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1034>
   22cec:	868ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
   22cf0:	821f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22cf4:	860ff06f          	jal	zero,21d54 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   22cf8:	0084b603          	ld	a2,8(s1)
   22cfc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   22d00:	fa060ee3          	beq	a2,zero,22cbc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1000>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   22d04:	00090593          	addi	a1,s2,0
   22d08:	8a9f30ef          	jal	ra,165b0 <memcpy@plt>
   22d0c:	fb1ff06f          	jal	zero,22cbc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1000>
      { return _M_dataplus._M_p; }
   22d10:	00050413          	addi	s0,a0,0
   22d14:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22d18:	06010793          	addi	a5,sp,96
   22d1c:	00f50463          	beq	a0,a5,22d24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1068>
   22d20:	ff0f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22d24:	00040513          	addi	a0,s0,0
   22d28:	9c9f30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22d2c:	00050413          	addi	s0,a0,0
   22d30:	adcff06f          	jal	zero,2200c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x350>
   22d34:	00050413          	addi	s0,a0,0
   22d38:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   22d3c:	06010793          	addi	a5,sp,96
   22d40:	00f50463          	beq	a0,a5,22d48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x108c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22d44:	fccf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   22d48:	00040513          	addi	a0,s0,0
   22d4c:	9a5f30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22d50:	00050413          	addi	s0,a0,0
   22d54:	e7cff06f          	jal	zero,223d0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x714>
   22d58:	00050413          	addi	s0,a0,0
   22d5c:	fd4ff06f          	jal	zero,22530 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x874>
   22d60:	00050413          	addi	s0,a0,0
   22d64:	92dff06f          	jal	zero,22690 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9d4>
   22d68:	00050413          	addi	s0,a0,0
   22d6c:	a85ff06f          	jal	zero,227f0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb34>
   22d70:	00050413          	addi	s0,a0,0
   22d74:	c15ff06f          	jal	zero,22988 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xccc>
   22d78:	00050413          	addi	s0,a0,0
   22d7c:	d7dff06f          	jal	zero,22af8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xe3c>
   22d80:	00050413          	addi	s0,a0,0
   22d84:	c15ff06f          	jal	zero,22998 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xcdc>
   22d88:	00050413          	addi	s0,a0,0
   22d8c:	ef5ff06f          	jal	zero,22c80 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xfc4>

0000000000022d90 <dwarf::value_type_mismatch::~value_type_mismatch()>:
class value_type_mismatch : public std::logic_error {
   22d90:	ff010113          	addi	sp,sp,-16
   22d94:	00113423          	sd	ra,8(sp)
   22d98:	0001f797          	auipc	a5,0x1f
   22d9c:	6b07b783          	ld	a5,1712(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   22da0:	01078793          	addi	a5,a5,16
   22da4:	00f53023          	sd	a5,0(a0)
   22da8:	959f30ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   22dac:	00813083          	ld	ra,8(sp)
   22db0:	01010113          	addi	sp,sp,16
   22db4:	00008067          	jalr	zero,0(ra)

0000000000022db8 <dwarf::value_type_mismatch::~value_type_mismatch()>:
   22db8:	ff010113          	addi	sp,sp,-16
   22dbc:	00113423          	sd	ra,8(sp)
   22dc0:	00813023          	sd	s0,0(sp)
   22dc4:	00050413          	addi	s0,a0,0
   22dc8:	0001f797          	auipc	a5,0x1f
   22dcc:	6807b783          	ld	a5,1664(a5) # 42448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   22dd0:	01078793          	addi	a5,a5,16
   22dd4:	00f53023          	sd	a5,0(a0)
   22dd8:	929f30ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   22ddc:	00040513          	addi	a0,s0,0
   22de0:	f30f30ef          	jal	ra,16510 <operator delete(void*)@plt>
   22de4:	00813083          	ld	ra,8(sp)
   22de8:	00013403          	ld	s0,0(sp)
   22dec:	01010113          	addi	sp,sp,16
   22df0:	00008067          	jalr	zero,0(ra)

0000000000022df4 <dwarf::cursor::address()>:
  taddr address() {
   22df4:	f8010113          	addi	sp,sp,-128
   22df8:	06113c23          	sd	ra,120(sp)
   22dfc:	06813823          	sd	s0,112(sp)
   22e00:	06913423          	sd	s1,104(sp)
   22e04:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   22e08:	00053703          	ld	a4,0(a0)
    switch (sec->addr_size) {
   22e0c:	02072783          	lw	a5,32(a4)
   22e10:	00400693          	addi	a3,zero,4
   22e14:	10d78063          	beq	a5,a3,22f14 <dwarf::cursor::address()+0x120>
   22e18:	04f6ee63          	bltu	a3,a5,22e74 <dwarf::cursor::address()+0x80>
   22e1c:	00100693          	addi	a3,zero,1
   22e20:	0ad78c63          	beq	a5,a3,22ed8 <dwarf::cursor::address()+0xe4>
   22e24:	00200693          	addi	a3,zero,2
   22e28:	18d79c63          	bne	a5,a3,22fc0 <dwarf::cursor::address()+0x1cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22e2c:	01073703          	ld	a4,16(a4)
   22e30:	01053783          	ld	a5,16(a0)
   22e34:	40f70633          	sub	a2,a4,a5
   22e38:	00100693          	addi	a3,zero,1
   22e3c:	00c6f463          	bgeu	a3,a2,22e44 <dwarf::cursor::address()+0x50>
   22e40:	00e7e663          	bltu	a5,a4,22e4c <dwarf::cursor::address()+0x58>
      underflow();
   22e44:	00040513          	addi	a0,s0,0
   22e48:	b05f90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22e4c:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   22e50:	00043783          	ld	a5,0(s0)
   22e54:	01c7a783          	lw	a5,28(a5)
   22e58:	0a079463          	bne	a5,zero,22f00 <dwarf::cursor::address()+0x10c>
        val |= ((uint64_t)p[i]) << (i * 8);
   22e5c:	00174783          	lbu	a5,1(a4)
   22e60:	00879793          	slli	a5,a5,0x8
   22e64:	00074683          	lbu	a3,0(a4)
   22e68:	00d7e533          	or	a0,a5,a3
    pos += sizeof(T);
   22e6c:	00270713          	addi	a4,a4,2
      return fixed<uint16_t>();
   22e70:	39c0006f          	jal	zero,2320c <dwarf::cursor::address()+0x418>
    switch (sec->addr_size) {
   22e74:	00800693          	addi	a3,zero,8
   22e78:	14d79463          	bne	a5,a3,22fc0 <dwarf::cursor::address()+0x1cc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22e7c:	01073703          	ld	a4,16(a4)
   22e80:	01053783          	ld	a5,16(a0)
   22e84:	40f70633          	sub	a2,a4,a5
   22e88:	00700693          	addi	a3,zero,7
   22e8c:	00c6f463          	bgeu	a3,a2,22e94 <dwarf::cursor::address()+0xa0>
   22e90:	00e7e663          	bltu	a5,a4,22e9c <dwarf::cursor::address()+0xa8>
      underflow();
   22e94:	00040513          	addi	a0,s0,0
   22e98:	ab5f90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22e9c:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   22ea0:	00043783          	ld	a5,0(s0)
   22ea4:	01c7a783          	lw	a5,28(a5)
   22ea8:	0e079a63          	bne	a5,zero,22f9c <dwarf::cursor::address()+0x1a8>
   22eac:	00070613          	addi	a2,a4,0
    uint64_t val = 0;
   22eb0:	00000513          	addi	a0,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   22eb4:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   22eb8:	00064683          	lbu	a3,0(a2)
   22ebc:	00f696b3          	sll	a3,a3,a5
   22ec0:	00d56533          	or	a0,a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   22ec4:	00160613          	addi	a2,a2,1
   22ec8:	0087879b          	addiw	a5,a5,8
   22ecc:	feb796e3          	bne	a5,a1,22eb8 <dwarf::cursor::address()+0xc4>
    pos += sizeof(T);
   22ed0:	00870713          	addi	a4,a4,8
      return fixed<uint64_t>();
   22ed4:	3380006f          	jal	zero,2320c <dwarf::cursor::address()+0x418>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22ed8:	01073703          	ld	a4,16(a4)
   22edc:	01053783          	ld	a5,16(a0)
   22ee0:	00e7e463          	bltu	a5,a4,22ee8 <dwarf::cursor::address()+0xf4>
      underflow();
   22ee4:	a69f90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22ee8:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   22eec:	00043783          	ld	a5,0(s0)
   22ef0:	01c7a783          	lw	a5,28(a5)
   22ef4:	30078863          	beq	a5,zero,23204 <dwarf::cursor::address()+0x410>
        val = (val << 8) | (uint64_t)p[i];
   22ef8:	00074503          	lbu	a0,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   22efc:	30c0006f          	jal	zero,23208 <dwarf::cursor::address()+0x414>
        val = (val << 8) | (uint64_t)p[i];
   22f00:	00074783          	lbu	a5,0(a4)
   22f04:	00879793          	slli	a5,a5,0x8
   22f08:	00174683          	lbu	a3,1(a4)
   22f0c:	00d7e533          	or	a0,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   22f10:	f5dff06f          	jal	zero,22e6c <dwarf::cursor::address()+0x78>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22f14:	01073703          	ld	a4,16(a4)
   22f18:	01053783          	ld	a5,16(a0)
   22f1c:	40f70633          	sub	a2,a4,a5
   22f20:	00300693          	addi	a3,zero,3
   22f24:	00c6f463          	bgeu	a3,a2,22f2c <dwarf::cursor::address()+0x138>
   22f28:	00e7e663          	bltu	a5,a4,22f34 <dwarf::cursor::address()+0x140>
      underflow();
   22f2c:	00040513          	addi	a0,s0,0
   22f30:	a1df90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22f34:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   22f38:	00043783          	ld	a5,0(s0)
   22f3c:	01c7a783          	lw	a5,28(a5)
   22f40:	02079c63          	bne	a5,zero,22f78 <dwarf::cursor::address()+0x184>
   22f44:	00070593          	addi	a1,a4,0
   22f48:	00000693          	addi	a3,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   22f4c:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   22f50:	0005c603          	lbu	a2,0(a1)
   22f54:	00d61633          	sll	a2,a2,a3
   22f58:	00c7e7b3          	or	a5,a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   22f5c:	00158593          	addi	a1,a1,1
   22f60:	0086869b          	addiw	a3,a3,8
   22f64:	fea696e3          	bne	a3,a0,22f50 <dwarf::cursor::address()+0x15c>
    pos += sizeof(T);
   22f68:	00470713          	addi	a4,a4,4
   22f6c:	02079513          	slli	a0,a5,0x20
   22f70:	02055513          	srli	a0,a0,0x20
      return fixed<uint32_t>();
   22f74:	2980006f          	jal	zero,2320c <dwarf::cursor::address()+0x418>
   22f78:	00070693          	addi	a3,a4,0
   22f7c:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   22f80:	00000793          	addi	a5,zero,0
        val = (val << 8) | (uint64_t)p[i];
   22f84:	00879793          	slli	a5,a5,0x8
   22f88:	0006c603          	lbu	a2,0(a3)
   22f8c:	00f667b3          	or	a5,a2,a5
      for (unsigned i = 0; i < sizeof(T); i++)
   22f90:	00168693          	addi	a3,a3,1
   22f94:	fed598e3          	bne	a1,a3,22f84 <dwarf::cursor::address()+0x190>
   22f98:	fd1ff06f          	jal	zero,22f68 <dwarf::cursor::address()+0x174>
   22f9c:	00070793          	addi	a5,a4,0
   22fa0:	00870613          	addi	a2,a4,8
    uint64_t val = 0;
   22fa4:	00000513          	addi	a0,zero,0
        val = (val << 8) | (uint64_t)p[i];
   22fa8:	00851513          	slli	a0,a0,0x8
   22fac:	0007c683          	lbu	a3,0(a5)
   22fb0:	00a6e533          	or	a0,a3,a0
      for (unsigned i = 0; i < sizeof(T); i++)
   22fb4:	00178793          	addi	a5,a5,1
   22fb8:	fec798e3          	bne	a5,a2,22fa8 <dwarf::cursor::address()+0x1b4>
   22fbc:	f15ff06f          	jal	zero,22ed0 <dwarf::cursor::address()+0xdc>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   22fc0:	01000513          	addi	a0,zero,16
   22fc4:	c5cf30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   22fc8:	00050493          	addi	s1,a0,0
   22fcc:	00043783          	ld	a5,0(s0)
   22fd0:	0207a403          	lw	s0,32(a5)
   22fd4:	00040793          	addi	a5,s0,0
      unsigned __n = 1;
   22fd8:	00100593          	addi	a1,zero,1
	  if (__value < (unsigned)__base) return __n;
   22fdc:	00900893          	addi	a7,zero,9
	  if (__value < __b2) return __n + 1;
   22fe0:	06300813          	addi	a6,zero,99
	  if (__value < __b3) return __n + 2;
   22fe4:	3e700513          	addi	a0,zero,999
	  if (__value < __b4) return __n + 3;
   22fe8:	00002737          	lui	a4,0x2
   22fec:	70f70613          	addi	a2,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   22ff0:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   22ff4:	00f8f663          	bgeu	a7,a5,23000 <dwarf::cursor::address()+0x20c>
	  if (__value < __b2) return __n + 1;
   22ff8:	08f86e63          	bltu	a6,a5,23094 <dwarf::cursor::address()+0x2a0>
   22ffc:	0015859b          	addiw	a1,a1,1
	: allocator_type(__a), _M_p(__dat) { }
   23000:	01010793          	addi	a5,sp,16
   23004:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   23008:	00000613          	addi	a2,zero,0
   2300c:	02059593          	slli	a1,a1,0x20
   23010:	0205d593          	srli	a1,a1,0x20
   23014:	00010513          	addi	a0,sp,0
   23018:	d58f30ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2301c:	00013603          	ld	a2,0(sp)
      unsigned __pos = __len - 1;
   23020:	00813703          	ld	a4,8(sp)
   23024:	fff7071b          	addiw	a4,a4,-1
      while (__val >= 100)
   23028:	06300893          	addi	a7,zero,99
	  auto const __num = (__val % 100) * 2;
   2302c:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   23030:	0001f517          	auipc	a0,0x1f
   23034:	33053503          	ld	a0,816(a0) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
      while (__val >= 100)
   23038:	0888e663          	bltu	a7,s0,230c4 <dwarf::cursor::address()+0x2d0>
      if (__val >= 10)
   2303c:	00900793          	addi	a5,zero,9
   23040:	0e87f063          	bgeu	a5,s0,23120 <dwarf::cursor::address()+0x32c>
	  auto const __num = __val * 2;
   23044:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   23048:	0001f717          	auipc	a4,0x1f
   2304c:	31873703          	ld	a4,792(a4) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
   23050:	0014079b          	addiw	a5,s0,1
   23054:	02079793          	slli	a5,a5,0x20
   23058:	0207d793          	srli	a5,a5,0x20
   2305c:	00f707b3          	add	a5,a4,a5
   23060:	0007c783          	lbu	a5,0(a5)
   23064:	00f600a3          	sb	a5,1(a2)
	  __first[0] = __digits[__num];
   23068:	02041413          	slli	s0,s0,0x20
   2306c:	02045413          	srli	s0,s0,0x20
   23070:	00870733          	add	a4,a4,s0
   23074:	00074783          	lbu	a5,0(a4)
   23078:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   2307c:	00014617          	auipc	a2,0x14
   23080:	c1460613          	addi	a2,a2,-1004 # 36c90 <std::piecewise_construct+0x1a8>
   23084:	00000593          	addi	a1,zero,0
   23088:	00010513          	addi	a0,sp,0
   2308c:	b04f30ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23090:	09c0006f          	jal	zero,2312c <dwarf::cursor::address()+0x338>
	  if (__value < __b3) return __n + 2;
   23094:	00f56663          	bltu	a0,a5,230a0 <dwarf::cursor::address()+0x2ac>
   23098:	0025859b          	addiw	a1,a1,2
   2309c:	f65ff06f          	jal	zero,23000 <dwarf::cursor::address()+0x20c>
	  if (__value < __b4) return __n + 3;
   230a0:	02079693          	slli	a3,a5,0x20
   230a4:	0206d693          	srli	a3,a3,0x20
   230a8:	00f66663          	bltu	a2,a5,230b4 <dwarf::cursor::address()+0x2c0>
   230ac:	0035859b          	addiw	a1,a1,3
   230b0:	f51ff06f          	jal	zero,23000 <dwarf::cursor::address()+0x20c>
	  __value /= __b4;
   230b4:	02e6d7b3          	divu	a5,a3,a4
   230b8:	0007879b          	addiw	a5,a5,0
	  __n += 4;
   230bc:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   230c0:	f35ff06f          	jal	zero,22ff4 <dwarf::cursor::address()+0x200>
	  auto const __num = (__val % 100) * 2;
   230c4:	030477bb          	remuw	a5,s0,a6
   230c8:	0017979b          	slliw	a5,a5,0x1
	  __val /= 100;
   230cc:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   230d0:	02071593          	slli	a1,a4,0x20
   230d4:	0205d593          	srli	a1,a1,0x20
   230d8:	00b605b3          	add	a1,a2,a1
   230dc:	0017869b          	addiw	a3,a5,1
   230e0:	02069693          	slli	a3,a3,0x20
   230e4:	0206d693          	srli	a3,a3,0x20
   230e8:	00d506b3          	add	a3,a0,a3
   230ec:	0006c683          	lbu	a3,0(a3)
   230f0:	00d58023          	sb	a3,0(a1)
	  __first[__pos - 1] = __digits[__num];
   230f4:	fff7069b          	addiw	a3,a4,-1
   230f8:	02069693          	slli	a3,a3,0x20
   230fc:	0206d693          	srli	a3,a3,0x20
   23100:	00d606b3          	add	a3,a2,a3
   23104:	02079793          	slli	a5,a5,0x20
   23108:	0207d793          	srli	a5,a5,0x20
   2310c:	00f507b3          	add	a5,a0,a5
   23110:	0007c783          	lbu	a5,0(a5)
   23114:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   23118:	ffe7071b          	addiw	a4,a4,-2
   2311c:	f1dff06f          	jal	zero,23038 <dwarf::cursor::address()+0x244>
	__first[0] = '0' + __val;
   23120:	0304079b          	addiw	a5,s0,48
   23124:	0ff7f793          	andi	a5,a5,255
   23128:	f51ff06f          	jal	zero,23078 <dwarf::cursor::address()+0x284>
   2312c:	00050593          	addi	a1,a0,0
   23130:	02010413          	addi	s0,sp,32
   23134:	00040513          	addi	a0,s0,0
   23138:	b38f30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2313c:	00014597          	auipc	a1,0x14
   23140:	b6458593          	addi	a1,a1,-1180 # 36ca0 <std::piecewise_construct+0x1b8>
   23144:	00040513          	addi	a0,s0,0
   23148:	e58f30ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2314c:	00050593          	addi	a1,a0,0
   23150:	04010413          	addi	s0,sp,64
   23154:	00040513          	addi	a0,s0,0
   23158:	b18f30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw std::runtime_error(
   2315c:	00040593          	addi	a1,s0,0
   23160:	00048513          	addi	a0,s1,0
   23164:	d1cf30ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   23168:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2316c:	05010793          	addi	a5,sp,80
   23170:	00f50463          	beq	a0,a5,23178 <dwarf::cursor::address()+0x384>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23174:	b9cf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23178:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2317c:	03010793          	addi	a5,sp,48
   23180:	00f50463          	beq	a0,a5,23188 <dwarf::cursor::address()+0x394>
   23184:	b8cf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23188:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2318c:	01010793          	addi	a5,sp,16
   23190:	00f50463          	beq	a0,a5,23198 <dwarf::cursor::address()+0x3a4>
   23194:	b7cf30ef          	jal	ra,16510 <operator delete(void*)@plt>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   23198:	0001f617          	auipc	a2,0x1f
   2319c:	27063603          	ld	a2,624(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   231a0:	0001f597          	auipc	a1,0x1f
   231a4:	4585b583          	ld	a1,1112(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   231a8:	00048513          	addi	a0,s1,0
   231ac:	d14f30ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   231b0:	00050413          	addi	s0,a0,0
   231b4:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   231b8:	05010793          	addi	a5,sp,80
   231bc:	00f50463          	beq	a0,a5,231c4 <dwarf::cursor::address()+0x3d0>
   231c0:	b50f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231c4:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   231c8:	03010793          	addi	a5,sp,48
   231cc:	00f50463          	beq	a0,a5,231d4 <dwarf::cursor::address()+0x3e0>
   231d0:	b40f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   231d4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   231d8:	01010793          	addi	a5,sp,16
   231dc:	00f50463          	beq	a0,a5,231e4 <dwarf::cursor::address()+0x3f0>
   231e0:	b30f30ef          	jal	ra,16510 <operator delete(void*)@plt>
   231e4:	00048513          	addi	a0,s1,0
   231e8:	ae8f30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   231ec:	00040513          	addi	a0,s0,0
   231f0:	d00f30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   231f4:	00050413          	addi	s0,a0,0
   231f8:	fcdff06f          	jal	zero,231c4 <dwarf::cursor::address()+0x3d0>
   231fc:	00050413          	addi	s0,a0,0
   23200:	fd5ff06f          	jal	zero,231d4 <dwarf::cursor::address()+0x3e0>
        val |= ((uint64_t)p[i]) << (i * 8);
   23204:	00074503          	lbu	a0,0(a4)
    pos += sizeof(T);
   23208:	00170713          	addi	a4,a4,1
   2320c:	00e43823          	sd	a4,16(s0)
  }
   23210:	07813083          	ld	ra,120(sp)
   23214:	07013403          	ld	s0,112(sp)
   23218:	06813483          	ld	s1,104(sp)
   2321c:	08010113          	addi	sp,sp,128
   23220:	00008067          	jalr	zero,0(ra)

0000000000023224 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
   23224:	00050793          	addi	a5,a0,0
      const unsigned __b2 = __base  * __base;
   23228:	02b586bb          	mulw	a3,a1,a1
      const unsigned __b3 = __b2 * __base;
   2322c:	02b6863b          	mulw	a2,a3,a1
      const unsigned long __b4 = __b3 * __base;
   23230:	02b6073b          	mulw	a4,a2,a1
   23234:	02071713          	slli	a4,a4,0x20
   23238:	02075713          	srli	a4,a4,0x20
	  if (__value < (unsigned)__base) return __n;
   2323c:	02059593          	slli	a1,a1,0x20
   23240:	0205d593          	srli	a1,a1,0x20
   23244:	06b56463          	bltu	a0,a1,232ac <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x88>
	  if (__value < __b2) return __n + 1;
   23248:	02069693          	slli	a3,a3,0x20
   2324c:	0206d693          	srli	a3,a3,0x20
   23250:	02d56c63          	bltu	a0,a3,23288 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x64>
	  if (__value < __b3) return __n + 2;
   23254:	02061613          	slli	a2,a2,0x20
   23258:	02065613          	srli	a2,a2,0x20
   2325c:	02c56c63          	bltu	a0,a2,23294 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x70>
	  if (__value < __b4) return __n + 3;
   23260:	04e56063          	bltu	a0,a4,232a0 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x7c>
      unsigned __n = 1;
   23264:	00100513          	addi	a0,zero,1
	  __value /= __b4;
   23268:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   2326c:	0045051b          	addiw	a0,a0,4
	  if (__value < (unsigned)__base) return __n;
   23270:	02b7ec63          	bltu	a5,a1,232a8 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x84>
	  if (__value < __b2) return __n + 1;
   23274:	00d7ec63          	bltu	a5,a3,2328c <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x68>
	  if (__value < __b3) return __n + 2;
   23278:	02c7e063          	bltu	a5,a2,23298 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x74>
	  if (__value < __b4) return __n + 3;
   2327c:	fee7f6e3          	bgeu	a5,a4,23268 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x44>
   23280:	0035051b          	addiw	a0,a0,3
   23284:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   23288:	00100513          	addi	a0,zero,1
	  if (__value < __b2) return __n + 1;
   2328c:	0015051b          	addiw	a0,a0,1
   23290:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   23294:	00100513          	addi	a0,zero,1
	  if (__value < __b3) return __n + 2;
   23298:	0025051b          	addiw	a0,a0,2
   2329c:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   232a0:	00100513          	addi	a0,zero,1
   232a4:	fddff06f          	jal	zero,23280 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5c>
   232a8:	00008067          	jalr	zero,0(ra)
   232ac:	00100513          	addi	a0,zero,1
    }
   232b0:	00008067          	jalr	zero,0(ra)

00000000000232b4 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)>:
      unsigned __pos = __len - 1;
   232b4:	fff5859b          	addiw	a1,a1,-1
      while (__val >= 100)
   232b8:	06300793          	addi	a5,zero,99
   232bc:	06c7f063          	bgeu	a5,a2,2331c <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x68>
	  auto const __num = (__val % 100) * 2;
   232c0:	06400693          	addi	a3,zero,100
	  __first[__pos] = __digits[__num + 1];
   232c4:	0001fe17          	auipc	t3,0x1f
   232c8:	1a4e3e03          	ld	t3,420(t3) # 42468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb488>
      while (__val >= 100)
   232cc:	00002337          	lui	t1,0x2
   232d0:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   232d4:	02d677b3          	remu	a5,a2,a3
   232d8:	00179793          	slli	a5,a5,0x1
   232dc:	00060813          	addi	a6,a2,0
	  __val /= 100;
   232e0:	02d65633          	divu	a2,a2,a3
	  __first[__pos] = __digits[__num + 1];
   232e4:	02059713          	slli	a4,a1,0x20
   232e8:	02075713          	srli	a4,a4,0x20
   232ec:	00e50733          	add	a4,a0,a4
   232f0:	00fe07b3          	add	a5,t3,a5
   232f4:	0017c883          	lbu	a7,1(a5)
   232f8:	01170023          	sb	a7,0(a4)
	  __first[__pos - 1] = __digits[__num];
   232fc:	fff5871b          	addiw	a4,a1,-1
   23300:	02071713          	slli	a4,a4,0x20
   23304:	02075713          	srli	a4,a4,0x20
   23308:	00e50733          	add	a4,a0,a4
   2330c:	0007c783          	lbu	a5,0(a5)
   23310:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   23314:	ffe5859b          	addiw	a1,a1,-2
      while (__val >= 100)
   23318:	fb036ee3          	bltu	t1,a6,232d4 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x20>
      if (__val >= 10)
   2331c:	00900793          	addi	a5,zero,9
   23320:	02c7f463          	bgeu	a5,a2,23348 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x94>
	  auto const __num = __val * 2;
   23324:	00161613          	slli	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   23328:	0001f797          	auipc	a5,0x1f
   2332c:	1407b783          	ld	a5,320(a5) # 42468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb488>
   23330:	00c787b3          	add	a5,a5,a2
   23334:	0017c703          	lbu	a4,1(a5)
   23338:	00e500a3          	sb	a4,1(a0)
	  __first[0] = __digits[__num];
   2333c:	0007c603          	lbu	a2,0(a5)
   23340:	00c50023          	sb	a2,0(a0)
    }
   23344:	00008067          	jalr	zero,0(ra)
	__first[0] = '0' + __val;
   23348:	0306061b          	addiw	a2,a2,48
   2334c:	0ff67613          	andi	a2,a2,255
   23350:	ff1ff06f          	jal	zero,23340 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x8c>

0000000000023354 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>:
    }
  }
  throw format_error("unknown attribute form " + to_string(form));
}

attribute_spec::attribute_spec(DW_AT name, DW_FORM form)
   23354:	fa010113          	addi	sp,sp,-96
   23358:	04113c23          	sd	ra,88(sp)
   2335c:	04813823          	sd	s0,80(sp)
   23360:	04913423          	sd	s1,72(sp)
   23364:	05213023          	sd	s2,64(sp)
   23368:	00060413          	addi	s0,a2,0
    : name(name), form(form), type(resolve_type(name, form)) {}
   2336c:	00b52023          	sw	a1,0(a0)
   23370:	00c52223          	sw	a2,4(a0)
  switch (form) {
   23374:	02000793          	addi	a5,zero,32
   23378:	20c7ec63          	bltu	a5,a2,23590 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x23c>
   2337c:	00058493          	addi	s1,a1,0
   23380:	00261793          	slli	a5,a2,0x2
   23384:	00014717          	auipc	a4,0x14
   23388:	d7470713          	addi	a4,a4,-652 # 370f8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x118>
   2338c:	00e787b3          	add	a5,a5,a4
   23390:	0007a783          	lw	a5,0(a5)
   23394:	00e787b3          	add	a5,a5,a4
   23398:	00078067          	jalr	zero,0(a5)
    return value::type::constant;
   2339c:	00300413          	addi	s0,zero,3
   233a0:	15c0006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   233a4:	05100793          	addi	a5,zero,81
   233a8:	00200413          	addi	s0,zero,2
   233ac:	14b7c863          	blt	a5,a1,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   233b0:	01800793          	addi	a5,zero,24
   233b4:	02b7d463          	bge	a5,a1,233dc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x88>
   233b8:	fe75859b          	addiw	a1,a1,-25
   233bc:	00014797          	auipc	a5,0x14
   233c0:	dfc7b783          	ld	a5,-516(a5) # 371b8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1d8>
   233c4:	00b7d7b3          	srl	a5,a5,a1
   233c8:	0017f793          	andi	a5,a5,1
      return value::type::exprloc;
   233cc:	00600413          	addi	s0,zero,6
    switch (name) {
   233d0:	12079663          	bne	a5,zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   233d4:	00200413          	addi	s0,zero,2
   233d8:	1240006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   233dc:	00200793          	addi	a5,zero,2
   233e0:	24f58463          	beq	a1,a5,23628 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2d4>
   233e4:	ff55859b          	addiw	a1,a1,-11
   233e8:	10b7ea63          	bltu	a5,a1,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::exprloc;
   233ec:	00600413          	addi	s0,zero,6
   233f0:	10c0006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   233f4:	05500793          	addi	a5,zero,85
   233f8:	22b7cc63          	blt	a5,a1,23630 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2dc>
   233fc:	01800793          	addi	a5,zero,24
   23400:	02b7d263          	bge	a5,a1,23424 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xd0>
   23404:	fe75871b          	addiw	a4,a1,-25
   23408:	00014797          	auipc	a5,0x14
   2340c:	db87b783          	ld	a5,-584(a5) # 371c0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e0>
   23410:	00e7d7b3          	srl	a5,a5,a4
   23414:	0017f793          	andi	a5,a5,1
   23418:	06079463          	bne	a5,zero,23480 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x12c>
   2341c:	00300413          	addi	s0,zero,3
   23420:	0dc0006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   23424:	00200793          	addi	a5,zero,2
   23428:	20f58863          	beq	a1,a5,23638 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2e4>
   2342c:	01000793          	addi	a5,zero,16
   23430:	00300413          	addi	s0,zero,3
   23434:	0cf59463          	bne	a1,a5,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::line;
   23438:	00800413          	addi	s0,zero,8
   2343c:	0c00006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::sconstant;
   23440:	00500413          	addi	s0,zero,5
   23444:	0b80006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::exprloc;
   23448:	00600413          	addi	s0,zero,6
   2344c:	0b00006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::flag;
   23450:	00700413          	addi	s0,zero,7
   23454:	0a80006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::reference;
   23458:	00c00413          	addi	s0,zero,12
   2345c:	0a00006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::string;
   23460:	00d00413          	addi	s0,zero,13
   23464:	0980006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    return value::type::invalid;
   23468:	00000413          	addi	s0,zero,0
   2346c:	0900006f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   23470:	05500793          	addi	a5,zero,85
   23474:	06b7ca63          	blt	a5,a1,234e8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x194>
   23478:	01800793          	addi	a5,zero,24
   2347c:	04b7da63          	bge	a5,a1,234d0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x17c>
   23480:	fe74871b          	addiw	a4,s1,-25
   23484:	00100793          	addi	a5,zero,1
   23488:	00e797b3          	sll	a5,a5,a4
   2348c:	00014717          	auipc	a4,0x14
   23490:	d3c73703          	ld	a4,-708(a4) # 371c8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e8>
   23494:	00e7f733          	and	a4,a5,a4
   23498:	1a071863          	bne	a4,zero,23648 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2f4>
   2349c:	00014717          	auipc	a4,0x14
   234a0:	d3473703          	ld	a4,-716(a4) # 371d0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f0>
   234a4:	00e7f7b3          	and	a5,a5,a4
   234a8:	1a079463          	bne	a5,zero,23650 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2fc>
   234ac:	04300793          	addi	a5,zero,67
   234b0:	1af48463          	beq	s1,a5,23658 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x304>
                         to_string(name));
   234b4:	01000513          	addi	a0,zero,16
   234b8:	f69f20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   234bc:	00050913          	addi	s2,a0,0
   234c0:	00048593          	addi	a1,s1,0
   234c4:	00010513          	addi	a0,sp,0
   234c8:	0700e0ef          	jal	ra,31538 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   234cc:	04c0006f          	jal	zero,23518 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1c4>
    switch (name) {
   234d0:	00200793          	addi	a5,zero,2
   234d4:	16f58663          	beq	a1,a5,23640 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2ec>
   234d8:	01000793          	addi	a5,zero,16
      return value::type::line;
   234dc:	00800413          	addi	s0,zero,8
    switch (name) {
   234e0:	00f58e63          	beq	a1,a5,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   234e4:	fd1ff06f          	jal	zero,234b4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x160>
   234e8:	ffffe7b7          	lui	a5,0xffffe
   234ec:	00b787bb          	addw	a5,a5,a1
   234f0:	00002737          	lui	a4,0x2
      return value::type::invalid;
   234f4:	00000413          	addi	s0,zero,0
    switch (name) {
   234f8:	fae7fee3          	bgeu	a5,a4,234b4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x160>
    : name(name), form(form), type(resolve_type(name, form)) {}
   234fc:	00852423          	sw	s0,8(a0)
   23500:	05813083          	ld	ra,88(sp)
   23504:	05013403          	ld	s0,80(sp)
   23508:	04813483          	ld	s1,72(sp)
   2350c:	04013903          	ld	s2,64(sp)
   23510:	06010113          	addi	sp,sp,96
   23514:	00008067          	jalr	zero,0(ra)
    { return std::move(__rhs.insert(0, __lhs)); }
   23518:	00014617          	auipc	a2,0x14
   2351c:	b9860613          	addi	a2,a2,-1128 # 370b0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0xd0>
   23520:	00000593          	addi	a1,zero,0
   23524:	00010513          	addi	a0,sp,0
   23528:	e69f20ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2352c:	00050593          	addi	a1,a0,0
   23530:	02010413          	addi	s0,sp,32
   23534:	00040513          	addi	a0,s0,0
   23538:	f39f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2353c:	00040593          	addi	a1,s0,0
   23540:	00090513          	addi	a0,s2,0
   23544:	85cf30ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   23548:	0001f797          	auipc	a5,0x1f
   2354c:	0107b783          	ld	a5,16(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   23550:	01078793          	addi	a5,a5,16
   23554:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   23558:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2355c:	03010793          	addi	a5,sp,48
   23560:	00f50463          	beq	a0,a5,23568 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x214>
   23564:	fadf20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23568:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2356c:	01010793          	addi	a5,sp,16
   23570:	00f50463          	beq	a0,a5,23578 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x224>
   23574:	f9df20ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string(name));
   23578:	0001f617          	auipc	a2,0x1f
   2357c:	e0863603          	ld	a2,-504(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   23580:	0001f597          	auipc	a1,0x1f
   23584:	d305b583          	ld	a1,-720(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   23588:	00090513          	addi	a0,s2,0
   2358c:	934f30ef          	jal	ra,166c0 <__cxa_throw@plt>
  throw format_error("unknown attribute form " + to_string(form));
   23590:	01000513          	addi	a0,zero,16
   23594:	e8df20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   23598:	00050493          	addi	s1,a0,0
   2359c:	00040593          	addi	a1,s0,0
   235a0:	00010513          	addi	a0,sp,0
   235a4:	2e40c0ef          	jal	ra,2f888 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   235a8:	00014617          	auipc	a2,0x14
   235ac:	b3860613          	addi	a2,a2,-1224 # 370e0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x100>
   235b0:	00000593          	addi	a1,zero,0
   235b4:	00010513          	addi	a0,sp,0
   235b8:	dd9f20ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   235bc:	00050593          	addi	a1,a0,0
   235c0:	02010413          	addi	s0,sp,32
   235c4:	00040513          	addi	a0,s0,0
   235c8:	ea9f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   235cc:	00040593          	addi	a1,s0,0
   235d0:	00048513          	addi	a0,s1,0
   235d4:	fcdf20ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   235d8:	0001f797          	auipc	a5,0x1f
   235dc:	f807b783          	ld	a5,-128(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   235e0:	01078793          	addi	a5,a5,16
   235e4:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   235e8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   235ec:	03010793          	addi	a5,sp,48
   235f0:	00f50463          	beq	a0,a5,235f8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2a4>
   235f4:	f1df20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   235f8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   235fc:	01010793          	addi	a5,sp,16
   23600:	00f50463          	beq	a0,a5,23608 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x2b4>
   23604:	f0df20ef          	jal	ra,16510 <operator delete(void*)@plt>
   23608:	0001f617          	auipc	a2,0x1f
   2360c:	d7863603          	ld	a2,-648(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   23610:	0001f597          	auipc	a1,0x1f
   23614:	ca05b583          	ld	a1,-864(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   23618:	00048513          	addi	a0,s1,0
   2361c:	8a4f30ef          	jal	ra,166c0 <__cxa_throw@plt>
  switch (form) {
   23620:	00400413          	addi	s0,zero,4
   23624:	ed9ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::exprloc;
   23628:	00600413          	addi	s0,zero,6
   2362c:	ed1ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   23630:	00300413          	addi	s0,zero,3
   23634:	ec9ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   23638:	00900413          	addi	s0,zero,9
   2363c:	ec1ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
    switch (name) {
   23640:	00900413          	addi	s0,zero,9
   23644:	eb9ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
   23648:	00900413          	addi	s0,zero,9
   2364c:	eb1ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::rangelist;
   23650:	00b00413          	addi	s0,zero,11
   23654:	ea9ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      return value::type::mac;
   23658:	00a00413          	addi	s0,zero,10
   2365c:	ea1ff06f          	jal	zero,234fc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1a8>
      { return _M_dataplus._M_p; }
   23660:	00050413          	addi	s0,a0,0
   23664:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   23668:	03010793          	addi	a5,sp,48
   2366c:	00f50463          	beq	a0,a5,23674 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x320>
   23670:	ea1f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23674:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   23678:	01010793          	addi	a5,sp,16
   2367c:	00f50463          	beq	a0,a5,23684 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x330>
   23680:	e91f20ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string(name));
   23684:	00090513          	addi	a0,s2,0
   23688:	e49f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2368c:	00040513          	addi	a0,s0,0
   23690:	860f30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23694:	00050413          	addi	s0,a0,0
   23698:	fddff06f          	jal	zero,23674 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x320>
   2369c:	00050413          	addi	s0,a0,0
   236a0:	fe5ff06f          	jal	zero,23684 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x330>
   236a4:	00050413          	addi	s0,a0,0
   236a8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   236ac:	03010793          	addi	a5,sp,48
   236b0:	00f50463          	beq	a0,a5,236b8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x364>
   236b4:	e5df20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   236b8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   236bc:	01010793          	addi	a5,sp,16
   236c0:	00f50463          	beq	a0,a5,236c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x374>
   236c4:	e4df20ef          	jal	ra,16510 <operator delete(void*)@plt>
  throw format_error("unknown attribute form " + to_string(form));
   236c8:	00048513          	addi	a0,s1,0
   236cc:	e05f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   236d0:	00040513          	addi	a0,s0,0
   236d4:	81cf30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   236d8:	00050413          	addi	s0,a0,0
   236dc:	fddff06f          	jal	zero,236b8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x364>
   236e0:	00050413          	addi	s0,a0,0
   236e4:	fe5ff06f          	jal	zero,236c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x374>

00000000000236e8 <dwarf::abbrev_entry::read(dwarf::cursor*)>:

bool abbrev_entry::read(cursor *cur) {
   236e8:	fb010113          	addi	sp,sp,-80
   236ec:	04113423          	sd	ra,72(sp)
   236f0:	04813023          	sd	s0,64(sp)
   236f4:	02913c23          	sd	s1,56(sp)
   236f8:	03213823          	sd	s2,48(sp)
   236fc:	03313423          	sd	s3,40(sp)
   23700:	03413023          	sd	s4,32(sp)
   23704:	01513c23          	sd	s5,24(sp)
   23708:	01613823          	sd	s6,16(sp)
   2370c:	00050493          	addi	s1,a0,0
   23710:	00058413          	addi	s0,a1,0
      { _M_erase_at_end(this->_M_impl._M_start); }
   23714:	01053783          	ld	a5,16(a0)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   23718:	01853703          	ld	a4,24(a0)
   2371c:	00e78463          	beq	a5,a4,23724 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x3c>
	    this->_M_impl._M_finish = __pos;
   23720:	00f53c23          	sd	a5,24(a0)
    while (pos < sec->end) {
   23724:	01043783          	ld	a5,16(s0)
   23728:	00043503          	ld	a0,0(s0)
   2372c:	01053703          	ld	a4,16(a0)
   23730:	02e7fe63          	bgeu	a5,a4,2376c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x84>
   23734:	00000593          	addi	a1,zero,0
   23738:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   2373c:	00178793          	addi	a5,a5,1
   23740:	00f43823          	sd	a5,16(s0)
   23744:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23748:	07f77693          	andi	a3,a4,127
   2374c:	00c696b3          	sll	a3,a3,a2
   23750:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   23754:	0187171b          	slliw	a4,a4,0x18
   23758:	4187571b          	sraiw	a4,a4,0x18
   2375c:	04075463          	bge	a4,zero,237a4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xbc>
      shift += 7;
   23760:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   23764:	01053703          	ld	a4,16(a0)
   23768:	fce7eae3          	bltu	a5,a4,2373c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x54>
    underflow();
   2376c:	00040513          	addi	a0,s0,0
   23770:	9dcf90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
  attributes.clear();

  // Section 7.5.3
  code = cur->uleb128();
   23774:	0004b023          	sd	zero,0(s1)
  if (!code)
    return false;
   23778:	00000513          	addi	a0,zero,0
      break;
    attributes.push_back(attribute_spec(name, form));
  }
  attributes.shrink_to_fit();
  return true;
}
   2377c:	04813083          	ld	ra,72(sp)
   23780:	04013403          	ld	s0,64(sp)
   23784:	03813483          	ld	s1,56(sp)
   23788:	03013903          	ld	s2,48(sp)
   2378c:	02813983          	ld	s3,40(sp)
   23790:	02013a03          	ld	s4,32(sp)
   23794:	01813a83          	ld	s5,24(sp)
   23798:	01013b03          	ld	s6,16(sp)
   2379c:	05010113          	addi	sp,sp,80
   237a0:	00008067          	jalr	zero,0(ra)
  code = cur->uleb128();
   237a4:	00b4b023          	sd	a1,0(s1)
  if (!code)
   237a8:	1a058863          	beq	a1,zero,23958 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x270>
    while (pos < sec->end) {
   237ac:	01043783          	ld	a5,16(s0)
   237b0:	00043503          	ld	a0,0(s0)
   237b4:	01053703          	ld	a4,16(a0)
   237b8:	02e7fe63          	bgeu	a5,a4,237f4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x10c>
    std::uint64_t result = 0;
   237bc:	00000593          	addi	a1,zero,0
    int shift = 0;
   237c0:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   237c4:	00178793          	addi	a5,a5,1
   237c8:	00f43823          	sd	a5,16(s0)
   237cc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   237d0:	07f77693          	andi	a3,a4,127
   237d4:	00c696b3          	sll	a3,a3,a2
   237d8:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   237dc:	0187171b          	slliw	a4,a4,0x18
   237e0:	4187571b          	sraiw	a4,a4,0x18
   237e4:	00075e63          	bge	a4,zero,23800 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x118>
      shift += 7;
   237e8:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   237ec:	01053703          	ld	a4,16(a0)
   237f0:	fce7eae3          	bltu	a5,a4,237c4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xdc>
    underflow();
   237f4:	00040513          	addi	a0,s0,0
   237f8:	954f90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   237fc:	00000593          	addi	a1,zero,0
  tag = (DW_TAG)cur->uleb128();
   23800:	00b4a423          	sw	a1,8(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23804:	00043783          	ld	a5,0(s0)
   23808:	0107b703          	ld	a4,16(a5)
   2380c:	01043783          	ld	a5,16(s0)
   23810:	00e7e663          	bltu	a5,a4,2381c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x134>
      underflow();
   23814:	00040513          	addi	a0,s0,0
   23818:	934f90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2381c:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   23820:	00043783          	ld	a5,0(s0)
   23824:	01c7a783          	lw	a5,28(a5)
   23828:	12078c63          	beq	a5,zero,23960 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x278>
        val = (val << 8) | (uint64_t)p[i];
   2382c:	00074783          	lbu	a5,0(a4) # 2000 <__abi_tag-0xe294>
      for (unsigned i = 0; i < sizeof(T); i++)
   23830:	1340006f          	jal	zero,23964 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x27c>
    DW_FORM form = (DW_FORM)cur->uleb128();
   23834:	0006061b          	addiw	a2,a2,0
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   23838:	00cb67b3          	or	a5,s6,a2
   2383c:	10078263          	beq	a5,zero,23940 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x258>
    attributes.push_back(attribute_spec(name, form));
   23840:	000b0593          	addi	a1,s6,0
   23844:	00098513          	addi	a0,s3,0
   23848:	b0dff0ef          	jal	ra,23354 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2384c:	0184b583          	ld	a1,24(s1)
   23850:	0204b783          	ld	a5,32(s1)
   23854:	0cf58e63          	beq	a1,a5,23930 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x248>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   23858:	00012783          	lw	a5,0(sp)
   2385c:	00f5a023          	sw	a5,0(a1)
   23860:	00412783          	lw	a5,4(sp)
   23864:	00f5a223          	sw	a5,4(a1)
   23868:	00812783          	lw	a5,8(sp)
   2386c:	00f5a423          	sw	a5,8(a1)
	    ++this->_M_impl._M_finish;
   23870:	0184b783          	ld	a5,24(s1)
   23874:	00c78793          	addi	a5,a5,12
   23878:	00f4bc23          	sd	a5,24(s1)
    while (pos < sec->end) {
   2387c:	01043783          	ld	a5,16(s0)
   23880:	00043583          	ld	a1,0(s0)
   23884:	0105b703          	ld	a4,16(a1)
   23888:	02e7fe63          	bgeu	a5,a4,238c4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1dc>
    std::uint64_t result = 0;
   2388c:	00000b13          	addi	s6,zero,0
    int shift = 0;
   23890:	00090613          	addi	a2,s2,0
      uint8_t byte = *(uint8_t *)(pos++);
   23894:	00178793          	addi	a5,a5,1
   23898:	00f43823          	sd	a5,16(s0)
   2389c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   238a0:	07f77693          	andi	a3,a4,127
   238a4:	00c696b3          	sll	a3,a3,a2
   238a8:	00db6b33          	or	s6,s6,a3
      if ((byte & 0x80) == 0)
   238ac:	0187171b          	slliw	a4,a4,0x18
   238b0:	4187571b          	sraiw	a4,a4,0x18
   238b4:	00075e63          	bge	a4,zero,238d0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1e8>
      shift += 7;
   238b8:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   238bc:	0105b703          	ld	a4,16(a1)
   238c0:	fce7eae3          	bltu	a5,a4,23894 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1ac>
    underflow();
   238c4:	00040513          	addi	a0,s0,0
   238c8:	884f90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   238cc:	00000b13          	addi	s6,zero,0
    DW_AT name = (DW_AT)cur->uleb128();
   238d0:	000b0b1b          	addiw	s6,s6,0
    while (pos < sec->end) {
   238d4:	01043783          	ld	a5,16(s0)
   238d8:	00043503          	ld	a0,0(s0)
   238dc:	01053703          	ld	a4,16(a0)
   238e0:	02e7fe63          	bgeu	a5,a4,2391c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x234>
    std::uint64_t result = 0;
   238e4:	00000613          	addi	a2,zero,0
    int shift = 0;
   238e8:	00090593          	addi	a1,s2,0
      uint8_t byte = *(uint8_t *)(pos++);
   238ec:	00178793          	addi	a5,a5,1
   238f0:	00f43823          	sd	a5,16(s0)
   238f4:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   238f8:	07f77693          	andi	a3,a4,127
   238fc:	00b696b3          	sll	a3,a3,a1
   23900:	00d66633          	or	a2,a2,a3
      if ((byte & 0x80) == 0)
   23904:	0187171b          	slliw	a4,a4,0x18
   23908:	4187571b          	sraiw	a4,a4,0x18
   2390c:	f20754e3          	bge	a4,zero,23834 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x14c>
      shift += 7;
   23910:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   23914:	01053703          	ld	a4,16(a0)
   23918:	fce7eae3          	bltu	a5,a4,238ec <dwarf::abbrev_entry::read(dwarf::cursor*)+0x204>
    underflow();
   2391c:	00040513          	addi	a0,s0,0
   23920:	82cf90ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   23924:	000b0e63          	beq	s6,zero,23940 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x258>
    DW_FORM form = (DW_FORM)cur->uleb128();
   23928:	00090613          	addi	a2,s2,0
   2392c:	f15ff06f          	jal	zero,23840 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x158>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   23930:	00098613          	addi	a2,s3,0
   23934:	000a0513          	addi	a0,s4,0
   23938:	000a80e7          	jalr	ra,0(s5)
  }
   2393c:	f41ff06f          	jal	zero,2387c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x194>
      { _M_shrink_to_fit(); }
   23940:	000a0513          	addi	a0,s4,0
   23944:	0001f317          	auipc	t1,0x1f
   23948:	c5c33303          	ld	t1,-932(t1) # 425a0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()@@Base+0x1ec10>
   2394c:	000300e7          	jalr	ra,0(t1)
  return true;
   23950:	00100513          	addi	a0,zero,1
   23954:	e29ff06f          	jal	zero,2377c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x94>
    return false;
   23958:	00000513          	addi	a0,zero,0
   2395c:	e21ff06f          	jal	zero,2377c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x94>
        val |= ((uint64_t)p[i]) << (i * 8);
   23960:	00074783          	lbu	a5,0(a4)
  attributes.clear();
   23964:	01048a13          	addi	s4,s1,16
    pos += sizeof(T);
   23968:	00170713          	addi	a4,a4,1
   2396c:	00e43823          	sd	a4,16(s0)
  children = cur->fixed<DW_CHILDREN>() == DW_CHILDREN::yes;
   23970:	fff78793          	addi	a5,a5,-1
   23974:	0017b793          	sltiu	a5,a5,1
   23978:	00f48623          	sb	a5,12(s1)
    int shift = 0;
   2397c:	00000913          	addi	s2,zero,0
    attributes.push_back(attribute_spec(name, form));
   23980:	00010993          	addi	s3,sp,0
   23984:	0001fa97          	auipc	s5,0x1f
   23988:	b1caba83          	ld	s5,-1252(s5) # 424a0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)@@Base+0x1e9e4>
   2398c:	ef1ff06f          	jal	zero,2387c <dwarf::abbrev_entry::read(dwarf::cursor*)+0x194>

0000000000023990 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    bool
    vector<_Tp, _Alloc>::
   23990:	fd010113          	addi	sp,sp,-48
   23994:	02113423          	sd	ra,40(sp)
   23998:	02813023          	sd	s0,32(sp)
   2399c:	00913c23          	sd	s1,24(sp)
   239a0:	01213823          	sd	s2,16(sp)
   239a4:	01313423          	sd	s3,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   239a8:	00853403          	ld	s0,8(a0)
    _M_shrink_to_fit()
    {
      if (capacity() == size())
   239ac:	01053783          	ld	a5,16(a0)
   239b0:	0ef40663          	beq	s0,a5,23a9c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x10c>
   239b4:	00050493          	addi	s1,a0,0
			 - this->_M_impl._M_start); }
   239b8:	00053983          	ld	s3,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   239bc:	41340933          	sub	s2,s0,s3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   239c0:	ff100793          	addi	a5,zero,-15
   239c4:	0017d793          	srli	a5,a5,0x1
   239c8:	0127ea63          	bltu	a5,s2,239dc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   239cc:	0a090c63          	beq	s2,zero,23a84 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xf4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   239d0:	00090513          	addi	a0,s2,0
   239d4:	b4df20ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   239d8:	0200006f          	jal	zero,239f8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x68>
	  __throw_length_error(
   239dc:	00013517          	auipc	a0,0x13
   239e0:	7a450513          	addi	a0,a0,1956 # 37180 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1a0>
   239e4:	a5df20ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
		__make_move_if_noexcept_iterator(__c.end()),
		__c.get_allocator()).swap(__c);
	    return true;
	  }
	catch(...)
   239e8:	a19f20ef          	jal	ra,16400 <__cxa_begin_catch@plt>
   239ec:	ca5f20ef          	jal	ra,16690 <__cxa_end_catch@plt>
	  { return false; }
   239f0:	00000513          	addi	a0,zero,0
   239f4:	0ac0006f          	jal	zero,23aa0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
   239f8:	00050613          	addi	a2,a0,0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   239fc:	01260933          	add	s2,a2,s2
	  for (; __first != __last; ++__first, (void)++__cur)
   23a00:	09340663          	beq	s0,s3,23a8c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xfc>
   23a04:	00098793          	addi	a5,s3,0
      _ForwardIterator __cur = __result;
   23a08:	00060713          	addi	a4,a2,0
   23a0c:	0007a683          	lw	a3,0(a5)
   23a10:	00d72023          	sw	a3,0(a4)
   23a14:	0047a683          	lw	a3,4(a5)
   23a18:	00d72223          	sw	a3,4(a4)
   23a1c:	0087a683          	lw	a3,8(a5)
   23a20:	00d72423          	sw	a3,8(a4)
	  for (; __first != __last; ++__first, (void)++__cur)
   23a24:	00c70713          	addi	a4,a4,12
   23a28:	00c78793          	addi	a5,a5,12
   23a2c:	fef410e3          	bne	s0,a5,23a0c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x7c>
   23a30:	ff440793          	addi	a5,s0,-12
   23a34:	413787b3          	sub	a5,a5,s3
   23a38:	0027d793          	srli	a5,a5,0x2
   23a3c:	00013717          	auipc	a4,0x13
   23a40:	79c73703          	ld	a4,1948(a4) # 371d8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   23a44:	02e787b3          	mul	a5,a5,a4
   23a48:	00279793          	slli	a5,a5,0x2
   23a4c:	0027d793          	srli	a5,a5,0x2
   23a50:	00178793          	addi	a5,a5,1
   23a54:	00179713          	slli	a4,a5,0x1
   23a58:	00f707b3          	add	a5,a4,a5
   23a5c:	00279793          	slli	a5,a5,0x2
   23a60:	00f607b3          	add	a5,a2,a5
	  _M_start = __x._M_start;
   23a64:	0004b503          	ld	a0,0(s1)
   23a68:	00c4b023          	sd	a2,0(s1)
	  _M_finish = __x._M_finish;
   23a6c:	00f4b423          	sd	a5,8(s1)
	  _M_end_of_storage = __x._M_end_of_storage;
   23a70:	0124b823          	sd	s2,16(s1)
	if (__p)
   23a74:	02050063          	beq	a0,zero,23a94 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x104>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23a78:	a99f20ef          	jal	ra,16510 <operator delete(void*)@plt>
	    return true;
   23a7c:	00100513          	addi	a0,zero,1
      { __a.deallocate(__p, __n); }
   23a80:	0200006f          	jal	zero,23aa0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   23a84:	00000613          	addi	a2,zero,0
   23a88:	f75ff06f          	jal	zero,239fc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x6c>
      _ForwardIterator __cur = __result;
   23a8c:	00060793          	addi	a5,a2,0
   23a90:	fd5ff06f          	jal	zero,23a64 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xd4>
   23a94:	00100513          	addi	a0,zero,1
   23a98:	0080006f          	jal	zero,23aa0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x110>
	return false;
   23a9c:	00000513          	addi	a0,zero,0
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }
   23aa0:	02813083          	ld	ra,40(sp)
   23aa4:	02013403          	ld	s0,32(sp)
   23aa8:	01813483          	ld	s1,24(sp)
   23aac:	01013903          	ld	s2,16(sp)
   23ab0:	00813983          	ld	s3,8(sp)
   23ab4:	03010113          	addi	sp,sp,48
   23ab8:	00008067          	jalr	zero,0(ra)

0000000000023abc <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)>:
      vector<_Tp, _Alloc>::
   23abc:	fb010113          	addi	sp,sp,-80
   23ac0:	04113423          	sd	ra,72(sp)
   23ac4:	04813023          	sd	s0,64(sp)
   23ac8:	02913c23          	sd	s1,56(sp)
   23acc:	03213823          	sd	s2,48(sp)
   23ad0:	03313423          	sd	s3,40(sp)
   23ad4:	03413023          	sd	s4,32(sp)
   23ad8:	01513c23          	sd	s5,24(sp)
   23adc:	01613823          	sd	s6,16(sp)
   23ae0:	01713423          	sd	s7,8(sp)
   23ae4:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23ae8:	00853483          	ld	s1,8(a0)
   23aec:	00053983          	ld	s3,0(a0)
   23af0:	413487b3          	sub	a5,s1,s3
   23af4:	4027d793          	srai	a5,a5,0x2
   23af8:	00013717          	auipc	a4,0x13
   23afc:	fe073703          	ld	a4,-32(a4) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23b00:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   23b04:	00013717          	auipc	a4,0x13
   23b08:	6dc73703          	ld	a4,1756(a4) # 371e0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   23b0c:	04e78463          	beq	a5,a4,23b54 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x98>
   23b10:	00050a13          	addi	s4,a0,0
   23b14:	00058413          	addi	s0,a1,0
   23b18:	00060b13          	addi	s6,a2,0
   23b1c:	00058b93          	addi	s7,a1,0
      return __a;
   23b20:	00078713          	addi	a4,a5,0
      if (__a < __b)
   23b24:	03348e63          	beq	s1,s3,23b60 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xa4>
	const size_type __len = size() + (std::max)(size(), __n);
   23b28:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   23b2c:	04f76263          	bltu	a4,a5,23b70 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xb4>
   23b30:	00070a93          	addi	s5,a4,0
   23b34:	00013797          	auipc	a5,0x13
   23b38:	6ac7b783          	ld	a5,1708(a5) # 371e0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   23b3c:	00e7f463          	bgeu	a5,a4,23b44 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x88>
   23b40:	00078a93          	addi	s5,a5,0
    { return __lhs.base() - __rhs.base(); }
   23b44:	41340c33          	sub	s8,s0,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   23b48:	00000913          	addi	s2,zero,0
   23b4c:	04070263          	beq	a4,zero,23b90 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xd4>
   23b50:	02c0006f          	jal	zero,23b7c <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xc0>
	  __throw_length_error(__N(__s));
   23b54:	00013517          	auipc	a0,0x13
   23b58:	d4c50513          	addi	a0,a0,-692 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   23b5c:	8e5f20ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   23b60:	00100713          	addi	a4,zero,1
   23b64:	fc5ff06f          	jal	zero,23b28 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x6c>
      _ForwardIterator __cur = __result;
   23b68:	00090b13          	addi	s6,s2,0
   23b6c:	0a40006f          	jal	zero,23c10 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x154>
   23b70:	41340c33          	sub	s8,s0,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   23b74:	00013a97          	auipc	s5,0x13
   23b78:	66caba83          	ld	s5,1644(s5) # 371e0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   23b7c:	001a9513          	slli	a0,s5,0x1
   23b80:	01550533          	add	a0,a0,s5
   23b84:	00251513          	slli	a0,a0,0x2
   23b88:	999f20ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   23b8c:	00050913          	addi	s2,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   23b90:	018907b3          	add	a5,s2,s8
   23b94:	000b2703          	lw	a4,0(s6)
   23b98:	00e7a023          	sw	a4,0(a5)
   23b9c:	004b2703          	lw	a4,4(s6)
   23ba0:	00e7a223          	sw	a4,4(a5)
   23ba4:	008b2703          	lw	a4,8(s6)
   23ba8:	00e7a423          	sw	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   23bac:	fb3b8ee3          	beq	s7,s3,23b68 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xac>
      _ForwardIterator __cur = __result;
   23bb0:	00090713          	addi	a4,s2,0
      for (; __first != __last; ++__first, (void)++__cur)
   23bb4:	00098793          	addi	a5,s3,0
   23bb8:	0007a683          	lw	a3,0(a5)
   23bbc:	00d72023          	sw	a3,0(a4)
   23bc0:	0047a683          	lw	a3,4(a5)
   23bc4:	00d72223          	sw	a3,4(a4)
   23bc8:	0087a683          	lw	a3,8(a5)
   23bcc:	00d72423          	sw	a3,8(a4)
   23bd0:	00c78793          	addi	a5,a5,12
   23bd4:	00c70713          	addi	a4,a4,12
   23bd8:	ff7790e3          	bne	a5,s7,23bb8 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xfc>
   23bdc:	ff440793          	addi	a5,s0,-12
   23be0:	413787b3          	sub	a5,a5,s3
   23be4:	0027d793          	srli	a5,a5,0x2
   23be8:	00013717          	auipc	a4,0x13
   23bec:	5f073703          	ld	a4,1520(a4) # 371d8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   23bf0:	02e787b3          	mul	a5,a5,a4
   23bf4:	00279793          	slli	a5,a5,0x2
   23bf8:	0027d793          	srli	a5,a5,0x2
   23bfc:	00178793          	addi	a5,a5,1
   23c00:	00179b13          	slli	s6,a5,0x1
   23c04:	00fb0b33          	add	s6,s6,a5
   23c08:	002b1b13          	slli	s6,s6,0x2
   23c0c:	01690b33          	add	s6,s2,s6
	      ++__new_finish;
   23c10:	00cb0b13          	addi	s6,s6,12
   23c14:	069b8263          	beq	s7,s1,23c78 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x1bc>
   23c18:	00040793          	addi	a5,s0,0
      _ForwardIterator __cur = __result;
   23c1c:	000b0713          	addi	a4,s6,0
   23c20:	0007a683          	lw	a3,0(a5)
   23c24:	00d72023          	sw	a3,0(a4)
   23c28:	0047a683          	lw	a3,4(a5)
   23c2c:	00d72223          	sw	a3,4(a4)
   23c30:	0087a683          	lw	a3,8(a5)
   23c34:	00d72423          	sw	a3,8(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   23c38:	00c78793          	addi	a5,a5,12
   23c3c:	00c70713          	addi	a4,a4,12
   23c40:	fe9790e3          	bne	a5,s1,23c20 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x164>
   23c44:	408487b3          	sub	a5,s1,s0
   23c48:	ff478793          	addi	a5,a5,-12
   23c4c:	0027d793          	srli	a5,a5,0x2
   23c50:	00013717          	auipc	a4,0x13
   23c54:	58873703          	ld	a4,1416(a4) # 371d8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   23c58:	02e787b3          	mul	a5,a5,a4
   23c5c:	00279793          	slli	a5,a5,0x2
   23c60:	0027d793          	srli	a5,a5,0x2
   23c64:	00178793          	addi	a5,a5,1
   23c68:	00179713          	slli	a4,a5,0x1
   23c6c:	00f707b3          	add	a5,a4,a5
   23c70:	00279793          	slli	a5,a5,0x2
   23c74:	00fb0b33          	add	s6,s6,a5
	if (__p)
   23c78:	00098663          	beq	s3,zero,23c84 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x1c8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   23c7c:	00098513          	addi	a0,s3,0
   23c80:	891f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   23c84:	012a3023          	sd	s2,0(s4)
      this->_M_impl._M_finish = __new_finish;
   23c88:	016a3423          	sd	s6,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   23c8c:	001a9793          	slli	a5,s5,0x1
   23c90:	015787b3          	add	a5,a5,s5
   23c94:	00279793          	slli	a5,a5,0x2
   23c98:	00f90933          	add	s2,s2,a5
   23c9c:	012a3823          	sd	s2,16(s4)
    }
   23ca0:	04813083          	ld	ra,72(sp)
   23ca4:	04013403          	ld	s0,64(sp)
   23ca8:	03813483          	ld	s1,56(sp)
   23cac:	03013903          	ld	s2,48(sp)
   23cb0:	02813983          	ld	s3,40(sp)
   23cb4:	02013a03          	ld	s4,32(sp)
   23cb8:	01813a83          	ld	s5,24(sp)
   23cbc:	01013b03          	ld	s6,16(sp)
   23cc0:	00813b83          	ld	s7,8(sp)
   23cc4:	00013c03          	ld	s8,0(sp)
   23cc8:	05010113          	addi	sp,sp,80
   23ccc:	00008067          	jalr	zero,0(ra)

0000000000023cd0 <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>:
DWARFPP_BEGIN_NAMESPACE

expr_context no_expr_context;

expr::expr(const unit *cu, section_offset offset, section_length len)
    : cu(cu), offset(offset), len(len) {}
   23cd0:	00b53023          	sd	a1,0(a0)
   23cd4:	00c53423          	sd	a2,8(a0)
   23cd8:	00d53823          	sd	a3,16(a0)
   23cdc:	00008067          	jalr	zero,0(ra)

0000000000023ce0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>:
  return evaluate(ctx, {argument});
}

expr_result
expr::evaluate(expr_context *ctx,
               const std::initializer_list<taddr> &arguments) const {
   23ce0:	ed010113          	addi	sp,sp,-304
   23ce4:	12113423          	sd	ra,296(sp)
   23ce8:	12813023          	sd	s0,288(sp)
   23cec:	10913c23          	sd	s1,280(sp)
   23cf0:	11213823          	sd	s2,272(sp)
   23cf4:	11313423          	sd	s3,264(sp)
   23cf8:	11413023          	sd	s4,256(sp)
   23cfc:	0f513c23          	sd	s5,248(sp)
   23d00:	0f613823          	sd	s6,240(sp)
   23d04:	0f713423          	sd	s7,232(sp)
   23d08:	0f813023          	sd	s8,224(sp)
   23d0c:	0d913c23          	sd	s9,216(sp)
   23d10:	0da13823          	sd	s10,208(sp)
   23d14:	0db13423          	sd	s11,200(sp)
   23d18:	00050a93          	addi	s5,a0,0
   23d1c:	00058913          	addi	s2,a1,0
   23d20:	00060b13          	addi	s6,a2,0
   23d24:	00068993          	addi	s3,a3,0
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   23d28:	06810793          	addi	a5,sp,104
   23d2c:	0af13423          	sd	a5,168(sp)
   23d30:	0af13823          	sd	a5,176(sp)
   23d34:	0a810793          	addi	a5,sp,168
   23d38:	0af13c23          	sd	a5,184(sp)
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
   23d3c:	0086b703          	ld	a4,8(a3)
    if (n <= (size_type)(cap - base))
   23d40:	00800793          	addi	a5,zero,8
   23d44:	06e7f463          	bgeu	a5,a4,23dac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcc>
      target <<= 1;
   23d48:	00179793          	slli	a5,a5,0x1
    while (target < n)
   23d4c:	fee7eee3          	bltu	a5,a4,23d48 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x68>
    char *newbuf = new char[sizeof(T[target])];
   23d50:	00379413          	slli	s0,a5,0x3
   23d54:	00040513          	addi	a0,s0,0
   23d58:	dd8f20ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   23d5c:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   23d60:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   23d64:	0b013703          	ld	a4,176(sp)
   23d68:	06e57263          	bgeu	a0,a4,23dcc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xec>
    T *src = base, *dest = (T *)newbuf;
   23d6c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   23d70:	00878793          	addi	a5,a5,8
   23d74:	fee7eee3          	bltu	a5,a4,23d70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x90>
   23d78:	fff70493          	addi	s1,a4,-1
   23d7c:	40a484b3          	sub	s1,s1,a0
   23d80:	ff84f493          	andi	s1,s1,-8
   23d84:	00848493          	addi	s1,s1,8
   23d88:	009a04b3          	add	s1,s4,s1
    if ((char *)base != buf)
   23d8c:	06810793          	addi	a5,sp,104
   23d90:	00f50663          	beq	a0,a5,23d9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbc>
      delete[] (char *)base;
   23d94:	00050463          	beq	a0,zero,23d9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbc>
   23d98:	829f20ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   23d9c:	0b413423          	sd	s4,168(sp)
    end = dest;
   23da0:	0a913823          	sd	s1,176(sp)
    cap = base + target;
   23da4:	008a0a33          	add	s4,s4,s0
   23da8:	0b413c23          	sd	s4,184(sp)

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   23dac:	0009b783          	ld	a5,0(s3)

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   23db0:	0089b483          	ld	s1,8(s3)
   23db4:	00349493          	slli	s1,s1,0x3
  small_vector<taddr, 8> stack;

  // Create the initial stack.  arguments are in reverse order
  // (that is, element 0 is TOS), so reverse it.
  stack.reserve(arguments.size());
  for (const taddr *elt = arguments.end() - 1; elt >= arguments.begin(); elt--)
   23db8:	ff848493          	addi	s1,s1,-8
   23dbc:	009784b3          	add	s1,a5,s1
   23dc0:	0cf4ea63          	bltu	s1,a5,23e94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b4>
    if ((char *)base != buf)
   23dc4:	06810a13          	addi	s4,sp,104
   23dc8:	07c0006f          	jal	zero,23e44 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x164>
    T *src = base, *dest = (T *)newbuf;
   23dcc:	000a0493          	addi	s1,s4,0
   23dd0:	fbdff06f          	jal	zero,23d8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xac>
    char *newbuf = new char[sizeof(T[target])];
   23dd4:	00050c13          	addi	s8,a0,0
    T *src = base, *dest = (T *)newbuf;
   23dd8:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   23ddc:	0b013703          	ld	a4,176(sp)
   23de0:	0ae57663          	bgeu	a0,a4,23e8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ac>
    T *src = base, *dest = (T *)newbuf;
   23de4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   23de8:	00878793          	addi	a5,a5,8
   23dec:	fee7eee3          	bltu	a5,a4,23de8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x108>
   23df0:	fff70b93          	addi	s7,a4,-1
   23df4:	40ab8bb3          	sub	s7,s7,a0
   23df8:	ff8bfb93          	andi	s7,s7,-8
   23dfc:	008b8b93          	addi	s7,s7,8
   23e00:	017c0bb3          	add	s7,s8,s7
    if ((char *)base != buf)
   23e04:	01450663          	beq	a0,s4,23e10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x130>
      delete[] (char *)base;
   23e08:	00050463          	beq	a0,zero,23e10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x130>
   23e0c:	fb4f20ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   23e10:	0b813423          	sd	s8,168(sp)
    end = dest;
   23e14:	0b713823          	sd	s7,176(sp)
    cap = base + target;
   23e18:	008c0c33          	add	s8,s8,s0
   23e1c:	0b813c23          	sd	s8,184(sp)
    new (end) T(x);
   23e20:	0004b703          	ld	a4,0(s1)
   23e24:	0b013783          	ld	a5,176(sp)
   23e28:	00e7b023          	sd	a4,0(a5)
    end++;
   23e2c:	0b013783          	ld	a5,176(sp)
   23e30:	00878793          	addi	a5,a5,8
   23e34:	0af13823          	sd	a5,176(sp)
   23e38:	ff848493          	addi	s1,s1,-8
   23e3c:	0009b783          	ld	a5,0(s3)
   23e40:	04f4ea63          	bltu	s1,a5,23e94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b4>
  size_type size() const { return end - base; }
   23e44:	0a813703          	ld	a4,168(sp)
   23e48:	0b013783          	ld	a5,176(sp)
   23e4c:	40e787b3          	sub	a5,a5,a4
   23e50:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   23e54:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   23e58:	0b813503          	ld	a0,184(sp)
   23e5c:	40e50533          	sub	a0,a0,a4
   23e60:	40355513          	srai	a0,a0,0x3
   23e64:	faf57ee3          	bgeu	a0,a5,23e20 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x140>
   23e68:	00051463          	bne	a0,zero,23e70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x190>
   23e6c:	00100513          	addi	a0,zero,1
    while (target < n)
   23e70:	00f57663          	bgeu	a0,a5,23e7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c>
      target <<= 1;
   23e74:	00151513          	slli	a0,a0,0x1
    while (target < n)
   23e78:	fef56ee3          	bltu	a0,a5,23e74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x194>
    char *newbuf = new char[sizeof(T[target])];
   23e7c:	00351413          	slli	s0,a0,0x3
   23e80:	00040513          	addi	a0,s0,0
   23e84:	cacf20ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   23e88:	f4dff06f          	jal	zero,23dd4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf4>
    T *src = base, *dest = (T *)newbuf;
   23e8c:	000c0b93          	addi	s7,s8,0
   23e90:	f75ff06f          	jal	zero,23e04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x124>
    stack.push_back(*elt);

  // Create a subsection for just this expression so we can
  // easily detect the end (including premature end).
  auto cusec = cu->data();
   23e94:	00093503          	ld	a0,0(s2)
   23e98:	cacf30ef          	jal	ra,17344 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23e9c:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   23ea0:	00853b83          	ld	s7,8(a0)
	if (_M_pi != nullptr)
   23ea4:	020b8063          	beq	s7,zero,23ec4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
    if (__is_single_threaded())
   23ea8:	0001e797          	auipc	a5,0x1e
   23eac:	5d87b783          	ld	a5,1496(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23eb0:	0007c783          	lbu	a5,0(a5)
   23eb4:	02078463          	beq	a5,zero,23edc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fc>
  { *__mem += __val; }
   23eb8:	030ba783          	lw	a5,48(s7)
   23ebc:	0017879b          	addiw	a5,a5,1
   23ec0:	02fba823          	sw	a5,48(s7)
  shared_ptr<section> subsec(
      make_shared<section>(cusec->type, cusec->begin + offset, len, cusec->ord,
   23ec4:	0089b403          	ld	s0,8(s3)
   23ec8:	00893783          	ld	a5,8(s2)
   23ecc:	00f40433          	add	s0,s0,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   23ed0:	06000513          	addi	a0,zero,96
   23ed4:	e4cf20ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   23ed8:	0140006f          	jal	zero,23eec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20c>
      __atomic_add(__mem, __val);
   23edc:	00100593          	addi	a1,zero,1
   23ee0:	030b8513          	addi	a0,s7,48
   23ee4:	c6cf20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   23ee8:	fddff06f          	jal	zero,23ec4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
   23eec:	00050493          	addi	s1,a0,0
   23ef0:	00052423          	sw	zero,8(a0)
   23ef4:	00052623          	sw	zero,12(a0)
   23ef8:	00052823          	sw	zero,16(a0)
   23efc:	00052a23          	sw	zero,20(a0)
   23f00:	00052c23          	sw	zero,24(a0)
   23f04:	00052e23          	sw	zero,28(a0)
   23f08:	02053023          	sd	zero,32(a0)
   23f0c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   23f10:	00100793          	addi	a5,zero,1
   23f14:	02f52823          	sw	a5,48(a0)
   23f18:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   23f1c:	0001e797          	auipc	a5,0x1e
   23f20:	6a47b783          	ld	a5,1700(a5) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   23f24:	01078793          	addi	a5,a5,16
   23f28:	00f53023          	sd	a5,0(a0)
   23f2c:	0009a583          	lw	a1,0(s3)
   23f30:	01093603          	ld	a2,16(s2)
   23f34:	01c9a703          	lw	a4,28(s3)
   23f38:	0189a683          	lw	a3,24(s3)
   23f3c:	0209a783          	lw	a5,32(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   23f40:	02b52c23          	sw	a1,56(a0)
   23f44:	04853023          	sd	s0,64(a0)
   23f48:	00c40433          	add	s0,s0,a2
   23f4c:	04853423          	sd	s0,72(a0)
   23f50:	04d52823          	sw	a3,80(a0)
        ord(ord), addr_size(addr_size) {}
   23f54:	04e52a23          	sw	a4,84(a0)
   23f58:	04f52c23          	sw	a5,88(a0)
   23f5c:	03850c13          	addi	s8,a0,56
    if (__is_single_threaded())
   23f60:	0001e797          	auipc	a5,0x1e
   23f64:	5207b783          	ld	a5,1312(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23f68:	0007c783          	lbu	a5,0(a5)
   23f6c:	16078c63          	beq	a5,zero,240e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x404>
  { *__mem += __val; }
   23f70:	00200793          	addi	a5,zero,2
   23f74:	02f52823          	sw	a5,48(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23f78:	05813823          	sd	s8,80(sp)
      : _M_pi(__r._M_pi)
   23f7c:	04913c23          	sd	s1,88(sp)
    if (__is_single_threaded())
   23f80:	0001e797          	auipc	a5,0x1e
   23f84:	5007b783          	ld	a5,1280(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23f88:	0007c783          	lbu	a5,0(a5)
   23f8c:	16078463          	beq	a5,zero,240f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x414>
  { *__mem += __val; }
   23f90:	0304a783          	lw	a5,48(s1)
   23f94:	0017879b          	addiw	a5,a5,1
   23f98:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   23f9c:	0404b783          	ld	a5,64(s1)
   23fa0:	06f13023          	sd	a5,96(sp)
    if (__is_single_threaded())
   23fa4:	0001e797          	auipc	a5,0x1e
   23fa8:	4dc7b783          	ld	a5,1244(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23fac:	0007c783          	lbu	a5,0(a5)
   23fb0:	14078a63          	beq	a5,zero,24104 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x424>
    _Atomic_word __result = *__mem;
   23fb4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   23fb8:	fff5079b          	addiw	a5,a0,-1
   23fbc:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23fc0:	00100793          	addi	a5,zero,1
   23fc4:	14f50863          	beq	a0,a5,24114 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x434>
  bool end() const { return pos >= sec->end; }
   23fc8:	05013783          	ld	a5,80(sp)
  // create the result directly, rather than using the top of
  // stack.
  expr_result result;

  // 2.6.1.1.4 Empty location descriptions
  if (cur.end()) {
   23fcc:	0107b703          	ld	a4,16(a5)
   23fd0:	06013783          	ld	a5,96(sp)
   23fd4:	1ae7e063          	bltu	a5,a4,24174 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x494>
    result.location_type = expr_result::type::empty;
   23fd8:	00400793          	addi	a5,zero,4
   23fdc:	00faa023          	sw	a5,0(s5)
    result.value = 0;
   23fe0:	000ab423          	sd	zero,8(s5)
	if (_M_pi != nullptr)
   23fe4:	05813403          	ld	s0,88(sp)
   23fe8:	02040863          	beq	s0,zero,24018 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
    if (__is_single_threaded())
   23fec:	0001e797          	auipc	a5,0x1e
   23ff0:	4947b783          	ld	a5,1172(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23ff4:	0007c783          	lbu	a5,0(a5)
   23ff8:	00079463          	bne	a5,zero,24000 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x320>
   23ffc:	7290106f          	jal	zero,25f24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2244>
    _Atomic_word __result = *__mem;
   24000:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   24004:	fff5079b          	addiw	a5,a0,-1
   24008:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2400c:	00100793          	addi	a5,zero,1
   24010:	00f51463          	bne	a0,a5,24018 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
   24014:	7210106f          	jal	zero,25f34 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2254>
    if (__is_single_threaded())
   24018:	0001e797          	auipc	a5,0x1e
   2401c:	4687b783          	ld	a5,1128(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   24020:	0007c783          	lbu	a5,0(a5)
   24024:	00079463          	bne	a5,zero,2402c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x34c>
   24028:	7710106f          	jal	zero,25f98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22b8>
    _Atomic_word __result = *__mem;
   2402c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   24030:	fff5079b          	addiw	a5,a0,-1
   24034:	02f4a823          	sw	a5,48(s1)
   24038:	00100793          	addi	a5,zero,1
   2403c:	00f51463          	bne	a0,a5,24044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
   24040:	7690106f          	jal	zero,25fa8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22c8>
	if (_M_pi != nullptr)
   24044:	020b8863          	beq	s7,zero,24074 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
    if (__is_single_threaded())
   24048:	0001e797          	auipc	a5,0x1e
   2404c:	4387b783          	ld	a5,1080(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   24050:	0007c783          	lbu	a5,0(a5)
   24054:	00079463          	bne	a5,zero,2405c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x37c>
   24058:	7b50106f          	jal	zero,2600c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x232c>
    _Atomic_word __result = *__mem;
   2405c:	030ba503          	lw	a0,48(s7)
    *__mem += __val;
   24060:	fff5079b          	addiw	a5,a0,-1
   24064:	02fba823          	sw	a5,48(s7)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24068:	00100793          	addi	a5,zero,1
   2406c:	00f51463          	bne	a0,a5,24074 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
   24070:	7ad0106f          	jal	zero,2601c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x233c>
    for (T *p = base; p < end; ++p)
   24074:	0a813503          	ld	a0,168(sp)
   24078:	0b013783          	ld	a5,176(sp)
   2407c:	00f57a63          	bgeu	a0,a5,24090 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3b0>
   24080:	00050793          	addi	a5,a0,0
   24084:	00878793          	addi	a5,a5,8
   24088:	0b013703          	ld	a4,176(sp)
   2408c:	fee7ece3          	bltu	a5,a4,24084 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3a4>
    end = base;
   24090:	0aa13823          	sd	a0,176(sp)
    if ((char *)base != buf)
   24094:	06810793          	addi	a5,sp,104
   24098:	00f50663          	beq	a0,a5,240a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c4>
      delete[] (char *)base;
   2409c:	00050463          	beq	a0,zero,240a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c4>
   240a0:	d20f20ef          	jal	ra,165c0 <operator delete[](void*)@plt>

  return result;

underflow:
  throw expr_error("stack underflow evaluating DWARF expression");
}
   240a4:	000a8513          	addi	a0,s5,0
   240a8:	12813083          	ld	ra,296(sp)
   240ac:	12013403          	ld	s0,288(sp)
   240b0:	11813483          	ld	s1,280(sp)
   240b4:	11013903          	ld	s2,272(sp)
   240b8:	10813983          	ld	s3,264(sp)
   240bc:	10013a03          	ld	s4,256(sp)
   240c0:	0f813a83          	ld	s5,248(sp)
   240c4:	0f013b03          	ld	s6,240(sp)
   240c8:	0e813b83          	ld	s7,232(sp)
   240cc:	0e013c03          	ld	s8,224(sp)
   240d0:	0d813c83          	ld	s9,216(sp)
   240d4:	0d013d03          	ld	s10,208(sp)
   240d8:	0c813d83          	ld	s11,200(sp)
   240dc:	13010113          	addi	sp,sp,304
   240e0:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   240e4:	00100593          	addi	a1,zero,1
   240e8:	03050513          	addi	a0,a0,48
   240ec:	a64f20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   240f0:	e89ff06f          	jal	zero,23f78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x298>
   240f4:	00100593          	addi	a1,zero,1
   240f8:	03048513          	addi	a0,s1,48
   240fc:	a54f20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   24100:	e9dff06f          	jal	zero,23f9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2bc>
      return __exchange_and_add(__mem, __val);
   24104:	fff00593          	addi	a1,zero,-1
   24108:	03048513          	addi	a0,s1,48
   2410c:	a74f20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   24110:	eb1ff06f          	jal	zero,23fc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e0>
	_M_dispose();
   24114:	0004b783          	ld	a5,0(s1)
   24118:	0107b783          	ld	a5,16(a5)
   2411c:	00048513          	addi	a0,s1,0
   24120:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   24124:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   24128:	0001e797          	auipc	a5,0x1e
   2412c:	3587b783          	ld	a5,856(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   24130:	0007c783          	lbu	a5,0(a5)
   24134:	02078663          	beq	a5,zero,24160 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x480>
    _Atomic_word __result = *__mem;
   24138:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   2413c:	fff7871b          	addiw	a4,a5,-1
   24140:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   24144:	00100713          	addi	a4,zero,1
   24148:	e8e790e3          	bne	a5,a4,23fc8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e8>
	    _M_destroy();
   2414c:	0004b783          	ld	a5,0(s1)
   24150:	0187b783          	ld	a5,24(a5)
   24154:	00048513          	addi	a0,s1,0
   24158:	000780e7          	jalr	ra,0(a5)
   2415c:	e6dff06f          	jal	zero,23fc8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2e8>
      return __exchange_and_add(__mem, __val);
   24160:	fff00593          	addi	a1,zero,-1
   24164:	03448513          	addi	a0,s1,52
   24168:	a18f20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2416c:	00050793          	addi	a5,a0,0
   24170:	fd5ff06f          	jal	zero,24144 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x464>
  result.location_type = expr_result::type::address;
   24174:	000aa023          	sw	zero,0(s5)
    switch (op) {
   24178:	0fc00993          	addi	s3,zero,252
   2417c:	00013417          	auipc	s0,0x13
   24180:	29440413          	addi	s0,s0,660 # 37410 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x430>
    return ::__libc_single_threaded;
   24184:	0001ed17          	auipc	s10,0x1e
   24188:	2fcd3d03          	ld	s10,764(s10) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      CHECKN(2);
   2418c:	00800d93          	addi	s11,zero,8
  while (!cur.end()) {
   24190:	1b40106f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    while (pos < sec->end) {
   24194:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   24198:	00000913          	addi	s2,zero,0
    int shift = 0;
   2419c:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   241a0:	02f77a63          	bgeu	a4,a5,241d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
      uint8_t byte = *(uint8_t *)(pos++);
   241a4:	00170713          	addi	a4,a4,1
   241a8:	06e13023          	sd	a4,96(sp)
   241ac:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   241b0:	07f7f613          	andi	a2,a5,127
   241b4:	00b61633          	sll	a2,a2,a1
   241b8:	00c96933          	or	s2,s2,a2
      if ((byte & 0x80) == 0)
   241bc:	0187979b          	slliw	a5,a5,0x18
   241c0:	4187d79b          	sraiw	a5,a5,0x18
   241c4:	5607d6e3          	bge	a5,zero,24f30 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1250>
      shift += 7;
   241c8:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   241cc:	0106b783          	ld	a5,16(a3)
   241d0:	fcf76ae3          	bltu	a4,a5,241a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4c4>
    underflow();
   241d4:	05010513          	addi	a0,sp,80
   241d8:	f74f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   241dc:	5510006f          	jal	zero,24f2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x124c>
    while (pos < sec->end) {
   241e0:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   241e4:	00000513          	addi	a0,zero,0
    int shift = 0;
   241e8:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   241ec:	02f77c63          	bgeu	a4,a5,24224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x544>
      uint8_t byte = *(uint8_t *)(pos++);
   241f0:	00170713          	addi	a4,a4,1
   241f4:	06e13023          	sd	a4,96(sp)
   241f8:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   241fc:	07f7f613          	andi	a2,a5,127
   24200:	00b61633          	sll	a2,a2,a1
   24204:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   24208:	0187979b          	slliw	a5,a5,0x18
   2420c:	4187d79b          	sraiw	a5,a5,0x18
   24210:	0007c463          	blt	a5,zero,24218 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x538>
   24214:	4240106f          	jal	zero,25638 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1958>
      shift += 7;
   24218:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   2421c:	0106b783          	ld	a5,16(a3)
   24220:	fcf768e3          	bltu	a4,a5,241f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x510>
    underflow();
   24224:	05010513          	addi	a0,sp,80
   24228:	f24f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   2422c:	4080106f          	jal	zero,25634 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1954>
    while (pos < sec->end) {
   24230:	0106b783          	ld	a5,16(a3)
    std::uint64_t result = 0;
   24234:	00000a13          	addi	s4,zero,0
    int shift = 0;
   24238:	00000593          	addi	a1,zero,0
    while (pos < sec->end) {
   2423c:	02f77a63          	bgeu	a4,a5,24270 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x590>
      uint8_t byte = *(uint8_t *)(pos++);
   24240:	00170713          	addi	a4,a4,1
   24244:	06e13023          	sd	a4,96(sp)
   24248:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2424c:	07f7f613          	andi	a2,a5,127
   24250:	00b61633          	sll	a2,a2,a1
   24254:	00ca6a33          	or	s4,s4,a2
      if ((byte & 0x80) == 0)
   24258:	0187979b          	slliw	a5,a5,0x18
   2425c:	4187d79b          	sraiw	a5,a5,0x18
   24260:	2207d8e3          	bge	a5,zero,24c90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfb0>
      shift += 7;
   24264:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   24268:	0106b783          	ld	a5,16(a3)
   2426c:	fcf76ae3          	bltu	a4,a5,24240 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x560>
    underflow();
   24270:	05010513          	addi	a0,sp,80
   24274:	ed8f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   24278:	2150006f          	jal	zero,24c8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfac>
      stack.push_back((unsigned)op - (unsigned)DW_OP::lit0);
   2427c:	fd09091b          	addiw	s2,s2,-48
   24280:	02091913          	slli	s2,s2,0x20
   24284:	02095913          	srli	s2,s2,0x20
  size_type size() const { return end - base; }
   24288:	0a813703          	ld	a4,168(sp)
   2428c:	0b013783          	ld	a5,176(sp)
   24290:	40e787b3          	sub	a5,a5,a4
   24294:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24298:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2429c:	0b813a03          	ld	s4,184(sp)
   242a0:	40ea0a33          	sub	s4,s4,a4
   242a4:	403a5a13          	srai	s4,s4,0x3
   242a8:	06fa7e63          	bgeu	s4,a5,24324 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x644>
   242ac:	000a1463          	bne	s4,zero,242b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d4>
   242b0:	00100a13          	addi	s4,zero,1
    while (target < n)
   242b4:	00fa7663          	bgeu	s4,a5,242c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5e0>
      target <<= 1;
   242b8:	001a1a13          	slli	s4,s4,0x1
    while (target < n)
   242bc:	fefa6ee3          	bltu	s4,a5,242b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d8>
    char *newbuf = new char[sizeof(T[target])];
   242c0:	003a1a13          	slli	s4,s4,0x3
   242c4:	000a0513          	addi	a0,s4,0
   242c8:	868f20ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   242cc:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   242d0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   242d4:	0b013703          	ld	a4,176(sp)
   242d8:	06e57263          	bgeu	a0,a4,2433c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x65c>
    T *src = base, *dest = (T *)newbuf;
   242dc:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   242e0:	00878793          	addi	a5,a5,8
   242e4:	fee7eee3          	bltu	a5,a4,242e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x600>
   242e8:	fff70793          	addi	a5,a4,-1
   242ec:	40a787b3          	sub	a5,a5,a0
   242f0:	ff87f793          	andi	a5,a5,-8
   242f4:	00878793          	addi	a5,a5,8
   242f8:	00fc87b3          	add	a5,s9,a5
   242fc:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24300:	06810793          	addi	a5,sp,104
   24304:	00f50663          	beq	a0,a5,24310 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x630>
      delete[] (char *)base;
   24308:	00050463          	beq	a0,zero,24310 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x630>
   2430c:	ab4f20ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24310:	0b913423          	sd	s9,168(sp)
    end = dest;
   24314:	00813783          	ld	a5,8(sp)
   24318:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   2431c:	014c8cb3          	add	s9,s9,s4
   24320:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24324:	0b013783          	ld	a5,176(sp)
   24328:	0127b023          	sd	s2,0(a5)
    end++;
   2432c:	0b013783          	ld	a5,176(sp)
   24330:	00878793          	addi	a5,a5,8
   24334:	0af13823          	sd	a5,176(sp)
      break;
   24338:	00c0106f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   2433c:	01913423          	sd	s9,8(sp)
   24340:	fc1ff06f          	jal	zero,24300 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x620>
      stack.push_back(cur.address());
   24344:	05010513          	addi	a0,sp,80
   24348:	0001e317          	auipc	t1,0x1e
   2434c:	03033303          	ld	t1,48(t1) # 42378 <dwarf::cursor::address()@@Base+0x1f584>
   24350:	000300e7          	jalr	ra,0(t1)
   24354:	00a13423          	sd	a0,8(sp)
  size_type size() const { return end - base; }
   24358:	0a813703          	ld	a4,168(sp)
   2435c:	0b013783          	ld	a5,176(sp)
   24360:	40e787b3          	sub	a5,a5,a4
   24364:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24368:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2436c:	0b813903          	ld	s2,184(sp)
   24370:	40e90933          	sub	s2,s2,a4
   24374:	40395913          	srai	s2,s2,0x3
   24378:	06f97a63          	bgeu	s2,a5,243ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70c>
   2437c:	00091463          	bne	s2,zero,24384 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a4>
   24380:	00100913          	addi	s2,zero,1
    while (target < n)
   24384:	00f97663          	bgeu	s2,a5,24390 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6b0>
      target <<= 1;
   24388:	00191913          	slli	s2,s2,0x1
    while (target < n)
   2438c:	fef96ee3          	bltu	s2,a5,24388 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a8>
    char *newbuf = new char[sizeof(T[target])];
   24390:	00391913          	slli	s2,s2,0x3
   24394:	00090513          	addi	a0,s2,0
   24398:	f99f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   2439c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   243a0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   243a4:	0b013703          	ld	a4,176(sp)
   243a8:	06e57063          	bgeu	a0,a4,24408 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x728>
    T *src = base, *dest = (T *)newbuf;
   243ac:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   243b0:	00878793          	addi	a5,a5,8
   243b4:	fee7eee3          	bltu	a5,a4,243b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6d0>
   243b8:	fff70a13          	addi	s4,a4,-1
   243bc:	40aa0a33          	sub	s4,s4,a0
   243c0:	ff8a7a13          	andi	s4,s4,-8
   243c4:	008a0a13          	addi	s4,s4,8
   243c8:	014c8a33          	add	s4,s9,s4
    if ((char *)base != buf)
   243cc:	06810793          	addi	a5,sp,104
   243d0:	00f50663          	beq	a0,a5,243dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
      delete[] (char *)base;
   243d4:	00050463          	beq	a0,zero,243dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
   243d8:	9e8f20ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   243dc:	0b913423          	sd	s9,168(sp)
    end = dest;
   243e0:	0b413823          	sd	s4,176(sp)
    cap = base + target;
   243e4:	012c8cb3          	add	s9,s9,s2
   243e8:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   243ec:	0b013783          	ld	a5,176(sp)
   243f0:	00813703          	ld	a4,8(sp)
   243f4:	00e7b023          	sd	a4,0(a5)
    end++;
   243f8:	0b013783          	ld	a5,176(sp)
   243fc:	00878793          	addi	a5,a5,8
   24400:	0af13823          	sd	a5,176(sp)
      break;
   24404:	7410006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24408:	000c8a13          	addi	s4,s9,0
   2440c:	fc1ff06f          	jal	zero,243cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6ec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24410:	0106b783          	ld	a5,16(a3)
   24414:	00f76663          	bltu	a4,a5,24420 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x740>
      underflow();
   24418:	05010513          	addi	a0,sp,80
   2441c:	d30f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24420:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   24424:	05013703          	ld	a4,80(sp)
   24428:	01c72703          	lw	a4,28(a4)
   2442c:	00071463          	bne	a4,zero,24434 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x754>
   24430:	6350106f          	jal	zero,26264 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2584>
        val = (val << 8) | (uint64_t)p[i];
   24434:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   24438:	6310106f          	jal	zero,26268 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2588>
    char *newbuf = new char[sizeof(T[target])];
   2443c:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   24440:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24444:	0b013703          	ld	a4,176(sp)
   24448:	06e57263          	bgeu	a0,a4,244ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7cc>
    T *src = base, *dest = (T *)newbuf;
   2444c:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24450:	00878793          	addi	a5,a5,8
   24454:	fee7eee3          	bltu	a5,a4,24450 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x770>
   24458:	fff70793          	addi	a5,a4,-1
   2445c:	40a787b3          	sub	a5,a5,a0
   24460:	ff87f793          	andi	a5,a5,-8
   24464:	00878793          	addi	a5,a5,8
   24468:	00fa07b3          	add	a5,s4,a5
   2446c:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24470:	06810793          	addi	a5,sp,104
   24474:	00f50663          	beq	a0,a5,24480 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a0>
      delete[] (char *)base;
   24478:	00050463          	beq	a0,zero,24480 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a0>
   2447c:	944f20ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24480:	0b413423          	sd	s4,168(sp)
    end = dest;
   24484:	00813783          	ld	a5,8(sp)
   24488:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   2448c:	012a0a33          	add	s4,s4,s2
   24490:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   24494:	0b013783          	ld	a5,176(sp)
   24498:	0197b023          	sd	s9,0(a5)
    end++;
   2449c:	0b013783          	ld	a5,176(sp)
   244a0:	00878793          	addi	a5,a5,8
   244a4:	0af13823          	sd	a5,176(sp)
      break;
   244a8:	69d0006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   244ac:	01413423          	sd	s4,8(sp)
   244b0:	fc1ff06f          	jal	zero,24470 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x790>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   244b4:	0106b783          	ld	a5,16(a3)
   244b8:	40e78633          	sub	a2,a5,a4
   244bc:	00100693          	addi	a3,zero,1
   244c0:	00c6f463          	bgeu	a3,a2,244c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7e8>
   244c4:	00f76663          	bltu	a4,a5,244d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7f0>
      underflow();
   244c8:	05010513          	addi	a0,sp,80
   244cc:	c80f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   244d0:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   244d4:	05013703          	ld	a4,80(sp)
   244d8:	01c72703          	lw	a4,28(a4)
   244dc:	06071263          	bne	a4,zero,24540 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x860>
        val |= ((uint64_t)p[i]) << (i * 8);
   244e0:	0017ca03          	lbu	s4,1(a5)
   244e4:	008a1a13          	slli	s4,s4,0x8
   244e8:	0007c703          	lbu	a4,0(a5)
   244ec:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   244f0:	00278793          	addi	a5,a5,2
   244f4:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   244f8:	0a813703          	ld	a4,168(sp)
   244fc:	0b013783          	ld	a5,176(sp)
   24500:	40e787b3          	sub	a5,a5,a4
   24504:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24508:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2450c:	0b813903          	ld	s2,184(sp)
   24510:	40e90933          	sub	s2,s2,a4
   24514:	40395913          	srai	s2,s2,0x3
   24518:	08f97a63          	bgeu	s2,a5,245ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8cc>
   2451c:	00091463          	bne	s2,zero,24524 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x844>
   24520:	00100913          	addi	s2,zero,1
    while (target < n)
   24524:	00f97663          	bgeu	s2,a5,24530 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x850>
      target <<= 1;
   24528:	00191913          	slli	s2,s2,0x1
    while (target < n)
   2452c:	fef96ee3          	bltu	s2,a5,24528 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x848>
    char *newbuf = new char[sizeof(T[target])];
   24530:	00391913          	slli	s2,s2,0x3
   24534:	00090513          	addi	a0,s2,0
   24538:	df9f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   2453c:	0180006f          	jal	zero,24554 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x874>
        val = (val << 8) | (uint64_t)p[i];
   24540:	0007ca03          	lbu	s4,0(a5)
   24544:	008a1a13          	slli	s4,s4,0x8
   24548:	0017c703          	lbu	a4,1(a5)
   2454c:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24550:	fa1ff06f          	jal	zero,244f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x810>
   24554:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24558:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   2455c:	0b013703          	ld	a4,176(sp)
   24560:	06e57263          	bgeu	a0,a4,245c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8e4>
    T *src = base, *dest = (T *)newbuf;
   24564:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24568:	00878793          	addi	a5,a5,8
   2456c:	fee7eee3          	bltu	a5,a4,24568 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x888>
   24570:	fff70793          	addi	a5,a4,-1
   24574:	40a787b3          	sub	a5,a5,a0
   24578:	ff87f793          	andi	a5,a5,-8
   2457c:	00878793          	addi	a5,a5,8
   24580:	00fc87b3          	add	a5,s9,a5
   24584:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24588:	06810793          	addi	a5,sp,104
   2458c:	00f50663          	beq	a0,a5,24598 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b8>
      delete[] (char *)base;
   24590:	00050463          	beq	a0,zero,24598 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b8>
   24594:	82cf20ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24598:	0b913423          	sd	s9,168(sp)
    end = dest;
   2459c:	00813783          	ld	a5,8(sp)
   245a0:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   245a4:	012c8cb3          	add	s9,s9,s2
   245a8:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   245ac:	0b013783          	ld	a5,176(sp)
   245b0:	0147b023          	sd	s4,0(a5)
    end++;
   245b4:	0b013783          	ld	a5,176(sp)
   245b8:	00878793          	addi	a5,a5,8
   245bc:	0af13823          	sd	a5,176(sp)
      break;
   245c0:	5850006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   245c4:	01913423          	sd	s9,8(sp)
   245c8:	fc1ff06f          	jal	zero,24588 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   245cc:	0106b783          	ld	a5,16(a3)
   245d0:	40e78633          	sub	a2,a5,a4
   245d4:	00300693          	addi	a3,zero,3
   245d8:	00c6f463          	bgeu	a3,a2,245e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x900>
   245dc:	00f76663          	bltu	a4,a5,245e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x908>
      underflow();
   245e0:	05010513          	addi	a0,sp,80
   245e4:	b68f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   245e8:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   245ec:	05013783          	ld	a5,80(sp)
   245f0:	01c7a783          	lw	a5,28(a5)
   245f4:	08079063          	bne	a5,zero,24674 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x994>
   245f8:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   245fc:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   24600:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   24604:	0006c703          	lbu	a4,0(a3)
   24608:	00f71733          	sll	a4,a4,a5
   2460c:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24610:	00168693          	addi	a3,a3,1
   24614:	0087879b          	addiw	a5,a5,8
   24618:	feb796e3          	bne	a5,a1,24604 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x924>
    pos += sizeof(T);
   2461c:	00460613          	addi	a2,a2,4
   24620:	06c13023          	sd	a2,96(sp)
   24624:	020a1a13          	slli	s4,s4,0x20
   24628:	020a5a13          	srli	s4,s4,0x20
  size_type size() const { return end - base; }
   2462c:	0a813703          	ld	a4,168(sp)
   24630:	0b013783          	ld	a5,176(sp)
   24634:	40e787b3          	sub	a5,a5,a4
   24638:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   2463c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24640:	0b813903          	ld	s2,184(sp)
   24644:	40e90933          	sub	s2,s2,a4
   24648:	40395913          	srai	s2,s2,0x3
   2464c:	0af97263          	bgeu	s2,a5,246f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa10>
   24650:	00091463          	bne	s2,zero,24658 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x978>
   24654:	00100913          	addi	s2,zero,1
    while (target < n)
   24658:	00f97663          	bgeu	s2,a5,24664 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x984>
      target <<= 1;
   2465c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24660:	fef96ee3          	bltu	s2,a5,2465c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x97c>
    char *newbuf = new char[sizeof(T[target])];
   24664:	00391913          	slli	s2,s2,0x3
   24668:	00090513          	addi	a0,s2,0
   2466c:	cc5f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24670:	0280006f          	jal	zero,24698 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9b8>
   24674:	00060793          	addi	a5,a2,0
   24678:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   2467c:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   24680:	008a1a13          	slli	s4,s4,0x8
   24684:	0007c703          	lbu	a4,0(a5)
   24688:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   2468c:	00178793          	addi	a5,a5,1
   24690:	fef698e3          	bne	a3,a5,24680 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9a0>
   24694:	f89ff06f          	jal	zero,2461c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x93c>
   24698:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   2469c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   246a0:	0b013703          	ld	a4,176(sp)
   246a4:	06e57263          	bgeu	a0,a4,24708 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa28>
    T *src = base, *dest = (T *)newbuf;
   246a8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   246ac:	00878793          	addi	a5,a5,8
   246b0:	fee7eee3          	bltu	a5,a4,246ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9cc>
   246b4:	fff70793          	addi	a5,a4,-1
   246b8:	40a787b3          	sub	a5,a5,a0
   246bc:	ff87f793          	andi	a5,a5,-8
   246c0:	00878793          	addi	a5,a5,8
   246c4:	00fc87b3          	add	a5,s9,a5
   246c8:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   246cc:	06810793          	addi	a5,sp,104
   246d0:	00f50663          	beq	a0,a5,246dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9fc>
      delete[] (char *)base;
   246d4:	00050463          	beq	a0,zero,246dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9fc>
   246d8:	ee9f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   246dc:	0b913423          	sd	s9,168(sp)
    end = dest;
   246e0:	00813783          	ld	a5,8(sp)
   246e4:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   246e8:	012c8cb3          	add	s9,s9,s2
   246ec:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   246f0:	0b013783          	ld	a5,176(sp)
   246f4:	0147b023          	sd	s4,0(a5)
    end++;
   246f8:	0b013783          	ld	a5,176(sp)
   246fc:	00878793          	addi	a5,a5,8
   24700:	0af13823          	sd	a5,176(sp)
      break;
   24704:	4410006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24708:	01913423          	sd	s9,8(sp)
   2470c:	fc1ff06f          	jal	zero,246cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9ec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24710:	0106b783          	ld	a5,16(a3)
   24714:	40e78633          	sub	a2,a5,a4
   24718:	00700693          	addi	a3,zero,7
   2471c:	00c6f463          	bgeu	a3,a2,24724 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa44>
   24720:	00f76663          	bltu	a4,a5,2472c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa4c>
      underflow();
   24724:	05010513          	addi	a0,sp,80
   24728:	a24f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2472c:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   24730:	05013783          	ld	a5,80(sp)
   24734:	01c7a783          	lw	a5,28(a5)
   24738:	06079c63          	bne	a5,zero,247b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad0>
   2473c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   24740:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   24744:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   24748:	0006c703          	lbu	a4,0(a3)
   2474c:	00f71733          	sll	a4,a4,a5
   24750:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24754:	00168693          	addi	a3,a3,1
   24758:	0087879b          	addiw	a5,a5,8
   2475c:	feb796e3          	bne	a5,a1,24748 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa68>
    pos += sizeof(T);
   24760:	00860613          	addi	a2,a2,8
   24764:	06c13023          	sd	a2,96(sp)
  size_type size() const { return end - base; }
   24768:	0a813703          	ld	a4,168(sp)
   2476c:	0b013783          	ld	a5,176(sp)
   24770:	40e787b3          	sub	a5,a5,a4
   24774:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24778:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2477c:	0b813903          	ld	s2,184(sp)
   24780:	40e90933          	sub	s2,s2,a4
   24784:	40395913          	srai	s2,s2,0x3
   24788:	0af97263          	bgeu	s2,a5,2482c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb4c>
   2478c:	00091463          	bne	s2,zero,24794 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab4>
   24790:	00100913          	addi	s2,zero,1
    while (target < n)
   24794:	00f97663          	bgeu	s2,a5,247a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xac0>
      target <<= 1;
   24798:	00191913          	slli	s2,s2,0x1
    while (target < n)
   2479c:	fef96ee3          	bltu	s2,a5,24798 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab8>
    char *newbuf = new char[sizeof(T[target])];
   247a0:	00391913          	slli	s2,s2,0x3
   247a4:	00090513          	addi	a0,s2,0
   247a8:	b89f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   247ac:	0280006f          	jal	zero,247d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaf4>
   247b0:	00060793          	addi	a5,a2,0
   247b4:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   247b8:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   247bc:	008a1a13          	slli	s4,s4,0x8
   247c0:	0007c703          	lbu	a4,0(a5)
   247c4:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   247c8:	00178793          	addi	a5,a5,1
   247cc:	fed798e3          	bne	a5,a3,247bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xadc>
   247d0:	f91ff06f          	jal	zero,24760 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa80>
   247d4:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   247d8:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   247dc:	0b013703          	ld	a4,176(sp)
   247e0:	06e57263          	bgeu	a0,a4,24844 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb64>
    T *src = base, *dest = (T *)newbuf;
   247e4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   247e8:	00878793          	addi	a5,a5,8
   247ec:	fee7eee3          	bltu	a5,a4,247e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb08>
   247f0:	fff70793          	addi	a5,a4,-1
   247f4:	40a787b3          	sub	a5,a5,a0
   247f8:	ff87f793          	andi	a5,a5,-8
   247fc:	00878793          	addi	a5,a5,8
   24800:	00fc87b3          	add	a5,s9,a5
   24804:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24808:	06810793          	addi	a5,sp,104
   2480c:	00f50663          	beq	a0,a5,24818 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb38>
      delete[] (char *)base;
   24810:	00050463          	beq	a0,zero,24818 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb38>
   24814:	dadf10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24818:	0b913423          	sd	s9,168(sp)
    end = dest;
   2481c:	00813783          	ld	a5,8(sp)
   24820:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24824:	012c8cb3          	add	s9,s9,s2
   24828:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   2482c:	0b013783          	ld	a5,176(sp)
   24830:	0147b023          	sd	s4,0(a5)
    end++;
   24834:	0b013783          	ld	a5,176(sp)
   24838:	00878793          	addi	a5,a5,8
   2483c:	0af13823          	sd	a5,176(sp)
      break;
   24840:	3050006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24844:	01913423          	sd	s9,8(sp)
   24848:	fc1ff06f          	jal	zero,24808 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb28>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2484c:	0106b783          	ld	a5,16(a3)
   24850:	00f76663          	bltu	a4,a5,2485c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb7c>
      underflow();
   24854:	05010513          	addi	a0,sp,80
   24858:	8f4f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2485c:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   24860:	05013703          	ld	a4,80(sp)
   24864:	01c72703          	lw	a4,28(a4)
   24868:	00071463          	bne	a4,zero,24870 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb90>
   2486c:	2510106f          	jal	zero,262bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25dc>
        val = (val << 8) | (uint64_t)p[i];
   24870:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   24874:	24d0106f          	jal	zero,262c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25e0>
    char *newbuf = new char[sizeof(T[target])];
   24878:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   2487c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24880:	0b013703          	ld	a4,176(sp)
   24884:	06e57263          	bgeu	a0,a4,248e8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc08>
    T *src = base, *dest = (T *)newbuf;
   24888:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   2488c:	00878793          	addi	a5,a5,8
   24890:	fee7eee3          	bltu	a5,a4,2488c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbac>
   24894:	fff70793          	addi	a5,a4,-1
   24898:	40a787b3          	sub	a5,a5,a0
   2489c:	ff87f793          	andi	a5,a5,-8
   248a0:	00878793          	addi	a5,a5,8
   248a4:	00fa07b3          	add	a5,s4,a5
   248a8:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   248ac:	06810793          	addi	a5,sp,104
   248b0:	00f50663          	beq	a0,a5,248bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbdc>
      delete[] (char *)base;
   248b4:	00050463          	beq	a0,zero,248bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbdc>
   248b8:	d09f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   248bc:	0b413423          	sd	s4,168(sp)
    end = dest;
   248c0:	00813783          	ld	a5,8(sp)
   248c4:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   248c8:	012a0a33          	add	s4,s4,s2
   248cc:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   248d0:	0b013783          	ld	a5,176(sp)
   248d4:	0197b023          	sd	s9,0(a5)
    end++;
   248d8:	0b013783          	ld	a5,176(sp)
   248dc:	00878793          	addi	a5,a5,8
   248e0:	0af13823          	sd	a5,176(sp)
      break;
   248e4:	2610006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   248e8:	01413423          	sd	s4,8(sp)
   248ec:	fc1ff06f          	jal	zero,248ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbcc>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   248f0:	0106b783          	ld	a5,16(a3)
   248f4:	40e78633          	sub	a2,a5,a4
   248f8:	00100693          	addi	a3,zero,1
   248fc:	00c6f463          	bgeu	a3,a2,24904 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc24>
   24900:	00f76663          	bltu	a4,a5,2490c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc2c>
      underflow();
   24904:	05010513          	addi	a0,sp,80
   24908:	844f80ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2490c:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   24910:	05013703          	ld	a4,80(sp)
   24914:	01c72703          	lw	a4,28(a4)
   24918:	06071663          	bne	a4,zero,24984 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xca4>
        val |= ((uint64_t)p[i]) << (i * 8);
   2491c:	0017ca03          	lbu	s4,1(a5)
   24920:	008a1a13          	slli	s4,s4,0x8
   24924:	0007c703          	lbu	a4,0(a5)
   24928:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   2492c:	00278793          	addi	a5,a5,2
   24930:	06f13023          	sd	a5,96(sp)
      stack.push_back(cur.fixed<int16_t>());
   24934:	010a1a1b          	slliw	s4,s4,0x10
   24938:	410a5a1b          	sraiw	s4,s4,0x10
  size_type size() const { return end - base; }
   2493c:	0a813703          	ld	a4,168(sp)
   24940:	0b013783          	ld	a5,176(sp)
   24944:	40e787b3          	sub	a5,a5,a4
   24948:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   2494c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24950:	0b813903          	ld	s2,184(sp)
   24954:	40e90933          	sub	s2,s2,a4
   24958:	40395913          	srai	s2,s2,0x3
   2495c:	08f97a63          	bgeu	s2,a5,249f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd10>
   24960:	00091463          	bne	s2,zero,24968 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc88>
   24964:	00100913          	addi	s2,zero,1
    while (target < n)
   24968:	00f97663          	bgeu	s2,a5,24974 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc94>
      target <<= 1;
   2496c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24970:	fef96ee3          	bltu	s2,a5,2496c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc8c>
    char *newbuf = new char[sizeof(T[target])];
   24974:	00391913          	slli	s2,s2,0x3
   24978:	00090513          	addi	a0,s2,0
   2497c:	9b5f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24980:	0180006f          	jal	zero,24998 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcb8>
        val = (val << 8) | (uint64_t)p[i];
   24984:	0007ca03          	lbu	s4,0(a5)
   24988:	008a1a13          	slli	s4,s4,0x8
   2498c:	0017c703          	lbu	a4,1(a5)
   24990:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24994:	f99ff06f          	jal	zero,2492c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc4c>
   24998:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   2499c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   249a0:	0b013703          	ld	a4,176(sp)
   249a4:	06e57263          	bgeu	a0,a4,24a08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd28>
    T *src = base, *dest = (T *)newbuf;
   249a8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   249ac:	00878793          	addi	a5,a5,8
   249b0:	fee7eee3          	bltu	a5,a4,249ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xccc>
   249b4:	fff70793          	addi	a5,a4,-1
   249b8:	40a787b3          	sub	a5,a5,a0
   249bc:	ff87f793          	andi	a5,a5,-8
   249c0:	00878793          	addi	a5,a5,8
   249c4:	00fc87b3          	add	a5,s9,a5
   249c8:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   249cc:	06810793          	addi	a5,sp,104
   249d0:	00f50663          	beq	a0,a5,249dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
      delete[] (char *)base;
   249d4:	00050463          	beq	a0,zero,249dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
   249d8:	be9f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   249dc:	0b913423          	sd	s9,168(sp)
    end = dest;
   249e0:	00813783          	ld	a5,8(sp)
   249e4:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   249e8:	012c8cb3          	add	s9,s9,s2
   249ec:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   249f0:	0b013783          	ld	a5,176(sp)
   249f4:	0147b023          	sd	s4,0(a5)
    end++;
   249f8:	0b013783          	ld	a5,176(sp)
   249fc:	00878793          	addi	a5,a5,8
   24a00:	0af13823          	sd	a5,176(sp)
      break;
   24a04:	1410006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24a08:	01913423          	sd	s9,8(sp)
   24a0c:	fc1ff06f          	jal	zero,249cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcec>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24a10:	0106b783          	ld	a5,16(a3)
   24a14:	40e78633          	sub	a2,a5,a4
   24a18:	00300693          	addi	a3,zero,3
   24a1c:	00c6f463          	bgeu	a3,a2,24a24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd44>
   24a20:	00f76663          	bltu	a4,a5,24a2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd4c>
      underflow();
   24a24:	05010513          	addi	a0,sp,80
   24a28:	f25f70ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24a2c:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   24a30:	05013783          	ld	a5,80(sp)
   24a34:	01c7a783          	lw	a5,28(a5)
   24a38:	06079e63          	bne	a5,zero,24ab4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd4>
   24a3c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   24a40:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   24a44:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   24a48:	0006c703          	lbu	a4,0(a3)
   24a4c:	00f71733          	sll	a4,a4,a5
   24a50:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24a54:	00168693          	addi	a3,a3,1
   24a58:	0087879b          	addiw	a5,a5,8
   24a5c:	feb796e3          	bne	a5,a1,24a48 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd68>
    pos += sizeof(T);
   24a60:	00460613          	addi	a2,a2,4
   24a64:	06c13023          	sd	a2,96(sp)
      stack.push_back(cur.fixed<int32_t>());
   24a68:	000a0a1b          	addiw	s4,s4,0
  size_type size() const { return end - base; }
   24a6c:	0a813703          	ld	a4,168(sp)
   24a70:	0b013783          	ld	a5,176(sp)
   24a74:	40e787b3          	sub	a5,a5,a4
   24a78:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24a7c:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24a80:	0b813903          	ld	s2,184(sp)
   24a84:	40e90933          	sub	s2,s2,a4
   24a88:	40395913          	srai	s2,s2,0x3
   24a8c:	0af97263          	bgeu	s2,a5,24b30 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe50>
   24a90:	00091463          	bne	s2,zero,24a98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdb8>
   24a94:	00100913          	addi	s2,zero,1
    while (target < n)
   24a98:	00f97663          	bgeu	s2,a5,24aa4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdc4>
      target <<= 1;
   24a9c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24aa0:	fef96ee3          	bltu	s2,a5,24a9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdbc>
    char *newbuf = new char[sizeof(T[target])];
   24aa4:	00391913          	slli	s2,s2,0x3
   24aa8:	00090513          	addi	a0,s2,0
   24aac:	885f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24ab0:	0280006f          	jal	zero,24ad8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdf8>
   24ab4:	00060793          	addi	a5,a2,0
   24ab8:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   24abc:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   24ac0:	008a1a13          	slli	s4,s4,0x8
   24ac4:	0007c703          	lbu	a4,0(a5)
   24ac8:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   24acc:	00178793          	addi	a5,a5,1
   24ad0:	fef698e3          	bne	a3,a5,24ac0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde0>
   24ad4:	f8dff06f          	jal	zero,24a60 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd80>
   24ad8:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24adc:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24ae0:	0b013703          	ld	a4,176(sp)
   24ae4:	06e57263          	bgeu	a0,a4,24b48 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe68>
    T *src = base, *dest = (T *)newbuf;
   24ae8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24aec:	00878793          	addi	a5,a5,8
   24af0:	fee7eee3          	bltu	a5,a4,24aec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe0c>
   24af4:	fff70793          	addi	a5,a4,-1
   24af8:	40a787b3          	sub	a5,a5,a0
   24afc:	ff87f793          	andi	a5,a5,-8
   24b00:	00878793          	addi	a5,a5,8
   24b04:	00fc87b3          	add	a5,s9,a5
   24b08:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24b0c:	06810793          	addi	a5,sp,104
   24b10:	00f50663          	beq	a0,a5,24b1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3c>
      delete[] (char *)base;
   24b14:	00050463          	beq	a0,zero,24b1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3c>
   24b18:	aa9f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24b1c:	0b913423          	sd	s9,168(sp)
    end = dest;
   24b20:	00813783          	ld	a5,8(sp)
   24b24:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24b28:	012c8cb3          	add	s9,s9,s2
   24b2c:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24b30:	0b013783          	ld	a5,176(sp)
   24b34:	0147b023          	sd	s4,0(a5)
    end++;
   24b38:	0b013783          	ld	a5,176(sp)
   24b3c:	00878793          	addi	a5,a5,8
   24b40:	0af13823          	sd	a5,176(sp)
      break;
   24b44:	0010006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24b48:	01913423          	sd	s9,8(sp)
   24b4c:	fc1ff06f          	jal	zero,24b0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe2c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   24b50:	0106b783          	ld	a5,16(a3)
   24b54:	40e78633          	sub	a2,a5,a4
   24b58:	00700693          	addi	a3,zero,7
   24b5c:	00c6f463          	bgeu	a3,a2,24b64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe84>
   24b60:	00f76663          	bltu	a4,a5,24b6c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe8c>
      underflow();
   24b64:	05010513          	addi	a0,sp,80
   24b68:	de5f70ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   24b6c:	06013603          	ld	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   24b70:	05013783          	ld	a5,80(sp)
   24b74:	01c7a783          	lw	a5,28(a5)
   24b78:	06079c63          	bne	a5,zero,24bf0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf10>
   24b7c:	00060693          	addi	a3,a2,0
    uint64_t val = 0;
   24b80:	00000a13          	addi	s4,zero,0
      for (unsigned i = 0; i < sizeof(T); i++)
   24b84:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   24b88:	0006c703          	lbu	a4,0(a3)
   24b8c:	00f71733          	sll	a4,a4,a5
   24b90:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   24b94:	00168693          	addi	a3,a3,1
   24b98:	0087879b          	addiw	a5,a5,8
   24b9c:	feb796e3          	bne	a5,a1,24b88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xea8>
    pos += sizeof(T);
   24ba0:	00860613          	addi	a2,a2,8
   24ba4:	06c13023          	sd	a2,96(sp)
  size_type size() const { return end - base; }
   24ba8:	0a813703          	ld	a4,168(sp)
   24bac:	0b013783          	ld	a5,176(sp)
   24bb0:	40e787b3          	sub	a5,a5,a4
   24bb4:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24bb8:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24bbc:	0b813903          	ld	s2,184(sp)
   24bc0:	40e90933          	sub	s2,s2,a4
   24bc4:	40395913          	srai	s2,s2,0x3
   24bc8:	0af97263          	bgeu	s2,a5,24c6c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf8c>
   24bcc:	00091463          	bne	s2,zero,24bd4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef4>
   24bd0:	00100913          	addi	s2,zero,1
    while (target < n)
   24bd4:	00f97663          	bgeu	s2,a5,24be0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf00>
      target <<= 1;
   24bd8:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24bdc:	fef96ee3          	bltu	s2,a5,24bd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef8>
    char *newbuf = new char[sizeof(T[target])];
   24be0:	00391913          	slli	s2,s2,0x3
   24be4:	00090513          	addi	a0,s2,0
   24be8:	f48f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24bec:	0280006f          	jal	zero,24c14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf34>
   24bf0:	00060793          	addi	a5,a2,0
   24bf4:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   24bf8:	00000a13          	addi	s4,zero,0
        val = (val << 8) | (uint64_t)p[i];
   24bfc:	008a1a13          	slli	s4,s4,0x8
   24c00:	0007c703          	lbu	a4,0(a5)
   24c04:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   24c08:	00178793          	addi	a5,a5,1
   24c0c:	fed798e3          	bne	a5,a3,24bfc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf1c>
   24c10:	f91ff06f          	jal	zero,24ba0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xec0>
   24c14:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24c18:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24c1c:	0b013703          	ld	a4,176(sp)
   24c20:	06e57263          	bgeu	a0,a4,24c84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfa4>
    T *src = base, *dest = (T *)newbuf;
   24c24:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24c28:	00878793          	addi	a5,a5,8
   24c2c:	fee7eee3          	bltu	a5,a4,24c28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf48>
   24c30:	fff70793          	addi	a5,a4,-1
   24c34:	40a787b3          	sub	a5,a5,a0
   24c38:	ff87f793          	andi	a5,a5,-8
   24c3c:	00878793          	addi	a5,a5,8
   24c40:	00fc87b3          	add	a5,s9,a5
   24c44:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24c48:	06810793          	addi	a5,sp,104
   24c4c:	00f50663          	beq	a0,a5,24c58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf78>
      delete[] (char *)base;
   24c50:	00050463          	beq	a0,zero,24c58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf78>
   24c54:	96df10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24c58:	0b913423          	sd	s9,168(sp)
    end = dest;
   24c5c:	00813783          	ld	a5,8(sp)
   24c60:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24c64:	012c8cb3          	add	s9,s9,s2
   24c68:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24c6c:	0b013783          	ld	a5,176(sp)
   24c70:	0147b023          	sd	s4,0(a5)
    end++;
   24c74:	0b013783          	ld	a5,176(sp)
   24c78:	00878793          	addi	a5,a5,8
   24c7c:	0af13823          	sd	a5,176(sp)
      break;
   24c80:	6c40006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24c84:	01913423          	sd	s9,8(sp)
   24c88:	fc1ff06f          	jal	zero,24c48 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf68>
    return 0;
   24c8c:	00000a13          	addi	s4,zero,0
  size_type size() const { return end - base; }
   24c90:	0a813703          	ld	a4,168(sp)
   24c94:	0b013783          	ld	a5,176(sp)
   24c98:	40e787b3          	sub	a5,a5,a4
   24c9c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24ca0:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24ca4:	0b813903          	ld	s2,184(sp)
   24ca8:	40e90933          	sub	s2,s2,a4
   24cac:	40395913          	srai	s2,s2,0x3
   24cb0:	06f97e63          	bgeu	s2,a5,24d2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x104c>
   24cb4:	00091463          	bne	s2,zero,24cbc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfdc>
   24cb8:	00100913          	addi	s2,zero,1
    while (target < n)
   24cbc:	00f97663          	bgeu	s2,a5,24cc8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfe8>
      target <<= 1;
   24cc0:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24cc4:	fef96ee3          	bltu	s2,a5,24cc0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfe0>
    char *newbuf = new char[sizeof(T[target])];
   24cc8:	00391913          	slli	s2,s2,0x3
   24ccc:	00090513          	addi	a0,s2,0
   24cd0:	e60f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24cd4:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24cd8:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24cdc:	0b013703          	ld	a4,176(sp)
   24ce0:	06e57263          	bgeu	a0,a4,24d44 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1064>
    T *src = base, *dest = (T *)newbuf;
   24ce4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24ce8:	00878793          	addi	a5,a5,8
   24cec:	fee7eee3          	bltu	a5,a4,24ce8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1008>
   24cf0:	fff70793          	addi	a5,a4,-1
   24cf4:	40a787b3          	sub	a5,a5,a0
   24cf8:	ff87f793          	andi	a5,a5,-8
   24cfc:	00878793          	addi	a5,a5,8
   24d00:	00fc87b3          	add	a5,s9,a5
   24d04:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24d08:	06810793          	addi	a5,sp,104
   24d0c:	00f50663          	beq	a0,a5,24d18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1038>
      delete[] (char *)base;
   24d10:	00050463          	beq	a0,zero,24d18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1038>
   24d14:	8adf10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24d18:	0b913423          	sd	s9,168(sp)
    end = dest;
   24d1c:	00813783          	ld	a5,8(sp)
   24d20:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24d24:	012c8cb3          	add	s9,s9,s2
   24d28:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24d2c:	0b013783          	ld	a5,176(sp)
   24d30:	0147b023          	sd	s4,0(a5)
    end++;
   24d34:	0b013783          	ld	a5,176(sp)
   24d38:	00878793          	addi	a5,a5,8
   24d3c:	0af13823          	sd	a5,176(sp)
      break;
   24d40:	6040006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24d44:	01913423          	sd	s9,8(sp)
   24d48:	fc1ff06f          	jal	zero,24d08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1028>
      stack.push_back(cur.sleb128());
   24d4c:	05010513          	addi	a0,sp,80
   24d50:	c51f70ef          	jal	ra,1c9a0 <dwarf::cursor::sleb128()>
   24d54:	00a13423          	sd	a0,8(sp)
  size_type size() const { return end - base; }
   24d58:	0a813703          	ld	a4,168(sp)
   24d5c:	0b013783          	ld	a5,176(sp)
   24d60:	40e787b3          	sub	a5,a5,a4
   24d64:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24d68:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24d6c:	0b813903          	ld	s2,184(sp)
   24d70:	40e90933          	sub	s2,s2,a4
   24d74:	40395913          	srai	s2,s2,0x3
   24d78:	06f97a63          	bgeu	s2,a5,24dec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110c>
   24d7c:	00091463          	bne	s2,zero,24d84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10a4>
   24d80:	00100913          	addi	s2,zero,1
    while (target < n)
   24d84:	00f97663          	bgeu	s2,a5,24d90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10b0>
      target <<= 1;
   24d88:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24d8c:	fef96ee3          	bltu	s2,a5,24d88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10a8>
    char *newbuf = new char[sizeof(T[target])];
   24d90:	00391913          	slli	s2,s2,0x3
   24d94:	00090513          	addi	a0,s2,0
   24d98:	d98f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24d9c:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   24da0:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24da4:	0b013703          	ld	a4,176(sp)
   24da8:	06e57063          	bgeu	a0,a4,24e08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1128>
    T *src = base, *dest = (T *)newbuf;
   24dac:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24db0:	00878793          	addi	a5,a5,8
   24db4:	fee7eee3          	bltu	a5,a4,24db0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10d0>
   24db8:	fff70a13          	addi	s4,a4,-1
   24dbc:	40aa0a33          	sub	s4,s4,a0
   24dc0:	ff8a7a13          	andi	s4,s4,-8
   24dc4:	008a0a13          	addi	s4,s4,8
   24dc8:	014c8a33          	add	s4,s9,s4
    if ((char *)base != buf)
   24dcc:	06810793          	addi	a5,sp,104
   24dd0:	00f50663          	beq	a0,a5,24ddc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10fc>
      delete[] (char *)base;
   24dd4:	00050463          	beq	a0,zero,24ddc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10fc>
   24dd8:	fe8f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24ddc:	0b913423          	sd	s9,168(sp)
    end = dest;
   24de0:	0b413823          	sd	s4,176(sp)
    cap = base + target;
   24de4:	012c8cb3          	add	s9,s9,s2
   24de8:	0b913c23          	sd	s9,184(sp)
    new (end) T(std::move(x));
   24dec:	0b013783          	ld	a5,176(sp)
   24df0:	00813703          	ld	a4,8(sp)
   24df4:	00e7b023          	sd	a4,0(a5)
    end++;
   24df8:	0b013783          	ld	a5,176(sp)
   24dfc:	00878793          	addi	a5,a5,8
   24e00:	0af13823          	sd	a5,176(sp)
      break;
   24e04:	5400006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24e08:	000c8a13          	addi	s4,s9,0
   24e0c:	fc1ff06f          	jal	zero,24dcc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10ec>
      throw runtime_error("DW_OP_fbreg not implemented");
   24e10:	01000513          	addi	a0,zero,16
   24e14:	e0cf10ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   24e18:	00050913          	addi	s2,a0,0
   24e1c:	00012597          	auipc	a1,0x12
   24e20:	48458593          	addi	a1,a1,1156 # 372a0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2c0>
   24e24:	dccf10ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   24e28:	0001d617          	auipc	a2,0x1d
   24e2c:	5e063603          	ld	a2,1504(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   24e30:	0001d597          	auipc	a1,0x1d
   24e34:	7c85b583          	ld	a1,1992(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   24e38:	00090513          	addi	a0,s2,0
   24e3c:	885f10ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   24e40:	00050413          	addi	s0,a0,0
   24e44:	2480106f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      tmp1.u = (unsigned)op - (unsigned)DW_OP::breg0;
   24e48:	f909091b          	addiw	s2,s2,-112
      tmp2.s = cur.sleb128();
   24e4c:	05010513          	addi	a0,sp,80
   24e50:	b51f70ef          	jal	ra,1c9a0 <dwarf::cursor::sleb128()>
   24e54:	00050c93          	addi	s9,a0,0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   24e58:	000b3783          	ld	a5,0(s6)
   24e5c:	0107b783          	ld	a5,16(a5)
   24e60:	00090593          	addi	a1,s2,0
   24e64:	000b0513          	addi	a0,s6,0
   24e68:	000780e7          	jalr	ra,0(a5)
   24e6c:	01950cb3          	add	s9,a0,s9
  size_type size() const { return end - base; }
   24e70:	0a813703          	ld	a4,168(sp)
   24e74:	0b013783          	ld	a5,176(sp)
   24e78:	40e787b3          	sub	a5,a5,a4
   24e7c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24e80:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24e84:	0b813903          	ld	s2,184(sp)
   24e88:	40e90933          	sub	s2,s2,a4
   24e8c:	40395913          	srai	s2,s2,0x3
   24e90:	06f97e63          	bgeu	s2,a5,24f0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x122c>
   24e94:	00091463          	bne	s2,zero,24e9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11bc>
   24e98:	00100913          	addi	s2,zero,1
    while (target < n)
   24e9c:	00f97663          	bgeu	s2,a5,24ea8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11c8>
      target <<= 1;
   24ea0:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24ea4:	fef96ee3          	bltu	s2,a5,24ea0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11c0>
    char *newbuf = new char[sizeof(T[target])];
   24ea8:	00391913          	slli	s2,s2,0x3
   24eac:	00090513          	addi	a0,s2,0
   24eb0:	c80f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24eb4:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   24eb8:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24ebc:	0b013703          	ld	a4,176(sp)
   24ec0:	06e57263          	bgeu	a0,a4,24f24 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1244>
    T *src = base, *dest = (T *)newbuf;
   24ec4:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24ec8:	00878793          	addi	a5,a5,8
   24ecc:	fee7eee3          	bltu	a5,a4,24ec8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11e8>
   24ed0:	fff70793          	addi	a5,a4,-1
   24ed4:	40a787b3          	sub	a5,a5,a0
   24ed8:	ff87f793          	andi	a5,a5,-8
   24edc:	00878793          	addi	a5,a5,8
   24ee0:	00fa07b3          	add	a5,s4,a5
   24ee4:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24ee8:	06810793          	addi	a5,sp,104
   24eec:	00f50663          	beq	a0,a5,24ef8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1218>
      delete[] (char *)base;
   24ef0:	00050463          	beq	a0,zero,24ef8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1218>
   24ef4:	eccf10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24ef8:	0b413423          	sd	s4,168(sp)
    end = dest;
   24efc:	00813783          	ld	a5,8(sp)
   24f00:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24f04:	012a0a33          	add	s4,s4,s2
   24f08:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   24f0c:	0b013783          	ld	a5,176(sp)
   24f10:	0197b023          	sd	s9,0(a5)
    end++;
   24f14:	0b013783          	ld	a5,176(sp)
   24f18:	00878793          	addi	a5,a5,8
   24f1c:	0af13823          	sd	a5,176(sp)
      break;
   24f20:	4240006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   24f24:	01413423          	sd	s4,8(sp)
   24f28:	fc1ff06f          	jal	zero,24ee8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1208>
   24f2c:	00000913          	addi	s2,zero,0
      tmp2.s = cur.sleb128();
   24f30:	05010513          	addi	a0,sp,80
   24f34:	a6df70ef          	jal	ra,1c9a0 <dwarf::cursor::sleb128()>
   24f38:	00050c93          	addi	s9,a0,0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   24f3c:	000b3783          	ld	a5,0(s6)
   24f40:	0107b783          	ld	a5,16(a5)
   24f44:	0009059b          	addiw	a1,s2,0
   24f48:	000b0513          	addi	a0,s6,0
   24f4c:	000780e7          	jalr	ra,0(a5)
   24f50:	01950cb3          	add	s9,a0,s9
  size_type size() const { return end - base; }
   24f54:	0a813703          	ld	a4,168(sp)
   24f58:	0b013783          	ld	a5,176(sp)
   24f5c:	40e787b3          	sub	a5,a5,a4
   24f60:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   24f64:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   24f68:	0b813903          	ld	s2,184(sp)
   24f6c:	40e90933          	sub	s2,s2,a4
   24f70:	40395913          	srai	s2,s2,0x3
   24f74:	06f97e63          	bgeu	s2,a5,24ff0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1310>
   24f78:	00091463          	bne	s2,zero,24f80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12a0>
   24f7c:	00100913          	addi	s2,zero,1
    while (target < n)
   24f80:	00f97663          	bgeu	s2,a5,24f8c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12ac>
      target <<= 1;
   24f84:	00191913          	slli	s2,s2,0x1
    while (target < n)
   24f88:	fef96ee3          	bltu	s2,a5,24f84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12a4>
    char *newbuf = new char[sizeof(T[target])];
   24f8c:	00391913          	slli	s2,s2,0x3
   24f90:	00090513          	addi	a0,s2,0
   24f94:	b9cf10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   24f98:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   24f9c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   24fa0:	0b013703          	ld	a4,176(sp)
   24fa4:	06e57263          	bgeu	a0,a4,25008 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1328>
    T *src = base, *dest = (T *)newbuf;
   24fa8:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   24fac:	00878793          	addi	a5,a5,8
   24fb0:	fee7eee3          	bltu	a5,a4,24fac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12cc>
   24fb4:	fff70793          	addi	a5,a4,-1
   24fb8:	40a787b3          	sub	a5,a5,a0
   24fbc:	ff87f793          	andi	a5,a5,-8
   24fc0:	00878793          	addi	a5,a5,8
   24fc4:	00fa07b3          	add	a5,s4,a5
   24fc8:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   24fcc:	06810793          	addi	a5,sp,104
   24fd0:	00f50663          	beq	a0,a5,24fdc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12fc>
      delete[] (char *)base;
   24fd4:	00050463          	beq	a0,zero,24fdc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12fc>
   24fd8:	de8f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   24fdc:	0b413423          	sd	s4,168(sp)
    end = dest;
   24fe0:	00813783          	ld	a5,8(sp)
   24fe4:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   24fe8:	012a0a33          	add	s4,s4,s2
   24fec:	0b413c23          	sd	s4,184(sp)
    new (end) T(std::move(x));
   24ff0:	0b013783          	ld	a5,176(sp)
   24ff4:	0197b023          	sd	s9,0(a5)
    end++;
   24ff8:	0b013783          	ld	a5,176(sp)
   24ffc:	00878793          	addi	a5,a5,8
   25000:	0af13823          	sd	a5,176(sp)
      break;
   25004:	3400006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25008:	01413423          	sd	s4,8(sp)
   2500c:	fc1ff06f          	jal	zero,24fcc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x12ec>
  bool empty() const { return base == end; }
   25010:	0a813703          	ld	a4,168(sp)
   25014:	0b013c83          	ld	s9,176(sp)
      CHECK();
   25018:	66ec84e3          	beq	s9,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
  size_type size() const { return end - base; }
   2501c:	40ec87b3          	sub	a5,s9,a4
   25020:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   25024:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   25028:	0b813903          	ld	s2,184(sp)
   2502c:	40e90933          	sub	s2,s2,a4
   25030:	40395913          	srai	s2,s2,0x3
   25034:	06f97e63          	bgeu	s2,a5,250b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13d0>
   25038:	00091463          	bne	s2,zero,25040 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1360>
   2503c:	00100913          	addi	s2,zero,1
    while (target < n)
   25040:	00f97663          	bgeu	s2,a5,2504c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x136c>
      target <<= 1;
   25044:	00191913          	slli	s2,s2,0x1
    while (target < n)
   25048:	fef96ee3          	bltu	s2,a5,25044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1364>
    char *newbuf = new char[sizeof(T[target])];
   2504c:	00391913          	slli	s2,s2,0x3
   25050:	00090513          	addi	a0,s2,0
   25054:	adcf10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   25058:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   2505c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25060:	0b013703          	ld	a4,176(sp)
   25064:	06e57463          	bgeu	a0,a4,250cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
    T *src = base, *dest = (T *)newbuf;
   25068:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   2506c:	00878793          	addi	a5,a5,8
   25070:	fee7eee3          	bltu	a5,a4,2506c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x138c>
   25074:	fff70793          	addi	a5,a4,-1
   25078:	40a787b3          	sub	a5,a5,a0
   2507c:	ff87f793          	andi	a5,a5,-8
   25080:	00878793          	addi	a5,a5,8
   25084:	00fa07b3          	add	a5,s4,a5
   25088:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   2508c:	06810793          	addi	a5,sp,104
   25090:	00f50663          	beq	a0,a5,2509c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
      delete[] (char *)base;
   25094:	00050463          	beq	a0,zero,2509c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
   25098:	d28f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2509c:	0b413423          	sd	s4,168(sp)
    end = dest;
   250a0:	00813783          	ld	a5,8(sp)
   250a4:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   250a8:	012a0a33          	add	s4,s4,s2
   250ac:	0b413c23          	sd	s4,184(sp)
    new (end) T(x);
   250b0:	ff8cb703          	ld	a4,-8(s9)
   250b4:	0b013783          	ld	a5,176(sp)
   250b8:	00e7b023          	sd	a4,0(a5)
    end++;
   250bc:	0b013783          	ld	a5,176(sp)
   250c0:	00878793          	addi	a5,a5,8
   250c4:	0af13823          	sd	a5,176(sp)
  }
   250c8:	27c0006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   250cc:	01413423          	sd	s4,8(sp)
   250d0:	fbdff06f          	jal	zero,2508c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ac>
  bool empty() const { return base == end; }
   250d4:	0b013783          	ld	a5,176(sp)
      CHECK();
   250d8:	0a813703          	ld	a4,168(sp)
   250dc:	5ae782e3          	beq	a5,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
    end--;
   250e0:	ff878793          	addi	a5,a5,-8
   250e4:	0af13823          	sd	a5,176(sp)
  }
   250e8:	25c0006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   250ec:	0106b783          	ld	a5,16(a3)
   250f0:	00f76663          	bltu	a4,a5,250fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x141c>
      underflow();
   250f4:	05010513          	addi	a0,sp,80
   250f8:	855f70ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   250fc:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25100:	05013703          	ld	a4,80(sp)
   25104:	01c72703          	lw	a4,28(a4)
   25108:	00071463          	bne	a4,zero,25110 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1430>
   2510c:	2100106f          	jal	zero,2631c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x263c>
        val = (val << 8) | (uint64_t)p[i];
   25110:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   25114:	20c0106f          	jal	zero,26320 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2640>
    char *newbuf = new char[sizeof(T[target])];
   25118:	00050c93          	addi	s9,a0,0
    T *src = base, *dest = (T *)newbuf;
   2511c:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   25120:	0b013703          	ld	a4,176(sp)
   25124:	06e57463          	bgeu	a0,a4,2518c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14ac>
    T *src = base, *dest = (T *)newbuf;
   25128:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   2512c:	00878793          	addi	a5,a5,8
   25130:	fee7eee3          	bltu	a5,a4,2512c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x144c>
   25134:	fff70793          	addi	a5,a4,-1
   25138:	40a787b3          	sub	a5,a5,a0
   2513c:	ff87f793          	andi	a5,a5,-8
   25140:	00878793          	addi	a5,a5,8
   25144:	00fc87b3          	add	a5,s9,a5
   25148:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   2514c:	06810793          	addi	a5,sp,104
   25150:	00f50663          	beq	a0,a5,2515c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x147c>
      delete[] (char *)base;
   25154:	00050463          	beq	a0,zero,2515c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x147c>
   25158:	c68f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2515c:	0b913423          	sd	s9,168(sp)
    end = dest;
   25160:	00813783          	ld	a5,8(sp)
   25164:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25168:	012c8cb3          	add	s9,s9,s2
   2516c:	0b913c23          	sd	s9,184(sp)
    new (end) T(x);
   25170:	000a3703          	ld	a4,0(s4)
   25174:	0b013783          	ld	a5,176(sp)
   25178:	00e7b023          	sd	a4,0(a5)
    end++;
   2517c:	0b013783          	ld	a5,176(sp)
   25180:	00878793          	addi	a5,a5,8
   25184:	0af13823          	sd	a5,176(sp)
  }
   25188:	1bc0006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   2518c:	01913423          	sd	s9,8(sp)
   25190:	fbdff06f          	jal	zero,2514c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x146c>
  size_type size() const { return end - base; }
   25194:	0b013c83          	ld	s9,176(sp)
   25198:	0a813703          	ld	a4,168(sp)
   2519c:	40ec87b3          	sub	a5,s9,a4
      CHECKN(2);
   251a0:	00800693          	addi	a3,zero,8
   251a4:	4cf6fee3          	bgeu	a3,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   251a8:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   251ac:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   251b0:	0b813903          	ld	s2,184(sp)
   251b4:	40e90933          	sub	s2,s2,a4
   251b8:	40395913          	srai	s2,s2,0x3
   251bc:	06f97e63          	bgeu	s2,a5,25238 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1558>
   251c0:	00091463          	bne	s2,zero,251c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14e8>
   251c4:	00100913          	addi	s2,zero,1
    while (target < n)
   251c8:	00f97663          	bgeu	s2,a5,251d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14f4>
      target <<= 1;
   251cc:	00191913          	slli	s2,s2,0x1
    while (target < n)
   251d0:	fef96ee3          	bltu	s2,a5,251cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14ec>
    char *newbuf = new char[sizeof(T[target])];
   251d4:	00391913          	slli	s2,s2,0x3
   251d8:	00090513          	addi	a0,s2,0
   251dc:	954f10ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   251e0:	00050a13          	addi	s4,a0,0
    T *src = base, *dest = (T *)newbuf;
   251e4:	0a813503          	ld	a0,168(sp)
    for (; src < end; src++, dest++) {
   251e8:	0b013703          	ld	a4,176(sp)
   251ec:	06e57463          	bgeu	a0,a4,25254 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1574>
    T *src = base, *dest = (T *)newbuf;
   251f0:	00050793          	addi	a5,a0,0
    for (; src < end; src++, dest++) {
   251f4:	00878793          	addi	a5,a5,8
   251f8:	fee7eee3          	bltu	a5,a4,251f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1514>
   251fc:	fff70793          	addi	a5,a4,-1
   25200:	40a787b3          	sub	a5,a5,a0
   25204:	ff87f793          	andi	a5,a5,-8
   25208:	00878793          	addi	a5,a5,8
   2520c:	00fa07b3          	add	a5,s4,a5
   25210:	00f13423          	sd	a5,8(sp)
    if ((char *)base != buf)
   25214:	06810793          	addi	a5,sp,104
   25218:	00f50663          	beq	a0,a5,25224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1544>
      delete[] (char *)base;
   2521c:	00050463          	beq	a0,zero,25224 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1544>
   25220:	ba0f10ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   25224:	0b413423          	sd	s4,168(sp)
    end = dest;
   25228:	00813783          	ld	a5,8(sp)
   2522c:	0af13823          	sd	a5,176(sp)
    cap = base + target;
   25230:	012a0a33          	add	s4,s4,s2
   25234:	0b413c23          	sd	s4,184(sp)
    new (end) T(x);
   25238:	ff0cb703          	ld	a4,-16(s9)
   2523c:	0b013783          	ld	a5,176(sp)
   25240:	00e7b023          	sd	a4,0(a5)
    end++;
   25244:	0b013783          	ld	a5,176(sp)
   25248:	00878793          	addi	a5,a5,8
   2524c:	0af13823          	sd	a5,176(sp)
  }
   25250:	0f40006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    T *src = base, *dest = (T *)newbuf;
   25254:	01413423          	sd	s4,8(sp)
   25258:	fbdff06f          	jal	zero,25214 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1534>
  size_type size() const { return end - base; }
   2525c:	0b013783          	ld	a5,176(sp)
   25260:	0a813703          	ld	a4,168(sp)
   25264:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   25268:	00800693          	addi	a3,zero,8
   2526c:	40e6fae3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   25270:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   25274:	ff07b683          	ld	a3,-16(a5)
   25278:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   2527c:	0b013783          	ld	a5,176(sp)
      stack.revat(1) = tmp1.u;
   25280:	fee7b823          	sd	a4,-16(a5)
      break;
   25284:	0c00006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25288:	0b013783          	ld	a5,176(sp)
   2528c:	0a813703          	ld	a4,168(sp)
   25290:	40e78733          	sub	a4,a5,a4
      CHECKN(3);
   25294:	01000693          	addi	a3,zero,16
   25298:	3ee6f4e3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   2529c:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   252a0:	ff07b683          	ld	a3,-16(a5)
   252a4:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   252a8:	0b013783          	ld	a5,176(sp)
      stack.revat(1) = stack.revat(2);
   252ac:	fe87b683          	ld	a3,-24(a5)
   252b0:	fed7b823          	sd	a3,-16(a5)
   252b4:	0b013783          	ld	a5,176(sp)
      stack.revat(2) = tmp1.u;
   252b8:	fee7b423          	sd	a4,-24(a5)
      break;
   252bc:	0880006f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      tmp1.u = subsec->addr_size;
   252c0:	0584e603          	lwu	a2,88(s1)
  bool empty() const { return base == end; }
   252c4:	0b013903          	ld	s2,176(sp)
      CHECK();
   252c8:	0a813783          	ld	a5,168(sp)
   252cc:	3b278ae3          	beq	a5,s2,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   252d0:	000b3783          	ld	a5,0(s6)
   252d4:	0187b783          	ld	a5,24(a5)
   252d8:	0006061b          	addiw	a2,a2,0
   252dc:	ff893583          	ld	a1,-8(s2)
   252e0:	000b0513          	addi	a0,s6,0
   252e4:	000780e7          	jalr	ra,0(a5)
   252e8:	0580006f          	jal	zero,25340 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1660>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   252ec:	0106b783          	ld	a5,16(a3)
   252f0:	00f76663          	bltu	a4,a5,252fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x161c>
      underflow();
   252f4:	05010513          	addi	a0,sp,80
   252f8:	e54f70ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   252fc:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25300:	05013703          	ld	a4,80(sp)
   25304:	01c72703          	lw	a4,28(a4)
   25308:	00071463          	bne	a4,zero,25310 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1630>
   2530c:	0780106f          	jal	zero,26384 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26a4>
        val = (val << 8) | (uint64_t)p[i];
   25310:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   25314:	0740106f          	jal	zero,26388 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26a8>
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   25318:	0001d797          	auipc	a5,0x1d
   2531c:	0387b783          	ld	a5,56(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   25320:	01078793          	addi	a5,a5,16
   25324:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   25328:	0001d617          	auipc	a2,0x1d
   2532c:	18063603          	ld	a2,384(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   25330:	0001d597          	auipc	a1,0x1d
   25334:	1f05b583          	ld	a1,496(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   25338:	00090513          	addi	a0,s2,0
   2533c:	b84f10ef          	jal	ra,166c0 <__cxa_throw@plt>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   25340:	fea93c23          	sd	a0,-8(s2)
      { return _M_ptr; }
   25344:	05013683          	ld	a3,80(sp)
  bool end() const { return pos >= sec->end; }
   25348:	06013703          	ld	a4,96(sp)
  while (!cur.end()) {
   2534c:	0106b783          	ld	a5,16(a3)
   25350:	36f778e3          	bgeu	a4,a5,25ec0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21e0>
    if (sec->ord == byte_order::lsb) {
   25354:	01c6a783          	lw	a5,28(a3)
   25358:	00079463          	bne	a5,zero,25360 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1680>
   2535c:	0900106f          	jal	zero,263ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x270c>
        val = (val << 8) | (uint64_t)p[i];
   25360:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   25364:	08c0106f          	jal	zero,263f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2710>
      tmp1.u = subsec->addr_size;
   25368:	0584e683          	lwu	a3,88(s1)
  size_type size() const { return end - base; }
   2536c:	0b013903          	ld	s2,176(sp)
   25370:	0a813783          	ld	a5,168(sp)
   25374:	40f907b3          	sub	a5,s2,a5
      CHECKN(2);
   25378:	30fdf4e3          	bgeu	s11,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp2.u = stack.back();
   2537c:	ff893583          	ld	a1,-8(s2)
    end--;
   25380:	ff890793          	addi	a5,s2,-8
   25384:	0af13823          	sd	a5,176(sp)
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   25388:	000b3783          	ld	a5,0(s6)
   2538c:	0207b783          	ld	a5,32(a5)
   25390:	0006869b          	addiw	a3,a3,0
   25394:	ff093603          	ld	a2,-16(s2)
   25398:	000b0513          	addi	a0,s6,0
   2539c:	000780e7          	jalr	ra,0(a5)
   253a0:	0580006f          	jal	zero,253f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1718>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   253a4:	0106b783          	ld	a5,16(a3)
   253a8:	00f76663          	bltu	a4,a5,253b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16d4>
      underflow();
   253ac:	05010513          	addi	a0,sp,80
   253b0:	d9cf70ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   253b4:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   253b8:	05013703          	ld	a4,80(sp)
   253bc:	01c72703          	lw	a4,28(a4)
   253c0:	00071463          	bne	a4,zero,253c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16e8>
   253c4:	7f50006f          	jal	zero,263b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26d8>
        val = (val << 8) | (uint64_t)p[i];
   253c8:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   253cc:	7f10006f          	jal	zero,263bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26dc>
   253d0:	0001d797          	auipc	a5,0x1d
   253d4:	f807b783          	ld	a5,-128(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   253d8:	01078793          	addi	a5,a5,16
   253dc:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   253e0:	0001d617          	auipc	a2,0x1d
   253e4:	0c863603          	ld	a2,200(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   253e8:	0001d597          	auipc	a1,0x1d
   253ec:	1385b583          	ld	a1,312(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   253f0:	00090513          	addi	a0,s2,0
   253f4:	accf10ef          	jal	ra,166c0 <__cxa_throw@plt>
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   253f8:	fea93823          	sd	a0,-16(s2)
      break;
   253fc:	f49ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error("DW_OP_push_object_address not implemented");
   25400:	01000513          	addi	a0,zero,16
   25404:	81cf10ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25408:	00050913          	addi	s2,a0,0
   2540c:	00012597          	auipc	a1,0x12
   25410:	f1458593          	addi	a1,a1,-236 # 37320 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x340>
   25414:	fddf00ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   25418:	0001d617          	auipc	a2,0x1d
   2541c:	ff063603          	ld	a2,-16(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25420:	0001d597          	auipc	a1,0x1d
   25424:	1d85b583          	ld	a1,472(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25428:	00090513          	addi	a0,s2,0
   2542c:	a94f10ef          	jal	ra,166c0 <__cxa_throw@plt>
  bool empty() const { return base == end; }
   25430:	0b013903          	ld	s2,176(sp)
      CHECK();
   25434:	0a813783          	ld	a5,168(sp)
   25438:	252784e3          	beq	a5,s2,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ctx->form_tls_address(stack.back());
   2543c:	000b3783          	ld	a5,0(s6)
   25440:	0287b783          	ld	a5,40(a5)
   25444:	ff893583          	ld	a1,-8(s2)
   25448:	000b0513          	addi	a0,s6,0
   2544c:	000780e7          	jalr	ra,0(a5)
   25450:	fea93c23          	sd	a0,-8(s2)
      break;
   25454:	ef1ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   25458:	01000513          	addi	a0,zero,16
   2545c:	fc5f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25460:	00050913          	addi	s2,a0,0
   25464:	00012597          	auipc	a1,0x12
   25468:	eec58593          	addi	a1,a1,-276 # 37350 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x370>
   2546c:	f85f00ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   25470:	0001d617          	auipc	a2,0x1d
   25474:	f9863603          	ld	a2,-104(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25478:	0001d597          	auipc	a1,0x1d
   2547c:	1805b583          	ld	a1,384(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25480:	00090513          	addi	a0,s2,0
   25484:	a3cf10ef          	jal	ra,166c0 <__cxa_throw@plt>
   25488:	0b013703          	ld	a4,176(sp)
      CHECK();
   2548c:	0a813783          	ld	a5,168(sp)
   25490:	1ef708e3          	beq	a4,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      if (tmp1.s < 0)
   25494:	ff873783          	ld	a5,-8(a4)
   25498:	43f7d693          	srai	a3,a5,0x3f
   2549c:	00d7c7b3          	xor	a5,a5,a3
   254a0:	40d787b3          	sub	a5,a5,a3
      stack.back() = tmp1.u;
   254a4:	fef73c23          	sd	a5,-8(a4)
      break;
   254a8:	e9dff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   254ac:	0b013783          	ld	a5,176(sp)
   254b0:	0a813703          	ld	a4,168(sp)
   254b4:	40e78733          	sub	a4,a5,a4
      UBINOP(&);
   254b8:	00800693          	addi	a3,zero,8
   254bc:	1ce6f2e3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   254c0:	ff87b683          	ld	a3,-8(a5)
    end--;
   254c4:	ff878713          	addi	a4,a5,-8
   254c8:	0ae13823          	sd	a4,176(sp)
   254cc:	ff07b703          	ld	a4,-16(a5)
   254d0:	00d77733          	and	a4,a4,a3
   254d4:	fee7b823          	sd	a4,-16(a5)
      break;
   254d8:	e6dff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   254dc:	0b013783          	ld	a5,176(sp)
   254e0:	0a813703          	ld	a4,168(sp)
   254e4:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   254e8:	00800693          	addi	a3,zero,8
   254ec:	18e6fae3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   254f0:	ff87b703          	ld	a4,-8(a5)
    end--;
   254f4:	ff878693          	addi	a3,a5,-8
   254f8:	0ad13823          	sd	a3,176(sp)
      tmp3.s = tmp1.s / tmp2.s;
   254fc:	ff07b683          	ld	a3,-16(a5)
   25500:	02d74733          	div	a4,a4,a3
      stack.back() = tmp3.u;
   25504:	fee7b823          	sd	a4,-16(a5)
      break;
   25508:	e3dff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2550c:	0b013783          	ld	a5,176(sp)
   25510:	0a813703          	ld	a4,168(sp)
   25514:	40e78733          	sub	a4,a5,a4
      UBINOP(-);
   25518:	00800693          	addi	a3,zero,8
   2551c:	16e6f2e3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25520:	ff87b683          	ld	a3,-8(a5)
    end--;
   25524:	ff878713          	addi	a4,a5,-8
   25528:	0ae13823          	sd	a4,176(sp)
   2552c:	ff07b703          	ld	a4,-16(a5)
   25530:	40d70733          	sub	a4,a4,a3
   25534:	fee7b823          	sd	a4,-16(a5)
      break;
   25538:	e0dff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2553c:	0b013783          	ld	a5,176(sp)
   25540:	0a813703          	ld	a4,168(sp)
   25544:	40e78733          	sub	a4,a5,a4
      UBINOP(%);
   25548:	00800693          	addi	a3,zero,8
   2554c:	12e6fae3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25550:	ff87b683          	ld	a3,-8(a5)
    end--;
   25554:	ff878713          	addi	a4,a5,-8
   25558:	0ae13823          	sd	a4,176(sp)
   2555c:	ff07b703          	ld	a4,-16(a5)
   25560:	02d77733          	remu	a4,a4,a3
   25564:	fee7b823          	sd	a4,-16(a5)
      break;
   25568:	dddff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   2556c:	0b013783          	ld	a5,176(sp)
   25570:	0a813703          	ld	a4,168(sp)
   25574:	40e78733          	sub	a4,a5,a4
      UBINOP(*);
   25578:	00800693          	addi	a3,zero,8
   2557c:	10e6f2e3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25580:	ff87b683          	ld	a3,-8(a5)
    end--;
   25584:	ff878713          	addi	a4,a5,-8
   25588:	0ae13823          	sd	a4,176(sp)
   2558c:	ff07b703          	ld	a4,-16(a5)
   25590:	02d70733          	mul	a4,a4,a3
   25594:	fee7b823          	sd	a4,-16(a5)
      break;
   25598:	dadff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  bool empty() const { return base == end; }
   2559c:	0b013783          	ld	a5,176(sp)
      CHECK();
   255a0:	0a813703          	ld	a4,168(sp)
   255a4:	0cf70ee3          	beq	a4,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.s = -tmp1.s;
   255a8:	ff87b703          	ld	a4,-8(a5)
   255ac:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp1.u;
   255b0:	fee7bc23          	sd	a4,-8(a5)
      break;
   255b4:	d91ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
   255b8:	0b013783          	ld	a5,176(sp)
      CHECK();
   255bc:	0a813703          	ld	a4,168(sp)
   255c0:	0cf700e3          	beq	a4,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() = ~stack.back();
   255c4:	ff87b703          	ld	a4,-8(a5)
   255c8:	fff74713          	xori	a4,a4,-1
   255cc:	fee7bc23          	sd	a4,-8(a5)
      break;
   255d0:	d75ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   255d4:	0b013783          	ld	a5,176(sp)
   255d8:	0a813703          	ld	a4,168(sp)
   255dc:	40e78733          	sub	a4,a5,a4
      UBINOP(|);
   255e0:	00800693          	addi	a3,zero,8
   255e4:	08e6fee3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   255e8:	ff87b683          	ld	a3,-8(a5)
    end--;
   255ec:	ff878713          	addi	a4,a5,-8
   255f0:	0ae13823          	sd	a4,176(sp)
   255f4:	ff07b703          	ld	a4,-16(a5)
   255f8:	00d76733          	or	a4,a4,a3
   255fc:	fee7b823          	sd	a4,-16(a5)
      break;
   25600:	d45ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25604:	0b013783          	ld	a5,176(sp)
   25608:	0a813703          	ld	a4,168(sp)
   2560c:	40e78733          	sub	a4,a5,a4
      UBINOP(+);
   25610:	00800693          	addi	a3,zero,8
   25614:	06e6f6e3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25618:	ff87b683          	ld	a3,-8(a5)
    end--;
   2561c:	ff878713          	addi	a4,a5,-8
   25620:	0ae13823          	sd	a4,176(sp)
   25624:	ff07b703          	ld	a4,-16(a5)
   25628:	00d70733          	add	a4,a4,a3
   2562c:	fee7b823          	sd	a4,-16(a5)
      break;
   25630:	d15ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    return 0;
   25634:	00000513          	addi	a0,zero,0
  bool empty() const { return base == end; }
   25638:	0b013783          	ld	a5,176(sp)
      CHECK();
   2563c:	0a813703          	ld	a4,168(sp)
   25640:	04f700e3          	beq	a4,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      stack.back() += tmp1.u;
   25644:	ff87b703          	ld	a4,-8(a5)
   25648:	00a70733          	add	a4,a4,a0
   2564c:	fee7bc23          	sd	a4,-8(a5)
      break;
   25650:	cf5ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25654:	0b013783          	ld	a5,176(sp)
   25658:	0a813703          	ld	a4,168(sp)
   2565c:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   25660:	00800693          	addi	a3,zero,8
   25664:	00e6fee3          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   25668:	ff87b683          	ld	a3,-8(a5)
    end--;
   2566c:	ff878713          	addi	a4,a5,-8
   25670:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   25674:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   25678:	03f00613          	addi	a2,zero,63
   2567c:	00d66863          	bltu	a2,a3,2568c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ac>
        stack.back() = tmp2.u << tmp1.u;
   25680:	00d71733          	sll	a4,a4,a3
   25684:	fee7b823          	sd	a4,-16(a5)
   25688:	cbdff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        stack.back() = 0;
   2568c:	fe07b823          	sd	zero,-16(a5)
   25690:	cb5ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25694:	0b013783          	ld	a5,176(sp)
   25698:	0a813703          	ld	a4,168(sp)
   2569c:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   256a0:	00800693          	addi	a3,zero,8
   256a4:	7ce6fe63          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   256a8:	ff87b683          	ld	a3,-8(a5)
    end--;
   256ac:	ff878713          	addi	a4,a5,-8
   256b0:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   256b4:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   256b8:	03f00613          	addi	a2,zero,63
   256bc:	00d66863          	bltu	a2,a3,256cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ec>
        stack.back() = tmp2.u >> tmp1.u;
   256c0:	00d75733          	srl	a4,a4,a3
   256c4:	fee7b823          	sd	a4,-16(a5)
   256c8:	c7dff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        stack.back() = 0;
   256cc:	fe07b823          	sd	zero,-16(a5)
   256d0:	c75ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   256d4:	0b013783          	ld	a5,176(sp)
   256d8:	0a813703          	ld	a4,168(sp)
   256dc:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   256e0:	00800693          	addi	a3,zero,8
   256e4:	78e6fe63          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp1.u = stack.back();
   256e8:	ff87b603          	ld	a2,-8(a5)
    end--;
   256ec:	ff878713          	addi	a4,a5,-8
   256f0:	0ae13823          	sd	a4,176(sp)
      tmp2.u = stack.back();
   256f4:	ff07b683          	ld	a3,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   256f8:	03f00593          	addi	a1,zero,63
        tmp2.u = 0;
   256fc:	00000713          	addi	a4,zero,0
      if (tmp1.u < sizeof(tmp2.u) * 8)
   25700:	00c5ea63          	bltu	a1,a2,25714 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a34>
      if (tmp3.u)
   25704:	43f6d593          	srai	a1,a3,0x3f
   25708:	00d5c733          	xor	a4,a1,a3
   2570c:	40b70733          	sub	a4,a4,a1
        tmp2.u >>= tmp1.u;
   25710:	00c75733          	srl	a4,a4,a2
      if (tmp3.u)
   25714:	0006d463          	bge	a3,zero,2571c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a3c>
        tmp2.s = -tmp2.s;
   25718:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp2.u;
   2571c:	fee7b823          	sd	a4,-16(a5)
      break;
   25720:	c25ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25724:	0b013783          	ld	a5,176(sp)
   25728:	0a813703          	ld	a4,168(sp)
   2572c:	40e78733          	sub	a4,a5,a4
      UBINOP(^);
   25730:	00800693          	addi	a3,zero,8
   25734:	74e6f663          	bgeu	a3,a4,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25738:	ff87b683          	ld	a3,-8(a5)
    end--;
   2573c:	ff878713          	addi	a4,a5,-8
   25740:	0ae13823          	sd	a4,176(sp)
   25744:	ff07b703          	ld	a4,-16(a5)
   25748:	00d74733          	xor	a4,a4,a3
   2574c:	fee7b823          	sd	a4,-16(a5)
      break;
   25750:	bf5ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25754:	0b013703          	ld	a4,176(sp)
   25758:	0a813783          	ld	a5,168(sp)
   2575c:	40f707b3          	sub	a5,a4,a5
      SRELOP(<=);
   25760:	00800693          	addi	a3,zero,8
   25764:	70f6fe63          	bgeu	a3,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25768:	ff873783          	ld	a5,-8(a4)
    end--;
   2576c:	ff870693          	addi	a3,a4,-8
   25770:	0ad13823          	sd	a3,176(sp)
   25774:	ff073683          	ld	a3,-16(a4)
   25778:	00d7a7b3          	slt	a5,a5,a3
   2577c:	0017c793          	xori	a5,a5,1
   25780:	02079793          	slli	a5,a5,0x20
   25784:	0207d793          	srli	a5,a5,0x20
   25788:	fef73823          	sd	a5,-16(a4)
      break;
   2578c:	bb9ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25790:	0b013703          	ld	a4,176(sp)
   25794:	0a813783          	ld	a5,168(sp)
   25798:	40f707b3          	sub	a5,a4,a5
      SRELOP(>=);
   2579c:	00800693          	addi	a3,zero,8
   257a0:	6ef6f063          	bgeu	a3,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   257a4:	ff873783          	ld	a5,-8(a4)
    end--;
   257a8:	ff870693          	addi	a3,a4,-8
   257ac:	0ad13823          	sd	a3,176(sp)
   257b0:	ff073683          	ld	a3,-16(a4)
   257b4:	00d7a7b3          	slt	a5,a5,a3
   257b8:	0017c793          	xori	a5,a5,1
   257bc:	02079793          	slli	a5,a5,0x20
   257c0:	0207d793          	srli	a5,a5,0x20
   257c4:	fef73823          	sd	a5,-16(a4)
      break;
   257c8:	b7dff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   257cc:	0b013703          	ld	a4,176(sp)
   257d0:	0a813783          	ld	a5,168(sp)
   257d4:	40f707b3          	sub	a5,a4,a5
      SRELOP(==);
   257d8:	00800693          	addi	a3,zero,8
   257dc:	6af6f263          	bgeu	a3,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   257e0:	ff873783          	ld	a5,-8(a4)
    end--;
   257e4:	ff870693          	addi	a3,a4,-8
   257e8:	0ad13823          	sd	a3,176(sp)
   257ec:	ff073683          	ld	a3,-16(a4)
   257f0:	00d7a7b3          	slt	a5,a5,a3
   257f4:	0017c793          	xori	a5,a5,1
   257f8:	02079793          	slli	a5,a5,0x20
   257fc:	0207d793          	srli	a5,a5,0x20
   25800:	fef73823          	sd	a5,-16(a4)
      break;
   25804:	b41ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25808:	0b013703          	ld	a4,176(sp)
   2580c:	0a813783          	ld	a5,168(sp)
   25810:	40f707b3          	sub	a5,a4,a5
      SRELOP(<);
   25814:	00800693          	addi	a3,zero,8
   25818:	66f6f463          	bgeu	a3,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   2581c:	ff873783          	ld	a5,-8(a4)
    end--;
   25820:	ff870693          	addi	a3,a4,-8
   25824:	0ad13823          	sd	a3,176(sp)
   25828:	ff073683          	ld	a3,-16(a4)
   2582c:	00d7a7b3          	slt	a5,a5,a3
   25830:	0017c793          	xori	a5,a5,1
   25834:	02079793          	slli	a5,a5,0x20
   25838:	0207d793          	srli	a5,a5,0x20
   2583c:	fef73823          	sd	a5,-16(a4)
      break;
   25840:	b05ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25844:	0b013703          	ld	a4,176(sp)
   25848:	0a813783          	ld	a5,168(sp)
   2584c:	40f707b3          	sub	a5,a4,a5
      SRELOP(>);
   25850:	00800693          	addi	a3,zero,8
   25854:	62f6f663          	bgeu	a3,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25858:	ff873783          	ld	a5,-8(a4)
    end--;
   2585c:	ff870693          	addi	a3,a4,-8
   25860:	0ad13823          	sd	a3,176(sp)
   25864:	ff073683          	ld	a3,-16(a4)
   25868:	00d7a7b3          	slt	a5,a5,a3
   2586c:	0017c793          	xori	a5,a5,1
   25870:	02079793          	slli	a5,a5,0x20
   25874:	0207d793          	srli	a5,a5,0x20
   25878:	fef73823          	sd	a5,-16(a4)
      break;
   2587c:	ac9ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  size_type size() const { return end - base; }
   25880:	0b013703          	ld	a4,176(sp)
   25884:	0a813783          	ld	a5,168(sp)
   25888:	40f707b3          	sub	a5,a4,a5
      SRELOP(!=);
   2588c:	00800693          	addi	a3,zero,8
   25890:	5ef6f863          	bgeu	a3,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
   25894:	ff873783          	ld	a5,-8(a4)
    end--;
   25898:	ff870693          	addi	a3,a4,-8
   2589c:	0ad13823          	sd	a3,176(sp)
   258a0:	ff073683          	ld	a3,-16(a4)
   258a4:	00d7a7b3          	slt	a5,a5,a3
   258a8:	0017c793          	xori	a5,a5,1
   258ac:	02079793          	slli	a5,a5,0x20
   258b0:	0207d793          	srli	a5,a5,0x20
   258b4:	fef73823          	sd	a5,-16(a4)
      break;
   258b8:	a8dff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   258bc:	0106b783          	ld	a5,16(a3)
   258c0:	40e78633          	sub	a2,a5,a4
   258c4:	00100693          	addi	a3,zero,1
   258c8:	00c6f463          	bgeu	a3,a2,258d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1bf0>
   258cc:	00f76663          	bltu	a4,a5,258d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1bf8>
      underflow();
   258d0:	05010513          	addi	a0,sp,80
   258d4:	878f70ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   258d8:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   258dc:	05013703          	ld	a4,80(sp)
   258e0:	01c72703          	lw	a4,28(a4)
   258e4:	10071063          	bne	a4,zero,259e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d04>
        val |= ((uint64_t)p[i]) << (i * 8);
   258e8:	0017c903          	lbu	s2,1(a5)
   258ec:	00891913          	slli	s2,s2,0x8
   258f0:	0007c703          	lbu	a4,0(a5)
   258f4:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   258f8:	00278793          	addi	a5,a5,2
   258fc:	06f13023          	sd	a5,96(sp)
      tmp1.s = cur.fixed<int16_t>();
   25900:	0109191b          	slliw	s2,s2,0x10
   25904:	4109591b          	sraiw	s2,s2,0x10
    if (__is_single_threaded())
   25908:	000d4783          	lbu	a5,0(s10)
   2590c:	16078663          	beq	a5,zero,25a78 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d98>
  { *__mem += __val; }
   25910:	0304a783          	lw	a5,48(s1)
   25914:	0017879b          	addiw	a5,a5,1
   25918:	02f4a823          	sw	a5,48(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   2591c:	05013783          	ld	a5,80(sp)
   25920:	0087b703          	ld	a4,8(a5)
   25924:	06013783          	ld	a5,96(sp)
   25928:	40e787b3          	sub	a5,a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   2592c:	01278933          	add	s2,a5,s2
   25930:	0304a783          	lw	a5,48(s1)
   25934:	0017879b          	addiw	a5,a5,1
   25938:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   2593c:	0404b783          	ld	a5,64(s1)
   25940:	01278933          	add	s2,a5,s2
   25944:	05813823          	sd	s8,80(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   25948:	05813a03          	ld	s4,88(sp)
	__r._M_pi = _M_pi;
   2594c:	04913c23          	sd	s1,88(sp)
	if (_M_pi != nullptr)
   25950:	020a0463          	beq	s4,zero,25978 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
    if (__is_single_threaded())
   25954:	0001d797          	auipc	a5,0x1d
   25958:	b2c7b783          	ld	a5,-1236(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2595c:	0007c783          	lbu	a5,0(a5)
   25960:	14078c63          	beq	a5,zero,25ab8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1dd8>
    _Atomic_word __result = *__mem;
   25964:	030a2503          	lw	a0,48(s4)
    *__mem += __val;
   25968:	fff5079b          	addiw	a5,a0,-1
   2596c:	02fa2823          	sw	a5,48(s4)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   25970:	00100793          	addi	a5,zero,1
   25974:	14f50a63          	beq	a0,a5,25ac8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1de8>
struct cursor {
   25978:	07213023          	sd	s2,96(sp)
    if (__is_single_threaded())
   2597c:	000d4783          	lbu	a5,0(s10)
   25980:	1a078463          	beq	a5,zero,25b28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e48>
    _Atomic_word __result = *__mem;
   25984:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   25988:	fff5079b          	addiw	a5,a0,-1
   2598c:	02f4a823          	sw	a5,48(s1)
   25990:	00100793          	addi	a5,zero,1
   25994:	9af518e3          	bne	a0,a5,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
	_M_dispose();
   25998:	0004b783          	ld	a5,0(s1)
   2599c:	0107b783          	ld	a5,16(a5)
   259a0:	00048513          	addi	a0,s1,0
   259a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   259a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   259ac:	0001d797          	auipc	a5,0x1d
   259b0:	ad47b783          	ld	a5,-1324(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   259b4:	0007c783          	lbu	a5,0(a5)
   259b8:	18078063          	beq	a5,zero,25b38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e58>
    _Atomic_word __result = *__mem;
   259bc:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   259c0:	fff7871b          	addiw	a4,a5,-1
   259c4:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   259c8:	00100713          	addi	a4,zero,1
   259cc:	96e79ce3          	bne	a5,a4,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
	    _M_destroy();
   259d0:	0004b783          	ld	a5,0(s1)
   259d4:	0187b783          	ld	a5,24(a5)
   259d8:	00048513          	addi	a0,s1,0
   259dc:	000780e7          	jalr	ra,0(a5)
   259e0:	965ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
        val = (val << 8) | (uint64_t)p[i];
   259e4:	0007c903          	lbu	s2,0(a5)
   259e8:	00891913          	slli	s2,s2,0x8
   259ec:	0017c703          	lbu	a4,1(a5)
   259f0:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   259f4:	f05ff06f          	jal	zero,258f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c18>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   259f8:	0106b783          	ld	a5,16(a3)
   259fc:	40e78633          	sub	a2,a5,a4
   25a00:	00100693          	addi	a3,zero,1
   25a04:	00c6f463          	bgeu	a3,a2,25a0c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d2c>
   25a08:	00f76663          	bltu	a4,a5,25a14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d34>
      underflow();
   25a0c:	05010513          	addi	a0,sp,80
   25a10:	f3df60ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   25a14:	06013783          	ld	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   25a18:	05013703          	ld	a4,80(sp)
   25a1c:	01c72703          	lw	a4,28(a4)
   25a20:	04071263          	bne	a4,zero,25a64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d84>
        val |= ((uint64_t)p[i]) << (i * 8);
   25a24:	0017c903          	lbu	s2,1(a5)
   25a28:	00891913          	slli	s2,s2,0x8
   25a2c:	0007c703          	lbu	a4,0(a5)
   25a30:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   25a34:	00278793          	addi	a5,a5,2
   25a38:	06f13023          	sd	a5,96(sp)
  bool empty() const { return base == end; }
   25a3c:	0b013783          	ld	a5,176(sp)
      CHECK();
   25a40:	0a813703          	ld	a4,168(sp)
   25a44:	42f70e63          	beq	a4,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      tmp2.u = stack.back();
   25a48:	ff87b703          	ld	a4,-8(a5)
    end--;
   25a4c:	ff878793          	addi	a5,a5,-8
   25a50:	0af13823          	sd	a5,176(sp)
      if (tmp2.u == 0)
   25a54:	8e0708e3          	beq	a4,zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      tmp1.s = cur.fixed<int16_t>();
   25a58:	0109191b          	slliw	s2,s2,0x10
   25a5c:	4109591b          	sraiw	s2,s2,0x10
   25a60:	ea9ff06f          	jal	zero,25908 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c28>
        val = (val << 8) | (uint64_t)p[i];
   25a64:	0007c903          	lbu	s2,0(a5)
   25a68:	00891913          	slli	s2,s2,0x8
   25a6c:	0017c703          	lbu	a4,1(a5)
   25a70:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   25a74:	fc1ff06f          	jal	zero,25a34 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1d54>
      __atomic_add(__mem, __val);
   25a78:	00100593          	addi	a1,zero,1
   25a7c:	03048513          	addi	a0,s1,48
   25a80:	8d1f00ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
  section_offset get_section_offset() const { return pos - sec->begin; }
   25a84:	05013783          	ld	a5,80(sp)
   25a88:	0087b703          	ld	a4,8(a5)
   25a8c:	06013783          	ld	a5,96(sp)
   25a90:	40e787b3          	sub	a5,a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   25a94:	01278933          	add	s2,a5,s2
    if (__is_single_threaded())
   25a98:	0001d797          	auipc	a5,0x1d
   25a9c:	9e87b783          	ld	a5,-1560(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25aa0:	0007c783          	lbu	a5,0(a5)
   25aa4:	e80796e3          	bne	a5,zero,25930 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c50>
      __atomic_add(__mem, __val);
   25aa8:	00100593          	addi	a1,zero,1
   25aac:	03048513          	addi	a0,s1,48
   25ab0:	8a1f00ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   25ab4:	e89ff06f          	jal	zero,2593c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c5c>
      return __exchange_and_add(__mem, __val);
   25ab8:	fff00593          	addi	a1,zero,-1
   25abc:	030a0513          	addi	a0,s4,48
   25ac0:	8c1f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25ac4:	eadff06f          	jal	zero,25970 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c90>
	_M_dispose();
   25ac8:	000a3783          	ld	a5,0(s4)
   25acc:	0107b783          	ld	a5,16(a5)
   25ad0:	000a0513          	addi	a0,s4,0
   25ad4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   25ad8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   25adc:	0001d797          	auipc	a5,0x1d
   25ae0:	9a47b783          	ld	a5,-1628(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25ae4:	0007c783          	lbu	a5,0(a5)
   25ae8:	02078663          	beq	a5,zero,25b14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e34>
    _Atomic_word __result = *__mem;
   25aec:	034a2783          	lw	a5,52(s4)
    *__mem += __val;
   25af0:	fff7871b          	addiw	a4,a5,-1
   25af4:	02ea2a23          	sw	a4,52(s4)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   25af8:	00100713          	addi	a4,zero,1
   25afc:	e6e79ee3          	bne	a5,a4,25978 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
	    _M_destroy();
   25b00:	000a3783          	ld	a5,0(s4)
   25b04:	0187b783          	ld	a5,24(a5)
   25b08:	000a0513          	addi	a0,s4,0
   25b0c:	000780e7          	jalr	ra,0(a5)
   25b10:	e69ff06f          	jal	zero,25978 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1c98>
      return __exchange_and_add(__mem, __val);
   25b14:	fff00593          	addi	a1,zero,-1
   25b18:	034a0513          	addi	a0,s4,52
   25b1c:	865f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25b20:	00050793          	addi	a5,a0,0
   25b24:	fd5ff06f          	jal	zero,25af8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e18>
   25b28:	fff00593          	addi	a1,zero,-1
   25b2c:	03048513          	addi	a0,s1,48
   25b30:	851f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25b34:	e5dff06f          	jal	zero,25990 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1cb0>
   25b38:	fff00593          	addi	a1,zero,-1
   25b3c:	03448513          	addi	a0,s1,52
   25b40:	841f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25b44:	00050793          	addi	a5,a0,0
   25b48:	e81ff06f          	jal	zero,259c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ce8>
      throw runtime_error(to_string(op) + " not implemented");
   25b4c:	01000513          	addi	a0,zero,16
   25b50:	8d1f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25b54:	00050993          	addi	s3,a0,0
   25b58:	00090593          	addi	a1,s2,0
   25b5c:	01010513          	addi	a0,sp,16
   25b60:	5cd0a0ef          	jal	ra,3092c <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   25b64:	00012597          	auipc	a1,0x12
   25b68:	81458593          	addi	a1,a1,-2028 # 37378 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   25b6c:	01010513          	addi	a0,sp,16
   25b70:	c31f00ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25b74:	00050593          	addi	a1,a0,0
   25b78:	03010413          	addi	s0,sp,48
   25b7c:	00040513          	addi	a0,s0,0
   25b80:	8f1f00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   25b84:	00040593          	addi	a1,s0,0
   25b88:	00098513          	addi	a0,s3,0
   25b8c:	af5f00ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   25b90:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25b94:	04010793          	addi	a5,sp,64
   25b98:	00f50463          	beq	a0,a5,25ba0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ec0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25b9c:	975f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25ba0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   25ba4:	02010793          	addi	a5,sp,32
   25ba8:	00f50463          	beq	a0,a5,25bb0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ed0>
   25bac:	965f00ef          	jal	ra,16510 <operator delete(void*)@plt>
   25bb0:	0001d617          	auipc	a2,0x1d
   25bb4:	85863603          	ld	a2,-1960(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25bb8:	0001d597          	auipc	a1,0x1d
   25bbc:	a405b583          	ld	a1,-1472(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25bc0:	00098513          	addi	a0,s3,0
   25bc4:	afdf00ef          	jal	ra,166c0 <__cxa_throw@plt>
      result.location_type = expr_result::type::reg;
   25bc8:	00100793          	addi	a5,zero,1
   25bcc:	00faa023          	sw	a5,0(s5)
      result.value = (unsigned)op - (unsigned)DW_OP::reg0;
   25bd0:	fb09079b          	addiw	a5,s2,-80
   25bd4:	02079793          	slli	a5,a5,0x20
   25bd8:	0207d793          	srli	a5,a5,0x20
   25bdc:	00fab423          	sd	a5,8(s5)
      break;
   25be0:	f64ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      result.location_type = expr_result::type::reg;
   25be4:	00100793          	addi	a5,zero,1
   25be8:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   25bec:	0106b783          	ld	a5,16(a3)
   25bf0:	02f77e63          	bgeu	a4,a5,25c2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f4c>
    std::uint64_t result = 0;
   25bf4:	00000513          	addi	a0,zero,0
    int shift = 0;
   25bf8:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   25bfc:	00170713          	addi	a4,a4,1
   25c00:	06e13023          	sd	a4,96(sp)
   25c04:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   25c08:	07f7f613          	andi	a2,a5,127
   25c0c:	00b61633          	sll	a2,a2,a1
   25c10:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   25c14:	0187979b          	slliw	a5,a5,0x18
   25c18:	4187d79b          	sraiw	a5,a5,0x18
   25c1c:	0007de63          	bge	a5,zero,25c38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f58>
      shift += 7;
   25c20:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   25c24:	0106b783          	ld	a5,16(a3)
   25c28:	fcf76ae3          	bltu	a4,a5,25bfc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f1c>
    underflow();
   25c2c:	05010513          	addi	a0,sp,80
   25c30:	d1df60ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   25c34:	00000513          	addi	a0,zero,0
      result.value = cur.uleb128();
   25c38:	00aab423          	sd	a0,8(s5)
      break;
   25c3c:	f08ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      result.location_type = expr_result::type::implicit;
   25c40:	00300793          	addi	a5,zero,3
   25c44:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   25c48:	0106b783          	ld	a5,16(a3)
   25c4c:	02f77e63          	bgeu	a4,a5,25c88 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fa8>
    std::uint64_t result = 0;
   25c50:	00000513          	addi	a0,zero,0
    int shift = 0;
   25c54:	00000593          	addi	a1,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   25c58:	00170713          	addi	a4,a4,1
   25c5c:	06e13023          	sd	a4,96(sp)
   25c60:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   25c64:	07f7f613          	andi	a2,a5,127
   25c68:	00b61633          	sll	a2,a2,a1
   25c6c:	00c56533          	or	a0,a0,a2
      if ((byte & 0x80) == 0)
   25c70:	0187979b          	slliw	a5,a5,0x18
   25c74:	4187d79b          	sraiw	a5,a5,0x18
   25c78:	0007de63          	bge	a5,zero,25c94 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fb4>
      shift += 7;
   25c7c:	0075859b          	addiw	a1,a1,7
    while (pos < sec->end) {
   25c80:	0106b783          	ld	a5,16(a3)
   25c84:	fcf76ae3          	bltu	a4,a5,25c58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1f78>
    underflow();
   25c88:	05010513          	addi	a0,sp,80
   25c8c:	cc1f60ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   25c90:	00000513          	addi	a0,zero,0
      result.implicit_len = cur.uleb128();
   25c94:	00aabc23          	sd	a0,24(s5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   25c98:	05013783          	ld	a5,80(sp)
   25c9c:	0107b703          	ld	a4,16(a5)
   25ca0:	06013783          	ld	a5,96(sp)
   25ca4:	40f706b3          	sub	a3,a4,a5
   25ca8:	00a6e463          	bltu	a3,a0,25cb0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fd0>
   25cac:	00e7e663          	bltu	a5,a4,25cb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1fd8>
      underflow();
   25cb0:	05010513          	addi	a0,sp,80
   25cb4:	c99f60ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
      result.implicit = cur.pos;
   25cb8:	06013783          	ld	a5,96(sp)
   25cbc:	00fab823          	sd	a5,16(s5)
      break;
   25cc0:	e84ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
  bool empty() const { return base == end; }
   25cc4:	0b013783          	ld	a5,176(sp)
      CHECK();
   25cc8:	0a813703          	ld	a4,168(sp)
   25ccc:	1af70a63          	beq	a4,a5,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
      result.location_type = expr_result::type::literal;
   25cd0:	00200713          	addi	a4,zero,2
   25cd4:	00eaa023          	sw	a4,0(s5)
      result.value = stack.back();
   25cd8:	ff87b783          	ld	a5,-8(a5)
   25cdc:	00fab423          	sd	a5,8(s5)
      break;
   25ce0:	e64ff06f          	jal	zero,25344 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1664>
      throw runtime_error(to_string(op) + " not implemented");
   25ce4:	01000513          	addi	a0,zero,16
   25ce8:	f38f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25cec:	00050993          	addi	s3,a0,0
   25cf0:	00090593          	addi	a1,s2,0
   25cf4:	01010513          	addi	a0,sp,16
   25cf8:	4350a0ef          	jal	ra,3092c <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   25cfc:	00011597          	auipc	a1,0x11
   25d00:	67c58593          	addi	a1,a1,1660 # 37378 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   25d04:	01010513          	addi	a0,sp,16
   25d08:	a99f00ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25d0c:	00050593          	addi	a1,a0,0
   25d10:	03010413          	addi	s0,sp,48
   25d14:	00040513          	addi	a0,s0,0
   25d18:	f58f00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   25d1c:	00040593          	addi	a1,s0,0
   25d20:	00098513          	addi	a0,s3,0
   25d24:	95df00ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   25d28:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25d2c:	04010793          	addi	a5,sp,64
   25d30:	00f50463          	beq	a0,a5,25d38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2058>
   25d34:	fdcf00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d38:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   25d3c:	02010793          	addi	a5,sp,32
   25d40:	00f50463          	beq	a0,a5,25d48 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2068>
   25d44:	fccf00ef          	jal	ra,16510 <operator delete(void*)@plt>
   25d48:	0001c617          	auipc	a2,0x1c
   25d4c:	6c063603          	ld	a2,1728(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   25d50:	0001d597          	auipc	a1,0x1d
   25d54:	8a85b583          	ld	a1,-1880(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   25d58:	00098513          	addi	a0,s3,0
   25d5c:	965f00ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw expr_error("unknown user op " + to_string(op));
   25d60:	01000513          	addi	a0,zero,16
   25d64:	ebcf00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25d68:	00050993          	addi	s3,a0,0
   25d6c:	00090593          	addi	a1,s2,0
   25d70:	01010513          	addi	a0,sp,16
   25d74:	3b90a0ef          	jal	ra,3092c <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   25d78:	00011617          	auipc	a2,0x11
   25d7c:	61860613          	addi	a2,a2,1560 # 37390 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3b0>
   25d80:	00000593          	addi	a1,zero,0
   25d84:	01010513          	addi	a0,sp,16
   25d88:	e08f00ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   25d8c:	00050593          	addi	a1,a0,0
   25d90:	03010413          	addi	s0,sp,48
   25d94:	00040513          	addi	a0,s0,0
   25d98:	ed8f00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   25d9c:	00040593          	addi	a1,s0,0
   25da0:	00098513          	addi	a0,s3,0
   25da4:	ffcf00ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25da8:	0001c797          	auipc	a5,0x1c
   25dac:	5a87b783          	ld	a5,1448(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   25db0:	01078793          	addi	a5,a5,16
   25db4:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   25db8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25dbc:	04010793          	addi	a5,sp,64
   25dc0:	00f50463          	beq	a0,a5,25dc8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20e8>
   25dc4:	f4cf00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25dc8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   25dcc:	02010793          	addi	a5,sp,32
   25dd0:	00f50463          	beq	a0,a5,25dd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x20f8>
   25dd4:	f3cf00ef          	jal	ra,16510 <operator delete(void*)@plt>
   25dd8:	0001c617          	auipc	a2,0x1c
   25ddc:	6d063603          	ld	a2,1744(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   25de0:	0001c597          	auipc	a1,0x1c
   25de4:	7405b583          	ld	a1,1856(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   25de8:	00098513          	addi	a0,s3,0
   25dec:	8d5f00ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw expr_error("bad operation " + to_string(op));
   25df0:	01000513          	addi	a0,zero,16
   25df4:	e2cf00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25df8:	00050993          	addi	s3,a0,0
   25dfc:	00090593          	addi	a1,s2,0
   25e00:	01010513          	addi	a0,sp,16
   25e04:	3290a0ef          	jal	ra,3092c <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   25e08:	00011617          	auipc	a2,0x11
   25e0c:	5a060613          	addi	a2,a2,1440 # 373a8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3c8>
   25e10:	00000593          	addi	a1,zero,0
   25e14:	01010513          	addi	a0,sp,16
   25e18:	d78f00ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   25e1c:	00050593          	addi	a1,a0,0
   25e20:	03010413          	addi	s0,sp,48
   25e24:	00040513          	addi	a0,s0,0
   25e28:	e48f00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   25e2c:	00040593          	addi	a1,s0,0
   25e30:	00098513          	addi	a0,s3,0
   25e34:	f6cf00ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25e38:	0001c797          	auipc	a5,0x1c
   25e3c:	5187b783          	ld	a5,1304(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   25e40:	01078793          	addi	a5,a5,16
   25e44:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   25e48:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   25e4c:	04010793          	addi	a5,sp,64
   25e50:	00f50463          	beq	a0,a5,25e58 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2178>
   25e54:	ebcf00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25e58:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   25e5c:	02010793          	addi	a5,sp,32
   25e60:	00f50463          	beq	a0,a5,25e68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2188>
   25e64:	eacf00ef          	jal	ra,16510 <operator delete(void*)@plt>
   25e68:	0001c617          	auipc	a2,0x1c
   25e6c:	64063603          	ld	a2,1600(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   25e70:	0001c597          	auipc	a1,0x1c
   25e74:	6b05b583          	ld	a1,1712(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   25e78:	00098513          	addi	a0,s3,0
   25e7c:	845f00ef          	jal	ra,166c0 <__cxa_throw@plt>
  throw expr_error("stack underflow evaluating DWARF expression");
   25e80:	01000513          	addi	a0,zero,16
   25e84:	d9cf00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25e88:	00050913          	addi	s2,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   25e8c:	00011597          	auipc	a1,0x11
   25e90:	52c58593          	addi	a1,a1,1324 # 373b8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3d8>
   25e94:	8ddf00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   25e98:	0001c797          	auipc	a5,0x1c
   25e9c:	4b87b783          	ld	a5,1208(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   25ea0:	01078793          	addi	a5,a5,16
   25ea4:	00f93023          	sd	a5,0(s2)
   25ea8:	0001c617          	auipc	a2,0x1c
   25eac:	60063603          	ld	a2,1536(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   25eb0:	0001c597          	auipc	a1,0x1c
   25eb4:	6705b583          	ld	a1,1648(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   25eb8:	00090513          	addi	a0,s2,0
   25ebc:	805f00ef          	jal	ra,166c0 <__cxa_throw@plt>
  if (result.location_type == expr_result::type::address) {
   25ec0:	000aa783          	lw	a5,0(s5)
   25ec4:	00078463          	beq	a5,zero,25ecc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21ec>
   25ec8:	91cfe06f          	jal	zero,23fe4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x304>
   25ecc:	0b013783          	ld	a5,176(sp)
    if (stack.empty())
   25ed0:	0a813703          	ld	a4,168(sp)
   25ed4:	00f70863          	beq	a4,a5,25ee4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2204>
    result.value = stack.back();
   25ed8:	ff87b783          	ld	a5,-8(a5)
   25edc:	00fab423          	sd	a5,8(s5)
   25ee0:	904fe06f          	jal	zero,23fe4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x304>
      throw expr_error("final stack is empty; no result given");
   25ee4:	01000513          	addi	a0,zero,16
   25ee8:	d38f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25eec:	00050913          	addi	s2,a0,0
   25ef0:	00011597          	auipc	a1,0x11
   25ef4:	4f858593          	addi	a1,a1,1272 # 373e8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x408>
   25ef8:	879f00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   25efc:	0001c797          	auipc	a5,0x1c
   25f00:	4547b783          	ld	a5,1108(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   25f04:	01078793          	addi	a5,a5,16
   25f08:	00f93023          	sd	a5,0(s2)
   25f0c:	0001c617          	auipc	a2,0x1c
   25f10:	59c63603          	ld	a2,1436(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   25f14:	0001c597          	auipc	a1,0x1c
   25f18:	60c5b583          	ld	a1,1548(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   25f1c:	00090513          	addi	a0,s2,0
   25f20:	fa0f00ef          	jal	ra,166c0 <__cxa_throw@plt>
   25f24:	fff00593          	addi	a1,zero,-1
   25f28:	03040513          	addi	a0,s0,48
   25f2c:	c54f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25f30:	8dcfe06f          	jal	zero,2400c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x32c>
	_M_dispose();
   25f34:	00043783          	ld	a5,0(s0)
   25f38:	0107b783          	ld	a5,16(a5)
   25f3c:	00040513          	addi	a0,s0,0
   25f40:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   25f44:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   25f48:	0001c797          	auipc	a5,0x1c
   25f4c:	5387b783          	ld	a5,1336(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25f50:	0007c783          	lbu	a5,0(a5)
   25f54:	02078863          	beq	a5,zero,25f84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22a4>
    _Atomic_word __result = *__mem;
   25f58:	03442783          	lw	a5,52(s0)
    *__mem += __val;
   25f5c:	fff7871b          	addiw	a4,a5,-1
   25f60:	02e42a23          	sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   25f64:	00100713          	addi	a4,zero,1
   25f68:	00e78463          	beq	a5,a4,25f70 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2290>
   25f6c:	8acfe06f          	jal	zero,24018 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
	    _M_destroy();
   25f70:	00043783          	ld	a5,0(s0)
   25f74:	0187b783          	ld	a5,24(a5)
   25f78:	00040513          	addi	a0,s0,0
   25f7c:	000780e7          	jalr	ra,0(a5)
   25f80:	898fe06f          	jal	zero,24018 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x338>
      return __exchange_and_add(__mem, __val);
   25f84:	fff00593          	addi	a1,zero,-1
   25f88:	03440513          	addi	a0,s0,52
   25f8c:	bf4f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25f90:	00050793          	addi	a5,a0,0
   25f94:	fd1ff06f          	jal	zero,25f64 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2284>
   25f98:	fff00593          	addi	a1,zero,-1
   25f9c:	03048513          	addi	a0,s1,48
   25fa0:	be0f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   25fa4:	894fe06f          	jal	zero,24038 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x358>
	_M_dispose();
   25fa8:	0004b783          	ld	a5,0(s1)
   25fac:	0107b783          	ld	a5,16(a5)
   25fb0:	00048513          	addi	a0,s1,0
   25fb4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   25fb8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   25fbc:	0001c797          	auipc	a5,0x1c
   25fc0:	4c47b783          	ld	a5,1220(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   25fc4:	0007c783          	lbu	a5,0(a5)
   25fc8:	02078863          	beq	a5,zero,25ff8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2318>
    _Atomic_word __result = *__mem;
   25fcc:	0344a783          	lw	a5,52(s1)
    *__mem += __val;
   25fd0:	fff7871b          	addiw	a4,a5,-1
   25fd4:	02e4aa23          	sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   25fd8:	00100713          	addi	a4,zero,1
   25fdc:	00e78463          	beq	a5,a4,25fe4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2304>
   25fe0:	864fe06f          	jal	zero,24044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
	    _M_destroy();
   25fe4:	0004b783          	ld	a5,0(s1)
   25fe8:	0187b783          	ld	a5,24(a5)
   25fec:	00048513          	addi	a0,s1,0
   25ff0:	000780e7          	jalr	ra,0(a5)
   25ff4:	850fe06f          	jal	zero,24044 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x364>
      return __exchange_and_add(__mem, __val);
   25ff8:	fff00593          	addi	a1,zero,-1
   25ffc:	03448513          	addi	a0,s1,52
   26000:	b80f00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26004:	00050793          	addi	a5,a0,0
   26008:	fd1ff06f          	jal	zero,25fd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x22f8>
   2600c:	fff00593          	addi	a1,zero,-1
   26010:	030b8513          	addi	a0,s7,48
   26014:	b6cf00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26018:	850fe06f          	jal	zero,24068 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x388>
	_M_dispose();
   2601c:	000bb783          	ld	a5,0(s7)
   26020:	0107b783          	ld	a5,16(a5)
   26024:	000b8513          	addi	a0,s7,0
   26028:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2602c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26030:	0001c797          	auipc	a5,0x1c
   26034:	4507b783          	ld	a5,1104(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26038:	0007c783          	lbu	a5,0(a5)
   2603c:	02078863          	beq	a5,zero,2606c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x238c>
    _Atomic_word __result = *__mem;
   26040:	034ba783          	lw	a5,52(s7)
    *__mem += __val;
   26044:	fff7871b          	addiw	a4,a5,-1
   26048:	02ebaa23          	sw	a4,52(s7)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2604c:	00100713          	addi	a4,zero,1
   26050:	00e78463          	beq	a5,a4,26058 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2378>
   26054:	820fe06f          	jal	zero,24074 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
	    _M_destroy();
   26058:	000bb783          	ld	a5,0(s7)
   2605c:	0187b783          	ld	a5,24(a5)
   26060:	000b8513          	addi	a0,s7,0
   26064:	000780e7          	jalr	ra,0(a5)
   26068:	80cfe06f          	jal	zero,24074 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x394>
      return __exchange_and_add(__mem, __val);
   2606c:	fff00593          	addi	a1,zero,-1
   26070:	034b8513          	addi	a0,s7,52
   26074:	b0cf00ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26078:	00050793          	addi	a5,a0,0
   2607c:	fd1ff06f          	jal	zero,2604c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x236c>
      throw runtime_error("DW_OP_fbreg not implemented");
   26080:	00050413          	addi	s0,a0,0
   26084:	00090513          	addi	a0,s2,0
   26088:	c48f00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2608c:	05813503          	ld	a0,88(sp)
   26090:	00050863          	beq	a0,zero,260a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23c0>
	  _M_pi->_M_release();
   26094:	0001c317          	auipc	t1,0x1c
   26098:	33433303          	ld	t1,820(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   2609c:	000300e7          	jalr	ra,0(t1)
   260a0:	00048513          	addi	a0,s1,0
   260a4:	0001c317          	auipc	t1,0x1c
   260a8:	32433303          	ld	t1,804(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   260ac:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   260b0:	000b8a63          	beq	s7,zero,260c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23e4>
	  _M_pi->_M_release();
   260b4:	000b8513          	addi	a0,s7,0
   260b8:	0001c317          	auipc	t1,0x1c
   260bc:	31033303          	ld	t1,784(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   260c0:	000300e7          	jalr	ra,0(t1)
    for (T *p = base; p < end; ++p)
   260c4:	0a813503          	ld	a0,168(sp)
   260c8:	00050793          	addi	a5,a0,0
   260cc:	0b013703          	ld	a4,176(sp)
   260d0:	18e7e663          	bltu	a5,a4,2625c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x257c>
    if ((char *)base != buf)
   260d4:	06810793          	addi	a5,sp,104
   260d8:	00f50663          	beq	a0,a5,260e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2404>
      delete[] (char *)base;
   260dc:	00050463          	beq	a0,zero,260e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2404>
   260e0:	ce0f00ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   260e4:	00040513          	addi	a0,s0,0
   260e8:	e08f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   260ec:	00050413          	addi	s0,a0,0
   260f0:	00090513          	addi	a0,s2,0
   260f4:	bdcf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   260f8:	f95ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   260fc:	00050413          	addi	s0,a0,0
   26100:	00090513          	addi	a0,s2,0
   26104:	bccf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26108:	f85ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      throw runtime_error("DW_OP_push_object_address not implemented");
   2610c:	00050413          	addi	s0,a0,0
   26110:	00090513          	addi	a0,s2,0
   26114:	bbcf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26118:	f75ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   2611c:	00050413          	addi	s0,a0,0
   26120:	00090513          	addi	a0,s2,0
   26124:	bacf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26128:	f65ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   2612c:	00050413          	addi	s0,a0,0
   26130:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26134:	04010793          	addi	a5,sp,64
   26138:	00f50463          	beq	a0,a5,26140 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2460>
   2613c:	bd4f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26140:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26144:	02010793          	addi	a5,sp,32
   26148:	00f50463          	beq	a0,a5,26150 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2470>
   2614c:	bc4f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   26150:	00098513          	addi	a0,s3,0
   26154:	b7cf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26158:	f35ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   2615c:	00050413          	addi	s0,a0,0
   26160:	fe1ff06f          	jal	zero,26140 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2460>
   26164:	00050413          	addi	s0,a0,0
   26168:	fe9ff06f          	jal	zero,26150 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2470>
   2616c:	00050413          	addi	s0,a0,0
   26170:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   26174:	04010793          	addi	a5,sp,64
   26178:	00f50463          	beq	a0,a5,26180 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24a0>
   2617c:	b94f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26180:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26184:	02010793          	addi	a5,sp,32
   26188:	00f50463          	beq	a0,a5,26190 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24b0>
   2618c:	b84f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   26190:	00098513          	addi	a0,s3,0
   26194:	b3cf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26198:	ef5ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   2619c:	00050413          	addi	s0,a0,0
   261a0:	fe1ff06f          	jal	zero,26180 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24a0>
   261a4:	00050413          	addi	s0,a0,0
   261a8:	fe9ff06f          	jal	zero,26190 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24b0>
   261ac:	00050413          	addi	s0,a0,0
   261b0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   261b4:	04010793          	addi	a5,sp,64
   261b8:	00f50463          	beq	a0,a5,261c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24e0>
   261bc:	b54f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   261c0:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   261c4:	02010793          	addi	a5,sp,32
   261c8:	00f50463          	beq	a0,a5,261d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24f0>
   261cc:	b44f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw expr_error("unknown user op " + to_string(op));
   261d0:	00098513          	addi	a0,s3,0
   261d4:	afcf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   261d8:	eb5ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   261dc:	00050413          	addi	s0,a0,0
   261e0:	fe1ff06f          	jal	zero,261c0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24e0>
   261e4:	00050413          	addi	s0,a0,0
   261e8:	fe9ff06f          	jal	zero,261d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x24f0>
   261ec:	00050413          	addi	s0,a0,0
   261f0:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   261f4:	04010793          	addi	a5,sp,64
   261f8:	00f50463          	beq	a0,a5,26200 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2520>
   261fc:	b14f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   26200:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   26204:	02010793          	addi	a5,sp,32
   26208:	00f50463          	beq	a0,a5,26210 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2530>
   2620c:	b04f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw expr_error("bad operation " + to_string(op));
   26210:	00098513          	addi	a0,s3,0
   26214:	abcf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26218:	e75ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
      { return _M_dataplus._M_p; }
   2621c:	00050413          	addi	s0,a0,0
   26220:	fe1ff06f          	jal	zero,26200 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2520>
   26224:	00050413          	addi	s0,a0,0
   26228:	fe9ff06f          	jal	zero,26210 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2530>
      throw expr_error("final stack is empty; no result given");
   2622c:	00050413          	addi	s0,a0,0
   26230:	00090513          	addi	a0,s2,0
   26234:	a9cf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26238:	e55ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
  throw expr_error("stack underflow evaluating DWARF expression");
   2623c:	00050413          	addi	s0,a0,0
   26240:	00090513          	addi	a0,s2,0
   26244:	a8cf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26248:	e45ff06f          	jal	zero,2608c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ac>
	if (_M_pi != nullptr)
   2624c:	00050413          	addi	s0,a0,0
   26250:	e61ff06f          	jal	zero,260b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23d0>
    for (T *p = base; p < end; ++p)
   26254:	00050413          	addi	s0,a0,0
   26258:	e6dff06f          	jal	zero,260c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23e4>
   2625c:	00878793          	addi	a5,a5,8
   26260:	e6dff06f          	jal	zero,260cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x23ec>
        val |= ((uint64_t)p[i]) << (i * 8);
   26264:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   26268:	00178793          	addi	a5,a5,1
   2626c:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   26270:	0a813703          	ld	a4,168(sp)
   26274:	0b013783          	ld	a5,176(sp)
   26278:	40e787b3          	sub	a5,a5,a4
   2627c:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   26280:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   26284:	0b813903          	ld	s2,184(sp)
   26288:	40e90933          	sub	s2,s2,a4
   2628c:	40395913          	srai	s2,s2,0x3
   26290:	00f96463          	bltu	s2,a5,26298 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25b8>
   26294:	a00fe06f          	jal	zero,24494 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7b4>
   26298:	00091463          	bne	s2,zero,262a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c0>
   2629c:	00100913          	addi	s2,zero,1
    while (target < n)
   262a0:	00f97663          	bgeu	s2,a5,262ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25cc>
      target <<= 1;
   262a4:	00191913          	slli	s2,s2,0x1
    while (target < n)
   262a8:	fef96ee3          	bltu	s2,a5,262a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c4>
    char *newbuf = new char[sizeof(T[target])];
   262ac:	00391913          	slli	s2,s2,0x3
   262b0:	00090513          	addi	a0,s2,0
   262b4:	87cf00ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   262b8:	984fe06f          	jal	zero,2443c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x75c>
        val |= ((uint64_t)p[i]) << (i * 8);
   262bc:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   262c0:	00178793          	addi	a5,a5,1
   262c4:	06f13023          	sd	a5,96(sp)
      stack.push_back(cur.fixed<int8_t>());
   262c8:	018c9c9b          	slliw	s9,s9,0x18
   262cc:	418cdc9b          	sraiw	s9,s9,0x18
  size_type size() const { return end - base; }
   262d0:	0a813703          	ld	a4,168(sp)
   262d4:	0b013783          	ld	a5,176(sp)
   262d8:	40e787b3          	sub	a5,a5,a4
   262dc:	4037d793          	srai	a5,a5,0x3
    reserve(size() + 1);
   262e0:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   262e4:	0b813903          	ld	s2,184(sp)
   262e8:	40e90933          	sub	s2,s2,a4
   262ec:	40395913          	srai	s2,s2,0x3
   262f0:	00f96463          	bltu	s2,a5,262f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2618>
   262f4:	ddcfe06f          	jal	zero,248d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xbf0>
   262f8:	00091463          	bne	s2,zero,26300 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2620>
   262fc:	00100913          	addi	s2,zero,1
    while (target < n)
   26300:	00f97663          	bgeu	s2,a5,2630c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x262c>
      target <<= 1;
   26304:	00191913          	slli	s2,s2,0x1
    while (target < n)
   26308:	fef96ee3          	bltu	s2,a5,26304 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2624>
    char *newbuf = new char[sizeof(T[target])];
   2630c:	00391913          	slli	s2,s2,0x3
   26310:	00090513          	addi	a0,s2,0
   26314:	81cf00ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   26318:	d60fe06f          	jal	zero,24878 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb98>
        val |= ((uint64_t)p[i]) << (i * 8);
   2631c:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   26320:	00178793          	addi	a5,a5,1
   26324:	06f13023          	sd	a5,96(sp)
  size_type size() const { return end - base; }
   26328:	0b013703          	ld	a4,176(sp)
   2632c:	0a813603          	ld	a2,168(sp)
   26330:	40c707b3          	sub	a5,a4,a2
   26334:	4037d793          	srai	a5,a5,0x3
      CHECKN(tmp1.u);
   26338:	b4d7e4e3          	bltu	a5,a3,25e80 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a0>
  reference revat(size_type n) { return *(end - 1 - n); }
   2633c:	00369693          	slli	a3,a3,0x3
   26340:	40d70733          	sub	a4,a4,a3
   26344:	ff870a13          	addi	s4,a4,-8
    reserve(size() + 1);
   26348:	00178793          	addi	a5,a5,1
    if (n <= (size_type)(cap - base))
   2634c:	0b813903          	ld	s2,184(sp)
   26350:	40c90933          	sub	s2,s2,a2
   26354:	40395913          	srai	s2,s2,0x3
   26358:	00f96463          	bltu	s2,a5,26360 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2680>
   2635c:	e15fe06f          	jal	zero,25170 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1490>
   26360:	00091463          	bne	s2,zero,26368 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2688>
   26364:	00100913          	addi	s2,zero,1
    while (target < n)
   26368:	00f97663          	bgeu	s2,a5,26374 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2694>
      target <<= 1;
   2636c:	00191913          	slli	s2,s2,0x1
    while (target < n)
   26370:	fef96ee3          	bltu	s2,a5,2636c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x268c>
    char *newbuf = new char[sizeof(T[target])];
   26374:	00391913          	slli	s2,s2,0x3
   26378:	00090513          	addi	a0,s2,0
   2637c:	fb5ef0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   26380:	d99fe06f          	jal	zero,25118 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1438>
        val |= ((uint64_t)p[i]) << (i * 8);
   26384:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   26388:	00178793          	addi	a5,a5,1
   2638c:	06f13023          	sd	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   26390:	0584e783          	lwu	a5,88(s1)
   26394:	00c7e463          	bltu	a5,a2,2639c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26bc>
   26398:	f2dfe06f          	jal	zero,252c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15e4>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   2639c:	01000513          	addi	a0,zero,16
   263a0:	880f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   263a4:	00050913          	addi	s2,a0,0
   263a8:	00011597          	auipc	a1,0x11
   263ac:	f1858593          	addi	a1,a1,-232 # 372c0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2e0>
   263b0:	bc0f00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   263b4:	f65fe06f          	jal	zero,25318 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1638>
        val |= ((uint64_t)p[i]) << (i * 8);
   263b8:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   263bc:	00178793          	addi	a5,a5,1
   263c0:	06f13023          	sd	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   263c4:	0584e783          	lwu	a5,88(s1)
   263c8:	00d7e463          	bltu	a5,a3,263d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x26f0>
   263cc:	fa1fe06f          	jal	zero,2536c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x168c>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   263d0:	01000513          	addi	a0,zero,16
   263d4:	84cf00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   263d8:	00050913          	addi	s2,a0,0
   263dc:	00011597          	auipc	a1,0x11
   263e0:	f1458593          	addi	a1,a1,-236 # 372f0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x310>
   263e4:	b8cf00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   263e8:	fe9fe06f          	jal	zero,253d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16f0>
        val |= ((uint64_t)p[i]) << (i * 8);
   263ec:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   263f0:	00170713          	addi	a4,a4,1
   263f4:	06e13023          	sd	a4,96(sp)
    return (T)val;
   263f8:	0ff7f913          	andi	s2,a5,255
    switch (op) {
   263fc:	ffd7879b          	addiw	a5,a5,-3
   26400:	0ff7f613          	andi	a2,a5,255
   26404:	9ec9e6e3          	bltu	s3,a2,25df0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2110>
   26408:	00261793          	slli	a5,a2,0x2
   2640c:	008787b3          	add	a5,a5,s0
   26410:	0007a783          	lw	a5,0(a5)
   26414:	008787b3          	add	a5,a5,s0
   26418:	00078067          	jalr	zero,0(a5)

000000000002641c <dwarf::expr::evaluate(dwarf::expr_context*) const>:
expr_result expr::evaluate(expr_context *ctx) const {
   2641c:	fe010113          	addi	sp,sp,-32
   26420:	00113c23          	sd	ra,24(sp)
   26424:	00813823          	sd	s0,16(sp)
   26428:	00050413          	addi	s0,a0,0
  return evaluate(ctx, {});
   2642c:	00013023          	sd	zero,0(sp)
   26430:	00013423          	sd	zero,8(sp)
   26434:	00010693          	addi	a3,sp,0
   26438:	8a9fd0ef          	jal	ra,23ce0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   2643c:	00040513          	addi	a0,s0,0
   26440:	01813083          	ld	ra,24(sp)
   26444:	01013403          	ld	s0,16(sp)
   26448:	02010113          	addi	sp,sp,32
   2644c:	00008067          	jalr	zero,0(ra)

0000000000026450 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>:
expr_result expr::evaluate(expr_context *ctx, taddr argument) const {
   26450:	fd010113          	addi	sp,sp,-48
   26454:	02113423          	sd	ra,40(sp)
   26458:	02813023          	sd	s0,32(sp)
   2645c:	00050413          	addi	s0,a0,0
  return evaluate(ctx, {argument});
   26460:	00d13c23          	sd	a3,24(sp)
   26464:	01810793          	addi	a5,sp,24
   26468:	00f13423          	sd	a5,8(sp)
   2646c:	00100793          	addi	a5,zero,1
   26470:	00f13823          	sd	a5,16(sp)
   26474:	00810693          	addi	a3,sp,8
   26478:	869fd0ef          	jal	ra,23ce0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   2647c:	00040513          	addi	a0,s0,0
   26480:	02813083          	ld	ra,40(sp)
   26484:	02013403          	ld	s0,32(sp)
   26488:	03010113          	addi	sp,sp,48
   2648c:	00008067          	jalr	zero,0(ra)

0000000000026490 <_GLOBAL__sub_I_expr.cc>:

DWARFPP_END_NAMESPACE
   26490:	ff010113          	addi	sp,sp,-16
   26494:	00113423          	sd	ra,8(sp)
expr_context no_expr_context;
   26498:	e0818613          	addi	a2,gp,-504 # 42608 <__dso_handle>
   2649c:	0001c597          	auipc	a1,0x1c
   264a0:	e8c5b583          	ld	a1,-372(a1) # 42328 <dwarf::no_expr_context@@Base+0x318>
   264a4:	0001c517          	auipc	a0,0x1c
   264a8:	e2c53503          	ld	a0,-468(a0) # 422d0 <dwarf::expr_context::~expr_context()@@Base+0x1be14>
   264ac:	a74f00ef          	jal	ra,16720 <__cxa_atexit@plt>
DWARFPP_END_NAMESPACE
   264b0:	00813083          	ld	ra,8(sp)
   264b4:	01010113          	addi	sp,sp,16
   264b8:	00008067          	jalr	zero,0(ra)

00000000000264bc <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   264bc:	00008067          	jalr	zero,0(ra)

00000000000264c0 <dwarf::expr_error::~expr_error()>:
class expr_error : public std::runtime_error {
   264c0:	ff010113          	addi	sp,sp,-16
   264c4:	00113423          	sd	ra,8(sp)
   264c8:	0001c797          	auipc	a5,0x1c
   264cc:	e887b783          	ld	a5,-376(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   264d0:	01078793          	addi	a5,a5,16
   264d4:	00f53023          	sd	a5,0(a0)
   264d8:	868f00ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   264dc:	00813083          	ld	ra,8(sp)
   264e0:	01010113          	addi	sp,sp,16
   264e4:	00008067          	jalr	zero,0(ra)

00000000000264e8 <dwarf::expr_error::~expr_error()>:
   264e8:	ff010113          	addi	sp,sp,-16
   264ec:	00113423          	sd	ra,8(sp)
   264f0:	00813023          	sd	s0,0(sp)
   264f4:	00050413          	addi	s0,a0,0
   264f8:	0001c797          	auipc	a5,0x1c
   264fc:	e587b783          	ld	a5,-424(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   26500:	01078793          	addi	a5,a5,16
   26504:	00f53023          	sd	a5,0(a0)
   26508:	838f00ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   2650c:	00040513          	addi	a0,s0,0
   26510:	800f00ef          	jal	ra,16510 <operator delete(void*)@plt>
   26514:	00813083          	ld	ra,8(sp)
   26518:	00013403          	ld	s0,0(sp)
   2651c:	01010113          	addi	sp,sp,16
   26520:	00008067          	jalr	zero,0(ra)

0000000000026524 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   26524:	ff010113          	addi	sp,sp,-16
   26528:	00113423          	sd	ra,8(sp)
   2652c:	fe5ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
   26530:	00813083          	ld	ra,8(sp)
   26534:	01010113          	addi	sp,sp,16
   26538:	00008067          	jalr	zero,0(ra)

000000000002653c <dwarf::expr_context::form_tls_address(unsigned long)>:
  virtual taddr form_tls_address(taddr address) {
   2653c:	fe010113          	addi	sp,sp,-32
   26540:	00113c23          	sd	ra,24(sp)
   26544:	00813823          	sd	s0,16(sp)
   26548:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   2654c:	01000513          	addi	a0,zero,16
   26550:	ed1ef0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   26554:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   26558:	00011597          	auipc	a1,0x11
   2655c:	c9058593          	addi	a1,a1,-880 # 371e8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x208>
   26560:	a10f00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   26564:	0001c797          	auipc	a5,0x1c
   26568:	dec7b783          	ld	a5,-532(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   2656c:	01078793          	addi	a5,a5,16
   26570:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   26574:	0001c617          	auipc	a2,0x1c
   26578:	f3463603          	ld	a2,-204(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   2657c:	0001c597          	auipc	a1,0x1c
   26580:	fa45b583          	ld	a1,-92(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   26584:	00040513          	addi	a0,s0,0
   26588:	938f00ef          	jal	ra,166c0 <__cxa_throw@plt>
   2658c:	00050493          	addi	s1,a0,0
   26590:	00040513          	addi	a0,s0,0
   26594:	f3def0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26598:	00048513          	addi	a0,s1,0
   2659c:	954f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000265a0 <dwarf::expr_context::xderef_size(unsigned long, unsigned long, unsigned int)>:
  virtual taddr xderef_size(taddr address, taddr asid, unsigned size) {
   265a0:	fe010113          	addi	sp,sp,-32
   265a4:	00113c23          	sd	ra,24(sp)
   265a8:	00813823          	sd	s0,16(sp)
   265ac:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_xderef_size operations not supported");
   265b0:	01000513          	addi	a0,zero,16
   265b4:	e6def0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   265b8:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   265bc:	00011597          	auipc	a1,0x11
   265c0:	c5c58593          	addi	a1,a1,-932 # 37218 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x238>
   265c4:	9acf00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   265c8:	0001c797          	auipc	a5,0x1c
   265cc:	d887b783          	ld	a5,-632(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   265d0:	01078793          	addi	a5,a5,16
   265d4:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_xderef_size operations not supported");
   265d8:	0001c617          	auipc	a2,0x1c
   265dc:	ed063603          	ld	a2,-304(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   265e0:	0001c597          	auipc	a1,0x1c
   265e4:	f405b583          	ld	a1,-192(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   265e8:	00040513          	addi	a0,s0,0
   265ec:	8d4f00ef          	jal	ra,166c0 <__cxa_throw@plt>
   265f0:	00050493          	addi	s1,a0,0
   265f4:	00040513          	addi	a0,s0,0
   265f8:	ed9ef0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   265fc:	00048513          	addi	a0,s1,0
   26600:	8f0f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026604 <dwarf::expr_context::deref_size(unsigned long, unsigned int)>:
  virtual taddr deref_size(taddr address, unsigned size) {
   26604:	fe010113          	addi	sp,sp,-32
   26608:	00113c23          	sd	ra,24(sp)
   2660c:	00813823          	sd	s0,16(sp)
   26610:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_deref_size operations not supported");
   26614:	01000513          	addi	a0,zero,16
   26618:	e09ef0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2661c:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   26620:	00011597          	auipc	a1,0x11
   26624:	c2858593          	addi	a1,a1,-984 # 37248 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x268>
   26628:	948f00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2662c:	0001c797          	auipc	a5,0x1c
   26630:	d247b783          	ld	a5,-732(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   26634:	01078793          	addi	a5,a5,16
   26638:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_deref_size operations not supported");
   2663c:	0001c617          	auipc	a2,0x1c
   26640:	e6c63603          	ld	a2,-404(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   26644:	0001c597          	auipc	a1,0x1c
   26648:	edc5b583          	ld	a1,-292(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   2664c:	00040513          	addi	a0,s0,0
   26650:	870f00ef          	jal	ra,166c0 <__cxa_throw@plt>
   26654:	00050493          	addi	s1,a0,0
   26658:	00040513          	addi	a0,s0,0
   2665c:	e75ef0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   26660:	00048513          	addi	a0,s1,0
   26664:	88cf00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026668 <dwarf::expr_context::reg(unsigned int)>:
  virtual taddr reg(unsigned regnum) {
   26668:	fe010113          	addi	sp,sp,-32
   2666c:	00113c23          	sd	ra,24(sp)
   26670:	00813823          	sd	s0,16(sp)
   26674:	00913423          	sd	s1,8(sp)
    throw expr_error("DW_OP_breg* operations not supported");
   26678:	01000513          	addi	a0,zero,16
   2667c:	da5ef0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   26680:	00050413          	addi	s0,a0,0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   26684:	00011597          	auipc	a1,0x11
   26688:	bf458593          	addi	a1,a1,-1036 # 37278 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x298>
   2668c:	8e4f00ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   26690:	0001c797          	auipc	a5,0x1c
   26694:	cc07b783          	ld	a5,-832(a5) # 42350 <vtable for dwarf::expr_error@@Base+0x8c8>
   26698:	01078793          	addi	a5,a5,16
   2669c:	00f43023          	sd	a5,0(s0)
    throw expr_error("DW_OP_breg* operations not supported");
   266a0:	0001c617          	auipc	a2,0x1c
   266a4:	e0863603          	ld	a2,-504(a2) # 424a8 <dwarf::expr_error::~expr_error()@@Base+0x1bfe8>
   266a8:	0001c597          	auipc	a1,0x1c
   266ac:	e785b583          	ld	a1,-392(a1) # 42520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   266b0:	00040513          	addi	a0,s0,0
   266b4:	80cf00ef          	jal	ra,166c0 <__cxa_throw@plt>
   266b8:	00050493          	addi	s1,a0,0
   266bc:	00040513          	addi	a0,s0,0
   266c0:	e11ef0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   266c4:	00048513          	addi	a0,s1,0
   266c8:	828f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000266cc <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

rangelist::rangelist(const std::shared_ptr<section> &sec, section_offset off,
   266cc:	fb010113          	addi	sp,sp,-80
   266d0:	04113423          	sd	ra,72(sp)
   266d4:	04813023          	sd	s0,64(sp)
   266d8:	02913c23          	sd	s1,56(sp)
   266dc:	03213823          	sd	s2,48(sp)
   266e0:	03313423          	sd	s3,40(sp)
   266e4:	03413023          	sd	s4,32(sp)
   266e8:	01513c23          	sd	s5,24(sp)
   266ec:	01613823          	sd	s6,16(sp)
   266f0:	00050413          	addi	s0,a0,0
   266f4:	00068993          	addi	s3,a3,0
   266f8:	00070a13          	addi	s4,a4,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   266fc:	00053023          	sd	zero,0(a0)
   26700:	00053423          	sd	zero,8(a0)
   26704:	00053823          	sd	zero,16(a0)
      { return _M_ptr; }
   26708:	0005b903          	ld	s2,0(a1)
   2670c:	fff00793          	addi	a5,zero,-1
   26710:	00f13023          	sd	a5,0(sp)
      fmt = this->fmt;
   26714:	01892a83          	lw	s5,24(s2)
    if (addr_size == 0)
   26718:	00069463          	bne	a3,zero,26720 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x54>
      addr_size = this->addr_size;
   2671c:	02092983          	lw	s3,32(s2)
        type, begin + start, std::min(len, (section_length)(end - begin)), ord,
   26720:	00893703          	ld	a4,8(s2)
   26724:	00c704b3          	add	s1,a4,a2
   26728:	01093783          	ld	a5,16(s2)
   2672c:	40e787b3          	sub	a5,a5,a4
   26730:	00f13423          	sd	a5,8(sp)
      if (__b < __a)
   26734:	fff00713          	addi	a4,zero,-1
	return __b;
   26738:	00810b13          	addi	s6,sp,8
      if (__b < __a)
   2673c:	00e79463          	bne	a5,a4,26744 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x78>
      return __a;
   26740:	00010b13          	addi	s6,sp,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   26744:	00043c23          	sd	zero,24(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   26748:	06000513          	addi	a0,zero,96
   2674c:	dd5ef0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   26750:	00052423          	sw	zero,8(a0)
   26754:	00052623          	sw	zero,12(a0)
   26758:	00052823          	sw	zero,16(a0)
   2675c:	00052a23          	sw	zero,20(a0)
   26760:	00052c23          	sw	zero,24(a0)
   26764:	00052e23          	sw	zero,28(a0)
   26768:	02053023          	sd	zero,32(a0)
   2676c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   26770:	00100793          	addi	a5,zero,1
   26774:	02f52823          	sw	a5,48(a0)
   26778:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   2677c:	0001c797          	auipc	a5,0x1c
   26780:	e447b783          	ld	a5,-444(a5) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   26784:	01078793          	addi	a5,a5,16
   26788:	00f53023          	sd	a5,0(a0)
   2678c:	00092683          	lw	a3,0(s2)
   26790:	000b3703          	ld	a4,0(s6)
   26794:	01c92783          	lw	a5,28(s2)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   26798:	02d52c23          	sw	a3,56(a0)
   2679c:	04953023          	sd	s1,64(a0)
   267a0:	00e484b3          	add	s1,s1,a4
   267a4:	04953423          	sd	s1,72(a0)
   267a8:	05552823          	sw	s5,80(a0)
        ord(ord), addr_size(addr_size) {}
   267ac:	04f52a23          	sw	a5,84(a0)
   267b0:	05352c23          	sw	s3,88(a0)
	  _M_pi = __pi;
   267b4:	02a43023          	sd	a0,32(s0)
   267b8:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   267bc:	00f43c23          	sd	a5,24(s0)
                     unsigned cu_addr_size, taddr cu_low_pc)
    : sec(sec->slice(off, ~0, format::unknown, cu_addr_size)),
      base_addr(cu_low_pc) {}
   267c0:	03443423          	sd	s4,40(s0)
   267c4:	04813083          	ld	ra,72(sp)
   267c8:	04013403          	ld	s0,64(sp)
   267cc:	03813483          	ld	s1,56(sp)
   267d0:	03013903          	ld	s2,48(sp)
   267d4:	02813983          	ld	s3,40(sp)
   267d8:	02013a03          	ld	s4,32(sp)
   267dc:	01813a83          	ld	s5,24(sp)
   267e0:	01013b03          	ld	s6,16(sp)
   267e4:	05010113          	addi	sp,sp,80
   267e8:	00008067          	jalr	zero,0(ra)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   267ec:	00050493          	addi	s1,a0,0
   267f0:	00043503          	ld	a0,0(s0)
	if (__p)
   267f4:	00050463          	beq	a0,zero,267fc <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   267f8:	d19ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   267fc:	00048513          	addi	a0,s1,0
   26800:	ef1ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026804 <dwarf::rangelist::end() const>:
      : _M_ptr(0), _M_refcount()
   26804:	00053023          	sd	zero,0(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   26808:	00053423          	sd	zero,8(a0)
  iterator() : sec(nullptr), base_addr(0), pos(0) {}
   2680c:	00053823          	sd	zero,16(a0)
   26810:	00053c23          	sd	zero,24(a0)
  if (sec)
    return iterator(sec, base_addr);
  return end();
}

rangelist::iterator rangelist::end() const { return iterator(); }
   26814:	00008067          	jalr	zero,0(ra)

0000000000026818 <dwarf::rangelist::iterator::operator++()>:
    : sec(sec), base_addr(base_addr), pos(0) {
  // Read in the first entry
  ++(*this);
}

rangelist::iterator &rangelist::iterator::operator++() {
   26818:	fb010113          	addi	sp,sp,-80
   2681c:	04113423          	sd	ra,72(sp)
   26820:	04813023          	sd	s0,64(sp)
   26824:	02913c23          	sd	s1,56(sp)
   26828:	03213823          	sd	s2,48(sp)
   2682c:	03313423          	sd	s3,40(sp)
   26830:	03413023          	sd	s4,32(sp)
   26834:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   26838:	00053483          	ld	s1,0(a0)
  // DWARF4 section 2.17.3
  taddr largest_offset = ~(taddr)0;
  if (sec->addr_size < sizeof(taddr))
   2683c:	0204a783          	lw	a5,32(s1)
   26840:	00700713          	addi	a4,zero,7
  taddr largest_offset = ~(taddr)0;
   26844:	fff00a13          	addi	s4,zero,-1
  if (sec->addr_size < sizeof(taddr))
   26848:	00f76a63          	bltu	a4,a5,2685c <dwarf::rangelist::iterator::operator++()+0x44>
    largest_offset += 1 << (8 * sec->addr_size);
   2684c:	0037979b          	slliw	a5,a5,0x3
   26850:	00100a13          	addi	s4,zero,1
   26854:	00fa1a3b          	sllw	s4,s4,a5
   26858:	fffa0a13          	addi	s4,s4,-1
      : _M_pi(__r._M_pi)
   2685c:	00843903          	ld	s2,8(s0)
	if (_M_pi != nullptr)
   26860:	2c090e63          	beq	s2,zero,26b3c <dwarf::rangelist::iterator::operator++()+0x324>
    if (__is_single_threaded())
   26864:	0001c797          	auipc	a5,0x1c
   26868:	c1c7b783          	ld	a5,-996(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2686c:	0007c783          	lbu	a5,0(a5)
   26870:	0a078a63          	beq	a5,zero,26924 <dwarf::rangelist::iterator::operator++()+0x10c>
  { *__mem += __val; }
   26874:	03092783          	lw	a5,48(s2)
   26878:	0017879b          	addiw	a5,a5,1
   2687c:	02f92823          	sw	a5,48(s2)

  // Read in entries until we reach a regular entry of an
  // end-of-list.  Note that pos points to the beginning of the
  // entry *following* the current entry, so that's where we
  // start.
  cursor cur(sec, pos);
   26880:	01843983          	ld	s3,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   26884:	00913423          	sd	s1,8(sp)
      : _M_pi(__r._M_pi)
   26888:	01213823          	sd	s2,16(sp)
    if (__is_single_threaded())
   2688c:	0001c797          	auipc	a5,0x1c
   26890:	bf47b783          	ld	a5,-1036(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26894:	0007c783          	lbu	a5,0(a5)
   26898:	08078e63          	beq	a5,zero,26934 <dwarf::rangelist::iterator::operator++()+0x11c>
  { *__mem += __val; }
   2689c:	03092783          	lw	a5,48(s2)
   268a0:	0017879b          	addiw	a5,a5,1
   268a4:	02f92823          	sw	a5,48(s2)
      : sec(sec), pos(sec->begin + offset) {}
   268a8:	0084b783          	ld	a5,8(s1)
   268ac:	013787b3          	add	a5,a5,s3
   268b0:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   268b4:	0001c797          	auipc	a5,0x1c
   268b8:	bcc7b783          	ld	a5,-1076(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   268bc:	0007c783          	lbu	a5,0(a5)
   268c0:	08078263          	beq	a5,zero,26944 <dwarf::rangelist::iterator::operator++()+0x12c>
    _Atomic_word __result = *__mem;
   268c4:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   268c8:	fff5079b          	addiw	a5,a0,-1
   268cc:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   268d0:	00100793          	addi	a5,zero,1
   268d4:	28f51063          	bne	a0,a5,26b54 <dwarf::rangelist::iterator::operator++()+0x33c>
	_M_dispose();
   268d8:	00093783          	ld	a5,0(s2)
   268dc:	0107b783          	ld	a5,16(a5)
   268e0:	00090513          	addi	a0,s2,0
   268e4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   268e8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   268ec:	0001c797          	auipc	a5,0x1c
   268f0:	b947b783          	ld	a5,-1132(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   268f4:	0007c783          	lbu	a5,0(a5)
   268f8:	04078e63          	beq	a5,zero,26954 <dwarf::rangelist::iterator::operator++()+0x13c>
    _Atomic_word __result = *__mem;
   268fc:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   26900:	fff5079b          	addiw	a5,a0,-1
   26904:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26908:	00100793          	addi	a5,zero,1
   2690c:	24f51463          	bne	a0,a5,26b54 <dwarf::rangelist::iterator::operator++()+0x33c>
	    _M_destroy();
   26910:	00093783          	ld	a5,0(s2)
   26914:	0187b783          	ld	a5,24(a5)
   26918:	00090513          	addi	a0,s2,0
   2691c:	000780e7          	jalr	ra,0(a5)
   26920:	2340006f          	jal	zero,26b54 <dwarf::rangelist::iterator::operator++()+0x33c>
      __atomic_add(__mem, __val);
   26924:	00100593          	addi	a1,zero,1
   26928:	03090513          	addi	a0,s2,48
   2692c:	a25ef0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   26930:	f51ff06f          	jal	zero,26880 <dwarf::rangelist::iterator::operator++()+0x68>
   26934:	00100593          	addi	a1,zero,1
   26938:	03090513          	addi	a0,s2,48
   2693c:	a15ef0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   26940:	f69ff06f          	jal	zero,268a8 <dwarf::rangelist::iterator::operator++()+0x90>
      return __exchange_and_add(__mem, __val);
   26944:	fff00593          	addi	a1,zero,-1
   26948:	03090513          	addi	a0,s2,48
   2694c:	a35ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26950:	f81ff06f          	jal	zero,268d0 <dwarf::rangelist::iterator::operator++()+0xb8>
   26954:	fff00593          	addi	a1,zero,-1
   26958:	03490513          	addi	a0,s2,52
   2695c:	a25ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26960:	fa9ff06f          	jal	zero,26908 <dwarf::rangelist::iterator::operator++()+0xf0>
  while (true) {
    entry.low = cur.address();
   26964:	02a43023          	sd	a0,32(s0)
    entry.high = cur.address();
   26968:	00090513          	addi	a0,s2,0
   2696c:	000980e7          	jalr	ra,0(s3)
   26970:	02a43423          	sd	a0,40(s0)

    if (entry.low == 0 && entry.high == 0) {
   26974:	02043783          	ld	a5,32(s0)
   26978:	00a7e4b3          	or	s1,a5,a0
   2697c:	0a049463          	bne	s1,zero,26a24 <dwarf::rangelist::iterator::operator++()+0x20c>
   26980:	00043023          	sd	zero,0(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   26984:	00843903          	ld	s2,8(s0)
	__r._M_pi = _M_pi;
   26988:	00043423          	sd	zero,8(s0)
	if (_M_pi != nullptr)
   2698c:	0c090863          	beq	s2,zero,26a5c <dwarf::rangelist::iterator::operator++()+0x244>
    if (__is_single_threaded())
   26990:	0001c797          	auipc	a5,0x1c
   26994:	af07b783          	ld	a5,-1296(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26998:	0007c783          	lbu	a5,0(a5)
   2699c:	06078263          	beq	a5,zero,26a00 <dwarf::rangelist::iterator::operator++()+0x1e8>
    _Atomic_word __result = *__mem;
   269a0:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   269a4:	fff5079b          	addiw	a5,a0,-1
   269a8:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   269ac:	00100793          	addi	a5,zero,1
   269b0:	0af51663          	bne	a0,a5,26a5c <dwarf::rangelist::iterator::operator++()+0x244>
	_M_dispose();
   269b4:	00093783          	ld	a5,0(s2)
   269b8:	0107b783          	ld	a5,16(a5)
   269bc:	00090513          	addi	a0,s2,0
   269c0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   269c4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   269c8:	0001c797          	auipc	a5,0x1c
   269cc:	ab87b783          	ld	a5,-1352(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   269d0:	0007c783          	lbu	a5,0(a5)
   269d4:	02078e63          	beq	a5,zero,26a10 <dwarf::rangelist::iterator::operator++()+0x1f8>
    _Atomic_word __result = *__mem;
   269d8:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   269dc:	fff7871b          	addiw	a4,a5,-1
   269e0:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   269e4:	00100713          	addi	a4,zero,1
   269e8:	06e79a63          	bne	a5,a4,26a5c <dwarf::rangelist::iterator::operator++()+0x244>
	    _M_destroy();
   269ec:	00093783          	ld	a5,0(s2)
   269f0:	0187b783          	ld	a5,24(a5)
   269f4:	00090513          	addi	a0,s2,0
   269f8:	000780e7          	jalr	ra,0(a5)
      // End of list
      sec.reset();
      pos = 0;
      break;
   269fc:	0600006f          	jal	zero,26a5c <dwarf::rangelist::iterator::operator++()+0x244>
      return __exchange_and_add(__mem, __val);
   26a00:	fff00593          	addi	a1,zero,-1
   26a04:	03090513          	addi	a0,s2,48
   26a08:	979ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26a0c:	fa1ff06f          	jal	zero,269ac <dwarf::rangelist::iterator::operator++()+0x194>
   26a10:	fff00593          	addi	a1,zero,-1
   26a14:	03490513          	addi	a0,s2,52
   26a18:	969ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26a1c:	00050793          	addi	a5,a0,0
   26a20:	fc5ff06f          	jal	zero,269e4 <dwarf::rangelist::iterator::operator++()+0x1cc>
    } else if (entry.low == largest_offset) {
   26a24:	01479a63          	bne	a5,s4,26a38 <dwarf::rangelist::iterator::operator++()+0x220>
      // Base address change
      base_addr = entry.high;
   26a28:	00a43823          	sd	a0,16(s0)
    entry.low = cur.address();
   26a2c:	00090513          	addi	a0,s2,0
   26a30:	000980e7          	jalr	ra,0(s3)
   26a34:	f31ff06f          	jal	zero,26964 <dwarf::rangelist::iterator::operator++()+0x14c>
    } else {
      // Regular entry.  Adjust by base address.
      entry.low += base_addr;
   26a38:	01043703          	ld	a4,16(s0)
   26a3c:	00e787b3          	add	a5,a5,a4
   26a40:	02f43023          	sd	a5,32(s0)
      entry.high += base_addr;
   26a44:	00a70733          	add	a4,a4,a0
   26a48:	02e43423          	sd	a4,40(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   26a4c:	00813783          	ld	a5,8(sp)
   26a50:	0087b783          	ld	a5,8(a5)
   26a54:	01813483          	ld	s1,24(sp)
   26a58:	40f484b3          	sub	s1,s1,a5
      pos = 0;
   26a5c:	00943c23          	sd	s1,24(s0)
	if (_M_pi != nullptr)
   26a60:	01013483          	ld	s1,16(sp)
   26a64:	02048463          	beq	s1,zero,26a8c <dwarf::rangelist::iterator::operator++()+0x274>
    if (__is_single_threaded())
   26a68:	0001c797          	auipc	a5,0x1c
   26a6c:	a187b783          	ld	a5,-1512(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26a70:	0007c783          	lbu	a5,0(a5)
   26a74:	02078e63          	beq	a5,zero,26ab0 <dwarf::rangelist::iterator::operator++()+0x298>
    _Atomic_word __result = *__mem;
   26a78:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   26a7c:	fff5079b          	addiw	a5,a0,-1
   26a80:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26a84:	00100793          	addi	a5,zero,1
   26a88:	02f50c63          	beq	a0,a5,26ac0 <dwarf::rangelist::iterator::operator++()+0x2a8>
      break;
    }
  }

  return *this;
}
   26a8c:	00040513          	addi	a0,s0,0
   26a90:	04813083          	ld	ra,72(sp)
   26a94:	04013403          	ld	s0,64(sp)
   26a98:	03813483          	ld	s1,56(sp)
   26a9c:	03013903          	ld	s2,48(sp)
   26aa0:	02813983          	ld	s3,40(sp)
   26aa4:	02013a03          	ld	s4,32(sp)
   26aa8:	05010113          	addi	sp,sp,80
   26aac:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   26ab0:	fff00593          	addi	a1,zero,-1
   26ab4:	03048513          	addi	a0,s1,48
   26ab8:	8c9ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26abc:	fc9ff06f          	jal	zero,26a84 <dwarf::rangelist::iterator::operator++()+0x26c>
	_M_dispose();
   26ac0:	0004b783          	ld	a5,0(s1)
   26ac4:	0107b783          	ld	a5,16(a5)
   26ac8:	00048513          	addi	a0,s1,0
   26acc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26ad0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26ad4:	0001c797          	auipc	a5,0x1c
   26ad8:	9ac7b783          	ld	a5,-1620(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26adc:	0007c783          	lbu	a5,0(a5)
   26ae0:	02078663          	beq	a5,zero,26b0c <dwarf::rangelist::iterator::operator++()+0x2f4>
    _Atomic_word __result = *__mem;
   26ae4:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   26ae8:	fff5079b          	addiw	a5,a0,-1
   26aec:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26af0:	00100793          	addi	a5,zero,1
   26af4:	f8f51ce3          	bne	a0,a5,26a8c <dwarf::rangelist::iterator::operator++()+0x274>
	    _M_destroy();
   26af8:	0004b783          	ld	a5,0(s1)
   26afc:	0187b783          	ld	a5,24(a5)
   26b00:	00048513          	addi	a0,s1,0
   26b04:	000780e7          	jalr	ra,0(a5)
  return *this;
   26b08:	f85ff06f          	jal	zero,26a8c <dwarf::rangelist::iterator::operator++()+0x274>
      return __exchange_and_add(__mem, __val);
   26b0c:	fff00593          	addi	a1,zero,-1
   26b10:	03448513          	addi	a0,s1,52
   26b14:	86def0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26b18:	fd9ff06f          	jal	zero,26af0 <dwarf::rangelist::iterator::operator++()+0x2d8>
	if (_M_pi != nullptr)
   26b1c:	00050413          	addi	s0,a0,0
   26b20:	01013503          	ld	a0,16(sp)
   26b24:	00050863          	beq	a0,zero,26b34 <dwarf::rangelist::iterator::operator++()+0x31c>
	  _M_pi->_M_release();
   26b28:	0001c317          	auipc	t1,0x1c
   26b2c:	8a033303          	ld	t1,-1888(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   26b30:	000300e7          	jalr	ra,0(t1)
   26b34:	00040513          	addi	a0,s0,0
   26b38:	bb9ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
  cursor cur(sec, pos);
   26b3c:	01843703          	ld	a4,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   26b40:	00913423          	sd	s1,8(sp)
      : _M_pi(__r._M_pi)
   26b44:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   26b48:	0084b783          	ld	a5,8(s1)
   26b4c:	00e787b3          	add	a5,a5,a4
   26b50:	00f13c23          	sd	a5,24(sp)
    entry.low = cur.address();
   26b54:	00810913          	addi	s2,sp,8
   26b58:	0001c997          	auipc	s3,0x1c
   26b5c:	8209b983          	ld	s3,-2016(s3) # 42378 <dwarf::cursor::address()@@Base+0x1f584>
   26b60:	ecdff06f          	jal	zero,26a2c <dwarf::rangelist::iterator::operator++()+0x214>

0000000000026b64 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>:
rangelist::iterator::iterator(const std::shared_ptr<section> &sec,
   26b64:	fe010113          	addi	sp,sp,-32
   26b68:	00113c23          	sd	ra,24(sp)
   26b6c:	00813823          	sd	s0,16(sp)
   26b70:	00913423          	sd	s1,8(sp)
   26b74:	00050413          	addi	s0,a0,0
   26b78:	00060493          	addi	s1,a2,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   26b7c:	0005b783          	ld	a5,0(a1)
   26b80:	00f53023          	sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   26b84:	0085b503          	ld	a0,8(a1)
   26b88:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   26b8c:	02050063          	beq	a0,zero,26bac <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x48>
    if (__is_single_threaded())
   26b90:	0001c797          	auipc	a5,0x1c
   26b94:	8f07b783          	ld	a5,-1808(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26b98:	0007c783          	lbu	a5,0(a5)
   26b9c:	02078263          	beq	a5,zero,26bc0 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x5c>
  { *__mem += __val; }
   26ba0:	03052783          	lw	a5,48(a0)
   26ba4:	0017879b          	addiw	a5,a5,1
   26ba8:	02f52823          	sw	a5,48(a0)
    : sec(sec), base_addr(base_addr), pos(0) {
   26bac:	00943823          	sd	s1,16(s0)
   26bb0:	00043c23          	sd	zero,24(s0)
  ++(*this);
   26bb4:	00040513          	addi	a0,s0,0
   26bb8:	c61ff0ef          	jal	ra,26818 <dwarf::rangelist::iterator::operator++()>
   26bbc:	0340006f          	jal	zero,26bf0 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x8c>
      __atomic_add(__mem, __val);
   26bc0:	00100593          	addi	a1,zero,1
   26bc4:	03050513          	addi	a0,a0,48
   26bc8:	f88ef0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   26bcc:	fe1ff06f          	jal	zero,26bac <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x48>
	if (_M_pi != nullptr)
   26bd0:	00050493          	addi	s1,a0,0
   26bd4:	00843503          	ld	a0,8(s0)
   26bd8:	00050863          	beq	a0,zero,26be8 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x84>
	  _M_pi->_M_release();
   26bdc:	0001b317          	auipc	t1,0x1b
   26be0:	7ec33303          	ld	t1,2028(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   26be4:	000300e7          	jalr	ra,0(t1)
   26be8:	00048513          	addi	a0,s1,0
   26bec:	b05ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
}
   26bf0:	01813083          	ld	ra,24(sp)
   26bf4:	01013403          	ld	s0,16(sp)
   26bf8:	00813483          	ld	s1,8(sp)
   26bfc:	02010113          	addi	sp,sp,32
   26c00:	00008067          	jalr	zero,0(ra)

0000000000026c04 <dwarf::rangelist::begin() const>:
rangelist::iterator rangelist::begin() const {
   26c04:	ff010113          	addi	sp,sp,-16
   26c08:	00113423          	sd	ra,8(sp)
   26c0c:	00813023          	sd	s0,0(sp)
   26c10:	00050413          	addi	s0,a0,0
  if (sec)
   26c14:	0185b783          	ld	a5,24(a1)
   26c18:	02078263          	beq	a5,zero,26c3c <dwarf::rangelist::begin() const+0x38>
    return iterator(sec, base_addr);
   26c1c:	0285b603          	ld	a2,40(a1)
   26c20:	01858593          	addi	a1,a1,24
   26c24:	f41ff0ef          	jal	ra,26b64 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>
}
   26c28:	00040513          	addi	a0,s0,0
   26c2c:	00813083          	ld	ra,8(sp)
   26c30:	00013403          	ld	s0,0(sp)
   26c34:	01010113          	addi	sp,sp,16
   26c38:	00008067          	jalr	zero,0(ra)
  return end();
   26c3c:	bc9ff0ef          	jal	ra,26804 <dwarf::rangelist::end() const>
   26c40:	fe9ff06f          	jal	zero,26c28 <dwarf::rangelist::begin() const+0x24>

0000000000026c44 <dwarf::rangelist::contains(unsigned long) const>:
bool rangelist::contains(taddr addr) const {
   26c44:	f8010113          	addi	sp,sp,-128
   26c48:	06113c23          	sd	ra,120(sp)
   26c4c:	06813823          	sd	s0,112(sp)
   26c50:	06913423          	sd	s1,104(sp)
   26c54:	00050493          	addi	s1,a0,0
   26c58:	00058413          	addi	s0,a1,0
  for (auto ent : *this)
   26c5c:	00050593          	addi	a1,a0,0
   26c60:	00010513          	addi	a0,sp,0
   26c64:	fa1ff0ef          	jal	ra,26c04 <dwarf::rangelist::begin() const>
   26c68:	00048593          	addi	a1,s1,0
   26c6c:	03010513          	addi	a0,sp,48
   26c70:	b95ff0ef          	jal	ra,26804 <dwarf::rangelist::end() const>
   26c74:	00010493          	addi	s1,sp,0
    return sec == o.sec && pos == o.pos;
   26c78:	00013703          	ld	a4,0(sp)
   26c7c:	03013783          	ld	a5,48(sp)
   26c80:	16f70463          	beq	a4,a5,26de8 <dwarf::rangelist::contains(unsigned long) const+0x1a4>
   26c84:	02813703          	ld	a4,40(sp)
  bool contains(taddr addr) const { return low <= addr && addr < high; }
   26c88:	02013783          	ld	a5,32(sp)
   26c8c:	00f47863          	bgeu	s0,a5,26c9c <dwarf::rangelist::contains(unsigned long) const+0x58>
   26c90:	00048513          	addi	a0,s1,0
   26c94:	b85ff0ef          	jal	ra,26818 <dwarf::rangelist::iterator::operator++()>
   26c98:	fe1ff06f          	jal	zero,26c78 <dwarf::rangelist::contains(unsigned long) const+0x34>
   26c9c:	fee47ae3          	bgeu	s0,a4,26c90 <dwarf::rangelist::contains(unsigned long) const+0x4c>
	if (_M_pi != nullptr)
   26ca0:	03813403          	ld	s0,56(sp)
   26ca4:	02040463          	beq	s0,zero,26ccc <dwarf::rangelist::contains(unsigned long) const+0x88>
    if (__is_single_threaded())
   26ca8:	0001b797          	auipc	a5,0x1b
   26cac:	7d87b783          	ld	a5,2008(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26cb0:	0007c783          	lbu	a5,0(a5)
   26cb4:	04078e63          	beq	a5,zero,26d10 <dwarf::rangelist::contains(unsigned long) const+0xcc>
    _Atomic_word __result = *__mem;
   26cb8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26cbc:	fff5079b          	addiw	a5,a0,-1
   26cc0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26cc4:	00100793          	addi	a5,zero,1
   26cc8:	04f50c63          	beq	a0,a5,26d20 <dwarf::rangelist::contains(unsigned long) const+0xdc>
	if (_M_pi != nullptr)
   26ccc:	00813403          	ld	s0,8(sp)
   26cd0:	02040463          	beq	s0,zero,26cf8 <dwarf::rangelist::contains(unsigned long) const+0xb4>
    if (__is_single_threaded())
   26cd4:	0001b797          	auipc	a5,0x1b
   26cd8:	7ac7b783          	ld	a5,1964(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26cdc:	0007c783          	lbu	a5,0(a5)
   26ce0:	08078e63          	beq	a5,zero,26d7c <dwarf::rangelist::contains(unsigned long) const+0x138>
    _Atomic_word __result = *__mem;
   26ce4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26ce8:	fff5079b          	addiw	a5,a0,-1
   26cec:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26cf0:	00100793          	addi	a5,zero,1
   26cf4:	08f50c63          	beq	a0,a5,26d8c <dwarf::rangelist::contains(unsigned long) const+0x148>
      return true;
   26cf8:	00100513          	addi	a0,zero,1
}
   26cfc:	07813083          	ld	ra,120(sp)
   26d00:	07013403          	ld	s0,112(sp)
   26d04:	06813483          	ld	s1,104(sp)
   26d08:	08010113          	addi	sp,sp,128
   26d0c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   26d10:	fff00593          	addi	a1,zero,-1
   26d14:	03040513          	addi	a0,s0,48
   26d18:	e68ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26d1c:	fa9ff06f          	jal	zero,26cc4 <dwarf::rangelist::contains(unsigned long) const+0x80>
	_M_dispose();
   26d20:	00043783          	ld	a5,0(s0)
   26d24:	0107b783          	ld	a5,16(a5)
   26d28:	00040513          	addi	a0,s0,0
   26d2c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26d30:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26d34:	0001b797          	auipc	a5,0x1b
   26d38:	74c7b783          	ld	a5,1868(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26d3c:	0007c783          	lbu	a5,0(a5)
   26d40:	02078663          	beq	a5,zero,26d6c <dwarf::rangelist::contains(unsigned long) const+0x128>
    _Atomic_word __result = *__mem;
   26d44:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   26d48:	fff5079b          	addiw	a5,a0,-1
   26d4c:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26d50:	00100793          	addi	a5,zero,1
   26d54:	f6f51ce3          	bne	a0,a5,26ccc <dwarf::rangelist::contains(unsigned long) const+0x88>
	    _M_destroy();
   26d58:	00043783          	ld	a5,0(s0)
   26d5c:	0187b783          	ld	a5,24(a5)
   26d60:	00040513          	addi	a0,s0,0
   26d64:	000780e7          	jalr	ra,0(a5)
   26d68:	f65ff06f          	jal	zero,26ccc <dwarf::rangelist::contains(unsigned long) const+0x88>
      return __exchange_and_add(__mem, __val);
   26d6c:	fff00593          	addi	a1,zero,-1
   26d70:	03440513          	addi	a0,s0,52
   26d74:	e0cef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26d78:	fd9ff06f          	jal	zero,26d50 <dwarf::rangelist::contains(unsigned long) const+0x10c>
   26d7c:	fff00593          	addi	a1,zero,-1
   26d80:	03040513          	addi	a0,s0,48
   26d84:	dfcef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26d88:	f69ff06f          	jal	zero,26cf0 <dwarf::rangelist::contains(unsigned long) const+0xac>
	_M_dispose();
   26d8c:	00043783          	ld	a5,0(s0)
   26d90:	0107b783          	ld	a5,16(a5)
   26d94:	00040513          	addi	a0,s0,0
   26d98:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26d9c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26da0:	0001b797          	auipc	a5,0x1b
   26da4:	6e07b783          	ld	a5,1760(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26da8:	0007c783          	lbu	a5,0(a5)
   26dac:	02078663          	beq	a5,zero,26dd8 <dwarf::rangelist::contains(unsigned long) const+0x194>
    _Atomic_word __result = *__mem;
   26db0:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   26db4:	fff5079b          	addiw	a5,a0,-1
   26db8:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26dbc:	00100793          	addi	a5,zero,1
   26dc0:	f2f51ce3          	bne	a0,a5,26cf8 <dwarf::rangelist::contains(unsigned long) const+0xb4>
	    _M_destroy();
   26dc4:	00043783          	ld	a5,0(s0)
   26dc8:	0187b783          	ld	a5,24(a5)
   26dcc:	00040513          	addi	a0,s0,0
   26dd0:	000780e7          	jalr	ra,0(a5)
   26dd4:	f25ff06f          	jal	zero,26cf8 <dwarf::rangelist::contains(unsigned long) const+0xb4>
      return __exchange_and_add(__mem, __val);
   26dd8:	fff00593          	addi	a1,zero,-1
   26ddc:	03440513          	addi	a0,s0,52
   26de0:	da0ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26de4:	fd9ff06f          	jal	zero,26dbc <dwarf::rangelist::contains(unsigned long) const+0x178>
    return sec == o.sec && pos == o.pos;
   26de8:	01813703          	ld	a4,24(sp)
   26dec:	04813783          	ld	a5,72(sp)
   26df0:	e8f71ae3          	bne	a4,a5,26c84 <dwarf::rangelist::contains(unsigned long) const+0x40>
	if (_M_pi != nullptr)
   26df4:	03813403          	ld	s0,56(sp)
   26df8:	02040463          	beq	s0,zero,26e20 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
    if (__is_single_threaded())
   26dfc:	0001b797          	auipc	a5,0x1b
   26e00:	6847b783          	ld	a5,1668(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26e04:	0007c783          	lbu	a5,0(a5)
   26e08:	04078663          	beq	a5,zero,26e54 <dwarf::rangelist::contains(unsigned long) const+0x210>
    _Atomic_word __result = *__mem;
   26e0c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26e10:	fff5079b          	addiw	a5,a0,-1
   26e14:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26e18:	00100793          	addi	a5,zero,1
   26e1c:	04f50463          	beq	a0,a5,26e64 <dwarf::rangelist::contains(unsigned long) const+0x220>
	if (_M_pi != nullptr)
   26e20:	00813403          	ld	s0,8(sp)
   26e24:	02040463          	beq	s0,zero,26e4c <dwarf::rangelist::contains(unsigned long) const+0x208>
    if (__is_single_threaded())
   26e28:	0001b797          	auipc	a5,0x1b
   26e2c:	6587b783          	ld	a5,1624(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26e30:	0007c783          	lbu	a5,0(a5)
   26e34:	08078663          	beq	a5,zero,26ec0 <dwarf::rangelist::contains(unsigned long) const+0x27c>
    _Atomic_word __result = *__mem;
   26e38:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   26e3c:	fff5079b          	addiw	a5,a0,-1
   26e40:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   26e44:	00100793          	addi	a5,zero,1
   26e48:	08f50463          	beq	a0,a5,26ed0 <dwarf::rangelist::contains(unsigned long) const+0x28c>
  return false;
   26e4c:	00000513          	addi	a0,zero,0
   26e50:	eadff06f          	jal	zero,26cfc <dwarf::rangelist::contains(unsigned long) const+0xb8>
      return __exchange_and_add(__mem, __val);
   26e54:	fff00593          	addi	a1,zero,-1
   26e58:	03040513          	addi	a0,s0,48
   26e5c:	d24ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26e60:	fb9ff06f          	jal	zero,26e18 <dwarf::rangelist::contains(unsigned long) const+0x1d4>
	_M_dispose();
   26e64:	00043783          	ld	a5,0(s0)
   26e68:	0107b783          	ld	a5,16(a5)
   26e6c:	00040513          	addi	a0,s0,0
   26e70:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26e74:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26e78:	0001b797          	auipc	a5,0x1b
   26e7c:	6087b783          	ld	a5,1544(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26e80:	0007c783          	lbu	a5,0(a5)
   26e84:	02078663          	beq	a5,zero,26eb0 <dwarf::rangelist::contains(unsigned long) const+0x26c>
    _Atomic_word __result = *__mem;
   26e88:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   26e8c:	fff5079b          	addiw	a5,a0,-1
   26e90:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26e94:	00100793          	addi	a5,zero,1
   26e98:	f8f514e3          	bne	a0,a5,26e20 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
	    _M_destroy();
   26e9c:	00043783          	ld	a5,0(s0)
   26ea0:	0187b783          	ld	a5,24(a5)
   26ea4:	00040513          	addi	a0,s0,0
   26ea8:	000780e7          	jalr	ra,0(a5)
   26eac:	f75ff06f          	jal	zero,26e20 <dwarf::rangelist::contains(unsigned long) const+0x1dc>
      return __exchange_and_add(__mem, __val);
   26eb0:	fff00593          	addi	a1,zero,-1
   26eb4:	03440513          	addi	a0,s0,52
   26eb8:	cc8ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26ebc:	fd9ff06f          	jal	zero,26e94 <dwarf::rangelist::contains(unsigned long) const+0x250>
   26ec0:	fff00593          	addi	a1,zero,-1
   26ec4:	03040513          	addi	a0,s0,48
   26ec8:	cb8ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26ecc:	f79ff06f          	jal	zero,26e44 <dwarf::rangelist::contains(unsigned long) const+0x200>
	_M_dispose();
   26ed0:	00043783          	ld	a5,0(s0)
   26ed4:	0107b783          	ld	a5,16(a5)
   26ed8:	00040513          	addi	a0,s0,0
   26edc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   26ee0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   26ee4:	0001b797          	auipc	a5,0x1b
   26ee8:	59c7b783          	ld	a5,1436(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   26eec:	0007c783          	lbu	a5,0(a5)
   26ef0:	02078663          	beq	a5,zero,26f1c <dwarf::rangelist::contains(unsigned long) const+0x2d8>
    _Atomic_word __result = *__mem;
   26ef4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   26ef8:	fff5079b          	addiw	a5,a0,-1
   26efc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   26f00:	00100793          	addi	a5,zero,1
   26f04:	f4f514e3          	bne	a0,a5,26e4c <dwarf::rangelist::contains(unsigned long) const+0x208>
	    _M_destroy();
   26f08:	00043783          	ld	a5,0(s0)
   26f0c:	0187b783          	ld	a5,24(a5)
   26f10:	00040513          	addi	a0,s0,0
   26f14:	000780e7          	jalr	ra,0(a5)
   26f18:	f35ff06f          	jal	zero,26e4c <dwarf::rangelist::contains(unsigned long) const+0x208>
      return __exchange_and_add(__mem, __val);
   26f1c:	fff00593          	addi	a1,zero,-1
   26f20:	03440513          	addi	a0,s0,52
   26f24:	c5cef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   26f28:	fd9ff06f          	jal	zero,26f00 <dwarf::rangelist::contains(unsigned long) const+0x2bc>
	if (_M_pi != nullptr)
   26f2c:	00050413          	addi	s0,a0,0
   26f30:	03813503          	ld	a0,56(sp)
   26f34:	00050863          	beq	a0,zero,26f44 <dwarf::rangelist::contains(unsigned long) const+0x300>
	  _M_pi->_M_release();
   26f38:	0001b317          	auipc	t1,0x1b
   26f3c:	49033303          	ld	t1,1168(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   26f40:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   26f44:	00813503          	ld	a0,8(sp)
   26f48:	00050863          	beq	a0,zero,26f58 <dwarf::rangelist::contains(unsigned long) const+0x314>
	  _M_pi->_M_release();
   26f4c:	0001b317          	auipc	t1,0x1b
   26f50:	47c33303          	ld	t1,1148(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   26f54:	000300e7          	jalr	ra,0(t1)
   26f58:	00040513          	addi	a0,s0,0
   26f5c:	f94ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   26f60:	00050413          	addi	s0,a0,0
   26f64:	fe1ff06f          	jal	zero,26f44 <dwarf::rangelist::contains(unsigned long) const+0x300>

0000000000026f68 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>:
rangelist::rangelist(const initializer_list<pair<taddr, taddr>> &ranges) {
   26f68:	fc010113          	addi	sp,sp,-64
   26f6c:	02113c23          	sd	ra,56(sp)
   26f70:	02813823          	sd	s0,48(sp)
   26f74:	02913423          	sd	s1,40(sp)
   26f78:	03213023          	sd	s2,32(sp)
   26f7c:	01313c23          	sd	s3,24(sp)
   26f80:	01413823          	sd	s4,16(sp)
   26f84:	00050413          	addi	s0,a0,0
	: _M_start(), _M_finish(), _M_end_of_storage()
   26f88:	00053023          	sd	zero,0(a0)
   26f8c:	00053423          	sd	zero,8(a0)
   26f90:	00053823          	sd	zero,16(a0)
      : _M_ptr(0), _M_refcount()
   26f94:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   26f98:	02053023          	sd	zero,32(a0)
  synthetic.reserve(ranges.size() * 2 + 2);
   26f9c:	0085b783          	ld	a5,8(a1)
   26fa0:	00178793          	addi	a5,a5,1
   26fa4:	00179693          	slli	a3,a5,0x1
      if (__n > this->max_size())
   26fa8:	fff00713          	addi	a4,zero,-1
   26fac:	00475713          	srli	a4,a4,0x4
   26fb0:	00d76e63          	bltu	a4,a3,26fcc <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x64>
   26fb4:	00058913          	addi	s2,a1,0
      if (this->capacity() < __n)
   26fb8:	08068463          	beq	a3,zero,27040 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xd8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   26fbc:	00479493          	slli	s1,a5,0x4
   26fc0:	00048513          	addi	a0,s1,0
   26fc4:	d5cef0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   26fc8:	03c0006f          	jal	zero,27004 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x9c>
	__throw_length_error(__N("vector::reserve"));
   26fcc:	00011517          	auipc	a0,0x11
   26fd0:	86c50513          	addi	a0,a0,-1940 # 37838 <typeinfo name for dwarf::expr_context+0x18>
   26fd4:	c6cef0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	if (_M_pi != nullptr)
   26fd8:	00050493          	addi	s1,a0,0
   26fdc:	02043503          	ld	a0,32(s0)
   26fe0:	00050863          	beq	a0,zero,26ff0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x88>
	  _M_pi->_M_release();
   26fe4:	0001b317          	auipc	t1,0x1b
   26fe8:	3e433303          	ld	t1,996(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   26fec:	000300e7          	jalr	ra,0(t1)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   26ff0:	00043503          	ld	a0,0(s0)
	if (__p)
   26ff4:	00050463          	beq	a0,zero,26ffc <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x94>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26ff8:	d18ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26ffc:	00048513          	addi	a0,s1,0
   27000:	ef0ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   27004:	00050993          	addi	s3,a0,0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   27008:	00043a03          	ld	s4,0(s0)
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   2700c:	00843603          	ld	a2,8(s0)
   27010:	41460633          	sub	a2,a2,s4
      if (__count > 0)
   27014:	00c04663          	blt	zero,a2,27020 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xb8>
   27018:	000a0c63          	beq	s4,zero,27030 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc8>
   2701c:	00c0006f          	jal	zero,27028 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc0>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   27020:	000a0593          	addi	a1,s4,0
   27024:	f5cef0ef          	jal	ra,16780 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27028:	000a0513          	addi	a0,s4,0
   2702c:	ce4ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
	  this->_M_impl._M_start = __tmp;
   27030:	01343023          	sd	s3,0(s0)
	  this->_M_impl._M_finish = __tmp + __old_size;
   27034:	01343423          	sd	s3,8(s0)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   27038:	009989b3          	add	s3,s3,s1
   2703c:	01343823          	sd	s3,16(s0)
      begin() const noexcept { return _M_array; }
   27040:	00093483          	ld	s1,0(s2)
      end() const noexcept { return begin() + size(); }
   27044:	00893903          	ld	s2,8(s2)
   27048:	00491913          	slli	s2,s2,0x4
   2704c:	01248933          	add	s2,s1,s2
  for (auto &range : ranges) {
   27050:	07248863          	beq	s1,s2,270c0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x158>
	  _M_realloc_insert(end(), __x);
   27054:	0001b997          	auipc	s3,0x1b
   27058:	4c49b983          	ld	s3,1220(s3) # 42518 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)@@Base+0x1b2f4>
   2705c:	0280006f          	jal	zero,27084 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x11c>
   27060:	00048613          	addi	a2,s1,0
   27064:	00040513          	addi	a0,s0,0
   27068:	000980e7          	jalr	ra,0(s3)
   2706c:	0340006f          	jal	zero,270a0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x138>
   27070:	00848613          	addi	a2,s1,8
   27074:	00040513          	addi	a0,s0,0
   27078:	000980e7          	jalr	ra,0(s3)
   2707c:	01048493          	addi	s1,s1,16
   27080:	04990063          	beq	s2,s1,270c0 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x158>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   27084:	00843583          	ld	a1,8(s0)
   27088:	01043783          	ld	a5,16(s0)
   2708c:	fcf58ae3          	beq	a1,a5,27060 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   27090:	0004b783          	ld	a5,0(s1)
   27094:	00f5b023          	sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   27098:	00858593          	addi	a1,a1,8
   2709c:	00b43423          	sd	a1,8(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   270a0:	00843583          	ld	a1,8(s0)
   270a4:	01043783          	ld	a5,16(s0)
   270a8:	fcf584e3          	beq	a1,a5,27070 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x108>
   270ac:	0084b783          	ld	a5,8(s1)
   270b0:	00f5b023          	sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   270b4:	00858593          	addi	a1,a1,8
   270b8:	00b43423          	sd	a1,8(s0)
   270bc:	fc1ff06f          	jal	zero,2707c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x114>
  synthetic.push_back(0);
   270c0:	00013023          	sd	zero,0(sp)
      { emplace_back(std::move(__x)); }
   270c4:	00010593          	addi	a1,sp,0
   270c8:	00040513          	addi	a0,s0,0
   270cc:	0001b317          	auipc	t1,0x1b
   270d0:	33433303          	ld	t1,820(t1) # 42400 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1af2c>
   270d4:	000300e7          	jalr	ra,0(t1)
  synthetic.push_back(0);
   270d8:	00013423          	sd	zero,8(sp)
   270dc:	00810593          	addi	a1,sp,8
   270e0:	00040513          	addi	a0,s0,0
   270e4:	0001b317          	auipc	t1,0x1b
   270e8:	31c33303          	ld	t1,796(t1) # 42400 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x1af2c>
   270ec:	000300e7          	jalr	ra,0(t1)
      { return _M_data_ptr(this->_M_impl._M_start); }
   270f0:	00043903          	ld	s2,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   270f4:	00843483          	ld	s1,8(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   270f8:	06000513          	addi	a0,zero,96
   270fc:	c24ef0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   27100:	00052423          	sw	zero,8(a0)
   27104:	00052623          	sw	zero,12(a0)
   27108:	00052823          	sw	zero,16(a0)
   2710c:	00052a23          	sw	zero,20(a0)
   27110:	00052c23          	sw	zero,24(a0)
   27114:	00052e23          	sw	zero,28(a0)
   27118:	02053023          	sd	zero,32(a0)
   2711c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   27120:	00100793          	addi	a5,zero,1
   27124:	02f52823          	sw	a5,48(a0)
   27128:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   2712c:	0001b797          	auipc	a5,0x1b
   27130:	4947b783          	ld	a5,1172(a5) # 425c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   27134:	01078793          	addi	a5,a5,16
   27138:	00f53023          	sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   2713c:	00900793          	addi	a5,zero,9
   27140:	02f52c23          	sw	a5,56(a0)
   27144:	05253023          	sd	s2,64(a0)
   27148:	04953423          	sd	s1,72(a0)
   2714c:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   27150:	04052a23          	sw	zero,84(a0)
   27154:	00800793          	addi	a5,zero,8
   27158:	04f52c23          	sw	a5,88(a0)
   2715c:	03850793          	addi	a5,a0,56
   27160:	00f43c23          	sd	a5,24(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   27164:	02043483          	ld	s1,32(s0)
	__r._M_pi = _M_pi;
   27168:	02a43023          	sd	a0,32(s0)
	if (_M_pi != nullptr)
   2716c:	02048463          	beq	s1,zero,27194 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
    if (__is_single_threaded())
   27170:	0001b797          	auipc	a5,0x1b
   27174:	3107b783          	ld	a5,784(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27178:	0007c783          	lbu	a5,0(a5)
   2717c:	02078e63          	beq	a5,zero,271b8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x250>
    _Atomic_word __result = *__mem;
   27180:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   27184:	fff5079b          	addiw	a5,a0,-1
   27188:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2718c:	00100793          	addi	a5,zero,1
   27190:	02f50c63          	beq	a0,a5,271c8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x260>
  base_addr = 0;
   27194:	02043423          	sd	zero,40(s0)
}
   27198:	03813083          	ld	ra,56(sp)
   2719c:	03013403          	ld	s0,48(sp)
   271a0:	02813483          	ld	s1,40(sp)
   271a4:	02013903          	ld	s2,32(sp)
   271a8:	01813983          	ld	s3,24(sp)
   271ac:	01013a03          	ld	s4,16(sp)
   271b0:	04010113          	addi	sp,sp,64
   271b4:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   271b8:	fff00593          	addi	a1,zero,-1
   271bc:	03048513          	addi	a0,s1,48
   271c0:	9c0ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   271c4:	fc9ff06f          	jal	zero,2718c <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x224>
	_M_dispose();
   271c8:	0004b783          	ld	a5,0(s1)
   271cc:	0107b783          	ld	a5,16(a5)
   271d0:	00048513          	addi	a0,s1,0
   271d4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   271d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   271dc:	0001b797          	auipc	a5,0x1b
   271e0:	2a47b783          	ld	a5,676(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   271e4:	0007c783          	lbu	a5,0(a5)
   271e8:	02078663          	beq	a5,zero,27214 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x2ac>
    _Atomic_word __result = *__mem;
   271ec:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   271f0:	fff5079b          	addiw	a5,a0,-1
   271f4:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   271f8:	00100793          	addi	a5,zero,1
   271fc:	f8f51ce3          	bne	a0,a5,27194 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
	    _M_destroy();
   27200:	0004b783          	ld	a5,0(s1)
   27204:	0187b783          	ld	a5,24(a5)
   27208:	00048513          	addi	a0,s1,0
   2720c:	000780e7          	jalr	ra,0(a5)
   27210:	f85ff06f          	jal	zero,27194 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x22c>
      return __exchange_and_add(__mem, __val);
   27214:	fff00593          	addi	a1,zero,-1
   27218:	03448513          	addi	a0,s1,52
   2721c:	964ef0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27220:	fd9ff06f          	jal	zero,271f8 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x290>

0000000000027224 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)>:
      vector<_Tp, _Alloc>::
   27224:	fb010113          	addi	sp,sp,-80
   27228:	04113423          	sd	ra,72(sp)
   2722c:	04813023          	sd	s0,64(sp)
   27230:	02913c23          	sd	s1,56(sp)
   27234:	03213823          	sd	s2,48(sp)
   27238:	03313423          	sd	s3,40(sp)
   2723c:	03413023          	sd	s4,32(sp)
   27240:	01513c23          	sd	s5,24(sp)
   27244:	01613823          	sd	s6,16(sp)
   27248:	01713423          	sd	s7,8(sp)
   2724c:	00853903          	ld	s2,8(a0)
   27250:	00053983          	ld	s3,0(a0)
   27254:	413907b3          	sub	a5,s2,s3
   27258:	4037d793          	srai	a5,a5,0x3
	if (max_size() - size() < __n)
   2725c:	fff00713          	addi	a4,zero,-1
   27260:	00475713          	srli	a4,a4,0x4
   27264:	04e78263          	beq	a5,a4,272a8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x84>
   27268:	00050493          	addi	s1,a0,0
   2726c:	00058a13          	addi	s4,a1,0
   27270:	00060b93          	addi	s7,a2,0
      return __a;
   27274:	00078713          	addi	a4,a5,0
      if (__a < __b)
   27278:	03390e63          	beq	s2,s3,272b4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x90>
	const size_type __len = size() + (std::max)(size(), __n);
   2727c:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   27280:	06f76263          	bltu	a4,a5,272e4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xc0>
   27284:	00070a93          	addi	s5,a4,0
   27288:	fff00793          	addi	a5,zero,-1
   2728c:	0047d793          	srli	a5,a5,0x4
   27290:	00e7f463          	bgeu	a5,a4,27298 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x74>
   27294:	00078a93          	addi	s5,a5,0
   27298:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2729c:	00000b13          	addi	s6,zero,0
   272a0:	04070e63          	beq	a4,zero,272fc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xd8>
   272a4:	04c0006f          	jal	zero,272f0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xcc>
	  __throw_length_error(__N(__s));
   272a8:	0000f517          	auipc	a0,0xf
   272ac:	5f850513          	addi	a0,a0,1528 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   272b0:	990ef0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   272b4:	00100713          	addi	a4,zero,1
   272b8:	fc5ff06f          	jal	zero,2727c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x58>
   272bc:	00040613          	addi	a2,s0,0
   272c0:	00098593          	addi	a1,s3,0
   272c4:	000b0513          	addi	a0,s6,0
   272c8:	cb8ef0ef          	jal	ra,16780 <memmove@plt>
	      ++__new_finish;
   272cc:	00840413          	addi	s0,s0,8
   272d0:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   272d4:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   272d8:	05204263          	blt	zero,s2,2731c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xf8>
	}
      return __result + __count;
   272dc:	01240433          	add	s0,s0,s2
      _M_deallocate(pointer __p, size_t __n)
   272e0:	0540006f          	jal	zero,27334 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x110>
   272e4:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   272e8:	fff00a93          	addi	s5,zero,-1
   272ec:	004ada93          	srli	s5,s5,0x4
   272f0:	003a9513          	slli	a0,s5,0x3
   272f4:	a2cef0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   272f8:	00050b13          	addi	s6,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   272fc:	008b07b3          	add	a5,s6,s0
   27300:	000bb703          	ld	a4,0(s7)
   27304:	00e7b023          	sd	a4,0(a5)
      if (__count > 0)
   27308:	fa804ae3          	blt	zero,s0,272bc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x98>
   2730c:	00840413          	addi	s0,s0,8
   27310:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   27314:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   27318:	01205a63          	bge	zero,s2,2732c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x108>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2731c:	00090613          	addi	a2,s2,0
   27320:	000a0593          	addi	a1,s4,0
   27324:	00040513          	addi	a0,s0,0
   27328:	a88ef0ef          	jal	ra,165b0 <memcpy@plt>
      return __result + __count;
   2732c:	01240433          	add	s0,s0,s2
	if (__p)
   27330:	00098663          	beq	s3,zero,2733c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x118>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27334:	00098513          	addi	a0,s3,0
   27338:	9d8ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2733c:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   27340:	0084b423          	sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   27344:	003a9a93          	slli	s5,s5,0x3
   27348:	015b0ab3          	add	s5,s6,s5
   2734c:	0154b823          	sd	s5,16(s1)
    }
   27350:	04813083          	ld	ra,72(sp)
   27354:	04013403          	ld	s0,64(sp)
   27358:	03813483          	ld	s1,56(sp)
   2735c:	03013903          	ld	s2,48(sp)
   27360:	02813983          	ld	s3,40(sp)
   27364:	02013a03          	ld	s4,32(sp)
   27368:	01813a83          	ld	s5,24(sp)
   2736c:	01013b03          	ld	s6,16(sp)
   27370:	00813b83          	ld	s7,8(sp)
   27374:	05010113          	addi	sp,sp,80
   27378:	00008067          	jalr	zero,0(ra)

000000000002737c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   2737c:	fb010113          	addi	sp,sp,-80
   27380:	04113423          	sd	ra,72(sp)
   27384:	04813023          	sd	s0,64(sp)
   27388:	02913c23          	sd	s1,56(sp)
   2738c:	03213823          	sd	s2,48(sp)
   27390:	03313423          	sd	s3,40(sp)
   27394:	03413023          	sd	s4,32(sp)
   27398:	01513c23          	sd	s5,24(sp)
   2739c:	01613823          	sd	s6,16(sp)
   273a0:	01713423          	sd	s7,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   273a4:	00853903          	ld	s2,8(a0)
   273a8:	00053983          	ld	s3,0(a0)
   273ac:	413907b3          	sub	a5,s2,s3
   273b0:	4037d793          	srai	a5,a5,0x3
	if (max_size() - size() < __n)
   273b4:	fff00713          	addi	a4,zero,-1
   273b8:	00475713          	srli	a4,a4,0x4
   273bc:	04e78263          	beq	a5,a4,27400 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x84>
   273c0:	00050493          	addi	s1,a0,0
   273c4:	00058a13          	addi	s4,a1,0
   273c8:	00060b93          	addi	s7,a2,0
      return __a;
   273cc:	00078713          	addi	a4,a5,0
      if (__a < __b)
   273d0:	03390e63          	beq	s2,s3,2740c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x90>
	const size_type __len = size() + (std::max)(size(), __n);
   273d4:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   273d8:	06f76263          	bltu	a4,a5,2743c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xc0>
   273dc:	00070a93          	addi	s5,a4,0
   273e0:	fff00793          	addi	a5,zero,-1
   273e4:	0047d793          	srli	a5,a5,0x4
   273e8:	00e7f463          	bgeu	a5,a4,273f0 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x74>
   273ec:	00078a93          	addi	s5,a5,0
   273f0:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   273f4:	00000b13          	addi	s6,zero,0
   273f8:	04070e63          	beq	a4,zero,27454 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xd8>
   273fc:	04c0006f          	jal	zero,27448 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xcc>
	  __throw_length_error(__N(__s));
   27400:	0000f517          	auipc	a0,0xf
   27404:	4a050513          	addi	a0,a0,1184 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   27408:	838ef0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2740c:	00100713          	addi	a4,zero,1
   27410:	fc5ff06f          	jal	zero,273d4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   27414:	00040613          	addi	a2,s0,0
   27418:	00098593          	addi	a1,s3,0
   2741c:	000b0513          	addi	a0,s6,0
   27420:	b60ef0ef          	jal	ra,16780 <memmove@plt>
	      ++__new_finish;
   27424:	00840413          	addi	s0,s0,8
   27428:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   2742c:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   27430:	05204263          	blt	zero,s2,27474 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xf8>
      return __result + __count;
   27434:	01240433          	add	s0,s0,s2
      _M_deallocate(pointer __p, size_t __n)
   27438:	0540006f          	jal	zero,2748c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x110>
   2743c:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   27440:	fff00a93          	addi	s5,zero,-1
   27444:	004ada93          	srli	s5,s5,0x4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   27448:	003a9513          	slli	a0,s5,0x3
   2744c:	8d4ef0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   27450:	00050b13          	addi	s6,a0,0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   27454:	008b07b3          	add	a5,s6,s0
   27458:	000bb703          	ld	a4,0(s7)
   2745c:	00e7b023          	sd	a4,0(a5)
      if (__count > 0)
   27460:	fa804ae3          	blt	zero,s0,27414 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x98>
   27464:	00840413          	addi	s0,s0,8
   27468:	008b0433          	add	s0,s6,s0
      ptrdiff_t __count = __last - __first;
   2746c:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   27470:	01205a63          	bge	zero,s2,27484 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x108>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   27474:	00090613          	addi	a2,s2,0
   27478:	000a0593          	addi	a1,s4,0
   2747c:	00040513          	addi	a0,s0,0
   27480:	930ef0ef          	jal	ra,165b0 <memcpy@plt>
      return __result + __count;
   27484:	01240433          	add	s0,s0,s2
	if (__p)
   27488:	00098663          	beq	s3,zero,27494 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x118>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2748c:	00098513          	addi	a0,s3,0
   27490:	880ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   27494:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   27498:	0084b423          	sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2749c:	003a9a93          	slli	s5,s5,0x3
   274a0:	015b0ab3          	add	s5,s6,s5
   274a4:	0154b823          	sd	s5,16(s1)
    }
   274a8:	04813083          	ld	ra,72(sp)
   274ac:	04013403          	ld	s0,64(sp)
   274b0:	03813483          	ld	s1,56(sp)
   274b4:	03013903          	ld	s2,48(sp)
   274b8:	02813983          	ld	s3,40(sp)
   274bc:	02013a03          	ld	s4,32(sp)
   274c0:	01813a83          	ld	s5,24(sp)
   274c4:	01013b03          	ld	s6,16(sp)
   274c8:	00813b83          	ld	s7,8(sp)
   274cc:	05010113          	addi	sp,sp,80
   274d0:	00008067          	jalr	zero,0(ra)

00000000000274d4 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   274d4:	00853783          	ld	a5,8(a0)
   274d8:	01053703          	ld	a4,16(a0)
   274dc:	00e78e63          	beq	a5,a4,274f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)+0x24>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   274e0:	0005b703          	ld	a4,0(a1)
   274e4:	00e7b023          	sd	a4,0(a5)
	    ++this->_M_impl._M_finish;
   274e8:	00853783          	ld	a5,8(a0)
   274ec:	00878793          	addi	a5,a5,8
   274f0:	00f53423          	sd	a5,8(a0)
   274f4:	00008067          	jalr	zero,0(ra)
      vector<_Tp, _Alloc>::
   274f8:	ff010113          	addi	sp,sp,-16
   274fc:	00113423          	sd	ra,8(sp)
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   27500:	00058613          	addi	a2,a1,0
   27504:	00078593          	addi	a1,a5,0
   27508:	0001b317          	auipc	t1,0x1b
   2750c:	e2833303          	ld	t1,-472(t1) # 42330 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@@Base+0x1afb4>
   27510:	000300e7          	jalr	ra,0(t1)
      }
   27514:	00813083          	ld	ra,8(sp)
   27518:	01010113          	addi	sp,sp,16
   2751c:	00008067          	jalr	zero,0(ra)

0000000000027520 <dwarf::line_table::entry::reset(bool)>:

line_table::file::file(string path, uint64_t mtime, uint64_t length)
    : path(path), mtime(mtime), length(length) {}

void line_table::entry::reset(bool is_stmt) {
  address = op_index = 0;
   27520:	00052423          	sw	zero,8(a0)
   27524:	00053023          	sd	zero,0(a0)
  file = nullptr;
   27528:	00053823          	sd	zero,16(a0)
  file_index = line = 1;
   2752c:	00100793          	addi	a5,zero,1
   27530:	00f52e23          	sw	a5,28(a0)
   27534:	00f52c23          	sw	a5,24(a0)
  column = 0;
   27538:	02052023          	sw	zero,32(a0)
  this->is_stmt = is_stmt;
   2753c:	02b50223          	sb	a1,36(a0)
  basic_block = end_sequence = prologue_end = epilogue_begin = false;
   27540:	02050423          	sb	zero,40(a0)
   27544:	020503a3          	sb	zero,39(a0)
   27548:	02050323          	sb	zero,38(a0)
   2754c:	020502a3          	sb	zero,37(a0)
  isa = discriminator = 0;
   27550:	02052823          	sw	zero,48(a0)
   27554:	02052623          	sw	zero,44(a0)
}
   27558:	00008067          	jalr	zero,0(ra)

000000000002755c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>:
line_table::file::file(string path, uint64_t mtime, uint64_t length)
   2755c:	fe010113          	addi	sp,sp,-32
   27560:	00113c23          	sd	ra,24(sp)
   27564:	00813823          	sd	s0,16(sp)
   27568:	00913423          	sd	s1,8(sp)
   2756c:	01213023          	sd	s2,0(sp)
   27570:	00050413          	addi	s0,a0,0
   27574:	00058793          	addi	a5,a1,0
   27578:	00060913          	addi	s2,a2,0
   2757c:	00068493          	addi	s1,a3,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27580:	01050713          	addi	a4,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27584:	00e53023          	sd	a4,0(a0)
      { return _M_dataplus._M_p; }
   27588:	0005b583          	ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2758c:	0087b603          	ld	a2,8(a5)
   27590:	00000693          	addi	a3,zero,0
   27594:	00c58633          	add	a2,a1,a2
   27598:	0001b317          	auipc	t1,0x1b
   2759c:	d7833303          	ld	t1,-648(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   275a0:	000300e7          	jalr	ra,0(t1)
    : path(path), mtime(mtime), length(length) {}
   275a4:	03243023          	sd	s2,32(s0)
   275a8:	02943423          	sd	s1,40(s0)
   275ac:	01813083          	ld	ra,24(sp)
   275b0:	01013403          	ld	s0,16(sp)
   275b4:	00813483          	ld	s1,8(sp)
   275b8:	00013903          	ld	s2,0(sp)
   275bc:	02010113          	addi	sp,sp,32
   275c0:	00008067          	jalr	zero,0(ra)

00000000000275c4 <dwarf::line_table::entry::get_description[abi:cxx11]() const>:

string line_table::entry::get_description() const {
   275c4:	fb010113          	addi	sp,sp,-80
   275c8:	04113423          	sd	ra,72(sp)
   275cc:	04813023          	sd	s0,64(sp)
   275d0:	02913c23          	sd	s1,56(sp)
   275d4:	03213823          	sd	s2,48(sp)
   275d8:	03313423          	sd	s3,40(sp)
   275dc:	03413023          	sd	s4,32(sp)
   275e0:	00050413          	addi	s0,a0,0
   275e4:	00058493          	addi	s1,a1,0
  string res = file->path;
   275e8:	0105b783          	ld	a5,16(a1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   275ec:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   275f0:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   275f4:	0007b583          	ld	a1,0(a5)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   275f8:	0087b603          	ld	a2,8(a5)
   275fc:	00000693          	addi	a3,zero,0
   27600:	00c58633          	add	a2,a1,a2
   27604:	0001b317          	auipc	t1,0x1b
   27608:	d0c33303          	ld	t1,-756(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   2760c:	000300e7          	jalr	ra,0(t1)
  if (line) {
   27610:	01c4a783          	lw	a5,28(s1)
   27614:	02079463          	bne	a5,zero,2763c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x78>
    res.append(":").append(std::to_string(line));
    if (column)
      res.append(":").append(std::to_string(column));
  }
  return res;
}
   27618:	00040513          	addi	a0,s0,0
   2761c:	04813083          	ld	ra,72(sp)
   27620:	04013403          	ld	s0,64(sp)
   27624:	03813483          	ld	s1,56(sp)
   27628:	03013903          	ld	s2,48(sp)
   2762c:	02813983          	ld	s3,40(sp)
   27630:	02013a03          	ld	s4,32(sp)
   27634:	05010113          	addi	sp,sp,80
   27638:	00008067          	jalr	zero,0(ra)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2763c:	00843703          	ld	a4,8(s0)
   27640:	fff00793          	addi	a5,zero,-1
   27644:	0027d793          	srli	a5,a5,0x2
   27648:	00f70e63          	beq	a4,a5,27664 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xa0>
	return _M_append(__s, __n);
   2764c:	00100613          	addi	a2,zero,1
   27650:	00010597          	auipc	a1,0x10
   27654:	1f858593          	addi	a1,a1,504 # 37848 <typeinfo name for dwarf::expr_context+0x28>
   27658:	00040513          	addi	a0,s0,0
   2765c:	d65ee0ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   27660:	0180006f          	jal	zero,27678 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xb4>
	  __throw_length_error(__N(__s));
   27664:	0000f517          	auipc	a0,0xf
   27668:	73450513          	addi	a0,a0,1844 # 36d98 <std::piecewise_construct+0x2b0>
   2766c:	dd5ee0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   27670:	00050493          	addi	s1,a0,0
   27674:	09c0006f          	jal	zero,27710 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
	return _M_append(__s, __n);
   27678:	00050993          	addi	s3,a0,0
    res.append(":").append(std::to_string(line));
   2767c:	01c4aa03          	lw	s4,28(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   27680:	00a00593          	addi	a1,zero,10
   27684:	000a0513          	addi	a0,s4,0
   27688:	0001b317          	auipc	t1,0x1b
   2768c:	e1033303          	ld	t1,-496(t1) # 42498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18154>
   27690:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   27694:	01010793          	addi	a5,sp,16
   27698:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   2769c:	00000613          	addi	a2,zero,0
   276a0:	02051593          	slli	a1,a0,0x20
   276a4:	0205d593          	srli	a1,a1,0x20
   276a8:	00010513          	addi	a0,sp,0
   276ac:	ec5ee0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   276b0:	000a0613          	addi	a2,s4,0
   276b4:	00812583          	lw	a1,8(sp)
   276b8:	00013503          	ld	a0,0(sp)
   276bc:	0001b317          	auipc	t1,0x1b
   276c0:	dfc33303          	ld	t1,-516(t1) # 424b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180d8>
   276c4:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   276c8:	00013583          	ld	a1,0(sp)
      { return _M_string_length; }
   276cc:	00813603          	ld	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   276d0:	0089b703          	ld	a4,8(s3)
   276d4:	fff00793          	addi	a5,zero,-1
   276d8:	0027d793          	srli	a5,a5,0x2
   276dc:	40e787b3          	sub	a5,a5,a4
   276e0:	00c7e863          	bltu	a5,a2,276f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x12c>
	return _M_append(__s, __n);
   276e4:	00098513          	addi	a0,s3,0
   276e8:	cd9ee0ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   276ec:	0380006f          	jal	zero,27724 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x160>
	  __throw_length_error(__N(__s));
   276f0:	0000f517          	auipc	a0,0xf
   276f4:	6a850513          	addi	a0,a0,1704 # 36d98 <std::piecewise_construct+0x2b0>
   276f8:	d49ee0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   276fc:	00050493          	addi	s1,a0,0
   27700:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   27704:	01010793          	addi	a5,sp,16
   27708:	00f50463          	beq	a0,a5,27710 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2770c:	e05ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27710:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   27714:	01250463          	beq	a0,s2,2771c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x158>
   27718:	df9ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2771c:	00048513          	addi	a0,s1,0
   27720:	fd1ee0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   27724:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   27728:	01010793          	addi	a5,sp,16
   2772c:	00f50463          	beq	a0,a5,27734 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x170>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27730:	de1ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
    if (column)
   27734:	0204a783          	lw	a5,32(s1)
   27738:	ee0780e3          	beq	a5,zero,27618 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>
	if (this->max_size() - (this->size() - __n1) < __n2)
   2773c:	00843703          	ld	a4,8(s0)
   27740:	fff00793          	addi	a5,zero,-1
   27744:	0027d793          	srli	a5,a5,0x2
   27748:	00f70e63          	beq	a4,a5,27764 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x1a0>
	return _M_append(__s, __n);
   2774c:	00100613          	addi	a2,zero,1
   27750:	00010597          	auipc	a1,0x10
   27754:	0f858593          	addi	a1,a1,248 # 37848 <typeinfo name for dwarf::expr_context+0x28>
   27758:	00040513          	addi	a0,s0,0
   2775c:	c65ee0ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   27760:	0100006f          	jal	zero,27770 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x1ac>
	  __throw_length_error(__N(__s));
   27764:	0000f517          	auipc	a0,0xf
   27768:	63450513          	addi	a0,a0,1588 # 36d98 <std::piecewise_construct+0x2b0>
   2776c:	cd5ee0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return _M_append(__s, __n);
   27770:	00050993          	addi	s3,a0,0
      res.append(":").append(std::to_string(column));
   27774:	0204a483          	lw	s1,32(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   27778:	00a00593          	addi	a1,zero,10
   2777c:	00048513          	addi	a0,s1,0
   27780:	0001b317          	auipc	t1,0x1b
   27784:	d1833303          	ld	t1,-744(t1) # 42498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18154>
   27788:	000300e7          	jalr	ra,0(t1)
	: allocator_type(__a), _M_p(__dat) { }
   2778c:	01010793          	addi	a5,sp,16
   27790:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   27794:	00000613          	addi	a2,zero,0
   27798:	02051593          	slli	a1,a0,0x20
   2779c:	0205d593          	srli	a1,a1,0x20
   277a0:	00010513          	addi	a0,sp,0
   277a4:	dcdee0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   277a8:	00048613          	addi	a2,s1,0
   277ac:	00812583          	lw	a1,8(sp)
   277b0:	00013503          	ld	a0,0(sp)
   277b4:	0001b317          	auipc	t1,0x1b
   277b8:	d0433303          	ld	t1,-764(t1) # 424b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180d8>
   277bc:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   277c0:	00013583          	ld	a1,0(sp)
      { return _M_string_length; }
   277c4:	00813603          	ld	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   277c8:	0089b703          	ld	a4,8(s3)
   277cc:	fff00793          	addi	a5,zero,-1
   277d0:	0027d793          	srli	a5,a5,0x2
   277d4:	40e787b3          	sub	a5,a5,a4
   277d8:	00c7e863          	bltu	a5,a2,277e8 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x224>
	return _M_append(__s, __n);
   277dc:	00098513          	addi	a0,s3,0
   277e0:	be1ee0ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   277e4:	0280006f          	jal	zero,2780c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x248>
	  __throw_length_error(__N(__s));
   277e8:	0000f517          	auipc	a0,0xf
   277ec:	5b050513          	addi	a0,a0,1456 # 36d98 <std::piecewise_construct+0x2b0>
   277f0:	c51ee0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   277f4:	00050493          	addi	s1,a0,0
   277f8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   277fc:	01010793          	addi	a5,sp,16
   27800:	f0f508e3          	beq	a0,a5,27710 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
   27804:	d0dee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27808:	f09ff06f          	jal	zero,27710 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x14c>
      { return _M_dataplus._M_p; }
   2780c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   27810:	01010793          	addi	a5,sp,16
   27814:	e0f502e3          	beq	a0,a5,27618 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>
   27818:	cf9ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
  return res;
   2781c:	dfdff06f          	jal	zero,27618 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x54>

0000000000027820 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>:
bool line_table::impl::read_file_entry(cursor *cur, bool in_header) {
   27820:	f7010113          	addi	sp,sp,-144
   27824:	08113423          	sd	ra,136(sp)
   27828:	08813023          	sd	s0,128(sp)
   2782c:	06913c23          	sd	s1,120(sp)
   27830:	07213823          	sd	s2,112(sp)
  assert(cur->sec == sec);
   27834:	00053703          	ld	a4,0(a0)
   27838:	0005b783          	ld	a5,0(a1)
   2783c:	02f71863          	bne	a4,a5,2786c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x4c>
   27840:	00050913          	addi	s2,a0,0
   27844:	00058413          	addi	s0,a1,0
   27848:	00060493          	addi	s1,a2,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2784c:	06010793          	addi	a5,sp,96
   27850:	04f13823          	sd	a5,80(sp)
      { _M_string_length = __length; }
   27854:	04013c23          	sd	zero,88(sp)
	__c1 = __c2;
   27858:	06010023          	sb	zero,96(sp)
  cur->string(file_name);
   2785c:	05010593          	addi	a1,sp,80
   27860:	00040513          	addi	a0,s0,0
   27864:	894f50ef          	jal	ra,1c8f8 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   27868:	0240006f          	jal	zero,2788c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x6c>
  assert(cur->sec == sec);
   2786c:	00010697          	auipc	a3,0x10
   27870:	fe468693          	addi	a3,a3,-28 # 37850 <typeinfo name for dwarf::expr_context+0x30>
   27874:	0bb00613          	addi	a2,zero,187
   27878:	00010597          	auipc	a1,0x10
   2787c:	02058593          	addi	a1,a1,32 # 37898 <typeinfo name for dwarf::expr_context+0x78>
   27880:	00010517          	auipc	a0,0x10
   27884:	02050513          	addi	a0,a0,32 # 378a0 <typeinfo name for dwarf::expr_context+0x80>
   27888:	c79ee0ef          	jal	ra,16500 <__assert_fail@plt>
  if (in_header && file_name.empty())
   2788c:	00048663          	beq	s1,zero,27898 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x78>
   27890:	05813783          	ld	a5,88(sp)
   27894:	28078463          	beq	a5,zero,27b1c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2fc>
    while (pos < sec->end) {
   27898:	01043783          	ld	a5,16(s0)
      { return _M_ptr; }
   2789c:	00043583          	ld	a1,0(s0)
   278a0:	0105b703          	ld	a4,16(a1)
   278a4:	02e7fe63          	bgeu	a5,a4,278e0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xc0>
   278a8:	00000493          	addi	s1,zero,0
   278ac:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   278b0:	00178793          	addi	a5,a5,1
   278b4:	00f43823          	sd	a5,16(s0)
   278b8:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   278bc:	07f77693          	andi	a3,a4,127
   278c0:	00c696b3          	sll	a3,a3,a2
   278c4:	00d4e4b3          	or	s1,s1,a3
      if ((byte & 0x80) == 0)
   278c8:	0187171b          	slliw	a4,a4,0x18
   278cc:	4187571b          	sraiw	a4,a4,0x18
   278d0:	00075e63          	bge	a4,zero,278ec <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xcc>
      shift += 7;
   278d4:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   278d8:	0105b703          	ld	a4,16(a1)
   278dc:	fce7eae3          	bltu	a5,a4,278b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x90>
    underflow();
   278e0:	00040513          	addi	a0,s0,0
   278e4:	868f50ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   278e8:	00000493          	addi	s1,zero,0
    while (pos < sec->end) {
   278ec:	01043783          	ld	a5,16(s0)
   278f0:	00043503          	ld	a0,0(s0)
   278f4:	01053703          	ld	a4,16(a0)
   278f8:	02e7fe63          	bgeu	a5,a4,27934 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x114>
    std::uint64_t result = 0;
   278fc:	00000593          	addi	a1,zero,0
    int shift = 0;
   27900:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   27904:	00178793          	addi	a5,a5,1
   27908:	00f43823          	sd	a5,16(s0)
   2790c:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   27910:	07f77693          	andi	a3,a4,127
   27914:	00c696b3          	sll	a3,a3,a2
   27918:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   2791c:	0187171b          	slliw	a4,a4,0x18
   27920:	4187571b          	sraiw	a4,a4,0x18
   27924:	00075e63          	bge	a4,zero,27940 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x120>
      shift += 7;
   27928:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2792c:	01053703          	ld	a4,16(a0)
   27930:	fce7eae3          	bltu	a5,a4,27904 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xe4>
    underflow();
   27934:	00040513          	addi	a0,s0,0
   27938:	814f50ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   2793c:	00000593          	addi	a1,zero,0
  uint64_t mtime = cur->uleb128();
   27940:	04b13423          	sd	a1,72(sp)
    while (pos < sec->end) {
   27944:	01043783          	ld	a5,16(s0)
   27948:	00043503          	ld	a0,0(s0)
   2794c:	01053703          	ld	a4,16(a0)
   27950:	02e7fe63          	bgeu	a5,a4,2798c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x16c>
    std::uint64_t result = 0;
   27954:	00000593          	addi	a1,zero,0
    int shift = 0;
   27958:	00000613          	addi	a2,zero,0
      uint8_t byte = *(uint8_t *)(pos++);
   2795c:	00178793          	addi	a5,a5,1
   27960:	00f43823          	sd	a5,16(s0)
   27964:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   27968:	07f77693          	andi	a3,a4,127
   2796c:	00c696b3          	sll	a3,a3,a2
   27970:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   27974:	0187171b          	slliw	a4,a4,0x18
   27978:	4187571b          	sraiw	a4,a4,0x18
   2797c:	00075e63          	bge	a4,zero,27998 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x178>
      shift += 7;
   27980:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   27984:	01053703          	ld	a4,16(a0)
   27988:	fce7eae3          	bltu	a5,a4,2795c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x13c>
    underflow();
   2798c:	00040513          	addi	a0,s0,0
   27990:	fbdf40ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   27994:	00000593          	addi	a1,zero,0
  uint64_t length = cur->uleb128();
   27998:	04b13023          	sd	a1,64(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   2799c:	00043703          	ld	a4,0(s0)
   279a0:	01043783          	ld	a5,16(s0)
   279a4:	00873703          	ld	a4,8(a4)
   279a8:	40e787b3          	sub	a5,a5,a4
  if (cur->get_section_offset() <= last_file_name_end)
   279ac:	06893703          	ld	a4,104(s2)
   279b0:	16f77a63          	bgeu	a4,a5,27b24 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x304>
  last_file_name_end = cur->get_section_offset();
   279b4:	06f93423          	sd	a5,104(s2)
  if (file_name[0] == '/')
   279b8:	05013783          	ld	a5,80(sp)
   279bc:	0007c703          	lbu	a4,0(a5)
   279c0:	02f00793          	addi	a5,zero,47
   279c4:	02f70e63          	beq	a4,a5,27a00 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1e0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   279c8:	03893703          	ld	a4,56(s2)
   279cc:	04093783          	ld	a5,64(s2)
   279d0:	40e787b3          	sub	a5,a5,a4
   279d4:	4057d793          	srai	a5,a5,0x5
  else if (dir_index < include_directories.size())
   279d8:	0af4f263          	bgeu	s1,a5,27a7c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25c>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   279dc:	05090913          	addi	s2,s2,80
	return *(this->_M_impl._M_start + __n);
   279e0:	00549593          	slli	a1,s1,0x5
   279e4:	05010613          	addi	a2,sp,80
   279e8:	00b705b3          	add	a1,a4,a1
   279ec:	02010513          	addi	a0,sp,32
   279f0:	0001b317          	auipc	t1,0x1b
   279f4:	bd833303          	ld	t1,-1064(t1) # 425c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17d38>
   279f8:	000300e7          	jalr	ra,0(t1)
   279fc:	0240006f          	jal	zero,27a20 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x200>
    file_names.emplace_back(move(file_name), mtime, length);
   27a00:	04010693          	addi	a3,sp,64
   27a04:	04810613          	addi	a2,sp,72
   27a08:	05010593          	addi	a1,sp,80
   27a0c:	05090513          	addi	a0,s2,80
   27a10:	0001b317          	auipc	t1,0x1b
   27a14:	ad833303          	ld	t1,-1320(t1) # 424e8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x16b44>
   27a18:	000300e7          	jalr	ra,0(t1)
   27a1c:	1100006f          	jal	zero,27b2c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x30c>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   27a20:	04010693          	addi	a3,sp,64
   27a24:	04810613          	addi	a2,sp,72
   27a28:	02010593          	addi	a1,sp,32
   27a2c:	00090513          	addi	a0,s2,0
   27a30:	0001b317          	auipc	t1,0x1b
   27a34:	ab833303          	ld	t1,-1352(t1) # 424e8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x16b44>
   27a38:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   27a3c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27a40:	03010793          	addi	a5,sp,48
   27a44:	00f50463          	beq	a0,a5,27a4c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x22c>
   27a48:	ac9ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
  return true;
   27a4c:	00100413          	addi	s0,zero,1
      { return _M_dataplus._M_p; }
   27a50:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   27a54:	06010793          	addi	a5,sp,96
   27a58:	00f50463          	beq	a0,a5,27a60 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x240>
   27a5c:	ab5ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
}
   27a60:	00040513          	addi	a0,s0,0
   27a64:	08813083          	ld	ra,136(sp)
   27a68:	08013403          	ld	s0,128(sp)
   27a6c:	07813483          	ld	s1,120(sp)
   27a70:	07013903          	ld	s2,112(sp)
   27a74:	09010113          	addi	sp,sp,144
   27a78:	00008067          	jalr	zero,0(ra)
                       std::to_string(dir_index));
   27a7c:	01000513          	addi	a0,zero,16
   27a80:	9a1ee0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   27a84:	00050913          	addi	s2,a0,0
   27a88:	00048593          	addi	a1,s1,0
   27a8c:	00010513          	addi	a0,sp,0
   27a90:	0001b317          	auipc	t1,0x1b
   27a94:	87033303          	ld	t1,-1936(t1) # 42300 <std::__cxx11::to_string(unsigned long)@@Base+0x18170>
   27a98:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   27a9c:	00010617          	auipc	a2,0x10
   27aa0:	e1460613          	addi	a2,a2,-492 # 378b0 <typeinfo name for dwarf::expr_context+0x90>
   27aa4:	00000593          	addi	a1,zero,0
   27aa8:	00010513          	addi	a0,sp,0
   27aac:	8e5ee0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   27ab0:	00050593          	addi	a1,a0,0
   27ab4:	02010413          	addi	s0,sp,32
   27ab8:	00040513          	addi	a0,s0,0
   27abc:	9b5ee0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   27ac0:	00040593          	addi	a1,s0,0
   27ac4:	00090513          	addi	a0,s2,0
   27ac8:	ad9ee0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   27acc:	0001b797          	auipc	a5,0x1b
   27ad0:	a8c7b783          	ld	a5,-1396(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   27ad4:	01078793          	addi	a5,a5,16
   27ad8:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   27adc:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27ae0:	03010793          	addi	a5,sp,48
   27ae4:	00f50463          	beq	a0,a5,27aec <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2cc>
   27ae8:	a29ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27aec:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   27af0:	01010793          	addi	a5,sp,16
   27af4:	00f50463          	beq	a0,a5,27afc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2dc>
   27af8:	a19ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
   27afc:	0001b617          	auipc	a2,0x1b
   27b00:	88463603          	ld	a2,-1916(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   27b04:	0001a597          	auipc	a1,0x1a
   27b08:	7ac5b583          	ld	a1,1964(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   27b0c:	00090513          	addi	a0,s2,0
   27b10:	bb1ee0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   27b14:	00050413          	addi	s0,a0,0
   27b18:	0300006f          	jal	zero,27b48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
    return false;
   27b1c:	00000413          	addi	s0,zero,0
   27b20:	f31ff06f          	jal	zero,27a50 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
    return true;
   27b24:	00100413          	addi	s0,zero,1
   27b28:	f29ff06f          	jal	zero,27a50 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
  return true;
   27b2c:	00100413          	addi	s0,zero,1
   27b30:	f21ff06f          	jal	zero,27a50 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x230>
   27b34:	00050413          	addi	s0,a0,0
   27b38:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27b3c:	03010793          	addi	a5,sp,48
   27b40:	00f50463          	beq	a0,a5,27b48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
   27b44:	9cdee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27b48:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   27b4c:	06010793          	addi	a5,sp,96
   27b50:	00f50463          	beq	a0,a5,27b58 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x338>
   27b54:	9bdee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27b58:	00040513          	addi	a0,s0,0
   27b5c:	b95ee0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   27b60:	00050413          	addi	s0,a0,0
   27b64:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27b68:	03010793          	addi	a5,sp,48
   27b6c:	00f50463          	beq	a0,a5,27b74 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x354>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27b70:	9a1ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27b74:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   27b78:	01010793          	addi	a5,sp,16
   27b7c:	00f50463          	beq	a0,a5,27b84 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x364>
   27b80:	991ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
                       std::to_string(dir_index));
   27b84:	00090513          	addi	a0,s2,0
   27b88:	949ee0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   27b8c:	fbdff06f          	jal	zero,27b48 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x328>
      { return _M_dataplus._M_p; }
   27b90:	00050413          	addi	s0,a0,0
   27b94:	fe1ff06f          	jal	zero,27b74 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x354>
   27b98:	00050413          	addi	s0,a0,0
   27b9c:	fe9ff06f          	jal	zero,27b84 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x364>

0000000000027ba0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
line_table::line_table(const shared_ptr<section> &sec, section_offset offset,
   27ba0:	e2010113          	addi	sp,sp,-480
   27ba4:	1c113c23          	sd	ra,472(sp)
   27ba8:	1c813823          	sd	s0,464(sp)
   27bac:	1c913423          	sd	s1,456(sp)
   27bb0:	1d213023          	sd	s2,448(sp)
   27bb4:	1b313c23          	sd	s3,440(sp)
   27bb8:	1b413823          	sd	s4,432(sp)
   27bbc:	1b513423          	sd	s5,424(sp)
   27bc0:	1b613023          	sd	s6,416(sp)
   27bc4:	19713c23          	sd	s7,408(sp)
   27bc8:	19813823          	sd	s8,400(sp)
   27bcc:	19913423          	sd	s9,392(sp)
   27bd0:	19a13023          	sd	s10,384(sp)
   27bd4:	17b13c23          	sd	s11,376(sp)
   27bd8:	00050413          	addi	s0,a0,0
   27bdc:	00058913          	addi	s2,a1,0
   27be0:	00060a93          	addi	s5,a2,0
   27be4:	00068a13          	addi	s4,a3,0
   27be8:	00070493          	addi	s1,a4,0
   27bec:	00078993          	addi	s3,a5,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   27bf0:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   27bf4:	0b000513          	addi	a0,zero,176
   27bf8:	929ee0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   27bfc:	00052423          	sw	zero,8(a0)
   27c00:	00052623          	sw	zero,12(a0)
   27c04:	00052823          	sw	zero,16(a0)
   27c08:	00052a23          	sw	zero,20(a0)
   27c0c:	00052c23          	sw	zero,24(a0)
   27c10:	00052e23          	sw	zero,28(a0)
   27c14:	02053023          	sd	zero,32(a0)
   27c18:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   27c1c:	00100793          	addi	a5,zero,1
   27c20:	02f52823          	sw	a5,48(a0)
   27c24:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   27c28:	0001a797          	auipc	a5,0x1a
   27c2c:	7707b783          	ld	a5,1904(a5) # 42398 <vtable for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x890>
   27c30:	01078793          	addi	a5,a5,16
   27c34:	00f53023          	sd	a5,0(a0)
      : _M_ptr(0), _M_refcount()
   27c38:	02053c23          	sd	zero,56(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   27c3c:	04053023          	sd	zero,64(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   27c40:	04053c23          	sd	zero,88(a0)
   27c44:	06053023          	sd	zero,96(a0)
   27c48:	06053423          	sd	zero,104(a0)
   27c4c:	06053823          	sd	zero,112(a0)
   27c50:	06053c23          	sd	zero,120(a0)
   27c54:	08053023          	sd	zero,128(a0)
   27c58:	08053423          	sd	zero,136(a0)
   27c5c:	08053823          	sd	zero,144(a0)
   27c60:	08053c23          	sd	zero,152(a0)
  impl() : last_file_name_end(0), file_names_complete(false){};
   27c64:	0a053023          	sd	zero,160(a0)
   27c68:	0a050423          	sb	zero,168(a0)
	  _M_pi = __pi;
   27c6c:	00a43423          	sd	a0,8(s0)
   27c70:	03850513          	addi	a0,a0,56
	  __p = __pi->_M_ptr();
   27c74:	00a43023          	sd	a0,0(s0)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27c78:	03010793          	addi	a5,sp,48
   27c7c:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   27c80:	02013423          	sd	zero,40(sp)
   27c84:	02010823          	sb	zero,48(sp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27c88:	05010793          	addi	a5,sp,80
   27c8c:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   27c90:	04013423          	sd	zero,72(sp)
   27c94:	04010823          	sb	zero,80(sp)
      { return _M_string_length; }
   27c98:	0084b603          	ld	a2,8(s1)
  if (cu_comp_dir.empty() || cu_comp_dir.back() == '/')
   27c9c:	00060c63          	beq	a2,zero,27cb4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
      { return _M_dataplus._M_p; }
   27ca0:	0004b583          	ld	a1,0(s1)
   27ca4:	00c587b3          	add	a5,a1,a2
   27ca8:	fff7c703          	lbu	a4,-1(a5)
   27cac:	02f00793          	addi	a5,zero,47
   27cb0:	00f71a63          	bne	a4,a5,27cc4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x124>
	this->_M_assign(__str);
   27cb4:	00048593          	addi	a1,s1,0
   27cb8:	02010513          	addi	a0,sp,32
   27cbc:	f94ee0ef          	jal	ra,16450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   27cc0:	0f00006f          	jal	zero,27db0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27cc4:	15010793          	addi	a5,sp,336
   27cc8:	14f13023          	sd	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   27ccc:	00000693          	addi	a3,zero,0
   27cd0:	00c58633          	add	a2,a1,a2
   27cd4:	14010513          	addi	a0,sp,320
   27cd8:	0001a317          	auipc	t1,0x1a
   27cdc:	63833303          	ld	t1,1592(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   27ce0:	000300e7          	jalr	ra,0(t1)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   27ce4:	02f00713          	addi	a4,zero,47
   27ce8:	00100693          	addi	a3,zero,1
   27cec:	00000613          	addi	a2,zero,0
   27cf0:	14813583          	ld	a1,328(sp)
   27cf4:	14010513          	addi	a0,sp,320
   27cf8:	a59ee0ef          	jal	ra,16750 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>
   27cfc:	0540006f          	jal	zero,27d50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b0>
      { return _M_dataplus._M_p; }
   27d00:	00050493          	addi	s1,a0,0
   27d04:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   27d08:	15010793          	addi	a5,sp,336
   27d0c:	00f50463          	beq	a0,a5,27d14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27d10:	801ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27d14:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   27d18:	05010793          	addi	a5,sp,80
   27d1c:	00f50463          	beq	a0,a5,27d24 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x184>
   27d20:	ff0ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   27d24:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   27d28:	03010793          	addi	a5,sp,48
   27d2c:	00f50463          	beq	a0,a5,27d34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x194>
   27d30:	fe0ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   27d34:	00843503          	ld	a0,8(s0)
   27d38:	00050863          	beq	a0,zero,27d48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1a8>
	  _M_pi->_M_release();
   27d3c:	0001a317          	auipc	t1,0x1a
   27d40:	68c33303          	ld	t1,1676(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   27d44:	000300e7          	jalr	ra,0(t1)
   27d48:	00048513          	addi	a0,s1,0
   27d4c:	9a5ee0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   27d50:	02013503          	ld	a0,32(sp)
   27d54:	14013783          	ld	a5,320(sp)
	if (__str._M_is_local())
   27d58:	15010713          	addi	a4,sp,336
   27d5c:	12e78463          	beq	a5,a4,27e84 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2e4>
	    if (!_M_is_local())
   27d60:	03010713          	addi	a4,sp,48
   27d64:	00e51463          	bne	a0,a4,27d6c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
   27d68:	0100106f          	jal	zero,28d78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11d8>
		    __capacity = _M_allocated_capacity;
   27d6c:	03013703          	ld	a4,48(sp)
      { _M_dataplus._M_p = __p; }
   27d70:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   27d74:	14813783          	ld	a5,328(sp)
   27d78:	02f13423          	sd	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   27d7c:	15013783          	ld	a5,336(sp)
   27d80:	02f13823          	sd	a5,48(sp)
	    if (__data)
   27d84:	00051463          	bne	a0,zero,27d8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   27d88:	0040106f          	jal	zero,28d8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11ec>
      { _M_dataplus._M_p = __p; }
   27d8c:	14a13023          	sd	a0,320(sp)
      { _M_allocated_capacity = __capacity; }
   27d90:	14e13823          	sd	a4,336(sp)
      { _M_string_length = __length; }
   27d94:	14013423          	sd	zero,328(sp)
      { return _M_dataplus._M_p; }
   27d98:	14013783          	ld	a5,320(sp)
   27d9c:	00078023          	sb	zero,0(a5)
   27da0:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   27da4:	15010793          	addi	a5,sp,336
   27da8:	00f50463          	beq	a0,a5,27db0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
   27dac:	f64ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   27db0:	00093b03          	ld	s6,0(s2)
      : _M_pi(__r._M_pi)
   27db4:	00893483          	ld	s1,8(s2)
	if (_M_pi != nullptr)
   27db8:	00049463          	bne	s1,zero,27dc0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
   27dbc:	7950006f          	jal	zero,28d50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11b0>
    if (__is_single_threaded())
   27dc0:	0001a797          	auipc	a5,0x1a
   27dc4:	6c07b783          	ld	a5,1728(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27dc8:	0007c783          	lbu	a5,0(a5)
   27dcc:	0e078c63          	beq	a5,zero,27ec4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x324>
  { *__mem += __val; }
   27dd0:	0304a783          	lw	a5,48(s1)
   27dd4:	0017879b          	addiw	a5,a5,1
   27dd8:	02f4a823          	sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   27ddc:	01613423          	sd	s6,8(sp)
      : _M_pi(__r._M_pi)
   27de0:	00913823          	sd	s1,16(sp)
    if (__is_single_threaded())
   27de4:	0001a797          	auipc	a5,0x1a
   27de8:	69c7b783          	ld	a5,1692(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27dec:	0007c783          	lbu	a5,0(a5)
   27df0:	0e078263          	beq	a5,zero,27ed4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x334>
  { *__mem += __val; }
   27df4:	0304a783          	lw	a5,48(s1)
   27df8:	0017879b          	addiw	a5,a5,1
   27dfc:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   27e00:	008b3783          	ld	a5,8(s6)
   27e04:	015787b3          	add	a5,a5,s5
   27e08:	00f13c23          	sd	a5,24(sp)
    if (__is_single_threaded())
   27e0c:	0001a797          	auipc	a5,0x1a
   27e10:	6747b783          	ld	a5,1652(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27e14:	0007c783          	lbu	a5,0(a5)
   27e18:	0c078663          	beq	a5,zero,27ee4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x344>
    _Atomic_word __result = *__mem;
   27e1c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   27e20:	fff5079b          	addiw	a5,a0,-1
   27e24:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27e28:	00100793          	addi	a5,zero,1
   27e2c:	00f50463          	beq	a0,a5,27e34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x294>
   27e30:	7350006f          	jal	zero,28d64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
	_M_dispose();
   27e34:	0004b783          	ld	a5,0(s1)
   27e38:	0107b783          	ld	a5,16(a5)
   27e3c:	00048513          	addi	a0,s1,0
   27e40:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27e44:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27e48:	0001a797          	auipc	a5,0x1a
   27e4c:	6387b783          	ld	a5,1592(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27e50:	0007c783          	lbu	a5,0(a5)
   27e54:	0a078063          	beq	a5,zero,27ef4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x354>
    _Atomic_word __result = *__mem;
   27e58:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   27e5c:	fff5079b          	addiw	a5,a0,-1
   27e60:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27e64:	00100793          	addi	a5,zero,1
   27e68:	00f50463          	beq	a0,a5,27e70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d0>
   27e6c:	6f90006f          	jal	zero,28d64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
	    _M_destroy();
   27e70:	0004b783          	ld	a5,0(s1)
   27e74:	0187b783          	ld	a5,24(a5)
   27e78:	00048513          	addi	a0,s1,0
   27e7c:	000780e7          	jalr	ra,0(a5)
   27e80:	6e50006f          	jal	zero,28d64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c4>
      { return _M_string_length; }
   27e84:	14813603          	ld	a2,328(sp)
		if (__str.size())
   27e88:	00061e63          	bne	a2,zero,27ea4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x304>
      { return _M_string_length; }
   27e8c:	14813703          	ld	a4,328(sp)
      { _M_string_length = __length; }
   27e90:	02e13423          	sd	a4,40(sp)
   27e94:	02013783          	ld	a5,32(sp)
   27e98:	00e787b3          	add	a5,a5,a4
   27e9c:	00078023          	sb	zero,0(a5)
      }
   27ea0:	ef5ff06f          	jal	zero,27d94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>
	if (__n == 1)
   27ea4:	00100793          	addi	a5,zero,1
   27ea8:	00f60863          	beq	a2,a5,27eb8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x318>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27eac:	15010593          	addi	a1,sp,336
   27eb0:	f00ee0ef          	jal	ra,165b0 <memcpy@plt>
   27eb4:	fd9ff06f          	jal	zero,27e8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2ec>
	__c1 = __c2;
   27eb8:	15014783          	lbu	a5,336(sp)
   27ebc:	00f50023          	sb	a5,0(a0)
      }
   27ec0:	fcdff06f          	jal	zero,27e8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2ec>
      __atomic_add(__mem, __val);
   27ec4:	00100593          	addi	a1,zero,1
   27ec8:	03048513          	addi	a0,s1,48
   27ecc:	c84ee0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   27ed0:	f0dff06f          	jal	zero,27ddc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x23c>
   27ed4:	00100593          	addi	a1,zero,1
   27ed8:	03048513          	addi	a0,s1,48
   27edc:	c74ee0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   27ee0:	f21ff06f          	jal	zero,27e00 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x260>
      return __exchange_and_add(__mem, __val);
   27ee4:	fff00593          	addi	a1,zero,-1
   27ee8:	03048513          	addi	a0,s1,48
   27eec:	c94ee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27ef0:	f39ff06f          	jal	zero,27e28 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x288>
   27ef4:	fff00593          	addi	a1,zero,-1
   27ef8:	03448513          	addi	a0,s1,52
   27efc:	c84ee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   27f00:	f65ff06f          	jal	zero,27e64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2c4>
      : _M_ptr(__r._M_ptr), _M_refcount()
   27f04:	16013703          	ld	a4,352(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   27f08:	16813783          	ld	a5,360(sp)
	__r._M_pi = _M_pi;
   27f0c:	16013423          	sd	zero,360(sp)
	__r._M_ptr = nullptr;
   27f10:	16013023          	sd	zero,352(sp)
   27f14:	00e4b023          	sd	a4,0(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   27f18:	0084b903          	ld	s2,8(s1)
	__r._M_pi = _M_pi;
   27f1c:	00f4b423          	sd	a5,8(s1)
	if (_M_pi != nullptr)
   27f20:	0a090a63          	beq	s2,zero,27fd4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    if (__is_single_threaded())
   27f24:	0001a797          	auipc	a5,0x1a
   27f28:	55c7b783          	ld	a5,1372(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27f2c:	0007c783          	lbu	a5,0(a5)
   27f30:	06078263          	beq	a5,zero,27f94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3f4>
    _Atomic_word __result = *__mem;
   27f34:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   27f38:	fff7871b          	addiw	a4,a5,-1
   27f3c:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27f40:	00100713          	addi	a4,zero,1
   27f44:	08e79863          	bne	a5,a4,27fd4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
	_M_dispose();
   27f48:	00093783          	ld	a5,0(s2)
   27f4c:	0107b783          	ld	a5,16(a5)
   27f50:	00090513          	addi	a0,s2,0
   27f54:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   27f58:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   27f5c:	0001a797          	auipc	a5,0x1a
   27f60:	5247b783          	ld	a5,1316(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27f64:	0007c783          	lbu	a5,0(a5)
   27f68:	10078a63          	beq	a5,zero,2807c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4dc>
    _Atomic_word __result = *__mem;
   27f6c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   27f70:	fff5079b          	addiw	a5,a0,-1
   27f74:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   27f78:	00100793          	addi	a5,zero,1
   27f7c:	02f51663          	bne	a0,a5,27fa8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x408>
	    _M_destroy();
   27f80:	00093783          	ld	a5,0(s2)
   27f84:	0187b783          	ld	a5,24(a5)
   27f88:	00090513          	addi	a0,s2,0
   27f8c:	000780e7          	jalr	ra,0(a5)
   27f90:	0180006f          	jal	zero,27fa8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x408>
      return __exchange_and_add(__mem, __val);
   27f94:	fff00593          	addi	a1,zero,-1
   27f98:	03090513          	addi	a0,s2,48
   27f9c:	be4ee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27fa0:	00100793          	addi	a5,zero,1
   27fa4:	faf502e3          	beq	a0,a5,27f48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3a8>
	if (_M_pi != nullptr)
   27fa8:	16813483          	ld	s1,360(sp)
   27fac:	02048463          	beq	s1,zero,27fd4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    if (__is_single_threaded())
   27fb0:	0001a797          	auipc	a5,0x1a
   27fb4:	4d07b783          	ld	a5,1232(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27fb8:	0007c783          	lbu	a5,0(a5)
   27fbc:	0c078863          	beq	a5,zero,2808c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ec>
    _Atomic_word __result = *__mem;
   27fc0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   27fc4:	fff5079b          	addiw	a5,a0,-1
   27fc8:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   27fcc:	00100793          	addi	a5,zero,1
   27fd0:	0cf50663          	beq	a0,a5,2809c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4fc>
      { return _M_ptr; }
   27fd4:	00043783          	ld	a5,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   27fd8:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   27fdc:	0087b483          	ld	s1,8(a5)
	if (_M_pi != nullptr)
   27fe0:	54048ae3          	beq	s1,zero,28d34 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1194>
    if (__is_single_threaded())
   27fe4:	0001a797          	auipc	a5,0x1a
   27fe8:	49c7b783          	ld	a5,1180(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   27fec:	0007c783          	lbu	a5,0(a5)
   27ff0:	10078463          	beq	a5,zero,280f8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x558>
  { *__mem += __val; }
   27ff4:	0304a783          	lw	a5,48(s1)
   27ff8:	0017879b          	addiw	a5,a5,1
   27ffc:	02f4a823          	sw	a5,48(s1)
   28000:	0304a783          	lw	a5,48(s1)
   28004:	0017879b          	addiw	a5,a5,1
   28008:	02f4a823          	sw	a5,48(s1)
   2800c:	00893a83          	ld	s5,8(s2)
   28010:	01213423          	sd	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   28014:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   28018:	00913823          	sd	s1,16(sp)
	if (_M_pi != nullptr)
   2801c:	500908e3          	beq	s2,zero,28d2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x118c>
    if (__is_single_threaded())
   28020:	0001a797          	auipc	a5,0x1a
   28024:	4607b783          	ld	a5,1120(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28028:	0007c783          	lbu	a5,0(a5)
   2802c:	0e078c63          	beq	a5,zero,28124 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x584>
    _Atomic_word __result = *__mem;
   28030:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   28034:	fff5079b          	addiw	a5,a0,-1
   28038:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2803c:	00100793          	addi	a5,zero,1
   28040:	0ef50a63          	beq	a0,a5,28134 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x594>
struct cursor {
   28044:	01513c23          	sd	s5,24(sp)
	if (_M_pi != nullptr)
   28048:	02048463          	beq	s1,zero,28070 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
    if (__is_single_threaded())
   2804c:	0001a797          	auipc	a5,0x1a
   28050:	4347b783          	ld	a5,1076(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28054:	0007c783          	lbu	a5,0(a5)
   28058:	12078c63          	beq	a5,zero,28190 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f0>
    _Atomic_word __result = *__mem;
   2805c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   28060:	fff5079b          	addiw	a5,a0,-1
   28064:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28068:	00100793          	addi	a5,zero,1
   2806c:	12f50a63          	beq	a0,a5,281a0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x600>
  cur.skip_initial_length();
   28070:	00810513          	addi	a0,sp,8
   28074:	f40f40ef          	jal	ra,1c7b4 <dwarf::cursor::skip_initial_length()>
   28078:	1840006f          	jal	zero,281fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x65c>
      return __exchange_and_add(__mem, __val);
   2807c:	fff00593          	addi	a1,zero,-1
   28080:	03490513          	addi	a0,s2,52
   28084:	afcee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28088:	ef1ff06f          	jal	zero,27f78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3d8>
   2808c:	fff00593          	addi	a1,zero,-1
   28090:	03048513          	addi	a0,s1,48
   28094:	aecee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28098:	f35ff06f          	jal	zero,27fcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x42c>
	_M_dispose();
   2809c:	0004b783          	ld	a5,0(s1)
   280a0:	0107b783          	ld	a5,16(a5)
   280a4:	00048513          	addi	a0,s1,0
   280a8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   280ac:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   280b0:	0001a797          	auipc	a5,0x1a
   280b4:	3d07b783          	ld	a5,976(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   280b8:	0007c783          	lbu	a5,0(a5)
   280bc:	02078663          	beq	a5,zero,280e8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x548>
    _Atomic_word __result = *__mem;
   280c0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   280c4:	fff5079b          	addiw	a5,a0,-1
   280c8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   280cc:	00100793          	addi	a5,zero,1
   280d0:	f0f512e3          	bne	a0,a5,27fd4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
	    _M_destroy();
   280d4:	0004b783          	ld	a5,0(s1)
   280d8:	0187b783          	ld	a5,24(a5)
   280dc:	00048513          	addi	a0,s1,0
   280e0:	000780e7          	jalr	ra,0(a5)
   280e4:	ef1ff06f          	jal	zero,27fd4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
      return __exchange_and_add(__mem, __val);
   280e8:	fff00593          	addi	a1,zero,-1
   280ec:	03448513          	addi	a0,s1,52
   280f0:	a90ee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   280f4:	fd9ff06f          	jal	zero,280cc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x52c>
      __atomic_add(__mem, __val);
   280f8:	00100593          	addi	a1,zero,1
   280fc:	03048513          	addi	a0,s1,48
   28100:	a50ee0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   28104:	0001a797          	auipc	a5,0x1a
   28108:	37c7b783          	ld	a5,892(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2810c:	0007c783          	lbu	a5,0(a5)
   28110:	ee0798e3          	bne	a5,zero,28000 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x460>
      __atomic_add(__mem, __val);
   28114:	00100593          	addi	a1,zero,1
   28118:	03048513          	addi	a0,s1,48
   2811c:	a34ee0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   28120:	eedff06f          	jal	zero,2800c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x46c>
      return __exchange_and_add(__mem, __val);
   28124:	fff00593          	addi	a1,zero,-1
   28128:	03090513          	addi	a0,s2,48
   2812c:	a54ee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28130:	f0dff06f          	jal	zero,2803c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x49c>
	_M_dispose();
   28134:	00093783          	ld	a5,0(s2)
   28138:	0107b783          	ld	a5,16(a5)
   2813c:	00090513          	addi	a0,s2,0
   28140:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   28144:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   28148:	0001a797          	auipc	a5,0x1a
   2814c:	3387b783          	ld	a5,824(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   28150:	0007c783          	lbu	a5,0(a5)
   28154:	02078663          	beq	a5,zero,28180 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e0>
    _Atomic_word __result = *__mem;
   28158:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   2815c:	fff5079b          	addiw	a5,a0,-1
   28160:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   28164:	00100793          	addi	a5,zero,1
   28168:	ecf51ee3          	bne	a0,a5,28044 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a4>
	    _M_destroy();
   2816c:	00093783          	ld	a5,0(s2)
   28170:	0187b783          	ld	a5,24(a5)
   28174:	00090513          	addi	a0,s2,0
   28178:	000780e7          	jalr	ra,0(a5)
   2817c:	ec9ff06f          	jal	zero,28044 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a4>
      return __exchange_and_add(__mem, __val);
   28180:	fff00593          	addi	a1,zero,-1
   28184:	03490513          	addi	a0,s2,52
   28188:	9f8ee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2818c:	fd9ff06f          	jal	zero,28164 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c4>
   28190:	fff00593          	addi	a1,zero,-1
   28194:	03048513          	addi	a0,s1,48
   28198:	9e8ee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2819c:	ecdff06f          	jal	zero,28068 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c8>
	_M_dispose();
   281a0:	0004b783          	ld	a5,0(s1)
   281a4:	0107b783          	ld	a5,16(a5)
   281a8:	00048513          	addi	a0,s1,0
   281ac:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   281b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   281b4:	0001a797          	auipc	a5,0x1a
   281b8:	2cc7b783          	ld	a5,716(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   281bc:	0007c783          	lbu	a5,0(a5)
   281c0:	02078663          	beq	a5,zero,281ec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64c>
    _Atomic_word __result = *__mem;
   281c4:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   281c8:	fff5079b          	addiw	a5,a0,-1
   281cc:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   281d0:	00100793          	addi	a5,zero,1
   281d4:	e8f51ee3          	bne	a0,a5,28070 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
	    _M_destroy();
   281d8:	0004b783          	ld	a5,0(s1)
   281dc:	0187b783          	ld	a5,24(a5)
   281e0:	00048513          	addi	a0,s1,0
   281e4:	000780e7          	jalr	ra,0(a5)
   281e8:	e89ff06f          	jal	zero,28070 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
      return __exchange_and_add(__mem, __val);
   281ec:	fff00593          	addi	a1,zero,-1
   281f0:	03448513          	addi	a0,s1,52
   281f4:	98cee0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   281f8:	fd9ff06f          	jal	zero,281d0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x630>
      { return _M_ptr; }
   281fc:	00043783          	ld	a5,0(s0)
   28200:	0007b783          	ld	a5,0(a5)
  m->sec->addr_size = cu_addr_size;
   28204:	0347a023          	sw	s4,32(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28208:	00813783          	ld	a5,8(sp)
   2820c:	0107b703          	ld	a4,16(a5)
   28210:	01813783          	ld	a5,24(sp)
   28214:	40f70633          	sub	a2,a4,a5
   28218:	00100693          	addi	a3,zero,1
   2821c:	00c6f463          	bgeu	a3,a2,28224 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x684>
   28220:	00e7e663          	bltu	a5,a4,2822c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68c>
      underflow();
   28224:	00810513          	addi	a0,sp,8
   28228:	f24f40ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2822c:	01813703          	ld	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   28230:	00813783          	ld	a5,8(sp)
   28234:	01c7a783          	lw	a5,28(a5)
   28238:	04079263          	bne	a5,zero,2827c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6dc>
        val |= ((uint64_t)p[i]) << (i * 8);
   2823c:	00174783          	lbu	a5,1(a4)
   28240:	00879793          	slli	a5,a5,0x8
   28244:	00074683          	lbu	a3,0(a4)
   28248:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   2824c:	00270713          	addi	a4,a4,2
   28250:	00e13c23          	sd	a4,24(sp)
    return (T)val;
   28254:	03079493          	slli	s1,a5,0x30
   28258:	0304d493          	srli	s1,s1,0x30
  if (version < 2 || version > 4)
   2825c:	ffe7879b          	addiw	a5,a5,-2
   28260:	03079793          	slli	a5,a5,0x30
   28264:	0307d793          	srli	a5,a5,0x30
   28268:	00200713          	addi	a4,zero,2
   2826c:	02f76263          	bltu	a4,a5,28290 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6f0>
  section_length header_length = cur.offset();
   28270:	00810513          	addi	a0,sp,8
   28274:	e65f40ef          	jal	ra,1d0d8 <dwarf::cursor::offset()>
   28278:	0bc0006f          	jal	zero,28334 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x794>
        val = (val << 8) | (uint64_t)p[i];
   2827c:	00074783          	lbu	a5,0(a4)
   28280:	00879793          	slli	a5,a5,0x8
   28284:	00174683          	lbu	a3,1(a4)
   28288:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   2828c:	fc1ff06f          	jal	zero,2824c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6ac>
                       std::to_string(version));
   28290:	01000513          	addi	a0,zero,16
   28294:	98cee0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   28298:	00050913          	addi	s2,a0,0
   2829c:	00048593          	addi	a1,s1,0
   282a0:	14010493          	addi	s1,sp,320
   282a4:	00048513          	addi	a0,s1,0
   282a8:	0001a317          	auipc	t1,0x1a
   282ac:	1e833303          	ld	t1,488(t1) # 42490 <std::__cxx11::to_string(int)@@Base+0x27884>
   282b0:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   282b4:	0000f617          	auipc	a2,0xf
   282b8:	62c60613          	addi	a2,a2,1580 # 378e0 <typeinfo name for dwarf::expr_context+0xc0>
   282bc:	00000593          	addi	a1,zero,0
   282c0:	00048513          	addi	a0,s1,0
   282c4:	8ccee0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   282c8:	00050593          	addi	a1,a0,0
   282cc:	12010493          	addi	s1,sp,288
   282d0:	00048513          	addi	a0,s1,0
   282d4:	99cee0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   282d8:	00048593          	addi	a1,s1,0
   282dc:	00090513          	addi	a0,s2,0
   282e0:	ac0ee0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   282e4:	0001a797          	auipc	a5,0x1a
   282e8:	2747b783          	ld	a5,628(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   282ec:	01078793          	addi	a5,a5,16
   282f0:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   282f4:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   282f8:	13010793          	addi	a5,sp,304
   282fc:	00f50463          	beq	a0,a5,28304 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x764>
   28300:	a10ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28304:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28308:	15010793          	addi	a5,sp,336
   2830c:	00f50463          	beq	a0,a5,28314 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x774>
   28310:	a00ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
   28314:	0001a617          	auipc	a2,0x1a
   28318:	06c63603          	ld	a2,108(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   2831c:	0001a597          	auipc	a1,0x1a
   28320:	f945b583          	ld	a1,-108(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   28324:	00090513          	addi	a0,s2,0
   28328:	b98ee0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   2832c:	00050493          	addi	s1,a0,0
   28330:	6ec0006f          	jal	zero,28a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
  section_offset get_section_offset() const { return pos - sec->begin; }
   28334:	01813703          	ld	a4,24(sp)
      { return _M_ptr; }
   28338:	00813683          	ld	a3,8(sp)
   2833c:	00043903          	ld	s2,0(s0)
   28340:	0086b783          	ld	a5,8(a3)
   28344:	40f707b3          	sub	a5,a4,a5
  m->program_offset = cur.get_section_offset() + header_length;
   28348:	00a787b3          	add	a5,a5,a0
   2834c:	00f93823          	sd	a5,16(s2)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28350:	0106b783          	ld	a5,16(a3)
   28354:	00f76663          	bltu	a4,a5,28360 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7c0>
      underflow();
   28358:	00810513          	addi	a0,sp,8
   2835c:	df0f40ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   28360:	01813783          	ld	a5,24(sp)
   28364:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   28368:	01c72683          	lw	a3,28(a4)
   2836c:	16068ee3          	beq	a3,zero,28ce8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1148>
        val = (val << 8) | (uint64_t)p[i];
   28370:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   28374:	1790006f          	jal	zero,28cec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28378:	01073703          	ld	a4,16(a4)
   2837c:	00e7e663          	bltu	a5,a4,28388 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e8>
      underflow();
   28380:	00810513          	addi	a0,sp,8
   28384:	dc8f40ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   28388:	01813783          	ld	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   2838c:	00813703          	ld	a4,8(sp)
   28390:	01c72703          	lw	a4,28(a4)
   28394:	10070ee3          	beq	a4,zero,28cb0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1110>
        val = (val << 8) | (uint64_t)p[i];
   28398:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2839c:	1190006f          	jal	zero,28cb4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1114>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   283a0:	0001a797          	auipc	a5,0x1a
   283a4:	1b87b783          	ld	a5,440(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   283a8:	01078793          	addi	a5,a5,16
   283ac:	00f93023          	sd	a5,0(s2)
                       " be 0 in line number table");
   283b0:	0001a617          	auipc	a2,0x1a
   283b4:	fd063603          	ld	a2,-48(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   283b8:	0001a597          	auipc	a1,0x1a
   283bc:	ef85b583          	ld	a1,-264(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   283c0:	00090513          	addi	a0,s2,0
   283c4:	afcee0ef          	jal	ra,166c0 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   283c8:	01813783          	ld	a5,24(sp)
   283cc:	00813683          	ld	a3,8(sp)
    if (sec->ord == byte_order::lsb) {
   283d0:	01c6a703          	lw	a4,28(a3)
   283d4:	0a0708e3          	beq	a4,zero,28c84 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10e4>
        val = (val << 8) | (uint64_t)p[i];
   283d8:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   283dc:	0ad0006f          	jal	zero,28c88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10e8>
    const unsigned char *p = (const unsigned char *)pos;
   283e0:	01813783          	ld	a5,24(sp)
   283e4:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   283e8:	01c72683          	lw	a3,28(a4)
   283ec:	060688e3          	beq	a3,zero,28c5c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10bc>
        val = (val << 8) | (uint64_t)p[i];
   283f0:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   283f4:	06d0006f          	jal	zero,28c60 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c0>
    const unsigned char *p = (const unsigned char *)pos;
   283f8:	01813783          	ld	a5,24(sp)
   283fc:	00813703          	ld	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   28400:	01c72683          	lw	a3,28(a4)
   28404:	020684e3          	beq	a3,zero,28c2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x108c>
        val = (val << 8) | (uint64_t)p[i];
   28408:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2840c:	0250006f          	jal	zero,28c30 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1090>
    throw format_error("line_range cannot be 0 in line number table");
   28410:	01000513          	addi	a0,zero,16
   28414:	80cee0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   28418:	00050913          	addi	s2,a0,0
   2841c:	0000f597          	auipc	a1,0xf
   28420:	53458593          	addi	a1,a1,1332 # 37950 <typeinfo name for dwarf::expr_context+0x130>
   28424:	b4cee0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   28428:	0001a797          	auipc	a5,0x1a
   2842c:	1307b783          	ld	a5,304(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   28430:	01078793          	addi	a5,a5,16
   28434:	00f93023          	sd	a5,0(s2)
   28438:	0001a617          	auipc	a2,0x1a
   2843c:	f4863603          	ld	a2,-184(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   28440:	0001a597          	auipc	a1,0x1a
   28444:	e705b583          	ld	a1,-400(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   28448:	00090513          	addi	a0,s2,0
   2844c:	a74ee0ef          	jal	ra,166c0 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   28450:	01813783          	ld	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   28454:	00813703          	ld	a4,8(sp)
   28458:	01c72703          	lw	a4,28(a4)
   2845c:	76070663          	beq	a4,zero,28bc8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1028>
        val = (val << 8) | (uint64_t)p[i];
   28460:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   28464:	7680006f          	jal	zero,28bcc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x102c>
	  _M_default_append(__new_size - size());
   28468:	40b785b3          	sub	a1,a5,a1
   2846c:	02050513          	addi	a0,a0,32
   28470:	0001a317          	auipc	t1,0x1a
   28474:	06033303          	ld	t1,96(t1) # 424d0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)@@Base+0x17e50>
   28478:	000300e7          	jalr	ra,0(t1)
   2847c:	7840006f          	jal	zero,28c00 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
    const unsigned char *p = (const unsigned char *)pos;
   28480:	01813683          	ld	a3,24(sp)
    if (sec->ord == byte_order::lsb) {
   28484:	00813783          	ld	a5,8(sp)
   28488:	01c7a783          	lw	a5,28(a5)
   2848c:	6e078063          	beq	a5,zero,28b6c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfcc>
        val = (val << 8) | (uint64_t)p[i];
   28490:	0006c703          	lbu	a4,0(a3)
      for (unsigned i = 0; i < sizeof(T); i++)
   28494:	6dc0006f          	jal	zero,28b70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfd0>
                         std::to_string(i) + ", got " + std::to_string(length));
   28498:	01000513          	addi	a0,zero,16
   2849c:	f85ed0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   284a0:	00050993          	addi	s3,a0,0
      throw format_error("expected " + std::to_string(opcode_lengths[i]) +
   284a4:	000b0593          	addi	a1,s6,0
   284a8:	10010a13          	addi	s4,sp,256
   284ac:	000a0513          	addi	a0,s4,0
   284b0:	0001a317          	auipc	t1,0x1a
   284b4:	fe033303          	ld	t1,-32(t1) # 42490 <std::__cxx11::to_string(int)@@Base+0x27884>
   284b8:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   284bc:	0000f617          	auipc	a2,0xf
   284c0:	4c460613          	addi	a2,a2,1220 # 37980 <typeinfo name for dwarf::expr_context+0x160>
   284c4:	00000593          	addi	a1,zero,0
   284c8:	000a0513          	addi	a0,s4,0
   284cc:	ec5ed0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   284d0:	00050593          	addi	a1,a0,0
   284d4:	0e010a13          	addi	s4,sp,224
   284d8:	000a0513          	addi	a0,s4,0
   284dc:	f95ed0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   284e0:	0000f597          	auipc	a1,0xf
   284e4:	4b058593          	addi	a1,a1,1200 # 37990 <typeinfo name for dwarf::expr_context+0x170>
   284e8:	000a0513          	addi	a0,s4,0
   284ec:	ab4ee0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   284f0:	00050593          	addi	a1,a0,0
   284f4:	0c010a13          	addi	s4,sp,192
   284f8:	000a0513          	addi	a0,s4,0
   284fc:	f75ed0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   28500:	0009059b          	addiw	a1,s2,0
   28504:	12010913          	addi	s2,sp,288
   28508:	00090513          	addi	a0,s2,0
   2850c:	0001a317          	auipc	t1,0x1a
   28510:	fe433303          	ld	t1,-28(t1) # 424f0 <std::__cxx11::to_string(unsigned int)@@Base+0x18040>
   28514:	000300e7          	jalr	ra,0(t1)
                         " arguments for line number opcode " +
   28518:	00090613          	addi	a2,s2,0
   2851c:	000a0593          	addi	a1,s4,0
   28520:	0a010513          	addi	a0,sp,160
   28524:	0001a317          	auipc	t1,0x1a
   28528:	e9c33303          	ld	t1,-356(t1) # 423c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17e98>
   2852c:	000300e7          	jalr	ra,0(t1)
   28530:	0000f597          	auipc	a1,0xf
   28534:	48858593          	addi	a1,a1,1160 # 379b8 <typeinfo name for dwarf::expr_context+0x198>
   28538:	0a010513          	addi	a0,sp,160
   2853c:	a64ee0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   28540:	00050593          	addi	a1,a0,0
   28544:	08010913          	addi	s2,sp,128
   28548:	00090513          	addi	a0,s2,0
   2854c:	f25ed0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   28550:	00048593          	addi	a1,s1,0
   28554:	14010493          	addi	s1,sp,320
   28558:	00048513          	addi	a0,s1,0
   2855c:	0001a317          	auipc	t1,0x1a
   28560:	f3433303          	ld	t1,-204(t1) # 42490 <std::__cxx11::to_string(int)@@Base+0x27884>
   28564:	000300e7          	jalr	ra,0(t1)
   28568:	00048613          	addi	a2,s1,0
   2856c:	00090593          	addi	a1,s2,0
   28570:	06010513          	addi	a0,sp,96
   28574:	0001a317          	auipc	t1,0x1a
   28578:	e4c33303          	ld	t1,-436(t1) # 423c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17e98>
   2857c:	000300e7          	jalr	ra,0(t1)
      : std::runtime_error(what_arg) {}
   28580:	06010593          	addi	a1,sp,96
   28584:	00098513          	addi	a0,s3,0
   28588:	818ee0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2858c:	0001a797          	auipc	a5,0x1a
   28590:	fcc7b783          	ld	a5,-52(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   28594:	01078793          	addi	a5,a5,16
   28598:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   2859c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   285a0:	07010793          	addi	a5,sp,112
   285a4:	00f50463          	beq	a0,a5,285ac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0c>
   285a8:	f69ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   285ac:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   285b0:	15010793          	addi	a5,sp,336
   285b4:	00f50463          	beq	a0,a5,285bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa1c>
   285b8:	f59ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   285bc:	08013503          	ld	a0,128(sp)
	if (!_M_is_local())
   285c0:	09010793          	addi	a5,sp,144
   285c4:	00f50463          	beq	a0,a5,285cc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa2c>
   285c8:	f49ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   285cc:	0a013503          	ld	a0,160(sp)
	if (!_M_is_local())
   285d0:	0b010793          	addi	a5,sp,176
   285d4:	00f50463          	beq	a0,a5,285dc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa3c>
   285d8:	f39ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   285dc:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   285e0:	13010793          	addi	a5,sp,304
   285e4:	00f50463          	beq	a0,a5,285ec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
   285e8:	f29ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   285ec:	0c013503          	ld	a0,192(sp)
	if (!_M_is_local())
   285f0:	0d010793          	addi	a5,sp,208
   285f4:	00f50463          	beq	a0,a5,285fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5c>
   285f8:	f19ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   285fc:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   28600:	0f010793          	addi	a5,sp,240
   28604:	00f50463          	beq	a0,a5,2860c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa6c>
   28608:	f09ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2860c:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   28610:	11010793          	addi	a5,sp,272
   28614:	00f50463          	beq	a0,a5,2861c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa7c>
   28618:	ef9ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2861c:	0001a617          	auipc	a2,0x1a
   28620:	d6463603          	ld	a2,-668(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   28624:	0001a597          	auipc	a1,0x1a
   28628:	c8c5b583          	ld	a1,-884(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2862c:	00098513          	addi	a0,s3,0
   28630:	890ee0ef          	jal	ra,166c0 <__cxa_throw@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28634:	11010793          	addi	a5,sp,272
   28638:	10f13023          	sd	a5,256(sp)
      { _M_string_length = __length; }
   2863c:	10013423          	sd	zero,264(sp)
	__c1 = __c2;
   28640:	10010823          	sb	zero,272(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   28644:	0404b503          	ld	a0,64(s1)
   28648:	0484b783          	ld	a5,72(s1)
   2864c:	04f50e63          	beq	a0,a5,286a8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb08>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28650:	01050793          	addi	a5,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28654:	00f53023          	sd	a5,0(a0)
      { return _M_dataplus._M_p; }
   28658:	02013583          	ld	a1,32(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2865c:	00000693          	addi	a3,zero,0
   28660:	02813603          	ld	a2,40(sp)
   28664:	00c58633          	add	a2,a1,a2
   28668:	0001a317          	auipc	t1,0x1a
   2866c:	ca833303          	ld	t1,-856(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   28670:	000300e7          	jalr	ra,0(t1)
	    ++this->_M_impl._M_finish;
   28674:	0404b783          	ld	a5,64(s1)
   28678:	02078793          	addi	a5,a5,32
   2867c:	04f4b023          	sd	a5,64(s1)
    cur.string(incdir);
   28680:	10010a13          	addi	s4,sp,256
   28684:	00810b13          	addi	s6,sp,8
    if (incdir.back() != '/')
   28688:	02f00913          	addi	s2,zero,47
	return _M_is_local() ? size_type(_S_local_capacity)
   2868c:	11010d13          	addi	s10,sp,272
      m->include_directories.push_back(comp_dir + incdir);
   28690:	14010a93          	addi	s5,sp,320
   28694:	02010b93          	addi	s7,sp,32
   28698:	0001ac17          	auipc	s8,0x1a
   2869c:	f30c3c03          	ld	s8,-208(s8) # 425c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17d38>
	if (!_M_is_local())
   286a0:	15010c93          	addi	s9,sp,336
   286a4:	0f00006f          	jal	zero,28794 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
	  _M_realloc_insert(end(), __x);
   286a8:	02010613          	addi	a2,sp,32
   286ac:	00050593          	addi	a1,a0,0
   286b0:	03848513          	addi	a0,s1,56
   286b4:	0001a317          	auipc	t1,0x1a
   286b8:	da433303          	ld	t1,-604(t1) # 42458 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17b1c>
   286bc:	000300e7          	jalr	ra,0(t1)
   286c0:	fc1ff06f          	jal	zero,28680 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
      { return _M_string_length; }
   286c4:	10813483          	ld	s1,264(sp)
    if (incdir.empty())
   286c8:	0c048e63          	beq	s1,zero,287a4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc04>
      { return _M_dataplus._M_p; }
   286cc:	10013783          	ld	a5,256(sp)
    if (incdir.back() != '/')
   286d0:	00978733          	add	a4,a5,s1
   286d4:	fff74703          	lbu	a4,-1(a4)
   286d8:	03271663          	bne	a4,s2,28704 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb64>
    if (incdir[0] == '/')
   286dc:	10013783          	ld	a5,256(sp)
   286e0:	0007c783          	lbu	a5,0(a5)
   286e4:	07278a63          	beq	a5,s2,28758 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbb8>
      m->include_directories.push_back(comp_dir + incdir);
   286e8:	00043483          	ld	s1,0(s0)
   286ec:	03848493          	addi	s1,s1,56
   286f0:	000a0613          	addi	a2,s4,0
   286f4:	000b8593          	addi	a1,s7,0
   286f8:	000a8513          	addi	a0,s5,0
   286fc:	000c00e7          	jalr	ra,0(s8)
   28700:	0740006f          	jal	zero,28774 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd4>
	if (__size + 1 > this->capacity())
   28704:	00148d93          	addi	s11,s1,1
	return _M_is_local() ? size_type(_S_local_capacity)
   28708:	03a78663          	beq	a5,s10,28734 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb94>
   2870c:	11013783          	ld	a5,272(sp)
	if (__size + 1 > this->capacity())
   28710:	03b7e663          	bltu	a5,s11,2873c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb9c>
   28714:	10013783          	ld	a5,256(sp)
   28718:	009787b3          	add	a5,a5,s1
   2871c:	01278023          	sb	s2,0(a5)
      { _M_string_length = __length; }
   28720:	11b13423          	sd	s11,264(sp)
   28724:	10013783          	ld	a5,256(sp)
   28728:	01b787b3          	add	a5,a5,s11
   2872c:	00078023          	sb	zero,0(a5)
      }
   28730:	fadff06f          	jal	zero,286dc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb3c>
	return _M_is_local() ? size_type(_S_local_capacity)
   28734:	00f00793          	addi	a5,zero,15
   28738:	fd9ff06f          	jal	zero,28710 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb70>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   2873c:	00100713          	addi	a4,zero,1
   28740:	00000693          	addi	a3,zero,0
   28744:	00000613          	addi	a2,zero,0
   28748:	00048593          	addi	a1,s1,0
   2874c:	000a0513          	addi	a0,s4,0
   28750:	fe1ed0ef          	jal	ra,16730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28754:	fc1ff06f          	jal	zero,28714 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb74>
      m->include_directories.push_back(move(incdir));
   28758:	00043503          	ld	a0,0(s0)
      { emplace_back(std::move(__x)); }
   2875c:	000a0593          	addi	a1,s4,0
   28760:	03850513          	addi	a0,a0,56
   28764:	0001a317          	auipc	t1,0x1a
   28768:	e5433303          	ld	t1,-428(t1) # 425b8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x177e8>
   2876c:	000300e7          	jalr	ra,0(t1)
   28770:	0240006f          	jal	zero,28794 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
   28774:	000a8593          	addi	a1,s5,0
   28778:	00048513          	addi	a0,s1,0
   2877c:	0001a317          	auipc	t1,0x1a
   28780:	e3c33303          	ld	t1,-452(t1) # 425b8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x177e8>
   28784:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   28788:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   2878c:	01950463          	beq	a0,s9,28794 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
   28790:	d81ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
    cur.string(incdir);
   28794:	000a0593          	addi	a1,s4,0
   28798:	000b0513          	addi	a0,s6,0
   2879c:	95cf40ef          	jal	ra,1c8f8 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   287a0:	f25ff06f          	jal	zero,286c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb24>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   287a4:	13010793          	addi	a5,sp,304
   287a8:	12f13023          	sd	a5,288(sp)
      { _M_string_length = __length; }
   287ac:	12013423          	sd	zero,296(sp)
   287b0:	12010823          	sb	zero,304(sp)
      { return _M_string_length; }
   287b4:	0089b603          	ld	a2,8(s3)
  if (!cu_name.empty() && cu_name[0] == '/')
   287b8:	00060a63          	beq	a2,zero,287cc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc2c>
      { return _M_dataplus._M_p; }
   287bc:	0009b583          	ld	a1,0(s3)
   287c0:	0005c703          	lbu	a4,0(a1)
   287c4:	02f00793          	addi	a5,zero,47
   287c8:	02f70463          	beq	a4,a5,287f0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc50>
    m->file_names.emplace_back(comp_dir + cu_name);
   287cc:	00043483          	ld	s1,0(s0)
   287d0:	05048493          	addi	s1,s1,80
   287d4:	00098613          	addi	a2,s3,0
   287d8:	02010593          	addi	a1,sp,32
   287dc:	14010513          	addi	a0,sp,320
   287e0:	0001a317          	auipc	t1,0x1a
   287e4:	de833303          	ld	t1,-536(t1) # 425c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x17d38>
   287e8:	000300e7          	jalr	ra,0(t1)
   287ec:	0ac0006f          	jal	zero,28898 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcf8>
   287f0:	00043483          	ld	s1,0(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   287f4:	0584b903          	ld	s2,88(s1)
   287f8:	0604b783          	ld	a5,96(s1)
   287fc:	08f90063          	beq	s2,a5,2887c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcdc>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28800:	15010793          	addi	a5,sp,336
   28804:	14f13023          	sd	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   28808:	00000693          	addi	a3,zero,0
   2880c:	00c58633          	add	a2,a1,a2
   28810:	14010513          	addi	a0,sp,320
   28814:	0001a317          	auipc	t1,0x1a
   28818:	afc33303          	ld	t1,-1284(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   2881c:	000300e7          	jalr	ra,0(t1)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   28820:	00000693          	addi	a3,zero,0
   28824:	00000613          	addi	a2,zero,0
   28828:	14010593          	addi	a1,sp,320
   2882c:	00090513          	addi	a0,s2,0
   28830:	d2dfe0ef          	jal	ra,2755c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   28834:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28838:	15010793          	addi	a5,sp,336
   2883c:	00f50463          	beq	a0,a5,28844 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xca4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28840:	cd1ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   28844:	0584b783          	ld	a5,88(s1)
   28848:	03078793          	addi	a5,a5,48
   2884c:	04f4bc23          	sd	a5,88(s1)
   28850:	06c0006f          	jal	zero,288bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
      { return _M_dataplus._M_p; }
   28854:	00050493          	addi	s1,a0,0
   28858:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   2885c:	15010793          	addi	a5,sp,336
   28860:	00f50463          	beq	a0,a5,28868 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   28864:	caded0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28868:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   2886c:	13010793          	addi	a5,sp,304
   28870:	2af50c63          	beq	a0,a5,28b28 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   28874:	c9ded0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28878:	2b00006f          	jal	zero,28b28 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2887c:	00098613          	addi	a2,s3,0
   28880:	00090593          	addi	a1,s2,0
   28884:	05048513          	addi	a0,s1,80
   28888:	0001a317          	auipc	t1,0x1a
   2888c:	bb833303          	ld	t1,-1096(t1) # 42440 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1756c>
   28890:	000300e7          	jalr	ra,0(t1)
   28894:	0280006f          	jal	zero,288bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
   28898:	14010593          	addi	a1,sp,320
   2889c:	00048513          	addi	a0,s1,0
   288a0:	0001a317          	auipc	t1,0x1a
   288a4:	cf033303          	ld	t1,-784(t1) # 42590 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17048>
   288a8:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   288ac:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   288b0:	15010793          	addi	a5,sp,336
   288b4:	00f50463          	beq	a0,a5,288bc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd1c>
   288b8:	c59ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
  while (m->read_file_entry(&cur, true))
   288bc:	00810493          	addi	s1,sp,8
   288c0:	0080006f          	jal	zero,288c8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd28>
   288c4:	00050c63          	beq	a0,zero,288dc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd3c>
   288c8:	00100613          	addi	a2,zero,1
   288cc:	00048593          	addi	a1,s1,0
   288d0:	00043503          	ld	a0,0(s0)
   288d4:	f4dfe0ef          	jal	ra,27820 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
   288d8:	fedff06f          	jal	zero,288c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd24>
      { return _M_dataplus._M_p; }
   288dc:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   288e0:	13010793          	addi	a5,sp,304
   288e4:	00f50463          	beq	a0,a5,288ec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd4c>
   288e8:	c29ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   288ec:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   288f0:	11010793          	addi	a5,sp,272
   288f4:	00f50463          	beq	a0,a5,288fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd5c>
   288f8:	c19ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   288fc:	01013403          	ld	s0,16(sp)
   28900:	02040463          	beq	s0,zero,28928 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
    if (__is_single_threaded())
   28904:	0001a797          	auipc	a5,0x1a
   28908:	b7c7b783          	ld	a5,-1156(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2890c:	0007c783          	lbu	a5,0(a5)
   28910:	06078a63          	beq	a5,zero,28984 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xde4>
    _Atomic_word __result = *__mem;
   28914:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   28918:	fff5079b          	addiw	a5,a0,-1
   2891c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   28920:	00100793          	addi	a5,zero,1
   28924:	06f50863          	beq	a0,a5,28994 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xdf4>
      { return _M_dataplus._M_p; }
   28928:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2892c:	05010793          	addi	a5,sp,80
   28930:	00f50463          	beq	a0,a5,28938 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd98>
   28934:	bdded0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28938:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2893c:	03010793          	addi	a5,sp,48
   28940:	00f50463          	beq	a0,a5,28948 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda8>
   28944:	bcded0ef          	jal	ra,16510 <operator delete(void*)@plt>
}
   28948:	1d813083          	ld	ra,472(sp)
   2894c:	1d013403          	ld	s0,464(sp)
   28950:	1c813483          	ld	s1,456(sp)
   28954:	1c013903          	ld	s2,448(sp)
   28958:	1b813983          	ld	s3,440(sp)
   2895c:	1b013a03          	ld	s4,432(sp)
   28960:	1a813a83          	ld	s5,424(sp)
   28964:	1a013b03          	ld	s6,416(sp)
   28968:	19813b83          	ld	s7,408(sp)
   2896c:	19013c03          	ld	s8,400(sp)
   28970:	18813c83          	ld	s9,392(sp)
   28974:	18013d03          	ld	s10,384(sp)
   28978:	17813d83          	ld	s11,376(sp)
   2897c:	1e010113          	addi	sp,sp,480
   28980:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   28984:	fff00593          	addi	a1,zero,-1
   28988:	03040513          	addi	a0,s0,48
   2898c:	9f5ed0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   28990:	f91ff06f          	jal	zero,28920 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd80>
	_M_dispose();
   28994:	00043783          	ld	a5,0(s0)
   28998:	0107b783          	ld	a5,16(a5)
   2899c:	00040513          	addi	a0,s0,0
   289a0:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   289a4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   289a8:	0001a797          	auipc	a5,0x1a
   289ac:	ad87b783          	ld	a5,-1320(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   289b0:	0007c783          	lbu	a5,0(a5)
   289b4:	02078663          	beq	a5,zero,289e0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe40>
    _Atomic_word __result = *__mem;
   289b8:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   289bc:	fff5079b          	addiw	a5,a0,-1
   289c0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   289c4:	00100793          	addi	a5,zero,1
   289c8:	f6f510e3          	bne	a0,a5,28928 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
	    _M_destroy();
   289cc:	00043783          	ld	a5,0(s0)
   289d0:	0187b783          	ld	a5,24(a5)
   289d4:	00040513          	addi	a0,s0,0
   289d8:	000780e7          	jalr	ra,0(a5)
   289dc:	f4dff06f          	jal	zero,28928 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd88>
      return __exchange_and_add(__mem, __val);
   289e0:	fff00593          	addi	a1,zero,-1
   289e4:	03440513          	addi	a0,s0,52
   289e8:	999ed0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   289ec:	fd9ff06f          	jal	zero,289c4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe24>
      { return _M_dataplus._M_p; }
   289f0:	00050493          	addi	s1,a0,0
   289f4:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   289f8:	13010793          	addi	a5,sp,304
   289fc:	00f50463          	beq	a0,a5,28a04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe64>
   28a00:	b11ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28a04:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28a08:	15010793          	addi	a5,sp,336
   28a0c:	00f50463          	beq	a0,a5,28a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe74>
   28a10:	b01ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
                       std::to_string(version));
   28a14:	00090513          	addi	a0,s2,0
   28a18:	ab9ed0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   28a1c:	01013503          	ld	a0,16(sp)
   28a20:	ae050a63          	beq	a0,zero,27d14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
	  _M_pi->_M_release();
   28a24:	0001a317          	auipc	t1,0x1a
   28a28:	9a433303          	ld	t1,-1628(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   28a2c:	000300e7          	jalr	ra,0(t1)
   28a30:	ae4ff06f          	jal	zero,27d14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
      { return _M_dataplus._M_p; }
   28a34:	00050493          	addi	s1,a0,0
   28a38:	fcdff06f          	jal	zero,28a04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe64>
                       " be 0 in line number table");
   28a3c:	00050493          	addi	s1,a0,0
   28a40:	00090513          	addi	a0,s2,0
   28a44:	a8ded0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   28a48:	fd5ff06f          	jal	zero,28a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
    throw format_error("line_range cannot be 0 in line number table");
   28a4c:	00050493          	addi	s1,a0,0
   28a50:	00090513          	addi	a0,s2,0
   28a54:	a7ded0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   28a58:	fc5ff06f          	jal	zero,28a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
   28a5c:	00050493          	addi	s1,a0,0
   28a60:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   28a64:	07010793          	addi	a5,sp,112
   28a68:	00f50463          	beq	a0,a5,28a70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xed0>
   28a6c:	aa5ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28a70:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28a74:	15010793          	addi	a5,sp,336
   28a78:	00f50463          	beq	a0,a5,28a80 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xee0>
   28a7c:	a95ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28a80:	08013503          	ld	a0,128(sp)
	if (!_M_is_local())
   28a84:	09010793          	addi	a5,sp,144
   28a88:	00f50463          	beq	a0,a5,28a90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xef0>
   28a8c:	a85ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28a90:	0a013503          	ld	a0,160(sp)
	if (!_M_is_local())
   28a94:	0b010793          	addi	a5,sp,176
   28a98:	00f50463          	beq	a0,a5,28aa0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf00>
   28a9c:	a75ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28aa0:	12013503          	ld	a0,288(sp)
	if (!_M_is_local())
   28aa4:	13010793          	addi	a5,sp,304
   28aa8:	00f50463          	beq	a0,a5,28ab0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf10>
   28aac:	a65ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28ab0:	0c013503          	ld	a0,192(sp)
	if (!_M_is_local())
   28ab4:	0d010793          	addi	a5,sp,208
   28ab8:	00f50463          	beq	a0,a5,28ac0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf20>
   28abc:	a55ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28ac0:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   28ac4:	0f010793          	addi	a5,sp,240
   28ac8:	00f50463          	beq	a0,a5,28ad0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf30>
   28acc:	a45ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28ad0:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   28ad4:	11010793          	addi	a5,sp,272
   28ad8:	00f50463          	beq	a0,a5,28ae0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf40>
   28adc:	a35ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   28ae0:	00098513          	addi	a0,s3,0
   28ae4:	9eded0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   28ae8:	f35ff06f          	jal	zero,28a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
      { return _M_dataplus._M_p; }
   28aec:	00050493          	addi	s1,a0,0
   28af0:	f81ff06f          	jal	zero,28a70 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xed0>
   28af4:	00050493          	addi	s1,a0,0
   28af8:	f99ff06f          	jal	zero,28a90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xef0>
   28afc:	00050493          	addi	s1,a0,0
   28b00:	fa1ff06f          	jal	zero,28aa0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf00>
   28b04:	00050493          	addi	s1,a0,0
   28b08:	fb9ff06f          	jal	zero,28ac0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf20>
   28b0c:	00050493          	addi	s1,a0,0
   28b10:	fc1ff06f          	jal	zero,28ad0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf30>
   28b14:	00050493          	addi	s1,a0,0
   28b18:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28b1c:	15010793          	addi	a5,sp,336
   28b20:	00f50463          	beq	a0,a5,28b28 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   28b24:	9eded0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   28b28:	10013503          	ld	a0,256(sp)
	if (!_M_is_local())
   28b2c:	11010793          	addi	a5,sp,272
   28b30:	eef506e3          	beq	a0,a5,28a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
   28b34:	9dded0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28b38:	ee5ff06f          	jal	zero,28a1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe7c>
      { return _M_dataplus._M_p; }
   28b3c:	00050493          	addi	s1,a0,0
   28b40:	14013503          	ld	a0,320(sp)
	if (!_M_is_local())
   28b44:	15010793          	addi	a5,sp,336
   28b48:	d2f500e3          	beq	a0,a5,28868 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   28b4c:	9c5ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28b50:	d19ff06f          	jal	zero,28868 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
      { return _M_dataplus._M_p; }
   28b54:	00050493          	addi	s1,a0,0
   28b58:	d11ff06f          	jal	zero,28868 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
   28b5c:	00050493          	addi	s1,a0,0
   28b60:	fc9ff06f          	jal	zero,28b28 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf88>
   28b64:	00050493          	addi	s1,a0,0
   28b68:	9acff06f          	jal	zero,27d14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x174>
        val |= ((uint64_t)p[i]) << (i * 8);
   28b6c:	0006c703          	lbu	a4,0(a3)
    pos += sizeof(T);
   28b70:	00168693          	addi	a3,a3,1
   28b74:	00d13c23          	sd	a3,24(sp)
    return (T)val;
   28b78:	0ff77793          	andi	a5,a4,255
    if (length != opcode_lengths[i])
   28b7c:	00070493          	addi	s1,a4,0
   28b80:	000a2b03          	lw	s6,0(s4)
   28b84:	91671ae3          	bne	a4,s6,28498 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8f8>
      { return _M_ptr; }
   28b88:	00043483          	ld	s1,0(s0)
    m->standard_opcode_lengths[i] = length;
   28b8c:	0204b703          	ld	a4,32(s1)
   28b90:	01270733          	add	a4,a4,s2
   28b94:	00f70023          	sb	a5,0(a4)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   28b98:	00190913          	addi	s2,s2,1
   28b9c:	004a0a13          	addi	s4,s4,4
   28ba0:	01d4c703          	lbu	a4,29(s1)
   28ba4:	0009079b          	addiw	a5,s2,0
   28ba8:	a8e7f6e3          	bgeu	a5,a4,28634 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa94>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28bac:	00813783          	ld	a5,8(sp)
   28bb0:	0107b703          	ld	a4,16(a5)
   28bb4:	01813783          	ld	a5,24(sp)
   28bb8:	8ce7e4e3          	bltu	a5,a4,28480 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e0>
      underflow();
   28bbc:	000a8513          	addi	a0,s5,0
   28bc0:	d8df30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   28bc4:	8bdff06f          	jal	zero,28480 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e0>
        val |= ((uint64_t)p[i]) << (i * 8);
   28bc8:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   28bcc:	00178793          	addi	a5,a5,1
   28bd0:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28bd4:	00e48ea3          	sb	a4,29(s1)
   28bd8:	00043503          	ld	a0,0(s0)
  m->standard_opcode_lengths.resize(m->opcode_base);
   28bdc:	01d54783          	lbu	a5,29(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   28be0:	02853683          	ld	a3,40(a0)
   28be4:	02053703          	ld	a4,32(a0)
   28be8:	40e685b3          	sub	a1,a3,a4
	if (__new_size > size())
   28bec:	86f5eee3          	bltu	a1,a5,28468 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8c8>
	else if (__new_size < size())
   28bf0:	00b7f863          	bgeu	a5,a1,28c00 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   28bf4:	00f70733          	add	a4,a4,a5
	if (size_type __n = this->_M_impl._M_finish - __pos)
   28bf8:	00e68463          	beq	a3,a4,28c00 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1060>
	    this->_M_impl._M_finish = __pos;
   28bfc:	02e53423          	sd	a4,40(a0)
   28c00:	00043483          	ld	s1,0(s0)
	return *(this->_M_impl._M_start + __n);
   28c04:	0204b783          	ld	a5,32(s1)
  m->standard_opcode_lengths[0] = 0;
   28c08:	00078023          	sb	zero,0(a5)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   28c0c:	01d4c703          	lbu	a4,29(s1)
   28c10:	00100793          	addi	a5,zero,1
   28c14:	a2e7f0e3          	bgeu	a5,a4,28634 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa94>
   28c18:	0000fa17          	auipc	s4,0xf
   28c1c:	ecca0a13          	addi	s4,s4,-308 # 37ae4 <dwarf::opcode_lengths+0x4>
   28c20:	00100913          	addi	s2,zero,1
      underflow();
   28c24:	00810a93          	addi	s5,sp,8
   28c28:	f85ff06f          	jal	zero,28bac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100c>
        val |= ((uint64_t)p[i]) << (i * 8);
   28c2c:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   28c30:	00178793          	addi	a5,a5,1
   28c34:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28c38:	00d48e23          	sb	a3,28(s1)
   28c3c:	00043483          	ld	s1,0(s0)
  if (m->line_range == 0)
   28c40:	01c4c683          	lbu	a3,28(s1)
   28c44:	fc068663          	beq	a3,zero,28410 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x870>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28c48:	01073703          	ld	a4,16(a4)
   28c4c:	80e7e2e3          	bltu	a5,a4,28450 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
      underflow();
   28c50:	00810513          	addi	a0,sp,8
   28c54:	cf9f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   28c58:	ff8ff06f          	jal	zero,28450 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
        val |= ((uint64_t)p[i]) << (i * 8);
   28c5c:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   28c60:	00178793          	addi	a5,a5,1
   28c64:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28c68:	00d48da3          	sb	a3,27(s1)
   28c6c:	00043483          	ld	s1,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28c70:	01073703          	ld	a4,16(a4)
   28c74:	f8e7e263          	bltu	a5,a4,283f8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x858>
      underflow();
   28c78:	00810513          	addi	a0,sp,8
   28c7c:	cd1f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   28c80:	f78ff06f          	jal	zero,283f8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x858>
        val |= ((uint64_t)p[i]) << (i * 8);
   28c84:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   28c88:	00178793          	addi	a5,a5,1
   28c8c:	00f13c23          	sd	a5,24(sp)
   28c90:	00043483          	ld	s1,0(s0)
  m->default_is_stmt = cur.fixed<ubyte>();
   28c94:	00e03733          	sltu	a4,zero,a4
   28c98:	00e48d23          	sb	a4,26(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28c9c:	0106b703          	ld	a4,16(a3)
   28ca0:	f4e7e063          	bltu	a5,a4,283e0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x840>
      underflow();
   28ca4:	00810513          	addi	a0,sp,8
   28ca8:	ca5f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   28cac:	f34ff06f          	jal	zero,283e0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x840>
        val |= ((uint64_t)p[i]) << (i * 8);
   28cb0:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   28cb4:	00178793          	addi	a5,a5,1
   28cb8:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28cbc:	00e90ca3          	sb	a4,25(s2)
  if (m->maximum_operations_per_instruction == 0)
   28cc0:	00043783          	ld	a5,0(s0)
   28cc4:	0197c783          	lbu	a5,25(a5)
   28cc8:	04079463          	bne	a5,zero,28d10 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1170>
                       " be 0 in line number table");
   28ccc:	01000513          	addi	a0,zero,16
   28cd0:	f50ed0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   28cd4:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   28cd8:	0000f597          	auipc	a1,0xf
   28cdc:	c3058593          	addi	a1,a1,-976 # 37908 <typeinfo name for dwarf::expr_context+0xe8>
   28ce0:	a91ed0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   28ce4:	ebcff06f          	jal	zero,283a0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x800>
        val |= ((uint64_t)p[i]) << (i * 8);
   28ce8:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   28cec:	00178793          	addi	a5,a5,1
   28cf0:	00f13c23          	sd	a5,24(sp)
    return (T)val;
   28cf4:	00d90c23          	sb	a3,24(s2)
   28cf8:	00043903          	ld	s2,0(s0)
  m->maximum_operations_per_instruction = 1;
   28cfc:	00100693          	addi	a3,zero,1
   28d00:	00d90ca3          	sb	a3,25(s2)
  if (version == 4)
   28d04:	0004849b          	addiw	s1,s1,0
   28d08:	00400693          	addi	a3,zero,4
   28d0c:	e6d48663          	beq	s1,a3,28378 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7d8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28d10:	00813783          	ld	a5,8(sp)
   28d14:	0107b703          	ld	a4,16(a5)
   28d18:	01813783          	ld	a5,24(sp)
   28d1c:	eae7e663          	bltu	a5,a4,283c8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x828>
      underflow();
   28d20:	00810513          	addi	a0,sp,8
   28d24:	c29f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
   28d28:	ea0ff06f          	jal	zero,283c8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x828>
struct cursor {
   28d2c:	01513c23          	sd	s5,24(sp)
      ~__shared_count() noexcept
   28d30:	b1cff06f          	jal	zero,2804c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ac>
      : sec(sec), pos(sec->begin + offset) {}
   28d34:	00893a83          	ld	s5,8(s2)
   28d38:	01213423          	sd	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   28d3c:	01013903          	ld	s2,16(sp)
	__r._M_pi = _M_pi;
   28d40:	00013823          	sd	zero,16(sp)
	if (_M_pi != nullptr)
   28d44:	ac091e63          	bne	s2,zero,28020 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x480>
struct cursor {
   28d48:	01513c23          	sd	s5,24(sp)
      ~__shared_count() noexcept
   28d4c:	b24ff06f          	jal	zero,28070 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4d0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   28d50:	01613423          	sd	s6,8(sp)
      : _M_pi(__r._M_pi)
   28d54:	00013823          	sd	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   28d58:	008b3783          	ld	a5,8(s6)
   28d5c:	015787b3          	add	a5,a5,s5
   28d60:	00f13c23          	sd	a5,24(sp)
      { return _M_ptr; }
   28d64:	00043483          	ld	s1,0(s0)
  m->sec = cur.subsection();
   28d68:	00810593          	addi	a1,sp,8
   28d6c:	16010513          	addi	a0,sp,352
   28d70:	920f40ef          	jal	ra,1ce90 <dwarf::cursor::subsection()>
   28d74:	990ff06f          	jal	zero,27f04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x364>
      { _M_dataplus._M_p = __p; }
   28d78:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   28d7c:	14813783          	ld	a5,328(sp)
   28d80:	02f13423          	sd	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   28d84:	15013783          	ld	a5,336(sp)
   28d88:	02f13823          	sd	a5,48(sp)
      { _M_dataplus._M_p = __p; }
   28d8c:	15010793          	addi	a5,sp,336
   28d90:	14f13023          	sd	a5,320(sp)
   28d94:	800ff06f          	jal	zero,27d94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>

0000000000028d98 <dwarf::line_table::iterator::step(dwarf::cursor*)>:

  pos = cur.get_section_offset();
  return *this;
}

bool line_table::iterator::step(cursor *cur) {
   28d98:	f6010113          	addi	sp,sp,-160
   28d9c:	08113c23          	sd	ra,152(sp)
   28da0:	08813823          	sd	s0,144(sp)
   28da4:	08913423          	sd	s1,136(sp)
   28da8:	09213023          	sd	s2,128(sp)
   28dac:	07313c23          	sd	s3,120(sp)
   28db0:	07413823          	sd	s4,112(sp)
   28db4:	07513423          	sd	s5,104(sp)
   28db8:	00050493          	addi	s1,a0,0
   28dbc:	00058413          	addi	s0,a1,0
   28dc0:	00053783          	ld	a5,0(a0)
   28dc4:	0007b983          	ld	s3,0(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28dc8:	0005b783          	ld	a5,0(a1)
   28dcc:	0107b703          	ld	a4,16(a5)
   28dd0:	0105b783          	ld	a5,16(a1)
   28dd4:	00e7e663          	bltu	a5,a4,28de0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x48>
      underflow();
   28dd8:	00058513          	addi	a0,a1,0
   28ddc:	b71f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   28de0:	01043783          	ld	a5,16(s0)
   28de4:	00043583          	ld	a1,0(s0)
    if (sec->ord == byte_order::lsb) {
   28de8:	01c5a703          	lw	a4,28(a1)
   28dec:	040700e3          	beq	a4,zero,2962c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x894>
        val = (val << 8) | (uint64_t)p[i];
   28df0:	0007c903          	lbu	s2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   28df4:	03d0006f          	jal	zero,29630 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x898>

  // Read the opcode (DWARF4 section 6.2.3)
  ubyte opcode = cur->fixed<ubyte>();
  if (opcode >= m->opcode_base) {
    // Special opcode (DWARF4 section 6.2.5.1)
    ubyte adjusted_opcode = opcode - m->opcode_base;
   28df8:	40e907bb          	subw	a5,s2,a4
   28dfc:	0ff7f793          	andi	a5,a5,255
    unsigned op_advance = adjusted_opcode / m->line_range;
   28e00:	01c9c683          	lbu	a3,28(s3)
    signed line_inc = m->line_base + (signed)adjusted_opcode % m->line_range;
   28e04:	01b98703          	lb	a4,27(s3)
   28e08:	02d7f63b          	remuw	a2,a5,a3
   28e0c:	00c7073b          	addw	a4,a4,a2

    regs.line += line_inc;
   28e10:	05c4a603          	lw	a2,92(s1)
   28e14:	00c7073b          	addw	a4,a4,a2
   28e18:	04e4ae23          	sw	a4,92(s1)
    unsigned op_advance = adjusted_opcode / m->line_range;
   28e1c:	02d7d7bb          	divuw	a5,a5,a3
    regs.address +=
        m->minimum_instruction_length *
        ((regs.op_index + op_advance) / m->maximum_operations_per_instruction);
   28e20:	0484a703          	lw	a4,72(s1)
   28e24:	00e787bb          	addw	a5,a5,a4
   28e28:	0199c703          	lbu	a4,25(s3)
   28e2c:	02e7d73b          	divuw	a4,a5,a4
        m->minimum_instruction_length *
   28e30:	0189c683          	lbu	a3,24(s3)
   28e34:	02d7073b          	mulw	a4,a4,a3
   28e38:	02071713          	slli	a4,a4,0x20
   28e3c:	02075713          	srli	a4,a4,0x20
    regs.address +=
   28e40:	0404b683          	ld	a3,64(s1)
   28e44:	00e68733          	add	a4,a3,a4
   28e48:	04e4b023          	sd	a4,64(s1)
    regs.op_index =
        (regs.op_index + op_advance) % m->maximum_operations_per_instruction;
   28e4c:	0199c683          	lbu	a3,25(s3)
   28e50:	02d7f7bb          	remuw	a5,a5,a3
    regs.op_index =
   28e54:	04f4a423          	sw	a5,72(s1)
    entry = regs;
   28e58:	0484b803          	ld	a6,72(s1)
   28e5c:	0504b503          	ld	a0,80(s1)
   28e60:	0584b583          	ld	a1,88(s1)
   28e64:	0604b603          	ld	a2,96(s1)
   28e68:	0684b683          	ld	a3,104(s1)
   28e6c:	0704b783          	ld	a5,112(s1)
   28e70:	00e4b423          	sd	a4,8(s1)
   28e74:	0104b823          	sd	a6,16(s1)
   28e78:	00a4bc23          	sd	a0,24(s1)
   28e7c:	02b4b023          	sd	a1,32(s1)
   28e80:	02c4b423          	sd	a2,40(s1)
   28e84:	02d4b823          	sd	a3,48(s1)
   28e88:	02f4bc23          	sd	a5,56(s1)

    regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   28e8c:	06048423          	sb	zero,104(s1)
   28e90:	060483a3          	sb	zero,103(s1)
   28e94:	060482a3          	sb	zero,101(s1)
    regs.discriminator = 0;
   28e98:	0604a823          	sw	zero,112(s1)

    return true;
   28e9c:	00100513          	addi	a0,zero,1
   28ea0:	2a00006f          	jal	zero,29140 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a8>
    while (pos < sec->end) {
   28ea4:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   28ea8:	00000513          	addi	a0,zero,0
    int shift = 0;
   28eac:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   28eb0:	02e7fa63          	bgeu	a5,a4,28ee4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x14c>
      uint8_t byte = *(uint8_t *)(pos++);
   28eb4:	00178793          	addi	a5,a5,1
   28eb8:	00f43823          	sd	a5,16(s0)
   28ebc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   28ec0:	07f77693          	andi	a3,a4,127
   28ec4:	00c696b3          	sll	a3,a3,a2
   28ec8:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   28ecc:	0187171b          	slliw	a4,a4,0x18
   28ed0:	4187571b          	sraiw	a4,a4,0x18
   28ed4:	00075e63          	bge	a4,zero,28ef0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x158>
      shift += 7;
   28ed8:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   28edc:	0105b703          	ld	a4,16(a1)
   28ee0:	fce7eae3          	bltu	a5,a4,28eb4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x11c>
    underflow();
   28ee4:	00040513          	addi	a0,s0,0
   28ee8:	a65f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   28eec:	00000513          	addi	a0,zero,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   28ef0:	01043783          	ld	a5,16(s0)
   28ef4:	00043703          	ld	a4,0(s0)
   28ef8:	00873a03          	ld	s4,8(a4)
   28efc:	41478a33          	sub	s4,a5,s4
    return ((DW_LNS)opcode == DW_LNS::copy);
  } else { // opcode == 0
    // Extended opcode (DWARF4 sections 6.2.3 and 6.2.5.3)
    assert(opcode == 0);
    uint64_t length = cur->uleb128();
    section_offset end = cur->get_section_offset() + length;
   28f00:	00aa0a33          	add	s4,s4,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   28f04:	01073703          	ld	a4,16(a4)
   28f08:	00e7e663          	bltu	a5,a4,28f14 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x17c>
      underflow();
   28f0c:	00040513          	addi	a0,s0,0
   28f10:	a3df30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   28f14:	01043783          	ld	a5,16(s0)
   28f18:	00043503          	ld	a0,0(s0)
    if (sec->ord == byte_order::lsb) {
   28f1c:	01c52703          	lw	a4,28(a0)
   28f20:	6c070063          	beq	a4,zero,295e0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x848>
        val = (val << 8) | (uint64_t)p[i];
   28f24:	0007c583          	lbu	a1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   28f28:	6bc0006f          	jal	zero,295e4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x84c>
    while (pos < sec->end) {
   28f2c:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   28f30:	00000513          	addi	a0,zero,0
    int shift = 0;
   28f34:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   28f38:	02e7fa63          	bgeu	a5,a4,28f6c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1d4>
      uint8_t byte = *(uint8_t *)(pos++);
   28f3c:	00178793          	addi	a5,a5,1
   28f40:	00f43823          	sd	a5,16(s0)
   28f44:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   28f48:	07f77693          	andi	a3,a4,127
   28f4c:	00c696b3          	sll	a3,a3,a2
   28f50:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   28f54:	0187171b          	slliw	a4,a4,0x18
   28f58:	4187571b          	sraiw	a4,a4,0x18
   28f5c:	00075e63          	bge	a4,zero,28f78 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1e0>
      shift += 7;
   28f60:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   28f64:	0105b703          	ld	a4,16(a1)
   28f68:	fce7eae3          	bltu	a5,a4,28f3c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1a4>
    underflow();
   28f6c:	00040513          	addi	a0,s0,0
   28f70:	9ddf30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   28f74:	00000513          	addi	a0,zero,0
      regs.isa = cur->uleb128();
   28f78:	06a4a623          	sw	a0,108(s1)
      break;
   28f7c:	1bc0006f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   28f80:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   28f84:	00000513          	addi	a0,zero,0
    int shift = 0;
   28f88:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   28f8c:	02e7fa63          	bgeu	a5,a4,28fc0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x228>
      uint8_t byte = *(uint8_t *)(pos++);
   28f90:	00178793          	addi	a5,a5,1
   28f94:	00f43823          	sd	a5,16(s0)
   28f98:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   28f9c:	07f77693          	andi	a3,a4,127
   28fa0:	00c696b3          	sll	a3,a3,a2
   28fa4:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   28fa8:	0187171b          	slliw	a4,a4,0x18
   28fac:	4187571b          	sraiw	a4,a4,0x18
   28fb0:	00075e63          	bge	a4,zero,28fcc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x234>
      shift += 7;
   28fb4:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   28fb8:	0105b703          	ld	a4,16(a1)
   28fbc:	fce7eae3          	bltu	a5,a4,28f90 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1f8>
    underflow();
   28fc0:	00040513          	addi	a0,s0,0
   28fc4:	989f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   28fc8:	00000513          	addi	a0,zero,0
      regs.column = cur->uleb128();
   28fcc:	06a4a023          	sw	a0,96(s1)
      break;
   28fd0:	1680006f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   28fd4:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   28fd8:	00000513          	addi	a0,zero,0
    int shift = 0;
   28fdc:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   28fe0:	02e7fa63          	bgeu	a5,a4,29014 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x27c>
      uint8_t byte = *(uint8_t *)(pos++);
   28fe4:	00178793          	addi	a5,a5,1
   28fe8:	00f43823          	sd	a5,16(s0)
   28fec:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   28ff0:	07f77693          	andi	a3,a4,127
   28ff4:	00c696b3          	sll	a3,a3,a2
   28ff8:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   28ffc:	0187171b          	slliw	a4,a4,0x18
   29000:	4187571b          	sraiw	a4,a4,0x18
   29004:	00075e63          	bge	a4,zero,29020 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x288>
      shift += 7;
   29008:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   2900c:	0105b703          	ld	a4,16(a1)
   29010:	fce7eae3          	bltu	a5,a4,28fe4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x24c>
    underflow();
   29014:	00040513          	addi	a0,s0,0
   29018:	935f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   2901c:	00000513          	addi	a0,zero,0
      regs.file_index = cur->uleb128();
   29020:	04a4ac23          	sw	a0,88(s1)
      break;
   29024:	1140006f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
    while (pos < sec->end) {
   29028:	0105b703          	ld	a4,16(a1)
    std::uint64_t result = 0;
   2902c:	00000513          	addi	a0,zero,0
    int shift = 0;
   29030:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   29034:	02e7fa63          	bgeu	a5,a4,29068 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2d0>
      uint8_t byte = *(uint8_t *)(pos++);
   29038:	00178793          	addi	a5,a5,1
   2903c:	00f43823          	sd	a5,16(s0)
   29040:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   29044:	07f77693          	andi	a3,a4,127
   29048:	00c696b3          	sll	a3,a3,a2
   2904c:	00d56533          	or	a0,a0,a3
      if ((byte & 0x80) == 0)
   29050:	0187171b          	slliw	a4,a4,0x18
   29054:	4187571b          	sraiw	a4,a4,0x18
   29058:	0a075863          	bge	a4,zero,29108 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
      shift += 7;
   2905c:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   29060:	0105b703          	ld	a4,16(a1)
   29064:	fce7eae3          	bltu	a5,a4,29038 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2a0>
    underflow();
   29068:	00040513          	addi	a0,s0,0
   2906c:	8e1f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   29070:	00000513          	addi	a0,zero,0
   29074:	0940006f          	jal	zero,29108 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
      entry = regs;
   29078:	0404b803          	ld	a6,64(s1)
   2907c:	0484b503          	ld	a0,72(s1)
   29080:	0504b583          	ld	a1,80(s1)
   29084:	0584b603          	ld	a2,88(s1)
   29088:	0604b683          	ld	a3,96(s1)
   2908c:	0684b703          	ld	a4,104(s1)
   29090:	0704b783          	ld	a5,112(s1)
   29094:	0104b423          	sd	a6,8(s1)
   29098:	00a4b823          	sd	a0,16(s1)
   2909c:	00b4bc23          	sd	a1,24(s1)
   290a0:	02c4b023          	sd	a2,32(s1)
   290a4:	02d4b423          	sd	a3,40(s1)
   290a8:	02e4b823          	sd	a4,48(s1)
   290ac:	02f4bc23          	sd	a5,56(s1)
      regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   290b0:	06048423          	sb	zero,104(s1)
   290b4:	060483a3          	sb	zero,103(s1)
   290b8:	060482a3          	sb	zero,101(s1)
      regs.discriminator = 0;
   290bc:	0604a823          	sw	zero,112(s1)
      break;
   290c0:	0780006f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.line = (signed)regs.line + cur->sleb128();
   290c4:	05c4a983          	lw	s3,92(s1)
   290c8:	00040513          	addi	a0,s0,0
   290cc:	8d5f30ef          	jal	ra,1c9a0 <dwarf::cursor::sleb128()>
   290d0:	0135053b          	addw	a0,a0,s3
   290d4:	04a4ae23          	sw	a0,92(s1)
      break;
   290d8:	0600006f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.is_stmt = !regs.is_stmt;
   290dc:	0644c783          	lbu	a5,100(s1)
   290e0:	0017c793          	xori	a5,a5,1
   290e4:	06f48223          	sb	a5,100(s1)
      break;
   290e8:	0500006f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.basic_block = true;
   290ec:	00100793          	addi	a5,zero,1
   290f0:	06f482a3          	sb	a5,101(s1)
      break;
   290f4:	0440006f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      uarg = (255 - m->opcode_base) / m->line_range;
   290f8:	0ff00513          	addi	a0,zero,255
   290fc:	40e5053b          	subw	a0,a0,a4
   29100:	01c9c783          	lbu	a5,28(s3)
   29104:	02f5453b          	divw	a0,a0,a5
          ((regs.op_index + uarg) / m->maximum_operations_per_instruction);
   29108:	0484e783          	lwu	a5,72(s1)
   2910c:	00a787b3          	add	a5,a5,a0
   29110:	0199c703          	lbu	a4,25(s3)
   29114:	02e7d733          	divu	a4,a5,a4
          m->minimum_instruction_length *
   29118:	0189c683          	lbu	a3,24(s3)
   2911c:	02d70733          	mul	a4,a4,a3
      regs.address +=
   29120:	0404b683          	ld	a3,64(s1)
   29124:	00e68733          	add	a4,a3,a4
   29128:	04e4b023          	sd	a4,64(s1)
          (regs.op_index + uarg) % m->maximum_operations_per_instruction;
   2912c:	0199c703          	lbu	a4,25(s3)
   29130:	02e7f7b3          	remu	a5,a5,a4
      regs.op_index =
   29134:	04f4a423          	sw	a5,72(s1)
    return ((DW_LNS)opcode == DW_LNS::copy);
   29138:	fff90513          	addi	a0,s2,-1
   2913c:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
      throw format_error("extended line number opcode exceeded its size");
    cur += end - cur->get_section_offset();
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
  }
}
   29140:	09813083          	ld	ra,152(sp)
   29144:	09013403          	ld	s0,144(sp)
   29148:	08813483          	ld	s1,136(sp)
   2914c:	08013903          	ld	s2,128(sp)
   29150:	07813983          	ld	s3,120(sp)
   29154:	07013a03          	ld	s4,112(sp)
   29158:	06813a83          	ld	s5,104(sp)
   2915c:	0a010113          	addi	sp,sp,160
   29160:	00008067          	jalr	zero,0(ra)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   29164:	0105b703          	ld	a4,16(a1)
   29168:	40f70633          	sub	a2,a4,a5
   2916c:	00100693          	addi	a3,zero,1
   29170:	00c6f463          	bgeu	a3,a2,29178 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3e0>
   29174:	00e7e663          	bltu	a5,a4,29180 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3e8>
      underflow();
   29178:	00040513          	addi	a0,s0,0
   2917c:	fd0f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   29180:	01043703          	ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   29184:	00043783          	ld	a5,0(s0)
   29188:	01c7a783          	lw	a5,28(a5)
   2918c:	02079863          	bne	a5,zero,291bc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x424>
        val |= ((uint64_t)p[i]) << (i * 8);
   29190:	00174783          	lbu	a5,1(a4)
   29194:	00879793          	slli	a5,a5,0x8
   29198:	00074683          	lbu	a3,0(a4)
   2919c:	00d7e7b3          	or	a5,a5,a3
    pos += sizeof(T);
   291a0:	00270713          	addi	a4,a4,2
   291a4:	00e43823          	sd	a4,16(s0)
      regs.address += cur->fixed<uhalf>();
   291a8:	0404b703          	ld	a4,64(s1)
   291ac:	00f707b3          	add	a5,a4,a5
   291b0:	04f4b023          	sd	a5,64(s1)
      regs.op_index = 0;
   291b4:	0404a423          	sw	zero,72(s1)
      break;
   291b8:	f81ff06f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
        val = (val << 8) | (uint64_t)p[i];
   291bc:	00074783          	lbu	a5,0(a4)
   291c0:	00879793          	slli	a5,a5,0x8
   291c4:	00174683          	lbu	a3,1(a4)
   291c8:	00d7e7b3          	or	a5,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   291cc:	fd5ff06f          	jal	zero,291a0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x408>
      regs.prologue_end = true;
   291d0:	00100793          	addi	a5,zero,1
   291d4:	06f483a3          	sb	a5,103(s1)
      break;
   291d8:	f61ff06f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
      regs.epilogue_begin = true;
   291dc:	00100793          	addi	a5,zero,1
   291e0:	06f48423          	sb	a5,104(s1)
      break;
   291e4:	f55ff06f          	jal	zero,29138 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a0>
                         to_string((DW_LNS)opcode));
   291e8:	01000513          	addi	a0,zero,16
   291ec:	a34ed0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   291f0:	00050493          	addi	s1,a0,0
   291f4:	00090593          	addi	a1,s2,0
   291f8:	02010513          	addi	a0,sp,32
   291fc:	3e8050ef          	jal	ra,2e5e4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>
    { return std::move(__rhs.insert(0, __lhs)); }
   29200:	0000e617          	auipc	a2,0xe
   29204:	7c060613          	addi	a2,a2,1984 # 379c0 <typeinfo name for dwarf::expr_context+0x1a0>
   29208:	00000593          	addi	a1,zero,0
   2920c:	02010513          	addi	a0,sp,32
   29210:	980ed0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   29214:	00050593          	addi	a1,a0,0
   29218:	04010413          	addi	s0,sp,64
   2921c:	00040513          	addi	a0,s0,0
   29220:	a50ed0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   29224:	00040593          	addi	a1,s0,0
   29228:	00048513          	addi	a0,s1,0
   2922c:	b74ed0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   29230:	00019797          	auipc	a5,0x19
   29234:	3287b783          	ld	a5,808(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   29238:	01078793          	addi	a5,a5,16
   2923c:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   29240:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   29244:	05010793          	addi	a5,sp,80
   29248:	00f50463          	beq	a0,a5,29250 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b8>
   2924c:	ac4ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29250:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29254:	03010793          	addi	a5,sp,48
   29258:	00f50463          	beq	a0,a5,29260 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4c8>
   2925c:	ab4ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
   29260:	00019617          	auipc	a2,0x19
   29264:	12063603          	ld	a2,288(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   29268:	00019597          	auipc	a1,0x19
   2926c:	0485b583          	ld	a1,72(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   29270:	00048513          	addi	a0,s1,0
   29274:	c4ced0ef          	jal	ra,166c0 <__cxa_throw@plt>
    switch ((DW_LNE)opcode) {
   29278:	00400713          	addi	a4,zero,4
   2927c:	04e91c63          	bne	s2,a4,292d4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x53c>
    while (pos < sec->end) {
   29280:	01053703          	ld	a4,16(a0)
    std::uint64_t result = 0;
   29284:	00000593          	addi	a1,zero,0
    int shift = 0;
   29288:	00000613          	addi	a2,zero,0
    while (pos < sec->end) {
   2928c:	02e7fa63          	bgeu	a5,a4,292c0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x528>
      uint8_t byte = *(uint8_t *)(pos++);
   29290:	00178793          	addi	a5,a5,1
   29294:	00f43823          	sd	a5,16(s0)
   29298:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2929c:	07f77693          	andi	a3,a4,127
   292a0:	00c696b3          	sll	a3,a3,a2
   292a4:	00d5e5b3          	or	a1,a1,a3
      if ((byte & 0x80) == 0)
   292a8:	0187171b          	slliw	a4,a4,0x18
   292ac:	4187571b          	sraiw	a4,a4,0x18
   292b0:	00075e63          	bge	a4,zero,292cc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x534>
      shift += 7;
   292b4:	0076061b          	addiw	a2,a2,7
    while (pos < sec->end) {
   292b8:	01053703          	ld	a4,16(a0)
   292bc:	fce7eae3          	bltu	a5,a4,29290 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4f8>
    underflow();
   292c0:	00040513          	addi	a0,s0,0
   292c4:	e88f30ef          	jal	ra,1c94c <dwarf::cursor::underflow()>
    return 0;
   292c8:	00000593          	addi	a1,zero,0
      regs.discriminator = cur->uleb128();
   292cc:	06b4a823          	sw	a1,112(s1)
      break;
   292d0:	07c0006f          	jal	zero,2934c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
    switch ((DW_LNE)opcode) {
   292d4:	f809091b          	addiw	s2,s2,-128
   292d8:	0189191b          	slliw	s2,s2,0x18
   292dc:	4189591b          	sraiw	s2,s2,0x18
   292e0:	14094863          	blt	s2,zero,29430 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x698>
                          to_string((DW_LNE)opcode) + " not implemented");
   292e4:	01000513          	addi	a0,zero,16
   292e8:	938ed0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   292ec:	00050493          	addi	s1,a0,0
   292f0:	000a8593          	addi	a1,s5,0
   292f4:	00010513          	addi	a0,sp,0
   292f8:	35d040ef          	jal	ra,2de54 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
   292fc:	09c0006f          	jal	zero,29398 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x600>
      regs.end_sequence = true;
   29300:	00100793          	addi	a5,zero,1
   29304:	06f48323          	sb	a5,102(s1)
      entry = regs;
   29308:	0404b803          	ld	a6,64(s1)
   2930c:	0484b503          	ld	a0,72(s1)
   29310:	0504b583          	ld	a1,80(s1)
   29314:	0584b603          	ld	a2,88(s1)
   29318:	0604b683          	ld	a3,96(s1)
   2931c:	0684b703          	ld	a4,104(s1)
   29320:	0704b783          	ld	a5,112(s1)
   29324:	0104b423          	sd	a6,8(s1)
   29328:	00a4b823          	sd	a0,16(s1)
   2932c:	00b4bc23          	sd	a1,24(s1)
   29330:	02c4b023          	sd	a2,32(s1)
   29334:	02d4b423          	sd	a3,40(s1)
   29338:	02e4b823          	sd	a4,48(s1)
   2933c:	02f4bc23          	sd	a5,56(s1)
      regs.reset(m->default_is_stmt);
   29340:	01a9c583          	lbu	a1,26(s3)
   29344:	04048513          	addi	a0,s1,64
   29348:	9d8fe0ef          	jal	ra,27520 <dwarf::line_table::entry::reset(bool)>
  section_offset get_section_offset() const { return pos - sec->begin; }
   2934c:	00043703          	ld	a4,0(s0)
   29350:	01043783          	ld	a5,16(s0)
   29354:	00873703          	ld	a4,8(a4)
   29358:	40e787b3          	sub	a5,a5,a4
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
   2935c:	fff90513          	addi	a0,s2,-1
   29360:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
   29364:	dcfa7ee3          	bgeu	s4,a5,29140 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a8>
      throw format_error("extended line number opcode exceeded its size");
   29368:	01000513          	addi	a0,zero,16
   2936c:	8b4ed0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   29370:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   29374:	0000e597          	auipc	a1,0xe
   29378:	68c58593          	addi	a1,a1,1676 # 37a00 <typeinfo name for dwarf::expr_context+0x1e0>
   2937c:	bf4ed0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   29380:	1400006f          	jal	zero,294c0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x728>
      m->read_file_entry(cur, false);
   29384:	00000613          	addi	a2,zero,0
   29388:	00040593          	addi	a1,s0,0
   2938c:	00098513          	addi	a0,s3,0
   29390:	c90fe0ef          	jal	ra,27820 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
      break;
   29394:	fb9ff06f          	jal	zero,2934c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
    { return std::move(__rhs.insert(0, __lhs)); }
   29398:	0000e617          	auipc	a2,0xe
   2939c:	64860613          	addi	a2,a2,1608 # 379e0 <typeinfo name for dwarf::expr_context+0x1c0>
   293a0:	00000593          	addi	a1,zero,0
   293a4:	00010513          	addi	a0,sp,0
   293a8:	fe9ec0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   293ac:	00050593          	addi	a1,a0,0
   293b0:	02010413          	addi	s0,sp,32
   293b4:	00040513          	addi	a0,s0,0
   293b8:	8b8ed0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   293bc:	0000e597          	auipc	a1,0xe
   293c0:	fbc58593          	addi	a1,a1,-68 # 37378 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   293c4:	00040513          	addi	a0,s0,0
   293c8:	bd8ed0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   293cc:	00050593          	addi	a1,a0,0
   293d0:	04010413          	addi	s0,sp,64
   293d4:	00040513          	addi	a0,s0,0
   293d8:	898ed0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw runtime_error("vendor line number opcode " +
   293dc:	00040593          	addi	a1,s0,0
   293e0:	00048513          	addi	a0,s1,0
   293e4:	a9ced0ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   293e8:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   293ec:	05010793          	addi	a5,sp,80
   293f0:	00f50463          	beq	a0,a5,293f8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x660>
   293f4:	91ced0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   293f8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   293fc:	03010793          	addi	a5,sp,48
   29400:	00f50463          	beq	a0,a5,29408 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x670>
   29404:	90ced0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29408:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2940c:	01010793          	addi	a5,sp,16
   29410:	00f50463          	beq	a0,a5,29418 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x680>
   29414:	8fced0ef          	jal	ra,16510 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   29418:	00019617          	auipc	a2,0x19
   2941c:	ff063603          	ld	a2,-16(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   29420:	00019597          	auipc	a1,0x19
   29424:	1d85b583          	ld	a1,472(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   29428:	00048513          	addi	a0,s1,0
   2942c:	a94ed0ef          	jal	ra,166c0 <__cxa_throw@plt>
                         to_string((DW_LNE)opcode));
   29430:	01000513          	addi	a0,zero,16
   29434:	fedec0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   29438:	00050493          	addi	s1,a0,0
   2943c:	000a8593          	addi	a1,s5,0
   29440:	02010513          	addi	a0,sp,32
   29444:	211040ef          	jal	ra,2de54 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
    { return std::move(__rhs.insert(0, __lhs)); }
   29448:	0000e617          	auipc	a2,0xe
   2944c:	57860613          	addi	a2,a2,1400 # 379c0 <typeinfo name for dwarf::expr_context+0x1a0>
   29450:	00000593          	addi	a1,zero,0
   29454:	02010513          	addi	a0,sp,32
   29458:	f39ec0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2945c:	00050593          	addi	a1,a0,0
   29460:	04010413          	addi	s0,sp,64
   29464:	00040513          	addi	a0,s0,0
   29468:	808ed0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2946c:	00040593          	addi	a1,s0,0
   29470:	00048513          	addi	a0,s1,0
   29474:	92ced0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   29478:	00019797          	auipc	a5,0x19
   2947c:	0e07b783          	ld	a5,224(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   29480:	01078793          	addi	a5,a5,16
   29484:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   29488:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2948c:	05010793          	addi	a5,sp,80
   29490:	00f50463          	beq	a0,a5,29498 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x700>
   29494:	87ced0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29498:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2949c:	03010793          	addi	a5,sp,48
   294a0:	00f50463          	beq	a0,a5,294a8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x710>
   294a4:	86ced0ef          	jal	ra,16510 <operator delete(void*)@plt>
   294a8:	00019617          	auipc	a2,0x19
   294ac:	ed863603          	ld	a2,-296(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   294b0:	00019597          	auipc	a1,0x19
   294b4:	e005b583          	ld	a1,-512(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   294b8:	00048513          	addi	a0,s1,0
   294bc:	a04ed0ef          	jal	ra,166c0 <__cxa_throw@plt>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   294c0:	00019797          	auipc	a5,0x19
   294c4:	0987b783          	ld	a5,152(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   294c8:	01078793          	addi	a5,a5,16
   294cc:	00f43023          	sd	a5,0(s0)
      throw format_error("extended line number opcode exceeded its size");
   294d0:	00019617          	auipc	a2,0x19
   294d4:	eb063603          	ld	a2,-336(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   294d8:	00019597          	auipc	a1,0x19
   294dc:	dd85b583          	ld	a1,-552(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   294e0:	00040513          	addi	a0,s0,0
   294e4:	9dced0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   294e8:	00050413          	addi	s0,a0,0
   294ec:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   294f0:	05010793          	addi	a5,sp,80
   294f4:	00f50463          	beq	a0,a5,294fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x764>
   294f8:	818ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   294fc:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29500:	03010793          	addi	a5,sp,48
   29504:	00f50463          	beq	a0,a5,2950c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x774>
   29508:	808ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string((DW_LNS)opcode));
   2950c:	00048513          	addi	a0,s1,0
   29510:	fc1ec0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   29514:	00040513          	addi	a0,s0,0
   29518:	9d8ed0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2951c:	00050413          	addi	s0,a0,0
   29520:	fddff06f          	jal	zero,294fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x764>
   29524:	00050413          	addi	s0,a0,0
   29528:	fe5ff06f          	jal	zero,2950c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x774>
   2952c:	00050413          	addi	s0,a0,0
   29530:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   29534:	05010793          	addi	a5,sp,80
   29538:	00f50463          	beq	a0,a5,29540 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7a8>
   2953c:	fd5ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29540:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29544:	03010793          	addi	a5,sp,48
   29548:	00f50463          	beq	a0,a5,29550 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7b8>
   2954c:	fc5ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29550:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   29554:	01010793          	addi	a5,sp,16
   29558:	00f50463          	beq	a0,a5,29560 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7c8>
   2955c:	fb5ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   29560:	00048513          	addi	a0,s1,0
   29564:	f6dec0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   29568:	00040513          	addi	a0,s0,0
   2956c:	984ed0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   29570:	00050413          	addi	s0,a0,0
   29574:	fcdff06f          	jal	zero,29540 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7a8>
   29578:	00050413          	addi	s0,a0,0
   2957c:	fd5ff06f          	jal	zero,29550 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7b8>
   29580:	00050413          	addi	s0,a0,0
   29584:	fddff06f          	jal	zero,29560 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x7c8>
   29588:	00050413          	addi	s0,a0,0
   2958c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   29590:	05010793          	addi	a5,sp,80
   29594:	00f50463          	beq	a0,a5,2959c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x804>
   29598:	f79ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2959c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   295a0:	03010793          	addi	a5,sp,48
   295a4:	00f50463          	beq	a0,a5,295ac <dwarf::line_table::iterator::step(dwarf::cursor*)+0x814>
   295a8:	f69ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string((DW_LNE)opcode));
   295ac:	00048513          	addi	a0,s1,0
   295b0:	f21ec0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   295b4:	00040513          	addi	a0,s0,0
   295b8:	938ed0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   295bc:	00050413          	addi	s0,a0,0
   295c0:	fddff06f          	jal	zero,2959c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x804>
   295c4:	00050413          	addi	s0,a0,0
   295c8:	fe5ff06f          	jal	zero,295ac <dwarf::line_table::iterator::step(dwarf::cursor*)+0x814>
      throw format_error("extended line number opcode exceeded its size");
   295cc:	00050493          	addi	s1,a0,0
   295d0:	00040513          	addi	a0,s0,0
   295d4:	efdec0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   295d8:	00048513          	addi	a0,s1,0
   295dc:	914ed0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
        val |= ((uint64_t)p[i]) << (i * 8);
   295e0:	0007c583          	lbu	a1,0(a5)
    pos += sizeof(T);
   295e4:	00178793          	addi	a5,a5,1
   295e8:	00f43823          	sd	a5,16(s0)
    return (T)val;
   295ec:	0ff5f913          	andi	s2,a1,255
    switch ((DW_LNE)opcode) {
   295f0:	00058a93          	addi	s5,a1,0
   295f4:	00300713          	addi	a4,zero,3
   295f8:	d8e906e3          	beq	s2,a4,29384 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5ec>
   295fc:	c7276ee3          	bltu	a4,s2,29278 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4e0>
   29600:	00100793          	addi	a5,zero,1
   29604:	cef90ee3          	beq	s2,a5,29300 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x568>
   29608:	00200793          	addi	a5,zero,2
   2960c:	e2f912e3          	bne	s2,a5,29430 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x698>
      regs.address = cur->address();
   29610:	00040513          	addi	a0,s0,0
   29614:	00019317          	auipc	t1,0x19
   29618:	d6433303          	ld	t1,-668(t1) # 42378 <dwarf::cursor::address()@@Base+0x1f584>
   2961c:	000300e7          	jalr	ra,0(t1)
   29620:	04a4b023          	sd	a0,64(s1)
      regs.op_index = 0;
   29624:	0404a423          	sw	zero,72(s1)
      break;
   29628:	d25ff06f          	jal	zero,2934c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b4>
        val |= ((uint64_t)p[i]) << (i * 8);
   2962c:	0007c903          	lbu	s2,0(a5)
    pos += sizeof(T);
   29630:	00178793          	addi	a5,a5,1
   29634:	00f43823          	sd	a5,16(s0)
    return (T)val;
   29638:	0ff97913          	andi	s2,s2,255
  if (opcode >= m->opcode_base) {
   2963c:	01d9c703          	lbu	a4,29(s3)
   29640:	fae97c63          	bgeu	s2,a4,28df8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x60>
  } else if (opcode != 0) {
   29644:	860900e3          	beq	s2,zero,28ea4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x10c>
    switch ((DW_LNS)opcode) {
   29648:	00c00693          	addi	a3,zero,12
   2964c:	b926eee3          	bltu	a3,s2,291e8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x450>
   29650:	00291693          	slli	a3,s2,0x2
   29654:	0000e617          	auipc	a2,0xe
   29658:	45460613          	addi	a2,a2,1108 # 37aa8 <typeinfo name for dwarf::expr_context+0x288>
   2965c:	00c686b3          	add	a3,a3,a2
   29660:	0006a683          	lw	a3,0(a3)
   29664:	00c686b3          	add	a3,a3,a2
   29668:	00068067          	jalr	zero,0(a3)

000000000002966c <dwarf::line_table::iterator::operator++()>:
line_table::iterator &line_table::iterator::operator++() {
   2966c:	f5010113          	addi	sp,sp,-176
   29670:	0a113423          	sd	ra,168(sp)
   29674:	0a813023          	sd	s0,160(sp)
   29678:	08913c23          	sd	s1,152(sp)
   2967c:	09213823          	sd	s2,144(sp)
   29680:	09313423          	sd	s3,136(sp)
   29684:	00050413          	addi	s0,a0,0
   29688:	00053783          	ld	a5,0(a0)
   2968c:	0007b783          	ld	a5,0(a5)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   29690:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   29694:	0087b483          	ld	s1,8(a5)
	if (_M_pi != nullptr)
   29698:	3a048863          	beq	s1,zero,29a48 <dwarf::line_table::iterator::operator++()+0x3dc>
    if (__is_single_threaded())
   2969c:	00019797          	auipc	a5,0x19
   296a0:	de47b783          	ld	a5,-540(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   296a4:	0007c783          	lbu	a5,0(a5)
   296a8:	0a078a63          	beq	a5,zero,2975c <dwarf::line_table::iterator::operator++()+0xf0>
  { *__mem += __val; }
   296ac:	0304a783          	lw	a5,48(s1)
   296b0:	0017879b          	addiw	a5,a5,1
   296b4:	02f4a823          	sw	a5,48(s1)
  cursor cur(table->m->sec, pos);
   296b8:	07843983          	ld	s3,120(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   296bc:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   296c0:	06913823          	sd	s1,112(sp)
    if (__is_single_threaded())
   296c4:	00019797          	auipc	a5,0x19
   296c8:	dbc7b783          	ld	a5,-580(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   296cc:	0007c783          	lbu	a5,0(a5)
   296d0:	08078e63          	beq	a5,zero,2976c <dwarf::line_table::iterator::operator++()+0x100>
  { *__mem += __val; }
   296d4:	0304a783          	lw	a5,48(s1)
   296d8:	0017879b          	addiw	a5,a5,1
   296dc:	02f4a823          	sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   296e0:	00893783          	ld	a5,8(s2)
   296e4:	013787b3          	add	a5,a5,s3
   296e8:	06f13c23          	sd	a5,120(sp)
    if (__is_single_threaded())
   296ec:	00019797          	auipc	a5,0x19
   296f0:	d947b783          	ld	a5,-620(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   296f4:	0007c783          	lbu	a5,0(a5)
   296f8:	08078263          	beq	a5,zero,2977c <dwarf::line_table::iterator::operator++()+0x110>
    _Atomic_word __result = *__mem;
   296fc:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   29700:	fff5079b          	addiw	a5,a0,-1
   29704:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   29708:	00100793          	addi	a5,zero,1
   2970c:	34f51a63          	bne	a0,a5,29a60 <dwarf::line_table::iterator::operator++()+0x3f4>
	_M_dispose();
   29710:	0004b783          	ld	a5,0(s1)
   29714:	0107b783          	ld	a5,16(a5)
   29718:	00048513          	addi	a0,s1,0
   2971c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   29720:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   29724:	00019797          	auipc	a5,0x19
   29728:	d5c7b783          	ld	a5,-676(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2972c:	0007c783          	lbu	a5,0(a5)
   29730:	04078e63          	beq	a5,zero,2978c <dwarf::line_table::iterator::operator++()+0x120>
    _Atomic_word __result = *__mem;
   29734:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   29738:	fff5079b          	addiw	a5,a0,-1
   2973c:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   29740:	00100793          	addi	a5,zero,1
   29744:	30f51e63          	bne	a0,a5,29a60 <dwarf::line_table::iterator::operator++()+0x3f4>
	    _M_destroy();
   29748:	0004b783          	ld	a5,0(s1)
   2974c:	0187b783          	ld	a5,24(a5)
   29750:	00048513          	addi	a0,s1,0
   29754:	000780e7          	jalr	ra,0(a5)
   29758:	3080006f          	jal	zero,29a60 <dwarf::line_table::iterator::operator++()+0x3f4>
      __atomic_add(__mem, __val);
   2975c:	00100593          	addi	a1,zero,1
   29760:	03048513          	addi	a0,s1,48
   29764:	bedec0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   29768:	f51ff06f          	jal	zero,296b8 <dwarf::line_table::iterator::operator++()+0x4c>
   2976c:	00100593          	addi	a1,zero,1
   29770:	03048513          	addi	a0,s1,48
   29774:	bddec0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   29778:	f69ff06f          	jal	zero,296e0 <dwarf::line_table::iterator::operator++()+0x74>
      return __exchange_and_add(__mem, __val);
   2977c:	fff00593          	addi	a1,zero,-1
   29780:	03048513          	addi	a0,s1,48
   29784:	bfdec0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29788:	f81ff06f          	jal	zero,29708 <dwarf::line_table::iterator::operator++()+0x9c>
   2978c:	fff00593          	addi	a1,zero,-1
   29790:	03448513          	addi	a0,s1,52
   29794:	bedec0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29798:	fa9ff06f          	jal	zero,29740 <dwarf::line_table::iterator::operator++()+0xd4>
  if (stepped && !output)
   2979c:	30048063          	beq	s1,zero,29a9c <dwarf::line_table::iterator::operator++()+0x430>
   297a0:	0a050863          	beq	a0,zero,29850 <dwarf::line_table::iterator::operator++()+0x1e4>
  if (stepped && cur.end()) {
   297a4:	00d7ea63          	bltu	a5,a3,297b8 <dwarf::line_table::iterator::operator++()+0x14c>
      { return _M_ptr; }
   297a8:	00043683          	ld	a3,0(s0)
   297ac:	0006b683          	ld	a3,0(a3)
    table->m->file_names_complete = true;
   297b0:	00100613          	addi	a2,zero,1
   297b4:	06c68823          	sb	a2,112(a3)
    if (entry.file_index < table->m->file_names.size())
   297b8:	02046583          	lwu	a1,32(s0)
   297bc:	00043683          	ld	a3,0(s0)
   297c0:	0006b683          	ld	a3,0(a3)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   297c4:	0506b603          	ld	a2,80(a3)
   297c8:	0586b683          	ld	a3,88(a3)
   297cc:	40c686b3          	sub	a3,a3,a2
   297d0:	4046d693          	srai	a3,a3,0x4
   297d4:	0000d517          	auipc	a0,0xd
   297d8:	30453503          	ld	a0,772(a0) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   297dc:	02a686b3          	mul	a3,a3,a0
   297e0:	0ad5fc63          	bgeu	a1,a3,29898 <dwarf::line_table::iterator::operator++()+0x22c>
	return *(this->_M_impl._M_start + __n);
   297e4:	00159693          	slli	a3,a1,0x1
   297e8:	00b686b3          	add	a3,a3,a1
   297ec:	00469693          	slli	a3,a3,0x4
   297f0:	00d60633          	add	a2,a2,a3
      entry.file = &table->m->file_names[entry.file_index];
   297f4:	00c43c23          	sd	a2,24(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   297f8:	00873703          	ld	a4,8(a4)
   297fc:	40e787b3          	sub	a5,a5,a4
  pos = cur.get_section_offset();
   29800:	06f43c23          	sd	a5,120(s0)
	if (_M_pi != nullptr)
   29804:	07013483          	ld	s1,112(sp)
   29808:	02048463          	beq	s1,zero,29830 <dwarf::line_table::iterator::operator++()+0x1c4>
    if (__is_single_threaded())
   2980c:	00019797          	auipc	a5,0x19
   29810:	c747b783          	ld	a5,-908(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   29814:	0007c783          	lbu	a5,0(a5)
   29818:	14078663          	beq	a5,zero,29964 <dwarf::line_table::iterator::operator++()+0x2f8>
    _Atomic_word __result = *__mem;
   2981c:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   29820:	fff5079b          	addiw	a5,a0,-1
   29824:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   29828:	00100793          	addi	a5,zero,1
   2982c:	14f50463          	beq	a0,a5,29974 <dwarf::line_table::iterator::operator++()+0x308>
}
   29830:	00040513          	addi	a0,s0,0
   29834:	0a813083          	ld	ra,168(sp)
   29838:	0a013403          	ld	s0,160(sp)
   2983c:	09813483          	ld	s1,152(sp)
   29840:	09013903          	ld	s2,144(sp)
   29844:	08813983          	ld	s3,136(sp)
   29848:	0b010113          	addi	sp,sp,176
   2984c:	00008067          	jalr	zero,0(ra)
    throw format_error("unexpected end of line table");
   29850:	01000513          	addi	a0,zero,16
   29854:	bcdec0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   29858:	00050493          	addi	s1,a0,0
   2985c:	0000e597          	auipc	a1,0xe
   29860:	1d458593          	addi	a1,a1,468 # 37a30 <typeinfo name for dwarf::expr_context+0x210>
   29864:	f0dec0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   29868:	00019797          	auipc	a5,0x19
   2986c:	cf07b783          	ld	a5,-784(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   29870:	01078793          	addi	a5,a5,16
   29874:	00f4b023          	sd	a5,0(s1)
   29878:	00019617          	auipc	a2,0x19
   2987c:	b0863603          	ld	a2,-1272(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   29880:	00019597          	auipc	a1,0x19
   29884:	a305b583          	ld	a1,-1488(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   29888:	00048513          	addi	a0,s1,0
   2988c:	e35ec0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   29890:	00050413          	addi	s0,a0,0
   29894:	1480006f          	jal	zero,299dc <dwarf::line_table::iterator::operator++()+0x370>
                         " in line table");
   29898:	01000513          	addi	a0,zero,16
   2989c:	b85ec0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   298a0:	00050493          	addi	s1,a0,0
      throw format_error("bad file index " + std::to_string(entry.file_index) +
   298a4:	02042583          	lw	a1,32(s0)
   298a8:	00810413          	addi	s0,sp,8
   298ac:	00040513          	addi	a0,s0,0
   298b0:	00019317          	auipc	t1,0x19
   298b4:	c4033303          	ld	t1,-960(t1) # 424f0 <std::__cxx11::to_string(unsigned int)@@Base+0x18040>
   298b8:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   298bc:	0000e617          	auipc	a2,0xe
   298c0:	19460613          	addi	a2,a2,404 # 37a50 <typeinfo name for dwarf::expr_context+0x230>
   298c4:	00000593          	addi	a1,zero,0
   298c8:	00040513          	addi	a0,s0,0
   298cc:	ac5ec0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   298d0:	00050593          	addi	a1,a0,0
   298d4:	02810413          	addi	s0,sp,40
   298d8:	00040513          	addi	a0,s0,0
   298dc:	b95ec0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   298e0:	0000e597          	auipc	a1,0xe
   298e4:	18058593          	addi	a1,a1,384 # 37a60 <typeinfo name for dwarf::expr_context+0x240>
   298e8:	00040513          	addi	a0,s0,0
   298ec:	eb5ec0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   298f0:	00050593          	addi	a1,a0,0
   298f4:	04810413          	addi	s0,sp,72
   298f8:	00040513          	addi	a0,s0,0
   298fc:	b75ec0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   29900:	00040593          	addi	a1,s0,0
   29904:	00048513          	addi	a0,s1,0
   29908:	c99ec0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2990c:	00019797          	auipc	a5,0x19
   29910:	c4c7b783          	ld	a5,-948(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   29914:	01078793          	addi	a5,a5,16
   29918:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2991c:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   29920:	05810793          	addi	a5,sp,88
   29924:	00f50463          	beq	a0,a5,2992c <dwarf::line_table::iterator::operator++()+0x2c0>
   29928:	be9ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2992c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   29930:	03810793          	addi	a5,sp,56
   29934:	00f50463          	beq	a0,a5,2993c <dwarf::line_table::iterator::operator++()+0x2d0>
   29938:	bd9ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2993c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   29940:	01810793          	addi	a5,sp,24
   29944:	00f50463          	beq	a0,a5,2994c <dwarf::line_table::iterator::operator++()+0x2e0>
   29948:	bc9ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
                         " in line table");
   2994c:	00019617          	auipc	a2,0x19
   29950:	a3463603          	ld	a2,-1484(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   29954:	00019597          	auipc	a1,0x19
   29958:	95c5b583          	ld	a1,-1700(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2995c:	00048513          	addi	a0,s1,0
   29960:	d61ec0ef          	jal	ra,166c0 <__cxa_throw@plt>
      return __exchange_and_add(__mem, __val);
   29964:	fff00593          	addi	a1,zero,-1
   29968:	03048513          	addi	a0,s1,48
   2996c:	a15ec0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   29970:	eb9ff06f          	jal	zero,29828 <dwarf::line_table::iterator::operator++()+0x1bc>
	_M_dispose();
   29974:	0004b783          	ld	a5,0(s1)
   29978:	0107b783          	ld	a5,16(a5)
   2997c:	00048513          	addi	a0,s1,0
   29980:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   29984:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   29988:	00019797          	auipc	a5,0x19
   2998c:	af87b783          	ld	a5,-1288(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   29990:	0007c783          	lbu	a5,0(a5)
   29994:	02078663          	beq	a5,zero,299c0 <dwarf::line_table::iterator::operator++()+0x354>
    _Atomic_word __result = *__mem;
   29998:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   2999c:	fff5079b          	addiw	a5,a0,-1
   299a0:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   299a4:	00100793          	addi	a5,zero,1
   299a8:	e8f514e3          	bne	a0,a5,29830 <dwarf::line_table::iterator::operator++()+0x1c4>
	    _M_destroy();
   299ac:	0004b783          	ld	a5,0(s1)
   299b0:	0187b783          	ld	a5,24(a5)
   299b4:	00048513          	addi	a0,s1,0
   299b8:	000780e7          	jalr	ra,0(a5)
  return *this;
   299bc:	e75ff06f          	jal	zero,29830 <dwarf::line_table::iterator::operator++()+0x1c4>
      return __exchange_and_add(__mem, __val);
   299c0:	fff00593          	addi	a1,zero,-1
   299c4:	03448513          	addi	a0,s1,52
   299c8:	9b9ec0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   299cc:	fd9ff06f          	jal	zero,299a4 <dwarf::line_table::iterator::operator++()+0x338>
    throw format_error("unexpected end of line table");
   299d0:	00050413          	addi	s0,a0,0
   299d4:	00048513          	addi	a0,s1,0
   299d8:	af9ec0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   299dc:	07013503          	ld	a0,112(sp)
   299e0:	00050863          	beq	a0,zero,299f0 <dwarf::line_table::iterator::operator++()+0x384>
	  _M_pi->_M_release();
   299e4:	00019317          	auipc	t1,0x19
   299e8:	9e433303          	ld	t1,-1564(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   299ec:	000300e7          	jalr	ra,0(t1)
   299f0:	00040513          	addi	a0,s0,0
   299f4:	cfdec0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   299f8:	00050413          	addi	s0,a0,0
   299fc:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   29a00:	05810793          	addi	a5,sp,88
   29a04:	00f50463          	beq	a0,a5,29a0c <dwarf::line_table::iterator::operator++()+0x3a0>
   29a08:	b09ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29a0c:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   29a10:	03810793          	addi	a5,sp,56
   29a14:	00f50463          	beq	a0,a5,29a1c <dwarf::line_table::iterator::operator++()+0x3b0>
   29a18:	af9ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29a1c:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   29a20:	01810793          	addi	a5,sp,24
   29a24:	00f50463          	beq	a0,a5,29a2c <dwarf::line_table::iterator::operator++()+0x3c0>
   29a28:	ae9ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
                         " in line table");
   29a2c:	00048513          	addi	a0,s1,0
   29a30:	aa1ec0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   29a34:	fa9ff06f          	jal	zero,299dc <dwarf::line_table::iterator::operator++()+0x370>
      { return _M_dataplus._M_p; }
   29a38:	00050413          	addi	s0,a0,0
   29a3c:	fd1ff06f          	jal	zero,29a0c <dwarf::line_table::iterator::operator++()+0x3a0>
   29a40:	00050413          	addi	s0,a0,0
   29a44:	fd9ff06f          	jal	zero,29a1c <dwarf::line_table::iterator::operator++()+0x3b0>
  cursor cur(table->m->sec, pos);
   29a48:	07853703          	ld	a4,120(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   29a4c:	07213423          	sd	s2,104(sp)
      : _M_pi(__r._M_pi)
   29a50:	06013823          	sd	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   29a54:	00893783          	ld	a5,8(s2)
   29a58:	00e787b3          	add	a5,a5,a4
   29a5c:	06f13c23          	sd	a5,120(sp)
line_table::iterator &line_table::iterator::operator++() {
   29a60:	00000513          	addi	a0,zero,0
   29a64:	00000493          	addi	s1,zero,0
    stepped = true;
   29a68:	00100913          	addi	s2,zero,1
    output = step(&cur);
   29a6c:	06810993          	addi	s3,sp,104
  bool end() const { return pos >= sec->end; }
   29a70:	07813783          	ld	a5,120(sp)
      { return _M_ptr; }
   29a74:	06813703          	ld	a4,104(sp)
   29a78:	01073683          	ld	a3,16(a4)
  while (!cur.end() && !output) {
   29a7c:	d2d7f0e3          	bgeu	a5,a3,2979c <dwarf::line_table::iterator::operator++()+0x130>
   29a80:	00051c63          	bne	a0,zero,29a98 <dwarf::line_table::iterator::operator++()+0x42c>
    stepped = true;
   29a84:	00090493          	addi	s1,s2,0
    output = step(&cur);
   29a88:	00098593          	addi	a1,s3,0
   29a8c:	00040513          	addi	a0,s0,0
   29a90:	b08ff0ef          	jal	ra,28d98 <dwarf::line_table::iterator::step(dwarf::cursor*)>
   29a94:	fddff06f          	jal	zero,29a70 <dwarf::line_table::iterator::operator++()+0x404>
  if (stepped && !output)
   29a98:	d20490e3          	bne	s1,zero,297b8 <dwarf::line_table::iterator::operator++()+0x14c>
  if (output) {
   29a9c:	d4050ee3          	beq	a0,zero,297f8 <dwarf::line_table::iterator::operator++()+0x18c>
   29aa0:	d19ff06f          	jal	zero,297b8 <dwarf::line_table::iterator::operator++()+0x14c>

0000000000029aa4 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>:
    : table(table), pos(pos) {
   29aa4:	00b53023          	sd	a1,0(a0)
   29aa8:	06c53c23          	sd	a2,120(a0)
  if (table) {
   29aac:	02058e63          	beq	a1,zero,29ae8 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)+0x44>
line_table::iterator::iterator(const line_table *table, section_offset pos)
   29ab0:	ff010113          	addi	sp,sp,-16
   29ab4:	00113423          	sd	ra,8(sp)
   29ab8:	00813023          	sd	s0,0(sp)
   29abc:	00050413          	addi	s0,a0,0
    regs.reset(table->m->default_is_stmt);
   29ac0:	0005b783          	ld	a5,0(a1)
   29ac4:	01a7c583          	lbu	a1,26(a5)
   29ac8:	04050513          	addi	a0,a0,64
   29acc:	a55fd0ef          	jal	ra,27520 <dwarf::line_table::entry::reset(bool)>
    ++(*this);
   29ad0:	00040513          	addi	a0,s0,0
   29ad4:	b99ff0ef          	jal	ra,2966c <dwarf::line_table::iterator::operator++()>
}
   29ad8:	00813083          	ld	ra,8(sp)
   29adc:	00013403          	ld	s0,0(sp)
   29ae0:	01010113          	addi	sp,sp,16
   29ae4:	00008067          	jalr	zero,0(ra)
   29ae8:	00008067          	jalr	zero,0(ra)

0000000000029aec <dwarf::line_table::begin() const>:
line_table::iterator line_table::begin() const {
   29aec:	ff010113          	addi	sp,sp,-16
   29af0:	00113423          	sd	ra,8(sp)
   29af4:	00813023          	sd	s0,0(sp)
   29af8:	00050413          	addi	s0,a0,0
      { return _M_ptr != nullptr; }
   29afc:	0005b783          	ld	a5,0(a1)
  if (!valid())
   29b00:	02078063          	beq	a5,zero,29b20 <dwarf::line_table::begin() const+0x34>
  return iterator(this, m->program_offset);
   29b04:	0107b603          	ld	a2,16(a5)
   29b08:	f9dff0ef          	jal	ra,29aa4 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   29b0c:	00040513          	addi	a0,s0,0
   29b10:	00813083          	ld	ra,8(sp)
   29b14:	00013403          	ld	s0,0(sp)
   29b18:	01010113          	addi	sp,sp,16
   29b1c:	00008067          	jalr	zero,0(ra)
    return iterator(nullptr, 0);
   29b20:	00000613          	addi	a2,zero,0
   29b24:	00000593          	addi	a1,zero,0
   29b28:	f7dff0ef          	jal	ra,29aa4 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   29b2c:	fe1ff06f          	jal	zero,29b0c <dwarf::line_table::begin() const+0x20>

0000000000029b30 <dwarf::line_table::end() const>:
line_table::iterator line_table::end() const {
   29b30:	ff010113          	addi	sp,sp,-16
   29b34:	00113423          	sd	ra,8(sp)
   29b38:	00813023          	sd	s0,0(sp)
   29b3c:	00050413          	addi	s0,a0,0
   29b40:	0005b783          	ld	a5,0(a1)
  if (!valid())
   29b44:	02078663          	beq	a5,zero,29b70 <dwarf::line_table::end() const+0x40>
      { return _M_ptr; }
   29b48:	0007b783          	ld	a5,0(a5)
  size_t size() const { return end - begin; }
   29b4c:	0107b603          	ld	a2,16(a5)
   29b50:	0087b783          	ld	a5,8(a5)
  return iterator(this, m->sec->size());
   29b54:	40f60633          	sub	a2,a2,a5
   29b58:	f4dff0ef          	jal	ra,29aa4 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   29b5c:	00040513          	addi	a0,s0,0
   29b60:	00813083          	ld	ra,8(sp)
   29b64:	00013403          	ld	s0,0(sp)
   29b68:	01010113          	addi	sp,sp,16
   29b6c:	00008067          	jalr	zero,0(ra)
    return iterator(nullptr, 0);
   29b70:	00000613          	addi	a2,zero,0
   29b74:	00000593          	addi	a1,zero,0
   29b78:	f2dff0ef          	jal	ra,29aa4 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   29b7c:	fe1ff06f          	jal	zero,29b5c <dwarf::line_table::end() const+0x2c>

0000000000029b80 <dwarf::line_table::find_address(unsigned long) const>:
line_table::iterator line_table::find_address(taddr addr) const {
   29b80:	e4010113          	addi	sp,sp,-448
   29b84:	1a113c23          	sd	ra,440(sp)
   29b88:	1a813823          	sd	s0,432(sp)
   29b8c:	1a913423          	sd	s1,424(sp)
   29b90:	1b213023          	sd	s2,416(sp)
   29b94:	19313c23          	sd	s3,408(sp)
   29b98:	19413823          	sd	s4,400(sp)
   29b9c:	19513423          	sd	s5,392(sp)
   29ba0:	00050413          	addi	s0,a0,0
   29ba4:	00058493          	addi	s1,a1,0
   29ba8:	00060913          	addi	s2,a2,0
  iterator prev = begin(), e = end();
   29bac:	f41ff0ef          	jal	ra,29aec <dwarf::line_table::begin() const>
   29bb0:	00048593          	addi	a1,s1,0
   29bb4:	10010513          	addi	a0,sp,256
   29bb8:	f79ff0ef          	jal	ra,29b30 <dwarf::line_table::end() const>
   29bbc:	10013a03          	ld	s4,256(sp)
   29bc0:	17813983          	ld	s3,376(sp)
    return o.pos == pos && o.table == table;
   29bc4:	07843783          	ld	a5,120(s0)
   29bc8:	05378863          	beq	a5,s3,29c18 <dwarf::line_table::find_address(unsigned long) const+0x98>
  iterator it = prev;
   29bcc:	00040793          	addi	a5,s0,0
   29bd0:	08010713          	addi	a4,sp,128
   29bd4:	08040813          	addi	a6,s0,128
   29bd8:	0007b503          	ld	a0,0(a5)
   29bdc:	0087b583          	ld	a1,8(a5)
   29be0:	0107b603          	ld	a2,16(a5)
   29be4:	0187b683          	ld	a3,24(a5)
   29be8:	00a73023          	sd	a0,0(a4)
   29bec:	00b73423          	sd	a1,8(a4)
   29bf0:	00c73823          	sd	a2,16(a4)
   29bf4:	00d73c23          	sd	a3,24(a4)
   29bf8:	02078793          	addi	a5,a5,32
   29bfc:	02070713          	addi	a4,a4,32
   29c00:	fd079ce3          	bne	a5,a6,29bd8 <dwarf::line_table::find_address(unsigned long) const+0x58>
  for (++it; it != e; prev = it++) {
   29c04:	08010513          	addi	a0,sp,128
   29c08:	a65ff0ef          	jal	ra,2966c <dwarf::line_table::iterator::operator++()>
    iterator tmp(*this);
   29c0c:	10010a93          	addi	s5,sp,256
    ++(*this);
   29c10:	08010493          	addi	s1,sp,128
   29c14:	0800006f          	jal	zero,29c94 <dwarf::line_table::find_address(unsigned long) const+0x114>
    return o.pos == pos && o.table == table;
   29c18:	00043783          	ld	a5,0(s0)
   29c1c:	fafa18e3          	bne	s4,a5,29bcc <dwarf::line_table::find_address(unsigned long) const+0x4c>
   29c20:	0d80006f          	jal	zero,29cf8 <dwarf::line_table::find_address(unsigned long) const+0x178>
    iterator tmp(*this);
   29c24:	08010793          	addi	a5,sp,128
   29c28:	00010713          	addi	a4,sp,0
   29c2c:	0007b503          	ld	a0,0(a5)
   29c30:	0087b583          	ld	a1,8(a5)
   29c34:	0107b603          	ld	a2,16(a5)
   29c38:	0187b683          	ld	a3,24(a5)
   29c3c:	00a73023          	sd	a0,0(a4)
   29c40:	00b73423          	sd	a1,8(a4)
   29c44:	00c73823          	sd	a2,16(a4)
   29c48:	00d73c23          	sd	a3,24(a4)
   29c4c:	02078793          	addi	a5,a5,32
   29c50:	02070713          	addi	a4,a4,32
   29c54:	fd579ce3          	bne	a5,s5,29c2c <dwarf::line_table::find_address(unsigned long) const+0xac>
    ++(*this);
   29c58:	00048513          	addi	a0,s1,0
   29c5c:	a11ff0ef          	jal	ra,2966c <dwarf::line_table::iterator::operator++()>
   29c60:	00010793          	addi	a5,sp,0
   29c64:	00040713          	addi	a4,s0,0
   29c68:	0007b503          	ld	a0,0(a5)
   29c6c:	0087b583          	ld	a1,8(a5)
   29c70:	0107b603          	ld	a2,16(a5)
   29c74:	0187b683          	ld	a3,24(a5)
   29c78:	00a73023          	sd	a0,0(a4)
   29c7c:	00b73423          	sd	a1,8(a4)
   29c80:	00c73823          	sd	a2,16(a4)
   29c84:	00d73c23          	sd	a3,24(a4)
   29c88:	02078793          	addi	a5,a5,32
   29c8c:	02070713          	addi	a4,a4,32
   29c90:	fc979ce3          	bne	a5,s1,29c68 <dwarf::line_table::find_address(unsigned long) const+0xe8>
    return o.pos == pos && o.table == table;
   29c94:	0f813783          	ld	a5,248(sp)
   29c98:	03378063          	beq	a5,s3,29cb8 <dwarf::line_table::find_address(unsigned long) const+0x138>
    if (prev->address <= addr && it->address > addr && !prev->end_sequence)
   29c9c:	00843783          	ld	a5,8(s0)
   29ca0:	f8f962e3          	bltu	s2,a5,29c24 <dwarf::line_table::find_address(unsigned long) const+0xa4>
   29ca4:	08813783          	ld	a5,136(sp)
   29ca8:	f6f97ee3          	bgeu	s2,a5,29c24 <dwarf::line_table::find_address(unsigned long) const+0xa4>
   29cac:	02e44783          	lbu	a5,46(s0)
   29cb0:	f6079ae3          	bne	a5,zero,29c24 <dwarf::line_table::find_address(unsigned long) const+0xa4>
   29cb4:	0440006f          	jal	zero,29cf8 <dwarf::line_table::find_address(unsigned long) const+0x178>
   29cb8:	08013783          	ld	a5,128(sp)
   29cbc:	fefa10e3          	bne	s4,a5,29c9c <dwarf::line_table::find_address(unsigned long) const+0x11c>
  prev = e;
   29cc0:	10010793          	addi	a5,sp,256
   29cc4:	00040713          	addi	a4,s0,0
   29cc8:	18010813          	addi	a6,sp,384
   29ccc:	0007b503          	ld	a0,0(a5)
   29cd0:	0087b583          	ld	a1,8(a5)
   29cd4:	0107b603          	ld	a2,16(a5)
   29cd8:	0187b683          	ld	a3,24(a5)
   29cdc:	00a73023          	sd	a0,0(a4)
   29ce0:	00b73423          	sd	a1,8(a4)
   29ce4:	00c73823          	sd	a2,16(a4)
   29ce8:	00d73c23          	sd	a3,24(a4)
   29cec:	02078793          	addi	a5,a5,32
   29cf0:	02070713          	addi	a4,a4,32
   29cf4:	fd079ce3          	bne	a5,a6,29ccc <dwarf::line_table::find_address(unsigned long) const+0x14c>
}
   29cf8:	00040513          	addi	a0,s0,0
   29cfc:	1b813083          	ld	ra,440(sp)
   29d00:	1b013403          	ld	s0,432(sp)
   29d04:	1a813483          	ld	s1,424(sp)
   29d08:	1a013903          	ld	s2,416(sp)
   29d0c:	19813983          	ld	s3,408(sp)
   29d10:	19013a03          	ld	s4,400(sp)
   29d14:	18813a83          	ld	s5,392(sp)
   29d18:	1c010113          	addi	sp,sp,448
   29d1c:	00008067          	jalr	zero,0(ra)

0000000000029d20 <dwarf::line_table::get_file(unsigned int) const>:
const line_table::file *line_table::get_file(unsigned index) const {
   29d20:	e7010113          	addi	sp,sp,-400
   29d24:	18113423          	sd	ra,392(sp)
   29d28:	18813023          	sd	s0,384(sp)
   29d2c:	16913c23          	sd	s1,376(sp)
   29d30:	17213823          	sd	s2,368(sp)
   29d34:	17313423          	sd	s3,360(sp)
   29d38:	00050413          	addi	s0,a0,0
  if (index >= m->file_names.size()) {
   29d3c:	02059493          	slli	s1,a1,0x20
   29d40:	0204d493          	srli	s1,s1,0x20
   29d44:	00053703          	ld	a4,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   29d48:	05873783          	ld	a5,88(a4)
   29d4c:	05073683          	ld	a3,80(a4)
   29d50:	40d787b3          	sub	a5,a5,a3
   29d54:	4047d793          	srai	a5,a5,0x4
   29d58:	0000d697          	auipc	a3,0xd
   29d5c:	d806b683          	ld	a3,-640(a3) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   29d60:	02d787b3          	mul	a5,a5,a3
   29d64:	0af4e863          	bltu	s1,a5,29e14 <dwarf::line_table::get_file(unsigned int) const+0xf4>
   29d68:	00058913          	addi	s2,a1,0
    if (!m->file_names_complete) {
   29d6c:	07074783          	lbu	a5,112(a4)
   29d70:	04078063          	beq	a5,zero,29db0 <dwarf::line_table::get_file(unsigned int) const+0x90>
                         std::to_string(m->file_names.size()));
   29d74:	01000513          	addi	a0,zero,16
   29d78:	ea8ec0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   29d7c:	00050493          	addi	s1,a0,0
      throw out_of_range("file name index " + std::to_string(index) +
   29d80:	00090593          	addi	a1,s2,0
   29d84:	00010913          	addi	s2,sp,0
   29d88:	00090513          	addi	a0,s2,0
   29d8c:	00018317          	auipc	t1,0x18
   29d90:	76433303          	ld	t1,1892(t1) # 424f0 <std::__cxx11::to_string(unsigned int)@@Base+0x18040>
   29d94:	000300e7          	jalr	ra,0(t1)
    { return std::move(__rhs.insert(0, __lhs)); }
   29d98:	0000e617          	auipc	a2,0xe
   29d9c:	cd860613          	addi	a2,a2,-808 # 37a70 <typeinfo name for dwarf::expr_context+0x250>
   29da0:	00000593          	addi	a1,zero,0
   29da4:	00090513          	addi	a0,s2,0
   29da8:	de8ec0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   29dac:	09c0006f          	jal	zero,29e48 <dwarf::line_table::get_file(unsigned int) const+0x128>
      for (auto &ent : *this)
   29db0:	00050593          	addi	a1,a0,0
   29db4:	06010513          	addi	a0,sp,96
   29db8:	d35ff0ef          	jal	ra,29aec <dwarf::line_table::begin() const>
   29dbc:	00040593          	addi	a1,s0,0
   29dc0:	0e010513          	addi	a0,sp,224
   29dc4:	d6dff0ef          	jal	ra,29b30 <dwarf::line_table::end() const>
   29dc8:	06010993          	addi	s3,sp,96
   29dcc:	00c0006f          	jal	zero,29dd8 <dwarf::line_table::get_file(unsigned int) const+0xb8>
   29dd0:	00098513          	addi	a0,s3,0
   29dd4:	899ff0ef          	jal	ra,2966c <dwarf::line_table::iterator::operator++()>
   29dd8:	0d813703          	ld	a4,216(sp)
   29ddc:	15813783          	ld	a5,344(sp)
   29de0:	fef718e3          	bne	a4,a5,29dd0 <dwarf::line_table::get_file(unsigned int) const+0xb0>
   29de4:	0e013703          	ld	a4,224(sp)
   29de8:	06013783          	ld	a5,96(sp)
   29dec:	fef712e3          	bne	a4,a5,29dd0 <dwarf::line_table::get_file(unsigned int) const+0xb0>
   29df0:	00043703          	ld	a4,0(s0)
   29df4:	05873783          	ld	a5,88(a4)
   29df8:	05073703          	ld	a4,80(a4)
   29dfc:	40e787b3          	sub	a5,a5,a4
   29e00:	4047d793          	srai	a5,a5,0x4
   29e04:	0000d717          	auipc	a4,0xd
   29e08:	cd473703          	ld	a4,-812(a4) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   29e0c:	02e787b3          	mul	a5,a5,a4
    if (index >= m->file_names.size())
   29e10:	f6f4f2e3          	bgeu	s1,a5,29d74 <dwarf::line_table::get_file(unsigned int) const+0x54>
	return *(this->_M_impl._M_start + __n);
   29e14:	00043703          	ld	a4,0(s0)
   29e18:	00149793          	slli	a5,s1,0x1
   29e1c:	009787b3          	add	a5,a5,s1
   29e20:	00479793          	slli	a5,a5,0x4
   29e24:	05073503          	ld	a0,80(a4)
   29e28:	00f50533          	add	a0,a0,a5
}
   29e2c:	18813083          	ld	ra,392(sp)
   29e30:	18013403          	ld	s0,384(sp)
   29e34:	17813483          	ld	s1,376(sp)
   29e38:	17013903          	ld	s2,368(sp)
   29e3c:	16813983          	ld	s3,360(sp)
   29e40:	19010113          	addi	sp,sp,400
   29e44:	00008067          	jalr	zero,0(ra)
   29e48:	00050593          	addi	a1,a0,0
   29e4c:	02010913          	addi	s2,sp,32
   29e50:	00090513          	addi	a0,s2,0
   29e54:	e1cec0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   29e58:	0000e597          	auipc	a1,0xe
   29e5c:	c3058593          	addi	a1,a1,-976 # 37a88 <typeinfo name for dwarf::expr_context+0x268>
   29e60:	00090513          	addi	a0,s2,0
   29e64:	93dec0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   29e68:	00050593          	addi	a1,a0,0
   29e6c:	04010513          	addi	a0,sp,64
   29e70:	e00ec0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   29e74:	00043703          	ld	a4,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   29e78:	05873783          	ld	a5,88(a4)
   29e7c:	05073703          	ld	a4,80(a4)
   29e80:	40e787b3          	sub	a5,a5,a4
   29e84:	4047d793          	srai	a5,a5,0x4
                         std::to_string(m->file_names.size()));
   29e88:	0000d597          	auipc	a1,0xd
   29e8c:	c505b583          	ld	a1,-944(a1) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   29e90:	02b785b3          	mul	a1,a5,a1
   29e94:	06010513          	addi	a0,sp,96
   29e98:	00018317          	auipc	t1,0x18
   29e9c:	46833303          	ld	t1,1128(t1) # 42300 <std::__cxx11::to_string(unsigned long)@@Base+0x18170>
   29ea0:	000300e7          	jalr	ra,0(t1)
                         " exceeds file table size of " +
   29ea4:	06010613          	addi	a2,sp,96
   29ea8:	04010593          	addi	a1,sp,64
   29eac:	0e010513          	addi	a0,sp,224
   29eb0:	00018317          	auipc	t1,0x18
   29eb4:	51033303          	ld	t1,1296(t1) # 423c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17e98>
   29eb8:	000300e7          	jalr	ra,0(t1)
      throw out_of_range("file name index " + std::to_string(index) +
   29ebc:	0e010593          	addi	a1,sp,224
   29ec0:	00048513          	addi	a0,s1,0
   29ec4:	f8cec0ef          	jal	ra,16650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   29ec8:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   29ecc:	0f010793          	addi	a5,sp,240
   29ed0:	00f50463          	beq	a0,a5,29ed8 <dwarf::line_table::get_file(unsigned int) const+0x1b8>
   29ed4:	e3cec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29ed8:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   29edc:	07010793          	addi	a5,sp,112
   29ee0:	00f50463          	beq	a0,a5,29ee8 <dwarf::line_table::get_file(unsigned int) const+0x1c8>
   29ee4:	e2cec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29ee8:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   29eec:	05010793          	addi	a5,sp,80
   29ef0:	00f50463          	beq	a0,a5,29ef8 <dwarf::line_table::get_file(unsigned int) const+0x1d8>
   29ef4:	e1cec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29ef8:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29efc:	03010793          	addi	a5,sp,48
   29f00:	00f50463          	beq	a0,a5,29f08 <dwarf::line_table::get_file(unsigned int) const+0x1e8>
   29f04:	e0cec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29f08:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   29f0c:	01010793          	addi	a5,sp,16
   29f10:	00f50463          	beq	a0,a5,29f18 <dwarf::line_table::get_file(unsigned int) const+0x1f8>
   29f14:	dfcec0ef          	jal	ra,16510 <operator delete(void*)@plt>
                         std::to_string(m->file_names.size()));
   29f18:	00018617          	auipc	a2,0x18
   29f1c:	5a863603          	ld	a2,1448(a2) # 424c0 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   29f20:	00018597          	auipc	a1,0x18
   29f24:	6505b583          	ld	a1,1616(a1) # 42570 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   29f28:	00048513          	addi	a0,s1,0
   29f2c:	f94ec0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   29f30:	00050413          	addi	s0,a0,0
   29f34:	0e013503          	ld	a0,224(sp)
	if (!_M_is_local())
   29f38:	0f010793          	addi	a5,sp,240
   29f3c:	00f50463          	beq	a0,a5,29f44 <dwarf::line_table::get_file(unsigned int) const+0x224>
   29f40:	dd0ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29f44:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   29f48:	07010793          	addi	a5,sp,112
   29f4c:	00f50463          	beq	a0,a5,29f54 <dwarf::line_table::get_file(unsigned int) const+0x234>
   29f50:	dc0ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29f54:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   29f58:	05010793          	addi	a5,sp,80
   29f5c:	00f50463          	beq	a0,a5,29f64 <dwarf::line_table::get_file(unsigned int) const+0x244>
   29f60:	db0ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29f64:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   29f68:	03010793          	addi	a5,sp,48
   29f6c:	00f50463          	beq	a0,a5,29f74 <dwarf::line_table::get_file(unsigned int) const+0x254>
   29f70:	da0ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   29f74:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   29f78:	01010793          	addi	a5,sp,16
   29f7c:	00f50463          	beq	a0,a5,29f84 <dwarf::line_table::get_file(unsigned int) const+0x264>
   29f80:	d90ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
   29f84:	00048513          	addi	a0,s1,0
   29f88:	d48ec0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   29f8c:	00040513          	addi	a0,s0,0
   29f90:	f60ec0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   29f94:	00050413          	addi	s0,a0,0
   29f98:	fadff06f          	jal	zero,29f44 <dwarf::line_table::get_file(unsigned int) const+0x224>
   29f9c:	00050413          	addi	s0,a0,0
   29fa0:	fb5ff06f          	jal	zero,29f54 <dwarf::line_table::get_file(unsigned int) const+0x234>
   29fa4:	00050413          	addi	s0,a0,0
   29fa8:	fbdff06f          	jal	zero,29f64 <dwarf::line_table::get_file(unsigned int) const+0x244>
   29fac:	00050413          	addi	s0,a0,0
   29fb0:	fc5ff06f          	jal	zero,29f74 <dwarf::line_table::get_file(unsigned int) const+0x254>

0000000000029fb4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   29fb4:	00008067          	jalr	zero,0(ra)

0000000000029fb8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   29fb8:	ff010113          	addi	sp,sp,-16
   29fbc:	00113423          	sd	ra,8(sp)
   29fc0:	d50ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
   29fc4:	00813083          	ld	ra,8(sp)
   29fc8:	01010113          	addi	sp,sp,16
   29fcc:	00008067          	jalr	zero,0(ra)

0000000000029fd0 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   29fd0:	ff010113          	addi	sp,sp,-16
   29fd4:	00113423          	sd	ra,8(sp)
   29fd8:	d38ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   29fdc:	00813083          	ld	ra,8(sp)
   29fe0:	01010113          	addi	sp,sp,16
   29fe4:	00008067          	jalr	zero,0(ra)

0000000000029fe8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   29fe8:	ff010113          	addi	sp,sp,-16
   29fec:	00113423          	sd	ra,8(sp)
   29ff0:	00813023          	sd	s0,0(sp)
   29ff4:	03850413          	addi	s0,a0,56
	    ||
   29ff8:	00018797          	auipc	a5,0x18
   29ffc:	5407b783          	ld	a5,1344(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   2a000:	02f58c63          	beq	a1,a5,2a038 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   2a004:	0085b503          	ld	a0,8(a1)
   2a008:	00018797          	auipc	a5,0x18
   2a00c:	4087b783          	ld	a5,1032(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   2a010:	02f50463          	beq	a0,a5,2a038 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2a014:	00054703          	lbu	a4,0(a0)
   2a018:	02a00793          	addi	a5,zero,42
   2a01c:	02f70863          	beq	a4,a5,2a04c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   2a020:	00018597          	auipc	a1,0x18
   2a024:	3f05b583          	ld	a1,1008(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   2a028:	b38ec0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   2a02c:	00153513          	sltiu	a0,a0,1
   2a030:	40a00533          	sub	a0,zero,a0
   2a034:	00a47433          	and	s0,s0,a0
      }
   2a038:	00040513          	addi	a0,s0,0
   2a03c:	00813083          	ld	ra,8(sp)
   2a040:	00013403          	ld	s0,0(sp)
   2a044:	01010113          	addi	sp,sp,16
   2a048:	00008067          	jalr	zero,0(ra)
	return nullptr;
   2a04c:	00000413          	addi	s0,zero,0
   2a050:	fe9ff06f          	jal	zero,2a038 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

000000000002a054 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2a054:	fe010113          	addi	sp,sp,-32
   2a058:	00113c23          	sd	ra,24(sp)
   2a05c:	00813823          	sd	s0,16(sp)
   2a060:	00913423          	sd	s1,8(sp)
   2a064:	01213023          	sd	s2,0(sp)
   2a068:	00050493          	addi	s1,a0,0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a06c:	08853403          	ld	s0,136(a0)
   2a070:	09053903          	ld	s2,144(a0)
	  for (; __first != __last; ++__first)
   2a074:	09241063          	bne	s0,s2,2a0f4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
	_M_deallocate(_M_impl._M_start,
   2a078:	0884b503          	ld	a0,136(s1)
	if (__p)
   2a07c:	00050463          	beq	a0,zero,2a084 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   2a080:	c90ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a084:	0704b403          	ld	s0,112(s1)
   2a088:	0784b903          	ld	s2,120(s1)
   2a08c:	09241263          	bne	s0,s2,2a110 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xbc>
	_M_deallocate(_M_impl._M_start,
   2a090:	0704b503          	ld	a0,112(s1)
	if (__p)
   2a094:	00050463          	beq	a0,zero,2a09c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
   2a098:	c78ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a09c:	0584b503          	ld	a0,88(s1)
	if (__p)
   2a0a0:	00050463          	beq	a0,zero,2a0a8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
   2a0a4:	c6cec0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2a0a8:	0404b403          	ld	s0,64(s1)
   2a0ac:	02040463          	beq	s0,zero,2a0d4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
    if (__is_single_threaded())
   2a0b0:	00018797          	auipc	a5,0x18
   2a0b4:	3d07b783          	ld	a5,976(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a0b8:	0007c783          	lbu	a5,0(a5)
   2a0bc:	06078463          	beq	a5,zero,2a124 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd0>
    _Atomic_word __result = *__mem;
   2a0c0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   2a0c4:	fff5079b          	addiw	a5,a0,-1
   2a0c8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a0cc:	00100793          	addi	a5,zero,1
   2a0d0:	06f50263          	beq	a0,a5,2a134 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe0>
      }
   2a0d4:	01813083          	ld	ra,24(sp)
   2a0d8:	01013403          	ld	s0,16(sp)
   2a0dc:	00813483          	ld	s1,8(sp)
   2a0e0:	00013903          	ld	s2,0(sp)
   2a0e4:	02010113          	addi	sp,sp,32
   2a0e8:	00008067          	jalr	zero,0(ra)
   2a0ec:	03040413          	addi	s0,s0,48
   2a0f0:	f88904e3          	beq	s2,s0,2a078 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x24>
   2a0f4:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2a0f8:	01040793          	addi	a5,s0,16
   2a0fc:	fef508e3          	beq	a0,a5,2a0ec <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
   2a100:	c10ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2a104:	fe9ff06f          	jal	zero,2a0ec <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
   2a108:	02040413          	addi	s0,s0,32
   2a10c:	f88902e3          	beq	s2,s0,2a090 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3c>
      { return _M_dataplus._M_p; }
   2a110:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2a114:	01040793          	addi	a5,s0,16
   2a118:	fef508e3          	beq	a0,a5,2a108 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   2a11c:	bf4ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2a120:	fe9ff06f          	jal	zero,2a108 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      return __exchange_and_add(__mem, __val);
   2a124:	fff00593          	addi	a1,zero,-1
   2a128:	03040513          	addi	a0,s0,48
   2a12c:	a54ec0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a130:	f9dff06f          	jal	zero,2a0cc <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x78>
	_M_dispose();
   2a134:	00043783          	ld	a5,0(s0)
   2a138:	0107b783          	ld	a5,16(a5)
   2a13c:	00040513          	addi	a0,s0,0
   2a140:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a144:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a148:	00018797          	auipc	a5,0x18
   2a14c:	3387b783          	ld	a5,824(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a150:	0007c783          	lbu	a5,0(a5)
   2a154:	02078663          	beq	a5,zero,2a180 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x12c>
    _Atomic_word __result = *__mem;
   2a158:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   2a15c:	fff5079b          	addiw	a5,a0,-1
   2a160:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a164:	00100793          	addi	a5,zero,1
   2a168:	f6f516e3          	bne	a0,a5,2a0d4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
	    _M_destroy();
   2a16c:	00043783          	ld	a5,0(s0)
   2a170:	0187b783          	ld	a5,24(a5)
   2a174:	00040513          	addi	a0,s0,0
   2a178:	000780e7          	jalr	ra,0(a5)
      }
   2a17c:	f59ff06f          	jal	zero,2a0d4 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
      return __exchange_and_add(__mem, __val);
   2a180:	fff00593          	addi	a1,zero,-1
   2a184:	03440513          	addi	a0,s0,52
   2a188:	9f8ec0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a18c:	fd9ff06f          	jal	zero,2a164 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x110>

000000000002a190 <std::__cxx11::to_string(unsigned long)>:
  {
   2a190:	fe010113          	addi	sp,sp,-32
   2a194:	00113c23          	sd	ra,24(sp)
   2a198:	00813823          	sd	s0,16(sp)
   2a19c:	00913423          	sd	s1,8(sp)
   2a1a0:	00050493          	addi	s1,a0,0
   2a1a4:	00058413          	addi	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   2a1a8:	00900793          	addi	a5,zero,9
   2a1ac:	18b7f263          	bgeu	a5,a1,2a330 <std::__cxx11::to_string(unsigned long)+0x1a0>
	  if (__value < __b2) return __n + 1;
   2a1b0:	06300793          	addi	a5,zero,99
   2a1b4:	06b7f663          	bgeu	a5,a1,2a220 <std::__cxx11::to_string(unsigned long)+0x90>
	  if (__value < __b3) return __n + 2;
   2a1b8:	3e700793          	addi	a5,zero,999
   2a1bc:	0ab7f063          	bgeu	a5,a1,2a25c <std::__cxx11::to_string(unsigned long)+0xcc>
	  if (__value < __b4) return __n + 3;
   2a1c0:	000027b7          	lui	a5,0x2
   2a1c4:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   2a1c8:	16b7f063          	bgeu	a5,a1,2a328 <std::__cxx11::to_string(unsigned long)+0x198>
   2a1cc:	00058713          	addi	a4,a1,0
      unsigned __n = 1;
   2a1d0:	00100593          	addi	a1,zero,1
	  __value /= __b4;
   2a1d4:	00002637          	lui	a2,0x2
   2a1d8:	71060613          	addi	a2,a2,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   2a1dc:	000186b7          	lui	a3,0x18
   2a1e0:	69f68693          	addi	a3,a3,1695 # 1869f <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x60f>
	  if (__value < __b2) return __n + 1;
   2a1e4:	000f4537          	lui	a0,0xf4
   2a1e8:	23f50513          	addi	a0,a0,575 # f423f <__global_pointer$+0xb1a3f>
	  if (__value < __b3) return __n + 2;
   2a1ec:	00989837          	lui	a6,0x989
   2a1f0:	67f80813          	addi	a6,a6,1663 # 98967f <__global_pointer$+0x946e7f>
	  if (__value < __b4) return __n + 3;
   2a1f4:	05f5e8b7          	lui	a7,0x5f5e
   2a1f8:	0ff88893          	addi	a7,a7,255 # 5f5e0ff <__global_pointer$+0x5f1b8ff>
   2a1fc:	00070793          	addi	a5,a4,0
	  __value /= __b4;
   2a200:	02c75733          	divu	a4,a4,a2
	  __n += 4;
   2a204:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   2a208:	04f6fe63          	bgeu	a3,a5,2a264 <std::__cxx11::to_string(unsigned long)+0xd4>
	  if (__value < __b2) return __n + 1;
   2a20c:	00f57c63          	bgeu	a0,a5,2a224 <std::__cxx11::to_string(unsigned long)+0x94>
	  if (__value < __b3) return __n + 2;
   2a210:	04f87863          	bgeu	a6,a5,2a260 <std::__cxx11::to_string(unsigned long)+0xd0>
	  if (__value < __b4) return __n + 3;
   2a214:	fef8e4e3          	bltu	a7,a5,2a1fc <std::__cxx11::to_string(unsigned long)+0x6c>
   2a218:	0035859b          	addiw	a1,a1,3
   2a21c:	0480006f          	jal	zero,2a264 <std::__cxx11::to_string(unsigned long)+0xd4>
      unsigned __n = 1;
   2a220:	00100593          	addi	a1,zero,1
	  if (__value < __b2) return __n + 1;
   2a224:	0015859b          	addiw	a1,a1,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a228:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2a22c:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2a230:	00000613          	addi	a2,zero,0
   2a234:	02059593          	slli	a1,a1,0x20
   2a238:	0205d593          	srli	a1,a1,0x20
   2a23c:	00048513          	addi	a0,s1,0
   2a240:	b30ec0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2a244:	0004b603          	ld	a2,0(s1)
      while (__val >= 100)
   2a248:	06300793          	addi	a5,zero,99
   2a24c:	0887fe63          	bgeu	a5,s0,2a2e8 <std::__cxx11::to_string(unsigned long)+0x158>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2a250:	0084b683          	ld	a3,8(s1)
      unsigned __pos = __len - 1;
   2a254:	fff6869b          	addiw	a3,a3,-1
   2a258:	0340006f          	jal	zero,2a28c <std::__cxx11::to_string(unsigned long)+0xfc>
      unsigned __n = 1;
   2a25c:	00100593          	addi	a1,zero,1
	  if (__value < __b3) return __n + 2;
   2a260:	0025859b          	addiw	a1,a1,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a264:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2a268:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2a26c:	00000613          	addi	a2,zero,0
   2a270:	02059593          	slli	a1,a1,0x20
   2a274:	0205d593          	srli	a1,a1,0x20
   2a278:	00048513          	addi	a0,s1,0
   2a27c:	af4ec0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2a280:	0004b603          	ld	a2,0(s1)
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2a284:	0084b683          	ld	a3,8(s1)
      unsigned __pos = __len - 1;
   2a288:	fff6869b          	addiw	a3,a3,-1
	  auto const __num = (__val % 100) * 2;
   2a28c:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2a290:	00018317          	auipc	t1,0x18
   2a294:	1d833303          	ld	t1,472(t1) # 42468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb488>
      while (__val >= 100)
   2a298:	000028b7          	lui	a7,0x2
   2a29c:	70f88893          	addi	a7,a7,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2a2a0:	02b477b3          	remu	a5,s0,a1
   2a2a4:	00179793          	slli	a5,a5,0x1
   2a2a8:	00040513          	addi	a0,s0,0
	  __val /= 100;
   2a2ac:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   2a2b0:	02069713          	slli	a4,a3,0x20
   2a2b4:	02075713          	srli	a4,a4,0x20
   2a2b8:	00e60733          	add	a4,a2,a4
   2a2bc:	00f307b3          	add	a5,t1,a5
   2a2c0:	0017c803          	lbu	a6,1(a5)
   2a2c4:	01070023          	sb	a6,0(a4)
	  __first[__pos - 1] = __digits[__num];
   2a2c8:	fff6871b          	addiw	a4,a3,-1
   2a2cc:	02071713          	slli	a4,a4,0x20
   2a2d0:	02075713          	srli	a4,a4,0x20
   2a2d4:	00e60733          	add	a4,a2,a4
   2a2d8:	0007c783          	lbu	a5,0(a5)
   2a2dc:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2a2e0:	ffe6869b          	addiw	a3,a3,-2
      while (__val >= 100)
   2a2e4:	faa8eee3          	bltu	a7,a0,2a2a0 <std::__cxx11::to_string(unsigned long)+0x110>
      if (__val >= 10)
   2a2e8:	00900793          	addi	a5,zero,9
   2a2ec:	0487f663          	bgeu	a5,s0,2a338 <std::__cxx11::to_string(unsigned long)+0x1a8>
	  auto const __num = __val * 2;
   2a2f0:	00141413          	slli	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   2a2f4:	00018797          	auipc	a5,0x18
   2a2f8:	1747b783          	ld	a5,372(a5) # 42468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb488>
   2a2fc:	008787b3          	add	a5,a5,s0
   2a300:	0017c703          	lbu	a4,1(a5)
   2a304:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   2a308:	0007c403          	lbu	s0,0(a5)
   2a30c:	00860023          	sb	s0,0(a2)
  }
   2a310:	00048513          	addi	a0,s1,0
   2a314:	01813083          	ld	ra,24(sp)
   2a318:	01013403          	ld	s0,16(sp)
   2a31c:	00813483          	ld	s1,8(sp)
   2a320:	02010113          	addi	sp,sp,32
   2a324:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a328:	00100593          	addi	a1,zero,1
   2a32c:	eedff06f          	jal	zero,2a218 <std::__cxx11::to_string(unsigned long)+0x88>
   2a330:	00100593          	addi	a1,zero,1
   2a334:	ef5ff06f          	jal	zero,2a228 <std::__cxx11::to_string(unsigned long)+0x98>
	__first[0] = '0' + __val;
   2a338:	0304041b          	addiw	s0,s0,48
   2a33c:	0ff47413          	andi	s0,s0,255
   2a340:	fcdff06f          	jal	zero,2a30c <std::__cxx11::to_string(unsigned long)+0x17c>

000000000002a344 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
      const unsigned __b2 = __base  * __base;
   2a344:	02b586bb          	mulw	a3,a1,a1
   2a348:	0006889b          	addiw	a7,a3,0
      const unsigned __b3 = __b2 * __base;
   2a34c:	0005881b          	addiw	a6,a1,0
   2a350:	02b686bb          	mulw	a3,a3,a1
   2a354:	0006831b          	addiw	t1,a3,0
      const unsigned long __b4 = __b3 * __base;
   2a358:	02b686bb          	mulw	a3,a3,a1
   2a35c:	0006859b          	addiw	a1,a3,0
   2a360:	02069693          	slli	a3,a3,0x20
   2a364:	0206d693          	srli	a3,a3,0x20
	  if (__value < (unsigned)__base) return __n;
   2a368:	07056863          	bltu	a0,a6,2a3d8 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x94>
	  if (__value < __b2) return __n + 1;
   2a36c:	05156463          	bltu	a0,a7,2a3b4 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x70>
	  if (__value < __b3) return __n + 2;
   2a370:	04656863          	bltu	a0,t1,2a3c0 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x7c>
	  if (__value < __b4) return __n + 3;
   2a374:	02051793          	slli	a5,a0,0x20
   2a378:	0207d793          	srli	a5,a5,0x20
   2a37c:	04b56863          	bltu	a0,a1,2a3cc <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x88>
      unsigned __n = 1;
   2a380:	00100513          	addi	a0,zero,1
   2a384:	fff00613          	addi	a2,zero,-1
   2a388:	02065613          	srli	a2,a2,0x20
	  __value /= __b4;
   2a38c:	02d7d7b3          	divu	a5,a5,a3
   2a390:	0007871b          	addiw	a4,a5,0
	  __n += 4;
   2a394:	0045051b          	addiw	a0,a0,4
	  if (__value < (unsigned)__base) return __n;
   2a398:	03076e63          	bltu	a4,a6,2a3d4 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x90>
	  if (__value < __b2) return __n + 1;
   2a39c:	01176e63          	bltu	a4,a7,2a3b8 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x74>
	  if (__value < __b3) return __n + 2;
   2a3a0:	02676263          	bltu	a4,t1,2a3c4 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x80>
   2a3a4:	00c7f7b3          	and	a5,a5,a2
	  if (__value < __b4) return __n + 3;
   2a3a8:	feb772e3          	bgeu	a4,a1,2a38c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x48>
   2a3ac:	0035051b          	addiw	a0,a0,3
   2a3b0:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a3b4:	00100513          	addi	a0,zero,1
	  if (__value < __b2) return __n + 1;
   2a3b8:	0015051b          	addiw	a0,a0,1
   2a3bc:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a3c0:	00100513          	addi	a0,zero,1
	  if (__value < __b3) return __n + 2;
   2a3c4:	0025051b          	addiw	a0,a0,2
   2a3c8:	00008067          	jalr	zero,0(ra)
      unsigned __n = 1;
   2a3cc:	00100513          	addi	a0,zero,1
   2a3d0:	fddff06f          	jal	zero,2a3ac <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x68>
   2a3d4:	00008067          	jalr	zero,0(ra)
   2a3d8:	00100513          	addi	a0,zero,1
    }
   2a3dc:	00008067          	jalr	zero,0(ra)

000000000002a3e0 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
      unsigned __pos = __len - 1;
   2a3e0:	fff5859b          	addiw	a1,a1,-1
      while (__val >= 100)
   2a3e4:	06300793          	addi	a5,zero,99
   2a3e8:	06c7fc63          	bgeu	a5,a2,2a460 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x80>
	  auto const __num = (__val % 100) * 2;
   2a3ec:	06400893          	addi	a7,zero,100
	  __first[__pos] = __digits[__num + 1];
   2a3f0:	00018817          	auipc	a6,0x18
   2a3f4:	f7083803          	ld	a6,-144(a6) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
      while (__val >= 100)
   2a3f8:	00002e37          	lui	t3,0x2
   2a3fc:	70fe0e13          	addi	t3,t3,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2a400:	031677bb          	remuw	a5,a2,a7
   2a404:	0017979b          	slliw	a5,a5,0x1
   2a408:	0006031b          	addiw	t1,a2,0
	  __val /= 100;
   2a40c:	0316563b          	divuw	a2,a2,a7
	  __first[__pos] = __digits[__num + 1];
   2a410:	02059693          	slli	a3,a1,0x20
   2a414:	0206d693          	srli	a3,a3,0x20
   2a418:	00d506b3          	add	a3,a0,a3
   2a41c:	0017871b          	addiw	a4,a5,1
   2a420:	02071713          	slli	a4,a4,0x20
   2a424:	02075713          	srli	a4,a4,0x20
   2a428:	00e80733          	add	a4,a6,a4
   2a42c:	00074703          	lbu	a4,0(a4)
   2a430:	00e68023          	sb	a4,0(a3)
	  __first[__pos - 1] = __digits[__num];
   2a434:	fff5871b          	addiw	a4,a1,-1
   2a438:	02071713          	slli	a4,a4,0x20
   2a43c:	02075713          	srli	a4,a4,0x20
   2a440:	00e50733          	add	a4,a0,a4
   2a444:	02079793          	slli	a5,a5,0x20
   2a448:	0207d793          	srli	a5,a5,0x20
   2a44c:	00f807b3          	add	a5,a6,a5
   2a450:	0007c783          	lbu	a5,0(a5)
   2a454:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2a458:	ffe5859b          	addiw	a1,a1,-2
      while (__val >= 100)
   2a45c:	fa6e62e3          	bltu	t3,t1,2a400 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x20>
      if (__val >= 10)
   2a460:	00900793          	addi	a5,zero,9
   2a464:	04c7f063          	bgeu	a5,a2,2a4a4 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xc4>
	  auto const __num = __val * 2;
   2a468:	0016161b          	slliw	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   2a46c:	00018717          	auipc	a4,0x18
   2a470:	ef473703          	ld	a4,-268(a4) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
   2a474:	0016079b          	addiw	a5,a2,1
   2a478:	02079793          	slli	a5,a5,0x20
   2a47c:	0207d793          	srli	a5,a5,0x20
   2a480:	00f707b3          	add	a5,a4,a5
   2a484:	0007c783          	lbu	a5,0(a5)
   2a488:	00f500a3          	sb	a5,1(a0)
	  __first[0] = __digits[__num];
   2a48c:	02061613          	slli	a2,a2,0x20
   2a490:	02065613          	srli	a2,a2,0x20
   2a494:	00c70733          	add	a4,a4,a2
   2a498:	00074603          	lbu	a2,0(a4)
   2a49c:	00c50023          	sb	a2,0(a0)
    }
   2a4a0:	00008067          	jalr	zero,0(ra)
	__first[0] = '0' + __val;
   2a4a4:	0306061b          	addiw	a2,a2,48
   2a4a8:	0ff67613          	andi	a2,a2,255
   2a4ac:	ff1ff06f          	jal	zero,2a49c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0xbc>

000000000002a4b0 <std::__cxx11::to_string(unsigned int)>:
  {
   2a4b0:	fe010113          	addi	sp,sp,-32
   2a4b4:	00113c23          	sd	ra,24(sp)
   2a4b8:	00813823          	sd	s0,16(sp)
   2a4bc:	00913423          	sd	s1,8(sp)
   2a4c0:	00050413          	addi	s0,a0,0
   2a4c4:	00058493          	addi	s1,a1,0
    string __str(__detail::__to_chars_len(__val), '\0');
   2a4c8:	00a00593          	addi	a1,zero,10
   2a4cc:	00048513          	addi	a0,s1,0
   2a4d0:	00018317          	auipc	t1,0x18
   2a4d4:	fc833303          	ld	t1,-56(t1) # 42498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18154>
   2a4d8:	000300e7          	jalr	ra,0(t1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a4dc:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a4e0:	00f43023          	sd	a5,0(s0)
      { _M_construct(__n, __c); }
   2a4e4:	00000613          	addi	a2,zero,0
   2a4e8:	02051593          	slli	a1,a0,0x20
   2a4ec:	0205d593          	srli	a1,a1,0x20
   2a4f0:	00040513          	addi	a0,s0,0
   2a4f4:	87cec0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2a4f8:	00048613          	addi	a2,s1,0
   2a4fc:	00842583          	lw	a1,8(s0)
   2a500:	00043503          	ld	a0,0(s0)
   2a504:	00018317          	auipc	t1,0x18
   2a508:	fb433303          	ld	t1,-76(t1) # 424b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180d8>
   2a50c:	000300e7          	jalr	ra,0(t1)
  }
   2a510:	00040513          	addi	a0,s0,0
   2a514:	01813083          	ld	ra,24(sp)
   2a518:	01013403          	ld	s0,16(sp)
   2a51c:	00813483          	ld	s1,8(sp)
   2a520:	02010113          	addi	sp,sp,32
   2a524:	00008067          	jalr	zero,0(ra)

000000000002a528 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
   2a528:	fe010113          	addi	sp,sp,-32
   2a52c:	00113c23          	sd	ra,24(sp)
   2a530:	00813823          	sd	s0,16(sp)
   2a534:	00913423          	sd	s1,8(sp)
   2a538:	01213023          	sd	s2,0(sp)
   2a53c:	00050413          	addi	s0,a0,0
   2a540:	00058513          	addi	a0,a1,0
   2a544:	00060793          	addi	a5,a2,0
      { return _M_string_length; }
   2a548:	0085b703          	ld	a4,8(a1)
   2a54c:	00863603          	ld	a2,8(a2)
	  const auto __size = __lhs.size() + __rhs.size();
   2a550:	00e60833          	add	a6,a2,a4
      { return _M_dataplus._M_p; }
   2a554:	0005b683          	ld	a3,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a558:	01058593          	addi	a1,a1,16
	return _M_is_local() ? size_type(_S_local_capacity)
   2a55c:	08b68663          	beq	a3,a1,2a5e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc0>
   2a560:	01053583          	ld	a1,16(a0)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2a564:	0105fc63          	bgeu	a1,a6,2a57c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x54>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a568:	01078593          	addi	a1,a5,16
	return _M_is_local() ? size_type(_S_local_capacity)
   2a56c:	0007b883          	ld	a7,0(a5)
   2a570:	08b88063          	beq	a7,a1,2a5f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc8>
   2a574:	0107b583          	ld	a1,16(a5)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2a578:	0905f063          	bgeu	a1,a6,2a5f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd0>
      { return _M_dataplus._M_p; }
   2a57c:	0007b583          	ld	a1,0(a5)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2a580:	fff00793          	addi	a5,zero,-1
   2a584:	0027d793          	srli	a5,a5,0x2
   2a588:	40e787b3          	sub	a5,a5,a4
   2a58c:	0cc7e863          	bltu	a5,a2,2a65c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
	return _M_append(__s, __n);
   2a590:	e31eb0ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2a594:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a598:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2a59c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2a5a0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a5a4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2a5a8:	0d278063          	beq	a5,s2,2a668 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x140>
      { _M_dataplus._M_p = __p; }
   2a5ac:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2a5b0:	0104b783          	ld	a5,16(s1)
   2a5b4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2a5b8:	0084b783          	ld	a5,8(s1)
   2a5bc:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2a5c0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2a5c4:	0004b423          	sd	zero,8(s1)
   2a5c8:	00048823          	sb	zero,16(s1)
    }
   2a5cc:	00040513          	addi	a0,s0,0
   2a5d0:	01813083          	ld	ra,24(sp)
   2a5d4:	01013403          	ld	s0,16(sp)
   2a5d8:	00813483          	ld	s1,8(sp)
   2a5dc:	00013903          	ld	s2,0(sp)
   2a5e0:	02010113          	addi	sp,sp,32
   2a5e4:	00008067          	jalr	zero,0(ra)
	return _M_is_local() ? size_type(_S_local_capacity)
   2a5e8:	00f00593          	addi	a1,zero,15
   2a5ec:	f79ff06f          	jal	zero,2a564 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x3c>
   2a5f0:	00f00593          	addi	a1,zero,15
   2a5f4:	f85ff06f          	jal	zero,2a578 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2a5f8:	00000613          	addi	a2,zero,0
   2a5fc:	00000593          	addi	a1,zero,0
   2a600:	00078513          	addi	a0,a5,0
   2a604:	85cec0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2a608:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a60c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2a610:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2a614:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a618:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2a61c:	03278463          	beq	a5,s2,2a644 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x11c>
      { _M_dataplus._M_p = __p; }
   2a620:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2a624:	0104b783          	ld	a5,16(s1)
   2a628:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2a62c:	0084b783          	ld	a5,8(s1)
   2a630:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2a634:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2a638:	0004b423          	sd	zero,8(s1)
   2a63c:	00048823          	sb	zero,16(s1)
      }
   2a640:	f8dff06f          	jal	zero,2a5cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2a644:	0084b603          	ld	a2,8(s1)
   2a648:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2a64c:	fe0600e3          	beq	a2,zero,2a62c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2a650:	00090593          	addi	a1,s2,0
   2a654:	f5deb0ef          	jal	ra,165b0 <memcpy@plt>
   2a658:	fd5ff06f          	jal	zero,2a62c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	  __throw_length_error(__N(__s));
   2a65c:	0000c517          	auipc	a0,0xc
   2a660:	73c50513          	addi	a0,a0,1852 # 36d98 <std::piecewise_construct+0x2b0>
   2a664:	dddeb0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2a668:	0084b603          	ld	a2,8(s1)
   2a66c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2a670:	f40604e3          	beq	a2,zero,2a5b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2a674:	00090593          	addi	a1,s2,0
   2a678:	f39eb0ef          	jal	ra,165b0 <memcpy@plt>
   2a67c:	f3dff06f          	jal	zero,2a5b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>

000000000002a680 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)>:
      if (__n != 0)
   2a680:	16058863          	beq	a1,zero,2a7f0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x170>
    vector<_Tp, _Alloc>::
   2a684:	fc010113          	addi	sp,sp,-64
   2a688:	02113c23          	sd	ra,56(sp)
   2a68c:	02813823          	sd	s0,48(sp)
   2a690:	02913423          	sd	s1,40(sp)
   2a694:	03213023          	sd	s2,32(sp)
   2a698:	01313c23          	sd	s3,24(sp)
   2a69c:	01413823          	sd	s4,16(sp)
   2a6a0:	01513423          	sd	s5,8(sp)
   2a6a4:	00050993          	addi	s3,a0,0
   2a6a8:	00058413          	addi	s0,a1,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a6ac:	00853683          	ld	a3,8(a0)
   2a6b0:	00053483          	ld	s1,0(a0)
   2a6b4:	409684b3          	sub	s1,a3,s1
	  if (__size > max_size() || __navail > max_size() - __size)
   2a6b8:	fff00793          	addi	a5,zero,-1
   2a6bc:	0017d793          	srli	a5,a5,0x1
   2a6c0:	409787b3          	sub	a5,a5,s1
					 - this->_M_impl._M_finish);
   2a6c4:	01053703          	ld	a4,16(a0)
   2a6c8:	40d70733          	sub	a4,a4,a3
	  if (__navail >= __n)
   2a6cc:	06b76063          	bltu	a4,a1,2a72c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xac>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   2a6d0:	00068023          	sb	zero,0(a3)
	      ++__first;
   2a6d4:	00168513          	addi	a0,a3,1
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   2a6d8:	00100793          	addi	a5,zero,1
   2a6dc:	02f59663          	bne	a1,a5,2a708 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x88>
	      this->_M_impl._M_finish =
   2a6e0:	00a9b423          	sd	a0,8(s3)
    }
   2a6e4:	03813083          	ld	ra,56(sp)
   2a6e8:	03013403          	ld	s0,48(sp)
   2a6ec:	02813483          	ld	s1,40(sp)
   2a6f0:	02013903          	ld	s2,32(sp)
   2a6f4:	01813983          	ld	s3,24(sp)
   2a6f8:	01013a03          	ld	s4,16(sp)
   2a6fc:	00813a83          	ld	s5,8(sp)
   2a700:	04010113          	addi	sp,sp,64
   2a704:	00008067          	jalr	zero,0(ra)
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   2a708:	00b684b3          	add	s1,a3,a1
      if (const size_t __len = __last - __first)
   2a70c:	fff58613          	addi	a2,a1,-1
   2a710:	00061663          	bne	a2,zero,2a71c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x9c>
      return __first + __n;
   2a714:	00048513          	addi	a0,s1,0
   2a718:	fc9ff06f          	jal	zero,2a6e0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   2a71c:	00000593          	addi	a1,zero,0
   2a720:	ec1eb0ef          	jal	ra,165e0 <memset@plt>
      return __first + __n;
   2a724:	00048513          	addi	a0,s1,0
   2a728:	fb9ff06f          	jal	zero,2a6e0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
	if (max_size() - size() < __n)
   2a72c:	06b7e263          	bltu	a5,a1,2a790 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x110>
	const size_type __len = size() + (std::max)(size(), __n);
   2a730:	00048793          	addi	a5,s1,0
   2a734:	00b4f463          	bgeu	s1,a1,2a73c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xbc>
   2a738:	00058793          	addi	a5,a1,0
   2a73c:	009787b3          	add	a5,a5,s1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2a740:	0497ee63          	bltu	a5,s1,2a79c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x11c>
   2a744:	00078a13          	addi	s4,a5,0
   2a748:	0007d663          	bge	a5,zero,2a754 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xd4>
   2a74c:	fff00a13          	addi	s4,zero,-1
   2a750:	001a5a13          	srli	s4,s4,0x1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2a754:	00000913          	addi	s2,zero,0
   2a758:	00078863          	beq	a5,zero,2a768 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xe8>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2a75c:	000a0513          	addi	a0,s4,0
   2a760:	dc1eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2a764:	00050913          	addi	s2,a0,0
		      std::__uninitialized_default_n_a(__new_start + __size,
   2a768:	00990533          	add	a0,s2,s1
   2a76c:	00050023          	sb	zero,0(a0)
      if (__n <= 0)
   2a770:	00100793          	addi	a5,zero,1
   2a774:	02f41a63          	bne	s0,a5,2a7a8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x128>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   2a778:	0009ba83          	ld	s5,0(s3)
      ptrdiff_t __count = __last - __first;
   2a77c:	0089b603          	ld	a2,8(s3)
   2a780:	41560633          	sub	a2,a2,s5
      if (__count > 0)
   2a784:	02c04e63          	blt	zero,a2,2a7c0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x140>
	if (__p)
   2a788:	040a8663          	beq	s5,zero,2a7d4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x154>
   2a78c:	0400006f          	jal	zero,2a7cc <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x14c>
	  __throw_length_error(__N(__s));
   2a790:	0000c517          	auipc	a0,0xc
   2a794:	02850513          	addi	a0,a0,40 # 367b8 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   2a798:	ca9eb0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2a79c:	fff00a13          	addi	s4,zero,-1
   2a7a0:	001a5a13          	srli	s4,s4,0x1
   2a7a4:	fb9ff06f          	jal	zero,2a75c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xdc>
      if (const size_t __len = __last - __first)
   2a7a8:	fff40613          	addi	a2,s0,-1
   2a7ac:	fc0606e3          	beq	a2,zero,2a778 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xf8>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   2a7b0:	00000593          	addi	a1,zero,0
   2a7b4:	00150513          	addi	a0,a0,1
   2a7b8:	e29eb0ef          	jal	ra,165e0 <memset@plt>
   2a7bc:	fbdff06f          	jal	zero,2a778 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xf8>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2a7c0:	000a8593          	addi	a1,s5,0
   2a7c4:	00090513          	addi	a0,s2,0
   2a7c8:	fb9eb0ef          	jal	ra,16780 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2a7cc:	000a8513          	addi	a0,s5,0
   2a7d0:	d41eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   2a7d4:	0129b023          	sd	s2,0(s3)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   2a7d8:	008484b3          	add	s1,s1,s0
   2a7dc:	009904b3          	add	s1,s2,s1
   2a7e0:	0099b423          	sd	s1,8(s3)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   2a7e4:	01490933          	add	s2,s2,s4
   2a7e8:	0129b823          	sd	s2,16(s3)
    }
   2a7ec:	ef9ff06f          	jal	zero,2a6e4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x64>
   2a7f0:	00008067          	jalr	zero,0(ra)

000000000002a7f4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   2a7f4:	fd010113          	addi	sp,sp,-48
   2a7f8:	02113423          	sd	ra,40(sp)
   2a7fc:	02813023          	sd	s0,32(sp)
   2a800:	00913c23          	sd	s1,24(sp)
   2a804:	01213823          	sd	s2,16(sp)
   2a808:	00050413          	addi	s0,a0,0
   2a80c:	00058913          	addi	s2,a1,0
   2a810:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   2a814:	00913423          	sd	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   2a818:	00f00793          	addi	a5,zero,15
   2a81c:	0497e263          	bltu	a5,s1,2a860 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x6c>
      { return _M_dataplus._M_p; }
   2a820:	00053503          	ld	a0,0(a0)
	if (__n == 1)
   2a824:	00100793          	addi	a5,zero,1
   2a828:	06f49063          	bne	s1,a5,2a888 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x94>
	__c1 = __c2;
   2a82c:	0005c783          	lbu	a5,0(a1)
   2a830:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   2a834:	00813703          	ld	a4,8(sp)
      { _M_string_length = __length; }
   2a838:	00e43423          	sd	a4,8(s0)
   2a83c:	00043783          	ld	a5,0(s0)
   2a840:	00e787b3          	add	a5,a5,a4
   2a844:	00078023          	sb	zero,0(a5)
      }
   2a848:	02813083          	ld	ra,40(sp)
   2a84c:	02013403          	ld	s0,32(sp)
   2a850:	01813483          	ld	s1,24(sp)
   2a854:	01013903          	ld	s2,16(sp)
   2a858:	03010113          	addi	sp,sp,48
   2a85c:	00008067          	jalr	zero,0(ra)
	    _M_data(_M_create(__dnew, size_type(0)));
   2a860:	00000613          	addi	a2,zero,0
   2a864:	00810593          	addi	a1,sp,8
   2a868:	ea9eb0ef          	jal	ra,16710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   2a86c:	00a43023          	sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   2a870:	00813783          	ld	a5,8(sp)
   2a874:	00f43823          	sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2a878:	00048613          	addi	a2,s1,0
   2a87c:	00090593          	addi	a1,s2,0
   2a880:	d31eb0ef          	jal	ra,165b0 <memcpy@plt>
   2a884:	fb1ff06f          	jal	zero,2a834 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x40>
	if (__n == 0)
   2a888:	fa0486e3          	beq	s1,zero,2a834 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x40>
   2a88c:	fedff06f          	jal	zero,2a878 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x84>

000000000002a890 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   2a890:	fe010113          	addi	sp,sp,-32
   2a894:	00113c23          	sd	ra,24(sp)
   2a898:	00813823          	sd	s0,16(sp)
   2a89c:	00913423          	sd	s1,8(sp)
   2a8a0:	01213023          	sd	s2,0(sp)
   2a8a4:	00050413          	addi	s0,a0,0
   2a8a8:	00058793          	addi	a5,a1,0
   2a8ac:	00060493          	addi	s1,a2,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a8b0:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2a8b4:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   2a8b8:	0005b583          	ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2a8bc:	0087b603          	ld	a2,8(a5)
   2a8c0:	00000693          	addi	a3,zero,0
   2a8c4:	00c58633          	add	a2,a1,a2
   2a8c8:	00018317          	auipc	t1,0x18
   2a8cc:	a4833303          	ld	t1,-1464(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   2a8d0:	000300e7          	jalr	ra,0(t1)
      { return _M_dataplus._M_p; }
   2a8d4:	0004b583          	ld	a1,0(s1)
      { return _M_string_length; }
   2a8d8:	0084b603          	ld	a2,8(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   2a8dc:	00843703          	ld	a4,8(s0)
   2a8e0:	fff00793          	addi	a5,zero,-1
   2a8e4:	0027d793          	srli	a5,a5,0x2
   2a8e8:	40e787b3          	sub	a5,a5,a4
   2a8ec:	00c7e863          	bltu	a5,a2,2a8fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>
	return _M_append(__s, __n);
   2a8f0:	00040513          	addi	a0,s0,0
   2a8f4:	acdeb0ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2a8f8:	0280006f          	jal	zero,2a920 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x90>
	  __throw_length_error(__N(__s));
   2a8fc:	0000c517          	auipc	a0,0xc
   2a900:	49c50513          	addi	a0,a0,1180 # 36d98 <std::piecewise_construct+0x2b0>
   2a904:	b3deb0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   2a908:	00050493          	addi	s1,a0,0
   2a90c:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2a910:	01250463          	beq	a0,s2,2a918 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x88>
   2a914:	bfdeb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2a918:	00048513          	addi	a0,s1,0
   2a91c:	dd5eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    }
   2a920:	00040513          	addi	a0,s0,0
   2a924:	01813083          	ld	ra,24(sp)
   2a928:	01013403          	ld	s0,16(sp)
   2a92c:	00813483          	ld	s1,8(sp)
   2a930:	00013903          	ld	s2,0(sp)
   2a934:	02010113          	addi	sp,sp,32
   2a938:	00008067          	jalr	zero,0(ra)

000000000002a93c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2a93c:	fa010113          	addi	sp,sp,-96
   2a940:	04113c23          	sd	ra,88(sp)
   2a944:	04813823          	sd	s0,80(sp)
   2a948:	04913423          	sd	s1,72(sp)
   2a94c:	05213023          	sd	s2,64(sp)
   2a950:	03313c23          	sd	s3,56(sp)
   2a954:	03413823          	sd	s4,48(sp)
   2a958:	03513423          	sd	s5,40(sp)
   2a95c:	03613023          	sd	s6,32(sp)
   2a960:	01713c23          	sd	s7,24(sp)
   2a964:	01813823          	sd	s8,16(sp)
   2a968:	01913423          	sd	s9,8(sp)
   2a96c:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a970:	00853b83          	ld	s7,8(a0)
   2a974:	00053983          	ld	s3,0(a0)
   2a978:	413b87b3          	sub	a5,s7,s3
   2a97c:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   2a980:	fff00713          	addi	a4,zero,-1
   2a984:	00675713          	srli	a4,a4,0x6
   2a988:	04e78463          	beq	a5,a4,2a9d0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x94>
   2a98c:	00050a93          	addi	s5,a0,0
   2a990:	00058913          	addi	s2,a1,0
   2a994:	00060413          	addi	s0,a2,0
   2a998:	00058d13          	addi	s10,a1,0
      return __a;
   2a99c:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2a9a0:	033b8e63          	beq	s7,s3,2a9dc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0>
	const size_type __len = size() + (std::max)(size(), __n);
   2a9a4:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2a9a8:	1af76063          	bltu	a4,a5,2ab48 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x20c>
   2a9ac:	00070a13          	addi	s4,a4,0
   2a9b0:	fff00793          	addi	a5,zero,-1
   2a9b4:	0067d793          	srli	a5,a5,0x6
   2a9b8:	00e7f463          	bgeu	a5,a4,2a9c0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
   2a9bc:	00078a13          	addi	s4,a5,0
   2a9c0:	413904b3          	sub	s1,s2,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2a9c4:	00000b13          	addi	s6,zero,0
   2a9c8:	18070c63          	beq	a4,zero,2ab60 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x224>
   2a9cc:	1880006f          	jal	zero,2ab54 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x218>
	  __throw_length_error(__N(__s));
   2a9d0:	0000c517          	auipc	a0,0xc
   2a9d4:	ed050513          	addi	a0,a0,-304 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2a9d8:	a69eb0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2a9dc:	00100713          	addi	a4,zero,1
   2a9e0:	fc5ff06f          	jal	zero,2a9a4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
      for (; __first != __last; ++__first, (void)++__cur)
   2a9e4:	073d0463          	beq	s10,s3,2aa4c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x110>
   2a9e8:	01098493          	addi	s1,s3,16
   2a9ec:	41390c33          	sub	s8,s2,s3
   2a9f0:	018b0c33          	add	s8,s6,s8
      _ForwardIterator __cur = __result;
   2a9f4:	000b0413          	addi	s0,s6,0
   2a9f8:	0240006f          	jal	zero,2aa1c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe0>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2a9fc:	ff84b603          	ld	a2,-8(s1)
   2aa00:	00160613          	addi	a2,a2,1
   2aa04:	02061e63          	bne	a2,zero,2aa40 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x104>
      { _M_string_length = __length; }
   2aa08:	ff8cb783          	ld	a5,-8(s9)
   2aa0c:	00f43423          	sd	a5,8(s0)
      for (; __first != __last; ++__first, (void)++__cur)
   2aa10:	02040413          	addi	s0,s0,32
   2aa14:	02048493          	addi	s1,s1,32
   2aa18:	03840c63          	beq	s0,s8,2aa50 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aa1c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2aa20:	00a43023          	sd	a0,0(s0)
      _M_data() const
   2aa24:	00048c93          	addi	s9,s1,0
      { return _M_dataplus._M_p; }
   2aa28:	ff04b783          	ld	a5,-16(s1)
	if (__str._M_is_local())
   2aa2c:	fc9788e3          	beq	a5,s1,2a9fc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2aa30:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2aa34:	0004b783          	ld	a5,0(s1)
   2aa38:	00f43823          	sd	a5,16(s0)
   2aa3c:	fcdff06f          	jal	zero,2aa08 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2aa40:	00048593          	addi	a1,s1,0
   2aa44:	b6deb0ef          	jal	ra,165b0 <memcpy@plt>
   2aa48:	fc1ff06f          	jal	zero,2aa08 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
      _ForwardIterator __cur = __result;
   2aa4c:	000b0c13          	addi	s8,s6,0
	      ++__new_finish;
   2aa50:	020c0c13          	addi	s8,s8,32
      for (; __first != __last; ++__first, (void)++__cur)
   2aa54:	077d0463          	beq	s10,s7,2aabc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x180>
   2aa58:	01090413          	addi	s0,s2,16
   2aa5c:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2aa60:	000c0493          	addi	s1,s8,0
   2aa64:	0240006f          	jal	zero,2aa88 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x14c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2aa68:	ff85b603          	ld	a2,-8(a1)
   2aa6c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2aa70:	02061e63          	bne	a2,zero,2aaac <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x170>
      { _M_string_length = __length; }
   2aa74:	ff8cb783          	ld	a5,-8(s9)
   2aa78:	00f4b423          	sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2aa7c:	02048493          	addi	s1,s1,32
   2aa80:	02040413          	addi	s0,s0,32
   2aa84:	028d0863          	beq	s10,s0,2aab4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x178>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2aa88:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2aa8c:	00a4b023          	sd	a0,0(s1)
      _M_data() const
   2aa90:	00040c93          	addi	s9,s0,0
      { return _M_dataplus._M_p; }
   2aa94:	ff043583          	ld	a1,-16(s0)
	if (__str._M_is_local())
   2aa98:	fcb408e3          	beq	s0,a1,2aa68 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x12c>
      { _M_dataplus._M_p = __p; }
   2aa9c:	00b4b023          	sd	a1,0(s1)
      { _M_allocated_capacity = __capacity; }
   2aaa0:	00043783          	ld	a5,0(s0)
   2aaa4:	00f4b823          	sd	a5,16(s1)
   2aaa8:	fcdff06f          	jal	zero,2aa74 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2aaac:	b05eb0ef          	jal	ra,165b0 <memcpy@plt>
   2aab0:	fc5ff06f          	jal	zero,2aa74 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
   2aab4:	412b8933          	sub	s2,s7,s2
   2aab8:	012c0c33          	add	s8,s8,s2
	if (__p)
   2aabc:	00098663          	beq	s3,zero,2aac8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2aac0:	00098513          	addi	a0,s3,0
   2aac4:	a4deb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2aac8:	016ab023          	sd	s6,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2aacc:	018ab423          	sd	s8,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2aad0:	005a1a13          	slli	s4,s4,0x5
   2aad4:	014b0a33          	add	s4,s6,s4
   2aad8:	014ab823          	sd	s4,16(s5)
    }
   2aadc:	05813083          	ld	ra,88(sp)
   2aae0:	05013403          	ld	s0,80(sp)
   2aae4:	04813483          	ld	s1,72(sp)
   2aae8:	04013903          	ld	s2,64(sp)
   2aaec:	03813983          	ld	s3,56(sp)
   2aaf0:	03013a03          	ld	s4,48(sp)
   2aaf4:	02813a83          	ld	s5,40(sp)
   2aaf8:	02013b03          	ld	s6,32(sp)
   2aafc:	01813b83          	ld	s7,24(sp)
   2ab00:	01013c03          	ld	s8,16(sp)
   2ab04:	00813c83          	ld	s9,8(sp)
   2ab08:	00013d03          	ld	s10,0(sp)
   2ab0c:	06010113          	addi	sp,sp,96
   2ab10:	00008067          	jalr	zero,0(ra)
      __catch(...)
   2ab14:	8edeb0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2ab18:	020b1263          	bne	s6,zero,2ab3c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x200>
      { return _M_dataplus._M_p; }
   2ab1c:	0004b503          	ld	a0,0(s1)
	if (!_M_is_local())
   2ab20:	01850463          	beq	a0,s8,2ab28 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   2ab24:	9edeb0ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   2ab28:	af9eb0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   2ab2c:	00050413          	addi	s0,a0,0
   2ab30:	b61eb0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   2ab34:	00040513          	addi	a0,s0,0
   2ab38:	bb9eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   2ab3c:	000b0513          	addi	a0,s6,0
   2ab40:	9d1eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2ab44:	fe5ff06f          	jal	zero,2ab28 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
   2ab48:	413904b3          	sub	s1,s2,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2ab4c:	fff00a13          	addi	s4,zero,-1
   2ab50:	006a5a13          	srli	s4,s4,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2ab54:	005a1513          	slli	a0,s4,0x5
   2ab58:	9c9eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2ab5c:	00050b13          	addi	s6,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2ab60:	009b04b3          	add	s1,s6,s1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ab64:	01048c13          	addi	s8,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ab68:	0184b023          	sd	s8,0(s1)
      { return _M_dataplus._M_p; }
   2ab6c:	00043583          	ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2ab70:	00843603          	ld	a2,8(s0)
   2ab74:	00000693          	addi	a3,zero,0
   2ab78:	00c58633          	add	a2,a1,a2
   2ab7c:	00048513          	addi	a0,s1,0
   2ab80:	00017317          	auipc	t1,0x17
   2ab84:	79033303          	ld	t1,1936(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   2ab88:	000300e7          	jalr	ra,0(t1)
      }
   2ab8c:	e59ff06f          	jal	zero,2a9e4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa8>

000000000002ab90 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2ab90:	fa010113          	addi	sp,sp,-96
   2ab94:	04113c23          	sd	ra,88(sp)
   2ab98:	04813823          	sd	s0,80(sp)
   2ab9c:	04913423          	sd	s1,72(sp)
   2aba0:	05213023          	sd	s2,64(sp)
   2aba4:	03313c23          	sd	s3,56(sp)
   2aba8:	03413823          	sd	s4,48(sp)
   2abac:	03513423          	sd	s5,40(sp)
   2abb0:	03613023          	sd	s6,32(sp)
   2abb4:	01713c23          	sd	s7,24(sp)
   2abb8:	01813823          	sd	s8,16(sp)
   2abbc:	01913423          	sd	s9,8(sp)
   2abc0:	01a13023          	sd	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2abc4:	00853b83          	ld	s7,8(a0)
   2abc8:	00053a03          	ld	s4,0(a0)
   2abcc:	414b87b3          	sub	a5,s7,s4
   2abd0:	4057d793          	srai	a5,a5,0x5
	if (max_size() - size() < __n)
   2abd4:	fff00713          	addi	a4,zero,-1
   2abd8:	00675713          	srli	a4,a4,0x6
   2abdc:	04e78463          	beq	a5,a4,2ac24 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x94>
   2abe0:	00050a93          	addi	s5,a0,0
   2abe4:	00058913          	addi	s2,a1,0
   2abe8:	00060413          	addi	s0,a2,0
   2abec:	00058d13          	addi	s10,a1,0
      return __a;
   2abf0:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2abf4:	034b8e63          	beq	s7,s4,2ac30 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
	const size_type __len = size() + (std::max)(size(), __n);
   2abf8:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2abfc:	16f76663          	bltu	a4,a5,2ad68 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d8>
   2ac00:	00070b13          	addi	s6,a4,0
   2ac04:	fff00793          	addi	a5,zero,-1
   2ac08:	0067d793          	srli	a5,a5,0x6
   2ac0c:	00e7f463          	bgeu	a5,a4,2ac14 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
   2ac10:	00078b13          	addi	s6,a5,0
   2ac14:	414904b3          	sub	s1,s2,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2ac18:	00000993          	addi	s3,zero,0
   2ac1c:	16070263          	beq	a4,zero,2ad80 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1f0>
   2ac20:	1540006f          	jal	zero,2ad74 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1e4>
	  __throw_length_error(__N(__s));
   2ac24:	0000c517          	auipc	a0,0xc
   2ac28:	c7c50513          	addi	a0,a0,-900 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2ac2c:	815eb0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2ac30:	00100713          	addi	a4,zero,1
   2ac34:	fc5ff06f          	jal	zero,2abf8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ac38:	00843603          	ld	a2,8(s0)
   2ac3c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ac40:	16060263          	beq	a2,zero,2ada4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x214>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ac44:	000c0593          	addi	a1,s8,0
   2ac48:	969eb0ef          	jal	ra,165b0 <memcpy@plt>
   2ac4c:	1580006f          	jal	zero,2ada4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x214>
   2ac50:	ff85b603          	ld	a2,-8(a1)
   2ac54:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ac58:	02061e63          	bne	a2,zero,2ac94 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
      { _M_string_length = __length; }
   2ac5c:	ff8c3783          	ld	a5,-8(s8)
   2ac60:	00f43423          	sd	a5,8(s0)
   2ac64:	02040413          	addi	s0,s0,32
   2ac68:	02048493          	addi	s1,s1,32
   2ac6c:	03940a63          	beq	s0,s9,2aca0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x110>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ac70:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ac74:	00a43023          	sd	a0,0(s0)
      _M_data() const
   2ac78:	00048c13          	addi	s8,s1,0
      { return _M_dataplus._M_p; }
   2ac7c:	ff04b583          	ld	a1,-16(s1)
	if (__str._M_is_local())
   2ac80:	fcb488e3          	beq	s1,a1,2ac50 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2ac84:	00b43023          	sd	a1,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ac88:	0004b783          	ld	a5,0(s1)
   2ac8c:	00f43823          	sd	a5,16(s0)
   2ac90:	fcdff06f          	jal	zero,2ac5c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xcc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ac94:	91deb0ef          	jal	ra,165b0 <memcpy@plt>
   2ac98:	fc5ff06f          	jal	zero,2ac5c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xcc>
      _ForwardIterator __cur = __result;
   2ac9c:	00098c93          	addi	s9,s3,0
	      ++__new_finish;
   2aca0:	020c8c93          	addi	s9,s9,32
      for (; __first != __last; ++__first, (void)++__cur)
   2aca4:	077d0663          	beq	s10,s7,2ad10 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x180>
   2aca8:	01090413          	addi	s0,s2,16
   2acac:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   2acb0:	000c8493          	addi	s1,s9,0
   2acb4:	0240006f          	jal	zero,2acd8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x148>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2acb8:	ff843603          	ld	a2,-8(s0)
   2acbc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2acc0:	02061e63          	bne	a2,zero,2acfc <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
      { _M_string_length = __length; }
   2acc4:	ff8c3783          	ld	a5,-8(s8)
   2acc8:	00f4b423          	sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2accc:	02048493          	addi	s1,s1,32
   2acd0:	02040413          	addi	s0,s0,32
   2acd4:	03a40a63          	beq	s0,s10,2ad08 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x178>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2acd8:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2acdc:	00a4b023          	sd	a0,0(s1)
      _M_data() const
   2ace0:	00040c13          	addi	s8,s0,0
      { return _M_dataplus._M_p; }
   2ace4:	ff043783          	ld	a5,-16(s0)
	if (__str._M_is_local())
   2ace8:	fc8788e3          	beq	a5,s0,2acb8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x128>
      { _M_dataplus._M_p = __p; }
   2acec:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2acf0:	00043783          	ld	a5,0(s0)
   2acf4:	00f4b823          	sd	a5,16(s1)
   2acf8:	fcdff06f          	jal	zero,2acc4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2acfc:	00040593          	addi	a1,s0,0
   2ad00:	8b1eb0ef          	jal	ra,165b0 <memcpy@plt>
   2ad04:	fc1ff06f          	jal	zero,2acc4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x134>
   2ad08:	412b8933          	sub	s2,s7,s2
   2ad0c:	012c8cb3          	add	s9,s9,s2
	if (__p)
   2ad10:	000a0663          	beq	s4,zero,2ad1c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x18c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ad14:	000a0513          	addi	a0,s4,0
   2ad18:	ff8eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2ad1c:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2ad20:	019ab423          	sd	s9,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2ad24:	005b1b13          	slli	s6,s6,0x5
   2ad28:	016989b3          	add	s3,s3,s6
   2ad2c:	013ab823          	sd	s3,16(s5)
    }
   2ad30:	05813083          	ld	ra,88(sp)
   2ad34:	05013403          	ld	s0,80(sp)
   2ad38:	04813483          	ld	s1,72(sp)
   2ad3c:	04013903          	ld	s2,64(sp)
   2ad40:	03813983          	ld	s3,56(sp)
   2ad44:	03013a03          	ld	s4,48(sp)
   2ad48:	02813a83          	ld	s5,40(sp)
   2ad4c:	02013b03          	ld	s6,32(sp)
   2ad50:	01813b83          	ld	s7,24(sp)
   2ad54:	01013c03          	ld	s8,16(sp)
   2ad58:	00813c83          	ld	s9,8(sp)
   2ad5c:	00013d03          	ld	s10,0(sp)
   2ad60:	06010113          	addi	sp,sp,96
   2ad64:	00008067          	jalr	zero,0(ra)
   2ad68:	414904b3          	sub	s1,s2,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2ad6c:	fff00b13          	addi	s6,zero,-1
   2ad70:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2ad74:	005b1513          	slli	a0,s6,0x5
   2ad78:	fa8eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2ad7c:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2ad80:	009984b3          	add	s1,s3,s1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ad84:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ad88:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2ad8c:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ad90:	01040c13          	addi	s8,s0,16
	if (__str._M_is_local())
   2ad94:	eb8782e3          	beq	a5,s8,2ac38 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
      { _M_dataplus._M_p = __p; }
   2ad98:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2ad9c:	01043783          	ld	a5,16(s0)
   2ada0:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2ada4:	00843783          	ld	a5,8(s0)
   2ada8:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2adac:	01843023          	sd	s8,0(s0)
      { _M_string_length = __length; }
   2adb0:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2adb4:	00040823          	sb	zero,16(s0)
   2adb8:	ef4d02e3          	beq	s10,s4,2ac9c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x10c>
   2adbc:	010a0493          	addi	s1,s4,16
   2adc0:	41490cb3          	sub	s9,s2,s4
   2adc4:	01998cb3          	add	s9,s3,s9
      _ForwardIterator __cur = __result;
   2adc8:	00098413          	addi	s0,s3,0
   2adcc:	ea5ff06f          	jal	zero,2ac70 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>

000000000002add0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2add0:	fd010113          	addi	sp,sp,-48
   2add4:	02113423          	sd	ra,40(sp)
   2add8:	02813023          	sd	s0,32(sp)
   2addc:	00913c23          	sd	s1,24(sp)
   2ade0:	01213823          	sd	s2,16(sp)
   2ade4:	01313423          	sd	s3,8(sp)
   2ade8:	00050493          	addi	s1,a0,0
   2adec:	00058413          	addi	s0,a1,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2adf0:	00853903          	ld	s2,8(a0)
   2adf4:	01053783          	ld	a5,16(a0)
   2adf8:	06f90c63          	beq	s2,a5,2ae70 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2adfc:	01090513          	addi	a0,s2,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ae00:	00a93023          	sd	a0,0(s2)
      { return _M_dataplus._M_p; }
   2ae04:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ae08:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   2ae0c:	05378663          	beq	a5,s3,2ae58 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x88>
      { _M_dataplus._M_p = __p; }
   2ae10:	00f93023          	sd	a5,0(s2)
      { _M_allocated_capacity = __capacity; }
   2ae14:	0105b783          	ld	a5,16(a1)
   2ae18:	00f93823          	sd	a5,16(s2)
      { _M_string_length = __length; }
   2ae1c:	00843783          	ld	a5,8(s0)
   2ae20:	00f93423          	sd	a5,8(s2)
      { _M_dataplus._M_p = __p; }
   2ae24:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2ae28:	00043423          	sd	zero,8(s0)
   2ae2c:	00040823          	sb	zero,16(s0)
	    ++this->_M_impl._M_finish;
   2ae30:	0084b783          	ld	a5,8(s1)
   2ae34:	02078793          	addi	a5,a5,32
   2ae38:	00f4b423          	sd	a5,8(s1)
      }
   2ae3c:	02813083          	ld	ra,40(sp)
   2ae40:	02013403          	ld	s0,32(sp)
   2ae44:	01813483          	ld	s1,24(sp)
   2ae48:	01013903          	ld	s2,16(sp)
   2ae4c:	00813983          	ld	s3,8(sp)
   2ae50:	03010113          	addi	sp,sp,48
   2ae54:	00008067          	jalr	zero,0(ra)
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ae58:	0085b603          	ld	a2,8(a1)
   2ae5c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ae60:	fa060ee3          	beq	a2,zero,2ae1c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ae64:	00098593          	addi	a1,s3,0
   2ae68:	f48eb0ef          	jal	ra,165b0 <memcpy@plt>
   2ae6c:	fb1ff06f          	jal	zero,2ae1c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2ae70:	00058613          	addi	a2,a1,0
   2ae74:	00090593          	addi	a1,s2,0
   2ae78:	00017317          	auipc	t1,0x17
   2ae7c:	68833303          	ld	t1,1672(t1) # 42500 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17970>
   2ae80:	000300e7          	jalr	ra,0(t1)
      }
   2ae84:	fb9ff06f          	jal	zero,2ae3c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>

000000000002ae88 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   2ae88:	fe010113          	addi	sp,sp,-32
   2ae8c:	00113c23          	sd	ra,24(sp)
   2ae90:	00813823          	sd	s0,16(sp)
   2ae94:	00913423          	sd	s1,8(sp)
   2ae98:	00050413          	addi	s0,a0,0
   2ae9c:	00058493          	addi	s1,a1,0
	  for (; __first != __last; ++__first)
   2aea0:	02b51063          	bne	a0,a1,2aec0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x38>
	    std::_Destroy(std::__addressof(*__first));
	}
   2aea4:	01813083          	ld	ra,24(sp)
   2aea8:	01013403          	ld	s0,16(sp)
   2aeac:	00813483          	ld	s1,8(sp)
   2aeb0:	02010113          	addi	sp,sp,32
   2aeb4:	00008067          	jalr	zero,0(ra)
	  for (; __first != __last; ++__first)
   2aeb8:	03040413          	addi	s0,s0,48
   2aebc:	fe8484e3          	beq	s1,s0,2aea4 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1c>
      { return _M_dataplus._M_p; }
   2aec0:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2aec4:	01040793          	addi	a5,s0,16
   2aec8:	fef508e3          	beq	a0,a5,2aeb8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x30>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2aecc:	e44eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2aed0:	fe9ff06f          	jal	zero,2aeb8 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x30>

000000000002aed4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2aed4:	f8010113          	addi	sp,sp,-128
   2aed8:	06113c23          	sd	ra,120(sp)
   2aedc:	06813823          	sd	s0,112(sp)
   2aee0:	06913423          	sd	s1,104(sp)
   2aee4:	07213023          	sd	s2,96(sp)
   2aee8:	05313c23          	sd	s3,88(sp)
   2aeec:	05413823          	sd	s4,80(sp)
   2aef0:	05513423          	sd	s5,72(sp)
   2aef4:	05613023          	sd	s6,64(sp)
   2aef8:	03713c23          	sd	s7,56(sp)
   2aefc:	03813823          	sd	s8,48(sp)
   2af00:	03913423          	sd	s9,40(sp)
   2af04:	03a13023          	sd	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2af08:	00853a83          	ld	s5,8(a0)
   2af0c:	00053b03          	ld	s6,0(a0)
   2af10:	416a87b3          	sub	a5,s5,s6
   2af14:	4047d793          	srai	a5,a5,0x4
   2af18:	0000c717          	auipc	a4,0xc
   2af1c:	bc073703          	ld	a4,-1088(a4) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2af20:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2af24:	0000d717          	auipc	a4,0xd
   2af28:	c5473703          	ld	a4,-940(a4) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2af2c:	04e78463          	beq	a5,a4,2af74 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0>
   2af30:	00050b93          	addi	s7,a0,0
   2af34:	00058a13          	addi	s4,a1,0
   2af38:	00060413          	addi	s0,a2,0
   2af3c:	00058d13          	addi	s10,a1,0
      return __a;
   2af40:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2af44:	036a8e63          	beq	s5,s6,2af80 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   2af48:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2af4c:	26f76063          	bltu	a4,a5,2b1ac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d8>
   2af50:	00070c93          	addi	s9,a4,0
   2af54:	0000d797          	auipc	a5,0xd
   2af58:	c247b783          	ld	a5,-988(a5) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2af5c:	00e7f463          	bgeu	a5,a4,2af64 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x90>
   2af60:	00078c93          	addi	s9,a5,0
   2af64:	416a04b3          	sub	s1,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2af68:	00000c13          	addi	s8,zero,0
   2af6c:	26070063          	beq	a4,zero,2b1cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f8>
   2af70:	2480006f          	jal	zero,2b1b8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2e4>
	  __throw_length_error(__N(__s));
   2af74:	0000c517          	auipc	a0,0xc
   2af78:	92c50513          	addi	a0,a0,-1748 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2af7c:	cc4eb0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2af80:	00100713          	addi	a4,zero,1
   2af84:	fc5ff06f          	jal	zero,2af48 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2af88:	00000693          	addi	a3,zero,0
   2af8c:	00000613          	addi	a2,zero,0
   2af90:	00010593          	addi	a1,sp,0
   2af94:	00048513          	addi	a0,s1,0
   2af98:	dc4fc0ef          	jal	ra,2755c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   2af9c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2afa0:	01010793          	addi	a5,sp,16
   2afa4:	00f50463          	beq	a0,a5,2afac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2afa8:	d68eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2afac:	010b0913          	addi	s2,s6,16
   2afb0:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2afb4:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2afb8:	096d1663          	bne	s10,s6,2b044 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x170>
	      ++__new_finish;
   2afbc:	03048493          	addi	s1,s1,48
   2afc0:	175d0463          	beq	s10,s5,2b128 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x254>
   2afc4:	010a0993          	addi	s3,s4,16
   2afc8:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2afcc:	00048413          	addi	s0,s1,0
   2afd0:	0f80006f          	jal	zero,2b0c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f4>
      { return _M_dataplus._M_p; }
   2afd4:	00050413          	addi	s0,a0,0
   2afd8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2afdc:	01010793          	addi	a5,sp,16
   2afe0:	00f50463          	beq	a0,a5,2afe8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x114>
   2afe4:	d2ceb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2afe8:	00040513          	addi	a0,s0,0
      __catch(...)
   2afec:	c14eb0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2aff0:	180c1e63          	bne	s8,zero,2b18c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b8>
      { return _M_dataplus._M_p; }
   2aff4:	0004b503          	ld	a0,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2aff8:	01048493          	addi	s1,s1,16
	if (!_M_is_local())
   2affc:	00950463          	beq	a0,s1,2b004 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b000:	d10eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   2b004:	e1ceb0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   2b008:	00050413          	addi	s0,a0,0
   2b00c:	e84eb0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   2b010:	00040513          	addi	a0,s0,0
   2b014:	edceb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b018:	00843603          	ld	a2,8(s0)
   2b01c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b020:	04060263          	beq	a2,zero,2b064 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x190>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b024:	00090593          	addi	a1,s2,0
   2b028:	d88eb0ef          	jal	ra,165b0 <memcpy@plt>
   2b02c:	0380006f          	jal	zero,2b064 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x190>
   2b030:	ce0eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2b034:	03040413          	addi	s0,s0,48
   2b038:	03048493          	addi	s1,s1,48
   2b03c:	03090913          	addi	s2,s2,48
   2b040:	f7a40ee3          	beq	s0,s10,2afbc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b044:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b048:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2b04c:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b050:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2b054:	fd2782e3          	beq	a5,s2,2b018 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x144>
      { _M_dataplus._M_p = __p; }
   2b058:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2b05c:	01043783          	ld	a5,16(s0)
   2b060:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2b064:	00843783          	ld	a5,8(s0)
   2b068:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2b06c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b070:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b074:	00040823          	sb	zero,16(s0)
class line_table::file {
   2b078:	02043783          	ld	a5,32(s0)
   2b07c:	02f4b023          	sd	a5,32(s1)
   2b080:	02843783          	ld	a5,40(s0)
   2b084:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2b088:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b08c:	fb3512e3          	bne	a0,s3,2b030 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15c>
   2b090:	fa5ff06f          	jal	zero,2b034 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x160>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b094:	00893603          	ld	a2,8(s2)
   2b098:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b09c:	04061863          	bne	a2,zero,2b0ec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x218>
      { _M_string_length = __length; }
   2b0a0:	00893783          	ld	a5,8(s2)
   2b0a4:	00f43423          	sd	a5,8(s0)
   2b0a8:	02093783          	ld	a5,32(s2)
   2b0ac:	02f43023          	sd	a5,32(s0)
   2b0b0:	02893783          	ld	a5,40(s2)
   2b0b4:	02f43423          	sd	a5,40(s0)
   2b0b8:	03090913          	addi	s2,s2,48
   2b0bc:	03040413          	addi	s0,s0,48
   2b0c0:	03098993          	addi	s3,s3,48
   2b0c4:	03590863          	beq	s2,s5,2b0f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b0c8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b0cc:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2b0d0:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b0d4:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2b0d8:	fb378ee3          	beq	a5,s3,2b094 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1c0>
      { _M_dataplus._M_p = __p; }
   2b0dc:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b0e0:	01093783          	ld	a5,16(s2)
   2b0e4:	00f43823          	sd	a5,16(s0)
   2b0e8:	fb9ff06f          	jal	zero,2b0a0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b0ec:	cc4eb0ef          	jal	ra,165b0 <memcpy@plt>
   2b0f0:	fb1ff06f          	jal	zero,2b0a0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1cc>
   2b0f4:	414a87b3          	sub	a5,s5,s4
   2b0f8:	fd078793          	addi	a5,a5,-48
   2b0fc:	0047d793          	srli	a5,a5,0x4
   2b100:	0000d717          	auipc	a4,0xd
   2b104:	a8073703          	ld	a4,-1408(a4) # 37b80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2b108:	02e787b3          	mul	a5,a5,a4
   2b10c:	00479793          	slli	a5,a5,0x4
   2b110:	0047d793          	srli	a5,a5,0x4
   2b114:	00178793          	addi	a5,a5,1
   2b118:	00179713          	slli	a4,a5,0x1
   2b11c:	00f707b3          	add	a5,a4,a5
   2b120:	00479793          	slli	a5,a5,0x4
   2b124:	00f484b3          	add	s1,s1,a5
	if (__p)
   2b128:	000b0663          	beq	s6,zero,2b134 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x260>
   2b12c:	000b0513          	addi	a0,s6,0
   2b130:	be0eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2b134:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2b138:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2b13c:	001c9793          	slli	a5,s9,0x1
   2b140:	019787b3          	add	a5,a5,s9
   2b144:	00479793          	slli	a5,a5,0x4
   2b148:	00fc07b3          	add	a5,s8,a5
   2b14c:	00fbb823          	sd	a5,16(s7)
    }
   2b150:	07813083          	ld	ra,120(sp)
   2b154:	07013403          	ld	s0,112(sp)
   2b158:	06813483          	ld	s1,104(sp)
   2b15c:	06013903          	ld	s2,96(sp)
   2b160:	05813983          	ld	s3,88(sp)
   2b164:	05013a03          	ld	s4,80(sp)
   2b168:	04813a83          	ld	s5,72(sp)
   2b16c:	04013b03          	ld	s6,64(sp)
   2b170:	03813b83          	ld	s7,56(sp)
   2b174:	03013c03          	ld	s8,48(sp)
   2b178:	02813c83          	ld	s9,40(sp)
   2b17c:	02013d03          	ld	s10,32(sp)
   2b180:	08010113          	addi	sp,sp,128
   2b184:	00008067          	jalr	zero,0(ra)
   2b188:	e65ff06f          	jal	zero,2afec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x118>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   2b18c:	000c0593          	addi	a1,s8,0
   2b190:	000c0513          	addi	a0,s8,0
   2b194:	00017317          	auipc	t1,0x17
   2b198:	12c33303          	ld	t1,300(t1) # 422c0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17438>
   2b19c:	000300e7          	jalr	ra,0(t1)
   2b1a0:	000c0513          	addi	a0,s8,0
   2b1a4:	b6ceb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b1a8:	e5dff06f          	jal	zero,2b004 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
   2b1ac:	416a04b3          	sub	s1,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b1b0:	0000dc97          	auipc	s9,0xd
   2b1b4:	9c8cbc83          	ld	s9,-1592(s9) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b1b8:	001c9513          	slli	a0,s9,0x1
   2b1bc:	01950533          	add	a0,a0,s9
   2b1c0:	00451513          	slli	a0,a0,0x4
   2b1c4:	b5ceb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2b1c8:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2b1cc:	009c04b3          	add	s1,s8,s1
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b1d0:	01010793          	addi	a5,sp,16
   2b1d4:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b1d8:	00043583          	ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   2b1dc:	00843603          	ld	a2,8(s0)
   2b1e0:	00000693          	addi	a3,zero,0
   2b1e4:	00c58633          	add	a2,a1,a2
   2b1e8:	00010513          	addi	a0,sp,0
   2b1ec:	00017317          	auipc	t1,0x17
   2b1f0:	12433303          	ld	t1,292(t1) # 42310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x17b1c>
   2b1f4:	000300e7          	jalr	ra,0(t1)
      }
   2b1f8:	d91ff06f          	jal	zero,2af88 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb4>

000000000002b1fc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2b1fc:	f8010113          	addi	sp,sp,-128
   2b200:	06113c23          	sd	ra,120(sp)
   2b204:	06813823          	sd	s0,112(sp)
   2b208:	06913423          	sd	s1,104(sp)
   2b20c:	07213023          	sd	s2,96(sp)
   2b210:	05313c23          	sd	s3,88(sp)
   2b214:	05413823          	sd	s4,80(sp)
   2b218:	05513423          	sd	s5,72(sp)
   2b21c:	05613023          	sd	s6,64(sp)
   2b220:	03713c23          	sd	s7,56(sp)
   2b224:	03813823          	sd	s8,48(sp)
   2b228:	03913423          	sd	s9,40(sp)
   2b22c:	03a13023          	sd	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2b230:	00853a83          	ld	s5,8(a0)
   2b234:	00053b03          	ld	s6,0(a0)
   2b238:	416a87b3          	sub	a5,s5,s6
   2b23c:	4047d793          	srai	a5,a5,0x4
   2b240:	0000c717          	auipc	a4,0xc
   2b244:	89873703          	ld	a4,-1896(a4) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2b248:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2b24c:	0000d717          	auipc	a4,0xd
   2b250:	92c73703          	ld	a4,-1748(a4) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b254:	04e78463          	beq	a5,a4,2b29c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa0>
   2b258:	00050b93          	addi	s7,a0,0
   2b25c:	00058a13          	addi	s4,a1,0
   2b260:	00060413          	addi	s0,a2,0
   2b264:	00058d13          	addi	s10,a1,0
      return __a;
   2b268:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2b26c:	036a8e63          	beq	s5,s6,2b2a8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xac>
	const size_type __len = size() + (std::max)(size(), __n);
   2b270:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b274:	26f76263          	bltu	a4,a5,2b4d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2dc>
   2b278:	00070c93          	addi	s9,a4,0
   2b27c:	0000d797          	auipc	a5,0xd
   2b280:	8fc7b783          	ld	a5,-1796(a5) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b284:	00e7f463          	bgeu	a5,a4,2b28c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x90>
   2b288:	00078c93          	addi	s9,a5,0
   2b28c:	416a0933          	sub	s2,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2b290:	00000c13          	addi	s8,zero,0
   2b294:	26070263          	beq	a4,zero,2b4f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2fc>
   2b298:	24c0006f          	jal	zero,2b4e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e8>
	  __throw_length_error(__N(__s));
   2b29c:	0000b517          	auipc	a0,0xb
   2b2a0:	60450513          	addi	a0,a0,1540 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2b2a4:	99ceb0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2b2a8:	00100713          	addi	a4,zero,1
   2b2ac:	fc5ff06f          	jal	zero,2b270 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x74>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b2b0:	00843603          	ld	a2,8(s0)
   2b2b4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b2b8:	26060263          	beq	a2,zero,2b51c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x320>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b2bc:	00048593          	addi	a1,s1,0
   2b2c0:	01010513          	addi	a0,sp,16
   2b2c4:	aeceb0ef          	jal	ra,165b0 <memcpy@plt>
   2b2c8:	2540006f          	jal	zero,2b51c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x320>
      { return _M_dataplus._M_p; }
   2b2cc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b2d0:	01010793          	addi	a5,sp,16
   2b2d4:	00f50463          	beq	a0,a5,2b2dc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b2d8:	a38eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b2dc:	010b0913          	addi	s2,s6,16
   2b2e0:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2b2e4:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2b2e8:	096d1663          	bne	s10,s6,2b374 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x178>
	      ++__new_finish;
   2b2ec:	03048493          	addi	s1,s1,48
   2b2f0:	175d0463          	beq	s10,s5,2b458 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x25c>
   2b2f4:	010a0993          	addi	s3,s4,16
   2b2f8:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2b2fc:	00048413          	addi	s0,s1,0
   2b300:	0f80006f          	jal	zero,2b3f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1fc>
      { return _M_dataplus._M_p; }
   2b304:	00050413          	addi	s0,a0,0
   2b308:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b30c:	01010793          	addi	a5,sp,16
   2b310:	00f50463          	beq	a0,a5,2b318 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x11c>
   2b314:	9fceb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      __catch(...)
   2b318:	00040513          	addi	a0,s0,0
   2b31c:	8e4eb0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2b320:	180c1c63          	bne	s8,zero,2b4b8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2bc>
      { return _M_dataplus._M_p; }
   2b324:	00093503          	ld	a0,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b328:	01090493          	addi	s1,s2,16
	if (!_M_is_local())
   2b32c:	00950463          	beq	a0,s1,2b334 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x138>
   2b330:	9e0eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   2b334:	aeceb0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   2b338:	00050413          	addi	s0,a0,0
   2b33c:	b54eb0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   2b340:	00040513          	addi	a0,s0,0
   2b344:	baceb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b348:	00843603          	ld	a2,8(s0)
   2b34c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b350:	04060263          	beq	a2,zero,2b394 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x198>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b354:	00090593          	addi	a1,s2,0
   2b358:	a58eb0ef          	jal	ra,165b0 <memcpy@plt>
   2b35c:	0380006f          	jal	zero,2b394 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x198>
   2b360:	9b0eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2b364:	03040413          	addi	s0,s0,48
   2b368:	03048493          	addi	s1,s1,48
   2b36c:	03090913          	addi	s2,s2,48
   2b370:	f7a40ee3          	beq	s0,s10,2b2ec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xf0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b374:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b378:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2b37c:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b380:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2b384:	fd2782e3          	beq	a5,s2,2b348 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14c>
      { _M_dataplus._M_p = __p; }
   2b388:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2b38c:	01043783          	ld	a5,16(s0)
   2b390:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2b394:	00843783          	ld	a5,8(s0)
   2b398:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2b39c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b3a0:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b3a4:	00040823          	sb	zero,16(s0)
   2b3a8:	02043783          	ld	a5,32(s0)
   2b3ac:	02f4b023          	sd	a5,32(s1)
   2b3b0:	02843783          	ld	a5,40(s0)
   2b3b4:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2b3b8:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b3bc:	fb3512e3          	bne	a0,s3,2b360 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x164>
   2b3c0:	fa5ff06f          	jal	zero,2b364 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x168>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b3c4:	00893603          	ld	a2,8(s2)
   2b3c8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b3cc:	04061863          	bne	a2,zero,2b41c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x220>
      { _M_string_length = __length; }
   2b3d0:	00893783          	ld	a5,8(s2)
   2b3d4:	00f43423          	sd	a5,8(s0)
   2b3d8:	02093783          	ld	a5,32(s2)
   2b3dc:	02f43023          	sd	a5,32(s0)
   2b3e0:	02893783          	ld	a5,40(s2)
   2b3e4:	02f43423          	sd	a5,40(s0)
   2b3e8:	03090913          	addi	s2,s2,48
   2b3ec:	03040413          	addi	s0,s0,48
   2b3f0:	03098993          	addi	s3,s3,48
   2b3f4:	03590863          	beq	s2,s5,2b424 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x228>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b3f8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b3fc:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2b400:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b404:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2b408:	fb378ee3          	beq	a5,s3,2b3c4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1c8>
      { _M_dataplus._M_p = __p; }
   2b40c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b410:	01093783          	ld	a5,16(s2)
   2b414:	00f43823          	sd	a5,16(s0)
   2b418:	fb9ff06f          	jal	zero,2b3d0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b41c:	994eb0ef          	jal	ra,165b0 <memcpy@plt>
   2b420:	fb1ff06f          	jal	zero,2b3d0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1d4>
   2b424:	414a87b3          	sub	a5,s5,s4
   2b428:	fd078793          	addi	a5,a5,-48
   2b42c:	0047d793          	srli	a5,a5,0x4
   2b430:	0000c717          	auipc	a4,0xc
   2b434:	75073703          	ld	a4,1872(a4) # 37b80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2b438:	02e787b3          	mul	a5,a5,a4
   2b43c:	00479793          	slli	a5,a5,0x4
   2b440:	0047d793          	srli	a5,a5,0x4
   2b444:	00178793          	addi	a5,a5,1
   2b448:	00179713          	slli	a4,a5,0x1
   2b44c:	00f707b3          	add	a5,a4,a5
   2b450:	00479793          	slli	a5,a5,0x4
   2b454:	00f484b3          	add	s1,s1,a5
	if (__p)
   2b458:	000b0663          	beq	s6,zero,2b464 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x268>
   2b45c:	000b0513          	addi	a0,s6,0
   2b460:	8b0eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2b464:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2b468:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2b46c:	001c9793          	slli	a5,s9,0x1
   2b470:	019787b3          	add	a5,a5,s9
   2b474:	00479793          	slli	a5,a5,0x4
   2b478:	00fc07b3          	add	a5,s8,a5
   2b47c:	00fbb823          	sd	a5,16(s7)
    }
   2b480:	07813083          	ld	ra,120(sp)
   2b484:	07013403          	ld	s0,112(sp)
   2b488:	06813483          	ld	s1,104(sp)
   2b48c:	06013903          	ld	s2,96(sp)
   2b490:	05813983          	ld	s3,88(sp)
   2b494:	05013a03          	ld	s4,80(sp)
   2b498:	04813a83          	ld	s5,72(sp)
   2b49c:	04013b03          	ld	s6,64(sp)
   2b4a0:	03813b83          	ld	s7,56(sp)
   2b4a4:	03013c03          	ld	s8,48(sp)
   2b4a8:	02813c83          	ld	s9,40(sp)
   2b4ac:	02013d03          	ld	s10,32(sp)
   2b4b0:	08010113          	addi	sp,sp,128
   2b4b4:	00008067          	jalr	zero,0(ra)
   2b4b8:	000c0593          	addi	a1,s8,0
   2b4bc:	000c0513          	addi	a0,s8,0
   2b4c0:	00017317          	auipc	t1,0x17
   2b4c4:	e0033303          	ld	t1,-512(t1) # 422c0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17438>
   2b4c8:	000300e7          	jalr	ra,0(t1)
   2b4cc:	000c0513          	addi	a0,s8,0
   2b4d0:	840eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b4d4:	e61ff06f          	jal	zero,2b334 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x138>
   2b4d8:	416a0933          	sub	s2,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b4dc:	0000cc97          	auipc	s9,0xc
   2b4e0:	69ccbc83          	ld	s9,1692(s9) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b4e4:	001c9513          	slli	a0,s9,0x1
   2b4e8:	01950533          	add	a0,a0,s9
   2b4ec:	00451513          	slli	a0,a0,0x4
   2b4f0:	830eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2b4f4:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2b4f8:	012c0933          	add	s2,s8,s2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b4fc:	01010793          	addi	a5,sp,16
   2b500:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b504:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b508:	01040493          	addi	s1,s0,16
	if (__str._M_is_local())
   2b50c:	da9782e3          	beq	a5,s1,2b2b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb4>
      { _M_dataplus._M_p = __p; }
   2b510:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2b514:	01043783          	ld	a5,16(s0)
   2b518:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2b51c:	00843783          	ld	a5,8(s0)
   2b520:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2b524:	00943023          	sd	s1,0(s0)
      { _M_string_length = __length; }
   2b528:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b52c:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2b530:	00000693          	addi	a3,zero,0
   2b534:	00000613          	addi	a2,zero,0
   2b538:	00010593          	addi	a1,sp,0
   2b53c:	00090513          	addi	a0,s2,0
   2b540:	81cfc0ef          	jal	ra,2755c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2b544:	d89ff06f          	jal	zero,2b2cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd0>

000000000002b548 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   2b548:	fb010113          	addi	sp,sp,-80
   2b54c:	04113423          	sd	ra,72(sp)
   2b550:	04813023          	sd	s0,64(sp)
   2b554:	02913c23          	sd	s1,56(sp)
   2b558:	03213823          	sd	s2,48(sp)
   2b55c:	03313423          	sd	s3,40(sp)
   2b560:	00050493          	addi	s1,a0,0
   2b564:	00058413          	addi	s0,a1,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2b568:	00853903          	ld	s2,8(a0)
   2b56c:	01053783          	ld	a5,16(a0)
   2b570:	0cf90063          	beq	s2,a5,2b630 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe8>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b574:	01010793          	addi	a5,sp,16
   2b578:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b57c:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b580:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   2b584:	03378e63          	beq	a5,s3,2b5c0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x78>
      { _M_dataplus._M_p = __p; }
   2b588:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2b58c:	0105b783          	ld	a5,16(a1)
   2b590:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2b594:	00843783          	ld	a5,8(s0)
   2b598:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2b59c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b5a0:	00043423          	sd	zero,8(s0)
   2b5a4:	00040823          	sb	zero,16(s0)
   2b5a8:	00000693          	addi	a3,zero,0
   2b5ac:	00000613          	addi	a2,zero,0
   2b5b0:	00010593          	addi	a1,sp,0
   2b5b4:	00090513          	addi	a0,s2,0
   2b5b8:	fa5fb0ef          	jal	ra,2755c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2b5bc:	0200006f          	jal	zero,2b5dc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x94>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b5c0:	0085b603          	ld	a2,8(a1)
   2b5c4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b5c8:	fc0606e3          	beq	a2,zero,2b594 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b5cc:	00098593          	addi	a1,s3,0
   2b5d0:	01010513          	addi	a0,sp,16
   2b5d4:	fddea0ef          	jal	ra,165b0 <memcpy@plt>
   2b5d8:	fbdff06f          	jal	zero,2b594 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
      { return _M_dataplus._M_p; }
   2b5dc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b5e0:	01010793          	addi	a5,sp,16
   2b5e4:	00f50463          	beq	a0,a5,2b5ec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b5e8:	f29ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   2b5ec:	0084b783          	ld	a5,8(s1)
   2b5f0:	03078793          	addi	a5,a5,48
   2b5f4:	00f4b423          	sd	a5,8(s1)
      }
   2b5f8:	04813083          	ld	ra,72(sp)
   2b5fc:	04013403          	ld	s0,64(sp)
   2b600:	03813483          	ld	s1,56(sp)
   2b604:	03013903          	ld	s2,48(sp)
   2b608:	02813983          	ld	s3,40(sp)
   2b60c:	05010113          	addi	sp,sp,80
   2b610:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   2b614:	00050413          	addi	s0,a0,0
   2b618:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b61c:	01010793          	addi	a5,sp,16
   2b620:	00f50463          	beq	a0,a5,2b628 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe0>
   2b624:	eedea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2b628:	00040513          	addi	a0,s0,0
   2b62c:	8c4eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b630:	00058613          	addi	a2,a1,0
   2b634:	00090593          	addi	a1,s2,0
   2b638:	00017317          	auipc	t1,0x17
   2b63c:	e9033303          	ld	t1,-368(t1) # 424c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x172cc>
   2b640:	000300e7          	jalr	ra,0(t1)
      }
   2b644:	fb5ff06f          	jal	zero,2b5f8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb0>

000000000002b648 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2b648:	f7010113          	addi	sp,sp,-144
   2b64c:	08113423          	sd	ra,136(sp)
   2b650:	08813023          	sd	s0,128(sp)
   2b654:	06913c23          	sd	s1,120(sp)
   2b658:	07213823          	sd	s2,112(sp)
   2b65c:	07313423          	sd	s3,104(sp)
   2b660:	07413023          	sd	s4,96(sp)
   2b664:	05513c23          	sd	s5,88(sp)
   2b668:	05613823          	sd	s6,80(sp)
   2b66c:	05713423          	sd	s7,72(sp)
   2b670:	05813023          	sd	s8,64(sp)
   2b674:	03913c23          	sd	s9,56(sp)
   2b678:	03a13823          	sd	s10,48(sp)
   2b67c:	03b13423          	sd	s11,40(sp)
   2b680:	00070913          	addi	s2,a4,0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2b684:	00853a83          	ld	s5,8(a0)
   2b688:	00053b03          	ld	s6,0(a0)
   2b68c:	416a87b3          	sub	a5,s5,s6
   2b690:	4047d793          	srai	a5,a5,0x4
   2b694:	0000b717          	auipc	a4,0xb
   2b698:	44473703          	ld	a4,1092(a4) # 36ad8 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   2b69c:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   2b6a0:	0000c717          	auipc	a4,0xc
   2b6a4:	4d873703          	ld	a4,1240(a4) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b6a8:	04e78663          	beq	a5,a4,2b6f4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xac>
   2b6ac:	00050b93          	addi	s7,a0,0
   2b6b0:	00058a13          	addi	s4,a1,0
   2b6b4:	00060413          	addi	s0,a2,0
   2b6b8:	00068493          	addi	s1,a3,0
   2b6bc:	00058d13          	addi	s10,a1,0
      return __a;
   2b6c0:	00078713          	addi	a4,a5,0
      if (__a < __b)
   2b6c4:	036a8e63          	beq	s5,s6,2b700 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb8>
	const size_type __len = size() + (std::max)(size(), __n);
   2b6c8:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b6cc:	26f76463          	bltu	a4,a5,2b934 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2ec>
   2b6d0:	00070c93          	addi	s9,a4,0
   2b6d4:	0000c797          	auipc	a5,0xc
   2b6d8:	4a47b783          	ld	a5,1188(a5) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   2b6dc:	00e7f463          	bgeu	a5,a4,2b6e4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x9c>
   2b6e0:	00078c93          	addi	s9,a5,0
   2b6e4:	416a09b3          	sub	s3,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2b6e8:	00000c13          	addi	s8,zero,0
   2b6ec:	26070463          	beq	a4,zero,2b954 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x30c>
   2b6f0:	2500006f          	jal	zero,2b940 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2f8>
	  __throw_length_error(__N(__s));
   2b6f4:	0000b517          	auipc	a0,0xb
   2b6f8:	1ac50513          	addi	a0,a0,428 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2b6fc:	d45ea0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2b700:	00100713          	addi	a4,zero,1
   2b704:	fc5ff06f          	jal	zero,2b6c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b708:	00843603          	ld	a2,8(s0)
   2b70c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b710:	26060463          	beq	a2,zero,2b978 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x330>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b714:	000d8593          	addi	a1,s11,0
   2b718:	01010513          	addi	a0,sp,16
   2b71c:	e95ea0ef          	jal	ra,165b0 <memcpy@plt>
   2b720:	2580006f          	jal	zero,2b978 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x330>
      { return _M_dataplus._M_p; }
   2b724:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b728:	01010793          	addi	a5,sp,16
   2b72c:	00f50463          	beq	a0,a5,2b734 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xec>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b730:	de1ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b734:	010b0913          	addi	s2,s6,16
   2b738:	000b0413          	addi	s0,s6,0
      _ForwardIterator __cur = __result;
   2b73c:	000c0493          	addi	s1,s8,0
      for (; __first != __last; ++__first, (void)++__cur)
   2b740:	096d1663          	bne	s10,s6,2b7cc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x184>
	      ++__new_finish;
   2b744:	03048493          	addi	s1,s1,48
   2b748:	175d0463          	beq	s10,s5,2b8b0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x268>
   2b74c:	010a0993          	addi	s3,s4,16
   2b750:	000a0913          	addi	s2,s4,0
      _ForwardIterator __cur = __result;
   2b754:	00048413          	addi	s0,s1,0
   2b758:	0f80006f          	jal	zero,2b850 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x208>
      { return _M_dataplus._M_p; }
   2b75c:	00050413          	addi	s0,a0,0
   2b760:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2b764:	01010793          	addi	a5,sp,16
   2b768:	00f50463          	beq	a0,a5,2b770 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x128>
   2b76c:	da5ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      __catch(...)
   2b770:	00040513          	addi	a0,s0,0
   2b774:	c8dea0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   2b778:	180c1e63          	bne	s8,zero,2b914 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x2cc>
      { return _M_dataplus._M_p; }
   2b77c:	0009b503          	ld	a0,0(s3)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b780:	01098993          	addi	s3,s3,16
	if (!_M_is_local())
   2b784:	01350463          	beq	a0,s3,2b78c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x144>
   2b788:	d89ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   2b78c:	e95ea0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   2b790:	00050413          	addi	s0,a0,0
   2b794:	efdea0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   2b798:	00040513          	addi	a0,s0,0
   2b79c:	f55ea0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b7a0:	00843603          	ld	a2,8(s0)
   2b7a4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b7a8:	04060263          	beq	a2,zero,2b7ec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1a4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b7ac:	00090593          	addi	a1,s2,0
   2b7b0:	e01ea0ef          	jal	ra,165b0 <memcpy@plt>
   2b7b4:	0380006f          	jal	zero,2b7ec <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1a4>
   2b7b8:	d59ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   2b7bc:	03040413          	addi	s0,s0,48
   2b7c0:	03048493          	addi	s1,s1,48
   2b7c4:	03090913          	addi	s2,s2,48
   2b7c8:	f7a40ee3          	beq	s0,s10,2b744 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b7cc:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b7d0:	00a4b023          	sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2b7d4:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b7d8:	00090993          	addi	s3,s2,0
	if (__str._M_is_local())
   2b7dc:	fd2782e3          	beq	a5,s2,2b7a0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x158>
      { _M_dataplus._M_p = __p; }
   2b7e0:	00f4b023          	sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   2b7e4:	01043783          	ld	a5,16(s0)
   2b7e8:	00f4b823          	sd	a5,16(s1)
      { _M_string_length = __length; }
   2b7ec:	00843783          	ld	a5,8(s0)
   2b7f0:	00f4b423          	sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2b7f4:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2b7f8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b7fc:	00040823          	sb	zero,16(s0)
   2b800:	02043783          	ld	a5,32(s0)
   2b804:	02f4b023          	sd	a5,32(s1)
   2b808:	02843783          	ld	a5,40(s0)
   2b80c:	02f4b423          	sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   2b810:	00043503          	ld	a0,0(s0)
	if (!_M_is_local())
   2b814:	fb3512e3          	bne	a0,s3,2b7b8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x170>
   2b818:	fa5ff06f          	jal	zero,2b7bc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x174>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2b81c:	00893603          	ld	a2,8(s2)
   2b820:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2b824:	04061863          	bne	a2,zero,2b874 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x22c>
      { _M_string_length = __length; }
   2b828:	00893783          	ld	a5,8(s2)
   2b82c:	00f43423          	sd	a5,8(s0)
   2b830:	02093783          	ld	a5,32(s2)
   2b834:	02f43023          	sd	a5,32(s0)
   2b838:	02893783          	ld	a5,40(s2)
   2b83c:	02f43423          	sd	a5,40(s0)
   2b840:	03090913          	addi	s2,s2,48
   2b844:	03040413          	addi	s0,s0,48
   2b848:	03098993          	addi	s3,s3,48
   2b84c:	03590863          	beq	s2,s5,2b87c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x234>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b850:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b854:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2b858:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b85c:	00098593          	addi	a1,s3,0
	if (__str._M_is_local())
   2b860:	fb378ee3          	beq	a5,s3,2b81c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1d4>
      { _M_dataplus._M_p = __p; }
   2b864:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2b868:	01093783          	ld	a5,16(s2)
   2b86c:	00f43823          	sd	a5,16(s0)
   2b870:	fb9ff06f          	jal	zero,2b828 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1e0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2b874:	d3dea0ef          	jal	ra,165b0 <memcpy@plt>
   2b878:	fb1ff06f          	jal	zero,2b828 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1e0>
   2b87c:	414a87b3          	sub	a5,s5,s4
   2b880:	fd078793          	addi	a5,a5,-48
   2b884:	0047d793          	srli	a5,a5,0x4
   2b888:	0000c717          	auipc	a4,0xc
   2b88c:	2f873703          	ld	a4,760(a4) # 37b80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   2b890:	02e787b3          	mul	a5,a5,a4
   2b894:	00479793          	slli	a5,a5,0x4
   2b898:	0047d793          	srli	a5,a5,0x4
   2b89c:	00178793          	addi	a5,a5,1
   2b8a0:	00179713          	slli	a4,a5,0x1
   2b8a4:	00f707b3          	add	a5,a4,a5
   2b8a8:	00479793          	slli	a5,a5,0x4
   2b8ac:	00f484b3          	add	s1,s1,a5
	if (__p)
   2b8b0:	000b0663          	beq	s6,zero,2b8bc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x274>
   2b8b4:	000b0513          	addi	a0,s6,0
   2b8b8:	c59ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2b8bc:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   2b8c0:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2b8c4:	001c9793          	slli	a5,s9,0x1
   2b8c8:	019787b3          	add	a5,a5,s9
   2b8cc:	00479793          	slli	a5,a5,0x4
   2b8d0:	00fc07b3          	add	a5,s8,a5
   2b8d4:	00fbb823          	sd	a5,16(s7)
    }
   2b8d8:	08813083          	ld	ra,136(sp)
   2b8dc:	08013403          	ld	s0,128(sp)
   2b8e0:	07813483          	ld	s1,120(sp)
   2b8e4:	07013903          	ld	s2,112(sp)
   2b8e8:	06813983          	ld	s3,104(sp)
   2b8ec:	06013a03          	ld	s4,96(sp)
   2b8f0:	05813a83          	ld	s5,88(sp)
   2b8f4:	05013b03          	ld	s6,80(sp)
   2b8f8:	04813b83          	ld	s7,72(sp)
   2b8fc:	04013c03          	ld	s8,64(sp)
   2b900:	03813c83          	ld	s9,56(sp)
   2b904:	03013d03          	ld	s10,48(sp)
   2b908:	02813d83          	ld	s11,40(sp)
   2b90c:	09010113          	addi	sp,sp,144
   2b910:	00008067          	jalr	zero,0(ra)
   2b914:	000c0593          	addi	a1,s8,0
   2b918:	000c0513          	addi	a0,s8,0
   2b91c:	00017317          	auipc	t1,0x17
   2b920:	9a433303          	ld	t1,-1628(t1) # 422c0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x17438>
   2b924:	000300e7          	jalr	ra,0(t1)
   2b928:	000c0513          	addi	a0,s8,0
   2b92c:	be5ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b930:	e5dff06f          	jal	zero,2b78c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x144>
   2b934:	416a09b3          	sub	s3,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2b938:	0000cc97          	auipc	s9,0xc
   2b93c:	240cbc83          	ld	s9,576(s9) # 37b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b940:	001c9513          	slli	a0,s9,0x1
   2b944:	01950533          	add	a0,a0,s9
   2b948:	00451513          	slli	a0,a0,0x4
   2b94c:	bd5ea0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2b950:	00050c13          	addi	s8,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   2b954:	013c09b3          	add	s3,s8,s3
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b958:	01010793          	addi	a5,sp,16
   2b95c:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b960:	00043783          	ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b964:	01040d93          	addi	s11,s0,16
	if (__str._M_is_local())
   2b968:	dbb780e3          	beq	a5,s11,2b708 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xc0>
      { _M_dataplus._M_p = __p; }
   2b96c:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2b970:	01043783          	ld	a5,16(s0)
   2b974:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2b978:	00843783          	ld	a5,8(s0)
   2b97c:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2b980:	01b43023          	sd	s11,0(s0)
      { _M_string_length = __length; }
   2b984:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2b988:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2b98c:	00093683          	ld	a3,0(s2)
   2b990:	0004b603          	ld	a2,0(s1)
   2b994:	00010593          	addi	a1,sp,0
   2b998:	00098513          	addi	a0,s3,0
   2b99c:	bc1fb0ef          	jal	ra,2755c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2b9a0:	d85ff06f          	jal	zero,2b724 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xdc>

000000000002b9a4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2b9a4:	fa010113          	addi	sp,sp,-96
   2b9a8:	04113c23          	sd	ra,88(sp)
   2b9ac:	04813823          	sd	s0,80(sp)
   2b9b0:	04913423          	sd	s1,72(sp)
   2b9b4:	05213023          	sd	s2,64(sp)
   2b9b8:	03313c23          	sd	s3,56(sp)
   2b9bc:	03413823          	sd	s4,48(sp)
   2b9c0:	03513423          	sd	s5,40(sp)
   2b9c4:	00050a93          	addi	s5,a0,0
   2b9c8:	00058413          	addi	s0,a1,0
   2b9cc:	00060493          	addi	s1,a2,0
   2b9d0:	00068913          	addi	s2,a3,0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2b9d4:	00853983          	ld	s3,8(a0)
   2b9d8:	01053783          	ld	a5,16(a0)
   2b9dc:	0cf98463          	beq	s3,a5,2baa4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x100>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2b9e0:	01010793          	addi	a5,sp,16
   2b9e4:	00f13023          	sd	a5,0(sp)
      { return _M_dataplus._M_p; }
   2b9e8:	0005b783          	ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2b9ec:	01058a13          	addi	s4,a1,16
	if (__str._M_is_local())
   2b9f0:	03478e63          	beq	a5,s4,2ba2c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x88>
      { _M_dataplus._M_p = __p; }
   2b9f4:	00f13023          	sd	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   2b9f8:	0105b783          	ld	a5,16(a1)
   2b9fc:	00f13823          	sd	a5,16(sp)
      { _M_string_length = __length; }
   2ba00:	00843783          	ld	a5,8(s0)
   2ba04:	00f13423          	sd	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   2ba08:	01443023          	sd	s4,0(s0)
      { _M_string_length = __length; }
   2ba0c:	00043423          	sd	zero,8(s0)
   2ba10:	00040823          	sb	zero,16(s0)
   2ba14:	00093683          	ld	a3,0(s2)
   2ba18:	0004b603          	ld	a2,0(s1)
   2ba1c:	00010593          	addi	a1,sp,0
   2ba20:	00098513          	addi	a0,s3,0
   2ba24:	b39fb0ef          	jal	ra,2755c <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2ba28:	0200006f          	jal	zero,2ba48 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ba2c:	0085b603          	ld	a2,8(a1)
   2ba30:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ba34:	fc0606e3          	beq	a2,zero,2ba00 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x5c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ba38:	000a0593          	addi	a1,s4,0
   2ba3c:	01010513          	addi	a0,sp,16
   2ba40:	b71ea0ef          	jal	ra,165b0 <memcpy@plt>
   2ba44:	fbdff06f          	jal	zero,2ba00 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x5c>
      { return _M_dataplus._M_p; }
   2ba48:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ba4c:	01010793          	addi	a5,sp,16
   2ba50:	00f50463          	beq	a0,a5,2ba58 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ba54:	abdea0ef          	jal	ra,16510 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   2ba58:	008ab783          	ld	a5,8(s5)
   2ba5c:	03078793          	addi	a5,a5,48
   2ba60:	00fab423          	sd	a5,8(s5)
      }
   2ba64:	05813083          	ld	ra,88(sp)
   2ba68:	05013403          	ld	s0,80(sp)
   2ba6c:	04813483          	ld	s1,72(sp)
   2ba70:	04013903          	ld	s2,64(sp)
   2ba74:	03813983          	ld	s3,56(sp)
   2ba78:	03013a03          	ld	s4,48(sp)
   2ba7c:	02813a83          	ld	s5,40(sp)
   2ba80:	06010113          	addi	sp,sp,96
   2ba84:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   2ba88:	00050413          	addi	s0,a0,0
   2ba8c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ba90:	01010793          	addi	a5,sp,16
   2ba94:	00f50463          	beq	a0,a5,2ba9c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xf8>
   2ba98:	a79ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ba9c:	00040513          	addi	a0,s0,0
   2baa0:	c51ea0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2baa4:	00068713          	addi	a4,a3,0
   2baa8:	00060693          	addi	a3,a2,0
   2baac:	00058613          	addi	a2,a1,0
   2bab0:	00098593          	addi	a1,s3,0
   2bab4:	00017317          	auipc	t1,0x17
   2bab8:	a2433303          	ld	t1,-1500(t1) # 424d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x16e90>
   2babc:	000300e7          	jalr	ra,0(t1)
      }
   2bac0:	fa5ff06f          	jal	zero,2ba64 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xc0>

000000000002bac4 <dwarf::at_sibling(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x0X
//

AT_REFERENCE(sibling);
   2bac4:	fc010113          	addi	sp,sp,-64
   2bac8:	02113c23          	sd	ra,56(sp)
   2bacc:	02813823          	sd	s0,48(sp)
   2bad0:	02913423          	sd	s1,40(sp)
   2bad4:	00050413          	addi	s0,a0,0
   2bad8:	00100613          	addi	a2,zero,1
   2badc:	00810493          	addi	s1,sp,8
   2bae0:	00048513          	addi	a0,s1,0
   2bae4:	d55f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bae8:	00048593          	addi	a1,s1,0
   2baec:	00040513          	addi	a0,s0,0
   2baf0:	db0f50ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2baf4:	00040513          	addi	a0,s0,0
   2baf8:	03813083          	ld	ra,56(sp)
   2bafc:	03013403          	ld	s0,48(sp)
   2bb00:	02813483          	ld	s1,40(sp)
   2bb04:	04010113          	addi	sp,sp,64
   2bb08:	00008067          	jalr	zero,0(ra)

000000000002bb0c <dwarf::at_name[abi:cxx11](dwarf::die const&)>:
// XXX location
AT_STRING(name);
   2bb0c:	fc010113          	addi	sp,sp,-64
   2bb10:	02113c23          	sd	ra,56(sp)
   2bb14:	02813823          	sd	s0,48(sp)
   2bb18:	02913423          	sd	s1,40(sp)
   2bb1c:	00050413          	addi	s0,a0,0
   2bb20:	00300613          	addi	a2,zero,3
   2bb24:	00810493          	addi	s1,sp,8
   2bb28:	00048513          	addi	a0,s1,0
   2bb2c:	d0df10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bb30:	00048593          	addi	a1,s1,0
   2bb34:	00040513          	addi	a0,s0,0
   2bb38:	cfcf50ef          	jal	ra,21034 <dwarf::value::as_string[abi:cxx11]() const>
   2bb3c:	00040513          	addi	a0,s0,0
   2bb40:	03813083          	ld	ra,56(sp)
   2bb44:	03013403          	ld	s0,48(sp)
   2bb48:	02813483          	ld	s1,40(sp)
   2bb4c:	04010113          	addi	sp,sp,64
   2bb50:	00008067          	jalr	zero,0(ra)

000000000002bb54 <dwarf::at_ordering(dwarf::die const&)>:
AT_ENUM(ordering, DW_ORD);
   2bb54:	fd010113          	addi	sp,sp,-48
   2bb58:	02113423          	sd	ra,40(sp)
   2bb5c:	02813023          	sd	s0,32(sp)
   2bb60:	00050593          	addi	a1,a0,0
   2bb64:	00900613          	addi	a2,zero,9
   2bb68:	00810413          	addi	s0,sp,8
   2bb6c:	00040513          	addi	a0,s0,0
   2bb70:	cc9f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bb74:	00040513          	addi	a0,s0,0
   2bb78:	858f30ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2bb7c:	0005051b          	addiw	a0,a0,0
   2bb80:	02813083          	ld	ra,40(sp)
   2bb84:	02013403          	ld	s0,32(sp)
   2bb88:	03010113          	addi	sp,sp,48
   2bb8c:	00008067          	jalr	zero,0(ra)

000000000002bb90 <dwarf::at_low_pc(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x1X
//

// XXX stmt_list
AT_ADDRESS(low_pc);
   2bb90:	fd010113          	addi	sp,sp,-48
   2bb94:	02113423          	sd	ra,40(sp)
   2bb98:	02813023          	sd	s0,32(sp)
   2bb9c:	00050593          	addi	a1,a0,0
   2bba0:	01100613          	addi	a2,zero,17
   2bba4:	00810413          	addi	s0,sp,8
   2bba8:	00040513          	addi	a0,s0,0
   2bbac:	c8df10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bbb0:	00040513          	addi	a0,s0,0
   2bbb4:	f94f20ef          	jal	ra,1e348 <dwarf::value::as_address() const>
   2bbb8:	02813083          	ld	ra,40(sp)
   2bbbc:	02013403          	ld	s0,32(sp)
   2bbc0:	03010113          	addi	sp,sp,48
   2bbc4:	00008067          	jalr	zero,0(ra)

000000000002bbc8 <dwarf::at_language(dwarf::die const&)>:
  default:
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
                       to_string(v.get_type()));
  }
}
AT_ENUM(language, DW_LANG);
   2bbc8:	fd010113          	addi	sp,sp,-48
   2bbcc:	02113423          	sd	ra,40(sp)
   2bbd0:	02813023          	sd	s0,32(sp)
   2bbd4:	00050593          	addi	a1,a0,0
   2bbd8:	01300613          	addi	a2,zero,19
   2bbdc:	00810413          	addi	s0,sp,8
   2bbe0:	00040513          	addi	a0,s0,0
   2bbe4:	c55f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bbe8:	00040513          	addi	a0,s0,0
   2bbec:	fe5f20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2bbf0:	0005051b          	addiw	a0,a0,0
   2bbf4:	02813083          	ld	ra,40(sp)
   2bbf8:	02013403          	ld	s0,32(sp)
   2bbfc:	03010113          	addi	sp,sp,48
   2bc00:	00008067          	jalr	zero,0(ra)

000000000002bc04 <dwarf::at_discr(dwarf::die const&)>:
AT_REFERENCE(discr);
   2bc04:	fc010113          	addi	sp,sp,-64
   2bc08:	02113c23          	sd	ra,56(sp)
   2bc0c:	02813823          	sd	s0,48(sp)
   2bc10:	02913423          	sd	s1,40(sp)
   2bc14:	00050413          	addi	s0,a0,0
   2bc18:	01500613          	addi	a2,zero,21
   2bc1c:	00810493          	addi	s1,sp,8
   2bc20:	00048513          	addi	a0,s1,0
   2bc24:	c15f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bc28:	00048593          	addi	a1,s1,0
   2bc2c:	00040513          	addi	a0,s0,0
   2bc30:	c70f50ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2bc34:	00040513          	addi	a0,s0,0
   2bc38:	03813083          	ld	ra,56(sp)
   2bc3c:	03013403          	ld	s0,48(sp)
   2bc40:	02813483          	ld	s1,40(sp)
   2bc44:	04010113          	addi	sp,sp,64
   2bc48:	00008067          	jalr	zero,0(ra)

000000000002bc4c <dwarf::at_discr_value(dwarf::die const&)>:
AT_ANY(discr_value); // XXX Signed or unsigned
   2bc4c:	ff010113          	addi	sp,sp,-16
   2bc50:	00113423          	sd	ra,8(sp)
   2bc54:	00813023          	sd	s0,0(sp)
   2bc58:	00050413          	addi	s0,a0,0
   2bc5c:	01600613          	addi	a2,zero,22
   2bc60:	bd9f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bc64:	00040513          	addi	a0,s0,0
   2bc68:	00813083          	ld	ra,8(sp)
   2bc6c:	00013403          	ld	s0,0(sp)
   2bc70:	01010113          	addi	sp,sp,16
   2bc74:	00008067          	jalr	zero,0(ra)

000000000002bc78 <dwarf::at_visibility(dwarf::die const&)>:
AT_ENUM(visibility, DW_VIS);
   2bc78:	fd010113          	addi	sp,sp,-48
   2bc7c:	02113423          	sd	ra,40(sp)
   2bc80:	02813023          	sd	s0,32(sp)
   2bc84:	00050593          	addi	a1,a0,0
   2bc88:	01700613          	addi	a2,zero,23
   2bc8c:	00810413          	addi	s0,sp,8
   2bc90:	00040513          	addi	a0,s0,0
   2bc94:	ba5f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bc98:	00040513          	addi	a0,s0,0
   2bc9c:	f35f20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2bca0:	0005051b          	addiw	a0,a0,0
   2bca4:	02813083          	ld	ra,40(sp)
   2bca8:	02013403          	ld	s0,32(sp)
   2bcac:	03010113          	addi	sp,sp,48
   2bcb0:	00008067          	jalr	zero,0(ra)

000000000002bcb4 <dwarf::at_import(dwarf::die const&)>:
AT_REFERENCE(import);
   2bcb4:	fc010113          	addi	sp,sp,-64
   2bcb8:	02113c23          	sd	ra,56(sp)
   2bcbc:	02813823          	sd	s0,48(sp)
   2bcc0:	02913423          	sd	s1,40(sp)
   2bcc4:	00050413          	addi	s0,a0,0
   2bcc8:	01800613          	addi	a2,zero,24
   2bccc:	00810493          	addi	s1,sp,8
   2bcd0:	00048513          	addi	a0,s1,0
   2bcd4:	b65f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bcd8:	00048593          	addi	a1,s1,0
   2bcdc:	00040513          	addi	a0,s0,0
   2bce0:	bc0f50ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2bce4:	00040513          	addi	a0,s0,0
   2bce8:	03813083          	ld	ra,56(sp)
   2bcec:	03013403          	ld	s0,48(sp)
   2bcf0:	02813483          	ld	s1,40(sp)
   2bcf4:	04010113          	addi	sp,sp,64
   2bcf8:	00008067          	jalr	zero,0(ra)

000000000002bcfc <dwarf::at_common_reference(dwarf::die const&)>:
// XXX string_length
AT_REFERENCE(common_reference);
   2bcfc:	fc010113          	addi	sp,sp,-64
   2bd00:	02113c23          	sd	ra,56(sp)
   2bd04:	02813823          	sd	s0,48(sp)
   2bd08:	02913423          	sd	s1,40(sp)
   2bd0c:	00050413          	addi	s0,a0,0
   2bd10:	01a00613          	addi	a2,zero,26
   2bd14:	00810493          	addi	s1,sp,8
   2bd18:	00048513          	addi	a0,s1,0
   2bd1c:	b1df10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bd20:	00048593          	addi	a1,s1,0
   2bd24:	00040513          	addi	a0,s0,0
   2bd28:	b78f50ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2bd2c:	00040513          	addi	a0,s0,0
   2bd30:	03813083          	ld	ra,56(sp)
   2bd34:	03013403          	ld	s0,48(sp)
   2bd38:	02813483          	ld	s1,40(sp)
   2bd3c:	04010113          	addi	sp,sp,64
   2bd40:	00008067          	jalr	zero,0(ra)

000000000002bd44 <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>:
AT_STRING(comp_dir);
   2bd44:	fc010113          	addi	sp,sp,-64
   2bd48:	02113c23          	sd	ra,56(sp)
   2bd4c:	02813823          	sd	s0,48(sp)
   2bd50:	02913423          	sd	s1,40(sp)
   2bd54:	00050413          	addi	s0,a0,0
   2bd58:	01b00613          	addi	a2,zero,27
   2bd5c:	00810493          	addi	s1,sp,8
   2bd60:	00048513          	addi	a0,s1,0
   2bd64:	ad5f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bd68:	00048593          	addi	a1,s1,0
   2bd6c:	00040513          	addi	a0,s0,0
   2bd70:	ac4f50ef          	jal	ra,21034 <dwarf::value::as_string[abi:cxx11]() const>
   2bd74:	00040513          	addi	a0,s0,0
   2bd78:	03813083          	ld	ra,56(sp)
   2bd7c:	03013403          	ld	s0,48(sp)
   2bd80:	02813483          	ld	s1,40(sp)
   2bd84:	04010113          	addi	sp,sp,64
   2bd88:	00008067          	jalr	zero,0(ra)

000000000002bd8c <dwarf::at_const_value(dwarf::die const&)>:
AT_ANY(const_value);
   2bd8c:	ff010113          	addi	sp,sp,-16
   2bd90:	00113423          	sd	ra,8(sp)
   2bd94:	00813023          	sd	s0,0(sp)
   2bd98:	00050413          	addi	s0,a0,0
   2bd9c:	01c00613          	addi	a2,zero,28
   2bda0:	a99f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bda4:	00040513          	addi	a0,s0,0
   2bda8:	00813083          	ld	ra,8(sp)
   2bdac:	00013403          	ld	s0,0(sp)
   2bdb0:	01010113          	addi	sp,sp,16
   2bdb4:	00008067          	jalr	zero,0(ra)

000000000002bdb8 <dwarf::at_containing_type(dwarf::die const&)>:
AT_REFERENCE(containing_type);
   2bdb8:	fc010113          	addi	sp,sp,-64
   2bdbc:	02113c23          	sd	ra,56(sp)
   2bdc0:	02813823          	sd	s0,48(sp)
   2bdc4:	02913423          	sd	s1,40(sp)
   2bdc8:	00050413          	addi	s0,a0,0
   2bdcc:	01d00613          	addi	a2,zero,29
   2bdd0:	00810493          	addi	s1,sp,8
   2bdd4:	00048513          	addi	a0,s1,0
   2bdd8:	a61f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bddc:	00048593          	addi	a1,s1,0
   2bde0:	00040513          	addi	a0,s0,0
   2bde4:	abcf50ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2bde8:	00040513          	addi	a0,s0,0
   2bdec:	03813083          	ld	ra,56(sp)
   2bdf0:	03013403          	ld	s0,48(sp)
   2bdf4:	02813483          	ld	s1,40(sp)
   2bdf8:	04010113          	addi	sp,sp,64
   2bdfc:	00008067          	jalr	zero,0(ra)

000000000002be00 <dwarf::at_inline(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x2X
//

DW_INL at_inline(const die &d) {
   2be00:	fd010113          	addi	sp,sp,-48
   2be04:	02113423          	sd	ra,40(sp)
   2be08:	02813023          	sd	s0,32(sp)
   2be0c:	00050593          	addi	a1,a0,0
  // XXX Missing attribute is equivalent to DW_INL_not_inlined
  // (DWARF4 section 3.3.8)
  return (DW_INL)d[DW_AT::inline_].as_uconstant();
   2be10:	02000613          	addi	a2,zero,32
   2be14:	00810413          	addi	s0,sp,8
   2be18:	00040513          	addi	a0,s0,0
   2be1c:	a1df10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2be20:	00040513          	addi	a0,s0,0
   2be24:	dadf20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
}
   2be28:	0005051b          	addiw	a0,a0,0
   2be2c:	02813083          	ld	ra,40(sp)
   2be30:	02013403          	ld	s0,32(sp)
   2be34:	03010113          	addi	sp,sp,48
   2be38:	00008067          	jalr	zero,0(ra)

000000000002be3c <dwarf::at_is_optional(dwarf::die const&)>:
AT_FLAG(is_optional);
   2be3c:	fd010113          	addi	sp,sp,-48
   2be40:	02113423          	sd	ra,40(sp)
   2be44:	02813023          	sd	s0,32(sp)
   2be48:	00050593          	addi	a1,a0,0
   2be4c:	02100613          	addi	a2,zero,33
   2be50:	00810413          	addi	s0,sp,8
   2be54:	00040513          	addi	a0,s0,0
   2be58:	9e1f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2be5c:	00040513          	addi	a0,s0,0
   2be60:	d59f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2be64:	02813083          	ld	ra,40(sp)
   2be68:	02013403          	ld	s0,32(sp)
   2be6c:	03010113          	addi	sp,sp,48
   2be70:	00008067          	jalr	zero,0(ra)

000000000002be74 <dwarf::at_producer[abi:cxx11](dwarf::die const&)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
AT_STRING(producer);
   2be74:	fc010113          	addi	sp,sp,-64
   2be78:	02113c23          	sd	ra,56(sp)
   2be7c:	02813823          	sd	s0,48(sp)
   2be80:	02913423          	sd	s1,40(sp)
   2be84:	00050413          	addi	s0,a0,0
   2be88:	02500613          	addi	a2,zero,37
   2be8c:	00810493          	addi	s1,sp,8
   2be90:	00048513          	addi	a0,s1,0
   2be94:	9a5f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2be98:	00048593          	addi	a1,s1,0
   2be9c:	00040513          	addi	a0,s0,0
   2bea0:	994f50ef          	jal	ra,21034 <dwarf::value::as_string[abi:cxx11]() const>
   2bea4:	00040513          	addi	a0,s0,0
   2bea8:	03813083          	ld	ra,56(sp)
   2beac:	03013403          	ld	s0,48(sp)
   2beb0:	02813483          	ld	s1,40(sp)
   2beb4:	04010113          	addi	sp,sp,64
   2beb8:	00008067          	jalr	zero,0(ra)

000000000002bebc <dwarf::at_prototyped(dwarf::die const&)>:
AT_FLAG(prototyped);
   2bebc:	fd010113          	addi	sp,sp,-48
   2bec0:	02113423          	sd	ra,40(sp)
   2bec4:	02813023          	sd	s0,32(sp)
   2bec8:	00050593          	addi	a1,a0,0
   2becc:	02700613          	addi	a2,zero,39
   2bed0:	00810413          	addi	s0,sp,8
   2bed4:	00040513          	addi	a0,s0,0
   2bed8:	961f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bedc:	00040513          	addi	a0,s0,0
   2bee0:	cd9f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2bee4:	02813083          	ld	ra,40(sp)
   2bee8:	02013403          	ld	s0,32(sp)
   2beec:	03010113          	addi	sp,sp,48
   2bef0:	00008067          	jalr	zero,0(ra)

000000000002bef4 <dwarf::at_abstract_origin(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x3X
//

AT_REFERENCE(abstract_origin);
   2bef4:	fc010113          	addi	sp,sp,-64
   2bef8:	02113c23          	sd	ra,56(sp)
   2befc:	02813823          	sd	s0,48(sp)
   2bf00:	02913423          	sd	s1,40(sp)
   2bf04:	00050413          	addi	s0,a0,0
   2bf08:	03100613          	addi	a2,zero,49
   2bf0c:	00810493          	addi	s1,sp,8
   2bf10:	00048513          	addi	a0,s1,0
   2bf14:	925f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bf18:	00048593          	addi	a1,s1,0
   2bf1c:	00040513          	addi	a0,s0,0
   2bf20:	980f50ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2bf24:	00040513          	addi	a0,s0,0
   2bf28:	03813083          	ld	ra,56(sp)
   2bf2c:	03013403          	ld	s0,48(sp)
   2bf30:	02813483          	ld	s1,40(sp)
   2bf34:	04010113          	addi	sp,sp,64
   2bf38:	00008067          	jalr	zero,0(ra)

000000000002bf3c <dwarf::at_accessibility(dwarf::die const&)>:
AT_ENUM(accessibility, DW_ACCESS);
   2bf3c:	fd010113          	addi	sp,sp,-48
   2bf40:	02113423          	sd	ra,40(sp)
   2bf44:	02813023          	sd	s0,32(sp)
   2bf48:	00050593          	addi	a1,a0,0
   2bf4c:	03200613          	addi	a2,zero,50
   2bf50:	00810413          	addi	s0,sp,8
   2bf54:	00040513          	addi	a0,s0,0
   2bf58:	8e1f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bf5c:	00040513          	addi	a0,s0,0
   2bf60:	c71f20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2bf64:	0005051b          	addiw	a0,a0,0
   2bf68:	02813083          	ld	ra,40(sp)
   2bf6c:	02013403          	ld	s0,32(sp)
   2bf70:	03010113          	addi	sp,sp,48
   2bf74:	00008067          	jalr	zero,0(ra)

000000000002bf78 <dwarf::at_artificial(dwarf::die const&)>:
// XXX const address_class
AT_FLAG(artificial);
   2bf78:	fd010113          	addi	sp,sp,-48
   2bf7c:	02113423          	sd	ra,40(sp)
   2bf80:	02813023          	sd	s0,32(sp)
   2bf84:	00050593          	addi	a1,a0,0
   2bf88:	03400613          	addi	a2,zero,52
   2bf8c:	00810413          	addi	s0,sp,8
   2bf90:	00040513          	addi	a0,s0,0
   2bf94:	8a5f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bf98:	00040513          	addi	a0,s0,0
   2bf9c:	c1df30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2bfa0:	02813083          	ld	ra,40(sp)
   2bfa4:	02013403          	ld	s0,32(sp)
   2bfa8:	03010113          	addi	sp,sp,48
   2bfac:	00008067          	jalr	zero,0(ra)

000000000002bfb0 <dwarf::at_calling_convention(dwarf::die const&)>:
// XXX base_types
AT_ENUM(calling_convention, DW_CC);
   2bfb0:	fd010113          	addi	sp,sp,-48
   2bfb4:	02113423          	sd	ra,40(sp)
   2bfb8:	02813023          	sd	s0,32(sp)
   2bfbc:	00050593          	addi	a1,a0,0
   2bfc0:	03600613          	addi	a2,zero,54
   2bfc4:	00810413          	addi	s0,sp,8
   2bfc8:	00040513          	addi	a0,s0,0
   2bfcc:	86df10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2bfd0:	00040513          	addi	a0,s0,0
   2bfd4:	bfdf20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2bfd8:	0005051b          	addiw	a0,a0,0
   2bfdc:	02813083          	ld	ra,40(sp)
   2bfe0:	02013403          	ld	s0,32(sp)
   2bfe4:	03010113          	addi	sp,sp,48
   2bfe8:	00008067          	jalr	zero,0(ra)

000000000002bfec <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)>:
AT_UDYNAMIC(count);
expr_result at_data_member_location(const die &d, expr_context *ctx, taddr base,
                                    taddr pc) {
   2bfec:	f6010113          	addi	sp,sp,-160
   2bff0:	08113c23          	sd	ra,152(sp)
   2bff4:	08813823          	sd	s0,144(sp)
   2bff8:	08913423          	sd	s1,136(sp)
   2bffc:	09213023          	sd	s2,128(sp)
   2c000:	07313c23          	sd	s3,120(sp)
   2c004:	00050413          	addi	s0,a0,0
   2c008:	00060913          	addi	s2,a2,0
   2c00c:	00068493          	addi	s1,a3,0
  value v(d[DW_AT::data_member_location]);
   2c010:	03800613          	addi	a2,zero,56
   2c014:	04010513          	addi	a0,sp,64
   2c018:	821f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2c01c:	04c12783          	lw	a5,76(sp)
  switch (v.get_type()) {
   2c020:	00600713          	addi	a4,zero,6
   2c024:	06e78c63          	beq	a5,a4,2c09c <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xb0>
   2c028:	04f74863          	blt	a4,a5,2c078 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x8c>
   2c02c:	ffd7879b          	addiw	a5,a5,-3
   2c030:	00100713          	addi	a4,zero,1
   2c034:	0af76463          	bltu	a4,a5,2c0dc <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
  case value::type::constant:
  case value::type::uconstant:
    return {expr_result::type::address, base + v.as_uconstant()};
   2c038:	00043023          	sd	zero,0(s0)
   2c03c:	00043423          	sd	zero,8(s0)
   2c040:	00043823          	sd	zero,16(s0)
   2c044:	00043c23          	sd	zero,24(s0)
   2c048:	04010513          	addi	a0,sp,64
   2c04c:	b85f20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2c050:	00a484b3          	add	s1,s1,a0
   2c054:	00943423          	sd	s1,8(s0)
    throw std::runtime_error("not implemented");
  default:
    throw format_error("DW_AT_data_member_location has unexpected type " +
                       to_string(v.get_type()));
  }
}
   2c058:	00040513          	addi	a0,s0,0
   2c05c:	09813083          	ld	ra,152(sp)
   2c060:	09013403          	ld	s0,144(sp)
   2c064:	08813483          	ld	s1,136(sp)
   2c068:	08013903          	ld	s2,128(sp)
   2c06c:	07813983          	ld	s3,120(sp)
   2c070:	0a010113          	addi	sp,sp,160
   2c074:	00008067          	jalr	zero,0(ra)
  switch (v.get_type()) {
   2c078:	00900713          	addi	a4,zero,9
   2c07c:	06e79063          	bne	a5,a4,2c0dc <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
    throw std::runtime_error("not implemented");
   2c080:	01000513          	addi	a0,zero,16
   2c084:	b9cea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2c088:	00050413          	addi	s0,a0,0
   2c08c:	0000c597          	auipc	a1,0xc
   2c090:	afc58593          	addi	a1,a1,-1284 # 37b88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x70>
   2c094:	b5cea0ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   2c098:	02c0006f          	jal	zero,2c0c4 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xd8>
    return v.as_exprloc().evaluate(ctx, base);
   2c09c:	04010593          	addi	a1,sp,64
   2c0a0:	05810993          	addi	s3,sp,88
   2c0a4:	00098513          	addi	a0,s3,0
   2c0a8:	decf30ef          	jal	ra,1f694 <dwarf::value::as_exprloc() const>
   2c0ac:	00048693          	addi	a3,s1,0
   2c0b0:	00090613          	addi	a2,s2,0
   2c0b4:	00098593          	addi	a1,s3,0
   2c0b8:	00040513          	addi	a0,s0,0
   2c0bc:	b94fa0ef          	jal	ra,26450 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>
   2c0c0:	f99ff06f          	jal	zero,2c058 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x6c>
    throw std::runtime_error("not implemented");
   2c0c4:	00016617          	auipc	a2,0x16
   2c0c8:	34463603          	ld	a2,836(a2) # 42408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   2c0cc:	00016597          	auipc	a1,0x16
   2c0d0:	52c5b583          	ld	a1,1324(a1) # 425f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   2c0d4:	00040513          	addi	a0,s0,0
   2c0d8:	de8ea0ef          	jal	ra,166c0 <__cxa_throw@plt>
                       to_string(v.get_type()));
   2c0dc:	01000513          	addi	a0,zero,16
   2c0e0:	b40ea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2c0e4:	00050493          	addi	s1,a0,0
   2c0e8:	04c12583          	lw	a1,76(sp)
   2c0ec:	00010513          	addi	a0,sp,0
   2c0f0:	389020ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2c0f4:	0000c617          	auipc	a2,0xc
   2c0f8:	aa460613          	addi	a2,a2,-1372 # 37b98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   2c0fc:	00000593          	addi	a1,zero,0
   2c100:	00010513          	addi	a0,sp,0
   2c104:	a8cea0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2c108:	00050593          	addi	a1,a0,0
   2c10c:	02010413          	addi	s0,sp,32
   2c110:	00040513          	addi	a0,s0,0
   2c114:	b5cea0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2c118:	00040593          	addi	a1,s0,0
   2c11c:	00048513          	addi	a0,s1,0
   2c120:	c80ea0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2c124:	00016797          	auipc	a5,0x16
   2c128:	4347b783          	ld	a5,1076(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   2c12c:	01078793          	addi	a5,a5,16
   2c130:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2c134:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2c138:	03010793          	addi	a5,sp,48
   2c13c:	00f50463          	beq	a0,a5,2c144 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x158>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c140:	bd0ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2c144:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c148:	01010793          	addi	a5,sp,16
   2c14c:	00f50463          	beq	a0,a5,2c154 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x168>
   2c150:	bc0ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2c154:	00016617          	auipc	a2,0x16
   2c158:	22c63603          	ld	a2,556(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   2c15c:	00016597          	auipc	a1,0x16
   2c160:	1545b583          	ld	a1,340(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2c164:	00048513          	addi	a0,s1,0
   2c168:	d58ea0ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw std::runtime_error("not implemented");
   2c16c:	00050493          	addi	s1,a0,0
   2c170:	00040513          	addi	a0,s0,0
   2c174:	b5cea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2c178:	00048513          	addi	a0,s1,0
   2c17c:	d74ea0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2c180:	00050413          	addi	s0,a0,0
   2c184:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2c188:	03010793          	addi	a5,sp,48
   2c18c:	00f50463          	beq	a0,a5,2c194 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1a8>
   2c190:	b80ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2c194:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2c198:	01010793          	addi	a5,sp,16
   2c19c:	00f50463          	beq	a0,a5,2c1a4 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1b8>
   2c1a0:	b70ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2c1a4:	00048513          	addi	a0,s1,0
   2c1a8:	b28ea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2c1ac:	00040513          	addi	a0,s0,0
   2c1b0:	d40ea0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2c1b4:	00050413          	addi	s0,a0,0
   2c1b8:	fddff06f          	jal	zero,2c194 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1a8>
   2c1bc:	00050413          	addi	s0,a0,0
   2c1c0:	fe5ff06f          	jal	zero,2c1a4 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x1b8>

000000000002c1c4 <dwarf::at_declaration(dwarf::die const&)>:
// XXX decl_column decl_file decl_line
AT_FLAG(declaration);
   2c1c4:	fd010113          	addi	sp,sp,-48
   2c1c8:	02113423          	sd	ra,40(sp)
   2c1cc:	02813023          	sd	s0,32(sp)
   2c1d0:	00050593          	addi	a1,a0,0
   2c1d4:	03c00613          	addi	a2,zero,60
   2c1d8:	00810413          	addi	s0,sp,8
   2c1dc:	00040513          	addi	a0,s0,0
   2c1e0:	e58f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c1e4:	00040513          	addi	a0,s0,0
   2c1e8:	9d1f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c1ec:	02813083          	ld	ra,40(sp)
   2c1f0:	02013403          	ld	s0,32(sp)
   2c1f4:	03010113          	addi	sp,sp,48
   2c1f8:	00008067          	jalr	zero,0(ra)

000000000002c1fc <dwarf::at_encoding(dwarf::die const&)>:
// XXX discr_list
AT_ENUM(encoding, DW_ATE);
   2c1fc:	fd010113          	addi	sp,sp,-48
   2c200:	02113423          	sd	ra,40(sp)
   2c204:	02813023          	sd	s0,32(sp)
   2c208:	00050593          	addi	a1,a0,0
   2c20c:	03e00613          	addi	a2,zero,62
   2c210:	00810413          	addi	s0,sp,8
   2c214:	00040513          	addi	a0,s0,0
   2c218:	e20f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c21c:	00040513          	addi	a0,s0,0
   2c220:	9b1f20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2c224:	0005051b          	addiw	a0,a0,0
   2c228:	02813083          	ld	ra,40(sp)
   2c22c:	02013403          	ld	s0,32(sp)
   2c230:	03010113          	addi	sp,sp,48
   2c234:	00008067          	jalr	zero,0(ra)

000000000002c238 <dwarf::at_external(dwarf::die const&)>:
AT_FLAG(external);
   2c238:	fd010113          	addi	sp,sp,-48
   2c23c:	02113423          	sd	ra,40(sp)
   2c240:	02813023          	sd	s0,32(sp)
   2c244:	00050593          	addi	a1,a0,0
   2c248:	03f00613          	addi	a2,zero,63
   2c24c:	00810413          	addi	s0,sp,8
   2c250:	00040513          	addi	a0,s0,0
   2c254:	de4f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c258:	00040513          	addi	a0,s0,0
   2c25c:	95df30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c260:	02813083          	ld	ra,40(sp)
   2c264:	02013403          	ld	s0,32(sp)
   2c268:	03010113          	addi	sp,sp,48
   2c26c:	00008067          	jalr	zero,0(ra)

000000000002c270 <dwarf::at_friend(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x4X
//

// XXX frame_base
die at_friend(const die &d) { return d[DW_AT::friend_].as_reference(); }
   2c270:	fc010113          	addi	sp,sp,-64
   2c274:	02113c23          	sd	ra,56(sp)
   2c278:	02813823          	sd	s0,48(sp)
   2c27c:	02913423          	sd	s1,40(sp)
   2c280:	00050413          	addi	s0,a0,0
   2c284:	04100613          	addi	a2,zero,65
   2c288:	00810493          	addi	s1,sp,8
   2c28c:	00048513          	addi	a0,s1,0
   2c290:	da8f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c294:	00048593          	addi	a1,s1,0
   2c298:	00040513          	addi	a0,s0,0
   2c29c:	e05f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c2a0:	00040513          	addi	a0,s0,0
   2c2a4:	03813083          	ld	ra,56(sp)
   2c2a8:	03013403          	ld	s0,48(sp)
   2c2ac:	02813483          	ld	s1,40(sp)
   2c2b0:	04010113          	addi	sp,sp,64
   2c2b4:	00008067          	jalr	zero,0(ra)

000000000002c2b8 <dwarf::at_identifier_case(dwarf::die const&)>:
AT_ENUM(identifier_case, DW_ID);
   2c2b8:	fd010113          	addi	sp,sp,-48
   2c2bc:	02113423          	sd	ra,40(sp)
   2c2c0:	02813023          	sd	s0,32(sp)
   2c2c4:	00050593          	addi	a1,a0,0
   2c2c8:	04200613          	addi	a2,zero,66
   2c2cc:	00810413          	addi	s0,sp,8
   2c2d0:	00040513          	addi	a0,s0,0
   2c2d4:	d64f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c2d8:	00040513          	addi	a0,s0,0
   2c2dc:	8f5f20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2c2e0:	0005051b          	addiw	a0,a0,0
   2c2e4:	02813083          	ld	ra,40(sp)
   2c2e8:	02013403          	ld	s0,32(sp)
   2c2ec:	03010113          	addi	sp,sp,48
   2c2f0:	00008067          	jalr	zero,0(ra)

000000000002c2f4 <dwarf::at_namelist_item(dwarf::die const&)>:
// XXX macro_info
AT_REFERENCE(namelist_item);
   2c2f4:	fc010113          	addi	sp,sp,-64
   2c2f8:	02113c23          	sd	ra,56(sp)
   2c2fc:	02813823          	sd	s0,48(sp)
   2c300:	02913423          	sd	s1,40(sp)
   2c304:	00050413          	addi	s0,a0,0
   2c308:	04400613          	addi	a2,zero,68
   2c30c:	00810493          	addi	s1,sp,8
   2c310:	00048513          	addi	a0,s1,0
   2c314:	d24f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c318:	00048593          	addi	a1,s1,0
   2c31c:	00040513          	addi	a0,s0,0
   2c320:	d81f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c324:	00040513          	addi	a0,s0,0
   2c328:	03813083          	ld	ra,56(sp)
   2c32c:	03013403          	ld	s0,48(sp)
   2c330:	02813483          	ld	s1,40(sp)
   2c334:	04010113          	addi	sp,sp,64
   2c338:	00008067          	jalr	zero,0(ra)

000000000002c33c <dwarf::at_priority(dwarf::die const&)>:
AT_REFERENCE(priority); // XXX Computed might be useful
   2c33c:	fc010113          	addi	sp,sp,-64
   2c340:	02113c23          	sd	ra,56(sp)
   2c344:	02813823          	sd	s0,48(sp)
   2c348:	02913423          	sd	s1,40(sp)
   2c34c:	00050413          	addi	s0,a0,0
   2c350:	04500613          	addi	a2,zero,69
   2c354:	00810493          	addi	s1,sp,8
   2c358:	00048513          	addi	a0,s1,0
   2c35c:	cdcf10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c360:	00048593          	addi	a1,s1,0
   2c364:	00040513          	addi	a0,s0,0
   2c368:	d39f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c36c:	00040513          	addi	a0,s0,0
   2c370:	03813083          	ld	ra,56(sp)
   2c374:	03013403          	ld	s0,48(sp)
   2c378:	02813483          	ld	s1,40(sp)
   2c37c:	04010113          	addi	sp,sp,64
   2c380:	00008067          	jalr	zero,0(ra)

000000000002c384 <dwarf::at_specification(dwarf::die const&)>:
// XXX segment
AT_REFERENCE(specification);
   2c384:	fc010113          	addi	sp,sp,-64
   2c388:	02113c23          	sd	ra,56(sp)
   2c38c:	02813823          	sd	s0,48(sp)
   2c390:	02913423          	sd	s1,40(sp)
   2c394:	00050413          	addi	s0,a0,0
   2c398:	04700613          	addi	a2,zero,71
   2c39c:	00810493          	addi	s1,sp,8
   2c3a0:	00048513          	addi	a0,s1,0
   2c3a4:	c94f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c3a8:	00048593          	addi	a1,s1,0
   2c3ac:	00040513          	addi	a0,s0,0
   2c3b0:	cf1f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c3b4:	00040513          	addi	a0,s0,0
   2c3b8:	03813083          	ld	ra,56(sp)
   2c3bc:	03013403          	ld	s0,48(sp)
   2c3c0:	02813483          	ld	s1,40(sp)
   2c3c4:	04010113          	addi	sp,sp,64
   2c3c8:	00008067          	jalr	zero,0(ra)

000000000002c3cc <dwarf::at_type(dwarf::die const&)>:
// XXX static_link
AT_REFERENCE(type);
   2c3cc:	fc010113          	addi	sp,sp,-64
   2c3d0:	02113c23          	sd	ra,56(sp)
   2c3d4:	02813823          	sd	s0,48(sp)
   2c3d8:	02913423          	sd	s1,40(sp)
   2c3dc:	00050413          	addi	s0,a0,0
   2c3e0:	04900613          	addi	a2,zero,73
   2c3e4:	00810493          	addi	s1,sp,8
   2c3e8:	00048513          	addi	a0,s1,0
   2c3ec:	c4cf10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c3f0:	00048593          	addi	a1,s1,0
   2c3f4:	00040513          	addi	a0,s0,0
   2c3f8:	ca9f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c3fc:	00040513          	addi	a0,s0,0
   2c400:	03813083          	ld	ra,56(sp)
   2c404:	03013403          	ld	s0,48(sp)
   2c408:	02813483          	ld	s1,40(sp)
   2c40c:	04010113          	addi	sp,sp,64
   2c410:	00008067          	jalr	zero,0(ra)

000000000002c414 <dwarf::at_variable_parameter(dwarf::die const&)>:
// XXX use_location
AT_FLAG(variable_parameter);
   2c414:	fd010113          	addi	sp,sp,-48
   2c418:	02113423          	sd	ra,40(sp)
   2c41c:	02813023          	sd	s0,32(sp)
   2c420:	00050593          	addi	a1,a0,0
   2c424:	04b00613          	addi	a2,zero,75
   2c428:	00810413          	addi	s0,sp,8
   2c42c:	00040513          	addi	a0,s0,0
   2c430:	c08f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c434:	00040513          	addi	a0,s0,0
   2c438:	f80f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c43c:	02813083          	ld	ra,40(sp)
   2c440:	02013403          	ld	s0,32(sp)
   2c444:	03010113          	addi	sp,sp,48
   2c448:	00008067          	jalr	zero,0(ra)

000000000002c44c <dwarf::at_virtuality(dwarf::die const&)>:
// XXX 7.11 The value DW_VIRTUALITY_none is equivalent to the absence
// of the DW_AT_virtuality attribute.
AT_ENUM(virtuality, DW_VIRTUALITY);
   2c44c:	fd010113          	addi	sp,sp,-48
   2c450:	02113423          	sd	ra,40(sp)
   2c454:	02813023          	sd	s0,32(sp)
   2c458:	00050593          	addi	a1,a0,0
   2c45c:	04c00613          	addi	a2,zero,76
   2c460:	00810413          	addi	s0,sp,8
   2c464:	00040513          	addi	a0,s0,0
   2c468:	bd0f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c46c:	00040513          	addi	a0,s0,0
   2c470:	f60f20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2c474:	0005051b          	addiw	a0,a0,0
   2c478:	02813083          	ld	ra,40(sp)
   2c47c:	02013403          	ld	s0,32(sp)
   2c480:	03010113          	addi	sp,sp,48
   2c484:	00008067          	jalr	zero,0(ra)

000000000002c488 <dwarf::at_entry_pc(dwarf::die const&)>:
// 0x5X
//

// XXX data_location
AT_UDYNAMIC(byte_stride);
AT_ADDRESS(entry_pc);
   2c488:	fd010113          	addi	sp,sp,-48
   2c48c:	02113423          	sd	ra,40(sp)
   2c490:	02813023          	sd	s0,32(sp)
   2c494:	00050593          	addi	a1,a0,0
   2c498:	05200613          	addi	a2,zero,82
   2c49c:	00810413          	addi	s0,sp,8
   2c4a0:	00040513          	addi	a0,s0,0
   2c4a4:	b94f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c4a8:	00040513          	addi	a0,s0,0
   2c4ac:	e9df10ef          	jal	ra,1e348 <dwarf::value::as_address() const>
   2c4b0:	02813083          	ld	ra,40(sp)
   2c4b4:	02013403          	ld	s0,32(sp)
   2c4b8:	03010113          	addi	sp,sp,48
   2c4bc:	00008067          	jalr	zero,0(ra)

000000000002c4c0 <dwarf::at_use_UTF8(dwarf::die const&)>:
AT_FLAG(use_UTF8);
   2c4c0:	fd010113          	addi	sp,sp,-48
   2c4c4:	02113423          	sd	ra,40(sp)
   2c4c8:	02813023          	sd	s0,32(sp)
   2c4cc:	00050593          	addi	a1,a0,0
   2c4d0:	05300613          	addi	a2,zero,83
   2c4d4:	00810413          	addi	s0,sp,8
   2c4d8:	00040513          	addi	a0,s0,0
   2c4dc:	b5cf10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c4e0:	00040513          	addi	a0,s0,0
   2c4e4:	ed4f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c4e8:	02813083          	ld	ra,40(sp)
   2c4ec:	02013403          	ld	s0,32(sp)
   2c4f0:	03010113          	addi	sp,sp,48
   2c4f4:	00008067          	jalr	zero,0(ra)

000000000002c4f8 <dwarf::at_extension(dwarf::die const&)>:
AT_REFERENCE(extension);
   2c4f8:	fc010113          	addi	sp,sp,-64
   2c4fc:	02113c23          	sd	ra,56(sp)
   2c500:	02813823          	sd	s0,48(sp)
   2c504:	02913423          	sd	s1,40(sp)
   2c508:	00050413          	addi	s0,a0,0
   2c50c:	05400613          	addi	a2,zero,84
   2c510:	00810493          	addi	s1,sp,8
   2c514:	00048513          	addi	a0,s1,0
   2c518:	b20f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c51c:	00048593          	addi	a1,s1,0
   2c520:	00040513          	addi	a0,s0,0
   2c524:	b7df40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c528:	00040513          	addi	a0,s0,0
   2c52c:	03813083          	ld	ra,56(sp)
   2c530:	03013403          	ld	s0,48(sp)
   2c534:	02813483          	ld	s1,40(sp)
   2c538:	04010113          	addi	sp,sp,64
   2c53c:	00008067          	jalr	zero,0(ra)

000000000002c540 <dwarf::at_ranges(dwarf::die const&)>:
rangelist at_ranges(const die &d) { return d[DW_AT::ranges].as_rangelist(); }
   2c540:	fc010113          	addi	sp,sp,-64
   2c544:	02113c23          	sd	ra,56(sp)
   2c548:	02813823          	sd	s0,48(sp)
   2c54c:	02913423          	sd	s1,40(sp)
   2c550:	00050413          	addi	s0,a0,0
   2c554:	05500613          	addi	a2,zero,85
   2c558:	00810493          	addi	s1,sp,8
   2c55c:	00048513          	addi	a0,s1,0
   2c560:	ad8f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c564:	00048593          	addi	a1,s1,0
   2c568:	00040513          	addi	a0,s0,0
   2c56c:	efcf40ef          	jal	ra,20c68 <dwarf::value::as_rangelist() const>
   2c570:	00040513          	addi	a0,s0,0
   2c574:	03813083          	ld	ra,56(sp)
   2c578:	03013403          	ld	s0,48(sp)
   2c57c:	02813483          	ld	s1,40(sp)
   2c580:	04010113          	addi	sp,sp,64
   2c584:	00008067          	jalr	zero,0(ra)

000000000002c588 <dwarf::at_description[abi:cxx11](dwarf::die const&)>:
// XXX trampoline
// XXX const call_column, call_file, call_line
AT_STRING(description);
   2c588:	fc010113          	addi	sp,sp,-64
   2c58c:	02113c23          	sd	ra,56(sp)
   2c590:	02813823          	sd	s0,48(sp)
   2c594:	02913423          	sd	s1,40(sp)
   2c598:	00050413          	addi	s0,a0,0
   2c59c:	05a00613          	addi	a2,zero,90
   2c5a0:	00810493          	addi	s1,sp,8
   2c5a4:	00048513          	addi	a0,s1,0
   2c5a8:	a90f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c5ac:	00048593          	addi	a1,s1,0
   2c5b0:	00040513          	addi	a0,s0,0
   2c5b4:	a81f40ef          	jal	ra,21034 <dwarf::value::as_string[abi:cxx11]() const>
   2c5b8:	00040513          	addi	a0,s0,0
   2c5bc:	03813083          	ld	ra,56(sp)
   2c5c0:	03013403          	ld	s0,48(sp)
   2c5c4:	02813483          	ld	s1,40(sp)
   2c5c8:	04010113          	addi	sp,sp,64
   2c5cc:	00008067          	jalr	zero,0(ra)

000000000002c5d0 <dwarf::at_small(dwarf::die const&)>:
// XXX const binary_scale
// XXX const decimal_scale
AT_REFERENCE(small);
   2c5d0:	fc010113          	addi	sp,sp,-64
   2c5d4:	02113c23          	sd	ra,56(sp)
   2c5d8:	02813823          	sd	s0,48(sp)
   2c5dc:	02913423          	sd	s1,40(sp)
   2c5e0:	00050413          	addi	s0,a0,0
   2c5e4:	05d00613          	addi	a2,zero,93
   2c5e8:	00810493          	addi	s1,sp,8
   2c5ec:	00048513          	addi	a0,s1,0
   2c5f0:	a48f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c5f4:	00048593          	addi	a1,s1,0
   2c5f8:	00040513          	addi	a0,s0,0
   2c5fc:	aa5f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c600:	00040513          	addi	a0,s0,0
   2c604:	03813083          	ld	ra,56(sp)
   2c608:	03013403          	ld	s0,48(sp)
   2c60c:	02813483          	ld	s1,40(sp)
   2c610:	04010113          	addi	sp,sp,64
   2c614:	00008067          	jalr	zero,0(ra)

000000000002c618 <dwarf::at_picture_string[abi:cxx11](dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x6X
//

AT_STRING(picture_string);
   2c618:	fc010113          	addi	sp,sp,-64
   2c61c:	02113c23          	sd	ra,56(sp)
   2c620:	02813823          	sd	s0,48(sp)
   2c624:	02913423          	sd	s1,40(sp)
   2c628:	00050413          	addi	s0,a0,0
   2c62c:	06000613          	addi	a2,zero,96
   2c630:	00810493          	addi	s1,sp,8
   2c634:	00048513          	addi	a0,s1,0
   2c638:	a00f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c63c:	00048593          	addi	a1,s1,0
   2c640:	00040513          	addi	a0,s0,0
   2c644:	9f1f40ef          	jal	ra,21034 <dwarf::value::as_string[abi:cxx11]() const>
   2c648:	00040513          	addi	a0,s0,0
   2c64c:	03813083          	ld	ra,56(sp)
   2c650:	03013403          	ld	s0,48(sp)
   2c654:	02813483          	ld	s1,40(sp)
   2c658:	04010113          	addi	sp,sp,64
   2c65c:	00008067          	jalr	zero,0(ra)

000000000002c660 <dwarf::at_mutable(dwarf::die const&)>:
AT_FLAG_(mutable);
   2c660:	fd010113          	addi	sp,sp,-48
   2c664:	02113423          	sd	ra,40(sp)
   2c668:	02813023          	sd	s0,32(sp)
   2c66c:	00050593          	addi	a1,a0,0
   2c670:	06100613          	addi	a2,zero,97
   2c674:	00810413          	addi	s0,sp,8
   2c678:	00040513          	addi	a0,s0,0
   2c67c:	9bcf10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c680:	00040513          	addi	a0,s0,0
   2c684:	d34f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c688:	02813083          	ld	ra,40(sp)
   2c68c:	02013403          	ld	s0,32(sp)
   2c690:	03010113          	addi	sp,sp,48
   2c694:	00008067          	jalr	zero,0(ra)

000000000002c698 <dwarf::at_threads_scaled(dwarf::die const&)>:
AT_FLAG(threads_scaled);
   2c698:	fd010113          	addi	sp,sp,-48
   2c69c:	02113423          	sd	ra,40(sp)
   2c6a0:	02813023          	sd	s0,32(sp)
   2c6a4:	00050593          	addi	a1,a0,0
   2c6a8:	06200613          	addi	a2,zero,98
   2c6ac:	00810413          	addi	s0,sp,8
   2c6b0:	00040513          	addi	a0,s0,0
   2c6b4:	984f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c6b8:	00040513          	addi	a0,s0,0
   2c6bc:	cfcf30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c6c0:	02813083          	ld	ra,40(sp)
   2c6c4:	02013403          	ld	s0,32(sp)
   2c6c8:	03010113          	addi	sp,sp,48
   2c6cc:	00008067          	jalr	zero,0(ra)

000000000002c6d0 <dwarf::at_explicit(dwarf::die const&)>:
AT_FLAG_(explicit);
   2c6d0:	fd010113          	addi	sp,sp,-48
   2c6d4:	02113423          	sd	ra,40(sp)
   2c6d8:	02813023          	sd	s0,32(sp)
   2c6dc:	00050593          	addi	a1,a0,0
   2c6e0:	06300613          	addi	a2,zero,99
   2c6e4:	00810413          	addi	s0,sp,8
   2c6e8:	00040513          	addi	a0,s0,0
   2c6ec:	94cf10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c6f0:	00040513          	addi	a0,s0,0
   2c6f4:	cc4f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c6f8:	02813083          	ld	ra,40(sp)
   2c6fc:	02013403          	ld	s0,32(sp)
   2c700:	03010113          	addi	sp,sp,48
   2c704:	00008067          	jalr	zero,0(ra)

000000000002c708 <dwarf::at_object_pointer(dwarf::die const&)>:
AT_REFERENCE(object_pointer);
   2c708:	fc010113          	addi	sp,sp,-64
   2c70c:	02113c23          	sd	ra,56(sp)
   2c710:	02813823          	sd	s0,48(sp)
   2c714:	02913423          	sd	s1,40(sp)
   2c718:	00050413          	addi	s0,a0,0
   2c71c:	06400613          	addi	a2,zero,100
   2c720:	00810493          	addi	s1,sp,8
   2c724:	00048513          	addi	a0,s1,0
   2c728:	910f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c72c:	00048593          	addi	a1,s1,0
   2c730:	00040513          	addi	a0,s0,0
   2c734:	96df40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c738:	00040513          	addi	a0,s0,0
   2c73c:	03813083          	ld	ra,56(sp)
   2c740:	03013403          	ld	s0,48(sp)
   2c744:	02813483          	ld	s1,40(sp)
   2c748:	04010113          	addi	sp,sp,64
   2c74c:	00008067          	jalr	zero,0(ra)

000000000002c750 <dwarf::at_endianity(dwarf::die const&)>:
AT_ENUM(endianity, DW_END);
   2c750:	fd010113          	addi	sp,sp,-48
   2c754:	02113423          	sd	ra,40(sp)
   2c758:	02813023          	sd	s0,32(sp)
   2c75c:	00050593          	addi	a1,a0,0
   2c760:	06500613          	addi	a2,zero,101
   2c764:	00810413          	addi	s0,sp,8
   2c768:	00040513          	addi	a0,s0,0
   2c76c:	8ccf10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c770:	00040513          	addi	a0,s0,0
   2c774:	c5cf20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2c778:	0005051b          	addiw	a0,a0,0
   2c77c:	02813083          	ld	ra,40(sp)
   2c780:	02013403          	ld	s0,32(sp)
   2c784:	03010113          	addi	sp,sp,48
   2c788:	00008067          	jalr	zero,0(ra)

000000000002c78c <dwarf::at_elemental(dwarf::die const&)>:
AT_FLAG(elemental);
   2c78c:	fd010113          	addi	sp,sp,-48
   2c790:	02113423          	sd	ra,40(sp)
   2c794:	02813023          	sd	s0,32(sp)
   2c798:	00050593          	addi	a1,a0,0
   2c79c:	06600613          	addi	a2,zero,102
   2c7a0:	00810413          	addi	s0,sp,8
   2c7a4:	00040513          	addi	a0,s0,0
   2c7a8:	890f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c7ac:	00040513          	addi	a0,s0,0
   2c7b0:	c08f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c7b4:	02813083          	ld	ra,40(sp)
   2c7b8:	02013403          	ld	s0,32(sp)
   2c7bc:	03010113          	addi	sp,sp,48
   2c7c0:	00008067          	jalr	zero,0(ra)

000000000002c7c4 <dwarf::at_pure(dwarf::die const&)>:
AT_FLAG(pure);
   2c7c4:	fd010113          	addi	sp,sp,-48
   2c7c8:	02113423          	sd	ra,40(sp)
   2c7cc:	02813023          	sd	s0,32(sp)
   2c7d0:	00050593          	addi	a1,a0,0
   2c7d4:	06700613          	addi	a2,zero,103
   2c7d8:	00810413          	addi	s0,sp,8
   2c7dc:	00040513          	addi	a0,s0,0
   2c7e0:	858f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c7e4:	00040513          	addi	a0,s0,0
   2c7e8:	bd0f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c7ec:	02813083          	ld	ra,40(sp)
   2c7f0:	02013403          	ld	s0,32(sp)
   2c7f4:	03010113          	addi	sp,sp,48
   2c7f8:	00008067          	jalr	zero,0(ra)

000000000002c7fc <dwarf::at_recursive(dwarf::die const&)>:
AT_FLAG(recursive);
   2c7fc:	fd010113          	addi	sp,sp,-48
   2c800:	02113423          	sd	ra,40(sp)
   2c804:	02813023          	sd	s0,32(sp)
   2c808:	00050593          	addi	a1,a0,0
   2c80c:	06800613          	addi	a2,zero,104
   2c810:	00810413          	addi	s0,sp,8
   2c814:	00040513          	addi	a0,s0,0
   2c818:	820f10ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c81c:	00040513          	addi	a0,s0,0
   2c820:	b98f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c824:	02813083          	ld	ra,40(sp)
   2c828:	02013403          	ld	s0,32(sp)
   2c82c:	03010113          	addi	sp,sp,48
   2c830:	00008067          	jalr	zero,0(ra)

000000000002c834 <dwarf::at_signature(dwarf::die const&)>:
AT_REFERENCE(signature); // XXX Computed might be useful
   2c834:	fc010113          	addi	sp,sp,-64
   2c838:	02113c23          	sd	ra,56(sp)
   2c83c:	02813823          	sd	s0,48(sp)
   2c840:	02913423          	sd	s1,40(sp)
   2c844:	00050413          	addi	s0,a0,0
   2c848:	06900613          	addi	a2,zero,105
   2c84c:	00810493          	addi	s1,sp,8
   2c850:	00048513          	addi	a0,s1,0
   2c854:	fe5f00ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c858:	00048593          	addi	a1,s1,0
   2c85c:	00040513          	addi	a0,s0,0
   2c860:	841f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c864:	00040513          	addi	a0,s0,0
   2c868:	03813083          	ld	ra,56(sp)
   2c86c:	03013403          	ld	s0,48(sp)
   2c870:	02813483          	ld	s1,40(sp)
   2c874:	04010113          	addi	sp,sp,64
   2c878:	00008067          	jalr	zero,0(ra)

000000000002c87c <dwarf::at_main_subprogram(dwarf::die const&)>:
AT_FLAG(main_subprogram);
   2c87c:	fd010113          	addi	sp,sp,-48
   2c880:	02113423          	sd	ra,40(sp)
   2c884:	02813023          	sd	s0,32(sp)
   2c888:	00050593          	addi	a1,a0,0
   2c88c:	06a00613          	addi	a2,zero,106
   2c890:	00810413          	addi	s0,sp,8
   2c894:	00040513          	addi	a0,s0,0
   2c898:	fa1f00ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c89c:	00040513          	addi	a0,s0,0
   2c8a0:	b18f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c8a4:	02813083          	ld	ra,40(sp)
   2c8a8:	02013403          	ld	s0,32(sp)
   2c8ac:	03010113          	addi	sp,sp,48
   2c8b0:	00008067          	jalr	zero,0(ra)

000000000002c8b4 <dwarf::at_const_expr(dwarf::die const&)>:
// XXX const data_bit_offset
AT_FLAG(const_expr);
   2c8b4:	fd010113          	addi	sp,sp,-48
   2c8b8:	02113423          	sd	ra,40(sp)
   2c8bc:	02813023          	sd	s0,32(sp)
   2c8c0:	00050593          	addi	a1,a0,0
   2c8c4:	06c00613          	addi	a2,zero,108
   2c8c8:	00810413          	addi	s0,sp,8
   2c8cc:	00040513          	addi	a0,s0,0
   2c8d0:	f69f00ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c8d4:	00040513          	addi	a0,s0,0
   2c8d8:	ae0f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c8dc:	02813083          	ld	ra,40(sp)
   2c8e0:	02013403          	ld	s0,32(sp)
   2c8e4:	03010113          	addi	sp,sp,48
   2c8e8:	00008067          	jalr	zero,0(ra)

000000000002c8ec <dwarf::at_enum_class(dwarf::die const&)>:
AT_FLAG(enum_class);
   2c8ec:	fd010113          	addi	sp,sp,-48
   2c8f0:	02113423          	sd	ra,40(sp)
   2c8f4:	02813023          	sd	s0,32(sp)
   2c8f8:	00050593          	addi	a1,a0,0
   2c8fc:	06d00613          	addi	a2,zero,109
   2c900:	00810413          	addi	s0,sp,8
   2c904:	00040513          	addi	a0,s0,0
   2c908:	f31f00ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c90c:	00040513          	addi	a0,s0,0
   2c910:	aa8f30ef          	jal	ra,1fbb8 <dwarf::value::as_flag() const>
   2c914:	02813083          	ld	ra,40(sp)
   2c918:	02013403          	ld	s0,32(sp)
   2c91c:	03010113          	addi	sp,sp,48
   2c920:	00008067          	jalr	zero,0(ra)

000000000002c924 <dwarf::at_linkage_name[abi:cxx11](dwarf::die const&)>:
AT_STRING(linkage_name);
   2c924:	fc010113          	addi	sp,sp,-64
   2c928:	02113c23          	sd	ra,56(sp)
   2c92c:	02813823          	sd	s0,48(sp)
   2c930:	02913423          	sd	s1,40(sp)
   2c934:	00050413          	addi	s0,a0,0
   2c938:	06e00613          	addi	a2,zero,110
   2c93c:	00810493          	addi	s1,sp,8
   2c940:	00048513          	addi	a0,s1,0
   2c944:	ef5f00ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
   2c948:	00048593          	addi	a1,s1,0
   2c94c:	00040513          	addi	a0,s0,0
   2c950:	ee4f40ef          	jal	ra,21034 <dwarf::value::as_string[abi:cxx11]() const>
   2c954:	00040513          	addi	a0,s0,0
   2c958:	03813083          	ld	ra,56(sp)
   2c95c:	03013403          	ld	s0,48(sp)
   2c960:	02813483          	ld	s1,40(sp)
   2c964:	04010113          	addi	sp,sp,64
   2c968:	00008067          	jalr	zero,0(ra)

000000000002c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>:
                             int depth = 0) {
   2c96c:	ed010113          	addi	sp,sp,-304
   2c970:	12113423          	sd	ra,296(sp)
   2c974:	12813023          	sd	s0,288(sp)
   2c978:	10913c23          	sd	s1,280(sp)
   2c97c:	11213823          	sd	s2,272(sp)
   2c980:	11313423          	sd	s3,264(sp)
   2c984:	00050413          	addi	s0,a0,0
  if (depth > 16)
   2c988:	01000793          	addi	a5,zero,16
   2c98c:	04d7cc63          	blt	a5,a3,2c9e4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x78>
   2c990:	00060913          	addi	s2,a2,0
   2c994:	00068493          	addi	s1,a3,0
  value v(d[attr]);
   2c998:	00050613          	addi	a2,a0,0
   2c99c:	0d010513          	addi	a0,sp,208
   2c9a0:	e99f00ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2c9a4:	0dc12783          	lw	a5,220(sp)
  switch (v.get_type()) {
   2c9a8:	00600713          	addi	a4,zero,6
   2c9ac:	12e78a63          	beq	a5,a4,2cae0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x174>
   2c9b0:	0cf75263          	bge	a4,a5,2ca74 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x108>
   2c9b4:	00c00713          	addi	a4,zero,12
   2c9b8:	14e79863          	bne	a5,a4,2cb08 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x19c>
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   2c9bc:	0d010593          	addi	a1,sp,208
   2c9c0:	06010993          	addi	s3,sp,96
   2c9c4:	00098513          	addi	a0,s3,0
   2c9c8:	ed8f40ef          	jal	ra,210a0 <dwarf::value::as_reference() const>
   2c9cc:	0014869b          	addiw	a3,s1,1
   2c9d0:	00090613          	addi	a2,s2,0
   2c9d4:	00098593          	addi	a1,s3,0
   2c9d8:	00040513          	addi	a0,s0,0
   2c9dc:	f91ff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2c9e0:	0cc0006f          	jal	zero,2caac <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x140>
    throw format_error("reference depth exceeded for " + to_string(attr));
   2c9e4:	01000513          	addi	a0,zero,16
   2c9e8:	a39e90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2c9ec:	00050493          	addi	s1,a0,0
   2c9f0:	00040593          	addi	a1,s0,0
   2c9f4:	04010513          	addi	a0,sp,64
   2c9f8:	341040ef          	jal	ra,31538 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2c9fc:	0000b617          	auipc	a2,0xb
   2ca00:	1cc60613          	addi	a2,a2,460 # 37bc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb0>
   2ca04:	00000593          	addi	a1,zero,0
   2ca08:	04010513          	addi	a0,sp,64
   2ca0c:	985e90ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2ca10:	00050593          	addi	a1,a0,0
   2ca14:	06010413          	addi	s0,sp,96
   2ca18:	00040513          	addi	a0,s0,0
   2ca1c:	a55e90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2ca20:	00040593          	addi	a1,s0,0
   2ca24:	00048513          	addi	a0,s1,0
   2ca28:	b79e90ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2ca2c:	00016797          	auipc	a5,0x16
   2ca30:	b2c7b783          	ld	a5,-1236(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   2ca34:	01078793          	addi	a5,a5,16
   2ca38:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2ca3c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2ca40:	07010793          	addi	a5,sp,112
   2ca44:	00f50463          	beq	a0,a5,2ca4c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xe0>
   2ca48:	ac9e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2ca4c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2ca50:	05010793          	addi	a5,sp,80
   2ca54:	00f50463          	beq	a0,a5,2ca5c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xf0>
   2ca58:	ab9e90ef          	jal	ra,16510 <operator delete(void*)@plt>
   2ca5c:	00016617          	auipc	a2,0x16
   2ca60:	92463603          	ld	a2,-1756(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   2ca64:	00016597          	auipc	a1,0x16
   2ca68:	84c5b583          	ld	a1,-1972(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2ca6c:	00048513          	addi	a0,s1,0
   2ca70:	c51e90ef          	jal	ra,166c0 <__cxa_throw@plt>
  switch (v.get_type()) {
   2ca74:	ffd7879b          	addiw	a5,a5,-3
   2ca78:	00100713          	addi	a4,zero,1
   2ca7c:	08f76663          	bltu	a4,a5,2cb08 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x19c>
    return v.as_uconstant();
   2ca80:	0d010513          	addi	a0,sp,208
   2ca84:	94cf20ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2ca88:	00050413          	addi	s0,a0,0
}
   2ca8c:	00040513          	addi	a0,s0,0
   2ca90:	12813083          	ld	ra,296(sp)
   2ca94:	12013403          	ld	s0,288(sp)
   2ca98:	11813483          	ld	s1,280(sp)
   2ca9c:	11013903          	ld	s2,272(sp)
   2caa0:	10813983          	ld	s3,264(sp)
   2caa4:	13010113          	addi	sp,sp,304
   2caa8:	00008067          	jalr	zero,0(ra)
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   2caac:	00050413          	addi	s0,a0,0
    for (T *p = base; p < end; ++p)
   2cab0:	0b013503          	ld	a0,176(sp)
   2cab4:	0b813783          	ld	a5,184(sp)
   2cab8:	00f57a63          	bgeu	a0,a5,2cacc <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x160>
   2cabc:	00050793          	addi	a5,a0,0
   2cac0:	00878793          	addi	a5,a5,8
   2cac4:	0b813703          	ld	a4,184(sp)
   2cac8:	fee7ece3          	bltu	a5,a4,2cac0 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x154>
    if ((char *)base != buf)
   2cacc:	08010793          	addi	a5,sp,128
   2cad0:	faf50ee3          	beq	a0,a5,2ca8c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
      delete[] (char *)base;
   2cad4:	fa050ce3          	beq	a0,zero,2ca8c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
   2cad8:	ae9e90ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   2cadc:	fb1ff06f          	jal	zero,2ca8c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
    return v.as_exprloc().evaluate(ctx).value;
   2cae0:	0d010593          	addi	a1,sp,208
   2cae4:	0e810413          	addi	s0,sp,232
   2cae8:	00040513          	addi	a0,s0,0
   2caec:	ba9f20ef          	jal	ra,1f694 <dwarf::value::as_exprloc() const>
   2caf0:	00090613          	addi	a2,s2,0
   2caf4:	00040593          	addi	a1,s0,0
   2caf8:	06010513          	addi	a0,sp,96
   2cafc:	921f90ef          	jal	ra,2641c <dwarf::expr::evaluate(dwarf::expr_context*) const>
   2cb00:	06813403          	ld	s0,104(sp)
   2cb04:	f89ff06f          	jal	zero,2ca8c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x120>
                       to_string(v.get_type()));
   2cb08:	01000513          	addi	a0,zero,16
   2cb0c:	915e90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2cb10:	00050493          	addi	s1,a0,0
    throw format_error(to_string(attr) + " has unexpected type " +
   2cb14:	00040593          	addi	a1,s0,0
   2cb18:	00010513          	addi	a0,sp,0
   2cb1c:	21d040ef          	jal	ra,31538 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   2cb20:	0000b597          	auipc	a1,0xb
   2cb24:	0c858593          	addi	a1,a1,200 # 37be8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   2cb28:	00010513          	addi	a0,sp,0
   2cb2c:	c75e90ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2cb30:	00050593          	addi	a1,a0,0
   2cb34:	02010513          	addi	a0,sp,32
   2cb38:	939e90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   2cb3c:	0dc12583          	lw	a1,220(sp)
   2cb40:	04010513          	addi	a0,sp,64
   2cb44:	134020ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(attr) + " has unexpected type " +
   2cb48:	04010613          	addi	a2,sp,64
   2cb4c:	02010593          	addi	a1,sp,32
   2cb50:	06010513          	addi	a0,sp,96
   2cb54:	00016317          	auipc	t1,0x16
   2cb58:	86c33303          	ld	t1,-1940(t1) # 423c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17e98>
   2cb5c:	000300e7          	jalr	ra,0(t1)
   2cb60:	06010593          	addi	a1,sp,96
   2cb64:	00048513          	addi	a0,s1,0
   2cb68:	a39e90ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2cb6c:	00016797          	auipc	a5,0x16
   2cb70:	9ec7b783          	ld	a5,-1556(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   2cb74:	01078793          	addi	a5,a5,16
   2cb78:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2cb7c:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2cb80:	07010793          	addi	a5,sp,112
   2cb84:	00f50463          	beq	a0,a5,2cb8c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x220>
   2cb88:	989e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cb8c:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2cb90:	05010793          	addi	a5,sp,80
   2cb94:	00f50463          	beq	a0,a5,2cb9c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x230>
   2cb98:	979e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cb9c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2cba0:	03010793          	addi	a5,sp,48
   2cba4:	00f50463          	beq	a0,a5,2cbac <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x240>
   2cba8:	969e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cbac:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2cbb0:	01010793          	addi	a5,sp,16
   2cbb4:	00f50463          	beq	a0,a5,2cbbc <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x250>
   2cbb8:	959e90ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2cbbc:	00015617          	auipc	a2,0x15
   2cbc0:	7c463603          	ld	a2,1988(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   2cbc4:	00015597          	auipc	a1,0x15
   2cbc8:	6ec5b583          	ld	a1,1772(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2cbcc:	00048513          	addi	a0,s1,0
   2cbd0:	af1e90ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2cbd4:	00050413          	addi	s0,a0,0
   2cbd8:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2cbdc:	07010793          	addi	a5,sp,112
   2cbe0:	00f50463          	beq	a0,a5,2cbe8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x27c>
   2cbe4:	92de90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cbe8:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2cbec:	05010793          	addi	a5,sp,80
   2cbf0:	00f50463          	beq	a0,a5,2cbf8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x28c>
   2cbf4:	91de90ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw format_error("reference depth exceeded for " + to_string(attr));
   2cbf8:	00048513          	addi	a0,s1,0
   2cbfc:	8d5e90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2cc00:	00040513          	addi	a0,s0,0
   2cc04:	aede90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2cc08:	00050413          	addi	s0,a0,0
   2cc0c:	fddff06f          	jal	zero,2cbe8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x27c>
   2cc10:	00050413          	addi	s0,a0,0
   2cc14:	fe5ff06f          	jal	zero,2cbf8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x28c>
    for (T *p = base; p < end; ++p)
   2cc18:	00050413          	addi	s0,a0,0
   2cc1c:	0b013503          	ld	a0,176(sp)
   2cc20:	00050793          	addi	a5,a0,0
   2cc24:	0b813703          	ld	a4,184(sp)
   2cc28:	00e7ee63          	bltu	a5,a4,2cc44 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d8>
    if ((char *)base != buf)
   2cc2c:	08010793          	addi	a5,sp,128
   2cc30:	00f50663          	beq	a0,a5,2cc3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d0>
      delete[] (char *)base;
   2cc34:	00050463          	beq	a0,zero,2cc3c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2d0>
   2cc38:	989e90ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   2cc3c:	00040513          	addi	a0,s0,0
   2cc40:	ab1e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    for (T *p = base; p < end; ++p)
   2cc44:	00878793          	addi	a5,a5,8
   2cc48:	fddff06f          	jal	zero,2cc24 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2b8>
   2cc4c:	00050413          	addi	s0,a0,0
   2cc50:	06013503          	ld	a0,96(sp)
	if (!_M_is_local())
   2cc54:	07010793          	addi	a5,sp,112
   2cc58:	00f50463          	beq	a0,a5,2cc60 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2f4>
   2cc5c:	8b5e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cc60:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   2cc64:	05010793          	addi	a5,sp,80
   2cc68:	00f50463          	beq	a0,a5,2cc70 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x304>
   2cc6c:	8a5e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cc70:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   2cc74:	03010793          	addi	a5,sp,48
   2cc78:	00f50463          	beq	a0,a5,2cc80 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x314>
   2cc7c:	895e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cc80:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2cc84:	01010793          	addi	a5,sp,16
   2cc88:	00f50463          	beq	a0,a5,2cc90 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x324>
   2cc8c:	885e90ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2cc90:	00048513          	addi	a0,s1,0
   2cc94:	83de90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2cc98:	00040513          	addi	a0,s0,0
   2cc9c:	a55e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2cca0:	00050413          	addi	s0,a0,0
   2cca4:	fbdff06f          	jal	zero,2cc60 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x2f4>
   2cca8:	00050413          	addi	s0,a0,0
   2ccac:	fc5ff06f          	jal	zero,2cc70 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x304>
   2ccb0:	00050413          	addi	s0,a0,0
   2ccb4:	fcdff06f          	jal	zero,2cc80 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x314>
   2ccb8:	00050413          	addi	s0,a0,0
   2ccbc:	fd5ff06f          	jal	zero,2cc90 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x324>

000000000002ccc0 <dwarf::at_byte_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_size);
   2ccc0:	ff010113          	addi	sp,sp,-16
   2ccc4:	00113423          	sd	ra,8(sp)
   2ccc8:	00058613          	addi	a2,a1,0
   2cccc:	00000693          	addi	a3,zero,0
   2ccd0:	00050593          	addi	a1,a0,0
   2ccd4:	00b00513          	addi	a0,zero,11
   2ccd8:	c95ff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2ccdc:	00813083          	ld	ra,8(sp)
   2cce0:	01010113          	addi	sp,sp,16
   2cce4:	00008067          	jalr	zero,0(ra)

000000000002cce8 <dwarf::at_bit_offset(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_offset);
   2cce8:	ff010113          	addi	sp,sp,-16
   2ccec:	00113423          	sd	ra,8(sp)
   2ccf0:	00058613          	addi	a2,a1,0
   2ccf4:	00000693          	addi	a3,zero,0
   2ccf8:	00050593          	addi	a1,a0,0
   2ccfc:	00c00513          	addi	a0,zero,12
   2cd00:	c6dff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cd04:	00813083          	ld	ra,8(sp)
   2cd08:	01010113          	addi	sp,sp,16
   2cd0c:	00008067          	jalr	zero,0(ra)

000000000002cd10 <dwarf::at_bit_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_size);
   2cd10:	ff010113          	addi	sp,sp,-16
   2cd14:	00113423          	sd	ra,8(sp)
   2cd18:	00058613          	addi	a2,a1,0
   2cd1c:	00000693          	addi	a3,zero,0
   2cd20:	00050593          	addi	a1,a0,0
   2cd24:	00d00513          	addi	a0,zero,13
   2cd28:	c45ff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cd2c:	00813083          	ld	ra,8(sp)
   2cd30:	01010113          	addi	sp,sp,16
   2cd34:	00008067          	jalr	zero,0(ra)

000000000002cd38 <dwarf::at_lower_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
   2cd38:	ff010113          	addi	sp,sp,-16
   2cd3c:	00113423          	sd	ra,8(sp)
   2cd40:	00058613          	addi	a2,a1,0
   2cd44:	00000693          	addi	a3,zero,0
   2cd48:	00050593          	addi	a1,a0,0
   2cd4c:	02200513          	addi	a0,zero,34
   2cd50:	c1dff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cd54:	00813083          	ld	ra,8(sp)
   2cd58:	01010113          	addi	sp,sp,16
   2cd5c:	00008067          	jalr	zero,0(ra)

000000000002cd60 <dwarf::at_bit_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_stride);
   2cd60:	ff010113          	addi	sp,sp,-16
   2cd64:	00113423          	sd	ra,8(sp)
   2cd68:	00058613          	addi	a2,a1,0
   2cd6c:	00000693          	addi	a3,zero,0
   2cd70:	00050593          	addi	a1,a0,0
   2cd74:	02e00513          	addi	a0,zero,46
   2cd78:	bf5ff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cd7c:	00813083          	ld	ra,8(sp)
   2cd80:	01010113          	addi	sp,sp,16
   2cd84:	00008067          	jalr	zero,0(ra)

000000000002cd88 <dwarf::at_upper_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(upper_bound);
   2cd88:	ff010113          	addi	sp,sp,-16
   2cd8c:	00113423          	sd	ra,8(sp)
   2cd90:	00058613          	addi	a2,a1,0
   2cd94:	00000693          	addi	a3,zero,0
   2cd98:	00050593          	addi	a1,a0,0
   2cd9c:	02f00513          	addi	a0,zero,47
   2cda0:	bcdff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cda4:	00813083          	ld	ra,8(sp)
   2cda8:	01010113          	addi	sp,sp,16
   2cdac:	00008067          	jalr	zero,0(ra)

000000000002cdb0 <dwarf::at_count(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(count);
   2cdb0:	ff010113          	addi	sp,sp,-16
   2cdb4:	00113423          	sd	ra,8(sp)
   2cdb8:	00058613          	addi	a2,a1,0
   2cdbc:	00000693          	addi	a3,zero,0
   2cdc0:	00050593          	addi	a1,a0,0
   2cdc4:	03700513          	addi	a0,zero,55
   2cdc8:	ba5ff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cdcc:	00813083          	ld	ra,8(sp)
   2cdd0:	01010113          	addi	sp,sp,16
   2cdd4:	00008067          	jalr	zero,0(ra)

000000000002cdd8 <dwarf::at_allocated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(allocated);
   2cdd8:	ff010113          	addi	sp,sp,-16
   2cddc:	00113423          	sd	ra,8(sp)
   2cde0:	00058613          	addi	a2,a1,0
   2cde4:	00000693          	addi	a3,zero,0
   2cde8:	00050593          	addi	a1,a0,0
   2cdec:	04e00513          	addi	a0,zero,78
   2cdf0:	b7dff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2cdf4:	00813083          	ld	ra,8(sp)
   2cdf8:	01010113          	addi	sp,sp,16
   2cdfc:	00008067          	jalr	zero,0(ra)

000000000002ce00 <dwarf::at_associated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(associated);
   2ce00:	ff010113          	addi	sp,sp,-16
   2ce04:	00113423          	sd	ra,8(sp)
   2ce08:	00058613          	addi	a2,a1,0
   2ce0c:	00000693          	addi	a3,zero,0
   2ce10:	00050593          	addi	a1,a0,0
   2ce14:	04f00513          	addi	a0,zero,79
   2ce18:	b55ff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2ce1c:	00813083          	ld	ra,8(sp)
   2ce20:	01010113          	addi	sp,sp,16
   2ce24:	00008067          	jalr	zero,0(ra)

000000000002ce28 <dwarf::at_byte_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_stride);
   2ce28:	ff010113          	addi	sp,sp,-16
   2ce2c:	00113423          	sd	ra,8(sp)
   2ce30:	00058613          	addi	a2,a1,0
   2ce34:	00000693          	addi	a3,zero,0
   2ce38:	00050593          	addi	a1,a0,0
   2ce3c:	05100513          	addi	a0,zero,81
   2ce40:	b2dff0ef          	jal	ra,2c96c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   2ce44:	00813083          	ld	ra,8(sp)
   2ce48:	01010113          	addi	sp,sp,16
   2ce4c:	00008067          	jalr	zero,0(ra)

000000000002ce50 <dwarf::at_high_pc(dwarf::die const&)>:
taddr at_high_pc(const die &d) {
   2ce50:	f4010113          	addi	sp,sp,-192
   2ce54:	0a113c23          	sd	ra,184(sp)
   2ce58:	0a813823          	sd	s0,176(sp)
   2ce5c:	0a913423          	sd	s1,168(sp)
   2ce60:	00050413          	addi	s0,a0,0
  value v(d[DW_AT::high_pc]);
   2ce64:	01200613          	addi	a2,zero,18
   2ce68:	00050593          	addi	a1,a0,0
   2ce6c:	08810513          	addi	a0,sp,136
   2ce70:	9c9f00ef          	jal	ra,1d838 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   2ce74:	09412783          	lw	a5,148(sp)
  switch (v.get_type()) {
   2ce78:	00100713          	addi	a4,zero,1
   2ce7c:	02e78c63          	beq	a5,a4,2ceb4 <dwarf::at_high_pc(dwarf::die const&)+0x64>
   2ce80:	ffd7879b          	addiw	a5,a5,-3
   2ce84:	02f76e63          	bltu	a4,a5,2cec0 <dwarf::at_high_pc(dwarf::die const&)+0x70>
    return at_low_pc(d) + v.as_uconstant();
   2ce88:	00040513          	addi	a0,s0,0
   2ce8c:	d05fe0ef          	jal	ra,2bb90 <dwarf::at_low_pc(dwarf::die const&)>
   2ce90:	00050413          	addi	s0,a0,0
   2ce94:	08810513          	addi	a0,sp,136
   2ce98:	d39f10ef          	jal	ra,1ebd0 <dwarf::value::as_uconstant() const>
   2ce9c:	00a40533          	add	a0,s0,a0
}
   2cea0:	0b813083          	ld	ra,184(sp)
   2cea4:	0b013403          	ld	s0,176(sp)
   2cea8:	0a813483          	ld	s1,168(sp)
   2ceac:	0c010113          	addi	sp,sp,192
   2ceb0:	00008067          	jalr	zero,0(ra)
    return v.as_address();
   2ceb4:	08810513          	addi	a0,sp,136
   2ceb8:	c90f10ef          	jal	ra,1e348 <dwarf::value::as_address() const>
   2cebc:	fe5ff06f          	jal	zero,2cea0 <dwarf::at_high_pc(dwarf::die const&)+0x50>
                       to_string(v.get_type()));
   2cec0:	01000513          	addi	a0,zero,16
   2cec4:	d5ce90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2cec8:	00050493          	addi	s1,a0,0
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   2cecc:	01200593          	addi	a1,zero,18
   2ced0:	00810513          	addi	a0,sp,8
   2ced4:	664040ef          	jal	ra,31538 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   2ced8:	0000b597          	auipc	a1,0xb
   2cedc:	d1058593          	addi	a1,a1,-752 # 37be8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   2cee0:	00810513          	addi	a0,sp,8
   2cee4:	8bde90ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2cee8:	00050593          	addi	a1,a0,0
   2ceec:	02810513          	addi	a0,sp,40
   2cef0:	d80e90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   2cef4:	09412583          	lw	a1,148(sp)
   2cef8:	04810513          	addi	a0,sp,72
   2cefc:	57d010ef          	jal	ra,2ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   2cf00:	04810613          	addi	a2,sp,72
   2cf04:	02810593          	addi	a1,sp,40
   2cf08:	06810513          	addi	a0,sp,104
   2cf0c:	00015317          	auipc	t1,0x15
   2cf10:	4b433303          	ld	t1,1204(t1) # 423c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x17e98>
   2cf14:	000300e7          	jalr	ra,0(t1)
      : std::runtime_error(what_arg) {}
   2cf18:	06810593          	addi	a1,sp,104
   2cf1c:	00048513          	addi	a0,s1,0
   2cf20:	e80e90ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2cf24:	00015797          	auipc	a5,0x15
   2cf28:	6347b783          	ld	a5,1588(a5) # 42558 <vtable for dwarf::format_error@@Base+0xc28>
   2cf2c:	01078793          	addi	a5,a5,16
   2cf30:	00f4b023          	sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2cf34:	06813503          	ld	a0,104(sp)
	if (!_M_is_local())
   2cf38:	07810793          	addi	a5,sp,120
   2cf3c:	00f50463          	beq	a0,a5,2cf44 <dwarf::at_high_pc(dwarf::die const&)+0xf4>
   2cf40:	dd0e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cf44:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2cf48:	05810793          	addi	a5,sp,88
   2cf4c:	00f50463          	beq	a0,a5,2cf54 <dwarf::at_high_pc(dwarf::die const&)+0x104>
   2cf50:	dc0e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cf54:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2cf58:	03810793          	addi	a5,sp,56
   2cf5c:	00f50463          	beq	a0,a5,2cf64 <dwarf::at_high_pc(dwarf::die const&)+0x114>
   2cf60:	db0e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cf64:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2cf68:	01810793          	addi	a5,sp,24
   2cf6c:	00f50463          	beq	a0,a5,2cf74 <dwarf::at_high_pc(dwarf::die const&)+0x124>
   2cf70:	da0e90ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   2cf74:	00015617          	auipc	a2,0x15
   2cf78:	40c63603          	ld	a2,1036(a2) # 42380 <dwarf::format_error::~format_error()@@Base+0x27a0c>
   2cf7c:	00015597          	auipc	a1,0x15
   2cf80:	3345b583          	ld	a1,820(a1) # 422b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2cf84:	00048513          	addi	a0,s1,0
   2cf88:	f38e90ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2cf8c:	00050413          	addi	s0,a0,0
   2cf90:	06813503          	ld	a0,104(sp)
	if (!_M_is_local())
   2cf94:	07810793          	addi	a5,sp,120
   2cf98:	00f50463          	beq	a0,a5,2cfa0 <dwarf::at_high_pc(dwarf::die const&)+0x150>
   2cf9c:	d74e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cfa0:	04813503          	ld	a0,72(sp)
	if (!_M_is_local())
   2cfa4:	05810793          	addi	a5,sp,88
   2cfa8:	00f50463          	beq	a0,a5,2cfb0 <dwarf::at_high_pc(dwarf::die const&)+0x160>
   2cfac:	d64e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cfb0:	02813503          	ld	a0,40(sp)
	if (!_M_is_local())
   2cfb4:	03810793          	addi	a5,sp,56
   2cfb8:	00f50463          	beq	a0,a5,2cfc0 <dwarf::at_high_pc(dwarf::die const&)+0x170>
   2cfbc:	d54e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cfc0:	00813503          	ld	a0,8(sp)
	if (!_M_is_local())
   2cfc4:	01810793          	addi	a5,sp,24
   2cfc8:	00f50463          	beq	a0,a5,2cfd0 <dwarf::at_high_pc(dwarf::die const&)+0x180>
   2cfcc:	d44e90ef          	jal	ra,16510 <operator delete(void*)@plt>
   2cfd0:	00048513          	addi	a0,s1,0
   2cfd4:	cfce90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2cfd8:	00040513          	addi	a0,s0,0
   2cfdc:	f14e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2cfe0:	00050413          	addi	s0,a0,0
   2cfe4:	fbdff06f          	jal	zero,2cfa0 <dwarf::at_high_pc(dwarf::die const&)+0x150>
   2cfe8:	00050413          	addi	s0,a0,0
   2cfec:	fc5ff06f          	jal	zero,2cfb0 <dwarf::at_high_pc(dwarf::die const&)+0x160>
   2cff0:	00050413          	addi	s0,a0,0
   2cff4:	fcdff06f          	jal	zero,2cfc0 <dwarf::at_high_pc(dwarf::die const&)+0x170>
   2cff8:	00050413          	addi	s0,a0,0
   2cffc:	fd5ff06f          	jal	zero,2cfd0 <dwarf::at_high_pc(dwarf::die const&)+0x180>

000000000002d000 <dwarf::die_pc_range(dwarf::die const&)>:

rangelist die_pc_range(const die &d) {
   2d000:	fc010113          	addi	sp,sp,-64
   2d004:	02113c23          	sd	ra,56(sp)
   2d008:	02813823          	sd	s0,48(sp)
   2d00c:	02913423          	sd	s1,40(sp)
   2d010:	03213023          	sd	s2,32(sp)
   2d014:	00050493          	addi	s1,a0,0
   2d018:	00058413          	addi	s0,a1,0
  // DWARF4 section 2.17
  if (d.has(DW_AT::ranges))
   2d01c:	05500593          	addi	a1,zero,85
   2d020:	00040513          	addi	a0,s0,0
   2d024:	fd0f00ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   2d028:	02050663          	beq	a0,zero,2d054 <dwarf::die_pc_range(dwarf::die const&)+0x54>
    return at_ranges(d);
   2d02c:	00040593          	addi	a1,s0,0
   2d030:	00048513          	addi	a0,s1,0
   2d034:	d0cff0ef          	jal	ra,2c540 <dwarf::at_ranges(dwarf::die const&)>
  taddr low = at_low_pc(d);
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
  return rangelist({{low, high}});
}
   2d038:	00048513          	addi	a0,s1,0
   2d03c:	03813083          	ld	ra,56(sp)
   2d040:	03013403          	ld	s0,48(sp)
   2d044:	02813483          	ld	s1,40(sp)
   2d048:	02013903          	ld	s2,32(sp)
   2d04c:	04010113          	addi	sp,sp,64
   2d050:	00008067          	jalr	zero,0(ra)
  taddr low = at_low_pc(d);
   2d054:	00040513          	addi	a0,s0,0
   2d058:	b39fe0ef          	jal	ra,2bb90 <dwarf::at_low_pc(dwarf::die const&)>
   2d05c:	00050913          	addi	s2,a0,0
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   2d060:	01200593          	addi	a1,zero,18
   2d064:	00040513          	addi	a0,s0,0
   2d068:	f8cf00ef          	jal	ra,1d7f4 <dwarf::die::has(dwarf::DW_AT) const>
   2d06c:	00190793          	addi	a5,s2,1
   2d070:	02051663          	bne	a0,zero,2d09c <dwarf::die_pc_range(dwarf::die const&)+0x9c>
   2d074:	01213823          	sd	s2,16(sp)
   2d078:	00f13c23          	sd	a5,24(sp)
  return rangelist({{low, high}});
   2d07c:	01010793          	addi	a5,sp,16
   2d080:	00f13023          	sd	a5,0(sp)
   2d084:	00100793          	addi	a5,zero,1
   2d088:	00f13423          	sd	a5,8(sp)
   2d08c:	00010593          	addi	a1,sp,0
   2d090:	00048513          	addi	a0,s1,0
   2d094:	ed5f90ef          	jal	ra,26f68 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>
   2d098:	fa1ff06f          	jal	zero,2d038 <dwarf::die_pc_range(dwarf::die const&)+0x38>
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   2d09c:	00040513          	addi	a0,s0,0
   2d0a0:	db1ff0ef          	jal	ra,2ce50 <dwarf::at_high_pc(dwarf::die const&)>
   2d0a4:	00050793          	addi	a5,a0,0
   2d0a8:	fcdff06f          	jal	zero,2d074 <dwarf::die_pc_range(dwarf::die const&)+0x74>

000000000002d0ac <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)>:
    {".debug_ranges", section_type::ranges},
    {".debug_str", section_type::str},
    {".debug_types", section_type::types},
};

bool elf::section_name_to_type(const char *name, section_type *out) {
   2d0ac:	fd010113          	addi	sp,sp,-48
   2d0b0:	02113423          	sd	ra,40(sp)
   2d0b4:	02813023          	sd	s0,32(sp)
   2d0b8:	00913c23          	sd	s1,24(sp)
   2d0bc:	01213823          	sd	s2,16(sp)
   2d0c0:	01313423          	sd	s3,8(sp)
   2d0c4:	00050493          	addi	s1,a0,0
   2d0c8:	00058993          	addi	s3,a1,0
  for (auto &sec : sections) {
   2d0cc:	00014417          	auipc	s0,0x14
   2d0d0:	62440413          	addi	s0,s0,1572 # 416f0 <dwarf::sections>
   2d0d4:	00014917          	auipc	s2,0x14
   2d0d8:	6dc90913          	addi	s2,s2,1756 # 417b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (strcmp(sec.name, name) == 0) {
   2d0dc:	00048593          	addi	a1,s1,0
   2d0e0:	00043503          	ld	a0,0(s0)
   2d0e4:	a7ce90ef          	jal	ra,16360 <strcmp@plt>
   2d0e8:	02050663          	beq	a0,zero,2d114 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x68>
  for (auto &sec : sections) {
   2d0ec:	01040413          	addi	s0,s0,16
   2d0f0:	ff2416e3          	bne	s0,s2,2d0dc <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x30>
      *out = sec.type;
      return true;
    }
  }
  return false;
   2d0f4:	00000513          	addi	a0,zero,0
}
   2d0f8:	02813083          	ld	ra,40(sp)
   2d0fc:	02013403          	ld	s0,32(sp)
   2d100:	01813483          	ld	s1,24(sp)
   2d104:	01013903          	ld	s2,16(sp)
   2d108:	00813983          	ld	s3,8(sp)
   2d10c:	03010113          	addi	sp,sp,48
   2d110:	00008067          	jalr	zero,0(ra)
      *out = sec.type;
   2d114:	00842783          	lw	a5,8(s0)
   2d118:	00f9a023          	sw	a5,0(s3)
      return true;
   2d11c:	00100513          	addi	a0,zero,1
   2d120:	fd9ff06f          	jal	zero,2d0f8 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x4c>

000000000002d124 <dwarf::elf::section_type_to_name(dwarf::section_type)>:

const char *elf::section_type_to_name(section_type type) {
  for (auto &sec : sections) {
   2d124:	00014797          	auipc	a5,0x14
   2d128:	5cc78793          	addi	a5,a5,1484 # 416f0 <dwarf::sections>
   2d12c:	00014697          	auipc	a3,0x14
   2d130:	68468693          	addi	a3,a3,1668 # 417b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (sec.type == type)
   2d134:	0087a703          	lw	a4,8(a5)
   2d138:	00a70a63          	beq	a4,a0,2d14c <dwarf::elf::section_type_to_name(dwarf::section_type)+0x28>
  for (auto &sec : sections) {
   2d13c:	01078793          	addi	a5,a5,16
   2d140:	fed79ae3          	bne	a5,a3,2d134 <dwarf::elf::section_type_to_name(dwarf::section_type)+0x10>
      return sec.name;
  }
  return nullptr;
   2d144:	00000513          	addi	a0,zero,0
}
   2d148:	00008067          	jalr	zero,0(ra)
      return sec.name;
   2d14c:	0007b503          	ld	a0,0(a5)
   2d150:	00008067          	jalr	zero,0(ra)

000000000002d154 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)>:
        return "(DW_ORD)0x" + to_hex((int)v);
}

std::string
to_string(DW_DSC v)
{
   2d154:	fc010113          	addi	sp,sp,-64
   2d158:	02113c23          	sd	ra,56(sp)
   2d15c:	02813823          	sd	s0,48(sp)
   2d160:	02913423          	sd	s1,40(sp)
   2d164:	03213023          	sd	s2,32(sp)
   2d168:	00050413          	addi	s0,a0,0
        switch (v) {
   2d16c:	04058063          	beq	a1,zero,2d1ac <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x58>
   2d170:	00100793          	addi	a5,zero,1
   2d174:	06f58e63          	beq	a1,a5,2d1f0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x9c>
        case DW_DSC::label: return "DW_DSC_label";
        case DW_DSC::range: return "DW_DSC_range";
        }
        return "(DW_DSC)0x" + to_hex((int)v);
   2d178:	00010493          	addi	s1,sp,0
   2d17c:	00048513          	addi	a0,s1,0
   2d180:	00015317          	auipc	t1,0x15
   2d184:	29833303          	ld	t1,664(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2d188:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d18c:	00a00713          	addi	a4,zero,10
   2d190:	0000b697          	auipc	a3,0xb
   2d194:	b5068693          	addi	a3,a3,-1200 # 37ce0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c8>
   2d198:	00000613          	addi	a2,zero,0
   2d19c:	00000593          	addi	a1,zero,0
   2d1a0:	00048513          	addi	a0,s1,0
   2d1a4:	cbce90ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d1a8:	0740006f          	jal	zero,2d21c <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d1ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d1b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d1b4:	00000693          	addi	a3,zero,0
   2d1b8:	0000b617          	auipc	a2,0xb
   2d1bc:	b1460613          	addi	a2,a2,-1260 # 37ccc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b4>
   2d1c0:	0000b597          	auipc	a1,0xb
   2d1c4:	b0058593          	addi	a1,a1,-1280 # 37cc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a8>
   2d1c8:	00015317          	auipc	t1,0x15
   2d1cc:	14033303          	ld	t1,320(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d1d0:	000300e7          	jalr	ra,0(t1)
}
   2d1d4:	00040513          	addi	a0,s0,0
   2d1d8:	03813083          	ld	ra,56(sp)
   2d1dc:	03013403          	ld	s0,48(sp)
   2d1e0:	02813483          	ld	s1,40(sp)
   2d1e4:	02013903          	ld	s2,32(sp)
   2d1e8:	04010113          	addi	sp,sp,64
   2d1ec:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d1f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d1f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d1f8:	00000693          	addi	a3,zero,0
   2d1fc:	0000b617          	auipc	a2,0xb
   2d200:	ae060613          	addi	a2,a2,-1312 # 37cdc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c4>
   2d204:	0000b597          	auipc	a1,0xb
   2d208:	acc58593          	addi	a1,a1,-1332 # 37cd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b8>
   2d20c:	00015317          	auipc	t1,0x15
   2d210:	0fc33303          	ld	t1,252(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d214:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d218:	fbdff06f          	jal	zero,2d1d4 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d21c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d220:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d224:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d228:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d22c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d230:	03278c63          	beq	a5,s2,2d268 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x114>
      { _M_dataplus._M_p = __p; }
   2d234:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d238:	0104b783          	ld	a5,16(s1)
   2d23c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d240:	0084b783          	ld	a5,8(s1)
   2d244:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d248:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d24c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d250:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d254:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d258:	01010793          	addi	a5,sp,16
   2d25c:	f6f50ce3          	beq	a0,a5,2d1d4 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d260:	ab0e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d264:	f71ff06f          	jal	zero,2d1d4 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d268:	0084b603          	ld	a2,8(s1)
   2d26c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d270:	fc0608e3          	beq	a2,zero,2d240 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d274:	00090593          	addi	a1,s2,0
   2d278:	b38e90ef          	jal	ra,165b0 <memcpy@plt>
   2d27c:	fc5ff06f          	jal	zero,2d240 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xec>
      { return _M_dataplus._M_p; }
   2d280:	00050413          	addi	s0,a0,0
   2d284:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d288:	01010793          	addi	a5,sp,16
   2d28c:	00f50463          	beq	a0,a5,2d294 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x140>
   2d290:	a80e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d294:	00040513          	addi	a0,s0,0
   2d298:	c58e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002d29c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)>:
{
   2d29c:	fc010113          	addi	sp,sp,-64
   2d2a0:	02113c23          	sd	ra,56(sp)
   2d2a4:	02813823          	sd	s0,48(sp)
   2d2a8:	02913423          	sd	s1,40(sp)
   2d2ac:	03213023          	sd	s2,32(sp)
   2d2b0:	00050413          	addi	s0,a0,0
        switch (v) {
   2d2b4:	04058063          	beq	a1,zero,2d2f4 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x58>
   2d2b8:	00100793          	addi	a5,zero,1
   2d2bc:	06f58e63          	beq	a1,a5,2d338 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x9c>
        return "(DW_ORD)0x" + to_hex((int)v);
   2d2c0:	00010493          	addi	s1,sp,0
   2d2c4:	00048513          	addi	a0,s1,0
   2d2c8:	00015317          	auipc	t1,0x15
   2d2cc:	15033303          	ld	t1,336(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2d2d0:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d2d4:	00a00713          	addi	a4,zero,10
   2d2d8:	0000b697          	auipc	a3,0xb
   2d2dc:	a4868693          	addi	a3,a3,-1464 # 37d20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x208>
   2d2e0:	00000613          	addi	a2,zero,0
   2d2e4:	00000593          	addi	a1,zero,0
   2d2e8:	00048513          	addi	a0,s1,0
   2d2ec:	b74e90ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d2f0:	0740006f          	jal	zero,2d364 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d2f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d2f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d2fc:	00000693          	addi	a3,zero,0
   2d300:	0000b617          	auipc	a2,0xb
   2d304:	a0060613          	addi	a2,a2,-1536 # 37d00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e8>
   2d308:	0000b597          	auipc	a1,0xb
   2d30c:	9e858593          	addi	a1,a1,-1560 # 37cf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d8>
   2d310:	00015317          	auipc	t1,0x15
   2d314:	ff833303          	ld	t1,-8(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d318:	000300e7          	jalr	ra,0(t1)
}
   2d31c:	00040513          	addi	a0,s0,0
   2d320:	03813083          	ld	ra,56(sp)
   2d324:	03013403          	ld	s0,48(sp)
   2d328:	02813483          	ld	s1,40(sp)
   2d32c:	02013903          	ld	s2,32(sp)
   2d330:	04010113          	addi	sp,sp,64
   2d334:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d338:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d33c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d340:	00000693          	addi	a3,zero,0
   2d344:	0000b617          	auipc	a2,0xb
   2d348:	9d460613          	addi	a2,a2,-1580 # 37d18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x200>
   2d34c:	0000b597          	auipc	a1,0xb
   2d350:	9bc58593          	addi	a1,a1,-1604 # 37d08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0>
   2d354:	00015317          	auipc	t1,0x15
   2d358:	fb433303          	ld	t1,-76(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d35c:	000300e7          	jalr	ra,0(t1)
   2d360:	fbdff06f          	jal	zero,2d31c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d364:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d368:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d36c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d370:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d374:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d378:	03278c63          	beq	a5,s2,2d3b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x114>
      { _M_dataplus._M_p = __p; }
   2d37c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d380:	0104b783          	ld	a5,16(s1)
   2d384:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d388:	0084b783          	ld	a5,8(s1)
   2d38c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d390:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d394:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d398:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d39c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d3a0:	01010793          	addi	a5,sp,16
   2d3a4:	f6f50ce3          	beq	a0,a5,2d31c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d3a8:	968e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d3ac:	f71ff06f          	jal	zero,2d31c <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d3b0:	0084b603          	ld	a2,8(s1)
   2d3b4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d3b8:	fc0608e3          	beq	a2,zero,2d388 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d3bc:	00090593          	addi	a1,s2,0
   2d3c0:	9f0e90ef          	jal	ra,165b0 <memcpy@plt>
   2d3c4:	fc5ff06f          	jal	zero,2d388 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xec>
      { return _M_dataplus._M_p; }
   2d3c8:	00050413          	addi	s0,a0,0
   2d3cc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d3d0:	01010793          	addi	a5,sp,16
   2d3d4:	00f50463          	beq	a0,a5,2d3dc <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x140>
   2d3d8:	938e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d3dc:	00040513          	addi	a0,s0,0
   2d3e0:	b10e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002d3e4 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)>:
{
   2d3e4:	fc010113          	addi	sp,sp,-64
   2d3e8:	02113c23          	sd	ra,56(sp)
   2d3ec:	02813823          	sd	s0,48(sp)
   2d3f0:	02913423          	sd	s1,40(sp)
   2d3f4:	03213023          	sd	s2,32(sp)
   2d3f8:	00050413          	addi	s0,a0,0
        switch (v) {
   2d3fc:	04058063          	beq	a1,zero,2d43c <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x58>
   2d400:	00100793          	addi	a5,zero,1
   2d404:	06f58e63          	beq	a1,a5,2d480 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x9c>
        return "(DW_CHILDREN)0x" + to_hex((int)v);
   2d408:	00010493          	addi	s1,sp,0
   2d40c:	00048513          	addi	a0,s1,0
   2d410:	00015317          	auipc	t1,0x15
   2d414:	00833303          	ld	t1,8(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2d418:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d41c:	00f00713          	addi	a4,zero,15
   2d420:	0000b697          	auipc	a3,0xb
   2d424:	93068693          	addi	a3,a3,-1744 # 37d50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x238>
   2d428:	00000613          	addi	a2,zero,0
   2d42c:	00000593          	addi	a1,zero,0
   2d430:	00048513          	addi	a0,s1,0
   2d434:	a2ce90ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d438:	0740006f          	jal	zero,2d4ac <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xc8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d43c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d440:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d444:	00000693          	addi	a3,zero,0
   2d448:	0000b617          	auipc	a2,0xb
   2d44c:	8f660613          	addi	a2,a2,-1802 # 37d3e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x226>
   2d450:	0000b597          	auipc	a1,0xb
   2d454:	8e058593          	addi	a1,a1,-1824 # 37d30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x218>
   2d458:	00015317          	auipc	t1,0x15
   2d45c:	eb033303          	ld	t1,-336(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d460:	000300e7          	jalr	ra,0(t1)
}
   2d464:	00040513          	addi	a0,s0,0
   2d468:	03813083          	ld	ra,56(sp)
   2d46c:	03013403          	ld	s0,48(sp)
   2d470:	02813483          	ld	s1,40(sp)
   2d474:	02013903          	ld	s2,32(sp)
   2d478:	04010113          	addi	sp,sp,64
   2d47c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d480:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d484:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d488:	00000693          	addi	a3,zero,0
   2d48c:	0000b617          	auipc	a2,0xb
   2d490:	8c360613          	addi	a2,a2,-1853 # 37d4f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x237>
   2d494:	0000b597          	auipc	a1,0xb
   2d498:	8ac58593          	addi	a1,a1,-1876 # 37d40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x228>
   2d49c:	00015317          	auipc	t1,0x15
   2d4a0:	e6c33303          	ld	t1,-404(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d4a4:	000300e7          	jalr	ra,0(t1)
   2d4a8:	fbdff06f          	jal	zero,2d464 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d4ac:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d4b0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d4b4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d4b8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d4bc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d4c0:	03278c63          	beq	a5,s2,2d4f8 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x114>
      { _M_dataplus._M_p = __p; }
   2d4c4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d4c8:	0104b783          	ld	a5,16(s1)
   2d4cc:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d4d0:	0084b783          	ld	a5,8(s1)
   2d4d4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d4d8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d4dc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d4e0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d4e4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d4e8:	01010793          	addi	a5,sp,16
   2d4ec:	f6f50ce3          	beq	a0,a5,2d464 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d4f0:	820e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d4f4:	f71ff06f          	jal	zero,2d464 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x80>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d4f8:	0084b603          	ld	a2,8(s1)
   2d4fc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d500:	fc0608e3          	beq	a2,zero,2d4d0 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xec>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d504:	00090593          	addi	a1,s2,0
   2d508:	8a8e90ef          	jal	ra,165b0 <memcpy@plt>
   2d50c:	fc5ff06f          	jal	zero,2d4d0 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xec>
      { return _M_dataplus._M_p; }
   2d510:	00050413          	addi	s0,a0,0
   2d514:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d518:	01010793          	addi	a5,sp,16
   2d51c:	00f50463          	beq	a0,a5,2d524 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x140>
   2d520:	ff1e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d524:	00040513          	addi	a0,s0,0
   2d528:	9c8e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002d52c <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)>:
{
   2d52c:	fc010113          	addi	sp,sp,-64
   2d530:	02113c23          	sd	ra,56(sp)
   2d534:	02813823          	sd	s0,48(sp)
   2d538:	02913423          	sd	s1,40(sp)
   2d53c:	03213023          	sd	s2,32(sp)
   2d540:	00050413          	addi	s0,a0,0
        switch (v) {
   2d544:	00200793          	addi	a5,zero,2
   2d548:	08f58663          	beq	a1,a5,2d5d4 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xa8>
   2d54c:	00300793          	addi	a5,zero,3
   2d550:	0af58863          	beq	a1,a5,2d600 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd4>
   2d554:	00100793          	addi	a5,zero,1
   2d558:	02f58c63          	beq	a1,a5,2d590 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
        return "(DW_ACCESS)0x" + to_hex((int)v);
   2d55c:	00010493          	addi	s1,sp,0
   2d560:	00048513          	addi	a0,s1,0
   2d564:	00015317          	auipc	t1,0x15
   2d568:	eb433303          	ld	t1,-332(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2d56c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d570:	00d00713          	addi	a4,zero,13
   2d574:	0000b697          	auipc	a3,0xb
   2d578:	83468693          	addi	a3,a3,-1996 # 37da8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x290>
   2d57c:	00000613          	addi	a2,zero,0
   2d580:	00000593          	addi	a1,zero,0
   2d584:	00048513          	addi	a0,s1,0
   2d588:	8d8e90ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d58c:	0a00006f          	jal	zero,2d62c <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d590:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d594:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d598:	00000693          	addi	a3,zero,0
   2d59c:	0000a617          	auipc	a2,0xa
   2d5a0:	7d460613          	addi	a2,a2,2004 # 37d70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x258>
   2d5a4:	0000a597          	auipc	a1,0xa
   2d5a8:	7bc58593          	addi	a1,a1,1980 # 37d60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x248>
   2d5ac:	00015317          	auipc	t1,0x15
   2d5b0:	d5c33303          	ld	t1,-676(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d5b4:	000300e7          	jalr	ra,0(t1)
}
   2d5b8:	00040513          	addi	a0,s0,0
   2d5bc:	03813083          	ld	ra,56(sp)
   2d5c0:	03013403          	ld	s0,48(sp)
   2d5c4:	02813483          	ld	s1,40(sp)
   2d5c8:	02013903          	ld	s2,32(sp)
   2d5cc:	04010113          	addi	sp,sp,64
   2d5d0:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d5d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d5d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d5dc:	00000693          	addi	a3,zero,0
   2d5e0:	0000a617          	auipc	a2,0xa
   2d5e4:	7ab60613          	addi	a2,a2,1963 # 37d8b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x273>
   2d5e8:	0000a597          	auipc	a1,0xa
   2d5ec:	79058593          	addi	a1,a1,1936 # 37d78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x260>
   2d5f0:	00015317          	auipc	t1,0x15
   2d5f4:	d1833303          	ld	t1,-744(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d5f8:	000300e7          	jalr	ra,0(t1)
   2d5fc:	fbdff06f          	jal	zero,2d5b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d600:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d604:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d608:	00000693          	addi	a3,zero,0
   2d60c:	0000a617          	auipc	a2,0xa
   2d610:	79560613          	addi	a2,a2,1941 # 37da1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x289>
   2d614:	0000a597          	auipc	a1,0xa
   2d618:	77c58593          	addi	a1,a1,1916 # 37d90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x278>
   2d61c:	00015317          	auipc	t1,0x15
   2d620:	cec33303          	ld	t1,-788(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d624:	000300e7          	jalr	ra,0(t1)
   2d628:	f91ff06f          	jal	zero,2d5b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d62c:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d630:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d634:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d638:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d63c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d640:	03278c63          	beq	a5,s2,2d678 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x14c>
      { _M_dataplus._M_p = __p; }
   2d644:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d648:	0104b783          	ld	a5,16(s1)
   2d64c:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d650:	0084b783          	ld	a5,8(s1)
   2d654:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d658:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d65c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d660:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d664:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d668:	01010793          	addi	a5,sp,16
   2d66c:	f4f506e3          	beq	a0,a5,2d5b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d670:	ea1e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d674:	f45ff06f          	jal	zero,2d5b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d678:	0084b603          	ld	a2,8(s1)
   2d67c:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d680:	fc0608e3          	beq	a2,zero,2d650 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d684:	00090593          	addi	a1,s2,0
   2d688:	f29e80ef          	jal	ra,165b0 <memcpy@plt>
   2d68c:	fc5ff06f          	jal	zero,2d650 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x124>
      { return _M_dataplus._M_p; }
   2d690:	00050413          	addi	s0,a0,0
   2d694:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d698:	01010793          	addi	a5,sp,16
   2d69c:	00f50463          	beq	a0,a5,2d6a4 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x178>
   2d6a0:	e71e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d6a4:	00040513          	addi	a0,s0,0
   2d6a8:	848e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002d6ac <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)>:
{
   2d6ac:	fc010113          	addi	sp,sp,-64
   2d6b0:	02113c23          	sd	ra,56(sp)
   2d6b4:	02813823          	sd	s0,48(sp)
   2d6b8:	02913423          	sd	s1,40(sp)
   2d6bc:	03213023          	sd	s2,32(sp)
   2d6c0:	00050413          	addi	s0,a0,0
        switch (v) {
   2d6c4:	00100793          	addi	a5,zero,1
   2d6c8:	08f58463          	beq	a1,a5,2d750 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xa4>
   2d6cc:	00200793          	addi	a5,zero,2
   2d6d0:	0af58663          	beq	a1,a5,2d77c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xd0>
   2d6d4:	02058c63          	beq	a1,zero,2d70c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
        return "(DW_VIRTUALITY)0x" + to_hex((int)v);
   2d6d8:	00010493          	addi	s1,sp,0
   2d6dc:	00048513          	addi	a0,s1,0
   2d6e0:	00015317          	auipc	t1,0x15
   2d6e4:	d3833303          	ld	t1,-712(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2d6e8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d6ec:	01100713          	addi	a4,zero,17
   2d6f0:	0000a697          	auipc	a3,0xa
   2d6f4:	71868693          	addi	a3,a3,1816 # 37e08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2f0>
   2d6f8:	00000613          	addi	a2,zero,0
   2d6fc:	00000593          	addi	a1,zero,0
   2d700:	00048513          	addi	a0,s1,0
   2d704:	f5de80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d708:	0a00006f          	jal	zero,2d7a8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d70c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d710:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d714:	00000693          	addi	a3,zero,0
   2d718:	0000a617          	auipc	a2,0xa
   2d71c:	6b260613          	addi	a2,a2,1714 # 37dca <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b2>
   2d720:	0000a597          	auipc	a1,0xa
   2d724:	69858593          	addi	a1,a1,1688 # 37db8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2a0>
   2d728:	00015317          	auipc	t1,0x15
   2d72c:	be033303          	ld	t1,-1056(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d730:	000300e7          	jalr	ra,0(t1)
}
   2d734:	00040513          	addi	a0,s0,0
   2d738:	03813083          	ld	ra,56(sp)
   2d73c:	03013403          	ld	s0,48(sp)
   2d740:	02813483          	ld	s1,40(sp)
   2d744:	02013903          	ld	s2,32(sp)
   2d748:	04010113          	addi	sp,sp,64
   2d74c:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d750:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d754:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d758:	00000693          	addi	a3,zero,0
   2d75c:	0000a617          	auipc	a2,0xa
   2d760:	68960613          	addi	a2,a2,1673 # 37de5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2cd>
   2d764:	0000a597          	auipc	a1,0xa
   2d768:	66c58593          	addi	a1,a1,1644 # 37dd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b8>
   2d76c:	00015317          	auipc	t1,0x15
   2d770:	b9c33303          	ld	t1,-1124(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d774:	000300e7          	jalr	ra,0(t1)
   2d778:	fbdff06f          	jal	zero,2d734 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d77c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d780:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d784:	00000693          	addi	a3,zero,0
   2d788:	0000a617          	auipc	a2,0xa
   2d78c:	67a60613          	addi	a2,a2,1658 # 37e02 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2ea>
   2d790:	0000a597          	auipc	a1,0xa
   2d794:	65858593          	addi	a1,a1,1624 # 37de8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2d0>
   2d798:	00015317          	auipc	t1,0x15
   2d79c:	b7033303          	ld	t1,-1168(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d7a0:	000300e7          	jalr	ra,0(t1)
   2d7a4:	f91ff06f          	jal	zero,2d734 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d7a8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d7ac:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d7b0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d7b4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d7b8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d7bc:	03278c63          	beq	a5,s2,2d7f4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x148>
      { _M_dataplus._M_p = __p; }
   2d7c0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d7c4:	0104b783          	ld	a5,16(s1)
   2d7c8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d7cc:	0084b783          	ld	a5,8(s1)
   2d7d0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d7d4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d7d8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d7dc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d7e0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d7e4:	01010793          	addi	a5,sp,16
   2d7e8:	f4f506e3          	beq	a0,a5,2d734 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d7ec:	d25e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d7f0:	f45ff06f          	jal	zero,2d734 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x88>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d7f4:	0084b603          	ld	a2,8(s1)
   2d7f8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d7fc:	fc0608e3          	beq	a2,zero,2d7cc <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d800:	00090593          	addi	a1,s2,0
   2d804:	dade80ef          	jal	ra,165b0 <memcpy@plt>
   2d808:	fc5ff06f          	jal	zero,2d7cc <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x120>
      { return _M_dataplus._M_p; }
   2d80c:	00050413          	addi	s0,a0,0
   2d810:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d814:	01010793          	addi	a5,sp,16
   2d818:	00f50463          	beq	a0,a5,2d820 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x174>
   2d81c:	cf5e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d820:	00040513          	addi	a0,s0,0
   2d824:	ecde80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002d828 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)>:
{
   2d828:	fc010113          	addi	sp,sp,-64
   2d82c:	02113c23          	sd	ra,56(sp)
   2d830:	02813823          	sd	s0,48(sp)
   2d834:	02913423          	sd	s1,40(sp)
   2d838:	03213023          	sd	s2,32(sp)
   2d83c:	00050413          	addi	s0,a0,0
        switch (v) {
   2d840:	00200793          	addi	a5,zero,2
   2d844:	08f58663          	beq	a1,a5,2d8d0 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xa8>
   2d848:	00300793          	addi	a5,zero,3
   2d84c:	0af58863          	beq	a1,a5,2d8fc <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd4>
   2d850:	00100793          	addi	a5,zero,1
   2d854:	02f58c63          	beq	a1,a5,2d88c <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
        return "(DW_CC)0x" + to_hex((int)v);
   2d858:	00010493          	addi	s1,sp,0
   2d85c:	00048513          	addi	a0,s1,0
   2d860:	00015317          	auipc	t1,0x15
   2d864:	bb833303          	ld	t1,-1096(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2d868:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d86c:	00900713          	addi	a4,zero,9
   2d870:	0000a697          	auipc	a3,0xa
   2d874:	5e068693          	addi	a3,a3,1504 # 37e50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x338>
   2d878:	00000613          	addi	a2,zero,0
   2d87c:	00000593          	addi	a1,zero,0
   2d880:	00048513          	addi	a0,s1,0
   2d884:	ddde80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2d888:	0a00006f          	jal	zero,2d928 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d88c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d890:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d894:	00000693          	addi	a3,zero,0
   2d898:	0000a617          	auipc	a2,0xa
   2d89c:	59460613          	addi	a2,a2,1428 # 37e2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x314>
   2d8a0:	0000a597          	auipc	a1,0xa
   2d8a4:	58058593          	addi	a1,a1,1408 # 37e20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x308>
   2d8a8:	00015317          	auipc	t1,0x15
   2d8ac:	a6033303          	ld	t1,-1440(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d8b0:	000300e7          	jalr	ra,0(t1)
}
   2d8b4:	00040513          	addi	a0,s0,0
   2d8b8:	03813083          	ld	ra,56(sp)
   2d8bc:	03013403          	ld	s0,48(sp)
   2d8c0:	02813483          	ld	s1,40(sp)
   2d8c4:	02013903          	ld	s2,32(sp)
   2d8c8:	04010113          	addi	sp,sp,64
   2d8cc:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d8d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d8d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d8d8:	00000693          	addi	a3,zero,0
   2d8dc:	0000a617          	auipc	a2,0xa
   2d8e0:	56160613          	addi	a2,a2,1377 # 37e3d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x325>
   2d8e4:	0000a597          	auipc	a1,0xa
   2d8e8:	54c58593          	addi	a1,a1,1356 # 37e30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x318>
   2d8ec:	00015317          	auipc	t1,0x15
   2d8f0:	a1c33303          	ld	t1,-1508(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d8f4:	000300e7          	jalr	ra,0(t1)
   2d8f8:	fbdff06f          	jal	zero,2d8b4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d8fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2d900:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2d904:	00000693          	addi	a3,zero,0
   2d908:	0000a617          	auipc	a2,0xa
   2d90c:	54460613          	addi	a2,a2,1348 # 37e4c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x334>
   2d910:	0000a597          	auipc	a1,0xa
   2d914:	53058593          	addi	a1,a1,1328 # 37e40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x328>
   2d918:	00015317          	auipc	t1,0x15
   2d91c:	9f033303          	ld	t1,-1552(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2d920:	000300e7          	jalr	ra,0(t1)
   2d924:	f91ff06f          	jal	zero,2d8b4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d928:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2d92c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2d930:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2d934:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2d938:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2d93c:	03278c63          	beq	a5,s2,2d974 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x14c>
      { _M_dataplus._M_p = __p; }
   2d940:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2d944:	0104b783          	ld	a5,16(s1)
   2d948:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2d94c:	0084b783          	ld	a5,8(s1)
   2d950:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2d954:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2d958:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2d95c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2d960:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d964:	01010793          	addi	a5,sp,16
   2d968:	f4f506e3          	beq	a0,a5,2d8b4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2d96c:	ba5e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2d970:	f45ff06f          	jal	zero,2d8b4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2d974:	0084b603          	ld	a2,8(s1)
   2d978:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2d97c:	fc0608e3          	beq	a2,zero,2d94c <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2d980:	00090593          	addi	a1,s2,0
   2d984:	c2de80ef          	jal	ra,165b0 <memcpy@plt>
   2d988:	fc5ff06f          	jal	zero,2d94c <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x124>
      { return _M_dataplus._M_p; }
   2d98c:	00050413          	addi	s0,a0,0
   2d990:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2d994:	01010793          	addi	a5,sp,16
   2d998:	00f50463          	beq	a0,a5,2d9a0 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x178>
   2d99c:	b75e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2d9a0:	00040513          	addi	a0,s0,0
   2d9a4:	d4de80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002d9a8 <dwarf::to_string[abi:cxx11](dwarf::DW_END)>:
{
   2d9a8:	fc010113          	addi	sp,sp,-64
   2d9ac:	02113c23          	sd	ra,56(sp)
   2d9b0:	02813823          	sd	s0,48(sp)
   2d9b4:	02913423          	sd	s1,40(sp)
   2d9b8:	03213023          	sd	s2,32(sp)
   2d9bc:	00050413          	addi	s0,a0,0
        switch (v) {
   2d9c0:	00100793          	addi	a5,zero,1
   2d9c4:	08f58463          	beq	a1,a5,2da4c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xa4>
   2d9c8:	00200793          	addi	a5,zero,2
   2d9cc:	0af58663          	beq	a1,a5,2da78 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xd0>
   2d9d0:	02058c63          	beq	a1,zero,2da08 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
        return "(DW_END)0x" + to_hex((int)v);
   2d9d4:	00010493          	addi	s1,sp,0
   2d9d8:	00048513          	addi	a0,s1,0
   2d9dc:	00015317          	auipc	t1,0x15
   2d9e0:	a3c33303          	ld	t1,-1476(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2d9e4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2d9e8:	00a00713          	addi	a4,zero,10
   2d9ec:	0000a697          	auipc	a3,0xa
   2d9f0:	4a468693          	addi	a3,a3,1188 # 37e90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x378>
   2d9f4:	00000613          	addi	a2,zero,0
   2d9f8:	00000593          	addi	a1,zero,0
   2d9fc:	00048513          	addi	a0,s1,0
   2da00:	c61e80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2da04:	0a00006f          	jal	zero,2daa4 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xfc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2da08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2da0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2da10:	00000693          	addi	a3,zero,0
   2da14:	0000a617          	auipc	a2,0xa
   2da18:	45a60613          	addi	a2,a2,1114 # 37e6e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x356>
   2da1c:	0000a597          	auipc	a1,0xa
   2da20:	44458593          	addi	a1,a1,1092 # 37e60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x348>
   2da24:	00015317          	auipc	t1,0x15
   2da28:	8e433303          	ld	t1,-1820(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2da2c:	000300e7          	jalr	ra,0(t1)
}
   2da30:	00040513          	addi	a0,s0,0
   2da34:	03813083          	ld	ra,56(sp)
   2da38:	03013403          	ld	s0,48(sp)
   2da3c:	02813483          	ld	s1,40(sp)
   2da40:	02013903          	ld	s2,32(sp)
   2da44:	04010113          	addi	sp,sp,64
   2da48:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2da4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2da50:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2da54:	00000693          	addi	a3,zero,0
   2da58:	0000a617          	auipc	a2,0xa
   2da5c:	42260613          	addi	a2,a2,1058 # 37e7a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x362>
   2da60:	0000a597          	auipc	a1,0xa
   2da64:	41058593          	addi	a1,a1,1040 # 37e70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x358>
   2da68:	00015317          	auipc	t1,0x15
   2da6c:	8a033303          	ld	t1,-1888(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2da70:	000300e7          	jalr	ra,0(t1)
   2da74:	fbdff06f          	jal	zero,2da30 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2da78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2da7c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2da80:	00000693          	addi	a3,zero,0
   2da84:	0000a617          	auipc	a2,0xa
   2da88:	40960613          	addi	a2,a2,1033 # 37e8d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x375>
   2da8c:	0000a597          	auipc	a1,0xa
   2da90:	3f458593          	addi	a1,a1,1012 # 37e80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x368>
   2da94:	00015317          	auipc	t1,0x15
   2da98:	87433303          	ld	t1,-1932(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2da9c:	000300e7          	jalr	ra,0(t1)
   2daa0:	f91ff06f          	jal	zero,2da30 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2daa4:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2daa8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2daac:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2dab0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2dab4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2dab8:	03278c63          	beq	a5,s2,2daf0 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x148>
      { _M_dataplus._M_p = __p; }
   2dabc:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2dac0:	0104b783          	ld	a5,16(s1)
   2dac4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2dac8:	0084b783          	ld	a5,8(s1)
   2dacc:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2dad0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2dad4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2dad8:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2dadc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dae0:	01010793          	addi	a5,sp,16
   2dae4:	f4f506e3          	beq	a0,a5,2da30 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2dae8:	a29e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2daec:	f45ff06f          	jal	zero,2da30 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x88>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2daf0:	0084b603          	ld	a2,8(s1)
   2daf4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2daf8:	fc0608e3          	beq	a2,zero,2dac8 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2dafc:	00090593          	addi	a1,s2,0
   2db00:	ab1e80ef          	jal	ra,165b0 <memcpy@plt>
   2db04:	fc5ff06f          	jal	zero,2dac8 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x120>
      { return _M_dataplus._M_p; }
   2db08:	00050413          	addi	s0,a0,0
   2db0c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2db10:	01010793          	addi	a5,sp,16
   2db14:	00f50463          	beq	a0,a5,2db1c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x174>
   2db18:	9f9e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2db1c:	00040513          	addi	a0,s0,0
   2db20:	bd1e80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002db24 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)>:
{
   2db24:	fc010113          	addi	sp,sp,-64
   2db28:	02113c23          	sd	ra,56(sp)
   2db2c:	02813823          	sd	s0,48(sp)
   2db30:	02913423          	sd	s1,40(sp)
   2db34:	03213023          	sd	s2,32(sp)
   2db38:	00050413          	addi	s0,a0,0
        switch (v) {
   2db3c:	00200793          	addi	a5,zero,2
   2db40:	08f58663          	beq	a1,a5,2dbcc <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xa8>
   2db44:	00300793          	addi	a5,zero,3
   2db48:	0af58863          	beq	a1,a5,2dbf8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd4>
   2db4c:	00100793          	addi	a5,zero,1
   2db50:	02f58c63          	beq	a1,a5,2db88 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
        return "(DW_VIS)0x" + to_hex((int)v);
   2db54:	00010493          	addi	s1,sp,0
   2db58:	00048513          	addi	a0,s1,0
   2db5c:	00015317          	auipc	t1,0x15
   2db60:	8bc33303          	ld	t1,-1860(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2db64:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2db68:	00a00713          	addi	a4,zero,10
   2db6c:	0000a697          	auipc	a3,0xa
   2db70:	36c68693          	addi	a3,a3,876 # 37ed8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3c0>
   2db74:	00000613          	addi	a2,zero,0
   2db78:	00000593          	addi	a1,zero,0
   2db7c:	00048513          	addi	a0,s1,0
   2db80:	ae1e80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2db84:	0a00006f          	jal	zero,2dc24 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2db88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2db8c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2db90:	00000693          	addi	a3,zero,0
   2db94:	0000a617          	auipc	a2,0xa
   2db98:	31860613          	addi	a2,a2,792 # 37eac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x394>
   2db9c:	0000a597          	auipc	a1,0xa
   2dba0:	30458593          	addi	a1,a1,772 # 37ea0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x388>
   2dba4:	00014317          	auipc	t1,0x14
   2dba8:	76433303          	ld	t1,1892(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dbac:	000300e7          	jalr	ra,0(t1)
}
   2dbb0:	00040513          	addi	a0,s0,0
   2dbb4:	03813083          	ld	ra,56(sp)
   2dbb8:	03013403          	ld	s0,48(sp)
   2dbbc:	02813483          	ld	s1,40(sp)
   2dbc0:	02013903          	ld	s2,32(sp)
   2dbc4:	04010113          	addi	sp,sp,64
   2dbc8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dbcc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dbd0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dbd4:	00000693          	addi	a3,zero,0
   2dbd8:	0000a617          	auipc	a2,0xa
   2dbdc:	2e760613          	addi	a2,a2,743 # 37ebf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a7>
   2dbe0:	0000a597          	auipc	a1,0xa
   2dbe4:	2d058593          	addi	a1,a1,720 # 37eb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x398>
   2dbe8:	00014317          	auipc	t1,0x14
   2dbec:	72033303          	ld	t1,1824(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dbf0:	000300e7          	jalr	ra,0(t1)
   2dbf4:	fbdff06f          	jal	zero,2dbb0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dbf8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dbfc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dc00:	00000693          	addi	a3,zero,0
   2dc04:	0000a617          	auipc	a2,0xa
   2dc08:	2cc60613          	addi	a2,a2,716 # 37ed0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3b8>
   2dc0c:	0000a597          	auipc	a1,0xa
   2dc10:	2b458593          	addi	a1,a1,692 # 37ec0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a8>
   2dc14:	00014317          	auipc	t1,0x14
   2dc18:	6f433303          	ld	t1,1780(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dc1c:	000300e7          	jalr	ra,0(t1)
   2dc20:	f91ff06f          	jal	zero,2dbb0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2dc24:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dc28:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2dc2c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2dc30:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2dc34:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2dc38:	03278c63          	beq	a5,s2,2dc70 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x14c>
      { _M_dataplus._M_p = __p; }
   2dc3c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2dc40:	0104b783          	ld	a5,16(s1)
   2dc44:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2dc48:	0084b783          	ld	a5,8(s1)
   2dc4c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2dc50:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2dc54:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2dc58:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2dc5c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dc60:	01010793          	addi	a5,sp,16
   2dc64:	f4f506e3          	beq	a0,a5,2dbb0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2dc68:	8a9e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2dc6c:	f45ff06f          	jal	zero,2dbb0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x8c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2dc70:	0084b603          	ld	a2,8(s1)
   2dc74:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2dc78:	fc0608e3          	beq	a2,zero,2dc48 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x124>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2dc7c:	00090593          	addi	a1,s2,0
   2dc80:	931e80ef          	jal	ra,165b0 <memcpy@plt>
   2dc84:	fc5ff06f          	jal	zero,2dc48 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x124>
      { return _M_dataplus._M_p; }
   2dc88:	00050413          	addi	s0,a0,0
   2dc8c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dc90:	01010793          	addi	a5,sp,16
   2dc94:	00f50463          	beq	a0,a5,2dc9c <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x178>
   2dc98:	879e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2dc9c:	00040513          	addi	a0,s0,0
   2dca0:	a51e80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002dca4 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)>:
{
   2dca4:	fc010113          	addi	sp,sp,-64
   2dca8:	02113c23          	sd	ra,56(sp)
   2dcac:	02813823          	sd	s0,48(sp)
   2dcb0:	02913423          	sd	s1,40(sp)
   2dcb4:	03213023          	sd	s2,32(sp)
   2dcb8:	00050413          	addi	s0,a0,0
        switch (v) {
   2dcbc:	00200793          	addi	a5,zero,2
   2dcc0:	0af58c63          	beq	a1,a5,2dd78 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xd4>
   2dcc4:	02b7ce63          	blt	a5,a1,2dd00 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x5c>
   2dcc8:	06058663          	beq	a1,zero,2dd34 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x90>
   2dccc:	00100793          	addi	a5,zero,1
   2dcd0:	0cf59a63          	bne	a1,a5,2dda4 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dcd4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dcd8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dcdc:	00000693          	addi	a3,zero,0
   2dce0:	0000a617          	auipc	a2,0xa
   2dce4:	22e60613          	addi	a2,a2,558 # 37f0e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f6>
   2dce8:	0000a597          	auipc	a1,0xa
   2dcec:	21858593          	addi	a1,a1,536 # 37f00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e8>
   2dcf0:	00014317          	auipc	t1,0x14
   2dcf4:	61833303          	ld	t1,1560(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dcf8:	000300e7          	jalr	ra,0(t1)
   2dcfc:	0600006f          	jal	zero,2dd5c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
   2dd00:	00300793          	addi	a5,zero,3
   2dd04:	0af59063          	bne	a1,a5,2dda4 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dd08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dd0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dd10:	00000693          	addi	a3,zero,0
   2dd14:	0000a617          	auipc	a2,0xa
   2dd18:	23360613          	addi	a2,a2,563 # 37f47 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x42f>
   2dd1c:	0000a597          	auipc	a1,0xa
   2dd20:	21458593          	addi	a1,a1,532 # 37f30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x418>
   2dd24:	00014317          	auipc	t1,0x14
   2dd28:	5e433303          	ld	t1,1508(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dd2c:	000300e7          	jalr	ra,0(t1)
   2dd30:	02c0006f          	jal	zero,2dd5c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dd34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dd38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dd3c:	00000693          	addi	a3,zero,0
   2dd40:	0000a617          	auipc	a2,0xa
   2dd44:	1ba60613          	addi	a2,a2,442 # 37efa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e2>
   2dd48:	0000a597          	auipc	a1,0xa
   2dd4c:	1a058593          	addi	a1,a1,416 # 37ee8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3d0>
   2dd50:	00014317          	auipc	t1,0x14
   2dd54:	5b833303          	ld	t1,1464(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dd58:	000300e7          	jalr	ra,0(t1)
}
   2dd5c:	00040513          	addi	a0,s0,0
   2dd60:	03813083          	ld	ra,56(sp)
   2dd64:	03013403          	ld	s0,48(sp)
   2dd68:	02813483          	ld	s1,40(sp)
   2dd6c:	02013903          	ld	s2,32(sp)
   2dd70:	04010113          	addi	sp,sp,64
   2dd74:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dd78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dd7c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dd80:	00000693          	addi	a3,zero,0
   2dd84:	0000a617          	auipc	a2,0xa
   2dd88:	1a760613          	addi	a2,a2,423 # 37f2b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x413>
   2dd8c:	0000a597          	auipc	a1,0xa
   2dd90:	18458593          	addi	a1,a1,388 # 37f10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f8>
   2dd94:	00014317          	auipc	t1,0x14
   2dd98:	57433303          	ld	t1,1396(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dd9c:	000300e7          	jalr	ra,0(t1)
   2dda0:	fbdff06f          	jal	zero,2dd5c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
        return "(DW_INL)0x" + to_hex((int)v);
   2dda4:	00010493          	addi	s1,sp,0
   2dda8:	00048513          	addi	a0,s1,0
   2ddac:	00014317          	auipc	t1,0x14
   2ddb0:	66c33303          	ld	t1,1644(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2ddb4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ddb8:	00a00713          	addi	a4,zero,10
   2ddbc:	0000a697          	auipc	a3,0xa
   2ddc0:	18c68693          	addi	a3,a3,396 # 37f48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x430>
   2ddc4:	00000613          	addi	a2,zero,0
   2ddc8:	00000593          	addi	a1,zero,0
   2ddcc:	00048513          	addi	a0,s1,0
   2ddd0:	891e80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ddd4:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ddd8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2dddc:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2dde0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2dde4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2dde8:	03278c63          	beq	a5,s2,2de20 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x17c>
      { _M_dataplus._M_p = __p; }
   2ddec:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ddf0:	0104b783          	ld	a5,16(s1)
   2ddf4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2ddf8:	0084b783          	ld	a5,8(s1)
   2ddfc:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2de00:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2de04:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2de08:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2de0c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2de10:	01010793          	addi	a5,sp,16
   2de14:	f4f504e3          	beq	a0,a5,2dd5c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2de18:	ef8e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2de1c:	f41ff06f          	jal	zero,2dd5c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xb8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2de20:	0084b603          	ld	a2,8(s1)
   2de24:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2de28:	fc0608e3          	beq	a2,zero,2ddf8 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x154>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2de2c:	00090593          	addi	a1,s2,0
   2de30:	f80e80ef          	jal	ra,165b0 <memcpy@plt>
   2de34:	fc5ff06f          	jal	zero,2ddf8 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x154>
      { return _M_dataplus._M_p; }
   2de38:	00050413          	addi	s0,a0,0
   2de3c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2de40:	01010793          	addi	a5,sp,16
   2de44:	00f50463          	beq	a0,a5,2de4c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x1a8>
   2de48:	ec8e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2de4c:	00040513          	addi	a0,s0,0
   2de50:	8a1e80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002de54 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>:
        return "(DW_LNS)0x" + to_hex((int)v);
}

std::string
to_string(DW_LNE v)
{
   2de54:	fc010113          	addi	sp,sp,-64
   2de58:	02113c23          	sd	ra,56(sp)
   2de5c:	02813823          	sd	s0,48(sp)
   2de60:	02913423          	sd	s1,40(sp)
   2de64:	03213023          	sd	s2,32(sp)
   2de68:	00050413          	addi	s0,a0,0
        switch (v) {
   2de6c:	00300793          	addi	a5,zero,3
   2de70:	0af58e63          	beq	a1,a5,2df2c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xd8>
   2de74:	04b7c063          	blt	a5,a1,2deb4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x60>
   2de78:	00100793          	addi	a5,zero,1
   2de7c:	06f58663          	beq	a1,a5,2dee8 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x94>
   2de80:	00200793          	addi	a5,zero,2
   2de84:	0cf59a63          	bne	a1,a5,2df58 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2de88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2de8c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2de90:	00000693          	addi	a3,zero,0
   2de94:	0000a617          	auipc	a2,0xa
   2de98:	0ee60613          	addi	a2,a2,238 # 37f82 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x46a>
   2de9c:	0000a597          	auipc	a1,0xa
   2dea0:	0d458593          	addi	a1,a1,212 # 37f70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x458>
   2dea4:	00014317          	auipc	t1,0x14
   2dea8:	46433303          	ld	t1,1124(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2deac:	000300e7          	jalr	ra,0(t1)
   2deb0:	0600006f          	jal	zero,2df10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
   2deb4:	00400793          	addi	a5,zero,4
   2deb8:	0af59063          	bne	a1,a5,2df58 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2debc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2dec0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2dec4:	00000693          	addi	a3,zero,0
   2dec8:	0000a617          	auipc	a2,0xa
   2decc:	0f060613          	addi	a2,a2,240 # 37fb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a0>
   2ded0:	0000a597          	auipc	a1,0xa
   2ded4:	0d058593          	addi	a1,a1,208 # 37fa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x488>
   2ded8:	00014317          	auipc	t1,0x14
   2dedc:	43033303          	ld	t1,1072(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2dee0:	000300e7          	jalr	ra,0(t1)
   2dee4:	02c0006f          	jal	zero,2df10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2dee8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2deec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2def0:	00000693          	addi	a3,zero,0
   2def4:	0000a617          	auipc	a2,0xa
   2def8:	07760613          	addi	a2,a2,119 # 37f6b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x453>
   2defc:	0000a597          	auipc	a1,0xa
   2df00:	05c58593          	addi	a1,a1,92 # 37f58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x440>
   2df04:	00014317          	auipc	t1,0x14
   2df08:	40433303          	ld	t1,1028(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2df0c:	000300e7          	jalr	ra,0(t1)
        case DW_LNE::set_discriminator: return "DW_LNE_set_discriminator";
        case DW_LNE::lo_user: break;
        case DW_LNE::hi_user: break;
        }
        return "(DW_LNE)0x" + to_hex((int)v);
}
   2df10:	00040513          	addi	a0,s0,0
   2df14:	03813083          	ld	ra,56(sp)
   2df18:	03013403          	ld	s0,48(sp)
   2df1c:	02813483          	ld	s1,40(sp)
   2df20:	02013903          	ld	s2,32(sp)
   2df24:	04010113          	addi	sp,sp,64
   2df28:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2df2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2df30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2df34:	00000693          	addi	a3,zero,0
   2df38:	0000a617          	auipc	a2,0xa
   2df3c:	06260613          	addi	a2,a2,98 # 37f9a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x482>
   2df40:	0000a597          	auipc	a1,0xa
   2df44:	04858593          	addi	a1,a1,72 # 37f88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x470>
   2df48:	00014317          	auipc	t1,0x14
   2df4c:	3c033303          	ld	t1,960(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2df50:	000300e7          	jalr	ra,0(t1)
   2df54:	fbdff06f          	jal	zero,2df10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
        return "(DW_LNE)0x" + to_hex((int)v);
   2df58:	00010493          	addi	s1,sp,0
   2df5c:	00048513          	addi	a0,s1,0
   2df60:	00014317          	auipc	t1,0x14
   2df64:	4b833303          	ld	t1,1208(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2df68:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2df6c:	00a00713          	addi	a4,zero,10
   2df70:	0000a697          	auipc	a3,0xa
   2df74:	05068693          	addi	a3,a3,80 # 37fc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a8>
   2df78:	00000613          	addi	a2,zero,0
   2df7c:	00000593          	addi	a1,zero,0
   2df80:	00048513          	addi	a0,s1,0
   2df84:	edce80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2df88:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2df8c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2df90:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2df94:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2df98:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2df9c:	03278c63          	beq	a5,s2,2dfd4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x180>
      { _M_dataplus._M_p = __p; }
   2dfa0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2dfa4:	0104b783          	ld	a5,16(s1)
   2dfa8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2dfac:	0084b783          	ld	a5,8(s1)
   2dfb0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2dfb4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2dfb8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2dfbc:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2dfc0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dfc4:	01010793          	addi	a5,sp,16
   2dfc8:	f4f504e3          	beq	a0,a5,2df10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2dfcc:	d44e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2dfd0:	f41ff06f          	jal	zero,2df10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xbc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2dfd4:	0084b603          	ld	a2,8(s1)
   2dfd8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2dfdc:	fc0608e3          	beq	a2,zero,2dfac <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x158>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2dfe0:	00090593          	addi	a1,s2,0
   2dfe4:	dcce80ef          	jal	ra,165b0 <memcpy@plt>
   2dfe8:	fc5ff06f          	jal	zero,2dfac <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x158>
      { return _M_dataplus._M_p; }
   2dfec:	00050413          	addi	s0,a0,0
   2dff0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2dff4:	01010793          	addi	a5,sp,16
   2dff8:	00f50463          	beq	a0,a5,2e000 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x1ac>
   2dffc:	d14e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e000:	00040513          	addi	a0,s0,0
   2e004:	eece80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002e008 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)>:
{
   2e008:	fc010113          	addi	sp,sp,-64
   2e00c:	02113c23          	sd	ra,56(sp)
   2e010:	02813823          	sd	s0,48(sp)
   2e014:	02913423          	sd	s1,40(sp)
   2e018:	03213023          	sd	s2,32(sp)
   2e01c:	00050413          	addi	s0,a0,0
        switch (v) {
   2e020:	00200793          	addi	a5,zero,2
   2e024:	0af58c63          	beq	a1,a5,2e0dc <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xd4>
   2e028:	02b7ce63          	blt	a5,a1,2e064 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x5c>
   2e02c:	06058663          	beq	a1,zero,2e098 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x90>
   2e030:	00100793          	addi	a5,zero,1
   2e034:	0cf59a63          	bne	a1,a5,2e108 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e038:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e03c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e040:	00000693          	addi	a3,zero,0
   2e044:	0000a617          	auipc	a2,0xa
   2e048:	fb160613          	addi	a2,a2,-79 # 37ff5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4dd>
   2e04c:	0000a597          	auipc	a1,0xa
   2e050:	f9c58593          	addi	a1,a1,-100 # 37fe8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4d0>
   2e054:	00014317          	auipc	t1,0x14
   2e058:	2b433303          	ld	t1,692(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e05c:	000300e7          	jalr	ra,0(t1)
   2e060:	0600006f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
   2e064:	00300793          	addi	a5,zero,3
   2e068:	0af59063          	bne	a1,a5,2e108 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x100>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e06c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e070:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e074:	00000693          	addi	a3,zero,0
   2e078:	0000a617          	auipc	a2,0xa
   2e07c:	fa660613          	addi	a2,a2,-90 # 3801e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x506>
   2e080:	0000a597          	auipc	a1,0xa
   2e084:	f8858593          	addi	a1,a1,-120 # 38008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4f0>
   2e088:	00014317          	auipc	t1,0x14
   2e08c:	28033303          	ld	t1,640(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e090:	000300e7          	jalr	ra,0(t1)
   2e094:	02c0006f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e098:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e09c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e0a0:	00000693          	addi	a3,zero,0
   2e0a4:	0000a617          	auipc	a2,0xa
   2e0a8:	f4060613          	addi	a2,a2,-192 # 37fe4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4cc>
   2e0ac:	0000a597          	auipc	a1,0xa
   2e0b0:	f2458593          	addi	a1,a1,-220 # 37fd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4b8>
   2e0b4:	00014317          	auipc	t1,0x14
   2e0b8:	25433303          	ld	t1,596(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e0bc:	000300e7          	jalr	ra,0(t1)
}
   2e0c0:	00040513          	addi	a0,s0,0
   2e0c4:	03813083          	ld	ra,56(sp)
   2e0c8:	03013403          	ld	s0,48(sp)
   2e0cc:	02813483          	ld	s1,40(sp)
   2e0d0:	02013903          	ld	s2,32(sp)
   2e0d4:	04010113          	addi	sp,sp,64
   2e0d8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e0dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e0e0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e0e4:	00000693          	addi	a3,zero,0
   2e0e8:	0000a617          	auipc	a2,0xa
   2e0ec:	f1f60613          	addi	a2,a2,-225 # 38007 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4ef>
   2e0f0:	0000a597          	auipc	a1,0xa
   2e0f4:	f0858593          	addi	a1,a1,-248 # 37ff8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4e0>
   2e0f8:	00014317          	auipc	t1,0x14
   2e0fc:	21033303          	ld	t1,528(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e100:	000300e7          	jalr	ra,0(t1)
   2e104:	fbdff06f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
        return "(DW_ID)0x" + to_hex((int)v);
   2e108:	00010493          	addi	s1,sp,0
   2e10c:	00048513          	addi	a0,s1,0
   2e110:	00014317          	auipc	t1,0x14
   2e114:	30833303          	ld	t1,776(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2e118:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e11c:	00900713          	addi	a4,zero,9
   2e120:	0000a697          	auipc	a3,0xa
   2e124:	f0068693          	addi	a3,a3,-256 # 38020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x508>
   2e128:	00000613          	addi	a2,zero,0
   2e12c:	00000593          	addi	a1,zero,0
   2e130:	00048513          	addi	a0,s1,0
   2e134:	d2ce80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e138:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e13c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e140:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e144:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e148:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e14c:	03278c63          	beq	a5,s2,2e184 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x17c>
      { _M_dataplus._M_p = __p; }
   2e150:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e154:	0104b783          	ld	a5,16(s1)
   2e158:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e15c:	0084b783          	ld	a5,8(s1)
   2e160:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e164:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e168:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e16c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e170:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e174:	01010793          	addi	a5,sp,16
   2e178:	f4f504e3          	beq	a0,a5,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e17c:	b94e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e180:	f41ff06f          	jal	zero,2e0c0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xb8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e184:	0084b603          	ld	a2,8(s1)
   2e188:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e18c:	fc0608e3          	beq	a2,zero,2e15c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x154>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e190:	00090593          	addi	a1,s2,0
   2e194:	c1ce80ef          	jal	ra,165b0 <memcpy@plt>
   2e198:	fc5ff06f          	jal	zero,2e15c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x154>
      { return _M_dataplus._M_p; }
   2e19c:	00050413          	addi	s0,a0,0
   2e1a0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e1a4:	01010793          	addi	a5,sp,16
   2e1a8:	00f50463          	beq	a0,a5,2e1b0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x1a8>
   2e1ac:	b64e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e1b0:	00040513          	addi	a0,s0,0
   2e1b4:	d3ce80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002e1b8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)>:
{
   2e1b8:	fc010113          	addi	sp,sp,-64
   2e1bc:	02113c23          	sd	ra,56(sp)
   2e1c0:	02813823          	sd	s0,48(sp)
   2e1c4:	02913423          	sd	s1,40(sp)
   2e1c8:	03213023          	sd	s2,32(sp)
   2e1cc:	00050413          	addi	s0,a0,0
        switch (v) {
   2e1d0:	00500793          	addi	a5,zero,5
   2e1d4:	10b7ea63          	bltu	a5,a1,2e2e8 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x130>
   2e1d8:	00259793          	slli	a5,a1,0x2
   2e1dc:	0000c717          	auipc	a4,0xc
   2e1e0:	97070713          	addi	a4,a4,-1680 # 39b4c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2034>
   2e1e4:	00e787b3          	add	a5,a5,a4
   2e1e8:	0007a783          	lw	a5,0(a5)
   2e1ec:	00e787b3          	add	a5,a5,a4
   2e1f0:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e1f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e1f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e1fc:	00000693          	addi	a3,zero,0
   2e200:	0000a617          	auipc	a2,0xa
   2e204:	e3e60613          	addi	a2,a2,-450 # 3803e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x526>
   2e208:	0000a597          	auipc	a1,0xa
   2e20c:	e2858593          	addi	a1,a1,-472 # 38030 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x518>
   2e210:	00014317          	auipc	t1,0x14
   2e214:	0f833303          	ld	t1,248(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e218:	000300e7          	jalr	ra,0(t1)
}
   2e21c:	00040513          	addi	a0,s0,0
   2e220:	03813083          	ld	ra,56(sp)
   2e224:	03013403          	ld	s0,48(sp)
   2e228:	02813483          	ld	s1,40(sp)
   2e22c:	02013903          	ld	s2,32(sp)
   2e230:	04010113          	addi	sp,sp,64
   2e234:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e238:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e23c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e240:	00000693          	addi	a3,zero,0
   2e244:	0000a617          	auipc	a2,0xa
   2e248:	e1360613          	addi	a2,a2,-493 # 38057 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x53f>
   2e24c:	0000a597          	auipc	a1,0xa
   2e250:	df458593          	addi	a1,a1,-524 # 38040 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x528>
   2e254:	00014317          	auipc	t1,0x14
   2e258:	0b433303          	ld	t1,180(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e25c:	000300e7          	jalr	ra,0(t1)
   2e260:	fbdff06f          	jal	zero,2e21c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e264:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e268:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e26c:	00000693          	addi	a3,zero,0
   2e270:	0000a617          	auipc	a2,0xa
   2e274:	e0060613          	addi	a2,a2,-512 # 38070 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x558>
   2e278:	0000a597          	auipc	a1,0xa
   2e27c:	de058593          	addi	a1,a1,-544 # 38058 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x540>
   2e280:	00014317          	auipc	t1,0x14
   2e284:	08833303          	ld	t1,136(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e288:	000300e7          	jalr	ra,0(t1)
   2e28c:	f91ff06f          	jal	zero,2e21c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e290:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e294:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e298:	00000693          	addi	a3,zero,0
   2e29c:	0000a617          	auipc	a2,0xa
   2e2a0:	df260613          	addi	a2,a2,-526 # 3808e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x576>
   2e2a4:	0000a597          	auipc	a1,0xa
   2e2a8:	dd458593          	addi	a1,a1,-556 # 38078 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x560>
   2e2ac:	00014317          	auipc	t1,0x14
   2e2b0:	05c33303          	ld	t1,92(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e2b4:	000300e7          	jalr	ra,0(t1)
   2e2b8:	f65ff06f          	jal	zero,2e21c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e2bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e2c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e2c4:	00000693          	addi	a3,zero,0
   2e2c8:	0000a617          	auipc	a2,0xa
   2e2cc:	ddf60613          	addi	a2,a2,-545 # 380a7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58f>
   2e2d0:	0000a597          	auipc	a1,0xa
   2e2d4:	dc058593          	addi	a1,a1,-576 # 38090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x578>
   2e2d8:	00014317          	auipc	t1,0x14
   2e2dc:	03033303          	ld	t1,48(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e2e0:	000300e7          	jalr	ra,0(t1)
   2e2e4:	f39ff06f          	jal	zero,2e21c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
        return "(DW_DS)0x" + to_hex((int)v);
   2e2e8:	00010493          	addi	s1,sp,0
   2e2ec:	00048513          	addi	a0,s1,0
   2e2f0:	00014317          	auipc	t1,0x14
   2e2f4:	12833303          	ld	t1,296(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2e2f8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e2fc:	00900713          	addi	a4,zero,9
   2e300:	0000a697          	auipc	a3,0xa
   2e304:	da868693          	addi	a3,a3,-600 # 380a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x590>
   2e308:	00000613          	addi	a2,zero,0
   2e30c:	00000593          	addi	a1,zero,0
   2e310:	00048513          	addi	a0,s1,0
   2e314:	b4ce80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e318:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e31c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e320:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e324:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e328:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e32c:	03278c63          	beq	a5,s2,2e364 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x1ac>
      { _M_dataplus._M_p = __p; }
   2e330:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e334:	0104b783          	ld	a5,16(s1)
   2e338:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e33c:	0084b783          	ld	a5,8(s1)
   2e340:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e344:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e348:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e34c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e350:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e354:	01010793          	addi	a5,sp,16
   2e358:	ecf502e3          	beq	a0,a5,2e21c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e35c:	9b4e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e360:	ebdff06f          	jal	zero,2e21c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e364:	0084b603          	ld	a2,8(s1)
   2e368:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e36c:	fc0608e3          	beq	a2,zero,2e33c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x184>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e370:	00090593          	addi	a1,s2,0
   2e374:	a3ce80ef          	jal	ra,165b0 <memcpy@plt>
   2e378:	fc5ff06f          	jal	zero,2e33c <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x184>
      { return _M_dataplus._M_p; }
   2e37c:	00050413          	addi	s0,a0,0
   2e380:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e384:	01010793          	addi	a5,sp,16
   2e388:	00f50463          	beq	a0,a5,2e390 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x1d8>
   2e38c:	984e80ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e390:	00040513          	addi	a0,s0,0
   2e394:	b5ce80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002e398 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)>:
{
   2e398:	fb010113          	addi	sp,sp,-80
   2e39c:	04113423          	sd	ra,72(sp)
   2e3a0:	04813023          	sd	s0,64(sp)
   2e3a4:	02913c23          	sd	s1,56(sp)
   2e3a8:	03213823          	sd	s2,48(sp)
   2e3ac:	03313423          	sd	s3,40(sp)
   2e3b0:	03413023          	sd	s4,32(sp)
   2e3b4:	00050413          	addi	s0,a0,0
        switch (v) {
   2e3b8:	00400793          	addi	a5,zero,4
   2e3bc:	10b7ee63          	bltu	a5,a1,2e4d8 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x140>
   2e3c0:	00259593          	slli	a1,a1,0x2
   2e3c4:	0000b717          	auipc	a4,0xb
   2e3c8:	7a070713          	addi	a4,a4,1952 # 39b64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x204c>
   2e3cc:	00e585b3          	add	a1,a1,a4
   2e3d0:	0005a783          	lw	a5,0(a1)
   2e3d4:	00e787b3          	add	a5,a5,a4
   2e3d8:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e3dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e3e0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e3e4:	00000693          	addi	a3,zero,0
   2e3e8:	0000a617          	auipc	a2,0xa
   2e3ec:	cea60613          	addi	a2,a2,-790 # 380d2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5ba>
   2e3f0:	0000a597          	auipc	a1,0xa
   2e3f4:	cc858593          	addi	a1,a1,-824 # 380b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5a0>
   2e3f8:	00014317          	auipc	t1,0x14
   2e3fc:	f1033303          	ld	t1,-240(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e400:	000300e7          	jalr	ra,0(t1)
}
   2e404:	00040513          	addi	a0,s0,0
   2e408:	04813083          	ld	ra,72(sp)
   2e40c:	04013403          	ld	s0,64(sp)
   2e410:	03813483          	ld	s1,56(sp)
   2e414:	03013903          	ld	s2,48(sp)
   2e418:	02813983          	ld	s3,40(sp)
   2e41c:	02013a03          	ld	s4,32(sp)
   2e420:	05010113          	addi	sp,sp,80
   2e424:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e428:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e42c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e430:	00000693          	addi	a3,zero,0
   2e434:	0000a617          	auipc	a2,0xa
   2e438:	cba60613          	addi	a2,a2,-838 # 380ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d6>
   2e43c:	0000a597          	auipc	a1,0xa
   2e440:	c9c58593          	addi	a1,a1,-868 # 380d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5c0>
   2e444:	00014317          	auipc	t1,0x14
   2e448:	ec433303          	ld	t1,-316(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e44c:	000300e7          	jalr	ra,0(t1)
   2e450:	fb5ff06f          	jal	zero,2e404 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e454:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e458:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e45c:	00000693          	addi	a3,zero,0
   2e460:	0000a617          	auipc	a2,0xa
   2e464:	caa60613          	addi	a2,a2,-854 # 3810a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f2>
   2e468:	0000a597          	auipc	a1,0xa
   2e46c:	c8858593          	addi	a1,a1,-888 # 380f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d8>
   2e470:	00014317          	auipc	t1,0x14
   2e474:	e9833303          	ld	t1,-360(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e478:	000300e7          	jalr	ra,0(t1)
   2e47c:	f89ff06f          	jal	zero,2e404 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e480:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e484:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e488:	00000693          	addi	a3,zero,0
   2e48c:	0000a617          	auipc	a2,0xa
   2e490:	c9f60613          	addi	a2,a2,-865 # 3812b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x613>
   2e494:	0000a597          	auipc	a1,0xa
   2e498:	c7c58593          	addi	a1,a1,-900 # 38110 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f8>
   2e49c:	00014317          	auipc	t1,0x14
   2e4a0:	e6c33303          	ld	t1,-404(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e4a4:	000300e7          	jalr	ra,0(t1)
   2e4a8:	f5dff06f          	jal	zero,2e404 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e4ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e4b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e4b4:	00000693          	addi	a3,zero,0
   2e4b8:	0000a617          	auipc	a2,0xa
   2e4bc:	c9060613          	addi	a2,a2,-880 # 38148 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x630>
   2e4c0:	0000a597          	auipc	a1,0xa
   2e4c4:	c7058593          	addi	a1,a1,-912 # 38130 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x618>
   2e4c8:	00014317          	auipc	t1,0x14
   2e4cc:	e4033303          	ld	t1,-448(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e4d0:	000300e7          	jalr	ra,0(t1)
   2e4d4:	f31ff06f          	jal	zero,2e404 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
    const bool __neg = __val < 0;
   2e4d8:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2e4dc:	0005891b          	addiw	s2,a1,0
   2e4e0:	0605ce63          	blt	a1,zero,2e55c <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1c4>
    const auto __len = __detail::__to_chars_len(__uval);
   2e4e4:	00a00593          	addi	a1,zero,10
   2e4e8:	00090513          	addi	a0,s2,0
   2e4ec:	00014317          	auipc	t1,0x14
   2e4f0:	fac33303          	ld	t1,-84(t1) # 42498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18154>
   2e4f4:	000300e7          	jalr	ra,0(t1)
   2e4f8:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2e4fc:	01010793          	addi	a5,sp,16
   2e500:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2e504:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2e508:	02d00613          	addi	a2,zero,45
   2e50c:	02059593          	slli	a1,a1,0x20
   2e510:	0205d593          	srli	a1,a1,0x20
   2e514:	00010493          	addi	s1,sp,0
   2e518:	00048513          	addi	a0,s1,0
   2e51c:	854e80ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2e520:	00090613          	addi	a2,s2,0
   2e524:	000a0593          	addi	a1,s4,0
   2e528:	00013503          	ld	a0,0(sp)
   2e52c:	01350533          	add	a0,a0,s3
   2e530:	00014317          	auipc	t1,0x14
   2e534:	f8833303          	ld	t1,-120(t1) # 424b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180d8>
   2e538:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e53c:	01300713          	addi	a4,zero,19
   2e540:	0000a697          	auipc	a3,0xa
   2e544:	c1068693          	addi	a3,a3,-1008 # 38150 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x638>
   2e548:	00000613          	addi	a2,zero,0
   2e54c:	00000593          	addi	a1,zero,0
   2e550:	00048513          	addi	a0,s1,0
   2e554:	90ce80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e558:	00c0006f          	jal	zero,2e564 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1cc>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2e55c:	40b0093b          	subw	s2,zero,a1
   2e560:	f85ff06f          	jal	zero,2e4e4 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x14c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e564:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e568:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e56c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e570:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e574:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e578:	03278c63          	beq	a5,s2,2e5b0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x218>
      { _M_dataplus._M_p = __p; }
   2e57c:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e580:	0104b783          	ld	a5,16(s1)
   2e584:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e588:	0084b783          	ld	a5,8(s1)
   2e58c:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e590:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e594:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e598:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e59c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e5a0:	01010793          	addi	a5,sp,16
   2e5a4:	e6f500e3          	beq	a0,a5,2e404 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e5a8:	f69e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e5ac:	e59ff06f          	jal	zero,2e404 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e5b0:	0084b603          	ld	a2,8(s1)
   2e5b4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e5b8:	fc0608e3          	beq	a2,zero,2e588 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1f0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e5bc:	00090593          	addi	a1,s2,0
   2e5c0:	ff1e70ef          	jal	ra,165b0 <memcpy@plt>
   2e5c4:	fc5ff06f          	jal	zero,2e588 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1f0>
      { return _M_dataplus._M_p; }
   2e5c8:	00050413          	addi	s0,a0,0
   2e5cc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e5d0:	01010793          	addi	a5,sp,16
   2e5d4:	00f50463          	beq	a0,a5,2e5dc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x244>
   2e5d8:	f39e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e5dc:	00040513          	addi	a0,s0,0
   2e5e0:	910e80ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002e5e4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>:
{
   2e5e4:	fc010113          	addi	sp,sp,-64
   2e5e8:	02113c23          	sd	ra,56(sp)
   2e5ec:	02813823          	sd	s0,48(sp)
   2e5f0:	02913423          	sd	s1,40(sp)
   2e5f4:	03213023          	sd	s2,32(sp)
   2e5f8:	00050413          	addi	s0,a0,0
        switch (v) {
   2e5fc:	00c00793          	addi	a5,zero,12
   2e600:	24b7e463          	bltu	a5,a1,2e848 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x264>
   2e604:	00259793          	slli	a5,a1,0x2
   2e608:	0000b717          	auipc	a4,0xb
   2e60c:	57070713          	addi	a4,a4,1392 # 39b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2060>
   2e610:	00e787b3          	add	a5,a5,a4
   2e614:	0007a783          	lw	a5,0(a5)
   2e618:	00e787b3          	add	a5,a5,a4
   2e61c:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e620:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e624:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e628:	00000693          	addi	a3,zero,0
   2e62c:	0000a617          	auipc	a2,0xa
   2e630:	b4760613          	addi	a2,a2,-1209 # 38173 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x65b>
   2e634:	0000a597          	auipc	a1,0xa
   2e638:	b3458593          	addi	a1,a1,-1228 # 38168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x650>
   2e63c:	00014317          	auipc	t1,0x14
   2e640:	ccc33303          	ld	t1,-820(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e644:	000300e7          	jalr	ra,0(t1)
}
   2e648:	00040513          	addi	a0,s0,0
   2e64c:	03813083          	ld	ra,56(sp)
   2e650:	03013403          	ld	s0,48(sp)
   2e654:	02813483          	ld	s1,40(sp)
   2e658:	02013903          	ld	s2,32(sp)
   2e65c:	04010113          	addi	sp,sp,64
   2e660:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e664:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e668:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e66c:	00000693          	addi	a3,zero,0
   2e670:	0000a617          	auipc	a2,0xa
   2e674:	b1960613          	addi	a2,a2,-1255 # 38189 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x671>
   2e678:	0000a597          	auipc	a1,0xa
   2e67c:	b0058593          	addi	a1,a1,-1280 # 38178 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x660>
   2e680:	00014317          	auipc	t1,0x14
   2e684:	c8833303          	ld	t1,-888(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e688:	000300e7          	jalr	ra,0(t1)
   2e68c:	fbdff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e690:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e694:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e698:	00000693          	addi	a3,zero,0
   2e69c:	0000a617          	auipc	a2,0xa
   2e6a0:	b0760613          	addi	a2,a2,-1273 # 381a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68b>
   2e6a4:	0000a597          	auipc	a1,0xa
   2e6a8:	aec58593          	addi	a1,a1,-1300 # 38190 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x678>
   2e6ac:	00014317          	auipc	t1,0x14
   2e6b0:	c5c33303          	ld	t1,-932(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e6b4:	000300e7          	jalr	ra,0(t1)
   2e6b8:	f91ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e6bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e6c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e6c4:	00000693          	addi	a3,zero,0
   2e6c8:	0000a617          	auipc	a2,0xa
   2e6cc:	aef60613          	addi	a2,a2,-1297 # 381b7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x69f>
   2e6d0:	0000a597          	auipc	a1,0xa
   2e6d4:	ad858593          	addi	a1,a1,-1320 # 381a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x690>
   2e6d8:	00014317          	auipc	t1,0x14
   2e6dc:	c3033303          	ld	t1,-976(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e6e0:	000300e7          	jalr	ra,0(t1)
   2e6e4:	f65ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e6e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e6ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e6f0:	00000693          	addi	a3,zero,0
   2e6f4:	0000a617          	auipc	a2,0xa
   2e6f8:	ad560613          	addi	a2,a2,-1323 # 381c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b1>
   2e6fc:	0000a597          	auipc	a1,0xa
   2e700:	abc58593          	addi	a1,a1,-1348 # 381b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6a0>
   2e704:	00014317          	auipc	t1,0x14
   2e708:	c0433303          	ld	t1,-1020(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e70c:	000300e7          	jalr	ra,0(t1)
   2e710:	f39ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e714:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e718:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e71c:	00000693          	addi	a3,zero,0
   2e720:	0000a617          	auipc	a2,0xa
   2e724:	ac260613          	addi	a2,a2,-1342 # 381e2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6ca>
   2e728:	0000a597          	auipc	a1,0xa
   2e72c:	aa858593          	addi	a1,a1,-1368 # 381d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b8>
   2e730:	00014317          	auipc	t1,0x14
   2e734:	bd833303          	ld	t1,-1064(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e738:	000300e7          	jalr	ra,0(t1)
   2e73c:	f0dff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e740:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e744:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e748:	00000693          	addi	a3,zero,0
   2e74c:	0000a617          	auipc	a2,0xa
   2e750:	ab260613          	addi	a2,a2,-1358 # 381fe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e6>
   2e754:	0000a597          	auipc	a1,0xa
   2e758:	a9458593          	addi	a1,a1,-1388 # 381e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6d0>
   2e75c:	00014317          	auipc	t1,0x14
   2e760:	bac33303          	ld	t1,-1108(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e764:	000300e7          	jalr	ra,0(t1)
   2e768:	ee1ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e76c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e770:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e774:	00000693          	addi	a3,zero,0
   2e778:	0000a617          	auipc	a2,0xa
   2e77c:	a9b60613          	addi	a2,a2,-1381 # 38213 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6fb>
   2e780:	0000a597          	auipc	a1,0xa
   2e784:	a8058593          	addi	a1,a1,-1408 # 38200 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e8>
   2e788:	00014317          	auipc	t1,0x14
   2e78c:	b8033303          	ld	t1,-1152(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e790:	000300e7          	jalr	ra,0(t1)
   2e794:	eb5ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e798:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e79c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e7a0:	00000693          	addi	a3,zero,0
   2e7a4:	0000a617          	auipc	a2,0xa
   2e7a8:	a8b60613          	addi	a2,a2,-1397 # 3822f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x717>
   2e7ac:	0000a597          	auipc	a1,0xa
   2e7b0:	a6c58593          	addi	a1,a1,-1428 # 38218 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x700>
   2e7b4:	00014317          	auipc	t1,0x14
   2e7b8:	b5433303          	ld	t1,-1196(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e7bc:	000300e7          	jalr	ra,0(t1)
   2e7c0:	e89ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e7c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e7c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e7cc:	00000693          	addi	a3,zero,0
   2e7d0:	0000a617          	auipc	a2,0xa
   2e7d4:	a7760613          	addi	a2,a2,-1417 # 38247 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x72f>
   2e7d8:	0000a597          	auipc	a1,0xa
   2e7dc:	a5858593          	addi	a1,a1,-1448 # 38230 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x718>
   2e7e0:	00014317          	auipc	t1,0x14
   2e7e4:	b2833303          	ld	t1,-1240(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e7e8:	000300e7          	jalr	ra,0(t1)
   2e7ec:	e5dff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e7f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e7f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e7f8:	00000693          	addi	a3,zero,0
   2e7fc:	0000a617          	auipc	a2,0xa
   2e800:	a6560613          	addi	a2,a2,-1435 # 38261 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x749>
   2e804:	0000a597          	auipc	a1,0xa
   2e808:	a4458593          	addi	a1,a1,-1468 # 38248 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x730>
   2e80c:	00014317          	auipc	t1,0x14
   2e810:	afc33303          	ld	t1,-1284(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e814:	000300e7          	jalr	ra,0(t1)
   2e818:	e31ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e81c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e820:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e824:	00000693          	addi	a3,zero,0
   2e828:	0000a617          	auipc	a2,0xa
   2e82c:	a4e60613          	addi	a2,a2,-1458 # 38276 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x75e>
   2e830:	0000a597          	auipc	a1,0xa
   2e834:	a3858593          	addi	a1,a1,-1480 # 38268 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x750>
   2e838:	00014317          	auipc	t1,0x14
   2e83c:	ad033303          	ld	t1,-1328(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e840:	000300e7          	jalr	ra,0(t1)
   2e844:	e05ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
        return "(DW_LNS)0x" + to_hex((int)v);
   2e848:	00010493          	addi	s1,sp,0
   2e84c:	00048513          	addi	a0,s1,0
   2e850:	00014317          	auipc	t1,0x14
   2e854:	bc833303          	ld	t1,-1080(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2e858:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2e85c:	00a00713          	addi	a4,zero,10
   2e860:	0000a697          	auipc	a3,0xa
   2e864:	a1868693          	addi	a3,a3,-1512 # 38278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x760>
   2e868:	00000613          	addi	a2,zero,0
   2e86c:	00000593          	addi	a1,zero,0
   2e870:	00048513          	addi	a0,s1,0
   2e874:	dede70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2e878:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e87c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2e880:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2e884:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2e888:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2e88c:	03278c63          	beq	a5,s2,2e8c4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2e0>
      { _M_dataplus._M_p = __p; }
   2e890:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2e894:	0104b783          	ld	a5,16(s1)
   2e898:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2e89c:	0084b783          	ld	a5,8(s1)
   2e8a0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2e8a4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2e8a8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2e8ac:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2e8b0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e8b4:	01010793          	addi	a5,sp,16
   2e8b8:	d8f508e3          	beq	a0,a5,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2e8bc:	c55e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2e8c0:	d89ff06f          	jal	zero,2e648 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2e8c4:	0084b603          	ld	a2,8(s1)
   2e8c8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2e8cc:	fc0608e3          	beq	a2,zero,2e89c <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2b8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2e8d0:	00090593          	addi	a1,s2,0
   2e8d4:	cdde70ef          	jal	ra,165b0 <memcpy@plt>
   2e8d8:	fc5ff06f          	jal	zero,2e89c <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x2b8>
      { return _M_dataplus._M_p; }
   2e8dc:	00050413          	addi	s0,a0,0
   2e8e0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2e8e4:	01010793          	addi	a5,sp,16
   2e8e8:	00f50463          	beq	a0,a5,2e8f0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x30c>
   2e8ec:	c25e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2e8f0:	00040513          	addi	a0,s0,0
   2e8f4:	dfde70ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002e8f8 <dwarf::to_string[abi:cxx11](dwarf::section_type)>:
{
   2e8f8:	fb010113          	addi	sp,sp,-80
   2e8fc:	04113423          	sd	ra,72(sp)
   2e900:	04813023          	sd	s0,64(sp)
   2e904:	02913c23          	sd	s1,56(sp)
   2e908:	03213823          	sd	s2,48(sp)
   2e90c:	03313423          	sd	s3,40(sp)
   2e910:	03413023          	sd	s4,32(sp)
   2e914:	00050413          	addi	s0,a0,0
        switch (v) {
   2e918:	00b00793          	addi	a5,zero,11
   2e91c:	24b7e863          	bltu	a5,a1,2eb6c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x274>
   2e920:	00259593          	slli	a1,a1,0x2
   2e924:	0000b717          	auipc	a4,0xb
   2e928:	28870713          	addi	a4,a4,648 # 39bac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2094>
   2e92c:	00e585b3          	add	a1,a1,a4
   2e930:	0005a783          	lw	a5,0(a1)
   2e934:	00e787b3          	add	a5,a5,a4
   2e938:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e93c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e940:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e944:	00000693          	addi	a3,zero,0
   2e948:	0000a617          	auipc	a2,0xa
   2e94c:	95460613          	addi	a2,a2,-1708 # 3829c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x784>
   2e950:	0000a597          	auipc	a1,0xa
   2e954:	93858593          	addi	a1,a1,-1736 # 38288 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x770>
   2e958:	00014317          	auipc	t1,0x14
   2e95c:	9b033303          	ld	t1,-1616(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e960:	000300e7          	jalr	ra,0(t1)
}
   2e964:	00040513          	addi	a0,s0,0
   2e968:	04813083          	ld	ra,72(sp)
   2e96c:	04013403          	ld	s0,64(sp)
   2e970:	03813483          	ld	s1,56(sp)
   2e974:	03013903          	ld	s2,48(sp)
   2e978:	02813983          	ld	s3,40(sp)
   2e97c:	02013a03          	ld	s4,32(sp)
   2e980:	05010113          	addi	sp,sp,80
   2e984:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e988:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e98c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e990:	00000693          	addi	a3,zero,0
   2e994:	0000a617          	auipc	a2,0xa
   2e998:	92160613          	addi	a2,a2,-1759 # 382b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x79d>
   2e99c:	0000a597          	auipc	a1,0xa
   2e9a0:	90458593          	addi	a1,a1,-1788 # 382a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x788>
   2e9a4:	00014317          	auipc	t1,0x14
   2e9a8:	96433303          	ld	t1,-1692(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e9ac:	000300e7          	jalr	ra,0(t1)
   2e9b0:	fb5ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e9b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e9b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e9bc:	00000693          	addi	a3,zero,0
   2e9c0:	0000a617          	auipc	a2,0xa
   2e9c4:	90b60613          	addi	a2,a2,-1781 # 382cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b3>
   2e9c8:	0000a597          	auipc	a1,0xa
   2e9cc:	8f058593          	addi	a1,a1,-1808 # 382b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7a0>
   2e9d0:	00014317          	auipc	t1,0x14
   2e9d4:	93833303          	ld	t1,-1736(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2e9d8:	000300e7          	jalr	ra,0(t1)
   2e9dc:	f89ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2e9e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2e9e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2e9e8:	00000693          	addi	a3,zero,0
   2e9ec:	0000a617          	auipc	a2,0xa
   2e9f0:	8f660613          	addi	a2,a2,-1802 # 382e2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7ca>
   2e9f4:	0000a597          	auipc	a1,0xa
   2e9f8:	8dc58593          	addi	a1,a1,-1828 # 382d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b8>
   2e9fc:	00014317          	auipc	t1,0x14
   2ea00:	90c33303          	ld	t1,-1780(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ea04:	000300e7          	jalr	ra,0(t1)
   2ea08:	f5dff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea0c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ea10:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ea14:	00000693          	addi	a3,zero,0
   2ea18:	0000a617          	auipc	a2,0xa
   2ea1c:	8e260613          	addi	a2,a2,-1822 # 382fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e2>
   2ea20:	0000a597          	auipc	a1,0xa
   2ea24:	8c858593          	addi	a1,a1,-1848 # 382e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7d0>
   2ea28:	00014317          	auipc	t1,0x14
   2ea2c:	8e033303          	ld	t1,-1824(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ea30:	000300e7          	jalr	ra,0(t1)
   2ea34:	f31ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ea3c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ea40:	00000693          	addi	a3,zero,0
   2ea44:	0000a617          	auipc	a2,0xa
   2ea48:	8cd60613          	addi	a2,a2,-1843 # 38311 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7f9>
   2ea4c:	0000a597          	auipc	a1,0xa
   2ea50:	8b458593          	addi	a1,a1,-1868 # 38300 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e8>
   2ea54:	00014317          	auipc	t1,0x14
   2ea58:	8b433303          	ld	t1,-1868(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ea5c:	000300e7          	jalr	ra,0(t1)
   2ea60:	f05ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ea68:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ea6c:	00000693          	addi	a3,zero,0
   2ea70:	0000a617          	auipc	a2,0xa
   2ea74:	8bd60613          	addi	a2,a2,-1859 # 3832d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x815>
   2ea78:	0000a597          	auipc	a1,0xa
   2ea7c:	8a058593          	addi	a1,a1,-1888 # 38318 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x800>
   2ea80:	00014317          	auipc	t1,0x14
   2ea84:	88833303          	ld	t1,-1912(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ea88:	000300e7          	jalr	ra,0(t1)
   2ea8c:	ed9ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ea90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ea94:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ea98:	00000693          	addi	a3,zero,0
   2ea9c:	0000a617          	auipc	a2,0xa
   2eaa0:	8aa60613          	addi	a2,a2,-1878 # 38346 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x82e>
   2eaa4:	0000a597          	auipc	a1,0xa
   2eaa8:	88c58593          	addi	a1,a1,-1908 # 38330 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x818>
   2eaac:	00014317          	auipc	t1,0x14
   2eab0:	85c33303          	ld	t1,-1956(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eab4:	000300e7          	jalr	ra,0(t1)
   2eab8:	eadff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eabc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eac0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eac4:	00000693          	addi	a3,zero,0
   2eac8:	0000a617          	auipc	a2,0xa
   2eacc:	89660613          	addi	a2,a2,-1898 # 3835e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x846>
   2ead0:	0000a597          	auipc	a1,0xa
   2ead4:	87858593          	addi	a1,a1,-1928 # 38348 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x830>
   2ead8:	00014317          	auipc	t1,0x14
   2eadc:	83033303          	ld	t1,-2000(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eae0:	000300e7          	jalr	ra,0(t1)
   2eae4:	e81ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eae8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eaec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eaf0:	00000693          	addi	a3,zero,0
   2eaf4:	0000a617          	auipc	a2,0xa
   2eaf8:	88060613          	addi	a2,a2,-1920 # 38374 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x85c>
   2eafc:	0000a597          	auipc	a1,0xa
   2eb00:	86458593          	addi	a1,a1,-1948 # 38360 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x848>
   2eb04:	00014317          	auipc	t1,0x14
   2eb08:	80433303          	ld	t1,-2044(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eb0c:	000300e7          	jalr	ra,0(t1)
   2eb10:	e55ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eb14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eb18:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eb1c:	00000693          	addi	a3,zero,0
   2eb20:	0000a617          	auipc	a2,0xa
   2eb24:	86960613          	addi	a2,a2,-1943 # 38389 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x871>
   2eb28:	0000a597          	auipc	a1,0xa
   2eb2c:	85058593          	addi	a1,a1,-1968 # 38378 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x860>
   2eb30:	00013317          	auipc	t1,0x13
   2eb34:	7d833303          	ld	t1,2008(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eb38:	000300e7          	jalr	ra,0(t1)
   2eb3c:	e29ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eb40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eb44:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eb48:	00000693          	addi	a3,zero,0
   2eb4c:	0000a617          	auipc	a2,0xa
   2eb50:	85760613          	addi	a2,a2,-1961 # 383a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x88b>
   2eb54:	0000a597          	auipc	a1,0xa
   2eb58:	83c58593          	addi	a1,a1,-1988 # 38390 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x878>
   2eb5c:	00013317          	auipc	t1,0x13
   2eb60:	7ac33303          	ld	t1,1964(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eb64:	000300e7          	jalr	ra,0(t1)
   2eb68:	dfdff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
    const bool __neg = __val < 0;
   2eb6c:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2eb70:	0005891b          	addiw	s2,a1,0
   2eb74:	0605ce63          	blt	a1,zero,2ebf0 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x2f8>
    const auto __len = __detail::__to_chars_len(__uval);
   2eb78:	00a00593          	addi	a1,zero,10
   2eb7c:	00090513          	addi	a0,s2,0
   2eb80:	00014317          	auipc	t1,0x14
   2eb84:	91833303          	ld	t1,-1768(t1) # 42498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18154>
   2eb88:	000300e7          	jalr	ra,0(t1)
   2eb8c:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2eb90:	01010793          	addi	a5,sp,16
   2eb94:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2eb98:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2eb9c:	02d00613          	addi	a2,zero,45
   2eba0:	02059593          	slli	a1,a1,0x20
   2eba4:	0205d593          	srli	a1,a1,0x20
   2eba8:	00010493          	addi	s1,sp,0
   2ebac:	00048513          	addi	a0,s1,0
   2ebb0:	9c1e70ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2ebb4:	00090613          	addi	a2,s2,0
   2ebb8:	000a0593          	addi	a1,s4,0
   2ebbc:	00013503          	ld	a0,0(sp)
   2ebc0:	01350533          	add	a0,a0,s3
   2ebc4:	00014317          	auipc	t1,0x14
   2ebc8:	8f433303          	ld	t1,-1804(t1) # 424b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180d8>
   2ebcc:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ebd0:	00e00713          	addi	a4,zero,14
   2ebd4:	00009697          	auipc	a3,0x9
   2ebd8:	7d468693          	addi	a3,a3,2004 # 383a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x890>
   2ebdc:	00000613          	addi	a2,zero,0
   2ebe0:	00000593          	addi	a1,zero,0
   2ebe4:	00048513          	addi	a0,s1,0
   2ebe8:	a79e70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ebec:	00c0006f          	jal	zero,2ebf8 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x300>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2ebf0:	40b0093b          	subw	s2,zero,a1
   2ebf4:	f85ff06f          	jal	zero,2eb78 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x280>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2ebf8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ebfc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ec00:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2ec04:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ec08:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2ec0c:	03278c63          	beq	a5,s2,2ec44 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x34c>
      { _M_dataplus._M_p = __p; }
   2ec10:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2ec14:	0104b783          	ld	a5,16(s1)
   2ec18:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2ec1c:	0084b783          	ld	a5,8(s1)
   2ec20:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2ec24:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2ec28:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2ec2c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2ec30:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ec34:	01010793          	addi	a5,sp,16
   2ec38:	d2f506e3          	beq	a0,a5,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2ec3c:	8d5e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2ec40:	d25ff06f          	jal	zero,2e964 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ec44:	0084b603          	ld	a2,8(s1)
   2ec48:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2ec4c:	fc0608e3          	beq	a2,zero,2ec1c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x324>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ec50:	00090593          	addi	a1,s2,0
   2ec54:	95de70ef          	jal	ra,165b0 <memcpy@plt>
   2ec58:	fc5ff06f          	jal	zero,2ec1c <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x324>
      { return _M_dataplus._M_p; }
   2ec5c:	00050413          	addi	s0,a0,0
   2ec60:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2ec64:	01010793          	addi	a5,sp,16
   2ec68:	00f50463          	beq	a0,a5,2ec70 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x378>
   2ec6c:	8a5e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2ec70:	00040513          	addi	a0,s0,0
   2ec74:	a7de70ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002ec78 <dwarf::to_string[abi:cxx11](dwarf::value::type)>:
{
   2ec78:	fb010113          	addi	sp,sp,-80
   2ec7c:	04113423          	sd	ra,72(sp)
   2ec80:	04813023          	sd	s0,64(sp)
   2ec84:	02913c23          	sd	s1,56(sp)
   2ec88:	03213823          	sd	s2,48(sp)
   2ec8c:	03313423          	sd	s3,40(sp)
   2ec90:	03413023          	sd	s4,32(sp)
   2ec94:	00050413          	addi	s0,a0,0
        switch (v) {
   2ec98:	00d00793          	addi	a5,zero,13
   2ec9c:	2ab7e463          	bltu	a5,a1,2ef44 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2cc>
   2eca0:	00259593          	slli	a1,a1,0x2
   2eca4:	0000b717          	auipc	a4,0xb
   2eca8:	f3870713          	addi	a4,a4,-200 # 39bdc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20c4>
   2ecac:	00e585b3          	add	a1,a1,a4
   2ecb0:	0005a783          	lw	a5,0(a1)
   2ecb4:	00e787b3          	add	a5,a5,a4
   2ecb8:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ecbc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ecc0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ecc4:	00000693          	addi	a3,zero,0
   2ecc8:	00009617          	auipc	a2,0x9
   2eccc:	70460613          	addi	a2,a2,1796 # 383cc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b4>
   2ecd0:	00009597          	auipc	a1,0x9
   2ecd4:	6e858593          	addi	a1,a1,1768 # 383b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8a0>
   2ecd8:	00013317          	auipc	t1,0x13
   2ecdc:	63033303          	ld	t1,1584(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ece0:	000300e7          	jalr	ra,0(t1)
}
   2ece4:	00040513          	addi	a0,s0,0
   2ece8:	04813083          	ld	ra,72(sp)
   2ecec:	04013403          	ld	s0,64(sp)
   2ecf0:	03813483          	ld	s1,56(sp)
   2ecf4:	03013903          	ld	s2,48(sp)
   2ecf8:	02813983          	ld	s3,40(sp)
   2ecfc:	02013a03          	ld	s4,32(sp)
   2ed00:	05010113          	addi	sp,sp,80
   2ed04:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ed08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ed0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ed10:	00000693          	addi	a3,zero,0
   2ed14:	00009617          	auipc	a2,0x9
   2ed18:	6d060613          	addi	a2,a2,1744 # 383e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8cc>
   2ed1c:	00009597          	auipc	a1,0x9
   2ed20:	6b458593          	addi	a1,a1,1716 # 383d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b8>
   2ed24:	00013317          	auipc	t1,0x13
   2ed28:	5e433303          	ld	t1,1508(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ed2c:	000300e7          	jalr	ra,0(t1)
   2ed30:	fb5ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ed34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ed38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ed3c:	00000693          	addi	a3,zero,0
   2ed40:	00009617          	auipc	a2,0x9
   2ed44:	6ba60613          	addi	a2,a2,1722 # 383fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e2>
   2ed48:	00009597          	auipc	a1,0x9
   2ed4c:	6a058593          	addi	a1,a1,1696 # 383e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8d0>
   2ed50:	00013317          	auipc	t1,0x13
   2ed54:	5b833303          	ld	t1,1464(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ed58:	000300e7          	jalr	ra,0(t1)
   2ed5c:	f89ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ed60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ed64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ed68:	00000693          	addi	a3,zero,0
   2ed6c:	00009617          	auipc	a2,0x9
   2ed70:	6a960613          	addi	a2,a2,1705 # 38415 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8fd>
   2ed74:	00009597          	auipc	a1,0x9
   2ed78:	68c58593          	addi	a1,a1,1676 # 38400 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e8>
   2ed7c:	00013317          	auipc	t1,0x13
   2ed80:	58c33303          	ld	t1,1420(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ed84:	000300e7          	jalr	ra,0(t1)
   2ed88:	f5dff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ed8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ed90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ed94:	00000693          	addi	a3,zero,0
   2ed98:	00009617          	auipc	a2,0x9
   2ed9c:	69660613          	addi	a2,a2,1686 # 3842e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x916>
   2eda0:	00009597          	auipc	a1,0x9
   2eda4:	67858593          	addi	a1,a1,1656 # 38418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x900>
   2eda8:	00013317          	auipc	t1,0x13
   2edac:	56033303          	ld	t1,1376(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2edb0:	000300e7          	jalr	ra,0(t1)
   2edb4:	f31ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2edb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2edbc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2edc0:	00000693          	addi	a3,zero,0
   2edc4:	00009617          	auipc	a2,0x9
   2edc8:	68260613          	addi	a2,a2,1666 # 38446 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x92e>
   2edcc:	00009597          	auipc	a1,0x9
   2edd0:	66458593          	addi	a1,a1,1636 # 38430 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x918>
   2edd4:	00013317          	auipc	t1,0x13
   2edd8:	53433303          	ld	t1,1332(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eddc:	000300e7          	jalr	ra,0(t1)
   2ede0:	f05ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ede4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ede8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2edec:	00000693          	addi	a3,zero,0
   2edf0:	00009617          	auipc	a2,0x9
   2edf4:	66c60613          	addi	a2,a2,1644 # 3845c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x944>
   2edf8:	00009597          	auipc	a1,0x9
   2edfc:	65058593          	addi	a1,a1,1616 # 38448 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x930>
   2ee00:	00013317          	auipc	t1,0x13
   2ee04:	50833303          	ld	t1,1288(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ee08:	000300e7          	jalr	ra,0(t1)
   2ee0c:	ed9ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ee10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ee14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ee18:	00000693          	addi	a3,zero,0
   2ee1c:	00009617          	auipc	a2,0x9
   2ee20:	65560613          	addi	a2,a2,1621 # 38471 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x959>
   2ee24:	00009597          	auipc	a1,0x9
   2ee28:	63c58593          	addi	a1,a1,1596 # 38460 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x948>
   2ee2c:	00013317          	auipc	t1,0x13
   2ee30:	4dc33303          	ld	t1,1244(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ee34:	000300e7          	jalr	ra,0(t1)
   2ee38:	eadff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ee3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ee40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ee44:	00000693          	addi	a3,zero,0
   2ee48:	00009617          	auipc	a2,0x9
   2ee4c:	64160613          	addi	a2,a2,1601 # 38489 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x971>
   2ee50:	00009597          	auipc	a1,0x9
   2ee54:	62858593          	addi	a1,a1,1576 # 38478 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x960>
   2ee58:	00013317          	auipc	t1,0x13
   2ee5c:	4b033303          	ld	t1,1200(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ee60:	000300e7          	jalr	ra,0(t1)
   2ee64:	e81ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ee68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ee6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ee70:	00000693          	addi	a3,zero,0
   2ee74:	00009617          	auipc	a2,0x9
   2ee78:	63060613          	addi	a2,a2,1584 # 384a4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98c>
   2ee7c:	00009597          	auipc	a1,0x9
   2ee80:	61458593          	addi	a1,a1,1556 # 38490 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x978>
   2ee84:	00013317          	auipc	t1,0x13
   2ee88:	48433303          	ld	t1,1156(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ee8c:	000300e7          	jalr	ra,0(t1)
   2ee90:	e55ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ee94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ee98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ee9c:	00000693          	addi	a3,zero,0
   2eea0:	00009617          	auipc	a2,0x9
   2eea4:	61860613          	addi	a2,a2,1560 # 384b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a0>
   2eea8:	00009597          	auipc	a1,0x9
   2eeac:	60058593          	addi	a1,a1,1536 # 384a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x990>
   2eeb0:	00013317          	auipc	t1,0x13
   2eeb4:	45833303          	ld	t1,1112(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eeb8:	000300e7          	jalr	ra,0(t1)
   2eebc:	e29ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eec0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eec4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eec8:	00000693          	addi	a3,zero,0
   2eecc:	00009617          	auipc	a2,0x9
   2eed0:	60a60613          	addi	a2,a2,1546 # 384d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9be>
   2eed4:	00009597          	auipc	a1,0x9
   2eed8:	5ec58593          	addi	a1,a1,1516 # 384c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a8>
   2eedc:	00013317          	auipc	t1,0x13
   2eee0:	42c33303          	ld	t1,1068(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2eee4:	000300e7          	jalr	ra,0(t1)
   2eee8:	dfdff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2eeec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2eef0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2eef4:	00000693          	addi	a3,zero,0
   2eef8:	00009617          	auipc	a2,0x9
   2eefc:	5f660613          	addi	a2,a2,1526 # 384ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d6>
   2ef00:	00009597          	auipc	a1,0x9
   2ef04:	5d858593          	addi	a1,a1,1496 # 384d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9c0>
   2ef08:	00013317          	auipc	t1,0x13
   2ef0c:	40033303          	ld	t1,1024(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ef10:	000300e7          	jalr	ra,0(t1)
   2ef14:	dd1ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ef18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ef1c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ef20:	00000693          	addi	a3,zero,0
   2ef24:	00009617          	auipc	a2,0x9
   2ef28:	5df60613          	addi	a2,a2,1503 # 38503 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9eb>
   2ef2c:	00009597          	auipc	a1,0x9
   2ef30:	5c458593          	addi	a1,a1,1476 # 384f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d8>
   2ef34:	00013317          	auipc	t1,0x13
   2ef38:	3d433303          	ld	t1,980(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ef3c:	000300e7          	jalr	ra,0(t1)
   2ef40:	da5ff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
    const bool __neg = __val < 0;
   2ef44:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2ef48:	0005891b          	addiw	s2,a1,0
   2ef4c:	0605ce63          	blt	a1,zero,2efc8 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x350>
    const auto __len = __detail::__to_chars_len(__uval);
   2ef50:	00a00593          	addi	a1,zero,10
   2ef54:	00090513          	addi	a0,s2,0
   2ef58:	00013317          	auipc	t1,0x13
   2ef5c:	54033303          	ld	t1,1344(t1) # 42498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x18154>
   2ef60:	000300e7          	jalr	ra,0(t1)
   2ef64:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2ef68:	01010793          	addi	a5,sp,16
   2ef6c:	00f13023          	sd	a5,0(sp)
    string __str(__neg + __len, '-');
   2ef70:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   2ef74:	02d00613          	addi	a2,zero,45
   2ef78:	02059593          	slli	a1,a1,0x20
   2ef7c:	0205d593          	srli	a1,a1,0x20
   2ef80:	00010493          	addi	s1,sp,0
   2ef84:	00048513          	addi	a0,s1,0
   2ef88:	de8e70ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   2ef8c:	00090613          	addi	a2,s2,0
   2ef90:	000a0593          	addi	a1,s4,0
   2ef94:	00013503          	ld	a0,0(sp)
   2ef98:	01350533          	add	a0,a0,s3
   2ef9c:	00013317          	auipc	t1,0x13
   2efa0:	51c33303          	ld	t1,1308(t1) # 424b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x180d8>
   2efa4:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2efa8:	00d00713          	addi	a4,zero,13
   2efac:	00009697          	auipc	a3,0x9
   2efb0:	55c68693          	addi	a3,a3,1372 # 38508 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9f0>
   2efb4:	00000613          	addi	a2,zero,0
   2efb8:	00000593          	addi	a1,zero,0
   2efbc:	00048513          	addi	a0,s1,0
   2efc0:	ea0e70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2efc4:	00c0006f          	jal	zero,2efd0 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x358>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2efc8:	40b0093b          	subw	s2,zero,a1
   2efcc:	f85ff06f          	jal	zero,2ef50 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2d8>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2efd0:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2efd4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2efd8:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2efdc:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2efe0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2efe4:	03278c63          	beq	a5,s2,2f01c <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x3a4>
      { _M_dataplus._M_p = __p; }
   2efe8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2efec:	0104b783          	ld	a5,16(s1)
   2eff0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2eff4:	0084b783          	ld	a5,8(s1)
   2eff8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2effc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f000:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f004:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f008:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f00c:	01010793          	addi	a5,sp,16
   2f010:	ccf50ae3          	beq	a0,a5,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f014:	cfce70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f018:	ccdff06f          	jal	zero,2ece4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f01c:	0084b603          	ld	a2,8(s1)
   2f020:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f024:	fc0608e3          	beq	a2,zero,2eff4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x37c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f028:	00090593          	addi	a1,s2,0
   2f02c:	d84e70ef          	jal	ra,165b0 <memcpy@plt>
   2f030:	fc5ff06f          	jal	zero,2eff4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x37c>
      { return _M_dataplus._M_p; }
   2f034:	00050413          	addi	s0,a0,0
   2f038:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f03c:	01010793          	addi	a5,sp,16
   2f040:	00f50463          	beq	a0,a5,2f048 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x3d0>
   2f044:	ccce70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f048:	00040513          	addi	a0,s0,0
   2f04c:	ea4e70ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002f050 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)>:
{
   2f050:	fc010113          	addi	sp,sp,-64
   2f054:	02113c23          	sd	ra,56(sp)
   2f058:	02813823          	sd	s0,48(sp)
   2f05c:	02913423          	sd	s1,40(sp)
   2f060:	03213023          	sd	s2,32(sp)
   2f064:	00050413          	addi	s0,a0,0
        switch (v) {
   2f068:	01000793          	addi	a5,zero,16
   2f06c:	2eb7ec63          	bltu	a5,a1,2f364 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x314>
   2f070:	00259793          	slli	a5,a1,0x2
   2f074:	0000b717          	auipc	a4,0xb
   2f078:	ba070713          	addi	a4,a4,-1120 # 39c14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20fc>
   2f07c:	00e787b3          	add	a5,a5,a4
   2f080:	0007a783          	lw	a5,0(a5)
   2f084:	00e787b3          	add	a5,a5,a4
   2f088:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f08c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f090:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f094:	00000693          	addi	a3,zero,0
   2f098:	00009617          	auipc	a2,0x9
   2f09c:	48e60613          	addi	a2,a2,1166 # 38526 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa0e>
   2f0a0:	00009597          	auipc	a1,0x9
   2f0a4:	47858593          	addi	a1,a1,1144 # 38518 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa00>
   2f0a8:	00013317          	auipc	t1,0x13
   2f0ac:	26033303          	ld	t1,608(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f0b0:	000300e7          	jalr	ra,0(t1)
}
   2f0b4:	00040513          	addi	a0,s0,0
   2f0b8:	03813083          	ld	ra,56(sp)
   2f0bc:	03013403          	ld	s0,48(sp)
   2f0c0:	02813483          	ld	s1,40(sp)
   2f0c4:	02013903          	ld	s2,32(sp)
   2f0c8:	04010113          	addi	sp,sp,64
   2f0cc:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f0d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f0d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f0d8:	00000693          	addi	a3,zero,0
   2f0dc:	00009617          	auipc	a2,0x9
   2f0e0:	45a60613          	addi	a2,a2,1114 # 38536 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa1e>
   2f0e4:	00009597          	auipc	a1,0x9
   2f0e8:	44458593          	addi	a1,a1,1092 # 38528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa10>
   2f0ec:	00013317          	auipc	t1,0x13
   2f0f0:	21c33303          	ld	t1,540(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f0f4:	000300e7          	jalr	ra,0(t1)
   2f0f8:	fbdff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f0fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f100:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f104:	00000693          	addi	a3,zero,0
   2f108:	00009617          	auipc	a2,0x9
   2f10c:	44460613          	addi	a2,a2,1092 # 3854c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa34>
   2f110:	00009597          	auipc	a1,0x9
   2f114:	42858593          	addi	a1,a1,1064 # 38538 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa20>
   2f118:	00013317          	auipc	t1,0x13
   2f11c:	1f033303          	ld	t1,496(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f120:	000300e7          	jalr	ra,0(t1)
   2f124:	f91ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f128:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f12c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f130:	00000693          	addi	a3,zero,0
   2f134:	00009617          	auipc	a2,0x9
   2f138:	42860613          	addi	a2,a2,1064 # 3855c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa44>
   2f13c:	00009597          	auipc	a1,0x9
   2f140:	41458593          	addi	a1,a1,1044 # 38550 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa38>
   2f144:	00013317          	auipc	t1,0x13
   2f148:	1c433303          	ld	t1,452(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f14c:	000300e7          	jalr	ra,0(t1)
   2f150:	f65ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f154:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f158:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f15c:	00000693          	addi	a3,zero,0
   2f160:	00009617          	auipc	a2,0x9
   2f164:	40d60613          	addi	a2,a2,1037 # 3856d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa55>
   2f168:	00009597          	auipc	a1,0x9
   2f16c:	3f858593          	addi	a1,a1,1016 # 38560 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa48>
   2f170:	00013317          	auipc	t1,0x13
   2f174:	19833303          	ld	t1,408(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f178:	000300e7          	jalr	ra,0(t1)
   2f17c:	f39ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f180:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f184:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f188:	00000693          	addi	a3,zero,0
   2f18c:	00009617          	auipc	a2,0x9
   2f190:	3f660613          	addi	a2,a2,1014 # 38582 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa6a>
   2f194:	00009597          	auipc	a1,0x9
   2f198:	3dc58593          	addi	a1,a1,988 # 38570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa58>
   2f19c:	00013317          	auipc	t1,0x13
   2f1a0:	16c33303          	ld	t1,364(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f1a4:	000300e7          	jalr	ra,0(t1)
   2f1a8:	f0dff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f1ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f1b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f1b4:	00000693          	addi	a3,zero,0
   2f1b8:	00009617          	auipc	a2,0x9
   2f1bc:	3df60613          	addi	a2,a2,991 # 38597 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa7f>
   2f1c0:	00009597          	auipc	a1,0x9
   2f1c4:	3c858593          	addi	a1,a1,968 # 38588 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa70>
   2f1c8:	00013317          	auipc	t1,0x13
   2f1cc:	14033303          	ld	t1,320(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f1d0:	000300e7          	jalr	ra,0(t1)
   2f1d4:	ee1ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f1d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f1dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f1e0:	00000693          	addi	a3,zero,0
   2f1e4:	00009617          	auipc	a2,0x9
   2f1e8:	3c860613          	addi	a2,a2,968 # 385ac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa94>
   2f1ec:	00009597          	auipc	a1,0x9
   2f1f0:	3ac58593          	addi	a1,a1,940 # 38598 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa80>
   2f1f4:	00013317          	auipc	t1,0x13
   2f1f8:	11433303          	ld	t1,276(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f1fc:	000300e7          	jalr	ra,0(t1)
   2f200:	eb5ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f204:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f208:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f20c:	00000693          	addi	a3,zero,0
   2f210:	00009617          	auipc	a2,0x9
   2f214:	3b660613          	addi	a2,a2,950 # 385c6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaae>
   2f218:	00009597          	auipc	a1,0x9
   2f21c:	39858593          	addi	a1,a1,920 # 385b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa98>
   2f220:	00013317          	auipc	t1,0x13
   2f224:	0e833303          	ld	t1,232(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f228:	000300e7          	jalr	ra,0(t1)
   2f22c:	e89ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f230:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f234:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f238:	00000693          	addi	a3,zero,0
   2f23c:	00009617          	auipc	a2,0x9
   2f240:	3a160613          	addi	a2,a2,929 # 385dd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac5>
   2f244:	00009597          	auipc	a1,0x9
   2f248:	38458593          	addi	a1,a1,900 # 385c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xab0>
   2f24c:	00013317          	auipc	t1,0x13
   2f250:	0bc33303          	ld	t1,188(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f254:	000300e7          	jalr	ra,0(t1)
   2f258:	e5dff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f25c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f260:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f264:	00000693          	addi	a3,zero,0
   2f268:	00009617          	auipc	a2,0x9
   2f26c:	38d60613          	addi	a2,a2,909 # 385f5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xadd>
   2f270:	00009597          	auipc	a1,0x9
   2f274:	37058593          	addi	a1,a1,880 # 385e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac8>
   2f278:	00013317          	auipc	t1,0x13
   2f27c:	09033303          	ld	t1,144(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f280:	000300e7          	jalr	ra,0(t1)
   2f284:	e31ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f288:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f28c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f290:	00000693          	addi	a3,zero,0
   2f294:	00009617          	auipc	a2,0x9
   2f298:	37160613          	addi	a2,a2,881 # 38605 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaed>
   2f29c:	00009597          	auipc	a1,0x9
   2f2a0:	35c58593          	addi	a1,a1,860 # 385f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xae0>
   2f2a4:	00013317          	auipc	t1,0x13
   2f2a8:	06433303          	ld	t1,100(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f2ac:	000300e7          	jalr	ra,0(t1)
   2f2b0:	e05ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f2b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f2b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f2bc:	00000693          	addi	a3,zero,0
   2f2c0:	00009617          	auipc	a2,0x9
   2f2c4:	35b60613          	addi	a2,a2,859 # 3861b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb03>
   2f2c8:	00009597          	auipc	a1,0x9
   2f2cc:	34058593          	addi	a1,a1,832 # 38608 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaf0>
   2f2d0:	00013317          	auipc	t1,0x13
   2f2d4:	03833303          	ld	t1,56(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f2d8:	000300e7          	jalr	ra,0(t1)
   2f2dc:	dd9ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f2e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f2e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f2e8:	00000693          	addi	a3,zero,0
   2f2ec:	00009617          	auipc	a2,0x9
   2f2f0:	34960613          	addi	a2,a2,841 # 38635 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb1d>
   2f2f4:	00009597          	auipc	a1,0x9
   2f2f8:	32c58593          	addi	a1,a1,812 # 38620 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb08>
   2f2fc:	00013317          	auipc	t1,0x13
   2f300:	00c33303          	ld	t1,12(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f304:	000300e7          	jalr	ra,0(t1)
   2f308:	dadff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f30c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f310:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f314:	00000693          	addi	a3,zero,0
   2f318:	00009617          	auipc	a2,0x9
   2f31c:	33460613          	addi	a2,a2,820 # 3864c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb34>
   2f320:	00009597          	auipc	a1,0x9
   2f324:	31858593          	addi	a1,a1,792 # 38638 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb20>
   2f328:	00013317          	auipc	t1,0x13
   2f32c:	fe033303          	ld	t1,-32(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f330:	000300e7          	jalr	ra,0(t1)
   2f334:	d81ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f338:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f33c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f340:	00000693          	addi	a3,zero,0
   2f344:	00009617          	auipc	a2,0x9
   2f348:	31660613          	addi	a2,a2,790 # 3865a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb42>
   2f34c:	00009597          	auipc	a1,0x9
   2f350:	30458593          	addi	a1,a1,772 # 38650 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb38>
   2f354:	00013317          	auipc	t1,0x13
   2f358:	fb433303          	ld	t1,-76(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f35c:	000300e7          	jalr	ra,0(t1)
   2f360:	d55ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
        return "(DW_ATE)0x" + to_hex((int)v);
   2f364:	00010493          	addi	s1,sp,0
   2f368:	00048513          	addi	a0,s1,0
   2f36c:	00013317          	auipc	t1,0x13
   2f370:	0ac33303          	ld	t1,172(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2f374:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f378:	00a00713          	addi	a4,zero,10
   2f37c:	00009697          	auipc	a3,0x9
   2f380:	2e468693          	addi	a3,a3,740 # 38660 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb48>
   2f384:	00000613          	addi	a2,zero,0
   2f388:	00000593          	addi	a1,zero,0
   2f38c:	00048513          	addi	a0,s1,0
   2f390:	ad0e70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f394:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f398:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f39c:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f3a0:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f3a4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f3a8:	03278c63          	beq	a5,s2,2f3e0 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x390>
      { _M_dataplus._M_p = __p; }
   2f3ac:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f3b0:	0104b783          	ld	a5,16(s1)
   2f3b4:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f3b8:	0084b783          	ld	a5,8(s1)
   2f3bc:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f3c0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f3c4:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f3c8:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f3cc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f3d0:	01010793          	addi	a5,sp,16
   2f3d4:	cef500e3          	beq	a0,a5,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f3d8:	938e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f3dc:	cd9ff06f          	jal	zero,2f0b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f3e0:	0084b603          	ld	a2,8(s1)
   2f3e4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f3e8:	fc0608e3          	beq	a2,zero,2f3b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x368>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f3ec:	00090593          	addi	a1,s2,0
   2f3f0:	9c0e70ef          	jal	ra,165b0 <memcpy@plt>
   2f3f4:	fc5ff06f          	jal	zero,2f3b8 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x368>
      { return _M_dataplus._M_p; }
   2f3f8:	00050413          	addi	s0,a0,0
   2f3fc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f400:	01010793          	addi	a5,sp,16
   2f404:	00f50463          	beq	a0,a5,2f40c <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x3bc>
   2f408:	908e70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f40c:	00040513          	addi	a0,s0,0
   2f410:	ae0e70ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002f414 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)>:
{
   2f414:	fc010113          	addi	sp,sp,-64
   2f418:	02113c23          	sd	ra,56(sp)
   2f41c:	02813823          	sd	s0,48(sp)
   2f420:	02913423          	sd	s1,40(sp)
   2f424:	03213023          	sd	s2,32(sp)
   2f428:	00050413          	addi	s0,a0,0
        switch (v) {
   2f42c:	01400793          	addi	a5,zero,20
   2f430:	3ab7e463          	bltu	a5,a1,2f7d8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x3c4>
   2f434:	00259793          	slli	a5,a1,0x2
   2f438:	0000b717          	auipc	a4,0xb
   2f43c:	82070713          	addi	a4,a4,-2016 # 39c58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2140>
   2f440:	00e787b3          	add	a5,a5,a4
   2f444:	0007a783          	lw	a5,0(a5)
   2f448:	00e787b3          	add	a5,a5,a4
   2f44c:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f450:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f454:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f458:	00000693          	addi	a3,zero,0
   2f45c:	00009617          	auipc	a2,0x9
   2f460:	21f60613          	addi	a2,a2,543 # 3867b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb63>
   2f464:	00009597          	auipc	a1,0x9
   2f468:	20c58593          	addi	a1,a1,524 # 38670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb58>
   2f46c:	00013317          	auipc	t1,0x13
   2f470:	e9c33303          	ld	t1,-356(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f474:	000300e7          	jalr	ra,0(t1)
}
   2f478:	00040513          	addi	a0,s0,0
   2f47c:	03813083          	ld	ra,56(sp)
   2f480:	03013403          	ld	s0,48(sp)
   2f484:	02813483          	ld	s1,40(sp)
   2f488:	02013903          	ld	s2,32(sp)
   2f48c:	04010113          	addi	sp,sp,64
   2f490:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f494:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f498:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f49c:	00000693          	addi	a3,zero,0
   2f4a0:	00009617          	auipc	a2,0x9
   2f4a4:	1e960613          	addi	a2,a2,489 # 38689 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb71>
   2f4a8:	00009597          	auipc	a1,0x9
   2f4ac:	1d858593          	addi	a1,a1,472 # 38680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb68>
   2f4b0:	00013317          	auipc	t1,0x13
   2f4b4:	e5833303          	ld	t1,-424(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f4b8:	000300e7          	jalr	ra,0(t1)
   2f4bc:	fbdff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f4c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f4c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f4c8:	00000693          	addi	a3,zero,0
   2f4cc:	00009617          	auipc	a2,0x9
   2f4d0:	1d160613          	addi	a2,a2,465 # 3869d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb85>
   2f4d4:	00009597          	auipc	a1,0x9
   2f4d8:	1bc58593          	addi	a1,a1,444 # 38690 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb78>
   2f4dc:	00013317          	auipc	t1,0x13
   2f4e0:	e2c33303          	ld	t1,-468(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f4e4:	000300e7          	jalr	ra,0(t1)
   2f4e8:	f91ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f4ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f4f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f4f4:	00000693          	addi	a3,zero,0
   2f4f8:	00009617          	auipc	a2,0x9
   2f4fc:	1bb60613          	addi	a2,a2,443 # 386b3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb9b>
   2f500:	00009597          	auipc	a1,0x9
   2f504:	1a058593          	addi	a1,a1,416 # 386a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb88>
   2f508:	00013317          	auipc	t1,0x13
   2f50c:	e0033303          	ld	t1,-512(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f510:	000300e7          	jalr	ra,0(t1)
   2f514:	f65ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f518:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f51c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f520:	00000693          	addi	a3,zero,0
   2f524:	00009617          	auipc	a2,0x9
   2f528:	1a360613          	addi	a2,a2,419 # 386c7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbaf>
   2f52c:	00009597          	auipc	a1,0x9
   2f530:	18c58593          	addi	a1,a1,396 # 386b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xba0>
   2f534:	00013317          	auipc	t1,0x13
   2f538:	dd433303          	ld	t1,-556(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f53c:	000300e7          	jalr	ra,0(t1)
   2f540:	f39ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f544:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f548:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f54c:	00000693          	addi	a3,zero,0
   2f550:	00009617          	auipc	a2,0x9
   2f554:	18760613          	addi	a2,a2,391 # 386d7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbbf>
   2f558:	00009597          	auipc	a1,0x9
   2f55c:	17058593          	addi	a1,a1,368 # 386c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbb0>
   2f560:	00013317          	auipc	t1,0x13
   2f564:	da833303          	ld	t1,-600(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f568:	000300e7          	jalr	ra,0(t1)
   2f56c:	f0dff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f570:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f574:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f578:	00000693          	addi	a3,zero,0
   2f57c:	00009617          	auipc	a2,0x9
   2f580:	16d60613          	addi	a2,a2,365 # 386e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd1>
   2f584:	00009597          	auipc	a1,0x9
   2f588:	15458593          	addi	a1,a1,340 # 386d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbc0>
   2f58c:	00013317          	auipc	t1,0x13
   2f590:	d7c33303          	ld	t1,-644(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f594:	000300e7          	jalr	ra,0(t1)
   2f598:	ee1ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f59c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f5a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f5a4:	00000693          	addi	a3,zero,0
   2f5a8:	00009617          	auipc	a2,0x9
   2f5ac:	15960613          	addi	a2,a2,345 # 38701 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   2f5b0:	00009597          	auipc	a1,0x9
   2f5b4:	14058593          	addi	a1,a1,320 # 386f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd8>
   2f5b8:	00013317          	auipc	t1,0x13
   2f5bc:	d5033303          	ld	t1,-688(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f5c0:	000300e7          	jalr	ra,0(t1)
   2f5c4:	eb5ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f5c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f5cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f5d0:	00000693          	addi	a3,zero,0
   2f5d4:	00009617          	auipc	a2,0x9
   2f5d8:	14460613          	addi	a2,a2,324 # 38718 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc00>
   2f5dc:	00009597          	auipc	a1,0x9
   2f5e0:	12c58593          	addi	a1,a1,300 # 38708 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbf0>
   2f5e4:	00013317          	auipc	t1,0x13
   2f5e8:	d2433303          	ld	t1,-732(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f5ec:	000300e7          	jalr	ra,0(t1)
   2f5f0:	e89ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f5f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f5f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f5fc:	00000693          	addi	a3,zero,0
   2f600:	00009617          	auipc	a2,0x9
   2f604:	12f60613          	addi	a2,a2,303 # 3872f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc17>
   2f608:	00009597          	auipc	a1,0x9
   2f60c:	11858593          	addi	a1,a1,280 # 38720 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc08>
   2f610:	00013317          	auipc	t1,0x13
   2f614:	cf833303          	ld	t1,-776(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f618:	000300e7          	jalr	ra,0(t1)
   2f61c:	e5dff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f620:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f624:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f628:	00000693          	addi	a3,zero,0
   2f62c:	00009617          	auipc	a2,0x9
   2f630:	11060613          	addi	a2,a2,272 # 3873c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc24>
   2f634:	00009597          	auipc	a1,0x9
   2f638:	0fc58593          	addi	a1,a1,252 # 38730 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc18>
   2f63c:	00013317          	auipc	t1,0x13
   2f640:	ccc33303          	ld	t1,-820(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f644:	000300e7          	jalr	ra,0(t1)
   2f648:	e31ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f64c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f650:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f654:	00000693          	addi	a3,zero,0
   2f658:	00009617          	auipc	a2,0x9
   2f65c:	0f360613          	addi	a2,a2,243 # 3874b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc33>
   2f660:	00009597          	auipc	a1,0x9
   2f664:	0e058593          	addi	a1,a1,224 # 38740 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc28>
   2f668:	00013317          	auipc	t1,0x13
   2f66c:	ca033303          	ld	t1,-864(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f670:	000300e7          	jalr	ra,0(t1)
   2f674:	e05ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f678:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f67c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f680:	00000693          	addi	a3,zero,0
   2f684:	00009617          	auipc	a2,0x9
   2f688:	0d960613          	addi	a2,a2,217 # 3875d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc45>
   2f68c:	00009597          	auipc	a1,0x9
   2f690:	0c458593          	addi	a1,a1,196 # 38750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc38>
   2f694:	00013317          	auipc	t1,0x13
   2f698:	c7433303          	ld	t1,-908(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f69c:	000300e7          	jalr	ra,0(t1)
   2f6a0:	dd9ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f6a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f6a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f6ac:	00000693          	addi	a3,zero,0
   2f6b0:	00009617          	auipc	a2,0x9
   2f6b4:	0c160613          	addi	a2,a2,193 # 38771 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc59>
   2f6b8:	00009597          	auipc	a1,0x9
   2f6bc:	0a858593          	addi	a1,a1,168 # 38760 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc48>
   2f6c0:	00013317          	auipc	t1,0x13
   2f6c4:	c4833303          	ld	t1,-952(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f6c8:	000300e7          	jalr	ra,0(t1)
   2f6cc:	dadff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f6d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f6d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f6d8:	00000693          	addi	a3,zero,0
   2f6dc:	00009617          	auipc	a2,0x9
   2f6e0:	0a760613          	addi	a2,a2,167 # 38783 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc6b>
   2f6e4:	00009597          	auipc	a1,0x9
   2f6e8:	09458593          	addi	a1,a1,148 # 38778 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc60>
   2f6ec:	00013317          	auipc	t1,0x13
   2f6f0:	c1c33303          	ld	t1,-996(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f6f4:	000300e7          	jalr	ra,0(t1)
   2f6f8:	d81ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f6fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f700:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f704:	00000693          	addi	a3,zero,0
   2f708:	00009617          	auipc	a2,0x9
   2f70c:	08c60613          	addi	a2,a2,140 # 38794 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc7c>
   2f710:	00009597          	auipc	a1,0x9
   2f714:	07858593          	addi	a1,a1,120 # 38788 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc70>
   2f718:	00013317          	auipc	t1,0x13
   2f71c:	bf033303          	ld	t1,-1040(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f720:	000300e7          	jalr	ra,0(t1)
   2f724:	d55ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f728:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f72c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f730:	00000693          	addi	a3,zero,0
   2f734:	00009617          	auipc	a2,0x9
   2f738:	07a60613          	addi	a2,a2,122 # 387ae <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc96>
   2f73c:	00009597          	auipc	a1,0x9
   2f740:	05c58593          	addi	a1,a1,92 # 38798 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc80>
   2f744:	00013317          	auipc	t1,0x13
   2f748:	bc433303          	ld	t1,-1084(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f74c:	000300e7          	jalr	ra,0(t1)
   2f750:	d29ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f754:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f758:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f75c:	00000693          	addi	a3,zero,0
   2f760:	00009617          	auipc	a2,0x9
   2f764:	05b60613          	addi	a2,a2,91 # 387bb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca3>
   2f768:	00009597          	auipc	a1,0x9
   2f76c:	04858593          	addi	a1,a1,72 # 387b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc98>
   2f770:	00013317          	auipc	t1,0x13
   2f774:	b9833303          	ld	t1,-1128(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f778:	000300e7          	jalr	ra,0(t1)
   2f77c:	cfdff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f780:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f784:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f788:	00000693          	addi	a3,zero,0
   2f78c:	00009617          	auipc	a2,0x9
   2f790:	03d60613          	addi	a2,a2,61 # 387c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb1>
   2f794:	00009597          	auipc	a1,0x9
   2f798:	02c58593          	addi	a1,a1,44 # 387c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca8>
   2f79c:	00013317          	auipc	t1,0x13
   2f7a0:	b6c33303          	ld	t1,-1172(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f7a4:	000300e7          	jalr	ra,0(t1)
   2f7a8:	cd1ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f7ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f7b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f7b4:	00000693          	addi	a3,zero,0
   2f7b8:	00009617          	auipc	a2,0x9
   2f7bc:	02660613          	addi	a2,a2,38 # 387de <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc6>
   2f7c0:	00009597          	auipc	a1,0x9
   2f7c4:	01058593          	addi	a1,a1,16 # 387d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb8>
   2f7c8:	00013317          	auipc	t1,0x13
   2f7cc:	b4033303          	ld	t1,-1216(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f7d0:	000300e7          	jalr	ra,0(t1)
   2f7d4:	ca5ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
        return "(DW_LANG)0x" + to_hex((int)v);
   2f7d8:	00010493          	addi	s1,sp,0
   2f7dc:	00048513          	addi	a0,s1,0
   2f7e0:	00013317          	auipc	t1,0x13
   2f7e4:	c3833303          	ld	t1,-968(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2f7e8:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2f7ec:	00b00713          	addi	a4,zero,11
   2f7f0:	00009697          	auipc	a3,0x9
   2f7f4:	ff068693          	addi	a3,a3,-16 # 387e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc8>
   2f7f8:	00000613          	addi	a2,zero,0
   2f7fc:	00000593          	addi	a1,zero,0
   2f800:	00048513          	addi	a0,s1,0
   2f804:	e5de60ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2f808:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f80c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2f810:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2f814:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2f818:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2f81c:	03278c63          	beq	a5,s2,2f854 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x440>
      { _M_dataplus._M_p = __p; }
   2f820:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2f824:	0104b783          	ld	a5,16(s1)
   2f828:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2f82c:	0084b783          	ld	a5,8(s1)
   2f830:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2f834:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2f838:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2f83c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2f840:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f844:	01010793          	addi	a5,sp,16
   2f848:	c2f508e3          	beq	a0,a5,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2f84c:	cc5e60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2f850:	c29ff06f          	jal	zero,2f478 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2f854:	0084b603          	ld	a2,8(s1)
   2f858:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2f85c:	fc0608e3          	beq	a2,zero,2f82c <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x418>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2f860:	00090593          	addi	a1,s2,0
   2f864:	d4de60ef          	jal	ra,165b0 <memcpy@plt>
   2f868:	fc5ff06f          	jal	zero,2f82c <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x418>
      { return _M_dataplus._M_p; }
   2f86c:	00050413          	addi	s0,a0,0
   2f870:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2f874:	01010793          	addi	a5,sp,16
   2f878:	00f50463          	beq	a0,a5,2f880 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x46c>
   2f87c:	c95e60ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2f880:	00040513          	addi	a0,s0,0
   2f884:	e6de60ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002f888 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>:
{
   2f888:	fc010113          	addi	sp,sp,-64
   2f88c:	02113c23          	sd	ra,56(sp)
   2f890:	02813823          	sd	s0,48(sp)
   2f894:	02913423          	sd	s1,40(sp)
   2f898:	03213023          	sd	s2,32(sp)
   2f89c:	00050413          	addi	s0,a0,0
        switch (v) {
   2f8a0:	02000793          	addi	a5,zero,32
   2f8a4:	48b7e263          	bltu	a5,a1,2fd28 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a0>
   2f8a8:	00259793          	slli	a5,a1,0x2
   2f8ac:	0000a717          	auipc	a4,0xa
   2f8b0:	40070713          	addi	a4,a4,1024 # 39cac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2194>
   2f8b4:	00e787b3          	add	a5,a5,a4
   2f8b8:	0007a783          	lw	a5,0(a5)
   2f8bc:	00e787b3          	add	a5,a5,a4
   2f8c0:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f8c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f8c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f8cc:	00000693          	addi	a3,zero,0
   2f8d0:	00009617          	auipc	a2,0x9
   2f8d4:	f2c60613          	addi	a2,a2,-212 # 387fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce4>
   2f8d8:	00009597          	auipc	a1,0x9
   2f8dc:	f1858593          	addi	a1,a1,-232 # 387f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcd8>
   2f8e0:	00013317          	auipc	t1,0x13
   2f8e4:	a2833303          	ld	t1,-1496(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f8e8:	000300e7          	jalr	ra,0(t1)
}
   2f8ec:	00040513          	addi	a0,s0,0
   2f8f0:	03813083          	ld	ra,56(sp)
   2f8f4:	03013403          	ld	s0,48(sp)
   2f8f8:	02813483          	ld	s1,40(sp)
   2f8fc:	02013903          	ld	s2,32(sp)
   2f900:	04010113          	addi	sp,sp,64
   2f904:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f908:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f90c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f910:	00000693          	addi	a3,zero,0
   2f914:	00009617          	auipc	a2,0x9
   2f918:	efa60613          	addi	a2,a2,-262 # 3880e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf6>
   2f91c:	00009597          	auipc	a1,0x9
   2f920:	ee458593          	addi	a1,a1,-284 # 38800 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce8>
   2f924:	00013317          	auipc	t1,0x13
   2f928:	9e433303          	ld	t1,-1564(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f92c:	000300e7          	jalr	ra,0(t1)
   2f930:	fbdff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f934:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f938:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f93c:	00000693          	addi	a3,zero,0
   2f940:	00009617          	auipc	a2,0x9
   2f944:	ede60613          	addi	a2,a2,-290 # 3881e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd06>
   2f948:	00009597          	auipc	a1,0x9
   2f94c:	ec858593          	addi	a1,a1,-312 # 38810 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf8>
   2f950:	00013317          	auipc	t1,0x13
   2f954:	9b833303          	ld	t1,-1608(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f958:	000300e7          	jalr	ra,0(t1)
   2f95c:	f91ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f960:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f964:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f968:	00000693          	addi	a3,zero,0
   2f96c:	00009617          	auipc	a2,0x9
   2f970:	ec160613          	addi	a2,a2,-319 # 3882d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd15>
   2f974:	00009597          	auipc	a1,0x9
   2f978:	eac58593          	addi	a1,a1,-340 # 38820 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd08>
   2f97c:	00013317          	auipc	t1,0x13
   2f980:	98c33303          	ld	t1,-1652(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f984:	000300e7          	jalr	ra,0(t1)
   2f988:	f65ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f98c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f990:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f994:	00000693          	addi	a3,zero,0
   2f998:	00009617          	auipc	a2,0x9
   2f99c:	ea560613          	addi	a2,a2,-347 # 3883d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd25>
   2f9a0:	00009597          	auipc	a1,0x9
   2f9a4:	e9058593          	addi	a1,a1,-368 # 38830 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd18>
   2f9a8:	00013317          	auipc	t1,0x13
   2f9ac:	96033303          	ld	t1,-1696(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f9b0:	000300e7          	jalr	ra,0(t1)
   2f9b4:	f39ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f9b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f9bc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f9c0:	00000693          	addi	a3,zero,0
   2f9c4:	00009617          	auipc	a2,0x9
   2f9c8:	e8960613          	addi	a2,a2,-375 # 3884d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd35>
   2f9cc:	00009597          	auipc	a1,0x9
   2f9d0:	e7458593          	addi	a1,a1,-396 # 38840 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd28>
   2f9d4:	00013317          	auipc	t1,0x13
   2f9d8:	93433303          	ld	t1,-1740(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2f9dc:	000300e7          	jalr	ra,0(t1)
   2f9e0:	f0dff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2f9e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2f9e8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2f9ec:	00000693          	addi	a3,zero,0
   2f9f0:	00009617          	auipc	a2,0x9
   2f9f4:	e6e60613          	addi	a2,a2,-402 # 3885e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd46>
   2f9f8:	00009597          	auipc	a1,0x9
   2f9fc:	e5858593          	addi	a1,a1,-424 # 38850 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd38>
   2fa00:	00013317          	auipc	t1,0x13
   2fa04:	90833303          	ld	t1,-1784(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fa08:	000300e7          	jalr	ra,0(t1)
   2fa0c:	ee1ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa18:	00000693          	addi	a3,zero,0
   2fa1c:	00009617          	auipc	a2,0x9
   2fa20:	e5160613          	addi	a2,a2,-431 # 3886d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd55>
   2fa24:	00009597          	auipc	a1,0x9
   2fa28:	e3c58593          	addi	a1,a1,-452 # 38860 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd48>
   2fa2c:	00013317          	auipc	t1,0x13
   2fa30:	8dc33303          	ld	t1,-1828(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fa34:	000300e7          	jalr	ra,0(t1)
   2fa38:	eb5ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa44:	00000693          	addi	a3,zero,0
   2fa48:	00009617          	auipc	a2,0x9
   2fa4c:	e3660613          	addi	a2,a2,-458 # 3887e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd66>
   2fa50:	00009597          	auipc	a1,0x9
   2fa54:	e2058593          	addi	a1,a1,-480 # 38870 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd58>
   2fa58:	00013317          	auipc	t1,0x13
   2fa5c:	8b033303          	ld	t1,-1872(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fa60:	000300e7          	jalr	ra,0(t1)
   2fa64:	e89ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa70:	00000693          	addi	a3,zero,0
   2fa74:	00009617          	auipc	a2,0x9
   2fa78:	e1960613          	addi	a2,a2,-487 # 3888d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd75>
   2fa7c:	00009597          	auipc	a1,0x9
   2fa80:	e0458593          	addi	a1,a1,-508 # 38880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd68>
   2fa84:	00013317          	auipc	t1,0x13
   2fa88:	88433303          	ld	t1,-1916(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fa8c:	000300e7          	jalr	ra,0(t1)
   2fa90:	e5dff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fa94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fa98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fa9c:	00000693          	addi	a3,zero,0
   2faa0:	00009617          	auipc	a2,0x9
   2faa4:	dfc60613          	addi	a2,a2,-516 # 3889c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd84>
   2faa8:	00009597          	auipc	a1,0x9
   2faac:	de858593          	addi	a1,a1,-536 # 38890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd78>
   2fab0:	00013317          	auipc	t1,0x13
   2fab4:	85833303          	ld	t1,-1960(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fab8:	000300e7          	jalr	ra,0(t1)
   2fabc:	e31ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fac0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fac4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fac8:	00000693          	addi	a3,zero,0
   2facc:	00009617          	auipc	a2,0x9
   2fad0:	de160613          	addi	a2,a2,-543 # 388ad <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd95>
   2fad4:	00009597          	auipc	a1,0x9
   2fad8:	dcc58593          	addi	a1,a1,-564 # 388a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd88>
   2fadc:	00013317          	auipc	t1,0x13
   2fae0:	82c33303          	ld	t1,-2004(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fae4:	000300e7          	jalr	ra,0(t1)
   2fae8:	e05ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2faec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2faf0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2faf4:	00000693          	addi	a3,zero,0
   2faf8:	00009617          	auipc	a2,0x9
   2fafc:	dc460613          	addi	a2,a2,-572 # 388bc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda4>
   2fb00:	00009597          	auipc	a1,0x9
   2fb04:	db058593          	addi	a1,a1,-592 # 388b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd98>
   2fb08:	00013317          	auipc	t1,0x13
   2fb0c:	80033303          	ld	t1,-2048(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fb10:	000300e7          	jalr	ra,0(t1)
   2fb14:	dd9ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb1c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb20:	00000693          	addi	a3,zero,0
   2fb24:	00009617          	auipc	a2,0x9
   2fb28:	da960613          	addi	a2,a2,-599 # 388cd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb5>
   2fb2c:	00009597          	auipc	a1,0x9
   2fb30:	d9458593          	addi	a1,a1,-620 # 388c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda8>
   2fb34:	00012317          	auipc	t1,0x12
   2fb38:	7d433303          	ld	t1,2004(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fb3c:	000300e7          	jalr	ra,0(t1)
   2fb40:	dadff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb48:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb4c:	00000693          	addi	a3,zero,0
   2fb50:	00009617          	auipc	a2,0x9
   2fb54:	d9060613          	addi	a2,a2,-624 # 388e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdc8>
   2fb58:	00009597          	auipc	a1,0x9
   2fb5c:	d7858593          	addi	a1,a1,-648 # 388d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb8>
   2fb60:	00012317          	auipc	t1,0x12
   2fb64:	7a833303          	ld	t1,1960(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fb68:	000300e7          	jalr	ra,0(t1)
   2fb6c:	d81ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fb74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fb78:	00000693          	addi	a3,zero,0
   2fb7c:	00009617          	auipc	a2,0x9
   2fb80:	d7860613          	addi	a2,a2,-648 # 388f4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xddc>
   2fb84:	00009597          	auipc	a1,0x9
   2fb88:	d6458593          	addi	a1,a1,-668 # 388e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdd0>
   2fb8c:	00012317          	auipc	t1,0x12
   2fb90:	77c33303          	ld	t1,1916(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fb94:	000300e7          	jalr	ra,0(t1)
   2fb98:	d55ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fb9c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fba0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fba4:	00000693          	addi	a3,zero,0
   2fba8:	00009617          	auipc	a2,0x9
   2fbac:	d5c60613          	addi	a2,a2,-676 # 38904 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdec>
   2fbb0:	00009597          	auipc	a1,0x9
   2fbb4:	d4858593          	addi	a1,a1,-696 # 388f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xde0>
   2fbb8:	00012317          	auipc	t1,0x12
   2fbbc:	75033303          	ld	t1,1872(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fbc0:	000300e7          	jalr	ra,0(t1)
   2fbc4:	d29ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fbc8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fbcc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fbd0:	00000693          	addi	a3,zero,0
   2fbd4:	00009617          	auipc	a2,0x9
   2fbd8:	d4060613          	addi	a2,a2,-704 # 38914 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdfc>
   2fbdc:	00009597          	auipc	a1,0x9
   2fbe0:	d2c58593          	addi	a1,a1,-724 # 38908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdf0>
   2fbe4:	00012317          	auipc	t1,0x12
   2fbe8:	72433303          	ld	t1,1828(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fbec:	000300e7          	jalr	ra,0(t1)
   2fbf0:	cfdff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fbf4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fbf8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fbfc:	00000693          	addi	a3,zero,0
   2fc00:	00009617          	auipc	a2,0x9
   2fc04:	d2460613          	addi	a2,a2,-732 # 38924 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe0c>
   2fc08:	00009597          	auipc	a1,0x9
   2fc0c:	d1058593          	addi	a1,a1,-752 # 38918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe00>
   2fc10:	00012317          	auipc	t1,0x12
   2fc14:	6f833303          	ld	t1,1784(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fc18:	000300e7          	jalr	ra,0(t1)
   2fc1c:	cd1ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fc20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fc24:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fc28:	00000693          	addi	a3,zero,0
   2fc2c:	00009617          	auipc	a2,0x9
   2fc30:	d0d60613          	addi	a2,a2,-755 # 38939 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe21>
   2fc34:	00009597          	auipc	a1,0x9
   2fc38:	cf458593          	addi	a1,a1,-780 # 38928 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe10>
   2fc3c:	00012317          	auipc	t1,0x12
   2fc40:	6cc33303          	ld	t1,1740(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fc44:	000300e7          	jalr	ra,0(t1)
   2fc48:	ca5ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fc4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fc50:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fc54:	00000693          	addi	a3,zero,0
   2fc58:	00009617          	auipc	a2,0x9
   2fc5c:	cf860613          	addi	a2,a2,-776 # 38950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe38>
   2fc60:	00009597          	auipc	a1,0x9
   2fc64:	ce058593          	addi	a1,a1,-800 # 38940 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe28>
   2fc68:	00012317          	auipc	t1,0x12
   2fc6c:	6a033303          	ld	t1,1696(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fc70:	000300e7          	jalr	ra,0(t1)
   2fc74:	c79ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fc78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fc7c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fc80:	00000693          	addi	a3,zero,0
   2fc84:	00009617          	auipc	a2,0x9
   2fc88:	ce660613          	addi	a2,a2,-794 # 3896a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe52>
   2fc8c:	00009597          	auipc	a1,0x9
   2fc90:	ccc58593          	addi	a1,a1,-820 # 38958 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe40>
   2fc94:	00012317          	auipc	t1,0x12
   2fc98:	67433303          	ld	t1,1652(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fc9c:	000300e7          	jalr	ra,0(t1)
   2fca0:	c4dff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fca4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fca8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fcac:	00000693          	addi	a3,zero,0
   2fcb0:	00009617          	auipc	a2,0x9
   2fcb4:	ccf60613          	addi	a2,a2,-817 # 3897f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe67>
   2fcb8:	00009597          	auipc	a1,0x9
   2fcbc:	cb858593          	addi	a1,a1,-840 # 38970 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe58>
   2fcc0:	00012317          	auipc	t1,0x12
   2fcc4:	64833303          	ld	t1,1608(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fcc8:	000300e7          	jalr	ra,0(t1)
   2fccc:	c21ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fcd0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fcd4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fcd8:	00000693          	addi	a3,zero,0
   2fcdc:	00009617          	auipc	a2,0x9
   2fce0:	cb860613          	addi	a2,a2,-840 # 38994 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe7c>
   2fce4:	00009597          	auipc	a1,0x9
   2fce8:	c9c58593          	addi	a1,a1,-868 # 38980 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe68>
   2fcec:	00012317          	auipc	t1,0x12
   2fcf0:	61c33303          	ld	t1,1564(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fcf4:	000300e7          	jalr	ra,0(t1)
   2fcf8:	bf5ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fcfc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fd00:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fd04:	00000693          	addi	a3,zero,0
   2fd08:	00009617          	auipc	a2,0x9
   2fd0c:	ca060613          	addi	a2,a2,-864 # 389a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe90>
   2fd10:	00009597          	auipc	a1,0x9
   2fd14:	c8858593          	addi	a1,a1,-888 # 38998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe80>
   2fd18:	00012317          	auipc	t1,0x12
   2fd1c:	5f033303          	ld	t1,1520(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fd20:	000300e7          	jalr	ra,0(t1)
   2fd24:	bc9ff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
        return "(DW_FORM)0x" + to_hex((int)v);
   2fd28:	00010493          	addi	s1,sp,0
   2fd2c:	00048513          	addi	a0,s1,0
   2fd30:	00012317          	auipc	t1,0x12
   2fd34:	6e833303          	ld	t1,1768(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   2fd38:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2fd3c:	00b00713          	addi	a4,zero,11
   2fd40:	00009697          	auipc	a3,0x9
   2fd44:	c7068693          	addi	a3,a3,-912 # 389b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe98>
   2fd48:	00000613          	addi	a2,zero,0
   2fd4c:	00000593          	addi	a1,zero,0
   2fd50:	00048513          	addi	a0,s1,0
   2fd54:	90de60ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2fd58:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fd5c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2fd60:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2fd64:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2fd68:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2fd6c:	03278c63          	beq	a5,s2,2fda4 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x51c>
      { _M_dataplus._M_p = __p; }
   2fd70:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2fd74:	0104b783          	ld	a5,16(s1)
   2fd78:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   2fd7c:	0084b783          	ld	a5,8(s1)
   2fd80:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2fd84:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2fd88:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2fd8c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2fd90:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2fd94:	01010793          	addi	a5,sp,16
   2fd98:	b4f50ae3          	beq	a0,a5,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2fd9c:	f74e60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2fda0:	b4dff06f          	jal	zero,2f8ec <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2fda4:	0084b603          	ld	a2,8(s1)
   2fda8:	00160613          	addi	a2,a2,1
	if (__n == 0)
   2fdac:	fc0608e3          	beq	a2,zero,2fd7c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4f4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2fdb0:	00090593          	addi	a1,s2,0
   2fdb4:	ffce60ef          	jal	ra,165b0 <memcpy@plt>
   2fdb8:	fc5ff06f          	jal	zero,2fd7c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4f4>
      { return _M_dataplus._M_p; }
   2fdbc:	00050413          	addi	s0,a0,0
   2fdc0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   2fdc4:	01010793          	addi	a5,sp,16
   2fdc8:	00f50463          	beq	a0,a5,2fdd0 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x548>
   2fdcc:	f44e60ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2fdd0:	00040513          	addi	a0,s0,0
   2fdd4:	91de60ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002fdd8 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>:
{
   2fdd8:	fc010113          	addi	sp,sp,-64
   2fddc:	02113c23          	sd	ra,56(sp)
   2fde0:	02813823          	sd	s0,48(sp)
   2fde4:	02913423          	sd	s1,40(sp)
   2fde8:	03213023          	sd	s2,32(sp)
   2fdec:	00050413          	addi	s0,a0,0
        switch (v) {
   2fdf0:	04300793          	addi	a5,zero,67
   2fdf4:	28b7e4e3          	bltu	a5,a1,3087c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaa4>
   2fdf8:	00259793          	slli	a5,a1,0x2
   2fdfc:	0000a717          	auipc	a4,0xa
   2fe00:	f3470713          	addi	a4,a4,-204 # 39d30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2218>
   2fe04:	00e787b3          	add	a5,a5,a4
   2fe08:	0007a783          	lw	a5,0(a5)
   2fe0c:	00e787b3          	add	a5,a5,a4
   2fe10:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe18:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe1c:	00000693          	addi	a3,zero,0
   2fe20:	00009617          	auipc	a2,0x9
   2fe24:	bb160613          	addi	a2,a2,-1103 # 389d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeb9>
   2fe28:	00009597          	auipc	a1,0x9
   2fe2c:	b9858593          	addi	a1,a1,-1128 # 389c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xea8>
   2fe30:	00012317          	auipc	t1,0x12
   2fe34:	4d833303          	ld	t1,1240(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fe38:	000300e7          	jalr	ra,0(t1)
}
   2fe3c:	00040513          	addi	a0,s0,0
   2fe40:	03813083          	ld	ra,56(sp)
   2fe44:	03013403          	ld	s0,48(sp)
   2fe48:	02813483          	ld	s1,40(sp)
   2fe4c:	02013903          	ld	s2,32(sp)
   2fe50:	04010113          	addi	sp,sp,64
   2fe54:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe60:	00000693          	addi	a3,zero,0
   2fe64:	00009617          	auipc	a2,0x9
   2fe68:	b8560613          	addi	a2,a2,-1147 # 389e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed1>
   2fe6c:	00009597          	auipc	a1,0x9
   2fe70:	b6c58593          	addi	a1,a1,-1172 # 389d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xec0>
   2fe74:	00012317          	auipc	t1,0x12
   2fe78:	49433303          	ld	t1,1172(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fe7c:	000300e7          	jalr	ra,0(t1)
   2fe80:	fbdff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fe84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fe88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fe8c:	00000693          	addi	a3,zero,0
   2fe90:	00009617          	auipc	a2,0x9
   2fe94:	b7260613          	addi	a2,a2,-1166 # 38a02 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeea>
   2fe98:	00009597          	auipc	a1,0x9
   2fe9c:	b5858593          	addi	a1,a1,-1192 # 389f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed8>
   2fea0:	00012317          	auipc	t1,0x12
   2fea4:	46833303          	ld	t1,1128(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fea8:	000300e7          	jalr	ra,0(t1)
   2feac:	f91ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2feb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2feb4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2feb8:	00000693          	addi	a3,zero,0
   2febc:	00009617          	auipc	a2,0x9
   2fec0:	b6360613          	addi	a2,a2,-1181 # 38a1f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf07>
   2fec4:	00009597          	auipc	a1,0x9
   2fec8:	b4458593          	addi	a1,a1,-1212 # 38a08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xef0>
   2fecc:	00012317          	auipc	t1,0x12
   2fed0:	43c33303          	ld	t1,1084(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2fed4:	000300e7          	jalr	ra,0(t1)
   2fed8:	f65ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2fedc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2fee0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2fee4:	00000693          	addi	a3,zero,0
   2fee8:	00009617          	auipc	a2,0x9
   2feec:	b4f60613          	addi	a2,a2,-1201 # 38a37 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf1f>
   2fef0:	00009597          	auipc	a1,0x9
   2fef4:	b3058593          	addi	a1,a1,-1232 # 38a20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf08>
   2fef8:	00012317          	auipc	t1,0x12
   2fefc:	41033303          	ld	t1,1040(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ff00:	000300e7          	jalr	ra,0(t1)
   2ff04:	f39ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ff08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ff0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ff10:	00000693          	addi	a3,zero,0
   2ff14:	00009617          	auipc	a2,0x9
   2ff18:	b3f60613          	addi	a2,a2,-1217 # 38a53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf3b>
   2ff1c:	00009597          	auipc	a1,0x9
   2ff20:	b1c58593          	addi	a1,a1,-1252 # 38a38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf20>
   2ff24:	00012317          	auipc	t1,0x12
   2ff28:	3e433303          	ld	t1,996(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ff2c:	000300e7          	jalr	ra,0(t1)
   2ff30:	f0dff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ff34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ff38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ff3c:	00000693          	addi	a3,zero,0
   2ff40:	00009617          	auipc	a2,0x9
   2ff44:	b2460613          	addi	a2,a2,-1244 # 38a64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf4c>
   2ff48:	00009597          	auipc	a1,0x9
   2ff4c:	b1058593          	addi	a1,a1,-1264 # 38a58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf40>
   2ff50:	00012317          	auipc	t1,0x12
   2ff54:	3b833303          	ld	t1,952(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ff58:	000300e7          	jalr	ra,0(t1)
   2ff5c:	ee1ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ff60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ff64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ff68:	00000693          	addi	a3,zero,0
   2ff6c:	00009617          	auipc	a2,0x9
   2ff70:	b1060613          	addi	a2,a2,-1264 # 38a7c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf64>
   2ff74:	00009597          	auipc	a1,0x9
   2ff78:	af458593          	addi	a1,a1,-1292 # 38a68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf50>
   2ff7c:	00012317          	auipc	t1,0x12
   2ff80:	38c33303          	ld	t1,908(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ff84:	000300e7          	jalr	ra,0(t1)
   2ff88:	eb5ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ff8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ff90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ff94:	00000693          	addi	a3,zero,0
   2ff98:	00009617          	auipc	a2,0x9
   2ff9c:	af560613          	addi	a2,a2,-1291 # 38a8d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf75>
   2ffa0:	00009597          	auipc	a1,0x9
   2ffa4:	ae058593          	addi	a1,a1,-1312 # 38a80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf68>
   2ffa8:	00012317          	auipc	t1,0x12
   2ffac:	36033303          	ld	t1,864(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ffb0:	000300e7          	jalr	ra,0(t1)
   2ffb4:	e89ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ffb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ffbc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ffc0:	00000693          	addi	a3,zero,0
   2ffc4:	00009617          	auipc	a2,0x9
   2ffc8:	adf60613          	addi	a2,a2,-1313 # 38aa3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf8b>
   2ffcc:	00009597          	auipc	a1,0x9
   2ffd0:	ac458593          	addi	a1,a1,-1340 # 38a90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf78>
   2ffd4:	00012317          	auipc	t1,0x12
   2ffd8:	33433303          	ld	t1,820(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   2ffdc:	000300e7          	jalr	ra,0(t1)
   2ffe0:	e5dff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2ffe4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2ffe8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2ffec:	00000693          	addi	a3,zero,0
   2fff0:	00009617          	auipc	a2,0x9
   2fff4:	acd60613          	addi	a2,a2,-1331 # 38abd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa5>
   2fff8:	00009597          	auipc	a1,0x9
   2fffc:	ab058593          	addi	a1,a1,-1360 # 38aa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf90>
   30000:	00012317          	auipc	t1,0x12
   30004:	30833303          	ld	t1,776(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30008:	000300e7          	jalr	ra,0(t1)
   3000c:	e31ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30010:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30014:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30018:	00000693          	addi	a3,zero,0
   3001c:	00009617          	auipc	a2,0x9
   30020:	ab760613          	addi	a2,a2,-1353 # 38ad3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfbb>
   30024:	00009597          	auipc	a1,0x9
   30028:	a9c58593          	addi	a1,a1,-1380 # 38ac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa8>
   3002c:	00012317          	auipc	t1,0x12
   30030:	2dc33303          	ld	t1,732(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30034:	000300e7          	jalr	ra,0(t1)
   30038:	e05ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3003c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30040:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30044:	00000693          	addi	a3,zero,0
   30048:	00009617          	auipc	a2,0x9
   3004c:	aa260613          	addi	a2,a2,-1374 # 38aea <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd2>
   30050:	00009597          	auipc	a1,0x9
   30054:	a8858593          	addi	a1,a1,-1400 # 38ad8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfc0>
   30058:	00012317          	auipc	t1,0x12
   3005c:	2b033303          	ld	t1,688(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30060:	000300e7          	jalr	ra,0(t1)
   30064:	dd9ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30068:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3006c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30070:	00000693          	addi	a3,zero,0
   30074:	00009617          	auipc	a2,0x9
   30078:	a9160613          	addi	a2,a2,-1391 # 38b05 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfed>
   3007c:	00009597          	auipc	a1,0x9
   30080:	a7458593          	addi	a1,a1,-1420 # 38af0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd8>
   30084:	00012317          	auipc	t1,0x12
   30088:	28433303          	ld	t1,644(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3008c:	000300e7          	jalr	ra,0(t1)
   30090:	dadff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30094:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30098:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3009c:	00000693          	addi	a3,zero,0
   300a0:	00009617          	auipc	a2,0x9
   300a4:	a7e60613          	addi	a2,a2,-1410 # 38b1e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1006>
   300a8:	00009597          	auipc	a1,0x9
   300ac:	a6058593          	addi	a1,a1,-1440 # 38b08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xff0>
   300b0:	00012317          	auipc	t1,0x12
   300b4:	25833303          	ld	t1,600(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   300b8:	000300e7          	jalr	ra,0(t1)
   300bc:	d81ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   300c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   300c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   300c8:	00000693          	addi	a3,zero,0
   300cc:	00009617          	auipc	a2,0x9
   300d0:	a6260613          	addi	a2,a2,-1438 # 38b2e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1016>
   300d4:	00009597          	auipc	a1,0x9
   300d8:	a4c58593          	addi	a1,a1,-1460 # 38b20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1008>
   300dc:	00012317          	auipc	t1,0x12
   300e0:	22c33303          	ld	t1,556(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   300e4:	000300e7          	jalr	ra,0(t1)
   300e8:	d55ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   300ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   300f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   300f4:	00000693          	addi	a3,zero,0
   300f8:	00009617          	auipc	a2,0x9
   300fc:	a4960613          	addi	a2,a2,-1463 # 38b41 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1029>
   30100:	00009597          	auipc	a1,0x9
   30104:	a3058593          	addi	a1,a1,-1488 # 38b30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1018>
   30108:	00012317          	auipc	t1,0x12
   3010c:	20033303          	ld	t1,512(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30110:	000300e7          	jalr	ra,0(t1)
   30114:	d29ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30118:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3011c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30120:	00000693          	addi	a3,zero,0
   30124:	00009617          	auipc	a2,0x9
   30128:	a4160613          	addi	a2,a2,-1471 # 38b65 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x104d>
   3012c:	00009597          	auipc	a1,0x9
   30130:	a1c58593          	addi	a1,a1,-1508 # 38b48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1030>
   30134:	00012317          	auipc	t1,0x12
   30138:	1d433303          	ld	t1,468(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3013c:	000300e7          	jalr	ra,0(t1)
   30140:	cfdff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30144:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30148:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3014c:	00000693          	addi	a3,zero,0
   30150:	00009617          	auipc	a2,0x9
   30154:	a2660613          	addi	a2,a2,-1498 # 38b76 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x105e>
   30158:	00009597          	auipc	a1,0x9
   3015c:	a1058593          	addi	a1,a1,-1520 # 38b68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1050>
   30160:	00012317          	auipc	t1,0x12
   30164:	1a833303          	ld	t1,424(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30168:	000300e7          	jalr	ra,0(t1)
   3016c:	cd1ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30170:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30174:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30178:	00000693          	addi	a3,zero,0
   3017c:	00009617          	auipc	a2,0x9
   30180:	a0f60613          	addi	a2,a2,-1521 # 38b8b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1073>
   30184:	00009597          	auipc	a1,0x9
   30188:	9f458593          	addi	a1,a1,-1548 # 38b78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1060>
   3018c:	00012317          	auipc	t1,0x12
   30190:	17c33303          	ld	t1,380(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30194:	000300e7          	jalr	ra,0(t1)
   30198:	ca5ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3019c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   301a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   301a4:	00000693          	addi	a3,zero,0
   301a8:	00009617          	auipc	a2,0x9
   301ac:	9ff60613          	addi	a2,a2,-1537 # 38ba7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x108f>
   301b0:	00009597          	auipc	a1,0x9
   301b4:	9e058593          	addi	a1,a1,-1568 # 38b90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1078>
   301b8:	00012317          	auipc	t1,0x12
   301bc:	15033303          	ld	t1,336(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   301c0:	000300e7          	jalr	ra,0(t1)
   301c4:	c79ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   301c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   301cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   301d0:	00000693          	addi	a3,zero,0
   301d4:	00009617          	auipc	a2,0x9
   301d8:	9e660613          	addi	a2,a2,-1562 # 38bba <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a2>
   301dc:	00009597          	auipc	a1,0x9
   301e0:	9cc58593          	addi	a1,a1,-1588 # 38ba8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1090>
   301e4:	00012317          	auipc	t1,0x12
   301e8:	12433303          	ld	t1,292(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   301ec:	000300e7          	jalr	ra,0(t1)
   301f0:	c4dff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   301f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   301f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   301fc:	00000693          	addi	a3,zero,0
   30200:	00009617          	auipc	a2,0x9
   30204:	9d960613          	addi	a2,a2,-1575 # 38bd9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c1>
   30208:	00009597          	auipc	a1,0x9
   3020c:	9b858593          	addi	a1,a1,-1608 # 38bc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a8>
   30210:	00012317          	auipc	t1,0x12
   30214:	0f833303          	ld	t1,248(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30218:	000300e7          	jalr	ra,0(t1)
   3021c:	c21ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30220:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30224:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30228:	00000693          	addi	a3,zero,0
   3022c:	00009617          	auipc	a2,0x9
   30230:	9c160613          	addi	a2,a2,-1599 # 38bed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d5>
   30234:	00009597          	auipc	a1,0x9
   30238:	9ac58593          	addi	a1,a1,-1620 # 38be0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c8>
   3023c:	00012317          	auipc	t1,0x12
   30240:	0cc33303          	ld	t1,204(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30244:	000300e7          	jalr	ra,0(t1)
   30248:	bf5ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3024c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30250:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30254:	00000693          	addi	a3,zero,0
   30258:	00009617          	auipc	a2,0x9
   3025c:	9b160613          	addi	a2,a2,-1615 # 38c09 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f1>
   30260:	00009597          	auipc	a1,0x9
   30264:	99058593          	addi	a1,a1,-1648 # 38bf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d8>
   30268:	00012317          	auipc	t1,0x12
   3026c:	0a033303          	ld	t1,160(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30270:	000300e7          	jalr	ra,0(t1)
   30274:	bc9ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30278:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3027c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30280:	00000693          	addi	a3,zero,0
   30284:	00009617          	auipc	a2,0x9
   30288:	99b60613          	addi	a2,a2,-1637 # 38c1f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1107>
   3028c:	00009597          	auipc	a1,0x9
   30290:	98458593          	addi	a1,a1,-1660 # 38c10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f8>
   30294:	00012317          	auipc	t1,0x12
   30298:	07433303          	ld	t1,116(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3029c:	000300e7          	jalr	ra,0(t1)
   302a0:	b9dff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   302a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   302a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   302ac:	00000693          	addi	a3,zero,0
   302b0:	00009617          	auipc	a2,0x9
   302b4:	98460613          	addi	a2,a2,-1660 # 38c34 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x111c>
   302b8:	00009597          	auipc	a1,0x9
   302bc:	96858593          	addi	a1,a1,-1688 # 38c20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1108>
   302c0:	00012317          	auipc	t1,0x12
   302c4:	04833303          	ld	t1,72(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   302c8:	000300e7          	jalr	ra,0(t1)
   302cc:	b71ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   302d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   302d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   302d8:	00000693          	addi	a3,zero,0
   302dc:	00009617          	auipc	a2,0x9
   302e0:	96c60613          	addi	a2,a2,-1684 # 38c48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1130>
   302e4:	00009597          	auipc	a1,0x9
   302e8:	95458593          	addi	a1,a1,-1708 # 38c38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1120>
   302ec:	00012317          	auipc	t1,0x12
   302f0:	01c33303          	ld	t1,28(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   302f4:	000300e7          	jalr	ra,0(t1)
   302f8:	b45ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   302fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30300:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30304:	00000693          	addi	a3,zero,0
   30308:	00009617          	auipc	a2,0x9
   3030c:	96160613          	addi	a2,a2,-1695 # 38c69 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1151>
   30310:	00009597          	auipc	a1,0x9
   30314:	94058593          	addi	a1,a1,-1728 # 38c50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1138>
   30318:	00012317          	auipc	t1,0x12
   3031c:	ff033303          	ld	t1,-16(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30320:	000300e7          	jalr	ra,0(t1)
   30324:	b19ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30328:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3032c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30330:	00000693          	addi	a3,zero,0
   30334:	00009617          	auipc	a2,0x9
   30338:	94c60613          	addi	a2,a2,-1716 # 38c80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1168>
   3033c:	00009597          	auipc	a1,0x9
   30340:	93458593          	addi	a1,a1,-1740 # 38c70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1158>
   30344:	00012317          	auipc	t1,0x12
   30348:	fc433303          	ld	t1,-60(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3034c:	000300e7          	jalr	ra,0(t1)
   30350:	aedff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30354:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30358:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3035c:	00000693          	addi	a3,zero,0
   30360:	00009617          	auipc	a2,0x9
   30364:	93a60613          	addi	a2,a2,-1734 # 38c9a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1182>
   30368:	00009597          	auipc	a1,0x9
   3036c:	92058593          	addi	a1,a1,-1760 # 38c88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1170>
   30370:	00012317          	auipc	t1,0x12
   30374:	f9833303          	ld	t1,-104(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30378:	000300e7          	jalr	ra,0(t1)
   3037c:	ac1ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30380:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30384:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30388:	00000693          	addi	a3,zero,0
   3038c:	00009617          	auipc	a2,0x9
   30390:	92560613          	addi	a2,a2,-1755 # 38cb1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1199>
   30394:	00009597          	auipc	a1,0x9
   30398:	90c58593          	addi	a1,a1,-1780 # 38ca0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1188>
   3039c:	00012317          	auipc	t1,0x12
   303a0:	f6c33303          	ld	t1,-148(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   303a4:	000300e7          	jalr	ra,0(t1)
   303a8:	a95ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   303ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   303b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   303b4:	00000693          	addi	a3,zero,0
   303b8:	00009617          	auipc	a2,0x9
   303bc:	90f60613          	addi	a2,a2,-1777 # 38cc7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11af>
   303c0:	00009597          	auipc	a1,0x9
   303c4:	8f858593          	addi	a1,a1,-1800 # 38cb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11a0>
   303c8:	00012317          	auipc	t1,0x12
   303cc:	f4033303          	ld	t1,-192(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   303d0:	000300e7          	jalr	ra,0(t1)
   303d4:	a69ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   303d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   303dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   303e0:	00000693          	addi	a3,zero,0
   303e4:	00009617          	auipc	a2,0x9
   303e8:	8f560613          	addi	a2,a2,-1803 # 38cd9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c1>
   303ec:	00009597          	auipc	a1,0x9
   303f0:	8dc58593          	addi	a1,a1,-1828 # 38cc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11b0>
   303f4:	00012317          	auipc	t1,0x12
   303f8:	f1433303          	ld	t1,-236(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   303fc:	000300e7          	jalr	ra,0(t1)
   30400:	a3dff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30404:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30408:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3040c:	00000693          	addi	a3,zero,0
   30410:	00009617          	auipc	a2,0x9
   30414:	8e060613          	addi	a2,a2,-1824 # 38cf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11d8>
   30418:	00009597          	auipc	a1,0x9
   3041c:	8c858593          	addi	a1,a1,-1848 # 38ce0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c8>
   30420:	00012317          	auipc	t1,0x12
   30424:	ee833303          	ld	t1,-280(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30428:	000300e7          	jalr	ra,0(t1)
   3042c:	a11ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30430:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30434:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30438:	00000693          	addi	a3,zero,0
   3043c:	00009617          	auipc	a2,0x9
   30440:	8c960613          	addi	a2,a2,-1847 # 38d05 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ed>
   30444:	00009597          	auipc	a1,0x9
   30448:	8b458593          	addi	a1,a1,-1868 # 38cf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11e0>
   3044c:	00012317          	auipc	t1,0x12
   30450:	ebc33303          	ld	t1,-324(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30454:	000300e7          	jalr	ra,0(t1)
   30458:	9e5ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3045c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30460:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30464:	00000693          	addi	a3,zero,0
   30468:	00009617          	auipc	a2,0x9
   3046c:	8af60613          	addi	a2,a2,-1873 # 38d17 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ff>
   30470:	00009597          	auipc	a1,0x9
   30474:	89858593          	addi	a1,a1,-1896 # 38d08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11f0>
   30478:	00012317          	auipc	t1,0x12
   3047c:	e9033303          	ld	t1,-368(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30480:	000300e7          	jalr	ra,0(t1)
   30484:	9b9ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30488:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3048c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30490:	00000693          	addi	a3,zero,0
   30494:	00009617          	auipc	a2,0x9
   30498:	89860613          	addi	a2,a2,-1896 # 38d2c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1214>
   3049c:	00009597          	auipc	a1,0x9
   304a0:	87c58593          	addi	a1,a1,-1924 # 38d18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1200>
   304a4:	00012317          	auipc	t1,0x12
   304a8:	e6433303          	ld	t1,-412(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   304ac:	000300e7          	jalr	ra,0(t1)
   304b0:	98dff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   304b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   304b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   304bc:	00000693          	addi	a3,zero,0
   304c0:	00009617          	auipc	a2,0x9
   304c4:	88260613          	addi	a2,a2,-1918 # 38d42 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x122a>
   304c8:	00009597          	auipc	a1,0x9
   304cc:	86858593          	addi	a1,a1,-1944 # 38d30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1218>
   304d0:	00012317          	auipc	t1,0x12
   304d4:	e3833303          	ld	t1,-456(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   304d8:	000300e7          	jalr	ra,0(t1)
   304dc:	961ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   304e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   304e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   304e8:	00000693          	addi	a3,zero,0
   304ec:	00009617          	auipc	a2,0x9
   304f0:	86d60613          	addi	a2,a2,-1939 # 38d59 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1241>
   304f4:	00009597          	auipc	a1,0x9
   304f8:	85458593          	addi	a1,a1,-1964 # 38d48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1230>
   304fc:	00012317          	auipc	t1,0x12
   30500:	e0c33303          	ld	t1,-500(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30504:	000300e7          	jalr	ra,0(t1)
   30508:	935ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3050c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30510:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30514:	00000693          	addi	a3,zero,0
   30518:	00009617          	auipc	a2,0x9
   3051c:	86660613          	addi	a2,a2,-1946 # 38d7e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1266>
   30520:	00009597          	auipc	a1,0x9
   30524:	84058593          	addi	a1,a1,-1984 # 38d60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1248>
   30528:	00012317          	auipc	t1,0x12
   3052c:	de033303          	ld	t1,-544(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30530:	000300e7          	jalr	ra,0(t1)
   30534:	909ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30538:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3053c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30540:	00000693          	addi	a3,zero,0
   30544:	00009617          	auipc	a2,0x9
   30548:	85b60613          	addi	a2,a2,-1957 # 38d9f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1287>
   3054c:	00009597          	auipc	a1,0x9
   30550:	83458593          	addi	a1,a1,-1996 # 38d80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1268>
   30554:	00012317          	auipc	t1,0x12
   30558:	db433303          	ld	t1,-588(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3055c:	000300e7          	jalr	ra,0(t1)
   30560:	8ddff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30564:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30568:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3056c:	00000693          	addi	a3,zero,0
   30570:	00009617          	auipc	a2,0x9
   30574:	84260613          	addi	a2,a2,-1982 # 38db2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x129a>
   30578:	00009597          	auipc	a1,0x9
   3057c:	82858593          	addi	a1,a1,-2008 # 38da0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1288>
   30580:	00012317          	auipc	t1,0x12
   30584:	d8833303          	ld	t1,-632(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30588:	000300e7          	jalr	ra,0(t1)
   3058c:	8b1ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30590:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30594:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30598:	00000693          	addi	a3,zero,0
   3059c:	00009617          	auipc	a2,0x9
   305a0:	82c60613          	addi	a2,a2,-2004 # 38dc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b0>
   305a4:	00009597          	auipc	a1,0x9
   305a8:	81458593          	addi	a1,a1,-2028 # 38db8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12a0>
   305ac:	00012317          	auipc	t1,0x12
   305b0:	d5c33303          	ld	t1,-676(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   305b4:	000300e7          	jalr	ra,0(t1)
   305b8:	885ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   305bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   305c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   305c4:	00000693          	addi	a3,zero,0
   305c8:	00009617          	auipc	a2,0x9
   305cc:	81b60613          	addi	a2,a2,-2021 # 38de3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12cb>
   305d0:	00009597          	auipc	a1,0x9
   305d4:	80058593          	addi	a1,a1,-2048 # 38dd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b8>
   305d8:	00012317          	auipc	t1,0x12
   305dc:	d3033303          	ld	t1,-720(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   305e0:	000300e7          	jalr	ra,0(t1)
   305e4:	859ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   305e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   305ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   305f0:	00000693          	addi	a3,zero,0
   305f4:	00009617          	auipc	a2,0x9
   305f8:	80360613          	addi	a2,a2,-2045 # 38df7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12df>
   305fc:	00008597          	auipc	a1,0x8
   30600:	7ec58593          	addi	a1,a1,2028 # 38de8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12d0>
   30604:	00012317          	auipc	t1,0x12
   30608:	d0433303          	ld	t1,-764(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3060c:	000300e7          	jalr	ra,0(t1)
   30610:	82dff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30614:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30618:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3061c:	00000693          	addi	a3,zero,0
   30620:	00008617          	auipc	a2,0x8
   30624:	7ec60613          	addi	a2,a2,2028 # 38e0c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f4>
   30628:	00008597          	auipc	a1,0x8
   3062c:	7d058593          	addi	a1,a1,2000 # 38df8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12e0>
   30630:	00012317          	auipc	t1,0x12
   30634:	cd833303          	ld	t1,-808(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30638:	000300e7          	jalr	ra,0(t1)
   3063c:	801ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30640:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30644:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30648:	00000693          	addi	a3,zero,0
   3064c:	00008617          	auipc	a2,0x8
   30650:	7da60613          	addi	a2,a2,2010 # 38e26 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x130e>
   30654:	00008597          	auipc	a1,0x8
   30658:	7bc58593          	addi	a1,a1,1980 # 38e10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f8>
   3065c:	00012317          	auipc	t1,0x12
   30660:	cac33303          	ld	t1,-852(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30664:	000300e7          	jalr	ra,0(t1)
   30668:	fd4ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3066c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30670:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30674:	00000693          	addi	a3,zero,0
   30678:	00008617          	auipc	a2,0x8
   3067c:	7c460613          	addi	a2,a2,1988 # 38e3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1324>
   30680:	00008597          	auipc	a1,0x8
   30684:	7a858593          	addi	a1,a1,1960 # 38e28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1310>
   30688:	00012317          	auipc	t1,0x12
   3068c:	c8033303          	ld	t1,-896(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30690:	000300e7          	jalr	ra,0(t1)
   30694:	fa8ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30698:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3069c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306a0:	00000693          	addi	a3,zero,0
   306a4:	00008617          	auipc	a2,0x8
   306a8:	7b160613          	addi	a2,a2,1969 # 38e55 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x133d>
   306ac:	00008597          	auipc	a1,0x8
   306b0:	79458593          	addi	a1,a1,1940 # 38e40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1328>
   306b4:	00012317          	auipc	t1,0x12
   306b8:	c5433303          	ld	t1,-940(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   306bc:	000300e7          	jalr	ra,0(t1)
   306c0:	f7cff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   306c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   306c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306cc:	00000693          	addi	a3,zero,0
   306d0:	00008617          	auipc	a2,0x8
   306d4:	79860613          	addi	a2,a2,1944 # 38e68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1350>
   306d8:	00008597          	auipc	a1,0x8
   306dc:	78058593          	addi	a1,a1,1920 # 38e58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1340>
   306e0:	00012317          	auipc	t1,0x12
   306e4:	c2833303          	ld	t1,-984(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   306e8:	000300e7          	jalr	ra,0(t1)
   306ec:	f50ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   306f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   306f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   306f8:	00000693          	addi	a3,zero,0
   306fc:	00008617          	auipc	a2,0x8
   30700:	78a60613          	addi	a2,a2,1930 # 38e86 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x136e>
   30704:	00008597          	auipc	a1,0x8
   30708:	76c58593          	addi	a1,a1,1900 # 38e70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1358>
   3070c:	00012317          	auipc	t1,0x12
   30710:	bfc33303          	ld	t1,-1028(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30714:	000300e7          	jalr	ra,0(t1)
   30718:	f24ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3071c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30720:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30724:	00000693          	addi	a3,zero,0
   30728:	00008617          	auipc	a2,0x8
   3072c:	77760613          	addi	a2,a2,1911 # 38e9f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1387>
   30730:	00008597          	auipc	a1,0x8
   30734:	75858593          	addi	a1,a1,1880 # 38e88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1370>
   30738:	00012317          	auipc	t1,0x12
   3073c:	bd033303          	ld	t1,-1072(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30740:	000300e7          	jalr	ra,0(t1)
   30744:	ef8ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30748:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3074c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30750:	00000693          	addi	a3,zero,0
   30754:	00008617          	auipc	a2,0x8
   30758:	75f60613          	addi	a2,a2,1887 # 38eb3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x139b>
   3075c:	00008597          	auipc	a1,0x8
   30760:	74458593          	addi	a1,a1,1860 # 38ea0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1388>
   30764:	00012317          	auipc	t1,0x12
   30768:	ba433303          	ld	t1,-1116(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3076c:	000300e7          	jalr	ra,0(t1)
   30770:	eccff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30774:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30778:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3077c:	00000693          	addi	a3,zero,0
   30780:	00008617          	auipc	a2,0x8
   30784:	74c60613          	addi	a2,a2,1868 # 38ecc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b4>
   30788:	00008597          	auipc	a1,0x8
   3078c:	73058593          	addi	a1,a1,1840 # 38eb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13a0>
   30790:	00012317          	auipc	t1,0x12
   30794:	b7833303          	ld	t1,-1160(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30798:	000300e7          	jalr	ra,0(t1)
   3079c:	ea0ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   307a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   307a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   307a8:	00000693          	addi	a3,zero,0
   307ac:	00008617          	auipc	a2,0x8
   307b0:	73460613          	addi	a2,a2,1844 # 38ee0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13c8>
   307b4:	00008597          	auipc	a1,0x8
   307b8:	71c58593          	addi	a1,a1,1820 # 38ed0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b8>
   307bc:	00012317          	auipc	t1,0x12
   307c0:	b4c33303          	ld	t1,-1204(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   307c4:	000300e7          	jalr	ra,0(t1)
   307c8:	e74ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   307cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   307d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   307d4:	00000693          	addi	a3,zero,0
   307d8:	00008617          	auipc	a2,0x8
   307dc:	72260613          	addi	a2,a2,1826 # 38efa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e2>
   307e0:	00008597          	auipc	a1,0x8
   307e4:	70858593          	addi	a1,a1,1800 # 38ee8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13d0>
   307e8:	00012317          	auipc	t1,0x12
   307ec:	b2033303          	ld	t1,-1248(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   307f0:	000300e7          	jalr	ra,0(t1)
   307f4:	e48ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   307f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   307fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30800:	00000693          	addi	a3,zero,0
   30804:	00008617          	auipc	a2,0x8
   30808:	70c60613          	addi	a2,a2,1804 # 38f10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13f8>
   3080c:	00008597          	auipc	a1,0x8
   30810:	6f458593          	addi	a1,a1,1780 # 38f00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e8>
   30814:	00012317          	auipc	t1,0x12
   30818:	af433303          	ld	t1,-1292(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3081c:	000300e7          	jalr	ra,0(t1)
   30820:	e1cff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30824:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30828:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3082c:	00000693          	addi	a3,zero,0
   30830:	00008617          	auipc	a2,0x8
   30834:	70460613          	addi	a2,a2,1796 # 38f34 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x141c>
   30838:	00008597          	auipc	a1,0x8
   3083c:	6e058593          	addi	a1,a1,1760 # 38f18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1400>
   30840:	00012317          	auipc	t1,0x12
   30844:	ac833303          	ld	t1,-1336(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30848:	000300e7          	jalr	ra,0(t1)
   3084c:	df0ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30850:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30854:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30858:	00000693          	addi	a3,zero,0
   3085c:	00008617          	auipc	a2,0x8
   30860:	6f160613          	addi	a2,a2,1777 # 38f4d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1435>
   30864:	00008597          	auipc	a1,0x8
   30868:	6d458593          	addi	a1,a1,1748 # 38f38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1420>
   3086c:	00012317          	auipc	t1,0x12
   30870:	a9c33303          	ld	t1,-1380(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30874:	000300e7          	jalr	ra,0(t1)
   30878:	dc4ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
        return "(DW_TAG)0x" + to_hex((int)v);
   3087c:	00010493          	addi	s1,sp,0
   30880:	00048513          	addi	a0,s1,0
   30884:	00012317          	auipc	t1,0x12
   30888:	b9433303          	ld	t1,-1132(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   3088c:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   30890:	00a00713          	addi	a4,zero,10
   30894:	00008697          	auipc	a3,0x8
   30898:	6bc68693          	addi	a3,a3,1724 # 38f50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1438>
   3089c:	00000613          	addi	a2,zero,0
   308a0:	00000593          	addi	a1,zero,0
   308a4:	00048513          	addi	a0,s1,0
   308a8:	db9e50ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   308ac:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   308b0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   308b4:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   308b8:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   308bc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   308c0:	03278c63          	beq	a5,s2,308f8 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xb20>
      { _M_dataplus._M_p = __p; }
   308c4:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   308c8:	0104b783          	ld	a5,16(s1)
   308cc:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   308d0:	0084b783          	ld	a5,8(s1)
   308d4:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   308d8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   308dc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   308e0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   308e4:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   308e8:	01010793          	addi	a5,sp,16
   308ec:	d4f50863          	beq	a0,a5,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   308f0:	c21e50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   308f4:	d48ff06f          	jal	zero,2fe3c <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   308f8:	0084b603          	ld	a2,8(s1)
   308fc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   30900:	fc0608e3          	beq	a2,zero,308d0 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaf8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   30904:	00090593          	addi	a1,s2,0
   30908:	ca9e50ef          	jal	ra,165b0 <memcpy@plt>
   3090c:	fc5ff06f          	jal	zero,308d0 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xaf8>
      { return _M_dataplus._M_p; }
   30910:	00050413          	addi	s0,a0,0
   30914:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   30918:	01010793          	addi	a5,sp,16
   3091c:	00f50463          	beq	a0,a5,30924 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0xb4c>
   30920:	bf1e50ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   30924:	00040513          	addi	a0,s0,0
   30928:	dc9e50ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000003092c <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>:
{
   3092c:	fc010113          	addi	sp,sp,-64
   30930:	02113c23          	sd	ra,56(sp)
   30934:	02813823          	sd	s0,48(sp)
   30938:	02913423          	sd	s1,40(sp)
   3093c:	03213023          	sd	s2,32(sp)
   30940:	00050413          	addi	s0,a0,0
        switch (v) {
   30944:	ffd5879b          	addiw	a5,a1,-3
   30948:	0ff7f693          	andi	a3,a5,255
   3094c:	09c00713          	addi	a4,zero,156
   30950:	32d76ce3          	bltu	a4,a3,31488 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xb5c>
   30954:	00269793          	slli	a5,a3,0x2
   30958:	00009717          	auipc	a4,0x9
   3095c:	4e870713          	addi	a4,a4,1256 # 39e40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2328>
   30960:	00e787b3          	add	a5,a5,a4
   30964:	0007a783          	lw	a5,0(a5)
   30968:	00e787b3          	add	a5,a5,a4
   3096c:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30970:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30974:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30978:	00000693          	addi	a3,zero,0
   3097c:	00008617          	auipc	a2,0x8
   30980:	5ee60613          	addi	a2,a2,1518 # 38f6a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1452>
   30984:	00008597          	auipc	a1,0x8
   30988:	5dc58593          	addi	a1,a1,1500 # 38f60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1448>
   3098c:	00012317          	auipc	t1,0x12
   30990:	97c33303          	ld	t1,-1668(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30994:	000300e7          	jalr	ra,0(t1)
}
   30998:	00040513          	addi	a0,s0,0
   3099c:	03813083          	ld	ra,56(sp)
   309a0:	03013403          	ld	s0,48(sp)
   309a4:	02813483          	ld	s1,40(sp)
   309a8:	02013903          	ld	s2,32(sp)
   309ac:	04010113          	addi	sp,sp,64
   309b0:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   309b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   309b8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   309bc:	00000693          	addi	a3,zero,0
   309c0:	00008617          	auipc	a2,0x8
   309c4:	5bb60613          	addi	a2,a2,1467 # 38f7b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1463>
   309c8:	00008597          	auipc	a1,0x8
   309cc:	5a858593          	addi	a1,a1,1448 # 38f70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1458>
   309d0:	00012317          	auipc	t1,0x12
   309d4:	93833303          	ld	t1,-1736(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   309d8:	000300e7          	jalr	ra,0(t1)
   309dc:	fbdff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   309e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   309e4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   309e8:	00000693          	addi	a3,zero,0
   309ec:	00008617          	auipc	a2,0x8
   309f0:	5a160613          	addi	a2,a2,1441 # 38f8d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1475>
   309f4:	00008597          	auipc	a1,0x8
   309f8:	58c58593          	addi	a1,a1,1420 # 38f80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1468>
   309fc:	00012317          	auipc	t1,0x12
   30a00:	90c33303          	ld	t1,-1780(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30a04:	000300e7          	jalr	ra,0(t1)
   30a08:	f91ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a0c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a10:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a14:	00000693          	addi	a3,zero,0
   30a18:	00008617          	auipc	a2,0x8
   30a1c:	58560613          	addi	a2,a2,1413 # 38f9d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1485>
   30a20:	00008597          	auipc	a1,0x8
   30a24:	57058593          	addi	a1,a1,1392 # 38f90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1478>
   30a28:	00012317          	auipc	t1,0x12
   30a2c:	8e033303          	ld	t1,-1824(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30a30:	000300e7          	jalr	ra,0(t1)
   30a34:	f65ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a38:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a3c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a40:	00000693          	addi	a3,zero,0
   30a44:	00008617          	auipc	a2,0x8
   30a48:	56960613          	addi	a2,a2,1385 # 38fad <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1495>
   30a4c:	00008597          	auipc	a1,0x8
   30a50:	55458593          	addi	a1,a1,1364 # 38fa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1488>
   30a54:	00012317          	auipc	t1,0x12
   30a58:	8b433303          	ld	t1,-1868(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30a5c:	000300e7          	jalr	ra,0(t1)
   30a60:	f39ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a68:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a6c:	00000693          	addi	a3,zero,0
   30a70:	00008617          	auipc	a2,0x8
   30a74:	54d60613          	addi	a2,a2,1357 # 38fbd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a5>
   30a78:	00008597          	auipc	a1,0x8
   30a7c:	53858593          	addi	a1,a1,1336 # 38fb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1498>
   30a80:	00012317          	auipc	t1,0x12
   30a84:	88833303          	ld	t1,-1912(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30a88:	000300e7          	jalr	ra,0(t1)
   30a8c:	f0dff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30a90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30a94:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30a98:	00000693          	addi	a3,zero,0
   30a9c:	00008617          	auipc	a2,0x8
   30aa0:	53160613          	addi	a2,a2,1329 # 38fcd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b5>
   30aa4:	00008597          	auipc	a1,0x8
   30aa8:	51c58593          	addi	a1,a1,1308 # 38fc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a8>
   30aac:	00012317          	auipc	t1,0x12
   30ab0:	85c33303          	ld	t1,-1956(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30ab4:	000300e7          	jalr	ra,0(t1)
   30ab8:	ee1ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30abc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ac0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ac4:	00000693          	addi	a3,zero,0
   30ac8:	00008617          	auipc	a2,0x8
   30acc:	51560613          	addi	a2,a2,1301 # 38fdd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c5>
   30ad0:	00008597          	auipc	a1,0x8
   30ad4:	50058593          	addi	a1,a1,1280 # 38fd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b8>
   30ad8:	00012317          	auipc	t1,0x12
   30adc:	83033303          	ld	t1,-2000(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30ae0:	000300e7          	jalr	ra,0(t1)
   30ae4:	eb5ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ae8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30aec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30af0:	00000693          	addi	a3,zero,0
   30af4:	00008617          	auipc	a2,0x8
   30af8:	4f960613          	addi	a2,a2,1273 # 38fed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d5>
   30afc:	00008597          	auipc	a1,0x8
   30b00:	4e458593          	addi	a1,a1,1252 # 38fe0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c8>
   30b04:	00012317          	auipc	t1,0x12
   30b08:	80433303          	ld	t1,-2044(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30b0c:	000300e7          	jalr	ra,0(t1)
   30b10:	e89ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b14:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b18:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b1c:	00000693          	addi	a3,zero,0
   30b20:	00008617          	auipc	a2,0x8
   30b24:	4dd60613          	addi	a2,a2,1245 # 38ffd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e5>
   30b28:	00008597          	auipc	a1,0x8
   30b2c:	4c858593          	addi	a1,a1,1224 # 38ff0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d8>
   30b30:	00011317          	auipc	t1,0x11
   30b34:	7d833303          	ld	t1,2008(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30b38:	000300e7          	jalr	ra,0(t1)
   30b3c:	e5dff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b44:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b48:	00000693          	addi	a3,zero,0
   30b4c:	00008617          	auipc	a2,0x8
   30b50:	4c060613          	addi	a2,a2,1216 # 3900c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f4>
   30b54:	00008597          	auipc	a1,0x8
   30b58:	4ac58593          	addi	a1,a1,1196 # 39000 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e8>
   30b5c:	00011317          	auipc	t1,0x11
   30b60:	7ac33303          	ld	t1,1964(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30b64:	000300e7          	jalr	ra,0(t1)
   30b68:	e31ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b70:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30b74:	00000693          	addi	a3,zero,0
   30b78:	00008617          	auipc	a2,0x8
   30b7c:	4a460613          	addi	a2,a2,1188 # 3901c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1504>
   30b80:	00008597          	auipc	a1,0x8
   30b84:	49058593          	addi	a1,a1,1168 # 39010 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f8>
   30b88:	00011317          	auipc	t1,0x11
   30b8c:	78033303          	ld	t1,1920(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30b90:	000300e7          	jalr	ra,0(t1)
   30b94:	e05ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30b98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30b9c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ba0:	00000693          	addi	a3,zero,0
   30ba4:	00008617          	auipc	a2,0x8
   30ba8:	48560613          	addi	a2,a2,1157 # 39029 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1511>
   30bac:	00008597          	auipc	a1,0x8
   30bb0:	47458593          	addi	a1,a1,1140 # 39020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1508>
   30bb4:	00011317          	auipc	t1,0x11
   30bb8:	75433303          	ld	t1,1876(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30bbc:	000300e7          	jalr	ra,0(t1)
   30bc0:	dd9ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30bc4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30bc8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30bcc:	00000693          	addi	a3,zero,0
   30bd0:	00008617          	auipc	a2,0x8
   30bd4:	46a60613          	addi	a2,a2,1130 # 3903a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1522>
   30bd8:	00008597          	auipc	a1,0x8
   30bdc:	45858593          	addi	a1,a1,1112 # 39030 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1518>
   30be0:	00011317          	auipc	t1,0x11
   30be4:	72833303          	ld	t1,1832(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30be8:	000300e7          	jalr	ra,0(t1)
   30bec:	dadff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30bf0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30bf4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30bf8:	00000693          	addi	a3,zero,0
   30bfc:	00008617          	auipc	a2,0x8
   30c00:	44e60613          	addi	a2,a2,1102 # 3904a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1532>
   30c04:	00008597          	auipc	a1,0x8
   30c08:	43c58593          	addi	a1,a1,1084 # 39040 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1528>
   30c0c:	00011317          	auipc	t1,0x11
   30c10:	6fc33303          	ld	t1,1788(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30c14:	000300e7          	jalr	ra,0(t1)
   30c18:	d81ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c20:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c24:	00000693          	addi	a3,zero,0
   30c28:	00008617          	auipc	a2,0x8
   30c2c:	43260613          	addi	a2,a2,1074 # 3905a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1542>
   30c30:	00008597          	auipc	a1,0x8
   30c34:	42058593          	addi	a1,a1,1056 # 39050 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1538>
   30c38:	00011317          	auipc	t1,0x11
   30c3c:	6d033303          	ld	t1,1744(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30c40:	000300e7          	jalr	ra,0(t1)
   30c44:	d55ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c4c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c50:	00000693          	addi	a3,zero,0
   30c54:	00008617          	auipc	a2,0x8
   30c58:	41660613          	addi	a2,a2,1046 # 3906a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1552>
   30c5c:	00008597          	auipc	a1,0x8
   30c60:	40458593          	addi	a1,a1,1028 # 39060 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1548>
   30c64:	00011317          	auipc	t1,0x11
   30c68:	6a433303          	ld	t1,1700(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30c6c:	000300e7          	jalr	ra,0(t1)
   30c70:	d29ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30c74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30c78:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30c7c:	00000693          	addi	a3,zero,0
   30c80:	00008617          	auipc	a2,0x8
   30c84:	3f960613          	addi	a2,a2,1017 # 39079 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1561>
   30c88:	00008597          	auipc	a1,0x8
   30c8c:	3e858593          	addi	a1,a1,1000 # 39070 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1558>
   30c90:	00011317          	auipc	t1,0x11
   30c94:	67833303          	ld	t1,1656(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30c98:	000300e7          	jalr	ra,0(t1)
   30c9c:	cfdff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ca0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ca4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ca8:	00000693          	addi	a3,zero,0
   30cac:	00008617          	auipc	a2,0x8
   30cb0:	3e060613          	addi	a2,a2,992 # 3908c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1574>
   30cb4:	00008597          	auipc	a1,0x8
   30cb8:	3cc58593          	addi	a1,a1,972 # 39080 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1568>
   30cbc:	00011317          	auipc	t1,0x11
   30cc0:	64c33303          	ld	t1,1612(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30cc4:	000300e7          	jalr	ra,0(t1)
   30cc8:	cd1ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30ccc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30cd0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30cd4:	00000693          	addi	a3,zero,0
   30cd8:	00008617          	auipc	a2,0x8
   30cdc:	3c160613          	addi	a2,a2,961 # 39099 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1581>
   30ce0:	00008597          	auipc	a1,0x8
   30ce4:	3b058593          	addi	a1,a1,944 # 39090 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1578>
   30ce8:	00011317          	auipc	t1,0x11
   30cec:	62033303          	ld	t1,1568(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30cf0:	000300e7          	jalr	ra,0(t1)
   30cf4:	ca5ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30cf8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30cfc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30d00:	00000693          	addi	a3,zero,0
   30d04:	00008617          	auipc	a2,0x8
   30d08:	3a560613          	addi	a2,a2,933 # 390a9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1591>
   30d0c:	00008597          	auipc	a1,0x8
   30d10:	39458593          	addi	a1,a1,916 # 390a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1588>
   30d14:	00011317          	auipc	t1,0x11
   30d18:	5f433303          	ld	t1,1524(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30d1c:	000300e7          	jalr	ra,0(t1)
   30d20:	c79ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30d24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30d28:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30d2c:	00000693          	addi	a3,zero,0
   30d30:	00008617          	auipc	a2,0x8
   30d34:	38960613          	addi	a2,a2,905 # 390b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a1>
   30d38:	00008597          	auipc	a1,0x8
   30d3c:	37858593          	addi	a1,a1,888 # 390b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1598>
   30d40:	00011317          	auipc	t1,0x11
   30d44:	5c833303          	ld	t1,1480(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30d48:	000300e7          	jalr	ra,0(t1)
   30d4c:	c4dff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30d50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30d54:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30d58:	00000693          	addi	a3,zero,0
   30d5c:	00008617          	auipc	a2,0x8
   30d60:	36f60613          	addi	a2,a2,879 # 390cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b3>
   30d64:	00008597          	auipc	a1,0x8
   30d68:	35c58593          	addi	a1,a1,860 # 390c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a8>
   30d6c:	00011317          	auipc	t1,0x11
   30d70:	59c33303          	ld	t1,1436(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30d74:	000300e7          	jalr	ra,0(t1)
   30d78:	c21ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30d7c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30d80:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30d84:	00000693          	addi	a3,zero,0
   30d88:	00008617          	auipc	a2,0x8
   30d8c:	35160613          	addi	a2,a2,849 # 390d9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c1>
   30d90:	00008597          	auipc	a1,0x8
   30d94:	34058593          	addi	a1,a1,832 # 390d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b8>
   30d98:	00011317          	auipc	t1,0x11
   30d9c:	57033303          	ld	t1,1392(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30da0:	000300e7          	jalr	ra,0(t1)
   30da4:	bf5ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30da8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30dac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30db0:	00000693          	addi	a3,zero,0
   30db4:	00008617          	auipc	a2,0x8
   30db8:	33560613          	addi	a2,a2,821 # 390e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d1>
   30dbc:	00008597          	auipc	a1,0x8
   30dc0:	32458593          	addi	a1,a1,804 # 390e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c8>
   30dc4:	00011317          	auipc	t1,0x11
   30dc8:	54433303          	ld	t1,1348(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30dcc:	000300e7          	jalr	ra,0(t1)
   30dd0:	bc9ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30dd4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30dd8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ddc:	00000693          	addi	a3,zero,0
   30de0:	00008617          	auipc	a2,0x8
   30de4:	31960613          	addi	a2,a2,793 # 390f9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e1>
   30de8:	00008597          	auipc	a1,0x8
   30dec:	30858593          	addi	a1,a1,776 # 390f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d8>
   30df0:	00011317          	auipc	t1,0x11
   30df4:	51833303          	ld	t1,1304(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30df8:	000300e7          	jalr	ra,0(t1)
   30dfc:	b9dff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e04:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e08:	00000693          	addi	a3,zero,0
   30e0c:	00008617          	auipc	a2,0x8
   30e10:	2fd60613          	addi	a2,a2,765 # 39109 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f1>
   30e14:	00008597          	auipc	a1,0x8
   30e18:	2ec58593          	addi	a1,a1,748 # 39100 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e8>
   30e1c:	00011317          	auipc	t1,0x11
   30e20:	4ec33303          	ld	t1,1260(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30e24:	000300e7          	jalr	ra,0(t1)
   30e28:	b71ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e30:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e34:	00000693          	addi	a3,zero,0
   30e38:	00008617          	auipc	a2,0x8
   30e3c:	2e060613          	addi	a2,a2,736 # 39118 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1600>
   30e40:	00008597          	auipc	a1,0x8
   30e44:	2d058593          	addi	a1,a1,720 # 39110 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f8>
   30e48:	00011317          	auipc	t1,0x11
   30e4c:	4c033303          	ld	t1,1216(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30e50:	000300e7          	jalr	ra,0(t1)
   30e54:	b45ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e5c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e60:	00000693          	addi	a3,zero,0
   30e64:	00008617          	auipc	a2,0x8
   30e68:	2c660613          	addi	a2,a2,710 # 3912a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1612>
   30e6c:	00008597          	auipc	a1,0x8
   30e70:	2b458593          	addi	a1,a1,692 # 39120 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1608>
   30e74:	00011317          	auipc	t1,0x11
   30e78:	49433303          	ld	t1,1172(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30e7c:	000300e7          	jalr	ra,0(t1)
   30e80:	b19ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30e84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30e88:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30e8c:	00000693          	addi	a3,zero,0
   30e90:	00008617          	auipc	a2,0x8
   30e94:	2b160613          	addi	a2,a2,689 # 39141 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1629>
   30e98:	00008597          	auipc	a1,0x8
   30e9c:	29858593          	addi	a1,a1,664 # 39130 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1618>
   30ea0:	00011317          	auipc	t1,0x11
   30ea4:	46833303          	ld	t1,1128(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30ea8:	000300e7          	jalr	ra,0(t1)
   30eac:	aedff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30eb0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30eb4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30eb8:	00000693          	addi	a3,zero,0
   30ebc:	00008617          	auipc	a2,0x8
   30ec0:	29560613          	addi	a2,a2,661 # 39151 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1639>
   30ec4:	00008597          	auipc	a1,0x8
   30ec8:	28458593          	addi	a1,a1,644 # 39148 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1630>
   30ecc:	00011317          	auipc	t1,0x11
   30ed0:	43c33303          	ld	t1,1084(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30ed4:	000300e7          	jalr	ra,0(t1)
   30ed8:	ac1ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30edc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30ee0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30ee4:	00000693          	addi	a3,zero,0
   30ee8:	00008617          	auipc	a2,0x8
   30eec:	27960613          	addi	a2,a2,633 # 39161 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1649>
   30ef0:	00008597          	auipc	a1,0x8
   30ef4:	26858593          	addi	a1,a1,616 # 39158 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1640>
   30ef8:	00011317          	auipc	t1,0x11
   30efc:	41033303          	ld	t1,1040(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30f00:	000300e7          	jalr	ra,0(t1)
   30f04:	a95ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f10:	00000693          	addi	a3,zero,0
   30f14:	00008617          	auipc	a2,0x8
   30f18:	25e60613          	addi	a2,a2,606 # 39172 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x165a>
   30f1c:	00008597          	auipc	a1,0x8
   30f20:	24c58593          	addi	a1,a1,588 # 39168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1650>
   30f24:	00011317          	auipc	t1,0x11
   30f28:	3e433303          	ld	t1,996(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30f2c:	000300e7          	jalr	ra,0(t1)
   30f30:	a69ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f3c:	00000693          	addi	a3,zero,0
   30f40:	00008617          	auipc	a2,0x8
   30f44:	24160613          	addi	a2,a2,577 # 39181 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1669>
   30f48:	00008597          	auipc	a1,0x8
   30f4c:	23058593          	addi	a1,a1,560 # 39178 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1660>
   30f50:	00011317          	auipc	t1,0x11
   30f54:	3b833303          	ld	t1,952(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30f58:	000300e7          	jalr	ra,0(t1)
   30f5c:	a3dff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f68:	00000693          	addi	a3,zero,0
   30f6c:	00008617          	auipc	a2,0x8
   30f70:	22660613          	addi	a2,a2,550 # 39192 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x167a>
   30f74:	00008597          	auipc	a1,0x8
   30f78:	21458593          	addi	a1,a1,532 # 39188 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1670>
   30f7c:	00011317          	auipc	t1,0x11
   30f80:	38c33303          	ld	t1,908(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30f84:	000300e7          	jalr	ra,0(t1)
   30f88:	a11ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30f8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30f90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30f94:	00000693          	addi	a3,zero,0
   30f98:	00008617          	auipc	a2,0x8
   30f9c:	20960613          	addi	a2,a2,521 # 391a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1689>
   30fa0:	00008597          	auipc	a1,0x8
   30fa4:	1f858593          	addi	a1,a1,504 # 39198 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1680>
   30fa8:	00011317          	auipc	t1,0x11
   30fac:	36033303          	ld	t1,864(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30fb0:	000300e7          	jalr	ra,0(t1)
   30fb4:	9e5ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30fb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30fbc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30fc0:	00000693          	addi	a3,zero,0
   30fc4:	00008617          	auipc	a2,0x8
   30fc8:	1ec60613          	addi	a2,a2,492 # 391b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1698>
   30fcc:	00008597          	auipc	a1,0x8
   30fd0:	1dc58593          	addi	a1,a1,476 # 391a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1690>
   30fd4:	00011317          	auipc	t1,0x11
   30fd8:	33433303          	ld	t1,820(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   30fdc:	000300e7          	jalr	ra,0(t1)
   30fe0:	9b9ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   30fe4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   30fe8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   30fec:	00000693          	addi	a3,zero,0
   30ff0:	00008617          	auipc	a2,0x8
   30ff4:	1d060613          	addi	a2,a2,464 # 391c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a8>
   30ff8:	00008597          	auipc	a1,0x8
   30ffc:	1c058593          	addi	a1,a1,448 # 391b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a0>
   31000:	00011317          	auipc	t1,0x11
   31004:	30833303          	ld	t1,776(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31008:	000300e7          	jalr	ra,0(t1)
   3100c:	98dff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31010:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31014:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31018:	00000693          	addi	a3,zero,0
   3101c:	00008617          	auipc	a2,0x8
   31020:	1b460613          	addi	a2,a2,436 # 391d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b8>
   31024:	00008597          	auipc	a1,0x8
   31028:	1a458593          	addi	a1,a1,420 # 391c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b0>
   3102c:	00011317          	auipc	t1,0x11
   31030:	2dc33303          	ld	t1,732(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31034:	000300e7          	jalr	ra,0(t1)
   31038:	961ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3103c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31040:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31044:	00000693          	addi	a3,zero,0
   31048:	00008617          	auipc	a2,0x8
   3104c:	19860613          	addi	a2,a2,408 # 391e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c8>
   31050:	00008597          	auipc	a1,0x8
   31054:	18858593          	addi	a1,a1,392 # 391d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c0>
   31058:	00011317          	auipc	t1,0x11
   3105c:	2b033303          	ld	t1,688(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31060:	000300e7          	jalr	ra,0(t1)
   31064:	935ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31068:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3106c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31070:	00000693          	addi	a3,zero,0
   31074:	00008617          	auipc	a2,0x8
   31078:	17c60613          	addi	a2,a2,380 # 391f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d8>
   3107c:	00008597          	auipc	a1,0x8
   31080:	16c58593          	addi	a1,a1,364 # 391e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d0>
   31084:	00011317          	auipc	t1,0x11
   31088:	28433303          	ld	t1,644(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3108c:	000300e7          	jalr	ra,0(t1)
   31090:	909ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31094:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31098:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3109c:	00000693          	addi	a3,zero,0
   310a0:	00008617          	auipc	a2,0x8
   310a4:	16060613          	addi	a2,a2,352 # 39200 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e8>
   310a8:	00008597          	auipc	a1,0x8
   310ac:	15058593          	addi	a1,a1,336 # 391f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e0>
   310b0:	00011317          	auipc	t1,0x11
   310b4:	25833303          	ld	t1,600(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   310b8:	000300e7          	jalr	ra,0(t1)
   310bc:	8ddff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   310c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   310c4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   310c8:	00000693          	addi	a3,zero,0
   310cc:	00008617          	auipc	a2,0x8
   310d0:	14660613          	addi	a2,a2,326 # 39212 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16fa>
   310d4:	00008597          	auipc	a1,0x8
   310d8:	13458593          	addi	a1,a1,308 # 39208 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16f0>
   310dc:	00011317          	auipc	t1,0x11
   310e0:	22c33303          	ld	t1,556(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   310e4:	000300e7          	jalr	ra,0(t1)
   310e8:	8b1ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   310ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   310f0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   310f4:	00000693          	addi	a3,zero,0
   310f8:	00008617          	auipc	a2,0x8
   310fc:	12b60613          	addi	a2,a2,299 # 39223 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x170b>
   31100:	00008597          	auipc	a1,0x8
   31104:	11858593          	addi	a1,a1,280 # 39218 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1700>
   31108:	00011317          	auipc	t1,0x11
   3110c:	20033303          	ld	t1,512(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31110:	000300e7          	jalr	ra,0(t1)
   31114:	885ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31118:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3111c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31120:	00000693          	addi	a3,zero,0
   31124:	00008617          	auipc	a2,0x8
   31128:	10e60613          	addi	a2,a2,270 # 39232 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x171a>
   3112c:	00008597          	auipc	a1,0x8
   31130:	0fc58593          	addi	a1,a1,252 # 39228 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1710>
   31134:	00011317          	auipc	t1,0x11
   31138:	1d433303          	ld	t1,468(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3113c:	000300e7          	jalr	ra,0(t1)
   31140:	859ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31144:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31148:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3114c:	00000693          	addi	a3,zero,0
   31150:	00008617          	auipc	a2,0x8
   31154:	0f360613          	addi	a2,a2,243 # 39243 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x172b>
   31158:	00008597          	auipc	a1,0x8
   3115c:	0e058593          	addi	a1,a1,224 # 39238 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1720>
   31160:	00011317          	auipc	t1,0x11
   31164:	1a833303          	ld	t1,424(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31168:	000300e7          	jalr	ra,0(t1)
   3116c:	82dff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31170:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31174:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31178:	00000693          	addi	a3,zero,0
   3117c:	00008617          	auipc	a2,0x8
   31180:	0d760613          	addi	a2,a2,215 # 39253 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x173b>
   31184:	00008597          	auipc	a1,0x8
   31188:	0c458593          	addi	a1,a1,196 # 39248 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1730>
   3118c:	00011317          	auipc	t1,0x11
   31190:	17c33303          	ld	t1,380(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31194:	000300e7          	jalr	ra,0(t1)
   31198:	801ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3119c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   311a0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   311a4:	00000693          	addi	a3,zero,0
   311a8:	00008617          	auipc	a2,0x8
   311ac:	0bc60613          	addi	a2,a2,188 # 39264 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x174c>
   311b0:	00008597          	auipc	a1,0x8
   311b4:	0a858593          	addi	a1,a1,168 # 39258 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1740>
   311b8:	00011317          	auipc	t1,0x11
   311bc:	15033303          	ld	t1,336(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   311c0:	000300e7          	jalr	ra,0(t1)
   311c4:	fd4ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   311c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   311cc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   311d0:	00000693          	addi	a3,zero,0
   311d4:	00008617          	auipc	a2,0x8
   311d8:	09e60613          	addi	a2,a2,158 # 39272 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x175a>
   311dc:	00008597          	auipc	a1,0x8
   311e0:	08c58593          	addi	a1,a1,140 # 39268 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1750>
   311e4:	00011317          	auipc	t1,0x11
   311e8:	12433303          	ld	t1,292(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   311ec:	000300e7          	jalr	ra,0(t1)
   311f0:	fa8ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   311f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   311f8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   311fc:	00000693          	addi	a3,zero,0
   31200:	00008617          	auipc	a2,0x8
   31204:	08360613          	addi	a2,a2,131 # 39283 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x176b>
   31208:	00008597          	auipc	a1,0x8
   3120c:	07058593          	addi	a1,a1,112 # 39278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1760>
   31210:	00011317          	auipc	t1,0x11
   31214:	0f833303          	ld	t1,248(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31218:	000300e7          	jalr	ra,0(t1)
   3121c:	f7cff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31220:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31224:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31228:	00000693          	addi	a3,zero,0
   3122c:	00008617          	auipc	a2,0x8
   31230:	06760613          	addi	a2,a2,103 # 39293 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x177b>
   31234:	00008597          	auipc	a1,0x8
   31238:	05458593          	addi	a1,a1,84 # 39288 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1770>
   3123c:	00011317          	auipc	t1,0x11
   31240:	0cc33303          	ld	t1,204(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31244:	000300e7          	jalr	ra,0(t1)
   31248:	f50ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3124c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31250:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31254:	00000693          	addi	a3,zero,0
   31258:	00008617          	auipc	a2,0x8
   3125c:	04b60613          	addi	a2,a2,75 # 392a3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x178b>
   31260:	00008597          	auipc	a1,0x8
   31264:	03858593          	addi	a1,a1,56 # 39298 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1780>
   31268:	00011317          	auipc	t1,0x11
   3126c:	0a033303          	ld	t1,160(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31270:	000300e7          	jalr	ra,0(t1)
   31274:	f24ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31278:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3127c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31280:	00000693          	addi	a3,zero,0
   31284:	00008617          	auipc	a2,0x8
   31288:	03460613          	addi	a2,a2,52 # 392b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a0>
   3128c:	00008597          	auipc	a1,0x8
   31290:	01c58593          	addi	a1,a1,28 # 392a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1790>
   31294:	00011317          	auipc	t1,0x11
   31298:	07433303          	ld	t1,116(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3129c:	000300e7          	jalr	ra,0(t1)
   312a0:	ef8ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   312a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312a8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312ac:	00000693          	addi	a3,zero,0
   312b0:	00008617          	auipc	a2,0x8
   312b4:	02160613          	addi	a2,a2,33 # 392d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17b9>
   312b8:	00008597          	auipc	a1,0x8
   312bc:	00858593          	addi	a1,a1,8 # 392c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a8>
   312c0:	00011317          	auipc	t1,0x11
   312c4:	04833303          	ld	t1,72(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   312c8:	000300e7          	jalr	ra,0(t1)
   312cc:	eccff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   312d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   312d4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   312d8:	00000693          	addi	a3,zero,0
   312dc:	00008617          	auipc	a2,0x8
   312e0:	00560613          	addi	a2,a2,5 # 392e1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c9>
   312e4:	00008597          	auipc	a1,0x8
   312e8:	ff458593          	addi	a1,a1,-12 # 392d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c0>
   312ec:	00011317          	auipc	t1,0x11
   312f0:	01c33303          	ld	t1,28(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   312f4:	000300e7          	jalr	ra,0(t1)
   312f8:	ea0ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   312fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31300:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31304:	00000693          	addi	a3,zero,0
   31308:	00008617          	auipc	a2,0x8
   3130c:	ff960613          	addi	a2,a2,-7 # 39301 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17e9>
   31310:	00008597          	auipc	a1,0x8
   31314:	fd858593          	addi	a1,a1,-40 # 392e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17d0>
   31318:	00011317          	auipc	t1,0x11
   3131c:	ff033303          	ld	t1,-16(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31320:	000300e7          	jalr	ra,0(t1)
   31324:	e74ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31328:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3132c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31330:	00000693          	addi	a3,zero,0
   31334:	00008617          	auipc	a2,0x8
   31338:	fdf60613          	addi	a2,a2,-33 # 39313 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17fb>
   3133c:	00008597          	auipc	a1,0x8
   31340:	fcc58593          	addi	a1,a1,-52 # 39308 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17f0>
   31344:	00011317          	auipc	t1,0x11
   31348:	fc433303          	ld	t1,-60(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3134c:	000300e7          	jalr	ra,0(t1)
   31350:	e48ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31354:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31358:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3135c:	00000693          	addi	a3,zero,0
   31360:	00008617          	auipc	a2,0x8
   31364:	fc360613          	addi	a2,a2,-61 # 39323 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x180b>
   31368:	00008597          	auipc	a1,0x8
   3136c:	fb058593          	addi	a1,a1,-80 # 39318 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1800>
   31370:	00011317          	auipc	t1,0x11
   31374:	f9833303          	ld	t1,-104(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31378:	000300e7          	jalr	ra,0(t1)
   3137c:	e1cff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31380:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31384:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31388:	00000693          	addi	a3,zero,0
   3138c:	00008617          	auipc	a2,0x8
   31390:	faa60613          	addi	a2,a2,-86 # 39336 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x181e>
   31394:	00008597          	auipc	a1,0x8
   31398:	f9458593          	addi	a1,a1,-108 # 39328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1810>
   3139c:	00011317          	auipc	t1,0x11
   313a0:	f6c33303          	ld	t1,-148(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   313a4:	000300e7          	jalr	ra,0(t1)
   313a8:	df0ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   313b0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   313b4:	00000693          	addi	a3,zero,0
   313b8:	00008617          	auipc	a2,0x8
   313bc:	f9660613          	addi	a2,a2,-106 # 3934e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1836>
   313c0:	00008597          	auipc	a1,0x8
   313c4:	f7858593          	addi	a1,a1,-136 # 39338 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1820>
   313c8:	00011317          	auipc	t1,0x11
   313cc:	f4033303          	ld	t1,-192(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   313d0:	000300e7          	jalr	ra,0(t1)
   313d4:	dc4ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   313d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   313dc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   313e0:	00000693          	addi	a3,zero,0
   313e4:	00008617          	auipc	a2,0x8
   313e8:	f8060613          	addi	a2,a2,-128 # 39364 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x184c>
   313ec:	00008597          	auipc	a1,0x8
   313f0:	f6458593          	addi	a1,a1,-156 # 39350 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1838>
   313f4:	00011317          	auipc	t1,0x11
   313f8:	f1433303          	ld	t1,-236(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   313fc:	000300e7          	jalr	ra,0(t1)
   31400:	d98ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31404:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31408:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3140c:	00000693          	addi	a3,zero,0
   31410:	00008617          	auipc	a2,0x8
   31414:	f6760613          	addi	a2,a2,-153 # 39377 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x185f>
   31418:	00008597          	auipc	a1,0x8
   3141c:	f5058593          	addi	a1,a1,-176 # 39368 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1850>
   31420:	00011317          	auipc	t1,0x11
   31424:	ee833303          	ld	t1,-280(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31428:	000300e7          	jalr	ra,0(t1)
   3142c:	d6cff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31430:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31434:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31438:	00000693          	addi	a3,zero,0
   3143c:	00008617          	auipc	a2,0x8
   31440:	f5060613          	addi	a2,a2,-176 # 3938c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1874>
   31444:	00008597          	auipc	a1,0x8
   31448:	f3458593          	addi	a1,a1,-204 # 39378 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1860>
   3144c:	00011317          	auipc	t1,0x11
   31450:	ebc33303          	ld	t1,-324(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31454:	000300e7          	jalr	ra,0(t1)
   31458:	d40ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3145c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31460:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31464:	00000693          	addi	a3,zero,0
   31468:	00008617          	auipc	a2,0x8
   3146c:	f3960613          	addi	a2,a2,-199 # 393a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1889>
   31470:	00008597          	auipc	a1,0x8
   31474:	f2058593          	addi	a1,a1,-224 # 39390 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1878>
   31478:	00011317          	auipc	t1,0x11
   3147c:	e9033303          	ld	t1,-368(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31480:	000300e7          	jalr	ra,0(t1)
   31484:	d14ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
        return "(DW_OP)0x" + to_hex((int)v);
   31488:	00010493          	addi	s1,sp,0
   3148c:	00048513          	addi	a0,s1,0
   31490:	00011317          	auipc	t1,0x11
   31494:	f8833303          	ld	t1,-120(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   31498:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   3149c:	00900713          	addi	a4,zero,9
   314a0:	00008697          	auipc	a3,0x8
   314a4:	f0868693          	addi	a3,a3,-248 # 393a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1890>
   314a8:	00000613          	addi	a2,zero,0
   314ac:	00000593          	addi	a1,zero,0
   314b0:	00048513          	addi	a0,s1,0
   314b4:	9ace50ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   314b8:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   314bc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   314c0:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   314c4:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   314c8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   314cc:	03278c63          	beq	a5,s2,31504 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbd8>
      { _M_dataplus._M_p = __p; }
   314d0:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   314d4:	0104b783          	ld	a5,16(s1)
   314d8:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   314dc:	0084b783          	ld	a5,8(s1)
   314e0:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   314e4:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   314e8:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   314ec:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   314f0:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   314f4:	01010793          	addi	a5,sp,16
   314f8:	caf50063          	beq	a0,a5,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   314fc:	814e50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   31500:	c98ff06f          	jal	zero,30998 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x6c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   31504:	0084b603          	ld	a2,8(s1)
   31508:	00160613          	addi	a2,a2,1
	if (__n == 0)
   3150c:	fc0608e3          	beq	a2,zero,314dc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbb0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   31510:	00090593          	addi	a1,s2,0
   31514:	89ce50ef          	jal	ra,165b0 <memcpy@plt>
   31518:	fc5ff06f          	jal	zero,314dc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xbb0>
      { return _M_dataplus._M_p; }
   3151c:	00050413          	addi	s0,a0,0
   31520:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   31524:	01010793          	addi	a5,sp,16
   31528:	00f50463          	beq	a0,a5,31530 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0xc04>
   3152c:	fe5e40ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   31530:	00040513          	addi	a0,s0,0
   31534:	9bce50ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000031538 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>:
{
   31538:	fc010113          	addi	sp,sp,-64
   3153c:	02113c23          	sd	ra,56(sp)
   31540:	02813823          	sd	s0,48(sp)
   31544:	02913423          	sd	s1,40(sp)
   31548:	03213023          	sd	s2,32(sp)
   3154c:	00050413          	addi	s0,a0,0
        switch (v) {
   31550:	06e00793          	addi	a5,zero,110
   31554:	00b7f463          	bgeu	a5,a1,3155c <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x24>
   31558:	0080106f          	jal	zero,32560 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x1028>
   3155c:	00259793          	slli	a5,a1,0x2
   31560:	00009717          	auipc	a4,0x9
   31564:	b5470713          	addi	a4,a4,-1196 # 3a0b4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x259c>
   31568:	00e787b3          	add	a5,a5,a4
   3156c:	0007a783          	lw	a5,0(a5)
   31570:	00e787b3          	add	a5,a5,a4
   31574:	00078067          	jalr	zero,0(a5)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31578:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3157c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31580:	00000693          	addi	a3,zero,0
   31584:	00008617          	auipc	a2,0x8
   31588:	e4160613          	addi	a2,a2,-447 # 393c5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ad>
   3158c:	00008597          	auipc	a1,0x8
   31590:	e2c58593          	addi	a1,a1,-468 # 393b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18a0>
   31594:	00011317          	auipc	t1,0x11
   31598:	d7433303          	ld	t1,-652(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3159c:	000300e7          	jalr	ra,0(t1)
}
   315a0:	00040513          	addi	a0,s0,0
   315a4:	03813083          	ld	ra,56(sp)
   315a8:	03013403          	ld	s0,48(sp)
   315ac:	02813483          	ld	s1,40(sp)
   315b0:	02013903          	ld	s2,32(sp)
   315b4:	04010113          	addi	sp,sp,64
   315b8:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   315bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   315c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   315c4:	00000693          	addi	a3,zero,0
   315c8:	00008617          	auipc	a2,0x8
   315cc:	e0e60613          	addi	a2,a2,-498 # 393d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18be>
   315d0:	00008597          	auipc	a1,0x8
   315d4:	df858593          	addi	a1,a1,-520 # 393c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18b0>
   315d8:	00011317          	auipc	t1,0x11
   315dc:	d3033303          	ld	t1,-720(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   315e0:	000300e7          	jalr	ra,0(t1)
   315e4:	fbdff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   315e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   315ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   315f0:	00000693          	addi	a3,zero,0
   315f4:	00008617          	auipc	a2,0x8
   315f8:	dee60613          	addi	a2,a2,-530 # 393e2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ca>
   315fc:	00008597          	auipc	a1,0x8
   31600:	ddc58593          	addi	a1,a1,-548 # 393d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18c0>
   31604:	00011317          	auipc	t1,0x11
   31608:	d0433303          	ld	t1,-764(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3160c:	000300e7          	jalr	ra,0(t1)
   31610:	f91ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31614:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31618:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3161c:	00000693          	addi	a3,zero,0
   31620:	00008617          	auipc	a2,0x8
   31624:	dd660613          	addi	a2,a2,-554 # 393f6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18de>
   31628:	00008597          	auipc	a1,0x8
   3162c:	dc058593          	addi	a1,a1,-576 # 393e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18d0>
   31630:	00011317          	auipc	t1,0x11
   31634:	cd833303          	ld	t1,-808(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31638:	000300e7          	jalr	ra,0(t1)
   3163c:	f65ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31640:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31644:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31648:	00000693          	addi	a3,zero,0
   3164c:	00008617          	auipc	a2,0x8
   31650:	dbb60613          	addi	a2,a2,-581 # 39407 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ef>
   31654:	00008597          	auipc	a1,0x8
   31658:	da458593          	addi	a1,a1,-604 # 393f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18e0>
   3165c:	00011317          	auipc	t1,0x11
   31660:	cac33303          	ld	t1,-852(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31664:	000300e7          	jalr	ra,0(t1)
   31668:	f39ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3166c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31670:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31674:	00000693          	addi	a3,zero,0
   31678:	00008617          	auipc	a2,0x8
   3167c:	da060613          	addi	a2,a2,-608 # 39418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1900>
   31680:	00008597          	auipc	a1,0x8
   31684:	d8858593          	addi	a1,a1,-632 # 39408 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18f0>
   31688:	00011317          	auipc	t1,0x11
   3168c:	c8033303          	ld	t1,-896(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31690:	000300e7          	jalr	ra,0(t1)
   31694:	f0dff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31698:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3169c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   316a0:	00000693          	addi	a3,zero,0
   316a4:	00008617          	auipc	a2,0x8
   316a8:	d8a60613          	addi	a2,a2,-630 # 3942e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1916>
   316ac:	00008597          	auipc	a1,0x8
   316b0:	d7458593          	addi	a1,a1,-652 # 39420 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1908>
   316b4:	00011317          	auipc	t1,0x11
   316b8:	c5433303          	ld	t1,-940(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   316bc:	000300e7          	jalr	ra,0(t1)
   316c0:	ee1ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   316c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   316c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   316cc:	00000693          	addi	a3,zero,0
   316d0:	00008617          	auipc	a2,0x8
   316d4:	d6f60613          	addi	a2,a2,-657 # 3943f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1927>
   316d8:	00008597          	auipc	a1,0x8
   316dc:	d5858593          	addi	a1,a1,-680 # 39430 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1918>
   316e0:	00011317          	auipc	t1,0x11
   316e4:	c2833303          	ld	t1,-984(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   316e8:	000300e7          	jalr	ra,0(t1)
   316ec:	eb5ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   316f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   316f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   316f8:	00000693          	addi	a3,zero,0
   316fc:	00008617          	auipc	a2,0x8
   31700:	d5060613          	addi	a2,a2,-688 # 3944c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1934>
   31704:	00008597          	auipc	a1,0x8
   31708:	d3c58593          	addi	a1,a1,-708 # 39440 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1928>
   3170c:	00011317          	auipc	t1,0x11
   31710:	bfc33303          	ld	t1,-1028(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31714:	000300e7          	jalr	ra,0(t1)
   31718:	e89ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3171c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31720:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31724:	00000693          	addi	a3,zero,0
   31728:	00008617          	auipc	a2,0x8
   3172c:	d3560613          	addi	a2,a2,-715 # 3945d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1945>
   31730:	00008597          	auipc	a1,0x8
   31734:	d2058593          	addi	a1,a1,-736 # 39450 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1938>
   31738:	00011317          	auipc	t1,0x11
   3173c:	bd033303          	ld	t1,-1072(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31740:	000300e7          	jalr	ra,0(t1)
   31744:	e5dff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31748:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3174c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31750:	00000693          	addi	a3,zero,0
   31754:	00008617          	auipc	a2,0x8
   31758:	d1a60613          	addi	a2,a2,-742 # 3946e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1956>
   3175c:	00008597          	auipc	a1,0x8
   31760:	d0458593          	addi	a1,a1,-764 # 39460 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1948>
   31764:	00011317          	auipc	t1,0x11
   31768:	ba433303          	ld	t1,-1116(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3176c:	000300e7          	jalr	ra,0(t1)
   31770:	e31ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31774:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31778:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3177c:	00000693          	addi	a3,zero,0
   31780:	00008617          	auipc	a2,0x8
   31784:	cfb60613          	addi	a2,a2,-773 # 3947b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1963>
   31788:	00008597          	auipc	a1,0x8
   3178c:	ce858593          	addi	a1,a1,-792 # 39470 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1958>
   31790:	00011317          	auipc	t1,0x11
   31794:	b7833303          	ld	t1,-1160(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31798:	000300e7          	jalr	ra,0(t1)
   3179c:	e05ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   317a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   317a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317a8:	00000693          	addi	a3,zero,0
   317ac:	00008617          	auipc	a2,0x8
   317b0:	ce560613          	addi	a2,a2,-795 # 39491 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1979>
   317b4:	00008597          	auipc	a1,0x8
   317b8:	ccc58593          	addi	a1,a1,-820 # 39480 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1968>
   317bc:	00011317          	auipc	t1,0x11
   317c0:	b4c33303          	ld	t1,-1204(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   317c4:	000300e7          	jalr	ra,0(t1)
   317c8:	dd9ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   317cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   317d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   317d4:	00000693          	addi	a3,zero,0
   317d8:	00008617          	auipc	a2,0x8
   317dc:	cd060613          	addi	a2,a2,-816 # 394a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1990>
   317e0:	00008597          	auipc	a1,0x8
   317e4:	cb858593          	addi	a1,a1,-840 # 39498 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1980>
   317e8:	00011317          	auipc	t1,0x11
   317ec:	b2033303          	ld	t1,-1248(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   317f0:	000300e7          	jalr	ra,0(t1)
   317f4:	dadff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   317f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   317fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31800:	00000693          	addi	a3,zero,0
   31804:	00008617          	auipc	a2,0x8
   31808:	cb860613          	addi	a2,a2,-840 # 394bc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a4>
   3180c:	00008597          	auipc	a1,0x8
   31810:	ca458593          	addi	a1,a1,-860 # 394b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1998>
   31814:	00011317          	auipc	t1,0x11
   31818:	af433303          	ld	t1,-1292(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3181c:	000300e7          	jalr	ra,0(t1)
   31820:	d81ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31824:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31828:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3182c:	00000693          	addi	a3,zero,0
   31830:	00008617          	auipc	a2,0x8
   31834:	ca360613          	addi	a2,a2,-861 # 394d3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19bb>
   31838:	00008597          	auipc	a1,0x8
   3183c:	c8858593          	addi	a1,a1,-888 # 394c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a8>
   31840:	00011317          	auipc	t1,0x11
   31844:	ac833303          	ld	t1,-1336(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31848:	000300e7          	jalr	ra,0(t1)
   3184c:	d55ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31850:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31854:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31858:	00000693          	addi	a3,zero,0
   3185c:	00008617          	auipc	a2,0x8
   31860:	c9260613          	addi	a2,a2,-878 # 394ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d6>
   31864:	00008597          	auipc	a1,0x8
   31868:	c7458593          	addi	a1,a1,-908 # 394d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19c0>
   3186c:	00011317          	auipc	t1,0x11
   31870:	a9c33303          	ld	t1,-1380(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31874:	000300e7          	jalr	ra,0(t1)
   31878:	d29ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3187c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31880:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31884:	00000693          	addi	a3,zero,0
   31888:	00008617          	auipc	a2,0x8
   3188c:	c7660613          	addi	a2,a2,-906 # 394fe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e6>
   31890:	00008597          	auipc	a1,0x8
   31894:	c6058593          	addi	a1,a1,-928 # 394f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d8>
   31898:	00011317          	auipc	t1,0x11
   3189c:	a7033303          	ld	t1,-1424(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   318a0:	000300e7          	jalr	ra,0(t1)
   318a4:	cfdff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   318a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   318ac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   318b0:	00000693          	addi	a3,zero,0
   318b4:	00008617          	auipc	a2,0x8
   318b8:	c5d60613          	addi	a2,a2,-931 # 39511 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19f9>
   318bc:	00008597          	auipc	a1,0x8
   318c0:	c4458593          	addi	a1,a1,-956 # 39500 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e8>
   318c4:	00011317          	auipc	t1,0x11
   318c8:	a4433303          	ld	t1,-1468(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   318cc:	000300e7          	jalr	ra,0(t1)
   318d0:	cd1ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   318d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   318d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   318dc:	00000693          	addi	a3,zero,0
   318e0:	00008617          	auipc	a2,0x8
   318e4:	c4d60613          	addi	a2,a2,-947 # 3952d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a15>
   318e8:	00008597          	auipc	a1,0x8
   318ec:	c3058593          	addi	a1,a1,-976 # 39518 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a00>
   318f0:	00011317          	auipc	t1,0x11
   318f4:	a1833303          	ld	t1,-1512(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   318f8:	000300e7          	jalr	ra,0(t1)
   318fc:	ca5ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31900:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31904:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31908:	00000693          	addi	a3,zero,0
   3190c:	00008617          	auipc	a2,0x8
   31910:	c3760613          	addi	a2,a2,-969 # 39543 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a2b>
   31914:	00008597          	auipc	a1,0x8
   31918:	c1c58593          	addi	a1,a1,-996 # 39530 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a18>
   3191c:	00011317          	auipc	t1,0x11
   31920:	9ec33303          	ld	t1,-1556(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31924:	000300e7          	jalr	ra,0(t1)
   31928:	c79ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3192c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31930:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31934:	00000693          	addi	a3,zero,0
   31938:	00008617          	auipc	a2,0x8
   3193c:	c1c60613          	addi	a2,a2,-996 # 39554 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a3c>
   31940:	00008597          	auipc	a1,0x8
   31944:	c0858593          	addi	a1,a1,-1016 # 39548 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a30>
   31948:	00011317          	auipc	t1,0x11
   3194c:	9c033303          	ld	t1,-1600(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31950:	000300e7          	jalr	ra,0(t1)
   31954:	c4dff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31958:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3195c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31960:	00000693          	addi	a3,zero,0
   31964:	00008617          	auipc	a2,0x8
   31968:	c0560613          	addi	a2,a2,-1019 # 39569 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a51>
   3196c:	00008597          	auipc	a1,0x8
   31970:	bec58593          	addi	a1,a1,-1044 # 39558 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a40>
   31974:	00011317          	auipc	t1,0x11
   31978:	99433303          	ld	t1,-1644(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3197c:	000300e7          	jalr	ra,0(t1)
   31980:	c21ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31984:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31988:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3198c:	00000693          	addi	a3,zero,0
   31990:	00008617          	auipc	a2,0x8
   31994:	bf160613          	addi	a2,a2,-1039 # 39581 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a69>
   31998:	00008597          	auipc	a1,0x8
   3199c:	bd858593          	addi	a1,a1,-1064 # 39570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a58>
   319a0:	00011317          	auipc	t1,0x11
   319a4:	96833303          	ld	t1,-1688(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   319a8:	000300e7          	jalr	ra,0(t1)
   319ac:	bf5ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   319b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   319b4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   319b8:	00000693          	addi	a3,zero,0
   319bc:	00008617          	auipc	a2,0x8
   319c0:	bda60613          	addi	a2,a2,-1062 # 39596 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a7e>
   319c4:	00008597          	auipc	a1,0x8
   319c8:	bc458593          	addi	a1,a1,-1084 # 39588 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a70>
   319cc:	00011317          	auipc	t1,0x11
   319d0:	93c33303          	ld	t1,-1732(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   319d4:	000300e7          	jalr	ra,0(t1)
   319d8:	bc9ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   319dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   319e0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   319e4:	00000693          	addi	a3,zero,0
   319e8:	00008617          	auipc	a2,0x8
   319ec:	bc060613          	addi	a2,a2,-1088 # 395a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a90>
   319f0:	00008597          	auipc	a1,0x8
   319f4:	ba858593          	addi	a1,a1,-1112 # 39598 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a80>
   319f8:	00011317          	auipc	t1,0x11
   319fc:	91033303          	ld	t1,-1776(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31a00:	000300e7          	jalr	ra,0(t1)
   31a04:	b9dff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a0c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a10:	00000693          	addi	a3,zero,0
   31a14:	00008617          	auipc	a2,0x8
   31a18:	bad60613          	addi	a2,a2,-1107 # 395c1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1aa9>
   31a1c:	00008597          	auipc	a1,0x8
   31a20:	b9458593          	addi	a1,a1,-1132 # 395b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a98>
   31a24:	00011317          	auipc	t1,0x11
   31a28:	8e433303          	ld	t1,-1820(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31a2c:	000300e7          	jalr	ra,0(t1)
   31a30:	b71ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a34:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a38:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a3c:	00000693          	addi	a3,zero,0
   31a40:	00008617          	auipc	a2,0x8
   31a44:	b9960613          	addi	a2,a2,-1127 # 395d9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac1>
   31a48:	00008597          	auipc	a1,0x8
   31a4c:	b8058593          	addi	a1,a1,-1152 # 395c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ab0>
   31a50:	00011317          	auipc	t1,0x11
   31a54:	8b833303          	ld	t1,-1864(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31a58:	000300e7          	jalr	ra,0(t1)
   31a5c:	b45ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a64:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a68:	00000693          	addi	a3,zero,0
   31a6c:	00008617          	auipc	a2,0x8
   31a70:	b8460613          	addi	a2,a2,-1148 # 395f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ad8>
   31a74:	00008597          	auipc	a1,0x8
   31a78:	b6c58593          	addi	a1,a1,-1172 # 395e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac8>
   31a7c:	00011317          	auipc	t1,0x11
   31a80:	88c33303          	ld	t1,-1908(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31a84:	000300e7          	jalr	ra,0(t1)
   31a88:	b19ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31a8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31a90:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31a94:	00000693          	addi	a3,zero,0
   31a98:	00008617          	auipc	a2,0x8
   31a9c:	b7160613          	addi	a2,a2,-1167 # 39609 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af1>
   31aa0:	00008597          	auipc	a1,0x8
   31aa4:	b5858593          	addi	a1,a1,-1192 # 395f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ae0>
   31aa8:	00011317          	auipc	t1,0x11
   31aac:	86033303          	ld	t1,-1952(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31ab0:	000300e7          	jalr	ra,0(t1)
   31ab4:	aedff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ab8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31abc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ac0:	00000693          	addi	a3,zero,0
   31ac4:	00008617          	auipc	a2,0x8
   31ac8:	b6160613          	addi	a2,a2,-1183 # 39625 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b0d>
   31acc:	00008597          	auipc	a1,0x8
   31ad0:	b4458593          	addi	a1,a1,-1212 # 39610 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af8>
   31ad4:	00011317          	auipc	t1,0x11
   31ad8:	83433303          	ld	t1,-1996(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31adc:	000300e7          	jalr	ra,0(t1)
   31ae0:	ac1ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ae4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ae8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31aec:	00000693          	addi	a3,zero,0
   31af0:	00008617          	auipc	a2,0x8
   31af4:	b4b60613          	addi	a2,a2,-1205 # 3963b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b23>
   31af8:	00008597          	auipc	a1,0x8
   31afc:	b3058593          	addi	a1,a1,-1232 # 39628 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b10>
   31b00:	00011317          	auipc	t1,0x11
   31b04:	80833303          	ld	t1,-2040(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31b08:	000300e7          	jalr	ra,0(t1)
   31b0c:	a95ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b18:	00000693          	addi	a3,zero,0
   31b1c:	00008617          	auipc	a2,0x8
   31b20:	b3760613          	addi	a2,a2,-1225 # 39653 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b3b>
   31b24:	00008597          	auipc	a1,0x8
   31b28:	b1c58593          	addi	a1,a1,-1252 # 39640 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b28>
   31b2c:	00010317          	auipc	t1,0x10
   31b30:	7dc33303          	ld	t1,2012(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31b34:	000300e7          	jalr	ra,0(t1)
   31b38:	a69ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b40:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b44:	00000693          	addi	a3,zero,0
   31b48:	00008617          	auipc	a2,0x8
   31b4c:	b2060613          	addi	a2,a2,-1248 # 39668 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b50>
   31b50:	00008597          	auipc	a1,0x8
   31b54:	b0858593          	addi	a1,a1,-1272 # 39658 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b40>
   31b58:	00010317          	auipc	t1,0x10
   31b5c:	7b033303          	ld	t1,1968(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31b60:	000300e7          	jalr	ra,0(t1)
   31b64:	a3dff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b6c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b70:	00000693          	addi	a3,zero,0
   31b74:	00008617          	auipc	a2,0x8
   31b78:	b0c60613          	addi	a2,a2,-1268 # 39680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b68>
   31b7c:	00008597          	auipc	a1,0x8
   31b80:	af458593          	addi	a1,a1,-1292 # 39670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b58>
   31b84:	00010317          	auipc	t1,0x10
   31b88:	78433303          	ld	t1,1924(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31b8c:	000300e7          	jalr	ra,0(t1)
   31b90:	a11ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31b94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31b98:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31b9c:	00000693          	addi	a3,zero,0
   31ba0:	00008617          	auipc	a2,0x8
   31ba4:	b0060613          	addi	a2,a2,-1280 # 396a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b88>
   31ba8:	00008597          	auipc	a1,0x8
   31bac:	ae058593          	addi	a1,a1,-1312 # 39688 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b70>
   31bb0:	00010317          	auipc	t1,0x10
   31bb4:	75833303          	ld	t1,1880(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31bb8:	000300e7          	jalr	ra,0(t1)
   31bbc:	9e5ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31bc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31bc4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31bc8:	00000693          	addi	a3,zero,0
   31bcc:	00008617          	auipc	a2,0x8
   31bd0:	ae760613          	addi	a2,a2,-1305 # 396b3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b9b>
   31bd4:	00008597          	auipc	a1,0x8
   31bd8:	ad458593          	addi	a1,a1,-1324 # 396a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b90>
   31bdc:	00010317          	auipc	t1,0x10
   31be0:	72c33303          	ld	t1,1836(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31be4:	000300e7          	jalr	ra,0(t1)
   31be8:	9b9ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31bec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31bf0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31bf4:	00000693          	addi	a3,zero,0
   31bf8:	00008617          	auipc	a2,0x8
   31bfc:	ada60613          	addi	a2,a2,-1318 # 396d2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bba>
   31c00:	00008597          	auipc	a1,0x8
   31c04:	ab858593          	addi	a1,a1,-1352 # 396b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ba0>
   31c08:	00010317          	auipc	t1,0x10
   31c0c:	70033303          	ld	t1,1792(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31c10:	000300e7          	jalr	ra,0(t1)
   31c14:	98dff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c1c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c20:	00000693          	addi	a3,zero,0
   31c24:	00008617          	auipc	a2,0x8
   31c28:	ac560613          	addi	a2,a2,-1339 # 396e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd1>
   31c2c:	00008597          	auipc	a1,0x8
   31c30:	aac58593          	addi	a1,a1,-1364 # 396d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bc0>
   31c34:	00010317          	auipc	t1,0x10
   31c38:	6d433303          	ld	t1,1748(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31c3c:	000300e7          	jalr	ra,0(t1)
   31c40:	961ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c48:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c4c:	00000693          	addi	a3,zero,0
   31c50:	00008617          	auipc	a2,0x8
   31c54:	aaf60613          	addi	a2,a2,-1361 # 396ff <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be7>
   31c58:	00008597          	auipc	a1,0x8
   31c5c:	a9858593          	addi	a1,a1,-1384 # 396f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd8>
   31c60:	00010317          	auipc	t1,0x10
   31c64:	6a833303          	ld	t1,1704(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31c68:	000300e7          	jalr	ra,0(t1)
   31c6c:	935ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31c74:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31c78:	00000693          	addi	a3,zero,0
   31c7c:	00008617          	auipc	a2,0x8
   31c80:	a9360613          	addi	a2,a2,-1389 # 3970f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf7>
   31c84:	00008597          	auipc	a1,0x8
   31c88:	a7c58593          	addi	a1,a1,-1412 # 39700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be8>
   31c8c:	00010317          	auipc	t1,0x10
   31c90:	67c33303          	ld	t1,1660(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31c94:	000300e7          	jalr	ra,0(t1)
   31c98:	909ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31c9c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ca0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ca4:	00000693          	addi	a3,zero,0
   31ca8:	00008617          	auipc	a2,0x8
   31cac:	a7960613          	addi	a2,a2,-1415 # 39721 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c09>
   31cb0:	00008597          	auipc	a1,0x8
   31cb4:	a6058593          	addi	a1,a1,-1440 # 39710 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf8>
   31cb8:	00010317          	auipc	t1,0x10
   31cbc:	65033303          	ld	t1,1616(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31cc0:	000300e7          	jalr	ra,0(t1)
   31cc4:	8ddff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31cc8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31ccc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31cd0:	00000693          	addi	a3,zero,0
   31cd4:	00008617          	auipc	a2,0x8
   31cd8:	a6460613          	addi	a2,a2,-1436 # 39738 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c20>
   31cdc:	00008597          	auipc	a1,0x8
   31ce0:	a4c58593          	addi	a1,a1,-1460 # 39728 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c10>
   31ce4:	00010317          	auipc	t1,0x10
   31ce8:	62433303          	ld	t1,1572(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31cec:	000300e7          	jalr	ra,0(t1)
   31cf0:	8b1ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31cf4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31cf8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31cfc:	00000693          	addi	a3,zero,0
   31d00:	00008617          	auipc	a2,0x8
   31d04:	a4e60613          	addi	a2,a2,-1458 # 3974e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c36>
   31d08:	00008597          	auipc	a1,0x8
   31d0c:	a3858593          	addi	a1,a1,-1480 # 39740 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c28>
   31d10:	00010317          	auipc	t1,0x10
   31d14:	5f833303          	ld	t1,1528(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31d18:	000300e7          	jalr	ra,0(t1)
   31d1c:	885ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d24:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d28:	00000693          	addi	a3,zero,0
   31d2c:	00008617          	auipc	a2,0x8
   31d30:	a3260613          	addi	a2,a2,-1486 # 3975e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c46>
   31d34:	00008597          	auipc	a1,0x8
   31d38:	a1c58593          	addi	a1,a1,-1508 # 39750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c38>
   31d3c:	00010317          	auipc	t1,0x10
   31d40:	5cc33303          	ld	t1,1484(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31d44:	000300e7          	jalr	ra,0(t1)
   31d48:	859ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d50:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d54:	00000693          	addi	a3,zero,0
   31d58:	00008617          	auipc	a2,0x8
   31d5c:	a1860613          	addi	a2,a2,-1512 # 39770 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c58>
   31d60:	00008597          	auipc	a1,0x8
   31d64:	a0058593          	addi	a1,a1,-1536 # 39760 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c48>
   31d68:	00010317          	auipc	t1,0x10
   31d6c:	5a033303          	ld	t1,1440(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31d70:	000300e7          	jalr	ra,0(t1)
   31d74:	82dff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31d78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31d7c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31d80:	00000693          	addi	a3,zero,0
   31d84:	00008617          	auipc	a2,0x8
   31d88:	a0060613          	addi	a2,a2,-1536 # 39784 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c6c>
   31d8c:	00008597          	auipc	a1,0x8
   31d90:	9ec58593          	addi	a1,a1,-1556 # 39778 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c60>
   31d94:	00010317          	auipc	t1,0x10
   31d98:	57433303          	ld	t1,1396(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31d9c:	000300e7          	jalr	ra,0(t1)
   31da0:	801ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31da4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31da8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31dac:	00000693          	addi	a3,zero,0
   31db0:	00008617          	auipc	a2,0x8
   31db4:	9ed60613          	addi	a2,a2,-1555 # 3979d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c85>
   31db8:	00008597          	auipc	a1,0x8
   31dbc:	9d058593          	addi	a1,a1,-1584 # 39788 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c70>
   31dc0:	00010317          	auipc	t1,0x10
   31dc4:	54833303          	ld	t1,1352(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31dc8:	000300e7          	jalr	ra,0(t1)
   31dcc:	fd4ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31dd0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31dd4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31dd8:	00000693          	addi	a3,zero,0
   31ddc:	00008617          	auipc	a2,0x8
   31de0:	9d460613          	addi	a2,a2,-1580 # 397b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c98>
   31de4:	00008597          	auipc	a1,0x8
   31de8:	9bc58593          	addi	a1,a1,-1604 # 397a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c88>
   31dec:	00010317          	auipc	t1,0x10
   31df0:	51c33303          	ld	t1,1308(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31df4:	000300e7          	jalr	ra,0(t1)
   31df8:	fa8ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31dfc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e00:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e04:	00000693          	addi	a3,zero,0
   31e08:	00008617          	auipc	a2,0x8
   31e0c:	9c360613          	addi	a2,a2,-1597 # 397cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb3>
   31e10:	00008597          	auipc	a1,0x8
   31e14:	9a858593          	addi	a1,a1,-1624 # 397b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ca0>
   31e18:	00010317          	auipc	t1,0x10
   31e1c:	4f033303          	ld	t1,1264(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31e20:	000300e7          	jalr	ra,0(t1)
   31e24:	f7cff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e2c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e30:	00000693          	addi	a3,zero,0
   31e34:	00008617          	auipc	a2,0x8
   31e38:	9aa60613          	addi	a2,a2,-1622 # 397de <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc6>
   31e3c:	00008597          	auipc	a1,0x8
   31e40:	99458593          	addi	a1,a1,-1644 # 397d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb8>
   31e44:	00010317          	auipc	t1,0x10
   31e48:	4c433303          	ld	t1,1220(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31e4c:	000300e7          	jalr	ra,0(t1)
   31e50:	f50ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e54:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e58:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e5c:	00000693          	addi	a3,zero,0
   31e60:	00008617          	auipc	a2,0x8
   31e64:	98d60613          	addi	a2,a2,-1651 # 397ed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd5>
   31e68:	00008597          	auipc	a1,0x8
   31e6c:	97858593          	addi	a1,a1,-1672 # 397e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc8>
   31e70:	00010317          	auipc	t1,0x10
   31e74:	49833303          	ld	t1,1176(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31e78:	000300e7          	jalr	ra,0(t1)
   31e7c:	f24ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31e80:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31e84:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31e88:	00000693          	addi	a3,zero,0
   31e8c:	00008617          	auipc	a2,0x8
   31e90:	97760613          	addi	a2,a2,-1673 # 39803 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ceb>
   31e94:	00008597          	auipc	a1,0x8
   31e98:	95c58593          	addi	a1,a1,-1700 # 397f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd8>
   31e9c:	00010317          	auipc	t1,0x10
   31ea0:	46c33303          	ld	t1,1132(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31ea4:	000300e7          	jalr	ra,0(t1)
   31ea8:	ef8ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31eac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31eb0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31eb4:	00000693          	addi	a3,zero,0
   31eb8:	00008617          	auipc	a2,0x8
   31ebc:	96160613          	addi	a2,a2,-1695 # 39819 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d01>
   31ec0:	00008597          	auipc	a1,0x8
   31ec4:	94858593          	addi	a1,a1,-1720 # 39808 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cf0>
   31ec8:	00010317          	auipc	t1,0x10
   31ecc:	44033303          	ld	t1,1088(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31ed0:	000300e7          	jalr	ra,0(t1)
   31ed4:	eccff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31ed8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31edc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31ee0:	00000693          	addi	a3,zero,0
   31ee4:	00008617          	auipc	a2,0x8
   31ee8:	94660613          	addi	a2,a2,-1722 # 3982a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d12>
   31eec:	00008597          	auipc	a1,0x8
   31ef0:	93458593          	addi	a1,a1,-1740 # 39820 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d08>
   31ef4:	00010317          	auipc	t1,0x10
   31ef8:	41433303          	ld	t1,1044(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31efc:	000300e7          	jalr	ra,0(t1)
   31f00:	ea0ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f08:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f0c:	00000693          	addi	a3,zero,0
   31f10:	00008617          	auipc	a2,0x8
   31f14:	93260613          	addi	a2,a2,-1742 # 39842 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d2a>
   31f18:	00008597          	auipc	a1,0x8
   31f1c:	91858593          	addi	a1,a1,-1768 # 39830 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d18>
   31f20:	00010317          	auipc	t1,0x10
   31f24:	3e833303          	ld	t1,1000(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31f28:	000300e7          	jalr	ra,0(t1)
   31f2c:	e74ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f30:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f34:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f38:	00000693          	addi	a3,zero,0
   31f3c:	00008617          	auipc	a2,0x8
   31f40:	92460613          	addi	a2,a2,-1756 # 39860 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d48>
   31f44:	00008597          	auipc	a1,0x8
   31f48:	90458593          	addi	a1,a1,-1788 # 39848 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d30>
   31f4c:	00010317          	auipc	t1,0x10
   31f50:	3bc33303          	ld	t1,956(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31f54:	000300e7          	jalr	ra,0(t1)
   31f58:	e48ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f5c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f60:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f64:	00000693          	addi	a3,zero,0
   31f68:	00008617          	auipc	a2,0x8
   31f6c:	91060613          	addi	a2,a2,-1776 # 39878 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d60>
   31f70:	00008597          	auipc	a1,0x8
   31f74:	8f858593          	addi	a1,a1,-1800 # 39868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d50>
   31f78:	00010317          	auipc	t1,0x10
   31f7c:	39033303          	ld	t1,912(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31f80:	000300e7          	jalr	ra,0(t1)
   31f84:	e1cff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31f88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31f8c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31f90:	00000693          	addi	a3,zero,0
   31f94:	00008617          	auipc	a2,0x8
   31f98:	90660613          	addi	a2,a2,-1786 # 3989a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d82>
   31f9c:	00008597          	auipc	a1,0x8
   31fa0:	8e458593          	addi	a1,a1,-1820 # 39880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d68>
   31fa4:	00010317          	auipc	t1,0x10
   31fa8:	36433303          	ld	t1,868(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31fac:	000300e7          	jalr	ra,0(t1)
   31fb0:	df0ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31fb4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31fb8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31fbc:	00000693          	addi	a3,zero,0
   31fc0:	00008617          	auipc	a2,0x8
   31fc4:	8ef60613          	addi	a2,a2,-1809 # 398af <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d97>
   31fc8:	00008597          	auipc	a1,0x8
   31fcc:	8d858593          	addi	a1,a1,-1832 # 398a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d88>
   31fd0:	00010317          	auipc	t1,0x10
   31fd4:	33833303          	ld	t1,824(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   31fd8:	000300e7          	jalr	ra,0(t1)
   31fdc:	dc4ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   31fe0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   31fe4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   31fe8:	00000693          	addi	a3,zero,0
   31fec:	00008617          	auipc	a2,0x8
   31ff0:	8d460613          	addi	a2,a2,-1836 # 398c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1da8>
   31ff4:	00008597          	auipc	a1,0x8
   31ff8:	8bc58593          	addi	a1,a1,-1860 # 398b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d98>
   31ffc:	00010317          	auipc	t1,0x10
   32000:	30c33303          	ld	t1,780(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32004:	000300e7          	jalr	ra,0(t1)
   32008:	d98ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3200c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32010:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32014:	00000693          	addi	a3,zero,0
   32018:	00008617          	auipc	a2,0x8
   3201c:	8c360613          	addi	a2,a2,-1853 # 398db <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc3>
   32020:	00008597          	auipc	a1,0x8
   32024:	8a858593          	addi	a1,a1,-1880 # 398c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1db0>
   32028:	00010317          	auipc	t1,0x10
   3202c:	2e033303          	ld	t1,736(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32030:	000300e7          	jalr	ra,0(t1)
   32034:	d6cff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32038:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3203c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32040:	00000693          	addi	a3,zero,0
   32044:	00008617          	auipc	a2,0x8
   32048:	8ad60613          	addi	a2,a2,-1875 # 398f1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dd9>
   3204c:	00008597          	auipc	a1,0x8
   32050:	89458593          	addi	a1,a1,-1900 # 398e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc8>
   32054:	00010317          	auipc	t1,0x10
   32058:	2b433303          	ld	t1,692(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3205c:	000300e7          	jalr	ra,0(t1)
   32060:	d40ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32064:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32068:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3206c:	00000693          	addi	a3,zero,0
   32070:	00008617          	auipc	a2,0x8
   32074:	89660613          	addi	a2,a2,-1898 # 39906 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dee>
   32078:	00008597          	auipc	a1,0x8
   3207c:	88058593          	addi	a1,a1,-1920 # 398f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1de0>
   32080:	00010317          	auipc	t1,0x10
   32084:	28833303          	ld	t1,648(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32088:	000300e7          	jalr	ra,0(t1)
   3208c:	d14ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32090:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32094:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32098:	00000693          	addi	a3,zero,0
   3209c:	00008617          	auipc	a2,0x8
   320a0:	87a60613          	addi	a2,a2,-1926 # 39916 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dfe>
   320a4:	00008597          	auipc	a1,0x8
   320a8:	86458593          	addi	a1,a1,-1948 # 39908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1df0>
   320ac:	00010317          	auipc	t1,0x10
   320b0:	25c33303          	ld	t1,604(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   320b4:	000300e7          	jalr	ra,0(t1)
   320b8:	ce8ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   320bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   320c0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   320c4:	00000693          	addi	a3,zero,0
   320c8:	00008617          	auipc	a2,0x8
   320cc:	85f60613          	addi	a2,a2,-1953 # 39927 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e0f>
   320d0:	00008597          	auipc	a1,0x8
   320d4:	84858593          	addi	a1,a1,-1976 # 39918 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e00>
   320d8:	00010317          	auipc	t1,0x10
   320dc:	23033303          	ld	t1,560(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   320e0:	000300e7          	jalr	ra,0(t1)
   320e4:	cbcff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   320e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   320ec:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   320f0:	00000693          	addi	a3,zero,0
   320f4:	00008617          	auipc	a2,0x8
   320f8:	84060613          	addi	a2,a2,-1984 # 39934 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e1c>
   320fc:	00008597          	auipc	a1,0x8
   32100:	82c58593          	addi	a1,a1,-2004 # 39928 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e10>
   32104:	00010317          	auipc	t1,0x10
   32108:	20433303          	ld	t1,516(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3210c:	000300e7          	jalr	ra,0(t1)
   32110:	c90ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32114:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32118:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3211c:	00000693          	addi	a3,zero,0
   32120:	00008617          	auipc	a2,0x8
   32124:	82860613          	addi	a2,a2,-2008 # 39948 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e30>
   32128:	00008597          	auipc	a1,0x8
   3212c:	81058593          	addi	a1,a1,-2032 # 39938 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e20>
   32130:	00010317          	auipc	t1,0x10
   32134:	1d833303          	ld	t1,472(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32138:	000300e7          	jalr	ra,0(t1)
   3213c:	c64ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32140:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32144:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32148:	00000693          	addi	a3,zero,0
   3214c:	00008617          	auipc	a2,0x8
   32150:	81560613          	addi	a2,a2,-2027 # 39961 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e49>
   32154:	00007597          	auipc	a1,0x7
   32158:	7fc58593          	addi	a1,a1,2044 # 39950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e38>
   3215c:	00010317          	auipc	t1,0x10
   32160:	1ac33303          	ld	t1,428(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32164:	000300e7          	jalr	ra,0(t1)
   32168:	c38ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3216c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32170:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32174:	00000693          	addi	a3,zero,0
   32178:	00007617          	auipc	a2,0x7
   3217c:	7ff60613          	addi	a2,a2,2047 # 39977 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e5f>
   32180:	00007597          	auipc	a1,0x7
   32184:	7e858593          	addi	a1,a1,2024 # 39968 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e50>
   32188:	00010317          	auipc	t1,0x10
   3218c:	18033303          	ld	t1,384(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32190:	000300e7          	jalr	ra,0(t1)
   32194:	c0cff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32198:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3219c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   321a0:	00000693          	addi	a3,zero,0
   321a4:	00007617          	auipc	a2,0x7
   321a8:	7e360613          	addi	a2,a2,2019 # 39987 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e6f>
   321ac:	00007597          	auipc	a1,0x7
   321b0:	7cc58593          	addi	a1,a1,1996 # 39978 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e60>
   321b4:	00010317          	auipc	t1,0x10
   321b8:	15433303          	ld	t1,340(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   321bc:	000300e7          	jalr	ra,0(t1)
   321c0:	be0ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   321c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   321c8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   321cc:	00000693          	addi	a3,zero,0
   321d0:	00007617          	auipc	a2,0x7
   321d4:	7c960613          	addi	a2,a2,1993 # 39999 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e81>
   321d8:	00007597          	auipc	a1,0x7
   321dc:	7b058593          	addi	a1,a1,1968 # 39988 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e70>
   321e0:	00010317          	auipc	t1,0x10
   321e4:	12833303          	ld	t1,296(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   321e8:	000300e7          	jalr	ra,0(t1)
   321ec:	bb4ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   321f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   321f4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   321f8:	00000693          	addi	a3,zero,0
   321fc:	00007617          	auipc	a2,0x7
   32200:	7b660613          	addi	a2,a2,1974 # 399b2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e9a>
   32204:	00007597          	auipc	a1,0x7
   32208:	79c58593          	addi	a1,a1,1948 # 399a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e88>
   3220c:	00010317          	auipc	t1,0x10
   32210:	0fc33303          	ld	t1,252(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32214:	000300e7          	jalr	ra,0(t1)
   32218:	b88ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3221c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32220:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32224:	00000693          	addi	a3,zero,0
   32228:	00007617          	auipc	a2,0x7
   3222c:	7a360613          	addi	a2,a2,1955 # 399cb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb3>
   32230:	00007597          	auipc	a1,0x7
   32234:	78858593          	addi	a1,a1,1928 # 399b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ea0>
   32238:	00010317          	auipc	t1,0x10
   3223c:	0d033303          	ld	t1,208(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32240:	000300e7          	jalr	ra,0(t1)
   32244:	b5cff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32248:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3224c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32250:	00000693          	addi	a3,zero,0
   32254:	00007617          	auipc	a2,0x7
   32258:	78760613          	addi	a2,a2,1927 # 399db <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec3>
   3225c:	00007597          	auipc	a1,0x7
   32260:	77458593          	addi	a1,a1,1908 # 399d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb8>
   32264:	00010317          	auipc	t1,0x10
   32268:	0a433303          	ld	t1,164(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3226c:	000300e7          	jalr	ra,0(t1)
   32270:	b30ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32274:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32278:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3227c:	00000693          	addi	a3,zero,0
   32280:	00007617          	auipc	a2,0x7
   32284:	77260613          	addi	a2,a2,1906 # 399f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eda>
   32288:	00007597          	auipc	a1,0x7
   3228c:	75858593          	addi	a1,a1,1880 # 399e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec8>
   32290:	00010317          	auipc	t1,0x10
   32294:	07833303          	ld	t1,120(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32298:	000300e7          	jalr	ra,0(t1)
   3229c:	b04ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   322a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322a4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322a8:	00000693          	addi	a3,zero,0
   322ac:	00007617          	auipc	a2,0x7
   322b0:	75d60613          	addi	a2,a2,1885 # 39a09 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef1>
   322b4:	00007597          	auipc	a1,0x7
   322b8:	74458593          	addi	a1,a1,1860 # 399f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ee0>
   322bc:	00010317          	auipc	t1,0x10
   322c0:	04c33303          	ld	t1,76(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   322c4:	000300e7          	jalr	ra,0(t1)
   322c8:	ad8ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   322cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322d0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   322d4:	00000693          	addi	a3,zero,0
   322d8:	00007617          	auipc	a2,0x7
   322dc:	74c60613          	addi	a2,a2,1868 # 39a24 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0c>
   322e0:	00007597          	auipc	a1,0x7
   322e4:	73058593          	addi	a1,a1,1840 # 39a10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef8>
   322e8:	00010317          	auipc	t1,0x10
   322ec:	02033303          	ld	t1,32(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   322f0:	000300e7          	jalr	ra,0(t1)
   322f4:	aacff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   322f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   322fc:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32300:	00000693          	addi	a3,zero,0
   32304:	00007617          	auipc	a2,0x7
   32308:	73160613          	addi	a2,a2,1841 # 39a35 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f1d>
   3230c:	00007597          	auipc	a1,0x7
   32310:	71c58593          	addi	a1,a1,1820 # 39a28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f10>
   32314:	00010317          	auipc	t1,0x10
   32318:	ff433303          	ld	t1,-12(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3231c:	000300e7          	jalr	ra,0(t1)
   32320:	a80ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32324:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32328:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3232c:	00000693          	addi	a3,zero,0
   32330:	00007617          	auipc	a2,0x7
   32334:	71c60613          	addi	a2,a2,1820 # 39a4c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f34>
   32338:	00007597          	auipc	a1,0x7
   3233c:	70058593          	addi	a1,a1,1792 # 39a38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f20>
   32340:	00010317          	auipc	t1,0x10
   32344:	fc833303          	ld	t1,-56(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32348:	000300e7          	jalr	ra,0(t1)
   3234c:	a54ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32350:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32354:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32358:	00000693          	addi	a3,zero,0
   3235c:	00007617          	auipc	a2,0x7
   32360:	70260613          	addi	a2,a2,1794 # 39a5e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f46>
   32364:	00007597          	auipc	a1,0x7
   32368:	6ec58593          	addi	a1,a1,1772 # 39a50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f38>
   3236c:	00010317          	auipc	t1,0x10
   32370:	f9c33303          	ld	t1,-100(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32374:	000300e7          	jalr	ra,0(t1)
   32378:	a28ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3237c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32380:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32384:	00000693          	addi	a3,zero,0
   32388:	00007617          	auipc	a2,0x7
   3238c:	6ec60613          	addi	a2,a2,1772 # 39a74 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f5c>
   32390:	00007597          	auipc	a1,0x7
   32394:	6d058593          	addi	a1,a1,1744 # 39a60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f48>
   32398:	00010317          	auipc	t1,0x10
   3239c:	f7033303          	ld	t1,-144(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   323a0:	000300e7          	jalr	ra,0(t1)
   323a4:	9fcff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   323ac:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   323b0:	00000693          	addi	a3,zero,0
   323b4:	00007617          	auipc	a2,0x7
   323b8:	6d360613          	addi	a2,a2,1747 # 39a87 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f6f>
   323bc:	00007597          	auipc	a1,0x7
   323c0:	6bc58593          	addi	a1,a1,1724 # 39a78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f60>
   323c4:	00010317          	auipc	t1,0x10
   323c8:	f4433303          	ld	t1,-188(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   323cc:	000300e7          	jalr	ra,0(t1)
   323d0:	9d0ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   323d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   323d8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   323dc:	00000693          	addi	a3,zero,0
   323e0:	00007617          	auipc	a2,0x7
   323e4:	6b760613          	addi	a2,a2,1719 # 39a97 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f7f>
   323e8:	00007597          	auipc	a1,0x7
   323ec:	6a058593          	addi	a1,a1,1696 # 39a88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f70>
   323f0:	00010317          	auipc	t1,0x10
   323f4:	f1833303          	ld	t1,-232(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   323f8:	000300e7          	jalr	ra,0(t1)
   323fc:	9a4ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32400:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32404:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32408:	00000693          	addi	a3,zero,0
   3240c:	00007617          	auipc	a2,0x7
   32410:	69660613          	addi	a2,a2,1686 # 39aa2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f8a>
   32414:	00007597          	auipc	a1,0x7
   32418:	68458593          	addi	a1,a1,1668 # 39a98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f80>
   3241c:	00010317          	auipc	t1,0x10
   32420:	eec33303          	ld	t1,-276(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32424:	000300e7          	jalr	ra,0(t1)
   32428:	978ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   3242c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32430:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32434:	00000693          	addi	a3,zero,0
   32438:	00007617          	auipc	a2,0x7
   3243c:	67f60613          	addi	a2,a2,1663 # 39ab7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f9f>
   32440:	00007597          	auipc	a1,0x7
   32444:	66858593          	addi	a1,a1,1640 # 39aa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f90>
   32448:	00010317          	auipc	t1,0x10
   3244c:	ec033303          	ld	t1,-320(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32450:	000300e7          	jalr	ra,0(t1)
   32454:	94cff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32458:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3245c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32460:	00000693          	addi	a3,zero,0
   32464:	00007617          	auipc	a2,0x7
   32468:	66360613          	addi	a2,a2,1635 # 39ac7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1faf>
   3246c:	00007597          	auipc	a1,0x7
   32470:	64c58593          	addi	a1,a1,1612 # 39ab8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fa0>
   32474:	00010317          	auipc	t1,0x10
   32478:	e9433303          	ld	t1,-364(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3247c:	000300e7          	jalr	ra,0(t1)
   32480:	920ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32484:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32488:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3248c:	00000693          	addi	a3,zero,0
   32490:	00007617          	auipc	a2,0x7
   32494:	64d60613          	addi	a2,a2,1613 # 39add <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc5>
   32498:	00007597          	auipc	a1,0x7
   3249c:	63058593          	addi	a1,a1,1584 # 39ac8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fb0>
   324a0:	00010317          	auipc	t1,0x10
   324a4:	e6833303          	ld	t1,-408(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   324a8:	000300e7          	jalr	ra,0(t1)
   324ac:	8f4ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   324b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   324b4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   324b8:	00000693          	addi	a3,zero,0
   324bc:	00007617          	auipc	a2,0x7
   324c0:	63960613          	addi	a2,a2,1593 # 39af5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fdd>
   324c4:	00007597          	auipc	a1,0x7
   324c8:	61c58593          	addi	a1,a1,1564 # 39ae0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc8>
   324cc:	00010317          	auipc	t1,0x10
   324d0:	e3c33303          	ld	t1,-452(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   324d4:	000300e7          	jalr	ra,0(t1)
   324d8:	8c8ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   324dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   324e0:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   324e4:	00000693          	addi	a3,zero,0
   324e8:	00007617          	auipc	a2,0x7
   324ec:	62060613          	addi	a2,a2,1568 # 39b08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff0>
   324f0:	00007597          	auipc	a1,0x7
   324f4:	60858593          	addi	a1,a1,1544 # 39af8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fe0>
   324f8:	00010317          	auipc	t1,0x10
   324fc:	e1033303          	ld	t1,-496(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32500:	000300e7          	jalr	ra,0(t1)
   32504:	89cff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32508:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   3250c:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32510:	00000693          	addi	a3,zero,0
   32514:	00007617          	auipc	a2,0x7
   32518:	60c60613          	addi	a2,a2,1548 # 39b20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2008>
   3251c:	00007597          	auipc	a1,0x7
   32520:	5f458593          	addi	a1,a1,1524 # 39b10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff8>
   32524:	00010317          	auipc	t1,0x10
   32528:	de433303          	ld	t1,-540(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   3252c:	000300e7          	jalr	ra,0(t1)
   32530:	870ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32534:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32538:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   3253c:	00000693          	addi	a3,zero,0
   32540:	00007617          	auipc	a2,0x7
   32544:	5fa60613          	addi	a2,a2,1530 # 39b3a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2022>
   32548:	00007597          	auipc	a1,0x7
   3254c:	5e058593          	addi	a1,a1,1504 # 39b28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2010>
   32550:	00010317          	auipc	t1,0x10
   32554:	db833303          	ld	t1,-584(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32558:	000300e7          	jalr	ra,0(t1)
   3255c:	844ff06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
        return "(DW_AT)0x" + to_hex((int)v);
   32560:	00010493          	addi	s1,sp,0
   32564:	00048513          	addi	a0,s1,0
   32568:	00010317          	auipc	t1,0x10
   3256c:	eb033303          	ld	t1,-336(t1) # 42418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xfe04>
   32570:	000300e7          	jalr	ra,0(t1)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   32574:	00900713          	addi	a4,zero,9
   32578:	00007697          	auipc	a3,0x7
   3257c:	5c868693          	addi	a3,a3,1480 # 39b40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2028>
   32580:	00000613          	addi	a2,zero,0
   32584:	00000593          	addi	a1,zero,0
   32588:	00048513          	addi	a0,s1,0
   3258c:	8d4e40ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   32590:	00050493          	addi	s1,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32594:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   32598:	00a43023          	sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   3259c:	0004b783          	ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   325a0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   325a4:	03278e63          	beq	a5,s2,325e0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10a8>
      { _M_dataplus._M_p = __p; }
   325a8:	00f43023          	sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   325ac:	0104b783          	ld	a5,16(s1)
   325b0:	00f43823          	sd	a5,16(s0)
      { _M_string_length = __length; }
   325b4:	0084b783          	ld	a5,8(s1)
   325b8:	00f43423          	sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   325bc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   325c0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   325c4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   325c8:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   325cc:	01010793          	addi	a5,sp,16
   325d0:	00f51463          	bne	a0,a5,325d8 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10a0>
   325d4:	fcdfe06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   325d8:	f39e30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   325dc:	fc5fe06f          	jal	zero,315a0 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x68>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   325e0:	0084b603          	ld	a2,8(s1)
   325e4:	00160613          	addi	a2,a2,1
	if (__n == 0)
   325e8:	fc0606e3          	beq	a2,zero,325b4 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x107c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   325ec:	00090593          	addi	a1,s2,0
   325f0:	fc1e30ef          	jal	ra,165b0 <memcpy@plt>
   325f4:	fc1ff06f          	jal	zero,325b4 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x107c>
      { return _M_dataplus._M_p; }
   325f8:	00050413          	addi	s0,a0,0
   325fc:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   32600:	01010793          	addi	a5,sp,16
   32604:	00f50463          	beq	a0,a5,3260c <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x10d4>
   32608:	f09e30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   3260c:	00040513          	addi	a0,s0,0
   32610:	8e0e40ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000032614 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)>:
template <typename T> std::string to_hex(T v) {
   32614:	fd010113          	addi	sp,sp,-48
   32618:	02113423          	sd	ra,40(sp)
   3261c:	02813023          	sd	s0,32(sp)
   32620:	00913c23          	sd	s1,24(sp)
   32624:	00050493          	addi	s1,a0,0
  if (v == 0)
   32628:	00058c63          	beq	a1,zero,32640 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x2c>
  *pos-- = '\0';
   3262c:	00010423          	sb	zero,8(sp)
   32630:	00710413          	addi	s0,sp,7
    if (digit < 10)
   32634:	00900693          	addi	a3,zero,9
  while (v && pos >= buf) {
   32638:	fff10613          	addi	a2,sp,-1
   3263c:	0480006f          	jal	zero,32684 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x70>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32640:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   32644:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   32648:	00000693          	addi	a3,zero,0
   3264c:	00006617          	auipc	a2,0x6
   32650:	0b560613          	addi	a2,a2,181 # 38701 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   32654:	00006597          	auipc	a1,0x6
   32658:	0ac58593          	addi	a1,a1,172 # 38700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   3265c:	00010317          	auipc	t1,0x10
   32660:	cac33303          	ld	t1,-852(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   32664:	000300e7          	jalr	ra,0(t1)
   32668:	05c0006f          	jal	zero,326c4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0xb0>
   3266c:	00e40023          	sb	a4,0(s0)
    pos--;
   32670:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   32674:	4045d59b          	sraiw	a1,a1,0x4
  while (v && pos >= buf) {
   32678:	02058063          	beq	a1,zero,32698 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x84>
   3267c:	00c78e63          	beq	a5,a2,32698 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x84>
    pos--;
   32680:	00078413          	addi	s0,a5,0
    int digit = v & 0xf;
   32684:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   32688:	05778713          	addi	a4,a5,87
    if (digit < 10)
   3268c:	fef6c0e3          	blt	a3,a5,3266c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x58>
      *pos = '0' + digit;
   32690:	03078713          	addi	a4,a5,48
   32694:	fd9ff06f          	jal	zero,3266c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x58>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   32698:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   3269c:	00f4b023          	sd	a5,0(s1)
	return __builtin_strlen(__s);
   326a0:	00040513          	addi	a0,s0,0
   326a4:	d6de30ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   326a8:	00000693          	addi	a3,zero,0
   326ac:	00a40633          	add	a2,s0,a0
   326b0:	00040593          	addi	a1,s0,0
   326b4:	00048513          	addi	a0,s1,0
   326b8:	00010317          	auipc	t1,0x10
   326bc:	c5033303          	ld	t1,-944(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   326c0:	000300e7          	jalr	ra,0(t1)
}
   326c4:	00048513          	addi	a0,s1,0
   326c8:	02813083          	ld	ra,40(sp)
   326cc:	02013403          	ld	s0,32(sp)
   326d0:	01813483          	ld	s1,24(sp)
   326d4:	03010113          	addi	sp,sp,48
   326d8:	00008067          	jalr	zero,0(ra)

00000000000326dc <elf::elf::get_hdr() const>:
    // isn't super-cheap.
    m->sections.push_back(section(*this, sec));
  }
}

const Ehdr<> &elf::get_hdr() const { return m->hdr; }
   326dc:	00053503          	ld	a0,0(a0)
   326e0:	01050513          	addi	a0,a0,16
   326e4:	00008067          	jalr	zero,0(ra)

00000000000326e8 <elf::elf::get_loader() const>:

shared_ptr<loader> elf::get_loader() const { return m->l; }
   326e8:	ff010113          	addi	sp,sp,-16
   326ec:	00113423          	sd	ra,8(sp)
   326f0:	00813023          	sd	s0,0(sp)
   326f4:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   326f8:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   326fc:	0007b703          	ld	a4,0(a5)
   32700:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   32704:	0087b503          	ld	a0,8(a5)
   32708:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   3270c:	02050063          	beq	a0,zero,3272c <elf::elf::get_loader() const+0x44>
    if (__is_single_threaded())
   32710:	00010797          	auipc	a5,0x10
   32714:	d707b783          	ld	a5,-656(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32718:	0007c783          	lbu	a5,0(a5)
   3271c:	02078263          	beq	a5,zero,32740 <elf::elf::get_loader() const+0x58>
  { *__mem += __val; }
   32720:	03052783          	lw	a5,48(a0)
   32724:	0017879b          	addiw	a5,a5,1
   32728:	02f52823          	sw	a5,48(a0)
   3272c:	00040513          	addi	a0,s0,0
   32730:	00813083          	ld	ra,8(sp)
   32734:	00013403          	ld	s0,0(sp)
   32738:	01010113          	addi	sp,sp,16
   3273c:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   32740:	00100593          	addi	a1,zero,1
   32744:	03050513          	addi	a0,a0,48
   32748:	c09e30ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   3274c:	fe1ff06f          	jal	zero,3272c <elf::elf::get_loader() const+0x44>

0000000000032750 <elf::elf::sections() const>:

const std::vector<section> &elf::sections() const { return m->sections; }
   32750:	00053503          	ld	a0,0(a0)
   32754:	05050513          	addi	a0,a0,80
   32758:	00008067          	jalr	zero,0(ra)

000000000003275c <elf::elf::segments() const>:

const std::vector<segment> &elf::segments() const { return m->segments; }
   3275c:	00053503          	ld	a0,0(a0)
   32760:	06850513          	addi	a0,a0,104
   32764:	00008067          	jalr	zero,0(ra)

0000000000032768 <elf::elf::get_section(unsigned int) const>:
    if (name == sec.get_name(nullptr))
      return sec;
  return m->invalid_section;
}

const section &elf::get_section(unsigned index) const {
   32768:	fe010113          	addi	sp,sp,-32
   3276c:	00113c23          	sd	ra,24(sp)
   32770:	00813823          	sd	s0,16(sp)
   32774:	00913423          	sd	s1,8(sp)
   32778:	00050493          	addi	s1,a0,0
  if (index >= sections().size())
   3277c:	02059413          	slli	s0,a1,0x20
   32780:	02045413          	srli	s0,s0,0x20
   32784:	fcdff0ef          	jal	ra,32750 <elf::elf::sections() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   32788:	00853783          	ld	a5,8(a0)
   3278c:	00053703          	ld	a4,0(a0)
   32790:	40e787b3          	sub	a5,a5,a4
   32794:	4047d793          	srai	a5,a5,0x4
   32798:	02f46063          	bltu	s0,a5,327b8 <elf::elf::get_section(unsigned int) const+0x50>
    return m->invalid_section;
   3279c:	0004b503          	ld	a0,0(s1)
   327a0:	08050513          	addi	a0,a0,128
  return sections().at(index);
}
   327a4:	01813083          	ld	ra,24(sp)
   327a8:	01013403          	ld	s0,16(sp)
   327ac:	00813483          	ld	s1,8(sp)
   327b0:	02010113          	addi	sp,sp,32
   327b4:	00008067          	jalr	zero,0(ra)
  return sections().at(index);
   327b8:	00048513          	addi	a0,s1,0
   327bc:	f95ff0ef          	jal	ra,32750 <elf::elf::sections() const>
   327c0:	00053783          	ld	a5,0(a0)
   327c4:	00853603          	ld	a2,8(a0)
   327c8:	40f60633          	sub	a2,a2,a5
   327cc:	40465613          	srai	a2,a2,0x4
	return *(this->_M_impl._M_start + __n);
   327d0:	00441713          	slli	a4,s0,0x4
   327d4:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   327d8:	fcc466e3          	bltu	s0,a2,327a4 <elf::elf::get_section(unsigned int) const+0x3c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   327dc:	00040593          	addi	a1,s0,0
   327e0:	00008517          	auipc	a0,0x8
   327e4:	a9050513          	addi	a0,a0,-1392 # 3a270 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   327e8:	e59e30ef          	jal	ra,16640 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

00000000000327ec <elf::elf::get_segment(unsigned int) const>:

const segment &elf::get_segment(unsigned index) const {
   327ec:	fe010113          	addi	sp,sp,-32
   327f0:	00113c23          	sd	ra,24(sp)
   327f4:	00813823          	sd	s0,16(sp)
   327f8:	00913423          	sd	s1,8(sp)
   327fc:	00050493          	addi	s1,a0,0
  if (index >= segments().size())
   32800:	02059413          	slli	s0,a1,0x20
   32804:	02045413          	srli	s0,s0,0x20
   32808:	f55ff0ef          	jal	ra,3275c <elf::elf::segments() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   3280c:	00853783          	ld	a5,8(a0)
   32810:	00053703          	ld	a4,0(a0)
   32814:	40e787b3          	sub	a5,a5,a4
   32818:	4047d793          	srai	a5,a5,0x4
   3281c:	02f46063          	bltu	s0,a5,3283c <elf::elf::get_segment(unsigned int) const+0x50>
    return m->invalid_segment;
   32820:	0004b503          	ld	a0,0(s1)
   32824:	09050513          	addi	a0,a0,144
  return segments().at(index);
}
   32828:	01813083          	ld	ra,24(sp)
   3282c:	01013403          	ld	s0,16(sp)
   32830:	00813483          	ld	s1,8(sp)
   32834:	02010113          	addi	sp,sp,32
   32838:	00008067          	jalr	zero,0(ra)
  return segments().at(index);
   3283c:	00048513          	addi	a0,s1,0
   32840:	f1dff0ef          	jal	ra,3275c <elf::elf::segments() const>
   32844:	00053783          	ld	a5,0(a0)
   32848:	00853603          	ld	a2,8(a0)
   3284c:	40f60633          	sub	a2,a2,a5
   32850:	40465613          	srai	a2,a2,0x4
	return *(this->_M_impl._M_start + __n);
   32854:	00441713          	slli	a4,s0,0x4
   32858:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   3285c:	fcc466e3          	bltu	s0,a2,32828 <elf::elf::get_segment(unsigned int) const+0x3c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   32860:	00040593          	addi	a1,s0,0
   32864:	00008517          	auipc	a0,0x8
   32868:	a0c50513          	addi	a0,a0,-1524 # 3a270 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   3286c:	dd5e30ef          	jal	ra,16640 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

0000000000032870 <elf::segment::get_hdr() const>:

segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Phdr<> &segment::get_hdr() const { return m->hdr; }
   32870:	00053503          	ld	a0,0(a0)
   32874:	01050513          	addi	a0,a0,16
   32878:	00008067          	jalr	zero,0(ra)

000000000003287c <elf::segment::data() const>:

const void *segment::data() const {
   3287c:	fd010113          	addi	sp,sp,-48
   32880:	02113423          	sd	ra,40(sp)
   32884:	02813023          	sd	s0,32(sp)
   32888:	00913c23          	sd	s1,24(sp)
   3288c:	00050413          	addi	s0,a0,0
      { return _M_ptr; }
   32890:	00053583          	ld	a1,0(a0)
  if (!m->data)
   32894:	0485b783          	ld	a5,72(a1)
   32898:	02078063          	beq	a5,zero,328b8 <elf::segment::data() const+0x3c>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
  return m->data;
   3289c:	00043783          	ld	a5,0(s0)
   328a0:	0487b503          	ld	a0,72(a5)
}
   328a4:	02813083          	ld	ra,40(sp)
   328a8:	02013403          	ld	s0,32(sp)
   328ac:	01813483          	ld	s1,24(sp)
   328b0:	03010113          	addi	sp,sp,48
   328b4:	00008067          	jalr	zero,0(ra)
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
   328b8:	00010513          	addi	a0,sp,0
   328bc:	e2dff0ef          	jal	ra,326e8 <elf::elf::get_loader() const>
   328c0:	00013503          	ld	a0,0(sp)
   328c4:	00043483          	ld	s1,0(s0)
   328c8:	00053783          	ld	a5,0(a0)
   328cc:	0107b783          	ld	a5,16(a5)
   328d0:	0304b603          	ld	a2,48(s1)
   328d4:	0184b583          	ld	a1,24(s1)
   328d8:	000780e7          	jalr	ra,0(a5)
   328dc:	04a4b423          	sd	a0,72(s1)
	if (_M_pi != nullptr)
   328e0:	00813483          	ld	s1,8(sp)
   328e4:	fa048ce3          	beq	s1,zero,3289c <elf::segment::data() const+0x20>
    if (__is_single_threaded())
   328e8:	00010797          	auipc	a5,0x10
   328ec:	b987b783          	ld	a5,-1128(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   328f0:	0007c783          	lbu	a5,0(a5)
   328f4:	06078263          	beq	a5,zero,32958 <elf::segment::data() const+0xdc>
    _Atomic_word __result = *__mem;
   328f8:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   328fc:	fff5079b          	addiw	a5,a0,-1
   32900:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   32904:	00100793          	addi	a5,zero,1
   32908:	f8f51ae3          	bne	a0,a5,3289c <elf::segment::data() const+0x20>
	_M_dispose();
   3290c:	0004b783          	ld	a5,0(s1)
   32910:	0107b783          	ld	a5,16(a5)
   32914:	00048513          	addi	a0,s1,0
   32918:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   3291c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   32920:	00010797          	auipc	a5,0x10
   32924:	b607b783          	ld	a5,-1184(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32928:	0007c783          	lbu	a5,0(a5)
   3292c:	02078e63          	beq	a5,zero,32968 <elf::segment::data() const+0xec>
    _Atomic_word __result = *__mem;
   32930:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   32934:	fff5079b          	addiw	a5,a0,-1
   32938:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   3293c:	00100793          	addi	a5,zero,1
   32940:	f4f51ee3          	bne	a0,a5,3289c <elf::segment::data() const+0x20>
	    _M_destroy();
   32944:	0004b783          	ld	a5,0(s1)
   32948:	0187b783          	ld	a5,24(a5)
   3294c:	00048513          	addi	a0,s1,0
   32950:	000780e7          	jalr	ra,0(a5)
   32954:	f49ff06f          	jal	zero,3289c <elf::segment::data() const+0x20>
      return __exchange_and_add(__mem, __val);
   32958:	fff00593          	addi	a1,zero,-1
   3295c:	03048513          	addi	a0,s1,48
   32960:	a21e30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32964:	fa1ff06f          	jal	zero,32904 <elf::segment::data() const+0x88>
   32968:	fff00593          	addi	a1,zero,-1
   3296c:	03448513          	addi	a0,s1,52
   32970:	a11e30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32974:	fc9ff06f          	jal	zero,3293c <elf::segment::data() const+0xc0>
	if (_M_pi != nullptr)
   32978:	00050413          	addi	s0,a0,0
   3297c:	00813503          	ld	a0,8(sp)
   32980:	00050863          	beq	a0,zero,32990 <elf::segment::data() const+0x114>
	  _M_pi->_M_release();
   32984:	00010317          	auipc	t1,0x10
   32988:	a4433303          	ld	t1,-1468(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   3298c:	000300e7          	jalr	ra,0(t1)
   32990:	00040513          	addi	a0,s0,0
   32994:	d5de30ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000032998 <elf::segment::file_size() const>:

size_t segment::file_size() const { return m->hdr.filesz; }
   32998:	00053783          	ld	a5,0(a0)
   3299c:	0307b503          	ld	a0,48(a5)
   329a0:	00008067          	jalr	zero,0(ra)

00000000000329a4 <elf::segment::mem_size() const>:

size_t segment::mem_size() const { return m->hdr.memsz; }
   329a4:	00053783          	ld	a5,0(a0)
   329a8:	0387b503          	ld	a0,56(a5)
   329ac:	00008067          	jalr	zero,0(ra)

00000000000329b0 <elf::section::get_hdr() const>:

section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Shdr<> &section::get_hdr() const { return m->hdr; }
   329b0:	00053503          	ld	a0,0(a0)
   329b4:	01050513          	addi	a0,a0,16
   329b8:	00008067          	jalr	zero,0(ra)

00000000000329bc <elf::section::data() const>:
      { return _M_ptr; }
   329bc:	00053583          	ld	a1,0(a0)
}

string section::get_name() const { return get_name(nullptr); }

const void *section::data() const {
  if (m->hdr.type == sht::nobits)
   329c0:	0145a703          	lw	a4,20(a1)
   329c4:	00800793          	addi	a5,zero,8
   329c8:	0ef70e63          	beq	a4,a5,32ac4 <elf::section::data() const+0x108>
const void *section::data() const {
   329cc:	fd010113          	addi	sp,sp,-48
   329d0:	02113423          	sd	ra,40(sp)
   329d4:	02813023          	sd	s0,32(sp)
   329d8:	00913c23          	sd	s1,24(sp)
   329dc:	00050413          	addi	s0,a0,0
    return nullptr;
  if (!m->data)
   329e0:	0605b783          	ld	a5,96(a1)
   329e4:	02078063          	beq	a5,zero,32a04 <elf::section::data() const+0x48>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
  return m->data;
   329e8:	00043783          	ld	a5,0(s0)
   329ec:	0607b503          	ld	a0,96(a5)
}
   329f0:	02813083          	ld	ra,40(sp)
   329f4:	02013403          	ld	s0,32(sp)
   329f8:	01813483          	ld	s1,24(sp)
   329fc:	03010113          	addi	sp,sp,48
   32a00:	00008067          	jalr	zero,0(ra)
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
   32a04:	00010513          	addi	a0,sp,0
   32a08:	ce1ff0ef          	jal	ra,326e8 <elf::elf::get_loader() const>
   32a0c:	00013503          	ld	a0,0(sp)
   32a10:	00043483          	ld	s1,0(s0)
   32a14:	00053783          	ld	a5,0(a0)
   32a18:	0107b783          	ld	a5,16(a5)
   32a1c:	0304b603          	ld	a2,48(s1)
   32a20:	0284b583          	ld	a1,40(s1)
   32a24:	000780e7          	jalr	ra,0(a5)
   32a28:	06a4b023          	sd	a0,96(s1)
	if (_M_pi != nullptr)
   32a2c:	00813483          	ld	s1,8(sp)
   32a30:	fa048ce3          	beq	s1,zero,329e8 <elf::section::data() const+0x2c>
    if (__is_single_threaded())
   32a34:	00010797          	auipc	a5,0x10
   32a38:	a4c7b783          	ld	a5,-1460(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32a3c:	0007c783          	lbu	a5,0(a5)
   32a40:	06078263          	beq	a5,zero,32aa4 <elf::section::data() const+0xe8>
    _Atomic_word __result = *__mem;
   32a44:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   32a48:	fff5079b          	addiw	a5,a0,-1
   32a4c:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   32a50:	00100793          	addi	a5,zero,1
   32a54:	f8f51ae3          	bne	a0,a5,329e8 <elf::section::data() const+0x2c>
	_M_dispose();
   32a58:	0004b783          	ld	a5,0(s1)
   32a5c:	0107b783          	ld	a5,16(a5)
   32a60:	00048513          	addi	a0,s1,0
   32a64:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   32a68:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   32a6c:	00010797          	auipc	a5,0x10
   32a70:	a147b783          	ld	a5,-1516(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32a74:	0007c783          	lbu	a5,0(a5)
   32a78:	02078e63          	beq	a5,zero,32ab4 <elf::section::data() const+0xf8>
    _Atomic_word __result = *__mem;
   32a7c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   32a80:	fff5079b          	addiw	a5,a0,-1
   32a84:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   32a88:	00100793          	addi	a5,zero,1
   32a8c:	f4f51ee3          	bne	a0,a5,329e8 <elf::section::data() const+0x2c>
	    _M_destroy();
   32a90:	0004b783          	ld	a5,0(s1)
   32a94:	0187b783          	ld	a5,24(a5)
   32a98:	00048513          	addi	a0,s1,0
   32a9c:	000780e7          	jalr	ra,0(a5)
   32aa0:	f49ff06f          	jal	zero,329e8 <elf::section::data() const+0x2c>
      return __exchange_and_add(__mem, __val);
   32aa4:	fff00593          	addi	a1,zero,-1
   32aa8:	03048513          	addi	a0,s1,48
   32aac:	8d5e30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32ab0:	fa1ff06f          	jal	zero,32a50 <elf::section::data() const+0x94>
   32ab4:	fff00593          	addi	a1,zero,-1
   32ab8:	03448513          	addi	a0,s1,52
   32abc:	8c5e30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32ac0:	fc9ff06f          	jal	zero,32a88 <elf::section::data() const+0xcc>
    return nullptr;
   32ac4:	00000513          	addi	a0,zero,0
}
   32ac8:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   32acc:	00050413          	addi	s0,a0,0
   32ad0:	00813503          	ld	a0,8(sp)
   32ad4:	00050863          	beq	a0,zero,32ae4 <elf::section::data() const+0x128>
	  _M_pi->_M_release();
   32ad8:	00010317          	auipc	t1,0x10
   32adc:	8f033303          	ld	t1,-1808(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   32ae0:	000300e7          	jalr	ra,0(t1)
   32ae4:	00040513          	addi	a0,s0,0
   32ae8:	c09e30ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000032aec <elf::section::size() const>:

size_t section::size() const { return m->hdr.size; }
   32aec:	00053783          	ld	a5,0(a0)
   32af0:	0307b503          	ld	a0,48(a5)
   32af4:	00008067          	jalr	zero,0(ra)

0000000000032af8 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>:

  const elf f;
  const char *data, *end;
};

strtab::strtab(elf f, const void *data, size_t size)
   32af8:	fd010113          	addi	sp,sp,-48
   32afc:	02113423          	sd	ra,40(sp)
   32b00:	02813023          	sd	s0,32(sp)
   32b04:	00913c23          	sd	s1,24(sp)
   32b08:	01213823          	sd	s2,16(sp)
   32b0c:	01313423          	sd	s3,8(sp)
   32b10:	01413023          	sd	s4,0(sp)
   32b14:	00050913          	addi	s2,a0,0
   32b18:	00058493          	addi	s1,a1,0
   32b1c:	00060993          	addi	s3,a2,0
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   32b20:	00d60a33          	add	s4,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   32b24:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   32b28:	05800513          	addi	a0,zero,88
   32b2c:	9f5e30ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   32b30:	00050413          	addi	s0,a0,0
   32b34:	00052423          	sw	zero,8(a0)
   32b38:	00052623          	sw	zero,12(a0)
   32b3c:	00052823          	sw	zero,16(a0)
   32b40:	00052a23          	sw	zero,20(a0)
   32b44:	00052c23          	sw	zero,24(a0)
   32b48:	00052e23          	sw	zero,28(a0)
   32b4c:	02053023          	sd	zero,32(a0)
   32b50:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   32b54:	00100793          	addi	a5,zero,1
   32b58:	02f52823          	sw	a5,48(a0)
   32b5c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   32b60:	00010797          	auipc	a5,0x10
   32b64:	a907b783          	ld	a5,-1392(a5) # 425f0 <vtable for std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x910>
   32b68:	01078793          	addi	a5,a5,16
   32b6c:	00f53023          	sd	a5,0(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   32b70:	0004b783          	ld	a5,0(s1)
   32b74:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   32b78:	0084b503          	ld	a0,8(s1)
   32b7c:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   32b80:	02050063          	beq	a0,zero,32ba0 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xa8>
    if (__is_single_threaded())
   32b84:	00010717          	auipc	a4,0x10
   32b88:	8fc73703          	ld	a4,-1796(a4) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32b8c:	00074703          	lbu	a4,0(a4)
   32b90:	04070263          	beq	a4,zero,32bd4 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xdc>
  { *__mem += __val; }
   32b94:	03052703          	lw	a4,48(a0)
   32b98:	0017071b          	addiw	a4,a4,1
   32b9c:	02e52823          	sw	a4,48(a0)
      : f(f), data(data), end(end) {}
   32ba0:	05343423          	sd	s3,72(s0)
   32ba4:	05443823          	sd	s4,80(s0)
	  _M_pi = __pi;
   32ba8:	00893423          	sd	s0,8(s2)
   32bac:	03840413          	addi	s0,s0,56
	  __p = __pi->_M_ptr();
   32bb0:	00893023          	sd	s0,0(s2)
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   32bb4:	02813083          	ld	ra,40(sp)
   32bb8:	02013403          	ld	s0,32(sp)
   32bbc:	01813483          	ld	s1,24(sp)
   32bc0:	01013903          	ld	s2,16(sp)
   32bc4:	00813983          	ld	s3,8(sp)
   32bc8:	00013a03          	ld	s4,0(sp)
   32bcc:	03010113          	addi	sp,sp,48
   32bd0:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   32bd4:	00100593          	addi	a1,zero,1
   32bd8:	03050513          	addi	a0,a0,48
   32bdc:	f74e30ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   32be0:	fc1ff06f          	jal	zero,32ba0 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0xa8>

0000000000032be4 <elf::section::as_strtab() const>:
strtab section::as_strtab() const {
   32be4:	fd010113          	addi	sp,sp,-48
   32be8:	02113423          	sd	ra,40(sp)
   32bec:	02813023          	sd	s0,32(sp)
   32bf0:	00913c23          	sd	s1,24(sp)
   32bf4:	01213823          	sd	s2,16(sp)
      { return _M_ptr; }
   32bf8:	0005b783          	ld	a5,0(a1)
  if (m->hdr.type != sht::strtab)
   32bfc:	0147a683          	lw	a3,20(a5)
   32c00:	00300713          	addi	a4,zero,3
   32c04:	04e69463          	bne	a3,a4,32c4c <elf::section::as_strtab() const+0x68>
   32c08:	00050913          	addi	s2,a0,0
   32c0c:	00058413          	addi	s0,a1,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   32c10:	0007b703          	ld	a4,0(a5)
   32c14:	00e13023          	sd	a4,0(sp)
      : _M_pi(__r._M_pi)
   32c18:	0087b503          	ld	a0,8(a5)
   32c1c:	00a13423          	sd	a0,8(sp)
	if (_M_pi != nullptr)
   32c20:	02050063          	beq	a0,zero,32c40 <elf::section::as_strtab() const+0x5c>
    if (__is_single_threaded())
   32c24:	00010717          	auipc	a4,0x10
   32c28:	85c73703          	ld	a4,-1956(a4) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32c2c:	00074703          	lbu	a4,0(a4)
   32c30:	04070e63          	beq	a4,zero,32c8c <elf::section::as_strtab() const+0xa8>
  { *__mem += __val; }
   32c34:	03052703          	lw	a4,48(a0)
   32c38:	0017071b          	addiw	a4,a4,1
   32c3c:	02e52823          	sw	a4,48(a0)
  return strtab(m->f, data(), size());
   32c40:	00040513          	addi	a0,s0,0
   32c44:	d79ff0ef          	jal	ra,329bc <elf::section::data() const>
   32c48:	0540006f          	jal	zero,32c9c <elf::section::as_strtab() const+0xb8>
    throw section_type_mismatch("cannot use section as strtab");
   32c4c:	01000513          	addi	a0,zero,16
   32c50:	fd0e30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   32c54:	00050413          	addi	s0,a0,0
class section_type_mismatch : public std::logic_error {
public:
  explicit section_type_mismatch(const std::string &what_arg)
      : std::logic_error(what_arg) {}
  explicit section_type_mismatch(const char *what_arg)
      : std::logic_error(what_arg) {}
   32c58:	00007597          	auipc	a1,0x7
   32c5c:	66858593          	addi	a1,a1,1640 # 3a2c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27a8>
   32c60:	921e30ef          	jal	ra,16580 <std::logic_error::logic_error(char const*)@plt>
   32c64:	0000f797          	auipc	a5,0xf
   32c68:	7547b783          	ld	a5,1876(a5) # 423b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   32c6c:	01078793          	addi	a5,a5,16
   32c70:	00f43023          	sd	a5,0(s0)
   32c74:	0000f617          	auipc	a2,0xf
   32c78:	63463603          	ld	a2,1588(a2) # 422a8 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xdaac>
   32c7c:	0000f597          	auipc	a1,0xf
   32c80:	6645b583          	ld	a1,1636(a1) # 422e0 <typeinfo for elf::section_type_mismatch@@Base+0x788>
   32c84:	00040513          	addi	a0,s0,0
   32c88:	a39e30ef          	jal	ra,166c0 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   32c8c:	00100593          	addi	a1,zero,1
   32c90:	03050513          	addi	a0,a0,48
   32c94:	ebce30ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   32c98:	fa9ff06f          	jal	zero,32c40 <elf::section::as_strtab() const+0x5c>
  return strtab(m->f, data(), size());
   32c9c:	00050493          	addi	s1,a0,0
   32ca0:	00040513          	addi	a0,s0,0
   32ca4:	e49ff0ef          	jal	ra,32aec <elf::section::size() const>
   32ca8:	00050693          	addi	a3,a0,0
   32cac:	00048613          	addi	a2,s1,0
   32cb0:	00010593          	addi	a1,sp,0
   32cb4:	00090513          	addi	a0,s2,0
   32cb8:	e41ff0ef          	jal	ra,32af8 <elf::strtab::strtab(elf::elf, void const*, unsigned long)>
	if (_M_pi != nullptr)
   32cbc:	00813403          	ld	s0,8(sp)
   32cc0:	02040463          	beq	s0,zero,32ce8 <elf::section::as_strtab() const+0x104>
    if (__is_single_threaded())
   32cc4:	0000f797          	auipc	a5,0xf
   32cc8:	7bc7b783          	ld	a5,1980(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32ccc:	0007c783          	lbu	a5,0(a5)
   32cd0:	02078a63          	beq	a5,zero,32d04 <elf::section::as_strtab() const+0x120>
    _Atomic_word __result = *__mem;
   32cd4:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   32cd8:	fff5079b          	addiw	a5,a0,-1
   32cdc:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   32ce0:	00100793          	addi	a5,zero,1
   32ce4:	02f50863          	beq	a0,a5,32d14 <elf::section::as_strtab() const+0x130>
}
   32ce8:	00090513          	addi	a0,s2,0
   32cec:	02813083          	ld	ra,40(sp)
   32cf0:	02013403          	ld	s0,32(sp)
   32cf4:	01813483          	ld	s1,24(sp)
   32cf8:	01013903          	ld	s2,16(sp)
   32cfc:	03010113          	addi	sp,sp,48
   32d00:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   32d04:	fff00593          	addi	a1,zero,-1
   32d08:	03040513          	addi	a0,s0,48
   32d0c:	e74e30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32d10:	fd1ff06f          	jal	zero,32ce0 <elf::section::as_strtab() const+0xfc>
	_M_dispose();
   32d14:	00043783          	ld	a5,0(s0)
   32d18:	0107b783          	ld	a5,16(a5)
   32d1c:	00040513          	addi	a0,s0,0
   32d20:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   32d24:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   32d28:	0000f797          	auipc	a5,0xf
   32d2c:	7587b783          	ld	a5,1880(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   32d30:	0007c783          	lbu	a5,0(a5)
   32d34:	02078663          	beq	a5,zero,32d60 <elf::section::as_strtab() const+0x17c>
    _Atomic_word __result = *__mem;
   32d38:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   32d3c:	fff5079b          	addiw	a5,a0,-1
   32d40:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   32d44:	00100793          	addi	a5,zero,1
   32d48:	faf510e3          	bne	a0,a5,32ce8 <elf::section::as_strtab() const+0x104>
	    _M_destroy();
   32d4c:	00043783          	ld	a5,0(s0)
   32d50:	0187b783          	ld	a5,24(a5)
   32d54:	00040513          	addi	a0,s0,0
   32d58:	000780e7          	jalr	ra,0(a5)
  return strtab(m->f, data(), size());
   32d5c:	f8dff06f          	jal	zero,32ce8 <elf::section::as_strtab() const+0x104>
      return __exchange_and_add(__mem, __val);
   32d60:	fff00593          	addi	a1,zero,-1
   32d64:	03440513          	addi	a0,s0,52
   32d68:	e18e30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   32d6c:	fd9ff06f          	jal	zero,32d44 <elf::section::as_strtab() const+0x160>
    throw section_type_mismatch("cannot use section as strtab");
   32d70:	00050493          	addi	s1,a0,0
   32d74:	00040513          	addi	a0,s0,0
   32d78:	f58e30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   32d7c:	00048513          	addi	a0,s1,0
   32d80:	971e30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   32d84:	00050413          	addi	s0,a0,0
   32d88:	00813503          	ld	a0,8(sp)
   32d8c:	00050863          	beq	a0,zero,32d9c <elf::section::as_strtab() const+0x1b8>
	  _M_pi->_M_release();
   32d90:	0000f317          	auipc	t1,0xf
   32d94:	63833303          	ld	t1,1592(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   32d98:	000300e7          	jalr	ra,0(t1)
   32d9c:	00040513          	addi	a0,s0,0
   32da0:	951e30ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000032da4 <elf::strtab::get(unsigned long, unsigned long*) const>:

const char *strtab::get(Elf64::Off offset, size_t *len_out) const {
   32da4:	f8010113          	addi	sp,sp,-128
   32da8:	06113c23          	sd	ra,120(sp)
   32dac:	06813823          	sd	s0,112(sp)
   32db0:	06913423          	sd	s1,104(sp)
      { return _M_ptr; }
   32db4:	00053783          	ld	a5,0(a0)
  const char *start = m->data + offset;
   32db8:	0107b503          	ld	a0,16(a5)
   32dbc:	00b50533          	add	a0,a0,a1

  if (start >= m->end)
   32dc0:	0187b683          	ld	a3,24(a5)
    throw range_error("string offset " + std::to_string(offset) +
                      " exceeds section size");

  // Find the null terminator
  const char *p = start;
   32dc4:	00050793          	addi	a5,a0,0
  if (start >= m->end)
   32dc8:	02d57863          	bgeu	a0,a3,32df8 <elf::strtab::get(unsigned long, unsigned long*) const+0x54>
  while (p < m->end && *p)
   32dcc:	0007c703          	lbu	a4,0(a5)
   32dd0:	1c070e63          	beq	a4,zero,32fac <elf::strtab::get(unsigned long, unsigned long*) const+0x208>
    p++;
   32dd4:	00178793          	addi	a5,a5,1
  while (p < m->end && *p)
   32dd8:	fef69ae3          	bne	a3,a5,32dcc <elf::strtab::get(unsigned long, unsigned long*) const+0x28>
  if (p == m->end)
    throw format_error("unterminated string");
   32ddc:	01000513          	addi	a0,zero,16
   32de0:	e40e30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   32de4:	00050413          	addi	s0,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   32de8:	00004597          	auipc	a1,0x4
   32dec:	d3858593          	addi	a1,a1,-712 # 36b20 <std::piecewise_construct+0x38>
   32df0:	981e30ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   32df4:	1dc0006f          	jal	zero,32fd0 <elf::strtab::get(unsigned long, unsigned long*) const+0x22c>
   32df8:	00058413          	addi	s0,a1,0
                      " exceeds section size");
   32dfc:	01000513          	addi	a0,zero,16
   32e00:	e20e30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   32e04:	00050493          	addi	s1,a0,0
   32e08:	00040793          	addi	a5,s0,0
      unsigned __n = 1;
   32e0c:	00100593          	addi	a1,zero,1
	  if (__value < (unsigned)__base) return __n;
   32e10:	00900813          	addi	a6,zero,9
	  if (__value < __b2) return __n + 1;
   32e14:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   32e18:	3e700613          	addi	a2,zero,999
	  if (__value < __b4) return __n + 3;
   32e1c:	00002737          	lui	a4,0x2
   32e20:	70f70693          	addi	a3,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   32e24:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   32e28:	00f87663          	bgeu	a6,a5,32e34 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b2) return __n + 1;
   32e2c:	02f56463          	bltu	a0,a5,32e54 <elf::strtab::get(unsigned long, unsigned long*) const+0xb0>
   32e30:	0015859b          	addiw	a1,a1,1
	: allocator_type(__a), _M_p(__dat) { }
   32e34:	01010793          	addi	a5,sp,16
   32e38:	00f13023          	sd	a5,0(sp)
      { _M_construct(__n, __c); }
   32e3c:	00000613          	addi	a2,zero,0
   32e40:	02059593          	slli	a1,a1,0x20
   32e44:	0205d593          	srli	a1,a1,0x20
   32e48:	00010513          	addi	a0,sp,0
   32e4c:	f24e30ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   32e50:	0280006f          	jal	zero,32e78 <elf::strtab::get(unsigned long, unsigned long*) const+0xd4>
	  if (__value < __b3) return __n + 2;
   32e54:	00f66663          	bltu	a2,a5,32e60 <elf::strtab::get(unsigned long, unsigned long*) const+0xbc>
   32e58:	0025859b          	addiw	a1,a1,2
   32e5c:	fd9ff06f          	jal	zero,32e34 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b4) return __n + 3;
   32e60:	00f6e663          	bltu	a3,a5,32e6c <elf::strtab::get(unsigned long, unsigned long*) const+0xc8>
   32e64:	0035859b          	addiw	a1,a1,3
   32e68:	fcdff06f          	jal	zero,32e34 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  __value /= __b4;
   32e6c:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   32e70:	0045859b          	addiw	a1,a1,4
	  if (__value < (unsigned)__base) return __n;
   32e74:	fb5ff06f          	jal	zero,32e28 <elf::strtab::get(unsigned long, unsigned long*) const+0x84>
      { return _M_dataplus._M_p; }
   32e78:	00013603          	ld	a2,0(sp)
      unsigned __pos = __len - 1;
   32e7c:	00813783          	ld	a5,8(sp)
   32e80:	fff7879b          	addiw	a5,a5,-1
      while (__val >= 100)
   32e84:	06300813          	addi	a6,zero,99
	  auto const __num = (__val % 100) * 2;
   32e88:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   32e8c:	0000f517          	auipc	a0,0xf
   32e90:	5dc53503          	ld	a0,1500(a0) # 42468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb488>
      while (__val >= 100)
   32e94:	04886263          	bltu	a6,s0,32ed8 <elf::strtab::get(unsigned long, unsigned long*) const+0x134>
      if (__val >= 10)
   32e98:	00900793          	addi	a5,zero,9
   32e9c:	0887f063          	bgeu	a5,s0,32f1c <elf::strtab::get(unsigned long, unsigned long*) const+0x178>
	  auto const __num = __val * 2;
   32ea0:	00141413          	slli	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   32ea4:	0000f797          	auipc	a5,0xf
   32ea8:	5c47b783          	ld	a5,1476(a5) # 42468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xb488>
   32eac:	008787b3          	add	a5,a5,s0
   32eb0:	0017c703          	lbu	a4,1(a5)
   32eb4:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   32eb8:	0007c783          	lbu	a5,0(a5)
   32ebc:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   32ec0:	00007617          	auipc	a2,0x7
   32ec4:	42060613          	addi	a2,a2,1056 # 3a2e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27c8>
   32ec8:	00000593          	addi	a1,zero,0
   32ecc:	00010513          	addi	a0,sp,0
   32ed0:	cc0e30ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   32ed4:	0540006f          	jal	zero,32f28 <elf::strtab::get(unsigned long, unsigned long*) const+0x184>
	  auto const __num = (__val % 100) * 2;
   32ed8:	02b47733          	remu	a4,s0,a1
   32edc:	00171713          	slli	a4,a4,0x1
	  __val /= 100;
   32ee0:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   32ee4:	02079693          	slli	a3,a5,0x20
   32ee8:	0206d693          	srli	a3,a3,0x20
   32eec:	00d606b3          	add	a3,a2,a3
   32ef0:	00e50733          	add	a4,a0,a4
   32ef4:	00174883          	lbu	a7,1(a4)
   32ef8:	01168023          	sb	a7,0(a3)
	  __first[__pos - 1] = __digits[__num];
   32efc:	fff7869b          	addiw	a3,a5,-1
   32f00:	02069693          	slli	a3,a3,0x20
   32f04:	0206d693          	srli	a3,a3,0x20
   32f08:	00d606b3          	add	a3,a2,a3
   32f0c:	00074703          	lbu	a4,0(a4)
   32f10:	00e68023          	sb	a4,0(a3)
	  __pos -= 2;
   32f14:	ffe7879b          	addiw	a5,a5,-2
   32f18:	f7dff06f          	jal	zero,32e94 <elf::strtab::get(unsigned long, unsigned long*) const+0xf0>
	__first[0] = '0' + __val;
   32f1c:	0304079b          	addiw	a5,s0,48
   32f20:	0ff7f793          	andi	a5,a5,255
   32f24:	f99ff06f          	jal	zero,32ebc <elf::strtab::get(unsigned long, unsigned long*) const+0x118>
   32f28:	00050593          	addi	a1,a0,0
   32f2c:	02010413          	addi	s0,sp,32
   32f30:	00040513          	addi	a0,s0,0
   32f34:	d3ce30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   32f38:	00007597          	auipc	a1,0x7
   32f3c:	3b858593          	addi	a1,a1,952 # 3a2f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27d8>
   32f40:	00040513          	addi	a0,s0,0
   32f44:	85de30ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   32f48:	00050593          	addi	a1,a0,0
   32f4c:	04010413          	addi	s0,sp,64
   32f50:	00040513          	addi	a0,s0,0
   32f54:	d1ce30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw range_error("string offset " + std::to_string(offset) +
   32f58:	00040593          	addi	a1,s0,0
   32f5c:	00048513          	addi	a0,s1,0
   32f60:	851e30ef          	jal	ra,167b0 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   32f64:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   32f68:	05010793          	addi	a5,sp,80
   32f6c:	00f50463          	beq	a0,a5,32f74 <elf::strtab::get(unsigned long, unsigned long*) const+0x1d0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   32f70:	da0e30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   32f74:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   32f78:	03010793          	addi	a5,sp,48
   32f7c:	00f50463          	beq	a0,a5,32f84 <elf::strtab::get(unsigned long, unsigned long*) const+0x1e0>
   32f80:	d90e30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   32f84:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   32f88:	01010793          	addi	a5,sp,16
   32f8c:	00f50463          	beq	a0,a5,32f94 <elf::strtab::get(unsigned long, unsigned long*) const+0x1f0>
   32f90:	d80e30ef          	jal	ra,16510 <operator delete(void*)@plt>
                      " exceeds section size");
   32f94:	0000f617          	auipc	a2,0xf
   32f98:	44c63603          	ld	a2,1100(a2) # 423e0 <std::range_error::~range_error()@GLIBCXX_3.4>
   32f9c:	0000f597          	auipc	a1,0xf
   32fa0:	5b45b583          	ld	a1,1460(a1) # 42550 <typeinfo for std::range_error@GLIBCXX_3.4>
   32fa4:	00048513          	addi	a0,s1,0
   32fa8:	f18e30ef          	jal	ra,166c0 <__cxa_throw@plt>
  if (p == m->end)
   32fac:	e2f688e3          	beq	a3,a5,32ddc <elf::strtab::get(unsigned long, unsigned long*) const+0x38>

  if (len_out)
   32fb0:	00060663          	beq	a2,zero,32fbc <elf::strtab::get(unsigned long, unsigned long*) const+0x218>
    *len_out = p - start;
   32fb4:	40a787b3          	sub	a5,a5,a0
   32fb8:	00f63023          	sd	a5,0(a2)
  return start;
}
   32fbc:	07813083          	ld	ra,120(sp)
   32fc0:	07013403          	ld	s0,112(sp)
   32fc4:	06813483          	ld	s1,104(sp)
   32fc8:	08010113          	addi	sp,sp,128
   32fcc:	00008067          	jalr	zero,0(ra)
   32fd0:	0000f797          	auipc	a5,0xf
   32fd4:	3707b783          	ld	a5,880(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   32fd8:	01078793          	addi	a5,a5,16
   32fdc:	00f43023          	sd	a5,0(s0)
    throw format_error("unterminated string");
   32fe0:	0000f617          	auipc	a2,0xf
   32fe4:	58863603          	ld	a2,1416(a2) # 42568 <elf::format_error::~format_error()@@Base+0xdf2c>
   32fe8:	0000f597          	auipc	a1,0xf
   32fec:	3385b583          	ld	a1,824(a1) # 42320 <typeinfo for elf::format_error@@Base+0x7e0>
   32ff0:	00040513          	addi	a0,s0,0
   32ff4:	ecce30ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   32ff8:	00050413          	addi	s0,a0,0
   32ffc:	04013503          	ld	a0,64(sp)
	if (!_M_is_local())
   33000:	05010793          	addi	a5,sp,80
   33004:	00f50463          	beq	a0,a5,3300c <elf::strtab::get(unsigned long, unsigned long*) const+0x268>
   33008:	d08e30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   3300c:	02013503          	ld	a0,32(sp)
	if (!_M_is_local())
   33010:	03010793          	addi	a5,sp,48
   33014:	00f50463          	beq	a0,a5,3301c <elf::strtab::get(unsigned long, unsigned long*) const+0x278>
   33018:	cf8e30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   3301c:	00013503          	ld	a0,0(sp)
	if (!_M_is_local())
   33020:	01010793          	addi	a5,sp,16
   33024:	00f50463          	beq	a0,a5,3302c <elf::strtab::get(unsigned long, unsigned long*) const+0x288>
   33028:	ce8e30ef          	jal	ra,16510 <operator delete(void*)@plt>
                      " exceeds section size");
   3302c:	00048513          	addi	a0,s1,0
   33030:	ca0e30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   33034:	00040513          	addi	a0,s0,0
   33038:	eb8e30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   3303c:	00050413          	addi	s0,a0,0
   33040:	fcdff06f          	jal	zero,3300c <elf::strtab::get(unsigned long, unsigned long*) const+0x268>
   33044:	00050413          	addi	s0,a0,0
   33048:	fd5ff06f          	jal	zero,3301c <elf::strtab::get(unsigned long, unsigned long*) const+0x278>
   3304c:	00050413          	addi	s0,a0,0
   33050:	fddff06f          	jal	zero,3302c <elf::strtab::get(unsigned long, unsigned long*) const+0x288>
    throw format_error("unterminated string");
   33054:	00050493          	addi	s1,a0,0
   33058:	00040513          	addi	a0,s0,0
   3305c:	c74e30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   33060:	00048513          	addi	a0,s1,0
   33064:	e8ce30ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000033068 <elf::section::get_name(unsigned long*) const>:
const char *section::get_name(size_t *len_out) const {
   33068:	fc010113          	addi	sp,sp,-64
   3306c:	02113c23          	sd	ra,56(sp)
   33070:	02813823          	sd	s0,48(sp)
   33074:	02913423          	sd	s1,40(sp)
   33078:	03213023          	sd	s2,32(sp)
   3307c:	01313c23          	sd	s3,24(sp)
   33080:	00050413          	addi	s0,a0,0
   33084:	00058493          	addi	s1,a1,0
   33088:	00053903          	ld	s2,0(a0)
  if (!m->name)
   3308c:	05093783          	ld	a5,80(s2)
   33090:	02078c63          	beq	a5,zero,330c8 <elf::section::get_name(unsigned long*) const+0x60>
  if (len_out)
   33094:	00048863          	beq	s1,zero,330a4 <elf::section::get_name(unsigned long*) const+0x3c>
    *len_out = m->name_len;
   33098:	00043783          	ld	a5,0(s0)
   3309c:	0587b783          	ld	a5,88(a5)
   330a0:	00f4b023          	sd	a5,0(s1)
  return m->name;
   330a4:	00043783          	ld	a5,0(s0)
   330a8:	0507b503          	ld	a0,80(a5)
}
   330ac:	03813083          	ld	ra,56(sp)
   330b0:	03013403          	ld	s0,48(sp)
   330b4:	02813483          	ld	s1,40(sp)
   330b8:	02013903          	ld	s2,32(sp)
   330bc:	01813983          	ld	s3,24(sp)
   330c0:	04010113          	addi	sp,sp,64
   330c4:	00008067          	jalr	zero,0(ra)
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   330c8:	00090513          	addi	a0,s2,0
   330cc:	e10ff0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   330d0:	03e55583          	lhu	a1,62(a0)
   330d4:	00090513          	addi	a0,s2,0
   330d8:	e90ff0ef          	jal	ra,32768 <elf::elf::get_section(unsigned int) const>
   330dc:	00050593          	addi	a1,a0,0
                  .as_strtab()
   330e0:	00010913          	addi	s2,sp,0
   330e4:	00090513          	addi	a0,s2,0
   330e8:	afdff0ef          	jal	ra,32be4 <elf::section::as_strtab() const>
   330ec:	00043983          	ld	s3,0(s0)
                  .get(m->hdr.name, &m->name_len);
   330f0:	05898613          	addi	a2,s3,88
   330f4:	0109e583          	lwu	a1,16(s3)
   330f8:	00090513          	addi	a0,s2,0
   330fc:	ca9ff0ef          	jal	ra,32da4 <elf::strtab::get(unsigned long, unsigned long*) const>
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   33100:	04a9b823          	sd	a0,80(s3)
	if (_M_pi != nullptr)
   33104:	00813903          	ld	s2,8(sp)
   33108:	f80906e3          	beq	s2,zero,33094 <elf::section::get_name(unsigned long*) const+0x2c>
    if (__is_single_threaded())
   3310c:	0000f797          	auipc	a5,0xf
   33110:	3747b783          	ld	a5,884(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33114:	0007c783          	lbu	a5,0(a5)
   33118:	06078263          	beq	a5,zero,3317c <elf::section::get_name(unsigned long*) const+0x114>
    _Atomic_word __result = *__mem;
   3311c:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   33120:	fff5079b          	addiw	a5,a0,-1
   33124:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   33128:	00100793          	addi	a5,zero,1
   3312c:	f6f514e3          	bne	a0,a5,33094 <elf::section::get_name(unsigned long*) const+0x2c>
	_M_dispose();
   33130:	00093783          	ld	a5,0(s2)
   33134:	0107b783          	ld	a5,16(a5)
   33138:	00090513          	addi	a0,s2,0
   3313c:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   33140:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   33144:	0000f797          	auipc	a5,0xf
   33148:	33c7b783          	ld	a5,828(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   3314c:	0007c783          	lbu	a5,0(a5)
   33150:	02078e63          	beq	a5,zero,3318c <elf::section::get_name(unsigned long*) const+0x124>
    _Atomic_word __result = *__mem;
   33154:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   33158:	fff5079b          	addiw	a5,a0,-1
   3315c:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   33160:	00100793          	addi	a5,zero,1
   33164:	f2f518e3          	bne	a0,a5,33094 <elf::section::get_name(unsigned long*) const+0x2c>
	    _M_destroy();
   33168:	00093783          	ld	a5,0(s2)
   3316c:	0187b783          	ld	a5,24(a5)
   33170:	00090513          	addi	a0,s2,0
   33174:	000780e7          	jalr	ra,0(a5)
   33178:	f1dff06f          	jal	zero,33094 <elf::section::get_name(unsigned long*) const+0x2c>
      return __exchange_and_add(__mem, __val);
   3317c:	fff00593          	addi	a1,zero,-1
   33180:	03090513          	addi	a0,s2,48
   33184:	9fce30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33188:	fa1ff06f          	jal	zero,33128 <elf::section::get_name(unsigned long*) const+0xc0>
   3318c:	fff00593          	addi	a1,zero,-1
   33190:	03490513          	addi	a0,s2,52
   33194:	9ece30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33198:	fc9ff06f          	jal	zero,33160 <elf::section::get_name(unsigned long*) const+0xf8>
	if (_M_pi != nullptr)
   3319c:	00050413          	addi	s0,a0,0
   331a0:	00813503          	ld	a0,8(sp)
   331a4:	00050863          	beq	a0,zero,331b4 <elf::section::get_name(unsigned long*) const+0x14c>
	  _M_pi->_M_release();
   331a8:	0000f317          	auipc	t1,0xf
   331ac:	22033303          	ld	t1,544(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   331b0:	000300e7          	jalr	ra,0(t1)
   331b4:	00040513          	addi	a0,s0,0
   331b8:	d38e30ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000331bc <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
const section &elf::get_section(const std::string &name) const {
   331bc:	fd010113          	addi	sp,sp,-48
   331c0:	02113423          	sd	ra,40(sp)
   331c4:	02813023          	sd	s0,32(sp)
   331c8:	00913c23          	sd	s1,24(sp)
   331cc:	01213823          	sd	s2,16(sp)
   331d0:	01313423          	sd	s3,8(sp)
   331d4:	01413023          	sd	s4,0(sp)
   331d8:	00050a13          	addi	s4,a0,0
   331dc:	00058493          	addi	s1,a1,0
  for (auto &sec : sections())
   331e0:	d70ff0ef          	jal	ra,32750 <elf::elf::sections() const>
      : _M_current(__i) { }
   331e4:	00053403          	ld	s0,0(a0)
   331e8:	00853983          	ld	s3,8(a0)
   331ec:	03340663          	beq	s0,s3,33218 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x5c>
   331f0:	00040913          	addi	s2,s0,0
    if (name == sec.get_name(nullptr))
   331f4:	00000593          	addi	a1,zero,0
   331f8:	00040513          	addi	a0,s0,0
   331fc:	e6dff0ef          	jal	ra,33068 <elf::section::get_name(unsigned long*) const>
    { return __lhs.compare(__rhs) == 0; }
   33200:	00050593          	addi	a1,a0,0
   33204:	00048513          	addi	a0,s1,0
   33208:	998e30ef          	jal	ra,163a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   3320c:	00050a63          	beq	a0,zero,33220 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x64>
  for (auto &sec : sections())
   33210:	01040413          	addi	s0,s0,16
   33214:	fc899ee3          	bne	s3,s0,331f0 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x34>
  return m->invalid_section;
   33218:	000a3903          	ld	s2,0(s4)
   3321c:	08090913          	addi	s2,s2,128
}
   33220:	00090513          	addi	a0,s2,0
   33224:	02813083          	ld	ra,40(sp)
   33228:	02013403          	ld	s0,32(sp)
   3322c:	01813483          	ld	s1,24(sp)
   33230:	01013903          	ld	s2,16(sp)
   33234:	00813983          	ld	s3,8(sp)
   33238:	00013a03          	ld	s4,0(sp)
   3323c:	03010113          	addi	sp,sp,48
   33240:	00008067          	jalr	zero,0(ra)

0000000000033244 <elf::sym::get_name(unsigned long*) const>:

sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const char *sym::get_name(size_t *len_out) const {
   33244:	ff010113          	addi	sp,sp,-16
   33248:	00113423          	sd	ra,8(sp)
   3324c:	00058613          	addi	a2,a1,0
  return strs.get(get_data().name, len_out);
   33250:	01056583          	lwu	a1,16(a0)
   33254:	b51ff0ef          	jal	ra,32da4 <elf::strtab::get(unsigned long, unsigned long*) const>
}
   33258:	00813083          	ld	ra,8(sp)
   3325c:	01010113          	addi	sp,sp,16
   33260:	00008067          	jalr	zero,0(ra)

0000000000033264 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>:
  const elf f;
  const char *data, *end;
  const strtab strs;
};

symtab::symtab(elf f, const void *data, size_t size, strtab strs)
   33264:	fb010113          	addi	sp,sp,-80
   33268:	04113423          	sd	ra,72(sp)
   3326c:	04813023          	sd	s0,64(sp)
   33270:	02913c23          	sd	s1,56(sp)
   33274:	03213823          	sd	s2,48(sp)
   33278:	03313423          	sd	s3,40(sp)
   3327c:	03413023          	sd	s4,32(sp)
   33280:	01513c23          	sd	s5,24(sp)
   33284:	01613823          	sd	s6,16(sp)
   33288:	01713423          	sd	s7,8(sp)
   3328c:	00050913          	addi	s2,a0,0
   33290:	00058a13          	addi	s4,a1,0
   33294:	00060993          	addi	s3,a2,0
   33298:	00070493          	addi	s1,a4,0
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size,
   3329c:	00d60ab3          	add	s5,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   332a0:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   332a4:	06800513          	addi	a0,zero,104
   332a8:	a78e30ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   332ac:	00050413          	addi	s0,a0,0
   332b0:	00052423          	sw	zero,8(a0)
   332b4:	00052623          	sw	zero,12(a0)
   332b8:	00052823          	sw	zero,16(a0)
   332bc:	00052a23          	sw	zero,20(a0)
   332c0:	00052c23          	sw	zero,24(a0)
   332c4:	00052e23          	sw	zero,28(a0)
   332c8:	02053023          	sd	zero,32(a0)
   332cc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   332d0:	00100793          	addi	a5,zero,1
   332d4:	02f52823          	sw	a5,48(a0)
   332d8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   332dc:	0000f797          	auipc	a5,0xf
   332e0:	06c7b783          	ld	a5,108(a5) # 42348 <vtable for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x630>
   332e4:	01078793          	addi	a5,a5,16
   332e8:	00f53023          	sd	a5,0(a0)
   332ec:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   332f0:	0004bb83          	ld	s7,0(s1)
      : _M_pi(__r._M_pi)
   332f4:	0084b483          	ld	s1,8(s1)
	if (_M_pi != nullptr)
   332f8:	02048063          	beq	s1,zero,33318 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xb4>
    if (__is_single_threaded())
   332fc:	0000f797          	auipc	a5,0xf
   33300:	1847b783          	ld	a5,388(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33304:	0007c783          	lbu	a5,0(a5)
   33308:	0a078c63          	beq	a5,zero,333c0 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x15c>
  { *__mem += __val; }
   3330c:	0304a783          	lw	a5,48(s1)
   33310:	0017879b          	addiw	a5,a5,1
   33314:	02f4a823          	sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33318:	000a3783          	ld	a5,0(s4)
   3331c:	02f43c23          	sd	a5,56(s0)
      : _M_pi(__r._M_pi)
   33320:	008a3503          	ld	a0,8(s4)
   33324:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   33328:	02050063          	beq	a0,zero,33348 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xe4>
    if (__is_single_threaded())
   3332c:	0000f717          	auipc	a4,0xf
   33330:	15473703          	ld	a4,340(a4) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33334:	00074703          	lbu	a4,0(a4)
   33338:	08070c63          	beq	a4,zero,333d0 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x16c>
  { *__mem += __val; }
   3333c:	03052703          	lw	a4,48(a0)
   33340:	0017071b          	addiw	a4,a4,1
   33344:	02e52823          	sw	a4,48(a0)
      : f(f), data(data), end(end), strs(strs) {}
   33348:	05343423          	sd	s3,72(s0)
   3334c:	05543823          	sd	s5,80(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33350:	05743c23          	sd	s7,88(s0)
      : _M_pi(__r._M_pi)
   33354:	06943023          	sd	s1,96(s0)
	if (_M_pi != nullptr)
   33358:	02048a63          	beq	s1,zero,3338c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
    if (__is_single_threaded())
   3335c:	0000f797          	auipc	a5,0xf
   33360:	1247b783          	ld	a5,292(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33364:	0007c783          	lbu	a5,0(a5)
   33368:	06078c63          	beq	a5,zero,333e0 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x17c>
  { *__mem += __val; }
   3336c:	0304a783          	lw	a5,48(s1)
   33370:	0017879b          	addiw	a5,a5,1
   33374:	02f4a823          	sw	a5,48(s1)
    _Atomic_word __result = *__mem;
   33378:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   3337c:	fff5079b          	addiw	a5,a0,-1
   33380:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   33384:	00100793          	addi	a5,zero,1
   33388:	08f50263          	beq	a0,a5,3340c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1a8>
	  _M_pi = __pi;
   3338c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   33390:	01693023          	sd	s6,0(s2)
                          strs)) {}
   33394:	04813083          	ld	ra,72(sp)
   33398:	04013403          	ld	s0,64(sp)
   3339c:	03813483          	ld	s1,56(sp)
   333a0:	03013903          	ld	s2,48(sp)
   333a4:	02813983          	ld	s3,40(sp)
   333a8:	02013a03          	ld	s4,32(sp)
   333ac:	01813a83          	ld	s5,24(sp)
   333b0:	01013b03          	ld	s6,16(sp)
   333b4:	00813b83          	ld	s7,8(sp)
   333b8:	05010113          	addi	sp,sp,80
   333bc:	00008067          	jalr	zero,0(ra)
      __atomic_add(__mem, __val);
   333c0:	00100593          	addi	a1,zero,1
   333c4:	03048513          	addi	a0,s1,48
   333c8:	f89e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   333cc:	f4dff06f          	jal	zero,33318 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xb4>
   333d0:	00100593          	addi	a1,zero,1
   333d4:	03050513          	addi	a0,a0,48
   333d8:	f79e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   333dc:	f6dff06f          	jal	zero,33348 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xe4>
   333e0:	00100593          	addi	a1,zero,1
   333e4:	03048513          	addi	a0,s1,48
   333e8:	f69e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   333ec:	0000f797          	auipc	a5,0xf
   333f0:	0947b783          	ld	a5,148(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   333f4:	0007c783          	lbu	a5,0(a5)
   333f8:	f80790e3          	bne	a5,zero,33378 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x114>
      return __exchange_and_add(__mem, __val);
   333fc:	fff00593          	addi	a1,zero,-1
   33400:	03048513          	addi	a0,s1,48
   33404:	f7de20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33408:	f7dff06f          	jal	zero,33384 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x120>
	_M_dispose();
   3340c:	0004b783          	ld	a5,0(s1)
   33410:	0107b783          	ld	a5,16(a5)
   33414:	00048513          	addi	a0,s1,0
   33418:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   3341c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   33420:	0000f797          	auipc	a5,0xf
   33424:	0607b783          	ld	a5,96(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33428:	0007c783          	lbu	a5,0(a5)
   3342c:	02078663          	beq	a5,zero,33458 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1f4>
    _Atomic_word __result = *__mem;
   33430:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   33434:	fff5079b          	addiw	a5,a0,-1
   33438:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   3343c:	00100793          	addi	a5,zero,1
   33440:	f4f516e3          	bne	a0,a5,3338c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
	    _M_destroy();
   33444:	0004b783          	ld	a5,0(s1)
   33448:	0187b783          	ld	a5,24(a5)
   3344c:	00048513          	addi	a0,s1,0
   33450:	000780e7          	jalr	ra,0(a5)
   33454:	f39ff06f          	jal	zero,3338c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x128>
      return __exchange_and_add(__mem, __val);
   33458:	fff00593          	addi	a1,zero,-1
   3345c:	03448513          	addi	a0,s1,52
   33460:	f21e20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33464:	fd9ff06f          	jal	zero,3343c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x1d8>

0000000000033468 <elf::section::as_symtab() const>:
symtab section::as_symtab() const {
   33468:	fb010113          	addi	sp,sp,-80
   3346c:	04113423          	sd	ra,72(sp)
   33470:	04813023          	sd	s0,64(sp)
   33474:	02913c23          	sd	s1,56(sp)
   33478:	03213823          	sd	s2,48(sp)
   3347c:	03313423          	sd	s3,40(sp)
   33480:	03413023          	sd	s4,32(sp)
   33484:	00050493          	addi	s1,a0,0
   33488:	00058413          	addi	s0,a1,0
      { return _M_ptr; }
   3348c:	0005b783          	ld	a5,0(a1)
  if (m->hdr.type != sht::symtab && m->hdr.type != sht::dynsym)
   33490:	0147a703          	lw	a4,20(a5)
   33494:	00200693          	addi	a3,zero,2
   33498:	00d70663          	beq	a4,a3,334a4 <elf::section::as_symtab() const+0x3c>
   3349c:	00b00693          	addi	a3,zero,11
   334a0:	04d71063          	bne	a4,a3,334e0 <elf::section::as_symtab() const+0x78>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   334a4:	0007b703          	ld	a4,0(a5)
   334a8:	00e13023          	sd	a4,0(sp)
      : _M_pi(__r._M_pi)
   334ac:	0087b503          	ld	a0,8(a5)
   334b0:	00a13423          	sd	a0,8(sp)
	if (_M_pi != nullptr)
   334b4:	02050063          	beq	a0,zero,334d4 <elf::section::as_symtab() const+0x6c>
    if (__is_single_threaded())
   334b8:	0000f797          	auipc	a5,0xf
   334bc:	fc87b783          	ld	a5,-56(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   334c0:	0007c783          	lbu	a5,0(a5)
   334c4:	04078e63          	beq	a5,zero,33520 <elf::section::as_symtab() const+0xb8>
  { *__mem += __val; }
   334c8:	03052783          	lw	a5,48(a0)
   334cc:	0017879b          	addiw	a5,a5,1
   334d0:	02f52823          	sw	a5,48(a0)
                m->f.get_section(get_hdr().link).as_strtab());
   334d4:	00040513          	addi	a0,s0,0
   334d8:	ce4ff0ef          	jal	ra,329bc <elf::section::data() const>
   334dc:	0540006f          	jal	zero,33530 <elf::section::as_symtab() const+0xc8>
    throw section_type_mismatch("cannot use section as symtab");
   334e0:	01000513          	addi	a0,zero,16
   334e4:	f3de20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   334e8:	00050413          	addi	s0,a0,0
      : std::logic_error(what_arg) {}
   334ec:	00007597          	auipc	a1,0x7
   334f0:	e1c58593          	addi	a1,a1,-484 # 3a308 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27f0>
   334f4:	88ce30ef          	jal	ra,16580 <std::logic_error::logic_error(char const*)@plt>
   334f8:	0000f797          	auipc	a5,0xf
   334fc:	ec07b783          	ld	a5,-320(a5) # 423b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   33500:	01078793          	addi	a5,a5,16
   33504:	00f43023          	sd	a5,0(s0)
   33508:	0000f617          	auipc	a2,0xf
   3350c:	da063603          	ld	a2,-608(a2) # 422a8 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xdaac>
   33510:	0000f597          	auipc	a1,0xf
   33514:	dd05b583          	ld	a1,-560(a1) # 422e0 <typeinfo for elf::section_type_mismatch@@Base+0x788>
   33518:	00040513          	addi	a0,s0,0
   3351c:	9a4e30ef          	jal	ra,166c0 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   33520:	00100593          	addi	a1,zero,1
   33524:	03050513          	addi	a0,a0,48
   33528:	e29e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   3352c:	fa9ff06f          	jal	zero,334d4 <elf::section::as_symtab() const+0x6c>
                m->f.get_section(get_hdr().link).as_strtab());
   33530:	00050913          	addi	s2,a0,0
   33534:	00040513          	addi	a0,s0,0
   33538:	db4ff0ef          	jal	ra,32aec <elf::section::size() const>
   3353c:	00050993          	addi	s3,a0,0
   33540:	00043a03          	ld	s4,0(s0)
   33544:	00040513          	addi	a0,s0,0
   33548:	c68ff0ef          	jal	ra,329b0 <elf::section::get_hdr() const>
   3354c:	02855583          	lhu	a1,40(a0)
   33550:	000a0513          	addi	a0,s4,0
   33554:	a14ff0ef          	jal	ra,32768 <elf::elf::get_section(unsigned int) const>
   33558:	00050593          	addi	a1,a0,0
   3355c:	01010513          	addi	a0,sp,16
   33560:	e84ff0ef          	jal	ra,32be4 <elf::section::as_strtab() const>
   33564:	01010713          	addi	a4,sp,16
   33568:	00098693          	addi	a3,s3,0
   3356c:	00090613          	addi	a2,s2,0
   33570:	00010593          	addi	a1,sp,0
   33574:	00048513          	addi	a0,s1,0
   33578:	cedff0ef          	jal	ra,33264 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>
	if (_M_pi != nullptr)
   3357c:	01813403          	ld	s0,24(sp)
   33580:	02040463          	beq	s0,zero,335a8 <elf::section::as_symtab() const+0x140>
    if (__is_single_threaded())
   33584:	0000f797          	auipc	a5,0xf
   33588:	efc7b783          	ld	a5,-260(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   3358c:	0007c783          	lbu	a5,0(a5)
   33590:	06078463          	beq	a5,zero,335f8 <elf::section::as_symtab() const+0x190>
    _Atomic_word __result = *__mem;
   33594:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   33598:	fff5079b          	addiw	a5,a0,-1
   3359c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   335a0:	00100793          	addi	a5,zero,1
   335a4:	06f50263          	beq	a0,a5,33608 <elf::section::as_symtab() const+0x1a0>
	if (_M_pi != nullptr)
   335a8:	00813403          	ld	s0,8(sp)
   335ac:	02040463          	beq	s0,zero,335d4 <elf::section::as_symtab() const+0x16c>
    if (__is_single_threaded())
   335b0:	0000f797          	auipc	a5,0xf
   335b4:	ed07b783          	ld	a5,-304(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   335b8:	0007c783          	lbu	a5,0(a5)
   335bc:	0a078463          	beq	a5,zero,33664 <elf::section::as_symtab() const+0x1fc>
    _Atomic_word __result = *__mem;
   335c0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   335c4:	fff5079b          	addiw	a5,a0,-1
   335c8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   335cc:	00100793          	addi	a5,zero,1
   335d0:	0af50263          	beq	a0,a5,33674 <elf::section::as_symtab() const+0x20c>
}
   335d4:	00048513          	addi	a0,s1,0
   335d8:	04813083          	ld	ra,72(sp)
   335dc:	04013403          	ld	s0,64(sp)
   335e0:	03813483          	ld	s1,56(sp)
   335e4:	03013903          	ld	s2,48(sp)
   335e8:	02813983          	ld	s3,40(sp)
   335ec:	02013a03          	ld	s4,32(sp)
   335f0:	05010113          	addi	sp,sp,80
   335f4:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   335f8:	fff00593          	addi	a1,zero,-1
   335fc:	03040513          	addi	a0,s0,48
   33600:	d81e20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33604:	f9dff06f          	jal	zero,335a0 <elf::section::as_symtab() const+0x138>
	_M_dispose();
   33608:	00043783          	ld	a5,0(s0)
   3360c:	0107b783          	ld	a5,16(a5)
   33610:	00040513          	addi	a0,s0,0
   33614:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   33618:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   3361c:	0000f797          	auipc	a5,0xf
   33620:	e647b783          	ld	a5,-412(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33624:	0007c783          	lbu	a5,0(a5)
   33628:	02078663          	beq	a5,zero,33654 <elf::section::as_symtab() const+0x1ec>
    _Atomic_word __result = *__mem;
   3362c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   33630:	fff5079b          	addiw	a5,a0,-1
   33634:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   33638:	00100793          	addi	a5,zero,1
   3363c:	f6f516e3          	bne	a0,a5,335a8 <elf::section::as_symtab() const+0x140>
	    _M_destroy();
   33640:	00043783          	ld	a5,0(s0)
   33644:	0187b783          	ld	a5,24(a5)
   33648:	00040513          	addi	a0,s0,0
   3364c:	000780e7          	jalr	ra,0(a5)
   33650:	f59ff06f          	jal	zero,335a8 <elf::section::as_symtab() const+0x140>
      return __exchange_and_add(__mem, __val);
   33654:	fff00593          	addi	a1,zero,-1
   33658:	03440513          	addi	a0,s0,52
   3365c:	d25e20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33660:	fd9ff06f          	jal	zero,33638 <elf::section::as_symtab() const+0x1d0>
   33664:	fff00593          	addi	a1,zero,-1
   33668:	03040513          	addi	a0,s0,48
   3366c:	d15e20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   33670:	f5dff06f          	jal	zero,335cc <elf::section::as_symtab() const+0x164>
	_M_dispose();
   33674:	00043783          	ld	a5,0(s0)
   33678:	0107b783          	ld	a5,16(a5)
   3367c:	00040513          	addi	a0,s0,0
   33680:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   33684:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   33688:	0000f797          	auipc	a5,0xf
   3368c:	df87b783          	ld	a5,-520(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33690:	0007c783          	lbu	a5,0(a5)
   33694:	02078663          	beq	a5,zero,336c0 <elf::section::as_symtab() const+0x258>
    _Atomic_word __result = *__mem;
   33698:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   3369c:	fff5079b          	addiw	a5,a0,-1
   336a0:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   336a4:	00100793          	addi	a5,zero,1
   336a8:	f2f516e3          	bne	a0,a5,335d4 <elf::section::as_symtab() const+0x16c>
	    _M_destroy();
   336ac:	00043783          	ld	a5,0(s0)
   336b0:	0187b783          	ld	a5,24(a5)
   336b4:	00040513          	addi	a0,s0,0
   336b8:	000780e7          	jalr	ra,0(a5)
                m->f.get_section(get_hdr().link).as_strtab());
   336bc:	f19ff06f          	jal	zero,335d4 <elf::section::as_symtab() const+0x16c>
      return __exchange_and_add(__mem, __val);
   336c0:	fff00593          	addi	a1,zero,-1
   336c4:	03440513          	addi	a0,s0,52
   336c8:	cb9e20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   336cc:	fd9ff06f          	jal	zero,336a4 <elf::section::as_symtab() const+0x23c>
    throw section_type_mismatch("cannot use section as symtab");
   336d0:	00050493          	addi	s1,a0,0
   336d4:	00040513          	addi	a0,s0,0
   336d8:	df9e20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   336dc:	00048513          	addi	a0,s1,0
   336e0:	810e30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   336e4:	00050413          	addi	s0,a0,0
   336e8:	01813503          	ld	a0,24(sp)
   336ec:	00050863          	beq	a0,zero,336fc <elf::section::as_symtab() const+0x294>
	  _M_pi->_M_release();
   336f0:	0000f317          	auipc	t1,0xf
   336f4:	cd833303          	ld	t1,-808(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   336f8:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   336fc:	00813503          	ld	a0,8(sp)
   33700:	00050863          	beq	a0,zero,33710 <elf::section::as_symtab() const+0x2a8>
	  _M_pi->_M_release();
   33704:	0000f317          	auipc	t1,0xf
   33708:	cc433303          	ld	t1,-828(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   3370c:	000300e7          	jalr	ra,0(t1)
   33710:	00040513          	addi	a0,s0,0
   33714:	fdde20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   33718:	00050413          	addi	s0,a0,0
   3371c:	fe1ff06f          	jal	zero,336fc <elf::section::as_symtab() const+0x294>

0000000000033720 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>:

symtab::iterator::iterator(const symtab &tab, const char *pos)
   33720:	fe010113          	addi	sp,sp,-32
   33724:	00113c23          	sd	ra,24(sp)
   33728:	00813823          	sd	s0,16(sp)
   3372c:	00913423          	sd	s1,8(sp)
   33730:	01213023          	sd	s2,0(sp)
   33734:	00050413          	addi	s0,a0,0
   33738:	00058493          	addi	s1,a1,0
   3373c:	00060913          	addi	s2,a2,0
      { return _M_ptr; }
   33740:	0005b783          	ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33744:	0007b703          	ld	a4,0(a5)
   33748:	00e53023          	sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   3374c:	0087b503          	ld	a0,8(a5)
   33750:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   33754:	02050063          	beq	a0,zero,33774 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x54>
    if (__is_single_threaded())
   33758:	0000f797          	auipc	a5,0xf
   3375c:	d287b783          	ld	a5,-728(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33760:	0007c783          	lbu	a5,0(a5)
   33764:	04078a63          	beq	a5,zero,337b8 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x98>
  { *__mem += __val; }
   33768:	03052783          	lw	a5,48(a0)
   3376c:	0017879b          	addiw	a5,a5,1
   33770:	02f52823          	sw	a5,48(a0)
      { return _M_ptr; }
   33774:	0004b783          	ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33778:	0207b703          	ld	a4,32(a5)
   3377c:	00e43823          	sd	a4,16(s0)
      : _M_pi(__r._M_pi)
   33780:	0287b503          	ld	a0,40(a5)
   33784:	00a43c23          	sd	a0,24(s0)
	if (_M_pi != nullptr)
   33788:	02050063          	beq	a0,zero,337a8 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x88>
    if (__is_single_threaded())
   3378c:	0000f797          	auipc	a5,0xf
   33790:	cf47b783          	ld	a5,-780(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33794:	0007c783          	lbu	a5,0(a5)
   33798:	02078863          	beq	a5,zero,337c8 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xa8>
  { *__mem += __val; }
   3379c:	03052783          	lw	a5,48(a0)
   337a0:	0017879b          	addiw	a5,a5,1
   337a4:	02f52823          	sw	a5,48(a0)
    : f(tab.m->f), strs(tab.m->strs), pos(pos) {
   337a8:	03243023          	sd	s2,32(s0)
  if (f.get_hdr().ei_class == elfclass::_32)
   337ac:	00040513          	addi	a0,s0,0
   337b0:	f2dfe0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   337b4:	0240006f          	jal	zero,337d8 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xb8>
      __atomic_add(__mem, __val);
   337b8:	00100593          	addi	a1,zero,1
   337bc:	03050513          	addi	a0,a0,48
   337c0:	b91e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   337c4:	fb1ff06f          	jal	zero,33774 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x54>
   337c8:	00100593          	addi	a1,zero,1
   337cc:	03050513          	addi	a0,a0,48
   337d0:	b81e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   337d4:	fd5ff06f          	jal	zero,337a8 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x88>
   337d8:	00454683          	lbu	a3,4(a0)
   337dc:	00100713          	addi	a4,zero,1
    stride = sizeof(Sym<Elf32>);
  else
    stride = sizeof(Sym<Elf64>);
   337e0:	01800793          	addi	a5,zero,24
  if (f.get_hdr().ei_class == elfclass::_32)
   337e4:	02e68063          	beq	a3,a4,33804 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xe4>
   337e8:	02f43423          	sd	a5,40(s0)
}
   337ec:	01813083          	ld	ra,24(sp)
   337f0:	01013403          	ld	s0,16(sp)
   337f4:	00813483          	ld	s1,8(sp)
   337f8:	00013903          	ld	s2,0(sp)
   337fc:	02010113          	addi	sp,sp,32
   33800:	00008067          	jalr	zero,0(ra)
    stride = sizeof(Sym<Elf32>);
   33804:	01000793          	addi	a5,zero,16
   33808:	fe1ff06f          	jal	zero,337e8 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xc8>
	if (_M_pi != nullptr)
   3380c:	00050493          	addi	s1,a0,0
   33810:	01843503          	ld	a0,24(s0)
   33814:	00050863          	beq	a0,zero,33824 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x104>
	  _M_pi->_M_release();
   33818:	0000f317          	auipc	t1,0xf
   3381c:	bb033303          	ld	t1,-1104(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   33820:	000300e7          	jalr	ra,0(t1)
	if (_M_pi != nullptr)
   33824:	00843503          	ld	a0,8(s0)
   33828:	00050863          	beq	a0,zero,33838 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x118>
	  _M_pi->_M_release();
   3382c:	0000f317          	auipc	t1,0xf
   33830:	b9c33303          	ld	t1,-1124(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   33834:	000300e7          	jalr	ra,0(t1)
   33838:	00048513          	addi	a0,s1,0
   3383c:	eb5e20ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000033840 <elf::symtab::begin() const>:

symtab::iterator symtab::begin() const { return iterator(*this, m->data); }
   33840:	ff010113          	addi	sp,sp,-16
   33844:	00113423          	sd	ra,8(sp)
   33848:	00813023          	sd	s0,0(sp)
   3384c:	00050413          	addi	s0,a0,0
   33850:	0005b783          	ld	a5,0(a1)
   33854:	0107b603          	ld	a2,16(a5)
   33858:	ec9ff0ef          	jal	ra,33720 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   3385c:	00040513          	addi	a0,s0,0
   33860:	00813083          	ld	ra,8(sp)
   33864:	00013403          	ld	s0,0(sp)
   33868:	01010113          	addi	sp,sp,16
   3386c:	00008067          	jalr	zero,0(ra)

0000000000033870 <elf::symtab::end() const>:

symtab::iterator symtab::end() const { return iterator(*this, m->end); }
   33870:	ff010113          	addi	sp,sp,-16
   33874:	00113423          	sd	ra,8(sp)
   33878:	00813023          	sd	s0,0(sp)
   3387c:	00050413          	addi	s0,a0,0
   33880:	0005b783          	ld	a5,0(a1)
   33884:	0187b603          	ld	a2,24(a5)
   33888:	e99ff0ef          	jal	ra,33720 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   3388c:	00040513          	addi	a0,s0,0
   33890:	00813083          	ld	ra,8(sp)
   33894:	00013403          	ld	s0,0(sp)
   33898:	01010113          	addi	sp,sp,16
   3389c:	00008067          	jalr	zero,0(ra)

00000000000338a0 <elf::segment::segment(elf::elf const&, void const*)>:
segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   338a0:	fd010113          	addi	sp,sp,-48
   338a4:	02113423          	sd	ra,40(sp)
   338a8:	02813023          	sd	s0,32(sp)
   338ac:	00913c23          	sd	s1,24(sp)
   338b0:	01213823          	sd	s2,16(sp)
   338b4:	01313423          	sd	s3,8(sp)
   338b8:	01413023          	sd	s4,0(sp)
   338bc:	00050913          	addi	s2,a0,0
   338c0:	00058493          	addi	s1,a1,0
   338c4:	00060993          	addi	s3,a2,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   338c8:	00053023          	sd	zero,0(a0)
   338cc:	08800513          	addi	a0,zero,136
   338d0:	c51e20ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   338d4:	00050413          	addi	s0,a0,0
   338d8:	00052423          	sw	zero,8(a0)
   338dc:	00052623          	sw	zero,12(a0)
   338e0:	00052823          	sw	zero,16(a0)
   338e4:	00052a23          	sw	zero,20(a0)
   338e8:	00052c23          	sw	zero,24(a0)
   338ec:	00052e23          	sw	zero,28(a0)
   338f0:	02053023          	sd	zero,32(a0)
   338f4:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   338f8:	00100793          	addi	a5,zero,1
   338fc:	02f52823          	sw	a5,48(a0)
   33900:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   33904:	0000f797          	auipc	a5,0xf
   33908:	b747b783          	ld	a5,-1164(a5) # 42478 <vtable for std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x808>
   3390c:	01078793          	addi	a5,a5,16
   33910:	00f53023          	sd	a5,0(a0)
   33914:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33918:	0004b783          	ld	a5,0(s1)
   3391c:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   33920:	0084b503          	ld	a0,8(s1)
   33924:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   33928:	02050063          	beq	a0,zero,33948 <elf::segment::segment(elf::elf const&, void const*)+0xa8>
    if (__is_single_threaded())
   3392c:	0000f717          	auipc	a4,0xf
   33930:	b5473703          	ld	a4,-1196(a4) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33934:	00074703          	lbu	a4,0(a4)
   33938:	02070663          	beq	a4,zero,33964 <elf::segment::segment(elf::elf const&, void const*)+0xc4>
  { *__mem += __val; }
   3393c:	03052703          	lw	a4,48(a0)
   33940:	0017071b          	addiw	a4,a4,1
   33944:	02e52823          	sw	a4,48(a0)
  impl(const elf &f) : f(f), data(nullptr) {}
   33948:	08043023          	sd	zero,128(s0)
	  _M_pi = __pi;
   3394c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   33950:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   33954:	04840413          	addi	s0,s0,72
   33958:	00048513          	addi	a0,s1,0
   3395c:	d81fe0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   33960:	0140006f          	jal	zero,33974 <elf::segment::segment(elf::elf const&, void const*)+0xd4>
      __atomic_add(__mem, __val);
   33964:	00100593          	addi	a1,zero,1
   33968:	03050513          	addi	a0,a0,48
   3396c:	9e5e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33970:	fd9ff06f          	jal	zero,33948 <elf::segment::segment(elf::elf const&, void const*)+0xa8>
   33974:	00454a03          	lbu	s4,4(a0)
   33978:	00048513          	addi	a0,s1,0
   3397c:	d61fe0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   33980:	00554683          	lbu	a3,5(a0)
   33984:	000a0613          	addi	a2,s4,0
   33988:	00098593          	addi	a1,s3,0
   3398c:	00040513          	addi	a0,s0,0
   33990:	0000f317          	auipc	t1,0xf
   33994:	c4033303          	ld	t1,-960(t1) # 425d0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcfb8>
   33998:	000300e7          	jalr	ra,0(t1)
}
   3399c:	02813083          	ld	ra,40(sp)
   339a0:	02013403          	ld	s0,32(sp)
   339a4:	01813483          	ld	s1,24(sp)
   339a8:	01013903          	ld	s2,16(sp)
   339ac:	00813983          	ld	s3,8(sp)
   339b0:	00013a03          	ld	s4,0(sp)
   339b4:	03010113          	addi	sp,sp,48
   339b8:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   339bc:	00050413          	addi	s0,a0,0
   339c0:	00893503          	ld	a0,8(s2)
   339c4:	00050863          	beq	a0,zero,339d4 <elf::segment::segment(elf::elf const&, void const*)+0x134>
	  _M_pi->_M_release();
   339c8:	0000f317          	auipc	t1,0xf
   339cc:	a0033303          	ld	t1,-1536(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   339d0:	000300e7          	jalr	ra,0(t1)
   339d4:	00040513          	addi	a0,s0,0
   339d8:	d19e20ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000339dc <elf::section::section(elf::elf const&, void const*)>:
section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   339dc:	fd010113          	addi	sp,sp,-48
   339e0:	02113423          	sd	ra,40(sp)
   339e4:	02813023          	sd	s0,32(sp)
   339e8:	00913c23          	sd	s1,24(sp)
   339ec:	01213823          	sd	s2,16(sp)
   339f0:	01313423          	sd	s3,8(sp)
   339f4:	01413023          	sd	s4,0(sp)
   339f8:	00050913          	addi	s2,a0,0
   339fc:	00058493          	addi	s1,a1,0
   33a00:	00060993          	addi	s3,a2,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   33a04:	00053023          	sd	zero,0(a0)
   33a08:	0a000513          	addi	a0,zero,160
   33a0c:	b15e20ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   33a10:	00050413          	addi	s0,a0,0
   33a14:	00052423          	sw	zero,8(a0)
   33a18:	00052623          	sw	zero,12(a0)
   33a1c:	00052823          	sw	zero,16(a0)
   33a20:	00052a23          	sw	zero,20(a0)
   33a24:	00052c23          	sw	zero,24(a0)
   33a28:	00052e23          	sw	zero,28(a0)
   33a2c:	02053023          	sd	zero,32(a0)
   33a30:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   33a34:	00100793          	addi	a5,zero,1
   33a38:	02f52823          	sw	a5,48(a0)
   33a3c:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   33a40:	0000f797          	auipc	a5,0xf
   33a44:	9e87b783          	ld	a5,-1560(a5) # 42428 <vtable for std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x780>
   33a48:	01078793          	addi	a5,a5,16
   33a4c:	00f53023          	sd	a5,0(a0)
   33a50:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33a54:	0004b783          	ld	a5,0(s1)
   33a58:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   33a5c:	0084b503          	ld	a0,8(s1)
   33a60:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   33a64:	02050063          	beq	a0,zero,33a84 <elf::section::section(elf::elf const&, void const*)+0xa8>
    if (__is_single_threaded())
   33a68:	0000f717          	auipc	a4,0xf
   33a6c:	a1873703          	ld	a4,-1512(a4) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33a70:	00074703          	lbu	a4,0(a4)
   33a74:	02070863          	beq	a4,zero,33aa4 <elf::section::section(elf::elf const&, void const*)+0xc8>
  { *__mem += __val; }
   33a78:	03052703          	lw	a4,48(a0)
   33a7c:	0017071b          	addiw	a4,a4,1
   33a80:	02e52823          	sw	a4,48(a0)
  impl(const elf &f) : f(f), name(nullptr), data(nullptr) {}
   33a84:	08043423          	sd	zero,136(s0)
   33a88:	08043c23          	sd	zero,152(s0)
	  _M_pi = __pi;
   33a8c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   33a90:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   33a94:	04840413          	addi	s0,s0,72
   33a98:	00048513          	addi	a0,s1,0
   33a9c:	c41fe0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   33aa0:	0140006f          	jal	zero,33ab4 <elf::section::section(elf::elf const&, void const*)+0xd8>
      __atomic_add(__mem, __val);
   33aa4:	00100593          	addi	a1,zero,1
   33aa8:	03050513          	addi	a0,a0,48
   33aac:	8a5e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33ab0:	fd5ff06f          	jal	zero,33a84 <elf::section::section(elf::elf const&, void const*)+0xa8>
   33ab4:	00454a03          	lbu	s4,4(a0)
   33ab8:	00048513          	addi	a0,s1,0
   33abc:	c21fe0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   33ac0:	00554683          	lbu	a3,5(a0)
   33ac4:	000a0613          	addi	a2,s4,0
   33ac8:	00098593          	addi	a1,s3,0
   33acc:	00040513          	addi	a0,s0,0
   33ad0:	0000f317          	auipc	t1,0xf
   33ad4:	ab033303          	ld	t1,-1360(t1) # 42580 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcd8c>
   33ad8:	000300e7          	jalr	ra,0(t1)
}
   33adc:	02813083          	ld	ra,40(sp)
   33ae0:	02013403          	ld	s0,32(sp)
   33ae4:	01813483          	ld	s1,24(sp)
   33ae8:	01013903          	ld	s2,16(sp)
   33aec:	00813983          	ld	s3,8(sp)
   33af0:	00013a03          	ld	s4,0(sp)
   33af4:	03010113          	addi	sp,sp,48
   33af8:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   33afc:	00050413          	addi	s0,a0,0
   33b00:	00893503          	ld	a0,8(s2)
   33b04:	00050863          	beq	a0,zero,33b14 <elf::section::section(elf::elf const&, void const*)+0x138>
	  _M_pi->_M_release();
   33b08:	0000f317          	auipc	t1,0xf
   33b0c:	8c033303          	ld	t1,-1856(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   33b10:	000300e7          	jalr	ra,0(t1)
   33b14:	00040513          	addi	a0,s0,0
   33b18:	bd9e20ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000033b1c <elf::sym::sym(elf::elf, void const*, elf::strtab)>:
sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
   33b1c:	fd010113          	addi	sp,sp,-48
   33b20:	02113423          	sd	ra,40(sp)
   33b24:	02813023          	sd	s0,32(sp)
   33b28:	00913c23          	sd	s1,24(sp)
   33b2c:	01213823          	sd	s2,16(sp)
   33b30:	01313423          	sd	s3,8(sp)
   33b34:	01413023          	sd	s4,0(sp)
   33b38:	00050413          	addi	s0,a0,0
   33b3c:	00058493          	addi	s1,a1,0
   33b40:	00060913          	addi	s2,a2,0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33b44:	0006b783          	ld	a5,0(a3)
   33b48:	00f53023          	sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   33b4c:	0086b503          	ld	a0,8(a3)
   33b50:	00a43423          	sd	a0,8(s0)
	if (_M_pi != nullptr)
   33b54:	02050063          	beq	a0,zero,33b74 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x58>
    if (__is_single_threaded())
   33b58:	0000f797          	auipc	a5,0xf
   33b5c:	9287b783          	ld	a5,-1752(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33b60:	0007c783          	lbu	a5,0(a5)
   33b64:	02078063          	beq	a5,zero,33b84 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x68>
  { *__mem += __val; }
   33b68:	03052783          	lw	a5,48(a0)
   33b6c:	0017879b          	addiw	a5,a5,1
   33b70:	02f52823          	sw	a5,48(a0)
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
   33b74:	01040993          	addi	s3,s0,16
   33b78:	00048513          	addi	a0,s1,0
   33b7c:	b61fe0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   33b80:	0140006f          	jal	zero,33b94 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x78>
      __atomic_add(__mem, __val);
   33b84:	00100593          	addi	a1,zero,1
   33b88:	03050513          	addi	a0,a0,48
   33b8c:	fc4e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   33b90:	fe5ff06f          	jal	zero,33b74 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x58>
   33b94:	00454a03          	lbu	s4,4(a0)
   33b98:	00048513          	addi	a0,s1,0
   33b9c:	b41fe0ef          	jal	ra,326dc <elf::elf::get_hdr() const>
   33ba0:	00554683          	lbu	a3,5(a0)
   33ba4:	000a0613          	addi	a2,s4,0
   33ba8:	00090593          	addi	a1,s2,0
   33bac:	00098513          	addi	a0,s3,0
   33bb0:	0000f317          	auipc	t1,0xf
   33bb4:	99033303          	ld	t1,-1648(t1) # 42540 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcb20>
   33bb8:	000300e7          	jalr	ra,0(t1)
}
   33bbc:	02813083          	ld	ra,40(sp)
   33bc0:	02013403          	ld	s0,32(sp)
   33bc4:	01813483          	ld	s1,24(sp)
   33bc8:	01013903          	ld	s2,16(sp)
   33bcc:	00813983          	ld	s3,8(sp)
   33bd0:	00013a03          	ld	s4,0(sp)
   33bd4:	03010113          	addi	sp,sp,48
   33bd8:	00008067          	jalr	zero,0(ra)
	if (_M_pi != nullptr)
   33bdc:	00050493          	addi	s1,a0,0
   33be0:	00843503          	ld	a0,8(s0)
   33be4:	00050863          	beq	a0,zero,33bf4 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0xd8>
	  _M_pi->_M_release();
   33be8:	0000e317          	auipc	t1,0xe
   33bec:	7e033303          	ld	t1,2016(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   33bf0:	000300e7          	jalr	ra,0(t1)
   33bf4:	00048513          	addi	a0,s1,0
   33bf8:	af9e20ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000033bfc <elf::section::get_name[abi:cxx11]() const>:
string section::get_name() const { return get_name(nullptr); }
   33bfc:	fe010113          	addi	sp,sp,-32
   33c00:	00113c23          	sd	ra,24(sp)
   33c04:	00813823          	sd	s0,16(sp)
   33c08:	00913423          	sd	s1,8(sp)
   33c0c:	00050413          	addi	s0,a0,0
   33c10:	00058513          	addi	a0,a1,0
   33c14:	00000593          	addi	a1,zero,0
   33c18:	c50ff0ef          	jal	ra,33068 <elf::section::get_name(unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33c1c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   33c20:	00f43023          	sd	a5,0(s0)
	if (__s == 0)
   33c24:	04050063          	beq	a0,zero,33c64 <elf::section::get_name[abi:cxx11]() const+0x68>
   33c28:	00050493          	addi	s1,a0,0
   33c2c:	fe4e20ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   33c30:	00000693          	addi	a3,zero,0
   33c34:	00a48633          	add	a2,s1,a0
   33c38:	00048593          	addi	a1,s1,0
   33c3c:	00040513          	addi	a0,s0,0
   33c40:	0000e317          	auipc	t1,0xe
   33c44:	6c833303          	ld	t1,1736(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   33c48:	000300e7          	jalr	ra,0(t1)
   33c4c:	00040513          	addi	a0,s0,0
   33c50:	01813083          	ld	ra,24(sp)
   33c54:	01013403          	ld	s0,16(sp)
   33c58:	00813483          	ld	s1,8(sp)
   33c5c:	02010113          	addi	sp,sp,32
   33c60:	00008067          	jalr	zero,0(ra)
	  std::__throw_logic_error(__N("basic_string: "
   33c64:	00003517          	auipc	a0,0x3
   33c68:	80c50513          	addi	a0,a0,-2036 # 36470 <__libc_csu_fini+0x8>
   33c6c:	855e20ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>

0000000000033c70 <elf::strtab::get[abi:cxx11](unsigned long) const>:
std::string strtab::get(Elf64::Off offset) const {
   33c70:	fe010113          	addi	sp,sp,-32
   33c74:	00113c23          	sd	ra,24(sp)
   33c78:	00813823          	sd	s0,16(sp)
   33c7c:	00913423          	sd	s1,8(sp)
   33c80:	00050413          	addi	s0,a0,0
   33c84:	00058513          	addi	a0,a1,0
   33c88:	00060593          	addi	a1,a2,0
  return get(offset, nullptr);
   33c8c:	00000613          	addi	a2,zero,0
   33c90:	914ff0ef          	jal	ra,32da4 <elf::strtab::get(unsigned long, unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33c94:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   33c98:	00f43023          	sd	a5,0(s0)
	if (__s == 0)
   33c9c:	04050063          	beq	a0,zero,33cdc <elf::strtab::get[abi:cxx11](unsigned long) const+0x6c>
   33ca0:	00050493          	addi	s1,a0,0
   33ca4:	f6ce20ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   33ca8:	00000693          	addi	a3,zero,0
   33cac:	00a48633          	add	a2,s1,a0
   33cb0:	00048593          	addi	a1,s1,0
   33cb4:	00040513          	addi	a0,s0,0
   33cb8:	0000e317          	auipc	t1,0xe
   33cbc:	65033303          	ld	t1,1616(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   33cc0:	000300e7          	jalr	ra,0(t1)
}
   33cc4:	00040513          	addi	a0,s0,0
   33cc8:	01813083          	ld	ra,24(sp)
   33ccc:	01013403          	ld	s0,16(sp)
   33cd0:	00813483          	ld	s1,8(sp)
   33cd4:	02010113          	addi	sp,sp,32
   33cd8:	00008067          	jalr	zero,0(ra)
	  std::__throw_logic_error(__N("basic_string: "
   33cdc:	00002517          	auipc	a0,0x2
   33ce0:	79450513          	addi	a0,a0,1940 # 36470 <__libc_csu_fini+0x8>
   33ce4:	fdce20ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>

0000000000033ce8 <elf::sym::get_name[abi:cxx11]() const>:
std::string sym::get_name() const { return strs.get(get_data().name); }
   33ce8:	ff010113          	addi	sp,sp,-16
   33cec:	00113423          	sd	ra,8(sp)
   33cf0:	00813023          	sd	s0,0(sp)
   33cf4:	00050413          	addi	s0,a0,0
   33cf8:	0105e603          	lwu	a2,16(a1)
   33cfc:	f75ff0ef          	jal	ra,33c70 <elf::strtab::get[abi:cxx11](unsigned long) const>
   33d00:	00040513          	addi	a0,s0,0
   33d04:	00813083          	ld	ra,8(sp)
   33d08:	00013403          	ld	s0,0(sp)
   33d0c:	01010113          	addi	sp,sp,16
   33d10:	00008067          	jalr	zero,0(ra)

0000000000033d14 <elf::enums::to_string[abi:cxx11](elf::enums::shn)>:
std::string enums::to_string(shn v) {
   33d14:	fe010113          	addi	sp,sp,-32
   33d18:	00113c23          	sd	ra,24(sp)
   33d1c:	00813823          	sd	s0,16(sp)
   33d20:	00913423          	sd	s1,8(sp)
   33d24:	01213023          	sd	s2,0(sp)
   33d28:	00050493          	addi	s1,a0,0
  if (v == shn::undef)
   33d2c:	06058a63          	beq	a1,zero,33da0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x8c>
  if (v == shn::abs)
   33d30:	0005871b          	addiw	a4,a1,0
   33d34:	000107b7          	lui	a5,0x10
   33d38:	ff178793          	addi	a5,a5,-15 # fff1 <__abi_tag-0x2a3>
   33d3c:	0af70463          	beq	a4,a5,33de4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xd0>
  if (v == shn::common)
   33d40:	0005871b          	addiw	a4,a1,0
   33d44:	000107b7          	lui	a5,0x10
   33d48:	ff278793          	addi	a5,a5,-14 # fff2 <__abi_tag-0x2a2>
   33d4c:	0cf70263          	beq	a4,a5,33e10 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xfc>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   33d50:	0005841b          	addiw	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   33d54:	00900793          	addi	a5,zero,9
   33d58:	0e87f263          	bgeu	a5,s0,33e3c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x128>
	  if (__value < __b2) return __n + 1;
   33d5c:	06300793          	addi	a5,zero,99
   33d60:	1c87f263          	bgeu	a5,s0,33f24 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x210>
	  if (__value < __b3) return __n + 2;
   33d64:	3e700793          	addi	a5,zero,999
   33d68:	1c87fc63          	bgeu	a5,s0,33f40 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x22c>
	  if (__value < __b4) return __n + 3;
   33d6c:	000026b7          	lui	a3,0x2
   33d70:	70f68693          	addi	a3,a3,1807 # 270f <__abi_tag-0xdb85>
	  __n += 4;
   33d74:	0086b933          	sltu	s2,a3,s0
   33d78:	00490913          	addi	s2,s2,4
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33d7c:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   33d80:	00f4b023          	sd	a5,0(s1)
      { _M_construct(__n, __c); }
   33d84:	02d00613          	addi	a2,zero,45
   33d88:	00090593          	addi	a1,s2,0
   33d8c:	00048513          	addi	a0,s1,0
   33d90:	fe0e20ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   33d94:	0004b583          	ld	a1,0(s1)
      unsigned __pos = __len - 1;
   33d98:	fff9069b          	addiw	a3,s2,-1
      while (__val >= 100)
   33d9c:	0c40006f          	jal	zero,33e60 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x14c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33da0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33da4:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33da8:	00000693          	addi	a3,zero,0
   33dac:	00006617          	auipc	a2,0x6
   33db0:	58160613          	addi	a2,a2,1409 # 3a32d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2815>
   33db4:	00006597          	auipc	a1,0x6
   33db8:	57458593          	addi	a1,a1,1396 # 3a328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2810>
   33dbc:	0000e317          	auipc	t1,0xe
   33dc0:	54c33303          	ld	t1,1356(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   33dc4:	000300e7          	jalr	ra,0(t1)
}
   33dc8:	00048513          	addi	a0,s1,0
   33dcc:	01813083          	ld	ra,24(sp)
   33dd0:	01013403          	ld	s0,16(sp)
   33dd4:	00813483          	ld	s1,8(sp)
   33dd8:	00013903          	ld	s2,0(sp)
   33ddc:	02010113          	addi	sp,sp,32
   33de0:	00008067          	jalr	zero,0(ra)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33de4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33de8:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33dec:	00000693          	addi	a3,zero,0
   33df0:	00006617          	auipc	a2,0x6
   33df4:	54360613          	addi	a2,a2,1347 # 3a333 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x281b>
   33df8:	00006597          	auipc	a1,0x6
   33dfc:	53858593          	addi	a1,a1,1336 # 3a330 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2818>
   33e00:	0000e317          	auipc	t1,0xe
   33e04:	50833303          	ld	t1,1288(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   33e08:	000300e7          	jalr	ra,0(t1)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   33e0c:	fbdff06f          	jal	zero,33dc8 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33e10:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33e14:	00f53023          	sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   33e18:	00000693          	addi	a3,zero,0
   33e1c:	00006617          	auipc	a2,0x6
   33e20:	52260613          	addi	a2,a2,1314 # 3a33e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2826>
   33e24:	00006597          	auipc	a1,0x6
   33e28:	51458593          	addi	a1,a1,1300 # 3a338 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2820>
   33e2c:	0000e317          	auipc	t1,0xe
   33e30:	4dc33303          	ld	t1,1244(t1) # 42308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x26f2c>
   33e34:	000300e7          	jalr	ra,0(t1)
   33e38:	f91ff06f          	jal	zero,33dc8 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33e3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33e40:	00f53023          	sd	a5,0(a0)
      { _M_construct(__n, __c); }
   33e44:	02d00613          	addi	a2,zero,45
   33e48:	00100593          	addi	a1,zero,1
   33e4c:	f24e20ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   33e50:	0004b583          	ld	a1,0(s1)
   33e54:	06300793          	addi	a5,zero,99
   33e58:	0687fe63          	bgeu	a5,s0,33ed4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1c0>
      unsigned __pos = __len - 1;
   33e5c:	00000693          	addi	a3,zero,0
	  auto const __num = (__val % 100) * 2;
   33e60:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   33e64:	0000e517          	auipc	a0,0xe
   33e68:	4fc53503          	ld	a0,1276(a0) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
      while (__val >= 100)
   33e6c:	00002337          	lui	t1,0x2
   33e70:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   33e74:	030477bb          	remuw	a5,s0,a6
   33e78:	0017979b          	slliw	a5,a5,0x1
   33e7c:	0004089b          	addiw	a7,s0,0
	  __val /= 100;
   33e80:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   33e84:	02069613          	slli	a2,a3,0x20
   33e88:	02065613          	srli	a2,a2,0x20
   33e8c:	00c58633          	add	a2,a1,a2
   33e90:	0017871b          	addiw	a4,a5,1
   33e94:	02071713          	slli	a4,a4,0x20
   33e98:	02075713          	srli	a4,a4,0x20
   33e9c:	00e50733          	add	a4,a0,a4
   33ea0:	00074703          	lbu	a4,0(a4)
   33ea4:	00e60023          	sb	a4,0(a2)
	  __first[__pos - 1] = __digits[__num];
   33ea8:	fff6871b          	addiw	a4,a3,-1
   33eac:	02071713          	slli	a4,a4,0x20
   33eb0:	02075713          	srli	a4,a4,0x20
   33eb4:	00e58733          	add	a4,a1,a4
   33eb8:	02079793          	slli	a5,a5,0x20
   33ebc:	0207d793          	srli	a5,a5,0x20
   33ec0:	00f507b3          	add	a5,a0,a5
   33ec4:	0007c783          	lbu	a5,0(a5)
   33ec8:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   33ecc:	ffe6869b          	addiw	a3,a3,-2
      while (__val >= 100)
   33ed0:	fb1362e3          	bltu	t1,a7,33e74 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x160>
      if (__val >= 10)
   33ed4:	00900793          	addi	a5,zero,9
   33ed8:	0487f063          	bgeu	a5,s0,33f18 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x204>
	  auto const __num = __val * 2;
   33edc:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   33ee0:	0000e717          	auipc	a4,0xe
   33ee4:	48073703          	ld	a4,1152(a4) # 42360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xb970>
   33ee8:	0014079b          	addiw	a5,s0,1
   33eec:	02079793          	slli	a5,a5,0x20
   33ef0:	0207d793          	srli	a5,a5,0x20
   33ef4:	00f707b3          	add	a5,a4,a5
   33ef8:	0007c783          	lbu	a5,0(a5)
   33efc:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   33f00:	02041413          	slli	s0,s0,0x20
   33f04:	02045413          	srli	s0,s0,0x20
   33f08:	00870733          	add	a4,a4,s0
   33f0c:	00074783          	lbu	a5,0(a4)
   33f10:	00f58023          	sb	a5,0(a1)
   33f14:	eb5ff06f          	jal	zero,33dc8 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	__first[0] = '0' + __val;
   33f18:	0304041b          	addiw	s0,s0,48
   33f1c:	00858023          	sb	s0,0(a1)
   33f20:	ea9ff06f          	jal	zero,33dc8 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xb4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   33f24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   33f28:	00f53023          	sd	a5,0(a0)
      { _M_construct(__n, __c); }
   33f2c:	02d00613          	addi	a2,zero,45
   33f30:	00200593          	addi	a1,zero,2
   33f34:	e3ce20ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   33f38:	0004b583          	ld	a1,0(s1)
      while (__val >= 100)
   33f3c:	f99ff06f          	jal	zero,33ed4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1c0>
	  if (__value < __b3) return __n + 2;
   33f40:	00300913          	addi	s2,zero,3
   33f44:	e39ff06f          	jal	zero,33d7c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x68>

0000000000033f48 <elf::elf::elf(std::shared_ptr<elf::loader> const&)>:
elf::elf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   33f48:	f9010113          	addi	sp,sp,-112
   33f4c:	06113423          	sd	ra,104(sp)
   33f50:	06813023          	sd	s0,96(sp)
   33f54:	04913c23          	sd	s1,88(sp)
   33f58:	05213823          	sd	s2,80(sp)
   33f5c:	05313423          	sd	s3,72(sp)
   33f60:	05413023          	sd	s4,64(sp)
   33f64:	03513c23          	sd	s5,56(sp)
   33f68:	03613823          	sd	s6,48(sp)
   33f6c:	03713423          	sd	s7,40(sp)
   33f70:	03813023          	sd	s8,32(sp)
   33f74:	00050493          	addi	s1,a0,0
   33f78:	00058a93          	addi	s5,a1,0
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   33f7c:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   33f80:	0d800513          	addi	a0,zero,216
   33f84:	d9ce20ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   33f88:	00050413          	addi	s0,a0,0
   33f8c:	00052423          	sw	zero,8(a0)
   33f90:	00052623          	sw	zero,12(a0)
   33f94:	00052823          	sw	zero,16(a0)
   33f98:	00052a23          	sw	zero,20(a0)
   33f9c:	00052c23          	sw	zero,24(a0)
   33fa0:	00052e23          	sw	zero,28(a0)
   33fa4:	02053023          	sd	zero,32(a0)
   33fa8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   33fac:	00100793          	addi	a5,zero,1
   33fb0:	02f52823          	sw	a5,48(a0)
   33fb4:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   33fb8:	0000e797          	auipc	a5,0xe
   33fbc:	3f07b783          	ld	a5,1008(a5) # 423a8 <vtable for std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x770>
   33fc0:	01078793          	addi	a5,a5,16
   33fc4:	00f53023          	sd	a5,0(a0)
   33fc8:	03850913          	addi	s2,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   33fcc:	000ab783          	ld	a5,0(s5)
   33fd0:	02f53c23          	sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   33fd4:	008ab503          	ld	a0,8(s5)
   33fd8:	04a43023          	sd	a0,64(s0)
	if (_M_pi != nullptr)
   33fdc:	02050063          	beq	a0,zero,33ffc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xb4>
    if (__is_single_threaded())
   33fe0:	0000e797          	auipc	a5,0xe
   33fe4:	4a07b783          	ld	a5,1184(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   33fe8:	0007c783          	lbu	a5,0(a5)
   33fec:	04078e63          	beq	a5,zero,34048 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x100>
  { *__mem += __val; }
   33ff0:	03052783          	lw	a5,48(a0)
   33ff4:	0017879b          	addiw	a5,a5,1
   33ff8:	02f52823          	sw	a5,48(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   33ffc:	08043423          	sd	zero,136(s0)
   34000:	08043823          	sd	zero,144(s0)
   34004:	08043c23          	sd	zero,152(s0)
   34008:	0a043023          	sd	zero,160(s0)
   3400c:	0a043423          	sd	zero,168(s0)
   34010:	0a043823          	sd	zero,176(s0)
      : _M_ptr(0), _M_refcount()
   34014:	0a043c23          	sd	zero,184(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   34018:	0c043023          	sd	zero,192(s0)
      : _M_ptr(0), _M_refcount()
   3401c:	0c043423          	sd	zero,200(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   34020:	0c043823          	sd	zero,208(s0)
	  _M_pi = __pi;
   34024:	0084b423          	sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   34028:	0124b023          	sd	s2,0(s1)
      { return _M_ptr; }
   3402c:	000ab503          	ld	a0,0(s5)
  } *core_hdr = (struct core_hdr *)l->load(0, sizeof *core_hdr);
   34030:	00053783          	ld	a5,0(a0)
   34034:	0107b783          	ld	a5,16(a5)
   34038:	00700613          	addi	a2,zero,7
   3403c:	00000593          	addi	a1,zero,0
   34040:	000780e7          	jalr	ra,0(a5)
   34044:	0140006f          	jal	zero,34058 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x110>
      __atomic_add(__mem, __val);
   34048:	00100593          	addi	a1,zero,1
   3404c:	03050513          	addi	a0,a0,48
   34050:	b00e20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   34054:	fa9ff06f          	jal	zero,33ffc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xb4>
   34058:	00050413          	addi	s0,a0,0
  if (strncmp(core_hdr->ei_magic,
   3405c:	00400613          	addi	a2,zero,4
   34060:	00006597          	auipc	a1,0x6
   34064:	2e058593          	addi	a1,a1,736 # 3a340 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2828>
   34068:	e48e20ef          	jal	ra,166b0 <strncmp@plt>
   3406c:	04051e63          	bne	a0,zero,340c8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x180>
  if (core_hdr->ei_version != 1)
   34070:	00644703          	lbu	a4,6(s0)
   34074:	00100793          	addi	a5,zero,1
   34078:	08f71c63          	bne	a4,a5,34110 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x1c8>
  if (core_hdr->ei_class != elfclass::_32 &&
   3407c:	00444703          	lbu	a4,4(s0)
   34080:	fff7079b          	addiw	a5,a4,-1
   34084:	0ff7f793          	andi	a5,a5,255
   34088:	00100693          	addi	a3,zero,1
   3408c:	0cf6e263          	bltu	a3,a5,34150 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x208>
  if (core_hdr->ei_data != elfdata::lsb && core_hdr->ei_data != elfdata::msb)
   34090:	00544783          	lbu	a5,5(s0)
   34094:	fff7879b          	addiw	a5,a5,-1
   34098:	0ff7f793          	andi	a5,a5,255
   3409c:	00100693          	addi	a3,zero,1
   340a0:	0ef6e863          	bltu	a3,a5,34190 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x248>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   340a4:	00100793          	addi	a5,zero,1
   340a8:	04000613          	addi	a2,zero,64
   340ac:	12f70263          	beq	a4,a5,341d0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x288>
   340b0:	000ab503          	ld	a0,0(s5)
  const void *hdr = l->load(0, hdr_size);
   340b4:	00053783          	ld	a5,0(a0)
   340b8:	0107b783          	ld	a5,16(a5)
   340bc:	00000593          	addi	a1,zero,0
   340c0:	000780e7          	jalr	ra,0(a5)
   340c4:	1140006f          	jal	zero,341d8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x290>
    throw format_error("bad ELF magic number");
   340c8:	01000513          	addi	a0,zero,16
   340cc:	b54e20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   340d0:	00050913          	addi	s2,a0,0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   340d4:	00006597          	auipc	a1,0x6
   340d8:	27458593          	addi	a1,a1,628 # 3a348 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2830>
   340dc:	e94e20ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   340e0:	0000e797          	auipc	a5,0xe
   340e4:	2607b783          	ld	a5,608(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   340e8:	01078793          	addi	a5,a5,16
   340ec:	00f93023          	sd	a5,0(s2)
   340f0:	0000e617          	auipc	a2,0xe
   340f4:	47863603          	ld	a2,1144(a2) # 42568 <elf::format_error::~format_error()@@Base+0xdf2c>
   340f8:	0000e597          	auipc	a1,0xe
   340fc:	2285b583          	ld	a1,552(a1) # 42320 <typeinfo for elf::format_error@@Base+0x7e0>
   34100:	00090513          	addi	a0,s2,0
   34104:	dbce20ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   34108:	00050413          	addi	s0,a0,0
   3410c:	4480006f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("unknown ELF version");
   34110:	01000513          	addi	a0,zero,16
   34114:	b0ce20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   34118:	00050913          	addi	s2,a0,0
   3411c:	00006597          	auipc	a1,0x6
   34120:	24458593          	addi	a1,a1,580 # 3a360 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2848>
   34124:	e4ce20ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   34128:	0000e797          	auipc	a5,0xe
   3412c:	2187b783          	ld	a5,536(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   34130:	01078793          	addi	a5,a5,16
   34134:	00f93023          	sd	a5,0(s2)
   34138:	0000e617          	auipc	a2,0xe
   3413c:	43063603          	ld	a2,1072(a2) # 42568 <elf::format_error::~format_error()@@Base+0xdf2c>
   34140:	0000e597          	auipc	a1,0xe
   34144:	1e05b583          	ld	a1,480(a1) # 42320 <typeinfo for elf::format_error@@Base+0x7e0>
   34148:	00090513          	addi	a0,s2,0
   3414c:	d74e20ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw format_error("bad ELF class");
   34150:	01000513          	addi	a0,zero,16
   34154:	acce20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   34158:	00050913          	addi	s2,a0,0
   3415c:	00006597          	auipc	a1,0x6
   34160:	21c58593          	addi	a1,a1,540 # 3a378 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2860>
   34164:	e0ce20ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   34168:	0000e797          	auipc	a5,0xe
   3416c:	1d87b783          	ld	a5,472(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   34170:	01078793          	addi	a5,a5,16
   34174:	00f93023          	sd	a5,0(s2)
   34178:	0000e617          	auipc	a2,0xe
   3417c:	3f063603          	ld	a2,1008(a2) # 42568 <elf::format_error::~format_error()@@Base+0xdf2c>
   34180:	0000e597          	auipc	a1,0xe
   34184:	1a05b583          	ld	a1,416(a1) # 42320 <typeinfo for elf::format_error@@Base+0x7e0>
   34188:	00090513          	addi	a0,s2,0
   3418c:	d34e20ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw format_error("bad ELF data order");
   34190:	01000513          	addi	a0,zero,16
   34194:	a8ce20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   34198:	00050913          	addi	s2,a0,0
   3419c:	00006597          	auipc	a1,0x6
   341a0:	1ec58593          	addi	a1,a1,492 # 3a388 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2870>
   341a4:	dcce20ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   341a8:	0000e797          	auipc	a5,0xe
   341ac:	1987b783          	ld	a5,408(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   341b0:	01078793          	addi	a5,a5,16
   341b4:	00f93023          	sd	a5,0(s2)
   341b8:	0000e617          	auipc	a2,0xe
   341bc:	3b063603          	ld	a2,944(a2) # 42568 <elf::format_error::~format_error()@@Base+0xdf2c>
   341c0:	0000e597          	auipc	a1,0xe
   341c4:	1605b583          	ld	a1,352(a1) # 42320 <typeinfo for elf::format_error@@Base+0x7e0>
   341c8:	00090513          	addi	a0,s2,0
   341cc:	cf4e20ef          	jal	ra,166c0 <__cxa_throw@plt>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   341d0:	03400613          	addi	a2,zero,52
   341d4:	eddff06f          	jal	zero,340b0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x168>
  const void *hdr = l->load(0, hdr_size);
   341d8:	00050593          	addi	a1,a0,0
  canon_hdr(&m->hdr, hdr, core_hdr->ei_class, core_hdr->ei_data);
   341dc:	0004b503          	ld	a0,0(s1)
   341e0:	00544683          	lbu	a3,5(s0)
   341e4:	00444603          	lbu	a2,4(s0)
   341e8:	01050513          	addi	a0,a0,16
   341ec:	0000e317          	auipc	t1,0xe
   341f0:	14c33303          	ld	t1,332(t1) # 42338 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd22c>
   341f4:	000300e7          	jalr	ra,0(t1)
      { return _M_ptr; }
   341f8:	0004b783          	ld	a5,0(s1)
  if (m->hdr.version != 1)
   341fc:	0247a683          	lw	a3,36(a5)
   34200:	00100713          	addi	a4,zero,1
   34204:	02e69c63          	bne	a3,a4,3423c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2f4>
  if (m->hdr.shnum && m->hdr.shstrndx >= m->hdr.shnum)
   34208:	04c7d703          	lhu	a4,76(a5)
   3420c:	00070663          	beq	a4,zero,34218 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2d0>
   34210:	04e7d683          	lhu	a3,78(a5)
   34214:	06e6f463          	bgeu	a3,a4,3427c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x334>
   34218:	000ab503          	ld	a0,0(s5)
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   3421c:	0467d603          	lhu	a2,70(a5)
   34220:	0487d683          	lhu	a3,72(a5)
   34224:	00053703          	ld	a4,0(a0)
   34228:	01073703          	ld	a4,16(a4)
   3422c:	02d6063b          	mulw	a2,a2,a3
   34230:	0307b583          	ld	a1,48(a5)
   34234:	000700e7          	jalr	ra,0(a4)
   34238:	0600006f          	jal	zero,34298 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x350>
    throw format_error("bad section ELF version");
   3423c:	01000513          	addi	a0,zero,16
   34240:	9e0e20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   34244:	00050913          	addi	s2,a0,0
   34248:	00006597          	auipc	a1,0x6
   3424c:	15858593          	addi	a1,a1,344 # 3a3a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2888>
   34250:	d20e20ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   34254:	0000e797          	auipc	a5,0xe
   34258:	0ec7b783          	ld	a5,236(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   3425c:	01078793          	addi	a5,a5,16
   34260:	00f93023          	sd	a5,0(s2)
   34264:	0000e617          	auipc	a2,0xe
   34268:	30463603          	ld	a2,772(a2) # 42568 <elf::format_error::~format_error()@@Base+0xdf2c>
   3426c:	0000e597          	auipc	a1,0xe
   34270:	0b45b583          	ld	a1,180(a1) # 42320 <typeinfo for elf::format_error@@Base+0x7e0>
   34274:	00090513          	addi	a0,s2,0
   34278:	c48e20ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw format_error("bad section name string table index");
   3427c:	01000513          	addi	a0,zero,16
   34280:	9a0e20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   34284:	00050913          	addi	s2,a0,0
   34288:	00006597          	auipc	a1,0x6
   3428c:	13058593          	addi	a1,a1,304 # 3a3b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x28a0>
   34290:	ce0e20ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   34294:	0340006f          	jal	zero,342c8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x380>
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   34298:	00050993          	addi	s3,a0,0
   3429c:	0004b403          	ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   342a0:	04845783          	lhu	a5,72(s0)
   342a4:	00000913          	addi	s2,zero,0
   342a8:	14078663          	beq	a5,zero,343f4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4ac>
    m->segments.push_back(segment(*this, seg));
   342ac:	00010a13          	addi	s4,sp,0
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   342b0:	0000ec17          	auipc	s8,0xe
   342b4:	258c3c03          	ld	s8,600(s8) # 42508 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)@@Base+0xc97c>
    return ::__libc_single_threaded;
   342b8:	0000eb17          	auipc	s6,0xe
   342bc:	1c8b3b03          	ld	s6,456(s6) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   342c0:	00100b93          	addi	s7,zero,1
   342c4:	0900006f          	jal	zero,34354 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x40c>
   342c8:	0000e797          	auipc	a5,0xe
   342cc:	0787b783          	ld	a5,120(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   342d0:	01078793          	addi	a5,a5,16
   342d4:	00f93023          	sd	a5,0(s2)
    throw format_error("bad section name string table index");
   342d8:	0000e617          	auipc	a2,0xe
   342dc:	29063603          	ld	a2,656(a2) # 42568 <elf::format_error::~format_error()@@Base+0xdf2c>
   342e0:	0000e597          	auipc	a1,0xe
   342e4:	0405b583          	ld	a1,64(a1) # 42320 <typeinfo for elf::format_error@@Base+0x7e0>
   342e8:	00090513          	addi	a0,s2,0
   342ec:	bd4e20ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   342f0:	07043583          	ld	a1,112(s0)
   342f4:	07843783          	ld	a5,120(s0)
   342f8:	08f58063          	beq	a1,a5,34378 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x430>
      : _M_ptr(__r._M_ptr), _M_refcount()
   342fc:	00013783          	ld	a5,0(sp)
   34300:	00f5b023          	sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   34304:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   34308:	00813783          	ld	a5,8(sp)
	__r._M_pi = _M_pi;
   3430c:	00013423          	sd	zero,8(sp)
	_M_pi = __tmp;
   34310:	00f5b423          	sd	a5,8(a1)
	__r._M_ptr = nullptr;
   34314:	00013023          	sd	zero,0(sp)
	    ++this->_M_impl._M_finish;
   34318:	07043783          	ld	a5,112(s0)
   3431c:	01078793          	addi	a5,a5,16
   34320:	06f43823          	sd	a5,112(s0)
	if (_M_pi != nullptr)
   34324:	00813403          	ld	s0,8(sp)
   34328:	00040e63          	beq	s0,zero,34344 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
    if (__is_single_threaded())
   3432c:	000b4783          	lbu	a5,0(s6)
   34330:	04078c63          	beq	a5,zero,34388 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x440>
    _Atomic_word __result = *__mem;
   34334:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34338:	fff5079b          	addiw	a5,a0,-1
   3433c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34340:	05750c63          	beq	a0,s7,34398 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x450>
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   34344:	0019091b          	addiw	s2,s2,1
      { return _M_ptr; }
   34348:	0004b403          	ld	s0,0(s1)
   3434c:	04845783          	lhu	a5,72(s0)
   34350:	0af97263          	bgeu	s2,a5,343f4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4ac>
    const void *seg = ((const char *)seg_data) + i * m->hdr.phentsize;
   34354:	04645603          	lhu	a2,70(s0)
   34358:	0326063b          	mulw	a2,a2,s2
   3435c:	02061613          	slli	a2,a2,0x20
   34360:	02065613          	srli	a2,a2,0x20
    m->segments.push_back(segment(*this, seg));
   34364:	00c98633          	add	a2,s3,a2
   34368:	00048593          	addi	a1,s1,0
   3436c:	000a0513          	addi	a0,s4,0
   34370:	d30ff0ef          	jal	ra,338a0 <elf::segment::segment(elf::elf const&, void const*)>
   34374:	f7dff06f          	jal	zero,342f0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3a8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   34378:	000a0613          	addi	a2,s4,0
   3437c:	06840513          	addi	a0,s0,104
   34380:	000c00e7          	jalr	ra,0(s8)
   34384:	fa1ff06f          	jal	zero,34324 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3dc>
      return __exchange_and_add(__mem, __val);
   34388:	fff00593          	addi	a1,zero,-1
   3438c:	03040513          	addi	a0,s0,48
   34390:	ff1e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34394:	fadff06f          	jal	zero,34340 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3f8>
	_M_dispose();
   34398:	00043783          	ld	a5,0(s0)
   3439c:	0107b783          	ld	a5,16(a5)
   343a0:	00040513          	addi	a0,s0,0
   343a4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   343a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   343ac:	0000e797          	auipc	a5,0xe
   343b0:	0d47b783          	ld	a5,212(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   343b4:	0007c783          	lbu	a5,0(a5)
   343b8:	02078663          	beq	a5,zero,343e4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x49c>
    _Atomic_word __result = *__mem;
   343bc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   343c0:	fff5079b          	addiw	a5,a0,-1
   343c4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   343c8:	00100793          	addi	a5,zero,1
   343cc:	f6f51ce3          	bne	a0,a5,34344 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
	    _M_destroy();
   343d0:	00043783          	ld	a5,0(s0)
   343d4:	0187b783          	ld	a5,24(a5)
   343d8:	00040513          	addi	a0,s0,0
   343dc:	000780e7          	jalr	ra,0(a5)
   343e0:	f65ff06f          	jal	zero,34344 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3fc>
      return __exchange_and_add(__mem, __val);
   343e4:	fff00593          	addi	a1,zero,-1
   343e8:	03440513          	addi	a0,s0,52
   343ec:	f95e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   343f0:	fd9ff06f          	jal	zero,343c8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x480>
      { return _M_ptr; }
   343f4:	000ab503          	ld	a0,0(s5)
  const void *sec_data = l->load(m->hdr.shoff, m->hdr.shentsize * m->hdr.shnum);
   343f8:	04a45603          	lhu	a2,74(s0)
   343fc:	04c45703          	lhu	a4,76(s0)
   34400:	00053783          	ld	a5,0(a0)
   34404:	0107b783          	ld	a5,16(a5)
   34408:	02e6063b          	mulw	a2,a2,a4
   3440c:	03843583          	ld	a1,56(s0)
   34410:	000780e7          	jalr	ra,0(a5)
   34414:	00050993          	addi	s3,a0,0
   34418:	0004b403          	ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   3441c:	04c45783          	lhu	a5,76(s0)
   34420:	1c078c63          	beq	a5,zero,345f8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x6b0>
   34424:	00000913          	addi	s2,zero,0
    m->sections.push_back(section(*this, sec));
   34428:	01010a13          	addi	s4,sp,16
   3442c:	0000eb97          	auipc	s7,0xe
   34430:	e9cbbb83          	ld	s7,-356(s7) # 422c8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)@@Base+0xc5b0>
    return ::__libc_single_threaded;
   34434:	0000ea97          	auipc	s5,0xe
   34438:	04caba83          	ld	s5,76(s5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   3443c:	00100b13          	addi	s6,zero,1
   34440:	0680006f          	jal	zero,344a8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x560>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   34444:	05843583          	ld	a1,88(s0)
   34448:	06043783          	ld	a5,96(s0)
   3444c:	08f58063          	beq	a1,a5,344cc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x584>
      : _M_ptr(__r._M_ptr), _M_refcount()
   34450:	01013783          	ld	a5,16(sp)
   34454:	00f5b023          	sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   34458:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   3445c:	01813783          	ld	a5,24(sp)
	__r._M_pi = _M_pi;
   34460:	00013c23          	sd	zero,24(sp)
	_M_pi = __tmp;
   34464:	00f5b423          	sd	a5,8(a1)
	__r._M_ptr = nullptr;
   34468:	00013823          	sd	zero,16(sp)
	    ++this->_M_impl._M_finish;
   3446c:	05843783          	ld	a5,88(s0)
   34470:	01078793          	addi	a5,a5,16
   34474:	04f43c23          	sd	a5,88(s0)
	if (_M_pi != nullptr)
   34478:	01813403          	ld	s0,24(sp)
   3447c:	00040e63          	beq	s0,zero,34498 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
    if (__is_single_threaded())
   34480:	000ac783          	lbu	a5,0(s5)
   34484:	04078c63          	beq	a5,zero,344dc <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x594>
    _Atomic_word __result = *__mem;
   34488:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   3448c:	fff5079b          	addiw	a5,a0,-1
   34490:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34494:	05650c63          	beq	a0,s6,344ec <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5a4>
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   34498:	0019091b          	addiw	s2,s2,1
      { return _M_ptr; }
   3449c:	0004b403          	ld	s0,0(s1)
   344a0:	04c45783          	lhu	a5,76(s0)
   344a4:	14f97a63          	bgeu	s2,a5,345f8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x6b0>
    const void *sec = ((const char *)sec_data) + i * m->hdr.shentsize;
   344a8:	04a45603          	lhu	a2,74(s0)
   344ac:	0326063b          	mulw	a2,a2,s2
   344b0:	02061613          	slli	a2,a2,0x20
   344b4:	02065613          	srli	a2,a2,0x20
    m->sections.push_back(section(*this, sec));
   344b8:	00c98633          	add	a2,s3,a2
   344bc:	00048593          	addi	a1,s1,0
   344c0:	000a0513          	addi	a0,s4,0
   344c4:	d18ff0ef          	jal	ra,339dc <elf::section::section(elf::elf const&, void const*)>
   344c8:	f7dff06f          	jal	zero,34444 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4fc>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   344cc:	000a0613          	addi	a2,s4,0
   344d0:	05040513          	addi	a0,s0,80
   344d4:	000b80e7          	jalr	ra,0(s7)
   344d8:	fa1ff06f          	jal	zero,34478 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x530>
      return __exchange_and_add(__mem, __val);
   344dc:	fff00593          	addi	a1,zero,-1
   344e0:	03040513          	addi	a0,s0,48
   344e4:	e9de10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   344e8:	fadff06f          	jal	zero,34494 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x54c>
	_M_dispose();
   344ec:	00043783          	ld	a5,0(s0)
   344f0:	0107b783          	ld	a5,16(a5)
   344f4:	00040513          	addi	a0,s0,0
   344f8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   344fc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34500:	0000e797          	auipc	a5,0xe
   34504:	f807b783          	ld	a5,-128(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34508:	0007c783          	lbu	a5,0(a5)
   3450c:	02078663          	beq	a5,zero,34538 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5f0>
    _Atomic_word __result = *__mem;
   34510:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34514:	fff5079b          	addiw	a5,a0,-1
   34518:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   3451c:	00100793          	addi	a5,zero,1
   34520:	f6f51ce3          	bne	a0,a5,34498 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
	    _M_destroy();
   34524:	00043783          	ld	a5,0(s0)
   34528:	0187b783          	ld	a5,24(a5)
   3452c:	00040513          	addi	a0,s0,0
   34530:	000780e7          	jalr	ra,0(a5)
   34534:	f65ff06f          	jal	zero,34498 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x550>
      return __exchange_and_add(__mem, __val);
   34538:	fff00593          	addi	a1,zero,-1
   3453c:	03440513          	addi	a0,s0,52
   34540:	e41e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34544:	fd9ff06f          	jal	zero,3451c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x5d4>
    throw format_error("bad ELF magic number");
   34548:	00050413          	addi	s0,a0,0
   3454c:	00090513          	addi	a0,s2,0
   34550:	f81e10ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   34554:	0084b503          	ld	a0,8(s1)
   34558:	00050863          	beq	a0,zero,34568 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x620>
	  _M_pi->_M_release();
   3455c:	0000e317          	auipc	t1,0xe
   34560:	e6c33303          	ld	t1,-404(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   34564:	000300e7          	jalr	ra,0(t1)
   34568:	00040513          	addi	a0,s0,0
   3456c:	984e20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    throw format_error("unknown ELF version");
   34570:	00050413          	addi	s0,a0,0
   34574:	00090513          	addi	a0,s2,0
   34578:	f59e10ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   3457c:	fd9ff06f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad ELF class");
   34580:	00050413          	addi	s0,a0,0
   34584:	00090513          	addi	a0,s2,0
   34588:	f49e10ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   3458c:	fc9ff06f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad ELF data order");
   34590:	00050413          	addi	s0,a0,0
   34594:	00090513          	addi	a0,s2,0
   34598:	f39e10ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   3459c:	fb9ff06f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad section ELF version");
   345a0:	00050413          	addi	s0,a0,0
   345a4:	00090513          	addi	a0,s2,0
   345a8:	f29e10ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   345ac:	fa9ff06f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
    throw format_error("bad section name string table index");
   345b0:	00050413          	addi	s0,a0,0
   345b4:	00090513          	addi	a0,s2,0
   345b8:	f19e10ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   345bc:	f99ff06f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	if (_M_pi != nullptr)
   345c0:	00050413          	addi	s0,a0,0
   345c4:	00813503          	ld	a0,8(sp)
   345c8:	f80506e3          	beq	a0,zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	  _M_pi->_M_release();
   345cc:	0000e317          	auipc	t1,0xe
   345d0:	dfc33303          	ld	t1,-516(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   345d4:	000300e7          	jalr	ra,0(t1)
   345d8:	f7dff06f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	if (_M_pi != nullptr)
   345dc:	00050413          	addi	s0,a0,0
   345e0:	01813503          	ld	a0,24(sp)
   345e4:	f60508e3          	beq	a0,zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
	  _M_pi->_M_release();
   345e8:	0000e317          	auipc	t1,0xe
   345ec:	de033303          	ld	t1,-544(t1) # 423c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x2b554>
   345f0:	000300e7          	jalr	ra,0(t1)
   345f4:	f61ff06f          	jal	zero,34554 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x60c>
}
   345f8:	06813083          	ld	ra,104(sp)
   345fc:	06013403          	ld	s0,96(sp)
   34600:	05813483          	ld	s1,88(sp)
   34604:	05013903          	ld	s2,80(sp)
   34608:	04813983          	ld	s3,72(sp)
   3460c:	04013a03          	ld	s4,64(sp)
   34610:	03813a83          	ld	s5,56(sp)
   34614:	03013b03          	ld	s6,48(sp)
   34618:	02813b83          	ld	s7,40(sp)
   3461c:	02013c03          	ld	s8,32(sp)
   34620:	07010113          	addi	sp,sp,112
   34624:	00008067          	jalr	zero,0(ra)

0000000000034628 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   34628:	00008067          	jalr	zero,0(ra)

000000000003462c <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   3462c:	00008067          	jalr	zero,0(ra)

0000000000034630 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34630:	00008067          	jalr	zero,0(ra)

0000000000034634 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34634:	00008067          	jalr	zero,0(ra)

0000000000034638 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34638:	00008067          	jalr	zero,0(ra)

000000000003463c <elf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   3463c:	ff010113          	addi	sp,sp,-16
   34640:	00113423          	sd	ra,8(sp)
   34644:	0000e797          	auipc	a5,0xe
   34648:	cfc7b783          	ld	a5,-772(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   3464c:	01078793          	addi	a5,a5,16
   34650:	00f53023          	sd	a5,0(a0)
   34654:	eede10ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   34658:	00813083          	ld	ra,8(sp)
   3465c:	01010113          	addi	sp,sp,16
   34660:	00008067          	jalr	zero,0(ra)

0000000000034664 <elf::format_error::~format_error()>:
   34664:	ff010113          	addi	sp,sp,-16
   34668:	00113423          	sd	ra,8(sp)
   3466c:	00813023          	sd	s0,0(sp)
   34670:	00050413          	addi	s0,a0,0
   34674:	0000e797          	auipc	a5,0xe
   34678:	ccc7b783          	ld	a5,-820(a5) # 42340 <vtable for elf::format_error@@Base+0x758>
   3467c:	01078793          	addi	a5,a5,16
   34680:	00f53023          	sd	a5,0(a0)
   34684:	ebde10ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   34688:	00040513          	addi	a0,s0,0
   3468c:	e85e10ef          	jal	ra,16510 <operator delete(void*)@plt>
   34690:	00813083          	ld	ra,8(sp)
   34694:	00013403          	ld	s0,0(sp)
   34698:	01010113          	addi	sp,sp,16
   3469c:	00008067          	jalr	zero,0(ra)

00000000000346a0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   346a0:	ff010113          	addi	sp,sp,-16
   346a4:	00113423          	sd	ra,8(sp)
   346a8:	e69e10ef          	jal	ra,16510 <operator delete(void*)@plt>
   346ac:	00813083          	ld	ra,8(sp)
   346b0:	01010113          	addi	sp,sp,16
   346b4:	00008067          	jalr	zero,0(ra)

00000000000346b8 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   346b8:	ff010113          	addi	sp,sp,-16
   346bc:	00113423          	sd	ra,8(sp)
   346c0:	e51e10ef          	jal	ra,16510 <operator delete(void*)@plt>
   346c4:	00813083          	ld	ra,8(sp)
   346c8:	01010113          	addi	sp,sp,16
   346cc:	00008067          	jalr	zero,0(ra)

00000000000346d0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   346d0:	ff010113          	addi	sp,sp,-16
   346d4:	00113423          	sd	ra,8(sp)
   346d8:	e39e10ef          	jal	ra,16510 <operator delete(void*)@plt>
   346dc:	00813083          	ld	ra,8(sp)
   346e0:	01010113          	addi	sp,sp,16
   346e4:	00008067          	jalr	zero,0(ra)

00000000000346e8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   346e8:	ff010113          	addi	sp,sp,-16
   346ec:	00113423          	sd	ra,8(sp)
   346f0:	e21e10ef          	jal	ra,16510 <operator delete(void*)@plt>
   346f4:	00813083          	ld	ra,8(sp)
   346f8:	01010113          	addi	sp,sp,16
   346fc:	00008067          	jalr	zero,0(ra)

0000000000034700 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   34700:	ff010113          	addi	sp,sp,-16
   34704:	00113423          	sd	ra,8(sp)
   34708:	e09e10ef          	jal	ra,16510 <operator delete(void*)@plt>
   3470c:	00813083          	ld	ra,8(sp)
   34710:	01010113          	addi	sp,sp,16
   34714:	00008067          	jalr	zero,0(ra)

0000000000034718 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   34718:	ff010113          	addi	sp,sp,-16
   3471c:	00113423          	sd	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   34720:	df1e10ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   34724:	00813083          	ld	ra,8(sp)
   34728:	01010113          	addi	sp,sp,16
   3472c:	00008067          	jalr	zero,0(ra)

0000000000034730 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   34730:	ff010113          	addi	sp,sp,-16
   34734:	00113423          	sd	ra,8(sp)
   34738:	dd9e10ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   3473c:	00813083          	ld	ra,8(sp)
   34740:	01010113          	addi	sp,sp,16
   34744:	00008067          	jalr	zero,0(ra)

0000000000034748 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   34748:	ff010113          	addi	sp,sp,-16
   3474c:	00113423          	sd	ra,8(sp)
   34750:	dc1e10ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   34754:	00813083          	ld	ra,8(sp)
   34758:	01010113          	addi	sp,sp,16
   3475c:	00008067          	jalr	zero,0(ra)

0000000000034760 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   34760:	ff010113          	addi	sp,sp,-16
   34764:	00113423          	sd	ra,8(sp)
   34768:	da9e10ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   3476c:	00813083          	ld	ra,8(sp)
   34770:	01010113          	addi	sp,sp,16
   34774:	00008067          	jalr	zero,0(ra)

0000000000034778 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   34778:	ff010113          	addi	sp,sp,-16
   3477c:	00113423          	sd	ra,8(sp)
   34780:	d91e10ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   34784:	00813083          	ld	ra,8(sp)
   34788:	01010113          	addi	sp,sp,16
   3478c:	00008067          	jalr	zero,0(ra)

0000000000034790 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34790:	ff010113          	addi	sp,sp,-16
   34794:	00113423          	sd	ra,8(sp)
   34798:	00813023          	sd	s0,0(sp)
   3479c:	03850413          	addi	s0,a0,56
	    ||
   347a0:	0000e797          	auipc	a5,0xe
   347a4:	d987b783          	ld	a5,-616(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   347a8:	02f58c63          	beq	a1,a5,347e0 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   347ac:	0085b503          	ld	a0,8(a1)
   347b0:	0000e797          	auipc	a5,0xe
   347b4:	c607b783          	ld	a5,-928(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   347b8:	02f50463          	beq	a0,a5,347e0 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   347bc:	00054703          	lbu	a4,0(a0)
   347c0:	02a00793          	addi	a5,zero,42
   347c4:	02f70863          	beq	a4,a5,347f4 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   347c8:	0000e597          	auipc	a1,0xe
   347cc:	c485b583          	ld	a1,-952(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   347d0:	b91e10ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   347d4:	00153513          	sltiu	a0,a0,1
   347d8:	40a00533          	sub	a0,zero,a0
   347dc:	00a47433          	and	s0,s0,a0
      }
   347e0:	00040513          	addi	a0,s0,0
   347e4:	00813083          	ld	ra,8(sp)
   347e8:	00013403          	ld	s0,0(sp)
   347ec:	01010113          	addi	sp,sp,16
   347f0:	00008067          	jalr	zero,0(ra)
	return nullptr;
   347f4:	00000413          	addi	s0,zero,0
   347f8:	fe9ff06f          	jal	zero,347e0 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

00000000000347fc <elf::section_type_mismatch::~section_type_mismatch()>:
class section_type_mismatch : public std::logic_error {
   347fc:	ff010113          	addi	sp,sp,-16
   34800:	00113423          	sd	ra,8(sp)
   34804:	0000e797          	auipc	a5,0xe
   34808:	bb47b783          	ld	a5,-1100(a5) # 423b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   3480c:	01078793          	addi	a5,a5,16
   34810:	00f53023          	sd	a5,0(a0)
   34814:	eede10ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   34818:	00813083          	ld	ra,8(sp)
   3481c:	01010113          	addi	sp,sp,16
   34820:	00008067          	jalr	zero,0(ra)

0000000000034824 <elf::section_type_mismatch::~section_type_mismatch()>:
   34824:	ff010113          	addi	sp,sp,-16
   34828:	00113423          	sd	ra,8(sp)
   3482c:	00813023          	sd	s0,0(sp)
   34830:	00050413          	addi	s0,a0,0
   34834:	0000e797          	auipc	a5,0xe
   34838:	b847b783          	ld	a5,-1148(a5) # 423b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   3483c:	01078793          	addi	a5,a5,16
   34840:	00f53023          	sd	a5,0(a0)
   34844:	ebde10ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   34848:	00040513          	addi	a0,s0,0
   3484c:	cc5e10ef          	jal	ra,16510 <operator delete(void*)@plt>
   34850:	00813083          	ld	ra,8(sp)
   34854:	00013403          	ld	s0,0(sp)
   34858:	01010113          	addi	sp,sp,16
   3485c:	00008067          	jalr	zero,0(ra)

0000000000034860 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34860:	ff010113          	addi	sp,sp,-16
   34864:	00113423          	sd	ra,8(sp)
   34868:	00813023          	sd	s0,0(sp)
   3486c:	03850413          	addi	s0,a0,56
	    ||
   34870:	0000e797          	auipc	a5,0xe
   34874:	cc87b783          	ld	a5,-824(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   34878:	02f58c63          	beq	a1,a5,348b0 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   3487c:	0085b503          	ld	a0,8(a1)
   34880:	0000e797          	auipc	a5,0xe
   34884:	b907b783          	ld	a5,-1136(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   34888:	02f50463          	beq	a0,a5,348b0 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   3488c:	00054703          	lbu	a4,0(a0)
   34890:	02a00793          	addi	a5,zero,42
   34894:	02f70863          	beq	a4,a5,348c4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34898:	0000e597          	auipc	a1,0xe
   3489c:	b785b583          	ld	a1,-1160(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   348a0:	ac1e10ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   348a4:	00153513          	sltiu	a0,a0,1
   348a8:	40a00533          	sub	a0,zero,a0
   348ac:	00a47433          	and	s0,s0,a0
      }
   348b0:	00040513          	addi	a0,s0,0
   348b4:	00813083          	ld	ra,8(sp)
   348b8:	00013403          	ld	s0,0(sp)
   348bc:	01010113          	addi	sp,sp,16
   348c0:	00008067          	jalr	zero,0(ra)
	return nullptr;
   348c4:	00000413          	addi	s0,zero,0
   348c8:	fe9ff06f          	jal	zero,348b0 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

00000000000348cc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   348cc:	ff010113          	addi	sp,sp,-16
   348d0:	00113423          	sd	ra,8(sp)
   348d4:	00813023          	sd	s0,0(sp)
   348d8:	03850413          	addi	s0,a0,56
	    ||
   348dc:	0000e797          	auipc	a5,0xe
   348e0:	c5c7b783          	ld	a5,-932(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   348e4:	02f58c63          	beq	a1,a5,3491c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   348e8:	0085b503          	ld	a0,8(a1)
   348ec:	0000e797          	auipc	a5,0xe
   348f0:	b247b783          	ld	a5,-1244(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   348f4:	02f50463          	beq	a0,a5,3491c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   348f8:	00054703          	lbu	a4,0(a0)
   348fc:	02a00793          	addi	a5,zero,42
   34900:	02f70863          	beq	a4,a5,34930 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34904:	0000e597          	auipc	a1,0xe
   34908:	b0c5b583          	ld	a1,-1268(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   3490c:	a55e10ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   34910:	00153513          	sltiu	a0,a0,1
   34914:	40a00533          	sub	a0,zero,a0
   34918:	00a47433          	and	s0,s0,a0
      }
   3491c:	00040513          	addi	a0,s0,0
   34920:	00813083          	ld	ra,8(sp)
   34924:	00013403          	ld	s0,0(sp)
   34928:	01010113          	addi	sp,sp,16
   3492c:	00008067          	jalr	zero,0(ra)
	return nullptr;
   34930:	00000413          	addi	s0,zero,0
   34934:	fe9ff06f          	jal	zero,3491c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000034938 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   34938:	ff010113          	addi	sp,sp,-16
   3493c:	00113423          	sd	ra,8(sp)
   34940:	00813023          	sd	s0,0(sp)
   34944:	03850413          	addi	s0,a0,56
	    ||
   34948:	0000e797          	auipc	a5,0xe
   3494c:	bf07b783          	ld	a5,-1040(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   34950:	02f58c63          	beq	a1,a5,34988 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   34954:	0085b503          	ld	a0,8(a1)
   34958:	0000e797          	auipc	a5,0xe
   3495c:	ab87b783          	ld	a5,-1352(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   34960:	02f50463          	beq	a0,a5,34988 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   34964:	00054703          	lbu	a4,0(a0)
   34968:	02a00793          	addi	a5,zero,42
   3496c:	02f70863          	beq	a4,a5,3499c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   34970:	0000e597          	auipc	a1,0xe
   34974:	aa05b583          	ld	a1,-1376(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   34978:	9e9e10ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   3497c:	00153513          	sltiu	a0,a0,1
   34980:	40a00533          	sub	a0,zero,a0
   34984:	00a47433          	and	s0,s0,a0
      }
   34988:	00040513          	addi	a0,s0,0
   3498c:	00813083          	ld	ra,8(sp)
   34990:	00013403          	ld	s0,0(sp)
   34994:	01010113          	addi	sp,sp,16
   34998:	00008067          	jalr	zero,0(ra)
	return nullptr;
   3499c:	00000413          	addi	s0,zero,0
   349a0:	fe9ff06f          	jal	zero,34988 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

00000000000349a4 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   349a4:	ff010113          	addi	sp,sp,-16
   349a8:	00113423          	sd	ra,8(sp)
   349ac:	00813023          	sd	s0,0(sp)
   349b0:	03850413          	addi	s0,a0,56
	    ||
   349b4:	0000e797          	auipc	a5,0xe
   349b8:	b847b783          	ld	a5,-1148(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   349bc:	02f58c63          	beq	a1,a5,349f4 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   349c0:	0085b503          	ld	a0,8(a1)
   349c4:	0000e797          	auipc	a5,0xe
   349c8:	a4c7b783          	ld	a5,-1460(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   349cc:	02f50463          	beq	a0,a5,349f4 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   349d0:	00054703          	lbu	a4,0(a0)
   349d4:	02a00793          	addi	a5,zero,42
   349d8:	02f70863          	beq	a4,a5,34a08 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   349dc:	0000e597          	auipc	a1,0xe
   349e0:	a345b583          	ld	a1,-1484(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   349e4:	97de10ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   349e8:	00153513          	sltiu	a0,a0,1
   349ec:	40a00533          	sub	a0,zero,a0
   349f0:	00a47433          	and	s0,s0,a0
      }
   349f4:	00040513          	addi	a0,s0,0
   349f8:	00813083          	ld	ra,8(sp)
   349fc:	00013403          	ld	s0,0(sp)
   34a00:	01010113          	addi	sp,sp,16
   34a04:	00008067          	jalr	zero,0(ra)
	return nullptr;
   34a08:	00000413          	addi	s0,zero,0
   34a0c:	fe9ff06f          	jal	zero,349f4 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000034a10 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34a10:	ff010113          	addi	sp,sp,-16
   34a14:	00113423          	sd	ra,8(sp)
   34a18:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   34a1c:	04053403          	ld	s0,64(a0)
   34a20:	02040463          	beq	s0,zero,34a48 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   34a24:	0000e797          	auipc	a5,0xe
   34a28:	a5c7b783          	ld	a5,-1444(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34a2c:	0007c783          	lbu	a5,0(a5)
   34a30:	02078463          	beq	a5,zero,34a58 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   34a34:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34a38:	fff5079b          	addiw	a5,a0,-1
   34a3c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34a40:	00100793          	addi	a5,zero,1
   34a44:	02f50263          	beq	a0,a5,34a68 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   34a48:	00813083          	ld	ra,8(sp)
   34a4c:	00013403          	ld	s0,0(sp)
   34a50:	01010113          	addi	sp,sp,16
   34a54:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34a58:	fff00593          	addi	a1,zero,-1
   34a5c:	03040513          	addi	a0,s0,48
   34a60:	921e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34a64:	fddff06f          	jal	zero,34a40 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   34a68:	00043783          	ld	a5,0(s0)
   34a6c:	0107b783          	ld	a5,16(a5)
   34a70:	00040513          	addi	a0,s0,0
   34a74:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34a78:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34a7c:	0000e797          	auipc	a5,0xe
   34a80:	a047b783          	ld	a5,-1532(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34a84:	0007c783          	lbu	a5,0(a5)
   34a88:	02078663          	beq	a5,zero,34ab4 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   34a8c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34a90:	fff5079b          	addiw	a5,a0,-1
   34a94:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34a98:	00100793          	addi	a5,zero,1
   34a9c:	faf516e3          	bne	a0,a5,34a48 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   34aa0:	00043783          	ld	a5,0(s0)
   34aa4:	0187b783          	ld	a5,24(a5)
   34aa8:	00040513          	addi	a0,s0,0
   34aac:	000780e7          	jalr	ra,0(a5)
      }
   34ab0:	f99ff06f          	jal	zero,34a48 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   34ab4:	fff00593          	addi	a1,zero,-1
   34ab8:	03440513          	addi	a0,s0,52
   34abc:	8c5e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34ac0:	fd9ff06f          	jal	zero,34a98 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000034ac4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34ac4:	ff010113          	addi	sp,sp,-16
   34ac8:	00113423          	sd	ra,8(sp)
   34acc:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   34ad0:	04053403          	ld	s0,64(a0)
   34ad4:	02040463          	beq	s0,zero,34afc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   34ad8:	0000e797          	auipc	a5,0xe
   34adc:	9a87b783          	ld	a5,-1624(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34ae0:	0007c783          	lbu	a5,0(a5)
   34ae4:	02078463          	beq	a5,zero,34b0c <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   34ae8:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34aec:	fff5079b          	addiw	a5,a0,-1
   34af0:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34af4:	00100793          	addi	a5,zero,1
   34af8:	02f50263          	beq	a0,a5,34b1c <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   34afc:	00813083          	ld	ra,8(sp)
   34b00:	00013403          	ld	s0,0(sp)
   34b04:	01010113          	addi	sp,sp,16
   34b08:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34b0c:	fff00593          	addi	a1,zero,-1
   34b10:	03040513          	addi	a0,s0,48
   34b14:	86de10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34b18:	fddff06f          	jal	zero,34af4 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   34b1c:	00043783          	ld	a5,0(s0)
   34b20:	0107b783          	ld	a5,16(a5)
   34b24:	00040513          	addi	a0,s0,0
   34b28:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34b2c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34b30:	0000e797          	auipc	a5,0xe
   34b34:	9507b783          	ld	a5,-1712(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34b38:	0007c783          	lbu	a5,0(a5)
   34b3c:	02078663          	beq	a5,zero,34b68 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   34b40:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34b44:	fff5079b          	addiw	a5,a0,-1
   34b48:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34b4c:	00100793          	addi	a5,zero,1
   34b50:	faf516e3          	bne	a0,a5,34afc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   34b54:	00043783          	ld	a5,0(s0)
   34b58:	0187b783          	ld	a5,24(a5)
   34b5c:	00040513          	addi	a0,s0,0
   34b60:	000780e7          	jalr	ra,0(a5)
      }
   34b64:	f99ff06f          	jal	zero,34afc <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   34b68:	fff00593          	addi	a1,zero,-1
   34b6c:	03440513          	addi	a0,s0,52
   34b70:	811e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34b74:	fd9ff06f          	jal	zero,34b4c <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000034b78 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34b78:	ff010113          	addi	sp,sp,-16
   34b7c:	00113423          	sd	ra,8(sp)
   34b80:	00813023          	sd	s0,0(sp)
	if (_M_pi != nullptr)
   34b84:	04053403          	ld	s0,64(a0)
   34b88:	02040463          	beq	s0,zero,34bb0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
    if (__is_single_threaded())
   34b8c:	0000e797          	auipc	a5,0xe
   34b90:	8f47b783          	ld	a5,-1804(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34b94:	0007c783          	lbu	a5,0(a5)
   34b98:	02078463          	beq	a5,zero,34bc0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
    _Atomic_word __result = *__mem;
   34b9c:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34ba0:	fff5079b          	addiw	a5,a0,-1
   34ba4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34ba8:	00100793          	addi	a5,zero,1
   34bac:	02f50263          	beq	a0,a5,34bd0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      }
   34bb0:	00813083          	ld	ra,8(sp)
   34bb4:	00013403          	ld	s0,0(sp)
   34bb8:	01010113          	addi	sp,sp,16
   34bbc:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34bc0:	fff00593          	addi	a1,zero,-1
   34bc4:	03040513          	addi	a0,s0,48
   34bc8:	fb8e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34bcc:	fddff06f          	jal	zero,34ba8 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
	_M_dispose();
   34bd0:	00043783          	ld	a5,0(s0)
   34bd4:	0107b783          	ld	a5,16(a5)
   34bd8:	00040513          	addi	a0,s0,0
   34bdc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34be0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34be4:	0000e797          	auipc	a5,0xe
   34be8:	89c7b783          	ld	a5,-1892(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34bec:	0007c783          	lbu	a5,0(a5)
   34bf0:	02078663          	beq	a5,zero,34c1c <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa4>
    _Atomic_word __result = *__mem;
   34bf4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34bf8:	fff5079b          	addiw	a5,a0,-1
   34bfc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34c00:	00100793          	addi	a5,zero,1
   34c04:	faf516e3          	bne	a0,a5,34bb0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	    _M_destroy();
   34c08:	00043783          	ld	a5,0(s0)
   34c0c:	0187b783          	ld	a5,24(a5)
   34c10:	00040513          	addi	a0,s0,0
   34c14:	000780e7          	jalr	ra,0(a5)
      }
   34c18:	f99ff06f          	jal	zero,34bb0 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
      return __exchange_and_add(__mem, __val);
   34c1c:	fff00593          	addi	a1,zero,-1
   34c20:	03440513          	addi	a0,s0,52
   34c24:	f5ce10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34c28:	fd9ff06f          	jal	zero,34c00 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>

0000000000034c2c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34c2c:	fe010113          	addi	sp,sp,-32
   34c30:	00113c23          	sd	ra,24(sp)
   34c34:	00813823          	sd	s0,16(sp)
   34c38:	00913423          	sd	s1,8(sp)
   34c3c:	00050413          	addi	s0,a0,0
	if (_M_pi != nullptr)
   34c40:	06053483          	ld	s1,96(a0)
   34c44:	02048463          	beq	s1,zero,34c6c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
    if (__is_single_threaded())
   34c48:	0000e797          	auipc	a5,0xe
   34c4c:	8387b783          	ld	a5,-1992(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34c50:	0007c783          	lbu	a5,0(a5)
   34c54:	04078c63          	beq	a5,zero,34cac <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x80>
    _Atomic_word __result = *__mem;
   34c58:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   34c5c:	fff5079b          	addiw	a5,a0,-1
   34c60:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34c64:	00100793          	addi	a5,zero,1
   34c68:	04f50a63          	beq	a0,a5,34cbc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x90>
	if (_M_pi != nullptr)
   34c6c:	04043403          	ld	s0,64(s0)
   34c70:	02040463          	beq	s0,zero,34c98 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    if (__is_single_threaded())
   34c74:	0000e797          	auipc	a5,0xe
   34c78:	80c7b783          	ld	a5,-2036(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34c7c:	0007c783          	lbu	a5,0(a5)
   34c80:	08078c63          	beq	a5,zero,34d18 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xec>
    _Atomic_word __result = *__mem;
   34c84:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34c88:	fff5079b          	addiw	a5,a0,-1
   34c8c:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34c90:	00100793          	addi	a5,zero,1
   34c94:	08f50a63          	beq	a0,a5,34d28 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xfc>
      }
   34c98:	01813083          	ld	ra,24(sp)
   34c9c:	01013403          	ld	s0,16(sp)
   34ca0:	00813483          	ld	s1,8(sp)
   34ca4:	02010113          	addi	sp,sp,32
   34ca8:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   34cac:	fff00593          	addi	a1,zero,-1
   34cb0:	03048513          	addi	a0,s1,48
   34cb4:	ecce10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34cb8:	fadff06f          	jal	zero,34c64 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
	_M_dispose();
   34cbc:	0004b783          	ld	a5,0(s1)
   34cc0:	0107b783          	ld	a5,16(a5)
   34cc4:	00048513          	addi	a0,s1,0
   34cc8:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34ccc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34cd0:	0000d797          	auipc	a5,0xd
   34cd4:	7b07b783          	ld	a5,1968(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34cd8:	0007c783          	lbu	a5,0(a5)
   34cdc:	02078663          	beq	a5,zero,34d08 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xdc>
    _Atomic_word __result = *__mem;
   34ce0:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   34ce4:	fff5079b          	addiw	a5,a0,-1
   34ce8:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34cec:	00100793          	addi	a5,zero,1
   34cf0:	f6f51ee3          	bne	a0,a5,34c6c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
	    _M_destroy();
   34cf4:	0004b783          	ld	a5,0(s1)
   34cf8:	0187b783          	ld	a5,24(a5)
   34cfc:	00048513          	addi	a0,s1,0
   34d00:	000780e7          	jalr	ra,0(a5)
   34d04:	f69ff06f          	jal	zero,34c6c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x40>
      return __exchange_and_add(__mem, __val);
   34d08:	fff00593          	addi	a1,zero,-1
   34d0c:	03448513          	addi	a0,s1,52
   34d10:	e70e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34d14:	fd9ff06f          	jal	zero,34cec <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc0>
   34d18:	fff00593          	addi	a1,zero,-1
   34d1c:	03040513          	addi	a0,s0,48
   34d20:	e60e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34d24:	f6dff06f          	jal	zero,34c90 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
	_M_dispose();
   34d28:	00043783          	ld	a5,0(s0)
   34d2c:	0107b783          	ld	a5,16(a5)
   34d30:	00040513          	addi	a0,s0,0
   34d34:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34d38:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34d3c:	0000d797          	auipc	a5,0xd
   34d40:	7447b783          	ld	a5,1860(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34d44:	0007c783          	lbu	a5,0(a5)
   34d48:	02078663          	beq	a5,zero,34d74 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x148>
    _Atomic_word __result = *__mem;
   34d4c:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34d50:	fff5079b          	addiw	a5,a0,-1
   34d54:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34d58:	00100793          	addi	a5,zero,1
   34d5c:	f2f51ee3          	bne	a0,a5,34c98 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
	    _M_destroy();
   34d60:	00043783          	ld	a5,0(s0)
   34d64:	0187b783          	ld	a5,24(a5)
   34d68:	00040513          	addi	a0,s0,0
   34d6c:	000780e7          	jalr	ra,0(a5)
      }
   34d70:	f29ff06f          	jal	zero,34c98 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
      return __exchange_and_add(__mem, __val);
   34d74:	fff00593          	addi	a1,zero,-1
   34d78:	03440513          	addi	a0,s0,52
   34d7c:	e04e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34d80:	fd9ff06f          	jal	zero,34d58 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x12c>

0000000000034d84 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   34d84:	fc010113          	addi	sp,sp,-64
   34d88:	02113c23          	sd	ra,56(sp)
   34d8c:	02813823          	sd	s0,48(sp)
   34d90:	02913423          	sd	s1,40(sp)
   34d94:	03213023          	sd	s2,32(sp)
   34d98:	01313c23          	sd	s3,24(sp)
   34d9c:	01413823          	sd	s4,16(sp)
   34da0:	01513423          	sd	s5,8(sp)
   34da4:	00050913          	addi	s2,a0,0
	if (_M_pi != nullptr)
   34da8:	0d053403          	ld	s0,208(a0)
   34dac:	02040463          	beq	s0,zero,34dd4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
    if (__is_single_threaded())
   34db0:	0000d797          	auipc	a5,0xd
   34db4:	6d07b783          	ld	a5,1744(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34db8:	0007c783          	lbu	a5,0(a5)
   34dbc:	06078063          	beq	a5,zero,34e1c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x98>
    _Atomic_word __result = *__mem;
   34dc0:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34dc4:	fff5079b          	addiw	a5,a0,-1
   34dc8:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34dcc:	00100793          	addi	a5,zero,1
   34dd0:	04f50e63          	beq	a0,a5,34e2c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa8>
	if (_M_pi != nullptr)
   34dd4:	0c093403          	ld	s0,192(s2)
   34dd8:	02040463          	beq	s0,zero,34e00 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
    if (__is_single_threaded())
   34ddc:	0000d797          	auipc	a5,0xd
   34de0:	6a47b783          	ld	a5,1700(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34de4:	0007c783          	lbu	a5,0(a5)
   34de8:	0a078063          	beq	a5,zero,34e88 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x104>
    _Atomic_word __result = *__mem;
   34dec:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   34df0:	fff5079b          	addiw	a5,a0,-1
   34df4:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34df8:	00100793          	addi	a5,zero,1
   34dfc:	08f50e63          	beq	a0,a5,34e98 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x114>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   34e00:	0a093403          	ld	s0,160(s2)
   34e04:	0a893983          	ld	s3,168(s2)
	  for (; __first != __last; ++__first)
   34e08:	19340063          	beq	s0,s3,34f88 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x204>
    return ::__libc_single_threaded;
   34e0c:	0000da97          	auipc	s5,0xd
   34e10:	674aba83          	ld	s5,1652(s5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34e14:	00100a13          	addi	s4,zero,1
   34e18:	0f40006f          	jal	zero,34f0c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x188>
      return __exchange_and_add(__mem, __val);
   34e1c:	fff00593          	addi	a1,zero,-1
   34e20:	03040513          	addi	a0,s0,48
   34e24:	d5ce10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34e28:	fa5ff06f          	jal	zero,34dcc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x48>
	_M_dispose();
   34e2c:	00043783          	ld	a5,0(s0)
   34e30:	0107b783          	ld	a5,16(a5)
   34e34:	00040513          	addi	a0,s0,0
   34e38:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34e3c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34e40:	0000d797          	auipc	a5,0xd
   34e44:	6407b783          	ld	a5,1600(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34e48:	0007c783          	lbu	a5,0(a5)
   34e4c:	02078663          	beq	a5,zero,34e78 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf4>
    _Atomic_word __result = *__mem;
   34e50:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34e54:	fff5079b          	addiw	a5,a0,-1
   34e58:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34e5c:	00100793          	addi	a5,zero,1
   34e60:	f6f51ae3          	bne	a0,a5,34dd4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
	    _M_destroy();
   34e64:	00043783          	ld	a5,0(s0)
   34e68:	0187b783          	ld	a5,24(a5)
   34e6c:	00040513          	addi	a0,s0,0
   34e70:	000780e7          	jalr	ra,0(a5)
   34e74:	f61ff06f          	jal	zero,34dd4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x50>
      return __exchange_and_add(__mem, __val);
   34e78:	fff00593          	addi	a1,zero,-1
   34e7c:	03440513          	addi	a0,s0,52
   34e80:	d00e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34e84:	fd9ff06f          	jal	zero,34e5c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd8>
   34e88:	fff00593          	addi	a1,zero,-1
   34e8c:	03040513          	addi	a0,s0,48
   34e90:	cf0e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34e94:	f65ff06f          	jal	zero,34df8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x74>
	_M_dispose();
   34e98:	00043783          	ld	a5,0(s0)
   34e9c:	0107b783          	ld	a5,16(a5)
   34ea0:	00040513          	addi	a0,s0,0
   34ea4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34ea8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34eac:	0000d797          	auipc	a5,0xd
   34eb0:	5d47b783          	ld	a5,1492(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34eb4:	0007c783          	lbu	a5,0(a5)
   34eb8:	02078663          	beq	a5,zero,34ee4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x160>
    _Atomic_word __result = *__mem;
   34ebc:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   34ec0:	fff5079b          	addiw	a5,a0,-1
   34ec4:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34ec8:	00100793          	addi	a5,zero,1
   34ecc:	f2f51ae3          	bne	a0,a5,34e00 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
	    _M_destroy();
   34ed0:	00043783          	ld	a5,0(s0)
   34ed4:	0187b783          	ld	a5,24(a5)
   34ed8:	00040513          	addi	a0,s0,0
   34edc:	000780e7          	jalr	ra,0(a5)
   34ee0:	f21ff06f          	jal	zero,34e00 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
      return __exchange_and_add(__mem, __val);
   34ee4:	fff00593          	addi	a1,zero,-1
   34ee8:	03440513          	addi	a0,s0,52
   34eec:	c94e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34ef0:	fd9ff06f          	jal	zero,34ec8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   34ef4:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   34ef8:	fff5079b          	addiw	a5,a0,-1
   34efc:	02f4a823          	sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34f00:	03450663          	beq	a0,s4,34f2c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a8>
   34f04:	01040413          	addi	s0,s0,16
   34f08:	08898063          	beq	s3,s0,34f88 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x204>
	if (_M_pi != nullptr)
   34f0c:	00843483          	ld	s1,8(s0)
   34f10:	fe048ae3          	beq	s1,zero,34f04 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
    if (__is_single_threaded())
   34f14:	000ac783          	lbu	a5,0(s5)
   34f18:	fc079ee3          	bne	a5,zero,34ef4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
      return __exchange_and_add(__mem, __val);
   34f1c:	fff00593          	addi	a1,zero,-1
   34f20:	03048513          	addi	a0,s1,48
   34f24:	c5ce10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34f28:	fd9ff06f          	jal	zero,34f00 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x17c>
	_M_dispose();
   34f2c:	0004b783          	ld	a5,0(s1)
   34f30:	0107b783          	ld	a5,16(a5)
   34f34:	00048513          	addi	a0,s1,0
   34f38:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34f3c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34f40:	0000d797          	auipc	a5,0xd
   34f44:	5407b783          	ld	a5,1344(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   34f48:	0007c783          	lbu	a5,0(a5)
   34f4c:	02078663          	beq	a5,zero,34f78 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f4>
    _Atomic_word __result = *__mem;
   34f50:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   34f54:	fff5079b          	addiw	a5,a0,-1
   34f58:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   34f5c:	00100793          	addi	a5,zero,1
   34f60:	faf512e3          	bne	a0,a5,34f04 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
	    _M_destroy();
   34f64:	0004b783          	ld	a5,0(s1)
   34f68:	0187b783          	ld	a5,24(a5)
   34f6c:	00048513          	addi	a0,s1,0
   34f70:	000780e7          	jalr	ra,0(a5)
   34f74:	f91ff06f          	jal	zero,34f04 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x180>
      return __exchange_and_add(__mem, __val);
   34f78:	fff00593          	addi	a1,zero,-1
   34f7c:	03448513          	addi	a0,s1,52
   34f80:	c00e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34f84:	fd9ff06f          	jal	zero,34f5c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d8>
	_M_deallocate(_M_impl._M_start,
   34f88:	0a093503          	ld	a0,160(s2)
	if (__p)
   34f8c:	00050463          	beq	a0,zero,34f94 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x210>
   34f90:	d80e10ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   34f94:	08893403          	ld	s0,136(s2)
   34f98:	09093983          	ld	s3,144(s2)
   34f9c:	0b340463          	beq	s0,s3,35044 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c0>
    return ::__libc_single_threaded;
   34fa0:	0000da97          	auipc	s5,0xd
   34fa4:	4e0aba83          	ld	s5,1248(s5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   34fa8:	00100a13          	addi	s4,zero,1
   34fac:	01c0006f          	jal	zero,34fc8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x244>
    _Atomic_word __result = *__mem;
   34fb0:	0304a503          	lw	a0,48(s1)
    *__mem += __val;
   34fb4:	fff5079b          	addiw	a5,a0,-1
   34fb8:	02f4a823          	sw	a5,48(s1)
   34fbc:	03450663          	beq	a0,s4,34fe8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x264>
   34fc0:	01040413          	addi	s0,s0,16
   34fc4:	08898063          	beq	s3,s0,35044 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c0>
	if (_M_pi != nullptr)
   34fc8:	00843483          	ld	s1,8(s0)
   34fcc:	fe048ae3          	beq	s1,zero,34fc0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
    if (__is_single_threaded())
   34fd0:	000ac783          	lbu	a5,0(s5)
   34fd4:	fc079ee3          	bne	a5,zero,34fb0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x22c>
      return __exchange_and_add(__mem, __val);
   34fd8:	fff00593          	addi	a1,zero,-1
   34fdc:	03048513          	addi	a0,s1,48
   34fe0:	ba0e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   34fe4:	fd9ff06f          	jal	zero,34fbc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
	_M_dispose();
   34fe8:	0004b783          	ld	a5,0(s1)
   34fec:	0107b783          	ld	a5,16(a5)
   34ff0:	00048513          	addi	a0,s1,0
   34ff4:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   34ff8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   34ffc:	0000d797          	auipc	a5,0xd
   35000:	4847b783          	ld	a5,1156(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   35004:	0007c783          	lbu	a5,0(a5)
   35008:	02078663          	beq	a5,zero,35034 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2b0>
    _Atomic_word __result = *__mem;
   3500c:	0344a503          	lw	a0,52(s1)
    *__mem += __val;
   35010:	fff5079b          	addiw	a5,a0,-1
   35014:	02f4aa23          	sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   35018:	00100793          	addi	a5,zero,1
   3501c:	faf512e3          	bne	a0,a5,34fc0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
	    _M_destroy();
   35020:	0004b783          	ld	a5,0(s1)
   35024:	0187b783          	ld	a5,24(a5)
   35028:	00048513          	addi	a0,s1,0
   3502c:	000780e7          	jalr	ra,0(a5)
   35030:	f91ff06f          	jal	zero,34fc0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x23c>
      return __exchange_and_add(__mem, __val);
   35034:	fff00593          	addi	a1,zero,-1
   35038:	03448513          	addi	a0,s1,52
   3503c:	b44e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35040:	fd9ff06f          	jal	zero,35018 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x294>
	_M_deallocate(_M_impl._M_start,
   35044:	08893503          	ld	a0,136(s2)
	if (__p)
   35048:	00050463          	beq	a0,zero,35050 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2cc>
   3504c:	cc4e10ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   35050:	04093403          	ld	s0,64(s2)
   35054:	02040463          	beq	s0,zero,3507c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
    if (__is_single_threaded())
   35058:	0000d797          	auipc	a5,0xd
   3505c:	4287b783          	ld	a5,1064(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   35060:	0007c783          	lbu	a5,0(a5)
   35064:	02078e63          	beq	a5,zero,350a0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x31c>
    _Atomic_word __result = *__mem;
   35068:	03042503          	lw	a0,48(s0)
    *__mem += __val;
   3506c:	fff5079b          	addiw	a5,a0,-1
   35070:	02f42823          	sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   35074:	00100793          	addi	a5,zero,1
   35078:	02f50c63          	beq	a0,a5,350b0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32c>
      }
   3507c:	03813083          	ld	ra,56(sp)
   35080:	03013403          	ld	s0,48(sp)
   35084:	02813483          	ld	s1,40(sp)
   35088:	02013903          	ld	s2,32(sp)
   3508c:	01813983          	ld	s3,24(sp)
   35090:	01013a03          	ld	s4,16(sp)
   35094:	00813a83          	ld	s5,8(sp)
   35098:	04010113          	addi	sp,sp,64
   3509c:	00008067          	jalr	zero,0(ra)
      return __exchange_and_add(__mem, __val);
   350a0:	fff00593          	addi	a1,zero,-1
   350a4:	03040513          	addi	a0,s0,48
   350a8:	ad8e10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   350ac:	fc9ff06f          	jal	zero,35074 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f0>
	_M_dispose();
   350b0:	00043783          	ld	a5,0(s0)
   350b4:	0107b783          	ld	a5,16(a5)
   350b8:	00040513          	addi	a0,s0,0
   350bc:	000780e7          	jalr	ra,0(a5)
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   350c0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   350c4:	0000d797          	auipc	a5,0xd
   350c8:	3bc7b783          	ld	a5,956(a5) # 42480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   350cc:	0007c783          	lbu	a5,0(a5)
   350d0:	02078663          	beq	a5,zero,350fc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x378>
    _Atomic_word __result = *__mem;
   350d4:	03442503          	lw	a0,52(s0)
    *__mem += __val;
   350d8:	fff5079b          	addiw	a5,a0,-1
   350dc:	02f42a23          	sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   350e0:	00100793          	addi	a5,zero,1
   350e4:	f8f51ce3          	bne	a0,a5,3507c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
	    _M_destroy();
   350e8:	00043783          	ld	a5,0(s0)
   350ec:	0187b783          	ld	a5,24(a5)
   350f0:	00040513          	addi	a0,s0,0
   350f4:	000780e7          	jalr	ra,0(a5)
      }
   350f8:	f85ff06f          	jal	zero,3507c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2f8>
      return __exchange_and_add(__mem, __val);
   350fc:	fff00593          	addi	a1,zero,-1
   35100:	03440513          	addi	a0,s0,52
   35104:	a7ce10ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   35108:	fd9ff06f          	jal	zero,350e0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x35c>

000000000003510c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   3510c:	fe010113          	addi	sp,sp,-32
   35110:	00113c23          	sd	ra,24(sp)
   35114:	00813823          	sd	s0,16(sp)
   35118:	00913423          	sd	s1,8(sp)
   3511c:	00050493          	addi	s1,a0,0
   35120:	00058413          	addi	s0,a1,0
  switch (ei_class) {
   35124:	00100793          	addi	a5,zero,1
   35128:	02f60063          	beq	a2,a5,35148 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   3512c:	00200793          	addi	a5,zero,2
   35130:	28f60663          	beq	a2,a5,353bc <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x2b0>
}
   35134:	01813083          	ld	ra,24(sp)
   35138:	01013403          	ld	s0,16(sp)
   3513c:	00813483          	ld	s1,8(sp)
   35140:	02010113          	addi	sp,sp,32
   35144:	00008067          	jalr	zero,0(ra)
   35148:	00100793          	addi	a5,zero,1
   3514c:	18f68263          	beq	a3,a5,352d0 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x1c4>
   35150:	00200793          	addi	a5,zero,2
   35154:	fef690e3          	bne	a3,a5,35134 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
  typename E::Half shentsize; // Size of section header entry
  typename E::Half shnum;     // Number of section header entries
  typename E::Half shstrndx;  // Section name string table index

  template <typename E2> void from(const E2 &o) {
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   35158:	0005c603          	lbu	a2,0(a1)
   3515c:	0015c683          	lbu	a3,1(a1)
   35160:	0025c703          	lbu	a4,2(a1)
   35164:	0035c783          	lbu	a5,3(a1)
   35168:	00c50023          	sb	a2,0(a0)
   3516c:	00d500a3          	sb	a3,1(a0)
   35170:	00e50123          	sb	a4,2(a0)
   35174:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   35178:	0045c783          	lbu	a5,4(a1)
   3517c:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   35180:	0055c783          	lbu	a5,5(a1)
   35184:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   35188:	0065c783          	lbu	a5,6(a1)
   3518c:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   35190:	0075c783          	lbu	a5,7(a1)
   35194:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   35198:	0085c783          	lbu	a5,8(a1)
   3519c:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   351a0:	0095c883          	lbu	a7,9(a1)
   351a4:	00a5c803          	lbu	a6,10(a1)
   351a8:	00b5c503          	lbu	a0,11(a1)
   351ac:	00c5c583          	lbu	a1,12(a1)
   351b0:	00d44603          	lbu	a2,13(s0)
   351b4:	00e44683          	lbu	a3,14(s0)
   351b8:	00f44703          	lbu	a4,15(s0)
   351bc:	011484a3          	sb	a7,9(s1)
   351c0:	01048523          	sb	a6,10(s1)
   351c4:	00a485a3          	sb	a0,11(s1)
   351c8:	00b48623          	sb	a1,12(s1)
   351cc:	00c486a3          	sb	a2,13(s1)
   351d0:	00d48723          	sb	a3,14(s1)
   351d4:	00e487a3          	sb	a4,15(s1)

    type = swizzle(o.type, o.order, order);
   351d8:	01045783          	lhu	a5,16(s0)
  switch (sizeof(T)) {
  case 1:
    return v;
  case 2: {
    std::uint16_t x = (std::uint16_t)v;
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   351dc:	0087d71b          	srliw	a4,a5,0x8
   351e0:	0087979b          	slliw	a5,a5,0x8
   351e4:	00f767b3          	or	a5,a4,a5
   351e8:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   351ec:	01245783          	lhu	a5,18(s0)
   351f0:	0087d71b          	srliw	a4,a5,0x8
   351f4:	0087979b          	slliw	a5,a5,0x8
   351f8:	00f767b3          	or	a5,a4,a5
   351fc:	00f49923          	sh	a5,18(s1)
  }
  case 4:
    return (T)__builtin_bswap32((std::uint32_t)v);
   35200:	01442503          	lw	a0,20(s0)
   35204:	96ce10ef          	jal	ra,16370 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   35208:	00a4aa23          	sw	a0,20(s1)
   3520c:	01842503          	lw	a0,24(s0)
   35210:	960e10ef          	jal	ra,16370 <__bswapsi2@plt>
    entry = swizzle(o.entry, o.order, order);
   35214:	02051513          	slli	a0,a0,0x20
   35218:	02055513          	srli	a0,a0,0x20
   3521c:	00a4bc23          	sd	a0,24(s1)
   35220:	01c42503          	lw	a0,28(s0)
   35224:	94ce10ef          	jal	ra,16370 <__bswapsi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   35228:	02051513          	slli	a0,a0,0x20
   3522c:	02055513          	srli	a0,a0,0x20
   35230:	02a4b023          	sd	a0,32(s1)
   35234:	02042503          	lw	a0,32(s0)
   35238:	938e10ef          	jal	ra,16370 <__bswapsi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   3523c:	02051513          	slli	a0,a0,0x20
   35240:	02055513          	srli	a0,a0,0x20
   35244:	02a4b423          	sd	a0,40(s1)
   35248:	02442503          	lw	a0,36(s0)
   3524c:	924e10ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   35250:	02a4a823          	sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   35254:	02845783          	lhu	a5,40(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   35258:	0087d71b          	srliw	a4,a5,0x8
   3525c:	0087979b          	slliw	a5,a5,0x8
   35260:	00f767b3          	or	a5,a4,a5
   35264:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   35268:	02a45783          	lhu	a5,42(s0)
   3526c:	0087d71b          	srliw	a4,a5,0x8
   35270:	0087979b          	slliw	a5,a5,0x8
   35274:	00f767b3          	or	a5,a4,a5
   35278:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   3527c:	02c45783          	lhu	a5,44(s0)
   35280:	0087d71b          	srliw	a4,a5,0x8
   35284:	0087979b          	slliw	a5,a5,0x8
   35288:	00f767b3          	or	a5,a4,a5
   3528c:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   35290:	02e45783          	lhu	a5,46(s0)
   35294:	0087d71b          	srliw	a4,a5,0x8
   35298:	0087979b          	slliw	a5,a5,0x8
   3529c:	00f767b3          	or	a5,a4,a5
   352a0:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   352a4:	03045783          	lhu	a5,48(s0)
   352a8:	0087d71b          	srliw	a4,a5,0x8
   352ac:	0087979b          	slliw	a5,a5,0x8
   352b0:	00f767b3          	or	a5,a4,a5
   352b4:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   352b8:	03245783          	lhu	a5,50(s0)
   352bc:	0087d71b          	srliw	a4,a5,0x8
   352c0:	0087979b          	slliw	a5,a5,0x8
   352c4:	00f767b3          	or	a5,a4,a5
   352c8:	02f49f23          	sh	a5,62(s1)
  }
   352cc:	e69ff06f          	jal	zero,35134 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   352d0:	0005c603          	lbu	a2,0(a1)
   352d4:	0015c683          	lbu	a3,1(a1)
   352d8:	0025c703          	lbu	a4,2(a1)
   352dc:	0035c783          	lbu	a5,3(a1)
   352e0:	00c50023          	sb	a2,0(a0)
   352e4:	00d500a3          	sb	a3,1(a0)
   352e8:	00e50123          	sb	a4,2(a0)
   352ec:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   352f0:	0045c783          	lbu	a5,4(a1)
   352f4:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   352f8:	0055c783          	lbu	a5,5(a1)
   352fc:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   35300:	0065c783          	lbu	a5,6(a1)
   35304:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   35308:	0075c783          	lbu	a5,7(a1)
   3530c:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   35310:	0085c783          	lbu	a5,8(a1)
   35314:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   35318:	0095c883          	lbu	a7,9(a1)
   3531c:	00a5c803          	lbu	a6,10(a1)
   35320:	00b5c503          	lbu	a0,11(a1)
   35324:	00c5c583          	lbu	a1,12(a1)
   35328:	00d44603          	lbu	a2,13(s0)
   3532c:	00e44683          	lbu	a3,14(s0)
   35330:	00f44703          	lbu	a4,15(s0)
   35334:	011484a3          	sb	a7,9(s1)
   35338:	01048523          	sb	a6,10(s1)
   3533c:	00a485a3          	sb	a0,11(s1)
   35340:	00b48623          	sb	a1,12(s1)
   35344:	00c486a3          	sb	a2,13(s1)
   35348:	00d48723          	sb	a3,14(s1)
   3534c:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   35350:	01045783          	lhu	a5,16(s0)
   35354:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   35358:	01245783          	lhu	a5,18(s0)
   3535c:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   35360:	01442783          	lw	a5,20(s0)
   35364:	00f4aa23          	sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   35368:	01846783          	lwu	a5,24(s0)
   3536c:	00f4bc23          	sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   35370:	01c46783          	lwu	a5,28(s0)
   35374:	02f4b023          	sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   35378:	02046783          	lwu	a5,32(s0)
   3537c:	02f4b423          	sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   35380:	02442783          	lw	a5,36(s0)
   35384:	02f4a823          	sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   35388:	02845783          	lhu	a5,40(s0)
   3538c:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   35390:	02a45783          	lhu	a5,42(s0)
   35394:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   35398:	02c45783          	lhu	a5,44(s0)
   3539c:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   353a0:	02e45783          	lhu	a5,46(s0)
   353a4:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   353a8:	03045783          	lhu	a5,48(s0)
   353ac:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   353b0:	03245783          	lhu	a5,50(s0)
   353b4:	02f49f23          	sh	a5,62(s1)
  }
   353b8:	d7dff06f          	jal	zero,35134 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   353bc:	00100793          	addi	a5,zero,1
   353c0:	16f68663          	beq	a3,a5,3552c <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x420>
   353c4:	00200793          	addi	a5,zero,2
   353c8:	d6f696e3          	bne	a3,a5,35134 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   353cc:	0005c603          	lbu	a2,0(a1)
   353d0:	0015c683          	lbu	a3,1(a1)
   353d4:	0025c703          	lbu	a4,2(a1)
   353d8:	0035c783          	lbu	a5,3(a1)
   353dc:	00c50023          	sb	a2,0(a0)
   353e0:	00d500a3          	sb	a3,1(a0)
   353e4:	00e50123          	sb	a4,2(a0)
   353e8:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   353ec:	0045c783          	lbu	a5,4(a1)
   353f0:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   353f4:	0055c783          	lbu	a5,5(a1)
   353f8:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   353fc:	0065c783          	lbu	a5,6(a1)
   35400:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   35404:	0075c783          	lbu	a5,7(a1)
   35408:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   3540c:	0085c783          	lbu	a5,8(a1)
   35410:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   35414:	0095c883          	lbu	a7,9(a1)
   35418:	00a5c803          	lbu	a6,10(a1)
   3541c:	00b5c503          	lbu	a0,11(a1)
   35420:	00c5c583          	lbu	a1,12(a1)
   35424:	00d44603          	lbu	a2,13(s0)
   35428:	00e44683          	lbu	a3,14(s0)
   3542c:	00f44703          	lbu	a4,15(s0)
   35430:	011484a3          	sb	a7,9(s1)
   35434:	01048523          	sb	a6,10(s1)
   35438:	00a485a3          	sb	a0,11(s1)
   3543c:	00b48623          	sb	a1,12(s1)
   35440:	00c486a3          	sb	a2,13(s1)
   35444:	00d48723          	sb	a3,14(s1)
   35448:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   3544c:	01045783          	lhu	a5,16(s0)
   35450:	0087d71b          	srliw	a4,a5,0x8
   35454:	0087979b          	slliw	a5,a5,0x8
   35458:	00f767b3          	or	a5,a4,a5
   3545c:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   35460:	01245783          	lhu	a5,18(s0)
   35464:	0087d71b          	srliw	a4,a5,0x8
   35468:	0087979b          	slliw	a5,a5,0x8
   3546c:	00f767b3          	or	a5,a4,a5
   35470:	00f49923          	sh	a5,18(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   35474:	01442503          	lw	a0,20(s0)
   35478:	ef9e00ef          	jal	ra,16370 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   3547c:	00a4aa23          	sw	a0,20(s1)
  case 8:
    return (T)__builtin_bswap64((std::uint64_t)v);
   35480:	01843503          	ld	a0,24(s0)
   35484:	8cce10ef          	jal	ra,16550 <__bswapdi2@plt>
    entry = swizzle(o.entry, o.order, order);
   35488:	00a4bc23          	sd	a0,24(s1)
   3548c:	02043503          	ld	a0,32(s0)
   35490:	8c0e10ef          	jal	ra,16550 <__bswapdi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   35494:	02a4b023          	sd	a0,32(s1)
   35498:	02843503          	ld	a0,40(s0)
   3549c:	8b4e10ef          	jal	ra,16550 <__bswapdi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   354a0:	02a4b423          	sd	a0,40(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   354a4:	03042503          	lw	a0,48(s0)
   354a8:	ec9e00ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   354ac:	02a4a823          	sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   354b0:	03445783          	lhu	a5,52(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   354b4:	0087d71b          	srliw	a4,a5,0x8
   354b8:	0087979b          	slliw	a5,a5,0x8
   354bc:	00f767b3          	or	a5,a4,a5
   354c0:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   354c4:	03645783          	lhu	a5,54(s0)
   354c8:	0087d71b          	srliw	a4,a5,0x8
   354cc:	0087979b          	slliw	a5,a5,0x8
   354d0:	00f767b3          	or	a5,a4,a5
   354d4:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   354d8:	03845783          	lhu	a5,56(s0)
   354dc:	0087d71b          	srliw	a4,a5,0x8
   354e0:	0087979b          	slliw	a5,a5,0x8
   354e4:	00f767b3          	or	a5,a4,a5
   354e8:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   354ec:	03a45783          	lhu	a5,58(s0)
   354f0:	0087d71b          	srliw	a4,a5,0x8
   354f4:	0087979b          	slliw	a5,a5,0x8
   354f8:	00f767b3          	or	a5,a4,a5
   354fc:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   35500:	03c45783          	lhu	a5,60(s0)
   35504:	0087d71b          	srliw	a4,a5,0x8
   35508:	0087979b          	slliw	a5,a5,0x8
   3550c:	00f767b3          	or	a5,a4,a5
   35510:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   35514:	03e45783          	lhu	a5,62(s0)
   35518:	0087d71b          	srliw	a4,a5,0x8
   3551c:	0087979b          	slliw	a5,a5,0x8
   35520:	00f767b3          	or	a5,a4,a5
   35524:	02f49f23          	sh	a5,62(s1)
  }
   35528:	c0dff06f          	jal	zero,35134 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   3552c:	0005c603          	lbu	a2,0(a1)
   35530:	0015c683          	lbu	a3,1(a1)
   35534:	0025c703          	lbu	a4,2(a1)
   35538:	0035c783          	lbu	a5,3(a1)
   3553c:	00c50023          	sb	a2,0(a0)
   35540:	00d500a3          	sb	a3,1(a0)
   35544:	00e50123          	sb	a4,2(a0)
   35548:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   3554c:	0045c783          	lbu	a5,4(a1)
   35550:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   35554:	0055c783          	lbu	a5,5(a1)
   35558:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   3555c:	0065c783          	lbu	a5,6(a1)
   35560:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   35564:	0075c783          	lbu	a5,7(a1)
   35568:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   3556c:	0085c783          	lbu	a5,8(a1)
   35570:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   35574:	0095c883          	lbu	a7,9(a1)
   35578:	00a5c803          	lbu	a6,10(a1)
   3557c:	00b5c503          	lbu	a0,11(a1)
   35580:	00c5c583          	lbu	a1,12(a1)
   35584:	00d44603          	lbu	a2,13(s0)
   35588:	00e44683          	lbu	a3,14(s0)
   3558c:	00f44703          	lbu	a4,15(s0)
   35590:	011484a3          	sb	a7,9(s1)
   35594:	01048523          	sb	a6,10(s1)
   35598:	00a485a3          	sb	a0,11(s1)
   3559c:	00b48623          	sb	a1,12(s1)
   355a0:	00c486a3          	sb	a2,13(s1)
   355a4:	00d48723          	sb	a3,14(s1)
   355a8:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   355ac:	01045783          	lhu	a5,16(s0)
   355b0:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   355b4:	01245783          	lhu	a5,18(s0)
   355b8:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   355bc:	01442783          	lw	a5,20(s0)
   355c0:	00f4aa23          	sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   355c4:	01843783          	ld	a5,24(s0)
   355c8:	00f4bc23          	sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   355cc:	02043783          	ld	a5,32(s0)
   355d0:	02f4b023          	sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   355d4:	02843783          	ld	a5,40(s0)
   355d8:	02f4b423          	sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   355dc:	03042783          	lw	a5,48(s0)
   355e0:	02f4a823          	sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   355e4:	03445783          	lhu	a5,52(s0)
   355e8:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   355ec:	03645783          	lhu	a5,54(s0)
   355f0:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   355f4:	03845783          	lhu	a5,56(s0)
   355f8:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   355fc:	03a45783          	lhu	a5,58(s0)
   35600:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   35604:	03c45783          	lhu	a5,60(s0)
   35608:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   3560c:	03e45783          	lhu	a5,62(s0)
   35610:	02f49f23          	sh	a5,62(s1)
  }
   35614:	b21ff06f          	jal	zero,35134 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000035618 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   35618:	fe010113          	addi	sp,sp,-32
   3561c:	00113c23          	sd	ra,24(sp)
   35620:	00813823          	sd	s0,16(sp)
   35624:	00913423          	sd	s1,8(sp)
   35628:	00050413          	addi	s0,a0,0
   3562c:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   35630:	00100793          	addi	a5,zero,1
   35634:	02f60063          	beq	a2,a5,35654 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   35638:	00200793          	addi	a5,zero,2
   3563c:	10f60063          	beq	a2,a5,3573c <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x124>
}
   35640:	01813083          	ld	ra,24(sp)
   35644:	01013403          	ld	s0,16(sp)
   35648:	00813483          	ld	s1,8(sp)
   3564c:	02010113          	addi	sp,sp,32
   35650:	00008067          	jalr	zero,0(ra)
   35654:	00100793          	addi	a5,zero,1
   35658:	0af68063          	beq	a3,a5,356f8 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xe0>
   3565c:	00200793          	addi	a5,zero,2
   35660:	fef690e3          	bne	a3,a5,35640 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   35664:	0005a503          	lw	a0,0(a1)
   35668:	d09e00ef          	jal	ra,16370 <__bswapsi2@plt>
  Elf64::Xword filesz; // Size of segment in file
  Elf64::Xword memsz;  // Size of segment in memory
  Elf64::Xword align;  // Alignment of segment

  template <typename E2> void from(const E2 &o) {
    type = swizzle(o.type, o.order, order);
   3566c:	00a42023          	sw	a0,0(s0)
   35670:	0044a503          	lw	a0,4(s1)
   35674:	cfde00ef          	jal	ra,16370 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35678:	02051513          	slli	a0,a0,0x20
   3567c:	02055513          	srli	a0,a0,0x20
   35680:	00a43423          	sd	a0,8(s0)
   35684:	0084a503          	lw	a0,8(s1)
   35688:	ce9e00ef          	jal	ra,16370 <__bswapsi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   3568c:	02051513          	slli	a0,a0,0x20
   35690:	02055513          	srli	a0,a0,0x20
   35694:	00a43823          	sd	a0,16(s0)
   35698:	00c4a503          	lw	a0,12(s1)
   3569c:	cd5e00ef          	jal	ra,16370 <__bswapsi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   356a0:	02051513          	slli	a0,a0,0x20
   356a4:	02055513          	srli	a0,a0,0x20
   356a8:	00a43c23          	sd	a0,24(s0)
   356ac:	0104a503          	lw	a0,16(s1)
   356b0:	cc1e00ef          	jal	ra,16370 <__bswapsi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   356b4:	02051513          	slli	a0,a0,0x20
   356b8:	02055513          	srli	a0,a0,0x20
   356bc:	02a43023          	sd	a0,32(s0)
   356c0:	0144a503          	lw	a0,20(s1)
   356c4:	cade00ef          	jal	ra,16370 <__bswapsi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   356c8:	02051513          	slli	a0,a0,0x20
   356cc:	02055513          	srli	a0,a0,0x20
   356d0:	02a43423          	sd	a0,40(s0)
   356d4:	0184a503          	lw	a0,24(s1)
   356d8:	c99e00ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   356dc:	00a42223          	sw	a0,4(s0)
   356e0:	01c4a503          	lw	a0,28(s1)
   356e4:	c8de00ef          	jal	ra,16370 <__bswapsi2@plt>
    align = swizzle(o.align, o.order, order);
   356e8:	02051513          	slli	a0,a0,0x20
   356ec:	02055513          	srli	a0,a0,0x20
   356f0:	02a43823          	sd	a0,48(s0)
  }
   356f4:	f4dff06f          	jal	zero,35640 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    type = swizzle(o.type, o.order, order);
   356f8:	0005a783          	lw	a5,0(a1)
   356fc:	00f52023          	sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   35700:	0045e783          	lwu	a5,4(a1)
   35704:	00f53423          	sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   35708:	0085e783          	lwu	a5,8(a1)
   3570c:	00f53823          	sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   35710:	00c5e783          	lwu	a5,12(a1)
   35714:	00f53c23          	sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   35718:	0105e783          	lwu	a5,16(a1)
   3571c:	02f53023          	sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   35720:	0145e783          	lwu	a5,20(a1)
   35724:	02f53423          	sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   35728:	0185a783          	lw	a5,24(a1)
   3572c:	00f52223          	sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   35730:	01c5e783          	lwu	a5,28(a1)
   35734:	02f53823          	sd	a5,48(a0)
  }
   35738:	f09ff06f          	jal	zero,35640 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   3573c:	00100793          	addi	a5,zero,1
   35740:	06f68863          	beq	a3,a5,357b0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x198>
   35744:	00200793          	addi	a5,zero,2
   35748:	eef69ce3          	bne	a3,a5,35640 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   3574c:	0005a503          	lw	a0,0(a1)
   35750:	c21e00ef          	jal	ra,16370 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   35754:	00a42023          	sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35758:	0084b503          	ld	a0,8(s1)
   3575c:	df5e00ef          	jal	ra,16550 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35760:	00a43423          	sd	a0,8(s0)
   35764:	0104b503          	ld	a0,16(s1)
   35768:	de9e00ef          	jal	ra,16550 <__bswapdi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   3576c:	00a43823          	sd	a0,16(s0)
   35770:	0184b503          	ld	a0,24(s1)
   35774:	ddde00ef          	jal	ra,16550 <__bswapdi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   35778:	00a43c23          	sd	a0,24(s0)
   3577c:	0204b503          	ld	a0,32(s1)
   35780:	dd1e00ef          	jal	ra,16550 <__bswapdi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   35784:	02a43023          	sd	a0,32(s0)
   35788:	0284b503          	ld	a0,40(s1)
   3578c:	dc5e00ef          	jal	ra,16550 <__bswapdi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   35790:	02a43423          	sd	a0,40(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   35794:	0044a503          	lw	a0,4(s1)
   35798:	bd9e00ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   3579c:	00a42223          	sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   357a0:	0304b503          	ld	a0,48(s1)
   357a4:	dade00ef          	jal	ra,16550 <__bswapdi2@plt>
    align = swizzle(o.align, o.order, order);
   357a8:	02a43823          	sd	a0,48(s0)
  }
   357ac:	e95ff06f          	jal	zero,35640 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    type = swizzle(o.type, o.order, order);
   357b0:	0005a783          	lw	a5,0(a1)
   357b4:	00f52023          	sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   357b8:	0085b783          	ld	a5,8(a1)
   357bc:	00f53423          	sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   357c0:	0105b783          	ld	a5,16(a1)
   357c4:	00f53823          	sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   357c8:	0185b783          	ld	a5,24(a1)
   357cc:	00f53c23          	sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   357d0:	0205b783          	ld	a5,32(a1)
   357d4:	02f53023          	sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   357d8:	0285b783          	ld	a5,40(a1)
   357dc:	02f53423          	sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   357e0:	0045a783          	lw	a5,4(a1)
   357e4:	00f52223          	sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   357e8:	0305b783          	ld	a5,48(a1)
   357ec:	02f53823          	sd	a5,48(a0)
  }
   357f0:	e51ff06f          	jal	zero,35640 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

00000000000357f4 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   357f4:	fe010113          	addi	sp,sp,-32
   357f8:	00113c23          	sd	ra,24(sp)
   357fc:	00813823          	sd	s0,16(sp)
   35800:	00913423          	sd	s1,8(sp)
   35804:	00050413          	addi	s0,a0,0
   35808:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   3580c:	00100793          	addi	a5,zero,1
   35810:	02f60063          	beq	a2,a5,35830 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   35814:	00200793          	addi	a5,zero,2
   35818:	12f60463          	beq	a2,a5,35940 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x14c>
}
   3581c:	01813083          	ld	ra,24(sp)
   35820:	01013403          	ld	s0,16(sp)
   35824:	00813483          	ld	s1,8(sp)
   35828:	02010113          	addi	sp,sp,32
   3582c:	00008067          	jalr	zero,0(ra)
   35830:	00100793          	addi	a5,zero,1
   35834:	0af68c63          	beq	a3,a5,358ec <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xf8>
   35838:	00200793          	addi	a5,zero,2
   3583c:	fef690e3          	bne	a3,a5,3581c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   35840:	0005a503          	lw	a0,0(a1)
   35844:	b2de00ef          	jal	ra,16370 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   35848:	00a42023          	sw	a0,0(s0)
   3584c:	0044a503          	lw	a0,4(s1)
   35850:	b21e00ef          	jal	ra,16370 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   35854:	00a42223          	sw	a0,4(s0)
   35858:	0084a503          	lw	a0,8(s1)
   3585c:	b15e00ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   35860:	02051513          	slli	a0,a0,0x20
   35864:	02055513          	srli	a0,a0,0x20
   35868:	00a43423          	sd	a0,8(s0)
   3586c:	00c4a503          	lw	a0,12(s1)
   35870:	b01e00ef          	jal	ra,16370 <__bswapsi2@plt>
    addr = swizzle(o.addr, o.order, order);
   35874:	02051513          	slli	a0,a0,0x20
   35878:	02055513          	srli	a0,a0,0x20
   3587c:	00a43823          	sd	a0,16(s0)
   35880:	0104a503          	lw	a0,16(s1)
   35884:	aede00ef          	jal	ra,16370 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35888:	02051513          	slli	a0,a0,0x20
   3588c:	02055513          	srli	a0,a0,0x20
   35890:	00a43c23          	sd	a0,24(s0)
   35894:	0144a503          	lw	a0,20(s1)
   35898:	ad9e00ef          	jal	ra,16370 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   3589c:	02051513          	slli	a0,a0,0x20
   358a0:	02055513          	srli	a0,a0,0x20
   358a4:	02a43023          	sd	a0,32(s0)
   358a8:	0184a503          	lw	a0,24(s1)
   358ac:	ac5e00ef          	jal	ra,16370 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   358b0:	02a41423          	sh	a0,40(s0)
   358b4:	01c4a503          	lw	a0,28(s1)
   358b8:	ab9e00ef          	jal	ra,16370 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   358bc:	02a42623          	sw	a0,44(s0)
   358c0:	0204a503          	lw	a0,32(s1)
   358c4:	aade00ef          	jal	ra,16370 <__bswapsi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   358c8:	02051513          	slli	a0,a0,0x20
   358cc:	02055513          	srli	a0,a0,0x20
   358d0:	02a43823          	sd	a0,48(s0)
   358d4:	0244a503          	lw	a0,36(s1)
   358d8:	a99e00ef          	jal	ra,16370 <__bswapsi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   358dc:	02051513          	slli	a0,a0,0x20
   358e0:	02055513          	srli	a0,a0,0x20
   358e4:	02a43c23          	sd	a0,56(s0)
  }
   358e8:	f35ff06f          	jal	zero,3581c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   358ec:	0005a783          	lw	a5,0(a1)
   358f0:	00f52023          	sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   358f4:	0045a783          	lw	a5,4(a1)
   358f8:	00f52223          	sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   358fc:	0085e783          	lwu	a5,8(a1)
   35900:	00f53423          	sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   35904:	00c5e783          	lwu	a5,12(a1)
   35908:	00f53823          	sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   3590c:	0105e783          	lwu	a5,16(a1)
   35910:	00f53c23          	sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   35914:	0145e783          	lwu	a5,20(a1)
   35918:	02f53023          	sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   3591c:	0185a783          	lw	a5,24(a1)
   35920:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   35924:	01c5a783          	lw	a5,28(a1)
   35928:	02f52623          	sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   3592c:	0205e783          	lwu	a5,32(a1)
   35930:	02f53823          	sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   35934:	0245e783          	lwu	a5,36(a1)
   35938:	02f53c23          	sd	a5,56(a0)
  }
   3593c:	ee1ff06f          	jal	zero,3581c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   35940:	00100793          	addi	a5,zero,1
   35944:	08f68463          	beq	a3,a5,359cc <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x1d8>
   35948:	00200793          	addi	a5,zero,2
   3594c:	ecf698e3          	bne	a3,a5,3581c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   35950:	0005a503          	lw	a0,0(a1)
   35954:	a1de00ef          	jal	ra,16370 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   35958:	00a42023          	sw	a0,0(s0)
   3595c:	0044a503          	lw	a0,4(s1)
   35960:	a11e00ef          	jal	ra,16370 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   35964:	00a42223          	sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35968:	0084b503          	ld	a0,8(s1)
   3596c:	be5e00ef          	jal	ra,16550 <__bswapdi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   35970:	00a43423          	sd	a0,8(s0)
   35974:	0104b503          	ld	a0,16(s1)
   35978:	bd9e00ef          	jal	ra,16550 <__bswapdi2@plt>
    addr = swizzle(o.addr, o.order, order);
   3597c:	00a43823          	sd	a0,16(s0)
   35980:	0184b503          	ld	a0,24(s1)
   35984:	bcde00ef          	jal	ra,16550 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   35988:	00a43c23          	sd	a0,24(s0)
   3598c:	0204b503          	ld	a0,32(s1)
   35990:	bc1e00ef          	jal	ra,16550 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   35994:	02a43023          	sd	a0,32(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   35998:	0284a503          	lw	a0,40(s1)
   3599c:	9d5e00ef          	jal	ra,16370 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   359a0:	02a41423          	sh	a0,40(s0)
   359a4:	02c4a503          	lw	a0,44(s1)
   359a8:	9c9e00ef          	jal	ra,16370 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   359ac:	02a42623          	sw	a0,44(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   359b0:	0304b503          	ld	a0,48(s1)
   359b4:	b9de00ef          	jal	ra,16550 <__bswapdi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   359b8:	02a43823          	sd	a0,48(s0)
   359bc:	0384b503          	ld	a0,56(s1)
   359c0:	b91e00ef          	jal	ra,16550 <__bswapdi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   359c4:	02a43c23          	sd	a0,56(s0)
  }
   359c8:	e55ff06f          	jal	zero,3581c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   359cc:	0005a783          	lw	a5,0(a1)
   359d0:	00f52023          	sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   359d4:	0045a783          	lw	a5,4(a1)
   359d8:	00f52223          	sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   359dc:	0085b783          	ld	a5,8(a1)
   359e0:	00f53423          	sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   359e4:	0105b783          	ld	a5,16(a1)
   359e8:	00f53823          	sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   359ec:	0185b783          	ld	a5,24(a1)
   359f0:	00f53c23          	sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   359f4:	0205b783          	ld	a5,32(a1)
   359f8:	02f53023          	sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   359fc:	0285a783          	lw	a5,40(a1)
   35a00:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   35a04:	02c5a783          	lw	a5,44(a1)
   35a08:	02f52623          	sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   35a0c:	0305b783          	ld	a5,48(a1)
   35a10:	02f53823          	sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   35a14:	0385b783          	ld	a5,56(a1)
   35a18:	02f53c23          	sd	a5,56(a0)
  }
   35a1c:	e01ff06f          	jal	zero,3581c <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000035a20 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   35a20:	fe010113          	addi	sp,sp,-32
   35a24:	00113c23          	sd	ra,24(sp)
   35a28:	00813823          	sd	s0,16(sp)
   35a2c:	00913423          	sd	s1,8(sp)
   35a30:	00050413          	addi	s0,a0,0
   35a34:	00058493          	addi	s1,a1,0
  switch (ei_class) {
   35a38:	00100793          	addi	a5,zero,1
   35a3c:	02f60063          	beq	a2,a5,35a5c <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x3c>
   35a40:	00200793          	addi	a5,zero,2
   35a44:	0af60c63          	beq	a2,a5,35afc <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xdc>
}
   35a48:	01813083          	ld	ra,24(sp)
   35a4c:	01013403          	ld	s0,16(sp)
   35a50:	00813483          	ld	s1,8(sp)
   35a54:	02010113          	addi	sp,sp,32
   35a58:	00008067          	jalr	zero,0(ra)
   35a5c:	00100793          	addi	a5,zero,1
   35a60:	06f68463          	beq	a3,a5,35ac8 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xa8>
   35a64:	00200793          	addi	a5,zero,2
   35a68:	fef690e3          	bne	a3,a5,35a48 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   35a6c:	0005a503          	lw	a0,0(a1)
   35a70:	901e00ef          	jal	ra,16370 <__bswapsi2@plt>
  shn shnxd;           // Section table index
  Elf64::Addr value;   // Symbol value (address)
  Elf64::Xword size;   // Size of object

  template <typename E2> void from(const E2 &o) {
    name = swizzle(o.name, o.order, order);
   35a74:	00a42023          	sw	a0,0(s0)
   35a78:	0044a503          	lw	a0,4(s1)
   35a7c:	8f5e00ef          	jal	ra,16370 <__bswapsi2@plt>
    value = swizzle(o.value, o.order, order);
   35a80:	02051513          	slli	a0,a0,0x20
   35a84:	02055513          	srli	a0,a0,0x20
   35a88:	00a43423          	sd	a0,8(s0)
   35a8c:	0084a503          	lw	a0,8(s1)
   35a90:	8e1e00ef          	jal	ra,16370 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   35a94:	02051513          	slli	a0,a0,0x20
   35a98:	02055513          	srli	a0,a0,0x20
   35a9c:	00a43823          	sd	a0,16(s0)
    info = o.info;
   35aa0:	00c4c783          	lbu	a5,12(s1)
   35aa4:	00f40223          	sb	a5,4(s0)
    other = o.other;
   35aa8:	00d4c783          	lbu	a5,13(s1)
   35aac:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35ab0:	00e4d783          	lhu	a5,14(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   35ab4:	0087d71b          	srliw	a4,a5,0x8
   35ab8:	0087979b          	slliw	a5,a5,0x8
   35abc:	00f767b3          	or	a5,a4,a5
   35ac0:	00f41323          	sh	a5,6(s0)
  }
   35ac4:	f85ff06f          	jal	zero,35a48 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   35ac8:	0005a783          	lw	a5,0(a1)
   35acc:	00f52023          	sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   35ad0:	0045e783          	lwu	a5,4(a1)
   35ad4:	00f53423          	sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   35ad8:	0085e783          	lwu	a5,8(a1)
   35adc:	00f53823          	sd	a5,16(a0)
    info = o.info;
   35ae0:	00c5c783          	lbu	a5,12(a1)
   35ae4:	00f50223          	sb	a5,4(a0)
    other = o.other;
   35ae8:	00d5c783          	lbu	a5,13(a1)
   35aec:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35af0:	00e5d783          	lhu	a5,14(a1)
   35af4:	00f51323          	sh	a5,6(a0)
  }
   35af8:	f51ff06f          	jal	zero,35a48 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
   35afc:	00100793          	addi	a5,zero,1
   35b00:	04f68c63          	beq	a3,a5,35b58 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x138>
   35b04:	00200793          	addi	a5,zero,2
   35b08:	f4f690e3          	bne	a3,a5,35a48 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    return (T)__builtin_bswap32((std::uint32_t)v);
   35b0c:	0005a503          	lw	a0,0(a1)
   35b10:	861e00ef          	jal	ra,16370 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   35b14:	00a42023          	sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   35b18:	0084b503          	ld	a0,8(s1)
   35b1c:	a35e00ef          	jal	ra,16550 <__bswapdi2@plt>
    value = swizzle(o.value, o.order, order);
   35b20:	00a43423          	sd	a0,8(s0)
   35b24:	0104b503          	ld	a0,16(s1)
   35b28:	a29e00ef          	jal	ra,16550 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   35b2c:	00a43823          	sd	a0,16(s0)
    info = o.info;
   35b30:	0044c783          	lbu	a5,4(s1)
   35b34:	00f40223          	sb	a5,4(s0)
    other = o.other;
   35b38:	0054c783          	lbu	a5,5(s1)
   35b3c:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35b40:	0064d783          	lhu	a5,6(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   35b44:	0087d71b          	srliw	a4,a5,0x8
   35b48:	0087979b          	slliw	a5,a5,0x8
   35b4c:	00f767b3          	or	a5,a4,a5
   35b50:	00f41323          	sh	a5,6(s0)
  }
   35b54:	ef5ff06f          	jal	zero,35a48 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>
    name = swizzle(o.name, o.order, order);
   35b58:	0005a783          	lw	a5,0(a1)
   35b5c:	00f52023          	sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   35b60:	0085b783          	ld	a5,8(a1)
   35b64:	00f53423          	sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   35b68:	0105b783          	ld	a5,16(a1)
   35b6c:	00f53823          	sd	a5,16(a0)
    info = o.info;
   35b70:	0045c783          	lbu	a5,4(a1)
   35b74:	00f50223          	sb	a5,4(a0)
    other = o.other;
   35b78:	0055c783          	lbu	a5,5(a1)
   35b7c:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   35b80:	0065d783          	lhu	a5,6(a1)
   35b84:	00f51323          	sh	a5,6(a0)
  }
   35b88:	ec1ff06f          	jal	zero,35a48 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x28>

0000000000035b8c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)>:
      vector<_Tp, _Alloc>::
   35b8c:	fb010113          	addi	sp,sp,-80
   35b90:	04113423          	sd	ra,72(sp)
   35b94:	04813023          	sd	s0,64(sp)
   35b98:	02913c23          	sd	s1,56(sp)
   35b9c:	03213823          	sd	s2,48(sp)
   35ba0:	03313423          	sd	s3,40(sp)
   35ba4:	03413023          	sd	s4,32(sp)
   35ba8:	01513c23          	sd	s5,24(sp)
   35bac:	01613823          	sd	s6,16(sp)
   35bb0:	01713423          	sd	s7,8(sp)
   35bb4:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   35bb8:	00853903          	ld	s2,8(a0)
   35bbc:	00053a03          	ld	s4,0(a0)
   35bc0:	414907b3          	sub	a5,s2,s4
   35bc4:	4047d793          	srai	a5,a5,0x4
	if (max_size() - size() < __n)
   35bc8:	fff00713          	addi	a4,zero,-1
   35bcc:	00575713          	srli	a4,a4,0x5
   35bd0:	04e78463          	beq	a5,a4,35c18 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x8c>
   35bd4:	00050a93          	addi	s5,a0,0
   35bd8:	00058b93          	addi	s7,a1,0
   35bdc:	00060493          	addi	s1,a2,0
   35be0:	00058413          	addi	s0,a1,0
      return __a;
   35be4:	00078713          	addi	a4,a5,0
      if (__a < __b)
   35be8:	03490e63          	beq	s2,s4,35c24 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   35bec:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35bf0:	04f76263          	bltu	a4,a5,35c34 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa8>
   35bf4:	00070b13          	addi	s6,a4,0
   35bf8:	fff00793          	addi	a5,zero,-1
   35bfc:	0057d793          	srli	a5,a5,0x5
   35c00:	00e7f463          	bgeu	a5,a4,35c08 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x7c>
   35c04:	00078b13          	addi	s6,a5,0
    { return __lhs.base() - __rhs.base(); }
   35c08:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   35c0c:	00000993          	addi	s3,zero,0
   35c10:	02070e63          	beq	a4,zero,35c4c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xc0>
   35c14:	02c0006f          	jal	zero,35c40 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xb4>
	  __throw_length_error(__N(__s));
   35c18:	00001517          	auipc	a0,0x1
   35c1c:	c8850513          	addi	a0,a0,-888 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   35c20:	821e00ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   35c24:	00100713          	addi	a4,zero,1
   35c28:	fc5ff06f          	jal	zero,35bec <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x60>
      _ForwardIterator __cur = __result;
   35c2c:	00098693          	addi	a3,s3,0
   35c30:	0680006f          	jal	zero,35c98 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x10c>
   35c34:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35c38:	fff00b13          	addi	s6,zero,-1
   35c3c:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   35c40:	004b1513          	slli	a0,s6,0x4
   35c44:	8dde00ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   35c48:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   35c4c:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   35c50:	0004b703          	ld	a4,0(s1)
   35c54:	00e7b023          	sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   35c58:	0084b703          	ld	a4,8(s1)
	__r._M_pi = _M_pi;
   35c5c:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   35c60:	00e7b423          	sd	a4,8(a5)
	__r._M_ptr = nullptr;
   35c64:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   35c68:	fd4402e3          	beq	s0,s4,35c2c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa0>
   35c6c:	414b86b3          	sub	a3,s7,s4
   35c70:	00d986b3          	add	a3,s3,a3
   35c74:	000a0713          	addi	a4,s4,0
      _ForwardIterator __cur = __result;
   35c78:	00098793          	addi	a5,s3,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35c7c:	00073603          	ld	a2,0(a4)
   35c80:	00c7b023          	sd	a2,0(a5)
	_M_pi = __tmp;
   35c84:	00873603          	ld	a2,8(a4)
   35c88:	00c7b423          	sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35c8c:	01070713          	addi	a4,a4,16
   35c90:	01078793          	addi	a5,a5,16
   35c94:	fed794e3          	bne	a5,a3,35c7c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xf0>
	      ++__new_finish;
   35c98:	01068493          	addi	s1,a3,16
   35c9c:	03240663          	beq	s0,s2,35cc8 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x13c>
   35ca0:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   35ca4:	00048793          	addi	a5,s1,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35ca8:	00043703          	ld	a4,0(s0)
   35cac:	00e7b023          	sd	a4,0(a5)
	_M_pi = __tmp;
   35cb0:	00843703          	ld	a4,8(s0)
   35cb4:	00e7b423          	sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35cb8:	01040413          	addi	s0,s0,16
   35cbc:	01078793          	addi	a5,a5,16
   35cc0:	ff2414e3          	bne	s0,s2,35ca8 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x11c>
   35cc4:	017484b3          	add	s1,s1,s7
	if (__p)
   35cc8:	000a0663          	beq	s4,zero,35cd4 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x148>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   35ccc:	000a0513          	addi	a0,s4,0
   35cd0:	841e00ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   35cd4:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   35cd8:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   35cdc:	004b1b13          	slli	s6,s6,0x4
   35ce0:	016989b3          	add	s3,s3,s6
   35ce4:	013ab823          	sd	s3,16(s5)
    }
   35ce8:	04813083          	ld	ra,72(sp)
   35cec:	04013403          	ld	s0,64(sp)
   35cf0:	03813483          	ld	s1,56(sp)
   35cf4:	03013903          	ld	s2,48(sp)
   35cf8:	02813983          	ld	s3,40(sp)
   35cfc:	02013a03          	ld	s4,32(sp)
   35d00:	01813a83          	ld	s5,24(sp)
   35d04:	01013b03          	ld	s6,16(sp)
   35d08:	00813b83          	ld	s7,8(sp)
   35d0c:	00013c03          	ld	s8,0(sp)
   35d10:	05010113          	addi	sp,sp,80
   35d14:	00008067          	jalr	zero,0(ra)

0000000000035d18 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)>:
      vector<_Tp, _Alloc>::
   35d18:	fb010113          	addi	sp,sp,-80
   35d1c:	04113423          	sd	ra,72(sp)
   35d20:	04813023          	sd	s0,64(sp)
   35d24:	02913c23          	sd	s1,56(sp)
   35d28:	03213823          	sd	s2,48(sp)
   35d2c:	03313423          	sd	s3,40(sp)
   35d30:	03413023          	sd	s4,32(sp)
   35d34:	01513c23          	sd	s5,24(sp)
   35d38:	01613823          	sd	s6,16(sp)
   35d3c:	01713423          	sd	s7,8(sp)
   35d40:	01813023          	sd	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   35d44:	00853903          	ld	s2,8(a0)
   35d48:	00053a03          	ld	s4,0(a0)
   35d4c:	414907b3          	sub	a5,s2,s4
   35d50:	4047d793          	srai	a5,a5,0x4
	if (max_size() - size() < __n)
   35d54:	fff00713          	addi	a4,zero,-1
   35d58:	00575713          	srli	a4,a4,0x5
   35d5c:	04e78463          	beq	a5,a4,35da4 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x8c>
   35d60:	00050a93          	addi	s5,a0,0
   35d64:	00058b93          	addi	s7,a1,0
   35d68:	00060493          	addi	s1,a2,0
   35d6c:	00058413          	addi	s0,a1,0
      return __a;
   35d70:	00078713          	addi	a4,a5,0
      if (__a < __b)
   35d74:	03490e63          	beq	s2,s4,35db0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x98>
	const size_type __len = size() + (std::max)(size(), __n);
   35d78:	00e78733          	add	a4,a5,a4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35d7c:	04f76263          	bltu	a4,a5,35dc0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa8>
   35d80:	00070b13          	addi	s6,a4,0
   35d84:	fff00793          	addi	a5,zero,-1
   35d88:	0057d793          	srli	a5,a5,0x5
   35d8c:	00e7f463          	bgeu	a5,a4,35d94 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x7c>
   35d90:	00078b13          	addi	s6,a5,0
   35d94:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   35d98:	00000993          	addi	s3,zero,0
   35d9c:	02070e63          	beq	a4,zero,35dd8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xc0>
   35da0:	02c0006f          	jal	zero,35dcc <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xb4>
	  __throw_length_error(__N(__s));
   35da4:	00001517          	auipc	a0,0x1
   35da8:	afc50513          	addi	a0,a0,-1284 # 368a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   35dac:	e94e00ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   35db0:	00100713          	addi	a4,zero,1
   35db4:	fc5ff06f          	jal	zero,35d78 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x60>
      _ForwardIterator __cur = __result;
   35db8:	00098693          	addi	a3,s3,0
   35dbc:	0680006f          	jal	zero,35e24 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x10c>
   35dc0:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   35dc4:	fff00b13          	addi	s6,zero,-1
   35dc8:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   35dcc:	004b1513          	slli	a0,s6,0x4
   35dd0:	f50e00ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   35dd4:	00050993          	addi	s3,a0,0
	  _Alloc_traits::construct(this->_M_impl,
   35dd8:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   35ddc:	0004b703          	ld	a4,0(s1)
   35de0:	00e7b023          	sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   35de4:	0084b703          	ld	a4,8(s1)
	__r._M_pi = _M_pi;
   35de8:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   35dec:	00e7b423          	sd	a4,8(a5)
	__r._M_ptr = nullptr;
   35df0:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   35df4:	fd4402e3          	beq	s0,s4,35db8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa0>
   35df8:	414b86b3          	sub	a3,s7,s4
   35dfc:	00d986b3          	add	a3,s3,a3
   35e00:	000a0713          	addi	a4,s4,0
      _ForwardIterator __cur = __result;
   35e04:	00098793          	addi	a5,s3,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35e08:	00073603          	ld	a2,0(a4)
   35e0c:	00c7b023          	sd	a2,0(a5)
	_M_pi = __tmp;
   35e10:	00873603          	ld	a2,8(a4)
   35e14:	00c7b423          	sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35e18:	01070713          	addi	a4,a4,16
   35e1c:	01078793          	addi	a5,a5,16
   35e20:	fed794e3          	bne	a5,a3,35e08 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xf0>
	      ++__new_finish;
   35e24:	01068493          	addi	s1,a3,16
   35e28:	03240663          	beq	s0,s2,35e54 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x13c>
   35e2c:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   35e30:	00048793          	addi	a5,s1,0
      : _M_ptr(__r._M_ptr), _M_refcount()
   35e34:	00043703          	ld	a4,0(s0)
   35e38:	00e7b023          	sd	a4,0(a5)
	_M_pi = __tmp;
   35e3c:	00843703          	ld	a4,8(s0)
   35e40:	00e7b423          	sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   35e44:	01040413          	addi	s0,s0,16
   35e48:	01078793          	addi	a5,a5,16
   35e4c:	ff2414e3          	bne	s0,s2,35e34 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x11c>
   35e50:	017484b3          	add	s1,s1,s7
	if (__p)
   35e54:	000a0663          	beq	s4,zero,35e60 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x148>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   35e58:	000a0513          	addi	a0,s4,0
   35e5c:	eb4e00ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   35e60:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   35e64:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   35e68:	004b1b13          	slli	s6,s6,0x4
   35e6c:	016989b3          	add	s3,s3,s6
   35e70:	013ab823          	sd	s3,16(s5)
    }
   35e74:	04813083          	ld	ra,72(sp)
   35e78:	04013403          	ld	s0,64(sp)
   35e7c:	03813483          	ld	s1,56(sp)
   35e80:	03013903          	ld	s2,48(sp)
   35e84:	02813983          	ld	s3,40(sp)
   35e88:	02013a03          	ld	s4,32(sp)
   35e8c:	01813a83          	ld	s5,24(sp)
   35e90:	01013b03          	ld	s6,16(sp)
   35e94:	00813b83          	ld	s7,8(sp)
   35e98:	00013c03          	ld	s8,0(sp)
   35e9c:	05010113          	addi	sp,sp,80
   35ea0:	00008067          	jalr	zero,0(ra)

0000000000035ea4 <elf::create_mmap_loader(int)>:
      throw range_error("offset exceeds file size");
    return (const char *)base + offset;
  }
};

std::shared_ptr<loader> create_mmap_loader(int fd) {
   35ea4:	fb010113          	addi	sp,sp,-80
   35ea8:	04113423          	sd	ra,72(sp)
   35eac:	04813023          	sd	s0,64(sp)
   35eb0:	02913c23          	sd	s1,56(sp)
   35eb4:	03213823          	sd	s2,48(sp)
   35eb8:	03313423          	sd	s3,40(sp)
   35ebc:	00050913          	addi	s2,a0,0
   35ec0:	00058493          	addi	s1,a1,0
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   35ec4:	05000513          	addi	a0,zero,80
   35ec8:	e58e00ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   35ecc:	00050413          	addi	s0,a0,0
   35ed0:	00052423          	sw	zero,8(a0)
   35ed4:	00052623          	sw	zero,12(a0)
   35ed8:	00052823          	sw	zero,16(a0)
   35edc:	00052a23          	sw	zero,20(a0)
   35ee0:	00052c23          	sw	zero,24(a0)
   35ee4:	00052e23          	sw	zero,28(a0)
   35ee8:	02053023          	sd	zero,32(a0)
   35eec:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   35ef0:	00100793          	addi	a5,zero,1
   35ef4:	02f52823          	sw	a5,48(a0)
   35ef8:	02f52a23          	sw	a5,52(a0)
	: _M_impl(__a)
   35efc:	0000c797          	auipc	a5,0xc
   35f00:	5b47b783          	ld	a5,1460(a5) # 424b0 <vtable for std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x6f8>
   35f04:	01078793          	addi	a5,a5,16
   35f08:	00f53023          	sd	a5,0(a0)
   35f0c:	03850993          	addi	s3,a0,56
  mmap_loader(int fd) {
   35f10:	0000c797          	auipc	a5,0xc
   35f14:	5507b783          	ld	a5,1360(a5) # 42460 <vtable for elf::mmap_loader@@Base+0x6d0>
   35f18:	01078793          	addi	a5,a5,16
   35f1c:	02f53c23          	sd	a5,56(a0)
    off_t end = lseek(fd, 0, SEEK_END);
   35f20:	00200613          	addi	a2,zero,2
   35f24:	00000593          	addi	a1,zero,0
   35f28:	00048513          	addi	a0,s1,0
   35f2c:	f44e00ef          	jal	ra,16670 <lseek@plt>
    if (end == (off_t)-1)
   35f30:	fff00793          	addi	a5,zero,-1
   35f34:	02f50e63          	beq	a0,a5,35f70 <elf::create_mmap_loader(int)+0xcc>
   35f38:	00050593          	addi	a1,a0,0
    lim = end;
   35f3c:	04a43423          	sd	a0,72(s0)
    base = mmap(nullptr, lim, PROT_READ, MAP_SHARED, fd, 0);
   35f40:	00000793          	addi	a5,zero,0
   35f44:	00048713          	addi	a4,s1,0
   35f48:	00100693          	addi	a3,zero,1
   35f4c:	00100613          	addi	a2,zero,1
   35f50:	00000513          	addi	a0,zero,0
   35f54:	d4ce00ef          	jal	ra,164a0 <mmap@plt>
   35f58:	04a43023          	sd	a0,64(s0)
    if (base == MAP_FAILED)
   35f5c:	fff00793          	addi	a5,zero,-1
   35f60:	06f50663          	beq	a0,a5,35fcc <elf::create_mmap_loader(int)+0x128>
    close(fd);
   35f64:	00048513          	addi	a0,s1,0
   35f68:	869e00ef          	jal	ra,167d0 <close@plt>
   35f6c:	0e00006f          	jal	zero,3604c <elf::create_mmap_loader(int)+0x1a8>
      throw system_error(errno, system_category(), "finding file length");
   35f70:	02000513          	addi	a0,zero,32
   35f74:	cace00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   35f78:	00050913          	addi	s2,a0,0
   35f7c:	845e00ef          	jal	ra,167c0 <__errno_location@plt>
   35f80:	00052483          	lw	s1,0(a0)
   35f84:	cdce00ef          	jal	ra,16460 <std::_V2::system_category()@plt>
   35f88:	00050613          	addi	a2,a0,0
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }
   35f8c:	00912823          	sw	s1,16(sp)

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }
   35f90:	00004697          	auipc	a3,0x4
   35f94:	66068693          	addi	a3,a3,1632 # 3a5f0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   35f98:	01013583          	ld	a1,16(sp)
   35f9c:	00090513          	addi	a0,s2,0
   35fa0:	0000c317          	auipc	t1,0xc
   35fa4:	49033303          	ld	t1,1168(t1) # 42430 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc218>
   35fa8:	000300e7          	jalr	ra,0(t1)
   35fac:	0000c617          	auipc	a2,0xc
   35fb0:	47463603          	ld	a2,1140(a2) # 42420 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   35fb4:	0000c597          	auipc	a1,0xc
   35fb8:	33c5b583          	ld	a1,828(a1) # 422f0 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   35fbc:	00090513          	addi	a0,s2,0
   35fc0:	f00e00ef          	jal	ra,166c0 <__cxa_throw@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   35fc4:	00050493          	addi	s1,a0,0
   35fc8:	0640006f          	jal	zero,3602c <elf::create_mmap_loader(int)+0x188>
      throw system_error(errno, system_category(), "mmap'ing file");
   35fcc:	02000513          	addi	a0,zero,32
   35fd0:	c50e00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   35fd4:	00050913          	addi	s2,a0,0
   35fd8:	fe8e00ef          	jal	ra,167c0 <__errno_location@plt>
   35fdc:	00052483          	lw	s1,0(a0)
   35fe0:	c80e00ef          	jal	ra,16460 <std::_V2::system_category()@plt>
   35fe4:	00050613          	addi	a2,a0,0
    : _M_value(__v), _M_cat(&__cat) { }
   35fe8:	00912023          	sw	s1,0(sp)
    : system_error(error_code(__v, __ecat), __what) { }
   35fec:	00004697          	auipc	a3,0x4
   35ff0:	61c68693          	addi	a3,a3,1564 # 3a608 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98>
   35ff4:	00013583          	ld	a1,0(sp)
   35ff8:	00090513          	addi	a0,s2,0
   35ffc:	0000c317          	auipc	t1,0xc
   36000:	43433303          	ld	t1,1076(t1) # 42430 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc218>
   36004:	000300e7          	jalr	ra,0(t1)
   36008:	0000c617          	auipc	a2,0xc
   3600c:	41863603          	ld	a2,1048(a2) # 42420 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   36010:	0000c597          	auipc	a1,0xc
   36014:	2e05b583          	ld	a1,736(a1) # 422f0 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   36018:	00090513          	addi	a0,s2,0
   3601c:	ea4e00ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw system_error(errno, system_category(), "finding file length");
   36020:	00050493          	addi	s1,a0,0
   36024:	00090513          	addi	a0,s2,0
   36028:	ca8e00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   3602c:	00040513          	addi	a0,s0,0
   36030:	ce0e00ef          	jal	ra,16510 <operator delete(void*)@plt>
   36034:	00048513          	addi	a0,s1,0
   36038:	eb8e00ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      throw system_error(errno, system_category(), "mmap'ing file");
   3603c:	00050493          	addi	s1,a0,0
   36040:	00090513          	addi	a0,s2,0
   36044:	c8ce00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   36048:	fe5ff06f          	jal	zero,3602c <elf::create_mmap_loader(int)+0x188>
	: _M_ptr(__r._M_ptr), _M_refcount()
   3604c:	01393023          	sd	s3,0(s2)
	_M_pi = __tmp;
   36050:	00893423          	sd	s0,8(s2)
  return make_shared<mmap_loader>(fd);
}
   36054:	00090513          	addi	a0,s2,0
   36058:	04813083          	ld	ra,72(sp)
   3605c:	04013403          	ld	s0,64(sp)
   36060:	03813483          	ld	s1,56(sp)
   36064:	03013903          	ld	s2,48(sp)
   36068:	02813983          	ld	s3,40(sp)
   3606c:	05010113          	addi	sp,sp,80
   36070:	00008067          	jalr	zero,0(ra)

0000000000036074 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   36074:	00008067          	jalr	zero,0(ra)

0000000000036078 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   36078:	ff010113          	addi	sp,sp,-16
   3607c:	00113423          	sd	ra,8(sp)
      __pointer->~_Tp();
   36080:	03853783          	ld	a5,56(a0)
   36084:	0007b783          	ld	a5,0(a5)
   36088:	03850513          	addi	a0,a0,56
   3608c:	000780e7          	jalr	ra,0(a5)
      }
   36090:	00813083          	ld	ra,8(sp)
   36094:	01010113          	addi	sp,sp,16
   36098:	00008067          	jalr	zero,0(ra)

000000000003609c <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   3609c:	ff010113          	addi	sp,sp,-16
   360a0:	00113423          	sd	ra,8(sp)
   360a4:	00813023          	sd	s0,0(sp)
   360a8:	03850413          	addi	s0,a0,56
	    ||
   360ac:	0000c797          	auipc	a5,0xc
   360b0:	48c7b783          	ld	a5,1164(a5) # 42538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xbd90>
   360b4:	02f58c63          	beq	a1,a5,360ec <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    if (__name == __arg.__name)
   360b8:	0085b503          	ld	a0,8(a1)
   360bc:	0000c797          	auipc	a5,0xc
   360c0:	3547b783          	ld	a5,852(a5) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   360c4:	02f50463          	beq	a0,a5,360ec <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   360c8:	00054703          	lbu	a4,0(a0)
   360cc:	02a00793          	addi	a5,zero,42
   360d0:	02f70863          	beq	a4,a5,36100 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x64>
   360d4:	0000c597          	auipc	a1,0xc
   360d8:	33c5b583          	ld	a1,828(a1) # 42410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xbeb8>
   360dc:	a84e00ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   360e0:	00153513          	sltiu	a0,a0,1
   360e4:	40a00533          	sub	a0,zero,a0
   360e8:	00a47433          	and	s0,s0,a0
      }
   360ec:	00040513          	addi	a0,s0,0
   360f0:	00813083          	ld	ra,8(sp)
   360f4:	00013403          	ld	s0,0(sp)
   360f8:	01010113          	addi	sp,sp,16
   360fc:	00008067          	jalr	zero,0(ra)
	return nullptr;
   36100:	00000413          	addi	s0,zero,0
   36104:	fe9ff06f          	jal	zero,360ec <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>

0000000000036108 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   36108:	ff010113          	addi	sp,sp,-16
   3610c:	00113423          	sd	ra,8(sp)
   36110:	c00e00ef          	jal	ra,16510 <operator delete(void*)@plt>
   36114:	00813083          	ld	ra,8(sp)
   36118:	01010113          	addi	sp,sp,16
   3611c:	00008067          	jalr	zero,0(ra)

0000000000036120 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   36120:	ff010113          	addi	sp,sp,-16
   36124:	00113423          	sd	ra,8(sp)
   36128:	be8e00ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   3612c:	00813083          	ld	ra,8(sp)
   36130:	01010113          	addi	sp,sp,16
   36134:	00008067          	jalr	zero,0(ra)

0000000000036138 <elf::mmap_loader::load(long, unsigned long)>:
    if (offset + size > lim)
   36138:	00c58633          	add	a2,a1,a2
   3613c:	01053783          	ld	a5,16(a0)
   36140:	00c7e863          	bltu	a5,a2,36150 <elf::mmap_loader::load(long, unsigned long)+0x18>
    return (const char *)base + offset;
   36144:	00853503          	ld	a0,8(a0)
   36148:	00b50533          	add	a0,a0,a1
  }
   3614c:	00008067          	jalr	zero,0(ra)
  const void *load(off_t offset, size_t size) {
   36150:	fe010113          	addi	sp,sp,-32
   36154:	00113c23          	sd	ra,24(sp)
   36158:	00813823          	sd	s0,16(sp)
   3615c:	00913423          	sd	s1,8(sp)
      throw range_error("offset exceeds file size");
   36160:	01000513          	addi	a0,zero,16
   36164:	abce00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   36168:	00050493          	addi	s1,a0,0
   3616c:	00004597          	auipc	a1,0x4
   36170:	45c58593          	addi	a1,a1,1116 # 3a5c8 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58>
   36174:	d5ce00ef          	jal	ra,166d0 <std::range_error::range_error(char const*)@plt>
   36178:	0000c617          	auipc	a2,0xc
   3617c:	26863603          	ld	a2,616(a2) # 423e0 <std::range_error::~range_error()@GLIBCXX_3.4>
   36180:	0000c597          	auipc	a1,0xc
   36184:	3d05b583          	ld	a1,976(a1) # 42550 <typeinfo for std::range_error@GLIBCXX_3.4>
   36188:	00048513          	addi	a0,s1,0
   3618c:	d34e00ef          	jal	ra,166c0 <__cxa_throw@plt>
   36190:	00050413          	addi	s0,a0,0
   36194:	00048513          	addi	a0,s1,0
   36198:	b38e00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   3619c:	00040513          	addi	a0,s0,0
   361a0:	d50e00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000361a4 <elf::mmap_loader::~mmap_loader()>:
  ~mmap_loader() { munmap(base, lim); }
   361a4:	ff010113          	addi	sp,sp,-16
   361a8:	00113423          	sd	ra,8(sp)
   361ac:	0000c797          	auipc	a5,0xc
   361b0:	2b47b783          	ld	a5,692(a5) # 42460 <vtable for elf::mmap_loader@@Base+0x6d0>
   361b4:	01078793          	addi	a5,a5,16
   361b8:	00f53023          	sd	a5,0(a0)
   361bc:	01053583          	ld	a1,16(a0)
   361c0:	00853503          	ld	a0,8(a0)
   361c4:	b1ce00ef          	jal	ra,164e0 <munmap@plt>
   361c8:	00813083          	ld	ra,8(sp)
   361cc:	01010113          	addi	sp,sp,16
   361d0:	00008067          	jalr	zero,0(ra)

00000000000361d4 <elf::mmap_loader::~mmap_loader()>:
   361d4:	ff010113          	addi	sp,sp,-16
   361d8:	00113423          	sd	ra,8(sp)
   361dc:	00813023          	sd	s0,0(sp)
   361e0:	00050413          	addi	s0,a0,0
   361e4:	0000c797          	auipc	a5,0xc
   361e8:	27c7b783          	ld	a5,636(a5) # 42460 <vtable for elf::mmap_loader@@Base+0x6d0>
   361ec:	01078793          	addi	a5,a5,16
   361f0:	00f53023          	sd	a5,0(a0)
   361f4:	01053583          	ld	a1,16(a0)
   361f8:	00853503          	ld	a0,8(a0)
   361fc:	ae4e00ef          	jal	ra,164e0 <munmap@plt>
   36200:	00040513          	addi	a0,s0,0
   36204:	b0ce00ef          	jal	ra,16510 <operator delete(void*)@plt>
   36208:	00813083          	ld	ra,8(sp)
   3620c:	00013403          	ld	s0,0(sp)
   36210:	01010113          	addi	sp,sp,16
   36214:	00008067          	jalr	zero,0(ra)

0000000000036218 <std::system_error::system_error(std::error_code, char const*)>:
    system_error(error_code __ec, const char* __what)
   36218:	f6010113          	addi	sp,sp,-160
   3621c:	08113c23          	sd	ra,152(sp)
   36220:	08813823          	sd	s0,144(sp)
   36224:	08913423          	sd	s1,136(sp)
   36228:	09213023          	sd	s2,128(sp)
   3622c:	07313c23          	sd	s3,120(sp)
   36230:	00050493          	addi	s1,a0,0
   36234:	00058713          	addi	a4,a1,0
   36238:	00b13023          	sd	a1,0(sp)
   3623c:	00c13423          	sd	a2,8(sp)
   36240:	00068913          	addi	s2,a3,0
    category() const noexcept { return *_M_cat; }
   36244:	00060593          	addi	a1,a2,0
    { return category().message(value()); }
   36248:	00063783          	ld	a5,0(a2)
   3624c:	0207b783          	ld	a5,32(a5)
   36250:	0007061b          	addiw	a2,a4,0
   36254:	05010413          	addi	s0,sp,80
   36258:	00040513          	addi	a0,s0,0
   3625c:	000780e7          	jalr	ra,0(a5)
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   36260:	00200713          	addi	a4,zero,2
   36264:	00004697          	auipc	a3,0x4
   36268:	38468693          	addi	a3,a3,900 # 3a5e8 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x78>
   3626c:	00000613          	addi	a2,zero,0
   36270:	00000593          	addi	a1,zero,0
   36274:	00040513          	addi	a0,s0,0
   36278:	be8e00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   3627c:	00050413          	addi	s0,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   36280:	04010793          	addi	a5,sp,64
   36284:	02f13823          	sd	a5,48(sp)
      { return _M_dataplus._M_p; }
   36288:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   3628c:	01050993          	addi	s3,a0,16
	if (__str._M_is_local())
   36290:	05378463          	beq	a5,s3,362d8 <std::system_error::system_error(std::error_code, char const*)+0xc0>
      { _M_dataplus._M_p = __p; }
   36294:	02f13823          	sd	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   36298:	01053783          	ld	a5,16(a0)
   3629c:	04f13023          	sd	a5,64(sp)
      { _M_string_length = __length; }
   362a0:	00843783          	ld	a5,8(s0)
   362a4:	02f13c23          	sd	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   362a8:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   362ac:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   362b0:	00040823          	sb	zero,16(s0)
	return __builtin_strlen(__s);
   362b4:	00090513          	addi	a0,s2,0
   362b8:	958e00ef          	jal	ra,16410 <strlen@plt>
   362bc:	00050713          	addi	a4,a0,0
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   362c0:	00090693          	addi	a3,s2,0
   362c4:	00000613          	addi	a2,zero,0
   362c8:	00000593          	addi	a1,zero,0
   362cc:	03010513          	addi	a0,sp,48
   362d0:	b90e00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   362d4:	0200006f          	jal	zero,362f4 <std::system_error::system_error(std::error_code, char const*)+0xdc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   362d8:	00853603          	ld	a2,8(a0)
   362dc:	00160613          	addi	a2,a2,1
	if (__n == 0)
   362e0:	fc0600e3          	beq	a2,zero,362a0 <std::system_error::system_error(std::error_code, char const*)+0x88>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   362e4:	00098593          	addi	a1,s3,0
   362e8:	04010513          	addi	a0,sp,64
   362ec:	ac4e00ef          	jal	ra,165b0 <memcpy@plt>
   362f0:	fb1ff06f          	jal	zero,362a0 <std::system_error::system_error(std::error_code, char const*)+0x88>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   362f4:	00050413          	addi	s0,a0,0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   362f8:	02010793          	addi	a5,sp,32
   362fc:	00f13823          	sd	a5,16(sp)
      { return _M_dataplus._M_p; }
   36300:	00053783          	ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   36304:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   36308:	03278a63          	beq	a5,s2,3633c <std::system_error::system_error(std::error_code, char const*)+0x124>
      { _M_dataplus._M_p = __p; }
   3630c:	00f13823          	sd	a5,16(sp)
      { _M_allocated_capacity = __capacity; }
   36310:	01053783          	ld	a5,16(a0)
   36314:	02f13023          	sd	a5,32(sp)
      { _M_string_length = __length; }
   36318:	00843783          	ld	a5,8(s0)
   3631c:	00f13c23          	sd	a5,24(sp)
      { _M_dataplus._M_p = __p; }
   36320:	01243023          	sd	s2,0(s0)
      { _M_string_length = __length; }
   36324:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   36328:	00040823          	sb	zero,16(s0)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
   3632c:	01010593          	addi	a1,sp,16
   36330:	00048513          	addi	a0,s1,0
   36334:	a6ce00ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   36338:	0200006f          	jal	zero,36358 <std::system_error::system_error(std::error_code, char const*)+0x140>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   3633c:	00853603          	ld	a2,8(a0)
   36340:	00160613          	addi	a2,a2,1
	if (__n == 0)
   36344:	fc060ae3          	beq	a2,zero,36318 <std::system_error::system_error(std::error_code, char const*)+0x100>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   36348:	00090593          	addi	a1,s2,0
   3634c:	02010513          	addi	a0,sp,32
   36350:	a60e00ef          	jal	ra,165b0 <memcpy@plt>
   36354:	fc5ff06f          	jal	zero,36318 <std::system_error::system_error(std::error_code, char const*)+0x100>
      { return _M_dataplus._M_p; }
   36358:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   3635c:	02010793          	addi	a5,sp,32
   36360:	00f50463          	beq	a0,a5,36368 <std::system_error::system_error(std::error_code, char const*)+0x150>
   36364:	9ace00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   36368:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   3636c:	04010793          	addi	a5,sp,64
   36370:	00f50463          	beq	a0,a5,36378 <std::system_error::system_error(std::error_code, char const*)+0x160>
   36374:	99ce00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   36378:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   3637c:	06010793          	addi	a5,sp,96
   36380:	00f50463          	beq	a0,a5,36388 <std::system_error::system_error(std::error_code, char const*)+0x170>
   36384:	98ce00ef          	jal	ra,16510 <operator delete(void*)@plt>
   36388:	0000c797          	auipc	a5,0xc
   3638c:	2007b783          	ld	a5,512(a5) # 42588 <vtable for std::system_error@GLIBCXX_3.4.11>
   36390:	01078793          	addi	a5,a5,16
   36394:	00f4b023          	sd	a5,0(s1)
   36398:	00013783          	ld	a5,0(sp)
   3639c:	00f4b823          	sd	a5,16(s1)
   363a0:	00813783          	ld	a5,8(sp)
   363a4:	00f4bc23          	sd	a5,24(s1)
   363a8:	09813083          	ld	ra,152(sp)
   363ac:	09013403          	ld	s0,144(sp)
   363b0:	08813483          	ld	s1,136(sp)
   363b4:	08013903          	ld	s2,128(sp)
   363b8:	07813983          	ld	s3,120(sp)
   363bc:	0a010113          	addi	sp,sp,160
   363c0:	00008067          	jalr	zero,0(ra)
      { return _M_dataplus._M_p; }
   363c4:	00050413          	addi	s0,a0,0
   363c8:	01013503          	ld	a0,16(sp)
	if (!_M_is_local())
   363cc:	02010793          	addi	a5,sp,32
   363d0:	00f50463          	beq	a0,a5,363d8 <std::system_error::system_error(std::error_code, char const*)+0x1c0>
   363d4:	93ce00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   363d8:	03013503          	ld	a0,48(sp)
	if (!_M_is_local())
   363dc:	04010793          	addi	a5,sp,64
   363e0:	00f50463          	beq	a0,a5,363e8 <std::system_error::system_error(std::error_code, char const*)+0x1d0>
   363e4:	92ce00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   363e8:	05013503          	ld	a0,80(sp)
	if (!_M_is_local())
   363ec:	06010793          	addi	a5,sp,96
   363f0:	00f50463          	beq	a0,a5,363f8 <std::system_error::system_error(std::error_code, char const*)+0x1e0>
   363f4:	91ce00ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   363f8:	00040513          	addi	a0,s0,0
   363fc:	af4e00ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   36400:	00050413          	addi	s0,a0,0
   36404:	fd5ff06f          	jal	zero,363d8 <std::system_error::system_error(std::error_code, char const*)+0x1c0>
   36408:	00050413          	addi	s0,a0,0
   3640c:	fddff06f          	jal	zero,363e8 <std::system_error::system_error(std::error_code, char const*)+0x1d0>

0000000000036410 <__libc_csu_init>:
   the libc.a module in that it doesn't call the preinit array.  */


void
__libc_csu_init (int argc, char **argv, char **envp)
{
   36410:	7139                	c.addi16sp	sp,-64
   36412:	f822                	c.sdsp	s0,48(sp)
   36414:	f04a                	c.sdsp	s2,32(sp)

#if ELF_INITFINI
  _init ();
#endif

  const size_t size = __init_array_end - __init_array_start;
   36416:	0000b797          	auipc	a5,0xb
   3641a:	2d278793          	addi	a5,a5,722 # 416e8 <__do_global_dtors_aux_fini_array_entry>
   3641e:	0000b417          	auipc	s0,0xb
   36422:	2ba40413          	addi	s0,s0,698 # 416d8 <__frame_dummy_init_array_entry>
{
   36426:	fc06                	c.sdsp	ra,56(sp)
   36428:	f426                	c.sdsp	s1,40(sp)
   3642a:	ec4e                	c.sdsp	s3,24(sp)
   3642c:	e852                	c.sdsp	s4,16(sp)
   3642e:	e456                	c.sdsp	s5,8(sp)
  const size_t size = __init_array_end - __init_array_start;
   36430:	40878933          	sub	s2,a5,s0
  for (size_t i = 0; i < size; i++)
   36434:	02878163          	beq	a5,s0,36456 <__libc_csu_init+0x46>
   36438:	89aa                	c.mv	s3,a0
   3643a:	8a2e                	c.mv	s4,a1
   3643c:	8ab2                	c.mv	s5,a2
   3643e:	40395913          	srai	s2,s2,0x3
   36442:	4481                	c.li	s1,0
      (*__init_array_start [i]) (argc, argv, envp);
   36444:	601c                	c.ld	a5,0(s0)
   36446:	8656                	c.mv	a2,s5
   36448:	85d2                	c.mv	a1,s4
   3644a:	854e                	c.mv	a0,s3
  for (size_t i = 0; i < size; i++)
   3644c:	0485                	c.addi	s1,1
      (*__init_array_start [i]) (argc, argv, envp);
   3644e:	9782                	c.jalr	a5
  for (size_t i = 0; i < size; i++)
   36450:	0421                	c.addi	s0,8
   36452:	ff24e9e3          	bltu	s1,s2,36444 <__libc_csu_init+0x34>
}
   36456:	70e2                	c.ldsp	ra,56(sp)
   36458:	7442                	c.ldsp	s0,48(sp)
   3645a:	74a2                	c.ldsp	s1,40(sp)
   3645c:	7902                	c.ldsp	s2,32(sp)
   3645e:	69e2                	c.ldsp	s3,24(sp)
   36460:	6a42                	c.ldsp	s4,16(sp)
   36462:	6aa2                	c.ldsp	s5,8(sp)
   36464:	6121                	c.addi16sp	sp,64
   36466:	8082                	c.jr	ra

0000000000036468 <__libc_csu_fini>:

# if ELF_INITFINI
  _fini ();
# endif
#endif
}
   36468:	8082                	c.jr	ra
