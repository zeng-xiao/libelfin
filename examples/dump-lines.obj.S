
dump-lines:     file format elf64-littleriscv


Disassembly of section .plt:

0000000000016310 <_PROCEDURE_LINKAGE_TABLE_>:
   16310:	97 33 02 00 33 03 c3 41 03 be 83 d0 13 03 43 fd     .3..3..A......C.
   16320:	93 82 83 d0 13 53 13 00 83 b2 82 00 67 00 0e 00     .....S......g...

0000000000016330 <operator new[](unsigned long)@plt>:
   16330:	00023e17          	auipc	t3,0x23
   16334:	cf8e3e03          	ld	t3,-776(t3) # 39028 <operator new[](unsigned long)@GLIBCXX_3.4>
   16338:	000e0367          	jalr	t1,0(t3)
   1633c:	00000013          	addi	zero,zero,0

0000000000016340 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>:
   16340:	00023e17          	auipc	t3,0x23
   16344:	cf0e3e03          	ld	t3,-784(t3) # 39030 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4>
   16348:	000e0367          	jalr	t1,0(t3)
   1634c:	00000013          	addi	zero,zero,0

0000000000016350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>:
   16350:	00023e17          	auipc	t3,0x23
   16354:	ce8e3e03          	ld	t3,-792(t3) # 39038 <__gnu_cxx::__atomic_add(int volatile*, int)@GLIBCXX_3.4>
   16358:	000e0367          	jalr	t1,0(t3)
   1635c:	00000013          	addi	zero,zero,0

0000000000016360 <strcmp@plt>:
   16360:	00023e17          	auipc	t3,0x23
   16364:	ce0e3e03          	ld	t3,-800(t3) # 39040 <strcmp@GLIBC_2.27>
   16368:	000e0367          	jalr	t1,0(t3)
   1636c:	00000013          	addi	zero,zero,0

0000000000016370 <__bswapsi2@plt>:
   16370:	00023e17          	auipc	t3,0x23
   16374:	cd8e3e03          	ld	t3,-808(t3) # 39048 <__bswapsi2@GCC_4.3.0>
   16378:	000e0367          	jalr	t1,0(t3)
   1637c:	00000013          	addi	zero,zero,0

0000000000016380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>:
   16380:	00023e17          	auipc	t3,0x23
   16384:	cd0e3e03          	ld	t3,-816(t3) # 39050 <__gnu_cxx::__exchange_and_add(int volatile*, int)@GLIBCXX_3.4>
   16388:	000e0367          	jalr	t1,0(t3)
   1638c:	00000013          	addi	zero,zero,0

0000000000016390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>:
   16390:	00023e17          	auipc	t3,0x23
   16394:	cc8e3e03          	ld	t3,-824(t3) # 39058 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@GLIBCXX_3.4.21>
   16398:	000e0367          	jalr	t1,0(t3)
   1639c:	00000013          	addi	zero,zero,0

00000000000163a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>:
   163a0:	00023e17          	auipc	t3,0x23
   163a4:	cc0e3e03          	ld	t3,-832(t3) # 39060 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@GLIBCXX_3.4.21>
   163a8:	000e0367          	jalr	t1,0(t3)
   163ac:	00000013          	addi	zero,zero,0

00000000000163b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>:
   163b0:	00023e17          	auipc	t3,0x23
   163b4:	cb8e3e03          	ld	t3,-840(t3) # 39068 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@GLIBCXX_3.4.21>
   163b8:	000e0367          	jalr	t1,0(t3)
   163bc:	00000013          	addi	zero,zero,0

00000000000163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>:
   163c0:	00023e17          	auipc	t3,0x23
   163c4:	cb0e3e03          	ld	t3,-848(t3) # 39070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@GLIBCXX_3.4.21>
   163c8:	000e0367          	jalr	t1,0(t3)
   163cc:	00000013          	addi	zero,zero,0

00000000000163d0 <__libc_start_main@plt>:
   163d0:	00023e17          	auipc	t3,0x23
   163d4:	ca8e3e03          	ld	t3,-856(t3) # 39078 <__libc_start_main@GLIBC_2.27>
   163d8:	000e0367          	jalr	t1,0(t3)
   163dc:	00000013          	addi	zero,zero,0

00000000000163e0 <std::__throw_bad_alloc()@plt>:
   163e0:	00023e17          	auipc	t3,0x23
   163e4:	ca0e3e03          	ld	t3,-864(t3) # 39080 <std::__throw_bad_alloc()@GLIBCXX_3.4>
   163e8:	000e0367          	jalr	t1,0(t3)
   163ec:	00000013          	addi	zero,zero,0

00000000000163f0 <std::runtime_error::runtime_error(char const*)@plt>:
   163f0:	00023e17          	auipc	t3,0x23
   163f4:	c98e3e03          	ld	t3,-872(t3) # 39088 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   163f8:	000e0367          	jalr	t1,0(t3)
   163fc:	00000013          	addi	zero,zero,0

0000000000016400 <__cxa_begin_catch@plt>:
   16400:	00023e17          	auipc	t3,0x23
   16404:	c90e3e03          	ld	t3,-880(t3) # 39090 <__cxa_begin_catch@CXXABI_1.3>
   16408:	000e0367          	jalr	t1,0(t3)
   1640c:	00000013          	addi	zero,zero,0

0000000000016410 <strlen@plt>:
   16410:	00023e17          	auipc	t3,0x23
   16414:	c88e3e03          	ld	t3,-888(t3) # 39098 <strlen@GLIBC_2.27>
   16418:	000e0367          	jalr	t1,0(t3)
   1641c:	00000013          	addi	zero,zero,0

0000000000016420 <__cxa_allocate_exception@plt>:
   16420:	00023e17          	auipc	t3,0x23
   16424:	c80e3e03          	ld	t3,-896(t3) # 390a0 <__cxa_allocate_exception@CXXABI_1.3>
   16428:	000e0367          	jalr	t1,0(t3)
   1642c:	00000013          	addi	zero,zero,0

0000000000016430 <putchar@plt>:
   16430:	00023e17          	auipc	t3,0x23
   16434:	c78e3e03          	ld	t3,-904(t3) # 390a8 <putchar@GLIBC_2.27>
   16438:	000e0367          	jalr	t1,0(t3)
   1643c:	00000013          	addi	zero,zero,0

0000000000016440 <std::__throw_length_error(char const*)@plt>:
   16440:	00023e17          	auipc	t3,0x23
   16444:	c70e3e03          	ld	t3,-912(t3) # 390b0 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
   16448:	000e0367          	jalr	t1,0(t3)
   1644c:	00000013          	addi	zero,zero,0

0000000000016450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16450:	00023e17          	auipc	t3,0x23
   16454:	c68e3e03          	ld	t3,-920(t3) # 390b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16458:	000e0367          	jalr	t1,0(t3)
   1645c:	00000013          	addi	zero,zero,0

0000000000016460 <std::_V2::system_category()@plt>:
   16460:	00023e17          	auipc	t3,0x23
   16464:	c60e3e03          	ld	t3,-928(t3) # 390c0 <std::_V2::system_category()@GLIBCXX_3.4.21>
   16468:	000e0367          	jalr	t1,0(t3)
   1646c:	00000013          	addi	zero,zero,0

0000000000016470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
   16470:	00023e17          	auipc	t3,0x23
   16474:	c58e3e03          	ld	t3,-936(t3) # 390c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
   16478:	000e0367          	jalr	t1,0(t3)
   1647c:	00000013          	addi	zero,zero,0

0000000000016480 <open@plt>:
   16480:	00023e17          	auipc	t3,0x23
   16484:	c50e3e03          	ld	t3,-944(t3) # 390d0 <open@GLIBC_2.27>
   16488:	000e0367          	jalr	t1,0(t3)
   1648c:	00000013          	addi	zero,zero,0

0000000000016490 <__cxa_guard_release@plt>:
   16490:	00023e17          	auipc	t3,0x23
   16494:	c48e3e03          	ld	t3,-952(t3) # 390d8 <__cxa_guard_release@CXXABI_1.3>
   16498:	000e0367          	jalr	t1,0(t3)
   1649c:	00000013          	addi	zero,zero,0

00000000000164a0 <mmap@plt>:
   164a0:	00023e17          	auipc	t3,0x23
   164a4:	c40e3e03          	ld	t3,-960(t3) # 390e0 <mmap@GLIBC_2.27>
   164a8:	000e0367          	jalr	t1,0(t3)
   164ac:	00000013          	addi	zero,zero,0

00000000000164b0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>:
   164b0:	00023e17          	auipc	t3,0x23
   164b4:	c38e3e03          	ld	t3,-968(t3) # 390e8 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   164b8:	000e0367          	jalr	t1,0(t3)
   164bc:	00000013          	addi	zero,zero,0

00000000000164c0 <std::__throw_logic_error(char const*)@plt>:
   164c0:	00023e17          	auipc	t3,0x23
   164c4:	c30e3e03          	ld	t3,-976(t3) # 390f0 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
   164c8:	000e0367          	jalr	t1,0(t3)
   164cc:	00000013          	addi	zero,zero,0

00000000000164d0 <__cxa_free_exception@plt>:
   164d0:	00023e17          	auipc	t3,0x23
   164d4:	c28e3e03          	ld	t3,-984(t3) # 390f8 <__cxa_free_exception@CXXABI_1.3>
   164d8:	000e0367          	jalr	t1,0(t3)
   164dc:	00000013          	addi	zero,zero,0

00000000000164e0 <munmap@plt>:
   164e0:	00023e17          	auipc	t3,0x23
   164e4:	c20e3e03          	ld	t3,-992(t3) # 39100 <munmap@GLIBC_2.27>
   164e8:	000e0367          	jalr	t1,0(t3)
   164ec:	00000013          	addi	zero,zero,0

00000000000164f0 <std::__throw_bad_array_new_length()@plt>:
   164f0:	00023e17          	auipc	t3,0x23
   164f4:	c18e3e03          	ld	t3,-1000(t3) # 39108 <std::__throw_bad_array_new_length()@GLIBCXX_3.4.29>
   164f8:	000e0367          	jalr	t1,0(t3)
   164fc:	00000013          	addi	zero,zero,0

0000000000016500 <__assert_fail@plt>:
   16500:	00023e17          	auipc	t3,0x23
   16504:	c10e3e03          	ld	t3,-1008(t3) # 39110 <__assert_fail@GLIBC_2.27>
   16508:	000e0367          	jalr	t1,0(t3)
   1650c:	00000013          	addi	zero,zero,0

0000000000016510 <operator delete(void*)@plt>:
   16510:	00023e17          	auipc	t3,0x23
   16514:	c08e3e03          	ld	t3,-1016(t3) # 39118 <operator delete(void*)@GLIBCXX_3.4>
   16518:	000e0367          	jalr	t1,0(t3)
   1651c:	00000013          	addi	zero,zero,0

0000000000016520 <operator new(unsigned long)@plt>:
   16520:	00023e17          	auipc	t3,0x23
   16524:	c00e3e03          	ld	t3,-1024(t3) # 39120 <operator new(unsigned long)@GLIBCXX_3.4>
   16528:	000e0367          	jalr	t1,0(t3)
   1652c:	00000013          	addi	zero,zero,0

0000000000016530 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>:
   16530:	00023e17          	auipc	t3,0x23
   16534:	bf8e3e03          	ld	t3,-1032(t3) # 39128 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
   16538:	000e0367          	jalr	t1,0(t3)
   1653c:	00000013          	addi	zero,zero,0

0000000000016540 <std::runtime_error::~runtime_error()@plt>:
   16540:	00023e17          	auipc	t3,0x23
   16544:	bf0e3e03          	ld	t3,-1040(t3) # 39130 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   16548:	000e0367          	jalr	t1,0(t3)
   1654c:	00000013          	addi	zero,zero,0

0000000000016550 <__bswapdi2@plt>:
   16550:	00023e17          	auipc	t3,0x23
   16554:	be8e3e03          	ld	t3,-1048(t3) # 39138 <__bswapdi2@GCC_4.3.0>
   16558:	000e0367          	jalr	t1,0(t3)
   1655c:	00000013          	addi	zero,zero,0

0000000000016560 <__dynamic_cast@plt>:
   16560:	00023e17          	auipc	t3,0x23
   16564:	be0e3e03          	ld	t3,-1056(t3) # 39140 <__dynamic_cast@CXXABI_1.3>
   16568:	000e0367          	jalr	t1,0(t3)
   1656c:	00000013          	addi	zero,zero,0

0000000000016570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>:
   16570:	00023e17          	auipc	t3,0x23
   16574:	bd8e3e03          	ld	t3,-1064(t3) # 39148 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@GLIBCXX_3.4.21>
   16578:	000e0367          	jalr	t1,0(t3)
   1657c:	00000013          	addi	zero,zero,0

0000000000016580 <std::logic_error::logic_error(char const*)@plt>:
   16580:	00023e17          	auipc	t3,0x23
   16584:	bd0e3e03          	ld	t3,-1072(t3) # 39150 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16588:	000e0367          	jalr	t1,0(t3)
   1658c:	00000013          	addi	zero,zero,0

0000000000016590 <strerror@plt>:
   16590:	00023e17          	auipc	t3,0x23
   16594:	bc8e3e03          	ld	t3,-1080(t3) # 39158 <strerror@GLIBC_2.27>
   16598:	000e0367          	jalr	t1,0(t3)
   1659c:	00000013          	addi	zero,zero,0

00000000000165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   165a0:	00023e17          	auipc	t3,0x23
   165a4:	bc0e3e03          	ld	t3,-1088(t3) # 39160 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   165a8:	000e0367          	jalr	t1,0(t3)
   165ac:	00000013          	addi	zero,zero,0

00000000000165b0 <memcpy@plt>:
   165b0:	00023e17          	auipc	t3,0x23
   165b4:	bb8e3e03          	ld	t3,-1096(t3) # 39168 <memcpy@GLIBC_2.27>
   165b8:	000e0367          	jalr	t1,0(t3)
   165bc:	00000013          	addi	zero,zero,0

00000000000165c0 <operator delete[](void*)@plt>:
   165c0:	00023e17          	auipc	t3,0x23
   165c4:	bb0e3e03          	ld	t3,-1104(t3) # 39170 <operator delete[](void*)@GLIBCXX_3.4>
   165c8:	000e0367          	jalr	t1,0(t3)
   165cc:	00000013          	addi	zero,zero,0

00000000000165d0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
   165d0:	00023e17          	auipc	t3,0x23
   165d4:	ba8e3e03          	ld	t3,-1112(t3) # 39178 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
   165d8:	000e0367          	jalr	t1,0(t3)
   165dc:	00000013          	addi	zero,zero,0

00000000000165e0 <memset@plt>:
   165e0:	00023e17          	auipc	t3,0x23
   165e4:	ba0e3e03          	ld	t3,-1120(t3) # 39180 <memset@GLIBC_2.27>
   165e8:	000e0367          	jalr	t1,0(t3)
   165ec:	00000013          	addi	zero,zero,0

00000000000165f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
   165f0:	00023e17          	auipc	t3,0x23
   165f4:	b98e3e03          	ld	t3,-1128(t3) # 39188 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@GLIBCXX_3.4.21>
   165f8:	000e0367          	jalr	t1,0(t3)
   165fc:	00000013          	addi	zero,zero,0

0000000000016600 <std::runtime_error::what() const@plt>:
   16600:	00023e17          	auipc	t3,0x23
   16604:	b90e3e03          	ld	t3,-1136(t3) # 39190 <std::runtime_error::what() const@GLIBCXX_3.4>
   16608:	000e0367          	jalr	t1,0(t3)
   1660c:	00000013          	addi	zero,zero,0

0000000000016610 <std::logic_error::logic_error(char const*)@plt>:
   16610:	00023e17          	auipc	t3,0x23
   16614:	b88e3e03          	ld	t3,-1144(t3) # 39198 <std::logic_error::logic_error(char const*)@GLIBCXX_3.4.21>
   16618:	000e0367          	jalr	t1,0(t3)
   1661c:	00000013          	addi	zero,zero,0

0000000000016620 <__cxa_rethrow@plt>:
   16620:	00023e17          	auipc	t3,0x23
   16624:	b80e3e03          	ld	t3,-1152(t3) # 391a0 <__cxa_rethrow@CXXABI_1.3>
   16628:	000e0367          	jalr	t1,0(t3)
   1662c:	00000013          	addi	zero,zero,0

0000000000016630 <std::logic_error::what() const@plt>:
   16630:	00023e17          	auipc	t3,0x23
   16634:	b78e3e03          	ld	t3,-1160(t3) # 391a8 <std::logic_error::what() const@GLIBCXX_3.4>
   16638:	000e0367          	jalr	t1,0(t3)
   1663c:	00000013          	addi	zero,zero,0

0000000000016640 <std::__throw_out_of_range_fmt(char const*, ...)@plt>:
   16640:	00023e17          	auipc	t3,0x23
   16644:	b70e3e03          	ld	t3,-1168(t3) # 391b0 <std::__throw_out_of_range_fmt(char const*, ...)@GLIBCXX_3.4.20>
   16648:	000e0367          	jalr	t1,0(t3)
   1664c:	00000013          	addi	zero,zero,0

0000000000016650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16650:	00023e17          	auipc	t3,0x23
   16654:	b68e3e03          	ld	t3,-1176(t3) # 391b8 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16658:	000e0367          	jalr	t1,0(t3)
   1665c:	00000013          	addi	zero,zero,0

0000000000016660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16660:	00023e17          	auipc	t3,0x23
   16664:	b60e3e03          	ld	t3,-1184(t3) # 391c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16668:	000e0367          	jalr	t1,0(t3)
   1666c:	00000013          	addi	zero,zero,0

0000000000016670 <lseek@plt>:
   16670:	00023e17          	auipc	t3,0x23
   16674:	b58e3e03          	ld	t3,-1192(t3) # 391c8 <lseek@GLIBC_2.27>
   16678:	000e0367          	jalr	t1,0(t3)
   1667c:	00000013          	addi	zero,zero,0

0000000000016680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   16680:	00023e17          	auipc	t3,0x23
   16684:	b50e3e03          	ld	t3,-1200(t3) # 391d0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   16688:	000e0367          	jalr	t1,0(t3)
   1668c:	00000013          	addi	zero,zero,0

0000000000016690 <__cxa_end_catch@plt>:
   16690:	00023e17          	auipc	t3,0x23
   16694:	b48e3e03          	ld	t3,-1208(t3) # 391d8 <__cxa_end_catch@CXXABI_1.3>
   16698:	000e0367          	jalr	t1,0(t3)
   1669c:	00000013          	addi	zero,zero,0

00000000000166a0 <__gxx_personality_v0@plt>:
   166a0:	00023e17          	auipc	t3,0x23
   166a4:	b40e3e03          	ld	t3,-1216(t3) # 391e0 <__gxx_personality_v0@CXXABI_1.3>
   166a8:	000e0367          	jalr	t1,0(t3)
   166ac:	00000013          	addi	zero,zero,0

00000000000166b0 <strncmp@plt>:
   166b0:	00023e17          	auipc	t3,0x23
   166b4:	b38e3e03          	ld	t3,-1224(t3) # 391e8 <strncmp@GLIBC_2.27>
   166b8:	000e0367          	jalr	t1,0(t3)
   166bc:	00000013          	addi	zero,zero,0

00000000000166c0 <__cxa_throw@plt>:
   166c0:	00023e17          	auipc	t3,0x23
   166c4:	b30e3e03          	ld	t3,-1232(t3) # 391f0 <__cxa_throw@CXXABI_1.3>
   166c8:	000e0367          	jalr	t1,0(t3)
   166cc:	00000013          	addi	zero,zero,0

00000000000166d0 <std::range_error::range_error(char const*)@plt>:
   166d0:	00023e17          	auipc	t3,0x23
   166d4:	b28e3e03          	ld	t3,-1240(t3) # 391f8 <std::range_error::range_error(char const*)@GLIBCXX_3.4.21>
   166d8:	000e0367          	jalr	t1,0(t3)
   166dc:	00000013          	addi	zero,zero,0

00000000000166e0 <fprintf@plt>:
   166e0:	00023e17          	auipc	t3,0x23
   166e4:	b20e3e03          	ld	t3,-1248(t3) # 39200 <fprintf@GLIBC_2.27>
   166e8:	000e0367          	jalr	t1,0(t3)
   166ec:	00000013          	addi	zero,zero,0

00000000000166f0 <_Unwind_Resume@plt>:
   166f0:	00023e17          	auipc	t3,0x23
   166f4:	b18e3e03          	ld	t3,-1256(t3) # 39208 <_Unwind_Resume@GCC_3.0>
   166f8:	000e0367          	jalr	t1,0(t3)
   166fc:	00000013          	addi	zero,zero,0

0000000000016700 <std::logic_error::~logic_error()@plt>:
   16700:	00023e17          	auipc	t3,0x23
   16704:	b10e3e03          	ld	t3,-1264(t3) # 39210 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   16708:	000e0367          	jalr	t1,0(t3)
   1670c:	00000013          	addi	zero,zero,0

0000000000016710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
   16710:	00023e17          	auipc	t3,0x23
   16714:	b08e3e03          	ld	t3,-1272(t3) # 39218 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
   16718:	000e0367          	jalr	t1,0(t3)
   1671c:	00000013          	addi	zero,zero,0

0000000000016720 <__cxa_atexit@plt>:
   16720:	00023e17          	auipc	t3,0x23
   16724:	b00e3e03          	ld	t3,-1280(t3) # 39220 <__cxa_atexit@GLIBC_2.27>
   16728:	000e0367          	jalr	t1,0(t3)
   1672c:	00000013          	addi	zero,zero,0

0000000000016730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>:
   16730:	00023e17          	auipc	t3,0x23
   16734:	af8e3e03          	ld	t3,-1288(t3) # 39228 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@GLIBCXX_3.4.21>
   16738:	000e0367          	jalr	t1,0(t3)
   1673c:	00000013          	addi	zero,zero,0

0000000000016740 <__cxa_guard_acquire@plt>:
   16740:	00023e17          	auipc	t3,0x23
   16744:	af0e3e03          	ld	t3,-1296(t3) # 39230 <__cxa_guard_acquire@CXXABI_1.3>
   16748:	000e0367          	jalr	t1,0(t3)
   1674c:	00000013          	addi	zero,zero,0

0000000000016750 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>:
   16750:	00023e17          	auipc	t3,0x23
   16754:	ae8e3e03          	ld	t3,-1304(t3) # 39238 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@GLIBCXX_3.4.21>
   16758:	000e0367          	jalr	t1,0(t3)
   1675c:	00000013          	addi	zero,zero,0

0000000000016760 <printf@plt>:
   16760:	00023e17          	auipc	t3,0x23
   16764:	ae0e3e03          	ld	t3,-1312(t3) # 39240 <printf@GLIBC_2.27>
   16768:	000e0367          	jalr	t1,0(t3)
   1676c:	00000013          	addi	zero,zero,0

0000000000016770 <std::runtime_error::runtime_error(char const*)@plt>:
   16770:	00023e17          	auipc	t3,0x23
   16774:	ad8e3e03          	ld	t3,-1320(t3) # 39248 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
   16778:	000e0367          	jalr	t1,0(t3)
   1677c:	00000013          	addi	zero,zero,0

0000000000016780 <memmove@plt>:
   16780:	00023e17          	auipc	t3,0x23
   16784:	ad0e3e03          	ld	t3,-1328(t3) # 39250 <memmove@GLIBC_2.27>
   16788:	000e0367          	jalr	t1,0(t3)
   1678c:	00000013          	addi	zero,zero,0

0000000000016790 <__cxa_pure_virtual@plt>:
   16790:	00023e17          	auipc	t3,0x23
   16794:	ac8e3e03          	ld	t3,-1336(t3) # 39258 <__cxa_pure_virtual@CXXABI_1.3>
   16798:	000e0367          	jalr	t1,0(t3)
   1679c:	00000013          	addi	zero,zero,0

00000000000167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>:
   167a0:	00023e17          	auipc	t3,0x23
   167a4:	ac0e3e03          	ld	t3,-1344(t3) # 39260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@GLIBCXX_3.4.21>
   167a8:	000e0367          	jalr	t1,0(t3)
   167ac:	00000013          	addi	zero,zero,0

00000000000167b0 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   167b0:	00023e17          	auipc	t3,0x23
   167b4:	ab8e3e03          	ld	t3,-1352(t3) # 39268 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   167b8:	000e0367          	jalr	t1,0(t3)
   167bc:	00000013          	addi	zero,zero,0

00000000000167c0 <__errno_location@plt>:
   167c0:	00023e17          	auipc	t3,0x23
   167c4:	ab0e3e03          	ld	t3,-1360(t3) # 39270 <__errno_location@GLIBC_2.27>
   167c8:	000e0367          	jalr	t1,0(t3)
   167cc:	00000013          	addi	zero,zero,0

00000000000167d0 <close@plt>:
   167d0:	00023e17          	auipc	t3,0x23
   167d4:	aa8e3e03          	ld	t3,-1368(t3) # 39278 <close@GLIBC_2.27>
   167d8:	000e0367          	jalr	t1,0(t3)
   167dc:	00000013          	addi	zero,zero,0

00000000000167e0 <std::underflow_error::underflow_error(char const*)@plt>:
   167e0:	00023e17          	auipc	t3,0x23
   167e4:	aa0e3e03          	ld	t3,-1376(t3) # 39280 <std::underflow_error::underflow_error(char const*)@GLIBCXX_3.4.21>
   167e8:	000e0367          	jalr	t1,0(t3)
   167ec:	00000013          	addi	zero,zero,0

00000000000167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
   167f0:	00023e17          	auipc	t3,0x23
   167f4:	a98e3e03          	ld	t3,-1384(t3) # 39288 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
   167f8:	000e0367          	jalr	t1,0(t3)
   167fc:	00000013          	addi	zero,zero,0

Disassembly of section .text:

0000000000016800 <_start>:
ENTRY (ENTRY_POINT)
	/* Terminate call stack by noting ra is undefined.  Use a dummy
	   .cfi_label to force starting the FDE.  */
	.cfi_label .Ldummy
	cfi_undefined (ra)
	call  load_gp
   16800:	02e000ef          	jal	ra,1682e <load_gp>
	mv    a5, a0  /* rtld_fini.  */
   16804:	87aa                	c.mv	a5,a0
	/* main may be in a shared library.  */
	la   a0, main
   16806:	00000517          	auipc	a0,0x0
   1680a:	0ec50513          	addi	a0,a0,236 # 168f2 <main>
	REG_L a1, 0(sp)      /* argc.  */
   1680e:	6582                	c.ldsp	a1,0(sp)
	addi  a2, sp, SZREG  /* argv.  */
   16810:	0030                	c.addi4spn	a2,sp,8
	andi  sp, sp, ALMASK /* Align stack. */
   16812:	ff017113          	andi	sp,sp,-16
	lla   a3, __libc_csu_init
   16816:	00016697          	auipc	a3,0x16
   1681a:	5aa68693          	addi	a3,a3,1450 # 2cdc0 <__libc_csu_init>
	lla   a4, __libc_csu_fini
   1681e:	00016717          	auipc	a4,0x16
   16822:	5fa70713          	addi	a4,a4,1530 # 2ce18 <__libc_csu_fini>
	mv    a6, sp  /* stack_end.  */
   16826:	880a                	c.mv	a6,sp

	call  __libc_start_main@plt
   16828:	ba9ff0ef          	jal	ra,163d0 <__libc_start_main@plt>
	ebreak
   1682c:	9002                	c.ebreak

000000000001682e <load_gp>:
   So we redundantly initialize it at the beginning of _start.  */

load_gp:
.option push
.option norelax
	lla   gp, __global_pointer$
   1682e:	00023197          	auipc	gp,0x23
   16832:	fd218193          	addi	gp,gp,-46 # 39800 <__global_pointer$>
.option pop
	ret
   16836:	8082                	c.jr	ra
	...

000000000001683a <deregister_tm_clones>:
   1683a:	81818793          	addi	a5,gp,-2024 # 39018 <__TMC_END__>
   1683e:	81818713          	addi	a4,gp,-2024 # 39018 <__TMC_END__>
   16842:	00f70863          	beq	a4,a5,16852 <deregister_tm_clones+0x18>
   16846:	00000793          	addi	a5,zero,0
   1684a:	c781                	c.beqz	a5,16852 <deregister_tm_clones+0x18>
   1684c:	81818513          	addi	a0,gp,-2024 # 39018 <__TMC_END__>
   16850:	8782                	c.jr	a5
   16852:	8082                	c.jr	ra

0000000000016854 <register_tm_clones>:
   16854:	81818793          	addi	a5,gp,-2024 # 39018 <__TMC_END__>
   16858:	81818593          	addi	a1,gp,-2024 # 39018 <__TMC_END__>
   1685c:	8d9d                	c.sub	a1,a5
   1685e:	4035d793          	srai	a5,a1,0x3
   16862:	91fd                	c.srli	a1,0x3f
   16864:	95be                	c.add	a1,a5
   16866:	8585                	c.srai	a1,0x1
   16868:	c599                	c.beqz	a1,16876 <register_tm_clones+0x22>
   1686a:	00000793          	addi	a5,zero,0
   1686e:	c781                	c.beqz	a5,16876 <register_tm_clones+0x22>
   16870:	81818513          	addi	a0,gp,-2024 # 39018 <__TMC_END__>
   16874:	8782                	c.jr	a5
   16876:	8082                	c.jr	ra

0000000000016878 <__do_global_dtors_aux>:
   16878:	1141                	c.addi	sp,-16
   1687a:	e022                	c.sdsp	s0,0(sp)
   1687c:	e211c783          	lbu	a5,-479(gp) # 39621 <completed.0>
   16880:	e406                	c.sdsp	ra,8(sp)
   16882:	e791                	c.bnez	a5,1688e <__do_global_dtors_aux+0x16>
   16884:	fb7ff0ef          	jal	ra,1683a <deregister_tm_clones>
   16888:	4785                	c.li	a5,1
   1688a:	e2f180a3          	sb	a5,-479(gp) # 39621 <completed.0>
   1688e:	60a2                	c.ldsp	ra,8(sp)
   16890:	6402                	c.ldsp	s0,0(sp)
   16892:	0141                	c.addi	sp,16
   16894:	8082                	c.jr	ra

0000000000016896 <frame_dummy>:
   16896:	bf7d                	c.j	16854 <register_tm_clones>

0000000000016898 <dump_line_table(dwarf::line_table const&)>:
#include <fcntl.h>
#include <inttypes.h>

using namespace std;

void dump_line_table(const dwarf::line_table &lt) {
   16898:	716d                	c.addi16sp	sp,-272
   1689a:	e606                	c.sdsp	ra,264(sp)
   1689c:	e222                	c.sdsp	s0,256(sp)
   1689e:	842a                	c.mv	s0,a0
  for (auto &line : lt) {
   168a0:	85aa                	c.mv	a1,a0
   168a2:	850a                	c.mv	a0,sp
   168a4:	3c00d0ef          	jal	ra,23c64 <dwarf::line_table::begin() const>
   168a8:	85a2                	c.mv	a1,s0
   168aa:	0108                	c.addi4spn	a0,sp,128
   168ac:	3de0d0ef          	jal	ra,23c8a <dwarf::line_table::end() const>
    if (line.end_sequence)
      printf("\n");
    else
      printf("%-40s%8d%#20" PRIx64 "\n", line.file->path.c_str(), line.line,
   168b0:	0002d437          	lui	s0,0x2d
   168b4:	a039                	c.j	168c2 <dump_line_table(dwarf::line_table const&)+0x2a>
      printf("\n");
   168b6:	4529                	c.li	a0,10
   168b8:	b79ff0ef          	jal	ra,16430 <putchar@plt>
  for (auto &line : lt) {
   168bc:	850a                	c.mv	a0,sp
   168be:	0880d0ef          	jal	ra,23946 <dwarf::line_table::iterator::operator++()>
  /** Dereference operator */
  const line_table::entry *operator->() const { return &entry; }

  /** Equality operator */
  bool operator==(const iterator &o) const {
    return o.pos == pos && o.table == table;
   168c2:	776e                	c.ldsp	a4,248(sp)
   168c4:	77e6                	c.ldsp	a5,120(sp)
   168c6:	00f70e63          	beq	a4,a5,168e2 <dump_line_table(dwarf::line_table const&)+0x4a>
    if (line.end_sequence)
   168ca:	02e14783          	lbu	a5,46(sp)
   168ce:	f7e5                	c.bnez	a5,168b6 <dump_line_table(dwarf::line_table const&)+0x1e>
      printf("%-40s%8d%#20" PRIx64 "\n", line.file->path.c_str(), line.line,
   168d0:	66a2                	c.ldsp	a3,8(sp)
   168d2:	5612                	c.lwsp	a2,36(sp)
   168d4:	67e2                	c.ldsp	a5,24(sp)
   168d6:	638c                	c.ld	a1,0(a5)
   168d8:	e5840513          	addi	a0,s0,-424 # 2ce58 <__libc_csu_fini+0x40>
   168dc:	e85ff0ef          	jal	ra,16760 <printf@plt>
   168e0:	bff1                	c.j	168bc <dump_line_table(dwarf::line_table const&)+0x24>
   168e2:	670a                	c.ldsp	a4,128(sp)
   168e4:	6782                	c.ldsp	a5,0(sp)
   168e6:	fef712e3          	bne	a4,a5,168ca <dump_line_table(dwarf::line_table const&)+0x32>
             line.address);
  }
}
   168ea:	60b2                	c.ldsp	ra,264(sp)
   168ec:	6412                	c.ldsp	s0,256(sp)
   168ee:	6151                	c.addi16sp	sp,272
   168f0:	8082                	c.jr	ra

00000000000168f2 <main>:

int main(int argc, char **argv) {
   168f2:	7135                	c.addi16sp	sp,-160
   168f4:	ed06                	c.sdsp	ra,152(sp)
   168f6:	e922                	c.sdsp	s0,144(sp)
   168f8:	e526                	c.sdsp	s1,136(sp)
   168fa:	e14a                	c.sdsp	s2,128(sp)
   168fc:	fcce                	c.sdsp	s3,120(sp)
   168fe:	f8d2                	c.sdsp	s4,112(sp)
   16900:	f4d6                	c.sdsp	s5,104(sp)
   16902:	842e                	c.mv	s0,a1
  if (argc != 2) {
   16904:	4789                	c.li	a5,2
   16906:	02f51163          	bne	a0,a5,16928 <main+0x36>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
    return 2;
  }

  int fd = open(argv[1], O_RDONLY);
   1690a:	4581                	c.li	a1,0
   1690c:	6408                	c.ld	a0,8(s0)
   1690e:	b73ff0ef          	jal	ra,16480 <open@plt>
   16912:	85aa                	c.mv	a1,a0
  if (fd < 0) {
   16914:	02054563          	blt	a0,zero,1693e <main+0x4c>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
    return 1;
  }

  elf::elf ef(elf::create_mmap_loader(fd));
   16918:	0088                	c.addi4spn	a0,sp,64
   1691a:	0fa160ef          	jal	ra,2ca14 <elf::create_mmap_loader(int)>
   1691e:	008c                	c.addi4spn	a1,sp,64
   16920:	1808                	c.addi4spn	a0,sp,48
   16922:	26d140ef          	jal	ra,2b38e <elf::elf::elf(std::shared_ptr<elf::loader> const&)>
   16926:	a83d                	c.j	16964 <main+0x72>
    fprintf(stderr, "usage: %s elf-file\n", argv[0]);
   16928:	6190                	c.ld	a2,0(a1)
   1692a:	0002d5b7          	lui	a1,0x2d
   1692e:	e6858593          	addi	a1,a1,-408 # 2ce68 <__libc_csu_fini+0x50>
   16932:	e181b503          	ld	a0,-488(gp) # 39618 <stderr@GLIBC_2.27>
   16936:	dabff0ef          	jal	ra,166e0 <fprintf@plt>
    return 2;
   1693a:	4509                	c.li	a0,2
   1693c:	aa3d                	c.j	16a7a <main+0x188>
    fprintf(stderr, "%s: %s\n", argv[1], strerror(errno));
   1693e:	e181b483          	ld	s1,-488(gp) # 39618 <stderr@GLIBC_2.27>
   16942:	6400                	c.ld	s0,8(s0)
   16944:	e7dff0ef          	jal	ra,167c0 <__errno_location@plt>
   16948:	4108                	c.lw	a0,0(a0)
   1694a:	c47ff0ef          	jal	ra,16590 <strerror@plt>
   1694e:	86aa                	c.mv	a3,a0
   16950:	8622                	c.mv	a2,s0
   16952:	0002d5b7          	lui	a1,0x2d
   16956:	e8058593          	addi	a1,a1,-384 # 2ce80 <__libc_csu_fini+0x68>
   1695a:	8526                	c.mv	a0,s1
   1695c:	d85ff0ef          	jal	ra,166e0 <fprintf@plt>
    return 1;
   16960:	4505                	c.li	a0,1
   16962:	aa21                	c.j	16a7a <main+0x188>
      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   16964:	6526                	c.ldsp	a0,72(sp)
   16966:	c119                	c.beqz	a0,1696c <main+0x7a>
	  _M_pi->_M_release();
   16968:	320000ef          	jal	ra,16c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1696c:	05000513          	addi	a0,zero,80
   16970:	bb1ff0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   16974:	842a                	c.mv	s0,a0
    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex() 
    { 
   16976:	00052423          	sw	zero,8(a0)
   1697a:	00052623          	sw	zero,12(a0)
   1697e:	00052823          	sw	zero,16(a0)
   16982:	00052a23          	sw	zero,20(a0)
   16986:	00052c23          	sw	zero,24(a0)
   1698a:	00052e23          	sw	zero,28(a0)
   1698e:	02053023          	sd	zero,32(a0)
   16992:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   16996:	4785                	c.li	a5,1
   16998:	d91c                	c.sw	a5,48(a0)
   1699a:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1699c:	0002d7b7          	lui	a5,0x2d
   169a0:	13078793          	addi	a5,a5,304 # 2d130 <vtable for std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10>
   169a4:	e11c                	c.sd	a5,0(a0)
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   169a6:	03850493          	addi	s1,a0,56

template <typename Elf> class elf_loader : public loader {
  Elf f;

public:
  elf_loader(const Elf &file) : f(file) {}
   169aa:	0002d7b7          	lui	a5,0x2d
   169ae:	10878793          	addi	a5,a5,264 # 2d108 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   169b2:	fd1c                	c.sd	a5,56(a0)
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   169b4:	77c2                	c.ldsp	a5,48(sp)
   169b6:	e13c                	c.sd	a5,64(a0)
      : _M_pi(__r._M_pi)
   169b8:	7562                	c.ldsp	a0,56(sp)
   169ba:	e428                	c.sd	a0,72(s0)
	if (_M_pi != nullptr)
   169bc:	c519                	c.beqz	a0,169ca <main+0xd8>

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
   169be:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   169c2:	cb99                	c.beqz	a5,169d8 <main+0xe6>
  { *__mem += __val; }
   169c4:	591c                	c.lw	a5,48(a0)
   169c6:	2785                	c.addiw	a5,1
   169c8:	d91c                	c.sw	a5,48(a0)
	__r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount()
   169ca:	e8a6                	c.sdsp	s1,80(sp)
	_M_pi = __tmp;
   169cc:	eca2                	c.sdsp	s0,88(sp)
  dwarf::dwarf dw(dwarf::elf::create_loader(ef));
   169ce:	088c                	c.addi4spn	a1,sp,80
   169d0:	1008                	c.addi4spn	a0,sp,32
   169d2:	745000ef          	jal	ra,17916 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>
   169d6:	a039                	c.j	169e4 <main+0xf2>
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
   169d8:	4585                	c.li	a1,1
   169da:	03050513          	addi	a0,a0,48
   169de:	973ff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   169e2:	b7e5                	c.j	169ca <main+0xd8>
	if (_M_pi != nullptr)
   169e4:	6566                	c.ldsp	a0,88(sp)
   169e6:	c119                	c.beqz	a0,169ec <main+0xfa>
	  _M_pi->_M_release();
   169e8:	2a0000ef          	jal	ra,16c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>

  for (auto cu : dw.compilation_units()) {
   169ec:	1008                	c.addi4spn	a0,sp,32
   169ee:	4ca000ef          	jal	ra,16eb8 <dwarf::dwarf::compilation_units() const>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   169f2:	6100                	c.ld	s0,0(a0)
   169f4:	00853983          	ld	s3,8(a0)
   169f8:	06898963          	beq	s3,s0,16a6a <main+0x178>
class unit {
   169fc:	0002d937          	lui	s2,0x2d
   16a00:	0c890913          	addi	s2,s2,200 # 2d0c8 <vtable for dwarf::unit+0x10>
  compilation_unit(const compilation_unit &o) = default;
   16a04:	0002d4b7          	lui	s1,0x2d
   16a08:	0e848493          	addi	s1,s1,232 # 2d0e8 <vtable for dwarf::compilation_unit+0x10>
    printf("--- <%x>\n", (unsigned int)cu.get_section_offset());
   16a0c:	0002da37          	lui	s4,0x2d
   16a10:	a825                	c.j	16a48 <main+0x156>
   16a12:	4585                	c.li	a1,1
   16a14:	03050513          	addi	a0,a0,48
   16a18:	939ff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16a1c:	a091                	c.j	16a60 <main+0x16e>
   16a1e:	0005059b          	addiw	a1,a0,0
   16a22:	e88a0513          	addi	a0,s4,-376 # 2ce88 <__libc_csu_fini+0x70>
   16a26:	d3bff0ef          	jal	ra,16760 <printf@plt>
    dump_line_table(cu.get_line_table());
   16a2a:	0028                	c.addi4spn	a0,sp,8
   16a2c:	586020ef          	jal	ra,18fb2 <dwarf::compilation_unit::get_line_table() const>
   16a30:	e69ff0ef          	jal	ra,16898 <dump_line_table(dwarf::line_table const&)>
    printf("\n");
   16a34:	4529                	c.li	a0,10
   16a36:	9fbff0ef          	jal	ra,16430 <putchar@plt>
class compilation_unit : public unit {
   16a3a:	e426                	c.sdsp	s1,8(sp)
   16a3c:	0028                	c.addi4spn	a0,sp,8
   16a3e:	4cc000ef          	jal	ra,16f0a <dwarf::unit::~unit()>

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
   16a42:	0461                	c.addi	s0,24
  for (auto cu : dw.compilation_units()) {
   16a44:	02898363          	beq	s3,s0,16a6a <main+0x178>
class unit {
   16a48:	e44a                	c.sdsp	s2,8(sp)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16a4a:	641c                	c.ld	a5,8(s0)
   16a4c:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   16a4e:	6808                	c.ld	a0,16(s0)
   16a50:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   16a52:	c519                	c.beqz	a0,16a60 <main+0x16e>
    if (__is_single_threaded())
   16a54:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16a58:	dfcd                	c.beqz	a5,16a12 <main+0x120>
  { *__mem += __val; }
   16a5a:	591c                	c.lw	a5,48(a0)
   16a5c:	2785                	c.addiw	a5,1
   16a5e:	d91c                	c.sw	a5,48(a0)
  compilation_unit(const compilation_unit &o) = default;
   16a60:	e426                	c.sdsp	s1,8(sp)
    printf("--- <%x>\n", (unsigned int)cu.get_section_offset());
   16a62:	0028                	c.addi4spn	a0,sp,8
   16a64:	548000ef          	jal	ra,16fac <dwarf::unit::get_section_offset() const>
   16a68:	bf5d                	c.j	16a1e <main+0x12c>
  }

  return 0;
}
   16a6a:	1008                	c.addi4spn	a0,sp,32
   16a6c:	3d4000ef          	jal	ra,16e40 <dwarf::dwarf::~dwarf()>
	if (_M_pi != nullptr)
   16a70:	7562                	c.ldsp	a0,56(sp)
   16a72:	c119                	c.beqz	a0,16a78 <main+0x186>
	  _M_pi->_M_release();
   16a74:	214000ef          	jal	ra,16c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
  return 0;
   16a78:	4501                	c.li	a0,0
}
   16a7a:	60ea                	c.ldsp	ra,152(sp)
   16a7c:	644a                	c.ldsp	s0,144(sp)
   16a7e:	64aa                	c.ldsp	s1,136(sp)
   16a80:	690a                	c.ldsp	s2,128(sp)
   16a82:	79e6                	c.ldsp	s3,120(sp)
   16a84:	7a46                	c.ldsp	s4,112(sp)
   16a86:	7aa6                	c.ldsp	s5,104(sp)
   16a88:	610d                	c.addi16sp	sp,160
   16a8a:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   16a8c:	842a                	c.mv	s0,a0
   16a8e:	6526                	c.ldsp	a0,72(sp)
   16a90:	c119                	c.beqz	a0,16a96 <main+0x1a4>
	  _M_pi->_M_release();
   16a92:	1f6000ef          	jal	ra,16c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16a96:	8522                	c.mv	a0,s0
   16a98:	c59ff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   16a9c:	842a                	c.mv	s0,a0
   16a9e:	6566                	c.ldsp	a0,88(sp)
   16aa0:	c119                	c.beqz	a0,16aa6 <main+0x1b4>
	  _M_pi->_M_release();
   16aa2:	1e6000ef          	jal	ra,16c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
	if (_M_pi != nullptr)
   16aa6:	7562                	c.ldsp	a0,56(sp)
   16aa8:	c119                	c.beqz	a0,16aae <main+0x1bc>
	  _M_pi->_M_release();
   16aaa:	1de000ef          	jal	ra,16c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16aae:	8522                	c.mv	a0,s0
   16ab0:	c41ff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
class compilation_unit : public unit {
   16ab4:	842a                	c.mv	s0,a0
   16ab6:	0002d7b7          	lui	a5,0x2d
   16aba:	0e878793          	addi	a5,a5,232 # 2d0e8 <vtable for dwarf::compilation_unit+0x10>
   16abe:	e43e                	c.sdsp	a5,8(sp)
   16ac0:	0028                	c.addi4spn	a0,sp,8
   16ac2:	448000ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   16ac6:	1008                	c.addi4spn	a0,sp,32
   16ac8:	378000ef          	jal	ra,16e40 <dwarf::dwarf::~dwarf()>
   16acc:	bfe9                	c.j	16aa6 <main+0x1b4>
   16ace:	842a                	c.mv	s0,a0
   16ad0:	bfdd                	c.j	16ac6 <main+0x1d4>
	if (_M_pi != nullptr)
   16ad2:	842a                	c.mv	s0,a0
   16ad4:	bfc9                	c.j	16aa6 <main+0x1b4>

0000000000016ad6 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16ad6:	8082                	c.jr	ra

0000000000016ad8 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   16ad8:	1141                	c.addi	sp,-16
   16ada:	e406                	c.sdsp	ra,8(sp)
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
   16adc:	7d1c                	c.ld	a5,56(a0)
   16ade:	639c                	c.ld	a5,0(a5)
   16ae0:	03850513          	addi	a0,a0,56
   16ae4:	9782                	c.jalr	a5
      }
   16ae6:	60a2                	c.ldsp	ra,8(sp)
   16ae8:	0141                	c.addi	sp,16
   16aea:	8082                	c.jr	ra

0000000000016aec <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   16aec:	1141                	c.addi	sp,-16
   16aee:	e406                	c.sdsp	ra,8(sp)
   16af0:	e022                	c.sdsp	s0,0(sp)
   16af2:	03850413          	addi	s0,a0,56
	    ||
   16af6:	0002d7b7          	lui	a5,0x2d
   16afa:	15878793          	addi	a5,a5,344 # 2d158 <std::_Sp_make_shared_tag::_S_ti()::__tag>
   16afe:	02f58a63          	beq	a1,a5,16b32 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
  type_info::operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
   16b02:	6588                	c.ld	a0,8(a1)
   16b04:	0002d7b7          	lui	a5,0x2d
   16b08:	f0878793          	addi	a5,a5,-248 # 2cf08 <typeinfo name for std::_Sp_make_shared_tag>
   16b0c:	02f50363          	beq	a0,a5,16b32 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
#if !__GXX_TYPEINFO_EQUALITY_INLINE
    // ABI requires comparisons to be non-inline.
    return __equal(__arg);
#elif !__GXX_MERGED_TYPEINFO_NAMES
    // Need to do string comparison.
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   16b10:	00054703          	lbu	a4,0(a0)
   16b14:	02a00793          	addi	a5,zero,42
   16b18:	02f70263          	beq	a4,a5,16b3c <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   16b1c:	0002d5b7          	lui	a1,0x2d
   16b20:	f0858593          	addi	a1,a1,-248 # 2cf08 <typeinfo name for std::_Sp_make_shared_tag>
   16b24:	83dff0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   16b28:	00153513          	sltiu	a0,a0,1
   16b2c:	40a00533          	sub	a0,zero,a0
   16b30:	8c69                	c.and	s0,a0
      }
   16b32:	8522                	c.mv	a0,s0
   16b34:	60a2                	c.ldsp	ra,8(sp)
   16b36:	6402                	c.ldsp	s0,0(sp)
   16b38:	0141                	c.addi	sp,16
   16b3a:	8082                	c.jr	ra
	return nullptr;
   16b3c:	4401                	c.li	s0,0
   16b3e:	bfd5                	c.j	16b32 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

0000000000016b40 <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   16b40:	1141                	c.addi	sp,-16
   16b42:	e406                	c.sdsp	ra,8(sp)
   16b44:	9cdff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   16b48:	60a2                	c.ldsp	ra,8(sp)
   16b4a:	0141                	c.addi	sp,16
   16b4c:	8082                	c.jr	ra

0000000000016b4e <std::_Sp_counted_ptr_inplace<dwarf::elf::elf_loader<elf::elf>, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   16b4e:	1141                	c.addi	sp,-16
   16b50:	e406                	c.sdsp	ra,8(sp)
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   16b52:	9bfff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   16b56:	60a2                	c.ldsp	ra,8(sp)
   16b58:	0141                	c.addi	sp,16
   16b5a:	8082                	c.jr	ra

0000000000016b5c <dwarf::compilation_unit::~compilation_unit()>:
   16b5c:	1141                	c.addi	sp,-16
   16b5e:	e406                	c.sdsp	ra,8(sp)
   16b60:	0002d7b7          	lui	a5,0x2d
   16b64:	0e878793          	addi	a5,a5,232 # 2d0e8 <vtable for dwarf::compilation_unit+0x10>
   16b68:	e11c                	c.sd	a5,0(a0)
   16b6a:	3a0000ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   16b6e:	60a2                	c.ldsp	ra,8(sp)
   16b70:	0141                	c.addi	sp,16
   16b72:	8082                	c.jr	ra

0000000000016b74 <dwarf::compilation_unit::~compilation_unit()>:
   16b74:	1141                	c.addi	sp,-16
   16b76:	e406                	c.sdsp	ra,8(sp)
   16b78:	e022                	c.sdsp	s0,0(sp)
   16b7a:	842a                	c.mv	s0,a0
   16b7c:	0002d7b7          	lui	a5,0x2d
   16b80:	0e878793          	addi	a5,a5,232 # 2d0e8 <vtable for dwarf::compilation_unit+0x10>
   16b84:	e11c                	c.sd	a5,0(a0)
   16b86:	384000ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   16b8a:	8522                	c.mv	a0,s0
   16b8c:	985ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   16b90:	60a2                	c.ldsp	ra,8(sp)
   16b92:	6402                	c.ldsp	s0,0(sp)
   16b94:	0141                	c.addi	sp,16
   16b96:	8082                	c.jr	ra

0000000000016b98 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
template <typename Elf> class elf_loader : public loader {
   16b98:	1141                	c.addi	sp,-16
   16b9a:	e406                	c.sdsp	ra,8(sp)
   16b9c:	e022                	c.sdsp	s0,0(sp)
   16b9e:	0002d7b7          	lui	a5,0x2d
   16ba2:	10878793          	addi	a5,a5,264 # 2d108 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16ba6:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   16ba8:	6900                	c.ld	s0,16(a0)
   16baa:	c819                	c.beqz	s0,16bc0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
    if (__is_single_threaded())
   16bac:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16bb0:	cf81                	c.beqz	a5,16bc8 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x30>
    _Atomic_word __result = *__mem;
   16bb2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   16bb4:	fff5079b          	addiw	a5,a0,-1
   16bb8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16bba:	4785                	c.li	a5,1
   16bbc:	00f50c63          	beq	a0,a5,16bd4 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
   16bc0:	60a2                	c.ldsp	ra,8(sp)
   16bc2:	6402                	c.ldsp	s0,0(sp)
   16bc4:	0141                	c.addi	sp,16
   16bc6:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16bc8:	55fd                	c.li	a1,-1
   16bca:	03040513          	addi	a0,s0,48
   16bce:	fb2ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16bd2:	b7e5                	c.j	16bba <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x22>
	_M_dispose();
   16bd4:	601c                	c.ld	a5,0(s0)
   16bd6:	6b9c                	c.ld	a5,16(a5)
   16bd8:	8522                	c.mv	a0,s0
   16bda:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16bdc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16be0:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16be4:	cf89                	c.beqz	a5,16bfe <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x66>
    _Atomic_word __result = *__mem;
   16be6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   16be8:	fff5079b          	addiw	a5,a0,-1
   16bec:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16bee:	4785                	c.li	a5,1
   16bf0:	fcf518e3          	bne	a0,a5,16bc0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
	    _M_destroy();
   16bf4:	601c                	c.ld	a5,0(s0)
   16bf6:	6f9c                	c.ld	a5,24(a5)
   16bf8:	8522                	c.mv	a0,s0
   16bfa:	9782                	c.jalr	a5
   16bfc:	b7d1                	c.j	16bc0 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x28>
      return __exchange_and_add(__mem, __val);
   16bfe:	55fd                	c.li	a1,-1
   16c00:	03440513          	addi	a0,s0,52
   16c04:	f7cff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16c08:	b7dd                	c.j	16bee <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x56>

0000000000016c0a <dwarf::elf::elf_loader<elf::elf>::~elf_loader()>:
   16c0a:	1101                	c.addi	sp,-32
   16c0c:	ec06                	c.sdsp	ra,24(sp)
   16c0e:	e822                	c.sdsp	s0,16(sp)
   16c10:	e426                	c.sdsp	s1,8(sp)
   16c12:	842a                	c.mv	s0,a0
   16c14:	0002d7b7          	lui	a5,0x2d
   16c18:	10878793          	addi	a5,a5,264 # 2d108 <vtable for dwarf::elf::elf_loader<elf::elf>+0x10>
   16c1c:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   16c1e:	6904                	c.ld	s1,16(a0)
   16c20:	c899                	c.beqz	s1,16c36 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
    if (__is_single_threaded())
   16c22:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16c26:	c385                	c.beqz	a5,16c46 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x3c>
    _Atomic_word __result = *__mem;
   16c28:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   16c2a:	fff5079b          	addiw	a5,a0,-1
   16c2e:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16c30:	4785                	c.li	a5,1
   16c32:	02f50063          	beq	a0,a5,16c52 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x48>
   16c36:	8522                	c.mv	a0,s0
   16c38:	8d9ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   16c3c:	60e2                	c.ldsp	ra,24(sp)
   16c3e:	6442                	c.ldsp	s0,16(sp)
   16c40:	64a2                	c.ldsp	s1,8(sp)
   16c42:	6105                	c.addi16sp	sp,32
   16c44:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16c46:	55fd                	c.li	a1,-1
   16c48:	03048513          	addi	a0,s1,48
   16c4c:	f34ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16c50:	b7c5                	c.j	16c30 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x26>
	_M_dispose();
   16c52:	609c                	c.ld	a5,0(s1)
   16c54:	6b9c                	c.ld	a5,16(a5)
   16c56:	8526                	c.mv	a0,s1
   16c58:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16c5a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16c5e:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16c62:	cf89                	c.beqz	a5,16c7c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x72>
    _Atomic_word __result = *__mem;
   16c64:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   16c66:	fff5079b          	addiw	a5,a0,-1
   16c6a:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16c6c:	4785                	c.li	a5,1
   16c6e:	fcf514e3          	bne	a0,a5,16c36 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
	    _M_destroy();
   16c72:	609c                	c.ld	a5,0(s1)
   16c74:	6f9c                	c.ld	a5,24(a5)
   16c76:	8526                	c.mv	a0,s1
   16c78:	9782                	c.jalr	a5
   16c7a:	bf75                	c.j	16c36 <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x2c>
      return __exchange_and_add(__mem, __val);
   16c7c:	55fd                	c.li	a1,-1
   16c7e:	03448513          	addi	a0,s1,52
   16c82:	efeff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16c86:	b7dd                	c.j	16c6c <dwarf::elf::elf_loader<elf::elf>::~elf_loader()+0x62>

0000000000016c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>:
    {
   16c88:	1141                	c.addi	sp,-16
   16c8a:	e406                	c.sdsp	ra,8(sp)
   16c8c:	e022                	c.sdsp	s0,0(sp)
   16c8e:	842a                	c.mv	s0,a0
    if (__is_single_threaded())
   16c90:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16c94:	cf81                	c.beqz	a5,16cac <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x24>
    _Atomic_word __result = *__mem;
   16c96:	5908                	c.lw	a0,48(a0)
    *__mem += __val;
   16c98:	fff5079b          	addiw	a5,a0,-1
   16c9c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16c9e:	4785                	c.li	a5,1
   16ca0:	00f50c63          	beq	a0,a5,16cb8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x30>
    }
   16ca4:	60a2                	c.ldsp	ra,8(sp)
   16ca6:	6402                	c.ldsp	s0,0(sp)
   16ca8:	0141                	c.addi	sp,16
   16caa:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16cac:	55fd                	c.li	a1,-1
   16cae:	03050513          	addi	a0,a0,48
   16cb2:	eceff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16cb6:	b7e5                	c.j	16c9e <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x16>
	_M_dispose();
   16cb8:	601c                	c.ld	a5,0(s0)
   16cba:	6b9c                	c.ld	a5,16(a5)
   16cbc:	8522                	c.mv	a0,s0
   16cbe:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16cc0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16cc4:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16cc8:	cf89                	c.beqz	a5,16ce2 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x5a>
    _Atomic_word __result = *__mem;
   16cca:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   16ccc:	fff5079b          	addiw	a5,a0,-1
   16cd0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16cd2:	4785                	c.li	a5,1
   16cd4:	fcf518e3          	bne	a0,a5,16ca4 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x1c>
	    _M_destroy();
   16cd8:	601c                	c.ld	a5,0(s0)
   16cda:	6f9c                	c.ld	a5,24(a5)
   16cdc:	8522                	c.mv	a0,s0
   16cde:	9782                	c.jalr	a5
    }
   16ce0:	b7d1                	c.j	16ca4 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x1c>
      return __exchange_and_add(__mem, __val);
   16ce2:	55fd                	c.li	a1,-1
   16ce4:	03440513          	addi	a0,s0,52
   16ce8:	e98ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16cec:	b7dd                	c.j	16cd2 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()+0x4a>

0000000000016cee <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)>:

  const void *load(section_type section, size_t *size_out) {
   16cee:	7159                	c.addi16sp	sp,-112
   16cf0:	f486                	c.sdsp	ra,104(sp)
   16cf2:	f0a2                	c.sdsp	s0,96(sp)
   16cf4:	eca6                	c.sdsp	s1,88(sp)
   16cf6:	e8ca                	c.sdsp	s2,80(sp)
   16cf8:	e4ce                	c.sdsp	s3,72(sp)
   16cfa:	8932                	c.mv	s2,a2
    auto sec = f.get_section(section_type_to_name(section));
   16cfc:	00850993          	addi	s3,a0,8
   16d00:	852e                	c.mv	a0,a1
   16d02:	3200f0ef          	jal	ra,26022 <dwarf::elf::section_type_to_name(dwarf::section_type)>
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
#else
	_GLIBCXX20_CONSTEXPR
	_Alloc_hider(pointer __dat, const _Alloc& __a)
	: allocator_type(__a), _M_p(__dat) { }
   16d06:	101c                	c.addi4spn	a5,sp,32
   16d08:	e83e                	c.sdsp	a5,16(sp)
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
   16d0a:	c91d                	c.beqz	a0,16d40 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x52>
   16d0c:	84aa                	c.mv	s1,a0
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   16d0e:	f02ff0ef          	jal	ra,16410 <strlen@plt>
   16d12:	842a                	c.mv	s0,a0
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   16d14:	e42a                	c.sdsp	a0,8(sp)

	if (__dnew > size_type(_S_local_capacity))
   16d16:	47bd                	c.li	a5,15
   16d18:	02a7ea63          	bltu	a5,a0,16d4c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x5e>
	if (__n == 1)
   16d1c:	4785                	c.li	a5,1
   16d1e:	04f51463          	bne	a0,a5,16d66 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x78>
	__c1 = __c2;
   16d22:	0004c783          	lbu	a5,0(s1)
   16d26:	02f10023          	sb	a5,32(sp)

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
   16d2a:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   16d2c:	ec3a                	c.sdsp	a4,24(sp)
   16d2e:	67c2                	c.ldsp	a5,16(sp)
   16d30:	97ba                	c.add	a5,a4
   16d32:	00078023          	sb	zero,0(a5)
   16d36:	080c                	c.addi4spn	a1,sp,16
   16d38:	854e                	c.mv	a0,s3
   16d3a:	50d130ef          	jal	ra,2aa46 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>
   16d3e:	a03d                	c.j	16d6c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x7e>
	  std::__throw_logic_error(__N("basic_string: "
   16d40:	0002d537          	lui	a0,0x2d
   16d44:	e2050513          	addi	a0,a0,-480 # 2ce20 <__libc_csu_fini+0x8>
   16d48:	f78ff0ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>
	    _M_data(_M_create(__dnew, size_type(0)));
   16d4c:	4601                	c.li	a2,0
   16d4e:	002c                	c.addi4spn	a1,sp,8
   16d50:	0808                	c.addi4spn	a0,sp,16
   16d52:	9bfff0ef          	jal	ra,16710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   16d56:	e82a                	c.sdsp	a0,16(sp)
      { _M_allocated_capacity = __capacity; }
   16d58:	67a2                	c.ldsp	a5,8(sp)
   16d5a:	f03e                	c.sdsp	a5,32(sp)
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   16d5c:	8622                	c.mv	a2,s0
   16d5e:	85a6                	c.mv	a1,s1
   16d60:	851ff0ef          	jal	ra,165b0 <memcpy@plt>
   16d64:	b7d9                	c.j	16d2a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x3c>
	if (__n == 0)
   16d66:	d171                	c.beqz	a0,16d2a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x3c>
      { return _M_dataplus._M_p; }
   16d68:	1008                	c.addi4spn	a0,sp,32
   16d6a:	bfcd                	c.j	16d5c <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x6e>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16d6c:	611c                	c.ld	a5,0(a0)
   16d6e:	f83e                	c.sdsp	a5,48(sp)
      : _M_pi(__r._M_pi)
   16d70:	6508                	c.ld	a0,8(a0)
   16d72:	fc2a                	c.sdsp	a0,56(sp)
	if (_M_pi != nullptr)
   16d74:	c519                	c.beqz	a0,16d82 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x94>
    if (__is_single_threaded())
   16d76:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16d7a:	c385                	c.beqz	a5,16d9a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xac>
  { *__mem += __val; }
   16d7c:	591c                	c.lw	a5,48(a0)
   16d7e:	2785                	c.addiw	a5,1
   16d80:	d91c                	c.sw	a5,48(a0)
   16d82:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   16d84:	101c                	c.addi4spn	a5,sp,32
   16d86:	00f50463          	beq	a0,a5,16d8e <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xa0>
   16d8a:	f86ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }
   16d8e:	7442                	c.ldsp	s0,48(sp)
    if (!sec.valid())
   16d90:	c00d                	c.beqz	s0,16db2 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xc4>
      return nullptr;
    *size_out = sec.size();
   16d92:	1808                	c.addi4spn	a0,sp,48
   16d94:	7e4130ef          	jal	ra,2a578 <elf::section::size() const>
   16d98:	a039                	c.j	16da6 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xb8>
      __atomic_add(__mem, __val);
   16d9a:	4585                	c.li	a1,1
   16d9c:	03050513          	addi	a0,a0,48
   16da0:	db0ff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   16da4:	bff9                	c.j	16d82 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x94>
   16da6:	00a93023          	sd	a0,0(s2)
    return sec.data();
   16daa:	1808                	c.addi4spn	a0,sp,48
   16dac:	70c130ef          	jal	ra,2a4b8 <elf::section::data() const>
   16db0:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   16db2:	74e2                	c.ldsp	s1,56(sp)
   16db4:	c899                	c.beqz	s1,16dca <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
    if (__is_single_threaded())
   16db6:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16dba:	c385                	c.beqz	a5,16dda <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xec>
    _Atomic_word __result = *__mem;
   16dbc:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   16dbe:	fff5079b          	addiw	a5,a0,-1
   16dc2:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16dc4:	4785                	c.li	a5,1
   16dc6:	02f50063          	beq	a0,a5,16de6 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xf8>
  }
   16dca:	8522                	c.mv	a0,s0
   16dcc:	70a6                	c.ldsp	ra,104(sp)
   16dce:	7406                	c.ldsp	s0,96(sp)
   16dd0:	64e6                	c.ldsp	s1,88(sp)
   16dd2:	6946                	c.ldsp	s2,80(sp)
   16dd4:	69a6                	c.ldsp	s3,72(sp)
   16dd6:	6165                	c.addi16sp	sp,112
   16dd8:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16dda:	55fd                	c.li	a1,-1
   16ddc:	03048513          	addi	a0,s1,48
   16de0:	da0ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16de4:	b7c5                	c.j	16dc4 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xd6>
	_M_dispose();
   16de6:	609c                	c.ld	a5,0(s1)
   16de8:	6b9c                	c.ld	a5,16(a5)
   16dea:	8526                	c.mv	a0,s1
   16dec:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16dee:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16df2:	e201c783          	lbu	a5,-480(gp) # 39620 <__libc_single_threaded@GLIBC_2.32>
   16df6:	cf89                	c.beqz	a5,16e10 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x122>
    _Atomic_word __result = *__mem;
   16df8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   16dfa:	fff5079b          	addiw	a5,a0,-1
   16dfe:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16e00:	4785                	c.li	a5,1
   16e02:	fcf514e3          	bne	a0,a5,16dca <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
	    _M_destroy();
   16e06:	609c                	c.ld	a5,0(s1)
   16e08:	6f9c                	c.ld	a5,24(a5)
   16e0a:	8526                	c.mv	a0,s1
   16e0c:	9782                	c.jalr	a5
   16e0e:	bf75                	c.j	16dca <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0xdc>
      return __exchange_and_add(__mem, __val);
   16e10:	55fd                	c.li	a1,-1
   16e12:	03448513          	addi	a0,s1,52
   16e16:	d6aff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16e1a:	b7dd                	c.j	16e00 <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x112>
      { return _M_dataplus._M_p; }
   16e1c:	842a                	c.mv	s0,a0
   16e1e:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   16e20:	101c                	c.addi4spn	a5,sp,32
   16e22:	00f50463          	beq	a0,a5,16e2a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x13c>
   16e26:	eeaff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   16e2a:	8522                	c.mv	a0,s0
   16e2c:	8c5ff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   16e30:	842a                	c.mv	s0,a0
   16e32:	7562                	c.ldsp	a0,56(sp)
   16e34:	c119                	c.beqz	a0,16e3a <dwarf::elf::elf_loader<elf::elf>::load(dwarf::section_type, unsigned long*)+0x14c>
	  _M_pi->_M_release();
   16e36:	e53ff0ef          	jal	ra,16c88 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()>
   16e3a:	8522                	c.mv	a0,s0
   16e3c:	8b5ff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000016e40 <dwarf::dwarf::~dwarf()>:
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
    infocur.subsection();
  }
}

dwarf::~dwarf() {}
   16e40:	1141                	c.addi	sp,-16
   16e42:	e406                	c.sdsp	ra,8(sp)
   16e44:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   16e46:	6500                	c.ld	s0,8(a0)
   16e48:	cc19                	c.beqz	s0,16e66 <dwarf::dwarf::~dwarf()+0x26>
    if (__is_single_threaded())
   16e4a:	00022797          	auipc	a5,0x22
   16e4e:	6367b783          	ld	a5,1590(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   16e52:	0007c783          	lbu	a5,0(a5)
   16e56:	cf81                	c.beqz	a5,16e6e <dwarf::dwarf::~dwarf()+0x2e>
    _Atomic_word __result = *__mem;
   16e58:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   16e5a:	fff5079b          	addiw	a5,a0,-1
   16e5e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16e60:	4785                	c.li	a5,1
   16e62:	00f50c63          	beq	a0,a5,16e7a <dwarf::dwarf::~dwarf()+0x3a>
   16e66:	60a2                	c.ldsp	ra,8(sp)
   16e68:	6402                	c.ldsp	s0,0(sp)
   16e6a:	0141                	c.addi	sp,16
   16e6c:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16e6e:	55fd                	c.li	a1,-1
   16e70:	03040513          	addi	a0,s0,48
   16e74:	d0cff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16e78:	b7e5                	c.j	16e60 <dwarf::dwarf::~dwarf()+0x20>
	_M_dispose();
   16e7a:	601c                	c.ld	a5,0(s0)
   16e7c:	6b9c                	c.ld	a5,16(a5)
   16e7e:	8522                	c.mv	a0,s0
   16e80:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16e82:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16e86:	00022797          	auipc	a5,0x22
   16e8a:	5fa7b783          	ld	a5,1530(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   16e8e:	0007c783          	lbu	a5,0(a5)
   16e92:	cf89                	c.beqz	a5,16eac <dwarf::dwarf::~dwarf()+0x6c>
    _Atomic_word __result = *__mem;
   16e94:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   16e96:	fff5079b          	addiw	a5,a0,-1
   16e9a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16e9c:	4785                	c.li	a5,1
   16e9e:	fcf514e3          	bne	a0,a5,16e66 <dwarf::dwarf::~dwarf()+0x26>
	    _M_destroy();
   16ea2:	601c                	c.ld	a5,0(s0)
   16ea4:	6f9c                	c.ld	a5,24(a5)
   16ea6:	8522                	c.mv	a0,s0
   16ea8:	9782                	c.jalr	a5
   16eaa:	bf75                	c.j	16e66 <dwarf::dwarf::~dwarf()+0x26>
      return __exchange_and_add(__mem, __val);
   16eac:	55fd                	c.li	a1,-1
   16eae:	03440513          	addi	a0,s0,52
   16eb2:	cceff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16eb6:	b7dd                	c.j	16e9c <dwarf::dwarf::~dwarf()+0x5c>

0000000000016eb8 <dwarf::dwarf::compilation_units() const>:

const std::vector<compilation_unit> &dwarf::compilation_units() const {
   16eb8:	1141                	c.addi	sp,-16
   16eba:	e406                	c.sdsp	ra,8(sp)
   16ebc:	e022                	c.sdsp	s0,0(sp)
   16ebe:	842a                	c.mv	s0,a0
  static std::vector<compilation_unit> empty;
   16ec0:	e4018513          	addi	a0,gp,-448 # 39640 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   16ec4:	87dff0ef          	jal	ra,16740 <__cxa_guard_acquire@plt>
   16ec8:	e909                	c.bnez	a0,16eda <dwarf::dwarf::compilation_units() const+0x22>
      { return _M_ptr != nullptr; }
   16eca:	6008                	c.ld	a0,0(s0)
  if (!m)
   16ecc:	cd05                	c.beqz	a0,16f04 <dwarf::dwarf::compilation_units() const+0x4c>
    return empty;
  return m->compilation_units;
   16ece:	03050513          	addi	a0,a0,48
}
   16ed2:	60a2                	c.ldsp	ra,8(sp)
   16ed4:	6402                	c.ldsp	s0,0(sp)
   16ed6:	0141                	c.addi	sp,16
   16ed8:	8082                	c.jr	ra
	pointer _M_finish;
	pointer _M_end_of_storage;

	_GLIBCXX20_CONSTEXPR
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   16eda:	e2818593          	addi	a1,gp,-472 # 39628 <dwarf::dwarf::compilation_units() const::empty>
   16ede:	0005b023          	sd	zero,0(a1)
   16ee2:	0005b423          	sd	zero,8(a1)
   16ee6:	0005b823          	sd	zero,16(a1)
  static std::vector<compilation_unit> empty;
   16eea:	e0818613          	addi	a2,gp,-504 # 39608 <__dso_handle>
   16eee:	00022517          	auipc	a0,0x22
   16ef2:	48253503          	ld	a0,1154(a0) # 39370 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()@@Base+0x1fd3a>
   16ef6:	82bff0ef          	jal	ra,16720 <__cxa_atexit@plt>
   16efa:	e4018513          	addi	a0,gp,-448 # 39640 <guard variable for dwarf::dwarf::compilation_units() const::empty>
   16efe:	d92ff0ef          	jal	ra,16490 <__cxa_guard_release@plt>
   16f02:	b7e1                	c.j	16eca <dwarf::dwarf::compilation_units() const+0x12>
    return empty;
   16f04:	e2818513          	addi	a0,gp,-472 # 39628 <dwarf::dwarf::compilation_units() const::empty>
   16f08:	b7e9                	c.j	16ed2 <dwarf::dwarf::compilation_units() const+0x1a>

0000000000016f0a <dwarf::unit::~unit()>:
        have_abbrevs(false) {}

  void force_abbrevs();
};

unit::~unit() {}
   16f0a:	1141                	c.addi	sp,-16
   16f0c:	e406                	c.sdsp	ra,8(sp)
   16f0e:	e022                	c.sdsp	s0,0(sp)
   16f10:	00022797          	auipc	a5,0x22
   16f14:	6a07b783          	ld	a5,1696(a5) # 395b0 <vtable for dwarf::unit@@Base+0xc4f8>
   16f18:	07c1                	c.addi	a5,16
   16f1a:	e11c                	c.sd	a5,0(a0)
	if (_M_pi != nullptr)
   16f1c:	6900                	c.ld	s0,16(a0)
   16f1e:	cc19                	c.beqz	s0,16f3c <dwarf::unit::~unit()+0x32>
    if (__is_single_threaded())
   16f20:	00022797          	auipc	a5,0x22
   16f24:	5607b783          	ld	a5,1376(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   16f28:	0007c783          	lbu	a5,0(a5)
   16f2c:	cf81                	c.beqz	a5,16f44 <dwarf::unit::~unit()+0x3a>
    _Atomic_word __result = *__mem;
   16f2e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   16f30:	fff5079b          	addiw	a5,a0,-1
   16f34:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   16f36:	4785                	c.li	a5,1
   16f38:	00f50c63          	beq	a0,a5,16f50 <dwarf::unit::~unit()+0x46>
   16f3c:	60a2                	c.ldsp	ra,8(sp)
   16f3e:	6402                	c.ldsp	s0,0(sp)
   16f40:	0141                	c.addi	sp,16
   16f42:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   16f44:	55fd                	c.li	a1,-1
   16f46:	03040513          	addi	a0,s0,48
   16f4a:	c36ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f4e:	b7e5                	c.j	16f36 <dwarf::unit::~unit()+0x2c>
	_M_dispose();
   16f50:	601c                	c.ld	a5,0(s0)
   16f52:	6b9c                	c.ld	a5,16(a5)
   16f54:	8522                	c.mv	a0,s0
   16f56:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   16f58:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   16f5c:	00022797          	auipc	a5,0x22
   16f60:	5247b783          	ld	a5,1316(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   16f64:	0007c783          	lbu	a5,0(a5)
   16f68:	cf89                	c.beqz	a5,16f82 <dwarf::unit::~unit()+0x78>
    _Atomic_word __result = *__mem;
   16f6a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   16f6c:	fff5079b          	addiw	a5,a0,-1
   16f70:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   16f72:	4785                	c.li	a5,1
   16f74:	fcf514e3          	bne	a0,a5,16f3c <dwarf::unit::~unit()+0x32>
	    _M_destroy();
   16f78:	601c                	c.ld	a5,0(s0)
   16f7a:	6f9c                	c.ld	a5,24(a5)
   16f7c:	8522                	c.mv	a0,s0
   16f7e:	9782                	c.jalr	a5
   16f80:	bf75                	c.j	16f3c <dwarf::unit::~unit()+0x32>
      return __exchange_and_add(__mem, __val);
   16f82:	55fd                	c.li	a1,-1
   16f84:	03440513          	addi	a0,s0,52
   16f88:	bf8ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   16f8c:	b7dd                	c.j	16f72 <dwarf::unit::~unit()+0x68>

0000000000016f8e <dwarf::unit::~unit()>:
   16f8e:	1141                	c.addi	sp,-16
   16f90:	e406                	c.sdsp	ra,8(sp)
   16f92:	e022                	c.sdsp	s0,0(sp)
   16f94:	842a                	c.mv	s0,a0
   16f96:	f75ff0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   16f9a:	8522                	c.mv	a0,s0
   16f9c:	d74ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   16fa0:	60a2                	c.ldsp	ra,8(sp)
   16fa2:	6402                	c.ldsp	s0,0(sp)
   16fa4:	0141                	c.addi	sp,16
   16fa6:	8082                	c.jr	ra

0000000000016fa8 <dwarf::unit::get_dwarf() const>:

const dwarf &unit::get_dwarf() const { return m->file; }
   16fa8:	6508                	c.ld	a0,8(a0)
   16faa:	8082                	c.jr	ra

0000000000016fac <dwarf::unit::get_section_offset() const>:

section_offset unit::get_section_offset() const { return m->offset; }
   16fac:	651c                	c.ld	a5,8(a0)
   16fae:	6b88                	c.ld	a0,16(a5)
   16fb0:	8082                	c.jr	ra

0000000000016fb2 <dwarf::unit::data() const>:
    m->root.read(m->root_offset);
  }
  return m->root;
}

const std::shared_ptr<section> &unit::data() const { return m->subsec; }
   16fb2:	6508                	c.ld	a0,8(a0)
   16fb4:	0561                	c.addi	a0,24
   16fb6:	8082                	c.jr	ra

0000000000016fb8 <dwarf::type_unit::get_type_signature() const>:

  m = make_shared<impl>(file, offset, subsec, debug_abbrev_offset,
                        sub.get_section_offset(), type_signature, type_offset);
}

uint64_t type_unit::get_type_signature() const { return m->type_signature; }
   16fb8:	651c                	c.ld	a5,8(a0)
   16fba:	7f88                	c.ld	a0,56(a5)
   16fbc:	8082                	c.jr	ra

0000000000016fbe <dwarf::dwarf::get_section(dwarf::section_type) const>:
std::shared_ptr<section> dwarf::get_section(section_type type) const {
   16fbe:	7171                	c.addi16sp	sp,-176
   16fc0:	f506                	c.sdsp	ra,168(sp)
   16fc2:	f122                	c.sdsp	s0,160(sp)
   16fc4:	ed26                	c.sdsp	s1,152(sp)
   16fc6:	e94a                	c.sdsp	s2,144(sp)
   16fc8:	e54e                	c.sdsp	s3,136(sp)
   16fca:	e152                	c.sdsp	s4,128(sp)
   16fcc:	842a                	c.mv	s0,a0
   16fce:	84ae                	c.mv	s1,a1
   16fd0:	c632                	c.swsp	a2,12(sp)
  if (type == section_type::info)
   16fd2:	470d                	c.li	a4,3
   16fd4:	02e60d63          	beq	a2,a4,1700e <dwarf::dwarf::get_section(dwarf::section_type) const+0x50>
   16fd8:	87b2                	c.mv	a5,a2
  if (type == section_type::abbrev)
   16fda:	e63d                	c.bnez	a2,17048 <dwarf::dwarf::get_section(dwarf::section_type) const+0x8a>
      { return _M_ptr; }
   16fdc:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   16fde:	7398                	c.ld	a4,32(a5)
   16fe0:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   16fe2:	7788                	c.ld	a0,40(a5)
   16fe4:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   16fe6:	c919                	c.beqz	a0,16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   16fe8:	00022797          	auipc	a5,0x22
   16fec:	4987b783          	ld	a5,1176(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   16ff0:	0007c783          	lbu	a5,0(a5)
   16ff4:	c7a1                	c.beqz	a5,1703c <dwarf::dwarf::get_section(dwarf::section_type) const+0x7e>
  { *__mem += __val; }
   16ff6:	591c                	c.lw	a5,48(a0)
   16ff8:	2785                	c.addiw	a5,1
   16ffa:	d91c                	c.sw	a5,48(a0)
}
   16ffc:	8522                	c.mv	a0,s0
   16ffe:	70aa                	c.ldsp	ra,168(sp)
   17000:	740a                	c.ldsp	s0,160(sp)
   17002:	64ea                	c.ldsp	s1,152(sp)
   17004:	694a                	c.ldsp	s2,144(sp)
   17006:	69aa                	c.ldsp	s3,136(sp)
   17008:	6a0a                	c.ldsp	s4,128(sp)
   1700a:	614d                	c.addi16sp	sp,176
   1700c:	8082                	c.jr	ra
      { return _M_ptr; }
   1700e:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17010:	6b98                	c.ld	a4,16(a5)
   17012:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   17014:	6f88                	c.ld	a0,24(a5)
   17016:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   17018:	d175                	c.beqz	a0,16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   1701a:	00022797          	auipc	a5,0x22
   1701e:	4667b783          	ld	a5,1126(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17022:	0007c783          	lbu	a5,0(a5)
   17026:	c789                	c.beqz	a5,17030 <dwarf::dwarf::get_section(dwarf::section_type) const+0x72>
  { *__mem += __val; }
   17028:	591c                	c.lw	a5,48(a0)
   1702a:	2785                	c.addiw	a5,1
   1702c:	d91c                	c.sw	a5,48(a0)
   1702e:	b7f9                	c.j	16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      __atomic_add(__mem, __val);
   17030:	4585                	c.li	a1,1
   17032:	03050513          	addi	a0,a0,48
   17036:	b1aff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1703a:	b7c9                	c.j	16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
   1703c:	4585                	c.li	a1,1
   1703e:	03050513          	addi	a0,a0,48
   17042:	b0eff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17046:	bf5d                	c.j	16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      { return _M_ptr; }
   17048:	618c                	c.ld	a1,0(a1)
      _M_rightmost() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_mbegin() const _GLIBCXX_NOEXCEPT
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1704a:	6dd8                	c.ld	a4,152(a1)
	  (this->_M_impl._M_header._M_parent);
      }

      _Base_ptr
      _M_end() _GLIBCXX_NOEXCEPT
      { return &this->_M_impl._M_header; }
   1704c:	09058513          	addi	a0,a1,144
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Base_ptr __y,
		   const _Key& __k)
    {
      while (__x != 0)
   17050:	28070c63          	beq	a4,zero,172e8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
   17054:	862a                	c.mv	a2,a0
   17056:	a019                	c.j	1705c <dwarf::dwarf::get_section(dwarf::section_type) const+0x9e>
      { return static_cast<_Link_type>(__x->_M_right); }
   17058:	6f18                	c.ld	a4,24(a4)
      while (__x != 0)
   1705a:	c719                	c.beqz	a4,17068 <dwarf::dwarf::get_section(dwarf::section_type) const+0xaa>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1705c:	5314                	c.lw	a3,32(a4)
   1705e:	fef6cde3          	blt	a3,a5,17058 <dwarf::dwarf::get_section(dwarf::section_type) const+0x9a>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17062:	863a                	c.mv	a2,a4
	  __y = __x, __x = _S_left(__x);
   17064:	6b18                	c.ld	a4,16(a4)
   17066:	bfd5                	c.j	1705a <dwarf::dwarf::get_section(dwarf::section_type) const+0x9c>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
   17068:	28c50063          	beq	a0,a2,172e8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
	      || _M_impl._M_key_compare(__k,
   1706c:	5218                	c.lw	a4,32(a2)
   1706e:	26e7cd63          	blt	a5,a4,172e8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x32a>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17072:	761c                	c.ld	a5,40(a2)
   17074:	e01c                	c.sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   17076:	7a08                	c.ld	a0,48(a2)
   17078:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   1707a:	d149                	c.beqz	a0,16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   1707c:	00022797          	auipc	a5,0x22
   17080:	4047b783          	ld	a5,1028(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17084:	0007c783          	lbu	a5,0(a5)
   17088:	c789                	c.beqz	a5,17092 <dwarf::dwarf::get_section(dwarf::section_type) const+0xd4>
  { *__mem += __val; }
   1708a:	591c                	c.lw	a5,48(a0)
   1708c:	2785                	c.addiw	a5,1
   1708e:	d91c                	c.sw	a5,48(a0)
   17090:	b7b5                	c.j	16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      __atomic_add(__mem, __val);
   17092:	4585                	c.li	a1,1
   17094:	03050513          	addi	a0,a0,48
   17098:	ab8ff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1709c:	b785                	c.j	16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
                       " section missing");
   1709e:	4541                	c.li	a0,16
   170a0:	b80ff0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   170a4:	84aa                	c.mv	s1,a0
    throw format_error(std::string(elf::section_type_to_name(type)) +
   170a6:	4532                	c.lwsp	a0,12(sp)
   170a8:	77b0e0ef          	jal	ra,26022 <dwarf::elf::section_type_to_name(dwarf::section_type)>
   170ac:	85aa                	c.mv	a1,a0
   170ae:	08b0                	c.addi4spn	a2,sp,88
   170b0:	0808                	c.addi4spn	a0,sp,16
   170b2:	d3eff0ef          	jal	ra,165f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
	      const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }
   170b6:	00016597          	auipc	a1,0x16
   170ba:	0d258593          	addi	a1,a1,210 # 2d188 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x30>
   170be:	0808                	c.addi4spn	a0,sp,16
   170c0:	ee0ff0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   170c4:	85aa                	c.mv	a1,a0
   170c6:	1800                	c.addi4spn	s0,sp,48
   170c8:	8522                	c.mv	a0,s0
   170ca:	ba6ff0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   170ce:	85a2                	c.mv	a1,s0
   170d0:	8526                	c.mv	a0,s1
   170d2:	cceff0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   170d6:	00022797          	auipc	a5,0x22
   170da:	4827b783          	ld	a5,1154(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   170de:	07c1                	c.addi	a5,16
   170e0:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   170e2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   170e4:	009c                	c.addi4spn	a5,sp,64
   170e6:	00f50463          	beq	a0,a5,170ee <dwarf::dwarf::get_section(dwarf::section_type) const+0x130>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   170ea:	c26ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   170ee:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   170f0:	101c                	c.addi4spn	a5,sp,32
   170f2:	00f50463          	beq	a0,a5,170fa <dwarf::dwarf::get_section(dwarf::section_type) const+0x13c>
   170f6:	c1aff0ef          	jal	ra,16510 <operator delete(void*)@plt>
                       " section missing");
   170fa:	00022617          	auipc	a2,0x22
   170fe:	28663603          	ld	a2,646(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   17102:	00022597          	auipc	a1,0x22
   17106:	1ae5b583          	ld	a1,430(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1710a:	8526                	c.mv	a0,s1
   1710c:	db4ff0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return static_cast<_Link_type>(__x->_M_right); }
   17110:	6f9c                	c.ld	a5,24(a5)
      while (__x != 0)
   17112:	c799                	c.beqz	a5,17120 <dwarf::dwarf::get_section(dwarf::section_type) const+0x162>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   17114:	5398                	c.lw	a4,32(a5)
   17116:	fed74de3          	blt	a4,a3,17110 <dwarf::dwarf::get_section(dwarf::section_type) const+0x152>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1711a:	893e                	c.mv	s2,a5
	  __y = __x, __x = _S_left(__x);
   1711c:	6b9c                	c.ld	a5,16(a5)
   1711e:	bfd5                	c.j	17112 <dwarf::dwarf::get_section(dwarf::section_type) const+0x154>
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
   17120:	0cc90963          	beq	s2,a2,171f2 <dwarf::dwarf::get_section(dwarf::section_type) const+0x234>
   17124:	02092783          	lw	a5,32(s2)
   17128:	02f6d363          	bge	a3,a5,1714e <dwarf::dwarf::get_section(dwarf::section_type) const+0x190>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }
   1712c:	007c                	c.addi4spn	a5,sp,12
   1712e:	f4be                	c.sdsp	a5,104(sp)
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17130:	1098                	c.addi4spn	a4,sp,96
   17132:	10b4                	c.addi4spn	a3,sp,104
   17134:	00016617          	auipc	a2,0x16
   17138:	36460613          	addi	a2,a2,868 # 2d498 <std::piecewise_construct>
   1713c:	85ca                	c.mv	a1,s2
   1713e:	08850513          	addi	a0,a0,136
   17142:	00022317          	auipc	t1,0x22
   17146:	25e33303          	ld	t1,606(t1) # 393a0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x1f0da>
   1714a:	9302                	c.jalr	t1
   1714c:	892a                	c.mv	s2,a0
      { return _M_ptr; }
   1714e:	609c                	c.ld	a5,0(s1)
   17150:	0107ba03          	ld	s4,16(a5)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17154:	06000513          	addi	a0,zero,96
   17158:	bc8ff0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1715c:	00052423          	sw	zero,8(a0)
   17160:	00052623          	sw	zero,12(a0)
   17164:	00052823          	sw	zero,16(a0)
   17168:	00052a23          	sw	zero,20(a0)
   1716c:	00052c23          	sw	zero,24(a0)
   17170:	00052e23          	sw	zero,28(a0)
   17174:	02053023          	sd	zero,32(a0)
   17178:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1717c:	4785                	c.li	a5,1
   1717e:	d91c                	c.sw	a5,48(a0)
   17180:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17182:	00022797          	auipc	a5,0x22
   17186:	43e7b783          	ld	a5,1086(a5) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   1718a:	07c1                	c.addi	a5,16
   1718c:	e11c                	c.sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1718e:	01ca2703          	lw	a4,28(s4)
  const byte_order ord;
  unsigned addr_size;

  section(section_type type, const void *begin, section_length length,
          byte_order ord, format fmt = format::unknown, unsigned addr_size = 0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17192:	47a9                	c.li	a5,10
   17194:	dd1c                	c.sw	a5,56(a0)
   17196:	05353023          	sd	s3,64(a0)
   1719a:	67c6                	c.ldsp	a5,80(sp)
   1719c:	97ce                	c.add	a5,s3
   1719e:	e53c                	c.sd	a5,72(a0)
   171a0:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   171a4:	c978                	c.sw	a4,84(a0)
   171a6:	04052c23          	sw	zero,88(a0)
   171aa:	03850793          	addi	a5,a0,56
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   171ae:	02f93423          	sd	a5,40(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   171b2:	03093983          	ld	s3,48(s2)
	__r._M_pi = _M_pi;
   171b6:	02a93823          	sd	a0,48(s2)
	if (_M_pi != nullptr)
   171ba:	02098263          	beq	s3,zero,171de <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
    if (__is_single_threaded())
   171be:	00022797          	auipc	a5,0x22
   171c2:	2c27b783          	ld	a5,706(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   171c6:	0007c783          	lbu	a5,0(a5)
   171ca:	c795                	c.beqz	a5,171f6 <dwarf::dwarf::get_section(dwarf::section_type) const+0x238>
    _Atomic_word __result = *__mem;
   171cc:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   171d0:	fff5079b          	addiw	a5,a0,-1
   171d4:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   171d8:	4785                	c.li	a5,1
   171da:	02f50463          	beq	a0,a5,17202 <dwarf::dwarf::get_section(dwarf::section_type) const+0x244>
      { return _M_ptr; }
   171de:	6088                	c.ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   171e0:	6d5c                	c.ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   171e2:	09050613          	addi	a2,a0,144
      while (__x != 0)
   171e6:	c3e1                	c.beqz	a5,172a6 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2e8>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
   171e8:	46b2                	c.lwsp	a3,12(sp)
   171ea:	85b2                	c.mv	a1,a2
   171ec:	a08d                	c.j	1724e <dwarf::dwarf::get_section(dwarf::section_type) const+0x290>
   171ee:	8932                	c.mv	s2,a2
   171f0:	bf35                	c.j	1712c <dwarf::dwarf::get_section(dwarf::section_type) const+0x16e>
   171f2:	8932                	c.mv	s2,a2
   171f4:	bf25                	c.j	1712c <dwarf::dwarf::get_section(dwarf::section_type) const+0x16e>
      return __exchange_and_add(__mem, __val);
   171f6:	55fd                	c.li	a1,-1
   171f8:	03098513          	addi	a0,s3,48
   171fc:	984ff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17200:	bfe1                	c.j	171d8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x21a>
	_M_dispose();
   17202:	0009b783          	ld	a5,0(s3)
   17206:	6b9c                	c.ld	a5,16(a5)
   17208:	854e                	c.mv	a0,s3
   1720a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1720c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17210:	00022797          	auipc	a5,0x22
   17214:	2707b783          	ld	a5,624(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17218:	0007c783          	lbu	a5,0(a5)
   1721c:	c385                	c.beqz	a5,1723c <dwarf::dwarf::get_section(dwarf::section_type) const+0x27e>
    _Atomic_word __result = *__mem;
   1721e:	0349a783          	lw	a5,52(s3)
    *__mem += __val;
   17222:	fff7871b          	addiw	a4,a5,-1
   17226:	02e9aa23          	sw	a4,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1722a:	4705                	c.li	a4,1
   1722c:	fae799e3          	bne	a5,a4,171de <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
	    _M_destroy();
   17230:	0009b783          	ld	a5,0(s3)
   17234:	6f9c                	c.ld	a5,24(a5)
   17236:	854e                	c.mv	a0,s3
   17238:	9782                	c.jalr	a5
   1723a:	b755                	c.j	171de <dwarf::dwarf::get_section(dwarf::section_type) const+0x220>
      return __exchange_and_add(__mem, __val);
   1723c:	55fd                	c.li	a1,-1
   1723e:	03498513          	addi	a0,s3,52
   17242:	93eff0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17246:	87aa                	c.mv	a5,a0
   17248:	b7cd                	c.j	1722a <dwarf::dwarf::get_section(dwarf::section_type) const+0x26c>
      { return static_cast<_Link_type>(__x->_M_right); }
   1724a:	6f9c                	c.ld	a5,24(a5)
      while (__x != 0)
   1724c:	c799                	c.beqz	a5,1725a <dwarf::dwarf::get_section(dwarf::section_type) const+0x29c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
   1724e:	5398                	c.lw	a4,32(a5)
   17250:	fed74de3          	blt	a4,a3,1724a <dwarf::dwarf::get_section(dwarf::section_type) const+0x28c>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   17254:	85be                	c.mv	a1,a5
	  __y = __x, __x = _S_left(__x);
   17256:	6b9c                	c.ld	a5,16(a5)
   17258:	bfd5                	c.j	1724c <dwarf::dwarf::get_section(dwarf::section_type) const+0x28e>
	if (__i == end() || key_comp()(__k, (*__i).first))
   1725a:	04c58863          	beq	a1,a2,172aa <dwarf::dwarf::get_section(dwarf::section_type) const+0x2ec>
   1725e:	519c                	c.lw	a5,32(a1)
   17260:	02f6d263          	bge	a3,a5,17284 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2c6>
   17264:	007c                	c.addi4spn	a5,sp,12
   17266:	fcbe                	c.sdsp	a5,120(sp)
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
   17268:	1898                	c.addi4spn	a4,sp,112
   1726a:	18b4                	c.addi4spn	a3,sp,120
   1726c:	00016617          	auipc	a2,0x16
   17270:	22c60613          	addi	a2,a2,556 # 2d498 <std::piecewise_construct>
   17274:	08850513          	addi	a0,a0,136
   17278:	00022317          	auipc	t1,0x22
   1727c:	12833303          	ld	t1,296(t1) # 393a0 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)@@Base+0x1f0da>
   17280:	9302                	c.jalr	t1
   17282:	85aa                	c.mv	a1,a0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17284:	759c                	c.ld	a5,40(a1)
   17286:	e01c                	c.sd	a5,0(s0)
      : _M_pi(__r._M_pi)
   17288:	7988                	c.ld	a0,48(a1)
   1728a:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   1728c:	d60508e3          	beq	a0,zero,16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
    if (__is_single_threaded())
   17290:	00022797          	auipc	a5,0x22
   17294:	1f07b783          	ld	a5,496(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17298:	0007c783          	lbu	a5,0(a5)
   1729c:	cb89                	c.beqz	a5,172ae <dwarf::dwarf::get_section(dwarf::section_type) const+0x2f0>
  { *__mem += __val; }
   1729e:	591c                	c.lw	a5,48(a0)
   172a0:	2785                	c.addiw	a5,1
   172a2:	d91c                	c.sw	a5,48(a0)
   172a4:	bba1                	c.j	16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      while (__x != 0)
   172a6:	85b2                	c.mv	a1,a2
   172a8:	bf75                	c.j	17264 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2a6>
   172aa:	85b2                	c.mv	a1,a2
   172ac:	bf65                	c.j	17264 <dwarf::dwarf::get_section(dwarf::section_type) const+0x2a6>
      __atomic_add(__mem, __val);
   172ae:	4585                	c.li	a1,1
   172b0:	03050513          	addi	a0,a0,48
   172b4:	89cff0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   172b8:	b391                	c.j	16ffc <dwarf::dwarf::get_section(dwarf::section_type) const+0x3e>
      { return _M_dataplus._M_p; }
   172ba:	842a                	c.mv	s0,a0
   172bc:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   172be:	009c                	c.addi4spn	a5,sp,64
   172c0:	00f50463          	beq	a0,a5,172c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x30a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   172c4:	a4cff0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   172c8:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   172ca:	101c                	c.addi4spn	a5,sp,32
   172cc:	00f50463          	beq	a0,a5,172d4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x316>
   172d0:	a40ff0ef          	jal	ra,16510 <operator delete(void*)@plt>
   172d4:	8526                	c.mv	a0,s1
   172d6:	9faff0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   172da:	8522                	c.mv	a0,s0
   172dc:	c14ff0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   172e0:	842a                	c.mv	s0,a0
   172e2:	b7dd                	c.j	172c8 <dwarf::dwarf::get_section(dwarf::section_type) const+0x30a>
   172e4:	842a                	c.mv	s0,a0
   172e6:	b7fd                	c.j	172d4 <dwarf::dwarf::get_section(dwarf::section_type) const+0x316>
      { return _M_ptr; }
   172e8:	6188                	c.ld	a0,0(a1)
  const void *data = m->l->load(type, &size);
   172ea:	6118                	c.ld	a4,0(a0)
   172ec:	6b18                	c.ld	a4,16(a4)
   172ee:	0890                	c.addi4spn	a2,sp,80
   172f0:	85be                	c.mv	a1,a5
   172f2:	9702                	c.jalr	a4
   172f4:	89aa                	c.mv	s3,a0
  if (!data)
   172f6:	da0504e3          	beq	a0,zero,1709e <dwarf::dwarf::get_section(dwarf::section_type) const+0xe0>
   172fa:	6088                	c.ld	a0,0(s1)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   172fc:	6d5c                	c.ld	a5,152(a0)
      { return &this->_M_impl._M_header; }
   172fe:	09050613          	addi	a2,a0,144
      while (__x != 0)
   17302:	ee0786e3          	beq	a5,zero,171ee <dwarf::dwarf::get_section(dwarf::section_type) const+0x230>
   17306:	46b2                	c.lwsp	a3,12(sp)
   17308:	8932                	c.mv	s2,a2
   1730a:	b529                	c.j	17114 <dwarf::dwarf::get_section(dwarf::section_type) const+0x156>

000000000001730c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>:
compilation_unit::compilation_unit(const dwarf &file, section_offset offset) {
   1730c:	7155                	c.addi16sp	sp,-208
   1730e:	e586                	c.sdsp	ra,200(sp)
   17310:	e1a2                	c.sdsp	s0,192(sp)
   17312:	fd26                	c.sdsp	s1,184(sp)
   17314:	f94a                	c.sdsp	s2,176(sp)
   17316:	f54e                	c.sdsp	s3,168(sp)
   17318:	f152                	c.sdsp	s4,160(sp)
   1731a:	ed56                	c.sdsp	s5,152(sp)
   1731c:	e95a                	c.sdsp	s6,144(sp)
   1731e:	84aa                	c.mv	s1,a0
   17320:	892e                	c.mv	s2,a1
   17322:	89b2                	c.mv	s3,a2
      : _M_ptr(0), _M_refcount()
   17324:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17328:	00053823          	sd	zero,16(a0)
   1732c:	00022797          	auipc	a5,0x22
   17330:	f8c7b783          	ld	a5,-116(a5) # 392b8 <vtable for dwarf::compilation_unit@@Base+0xc1e0>
   17334:	07c1                	c.addi	a5,16
   17336:	e11c                	c.sd	a5,0(a0)
  cursor cur(file.get_section(section_type::info), offset);
   17338:	460d                	c.li	a2,3
   1733a:	0108                	c.addi4spn	a0,sp,128
   1733c:	c83ff0ef          	jal	ra,16fbe <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17340:	678a                	c.ldsp	a5,128(sp)
   17342:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   17344:	652a                	c.ldsp	a0,136(sp)
   17346:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   17348:	c919                	c.beqz	a0,1735e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x52>
    if (__is_single_threaded())
   1734a:	00022797          	auipc	a5,0x22
   1734e:	1367b783          	ld	a5,310(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17352:	0007c783          	lbu	a5,0(a5)
   17356:	cf8d                	c.beqz	a5,17390 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x84>
  { *__mem += __val; }
   17358:	591c                	c.lw	a5,48(a0)
   1735a:	2785                	c.addiw	a5,1
   1735c:	d91c                	c.sw	a5,48(a0)
  std::shared_ptr<section> sec;
  const char *pos;

  cursor() : pos(nullptr) {}
  cursor(const std::shared_ptr<section> sec, section_offset offset = 0)
      : sec(sec), pos(sec->begin + offset) {}
   1735e:	678a                	c.ldsp	a5,128(sp)
   17360:	679c                	c.ld	a5,8(a5)
   17362:	97ce                	c.add	a5,s3
   17364:	f03e                	c.sdsp	a5,32(sp)
	if (_M_pi != nullptr)
   17366:	642a                	c.ldsp	s0,136(sp)
   17368:	cc19                	c.beqz	s0,17386 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
    if (__is_single_threaded())
   1736a:	00022797          	auipc	a5,0x22
   1736e:	1167b783          	ld	a5,278(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17372:	0007c783          	lbu	a5,0(a5)
   17376:	c39d                	c.beqz	a5,1739c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x90>
    _Atomic_word __result = *__mem;
   17378:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1737a:	fff5079b          	addiw	a5,a0,-1
   1737e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17380:	4785                	c.li	a5,1
   17382:	02f50363          	beq	a0,a5,173a8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x9c>
  std::shared_ptr<section> subsec = cur.subsection();
   17386:	080c                	c.addi4spn	a1,sp,16
   17388:	850a                	c.mv	a0,sp
   1738a:	33f030ef          	jal	ra,1aec8 <dwarf::cursor::subsection()>
   1738e:	a8a1                	c.j	173e6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xda>
      __atomic_add(__mem, __val);
   17390:	4585                	c.li	a1,1
   17392:	03050513          	addi	a0,a0,48
   17396:	fbbfe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1739a:	b7d1                	c.j	1735e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x52>
      return __exchange_and_add(__mem, __val);
   1739c:	55fd                	c.li	a1,-1
   1739e:	03040513          	addi	a0,s0,48
   173a2:	fdffe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   173a6:	bfe9                	c.j	17380 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x74>
	_M_dispose();
   173a8:	601c                	c.ld	a5,0(s0)
   173aa:	6b9c                	c.ld	a5,16(a5)
   173ac:	8522                	c.mv	a0,s0
   173ae:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   173b0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   173b4:	00022797          	auipc	a5,0x22
   173b8:	0cc7b783          	ld	a5,204(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   173bc:	0007c783          	lbu	a5,0(a5)
   173c0:	cf89                	c.beqz	a5,173da <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xce>
    _Atomic_word __result = *__mem;
   173c2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   173c4:	fff5079b          	addiw	a5,a0,-1
   173c8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   173ca:	4785                	c.li	a5,1
   173cc:	faf51de3          	bne	a0,a5,17386 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
	    _M_destroy();
   173d0:	601c                	c.ld	a5,0(s0)
   173d2:	6f9c                	c.ld	a5,24(a5)
   173d4:	8522                	c.mv	a0,s0
   173d6:	9782                	c.jalr	a5
   173d8:	b77d                	c.j	17386 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x7a>
      return __exchange_and_add(__mem, __val);
   173da:	55fd                	c.li	a1,-1
   173dc:	03440513          	addi	a0,s0,52
   173e0:	fa1fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   173e4:	b7dd                	c.j	173ca <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xbe>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   173e6:	6a02                	c.ldsp	s4,0(sp)
      : _M_pi(__r._M_pi)
   173e8:	6422                	c.ldsp	s0,8(sp)
	if (_M_pi != nullptr)
   173ea:	50040d63          	beq	s0,zero,17904 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5f8>
    if (__is_single_threaded())
   173ee:	00022797          	auipc	a5,0x22
   173f2:	0927b783          	ld	a5,146(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   173f6:	0007c783          	lbu	a5,0(a5)
   173fa:	cbb5                	c.beqz	a5,1746e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x162>
  { *__mem += __val; }
   173fc:	581c                	c.lw	a5,48(s0)
   173fe:	2785                	c.addiw	a5,1
   17400:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17402:	f452                	c.sdsp	s4,40(sp)
      : _M_pi(__r._M_pi)
   17404:	f822                	c.sdsp	s0,48(sp)
    if (__is_single_threaded())
   17406:	00022797          	auipc	a5,0x22
   1740a:	07a7b783          	ld	a5,122(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1740e:	0007c783          	lbu	a5,0(a5)
   17412:	c7a5                	c.beqz	a5,1747a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x16e>
  { *__mem += __val; }
   17414:	581c                	c.lw	a5,48(s0)
   17416:	2785                	c.addiw	a5,1
   17418:	d81c                	c.sw	a5,48(s0)
   1741a:	008a3783          	ld	a5,8(s4)
   1741e:	fc3e                	c.sdsp	a5,56(sp)
    if (__is_single_threaded())
   17420:	00022797          	auipc	a5,0x22
   17424:	0607b783          	ld	a5,96(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17428:	0007c783          	lbu	a5,0(a5)
   1742c:	cfa9                	c.beqz	a5,17486 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x17a>
    _Atomic_word __result = *__mem;
   1742e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17430:	fff5079b          	addiw	a5,a0,-1
   17434:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17436:	4785                	c.li	a5,1
   17438:	4cf51b63          	bne	a0,a5,1790e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
	_M_dispose();
   1743c:	601c                	c.ld	a5,0(s0)
   1743e:	6b9c                	c.ld	a5,16(a5)
   17440:	8522                	c.mv	a0,s0
   17442:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17444:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17448:	00022797          	auipc	a5,0x22
   1744c:	0387b783          	ld	a5,56(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17450:	0007c783          	lbu	a5,0(a5)
   17454:	cf9d                	c.beqz	a5,17492 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x186>
    _Atomic_word __result = *__mem;
   17456:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17458:	fff5079b          	addiw	a5,a0,-1
   1745c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1745e:	4785                	c.li	a5,1
   17460:	4af51763          	bne	a0,a5,1790e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
	    _M_destroy();
   17464:	601c                	c.ld	a5,0(s0)
   17466:	6f9c                	c.ld	a5,24(a5)
   17468:	8522                	c.mv	a0,s0
   1746a:	9782                	c.jalr	a5
   1746c:	a14d                	c.j	1790e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x602>
      __atomic_add(__mem, __val);
   1746e:	4585                	c.li	a1,1
   17470:	03040513          	addi	a0,s0,48
   17474:	eddfe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17478:	b769                	c.j	17402 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0xf6>
   1747a:	4585                	c.li	a1,1
   1747c:	03040513          	addi	a0,s0,48
   17480:	ed1fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17484:	bf59                	c.j	1741a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x10e>
      return __exchange_and_add(__mem, __val);
   17486:	55fd                	c.li	a1,-1
   17488:	03040513          	addi	a0,s0,48
   1748c:	ef5fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17490:	b75d                	c.j	17436 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x12a>
   17492:	55fd                	c.li	a1,-1
   17494:	03440513          	addi	a0,s0,52
   17498:	ee9fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1749c:	b7c9                	c.j	1745e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x152>
  section_offset offset();
  void string(std::string &out);
  const char *cstr(size_t *size_out = nullptr);

  void ensure(section_offset bytes) {
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1749e:	77a2                	c.ldsp	a5,40(sp)
   174a0:	6b98                	c.ld	a4,16(a5)
   174a2:	77e2                	c.ldsp	a5,56(sp)
   174a4:	40f70633          	sub	a2,a4,a5
   174a8:	4685                	c.li	a3,1
   174aa:	00c6f463          	bgeu	a3,a2,174b2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1a6>
   174ae:	00e7e563          	bltu	a5,a4,174b8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1ac>
      underflow();
   174b2:	1028                	c.addi4spn	a0,sp,40
   174b4:	684030ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>

  template <typename T> T fixed() {
    ensure(sizeof(T));
    static_assert(sizeof(T) <= 8, "T too big");
    uint64_t val = 0;
    const unsigned char *p = (const unsigned char *)pos;
   174b8:	7762                	c.ldsp	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   174ba:	77a2                	c.ldsp	a5,40(sp)
   174bc:	4fdc                	c.lw	a5,28(a5)
   174be:	e795                	c.bnez	a5,174ea <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1de>
      for (unsigned i = 0; i < sizeof(T); i++)
        val |= ((uint64_t)p[i]) << (i * 8);
   174c0:	00174783          	lbu	a5,1(a4)
   174c4:	07a2                	c.slli	a5,0x8
   174c6:	00074683          	lbu	a3,0(a4)
   174ca:	8fd5                	c.or	a5,a3
    } else {
      for (unsigned i = 0; i < sizeof(T); i++)
        val = (val << 8) | (uint64_t)p[i];
    }
    pos += sizeof(T);
   174cc:	0709                	c.addi	a4,2
   174ce:	fc3a                	c.sdsp	a4,56(sp)
    return (T)val;
   174d0:	03079413          	slli	s0,a5,0x30
   174d4:	9041                	c.srli	s0,0x30
  if (version < 2 || version > 4)
   174d6:	37f9                	c.addiw	a5,-2
   174d8:	17c2                	c.slli	a5,0x30
   174da:	93c1                	c.srli	a5,0x30
   174dc:	4709                	c.li	a4,2
   174de:	00f76d63          	bltu	a4,a5,174f8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1ec>
  section_offset debug_abbrev_offset = sub.offset();
   174e2:	1028                	c.addi4spn	a0,sp,40
   174e4:	37b030ef          	jal	ra,1b05e <dwarf::cursor::offset()>
   174e8:	a069                	c.j	17572 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x266>
        val = (val << 8) | (uint64_t)p[i];
   174ea:	00074783          	lbu	a5,0(a4)
   174ee:	07a2                	c.slli	a5,0x8
   174f0:	00174683          	lbu	a3,1(a4)
   174f4:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   174f6:	bfd9                	c.j	174cc <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x1c0>
                       std::to_string(version));
   174f8:	4541                	c.li	a0,16
   174fa:	f27fe0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   174fe:	892a                	c.mv	s2,a0
   17500:	85a2                	c.mv	a1,s0
   17502:	1080                	c.addi4spn	s0,sp,96
   17504:	8522                	c.mv	a0,s0
   17506:	00022317          	auipc	t1,0x22
   1750a:	f8a33303          	ld	t1,-118(t1) # 39490 <std::__cxx11::to_string(int)@@Base+0x1fcfc>
   1750e:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   17510:	00016617          	auipc	a2,0x16
   17514:	c9060613          	addi	a2,a2,-880 # 2d1a0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x48>
   17518:	4581                	c.li	a1,0
   1751a:	8522                	c.mv	a0,s0
   1751c:	e75fe0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   17520:	85aa                	c.mv	a1,a0
   17522:	0080                	c.addi4spn	s0,sp,64
   17524:	8522                	c.mv	a0,s0
   17526:	f4bfe0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1752a:	85a2                	c.mv	a1,s0
   1752c:	854a                	c.mv	a0,s2
   1752e:	872ff0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   17532:	00022797          	auipc	a5,0x22
   17536:	0267b783          	ld	a5,38(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   1753a:	07c1                	c.addi	a5,16
   1753c:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   17540:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   17542:	089c                	c.addi4spn	a5,sp,80
   17544:	00f50463          	beq	a0,a5,1754c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x240>
   17548:	fc9fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1754c:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   1754e:	189c                	c.addi4spn	a5,sp,112
   17550:	00f50463          	beq	a0,a5,17558 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x24c>
   17554:	fbdfe0ef          	jal	ra,16510 <operator delete(void*)@plt>
   17558:	00022617          	auipc	a2,0x22
   1755c:	e2863603          	ld	a2,-472(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   17560:	00022597          	auipc	a1,0x22
   17564:	d505b583          	ld	a1,-688(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   17568:	854a                	c.mv	a0,s2
   1756a:	956ff0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1756e:	842a                	c.mv	s0,a0
   17570:	ae1d                	c.j	178a6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x59a>
  section_offset debug_abbrev_offset = sub.offset();
   17572:	8aaa                	c.mv	s5,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17574:	77a2                	c.ldsp	a5,40(sp)
   17576:	6b98                	c.ld	a4,16(a5)
   17578:	77e2                	c.ldsp	a5,56(sp)
   1757a:	00e7e563          	bltu	a5,a4,17584 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x278>
      underflow();
   1757e:	1028                	c.addi4spn	a0,sp,40
   17580:	5b8030ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   17584:	77e2                	c.ldsp	a5,56(sp)
      { return _M_ptr; }
   17586:	7722                	c.ldsp	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   17588:	4f54                	c.lw	a3,28(a4)
   1758a:	34068f63          	beq	a3,zero,178e8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5dc>
        val = (val << 8) | (uint64_t)p[i];
   1758e:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   17592:	aea9                	c.j	178ec <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5e0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   17594:	842a                	c.mv	s0,a0
   17596:	00052423          	sw	zero,8(a0)
   1759a:	00052623          	sw	zero,12(a0)
   1759e:	00052823          	sw	zero,16(a0)
   175a2:	00052a23          	sw	zero,20(a0)
   175a6:	00052c23          	sw	zero,24(a0)
   175aa:	00052e23          	sw	zero,28(a0)
   175ae:	02053023          	sd	zero,32(a0)
   175b2:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   175b6:	4785                	c.li	a5,1
   175b8:	d91c                	c.sw	a5,48(a0)
   175ba:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   175bc:	00022797          	auipc	a5,0x22
   175c0:	e7c7b783          	ld	a5,-388(a5) # 39438 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   175c4:	07c1                	c.addi	a5,16
   175c6:	e11c                	c.sd	a5,0(a0)
   175c8:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   175cc:	00093783          	ld	a5,0(s2)
   175d0:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   175d2:	00893503          	ld	a0,8(s2)
   175d6:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   175d8:	cd01                	c.beqz	a0,175f0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2e4>
    if (__is_single_threaded())
   175da:	00022797          	auipc	a5,0x22
   175de:	ea67b783          	ld	a5,-346(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   175e2:	0007c783          	lbu	a5,0(a5)
   175e6:	14078c63          	beq	a5,zero,1773e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x432>
  { *__mem += __val; }
   175ea:	591c                	c.lw	a5,48(a0)
   175ec:	2785                	c.addiw	a5,1
   175ee:	d91c                	c.sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   175f0:	05343423          	sd	s3,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   175f4:	6782                	c.ldsp	a5,0(sp)
   175f6:	e83c                	c.sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   175f8:	6522                	c.ldsp	a0,8(sp)
   175fa:	ec28                	c.sd	a0,88(s0)
	if (_M_pi != nullptr)
   175fc:	cd01                	c.beqz	a0,17614 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x308>
    if (__is_single_threaded())
   175fe:	00022797          	auipc	a5,0x22
   17602:	e827b783          	ld	a5,-382(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17606:	0007c783          	lbu	a5,0(a5)
   1760a:	14078063          	beq	a5,zero,1774a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x43e>
  { *__mem += __val; }
   1760e:	591c                	c.lw	a5,48(a0)
   17610:	2785                	c.addiw	a5,1
   17612:	d91c                	c.sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   17614:	07543023          	sd	s5,96(s0)
   17618:	07443423          	sd	s4,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   1761c:	06043823          	sd	zero,112(s0)
   17620:	06043c23          	sd	zero,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   17624:	08043423          	sd	zero,136(s0)
   17628:	08043823          	sd	zero,144(s0)
  typedef T value_type;
  typedef value_type &reference;
  typedef const value_type &const_reference;
  typedef size_t size_type;

  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1762c:	0a040793          	addi	a5,s0,160
   17630:	e87c                	c.sd	a5,208(s0)
   17632:	ec7c                	c.sd	a5,216(s0)
   17634:	0d040793          	addi	a5,s0,208
   17638:	f07c                	c.sd	a5,224(s0)
   1763a:	0e043c23          	sd	zero,248(s0)
   1763e:	10043023          	sd	zero,256(s0)
   17642:	11040793          	addi	a5,s0,272
   17646:	14f43023          	sd	a5,320(s0)
   1764a:	14f43423          	sd	a5,328(s0)
   1764e:	14040793          	addi	a5,s0,320
   17652:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   17656:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1765a:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   1765e:	16040823          	sb	zero,368(s0)
   17662:	16043c23          	sd	zero,376(s0)
   17666:	18043023          	sd	zero,384(s0)
   1766a:	18043423          	sd	zero,392(s0)
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
   1766e:	1c040793          	addi	a5,s0,448
   17672:	18f43823          	sd	a5,400(s0)
   17676:	4785                	c.li	a5,1
   17678:	18f43c23          	sd	a5,408(s0)
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
   1767c:	1a043023          	sd	zero,416(s0)
   17680:	1a043423          	sd	zero,424(s0)
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   17684:	00016797          	auipc	a5,0x16
   17688:	e0c7a787          	flw	fa5,-500(a5) # 2d490 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   1768c:	1af42827          	fsw	fa5,432(s0)
   17690:	1a043c23          	sd	zero,440(s0)
   17694:	1c043023          	sd	zero,448(s0)
   17698:	0164b423          	sd	s6,8(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1769c:	0104b903          	ld	s2,16(s1)
	__r._M_pi = _M_pi;
   176a0:	e880                	c.sd	s0,16(s1)
	if (_M_pi != nullptr)
   176a2:	02090263          	beq	s2,zero,176c6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
    if (__is_single_threaded())
   176a6:	00022797          	auipc	a5,0x22
   176aa:	dda7b783          	ld	a5,-550(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   176ae:	0007c783          	lbu	a5,0(a5)
   176b2:	c3d5                	c.beqz	a5,17756 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x44a>
    _Atomic_word __result = *__mem;
   176b4:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   176b8:	fff5079b          	addiw	a5,a0,-1
   176bc:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   176c0:	4785                	c.li	a5,1
   176c2:	0af50063          	beq	a0,a5,17762 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x456>
	if (_M_pi != nullptr)
   176c6:	7442                	c.ldsp	s0,48(sp)
   176c8:	cc19                	c.beqz	s0,176e6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
    if (__is_single_threaded())
   176ca:	00022797          	auipc	a5,0x22
   176ce:	db67b783          	ld	a5,-586(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   176d2:	0007c783          	lbu	a5,0(a5)
   176d6:	cbe9                	c.beqz	a5,177a8 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x49c>
    _Atomic_word __result = *__mem;
   176d8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   176da:	fff5079b          	addiw	a5,a0,-1
   176de:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   176e0:	4785                	c.li	a5,1
   176e2:	0cf50963          	beq	a0,a5,177b4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
	if (_M_pi != nullptr)
   176e6:	6422                	c.ldsp	s0,8(sp)
   176e8:	c005                	c.beqz	s0,17708 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
    if (__is_single_threaded())
   176ea:	00022797          	auipc	a5,0x22
   176ee:	d967b783          	ld	a5,-618(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   176f2:	0007c783          	lbu	a5,0(a5)
   176f6:	0e078e63          	beq	a5,zero,177f2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4e6>
    _Atomic_word __result = *__mem;
   176fa:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   176fc:	fff5079b          	addiw	a5,a0,-1
   17700:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17702:	4785                	c.li	a5,1
   17704:	0ef50d63          	beq	a0,a5,177fe <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4f2>
	if (_M_pi != nullptr)
   17708:	6462                	c.ldsp	s0,24(sp)
   1770a:	c005                	c.beqz	s0,1772a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
    if (__is_single_threaded())
   1770c:	00022797          	auipc	a5,0x22
   17710:	d747b783          	ld	a5,-652(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17714:	0007c783          	lbu	a5,0(a5)
   17718:	12078263          	beq	a5,zero,1783c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x530>
    _Atomic_word __result = *__mem;
   1771c:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1771e:	fff5079b          	addiw	a5,a0,-1
   17722:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17724:	4785                	c.li	a5,1
   17726:	12f50163          	beq	a0,a5,17848 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x53c>
}
   1772a:	60ae                	c.ldsp	ra,200(sp)
   1772c:	640e                	c.ldsp	s0,192(sp)
   1772e:	74ea                	c.ldsp	s1,184(sp)
   17730:	794a                	c.ldsp	s2,176(sp)
   17732:	79aa                	c.ldsp	s3,168(sp)
   17734:	7a0a                	c.ldsp	s4,160(sp)
   17736:	6aea                	c.ldsp	s5,152(sp)
   17738:	6b4a                	c.ldsp	s6,144(sp)
   1773a:	6169                	c.addi16sp	sp,208
   1773c:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   1773e:	4585                	c.li	a1,1
   17740:	03050513          	addi	a0,a0,48
   17744:	c0dfe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17748:	b565                	c.j	175f0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x2e4>
   1774a:	4585                	c.li	a1,1
   1774c:	03050513          	addi	a0,a0,48
   17750:	c01fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17754:	b5c1                	c.j	17614 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x308>
      return __exchange_and_add(__mem, __val);
   17756:	55fd                	c.li	a1,-1
   17758:	03090513          	addi	a0,s2,48
   1775c:	c25fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17760:	b785                	c.j	176c0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3b4>
	_M_dispose();
   17762:	00093783          	ld	a5,0(s2)
   17766:	6b9c                	c.ld	a5,16(a5)
   17768:	854a                	c.mv	a0,s2
   1776a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1776c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17770:	00022797          	auipc	a5,0x22
   17774:	d107b783          	ld	a5,-752(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17778:	0007c783          	lbu	a5,0(a5)
   1777c:	c385                	c.beqz	a5,1779c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x490>
    _Atomic_word __result = *__mem;
   1777e:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   17782:	fff5079b          	addiw	a5,a0,-1
   17786:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1778a:	4785                	c.li	a5,1
   1778c:	f2f51de3          	bne	a0,a5,176c6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
	    _M_destroy();
   17790:	00093783          	ld	a5,0(s2)
   17794:	6f9c                	c.ld	a5,24(a5)
   17796:	854a                	c.mv	a0,s2
   17798:	9782                	c.jalr	a5
   1779a:	b735                	c.j	176c6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3ba>
      return __exchange_and_add(__mem, __val);
   1779c:	55fd                	c.li	a1,-1
   1779e:	03490513          	addi	a0,s2,52
   177a2:	bdffe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   177a6:	b7d5                	c.j	1778a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x47e>
   177a8:	55fd                	c.li	a1,-1
   177aa:	03040513          	addi	a0,s0,48
   177ae:	bd3fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   177b2:	b73d                	c.j	176e0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3d4>
	_M_dispose();
   177b4:	601c                	c.ld	a5,0(s0)
   177b6:	6b9c                	c.ld	a5,16(a5)
   177b8:	8522                	c.mv	a0,s0
   177ba:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   177bc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   177c0:	00022797          	auipc	a5,0x22
   177c4:	cc07b783          	ld	a5,-832(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   177c8:	0007c783          	lbu	a5,0(a5)
   177cc:	cf89                	c.beqz	a5,177e6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4da>
    _Atomic_word __result = *__mem;
   177ce:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   177d0:	fff5079b          	addiw	a5,a0,-1
   177d4:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   177d6:	4785                	c.li	a5,1
   177d8:	f0f517e3          	bne	a0,a5,176e6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
	    _M_destroy();
   177dc:	601c                	c.ld	a5,0(s0)
   177de:	6f9c                	c.ld	a5,24(a5)
   177e0:	8522                	c.mv	a0,s0
   177e2:	9782                	c.jalr	a5
   177e4:	b709                	c.j	176e6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3da>
      return __exchange_and_add(__mem, __val);
   177e6:	55fd                	c.li	a1,-1
   177e8:	03440513          	addi	a0,s0,52
   177ec:	b95fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   177f0:	b7dd                	c.j	177d6 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x4ca>
   177f2:	55fd                	c.li	a1,-1
   177f4:	03040513          	addi	a0,s0,48
   177f8:	b89fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   177fc:	b719                	c.j	17702 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3f6>
	_M_dispose();
   177fe:	601c                	c.ld	a5,0(s0)
   17800:	6b9c                	c.ld	a5,16(a5)
   17802:	8522                	c.mv	a0,s0
   17804:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17806:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1780a:	00022797          	auipc	a5,0x22
   1780e:	c767b783          	ld	a5,-906(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17812:	0007c783          	lbu	a5,0(a5)
   17816:	cf89                	c.beqz	a5,17830 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x524>
    _Atomic_word __result = *__mem;
   17818:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1781a:	fff5079b          	addiw	a5,a0,-1
   1781e:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17820:	4785                	c.li	a5,1
   17822:	eef513e3          	bne	a0,a5,17708 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
	    _M_destroy();
   17826:	601c                	c.ld	a5,0(s0)
   17828:	6f9c                	c.ld	a5,24(a5)
   1782a:	8522                	c.mv	a0,s0
   1782c:	9782                	c.jalr	a5
   1782e:	bde9                	c.j	17708 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x3fc>
      return __exchange_and_add(__mem, __val);
   17830:	55fd                	c.li	a1,-1
   17832:	03440513          	addi	a0,s0,52
   17836:	b4bfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1783a:	b7dd                	c.j	17820 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x514>
   1783c:	55fd                	c.li	a1,-1
   1783e:	03040513          	addi	a0,s0,48
   17842:	b3ffe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17846:	bdf9                	c.j	17724 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x418>
	_M_dispose();
   17848:	601c                	c.ld	a5,0(s0)
   1784a:	6b9c                	c.ld	a5,16(a5)
   1784c:	8522                	c.mv	a0,s0
   1784e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17850:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17854:	00022797          	auipc	a5,0x22
   17858:	c2c7b783          	ld	a5,-980(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1785c:	0007c783          	lbu	a5,0(a5)
   17860:	cf89                	c.beqz	a5,1787a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x56e>
    _Atomic_word __result = *__mem;
   17862:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17864:	fff5079b          	addiw	a5,a0,-1
   17868:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1786a:	4785                	c.li	a5,1
   1786c:	eaf51fe3          	bne	a0,a5,1772a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
	    _M_destroy();
   17870:	601c                	c.ld	a5,0(s0)
   17872:	6f9c                	c.ld	a5,24(a5)
   17874:	8522                	c.mv	a0,s0
   17876:	9782                	c.jalr	a5
   17878:	bd4d                	c.j	1772a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x41e>
      return __exchange_and_add(__mem, __val);
   1787a:	55fd                	c.li	a1,-1
   1787c:	03440513          	addi	a0,s0,52
   17880:	b01fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17884:	b7dd                	c.j	1786a <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x55e>
      { return _M_dataplus._M_p; }
   17886:	842a                	c.mv	s0,a0
   17888:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1788a:	089c                	c.addi4spn	a5,sp,80
   1788c:	00f50463          	beq	a0,a5,17894 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x588>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   17890:	c81fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   17894:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   17896:	189c                	c.addi4spn	a5,sp,112
   17898:	00f50463          	beq	a0,a5,178a0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x594>
   1789c:	c75fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
                       std::to_string(version));
   178a0:	854a                	c.mv	a0,s2
   178a2:	c2ffe0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   178a6:	7542                	c.ldsp	a0,48(sp)
   178a8:	c511                	c.beqz	a0,178b4 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5a8>
	  _M_pi->_M_release();
   178aa:	00022317          	auipc	t1,0x22
   178ae:	b1e33303          	ld	t1,-1250(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   178b2:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   178b4:	6522                	c.ldsp	a0,8(sp)
   178b6:	c511                	c.beqz	a0,178c2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5b6>
	  _M_pi->_M_release();
   178b8:	00022317          	auipc	t1,0x22
   178bc:	b1033303          	ld	t1,-1264(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   178c0:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   178c2:	6562                	c.ldsp	a0,24(sp)
   178c4:	c511                	c.beqz	a0,178d0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
	  _M_pi->_M_release();
   178c6:	00022317          	auipc	t1,0x22
   178ca:	b0233303          	ld	t1,-1278(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   178ce:	9302                	c.jalr	t1
}
   178d0:	8526                	c.mv	a0,s1
   178d2:	e38ff0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   178d6:	8522                	c.mv	a0,s0
   178d8:	e19fe0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   178dc:	842a                	c.mv	s0,a0
   178de:	bf5d                	c.j	17894 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x588>
	if (_M_pi != nullptr)
   178e0:	842a                	c.mv	s0,a0
   178e2:	b7c5                	c.j	178c2 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5b6>
   178e4:	842a                	c.mv	s0,a0
   178e6:	b7ed                	c.j	178d0 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x5c4>
        val |= ((uint64_t)p[i]) << (i * 8);
   178e8:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   178ec:	0785                	c.addi	a5,1
   178ee:	fc3e                	c.sdsp	a5,56(sp)
  subsec->addr_size = address_size;
   178f0:	6682                	c.ldsp	a3,0(sp)
   178f2:	d290                	c.sw	a2,32(a3)

  bool end() const { return pos >= sec->end; }

  bool valid() const { return !!pos; }

  section_offset get_section_offset() const { return pos - sec->begin; }
   178f4:	6718                	c.ld	a4,8(a4)
   178f6:	40e78a33          	sub	s4,a5,a4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   178fa:	1c800513          	addi	a0,zero,456
   178fe:	c23fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   17902:	b949                	c.j	17594 <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x288>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17904:	f452                	c.sdsp	s4,40(sp)
      : _M_pi(__r._M_pi)
   17906:	f802                	c.sdsp	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   17908:	008a3783          	ld	a5,8(s4)
   1790c:	fc3e                	c.sdsp	a5,56(sp)
  sub.skip_initial_length();
   1790e:	1028                	c.addi4spn	a0,sp,40
   17910:	114030ef          	jal	ra,1aa24 <dwarf::cursor::skip_initial_length()>
   17914:	b669                	c.j	1749e <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)+0x192>

0000000000017916 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)>:
dwarf::dwarf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   17916:	7135                	c.addi16sp	sp,-160
   17918:	ed06                	c.sdsp	ra,152(sp)
   1791a:	e922                	c.sdsp	s0,144(sp)
   1791c:	e526                	c.sdsp	s1,136(sp)
   1791e:	e14a                	c.sdsp	s2,128(sp)
   17920:	fcce                	c.sdsp	s3,120(sp)
   17922:	f8d2                	c.sdsp	s4,112(sp)
   17924:	f4d6                	c.sdsp	s5,104(sp)
   17926:	f0da                	c.sdsp	s6,96(sp)
   17928:	ecde                	c.sdsp	s7,88(sp)
   1792a:	84aa                	c.mv	s1,a0
   1792c:	892e                	c.mv	s2,a1

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1792e:	00053023          	sd	zero,0(a0)
   17932:	0f000513          	addi	a0,zero,240
   17936:	bebfe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1793a:	842a                	c.mv	s0,a0
   1793c:	00052423          	sw	zero,8(a0)
   17940:	00052623          	sw	zero,12(a0)
   17944:	00052823          	sw	zero,16(a0)
   17948:	00052a23          	sw	zero,20(a0)
   1794c:	00052c23          	sw	zero,24(a0)
   17950:	00052e23          	sw	zero,28(a0)
   17954:	02053023          	sd	zero,32(a0)
   17958:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1795c:	4785                	c.li	a5,1
   1795e:	d91c                	c.sw	a5,48(a0)
   17960:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17962:	00022797          	auipc	a5,0x22
   17966:	bce7b783          	ld	a5,-1074(a5) # 39530 <vtable for std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xb80>
   1796a:	07c1                	c.addi	a5,16
   1796c:	e11c                	c.sd	a5,0(a0)
   1796e:	03850993          	addi	s3,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17972:	00093783          	ld	a5,0(s2)
   17976:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   17978:	00893503          	ld	a0,8(s2)
   1797c:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   1797e:	c919                	c.beqz	a0,17994 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7e>
    if (__is_single_threaded())
   17980:	00022797          	auipc	a5,0x22
   17984:	b007b783          	ld	a5,-1280(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17988:	0007c783          	lbu	a5,0(a5)
   1798c:	cfa5                	c.beqz	a5,17a04 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xee>
  { *__mem += __val; }
   1798e:	591c                	c.lw	a5,48(a0)
   17990:	2785                	c.addiw	a5,1
   17992:	d91c                	c.sw	a5,48(a0)
      : _M_ptr(0), _M_refcount()
   17994:	04043423          	sd	zero,72(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   17998:	04043823          	sd	zero,80(s0)
      : _M_ptr(0), _M_refcount()
   1799c:	04043c23          	sd	zero,88(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   179a0:	06043023          	sd	zero,96(s0)
   179a4:	06043423          	sd	zero,104(s0)
   179a8:	06043823          	sd	zero,112(s0)
   179ac:	06043c23          	sd	zero,120(s0)
   179b0:	0b040793          	addi	a5,s0,176
   179b4:	e05c                	c.sd	a5,128(s0)
   179b6:	4785                	c.li	a5,1
   179b8:	e45c                	c.sd	a5,136(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   179ba:	08043823          	sd	zero,144(s0)
   179be:	08043c23          	sd	zero,152(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   179c2:	00016797          	auipc	a5,0x16
   179c6:	ace7a787          	flw	fa5,-1330(a5) # 2d490 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   179ca:	0af42027          	fsw	fa5,160(s0)
   179ce:	0a043423          	sd	zero,168(s0)
   179d2:	0a043823          	sd	zero,176(s0)
  impl(const std::shared_ptr<loader> &l) : l(l), have_type_units(false) {}
   179d6:	0a040c23          	sb	zero,184(s0)
      _M_header._M_color = _S_red;
   179da:	0c042423          	sw	zero,200(s0)
      _M_header._M_parent = 0;
   179de:	0c043823          	sd	zero,208(s0)
      _M_header._M_left = &_M_header;
   179e2:	0c840793          	addi	a5,s0,200
   179e6:	ec7c                	c.sd	a5,216(s0)
      _M_header._M_right = &_M_header;
   179e8:	f07c                	c.sd	a5,224(s0)
      _M_node_count = 0;
   179ea:	0e043423          	sd	zero,232(s0)
	  _M_pi = __pi;
   179ee:	e480                	c.sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   179f0:	0134b023          	sd	s3,0(s1)
      { return _M_ptr; }
   179f4:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::info, &size);
   179f8:	611c                	c.ld	a5,0(a0)
   179fa:	6b9c                	c.ld	a5,16(a5)
   179fc:	860a                	c.mv	a2,sp
   179fe:	458d                	c.li	a1,3
   17a00:	9782                	c.jalr	a5
   17a02:	a039                	c.j	17a10 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0xfa>
      __atomic_add(__mem, __val);
   17a04:	4585                	c.li	a1,1
   17a06:	03050513          	addi	a0,a0,48
   17a0a:	947fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17a0e:	b759                	c.j	17994 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7e>
   17a10:	842a                	c.mv	s0,a0
  if (!data)
   17a12:	c901                	c.beqz	a0,17a22 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x10c>
   17a14:	0004ba03          	ld	s4,0(s1)
   17a18:	06000513          	addi	a0,zero,96
   17a1c:	b05fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   17a20:	a83d                	c.j	17a5e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x148>
    throw format_error("required .debug_info section missing");
   17a22:	4541                	c.li	a0,16
   17a24:	9fdfe0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   17a28:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   17a2a:	00015597          	auipc	a1,0x15
   17a2e:	79e58593          	addi	a1,a1,1950 # 2d1c8 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x70>
   17a32:	d3ffe0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   17a36:	00022797          	auipc	a5,0x22
   17a3a:	b227b783          	ld	a5,-1246(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   17a3e:	07c1                	c.addi	a5,16
   17a40:	00f93023          	sd	a5,0(s2)
   17a44:	00022617          	auipc	a2,0x22
   17a48:	93c63603          	ld	a2,-1732(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   17a4c:	00022597          	auipc	a1,0x22
   17a50:	8645b583          	ld	a1,-1948(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   17a54:	854a                	c.mv	a0,s2
   17a56:	c6bfe0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   17a5a:	842a                	c.mv	s0,a0
   17a5c:	adc1                	c.j	1812c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
   17a5e:	00052423          	sw	zero,8(a0)
   17a62:	00052623          	sw	zero,12(a0)
   17a66:	00052823          	sw	zero,16(a0)
   17a6a:	00052a23          	sw	zero,20(a0)
   17a6e:	00052c23          	sw	zero,24(a0)
   17a72:	00052e23          	sw	zero,28(a0)
   17a76:	02053023          	sd	zero,32(a0)
   17a7a:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17a7e:	4785                	c.li	a5,1
   17a80:	d91c                	c.sw	a5,48(a0)
   17a82:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17a84:	00022797          	auipc	a5,0x22
   17a88:	b3c7b783          	ld	a5,-1220(a5) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   17a8c:	07c1                	c.addi	a5,16
   17a8e:	e11c                	c.sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17a90:	478d                	c.li	a5,3
   17a92:	dd1c                	c.sw	a5,56(a0)
   17a94:	e120                	c.sd	s0,64(a0)
   17a96:	6782                	c.ldsp	a5,0(sp)
   17a98:	97a2                	c.add	a5,s0
   17a9a:	e53c                	c.sd	a5,72(a0)
   17a9c:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17aa0:	04052a23          	sw	zero,84(a0)
   17aa4:	04052c23          	sw	zero,88(a0)
   17aa8:	03850793          	addi	a5,a0,56
   17aac:	00fa3823          	sd	a5,16(s4)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17ab0:	018a3983          	ld	s3,24(s4)
	__r._M_pi = _M_pi;
   17ab4:	00aa3c23          	sd	a0,24(s4)
	if (_M_pi != nullptr)
   17ab8:	02098263          	beq	s3,zero,17adc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
    if (__is_single_threaded())
   17abc:	00022797          	auipc	a5,0x22
   17ac0:	9c47b783          	ld	a5,-1596(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17ac4:	0007c783          	lbu	a5,0(a5)
   17ac8:	cbdd                	c.beqz	a5,17b7e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x268>
    _Atomic_word __result = *__mem;
   17aca:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   17ace:	fff5079b          	addiw	a5,a0,-1
   17ad2:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17ad6:	4785                	c.li	a5,1
   17ad8:	0af50963          	beq	a0,a5,17b8a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x274>
      { return _M_ptr; }
   17adc:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17ade:	0107ba03          	ld	s4,16(a5)
      : _M_pi(__r._M_pi)
   17ae2:	0187b983          	ld	s3,24(a5)
	if (_M_pi != nullptr)
   17ae6:	68098d63          	beq	s3,zero,18180 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x86a>
    if (__is_single_threaded())
   17aea:	00022797          	auipc	a5,0x22
   17aee:	9967b783          	ld	a5,-1642(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17af2:	0007c783          	lbu	a5,0(a5)
   17af6:	cfe9                	c.beqz	a5,17bd0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ba>
  { *__mem += __val; }
   17af8:	0309a783          	lw	a5,48(s3)
   17afc:	2785                	c.addiw	a5,1
   17afe:	02f9a823          	sw	a5,48(s3)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17b02:	e452                	c.sdsp	s4,8(sp)
      : _M_pi(__r._M_pi)
   17b04:	e84e                	c.sdsp	s3,16(sp)
    if (__is_single_threaded())
   17b06:	00022797          	auipc	a5,0x22
   17b0a:	97a7b783          	ld	a5,-1670(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17b0e:	0007c783          	lbu	a5,0(a5)
   17b12:	c7e9                	c.beqz	a5,17bdc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2c6>
  { *__mem += __val; }
   17b14:	0309a783          	lw	a5,48(s3)
   17b18:	2785                	c.addiw	a5,1
   17b1a:	02f9a823          	sw	a5,48(s3)
      : sec(sec), pos(sec->begin + offset) {}
   17b1e:	008a3783          	ld	a5,8(s4)
   17b22:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   17b24:	00022797          	auipc	a5,0x22
   17b28:	95c7b783          	ld	a5,-1700(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17b2c:	0007c783          	lbu	a5,0(a5)
   17b30:	cfc5                	c.beqz	a5,17be8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2d2>
    _Atomic_word __result = *__mem;
   17b32:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   17b36:	fff5079b          	addiw	a5,a0,-1
   17b3a:	02f9a823          	sw	a5,48(s3)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17b3e:	4785                	c.li	a5,1
   17b40:	64f51563          	bne	a0,a5,1818a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
	_M_dispose();
   17b44:	0009b783          	ld	a5,0(s3)
   17b48:	6b9c                	c.ld	a5,16(a5)
   17b4a:	854e                	c.mv	a0,s3
   17b4c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17b4e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17b52:	00022797          	auipc	a5,0x22
   17b56:	92e7b783          	ld	a5,-1746(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17b5a:	0007c783          	lbu	a5,0(a5)
   17b5e:	cbd9                	c.beqz	a5,17bf4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2de>
    _Atomic_word __result = *__mem;
   17b60:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   17b64:	fff5079b          	addiw	a5,a0,-1
   17b68:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17b6c:	4785                	c.li	a5,1
   17b6e:	60f51e63          	bne	a0,a5,1818a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
	    _M_destroy();
   17b72:	0009b783          	ld	a5,0(s3)
   17b76:	6f9c                	c.ld	a5,24(a5)
   17b78:	854e                	c.mv	a0,s3
   17b7a:	9782                	c.jalr	a5
   17b7c:	a539                	c.j	1818a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x874>
      return __exchange_and_add(__mem, __val);
   17b7e:	55fd                	c.li	a1,-1
   17b80:	03098513          	addi	a0,s3,48
   17b84:	ffcfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17b88:	b7b9                	c.j	17ad6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c0>
	_M_dispose();
   17b8a:	0009b783          	ld	a5,0(s3)
   17b8e:	6b9c                	c.ld	a5,16(a5)
   17b90:	854e                	c.mv	a0,s3
   17b92:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17b94:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17b98:	00022797          	auipc	a5,0x22
   17b9c:	8e87b783          	ld	a5,-1816(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17ba0:	0007c783          	lbu	a5,0(a5)
   17ba4:	c385                	c.beqz	a5,17bc4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ae>
    _Atomic_word __result = *__mem;
   17ba6:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   17baa:	fff5079b          	addiw	a5,a0,-1
   17bae:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17bb2:	4785                	c.li	a5,1
   17bb4:	f2f514e3          	bne	a0,a5,17adc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
	    _M_destroy();
   17bb8:	0009b783          	ld	a5,0(s3)
   17bbc:	6f9c                	c.ld	a5,24(a5)
   17bbe:	854e                	c.mv	a0,s3
   17bc0:	9782                	c.jalr	a5
   17bc2:	bf29                	c.j	17adc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1c6>
      return __exchange_and_add(__mem, __val);
   17bc4:	55fd                	c.li	a1,-1
   17bc6:	03498513          	addi	a0,s3,52
   17bca:	fb6fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17bce:	b7d5                	c.j	17bb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x29c>
      __atomic_add(__mem, __val);
   17bd0:	4585                	c.li	a1,1
   17bd2:	03098513          	addi	a0,s3,48
   17bd6:	f7afe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17bda:	b725                	c.j	17b02 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x1ec>
   17bdc:	4585                	c.li	a1,1
   17bde:	03098513          	addi	a0,s3,48
   17be2:	f6efe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17be6:	bf25                	c.j	17b1e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x208>
      return __exchange_and_add(__mem, __val);
   17be8:	55fd                	c.li	a1,-1
   17bea:	03098513          	addi	a0,s3,48
   17bee:	f92fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17bf2:	b7b1                	c.j	17b3e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x228>
   17bf4:	55fd                	c.li	a1,-1
   17bf6:	03498513          	addi	a0,s3,52
   17bfa:	f86fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17bfe:	b7bd                	c.j	17b6c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x256>
    const unsigned char *p = (const unsigned char *)pos;
   17c00:	65e2                	c.ldsp	a1,24(sp)
      { return _M_ptr; }
   17c02:	6822                	c.ldsp	a6,8(sp)
    if (sec->ord == byte_order::lsb) {
   17c04:	01c82783          	lw	a5,28(a6)
   17c08:	e3b1                	c.bnez	a5,17c4c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x336>
   17c0a:	862e                	c.mv	a2,a1
   17c0c:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   17c0e:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   17c12:	00064683          	lbu	a3,0(a2)
   17c16:	00e696b3          	sll	a3,a3,a4
   17c1a:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17c1c:	0605                	c.addi	a2,1
   17c1e:	2721                	c.addiw	a4,8
   17c20:	fea719e3          	bne	a4,a0,17c12 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2fc>
    pos += sizeof(T);
   17c24:	0591                	c.addi	a1,4
   17c26:	ec2e                	c.sdsp	a1,24(sp)
  if (length == 0xffffffff)
   17c28:	2781                	c.addiw	a5,0
   17c2a:	577d                	c.li	a4,-1
   17c2c:	02e78c63          	beq	a5,a4,17c64 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x34e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17c30:	67a2                	c.ldsp	a5,8(sp)
   17c32:	6b98                	c.ld	a4,16(a5)
   17c34:	67e2                	c.ldsp	a5,24(sp)
   17c36:	40f70633          	sub	a2,a4,a5
   17c3a:	4685                	c.li	a3,1
   17c3c:	00c6f463          	bgeu	a3,a2,17c44 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x32e>
   17c40:	04e7e263          	bltu	a5,a4,17c84 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x36e>
      underflow();
   17c44:	0028                	c.addi4spn	a0,sp,8
   17c46:	6f3020ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   17c4a:	a82d                	c.j	17c84 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x36e>
   17c4c:	872e                	c.mv	a4,a1
   17c4e:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   17c52:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   17c54:	07a2                	c.slli	a5,0x8
   17c56:	00074683          	lbu	a3,0(a4)
   17c5a:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17c5c:	0705                	c.addi	a4,1
   17c5e:	fec71be3          	bne	a4,a2,17c54 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x33e>
   17c62:	b7c9                	c.j	17c24 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x30e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   17c64:	01083783          	ld	a5,16(a6)
   17c68:	40b786b3          	sub	a3,a5,a1
   17c6c:	471d                	c.li	a4,7
   17c6e:	00d77463          	bgeu	a4,a3,17c76 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x360>
   17c72:	00f5e563          	bltu	a1,a5,17c7c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x366>
      underflow();
   17c76:	0028                	c.addi4spn	a0,sp,8
   17c78:	6c1020ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    pos += sizeof(T);
   17c7c:	67e2                	c.ldsp	a5,24(sp)
   17c7e:	07a1                	c.addi	a5,8
   17c80:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   17c82:	b77d                	c.j	17c30 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x31a>
    const unsigned char *p = (const unsigned char *)pos;
   17c84:	6762                	c.ldsp	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   17c86:	67a2                	c.ldsp	a5,8(sp)
   17c88:	4fdc                	c.lw	a5,28(a5)
   17c8a:	ef85                	c.bnez	a5,17cc2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3ac>
        val |= ((uint64_t)p[i]) << (i * 8);
   17c8c:	00174783          	lbu	a5,1(a4)
   17c90:	07a2                	c.slli	a5,0x8
   17c92:	00074683          	lbu	a3,0(a4)
   17c96:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   17c98:	0709                	c.addi	a4,2
   17c9a:	ec3a                	c.sdsp	a4,24(sp)
    return (T)val;
   17c9c:	17c2                	c.slli	a5,0x30
   17c9e:	93c1                	c.srli	a5,0x30
  uhalf versionbe = (version >> 8) | ((version & 0xFF) << 8);
   17ca0:	0087d71b          	srliw	a4,a5,0x8
   17ca4:	0087969b          	slliw	a3,a5,0x8
   17ca8:	8f55                	c.or	a4,a3
  if (versionbe < version) {
   17caa:	1742                	c.slli	a4,0x30
   17cac:	9341                	c.srli	a4,0x30
   17cae:	02f76163          	bltu	a4,a5,17cd0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x3ba>
   17cb2:	00093503          	ld	a0,0(s2)
  data = l->load(section_type::abbrev, &size);
   17cb6:	611c                	c.ld	a5,0(a0)
   17cb8:	6b9c                	c.ld	a5,16(a5)
   17cba:	860a                	c.mv	a2,sp
   17cbc:	4581                	c.li	a1,0
   17cbe:	9782                	c.jalr	a5
   17cc0:	a8f9                	c.j	17d9e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x488>
        val = (val << 8) | (uint64_t)p[i];
   17cc2:	00074783          	lbu	a5,0(a4)
   17cc6:	07a2                	c.slli	a5,0x8
   17cc8:	00174683          	lbu	a3,1(a4)
   17ccc:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   17cce:	b7e9                	c.j	17c98 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x382>
   17cd0:	0004b983          	ld	s3,0(s1)
   17cd4:	06000513          	addi	a0,zero,96
   17cd8:	849fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   17cdc:	00052423          	sw	zero,8(a0)
   17ce0:	00052623          	sw	zero,12(a0)
   17ce4:	00052823          	sw	zero,16(a0)
   17ce8:	00052a23          	sw	zero,20(a0)
   17cec:	00052c23          	sw	zero,24(a0)
   17cf0:	00052e23          	sw	zero,28(a0)
   17cf4:	02053023          	sd	zero,32(a0)
   17cf8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17cfc:	4785                	c.li	a5,1
   17cfe:	d91c                	c.sw	a5,48(a0)
   17d00:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17d02:	00022717          	auipc	a4,0x22
   17d06:	8be73703          	ld	a4,-1858(a4) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   17d0a:	0741                	c.addi	a4,16
   17d0c:	e118                	c.sd	a4,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17d0e:	470d                	c.li	a4,3
   17d10:	dd18                	c.sw	a4,56(a0)
   17d12:	e120                	c.sd	s0,64(a0)
   17d14:	6702                	c.ldsp	a4,0(sp)
   17d16:	9722                	c.add	a4,s0
   17d18:	e538                	c.sd	a4,72(a0)
   17d1a:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17d1e:	c97c                	c.sw	a5,84(a0)
   17d20:	04052c23          	sw	zero,88(a0)
   17d24:	03850793          	addi	a5,a0,56
   17d28:	00f9b823          	sd	a5,16(s3)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17d2c:	0189b403          	ld	s0,24(s3)
	__r._M_pi = _M_pi;
   17d30:	00a9bc23          	sd	a0,24(s3)
	if (_M_pi != nullptr)
   17d34:	dc3d                	c.beqz	s0,17cb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
    if (__is_single_threaded())
   17d36:	00021797          	auipc	a5,0x21
   17d3a:	74a7b783          	ld	a5,1866(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17d3e:	0007c783          	lbu	a5,0(a5)
   17d42:	c3a9                	c.beqz	a5,17d84 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x46e>
    _Atomic_word __result = *__mem;
   17d44:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17d46:	fff5079b          	addiw	a5,a0,-1
   17d4a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17d4c:	4785                	c.li	a5,1
   17d4e:	f6f512e3          	bne	a0,a5,17cb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
	_M_dispose();
   17d52:	601c                	c.ld	a5,0(s0)
   17d54:	6b9c                	c.ld	a5,16(a5)
   17d56:	8522                	c.mv	a0,s0
   17d58:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17d5a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17d5e:	00021797          	auipc	a5,0x21
   17d62:	7227b783          	ld	a5,1826(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17d66:	0007c783          	lbu	a5,0(a5)
   17d6a:	c39d                	c.beqz	a5,17d90 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x47a>
    _Atomic_word __result = *__mem;
   17d6c:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   17d6e:	fff7871b          	addiw	a4,a5,-1
   17d72:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17d74:	4705                	c.li	a4,1
   17d76:	f2e79ee3          	bne	a5,a4,17cb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
	    _M_destroy();
   17d7a:	601c                	c.ld	a5,0(s0)
   17d7c:	6f9c                	c.ld	a5,24(a5)
   17d7e:	8522                	c.mv	a0,s0
   17d80:	9782                	c.jalr	a5
   17d82:	bf05                	c.j	17cb2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x39c>
      return __exchange_and_add(__mem, __val);
   17d84:	55fd                	c.li	a1,-1
   17d86:	03040513          	addi	a0,s0,48
   17d8a:	df6fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17d8e:	bf7d                	c.j	17d4c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x436>
   17d90:	55fd                	c.li	a1,-1
   17d92:	03440513          	addi	a0,s0,52
   17d96:	deafe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17d9a:	87aa                	c.mv	a5,a0
   17d9c:	bfe1                	c.j	17d74 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x45e>
   17d9e:	842a                	c.mv	s0,a0
  if (!data)
   17da0:	c911                	c.beqz	a0,17db4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x49e>
      { return _M_ptr; }
   17da2:	0004b903          	ld	s2,0(s1)
   17da6:	01093983          	ld	s3,16(s2)
   17daa:	06000513          	addi	a0,zero,96
   17dae:	f72fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   17db2:	a83d                	c.j	17df0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x4da>
    throw format_error("required .debug_abbrev section missing");
   17db4:	4541                	c.li	a0,16
   17db6:	e6afe0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   17dba:	892a                	c.mv	s2,a0
   17dbc:	00015597          	auipc	a1,0x15
   17dc0:	43458593          	addi	a1,a1,1076 # 2d1f0 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x98>
   17dc4:	9adfe0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   17dc8:	00021797          	auipc	a5,0x21
   17dcc:	7907b783          	ld	a5,1936(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   17dd0:	07c1                	c.addi	a5,16
   17dd2:	00f93023          	sd	a5,0(s2)
   17dd6:	00021617          	auipc	a2,0x21
   17dda:	5aa63603          	ld	a2,1450(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   17dde:	00021597          	auipc	a1,0x21
   17de2:	4d25b583          	ld	a1,1234(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   17de6:	854a                	c.mv	a0,s2
   17de8:	8d9fe0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   17dec:	842a                	c.mv	s0,a0
   17dee:	aea9                	c.j	18148 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
   17df0:	00052423          	sw	zero,8(a0)
   17df4:	00052623          	sw	zero,12(a0)
   17df8:	00052823          	sw	zero,16(a0)
   17dfc:	00052a23          	sw	zero,20(a0)
   17e00:	00052c23          	sw	zero,24(a0)
   17e04:	00052e23          	sw	zero,28(a0)
   17e08:	02053023          	sd	zero,32(a0)
   17e0c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   17e10:	4785                	c.li	a5,1
   17e12:	d91c                	c.sw	a5,48(a0)
   17e14:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   17e16:	00021797          	auipc	a5,0x21
   17e1a:	7aa7b783          	ld	a5,1962(a5) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   17e1e:	07c1                	c.addi	a5,16
   17e20:	e11c                	c.sd	a5,0(a0)
   17e22:	01c9a783          	lw	a5,28(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   17e26:	02052c23          	sw	zero,56(a0)
   17e2a:	e120                	c.sd	s0,64(a0)
   17e2c:	6702                	c.ldsp	a4,0(sp)
   17e2e:	943a                	c.add	s0,a4
   17e30:	e520                	c.sd	s0,72(a0)
   17e32:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   17e36:	c97c                	c.sw	a5,84(a0)
   17e38:	04052c23          	sw	zero,88(a0)
   17e3c:	03850793          	addi	a5,a0,56
   17e40:	02f93023          	sd	a5,32(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   17e44:	02893403          	ld	s0,40(s2)
	__r._M_pi = _M_pi;
   17e48:	02a93423          	sd	a0,40(s2)
	if (_M_pi != nullptr)
   17e4c:	cc19                	c.beqz	s0,17e6a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
    if (__is_single_threaded())
   17e4e:	00021797          	auipc	a5,0x21
   17e52:	6327b783          	ld	a5,1586(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e56:	0007c783          	lbu	a5,0(a5)
   17e5a:	cbd1                	c.beqz	a5,17eee <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5d8>
    _Atomic_word __result = *__mem;
   17e5c:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17e5e:	fff5079b          	addiw	a5,a0,-1
   17e62:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17e64:	4785                	c.li	a5,1
   17e66:	08f50a63          	beq	a0,a5,17efa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5e4>
      { return _M_ptr; }
   17e6a:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17e6c:	0107b903          	ld	s2,16(a5)
      : _M_pi(__r._M_pi)
   17e70:	6f80                	c.ld	s0,24(a5)
	if (_M_pi != nullptr)
   17e72:	2e040c63          	beq	s0,zero,1816a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x854>
    if (__is_single_threaded())
   17e76:	00021797          	auipc	a5,0x21
   17e7a:	60a7b783          	ld	a5,1546(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e7e:	0007c783          	lbu	a5,0(a5)
   17e82:	cbdd                	c.beqz	a5,17f38 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x622>
  { *__mem += __val; }
   17e84:	581c                	c.lw	a5,48(s0)
   17e86:	2785                	c.addiw	a5,1
   17e88:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   17e8a:	f04a                	c.sdsp	s2,32(sp)
      : _M_pi(__r._M_pi)
   17e8c:	f422                	c.sdsp	s0,40(sp)
    if (__is_single_threaded())
   17e8e:	00021797          	auipc	a5,0x21
   17e92:	5f27b783          	ld	a5,1522(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17e96:	0007c783          	lbu	a5,0(a5)
   17e9a:	c7cd                	c.beqz	a5,17f44 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x62e>
  { *__mem += __val; }
   17e9c:	581c                	c.lw	a5,48(s0)
   17e9e:	2785                	c.addiw	a5,1
   17ea0:	d81c                	c.sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   17ea2:	00893783          	ld	a5,8(s2)
   17ea6:	f83e                	c.sdsp	a5,48(sp)
    if (__is_single_threaded())
   17ea8:	00021797          	auipc	a5,0x21
   17eac:	5d87b783          	ld	a5,1496(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17eb0:	0007c783          	lbu	a5,0(a5)
   17eb4:	cfd1                	c.beqz	a5,17f50 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x63a>
    _Atomic_word __result = *__mem;
   17eb6:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17eb8:	fff5079b          	addiw	a5,a0,-1
   17ebc:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17ebe:	4785                	c.li	a5,1
   17ec0:	08f50e63          	beq	a0,a5,17f5c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x646>
  bool end() const { return pos >= sec->end; }
   17ec4:	7642                	c.ldsp	a2,48(sp)
      { return _M_ptr; }
   17ec6:	7782                	c.ldsp	a5,32(sp)
  while (!infocur.end()) {
   17ec8:	6b98                	c.ld	a4,16(a5)
   17eca:	16e67863          	bgeu	a2,a4,1803a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x724>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   17ece:	03810b13          	addi	s6,sp,56
   17ed2:	00021b97          	auipc	s7,0x21
   17ed6:	416bbb83          	ld	s7,1046(s7) # 392e8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)@@Base+0x1ef96>
    infocur.subsection();
   17eda:	04010913          	addi	s2,sp,64
   17ede:	02010993          	addi	s3,sp,32
    return ::__libc_single_threaded;
   17ee2:	00021a17          	auipc	s4,0x21
   17ee6:	59ea3a03          	ld	s4,1438(s4) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17eea:	4a85                	c.li	s5,1
   17eec:	a0f5                	c.j	17fd8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6c2>
      return __exchange_and_add(__mem, __val);
   17eee:	55fd                	c.li	a1,-1
   17ef0:	03040513          	addi	a0,s0,48
   17ef4:	c8cfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17ef8:	b7b5                	c.j	17e64 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x54e>
	_M_dispose();
   17efa:	601c                	c.ld	a5,0(s0)
   17efc:	6b9c                	c.ld	a5,16(a5)
   17efe:	8522                	c.mv	a0,s0
   17f00:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17f02:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17f06:	00021797          	auipc	a5,0x21
   17f0a:	57a7b783          	ld	a5,1402(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f0e:	0007c783          	lbu	a5,0(a5)
   17f12:	cf89                	c.beqz	a5,17f2c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x616>
    _Atomic_word __result = *__mem;
   17f14:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17f16:	fff5079b          	addiw	a5,a0,-1
   17f1a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17f1c:	4785                	c.li	a5,1
   17f1e:	f4f516e3          	bne	a0,a5,17e6a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
	    _M_destroy();
   17f22:	601c                	c.ld	a5,0(s0)
   17f24:	6f9c                	c.ld	a5,24(a5)
   17f26:	8522                	c.mv	a0,s0
   17f28:	9782                	c.jalr	a5
   17f2a:	b781                	c.j	17e6a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x554>
      return __exchange_and_add(__mem, __val);
   17f2c:	55fd                	c.li	a1,-1
   17f2e:	03440513          	addi	a0,s0,52
   17f32:	c4efe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17f36:	b7dd                	c.j	17f1c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x606>
      __atomic_add(__mem, __val);
   17f38:	4585                	c.li	a1,1
   17f3a:	03040513          	addi	a0,s0,48
   17f3e:	c12fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17f42:	b7a1                	c.j	17e8a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x574>
   17f44:	4585                	c.li	a1,1
   17f46:	03040513          	addi	a0,s0,48
   17f4a:	c06fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   17f4e:	bf91                	c.j	17ea2 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x58c>
      return __exchange_and_add(__mem, __val);
   17f50:	55fd                	c.li	a1,-1
   17f52:	03040513          	addi	a0,s0,48
   17f56:	c2afe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17f5a:	b795                	c.j	17ebe <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5a8>
	_M_dispose();
   17f5c:	601c                	c.ld	a5,0(s0)
   17f5e:	6b9c                	c.ld	a5,16(a5)
   17f60:	8522                	c.mv	a0,s0
   17f62:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   17f64:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   17f68:	00021797          	auipc	a5,0x21
   17f6c:	5187b783          	ld	a5,1304(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   17f70:	0007c783          	lbu	a5,0(a5)
   17f74:	cf89                	c.beqz	a5,17f8e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x678>
    _Atomic_word __result = *__mem;
   17f76:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   17f78:	fff5079b          	addiw	a5,a0,-1
   17f7c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   17f7e:	4785                	c.li	a5,1
   17f80:	f4f512e3          	bne	a0,a5,17ec4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ae>
	    _M_destroy();
   17f84:	601c                	c.ld	a5,0(s0)
   17f86:	6f9c                	c.ld	a5,24(a5)
   17f88:	8522                	c.mv	a0,s0
   17f8a:	9782                	c.jalr	a5
   17f8c:	bf25                	c.j	17ec4 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5ae>
      return __exchange_and_add(__mem, __val);
   17f8e:	55fd                	c.li	a1,-1
   17f90:	03440513          	addi	a0,s0,52
   17f94:	becfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17f98:	b7dd                	c.j	17f7e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x668>
	    ++this->_M_impl._M_finish;
   17f9a:	7c1c                	c.ld	a5,56(s0)
   17f9c:	07e1                	c.addi	a5,24
   17f9e:	fc1c                	c.sd	a5,56(s0)
   17fa0:	85ce                	c.mv	a1,s3
   17fa2:	854a                	c.mv	a0,s2
   17fa4:	725020ef          	jal	ra,1aec8 <dwarf::cursor::subsection()>
   17fa8:	a801                	c.j	17fb8 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6a2>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   17faa:	86da                	c.mv	a3,s6
   17fac:	8626                	c.mv	a2,s1
   17fae:	85aa                	c.mv	a1,a0
   17fb0:	03040513          	addi	a0,s0,48
   17fb4:	9b82                	c.jalr	s7
   17fb6:	b7ed                	c.j	17fa0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x68a>
	if (_M_pi != nullptr)
   17fb8:	6426                	c.ldsp	s0,72(sp)
   17fba:	c811                	c.beqz	s0,17fce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
    if (__is_single_threaded())
   17fbc:	000a4783          	lbu	a5,0(s4)
   17fc0:	cb85                	c.beqz	a5,17ff0 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6da>
    _Atomic_word __result = *__mem;
   17fc2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   17fc4:	fff5079b          	addiw	a5,a0,-1
   17fc8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   17fca:	03550963          	beq	a0,s5,17ffc <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6e6>
   17fce:	7642                	c.ldsp	a2,48(sp)
      { return _M_ptr; }
   17fd0:	7782                	c.ldsp	a5,32(sp)
  while (!infocur.end()) {
   17fd2:	6b98                	c.ld	a4,16(a5)
   17fd4:	06e67363          	bgeu	a2,a4,1803a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x724>
   17fd8:	6080                	c.ld	s0,0(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   17fda:	679c                	c.ld	a5,8(a5)
   17fdc:	8e1d                	c.sub	a2,a5
    m->compilation_units.emplace_back(*this, infocur.get_section_offset());
   17fde:	fc32                	c.sdsp	a2,56(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   17fe0:	7c08                	c.ld	a0,56(s0)
   17fe2:	603c                	c.ld	a5,64(s0)
   17fe4:	fcf503e3          	beq	a0,a5,17faa <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x694>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   17fe8:	85a6                	c.mv	a1,s1
   17fea:	b22ff0ef          	jal	ra,1730c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
   17fee:	b775                	c.j	17f9a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x684>
      return __exchange_and_add(__mem, __val);
   17ff0:	55fd                	c.li	a1,-1
   17ff2:	03040513          	addi	a0,s0,48
   17ff6:	b8afe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   17ffa:	bfc1                	c.j	17fca <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b4>
	_M_dispose();
   17ffc:	601c                	c.ld	a5,0(s0)
   17ffe:	6b9c                	c.ld	a5,16(a5)
   18000:	8522                	c.mv	a0,s0
   18002:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18004:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18008:	00021797          	auipc	a5,0x21
   1800c:	4787b783          	ld	a5,1144(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18010:	0007c783          	lbu	a5,0(a5)
   18014:	cf89                	c.beqz	a5,1802e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x718>
    _Atomic_word __result = *__mem;
   18016:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18018:	fff5079b          	addiw	a5,a0,-1
   1801c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1801e:	4785                	c.li	a5,1
   18020:	faf517e3          	bne	a0,a5,17fce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
	    _M_destroy();
   18024:	601c                	c.ld	a5,0(s0)
   18026:	6f9c                	c.ld	a5,24(a5)
   18028:	8522                	c.mv	a0,s0
   1802a:	9782                	c.jalr	a5
   1802c:	b74d                	c.j	17fce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x6b8>
      return __exchange_and_add(__mem, __val);
   1802e:	55fd                	c.li	a1,-1
   18030:	03440513          	addi	a0,s0,52
   18034:	b4cfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18038:	b7dd                	c.j	1801e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x708>
	if (_M_pi != nullptr)
   1803a:	7422                	c.ldsp	s0,40(sp)
   1803c:	cc19                	c.beqz	s0,1805a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
    if (__is_single_threaded())
   1803e:	00021797          	auipc	a5,0x21
   18042:	4427b783          	ld	a5,1090(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18046:	0007c783          	lbu	a5,0(a5)
   1804a:	c3b9                	c.beqz	a5,18090 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x77a>
    _Atomic_word __result = *__mem;
   1804c:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1804e:	fff5079b          	addiw	a5,a0,-1
   18052:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18054:	4785                	c.li	a5,1
   18056:	04f50363          	beq	a0,a5,1809c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x786>
	if (_M_pi != nullptr)
   1805a:	6442                	c.ldsp	s0,16(sp)
   1805c:	cc19                	c.beqz	s0,1807a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
    if (__is_single_threaded())
   1805e:	00021797          	auipc	a5,0x21
   18062:	4227b783          	ld	a5,1058(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18066:	0007c783          	lbu	a5,0(a5)
   1806a:	cba5                	c.beqz	a5,180da <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7c4>
    _Atomic_word __result = *__mem;
   1806c:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1806e:	fff5079b          	addiw	a5,a0,-1
   18072:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18074:	4785                	c.li	a5,1
   18076:	06f50863          	beq	a0,a5,180e6 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7d0>
}
   1807a:	60ea                	c.ldsp	ra,152(sp)
   1807c:	644a                	c.ldsp	s0,144(sp)
   1807e:	64aa                	c.ldsp	s1,136(sp)
   18080:	690a                	c.ldsp	s2,128(sp)
   18082:	79e6                	c.ldsp	s3,120(sp)
   18084:	7a46                	c.ldsp	s4,112(sp)
   18086:	7aa6                	c.ldsp	s5,104(sp)
   18088:	7b06                	c.ldsp	s6,96(sp)
   1808a:	6be6                	c.ldsp	s7,88(sp)
   1808c:	610d                	c.addi16sp	sp,160
   1808e:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   18090:	55fd                	c.li	a1,-1
   18092:	03040513          	addi	a0,s0,48
   18096:	aeafe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1809a:	bf6d                	c.j	18054 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x73e>
	_M_dispose();
   1809c:	601c                	c.ld	a5,0(s0)
   1809e:	6b9c                	c.ld	a5,16(a5)
   180a0:	8522                	c.mv	a0,s0
   180a2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   180a4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   180a8:	00021797          	auipc	a5,0x21
   180ac:	3d87b783          	ld	a5,984(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   180b0:	0007c783          	lbu	a5,0(a5)
   180b4:	cf89                	c.beqz	a5,180ce <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7b8>
    _Atomic_word __result = *__mem;
   180b6:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   180b8:	fff5079b          	addiw	a5,a0,-1
   180bc:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   180be:	4785                	c.li	a5,1
   180c0:	f8f51de3          	bne	a0,a5,1805a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
	    _M_destroy();
   180c4:	601c                	c.ld	a5,0(s0)
   180c6:	6f9c                	c.ld	a5,24(a5)
   180c8:	8522                	c.mv	a0,s0
   180ca:	9782                	c.jalr	a5
   180cc:	b779                	c.j	1805a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
      return __exchange_and_add(__mem, __val);
   180ce:	55fd                	c.li	a1,-1
   180d0:	03440513          	addi	a0,s0,52
   180d4:	aacfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   180d8:	b7dd                	c.j	180be <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7a8>
   180da:	55fd                	c.li	a1,-1
   180dc:	03040513          	addi	a0,s0,48
   180e0:	aa0fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   180e4:	bf41                	c.j	18074 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x75e>
	_M_dispose();
   180e6:	601c                	c.ld	a5,0(s0)
   180e8:	6b9c                	c.ld	a5,16(a5)
   180ea:	8522                	c.mv	a0,s0
   180ec:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   180ee:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   180f2:	00021797          	auipc	a5,0x21
   180f6:	38e7b783          	ld	a5,910(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   180fa:	0007c783          	lbu	a5,0(a5)
   180fe:	cf89                	c.beqz	a5,18118 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x802>
    _Atomic_word __result = *__mem;
   18100:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18102:	fff5079b          	addiw	a5,a0,-1
   18106:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18108:	4785                	c.li	a5,1
   1810a:	f6f518e3          	bne	a0,a5,1807a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
	    _M_destroy();
   1810e:	601c                	c.ld	a5,0(s0)
   18110:	6f9c                	c.ld	a5,24(a5)
   18112:	8522                	c.mv	a0,s0
   18114:	9782                	c.jalr	a5
   18116:	b795                	c.j	1807a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x764>
      return __exchange_and_add(__mem, __val);
   18118:	55fd                	c.li	a1,-1
   1811a:	03440513          	addi	a0,s0,52
   1811e:	a62fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18122:	b7dd                	c.j	18108 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x7f2>
    throw format_error("required .debug_info section missing");
   18124:	842a                	c.mv	s0,a0
   18126:	854a                	c.mv	a0,s2
   18128:	ba8fe0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1812c:	6488                	c.ld	a0,8(s1)
   1812e:	c511                	c.beqz	a0,1813a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x824>
	  _M_pi->_M_release();
   18130:	00021317          	auipc	t1,0x21
   18134:	29833303          	ld	t1,664(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   18138:	9302                	c.jalr	t1
   1813a:	8522                	c.mv	a0,s0
   1813c:	db4fe0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    throw format_error("required .debug_abbrev section missing");
   18140:	842a                	c.mv	s0,a0
   18142:	854a                	c.mv	a0,s2
   18144:	b8cfe0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   18148:	6542                	c.ldsp	a0,16(sp)
   1814a:	d16d                	c.beqz	a0,1812c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
	  _M_pi->_M_release();
   1814c:	00021317          	auipc	t1,0x21
   18150:	27c33303          	ld	t1,636(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   18154:	9302                	c.jalr	t1
   18156:	bfd9                	c.j	1812c <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x816>
	if (_M_pi != nullptr)
   18158:	842a                	c.mv	s0,a0
   1815a:	7522                	c.ldsp	a0,40(sp)
   1815c:	d575                	c.beqz	a0,18148 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
	  _M_pi->_M_release();
   1815e:	00021317          	auipc	t1,0x21
   18162:	26a33303          	ld	t1,618(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   18166:	9302                	c.jalr	t1
   18168:	b7c5                	c.j	18148 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x832>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1816a:	f04a                	c.sdsp	s2,32(sp)
      : _M_pi(__r._M_pi)
   1816c:	f402                	c.sdsp	zero,40(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1816e:	00893603          	ld	a2,8(s2)
   18172:	f832                	c.sdsp	a2,48(sp)
      { return _M_ptr; }
   18174:	87ca                	c.mv	a5,s2
  while (!infocur.end()) {
   18176:	01093703          	ld	a4,16(s2)
   1817a:	d4e66ae3          	bltu	a2,a4,17ece <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x5b8>
   1817e:	bdf1                	c.j	1805a <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x744>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18180:	e452                	c.sdsp	s4,8(sp)
      : _M_pi(__r._M_pi)
   18182:	e802                	c.sdsp	zero,16(sp)
   18184:	008a3783          	ld	a5,8(s4)
   18188:	ec3e                	c.sdsp	a5,24(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1818a:	67a2                	c.ldsp	a5,8(sp)
   1818c:	6b98                	c.ld	a4,16(a5)
   1818e:	67e2                	c.ldsp	a5,24(sp)
   18190:	40f70633          	sub	a2,a4,a5
   18194:	468d                	c.li	a3,3
   18196:	00c6f463          	bgeu	a3,a2,1819e <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x888>
   1819a:	a6e7e3e3          	bltu	a5,a4,17c00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ea>
      underflow();
   1819e:	0028                	c.addi4spn	a0,sp,8
   181a0:	199020ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   181a4:	bcb1                	c.j	17c00 <dwarf::dwarf::dwarf(std::shared_ptr<dwarf::loader> const&)+0x2ea>

00000000000181a6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>:
type_unit::type_unit(const dwarf &file, section_offset offset) {
   181a6:	7115                	c.addi16sp	sp,-224
   181a8:	ed86                	c.sdsp	ra,216(sp)
   181aa:	e9a2                	c.sdsp	s0,208(sp)
   181ac:	e5a6                	c.sdsp	s1,200(sp)
   181ae:	e1ca                	c.sdsp	s2,192(sp)
   181b0:	fd4e                	c.sdsp	s3,184(sp)
   181b2:	f952                	c.sdsp	s4,176(sp)
   181b4:	f556                	c.sdsp	s5,168(sp)
   181b6:	f15a                	c.sdsp	s6,160(sp)
   181b8:	ed5e                	c.sdsp	s7,152(sp)
   181ba:	e962                	c.sdsp	s8,144(sp)
   181bc:	892a                	c.mv	s2,a0
   181be:	89ae                	c.mv	s3,a1
   181c0:	8a32                	c.mv	s4,a2
      : _M_ptr(0), _M_refcount()
   181c2:	00053423          	sd	zero,8(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   181c6:	00053823          	sd	zero,16(a0)
   181ca:	00021797          	auipc	a5,0x21
   181ce:	18e7b783          	ld	a5,398(a5) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   181d2:	07c1                	c.addi	a5,16
   181d4:	e11c                	c.sd	a5,0(a0)
  cursor cur(file.get_section(section_type::types), offset);
   181d6:	462d                	c.li	a2,11
   181d8:	0108                	c.addi4spn	a0,sp,128
   181da:	de5fe0ef          	jal	ra,16fbe <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   181de:	678a                	c.ldsp	a5,128(sp)
   181e0:	e83e                	c.sdsp	a5,16(sp)
      : _M_pi(__r._M_pi)
   181e2:	652a                	c.ldsp	a0,136(sp)
   181e4:	ec2a                	c.sdsp	a0,24(sp)
	if (_M_pi != nullptr)
   181e6:	c919                	c.beqz	a0,181fc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56>
    if (__is_single_threaded())
   181e8:	00021797          	auipc	a5,0x21
   181ec:	2987b783          	ld	a5,664(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   181f0:	0007c783          	lbu	a5,0(a5)
   181f4:	cf8d                	c.beqz	a5,1822e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x88>
  { *__mem += __val; }
   181f6:	591c                	c.lw	a5,48(a0)
   181f8:	2785                	c.addiw	a5,1
   181fa:	d91c                	c.sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   181fc:	678a                	c.ldsp	a5,128(sp)
   181fe:	679c                	c.ld	a5,8(a5)
   18200:	97d2                	c.add	a5,s4
   18202:	f03e                	c.sdsp	a5,32(sp)
	if (_M_pi != nullptr)
   18204:	642a                	c.ldsp	s0,136(sp)
   18206:	cc19                	c.beqz	s0,18224 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
    if (__is_single_threaded())
   18208:	00021797          	auipc	a5,0x21
   1820c:	2787b783          	ld	a5,632(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18210:	0007c783          	lbu	a5,0(a5)
   18214:	c39d                	c.beqz	a5,1823a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x94>
    _Atomic_word __result = *__mem;
   18216:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18218:	fff5079b          	addiw	a5,a0,-1
   1821c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1821e:	4785                	c.li	a5,1
   18220:	02f50363          	beq	a0,a5,18246 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xa0>
  std::shared_ptr<section> subsec = cur.subsection();
   18224:	080c                	c.addi4spn	a1,sp,16
   18226:	850a                	c.mv	a0,sp
   18228:	4a1020ef          	jal	ra,1aec8 <dwarf::cursor::subsection()>
   1822c:	a8a1                	c.j	18284 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xde>
      __atomic_add(__mem, __val);
   1822e:	4585                	c.li	a1,1
   18230:	03050513          	addi	a0,a0,48
   18234:	91cfe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18238:	b7d1                	c.j	181fc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56>
      return __exchange_and_add(__mem, __val);
   1823a:	55fd                	c.li	a1,-1
   1823c:	03040513          	addi	a0,s0,48
   18240:	940fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18244:	bfe9                	c.j	1821e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x78>
	_M_dispose();
   18246:	601c                	c.ld	a5,0(s0)
   18248:	6b9c                	c.ld	a5,16(a5)
   1824a:	8522                	c.mv	a0,s0
   1824c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1824e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18252:	00021797          	auipc	a5,0x21
   18256:	22e7b783          	ld	a5,558(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1825a:	0007c783          	lbu	a5,0(a5)
   1825e:	cf89                	c.beqz	a5,18278 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xd2>
    _Atomic_word __result = *__mem;
   18260:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18262:	fff5079b          	addiw	a5,a0,-1
   18266:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18268:	4785                	c.li	a5,1
   1826a:	faf51de3          	bne	a0,a5,18224 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
	    _M_destroy();
   1826e:	601c                	c.ld	a5,0(s0)
   18270:	6f9c                	c.ld	a5,24(a5)
   18272:	8522                	c.mv	a0,s0
   18274:	9782                	c.jalr	a5
   18276:	b77d                	c.j	18224 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x7e>
      return __exchange_and_add(__mem, __val);
   18278:	55fd                	c.li	a1,-1
   1827a:	03440513          	addi	a0,s0,52
   1827e:	902fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18282:	b7dd                	c.j	18268 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xc2>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18284:	6482                	c.ldsp	s1,0(sp)
      : _M_pi(__r._M_pi)
   18286:	6422                	c.ldsp	s0,8(sp)
	if (_M_pi != nullptr)
   18288:	56040463          	beq	s0,zero,187f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x64a>
    if (__is_single_threaded())
   1828c:	00021797          	auipc	a5,0x21
   18290:	1f47b783          	ld	a5,500(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18294:	0007c783          	lbu	a5,0(a5)
   18298:	cbad                	c.beqz	a5,1830a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x164>
  { *__mem += __val; }
   1829a:	581c                	c.lw	a5,48(s0)
   1829c:	2785                	c.addiw	a5,1
   1829e:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   182a0:	f426                	c.sdsp	s1,40(sp)
      : _M_pi(__r._M_pi)
   182a2:	f822                	c.sdsp	s0,48(sp)
    if (__is_single_threaded())
   182a4:	00021797          	auipc	a5,0x21
   182a8:	1dc7b783          	ld	a5,476(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   182ac:	0007c783          	lbu	a5,0(a5)
   182b0:	c3bd                	c.beqz	a5,18316 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x170>
  { *__mem += __val; }
   182b2:	581c                	c.lw	a5,48(s0)
   182b4:	2785                	c.addiw	a5,1
   182b6:	d81c                	c.sw	a5,48(s0)
   182b8:	649c                	c.ld	a5,8(s1)
   182ba:	fc3e                	c.sdsp	a5,56(sp)
    if (__is_single_threaded())
   182bc:	00021797          	auipc	a5,0x21
   182c0:	1c47b783          	ld	a5,452(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   182c4:	0007c783          	lbu	a5,0(a5)
   182c8:	cfa9                	c.beqz	a5,18322 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x17c>
    _Atomic_word __result = *__mem;
   182ca:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   182cc:	fff5079b          	addiw	a5,a0,-1
   182d0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   182d2:	4785                	c.li	a5,1
   182d4:	52f51263          	bne	a0,a5,187f8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
	_M_dispose();
   182d8:	601c                	c.ld	a5,0(s0)
   182da:	6b9c                	c.ld	a5,16(a5)
   182dc:	8522                	c.mv	a0,s0
   182de:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   182e0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   182e4:	00021797          	auipc	a5,0x21
   182e8:	19c7b783          	ld	a5,412(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   182ec:	0007c783          	lbu	a5,0(a5)
   182f0:	cf9d                	c.beqz	a5,1832e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x188>
    _Atomic_word __result = *__mem;
   182f2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   182f4:	fff5079b          	addiw	a5,a0,-1
   182f8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   182fa:	4785                	c.li	a5,1
   182fc:	4ef51e63          	bne	a0,a5,187f8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
	    _M_destroy();
   18300:	601c                	c.ld	a5,0(s0)
   18302:	6f9c                	c.ld	a5,24(a5)
   18304:	8522                	c.mv	a0,s0
   18306:	9782                	c.jalr	a5
   18308:	a9c5                	c.j	187f8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x652>
      __atomic_add(__mem, __val);
   1830a:	4585                	c.li	a1,1
   1830c:	03040513          	addi	a0,s0,48
   18310:	840fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18314:	b771                	c.j	182a0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0xfa>
   18316:	4585                	c.li	a1,1
   18318:	03040513          	addi	a0,s0,48
   1831c:	834fe0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18320:	bf61                	c.j	182b8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x112>
      return __exchange_and_add(__mem, __val);
   18322:	55fd                	c.li	a1,-1
   18324:	03040513          	addi	a0,s0,48
   18328:	858fe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1832c:	b75d                	c.j	182d2 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x12c>
   1832e:	55fd                	c.li	a1,-1
   18330:	03440513          	addi	a0,s0,52
   18334:	84cfe0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18338:	b7c9                	c.j	182fa <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x154>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1833a:	77a2                	c.ldsp	a5,40(sp)
   1833c:	6b98                	c.ld	a4,16(a5)
   1833e:	77e2                	c.ldsp	a5,56(sp)
   18340:	40f70633          	sub	a2,a4,a5
   18344:	4685                	c.li	a3,1
   18346:	00c6f463          	bgeu	a3,a2,1834e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1a8>
   1834a:	00e7e563          	bltu	a5,a4,18354 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1ae>
      underflow();
   1834e:	1028                	c.addi4spn	a0,sp,40
   18350:	7e8020ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18354:	7762                	c.ldsp	a4,56(sp)
    if (sec->ord == byte_order::lsb) {
   18356:	77a2                	c.ldsp	a5,40(sp)
   18358:	4fdc                	c.lw	a5,28(a5)
   1835a:	e39d                	c.bnez	a5,18380 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1da>
        val |= ((uint64_t)p[i]) << (i * 8);
   1835c:	00174783          	lbu	a5,1(a4)
   18360:	07a2                	c.slli	a5,0x8
   18362:	00074683          	lbu	a3,0(a4)
   18366:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   18368:	0709                	c.addi	a4,2
   1836a:	fc3a                	c.sdsp	a4,56(sp)
    return (T)val;
   1836c:	03079413          	slli	s0,a5,0x30
   18370:	9041                	c.srli	s0,0x30
  if (version != 4)
   18372:	4711                	c.li	a4,4
   18374:	00e79d63          	bne	a5,a4,1838e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1e8>
  section_offset debug_abbrev_offset = sub.offset();
   18378:	1028                	c.addi4spn	a0,sp,40
   1837a:	4e5020ef          	jal	ra,1b05e <dwarf::cursor::offset()>
   1837e:	a061                	c.j	18406 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x260>
        val = (val << 8) | (uint64_t)p[i];
   18380:	00074783          	lbu	a5,0(a4)
   18384:	07a2                	c.slli	a5,0x8
   18386:	00174683          	lbu	a3,1(a4)
   1838a:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1838c:	bff1                	c.j	18368 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x1c2>
    throw format_error("unknown type unit version " + std::to_string(version));
   1838e:	4541                	c.li	a0,16
   18390:	890fe0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   18394:	84aa                	c.mv	s1,a0
   18396:	85a2                	c.mv	a1,s0
   18398:	1080                	c.addi4spn	s0,sp,96
   1839a:	8522                	c.mv	a0,s0
   1839c:	00021317          	auipc	t1,0x21
   183a0:	0f433303          	ld	t1,244(t1) # 39490 <std::__cxx11::to_string(int)@@Base+0x1fcfc>
   183a4:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   183a6:	00015617          	auipc	a2,0x15
   183aa:	e7260613          	addi	a2,a2,-398 # 2d218 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xc0>
   183ae:	4581                	c.li	a1,0
   183b0:	8522                	c.mv	a0,s0
   183b2:	fdffd0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   183b6:	85aa                	c.mv	a1,a0
   183b8:	0080                	c.addi4spn	s0,sp,64
   183ba:	8522                	c.mv	a0,s0
   183bc:	8b4fe0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   183c0:	85a2                	c.mv	a1,s0
   183c2:	8526                	c.mv	a0,s1
   183c4:	9dcfe0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   183c8:	00021797          	auipc	a5,0x21
   183cc:	1907b783          	ld	a5,400(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   183d0:	07c1                	c.addi	a5,16
   183d2:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   183d4:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   183d6:	089c                	c.addi4spn	a5,sp,80
   183d8:	00f50463          	beq	a0,a5,183e0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x23a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   183dc:	934fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   183e0:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   183e2:	189c                	c.addi4spn	a5,sp,112
   183e4:	00f50463          	beq	a0,a5,183ec <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x246>
   183e8:	928fe0ef          	jal	ra,16510 <operator delete(void*)@plt>
   183ec:	00021617          	auipc	a2,0x21
   183f0:	f9463603          	ld	a2,-108(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   183f4:	00021597          	auipc	a1,0x21
   183f8:	ebc5b583          	ld	a1,-324(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   183fc:	8526                	c.mv	a0,s1
   183fe:	ac2fe0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   18402:	842a                	c.mv	s0,a0
   18404:	a659                	c.j	1878a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5e4>
  section_offset debug_abbrev_offset = sub.offset();
   18406:	8aaa                	c.mv	s5,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   18408:	77a2                	c.ldsp	a5,40(sp)
   1840a:	6b98                	c.ld	a4,16(a5)
   1840c:	77e2                	c.ldsp	a5,56(sp)
   1840e:	00e7e563          	bltu	a5,a4,18418 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x272>
      underflow();
   18412:	1028                	c.addi4spn	a0,sp,40
   18414:	724020ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   18418:	77e2                	c.ldsp	a5,56(sp)
      { return _M_ptr; }
   1841a:	7722                	c.ldsp	a4,40(sp)
    if (sec->ord == byte_order::lsb) {
   1841c:	4f54                	c.lw	a3,28(a4)
   1841e:	3a068763          	beq	a3,zero,187cc <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x626>
        val = (val << 8) | (uint64_t)p[i];
   18422:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   18426:	a66d                	c.j	187d0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x62a>
    const unsigned char *p = (const unsigned char *)pos;
   18428:	7662                	c.ldsp	a2,56(sp)
    if (sec->ord == byte_order::lsb) {
   1842a:	77a2                	c.ldsp	a5,40(sp)
   1842c:	4fdc                	c.lw	a5,28(a5)
   1842e:	e785                	c.bnez	a5,18456 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2b0>
   18430:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   18432:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   18434:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   18438:	0006c703          	lbu	a4,0(a3)
   1843c:	00f71733          	sll	a4,a4,a5
   18440:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   18442:	0685                	c.addi	a3,1
   18444:	27a1                	c.addiw	a5,8
   18446:	feb799e3          	bne	a5,a1,18438 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x292>
    pos += sizeof(T);
   1844a:	0621                	c.addi	a2,8
   1844c:	fc32                	c.sdsp	a2,56(sp)
  section_offset type_offset = sub.offset();
   1844e:	1028                	c.addi4spn	a0,sp,40
   18450:	40f020ef          	jal	ra,1b05e <dwarf::cursor::offset()>
   18454:	a829                	c.j	1846e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2c8>
   18456:	87b2                	c.mv	a5,a2
   18458:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1845c:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1845e:	04a2                	c.slli	s1,0x8
   18460:	0007c703          	lbu	a4,0(a5)
   18464:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   18466:	0785                	c.addi	a5,1
   18468:	fef69be3          	bne	a3,a5,1845e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2b8>
   1846c:	bff9                	c.j	1844a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x2a4>
   1846e:	8b2a                	c.mv	s6,a0
  section_offset get_section_offset() const { return pos - sec->begin; }
   18470:	77a2                	c.ldsp	a5,40(sp)
   18472:	679c                	c.ld	a5,8(a5)
   18474:	7be2                	c.ldsp	s7,56(sp)
   18476:	40fb8bb3          	sub	s7,s7,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1847a:	1c800513          	addi	a0,zero,456
   1847e:	8a2fe0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   18482:	842a                	c.mv	s0,a0
   18484:	00052423          	sw	zero,8(a0)
   18488:	00052623          	sw	zero,12(a0)
   1848c:	00052823          	sw	zero,16(a0)
   18490:	00052a23          	sw	zero,20(a0)
   18494:	00052c23          	sw	zero,24(a0)
   18498:	00052e23          	sw	zero,28(a0)
   1849c:	02053023          	sd	zero,32(a0)
   184a0:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   184a4:	4785                	c.li	a5,1
   184a6:	d91c                	c.sw	a5,48(a0)
   184a8:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   184aa:	00021797          	auipc	a5,0x21
   184ae:	f8e7b783          	ld	a5,-114(a5) # 39438 <vtable for std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xa50>
   184b2:	07c1                	c.addi	a5,16
   184b4:	e11c                	c.sd	a5,0(a0)
   184b6:	03850c13          	addi	s8,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   184ba:	0009b783          	ld	a5,0(s3)
   184be:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   184c0:	0089b503          	ld	a0,8(s3)
   184c4:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   184c6:	cd01                	c.beqz	a0,184de <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x338>
    if (__is_single_threaded())
   184c8:	00021797          	auipc	a5,0x21
   184cc:	fb87b783          	ld	a5,-72(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   184d0:	0007c783          	lbu	a5,0(a5)
   184d4:	14078b63          	beq	a5,zero,1862a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x484>
  { *__mem += __val; }
   184d8:	591c                	c.lw	a5,48(a0)
   184da:	2785                	c.addiw	a5,1
   184dc:	d91c                	c.sw	a5,48(a0)
      : file(file), offset(offset), subsec(subsec),
   184de:	05443423          	sd	s4,72(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   184e2:	6782                	c.ldsp	a5,0(sp)
   184e4:	e83c                	c.sd	a5,80(s0)
      : _M_pi(__r._M_pi)
   184e6:	6522                	c.ldsp	a0,8(sp)
   184e8:	ec28                	c.sd	a0,88(s0)
	if (_M_pi != nullptr)
   184ea:	cd01                	c.beqz	a0,18502 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x35c>
    if (__is_single_threaded())
   184ec:	00021797          	auipc	a5,0x21
   184f0:	f947b783          	ld	a5,-108(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   184f4:	0007c783          	lbu	a5,0(a5)
   184f8:	12078f63          	beq	a5,zero,18636 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x490>
  { *__mem += __val; }
   184fc:	591c                	c.lw	a5,48(a0)
   184fe:	2785                	c.addiw	a5,1
   18500:	d91c                	c.sw	a5,48(a0)
        debug_abbrev_offset(debug_abbrev_offset), root_offset(root_offset),
   18502:	07543023          	sd	s5,96(s0)
   18506:	07743423          	sd	s7,104(s0)
        type_signature(type_signature), type_offset(type_offset),
   1850a:	f824                	c.sd	s1,112(s0)
   1850c:	07643c23          	sd	s6,120(s0)
  die() : cu(nullptr), abbrev(nullptr) {}
   18510:	08043423          	sd	zero,136(s0)
   18514:	08043823          	sd	zero,144(s0)
   18518:	0a040793          	addi	a5,s0,160
   1851c:	e87c                	c.sd	a5,208(s0)
   1851e:	ec7c                	c.sd	a5,216(s0)
   18520:	0d040793          	addi	a5,s0,208
   18524:	f07c                	c.sd	a5,224(s0)
   18526:	0e043c23          	sd	zero,248(s0)
   1852a:	10043023          	sd	zero,256(s0)
   1852e:	11040793          	addi	a5,s0,272
   18532:	14f43023          	sd	a5,320(s0)
   18536:	14f43423          	sd	a5,328(s0)
   1853a:	14040793          	addi	a5,s0,320
   1853e:	14f43823          	sd	a5,336(s0)
      : _M_ptr(0), _M_refcount()
   18542:	16043023          	sd	zero,352(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   18546:	16043423          	sd	zero,360(s0)
        have_abbrevs(false) {}
   1854a:	16040823          	sb	zero,368(s0)
   1854e:	16043c23          	sd	zero,376(s0)
   18552:	18043023          	sd	zero,384(s0)
   18556:	18043423          	sd	zero,392(s0)
   1855a:	1c040793          	addi	a5,s0,448
   1855e:	18f43823          	sd	a5,400(s0)
   18562:	4785                	c.li	a5,1
   18564:	18f43c23          	sd	a5,408(s0)
    _Hash_node_base() noexcept : _M_nxt() { }
   18568:	1a043023          	sd	zero,416(s0)
   1856c:	1a043423          	sd	zero,424(s0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }
   18570:	00015797          	auipc	a5,0x15
   18574:	f207a787          	flw	fa5,-224(a5) # 2d490 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xf0>
   18578:	1af42827          	fsw	fa5,432(s0)
   1857c:	1a043c23          	sd	zero,440(s0)
   18580:	1c043023          	sd	zero,448(s0)
   18584:	01893423          	sd	s8,8(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   18588:	01093483          	ld	s1,16(s2)
	__r._M_pi = _M_pi;
   1858c:	00893823          	sd	s0,16(s2)
	if (_M_pi != nullptr)
   18590:	cc99                	c.beqz	s1,185ae <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
    if (__is_single_threaded())
   18592:	00021797          	auipc	a5,0x21
   18596:	eee7b783          	ld	a5,-274(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1859a:	0007c783          	lbu	a5,0(a5)
   1859e:	c3d5                	c.beqz	a5,18642 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x49c>
    _Atomic_word __result = *__mem;
   185a0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   185a2:	fff5079b          	addiw	a5,a0,-1
   185a6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   185a8:	4785                	c.li	a5,1
   185aa:	0af50263          	beq	a0,a5,1864e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4a8>
	if (_M_pi != nullptr)
   185ae:	7442                	c.ldsp	s0,48(sp)
   185b0:	cc19                	c.beqz	s0,185ce <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
    if (__is_single_threaded())
   185b2:	00021797          	auipc	a5,0x21
   185b6:	ece7b783          	ld	a5,-306(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   185ba:	0007c783          	lbu	a5,0(a5)
   185be:	c7f9                	c.beqz	a5,1868c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4e6>
    _Atomic_word __result = *__mem;
   185c0:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   185c2:	fff5079b          	addiw	a5,a0,-1
   185c6:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   185c8:	4785                	c.li	a5,1
   185ca:	0cf50763          	beq	a0,a5,18698 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4f2>
	if (_M_pi != nullptr)
   185ce:	6422                	c.ldsp	s0,8(sp)
   185d0:	c005                	c.beqz	s0,185f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
    if (__is_single_threaded())
   185d2:	00021797          	auipc	a5,0x21
   185d6:	eae7b783          	ld	a5,-338(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   185da:	0007c783          	lbu	a5,0(a5)
   185de:	0e078c63          	beq	a5,zero,186d6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x530>
    _Atomic_word __result = *__mem;
   185e2:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   185e4:	fff5079b          	addiw	a5,a0,-1
   185e8:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   185ea:	4785                	c.li	a5,1
   185ec:	0ef50b63          	beq	a0,a5,186e2 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x53c>
	if (_M_pi != nullptr)
   185f0:	6462                	c.ldsp	s0,24(sp)
   185f2:	c005                	c.beqz	s0,18612 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
    if (__is_single_threaded())
   185f4:	00021797          	auipc	a5,0x21
   185f8:	e8c7b783          	ld	a5,-372(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   185fc:	0007c783          	lbu	a5,0(a5)
   18600:	12078063          	beq	a5,zero,18720 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x57a>
    _Atomic_word __result = *__mem;
   18604:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18606:	fff5079b          	addiw	a5,a0,-1
   1860a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1860c:	4785                	c.li	a5,1
   1860e:	10f50f63          	beq	a0,a5,1872c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x586>
}
   18612:	60ee                	c.ldsp	ra,216(sp)
   18614:	644e                	c.ldsp	s0,208(sp)
   18616:	64ae                	c.ldsp	s1,200(sp)
   18618:	690e                	c.ldsp	s2,192(sp)
   1861a:	79ea                	c.ldsp	s3,184(sp)
   1861c:	7a4a                	c.ldsp	s4,176(sp)
   1861e:	7aaa                	c.ldsp	s5,168(sp)
   18620:	7b0a                	c.ldsp	s6,160(sp)
   18622:	6bea                	c.ldsp	s7,152(sp)
   18624:	6c4a                	c.ldsp	s8,144(sp)
   18626:	612d                	c.addi16sp	sp,224
   18628:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   1862a:	4585                	c.li	a1,1
   1862c:	03050513          	addi	a0,a0,48
   18630:	d21fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18634:	b56d                	c.j	184de <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x338>
   18636:	4585                	c.li	a1,1
   18638:	03050513          	addi	a0,a0,48
   1863c:	d15fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18640:	b5c9                	c.j	18502 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x35c>
      return __exchange_and_add(__mem, __val);
   18642:	55fd                	c.li	a1,-1
   18644:	03048513          	addi	a0,s1,48
   18648:	d39fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1864c:	bfb1                	c.j	185a8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x402>
	_M_dispose();
   1864e:	609c                	c.ld	a5,0(s1)
   18650:	6b9c                	c.ld	a5,16(a5)
   18652:	8526                	c.mv	a0,s1
   18654:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18656:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1865a:	00021797          	auipc	a5,0x21
   1865e:	e267b783          	ld	a5,-474(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18662:	0007c783          	lbu	a5,0(a5)
   18666:	cf89                	c.beqz	a5,18680 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4da>
    _Atomic_word __result = *__mem;
   18668:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1866a:	fff5079b          	addiw	a5,a0,-1
   1866e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18670:	4785                	c.li	a5,1
   18672:	f2f51ee3          	bne	a0,a5,185ae <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
	    _M_destroy();
   18676:	609c                	c.ld	a5,0(s1)
   18678:	6f9c                	c.ld	a5,24(a5)
   1867a:	8526                	c.mv	a0,s1
   1867c:	9782                	c.jalr	a5
   1867e:	bf05                	c.j	185ae <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x408>
      return __exchange_and_add(__mem, __val);
   18680:	55fd                	c.li	a1,-1
   18682:	03448513          	addi	a0,s1,52
   18686:	cfbfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1868a:	b7dd                	c.j	18670 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4ca>
   1868c:	55fd                	c.li	a1,-1
   1868e:	03040513          	addi	a0,s0,48
   18692:	ceffd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18696:	bf0d                	c.j	185c8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x422>
	_M_dispose();
   18698:	601c                	c.ld	a5,0(s0)
   1869a:	6b9c                	c.ld	a5,16(a5)
   1869c:	8522                	c.mv	a0,s0
   1869e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   186a0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   186a4:	00021797          	auipc	a5,0x21
   186a8:	ddc7b783          	ld	a5,-548(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   186ac:	0007c783          	lbu	a5,0(a5)
   186b0:	cf89                	c.beqz	a5,186ca <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x524>
    _Atomic_word __result = *__mem;
   186b2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   186b4:	fff5079b          	addiw	a5,a0,-1
   186b8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   186ba:	4785                	c.li	a5,1
   186bc:	f0f519e3          	bne	a0,a5,185ce <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
	    _M_destroy();
   186c0:	601c                	c.ld	a5,0(s0)
   186c2:	6f9c                	c.ld	a5,24(a5)
   186c4:	8522                	c.mv	a0,s0
   186c6:	9782                	c.jalr	a5
   186c8:	b719                	c.j	185ce <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x428>
      return __exchange_and_add(__mem, __val);
   186ca:	55fd                	c.li	a1,-1
   186cc:	03440513          	addi	a0,s0,52
   186d0:	cb1fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   186d4:	b7dd                	c.j	186ba <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x514>
   186d6:	55fd                	c.li	a1,-1
   186d8:	03040513          	addi	a0,s0,48
   186dc:	ca5fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   186e0:	b729                	c.j	185ea <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x444>
	_M_dispose();
   186e2:	601c                	c.ld	a5,0(s0)
   186e4:	6b9c                	c.ld	a5,16(a5)
   186e6:	8522                	c.mv	a0,s0
   186e8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   186ea:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   186ee:	00021797          	auipc	a5,0x21
   186f2:	d927b783          	ld	a5,-622(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   186f6:	0007c783          	lbu	a5,0(a5)
   186fa:	cf89                	c.beqz	a5,18714 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x56e>
    _Atomic_word __result = *__mem;
   186fc:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   186fe:	fff5079b          	addiw	a5,a0,-1
   18702:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18704:	4785                	c.li	a5,1
   18706:	eef515e3          	bne	a0,a5,185f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
	    _M_destroy();
   1870a:	601c                	c.ld	a5,0(s0)
   1870c:	6f9c                	c.ld	a5,24(a5)
   1870e:	8522                	c.mv	a0,s0
   18710:	9782                	c.jalr	a5
   18712:	bdf9                	c.j	185f0 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x44a>
      return __exchange_and_add(__mem, __val);
   18714:	55fd                	c.li	a1,-1
   18716:	03440513          	addi	a0,s0,52
   1871a:	c67fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1871e:	b7dd                	c.j	18704 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x55e>
   18720:	55fd                	c.li	a1,-1
   18722:	03040513          	addi	a0,s0,48
   18726:	c5bfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1872a:	b5cd                	c.j	1860c <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x466>
	_M_dispose();
   1872c:	601c                	c.ld	a5,0(s0)
   1872e:	6b9c                	c.ld	a5,16(a5)
   18730:	8522                	c.mv	a0,s0
   18732:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18734:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18738:	00021797          	auipc	a5,0x21
   1873c:	d487b783          	ld	a5,-696(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18740:	0007c783          	lbu	a5,0(a5)
   18744:	cf89                	c.beqz	a5,1875e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5b8>
    _Atomic_word __result = *__mem;
   18746:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18748:	fff5079b          	addiw	a5,a0,-1
   1874c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1874e:	4785                	c.li	a5,1
   18750:	ecf511e3          	bne	a0,a5,18612 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
	    _M_destroy();
   18754:	601c                	c.ld	a5,0(s0)
   18756:	6f9c                	c.ld	a5,24(a5)
   18758:	8522                	c.mv	a0,s0
   1875a:	9782                	c.jalr	a5
   1875c:	bd5d                	c.j	18612 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x46c>
      return __exchange_and_add(__mem, __val);
   1875e:	55fd                	c.li	a1,-1
   18760:	03440513          	addi	a0,s0,52
   18764:	c1dfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18768:	b7dd                	c.j	1874e <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5a8>
      { return _M_dataplus._M_p; }
   1876a:	842a                	c.mv	s0,a0
   1876c:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1876e:	089c                	c.addi4spn	a5,sp,80
   18770:	00f50463          	beq	a0,a5,18778 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5d2>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   18774:	d9dfd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18778:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   1877a:	189c                	c.addi4spn	a5,sp,112
   1877c:	00f50463          	beq	a0,a5,18784 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5de>
   18780:	d91fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw format_error("unknown type unit version " + std::to_string(version));
   18784:	8526                	c.mv	a0,s1
   18786:	d4bfd0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1878a:	7542                	c.ldsp	a0,48(sp)
   1878c:	c511                	c.beqz	a0,18798 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5f2>
	  _M_pi->_M_release();
   1878e:	00021317          	auipc	t1,0x21
   18792:	c3a33303          	ld	t1,-966(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   18796:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   18798:	6522                	c.ldsp	a0,8(sp)
   1879a:	c511                	c.beqz	a0,187a6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x600>
	  _M_pi->_M_release();
   1879c:	00021317          	auipc	t1,0x21
   187a0:	c2c33303          	ld	t1,-980(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   187a4:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   187a6:	6562                	c.ldsp	a0,24(sp)
   187a8:	c511                	c.beqz	a0,187b4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x60e>
	  _M_pi->_M_release();
   187aa:	00021317          	auipc	t1,0x21
   187ae:	c1e33303          	ld	t1,-994(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   187b2:	9302                	c.jalr	t1
}
   187b4:	854a                	c.mv	a0,s2
   187b6:	f54fe0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   187ba:	8522                	c.mv	a0,s0
   187bc:	f35fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   187c0:	842a                	c.mv	s0,a0
   187c2:	bf5d                	c.j	18778 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x5d2>
	if (_M_pi != nullptr)
   187c4:	842a                	c.mv	s0,a0
   187c6:	b7c5                	c.j	187a6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x600>
   187c8:	842a                	c.mv	s0,a0
   187ca:	b7ed                	c.j	187b4 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x60e>
        val |= ((uint64_t)p[i]) << (i * 8);
   187cc:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   187d0:	0785                	c.addi	a5,1
   187d2:	fc3e                	c.sdsp	a5,56(sp)
  subsec->addr_size = address_size;
   187d4:	6682                	c.ldsp	a3,0(sp)
   187d6:	d290                	c.sw	a2,32(a3)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   187d8:	6b18                	c.ld	a4,16(a4)
   187da:	40f70633          	sub	a2,a4,a5
   187de:	469d                	c.li	a3,7
   187e0:	00c6f463          	bgeu	a3,a2,187e8 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x642>
   187e4:	c4e7e2e3          	bltu	a5,a4,18428 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x282>
      underflow();
   187e8:	1028                	c.addi4spn	a0,sp,40
   187ea:	34e020ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   187ee:	b92d                	c.j	18428 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x282>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   187f0:	f426                	c.sdsp	s1,40(sp)
      : _M_pi(__r._M_pi)
   187f2:	f802                	c.sdsp	zero,48(sp)
      : sec(sec), pos(sec->begin + offset) {}
   187f4:	649c                	c.ld	a5,8(s1)
   187f6:	fc3e                	c.sdsp	a5,56(sp)
  sub.skip_initial_length();
   187f8:	1028                	c.addi4spn	a0,sp,40
   187fa:	22a020ef          	jal	ra,1aa24 <dwarf::cursor::skip_initial_length()>
   187fe:	be35                	c.j	1833a <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x194>

0000000000018800 <dwarf::dwarf::get_type_unit(unsigned long) const>:
const type_unit &dwarf::get_type_unit(uint64_t type_signature) const {
   18800:	7115                	c.addi16sp	sp,-224
   18802:	ed86                	c.sdsp	ra,216(sp)
   18804:	e9a2                	c.sdsp	s0,208(sp)
   18806:	e5a6                	c.sdsp	s1,200(sp)
   18808:	e1ca                	c.sdsp	s2,192(sp)
   1880a:	fd4e                	c.sdsp	s3,184(sp)
   1880c:	f952                	c.sdsp	s4,176(sp)
   1880e:	f556                	c.sdsp	s5,168(sp)
   18810:	f15a                	c.sdsp	s6,160(sp)
   18812:	ed5e                	c.sdsp	s7,152(sp)
   18814:	e962                	c.sdsp	s8,144(sp)
   18816:	e566                	c.sdsp	s9,136(sp)
   18818:	e16a                	c.sdsp	s10,128(sp)
   1881a:	892a                	c.mv	s2,a0
   1881c:	e42e                	c.sdsp	a1,8(sp)
  if (!m->have_type_units) {
   1881e:	611c                	c.ld	a5,0(a0)
   18820:	0807c783          	lbu	a5,128(a5)
   18824:	24079663          	bne	a5,zero,18a70 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    cursor tucur(get_section(section_type::types));
   18828:	462d                	c.li	a2,11
   1882a:	85aa                	c.mv	a1,a0
   1882c:	08a8                	c.addi4spn	a0,sp,88
   1882e:	f90fe0ef          	jal	ra,16fbe <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18832:	67e6                	c.ldsp	a5,88(sp)
   18834:	ec3e                	c.sdsp	a5,24(sp)
      : _M_pi(__r._M_pi)
   18836:	7506                	c.ldsp	a0,96(sp)
   18838:	f02a                	c.sdsp	a0,32(sp)
	if (_M_pi != nullptr)
   1883a:	c919                	c.beqz	a0,18850 <dwarf::dwarf::get_type_unit(unsigned long) const+0x50>
    if (__is_single_threaded())
   1883c:	00021797          	auipc	a5,0x21
   18840:	c447b783          	ld	a5,-956(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18844:	0007c783          	lbu	a5,0(a5)
   18848:	c3b5                	c.beqz	a5,188ac <dwarf::dwarf::get_type_unit(unsigned long) const+0xac>
  { *__mem += __val; }
   1884a:	591c                	c.lw	a5,48(a0)
   1884c:	2785                	c.addiw	a5,1
   1884e:	d91c                	c.sw	a5,48(a0)
   18850:	67e6                	c.ldsp	a5,88(sp)
   18852:	679c                	c.ld	a5,8(a5)
   18854:	f43e                	c.sdsp	a5,40(sp)
	if (_M_pi != nullptr)
   18856:	7406                	c.ldsp	s0,96(sp)
   18858:	cc19                	c.beqz	s0,18876 <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
    if (__is_single_threaded())
   1885a:	00021797          	auipc	a5,0x21
   1885e:	c267b783          	ld	a5,-986(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18862:	0007c783          	lbu	a5,0(a5)
   18866:	cba9                	c.beqz	a5,188b8 <dwarf::dwarf::get_type_unit(unsigned long) const+0xb8>
    _Atomic_word __result = *__mem;
   18868:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1886a:	fff5079b          	addiw	a5,a0,-1
   1886e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18870:	4785                	c.li	a5,1
   18872:	04f50963          	beq	a0,a5,188c4 <dwarf::dwarf::get_type_unit(unsigned long) const+0xc4>
  bool end() const { return pos >= sec->end; }
   18876:	77a2                	c.ldsp	a5,40(sp)
      { return _M_ptr; }
   18878:	6762                	c.ldsp	a4,24(sp)
    while (!tucur.end()) {
   1887a:	6b14                	c.ld	a3,16(a4)
   1887c:	1cd7f563          	bgeu	a5,a3,18a46 <dwarf::dwarf::get_type_unit(unsigned long) const+0x246>
      type_unit tu(*this, tucur.get_section_offset());
   18880:	03810993          	addi	s3,sp,56
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
   18884:	06810b13          	addi	s6,sp,104
   18888:	00021b97          	auipc	s7,0x21
   1888c:	c00bbb83          	ld	s7,-1024(s7) # 39488 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)@@Base+0x1edaa>
    return ::__libc_single_threaded;
   18890:	00021a97          	auipc	s5,0x21
   18894:	bf0aba83          	ld	s5,-1040(s5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      tucur.subsection();
   18898:	07010c13          	addi	s8,sp,112
   1889c:	01810c93          	addi	s9,sp,24
class type_unit : public unit {
   188a0:	00021a17          	auipc	s4,0x21
   188a4:	ab8a3a03          	ld	s4,-1352(s4) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   188a8:	0a41                	c.addi	s4,16
   188aa:	a289                	c.j	189ec <dwarf::dwarf::get_type_unit(unsigned long) const+0x1ec>
      __atomic_add(__mem, __val);
   188ac:	4585                	c.li	a1,1
   188ae:	03050513          	addi	a0,a0,48
   188b2:	a9ffd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   188b6:	bf69                	c.j	18850 <dwarf::dwarf::get_type_unit(unsigned long) const+0x50>
      return __exchange_and_add(__mem, __val);
   188b8:	55fd                	c.li	a1,-1
   188ba:	03040513          	addi	a0,s0,48
   188be:	ac3fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   188c2:	b77d                	c.j	18870 <dwarf::dwarf::get_type_unit(unsigned long) const+0x70>
	_M_dispose();
   188c4:	601c                	c.ld	a5,0(s0)
   188c6:	6b9c                	c.ld	a5,16(a5)
   188c8:	8522                	c.mv	a0,s0
   188ca:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   188cc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   188d0:	00021797          	auipc	a5,0x21
   188d4:	bb07b783          	ld	a5,-1104(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   188d8:	0007c783          	lbu	a5,0(a5)
   188dc:	cf89                	c.beqz	a5,188f6 <dwarf::dwarf::get_type_unit(unsigned long) const+0xf6>
    _Atomic_word __result = *__mem;
   188de:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   188e0:	fff5079b          	addiw	a5,a0,-1
   188e4:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   188e6:	4785                	c.li	a5,1
   188e8:	f8f517e3          	bne	a0,a5,18876 <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
	    _M_destroy();
   188ec:	601c                	c.ld	a5,0(s0)
   188ee:	6f9c                	c.ld	a5,24(a5)
   188f0:	8522                	c.mv	a0,s0
   188f2:	9782                	c.jalr	a5
   188f4:	b749                	c.j	18876 <dwarf::dwarf::get_type_unit(unsigned long) const+0x76>
      return __exchange_and_add(__mem, __val);
   188f6:	55fd                	c.li	a1,-1
   188f8:	03440513          	addi	a0,s0,52
   188fc:	a85fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18900:	b7dd                	c.j	188e6 <dwarf::dwarf::get_type_unit(unsigned long) const+0xe6>
      { return _M_ptr; }
   18902:	00093403          	ld	s0,0(s2)
      m->type_units[tu.get_type_signature()] = tu;
   18906:	854e                	c.mv	a0,s3
   18908:	eb0fe0ef          	jal	ra,16fb8 <dwarf::type_unit::get_type_signature() const>
   1890c:	f4aa                	c.sdsp	a0,104(sp)
   1890e:	85da                	c.mv	a1,s6
   18910:	04840513          	addi	a0,s0,72
   18914:	9b82                	c.jalr	s7
   18916:	842a                	c.mv	s0,a0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   18918:	6786                	c.ldsp	a5,64(sp)
   1891a:	e51c                	c.sd	a5,8(a0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1891c:	64a6                	c.ldsp	s1,72(sp)
	if (__tmp != _M_pi)
   1891e:	691c                	c.ld	a5,16(a0)
   18920:	02f48763          	beq	s1,a5,1894e <dwarf::dwarf::get_type_unit(unsigned long) const+0x14e>
	    if (__tmp != nullptr)
   18924:	cc9d                	c.beqz	s1,18962 <dwarf::dwarf::get_type_unit(unsigned long) const+0x162>
    if (__is_single_threaded())
   18926:	000ac783          	lbu	a5,0(s5)
   1892a:	c79d                	c.beqz	a5,18958 <dwarf::dwarf::get_type_unit(unsigned long) const+0x158>
  { *__mem += __val; }
   1892c:	589c                	c.lw	a5,48(s1)
   1892e:	2785                	c.addiw	a5,1
   18930:	d89c                	c.sw	a5,48(s1)
	    if (_M_pi != nullptr)
   18932:	01053d03          	ld	s10,16(a0)
   18936:	000d0b63          	beq	s10,zero,1894c <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
    _Atomic_word __result = *__mem;
   1893a:	030d2503          	lw	a0,48(s10)
    *__mem += __val;
   1893e:	fff5079b          	addiw	a5,a0,-1
   18942:	02fd2823          	sw	a5,48(s10)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18946:	4785                	c.li	a5,1
   18948:	02f50a63          	beq	a0,a5,1897c <dwarf::dwarf::get_type_unit(unsigned long) const+0x17c>
	    _M_pi = __tmp;
   1894c:	e804                	c.sd	s1,16(s0)
      tucur.subsection();
   1894e:	85e6                	c.mv	a1,s9
   18950:	8562                	c.mv	a0,s8
   18952:	576020ef          	jal	ra,1aec8 <dwarf::cursor::subsection()>
   18956:	a0b5                	c.j	189c2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1c2>
      __atomic_add(__mem, __val);
   18958:	4585                	c.li	a1,1
   1895a:	03048513          	addi	a0,s1,48
   1895e:	9f3fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
	    if (_M_pi != nullptr)
   18962:	01043d03          	ld	s10,16(s0)
   18966:	fe0d03e3          	beq	s10,zero,1894c <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
    if (__is_single_threaded())
   1896a:	000ac783          	lbu	a5,0(s5)
   1896e:	f7f1                	c.bnez	a5,1893a <dwarf::dwarf::get_type_unit(unsigned long) const+0x13a>
      return __exchange_and_add(__mem, __val);
   18970:	55fd                	c.li	a1,-1
   18972:	030d0513          	addi	a0,s10,48
   18976:	a0bfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1897a:	b7f1                	c.j	18946 <dwarf::dwarf::get_type_unit(unsigned long) const+0x146>
	_M_dispose();
   1897c:	000d3783          	ld	a5,0(s10)
   18980:	6b9c                	c.ld	a5,16(a5)
   18982:	856a                	c.mv	a0,s10
   18984:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18986:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1898a:	00021797          	auipc	a5,0x21
   1898e:	af67b783          	ld	a5,-1290(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18992:	0007c783          	lbu	a5,0(a5)
   18996:	c385                	c.beqz	a5,189b6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1b6>
    _Atomic_word __result = *__mem;
   18998:	034d2503          	lw	a0,52(s10)
    *__mem += __val;
   1899c:	fff5079b          	addiw	a5,a0,-1
   189a0:	02fd2a23          	sw	a5,52(s10)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   189a4:	4785                	c.li	a5,1
   189a6:	faf513e3          	bne	a0,a5,1894c <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
	    _M_destroy();
   189aa:	000d3783          	ld	a5,0(s10)
   189ae:	6f9c                	c.ld	a5,24(a5)
   189b0:	856a                	c.mv	a0,s10
   189b2:	9782                	c.jalr	a5
   189b4:	bf61                	c.j	1894c <dwarf::dwarf::get_type_unit(unsigned long) const+0x14c>
      return __exchange_and_add(__mem, __val);
   189b6:	55fd                	c.li	a1,-1
   189b8:	034d0513          	addi	a0,s10,52
   189bc:	9c5fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   189c0:	b7d5                	c.j	189a4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1a4>
	if (_M_pi != nullptr)
   189c2:	7466                	c.ldsp	s0,120(sp)
   189c4:	c819                	c.beqz	s0,189da <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
    if (__is_single_threaded())
   189c6:	000ac783          	lbu	a5,0(s5)
   189ca:	cb8d                	c.beqz	a5,189fc <dwarf::dwarf::get_type_unit(unsigned long) const+0x1fc>
    _Atomic_word __result = *__mem;
   189cc:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   189ce:	fff5079b          	addiw	a5,a0,-1
   189d2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   189d4:	4785                	c.li	a5,1
   189d6:	02f50963          	beq	a0,a5,18a08 <dwarf::dwarf::get_type_unit(unsigned long) const+0x208>
   189da:	fc52                	c.sdsp	s4,56(sp)
   189dc:	854e                	c.mv	a0,s3
   189de:	d2cfe0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   189e2:	77a2                	c.ldsp	a5,40(sp)
      { return _M_ptr; }
   189e4:	6762                	c.ldsp	a4,24(sp)
    while (!tucur.end()) {
   189e6:	6b14                	c.ld	a3,16(a4)
   189e8:	04d7ff63          	bgeu	a5,a3,18a46 <dwarf::dwarf::get_type_unit(unsigned long) const+0x246>
  section_offset get_section_offset() const { return pos - sec->begin; }
   189ec:	6710                	c.ld	a2,8(a4)
      type_unit tu(*this, tucur.get_section_offset());
   189ee:	40c78633          	sub	a2,a5,a2
   189f2:	85ca                	c.mv	a1,s2
   189f4:	854e                	c.mv	a0,s3
   189f6:	fb0ff0ef          	jal	ra,181a6 <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)>
   189fa:	b721                	c.j	18902 <dwarf::dwarf::get_type_unit(unsigned long) const+0x102>
      return __exchange_and_add(__mem, __val);
   189fc:	55fd                	c.li	a1,-1
   189fe:	03040513          	addi	a0,s0,48
   18a02:	97ffd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a06:	b7f9                	c.j	189d4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x1d4>
	_M_dispose();
   18a08:	601c                	c.ld	a5,0(s0)
   18a0a:	6b9c                	c.ld	a5,16(a5)
   18a0c:	8522                	c.mv	a0,s0
   18a0e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18a10:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18a14:	00021797          	auipc	a5,0x21
   18a18:	a6c7b783          	ld	a5,-1428(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18a1c:	0007c783          	lbu	a5,0(a5)
   18a20:	cf89                	c.beqz	a5,18a3a <dwarf::dwarf::get_type_unit(unsigned long) const+0x23a>
    _Atomic_word __result = *__mem;
   18a22:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18a24:	fff5079b          	addiw	a5,a0,-1
   18a28:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18a2a:	4785                	c.li	a5,1
   18a2c:	faf517e3          	bne	a0,a5,189da <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
	    _M_destroy();
   18a30:	601c                	c.ld	a5,0(s0)
   18a32:	6f9c                	c.ld	a5,24(a5)
   18a34:	8522                	c.mv	a0,s0
   18a36:	9782                	c.jalr	a5
   18a38:	b74d                	c.j	189da <dwarf::dwarf::get_type_unit(unsigned long) const+0x1da>
      return __exchange_and_add(__mem, __val);
   18a3a:	55fd                	c.li	a1,-1
   18a3c:	03440513          	addi	a0,s0,52
   18a40:	941fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18a44:	b7dd                	c.j	18a2a <dwarf::dwarf::get_type_unit(unsigned long) const+0x22a>
      { return _M_ptr; }
   18a46:	00093783          	ld	a5,0(s2)
    m->have_type_units = true;
   18a4a:	4705                	c.li	a4,1
   18a4c:	08e78023          	sb	a4,128(a5)
	if (_M_pi != nullptr)
   18a50:	7402                	c.ldsp	s0,32(sp)
   18a52:	cc19                	c.beqz	s0,18a70 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
    if (__is_single_threaded())
   18a54:	00021797          	auipc	a5,0x21
   18a58:	a2c7b783          	ld	a5,-1492(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18a5c:	0007c783          	lbu	a5,0(a5)
   18a60:	c3b1                	c.beqz	a5,18aa4 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2a4>
    _Atomic_word __result = *__mem;
   18a62:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18a64:	fff5079b          	addiw	a5,a0,-1
   18a68:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18a6a:	4785                	c.li	a5,1
   18a6c:	04f50263          	beq	a0,a5,18ab0 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2b0>
      { return _M_ptr; }
   18a70:	00093783          	ld	a5,0(s2)
      { return _M_h.count(__x); }
   18a74:	04878413          	addi	s0,a5,72
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    -> const_iterator
    {
      if (size() <= __small_size_threshold())
   18a78:	73b8                	c.ld	a4,96(a5)
   18a7a:	eb35                	c.bnez	a4,18aee <dwarf::dwarf::get_type_unit(unsigned long) const+0x2ee>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   18a7c:	6fbc                	c.ld	a5,88(a5)
	{
	  for (auto __it = begin(); __it != end(); ++__it)
   18a7e:	c799                	c.beqz	a5,18a8c <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
      { return __x == __y; }
   18a80:	66a2                	c.ldsp	a3,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   18a82:	6798                	c.ld	a4,8(a5)
   18a84:	08e68363          	beq	a3,a4,18b0a <dwarf::dwarf::get_type_unit(unsigned long) const+0x30a>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   18a88:	639c                	c.ld	a5,0(a5)
	  for (auto __it = begin(); __it != end(); ++__it)
   18a8a:	ffe5                	c.bnez	a5,18a82 <dwarf::dwarf::get_type_unit(unsigned long) const+0x282>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   18a8c:	4541                	c.li	a0,16
   18a8e:	993fd0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   18a92:	84aa                	c.mv	s1,a0
   18a94:	65a2                	c.ldsp	a1,8(sp)
   18a96:	0828                	c.addi4spn	a0,sp,24
   18a98:	00021317          	auipc	t1,0x21
   18a9c:	86033303          	ld	t1,-1952(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   18aa0:	9302                	c.jalr	t1
   18aa2:	a849                	c.j	18b34 <dwarf::dwarf::get_type_unit(unsigned long) const+0x334>
      return __exchange_and_add(__mem, __val);
   18aa4:	55fd                	c.li	a1,-1
   18aa6:	03040513          	addi	a0,s0,48
   18aaa:	8d7fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18aae:	bf75                	c.j	18a6a <dwarf::dwarf::get_type_unit(unsigned long) const+0x26a>
	_M_dispose();
   18ab0:	601c                	c.ld	a5,0(s0)
   18ab2:	6b9c                	c.ld	a5,16(a5)
   18ab4:	8522                	c.mv	a0,s0
   18ab6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18ab8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18abc:	00021797          	auipc	a5,0x21
   18ac0:	9c47b783          	ld	a5,-1596(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18ac4:	0007c783          	lbu	a5,0(a5)
   18ac8:	cf89                	c.beqz	a5,18ae2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2e2>
    _Atomic_word __result = *__mem;
   18aca:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18acc:	fff5079b          	addiw	a5,a0,-1
   18ad0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18ad2:	4785                	c.li	a5,1
   18ad4:	f8f51ee3          	bne	a0,a5,18a70 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
	    _M_destroy();
   18ad8:	601c                	c.ld	a5,0(s0)
   18ada:	6f9c                	c.ld	a5,24(a5)
   18adc:	8522                	c.mv	a0,s0
   18ade:	9782                	c.jalr	a5
   18ae0:	bf41                	c.j	18a70 <dwarf::dwarf::get_type_unit(unsigned long) const+0x270>
      return __exchange_and_add(__mem, __val);
   18ae2:	55fd                	c.li	a1,-1
   18ae4:	03440513          	addi	a0,s0,52
   18ae8:	899fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18aec:	b7dd                	c.j	18ad2 <dwarf::dwarf::get_type_unit(unsigned long) const+0x2d2>
      __hash_code
      _M_hash_code(const _Key& __k) const
      {
	static_assert(__is_invocable<const _Hash&, const _Key&>{},
	    "hash function must be invocable with an argument of key type");
	return _M_hash()(__k);
   18aee:	66a2                	c.ldsp	a3,8(sp)
    { return __num % __den; }
   18af0:	6bac                	c.ld	a1,80(a5)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   18af2:	0030                	c.addi4spn	a2,sp,8
   18af4:	02b6f5b3          	remu	a1,a3,a1
   18af8:	8522                	c.mv	a0,s0
   18afa:	00021317          	auipc	t1,0x21
   18afe:	81e33303          	ld	t1,-2018(t1) # 39318 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f1cc>
   18b02:	9302                	c.jalr	t1
	if (__before_n)
   18b04:	d541                	c.beqz	a0,18a8c <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
  if (!m->type_units.count(type_signature))
   18b06:	611c                	c.ld	a5,0(a0)
   18b08:	d3d1                	c.beqz	a5,18a8c <dwarf::dwarf::get_type_unit(unsigned long) const+0x28c>
      { return _M_h[__k]; }
   18b0a:	002c                	c.addi4spn	a1,sp,8
   18b0c:	8522                	c.mv	a0,s0
   18b0e:	00021317          	auipc	t1,0x21
   18b12:	a0233303          	ld	t1,-1534(t1) # 39510 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x1ed9c>
   18b16:	9302                	c.jalr	t1
}
   18b18:	60ee                	c.ldsp	ra,216(sp)
   18b1a:	644e                	c.ldsp	s0,208(sp)
   18b1c:	64ae                	c.ldsp	s1,200(sp)
   18b1e:	690e                	c.ldsp	s2,192(sp)
   18b20:	79ea                	c.ldsp	s3,184(sp)
   18b22:	7a4a                	c.ldsp	s4,176(sp)
   18b24:	7aaa                	c.ldsp	s5,168(sp)
   18b26:	7b0a                	c.ldsp	s6,160(sp)
   18b28:	6bea                	c.ldsp	s7,152(sp)
   18b2a:	6c4a                	c.ldsp	s8,144(sp)
   18b2c:	6caa                	c.ldsp	s9,136(sp)
   18b2e:	6d0a                	c.ldsp	s10,128(sp)
   18b30:	612d                	c.addi16sp	sp,224
   18b32:	8082                	c.jr	ra
    { return std::move(__rhs.insert(0, __lhs)); }
   18b34:	00015617          	auipc	a2,0x15
   18b38:	bd460613          	addi	a2,a2,-1068 # 2d708 <std::piecewise_construct+0x270>
   18b3c:	4581                	c.li	a1,0
   18b3e:	0828                	c.addi4spn	a0,sp,24
   18b40:	851fd0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   18b44:	85aa                	c.mv	a1,a0
   18b46:	1820                	c.addi4spn	s0,sp,56
   18b48:	8522                	c.mv	a0,s0
   18b4a:	927fd0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw out_of_range("type signature 0x" + to_hex(type_signature));
   18b4e:	85a2                	c.mv	a1,s0
   18b50:	8526                	c.mv	a0,s1
   18b52:	afffd0ef          	jal	ra,16650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   18b56:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   18b58:	00bc                	c.addi4spn	a5,sp,72
   18b5a:	00f50463          	beq	a0,a5,18b62 <dwarf::dwarf::get_type_unit(unsigned long) const+0x362>
   18b5e:	9b3fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18b62:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   18b64:	103c                	c.addi4spn	a5,sp,40
   18b66:	00f50463          	beq	a0,a5,18b6e <dwarf::dwarf::get_type_unit(unsigned long) const+0x36e>
   18b6a:	9a7fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
   18b6e:	00021617          	auipc	a2,0x21
   18b72:	95263603          	ld	a2,-1710(a2) # 394c0 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   18b76:	00021597          	auipc	a1,0x21
   18b7a:	9fa5b583          	ld	a1,-1542(a1) # 39570 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   18b7e:	8526                	c.mv	a0,s1
   18b80:	b41fd0ef          	jal	ra,166c0 <__cxa_throw@plt>
   18b84:	842a                	c.mv	s0,a0
   18b86:	00020797          	auipc	a5,0x20
   18b8a:	7d27b783          	ld	a5,2002(a5) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   18b8e:	07c1                	c.addi	a5,16
   18b90:	fc3e                	c.sdsp	a5,56(sp)
   18b92:	1828                	c.addi4spn	a0,sp,56
   18b94:	b76fe0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
	if (_M_pi != nullptr)
   18b98:	7502                	c.ldsp	a0,32(sp)
   18b9a:	c511                	c.beqz	a0,18ba6 <dwarf::dwarf::get_type_unit(unsigned long) const+0x3a6>
	  _M_pi->_M_release();
   18b9c:	00021317          	auipc	t1,0x21
   18ba0:	82c33303          	ld	t1,-2004(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   18ba4:	9302                	c.jalr	t1
   18ba6:	8522                	c.mv	a0,s0
   18ba8:	b49fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   18bac:	842a                	c.mv	s0,a0
   18bae:	b7ed                	c.j	18b98 <dwarf::dwarf::get_type_unit(unsigned long) const+0x398>
      { return _M_dataplus._M_p; }
   18bb0:	842a                	c.mv	s0,a0
   18bb2:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   18bb4:	00bc                	c.addi4spn	a5,sp,72
   18bb6:	00f50463          	beq	a0,a5,18bbe <dwarf::dwarf::get_type_unit(unsigned long) const+0x3be>
   18bba:	957fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   18bbe:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   18bc0:	103c                	c.addi4spn	a5,sp,40
   18bc2:	00f50463          	beq	a0,a5,18bca <dwarf::dwarf::get_type_unit(unsigned long) const+0x3ca>
   18bc6:	94bfd0ef          	jal	ra,16510 <operator delete(void*)@plt>
   18bca:	8526                	c.mv	a0,s1
   18bcc:	905fd0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   18bd0:	8522                	c.mv	a0,s0
   18bd2:	b1ffd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   18bd6:	842a                	c.mv	s0,a0
   18bd8:	b7dd                	c.j	18bbe <dwarf::dwarf::get_type_unit(unsigned long) const+0x3be>
   18bda:	842a                	c.mv	s0,a0
   18bdc:	b7fd                	c.j	18bca <dwarf::dwarf::get_type_unit(unsigned long) const+0x3ca>

0000000000018bde <dwarf::unit::impl::force_abbrevs()>:
  if (have_abbrevs)
   18bde:	13854783          	lbu	a5,312(a0)
   18be2:	c391                	c.beqz	a5,18be6 <dwarf::unit::impl::force_abbrevs()+0x8>
   18be4:	8082                	c.jr	ra
void unit::impl::force_abbrevs() {
   18be6:	7135                	c.addi16sp	sp,-160
   18be8:	ed06                	c.sdsp	ra,152(sp)
   18bea:	e922                	c.sdsp	s0,144(sp)
   18bec:	e526                	c.sdsp	s1,136(sp)
   18bee:	e14a                	c.sdsp	s2,128(sp)
   18bf0:	fcce                	c.sdsp	s3,120(sp)
   18bf2:	f8d2                	c.sdsp	s4,112(sp)
   18bf4:	f4d6                	c.sdsp	s5,104(sp)
   18bf6:	f0da                	c.sdsp	s6,96(sp)
   18bf8:	ecde                	c.sdsp	s7,88(sp)
   18bfa:	84aa                	c.mv	s1,a0
  cursor c(file.get_section(section_type::abbrev), debug_abbrev_offset);
   18bfc:	4601                	c.li	a2,0
   18bfe:	85aa                	c.mv	a1,a0
   18c00:	0088                	c.addi4spn	a0,sp,64
   18c02:	bbcfe0ef          	jal	ra,16fbe <dwarf::dwarf::get_section(dwarf::section_type) const>
   18c06:	7480                	c.ld	s0,40(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   18c08:	6786                	c.ldsp	a5,64(sp)
   18c0a:	f43e                	c.sdsp	a5,40(sp)
      : _M_pi(__r._M_pi)
   18c0c:	6526                	c.ldsp	a0,72(sp)
   18c0e:	f82a                	c.sdsp	a0,48(sp)
	if (_M_pi != nullptr)
   18c10:	c919                	c.beqz	a0,18c26 <dwarf::unit::impl::force_abbrevs()+0x48>
    if (__is_single_threaded())
   18c12:	00021797          	auipc	a5,0x21
   18c16:	86e7b783          	ld	a5,-1938(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18c1a:	0007c783          	lbu	a5,0(a5)
   18c1e:	cfa9                	c.beqz	a5,18c78 <dwarf::unit::impl::force_abbrevs()+0x9a>
  { *__mem += __val; }
   18c20:	591c                	c.lw	a5,48(a0)
   18c22:	2785                	c.addiw	a5,1
   18c24:	d91c                	c.sw	a5,48(a0)
      : sec(sec), pos(sec->begin + offset) {}
   18c26:	6786                	c.ldsp	a5,64(sp)
   18c28:	679c                	c.ld	a5,8(a5)
   18c2a:	97a2                	c.add	a5,s0
   18c2c:	fc3e                	c.sdsp	a5,56(sp)
	if (_M_pi != nullptr)
   18c2e:	6426                	c.ldsp	s0,72(sp)
   18c30:	cc19                	c.beqz	s0,18c4e <dwarf::unit::impl::force_abbrevs()+0x70>
    if (__is_single_threaded())
   18c32:	00021797          	auipc	a5,0x21
   18c36:	84e7b783          	ld	a5,-1970(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18c3a:	0007c783          	lbu	a5,0(a5)
   18c3e:	c3b9                	c.beqz	a5,18c84 <dwarf::unit::impl::force_abbrevs()+0xa6>
    _Atomic_word __result = *__mem;
   18c40:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18c42:	fff5079b          	addiw	a5,a0,-1
   18c46:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18c48:	4785                	c.li	a5,1
   18c4a:	04f50363          	beq	a0,a5,18c90 <dwarf::unit::impl::force_abbrevs()+0xb2>
  abbrev_code code;
  DW_TAG tag;
  bool children;
  std::vector<attribute_spec> attributes;

  abbrev_entry() : code(0) {}
   18c4e:	e002                	c.sdsp	zero,0(sp)
   18c50:	e802                	c.sdsp	zero,16(sp)
   18c52:	ec02                	c.sdsp	zero,24(sp)
   18c54:	f002                	c.sdsp	zero,32(sp)
  abbrev_code highest = 0;
   18c56:	4901                	c.li	s2,0
  while (entry.read(&c)) {
   18c58:	02810993          	addi	s3,sp,40
   18c5c:	840a                	c.mv	s0,sp
   18c5e:	15848a13          	addi	s4,s1,344
   18c62:	00021a97          	auipc	s5,0x21
   18c66:	87eaba83          	ld	s5,-1922(s5) # 394e0 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)@@Base+0x1eb54>
struct abbrev_entry {
   18c6a:	01010b13          	addi	s6,sp,16
   18c6e:	00021b97          	auipc	s7,0x21
   18c72:	97abbb83          	ld	s7,-1670(s7) # 395e8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)@@Base+0x1fc68>
   18c76:	a89d                	c.j	18cec <dwarf::unit::impl::force_abbrevs()+0x10e>
      __atomic_add(__mem, __val);
   18c78:	4585                	c.li	a1,1
   18c7a:	03050513          	addi	a0,a0,48
   18c7e:	ed2fd0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   18c82:	b755                	c.j	18c26 <dwarf::unit::impl::force_abbrevs()+0x48>
      return __exchange_and_add(__mem, __val);
   18c84:	55fd                	c.li	a1,-1
   18c86:	03040513          	addi	a0,s0,48
   18c8a:	ef6fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18c8e:	bf6d                	c.j	18c48 <dwarf::unit::impl::force_abbrevs()+0x6a>
	_M_dispose();
   18c90:	601c                	c.ld	a5,0(s0)
   18c92:	6b9c                	c.ld	a5,16(a5)
   18c94:	8522                	c.mv	a0,s0
   18c96:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18c98:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18c9c:	00020797          	auipc	a5,0x20
   18ca0:	7e47b783          	ld	a5,2020(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18ca4:	0007c783          	lbu	a5,0(a5)
   18ca8:	cf89                	c.beqz	a5,18cc2 <dwarf::unit::impl::force_abbrevs()+0xe4>
    _Atomic_word __result = *__mem;
   18caa:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18cac:	fff5079b          	addiw	a5,a0,-1
   18cb0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18cb2:	4785                	c.li	a5,1
   18cb4:	f8f51de3          	bne	a0,a5,18c4e <dwarf::unit::impl::force_abbrevs()+0x70>
	    _M_destroy();
   18cb8:	601c                	c.ld	a5,0(s0)
   18cba:	6f9c                	c.ld	a5,24(a5)
   18cbc:	8522                	c.mv	a0,s0
   18cbe:	9782                	c.jalr	a5
   18cc0:	b779                	c.j	18c4e <dwarf::unit::impl::force_abbrevs()+0x70>
      return __exchange_and_add(__mem, __val);
   18cc2:	55fd                	c.li	a1,-1
   18cc4:	03440513          	addi	a0,s0,52
   18cc8:	eb8fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18ccc:	b7dd                	c.j	18cb2 <dwarf::unit::impl::force_abbrevs()+0xd4>
   18cce:	6782                	c.ldsp	a5,0(sp)
   18cd0:	e11c                	c.sd	a5,0(a0)
   18cd2:	47a2                	c.lwsp	a5,8(sp)
   18cd4:	c51c                	c.sw	a5,8(a0)
   18cd6:	00c14783          	lbu	a5,12(sp)
   18cda:	00f50623          	sb	a5,12(a0)
   18cde:	85da                	c.mv	a1,s6
   18ce0:	0541                	c.addi	a0,16
   18ce2:	9b82                	c.jalr	s7
    if (entry.code > highest)
   18ce4:	6782                	c.ldsp	a5,0(sp)
   18ce6:	00f97363          	bgeu	s2,a5,18cec <dwarf::unit::impl::force_abbrevs()+0x10e>
   18cea:	893e                	c.mv	s2,a5
  while (entry.read(&c)) {
   18cec:	85ce                	c.mv	a1,s3
   18cee:	8522                	c.mv	a0,s0
   18cf0:	151060ef          	jal	ra,1f640 <dwarf::abbrev_entry::read(dwarf::cursor*)>
   18cf4:	c509                	c.beqz	a0,18cfe <dwarf::unit::impl::force_abbrevs()+0x120>
   18cf6:	85a2                	c.mv	a1,s0
   18cf8:	8552                	c.mv	a0,s4
   18cfa:	9a82                	c.jalr	s5
   18cfc:	bfc9                	c.j	18cce <dwarf::unit::impl::force_abbrevs()+0xf0>
  if (highest * 10 < abbrevs_map.size() * 15) {
   18cfe:	00291793          	slli	a5,s2,0x2
   18d02:	97ca                	c.add	a5,s2
   18d04:	0786                	c.slli	a5,0x1
   18d06:	1704b683          	ld	a3,368(s1)
   18d0a:	00469713          	slli	a4,a3,0x4
   18d0e:	8f15                	c.sub	a4,a3
   18d10:	04e7e463          	bltu	a5,a4,18d58 <dwarf::unit::impl::force_abbrevs()+0x17a>
  have_abbrevs = true;
   18d14:	4785                	c.li	a5,1
   18d16:	12f48c23          	sb	a5,312(s1)
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18d1a:	6542                	c.ldsp	a0,16(sp)
	if (__p)
   18d1c:	c119                	c.beqz	a0,18d22 <dwarf::unit::impl::force_abbrevs()+0x144>
   18d1e:	ff2fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   18d22:	7442                	c.ldsp	s0,48(sp)
   18d24:	cc19                	c.beqz	s0,18d42 <dwarf::unit::impl::force_abbrevs()+0x164>
    if (__is_single_threaded())
   18d26:	00020797          	auipc	a5,0x20
   18d2a:	75a7b783          	ld	a5,1882(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18d2e:	0007c783          	lbu	a5,0(a5)
   18d32:	c3f5                	c.beqz	a5,18e16 <dwarf::unit::impl::force_abbrevs()+0x238>
    _Atomic_word __result = *__mem;
   18d34:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   18d36:	fff5079b          	addiw	a5,a0,-1
   18d3a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   18d3c:	4785                	c.li	a5,1
   18d3e:	0ef50263          	beq	a0,a5,18e22 <dwarf::unit::impl::force_abbrevs()+0x244>
}
   18d42:	60ea                	c.ldsp	ra,152(sp)
   18d44:	644a                	c.ldsp	s0,144(sp)
   18d46:	64aa                	c.ldsp	s1,136(sp)
   18d48:	690a                	c.ldsp	s2,128(sp)
   18d4a:	79e6                	c.ldsp	s3,120(sp)
   18d4c:	7a46                	c.ldsp	s4,112(sp)
   18d4e:	7aa6                	c.ldsp	s5,104(sp)
   18d50:	7b06                	c.ldsp	s6,96(sp)
   18d52:	6be6                	c.ldsp	s7,88(sp)
   18d54:	610d                	c.addi16sp	sp,160
   18d56:	8082                	c.jr	ra
    abbrevs_vec.resize(highest + 1);
   18d58:	0905                	c.addi	s2,1
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   18d5a:	1484b983          	ld	s3,328(s1)
   18d5e:	1404b783          	ld	a5,320(s1)
   18d62:	40f985b3          	sub	a1,s3,a5
   18d66:	858d                	c.srai	a1,0x3
   18d68:	00014717          	auipc	a4,0x14
   18d6c:	71073703          	ld	a4,1808(a4) # 2d478 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   18d70:	02e585b3          	mul	a1,a1,a4
       */
      _GLIBCXX20_CONSTEXPR
      void
      resize(size_type __new_size)
      {
	if (__new_size > size())
   18d74:	0125ee63          	bltu	a1,s2,18d90 <dwarf::unit::impl::force_abbrevs()+0x1b2>
	  _M_default_append(__new_size - size());
	else if (__new_size < size())
   18d78:	04b97163          	bgeu	s2,a1,18dba <dwarf::unit::impl::force_abbrevs()+0x1dc>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   18d7c:	00291713          	slli	a4,s2,0x2
   18d80:	974a                	c.add	a4,s2
   18d82:	070e                	c.slli	a4,0x3
   18d84:	00e78933          	add	s2,a5,a4
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   18d88:	03298963          	beq	s3,s2,18dba <dwarf::unit::impl::force_abbrevs()+0x1dc>
   18d8c:	844a                	c.mv	s0,s2
   18d8e:	a839                	c.j	18dac <dwarf::unit::impl::force_abbrevs()+0x1ce>
	  _M_default_append(__new_size - size());
   18d90:	40b905b3          	sub	a1,s2,a1
   18d94:	14048513          	addi	a0,s1,320
   18d98:	00020317          	auipc	t1,0x20
   18d9c:	5f833303          	ld	t1,1528(t1) # 39390 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)@@Base+0x1f3c2>
   18da0:	9302                	c.jalr	t1
   18da2:	a821                	c.j	18dba <dwarf::unit::impl::force_abbrevs()+0x1dc>
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   18da4:	02840413          	addi	s0,s0,40
   18da8:	00898763          	beq	s3,s0,18db6 <dwarf::unit::impl::force_abbrevs()+0x1d8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18dac:	6808                	c.ld	a0,16(s0)
	if (__p)
   18dae:	d97d                	c.beqz	a0,18da4 <dwarf::unit::impl::force_abbrevs()+0x1c6>
   18db0:	f60fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
   18db4:	bfc5                	c.j	18da4 <dwarf::unit::impl::force_abbrevs()+0x1c6>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   18db6:	1524b423          	sd	s2,328(s1)
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   18dba:	1684b403          	ld	s0,360(s1)
    for (auto &entry : abbrevs_map)
   18dbe:	ec09                	c.bnez	s0,18dd8 <dwarf::unit::impl::force_abbrevs()+0x1fa>
      { _M_h.clear(); }
   18dc0:	15848513          	addi	a0,s1,344
   18dc4:	00020317          	auipc	t1,0x20
   18dc8:	51433303          	ld	t1,1300(t1) # 392d8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x1f4e2>
   18dcc:	9302                	c.jalr	t1
   18dce:	b799                	c.j	18d14 <dwarf::unit::impl::force_abbrevs()+0x136>
   18dd0:	f40fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   18dd4:	6000                	c.ld	s0,0(s0)
   18dd6:	d46d                	c.beqz	s0,18dc0 <dwarf::unit::impl::force_abbrevs()+0x1e2>
	return *(this->_M_impl._M_start + __n);
   18dd8:	641c                	c.ld	a5,8(s0)
   18dda:	00279713          	slli	a4,a5,0x2
   18dde:	973e                	c.add	a4,a5
   18de0:	070e                	c.slli	a4,0x3
   18de2:	1404b783          	ld	a5,320(s1)
   18de6:	97ba                	c.add	a5,a4
   18de8:	6818                	c.ld	a4,16(s0)
   18dea:	e398                	c.sd	a4,0(a5)
   18dec:	4c18                	c.lw	a4,24(s0)
   18dee:	c798                	c.sw	a4,8(a5)
   18df0:	01c44703          	lbu	a4,28(s0)
   18df4:	00e78623          	sb	a4,12(a5)
	  _M_start = __x._M_start;
   18df8:	6b88                	c.ld	a0,16(a5)
   18dfa:	7018                	c.ld	a4,32(s0)
   18dfc:	eb98                	c.sd	a4,16(a5)
	  _M_finish = __x._M_finish;
   18dfe:	7418                	c.ld	a4,40(s0)
   18e00:	ef98                	c.sd	a4,24(a5)
	  _M_end_of_storage = __x._M_end_of_storage;
   18e02:	7818                	c.ld	a4,48(s0)
   18e04:	f398                	c.sd	a4,32(a5)
	  _M_start = __x._M_start;
   18e06:	02043023          	sd	zero,32(s0)
	  _M_finish = __x._M_finish;
   18e0a:	02043423          	sd	zero,40(s0)
	  _M_end_of_storage = __x._M_end_of_storage;
   18e0e:	02043823          	sd	zero,48(s0)
	if (__p)
   18e12:	fd5d                	c.bnez	a0,18dd0 <dwarf::unit::impl::force_abbrevs()+0x1f2>
   18e14:	b7c1                	c.j	18dd4 <dwarf::unit::impl::force_abbrevs()+0x1f6>
      return __exchange_and_add(__mem, __val);
   18e16:	55fd                	c.li	a1,-1
   18e18:	03040513          	addi	a0,s0,48
   18e1c:	d64fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18e20:	bf31                	c.j	18d3c <dwarf::unit::impl::force_abbrevs()+0x15e>
	_M_dispose();
   18e22:	601c                	c.ld	a5,0(s0)
   18e24:	6b9c                	c.ld	a5,16(a5)
   18e26:	8522                	c.mv	a0,s0
   18e28:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   18e2a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   18e2e:	00020797          	auipc	a5,0x20
   18e32:	6527b783          	ld	a5,1618(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   18e36:	0007c783          	lbu	a5,0(a5)
   18e3a:	cf89                	c.beqz	a5,18e54 <dwarf::unit::impl::force_abbrevs()+0x276>
    _Atomic_word __result = *__mem;
   18e3c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   18e3e:	fff5079b          	addiw	a5,a0,-1
   18e42:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   18e44:	4785                	c.li	a5,1
   18e46:	eef51ee3          	bne	a0,a5,18d42 <dwarf::unit::impl::force_abbrevs()+0x164>
	    _M_destroy();
   18e4a:	601c                	c.ld	a5,0(s0)
   18e4c:	6f9c                	c.ld	a5,24(a5)
   18e4e:	8522                	c.mv	a0,s0
   18e50:	9782                	c.jalr	a5
   18e52:	bdc5                	c.j	18d42 <dwarf::unit::impl::force_abbrevs()+0x164>
      return __exchange_and_add(__mem, __val);
   18e54:	55fd                	c.li	a1,-1
   18e56:	03440513          	addi	a0,s0,52
   18e5a:	d26fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   18e5e:	b7dd                	c.j	18e44 <dwarf::unit::impl::force_abbrevs()+0x266>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   18e60:	842a                	c.mv	s0,a0
   18e62:	6542                	c.ldsp	a0,16(sp)
	if (__p)
   18e64:	c119                	c.beqz	a0,18e6a <dwarf::unit::impl::force_abbrevs()+0x28c>
   18e66:	eaafd0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   18e6a:	7542                	c.ldsp	a0,48(sp)
   18e6c:	c511                	c.beqz	a0,18e78 <dwarf::unit::impl::force_abbrevs()+0x29a>
	  _M_pi->_M_release();
   18e6e:	00020317          	auipc	t1,0x20
   18e72:	55a33303          	ld	t1,1370(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   18e76:	9302                	c.jalr	t1
   18e78:	8522                	c.mv	a0,s0
   18e7a:	877fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000018e7e <dwarf::unit::root() const>:
const die &unit::root() const {
   18e7e:	7171                	c.addi16sp	sp,-176
   18e80:	f506                	c.sdsp	ra,168(sp)
   18e82:	f122                	c.sdsp	s0,160(sp)
   18e84:	ed26                	c.sdsp	s1,152(sp)
   18e86:	e94a                	c.sdsp	s2,144(sp)
   18e88:	e54e                	c.sdsp	s3,136(sp)
   18e8a:	e152                	c.sdsp	s4,128(sp)
   18e8c:	fcd6                	c.sdsp	s5,120(sp)
   18e8e:	f8da                	c.sdsp	s6,112(sp)
   18e90:	84aa                	c.mv	s1,a0
      { return _M_ptr; }
   18e92:	6508                	c.ld	a0,8(a0)
  if (!m->root.valid()) {
   18e94:	6d3c                	c.ld	a5,88(a0)
   18e96:	cf91                	c.beqz	a5,18eb2 <dwarf::unit::root() const+0x34>
  return m->root;
   18e98:	6488                	c.ld	a0,8(s1)
   18e9a:	04850513          	addi	a0,a0,72
}
   18e9e:	70aa                	c.ldsp	ra,168(sp)
   18ea0:	740a                	c.ldsp	s0,160(sp)
   18ea2:	64ea                	c.ldsp	s1,152(sp)
   18ea4:	694a                	c.ldsp	s2,144(sp)
   18ea6:	69aa                	c.ldsp	s3,136(sp)
   18ea8:	6a0a                	c.ldsp	s4,128(sp)
   18eaa:	7ae6                	c.ldsp	s5,120(sp)
   18eac:	7b46                	c.ldsp	s6,112(sp)
   18eae:	614d                	c.addi16sp	sp,176
   18eb0:	8082                	c.jr	ra
    m->force_abbrevs();
   18eb2:	d2dff0ef          	jal	ra,18bde <dwarf::unit::impl::force_abbrevs()>
   18eb6:	6480                	c.ld	s0,8(s1)
    m->root = die(this);
   18eb8:	85a6                	c.mv	a1,s1
   18eba:	850a                	c.mv	a0,sp
   18ebc:	2b2020ef          	jal	ra,1b16e <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   18ec0:	4782                	c.lwsp	a5,0(sp)
   18ec2:	c43c                	c.sw	a5,72(s0)
   18ec4:	67a2                	c.ldsp	a5,8(sp)
   18ec6:	e83c                	c.sd	a5,80(s0)
   18ec8:	67c2                	c.ldsp	a5,16(sp)
   18eca:	ec3c                	c.sd	a5,88(s0)
   18ecc:	67e2                	c.ldsp	a5,24(sp)
   18ece:	f03c                	c.sd	a5,96(s0)
      new (&base[i]) T(o[i]);
    end = base + osize;
    return *this;
  }

  size_type size() const { return end - base; }
   18ed0:	69e6                	c.ldsp	s3,88(sp)
   18ed2:	67c6                	c.ldsp	a5,80(sp)
   18ed4:	40f989b3          	sub	s3,s3,a5
   18ed8:	4039d913          	srai	s2,s3,0x3
    end--;
    end->~T();
  }

  void clear() {
    for (T *p = base; p < end; ++p)
   18edc:	6c54                	c.ld	a3,152(s0)
   18ede:	705c                	c.ld	a5,160(s0)
   18ee0:	00f6f763          	bgeu	a3,a5,18eee <dwarf::unit::root() const+0x70>
   18ee4:	87b6                	c.mv	a5,a3
   18ee6:	07a1                	c.addi	a5,8
   18ee8:	7058                	c.ld	a4,160(s0)
   18eea:	fee7eee3          	bltu	a5,a4,18ee6 <dwarf::unit::root() const+0x68>
      p->~T();
    end = base;
   18eee:	f054                	c.sd	a3,160(s0)
    if (n <= (size_type)(cap - base))
   18ef0:	7448                	c.ld	a0,168(s0)
   18ef2:	8d15                	c.sub	a0,a3
   18ef4:	05357963          	bgeu	a0,s3,18f46 <dwarf::unit::root() const+0xc8>
   18ef8:	850d                	c.srai	a0,0x3
   18efa:	e111                	c.bnez	a0,18efe <dwarf::unit::root() const+0x80>
   18efc:	4505                	c.li	a0,1
    while (target < n)
   18efe:	01257563          	bgeu	a0,s2,18f08 <dwarf::unit::root() const+0x8a>
      target <<= 1;
   18f02:	0506                	c.slli	a0,0x1
    while (target < n)
   18f04:	ff256fe3          	bltu	a0,s2,18f02 <dwarf::unit::root() const+0x84>
    char *newbuf = new char[sizeof(T[target])];
   18f08:	00351a13          	slli	s4,a0,0x3
   18f0c:	8552                	c.mv	a0,s4
   18f0e:	c22fd0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   18f12:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   18f14:	6c48                	c.ld	a0,152(s0)
    for (; src < end; src++, dest++) {
   18f16:	705c                	c.ld	a5,160(s0)
   18f18:	08f57163          	bgeu	a0,a5,18f9a <dwarf::unit::root() const+0x11c>
    T *src = base, *dest = (T *)newbuf;
   18f1c:	87aa                	c.mv	a5,a0
   18f1e:	8ada                	c.mv	s5,s6
    for (; src < end; src++, dest++) {
   18f20:	07a1                	c.addi	a5,8
   18f22:	0aa1                	c.addi	s5,8
   18f24:	7058                	c.ld	a4,160(s0)
   18f26:	fee7ede3          	bltu	a5,a4,18f20 <dwarf::unit::root() const+0xa2>
   18f2a:	06840793          	addi	a5,s0,104
    if ((char *)base != buf)
   18f2e:	00f50563          	beq	a0,a5,18f38 <dwarf::unit::root() const+0xba>
      delete[] (char *)base;
   18f32:	c119                	c.beqz	a0,18f38 <dwarf::unit::root() const+0xba>
   18f34:	e8cfd0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   18f38:	09643c23          	sd	s6,152(s0)
    end = dest;
   18f3c:	0b543023          	sd	s5,160(s0)
    cap = base + target;
   18f40:	9b52                	c.add	s6,s4
   18f42:	0b643423          	sd	s6,168(s0)
    for (size_type i = 0; i < osize; i++)
   18f46:	00090e63          	beq	s2,zero,18f62 <dwarf::unit::root() const+0xe4>
   18f4a:	4781                	c.li	a5,0
   18f4c:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   18f50:	6746                	c.ldsp	a4,80(sp)
   18f52:	9736                	c.add	a4,a3
   18f54:	6310                	c.ld	a2,0(a4)
   18f56:	6c58                	c.ld	a4,152(s0)
   18f58:	9736                	c.add	a4,a3
   18f5a:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   18f5c:	0785                	c.addi	a5,1
   18f5e:	fef917e3          	bne	s2,a5,18f4c <dwarf::unit::root() const+0xce>
    end = base + osize;
   18f62:	6c5c                	c.ld	a5,152(s0)
   18f64:	97ce                	c.add	a5,s3
   18f66:	f05c                	c.sd	a5,160(s0)
   18f68:	77a6                	c.ldsp	a5,104(sp)
   18f6a:	f85c                	c.sd	a5,176(s0)
    for (T *p = base; p < end; ++p)
   18f6c:	6546                	c.ldsp	a0,80(sp)
   18f6e:	67e6                	c.ldsp	a5,88(sp)
   18f70:	00f57763          	bgeu	a0,a5,18f7e <dwarf::unit::root() const+0x100>
   18f74:	87aa                	c.mv	a5,a0
   18f76:	07a1                	c.addi	a5,8
   18f78:	6766                	c.ldsp	a4,88(sp)
   18f7a:	fee7eee3          	bltu	a5,a4,18f76 <dwarf::unit::root() const+0xf8>
    end = base;
   18f7e:	ecaa                	c.sdsp	a0,88(sp)
    if ((char *)base != buf)
   18f80:	101c                	c.addi4spn	a5,sp,32
   18f82:	00f50563          	beq	a0,a5,18f8c <dwarf::unit::root() const+0x10e>
      delete[] (char *)base;
   18f86:	c119                	c.beqz	a0,18f8c <dwarf::unit::root() const+0x10e>
   18f88:	e38fd0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   18f8c:	6488                	c.ld	a0,8(s1)
    m->root.read(m->root_offset);
   18f8e:	790c                	c.ld	a1,48(a0)
   18f90:	04850513          	addi	a0,a0,72
   18f94:	20e020ef          	jal	ra,1b1a2 <dwarf::die::read(unsigned long)>
   18f98:	b701                	c.j	18e98 <dwarf::unit::root() const+0x1a>
    T *src = base, *dest = (T *)newbuf;
   18f9a:	8ada                	c.mv	s5,s6
   18f9c:	b779                	c.j	18f2a <dwarf::unit::root() const+0xac>
class die {
   18f9e:	842a                	c.mv	s0,a0
   18fa0:	1008                	c.addi4spn	a0,sp,32
   18fa2:	00020317          	auipc	t1,0x20
   18fa6:	44633303          	ld	t1,1094(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   18faa:	9302                	c.jalr	t1
   18fac:	8522                	c.mv	a0,s0
   18fae:	f42fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000018fb2 <dwarf::compilation_unit::get_line_table() const>:
const line_table &compilation_unit::get_line_table() const {
   18fb2:	7131                	c.addi16sp	sp,-192
   18fb4:	fd06                	c.sdsp	ra,184(sp)
   18fb6:	f922                	c.sdsp	s0,176(sp)
   18fb8:	f526                	c.sdsp	s1,168(sp)
   18fba:	f14a                	c.sdsp	s2,160(sp)
   18fbc:	ed4e                	c.sdsp	s3,152(sp)
   18fbe:	e952                	c.sdsp	s4,144(sp)
   18fc0:	842a                	c.mv	s0,a0
      { return _M_ptr != nullptr; }
   18fc2:	651c                	c.ld	a5,8(a0)
  if (!m->lt.valid()) {
   18fc4:	1287b783          	ld	a5,296(a5)
   18fc8:	cf81                	c.beqz	a5,18fe0 <dwarf::compilation_unit::get_line_table() const+0x2e>
  return m->lt;
   18fca:	6408                	c.ld	a0,8(s0)
   18fcc:	12850513          	addi	a0,a0,296
}
   18fd0:	70ea                	c.ldsp	ra,184(sp)
   18fd2:	744a                	c.ldsp	s0,176(sp)
   18fd4:	74aa                	c.ldsp	s1,168(sp)
   18fd6:	790a                	c.ldsp	s2,160(sp)
   18fd8:	69ea                	c.ldsp	s3,152(sp)
   18fda:	6a4a                	c.ldsp	s4,144(sp)
   18fdc:	6129                	c.addi16sp	sp,192
   18fde:	8082                	c.jr	ra
    const die &d = root();
   18fe0:	e9fff0ef          	jal	ra,18e7e <dwarf::unit::root() const>
   18fe4:	84aa                	c.mv	s1,a0
    if (!d.has(DW_AT::stmt_list) || !d.has(DW_AT::name))
   18fe6:	45c1                	c.li	a1,16
   18fe8:	548020ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   18fec:	dd79                	c.beqz	a0,18fca <dwarf::compilation_unit::get_line_table() const+0x18>
   18fee:	458d                	c.li	a1,3
   18ff0:	8526                	c.mv	a0,s1
   18ff2:	53e020ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   18ff6:	d971                	c.beqz	a0,18fca <dwarf::compilation_unit::get_line_table() const+0x18>
    shared_ptr<section> sec;
   18ff8:	e402                	c.sdsp	zero,8(sp)
   18ffa:	e802                	c.sdsp	zero,16(sp)
      sec = m->file.get_section(section_type::line);
   18ffc:	4611                	c.li	a2,4
   18ffe:	640c                	c.ld	a1,8(s0)
   19000:	08a8                	c.addi4spn	a0,sp,88
   19002:	fbdfd0ef          	jal	ra,16fbe <dwarf::dwarf::get_section(dwarf::section_type) const>
      : _M_ptr(__r._M_ptr), _M_refcount()
   19006:	6766                	c.ldsp	a4,88(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19008:	7786                	c.ldsp	a5,96(sp)
	__r._M_pi = _M_pi;
   1900a:	f082                	c.sdsp	zero,96(sp)
	__r._M_ptr = nullptr;
   1900c:	ec82                	c.sdsp	zero,88(sp)
   1900e:	e43a                	c.sdsp	a4,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19010:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   19012:	e83e                	c.sdsp	a5,16(sp)
	if (_M_pi != nullptr)
   19014:	08090a63          	beq	s2,zero,190a8 <dwarf::compilation_unit::get_line_table() const+0xf6>
    if (__is_single_threaded())
   19018:	00020797          	auipc	a5,0x20
   1901c:	4687b783          	ld	a5,1128(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19020:	0007c783          	lbu	a5,0(a5)
   19024:	c7b9                	c.beqz	a5,19072 <dwarf::compilation_unit::get_line_table() const+0xc0>
    _Atomic_word __result = *__mem;
   19026:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   1902a:	fff7871b          	addiw	a4,a5,-1
   1902e:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19032:	4705                	c.li	a4,1
   19034:	06e79a63          	bne	a5,a4,190a8 <dwarf::compilation_unit::get_line_table() const+0xf6>
	_M_dispose();
   19038:	00093783          	ld	a5,0(s2)
   1903c:	6b9c                	c.ld	a5,16(a5)
   1903e:	854a                	c.mv	a0,s2
   19040:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19042:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19046:	00020797          	auipc	a5,0x20
   1904a:	43a7b783          	ld	a5,1082(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1904e:	0007c783          	lbu	a5,0(a5)
   19052:	c3a5                	c.beqz	a5,190b2 <dwarf::compilation_unit::get_line_table() const+0x100>
    _Atomic_word __result = *__mem;
   19054:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   19058:	fff7871b          	addiw	a4,a5,-1
   1905c:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19060:	4705                	c.li	a4,1
   19062:	02e79063          	bne	a5,a4,19082 <dwarf::compilation_unit::get_line_table() const+0xd0>
	    _M_destroy();
   19066:	00093783          	ld	a5,0(s2)
   1906a:	6f9c                	c.ld	a5,24(a5)
   1906c:	854a                	c.mv	a0,s2
   1906e:	9782                	c.jalr	a5
   19070:	a809                	c.j	19082 <dwarf::compilation_unit::get_line_table() const+0xd0>
      return __exchange_and_add(__mem, __val);
   19072:	55fd                	c.li	a1,-1
   19074:	03090513          	addi	a0,s2,48
   19078:	b08fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1907c:	4785                	c.li	a5,1
   1907e:	faf50de3          	beq	a0,a5,19038 <dwarf::compilation_unit::get_line_table() const+0x86>
	if (_M_pi != nullptr)
   19082:	7906                	c.ldsp	s2,96(sp)
   19084:	02090263          	beq	s2,zero,190a8 <dwarf::compilation_unit::get_line_table() const+0xf6>
    if (__is_single_threaded())
   19088:	00020797          	auipc	a5,0x20
   1908c:	3f87b783          	ld	a5,1016(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19090:	0007c783          	lbu	a5,0(a5)
   19094:	c795                	c.beqz	a5,190c0 <dwarf::compilation_unit::get_line_table() const+0x10e>
    _Atomic_word __result = *__mem;
   19096:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1909a:	fff5079b          	addiw	a5,a0,-1
   1909e:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   190a2:	4785                	c.li	a5,1
   190a4:	02f50463          	beq	a0,a5,190cc <dwarf::compilation_unit::get_line_table() const+0x11a>
    auto comp_dir = d.has(DW_AT::comp_dir) ? at_comp_dir(d) : "";
   190a8:	45ed                	c.li	a1,27
   190aa:	8526                	c.mv	a0,s1
   190ac:	484020ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   190b0:	a095                	c.j	19114 <dwarf::compilation_unit::get_line_table() const+0x162>
      return __exchange_and_add(__mem, __val);
   190b2:	55fd                	c.li	a1,-1
   190b4:	03490513          	addi	a0,s2,52
   190b8:	ac8fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   190bc:	87aa                	c.mv	a5,a0
   190be:	b74d                	c.j	19060 <dwarf::compilation_unit::get_line_table() const+0xae>
   190c0:	55fd                	c.li	a1,-1
   190c2:	03090513          	addi	a0,s2,48
   190c6:	abafd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   190ca:	bfe1                	c.j	190a2 <dwarf::compilation_unit::get_line_table() const+0xf0>
	_M_dispose();
   190cc:	00093783          	ld	a5,0(s2)
   190d0:	6b9c                	c.ld	a5,16(a5)
   190d2:	854a                	c.mv	a0,s2
   190d4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   190d6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   190da:	00020797          	auipc	a5,0x20
   190de:	3a67b783          	ld	a5,934(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   190e2:	0007c783          	lbu	a5,0(a5)
   190e6:	c385                	c.beqz	a5,19106 <dwarf::compilation_unit::get_line_table() const+0x154>
    _Atomic_word __result = *__mem;
   190e8:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   190ec:	fff7871b          	addiw	a4,a5,-1
   190f0:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   190f4:	4705                	c.li	a4,1
   190f6:	fae799e3          	bne	a5,a4,190a8 <dwarf::compilation_unit::get_line_table() const+0xf6>
	    _M_destroy();
   190fa:	00093783          	ld	a5,0(s2)
   190fe:	6f9c                	c.ld	a5,24(a5)
   19100:	854a                	c.mv	a0,s2
   19102:	9782                	c.jalr	a5
   19104:	b755                	c.j	190a8 <dwarf::compilation_unit::get_line_table() const+0xf6>
      return __exchange_and_add(__mem, __val);
   19106:	55fd                	c.li	a1,-1
   19108:	03490513          	addi	a0,s2,52
   1910c:	a74fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19110:	87aa                	c.mv	a5,a0
   19112:	b7cd                	c.j	190f4 <dwarf::compilation_unit::get_line_table() const+0x142>
   19114:	c511                	c.beqz	a0,19120 <dwarf::compilation_unit::get_line_table() const+0x16e>
   19116:	85a6                	c.mv	a1,s1
   19118:	0828                	c.addi4spn	a0,sp,24
   1911a:	2900c0ef          	jal	ra,253aa <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>
   1911e:	a839                	c.j	1913c <dwarf::compilation_unit::get_line_table() const+0x18a>
	: allocator_type(__a), _M_p(__dat) { }
   19120:	103c                	c.addi4spn	a5,sp,40
   19122:	ec3e                	c.sdsp	a5,24(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   19124:	4681                	c.li	a3,0
   19126:	00015617          	auipc	a2,0x15
   1912a:	16260613          	addi	a2,a2,354 # 2e288 <typeinfo name for dwarf::expr_context+0xb8>
   1912e:	85b2                	c.mv	a1,a2
   19130:	0828                	c.addi4spn	a0,sp,24
   19132:	00020317          	auipc	t1,0x20
   19136:	1d633303          	ld	t1,470(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   1913a:	9302                	c.jalr	t1
      { return _M_ptr; }
   1913c:	00843903          	ld	s2,8(s0)
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   19140:	4641                	c.li	a2,16
   19142:	85a6                	c.mv	a1,s1
   19144:	18a8                	c.addi4spn	a0,sp,120
   19146:	412020ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1914a:	18a8                	c.addi4spn	a0,sp,120
   1914c:	27e040ef          	jal	ra,1d3ca <dwarf::value::as_sec_offset() const>
   19150:	89aa                	c.mv	s3,a0
   19152:	641c                	c.ld	a5,8(s0)
   19154:	6f9c                	c.ld	a5,24(a5)
   19156:	0207aa03          	lw	s4,32(a5)
                       m->subsec->addr_size, comp_dir, at_name(d));
   1915a:	85a6                	c.mv	a1,s1
   1915c:	1828                	c.addi4spn	a0,sp,56
   1915e:	10e0c0ef          	jal	ra,2526c <dwarf::at_name[abi:cxx11](dwarf::die const&)>
    m->lt = line_table(sec, d[DW_AT::stmt_list].as_sec_offset(),
   19162:	183c                	c.addi4spn	a5,sp,56
   19164:	0838                	c.addi4spn	a4,sp,24
   19166:	86d2                	c.mv	a3,s4
   19168:	864e                	c.mv	a2,s3
   1916a:	002c                	c.addi4spn	a1,sp,8
   1916c:	10a8                	c.addi4spn	a0,sp,104
   1916e:	4b8090ef          	jal	ra,22626 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
      : _M_ptr(__r._M_ptr), _M_refcount()
   19172:	7726                	c.ldsp	a4,104(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   19174:	77c6                	c.ldsp	a5,112(sp)
	__r._M_pi = _M_pi;
   19176:	f882                	c.sdsp	zero,112(sp)
	__r._M_ptr = nullptr;
   19178:	f482                	c.sdsp	zero,104(sp)
   1917a:	12e93423          	sd	a4,296(s2)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   1917e:	13093483          	ld	s1,304(s2)
	__r._M_pi = _M_pi;
   19182:	12f93823          	sd	a5,304(s2)
	if (_M_pi != nullptr)
   19186:	c0c1                	c.beqz	s1,19206 <dwarf::compilation_unit::get_line_table() const+0x254>
    if (__is_single_threaded())
   19188:	00020797          	auipc	a5,0x20
   1918c:	2f87b783          	ld	a5,760(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19190:	0007c783          	lbu	a5,0(a5)
   19194:	c3a9                	c.beqz	a5,191d6 <dwarf::compilation_unit::get_line_table() const+0x224>
    _Atomic_word __result = *__mem;
   19196:	589c                	c.lw	a5,48(s1)
    *__mem += __val;
   19198:	fff7871b          	addiw	a4,a5,-1
   1919c:	d898                	c.sw	a4,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1919e:	4705                	c.li	a4,1
   191a0:	06e79363          	bne	a5,a4,19206 <dwarf::compilation_unit::get_line_table() const+0x254>
	_M_dispose();
   191a4:	609c                	c.ld	a5,0(s1)
   191a6:	6b9c                	c.ld	a5,16(a5)
   191a8:	8526                	c.mv	a0,s1
   191aa:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   191ac:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   191b0:	00020797          	auipc	a5,0x20
   191b4:	2d07b783          	ld	a5,720(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   191b8:	0007c783          	lbu	a5,0(a5)
   191bc:	cbdd                	c.beqz	a5,19272 <dwarf::compilation_unit::get_line_table() const+0x2c0>
    _Atomic_word __result = *__mem;
   191be:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   191c0:	fff7871b          	addiw	a4,a5,-1
   191c4:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   191c6:	4705                	c.li	a4,1
   191c8:	00e79f63          	bne	a5,a4,191e6 <dwarf::compilation_unit::get_line_table() const+0x234>
	    _M_destroy();
   191cc:	609c                	c.ld	a5,0(s1)
   191ce:	6f9c                	c.ld	a5,24(a5)
   191d0:	8526                	c.mv	a0,s1
   191d2:	9782                	c.jalr	a5
   191d4:	a809                	c.j	191e6 <dwarf::compilation_unit::get_line_table() const+0x234>
      return __exchange_and_add(__mem, __val);
   191d6:	55fd                	c.li	a1,-1
   191d8:	03048513          	addi	a0,s1,48
   191dc:	9a4fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   191e0:	4785                	c.li	a5,1
   191e2:	fcf501e3          	beq	a0,a5,191a4 <dwarf::compilation_unit::get_line_table() const+0x1f2>
	if (_M_pi != nullptr)
   191e6:	74c6                	c.ldsp	s1,112(sp)
   191e8:	cc99                	c.beqz	s1,19206 <dwarf::compilation_unit::get_line_table() const+0x254>
    if (__is_single_threaded())
   191ea:	00020797          	auipc	a5,0x20
   191ee:	2967b783          	ld	a5,662(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   191f2:	0007c783          	lbu	a5,0(a5)
   191f6:	c7c9                	c.beqz	a5,19280 <dwarf::compilation_unit::get_line_table() const+0x2ce>
    _Atomic_word __result = *__mem;
   191f8:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   191fa:	fff5079b          	addiw	a5,a0,-1
   191fe:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19200:	4785                	c.li	a5,1
   19202:	08f50563          	beq	a0,a5,1928c <dwarf::compilation_unit::get_line_table() const+0x2da>
      { return _M_dataplus._M_p; }
   19206:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   19208:	00bc                	c.addi4spn	a5,sp,72
   1920a:	00f50463          	beq	a0,a5,19212 <dwarf::compilation_unit::get_line_table() const+0x260>
   1920e:	b02fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19212:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   19214:	103c                	c.addi4spn	a5,sp,40
   19216:	00f50463          	beq	a0,a5,1921e <dwarf::compilation_unit::get_line_table() const+0x26c>
   1921a:	af6fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   1921e:	64c2                	c.ldsp	s1,16(sp)
   19220:	da0485e3          	beq	s1,zero,18fca <dwarf::compilation_unit::get_line_table() const+0x18>
    if (__is_single_threaded())
   19224:	00020797          	auipc	a5,0x20
   19228:	25c7b783          	ld	a5,604(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1922c:	0007c783          	lbu	a5,0(a5)
   19230:	cfd1                	c.beqz	a5,192cc <dwarf::compilation_unit::get_line_table() const+0x31a>
    _Atomic_word __result = *__mem;
   19232:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19234:	fff5079b          	addiw	a5,a0,-1
   19238:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1923a:	4785                	c.li	a5,1
   1923c:	d8f517e3          	bne	a0,a5,18fca <dwarf::compilation_unit::get_line_table() const+0x18>
	_M_dispose();
   19240:	609c                	c.ld	a5,0(s1)
   19242:	6b9c                	c.ld	a5,16(a5)
   19244:	8526                	c.mv	a0,s1
   19246:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19248:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1924c:	00020797          	auipc	a5,0x20
   19250:	2347b783          	ld	a5,564(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19254:	0007c783          	lbu	a5,0(a5)
   19258:	c3c1                	c.beqz	a5,192d8 <dwarf::compilation_unit::get_line_table() const+0x326>
    _Atomic_word __result = *__mem;
   1925a:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   1925c:	fff7871b          	addiw	a4,a5,-1
   19260:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19262:	4705                	c.li	a4,1
   19264:	d6e793e3          	bne	a5,a4,18fca <dwarf::compilation_unit::get_line_table() const+0x18>
	    _M_destroy();
   19268:	609c                	c.ld	a5,0(s1)
   1926a:	6f9c                	c.ld	a5,24(a5)
   1926c:	8526                	c.mv	a0,s1
   1926e:	9782                	c.jalr	a5
   19270:	bba9                	c.j	18fca <dwarf::compilation_unit::get_line_table() const+0x18>
      return __exchange_and_add(__mem, __val);
   19272:	55fd                	c.li	a1,-1
   19274:	03448513          	addi	a0,s1,52
   19278:	908fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1927c:	87aa                	c.mv	a5,a0
   1927e:	b7a1                	c.j	191c6 <dwarf::compilation_unit::get_line_table() const+0x214>
   19280:	55fd                	c.li	a1,-1
   19282:	03048513          	addi	a0,s1,48
   19286:	8fafd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1928a:	bf9d                	c.j	19200 <dwarf::compilation_unit::get_line_table() const+0x24e>
	_M_dispose();
   1928c:	609c                	c.ld	a5,0(s1)
   1928e:	6b9c                	c.ld	a5,16(a5)
   19290:	8526                	c.mv	a0,s1
   19292:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19294:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19298:	00020797          	auipc	a5,0x20
   1929c:	1e87b783          	ld	a5,488(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   192a0:	0007c783          	lbu	a5,0(a5)
   192a4:	cf89                	c.beqz	a5,192be <dwarf::compilation_unit::get_line_table() const+0x30c>
    _Atomic_word __result = *__mem;
   192a6:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   192a8:	fff7871b          	addiw	a4,a5,-1
   192ac:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   192ae:	4705                	c.li	a4,1
   192b0:	f4e79be3          	bne	a5,a4,19206 <dwarf::compilation_unit::get_line_table() const+0x254>
	    _M_destroy();
   192b4:	609c                	c.ld	a5,0(s1)
   192b6:	6f9c                	c.ld	a5,24(a5)
   192b8:	8526                	c.mv	a0,s1
   192ba:	9782                	c.jalr	a5
   192bc:	b7a9                	c.j	19206 <dwarf::compilation_unit::get_line_table() const+0x254>
      return __exchange_and_add(__mem, __val);
   192be:	55fd                	c.li	a1,-1
   192c0:	03448513          	addi	a0,s1,52
   192c4:	8bcfd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   192c8:	87aa                	c.mv	a5,a0
   192ca:	b7d5                	c.j	192ae <dwarf::compilation_unit::get_line_table() const+0x2fc>
   192cc:	55fd                	c.li	a1,-1
   192ce:	03048513          	addi	a0,s1,48
   192d2:	8aefd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   192d6:	b795                	c.j	1923a <dwarf::compilation_unit::get_line_table() const+0x288>
   192d8:	55fd                	c.li	a1,-1
   192da:	03448513          	addi	a0,s1,52
   192de:	8a2fd0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   192e2:	87aa                	c.mv	a5,a0
   192e4:	bfbd                	c.j	19262 <dwarf::compilation_unit::get_line_table() const+0x2b0>
	if (_M_pi != nullptr)
   192e6:	6542                	c.ldsp	a0,16(sp)
   192e8:	ce0501e3          	beq	a0,zero,18fca <dwarf::compilation_unit::get_line_table() const+0x18>
	  _M_pi->_M_release();
   192ec:	00020317          	auipc	t1,0x20
   192f0:	0dc33303          	ld	t1,220(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   192f4:	9302                	c.jalr	t1
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   192f6:	b9d1                	c.j	18fca <dwarf::compilation_unit::get_line_table() const+0x18>
    } catch (format_error &e) {
   192f8:	4785                	c.li	a5,1
   192fa:	00f58d63          	beq	a1,a5,19314 <dwarf::compilation_unit::get_line_table() const+0x362>
   192fe:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   19300:	6542                	c.ldsp	a0,16(sp)
   19302:	c511                	c.beqz	a0,1930e <dwarf::compilation_unit::get_line_table() const+0x35c>
	  _M_pi->_M_release();
   19304:	00020317          	auipc	t1,0x20
   19308:	0c433303          	ld	t1,196(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1930c:	9302                	c.jalr	t1
   1930e:	8522                	c.mv	a0,s0
   19310:	be0fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   19314:	8ecfd0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
    }
   19318:	b78fd0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1931c:	b7e9                	c.j	192e6 <dwarf::compilation_unit::get_line_table() const+0x334>
      { return _M_dataplus._M_p; }
   1931e:	842a                	c.mv	s0,a0
   19320:	7562                	c.ldsp	a0,56(sp)
	if (!_M_is_local())
   19322:	00bc                	c.addi4spn	a5,sp,72
   19324:	00f50463          	beq	a0,a5,1932c <dwarf::compilation_unit::get_line_table() const+0x37a>
   19328:	9e8fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1932c:	6562                	c.ldsp	a0,24(sp)
	if (!_M_is_local())
   1932e:	103c                	c.addi4spn	a5,sp,40
   19330:	fcf508e3          	beq	a0,a5,19300 <dwarf::compilation_unit::get_line_table() const+0x34e>
   19334:	9dcfd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   19338:	b7e1                	c.j	19300 <dwarf::compilation_unit::get_line_table() const+0x34e>
      { return _M_dataplus._M_p; }
   1933a:	842a                	c.mv	s0,a0
   1933c:	bfc5                	c.j	1932c <dwarf::compilation_unit::get_line_table() const+0x37a>
	if (_M_pi != nullptr)
   1933e:	842a                	c.mv	s0,a0
   19340:	b7c1                	c.j	19300 <dwarf::compilation_unit::get_line_table() const+0x34e>

0000000000019342 <dwarf::unit::get_abbrev(unsigned long) const>:
const abbrev_entry &unit::get_abbrev(abbrev_code acode) const {
   19342:	7159                	c.addi16sp	sp,-112
   19344:	f486                	c.sdsp	ra,104(sp)
   19346:	f0a2                	c.sdsp	s0,96(sp)
   19348:	eca6                	c.sdsp	s1,88(sp)
   1934a:	842a                	c.mv	s0,a0
   1934c:	e42e                	c.sdsp	a1,8(sp)
      { return _M_ptr; }
   1934e:	6508                	c.ld	a0,8(a0)
  if (!m->have_abbrevs)
   19350:	13854783          	lbu	a5,312(a0)
   19354:	cf9d                	c.beqz	a5,19392 <dwarf::unit::get_abbrev(unsigned long) const+0x50>
   19356:	6418                	c.ld	a4,8(s0)
      : _M_current(__i) { }
   19358:	14073503          	ld	a0,320(a4)
   1935c:	14873783          	ld	a5,328(a4)
  if (!m->abbrevs_vec.empty()) {
   19360:	02a78c63          	beq	a5,a0,19398 <dwarf::unit::get_abbrev(unsigned long) const+0x56>
    if (acode >= m->abbrevs_vec.size())
   19364:	6722                	c.ldsp	a4,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19366:	8f89                	c.sub	a5,a0
   19368:	878d                	c.srai	a5,0x3
   1936a:	00014697          	auipc	a3,0x14
   1936e:	10e6b683          	ld	a3,270(a3) # 2d478 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   19372:	02d787b3          	mul	a5,a5,a3
   19376:	02f77d63          	bgeu	a4,a5,193b0 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
	return *(this->_M_impl._M_start + __n);
   1937a:	00271793          	slli	a5,a4,0x2
   1937e:	97ba                	c.add	a5,a4
   19380:	078e                	c.slli	a5,0x3
   19382:	953e                	c.add	a0,a5
    if (entry.code == 0)
   19384:	611c                	c.ld	a5,0(a0)
   19386:	c78d                	c.beqz	a5,193b0 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
}
   19388:	70a6                	c.ldsp	ra,104(sp)
   1938a:	7406                	c.ldsp	s0,96(sp)
   1938c:	64e6                	c.ldsp	s1,88(sp)
   1938e:	6165                	c.addi16sp	sp,112
   19390:	8082                	c.jr	ra
    m->force_abbrevs();
   19392:	84dff0ef          	jal	ra,18bde <dwarf::unit::impl::force_abbrevs()>
   19396:	b7c1                	c.j	19356 <dwarf::unit::get_abbrev(unsigned long) const+0x14>
      if (size() <= __small_size_threshold())
   19398:	17073783          	ld	a5,368(a4)
   1939c:	e795                	c.bnez	a5,193c8 <dwarf::unit::get_abbrev(unsigned long) const+0x86>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1939e:	16873503          	ld	a0,360(a4)
	  for (auto __it = begin(); __it != end(); ++__it)
   193a2:	c519                	c.beqz	a0,193b0 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
   193a4:	6722                	c.ldsp	a4,8(sp)
	    if (this->_M_key_equals(__k, *__it._M_cur))
   193a6:	651c                	c.ld	a5,8(a0)
   193a8:	04f70063          	beq	a4,a5,193e8 <dwarf::unit::get_abbrev(unsigned long) const+0xa6>
   193ac:	6108                	c.ld	a0,0(a0)
	  for (auto __it = begin(); __it != end(); ++__it)
   193ae:	fd65                	c.bnez	a0,193a6 <dwarf::unit::get_abbrev(unsigned long) const+0x64>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   193b0:	4541                	c.li	a0,16
   193b2:	86efd0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   193b6:	84aa                	c.mv	s1,a0
   193b8:	65a2                	c.ldsp	a1,8(sp)
   193ba:	0808                	c.addi4spn	a0,sp,16
   193bc:	00020317          	auipc	t1,0x20
   193c0:	f3c33303          	ld	t1,-196(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   193c4:	9302                	c.jalr	t1
   193c6:	a01d                	c.j	193ec <dwarf::unit::get_abbrev(unsigned long) const+0xaa>
	return _M_hash()(__k);
   193c8:	66a2                	c.ldsp	a3,8(sp)
    { return __num % __den; }
   193ca:	16073583          	ld	a1,352(a4)
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   193ce:	0030                	c.addi4spn	a2,sp,8
   193d0:	02b6f5b3          	remu	a1,a3,a1
   193d4:	15870513          	addi	a0,a4,344
   193d8:	00020317          	auipc	t1,0x20
   193dc:	17033303          	ld	t1,368(t1) # 39548 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f024>
   193e0:	9302                	c.jalr	t1
	if (__before_n)
   193e2:	d579                	c.beqz	a0,193b0 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   193e4:	6108                	c.ld	a0,0(a0)
    if (it == m->abbrevs_map.end())
   193e6:	d569                	c.beqz	a0,193b0 <dwarf::unit::get_abbrev(unsigned long) const+0x6e>
    return it->second;
   193e8:	0541                	c.addi	a0,16
   193ea:	bf79                	c.j	19388 <dwarf::unit::get_abbrev(unsigned long) const+0x46>
    { return std::move(__rhs.insert(0, __lhs)); }
   193ec:	00014617          	auipc	a2,0x14
   193f0:	e4c60613          	addi	a2,a2,-436 # 2d238 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xe0>
   193f4:	4581                	c.li	a1,0
   193f6:	0808                	c.addi4spn	a0,sp,16
   193f8:	f99fc0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   193fc:	85aa                	c.mv	a1,a0
   193fe:	1800                	c.addi4spn	s0,sp,48
   19400:	8522                	c.mv	a0,s0
   19402:	86efd0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   19406:	85a2                	c.mv	a1,s0
   19408:	8526                	c.mv	a0,s1
   1940a:	996fd0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1940e:	00020797          	auipc	a5,0x20
   19412:	14a7b783          	ld	a5,330(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   19416:	07c1                	c.addi	a5,16
   19418:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1941a:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1941c:	009c                	c.addi4spn	a5,sp,64
   1941e:	00f50463          	beq	a0,a5,19426 <dwarf::unit::get_abbrev(unsigned long) const+0xe4>
   19422:	8eefd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19426:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   19428:	101c                	c.addi4spn	a5,sp,32
   1942a:	00f50463          	beq	a0,a5,19432 <dwarf::unit::get_abbrev(unsigned long) const+0xf0>
   1942e:	8e2fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
  throw format_error("unknown abbrev code 0x" + to_hex(acode));
   19432:	00020617          	auipc	a2,0x20
   19436:	f4e63603          	ld	a2,-178(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   1943a:	00020597          	auipc	a1,0x20
   1943e:	e765b583          	ld	a1,-394(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   19442:	8526                	c.mv	a0,s1
   19444:	a7cfd0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   19448:	842a                	c.mv	s0,a0
   1944a:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1944c:	009c                	c.addi4spn	a5,sp,64
   1944e:	00f50463          	beq	a0,a5,19456 <dwarf::unit::get_abbrev(unsigned long) const+0x114>
   19452:	8befd0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   19456:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   19458:	101c                	c.addi4spn	a5,sp,32
   1945a:	00f50463          	beq	a0,a5,19462 <dwarf::unit::get_abbrev(unsigned long) const+0x120>
   1945e:	8b2fd0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19462:	8526                	c.mv	a0,s1
   19464:	86cfd0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   19468:	8522                	c.mv	a0,s0
   1946a:	a86fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1946e:	842a                	c.mv	s0,a0
   19470:	b7dd                	c.j	19456 <dwarf::unit::get_abbrev(unsigned long) const+0x114>
   19472:	842a                	c.mv	s0,a0
   19474:	b7fd                	c.j	19462 <dwarf::unit::get_abbrev(unsigned long) const+0x120>

0000000000019476 <dwarf::type_unit::type() const>:

const die &type_unit::type() const {
   19476:	7171                	c.addi16sp	sp,-176
   19478:	f506                	c.sdsp	ra,168(sp)
   1947a:	f122                	c.sdsp	s0,160(sp)
   1947c:	ed26                	c.sdsp	s1,152(sp)
   1947e:	e94a                	c.sdsp	s2,144(sp)
   19480:	e54e                	c.sdsp	s3,136(sp)
   19482:	e152                	c.sdsp	s4,128(sp)
   19484:	fcd6                	c.sdsp	s5,120(sp)
   19486:	f8da                	c.sdsp	s6,112(sp)
   19488:	84aa                	c.mv	s1,a0
   1948a:	6508                	c.ld	a0,8(a0)
  if (!m->type.valid()) {
   1948c:	657c                	c.ld	a5,200(a0)
   1948e:	cf91                	c.beqz	a5,194aa <dwarf::type_unit::type() const+0x34>
    m->force_abbrevs();
    m->type = die(this);
    m->type.read(m->type_offset);
  }
  return m->type;
   19490:	6488                	c.ld	a0,8(s1)
   19492:	0b850513          	addi	a0,a0,184
}
   19496:	70aa                	c.ldsp	ra,168(sp)
   19498:	740a                	c.ldsp	s0,160(sp)
   1949a:	64ea                	c.ldsp	s1,152(sp)
   1949c:	694a                	c.ldsp	s2,144(sp)
   1949e:	69aa                	c.ldsp	s3,136(sp)
   194a0:	6a0a                	c.ldsp	s4,128(sp)
   194a2:	7ae6                	c.ldsp	s5,120(sp)
   194a4:	7b46                	c.ldsp	s6,112(sp)
   194a6:	614d                	c.addi16sp	sp,176
   194a8:	8082                	c.jr	ra
    m->force_abbrevs();
   194aa:	f34ff0ef          	jal	ra,18bde <dwarf::unit::impl::force_abbrevs()>
   194ae:	6480                	c.ld	s0,8(s1)
    m->type = die(this);
   194b0:	85a6                	c.mv	a1,s1
   194b2:	850a                	c.mv	a0,sp
   194b4:	4bb010ef          	jal	ra,1b16e <dwarf::die::die(dwarf::unit const*)>
  die &operator=(die &&o) = default;
   194b8:	4782                	c.lwsp	a5,0(sp)
   194ba:	0af42c23          	sw	a5,184(s0)
   194be:	67a2                	c.ldsp	a5,8(sp)
   194c0:	e07c                	c.sd	a5,192(s0)
   194c2:	67c2                	c.ldsp	a5,16(sp)
   194c4:	e47c                	c.sd	a5,200(s0)
   194c6:	67e2                	c.ldsp	a5,24(sp)
   194c8:	e87c                	c.sd	a5,208(s0)
  size_type size() const { return end - base; }
   194ca:	69e6                	c.ldsp	s3,88(sp)
   194cc:	67c6                	c.ldsp	a5,80(sp)
   194ce:	40f989b3          	sub	s3,s3,a5
   194d2:	4039d913          	srai	s2,s3,0x3
    for (T *p = base; p < end; ++p)
   194d6:	10843683          	ld	a3,264(s0)
   194da:	11043783          	ld	a5,272(s0)
   194de:	00f6f863          	bgeu	a3,a5,194ee <dwarf::type_unit::type() const+0x78>
   194e2:	87b6                	c.mv	a5,a3
   194e4:	07a1                	c.addi	a5,8
   194e6:	11043703          	ld	a4,272(s0)
   194ea:	fee7ede3          	bltu	a5,a4,194e4 <dwarf::type_unit::type() const+0x6e>
    end = base;
   194ee:	10d43823          	sd	a3,272(s0)
    if (n <= (size_type)(cap - base))
   194f2:	11843503          	ld	a0,280(s0)
   194f6:	8d15                	c.sub	a0,a3
   194f8:	05357c63          	bgeu	a0,s3,19550 <dwarf::type_unit::type() const+0xda>
   194fc:	850d                	c.srai	a0,0x3
   194fe:	e111                	c.bnez	a0,19502 <dwarf::type_unit::type() const+0x8c>
   19500:	4505                	c.li	a0,1
    while (target < n)
   19502:	01257563          	bgeu	a0,s2,1950c <dwarf::type_unit::type() const+0x96>
      target <<= 1;
   19506:	0506                	c.slli	a0,0x1
    while (target < n)
   19508:	ff256fe3          	bltu	a0,s2,19506 <dwarf::type_unit::type() const+0x90>
    char *newbuf = new char[sizeof(T[target])];
   1950c:	00351a13          	slli	s4,a0,0x3
   19510:	8552                	c.mv	a0,s4
   19512:	e1ffc0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   19516:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   19518:	10843503          	ld	a0,264(s0)
    for (; src < end; src++, dest++) {
   1951c:	11043783          	ld	a5,272(s0)
   19520:	08f57663          	bgeu	a0,a5,195ac <dwarf::type_unit::type() const+0x136>
    T *src = base, *dest = (T *)newbuf;
   19524:	87aa                	c.mv	a5,a0
   19526:	8ada                	c.mv	s5,s6
    for (; src < end; src++, dest++) {
   19528:	07a1                	c.addi	a5,8
   1952a:	0aa1                	c.addi	s5,8
   1952c:	11043703          	ld	a4,272(s0)
   19530:	fee7ece3          	bltu	a5,a4,19528 <dwarf::type_unit::type() const+0xb2>
   19534:	0d840793          	addi	a5,s0,216
    if ((char *)base != buf)
   19538:	00f50563          	beq	a0,a5,19542 <dwarf::type_unit::type() const+0xcc>
      delete[] (char *)base;
   1953c:	c119                	c.beqz	a0,19542 <dwarf::type_unit::type() const+0xcc>
   1953e:	882fd0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   19542:	11643423          	sd	s6,264(s0)
    end = dest;
   19546:	11543823          	sd	s5,272(s0)
    cap = base + target;
   1954a:	9b52                	c.add	s6,s4
   1954c:	11643c23          	sd	s6,280(s0)
    for (size_type i = 0; i < osize; i++)
   19550:	00090f63          	beq	s2,zero,1956e <dwarf::type_unit::type() const+0xf8>
   19554:	4781                	c.li	a5,0
   19556:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1955a:	6746                	c.ldsp	a4,80(sp)
   1955c:	9736                	c.add	a4,a3
   1955e:	6310                	c.ld	a2,0(a4)
   19560:	10843703          	ld	a4,264(s0)
   19564:	9736                	c.add	a4,a3
   19566:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   19568:	0785                	c.addi	a5,1
   1956a:	fef916e3          	bne	s2,a5,19556 <dwarf::type_unit::type() const+0xe0>
    end = base + osize;
   1956e:	10843783          	ld	a5,264(s0)
   19572:	97ce                	c.add	a5,s3
   19574:	10f43823          	sd	a5,272(s0)
   19578:	77a6                	c.ldsp	a5,104(sp)
   1957a:	12f43023          	sd	a5,288(s0)
    for (T *p = base; p < end; ++p)
   1957e:	6546                	c.ldsp	a0,80(sp)
   19580:	67e6                	c.ldsp	a5,88(sp)
   19582:	00f57763          	bgeu	a0,a5,19590 <dwarf::type_unit::type() const+0x11a>
   19586:	87aa                	c.mv	a5,a0
   19588:	07a1                	c.addi	a5,8
   1958a:	6766                	c.ldsp	a4,88(sp)
   1958c:	fee7eee3          	bltu	a5,a4,19588 <dwarf::type_unit::type() const+0x112>
    end = base;
   19590:	ecaa                	c.sdsp	a0,88(sp)
    if ((char *)base != buf)
   19592:	101c                	c.addi4spn	a5,sp,32
   19594:	00f50563          	beq	a0,a5,1959e <dwarf::type_unit::type() const+0x128>
      delete[] (char *)base;
   19598:	c119                	c.beqz	a0,1959e <dwarf::type_unit::type() const+0x128>
   1959a:	826fd0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1959e:	6488                	c.ld	a0,8(s1)
    m->type.read(m->type_offset);
   195a0:	612c                	c.ld	a1,64(a0)
   195a2:	0b850513          	addi	a0,a0,184
   195a6:	3fd010ef          	jal	ra,1b1a2 <dwarf::die::read(unsigned long)>
   195aa:	b5dd                	c.j	19490 <dwarf::type_unit::type() const+0x1a>
    T *src = base, *dest = (T *)newbuf;
   195ac:	8ada                	c.mv	s5,s6
   195ae:	b759                	c.j	19534 <dwarf::type_unit::type() const+0xbe>
class die {
   195b0:	842a                	c.mv	s0,a0
   195b2:	1008                	c.addi4spn	a0,sp,32
   195b4:	00020317          	auipc	t1,0x20
   195b8:	e3433303          	ld	t1,-460(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   195bc:	9302                	c.jalr	t1
   195be:	8522                	c.mv	a0,s0
   195c0:	930fd0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000195c4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   195c4:	8082                	c.jr	ra

00000000000195c6 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   195c6:	8082                	c.jr	ra

00000000000195c8 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   195c8:	8082                	c.jr	ra

00000000000195ca <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      }
   195ca:	8082                	c.jr	ra

00000000000195cc <dwarf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   195cc:	1141                	c.addi	sp,-16
   195ce:	e406                	c.sdsp	ra,8(sp)
   195d0:	00020797          	auipc	a5,0x20
   195d4:	f887b783          	ld	a5,-120(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   195d8:	07c1                	c.addi	a5,16
   195da:	e11c                	c.sd	a5,0(a0)
   195dc:	f65fc0ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   195e0:	60a2                	c.ldsp	ra,8(sp)
   195e2:	0141                	c.addi	sp,16
   195e4:	8082                	c.jr	ra

00000000000195e6 <dwarf::format_error::~format_error()>:
   195e6:	1141                	c.addi	sp,-16
   195e8:	e406                	c.sdsp	ra,8(sp)
   195ea:	e022                	c.sdsp	s0,0(sp)
   195ec:	842a                	c.mv	s0,a0
   195ee:	00020797          	auipc	a5,0x20
   195f2:	f6a7b783          	ld	a5,-150(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   195f6:	07c1                	c.addi	a5,16
   195f8:	e11c                	c.sd	a5,0(a0)
   195fa:	f47fc0ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   195fe:	8522                	c.mv	a0,s0
   19600:	f11fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19604:	60a2                	c.ldsp	ra,8(sp)
   19606:	6402                	c.ldsp	s0,0(sp)
   19608:	0141                	c.addi	sp,16
   1960a:	8082                	c.jr	ra

000000000001960c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   1960c:	1141                	c.addi	sp,-16
   1960e:	e406                	c.sdsp	ra,8(sp)
   19610:	f01fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19614:	60a2                	c.ldsp	ra,8(sp)
   19616:	0141                	c.addi	sp,16
   19618:	8082                	c.jr	ra

000000000001961a <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   1961a:	1141                	c.addi	sp,-16
   1961c:	e406                	c.sdsp	ra,8(sp)
   1961e:	ef3fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19622:	60a2                	c.ldsp	ra,8(sp)
   19624:	0141                	c.addi	sp,16
   19626:	8082                	c.jr	ra

0000000000019628 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   19628:	1141                	c.addi	sp,-16
   1962a:	e406                	c.sdsp	ra,8(sp)
   1962c:	ee5fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19630:	60a2                	c.ldsp	ra,8(sp)
   19632:	0141                	c.addi	sp,16
   19634:	8082                	c.jr	ra

0000000000019636 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
   19636:	1101                	c.addi	sp,-32
   19638:	ec06                	c.sdsp	ra,24(sp)
   1963a:	e822                	c.sdsp	s0,16(sp)
   1963c:	e426                	c.sdsp	s1,8(sp)
   1963e:	e04a                	c.sdsp	s2,0(sp)
   19640:	892a                	c.mv	s2,a0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19642:	6100                	c.ld	s0,0(a0)
   19644:	6504                	c.ld	s1,8(a0)
   19646:	00940963          	beq	s0,s1,19658 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x22>
      __pointer->~_Tp();
   1964a:	601c                	c.ld	a5,0(s0)
   1964c:	639c                	c.ld	a5,0(a5)
   1964e:	8522                	c.mv	a0,s0
   19650:	9782                	c.jalr	a5
	  for (; __first != __last; ++__first)
   19652:	0461                	c.addi	s0,24
   19654:	fe849be3          	bne	s1,s0,1964a <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x14>
	_M_deallocate(_M_impl._M_start,
   19658:	00093503          	ld	a0,0(s2)
	if (__p)
   1965c:	c119                	c.beqz	a0,19662 <std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::~vector()+0x2c>
   1965e:	eb3fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   19662:	60e2                	c.ldsp	ra,24(sp)
   19664:	6442                	c.ldsp	s0,16(sp)
   19666:	64a2                	c.ldsp	s1,8(sp)
   19668:	6902                	c.ldsp	s2,0(sp)
   1966a:	6105                	c.addi16sp	sp,32
   1966c:	8082                	c.jr	ra

000000000001966e <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1966e:	1141                	c.addi	sp,-16
   19670:	e406                	c.sdsp	ra,8(sp)
   19672:	e9ffc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   19676:	60a2                	c.ldsp	ra,8(sp)
   19678:	0141                	c.addi	sp,16
   1967a:	8082                	c.jr	ra

000000000001967c <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1967c:	1141                	c.addi	sp,-16
   1967e:	e406                	c.sdsp	ra,8(sp)
   19680:	e91fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   19684:	60a2                	c.ldsp	ra,8(sp)
   19686:	0141                	c.addi	sp,16
   19688:	8082                	c.jr	ra

000000000001968a <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   1968a:	1141                	c.addi	sp,-16
   1968c:	e406                	c.sdsp	ra,8(sp)
   1968e:	e83fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   19692:	60a2                	c.ldsp	ra,8(sp)
   19694:	0141                	c.addi	sp,16
   19696:	8082                	c.jr	ra

0000000000019698 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   19698:	1141                	c.addi	sp,-16
   1969a:	e406                	c.sdsp	ra,8(sp)
   1969c:	e022                	c.sdsp	s0,0(sp)
   1969e:	03850413          	addi	s0,a0,56
	    ||
   196a2:	00020797          	auipc	a5,0x20
   196a6:	e967b783          	ld	a5,-362(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   196aa:	02f58a63          	beq	a1,a5,196de <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   196ae:	6588                	c.ld	a0,8(a1)
   196b0:	00020797          	auipc	a5,0x20
   196b4:	d607b783          	ld	a5,-672(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   196b8:	02f50363          	beq	a0,a5,196de <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   196bc:	00054703          	lbu	a4,0(a0)
   196c0:	02a00793          	addi	a5,zero,42
   196c4:	02f70263          	beq	a4,a5,196e8 <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   196c8:	00020597          	auipc	a1,0x20
   196cc:	d485b583          	ld	a1,-696(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   196d0:	c91fc0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   196d4:	00153513          	sltiu	a0,a0,1
   196d8:	40a00533          	sub	a0,zero,a0
   196dc:	8c69                	c.and	s0,a0
      }
   196de:	8522                	c.mv	a0,s0
   196e0:	60a2                	c.ldsp	ra,8(sp)
   196e2:	6402                	c.ldsp	s0,0(sp)
   196e4:	0141                	c.addi	sp,16
   196e6:	8082                	c.jr	ra
	return nullptr;
   196e8:	4401                	c.li	s0,0
   196ea:	bfd5                	c.j	196de <std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

00000000000196ec <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   196ec:	1141                	c.addi	sp,-16
   196ee:	e406                	c.sdsp	ra,8(sp)
   196f0:	e022                	c.sdsp	s0,0(sp)
   196f2:	03850413          	addi	s0,a0,56
	    ||
   196f6:	00020797          	auipc	a5,0x20
   196fa:	e427b783          	ld	a5,-446(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   196fe:	02f58a63          	beq	a1,a5,19732 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   19702:	6588                	c.ld	a0,8(a1)
   19704:	00020797          	auipc	a5,0x20
   19708:	d0c7b783          	ld	a5,-756(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   1970c:	02f50363          	beq	a0,a5,19732 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   19710:	00054703          	lbu	a4,0(a0)
   19714:	02a00793          	addi	a5,zero,42
   19718:	02f70263          	beq	a4,a5,1973c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   1971c:	00020597          	auipc	a1,0x20
   19720:	cf45b583          	ld	a1,-780(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   19724:	c3dfc0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   19728:	00153513          	sltiu	a0,a0,1
   1972c:	40a00533          	sub	a0,zero,a0
   19730:	8c69                	c.and	s0,a0
      }
   19732:	8522                	c.mv	a0,s0
   19734:	60a2                	c.ldsp	ra,8(sp)
   19736:	6402                	c.ldsp	s0,0(sp)
   19738:	0141                	c.addi	sp,16
   1973a:	8082                	c.jr	ra
	return nullptr;
   1973c:	4401                	c.li	s0,0
   1973e:	bfd5                	c.j	19732 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

0000000000019740 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   19740:	1141                	c.addi	sp,-16
   19742:	e406                	c.sdsp	ra,8(sp)
   19744:	e022                	c.sdsp	s0,0(sp)
   19746:	03850413          	addi	s0,a0,56
	    ||
   1974a:	00020797          	auipc	a5,0x20
   1974e:	dee7b783          	ld	a5,-530(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   19752:	02f58a63          	beq	a1,a5,19786 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   19756:	6588                	c.ld	a0,8(a1)
   19758:	00020797          	auipc	a5,0x20
   1975c:	cb87b783          	ld	a5,-840(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   19760:	02f50363          	beq	a0,a5,19786 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   19764:	00054703          	lbu	a4,0(a0)
   19768:	02a00793          	addi	a5,zero,42
   1976c:	02f70263          	beq	a4,a5,19790 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   19770:	00020597          	auipc	a1,0x20
   19774:	ca05b583          	ld	a1,-864(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   19778:	be9fc0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   1977c:	00153513          	sltiu	a0,a0,1
   19780:	40a00533          	sub	a0,zero,a0
   19784:	8c69                	c.and	s0,a0
      }
   19786:	8522                	c.mv	a0,s0
   19788:	60a2                	c.ldsp	ra,8(sp)
   1978a:	6402                	c.ldsp	s0,0(sp)
   1978c:	0141                	c.addi	sp,16
   1978e:	8082                	c.jr	ra
	return nullptr;
   19790:	4401                	c.li	s0,0
   19792:	bfd5                	c.j	19786 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

0000000000019794 <std::__cxx11::to_string(int)>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
   19794:	7179                	c.addi16sp	sp,-48
   19796:	f406                	c.sdsp	ra,40(sp)
   19798:	f022                	c.sdsp	s0,32(sp)
   1979a:	ec26                	c.sdsp	s1,24(sp)
   1979c:	e84a                	c.sdsp	s2,16(sp)
   1979e:	e44e                	c.sdsp	s3,8(sp)
   197a0:	892a                	c.mv	s2,a0
    const bool __neg = __val < 0;
   197a2:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   197a6:	0005849b          	addiw	s1,a1,0
   197aa:	0405ce63          	blt	a1,zero,19806 <std::__cxx11::to_string(int)+0x72>
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
   197ae:	47a5                	c.li	a5,9
   197b0:	1497fb63          	bgeu	a5,s1,19906 <std::__cxx11::to_string(int)+0x172>
	  if (__value < __b2) return __n + 1;
   197b4:	06300793          	addi	a5,zero,99
   197b8:	0497fa63          	bgeu	a5,s1,1980c <std::__cxx11::to_string(int)+0x78>
	  if (__value < __b3) return __n + 2;
   197bc:	3e700793          	addi	a5,zero,999
   197c0:	0697ff63          	bgeu	a5,s1,1983e <std::__cxx11::to_string(int)+0xaa>
	  if (__value < __b4) return __n + 3;
   197c4:	02049713          	slli	a4,s1,0x20
   197c8:	9301                	c.srli	a4,0x20
   197ca:	6789                	c.lui	a5,0x2
   197cc:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   197d0:	1297f963          	bgeu	a5,s1,19902 <std::__cxx11::to_string(int)+0x16e>
      unsigned __n = 1;
   197d4:	4405                	c.li	s0,1
	  __value /= __b4;
   197d6:	6689                	c.lui	a3,0x2
   197d8:	71068593          	addi	a1,a3,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   197dc:	4625                	c.li	a2,9
	  if (__value < __b2) return __n + 1;
   197de:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   197e2:	3e700813          	addi	a6,zero,999
	  if (__value < __b4) return __n + 3;
   197e6:	86be                	c.mv	a3,a5
	  __value /= __b4;
   197e8:	02b75733          	divu	a4,a4,a1
   197ec:	0007079b          	addiw	a5,a4,0
	  __n += 4;
   197f0:	2411                	c.addiw	s0,4
	  if (__value < (unsigned)__base) return __n;
   197f2:	04f67863          	bgeu	a2,a5,19842 <std::__cxx11::to_string(int)+0xae>
	  if (__value < __b2) return __n + 1;
   197f6:	00f57c63          	bgeu	a0,a5,1980e <std::__cxx11::to_string(int)+0x7a>
	  if (__value < __b3) return __n + 2;
   197fa:	04f87363          	bgeu	a6,a5,19840 <std::__cxx11::to_string(int)+0xac>
	  if (__value < __b4) return __n + 3;
   197fe:	fef6e5e3          	bltu	a3,a5,197e8 <std::__cxx11::to_string(int)+0x54>
   19802:	240d                	c.addiw	s0,3
   19804:	a83d                	c.j	19842 <std::__cxx11::to_string(int)+0xae>
   19806:	40b004bb          	subw	s1,zero,a1
   1980a:	b755                	c.j	197ae <std::__cxx11::to_string(int)+0x1a>
      unsigned __n = 1;
   1980c:	4405                	c.li	s0,1
	  if (__value < __b2) return __n + 1;
   1980e:	2405                	c.addiw	s0,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   19810:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   19814:	00f93023          	sd	a5,0(s2)
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
   19818:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1981c:	02d00613          	addi	a2,zero,45
   19820:	1582                	c.slli	a1,0x20
   19822:	9181                	c.srli	a1,0x20
   19824:	854a                	c.mv	a0,s2
   19826:	d4bfc0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1982a:	00093583          	ld	a1,0(s2)
   1982e:	95ce                	c.add	a1,s3
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
   19830:	06300793          	addi	a5,zero,99
   19834:	0897f663          	bgeu	a5,s1,198c0 <std::__cxx11::to_string(int)+0x12c>
      unsigned __pos = __len - 1;
   19838:	fff4071b          	addiw	a4,s0,-1
   1983c:	a02d                	c.j	19866 <std::__cxx11::to_string(int)+0xd2>
      unsigned __n = 1;
   1983e:	4405                	c.li	s0,1
	  if (__value < __b3) return __n + 2;
   19840:	2409                	c.addiw	s0,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   19842:	01090793          	addi	a5,s2,16
	: allocator_type(__a), _M_p(__dat) { }
   19846:	00f93023          	sd	a5,0(s2)
    string __str(__neg + __len, '-');
   1984a:	008985bb          	addw	a1,s3,s0
      { _M_construct(__n, __c); }
   1984e:	02d00613          	addi	a2,zero,45
   19852:	1582                	c.slli	a1,0x20
   19854:	9181                	c.srli	a1,0x20
   19856:	854a                	c.mv	a0,s2
   19858:	d19fc0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1985c:	00093583          	ld	a1,0(s2)
   19860:	95ce                	c.add	a1,s3
      unsigned __pos = __len - 1;
   19862:	fff4071b          	addiw	a4,s0,-1
	{
	  auto const __num = (__val % 100) * 2;
   19866:	06400813          	addi	a6,zero,100
	  __val /= 100;
	  __first[__pos] = __digits[__num + 1];
   1986a:	00020517          	auipc	a0,0x20
   1986e:	af653503          	ld	a0,-1290(a0) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
      while (__val >= 100)
   19872:	6309                	c.lui	t1,0x2
   19874:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   19878:	0304f7bb          	remuw	a5,s1,a6
   1987c:	0017979b          	slliw	a5,a5,0x1
   19880:	0004889b          	addiw	a7,s1,0
	  __val /= 100;
   19884:	0304d4bb          	divuw	s1,s1,a6
	  __first[__pos] = __digits[__num + 1];
   19888:	02071613          	slli	a2,a4,0x20
   1988c:	9201                	c.srli	a2,0x20
   1988e:	962e                	c.add	a2,a1
   19890:	0017869b          	addiw	a3,a5,1
   19894:	1682                	c.slli	a3,0x20
   19896:	9281                	c.srli	a3,0x20
   19898:	96aa                	c.add	a3,a0
   1989a:	0006c683          	lbu	a3,0(a3)
   1989e:	00d60023          	sb	a3,0(a2)
	  __first[__pos - 1] = __digits[__num];
   198a2:	fff7069b          	addiw	a3,a4,-1
   198a6:	1682                	c.slli	a3,0x20
   198a8:	9281                	c.srli	a3,0x20
   198aa:	96ae                	c.add	a3,a1
   198ac:	1782                	c.slli	a5,0x20
   198ae:	9381                	c.srli	a5,0x20
   198b0:	97aa                	c.add	a5,a0
   198b2:	0007c783          	lbu	a5,0(a5)
   198b6:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   198ba:	3779                	c.addiw	a4,-2
      while (__val >= 100)
   198bc:	fb136ee3          	bltu	t1,a7,19878 <std::__cxx11::to_string(int)+0xe4>
	}
      if (__val >= 10)
   198c0:	47a5                	c.li	a5,9
   198c2:	0497f463          	bgeu	a5,s1,1990a <std::__cxx11::to_string(int)+0x176>
	{
	  auto const __num = __val * 2;
   198c6:	0014949b          	slliw	s1,s1,0x1
	  __first[1] = __digits[__num + 1];
   198ca:	00020717          	auipc	a4,0x20
   198ce:	a9673703          	ld	a4,-1386(a4) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
   198d2:	0014879b          	addiw	a5,s1,1
   198d6:	1782                	c.slli	a5,0x20
   198d8:	9381                	c.srli	a5,0x20
   198da:	97ba                	c.add	a5,a4
   198dc:	0007c783          	lbu	a5,0(a5)
   198e0:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   198e4:	1482                	c.slli	s1,0x20
   198e6:	9081                	c.srli	s1,0x20
   198e8:	9726                	c.add	a4,s1
   198ea:	00074483          	lbu	s1,0(a4)
   198ee:	00958023          	sb	s1,0(a1)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }
   198f2:	854a                	c.mv	a0,s2
   198f4:	70a2                	c.ldsp	ra,40(sp)
   198f6:	7402                	c.ldsp	s0,32(sp)
   198f8:	64e2                	c.ldsp	s1,24(sp)
   198fa:	6942                	c.ldsp	s2,16(sp)
   198fc:	69a2                	c.ldsp	s3,8(sp)
   198fe:	6145                	c.addi16sp	sp,48
   19900:	8082                	c.jr	ra
      unsigned __n = 1;
   19902:	4405                	c.li	s0,1
   19904:	bdfd                	c.j	19802 <std::__cxx11::to_string(int)+0x6e>
   19906:	4405                	c.li	s0,1
   19908:	b721                	c.j	19810 <std::__cxx11::to_string(int)+0x7c>
	}
      else
	__first[0] = '0' + __val;
   1990a:	0304849b          	addiw	s1,s1,48
   1990e:	0ff4f493          	andi	s1,s1,255
   19912:	bff1                	c.j	198ee <std::__cxx11::to_string(int)+0x15a>

0000000000019914 <dwarf::type_unit::~type_unit()>:
class type_unit : public unit {
   19914:	1141                	c.addi	sp,-16
   19916:	e406                	c.sdsp	ra,8(sp)
   19918:	00020797          	auipc	a5,0x20
   1991c:	a407b783          	ld	a5,-1472(a5) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   19920:	07c1                	c.addi	a5,16
   19922:	e11c                	c.sd	a5,0(a0)
   19924:	de6fd0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   19928:	60a2                	c.ldsp	ra,8(sp)
   1992a:	0141                	c.addi	sp,16
   1992c:	8082                	c.jr	ra

000000000001992e <dwarf::type_unit::~type_unit()>:
   1992e:	1141                	c.addi	sp,-16
   19930:	e406                	c.sdsp	ra,8(sp)
   19932:	e022                	c.sdsp	s0,0(sp)
   19934:	842a                	c.mv	s0,a0
   19936:	00020797          	auipc	a5,0x20
   1993a:	a227b783          	ld	a5,-1502(a5) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   1993e:	07c1                	c.addi	a5,16
   19940:	e11c                	c.sd	a5,0(a0)
   19942:	dc8fd0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   19946:	8522                	c.mv	a0,s0
   19948:	bc9fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1994c:	60a2                	c.ldsp	ra,8(sp)
   1994e:	6402                	c.ldsp	s0,0(sp)
   19950:	0141                	c.addi	sp,16
   19952:	8082                	c.jr	ra

0000000000019954 <dwarf::small_vector<unsigned long, 6u>::~small_vector()>:
  ~small_vector() {
   19954:	86aa                	c.mv	a3,a0
    for (T *p = base; p < end; ++p)
   19956:	7908                	c.ld	a0,48(a0)
   19958:	7e9c                	c.ld	a5,56(a3)
   1995a:	00f57763          	bgeu	a0,a5,19968 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x14>
   1995e:	87aa                	c.mv	a5,a0
   19960:	07a1                	c.addi	a5,8
   19962:	7e98                	c.ld	a4,56(a3)
   19964:	fee7eee3          	bltu	a5,a4,19960 <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0xc>
    end = base;
   19968:	fe88                	c.sd	a0,56(a3)
    if ((char *)base != buf)
   1996a:	00a68a63          	beq	a3,a0,1997e <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x2a>
      delete[] (char *)base;
   1996e:	c901                	c.beqz	a0,1997e <dwarf::small_vector<unsigned long, 6u>::~small_vector()+0x2a>
  ~small_vector() {
   19970:	1141                	c.addi	sp,-16
   19972:	e406                	c.sdsp	ra,8(sp)
      delete[] (char *)base;
   19974:	c4dfc0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
  }
   19978:	60a2                	c.ldsp	ra,8(sp)
   1997a:	0141                	c.addi	sp,16
   1997c:	8082                	c.jr	ra
   1997e:	8082                	c.jr	ra

0000000000019980 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)>:
    }

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
   19980:	7179                	c.addi16sp	sp,-48
   19982:	f406                	c.sdsp	ra,40(sp)
   19984:	f022                	c.sdsp	s0,32(sp)
   19986:	ec26                	c.sdsp	s1,24(sp)
   19988:	e84a                	c.sdsp	s2,16(sp)
   1998a:	e44e                	c.sdsp	s3,8(sp)
   1998c:	e052                	c.sdsp	s4,0(sp)
   1998e:	84aa                	c.mv	s1,a0
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (std::__addressof(__x) != this)
   19990:	06a58c63          	beq	a1,a0,19a08 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x88>
   19994:	892e                	c.mv	s2,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19996:	0085ba03          	ld	s4,8(a1)
   1999a:	6180                	c.ld	s0,0(a1)
   1999c:	408a09b3          	sub	s3,s4,s0
			 - this->_M_impl._M_start); }
   199a0:	6108                	c.ld	a0,0(a0)
   199a2:	689c                	c.ld	a5,16(s1)
   199a4:	8f89                	c.sub	a5,a0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   199a6:	0137ed63          	bltu	a5,s3,199c0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x40>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   199aa:	6490                	c.ld	a2,8(s1)
   199ac:	8e09                	c.sub	a2,a0
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
	    }
	  else if (size() >= __xlen)
   199ae:	07366e63          	bltu	a2,s3,19a2a <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xaa>
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   199b2:	048a0863          	beq	s4,s0,19a02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   199b6:	864e                	c.mv	a2,s3
   199b8:	85a2                	c.mv	a1,s0
   199ba:	dc7fc0ef          	jal	ra,16780 <memmove@plt>
   199be:	a091                	c.j	19a02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   199c0:	06098363          	beq	s3,zero,19a26 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   199c4:	57c5                	c.li	a5,-15
   199c6:	8385                	c.srli	a5,0x1
   199c8:	0537e963          	bltu	a5,s3,19a1a <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x9a>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   199cc:	854e                	c.mv	a0,s3
   199ce:	b53fc0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   199d2:	892a                	c.mv	s2,a0
		     _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      __try
	{
	  for (; __first != __last; ++__first, (void)++__cur)
   199d4:	008a0e63          	beq	s4,s0,199f0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x70>
   199d8:	85a2                	c.mv	a1,s0
      _ForwardIterator __cur = __result;
   199da:	87ca                	c.mv	a5,s2
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   199dc:	4198                	c.lw	a4,0(a1)
   199de:	c398                	c.sw	a4,0(a5)
   199e0:	41d8                	c.lw	a4,4(a1)
   199e2:	c3d8                	c.sw	a4,4(a5)
   199e4:	4598                	c.lw	a4,8(a1)
   199e6:	c798                	c.sw	a4,8(a5)
	  for (; __first != __last; ++__first, (void)++__cur)
   199e8:	07b1                	c.addi	a5,12
   199ea:	05b1                	c.addi	a1,12
   199ec:	feba18e3          	bne	s4,a1,199dc <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x5c>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   199f0:	6088                	c.ld	a0,0(s1)
	if (__p)
   199f2:	c119                	c.beqz	a0,199f8 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x78>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   199f4:	b1dfc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __tmp;
   199f8:	0124b023          	sd	s2,0(s1)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   199fc:	994e                	c.add	s2,s3
   199fe:	0124b823          	sd	s2,16(s1)
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   19a02:	609c                	c.ld	a5,0(s1)
   19a04:	97ce                	c.add	a5,s3
   19a06:	e49c                	c.sd	a5,8(s1)
	}
      return *this;
    }
   19a08:	8526                	c.mv	a0,s1
   19a0a:	70a2                	c.ldsp	ra,40(sp)
   19a0c:	7402                	c.ldsp	s0,32(sp)
   19a0e:	64e2                	c.ldsp	s1,24(sp)
   19a10:	6942                	c.ldsp	s2,16(sp)
   19a12:	69a2                	c.ldsp	s3,8(sp)
   19a14:	6a02                	c.ldsp	s4,0(sp)
   19a16:	6145                	c.addi16sp	sp,48
   19a18:	8082                	c.jr	ra
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   19a1a:	0009d463          	bge	s3,zero,19a22 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xa2>
	      std::__throw_bad_array_new_length();
   19a1e:	ad3fc0ef          	jal	ra,164f0 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   19a22:	9bffc0ef          	jal	ra,163e0 <std::__throw_bad_alloc()@plt>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   19a26:	4901                	c.li	s2,0
   19a28:	b775                	c.j	199d4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x54>
	  if (_Num)
   19a2a:	c601                	c.beqz	a2,19a32 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   19a2c:	85a2                	c.mv	a1,s0
   19a2e:	d53fc0ef          	jal	ra,16780 <memmove@plt>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19a32:	6498                	c.ld	a4,8(s1)
   19a34:	6094                	c.ld	a3,0(s1)
   19a36:	40d706b3          	sub	a3,a4,a3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   19a3a:	00093783          	ld	a5,0(s2)
   19a3e:	97b6                	c.add	a5,a3
					  __x._M_impl._M_finish,
   19a40:	00893603          	ld	a2,8(s2)
   19a44:	fac78fe3          	beq	a5,a2,19a02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>
   19a48:	4394                	c.lw	a3,0(a5)
   19a4a:	c314                	c.sw	a3,0(a4)
   19a4c:	43d4                	c.lw	a3,4(a5)
   19a4e:	c354                	c.sw	a3,4(a4)
   19a50:	4794                	c.lw	a3,8(a5)
   19a52:	c714                	c.sw	a3,8(a4)
   19a54:	07b1                	c.addi	a5,12
   19a56:	0731                	c.addi	a4,12
   19a58:	fef618e3          	bne	a2,a5,19a48 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0xc8>
   19a5c:	b75d                	c.j	19a02 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::operator=(std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > const&)+0x82>

0000000000019a5e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)>:
      while (__x != 0)
   19a5e:	c1f1                	c.beqz	a1,19b22 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xc4>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   19a60:	7139                	c.addi16sp	sp,-64
   19a62:	fc06                	c.sdsp	ra,56(sp)
   19a64:	f822                	c.sdsp	s0,48(sp)
   19a66:	f426                	c.sdsp	s1,40(sp)
   19a68:	f04a                	c.sdsp	s2,32(sp)
   19a6a:	ec4e                	c.sdsp	s3,24(sp)
   19a6c:	e852                	c.sdsp	s4,16(sp)
   19a6e:	e456                	c.sdsp	s5,8(sp)
   19a70:	e05a                	c.sdsp	s6,0(sp)
   19a72:	8aaa                	c.mv	s5,a0
   19a74:	842e                	c.mv	s0,a1
	  _M_erase(_S_right(__x));
   19a76:	00020b17          	auipc	s6,0x20
   19a7a:	93ab3b03          	ld	s6,-1734(s6) # 393b0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x1f952>
    return ::__libc_single_threaded;
   19a7e:	00020917          	auipc	s2,0x20
   19a82:	a0293903          	ld	s2,-1534(s2) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19a86:	4485                	c.li	s1,1
   19a88:	a005                	c.j	19aa8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x4a>
    if (__is_single_threaded())
   19a8a:	00094783          	lbu	a5,0(s2)
   19a8e:	c79d                	c.beqz	a5,19abc <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x5e>
    _Atomic_word __result = *__mem;
   19a90:	0309a503          	lw	a0,48(s3)
    *__mem += __val;
   19a94:	fff5079b          	addiw	a5,a0,-1
   19a98:	02f9a823          	sw	a5,48(s3)
   19a9c:	02950663          	beq	a0,s1,19ac8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x6a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19aa0:	8552                	c.mv	a0,s4
   19aa2:	a6ffc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      while (__x != 0)
   19aa6:	c425                	c.beqz	s0,19b0e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xb0>
	  _M_erase(_S_right(__x));
   19aa8:	6c0c                	c.ld	a1,24(s0)
   19aaa:	8556                	c.mv	a0,s5
   19aac:	9b02                	c.jalr	s6
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   19aae:	8a22                	c.mv	s4,s0
      { return static_cast<_Link_type>(__x->_M_left); }
   19ab0:	6800                	c.ld	s0,16(s0)
	if (_M_pi != nullptr)
   19ab2:	030a3983          	ld	s3,48(s4)
   19ab6:	fc099ae3          	bne	s3,zero,19a8a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x2c>
   19aba:	b7dd                	c.j	19aa0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
      return __exchange_and_add(__mem, __val);
   19abc:	55fd                	c.li	a1,-1
   19abe:	03098513          	addi	a0,s3,48
   19ac2:	8bffc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19ac6:	bfd9                	c.j	19a9c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x3e>
	_M_dispose();
   19ac8:	0009b783          	ld	a5,0(s3)
   19acc:	6b9c                	c.ld	a5,16(a5)
   19ace:	854e                	c.mv	a0,s3
   19ad0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19ad2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19ad6:	00020797          	auipc	a5,0x20
   19ada:	9aa7b783          	ld	a5,-1622(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19ade:	0007c783          	lbu	a5,0(a5)
   19ae2:	c385                	c.beqz	a5,19b02 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0xa4>
    _Atomic_word __result = *__mem;
   19ae4:	0349a503          	lw	a0,52(s3)
    *__mem += __val;
   19ae8:	fff5079b          	addiw	a5,a0,-1
   19aec:	02f9aa23          	sw	a5,52(s3)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19af0:	4785                	c.li	a5,1
   19af2:	faf517e3          	bne	a0,a5,19aa0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
	    _M_destroy();
   19af6:	0009b783          	ld	a5,0(s3)
   19afa:	6f9c                	c.ld	a5,24(a5)
   19afc:	854e                	c.mv	a0,s3
   19afe:	9782                	c.jalr	a5
   19b00:	b745                	c.j	19aa0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x42>
      return __exchange_and_add(__mem, __val);
   19b02:	55fd                	c.li	a1,-1
   19b04:	03498513          	addi	a0,s3,52
   19b08:	879fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19b0c:	b7d5                	c.j	19af0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)+0x92>
    }
   19b0e:	70e2                	c.ldsp	ra,56(sp)
   19b10:	7442                	c.ldsp	s0,48(sp)
   19b12:	74a2                	c.ldsp	s1,40(sp)
   19b14:	7902                	c.ldsp	s2,32(sp)
   19b16:	69e2                	c.ldsp	s3,24(sp)
   19b18:	6a42                	c.ldsp	s4,16(sp)
   19b1a:	6aa2                	c.ldsp	s5,8(sp)
   19b1c:	6b02                	c.ldsp	s6,0(sp)
   19b1e:	6121                	c.addi16sp	sp,64
   19b20:	8082                	c.jr	ra
   19b22:	8082                	c.jr	ra

0000000000019b24 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   19b24:	7179                	c.addi16sp	sp,-48
   19b26:	f406                	c.sdsp	ra,40(sp)
   19b28:	f022                	c.sdsp	s0,32(sp)
   19b2a:	ec26                	c.sdsp	s1,24(sp)
   19b2c:	e84a                	c.sdsp	s2,16(sp)
   19b2e:	e44e                	c.sdsp	s3,8(sp)
   19b30:	892a                	c.mv	s2,a0
      { _M_erase(_M_begin()); }
   19b32:	696c                	c.ld	a1,208(a0)
   19b34:	0c050513          	addi	a0,a0,192
   19b38:	00020317          	auipc	t1,0x20
   19b3c:	87833303          	ld	t1,-1928(t1) # 393b0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_erase(std::_Rb_tree_node<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >*)@@Base+0x1f952>
   19b40:	9302                	c.jalr	t1
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19b42:	09093403          	ld	s0,144(s2)

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    {
      while (__n)
   19b46:	c015                	c.beqz	s0,19b6a <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x46>
   19b48:	00020997          	auipc	s3,0x20
   19b4c:	8109b983          	ld	s3,-2032(s3) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   19b50:	09c1                	c.addi	s3,16
      _M_next() const noexcept
   19b52:	84a2                	c.mv	s1,s0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   19b54:	6000                	c.ld	s0,0(s0)
   19b56:	0134b823          	sd	s3,16(s1)
   19b5a:	01048513          	addi	a0,s1,16
   19b5e:	bacfd0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   19b62:	8526                	c.mv	a0,s1
   19b64:	9adfc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      while (__n)
   19b68:	f46d                	c.bnez	s0,19b52 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0,
   19b6a:	08893603          	ld	a2,136(s2)
   19b6e:	060e                	c.slli	a2,0x3
   19b70:	4581                	c.li	a1,0
   19b72:	08093503          	ld	a0,128(s2)
   19b76:	a6bfc0ef          	jal	ra,165e0 <memset@plt>
		       _M_bucket_count * sizeof(__node_base_ptr));
      _M_element_count = 0;
   19b7a:	08093c23          	sd	zero,152(s2)
      _M_before_begin._M_nxt = nullptr;
   19b7e:	08093823          	sd	zero,144(s2)
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   19b82:	08093503          	ld	a0,128(s2)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   19b86:	0b090793          	addi	a5,s2,176
	if (_M_uses_single_bucket(__bkts))
   19b8a:	00f50463          	beq	a0,a5,19b92 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6e>
   19b8e:	983fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19b92:	06893403          	ld	s0,104(s2)
   19b96:	07093483          	ld	s1,112(s2)
	  for (; __first != __last; ++__first)
   19b9a:	00940963          	beq	s0,s1,19bac <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x88>
      __pointer->~_Tp();
   19b9e:	601c                	c.ld	a5,0(s0)
   19ba0:	639c                	c.ld	a5,0(a5)
   19ba2:	8522                	c.mv	a0,s0
   19ba4:	9782                	c.jalr	a5
	  for (; __first != __last; ++__first)
   19ba6:	0461                	c.addi	s0,24
   19ba8:	fe849be3          	bne	s1,s0,19b9e <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7a>
	_M_deallocate(_M_impl._M_start,
   19bac:	06893503          	ld	a0,104(s2)
	if (__p)
   19bb0:	c119                	c.beqz	a0,19bb6 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
   19bb2:	95ffc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19bb6:	06093403          	ld	s0,96(s2)
   19bba:	cc19                	c.beqz	s0,19bd8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
    if (__is_single_threaded())
   19bbc:	00020797          	auipc	a5,0x20
   19bc0:	8c47b783          	ld	a5,-1852(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19bc4:	0007c783          	lbu	a5,0(a5)
   19bc8:	c3ad                	c.beqz	a5,19c2a <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x106>
    _Atomic_word __result = *__mem;
   19bca:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19bcc:	fff5079b          	addiw	a5,a0,-1
   19bd0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19bd2:	4785                	c.li	a5,1
   19bd4:	06f50163          	beq	a0,a5,19c36 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x112>
	if (_M_pi != nullptr)
   19bd8:	05093403          	ld	s0,80(s2)
   19bdc:	cc19                	c.beqz	s0,19bfa <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
    if (__is_single_threaded())
   19bde:	00020797          	auipc	a5,0x20
   19be2:	8a27b783          	ld	a5,-1886(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19be6:	0007c783          	lbu	a5,0(a5)
   19bea:	c7c9                	c.beqz	a5,19c74 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x150>
    _Atomic_word __result = *__mem;
   19bec:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19bee:	fff5079b          	addiw	a5,a0,-1
   19bf2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19bf4:	4785                	c.li	a5,1
   19bf6:	08f50563          	beq	a0,a5,19c80 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15c>
	if (_M_pi != nullptr)
   19bfa:	04093403          	ld	s0,64(s2)
   19bfe:	cc19                	c.beqz	s0,19c1c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
    if (__is_single_threaded())
   19c00:	00020797          	auipc	a5,0x20
   19c04:	8807b783          	ld	a5,-1920(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19c08:	0007c783          	lbu	a5,0(a5)
   19c0c:	cbcd                	c.beqz	a5,19cbe <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x19a>
    _Atomic_word __result = *__mem;
   19c0e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19c10:	fff5079b          	addiw	a5,a0,-1
   19c14:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19c16:	4785                	c.li	a5,1
   19c18:	0af50963          	beq	a0,a5,19cca <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1a6>
      }
   19c1c:	70a2                	c.ldsp	ra,40(sp)
   19c1e:	7402                	c.ldsp	s0,32(sp)
   19c20:	64e2                	c.ldsp	s1,24(sp)
   19c22:	6942                	c.ldsp	s2,16(sp)
   19c24:	69a2                	c.ldsp	s3,8(sp)
   19c26:	6145                	c.addi16sp	sp,48
   19c28:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   19c2a:	55fd                	c.li	a1,-1
   19c2c:	03040513          	addi	a0,s0,48
   19c30:	f50fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c34:	bf79                	c.j	19bd2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xae>
	_M_dispose();
   19c36:	601c                	c.ld	a5,0(s0)
   19c38:	6b9c                	c.ld	a5,16(a5)
   19c3a:	8522                	c.mv	a0,s0
   19c3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19c3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19c42:	00020797          	auipc	a5,0x20
   19c46:	83e7b783          	ld	a5,-1986(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19c4a:	0007c783          	lbu	a5,0(a5)
   19c4e:	cf89                	c.beqz	a5,19c68 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   19c50:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19c52:	fff5079b          	addiw	a5,a0,-1
   19c56:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19c58:	4785                	c.li	a5,1
   19c5a:	f6f51fe3          	bne	a0,a5,19bd8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
	    _M_destroy();
   19c5e:	601c                	c.ld	a5,0(s0)
   19c60:	6f9c                	c.ld	a5,24(a5)
   19c62:	8522                	c.mv	a0,s0
   19c64:	9782                	c.jalr	a5
   19c66:	bf8d                	c.j	19bd8 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      return __exchange_and_add(__mem, __val);
   19c68:	55fd                	c.li	a1,-1
   19c6a:	03440513          	addi	a0,s0,52
   19c6e:	f12fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c72:	b7dd                	c.j	19c58 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x134>
   19c74:	55fd                	c.li	a1,-1
   19c76:	03040513          	addi	a0,s0,48
   19c7a:	f06fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19c7e:	bf9d                	c.j	19bf4 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd0>
	_M_dispose();
   19c80:	601c                	c.ld	a5,0(s0)
   19c82:	6b9c                	c.ld	a5,16(a5)
   19c84:	8522                	c.mv	a0,s0
   19c86:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19c88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19c8c:	0001f797          	auipc	a5,0x1f
   19c90:	7f47b783          	ld	a5,2036(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19c94:	0007c783          	lbu	a5,0(a5)
   19c98:	cf89                	c.beqz	a5,19cb2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x18e>
    _Atomic_word __result = *__mem;
   19c9a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19c9c:	fff5079b          	addiw	a5,a0,-1
   19ca0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19ca2:	4785                	c.li	a5,1
   19ca4:	f4f51be3          	bne	a0,a5,19bfa <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
	    _M_destroy();
   19ca8:	601c                	c.ld	a5,0(s0)
   19caa:	6f9c                	c.ld	a5,24(a5)
   19cac:	8522                	c.mv	a0,s0
   19cae:	9782                	c.jalr	a5
   19cb0:	b7a9                	c.j	19bfa <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd6>
      return __exchange_and_add(__mem, __val);
   19cb2:	55fd                	c.li	a1,-1
   19cb4:	03440513          	addi	a0,s0,52
   19cb8:	ec8fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19cbc:	b7dd                	c.j	19ca2 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x17e>
   19cbe:	55fd                	c.li	a1,-1
   19cc0:	03040513          	addi	a0,s0,48
   19cc4:	ebcfc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19cc8:	b7b9                	c.j	19c16 <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf2>
	_M_dispose();
   19cca:	601c                	c.ld	a5,0(s0)
   19ccc:	6b9c                	c.ld	a5,16(a5)
   19cce:	8522                	c.mv	a0,s0
   19cd0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19cd2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19cd6:	0001f797          	auipc	a5,0x1f
   19cda:	7aa7b783          	ld	a5,1962(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19cde:	0007c783          	lbu	a5,0(a5)
   19ce2:	cf89                	c.beqz	a5,19cfc <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d8>
    _Atomic_word __result = *__mem;
   19ce4:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19ce6:	fff5079b          	addiw	a5,a0,-1
   19cea:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19cec:	4785                	c.li	a5,1
   19cee:	f2f517e3          	bne	a0,a5,19c1c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
	    _M_destroy();
   19cf2:	601c                	c.ld	a5,0(s0)
   19cf4:	6f9c                	c.ld	a5,24(a5)
   19cf6:	8522                	c.mv	a0,s0
   19cf8:	9782                	c.jalr	a5
      }
   19cfa:	b70d                	c.j	19c1c <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf8>
      return __exchange_and_add(__mem, __val);
   19cfc:	55fd                	c.li	a1,-1
   19cfe:	03440513          	addi	a0,s0,52
   19d02:	e7efc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19d06:	b7dd                	c.j	19cec <std::_Sp_counted_ptr_inplace<dwarf::dwarf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1c8>

0000000000019d08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   19d08:	7179                	c.addi16sp	sp,-48
   19d0a:	f406                	c.sdsp	ra,40(sp)
   19d0c:	f022                	c.sdsp	s0,32(sp)
   19d0e:	ec26                	c.sdsp	s1,24(sp)
   19d10:	e84a                	c.sdsp	s2,16(sp)
   19d12:	842a                	c.mv	s0,a0
   19d14:	892e                	c.mv	s2,a1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   19d16:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   19d1a:	e426                	c.sdsp	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   19d1c:	47bd                	c.li	a5,15
   19d1e:	0297e663          	bltu	a5,s1,19d4a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x42>
      { return _M_dataplus._M_p; }
   19d22:	6108                	c.ld	a0,0(a0)
	if (__n == 1)
   19d24:	4785                	c.li	a5,1
   19d26:	02f49e63          	bne	s1,a5,19d62 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x5a>
	__c1 = __c2;
   19d2a:	0005c783          	lbu	a5,0(a1)
   19d2e:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   19d32:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   19d34:	e418                	c.sd	a4,8(s0)
   19d36:	601c                	c.ld	a5,0(s0)
   19d38:	97ba                	c.add	a5,a4
   19d3a:	00078023          	sb	zero,0(a5)
      }
   19d3e:	70a2                	c.ldsp	ra,40(sp)
   19d40:	7402                	c.ldsp	s0,32(sp)
   19d42:	64e2                	c.ldsp	s1,24(sp)
   19d44:	6942                	c.ldsp	s2,16(sp)
   19d46:	6145                	c.addi16sp	sp,48
   19d48:	8082                	c.jr	ra
	    _M_data(_M_create(__dnew, size_type(0)));
   19d4a:	4601                	c.li	a2,0
   19d4c:	002c                	c.addi4spn	a1,sp,8
   19d4e:	9c3fc0ef          	jal	ra,16710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   19d52:	e008                	c.sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   19d54:	67a2                	c.ldsp	a5,8(sp)
   19d56:	e81c                	c.sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   19d58:	8626                	c.mv	a2,s1
   19d5a:	85ca                	c.mv	a1,s2
   19d5c:	855fc0ef          	jal	ra,165b0 <memcpy@plt>
   19d60:	bfc9                	c.j	19d32 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x2a>
	if (__n == 0)
   19d62:	d8e1                	c.beqz	s1,19d32 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x2a>
   19d64:	bfd5                	c.j	19d58 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x50>

0000000000019d66 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)>:
#define _ELFPP_TO_HEX_HH_

#include <string>
#include <type_traits>

template <typename T> std::string to_hex(T v) {
   19d66:	7139                	c.addi16sp	sp,-64
   19d68:	fc06                	c.sdsp	ra,56(sp)
   19d6a:	f822                	c.sdsp	s0,48(sp)
   19d6c:	f426                	c.sdsp	s1,40(sp)
   19d6e:	84aa                	c.mv	s1,a0
  static_assert(std::is_integral<T>::value,
                "to_hex applied to non-integral type");
  if (v == 0)
   19d70:	c989                	c.beqz	a1,19d82 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x1c>
    return std::string("0");
  char buf[sizeof(T) * 2 + 1];
  char *pos = &buf[sizeof(buf) - 1];
  *pos-- = '\0';
   19d72:	00010c23          	sb	zero,24(sp)
   19d76:	01710413          	addi	s0,sp,23
  while (v && pos >= buf) {
    int digit = v & 0xf;
    if (digit < 10)
   19d7a:	46a5                	c.li	a3,9
  while (v && pos >= buf) {
   19d7c:	00710613          	addi	a2,sp,7
   19d80:	a825                	c.j	19db8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   19d82:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   19d86:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   19d88:	4681                	c.li	a3,0
   19d8a:	00015617          	auipc	a2,0x15
   19d8e:	32760613          	addi	a2,a2,807 # 2f0b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   19d92:	00015597          	auipc	a1,0x15
   19d96:	31e58593          	addi	a1,a1,798 # 2f0b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   19d9a:	0001f317          	auipc	t1,0x1f
   19d9e:	56e33303          	ld	t1,1390(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   19da2:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   19da4:	a099                	c.j	19dea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x84>
   19da6:	00e40023          	sb	a4,0(s0)
      *pos = '0' + digit;
    else
      *pos = 'a' + (digit - 10);
    pos--;
   19daa:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   19dae:	8191                	c.srli	a1,0x4
  while (v && pos >= buf) {
   19db0:	cd89                	c.beqz	a1,19dca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x64>
   19db2:	00c78c63          	beq	a5,a2,19dca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x64>
    pos--;
   19db6:	843e                	c.mv	s0,a5
    int digit = v & 0xf;
   19db8:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   19dbc:	05778713          	addi	a4,a5,87
    if (digit < 10)
   19dc0:	fef6c3e3          	blt	a3,a5,19da6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x40>
      *pos = '0' + digit;
   19dc4:	03078713          	addi	a4,a5,48
   19dc8:	bff9                	c.j	19da6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)+0x40>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   19dca:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   19dce:	e09c                	c.sd	a5,0(s1)
	return __builtin_strlen(__s);
   19dd0:	8522                	c.mv	a0,s0
   19dd2:	e3efc0ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   19dd6:	4681                	c.li	a3,0
   19dd8:	00a40633          	add	a2,s0,a0
   19ddc:	85a2                	c.mv	a1,s0
   19dde:	8526                	c.mv	a0,s1
   19de0:	0001f317          	auipc	t1,0x1f
   19de4:	52833303          	ld	t1,1320(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   19de8:	9302                	c.jalr	t1
  }
  return std::string(pos + 1);
}
   19dea:	8526                	c.mv	a0,s1
   19dec:	70e2                	c.ldsp	ra,56(sp)
   19dee:	7442                	c.ldsp	s0,48(sp)
   19df0:	74a2                	c.ldsp	s1,40(sp)
   19df2:	6121                	c.addi16sp	sp,64
   19df4:	8082                	c.jr	ra

0000000000019df6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   19df6:	1101                	c.addi	sp,-32
   19df8:	ec06                	c.sdsp	ra,24(sp)
   19dfa:	e822                	c.sdsp	s0,16(sp)
   19dfc:	e426                	c.sdsp	s1,8(sp)
   19dfe:	e04a                	c.sdsp	s2,0(sp)
   19e00:	892a                	c.mv	s2,a0
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   19e02:	6900                	c.ld	s0,16(a0)
   19e04:	e41d                	c.bnez	s0,19e32 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x3c>
      __builtin_memset(_M_buckets, 0,
   19e06:	00893603          	ld	a2,8(s2)
   19e0a:	060e                	c.slli	a2,0x3
   19e0c:	4581                	c.li	a1,0
   19e0e:	00093503          	ld	a0,0(s2)
   19e12:	fcefc0ef          	jal	ra,165e0 <memset@plt>
      _M_element_count = 0;
   19e16:	00093c23          	sd	zero,24(s2)
      _M_before_begin._M_nxt = nullptr;
   19e1a:	00093823          	sd	zero,16(s2)
    }
   19e1e:	60e2                	c.ldsp	ra,24(sp)
   19e20:	6442                	c.ldsp	s0,16(sp)
   19e22:	64a2                	c.ldsp	s1,8(sp)
   19e24:	6902                	c.ldsp	s2,0(sp)
   19e26:	6105                	c.addi16sp	sp,32
   19e28:	8082                	c.jr	ra
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   19e2a:	8526                	c.mv	a0,s1
   19e2c:	ee4fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19e30:	d879                	c.beqz	s0,19e06 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x10>
      _M_next() const noexcept
   19e32:	84a2                	c.mv	s1,s0
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   19e34:	6000                	c.ld	s0,0(s0)
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19e36:	7088                	c.ld	a0,32(s1)
	if (__p)
   19e38:	d96d                	c.beqz	a0,19e2a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x34>
   19e3a:	ed6fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19e3e:	b7f5                	c.j	19e2a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()+0x34>

0000000000019e40 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   19e40:	7179                	c.addi16sp	sp,-48
   19e42:	f406                	c.sdsp	ra,40(sp)
   19e44:	f022                	c.sdsp	s0,32(sp)
   19e46:	ec26                	c.sdsp	s1,24(sp)
   19e48:	e84a                	c.sdsp	s2,16(sp)
   19e4a:	e44e                	c.sdsp	s3,8(sp)
   19e4c:	842a                	c.mv	s0,a0
   19e4e:	03850993          	addi	s3,a0,56
      clear();
   19e52:	19050513          	addi	a0,a0,400
   19e56:	0001f317          	auipc	t1,0x1f
   19e5a:	48233303          	ld	t1,1154(t1) # 392d8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@@Base+0x1f4e2>
   19e5e:	9302                	c.jalr	t1
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   19e60:	19043503          	ld	a0,400(s0)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   19e64:	1c040793          	addi	a5,s0,448
	if (_M_uses_single_bucket(__bkts))
   19e68:	00f50463          	beq	a0,a5,19e70 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   19e6c:	ea4fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19e70:	17843483          	ld	s1,376(s0)
   19e74:	18043903          	ld	s2,384(s0)
   19e78:	0b249c63          	bne	s1,s2,19f30 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf0>
	_M_deallocate(_M_impl._M_start,
   19e7c:	17843503          	ld	a0,376(s0)
	if (__p)
   19e80:	c119                	c.beqz	a0,19e86 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x46>
   19e82:	e8efc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   19e86:	16843483          	ld	s1,360(s0)
   19e8a:	cc99                	c.beqz	s1,19ea8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
    if (__is_single_threaded())
   19e8c:	0001f797          	auipc	a5,0x1f
   19e90:	5f47b783          	ld	a5,1524(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19e94:	0007c783          	lbu	a5,0(a5)
   19e98:	c3cd                	c.beqz	a5,19f3a <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xfa>
    _Atomic_word __result = *__mem;
   19e9a:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   19e9c:	fff5079b          	addiw	a5,a0,-1
   19ea0:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19ea2:	4785                	c.li	a5,1
   19ea4:	0af50163          	beq	a0,a5,19f46 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x106>
class die {
   19ea8:	11040693          	addi	a3,s0,272
    for (T *p = base; p < end; ++p)
   19eac:	14043503          	ld	a0,320(s0)
   19eb0:	14843783          	ld	a5,328(s0)
   19eb4:	00f57863          	bgeu	a0,a5,19ec4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
   19eb8:	87aa                	c.mv	a5,a0
   19eba:	07a1                	c.addi	a5,8
   19ebc:	14843703          	ld	a4,328(s0)
   19ec0:	fee7ede3          	bltu	a5,a4,19eba <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7a>
    end = base;
   19ec4:	14a43423          	sd	a0,328(s0)
    if ((char *)base != buf)
   19ec8:	00a68563          	beq	a3,a0,19ed2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
      delete[] (char *)base;
   19ecc:	c119                	c.beqz	a0,19ed2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
   19ece:	ef2fc0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   19ed2:	0a040693          	addi	a3,s0,160
    for (T *p = base; p < end; ++p)
   19ed6:	6868                	c.ld	a0,208(s0)
   19ed8:	6c7c                	c.ld	a5,216(s0)
   19eda:	00f57763          	bgeu	a0,a5,19ee8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa8>
   19ede:	87aa                	c.mv	a5,a0
   19ee0:	07a1                	c.addi	a5,8
   19ee2:	6c78                	c.ld	a4,216(s0)
   19ee4:	fee7eee3          	bltu	a5,a4,19ee0 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
    end = base;
   19ee8:	ec68                	c.sd	a0,216(s0)
    if ((char *)base != buf)
   19eea:	00a68563          	beq	a3,a0,19ef4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
      delete[] (char *)base;
   19eee:	c119                	c.beqz	a0,19ef4 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb4>
   19ef0:	ed0fc0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
	if (_M_pi != nullptr)
   19ef4:	6c20                	c.ld	s0,88(s0)
   19ef6:	cc19                	c.beqz	s0,19f14 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
    if (__is_single_threaded())
   19ef8:	0001f797          	auipc	a5,0x1f
   19efc:	5887b783          	ld	a5,1416(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19f00:	0007c783          	lbu	a5,0(a5)
   19f04:	c3c1                	c.beqz	a5,19f84 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x144>
    _Atomic_word __result = *__mem;
   19f06:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   19f08:	fff5079b          	addiw	a5,a0,-1
   19f0c:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   19f0e:	4785                	c.li	a5,1
   19f10:	08f50063          	beq	a0,a5,19f90 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x150>
struct unit::impl {
   19f14:	854e                	c.mv	a0,s3
   19f16:	f2bfc0ef          	jal	ra,16e40 <dwarf::dwarf::~dwarf()>
      }
   19f1a:	70a2                	c.ldsp	ra,40(sp)
   19f1c:	7402                	c.ldsp	s0,32(sp)
   19f1e:	64e2                	c.ldsp	s1,24(sp)
   19f20:	6942                	c.ldsp	s2,16(sp)
   19f22:	69a2                	c.ldsp	s3,8(sp)
   19f24:	6145                	c.addi16sp	sp,48
   19f26:	8082                	c.jr	ra
   19f28:	02848493          	addi	s1,s1,40
   19f2c:	f49908e3          	beq	s2,s1,19e7c <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3c>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   19f30:	6888                	c.ld	a0,16(s1)
	if (__p)
   19f32:	d97d                	c.beqz	a0,19f28 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe8>
   19f34:	ddcfc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   19f38:	bfc5                	c.j	19f28 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe8>
      return __exchange_and_add(__mem, __val);
   19f3a:	55fd                	c.li	a1,-1
   19f3c:	03048513          	addi	a0,s1,48
   19f40:	c40fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19f44:	bfb9                	c.j	19ea2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x62>
	_M_dispose();
   19f46:	609c                	c.ld	a5,0(s1)
   19f48:	6b9c                	c.ld	a5,16(a5)
   19f4a:	8526                	c.mv	a0,s1
   19f4c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19f4e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19f52:	0001f797          	auipc	a5,0x1f
   19f56:	52e7b783          	ld	a5,1326(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19f5a:	0007c783          	lbu	a5,0(a5)
   19f5e:	cf89                	c.beqz	a5,19f78 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x138>
    _Atomic_word __result = *__mem;
   19f60:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   19f62:	fff5079b          	addiw	a5,a0,-1
   19f66:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19f68:	4785                	c.li	a5,1
   19f6a:	f2f51fe3          	bne	a0,a5,19ea8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
	    _M_destroy();
   19f6e:	609c                	c.ld	a5,0(s1)
   19f70:	6f9c                	c.ld	a5,24(a5)
   19f72:	8526                	c.mv	a0,s1
   19f74:	9782                	c.jalr	a5
   19f76:	bf0d                	c.j	19ea8 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x68>
      return __exchange_and_add(__mem, __val);
   19f78:	55fd                	c.li	a1,-1
   19f7a:	03448513          	addi	a0,s1,52
   19f7e:	c02fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19f82:	b7dd                	c.j	19f68 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x128>
   19f84:	55fd                	c.li	a1,-1
   19f86:	03040513          	addi	a0,s0,48
   19f8a:	bf6fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19f8e:	b741                	c.j	19f0e <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xce>
	_M_dispose();
   19f90:	601c                	c.ld	a5,0(s0)
   19f92:	6b9c                	c.ld	a5,16(a5)
   19f94:	8522                	c.mv	a0,s0
   19f96:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   19f98:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   19f9c:	0001f797          	auipc	a5,0x1f
   19fa0:	4e47b783          	ld	a5,1252(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   19fa4:	0007c783          	lbu	a5,0(a5)
   19fa8:	cf89                	c.beqz	a5,19fc2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x182>
    _Atomic_word __result = *__mem;
   19faa:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   19fac:	fff5079b          	addiw	a5,a0,-1
   19fb0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   19fb2:	4785                	c.li	a5,1
   19fb4:	f6f510e3          	bne	a0,a5,19f14 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
	    _M_destroy();
   19fb8:	601c                	c.ld	a5,0(s0)
   19fba:	6f9c                	c.ld	a5,24(a5)
   19fbc:	8522                	c.mv	a0,s0
   19fbe:	9782                	c.jalr	a5
   19fc0:	bf91                	c.j	19f14 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd4>
      return __exchange_and_add(__mem, __val);
   19fc2:	55fd                	c.li	a1,-1
   19fc4:	03440513          	addi	a0,s0,52
   19fc8:	bb8fc0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   19fcc:	b7dd                	c.j	19fb2 <std::_Sp_counted_ptr_inplace<dwarf::unit::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x172>

0000000000019fce <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   19fce:	14058863          	beq	a1,zero,1a11e <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x150>
    vector<_Tp, _Alloc>::
   19fd2:	7139                	c.addi16sp	sp,-64
   19fd4:	fc06                	c.sdsp	ra,56(sp)
   19fd6:	f822                	c.sdsp	s0,48(sp)
   19fd8:	f426                	c.sdsp	s1,40(sp)
   19fda:	f04a                	c.sdsp	s2,32(sp)
   19fdc:	ec4e                	c.sdsp	s3,24(sp)
   19fde:	e852                	c.sdsp	s4,16(sp)
   19fe0:	e456                	c.sdsp	s5,8(sp)
   19fe2:	892a                	c.mv	s2,a0
   19fe4:	84ae                	c.mv	s1,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   19fe6:	6514                	c.ld	a3,8(a0)
   19fe8:	611c                	c.ld	a5,0(a0)
   19fea:	40f68433          	sub	s0,a3,a5
   19fee:	40345993          	srai	s3,s0,0x3
   19ff2:	00013617          	auipc	a2,0x13
   19ff6:	48663603          	ld	a2,1158(a2) # 2d478 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd8>
   19ffa:	02c989b3          	mul	s3,s3,a2
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);

	  if (__size > max_size() || __navail > max_size() - __size)
   19ffe:	00013797          	auipc	a5,0x13
   1a002:	4727b783          	ld	a5,1138(a5) # 2d470 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1a006:	41378733          	sub	a4,a5,s3
					 - this->_M_impl._M_finish);
   1a00a:	691c                	c.ld	a5,16(a0)
   1a00c:	8f95                	c.sub	a5,a3
   1a00e:	878d                	c.srai	a5,0x3
   1a010:	02c787b3          	mul	a5,a5,a2
	    __builtin_unreachable();

	  if (__navail >= __n)
   1a014:	04b7e063          	bltu	a5,a1,1a054 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x86>
   1a018:	872e                	c.mv	a4,a1
      template<typename _ForwardIterator, typename _Size>
	_GLIBCXX20_CONSTEXPR
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  _ForwardIterator __cur = __first;
   1a01a:	87b6                	c.mv	a5,a3
  abbrev_entry() : code(0) {}
   1a01c:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1a020:	0007b823          	sd	zero,16(a5)
   1a024:	0007bc23          	sd	zero,24(a5)
   1a028:	0207b023          	sd	zero,32(a5)
	  __try
	    {
	      for (; __n > 0; --__n, (void) ++__cur)
   1a02c:	177d                	c.addi	a4,-1
   1a02e:	02878793          	addi	a5,a5,40
   1a032:	f76d                	c.bnez	a4,1a01c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x4e>
   1a034:	00249793          	slli	a5,s1,0x2
   1a038:	97a6                	c.add	a5,s1
   1a03a:	078e                	c.slli	a5,0x3
   1a03c:	96be                	c.add	a3,a5
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
   1a03e:	00d93423          	sd	a3,8(s2)
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
   1a042:	70e2                	c.ldsp	ra,56(sp)
   1a044:	7442                	c.ldsp	s0,48(sp)
   1a046:	74a2                	c.ldsp	s1,40(sp)
   1a048:	7902                	c.ldsp	s2,32(sp)
   1a04a:	69e2                	c.ldsp	s3,24(sp)
   1a04c:	6a42                	c.ldsp	s4,16(sp)
   1a04e:	6aa2                	c.ldsp	s5,8(sp)
   1a050:	6121                	c.addi16sp	sp,64
   1a052:	8082                	c.jr	ra
	if (max_size() - size() < __n)
   1a054:	02b76463          	bltu	a4,a1,1a07c <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xae>
	const size_type __len = size() + (std::max)(size(), __n);
   1a058:	87ae                	c.mv	a5,a1
   1a05a:	0135f363          	bgeu	a1,s3,1a060 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x92>
   1a05e:	87ce                	c.mv	a5,s3
   1a060:	97ce                	c.add	a5,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a062:	0337e363          	bltu	a5,s3,1a088 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xba>
   1a066:	8abe                	c.mv	s5,a5
   1a068:	00013717          	auipc	a4,0x13
   1a06c:	40873703          	ld	a4,1032(a4) # 2d470 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
   1a070:	00f77363          	bgeu	a4,a5,1a076 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xa8>
   1a074:	8aba                	c.mv	s5,a4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a076:	4a01                	c.li	s4,0
   1a078:	c39d                	c.beqz	a5,1a09e <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd0>
   1a07a:	a819                	c.j	1a090 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xc2>
	  __throw_length_error(__N(__s));
   1a07c:	00013517          	auipc	a0,0x13
   1a080:	0ec50513          	addi	a0,a0,236 # 2d168 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   1a084:	bbcfc0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a088:	00013a97          	auipc	s5,0x13
   1a08c:	3e8aba83          	ld	s5,1000(s5) # 2d470 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xd0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a090:	002a9513          	slli	a0,s5,0x2
   1a094:	9556                	c.add	a0,s5
   1a096:	050e                	c.slli	a0,0x3
   1a098:	c88fc0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a09c:	8a2a                	c.mv	s4,a0
		      std::__uninitialized_default_n_a(__new_start + __size,
   1a09e:	008a07b3          	add	a5,s4,s0
   1a0a2:	8726                	c.mv	a4,s1
   1a0a4:	0007b023          	sd	zero,0(a5)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1a0a8:	0007b823          	sd	zero,16(a5)
   1a0ac:	0007bc23          	sd	zero,24(a5)
   1a0b0:	0207b023          	sd	zero,32(a5)
   1a0b4:	177d                	c.addi	a4,-1
   1a0b6:	02878793          	addi	a5,a5,40
   1a0ba:	f76d                	c.bnez	a4,1a0a4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xd6>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   1a0bc:	00093503          	ld	a0,0(s2)
   1a0c0:	00893603          	ld	a2,8(s2)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
   1a0c4:	02c50863          	beq	a0,a2,1a0f4 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x126>
   1a0c8:	87aa                	c.mv	a5,a0
      _ForwardIterator __cur = __result;
   1a0ca:	8752                	c.mv	a4,s4
struct abbrev_entry {
   1a0cc:	6394                	c.ld	a3,0(a5)
   1a0ce:	e314                	c.sd	a3,0(a4)
   1a0d0:	4794                	c.lw	a3,8(a5)
   1a0d2:	c714                	c.sw	a3,8(a4)
   1a0d4:	00c7c683          	lbu	a3,12(a5)
   1a0d8:	00d70623          	sb	a3,12(a4)
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
   1a0dc:	6b94                	c.ld	a3,16(a5)
   1a0de:	eb14                	c.sd	a3,16(a4)
   1a0e0:	6f94                	c.ld	a3,24(a5)
   1a0e2:	ef14                	c.sd	a3,24(a4)
	  _M_end_of_storage(__x._M_end_of_storage)
   1a0e4:	7394                	c.ld	a3,32(a5)
   1a0e6:	f314                	c.sd	a3,32(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1a0e8:	02878793          	addi	a5,a5,40
   1a0ec:	02870713          	addi	a4,a4,40
   1a0f0:	fcf61ee3          	bne	a2,a5,1a0cc <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0xfe>
	if (__p)
   1a0f4:	c119                	c.beqz	a0,1a0fa <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x12c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a0f6:	c1afc0ef          	jal	ra,16510 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   1a0fa:	01493023          	sd	s4,0(s2)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1a0fe:	94ce                	c.add	s1,s3
   1a100:	00249793          	slli	a5,s1,0x2
   1a104:	97a6                	c.add	a5,s1
   1a106:	078e                	c.slli	a5,0x3
   1a108:	97d2                	c.add	a5,s4
   1a10a:	00f93423          	sd	a5,8(s2)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1a10e:	002a9793          	slli	a5,s5,0x2
   1a112:	97d6                	c.add	a5,s5
   1a114:	078e                	c.slli	a5,0x3
   1a116:	9a3e                	c.add	s4,a5
   1a118:	01493823          	sd	s4,16(s2)
    }
   1a11c:	b71d                	c.j	1a042 <std::vector<dwarf::abbrev_entry, std::allocator<dwarf::abbrev_entry> >::_M_default_append(unsigned long)+0x74>
   1a11e:	8082                	c.jr	ra

000000000001a120 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1a120:	1141                	c.addi	sp,-16
   1a122:	e406                	c.sdsp	ra,8(sp)
   1a124:	e022                	c.sdsp	s0,0(sp)
   1a126:	6500                	c.ld	s0,8(a0)
   1a128:	cc11                	c.beqz	s0,1a144 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()+0x24>
class type_unit : public unit {
   1a12a:	0001f797          	auipc	a5,0x1f
   1a12e:	22e7b783          	ld	a5,558(a5) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   1a132:	07c1                	c.addi	a5,16
   1a134:	e81c                	c.sd	a5,16(s0)
   1a136:	01040513          	addi	a0,s0,16
   1a13a:	dd1fc0ef          	jal	ra,16f0a <dwarf::unit::~unit()>
   1a13e:	8522                	c.mv	a0,s0
   1a140:	bd0fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1a144:	60a2                	c.ldsp	ra,8(sp)
   1a146:	6402                	c.ldsp	s0,0(sp)
   1a148:	0141                	c.addi	sp,16
   1a14a:	8082                	c.jr	ra

000000000001a14c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a14c:	86aa                	c.mv	a3,a0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1a14e:	611c                	c.ld	a5,0(a0)
   1a150:	00359713          	slli	a4,a1,0x3
   1a154:	97ba                	c.add	a5,a4
   1a156:	6388                	c.ld	a0,0(a5)
      if (!__prev_p)
   1a158:	c50d                	c.beqz	a0,1a182 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1a15a:	611c                	c.ld	a5,0(a0)
   1a15c:	6210                	c.ld	a2,0(a2)
   1a15e:	a011                	c.j	1a162 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x16>
	   __p = __p->_M_next())
   1a160:	87ba                	c.mv	a5,a4
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1a162:	6798                	c.ld	a4,8(a5)
   1a164:	00c70f63          	beq	a4,a2,1a182 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a168:	6398                	c.ld	a4,0(a5)
   1a16a:	cb19                	c.beqz	a4,1a180 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x34>
	  __prev_p = __p;
   1a16c:	853e                	c.mv	a0,a5
    { return __num % __den; }
   1a16e:	671c                	c.ld	a5,8(a4)
   1a170:	0086b803          	ld	a6,8(a3)
   1a174:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a178:	fef584e3          	beq	a1,a5,1a160 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x14>
      return nullptr;
   1a17c:	4501                	c.li	a0,0
   1a17e:	8082                	c.jr	ra
   1a180:	853a                	c.mv	a0,a4
    }
   1a182:	8082                	c.jr	ra

000000000001a184 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a184:	7179                	c.addi16sp	sp,-48
   1a186:	f406                	c.sdsp	ra,40(sp)
   1a188:	f022                	c.sdsp	s0,32(sp)
   1a18a:	ec26                	c.sdsp	s1,24(sp)
   1a18c:	84ae                	c.mv	s1,a1
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
   1a18e:	6900                	c.ld	s0,16(a0)
      while (__x != 0)
   1a190:	c409                	c.beqz	s0,1a19a <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x16>
      { return __x < __y; }
   1a192:	4194                	c.lw	a3,0(a1)
      { return static_cast<_Link_type>(__x->_M_right); }
   1a194:	4801                	c.li	a6,0
   1a196:	4605                	c.li	a2,1
   1a198:	a005                	c.j	1a1b8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x34>
      { return &this->_M_impl._M_header; }
   1a19a:	00850413          	addi	s0,a0,8
	  if (__j == begin())
   1a19e:	6d1c                	c.ld	a5,24(a0)
   1a1a0:	02878f63          	beq	a5,s0,1a1de <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x5a>
	_M_node = _Rb_tree_decrement(_M_node);
   1a1a4:	8522                	c.mv	a0,s0
   1a1a6:	b8afc0ef          	jal	ra,16530 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	return *this;
   1a1aa:	85a2                	c.mv	a1,s0
	_M_node = _Rb_tree_decrement(_M_node);
   1a1ac:	842a                	c.mv	s0,a0
	return *this;
   1a1ae:	a829                	c.j	1a1c8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x44>
      { return static_cast<_Link_type>(__x->_M_right); }
   1a1b0:	6c1c                	c.ld	a5,24(s0)
   1a1b2:	8742                	c.mv	a4,a6
      while (__x != 0)
   1a1b4:	cb81                	c.beqz	a5,1a1c4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x40>
   1a1b6:	843e                	c.mv	s0,a5
	  __x = __comp ? _S_left(__x) : _S_right(__x);
   1a1b8:	501c                	c.lw	a5,32(s0)
   1a1ba:	fef6dbe3          	bge	a3,a5,1a1b0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x2c>
      { return static_cast<_Link_type>(__x->_M_left); }
   1a1be:	681c                	c.ld	a5,16(s0)
   1a1c0:	8732                	c.mv	a4,a2
   1a1c2:	bfcd                	c.j	1a1b4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x30>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a1c4:	85a2                	c.mv	a1,s0
      if (__comp)
   1a1c6:	ff61                	c.bnez	a4,1a19e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x1a>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
   1a1c8:	5018                	c.lw	a4,32(s0)
   1a1ca:	409c                	c.lw	a5,0(s1)
   1a1cc:	00f74c63          	blt	a4,a5,1a1e4 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x60>
   1a1d0:	4581                	c.li	a1,0
    }
   1a1d2:	8522                	c.mv	a0,s0
   1a1d4:	70a2                	c.ldsp	ra,40(sp)
   1a1d6:	7402                	c.ldsp	s0,32(sp)
   1a1d8:	64e2                	c.ldsp	s1,24(sp)
   1a1da:	6145                	c.addi16sp	sp,48
   1a1dc:	8082                	c.jr	ra
   1a1de:	85a2                	c.mv	a1,s0
   1a1e0:	4401                	c.li	s0,0
   1a1e2:	bfc5                	c.j	1a1d2 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4e>
   1a1e4:	4401                	c.li	s0,0
   1a1e6:	b7f5                	c.j	1a1d2 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)+0x4e>

000000000001a1e8 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a1e8:	7139                	c.addi16sp	sp,-64
   1a1ea:	fc06                	c.sdsp	ra,56(sp)
   1a1ec:	f822                	c.sdsp	s0,48(sp)
   1a1ee:	f426                	c.sdsp	s1,40(sp)
   1a1f0:	f04a                	c.sdsp	s2,32(sp)
   1a1f2:	ec4e                	c.sdsp	s3,24(sp)
   1a1f4:	89aa                	c.mv	s3,a0
   1a1f6:	84b2                	c.mv	s1,a2
      { return &this->_M_impl._M_header; }
   1a1f8:	00850713          	addi	a4,a0,8
      if (__pos._M_node == _M_end())
   1a1fc:	02e58663          	beq	a1,a4,1a228 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x40>
   1a200:	842e                	c.mv	s0,a1
   1a202:	00062903          	lw	s2,0(a2)
   1a206:	5198                	c.lw	a4,32(a1)
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
   1a208:	06e95c63          	bge	s2,a4,1a280 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x98>
	  if (__pos._M_node == _M_leftmost()) // begin()
   1a20c:	6d18                	c.ld	a4,24(a0)
   1a20e:	04b70963          	beq	a4,a1,1a260 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x78>
	_M_node = _Rb_tree_decrement(_M_node);
   1a212:	852e                	c.mv	a0,a1
   1a214:	b1cfc0ef          	jal	ra,16530 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
   1a218:	511c                	c.lw	a5,32(a0)
   1a21a:	0527d963          	bge	a5,s2,1a26c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x84>
	      if (_S_right(__before._M_node) == 0)
   1a21e:	6d1c                	c.ld	a5,24(a0)
   1a220:	c3b9                	c.beqz	a5,1a266 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x7e>
		return _Res(__pos._M_node, __pos._M_node);
   1a222:	e022                	c.sdsp	s0,0(sp)
   1a224:	e422                	c.sdsp	s0,8(sp)
   1a226:	a025                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
   1a228:	751c                	c.ld	a5,40(a0)
   1a22a:	cb89                	c.beqz	a5,1a23c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x54>
   1a22c:	711c                	c.ld	a5,32(a0)
   1a22e:	4214                	c.lw	a3,0(a2)
   1a230:	5398                	c.lw	a4,32(a5)
   1a232:	00d75563          	bge	a4,a3,1a23c <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x54>
	    return _Res(0, _M_rightmost());
   1a236:	e002                	c.sdsp	zero,0(sp)
   1a238:	e43e                	c.sdsp	a5,8(sp)
   1a23a:	a811                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1a23c:	85a6                	c.mv	a1,s1
   1a23e:	854e                	c.mv	a0,s3
   1a240:	0001f317          	auipc	t1,0x1f
   1a244:	21033303          	ld	t1,528(t1) # 39450 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f2cc>
   1a248:	9302                	c.jalr	t1
   1a24a:	e02a                	c.sdsp	a0,0(sp)
   1a24c:	e42e                	c.sdsp	a1,8(sp)
    }
   1a24e:	6502                	c.ldsp	a0,0(sp)
   1a250:	65a2                	c.ldsp	a1,8(sp)
   1a252:	70e2                	c.ldsp	ra,56(sp)
   1a254:	7442                	c.ldsp	s0,48(sp)
   1a256:	74a2                	c.ldsp	s1,40(sp)
   1a258:	7902                	c.ldsp	s2,32(sp)
   1a25a:	69e2                	c.ldsp	s3,24(sp)
   1a25c:	6121                	c.addi16sp	sp,64
   1a25e:	8082                	c.jr	ra
	    return _Res(_M_leftmost(), _M_leftmost());
   1a260:	e03a                	c.sdsp	a4,0(sp)
   1a262:	e43a                	c.sdsp	a4,8(sp)
   1a264:	b7ed                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
		return _Res(0, __before._M_node);
   1a266:	e002                	c.sdsp	zero,0(sp)
   1a268:	e42a                	c.sdsp	a0,8(sp)
   1a26a:	b7d5                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1a26c:	85a6                	c.mv	a1,s1
   1a26e:	854e                	c.mv	a0,s3
   1a270:	0001f317          	auipc	t1,0x1f
   1a274:	1e033303          	ld	t1,480(t1) # 39450 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f2cc>
   1a278:	9302                	c.jalr	t1
   1a27a:	e02a                	c.sdsp	a0,0(sp)
   1a27c:	e42e                	c.sdsp	a1,8(sp)
   1a27e:	bfc1                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
   1a280:	05275063          	bge	a4,s2,1a2c0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xd8>
	  if (__pos._M_node == _M_rightmost())
   1a284:	7118                	c.ld	a4,32(a0)
   1a286:	00b70d63          	beq	a4,a1,1a2a0 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xb8>
	_M_node = _Rb_tree_increment(_M_node);
   1a28a:	852e                	c.mv	a0,a1
   1a28c:	a24fc0ef          	jal	ra,164b0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
   1a290:	511c                	c.lw	a5,32(a0)
   1a292:	00f95d63          	bge	s2,a5,1a2ac <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xc4>
	      if (_S_right(__pos._M_node) == 0)
   1a296:	6c1c                	c.ld	a5,24(s0)
   1a298:	c799                	c.beqz	a5,1a2a6 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0xbe>
		return _Res(__after._M_node, __after._M_node);
   1a29a:	e02a                	c.sdsp	a0,0(sp)
   1a29c:	e42a                	c.sdsp	a0,8(sp)
   1a29e:	bf45                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _Res(0, _M_rightmost());
   1a2a0:	e002                	c.sdsp	zero,0(sp)
   1a2a2:	e43a                	c.sdsp	a4,8(sp)
   1a2a4:	b76d                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
		return _Res(0, __pos._M_node);
   1a2a6:	e002                	c.sdsp	zero,0(sp)
   1a2a8:	e422                	c.sdsp	s0,8(sp)
   1a2aa:	b755                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	    return _M_get_insert_unique_pos(__k);
   1a2ac:	85a6                	c.mv	a1,s1
   1a2ae:	854e                	c.mv	a0,s3
   1a2b0:	0001f317          	auipc	t1,0x1f
   1a2b4:	1a033303          	ld	t1,416(t1) # 39450 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_unique_pos(dwarf::section_type const&)@@Base+0x1f2cc>
   1a2b8:	9302                	c.jalr	t1
   1a2ba:	e02a                	c.sdsp	a0,0(sp)
   1a2bc:	e42e                	c.sdsp	a1,8(sp)
   1a2be:	bf41                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>
	return _Res(__pos._M_node, 0);
   1a2c0:	e02e                	c.sdsp	a1,0(sp)
   1a2c2:	e402                	c.sdsp	zero,8(sp)
   1a2c4:	b769                	c.j	1a24e <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)+0x66>

000000000001a2c6 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   1a2c6:	7139                	c.addi16sp	sp,-64
   1a2c8:	fc06                	c.sdsp	ra,56(sp)
   1a2ca:	f822                	c.sdsp	s0,48(sp)
   1a2cc:	f426                	c.sdsp	s1,40(sp)
   1a2ce:	f04a                	c.sdsp	s2,32(sp)
   1a2d0:	ec4e                	c.sdsp	s3,24(sp)
   1a2d2:	84aa                	c.mv	s1,a0
   1a2d4:	892e                	c.mv	s2,a1
   1a2d6:	89b6                	c.mv	s3,a3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a2d8:	03800513          	addi	a0,zero,56
   1a2dc:	a44fc0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a2e0:	842a                	c.mv	s0,a0
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
   1a2e2:	0009b783          	ld	a5,0(s3)
   1a2e6:	0007a983          	lw	s3,0(a5)
   1a2ea:	03352023          	sw	s3,32(a0)
      : _M_ptr(0), _M_refcount()
   1a2ee:	02053423          	sd	zero,40(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1a2f2:	02053823          	sd	zero,48(a0)
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
   1a2f6:	02050613          	addi	a2,a0,32
   1a2fa:	85ca                	c.mv	a1,s2
   1a2fc:	8526                	c.mv	a0,s1
   1a2fe:	0001f317          	auipc	t1,0x1f
   1a302:	06a33303          	ld	t1,106(t1) # 39368 <std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, dwarf::section_type const&)@@Base+0x1f180>
   1a306:	9302                	c.jalr	t1
   1a308:	e02a                	c.sdsp	a0,0(sp)
   1a30a:	e42e                	c.sdsp	a1,8(sp)
	if (__res.second)
   1a30c:	cd95                	c.beqz	a1,1a348 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x82>
   1a30e:	872a                	c.mv	a4,a0
			    || _M_impl._M_key_compare(_S_key(__z),
   1a310:	4505                	c.li	a0,1
   1a312:	c31d                	c.beqz	a4,1a338 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x72>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
   1a314:	00848693          	addi	a3,s1,8
   1a318:	862e                	c.mv	a2,a1
   1a31a:	85a2                	c.mv	a1,s0
   1a31c:	824fc0ef          	jal	ra,16340 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
      ++_M_impl._M_node_count;
   1a320:	749c                	c.ld	a5,40(s1)
   1a322:	0785                	c.addi	a5,1
   1a324:	f49c                	c.sd	a5,40(s1)
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
   1a326:	84a2                	c.mv	s1,s0
      }
   1a328:	8526                	c.mv	a0,s1
   1a32a:	70e2                	c.ldsp	ra,56(sp)
   1a32c:	7442                	c.ldsp	s0,48(sp)
   1a32e:	74a2                	c.ldsp	s1,40(sp)
   1a330:	7902                	c.ldsp	s2,32(sp)
   1a332:	69e2                	c.ldsp	s3,24(sp)
   1a334:	6121                	c.addi16sp	sp,64
   1a336:	8082                	c.jr	ra
      { return &this->_M_impl._M_header; }
   1a338:	00848713          	addi	a4,s1,8
      bool __insert_left = (__x != 0 || __p == _M_end()
   1a33c:	fce58ce3          	beq	a1,a4,1a314 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x4e>
			    || _M_impl._M_key_compare(_S_key(__z),
   1a340:	5188                	c.lw	a0,32(a1)
   1a342:	00a9a533          	slt	a0,s3,a0
   1a346:	b7f9                	c.j	1a314 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x4e>
	return iterator(__res.first);
   1a348:	84aa                	c.mv	s1,a0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a34a:	8522                	c.mv	a0,s0
   1a34c:	9c4fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   1a350:	bfe1                	c.j	1a328 <std::_Rb_tree_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > std::_Rb_tree<dwarf::section_type, std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> >, std::_Select1st<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::less<dwarf::section_type>, std::allocator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<dwarf::section_type const, std::shared_ptr<dwarf::section> > >, std::piecewise_construct_t const&, std::tuple<dwarf::section_type const&>&&, std::tuple<>&&)+0x62>

000000000001a352 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   1a352:	711d                	c.addi16sp	sp,-96
   1a354:	ec86                	c.sdsp	ra,88(sp)
   1a356:	e8a2                	c.sdsp	s0,80(sp)
   1a358:	e4a6                	c.sdsp	s1,72(sp)
   1a35a:	e0ca                	c.sdsp	s2,64(sp)
   1a35c:	fc4e                	c.sdsp	s3,56(sp)
   1a35e:	f852                	c.sdsp	s4,48(sp)
   1a360:	f456                	c.sdsp	s5,40(sp)
   1a362:	f05a                	c.sdsp	s6,32(sp)
   1a364:	ec5e                	c.sdsp	s7,24(sp)
   1a366:	e862                	c.sdsp	s8,16(sp)
   1a368:	e466                	c.sdsp	s9,8(sp)
   1a36a:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1a36c:	00853983          	ld	s3,8(a0)
   1a370:	00053a83          	ld	s5,0(a0)
   1a374:	415987b3          	sub	a5,s3,s5
   1a378:	878d                	c.srai	a5,0x3
   1a37a:	00013717          	auipc	a4,0x13
   1a37e:	10e73703          	ld	a4,270(a4) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1a382:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1a386:	00013717          	auipc	a4,0x13
   1a38a:	0fa73703          	ld	a4,250(a4) # 2d480 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1a38e:	02e78a63          	beq	a5,a4,1a3c2 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x70>
   1a392:	8a2a                	c.mv	s4,a0
   1a394:	8432                	c.mv	s0,a2
   1a396:	84b6                	c.mv	s1,a3
   1a398:	892e                	c.mv	s2,a1
      return __a;
   1a39a:	873e                	c.mv	a4,a5
      if (__a < __b)
   1a39c:	03598963          	beq	s3,s5,1a3ce <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   1a3a0:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a3a2:	14f76d63          	bltu	a4,a5,1a4fc <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1aa>
   1a3a6:	8bba                	c.mv	s7,a4
   1a3a8:	00013797          	auipc	a5,0x13
   1a3ac:	0d87b783          	ld	a5,216(a5) # 2d480 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
   1a3b0:	00e7f363          	bgeu	a5,a4,1a3b6 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x64>
   1a3b4:	8bbe                	c.mv	s7,a5
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1a3b6:	41558c33          	sub	s8,a1,s5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1a3ba:	4b01                	c.li	s6,0
   1a3bc:	14070d63          	beq	a4,zero,1a516 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1c4>
   1a3c0:	a2a1                	c.j	1a508 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1b6>
	  __throw_length_error(__N(__s));
   1a3c2:	00013517          	auipc	a0,0x13
   1a3c6:	e8e50513          	addi	a0,a0,-370 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1a3ca:	876fc0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   1a3ce:	4705                	c.li	a4,1
   1a3d0:	bfc1                	c.j	1a3a0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x4e>
   1a3d2:	07590063          	beq	s2,s5,1a432 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe0>
   1a3d6:	84d6                	c.mv	s1,s5
      _ForwardIterator __cur = __result;
   1a3d8:	845a                	c.mv	s0,s6
class unit {
   1a3da:	0001fc97          	auipc	s9,0x1f
   1a3de:	1d6cbc83          	ld	s9,470(s9) # 395b0 <vtable for dwarf::unit@@Base+0xc4f8>
   1a3e2:	0cc1                	c.addi	s9,16
    return ::__libc_single_threaded;
   1a3e4:	0001fd17          	auipc	s10,0x1f
   1a3e8:	09cd3d03          	ld	s10,156(s10) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1a3ec:	0001fc17          	auipc	s8,0x1f
   1a3f0:	eccc3c03          	ld	s8,-308(s8) # 392b8 <vtable for dwarf::compilation_unit@@Base+0xc1e0>
   1a3f4:	0c41                	c.addi	s8,16
   1a3f6:	a005                	c.j	1a416 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xc4>
      __atomic_add(__mem, __val);
   1a3f8:	4585                	c.li	a1,1
   1a3fa:	03050513          	addi	a0,a0,48
   1a3fe:	f53fb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1a402:	01843023          	sd	s8,0(s0)

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   1a406:	609c                	c.ld	a5,0(s1)
   1a408:	639c                	c.ld	a5,0(a5)
   1a40a:	8526                	c.mv	a0,s1
   1a40c:	9782                	c.jalr	a5
      for (; __first != __last; ++__first, (void)++__cur)
   1a40e:	04e1                	c.addi	s1,24
   1a410:	0461                	c.addi	s0,24
   1a412:	02990163          	beq	s2,s1,1a434 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xe2>
class unit {
   1a416:	01943023          	sd	s9,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a41a:	649c                	c.ld	a5,8(s1)
   1a41c:	e41c                	c.sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1a41e:	6888                	c.ld	a0,16(s1)
   1a420:	e808                	c.sd	a0,16(s0)
	if (_M_pi != nullptr)
   1a422:	d165                	c.beqz	a0,1a402 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb0>
    if (__is_single_threaded())
   1a424:	000d4703          	lbu	a4,0(s10)
   1a428:	db61                	c.beqz	a4,1a3f8 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xa6>
  { *__mem += __val; }
   1a42a:	5918                	c.lw	a4,48(a0)
   1a42c:	2705                	c.addiw	a4,1
   1a42e:	d918                	c.sw	a4,48(a0)
   1a430:	bfc9                	c.j	1a402 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0xb0>
      _ForwardIterator __cur = __result;
   1a432:	845a                	c.mv	s0,s6
	      ++__new_finish;
   1a434:	0461                	c.addi	s0,24
      for (; __first != __last; ++__first, (void)++__cur)
   1a436:	07390063          	beq	s2,s3,1a496 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
   1a43a:	0001fc17          	auipc	s8,0x1f
   1a43e:	176c3c03          	ld	s8,374(s8) # 395b0 <vtable for dwarf::unit@@Base+0xc4f8>
   1a442:	0c41                	c.addi	s8,16
    return ::__libc_single_threaded;
   1a444:	0001fc97          	auipc	s9,0x1f
   1a448:	03ccbc83          	ld	s9,60(s9) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
  compilation_unit(compilation_unit &&o) = default;
   1a44c:	0001f497          	auipc	s1,0x1f
   1a450:	e6c4b483          	ld	s1,-404(s1) # 392b8 <vtable for dwarf::compilation_unit@@Base+0xc1e0>
   1a454:	04c1                	c.addi	s1,16
   1a456:	a005                	c.j	1a476 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x124>
      __atomic_add(__mem, __val);
   1a458:	4585                	c.li	a1,1
   1a45a:	03050513          	addi	a0,a0,48
   1a45e:	ef3fb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1a462:	e004                	c.sd	s1,0(s0)
   1a464:	00093783          	ld	a5,0(s2)
   1a468:	639c                	c.ld	a5,0(a5)
   1a46a:	854a                	c.mv	a0,s2
   1a46c:	9782                	c.jalr	a5
   1a46e:	0961                	c.addi	s2,24
   1a470:	0461                	c.addi	s0,24
   1a472:	03390263          	beq	s2,s3,1a496 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x144>
class unit {
   1a476:	01843023          	sd	s8,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1a47a:	00893783          	ld	a5,8(s2)
   1a47e:	e41c                	c.sd	a5,8(s0)
      : _M_pi(__r._M_pi)
   1a480:	01093503          	ld	a0,16(s2)
   1a484:	e808                	c.sd	a0,16(s0)
	if (_M_pi != nullptr)
   1a486:	dd71                	c.beqz	a0,1a462 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
    if (__is_single_threaded())
   1a488:	000cc703          	lbu	a4,0(s9)
   1a48c:	d771                	c.beqz	a4,1a458 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x106>
  { *__mem += __val; }
   1a48e:	5918                	c.lw	a4,48(a0)
   1a490:	2705                	c.addiw	a4,1
   1a492:	d918                	c.sw	a4,48(a0)
   1a494:	b7f9                	c.j	1a462 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x110>
	if (__p)
   1a496:	000a8563          	beq	s5,zero,1a4a0 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x14e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a49a:	8556                	c.mv	a0,s5
   1a49c:	874fc0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1a4a0:	016a3023          	sd	s6,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1a4a4:	008a3423          	sd	s0,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1a4a8:	001b9793          	slli	a5,s7,0x1
   1a4ac:	97de                	c.add	a5,s7
   1a4ae:	078e                	c.slli	a5,0x3
   1a4b0:	97da                	c.add	a5,s6
   1a4b2:	00fa3823          	sd	a5,16(s4)
    }
   1a4b6:	60e6                	c.ldsp	ra,88(sp)
   1a4b8:	6446                	c.ldsp	s0,80(sp)
   1a4ba:	64a6                	c.ldsp	s1,72(sp)
   1a4bc:	6906                	c.ldsp	s2,64(sp)
   1a4be:	79e2                	c.ldsp	s3,56(sp)
   1a4c0:	7a42                	c.ldsp	s4,48(sp)
   1a4c2:	7aa2                	c.ldsp	s5,40(sp)
   1a4c4:	7b02                	c.ldsp	s6,32(sp)
   1a4c6:	6be2                	c.ldsp	s7,24(sp)
   1a4c8:	6c42                	c.ldsp	s8,16(sp)
   1a4ca:	6ca2                	c.ldsp	s9,8(sp)
   1a4cc:	6d02                	c.ldsp	s10,0(sp)
   1a4ce:	6125                	c.addi16sp	sp,96
   1a4d0:	8082                	c.jr	ra
      __catch(...)
   1a4d2:	f2ffb0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   1a4d6:	000b1f63          	bne	s6,zero,1a4f4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x1a2>
	{ __p->~_Up(); }
   1a4da:	000c3783          	ld	a5,0(s8)
   1a4de:	639c                	c.ld	a5,0(a5)
   1a4e0:	8562                	c.mv	a0,s8
   1a4e2:	9782                	c.jalr	a5
	  __throw_exception_again;
   1a4e4:	93cfc0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   1a4e8:	842a                	c.mv	s0,a0
   1a4ea:	9a6fc0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1a4ee:	8522                	c.mv	a0,s0
   1a4f0:	a00fc0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a4f4:	855a                	c.mv	a0,s6
   1a4f6:	81afc0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1a4fa:	b7ed                	c.j	1a4e4 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x192>
   1a4fc:	41558c33          	sub	s8,a1,s5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1a500:	00013b97          	auipc	s7,0x13
   1a504:	f80bbb83          	ld	s7,-128(s7) # 2d480 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe0>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a508:	001b9513          	slli	a0,s7,0x1
   1a50c:	955e                	c.add	a0,s7
   1a50e:	050e                	c.slli	a0,0x3
   1a510:	810fc0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a514:	8b2a                	c.mv	s6,a0
	  _Alloc_traits::construct(this->_M_impl,
   1a516:	9c5a                	c.add	s8,s6
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1a518:	6090                	c.ld	a2,0(s1)
   1a51a:	85a2                	c.mv	a1,s0
   1a51c:	8562                	c.mv	a0,s8
   1a51e:	deffc0ef          	jal	ra,1730c <dwarf::compilation_unit::compilation_unit(dwarf::dwarf const&, unsigned long)>
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
   1a522:	bd45                	c.j	1a3d2 <void std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> >::_M_realloc_insert<dwarf::dwarf&, unsigned long>(__gnu_cxx::__normal_iterator<dwarf::compilation_unit*, std::vector<dwarf::compilation_unit, std::allocator<dwarf::compilation_unit> > >, dwarf::dwarf&, unsigned long&&)+0x80>

000000000001a524 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a524:	86aa                	c.mv	a3,a0
      __node_base_ptr __prev_p = _M_buckets[__bkt];
   1a526:	611c                	c.ld	a5,0(a0)
   1a528:	00359713          	slli	a4,a1,0x3
   1a52c:	97ba                	c.add	a5,a4
   1a52e:	6388                	c.ld	a0,0(a5)
      if (!__prev_p)
   1a530:	c50d                	c.beqz	a0,1a55a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
   1a532:	611c                	c.ld	a5,0(a0)
      { return __x == __y; }
   1a534:	6210                	c.ld	a2,0(a2)
   1a536:	a011                	c.j	1a53a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x16>
	   __p = __p->_M_next())
   1a538:	87ba                	c.mv	a5,a4
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
   1a53a:	6798                	c.ld	a4,8(a5)
   1a53c:	00c70f63          	beq	a4,a2,1a55a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x36>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a540:	6398                	c.ld	a4,0(a5)
   1a542:	cb19                	c.beqz	a4,1a558 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x34>
	  __prev_p = __p;
   1a544:	853e                	c.mv	a0,a5
    { return __num % __den; }
   1a546:	671c                	c.ld	a5,8(a4)
   1a548:	0086b803          	ld	a6,8(a3)
   1a54c:	0307f7b3          	remu	a5,a5,a6
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
   1a550:	fef584e3          	beq	a1,a5,1a538 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const+0x14>
      return nullptr;
   1a554:	4501                	c.li	a0,0
   1a556:	8082                	c.jr	ra
   1a558:	853a                	c.mv	a0,a4
    }
   1a55a:	8082                	c.jr	ra

000000000001a55c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a55c:	7179                	c.addi16sp	sp,-48
   1a55e:	f406                	c.sdsp	ra,40(sp)
   1a560:	f022                	c.sdsp	s0,32(sp)
   1a562:	ec26                	c.sdsp	s1,24(sp)
   1a564:	e84a                	c.sdsp	s2,16(sp)
   1a566:	e44e                	c.sdsp	s3,8(sp)
   1a568:	84aa                	c.mv	s1,a0
   1a56a:	842e                	c.mv	s0,a1
	if (__builtin_expect(__bkt_count == 1, false))
   1a56c:	4785                	c.li	a5,1
   1a56e:	02f58863          	beq	a1,a5,1a59e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x42>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1a572:	57fd                	c.li	a5,-1
   1a574:	8391                	c.srli	a5,0x4
   1a576:	02b7e963          	bltu	a5,a1,1a5a8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x4c>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a57a:	00359993          	slli	s3,a1,0x3
   1a57e:	854e                	c.mv	a0,s3
   1a580:	fa1fb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a584:	892a                	c.mv	s2,a0
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1a586:	864e                	c.mv	a2,s3
   1a588:	4581                	c.li	a1,0
   1a58a:	856fc0ef          	jal	ra,165e0 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a58e:	6890                	c.ld	a2,16(s1)
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
   1a590:	0004b823          	sd	zero,16(s1)
      std::size_t __bbegin_bkt = 0;
      while (__p)
   1a594:	c235                	c.beqz	a2,1a5f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      std::size_t __bbegin_bkt = 0;
   1a596:	4581                	c.li	a1,0
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
	  if (!__new_buckets[__bkt])
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
	      _M_before_begin._M_nxt = __p;
	      __new_buckets[__bkt] = &_M_before_begin;
   1a598:	01048893          	addi	a7,s1,16
   1a59c:	a025                	c.j	1a5c4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	    _M_single_bucket = nullptr;
   1a59e:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1a5a2:	03050913          	addi	s2,a0,48
   1a5a6:	b7e5                	c.j	1a58e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x32>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1a5a8:	57fd                	c.li	a5,-1
   1a5aa:	838d                	c.srli	a5,0x3
   1a5ac:	00b7f463          	bgeu	a5,a1,1a5b4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x58>
	      std::__throw_bad_array_new_length();
   1a5b0:	f41fb0ef          	jal	ra,164f0 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1a5b4:	e2dfb0ef          	jal	ra,163e0 <std::__throw_bad_alloc()@plt>
		__new_buckets[__bbegin_bkt] = __p;
	      __bbegin_bkt = __bkt;
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1a5b8:	00083683          	ld	a3,0(a6)
   1a5bc:	e314                	c.sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1a5be:	639c                	c.ld	a5,0(a5)
   1a5c0:	e398                	c.sd	a4,0(a5)
      while (__p)
   1a5c2:	ca1d                	c.beqz	a2,1a5f8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      _M_next() const noexcept
   1a5c4:	8732                	c.mv	a4,a2
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1a5c6:	6210                	c.ld	a2,0(a2)
    { return __num % __den; }
   1a5c8:	6714                	c.ld	a3,8(a4)
   1a5ca:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1a5ce:	00369793          	slli	a5,a3,0x3
   1a5d2:	97ca                	c.add	a5,s2
   1a5d4:	0007b803          	ld	a6,0(a5)
   1a5d8:	fe0810e3          	bne	a6,zero,1a5b8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x5c>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1a5dc:	6888                	c.ld	a0,16(s1)
   1a5de:	e308                	c.sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1a5e0:	e898                	c.sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1a5e2:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1a5e6:	631c                	c.ld	a5,0(a4)
   1a5e8:	c791                	c.beqz	a5,1a5f4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
		__new_buckets[__bbegin_bkt] = __p;
   1a5ea:	058e                	c.slli	a1,0x3
   1a5ec:	95ca                	c.add	a1,s2
   1a5ee:	e198                	c.sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1a5f0:	85b6                	c.mv	a1,a3
   1a5f2:	bfc1                	c.j	1a5c2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
   1a5f4:	85b6                	c.mv	a1,a3
   1a5f6:	b7f1                	c.j	1a5c2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1a5f8:	6088                	c.ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1a5fa:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1a5fe:	00f50463          	beq	a0,a5,1a606 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a602:	f0ffb0ef          	jal	ra,16510 <operator delete(void*)@plt>

	  __p = __next;
	}

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
   1a606:	e480                	c.sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1a608:	0124b023          	sd	s2,0(s1)
    }
   1a60c:	70a2                	c.ldsp	ra,40(sp)
   1a60e:	7402                	c.ldsp	s0,32(sp)
   1a610:	64e2                	c.ldsp	s1,24(sp)
   1a612:	6942                	c.ldsp	s2,16(sp)
   1a614:	69a2                	c.ldsp	s3,8(sp)
   1a616:	6145                	c.addi16sp	sp,48
   1a618:	8082                	c.jr	ra

000000000001a61a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a61a:	7139                	c.addi16sp	sp,-64
   1a61c:	fc06                	c.sdsp	ra,56(sp)
   1a61e:	f822                	c.sdsp	s0,48(sp)
   1a620:	f426                	c.sdsp	s1,40(sp)
   1a622:	f04a                	c.sdsp	s2,32(sp)
   1a624:	ec4e                	c.sdsp	s3,24(sp)
   1a626:	e852                	c.sdsp	s4,16(sp)
   1a628:	842a                	c.mv	s0,a0
   1a62a:	84ae                	c.mv	s1,a1
   1a62c:	89b2                	c.mv	s3,a2
   1a62e:	8936                	c.mv	s2,a3
    { return _M_next_resize; }
   1a630:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1a634:	86ba                	c.mv	a3,a4
   1a636:	6d10                	c.ld	a2,24(a0)
   1a638:	650c                	c.ld	a1,8(a0)
   1a63a:	02050513          	addi	a0,a0,32
   1a63e:	f93fb0ef          	jal	ra,165d0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1a642:	e02a                	c.sdsp	a0,0(sp)
   1a644:	e42e                	c.sdsp	a1,8(sp)
      if (__do_rehash.first)
   1a646:	0ff57513          	andi	a0,a0,255
   1a64a:	e91d                	c.bnez	a0,1a680 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x66>
      if (_M_buckets[__bkt])
   1a64c:	00349593          	slli	a1,s1,0x3
   1a650:	601c                	c.ld	a5,0(s0)
   1a652:	97ae                	c.add	a5,a1
   1a654:	639c                	c.ld	a5,0(a5)
   1a656:	cfa9                	c.beqz	a5,1a6b0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x96>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1a658:	639c                	c.ld	a5,0(a5)
   1a65a:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1a65e:	601c                	c.ld	a5,0(s0)
   1a660:	97ae                	c.add	a5,a1
   1a662:	639c                	c.ld	a5,0(a5)
   1a664:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1a668:	6c1c                	c.ld	a5,24(s0)
   1a66a:	0785                	c.addi	a5,1
   1a66c:	ec1c                	c.sd	a5,24(s0)
    }
   1a66e:	854a                	c.mv	a0,s2
   1a670:	70e2                	c.ldsp	ra,56(sp)
   1a672:	7442                	c.ldsp	s0,48(sp)
   1a674:	74a2                	c.ldsp	s1,40(sp)
   1a676:	7902                	c.ldsp	s2,32(sp)
   1a678:	69e2                	c.ldsp	s3,24(sp)
   1a67a:	6a42                	c.ldsp	s4,16(sp)
   1a67c:	6121                	c.addi16sp	sp,64
   1a67e:	8082                	c.jr	ra
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1a680:	4601                	c.li	a2,0
   1a682:	8522                	c.mv	a0,s0
   1a684:	0001f317          	auipc	t1,0x1f
   1a688:	d5433303          	ld	t1,-684(t1) # 393d8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x1ee7c>
   1a68c:	9302                	c.jalr	t1
   1a68e:	a829                	c.j	1a6a8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x8e>
      __catch(...)
   1a690:	d71fb0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1a694:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1a698:	f89fb0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   1a69c:	842a                	c.mv	s0,a0
   1a69e:	ff3fb0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1a6a2:	8522                	c.mv	a0,s0
   1a6a4:	84cfc0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    { return __num % __den; }
   1a6a8:	640c                	c.ld	a1,8(s0)
   1a6aa:	02b9f4b3          	remu	s1,s3,a1
   1a6ae:	bf79                	c.j	1a64c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x32>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1a6b0:	681c                	c.ld	a5,16(s0)
   1a6b2:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1a6b6:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1a6ba:	00093783          	ld	a5,0(s2)
   1a6be:	cb91                	c.beqz	a5,1a6d2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0xb8>
   1a6c0:	679c                	c.ld	a5,8(a5)
   1a6c2:	6418                	c.ld	a4,8(s0)
   1a6c4:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1a6c8:	6018                	c.ld	a4,0(s0)
   1a6ca:	078e                	c.slli	a5,0x3
   1a6cc:	97ba                	c.add	a5,a4
   1a6ce:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1a6d2:	601c                	c.ld	a5,0(s0)
   1a6d4:	97ae                	c.add	a5,a1
   1a6d6:	01040713          	addi	a4,s0,16
   1a6da:	e398                	c.sd	a4,0(a5)
   1a6dc:	b771                	c.j	1a668 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)+0x4e>

000000000001a6de <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1a6de:	7139                	c.addi16sp	sp,-64
   1a6e0:	fc06                	c.sdsp	ra,56(sp)
   1a6e2:	f822                	c.sdsp	s0,48(sp)
   1a6e4:	f426                	c.sdsp	s1,40(sp)
   1a6e6:	f04a                	c.sdsp	s2,32(sp)
   1a6e8:	ec4e                	c.sdsp	s3,24(sp)
   1a6ea:	84aa                	c.mv	s1,a0
   1a6ec:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1a6ee:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1a6f2:	00853903          	ld	s2,8(a0)
   1a6f6:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a6fa:	86ce                	c.mv	a3,s3
   1a6fc:	862e                	c.mv	a2,a1
   1a6fe:	85ca                	c.mv	a1,s2
   1a700:	0001f317          	auipc	t1,0x1f
   1a704:	c1833303          	ld	t1,-1000(t1) # 39318 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f1cc>
   1a708:	9302                	c.jalr	t1
	if (__before_n)
   1a70a:	c919                	c.beqz	a0,1a720 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x42>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1a70c:	6108                	c.ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1a70e:	c909                	c.beqz	a0,1a720 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x42>
	return __node->_M_v().second;
   1a710:	0541                	c.addi	a0,16
    }
   1a712:	70e2                	c.ldsp	ra,56(sp)
   1a714:	7442                	c.ldsp	s0,48(sp)
   1a716:	74a2                	c.ldsp	s1,40(sp)
   1a718:	7902                	c.ldsp	s2,32(sp)
   1a71a:	69e2                	c.ldsp	s3,24(sp)
   1a71c:	6121                	c.addi16sp	sp,64
   1a71e:	8082                	c.jr	ra
	  : _M_h(__h),
   1a720:	e026                	c.sdsp	s1,0(sp)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a722:	02800513          	addi	a0,zero,40
   1a726:	dfbfb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a72a:	86aa                	c.mv	a3,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1a72c:	00053023          	sd	zero,0(a0)
   1a730:	601c                	c.ld	a5,0(s0)
   1a732:	e51c                	c.sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1a734:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1a738:	02053023          	sd	zero,32(a0)
  type_unit() = default;
   1a73c:	0001f797          	auipc	a5,0x1f
   1a740:	c1c7b783          	ld	a5,-996(a5) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   1a744:	07c1                	c.addi	a5,16
   1a746:	e91c                	c.sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1a748:	e42a                	c.sdsp	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1a74a:	4705                	c.li	a4,1
   1a74c:	864e                	c.mv	a2,s3
   1a74e:	85ca                	c.mv	a1,s2
   1a750:	8526                	c.mv	a0,s1
   1a752:	0001f317          	auipc	t1,0x1f
   1a756:	c7e33303          	ld	t1,-898(t1) # 393d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x1edb6>
   1a75a:	9302                	c.jalr	t1
      return __pos->second;
   1a75c:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1a75e:	bf55                	c.j	1a712 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long&&)+0x34>
    }
   1a760:	842a                	c.mv	s0,a0
   1a762:	850a                	c.mv	a0,sp
   1a764:	0001f317          	auipc	t1,0x1f
   1a768:	c2433303          	ld	t1,-988(t1) # 39388 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x1f268>
   1a76c:	9302                	c.jalr	t1
   1a76e:	8522                	c.mv	a0,s0
   1a770:	f81fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001a774 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1a774:	7139                	c.addi16sp	sp,-64
   1a776:	fc06                	c.sdsp	ra,56(sp)
   1a778:	f822                	c.sdsp	s0,48(sp)
   1a77a:	f426                	c.sdsp	s1,40(sp)
   1a77c:	f04a                	c.sdsp	s2,32(sp)
   1a77e:	ec4e                	c.sdsp	s3,24(sp)
   1a780:	84aa                	c.mv	s1,a0
   1a782:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1a784:	0005b983          	ld	s3,0(a1)
    { return __num % __den; }
   1a788:	00853903          	ld	s2,8(a0)
   1a78c:	0329f933          	remu	s2,s3,s2
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a790:	86ce                	c.mv	a3,s3
   1a792:	862e                	c.mv	a2,a1
   1a794:	85ca                	c.mv	a1,s2
   1a796:	0001f317          	auipc	t1,0x1f
   1a79a:	b8233303          	ld	t1,-1150(t1) # 39318 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f1cc>
   1a79e:	9302                	c.jalr	t1
	if (__before_n)
   1a7a0:	c919                	c.beqz	a0,1a7b6 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x42>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1a7a2:	6108                	c.ld	a0,0(a0)
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1a7a4:	c909                	c.beqz	a0,1a7b6 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x42>
	return __node->_M_v().second;
   1a7a6:	0541                	c.addi	a0,16
    }
   1a7a8:	70e2                	c.ldsp	ra,56(sp)
   1a7aa:	7442                	c.ldsp	s0,48(sp)
   1a7ac:	74a2                	c.ldsp	s1,40(sp)
   1a7ae:	7902                	c.ldsp	s2,32(sp)
   1a7b0:	69e2                	c.ldsp	s3,24(sp)
   1a7b2:	6121                	c.addi16sp	sp,64
   1a7b4:	8082                	c.jr	ra
	  : _M_h(__h),
   1a7b6:	e026                	c.sdsp	s1,0(sp)
   1a7b8:	02800513          	addi	a0,zero,40
   1a7bc:	d65fb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a7c0:	86aa                	c.mv	a3,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1a7c2:	00053023          	sd	zero,0(a0)
   1a7c6:	601c                	c.ld	a5,0(s0)
   1a7c8:	e51c                	c.sd	a5,8(a0)
      : _M_ptr(0), _M_refcount()
   1a7ca:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   1a7ce:	02053023          	sd	zero,32(a0)
   1a7d2:	0001f797          	auipc	a5,0x1f
   1a7d6:	b867b783          	ld	a5,-1146(a5) # 39358 <vtable for dwarf::type_unit@@Base+0xa00>
   1a7da:	07c1                	c.addi	a5,16
   1a7dc:	e91c                	c.sd	a5,16(a0)
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   1a7de:	e42a                	c.sdsp	a0,8(sp)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1a7e0:	4705                	c.li	a4,1
   1a7e2:	864e                	c.mv	a2,s3
   1a7e4:	85ca                	c.mv	a1,s2
   1a7e6:	8526                	c.mv	a0,s1
   1a7e8:	0001f317          	auipc	t1,0x1f
   1a7ec:	be833303          	ld	t1,-1048(t1) # 393d0 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::type_unit>, false>*, unsigned long)@@Base+0x1edb6>
   1a7f0:	9302                	c.jalr	t1
      return __pos->second;
   1a7f2:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1a7f4:	bf55                	c.j	1a7a8 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x34>
    }
   1a7f6:	842a                	c.mv	s0,a0
   1a7f8:	850a                	c.mv	a0,sp
   1a7fa:	0001f317          	auipc	t1,0x1f
   1a7fe:	b8e33303          	ld	t1,-1138(t1) # 39388 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::type_unit>, std::allocator<std::pair<unsigned long const, dwarf::type_unit> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@@Base+0x1f268>
   1a802:	9302                	c.jalr	t1
   1a804:	8522                	c.mv	a0,s0
   1a806:	eebfb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001a80a <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a80a:	7179                	c.addi16sp	sp,-48
   1a80c:	f406                	c.sdsp	ra,40(sp)
   1a80e:	f022                	c.sdsp	s0,32(sp)
   1a810:	ec26                	c.sdsp	s1,24(sp)
   1a812:	e84a                	c.sdsp	s2,16(sp)
   1a814:	e44e                	c.sdsp	s3,8(sp)
   1a816:	84aa                	c.mv	s1,a0
   1a818:	842e                	c.mv	s0,a1
	if (__builtin_expect(__bkt_count == 1, false))
   1a81a:	4785                	c.li	a5,1
   1a81c:	02f58863          	beq	a1,a5,1a84c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x42>
	if (__builtin_expect(__n > this->_M_max_size(), false))
   1a820:	57fd                	c.li	a5,-1
   1a822:	8391                	c.srli	a5,0x4
   1a824:	02b7e963          	bltu	a5,a1,1a856 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x4c>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a828:	00359993          	slli	s3,a1,0x3
   1a82c:	854e                	c.mv	a0,s3
   1a82e:	cf3fb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a832:	892a                	c.mv	s2,a0
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   1a834:	864e                	c.mv	a2,s3
   1a836:	4581                	c.li	a1,0
   1a838:	da9fb0ef          	jal	ra,165e0 <memset@plt>
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
   1a83c:	6890                	c.ld	a2,16(s1)
      _M_before_begin._M_nxt = nullptr;
   1a83e:	0004b823          	sd	zero,16(s1)
      while (__p)
   1a842:	c235                	c.beqz	a2,1a8a6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      std::size_t __bbegin_bkt = 0;
   1a844:	4581                	c.li	a1,0
	      __new_buckets[__bkt] = &_M_before_begin;
   1a846:	01048893          	addi	a7,s1,16
   1a84a:	a025                	c.j	1a872 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x68>
	    _M_single_bucket = nullptr;
   1a84c:	02053823          	sd	zero,48(a0)
	    return &_M_single_bucket;
   1a850:	03050913          	addi	s2,a0,48
   1a854:	b7e5                	c.j	1a83c <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x32>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
   1a856:	57fd                	c.li	a5,-1
   1a858:	838d                	c.srli	a5,0x3
   1a85a:	00b7f463          	bgeu	a5,a1,1a862 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x58>
	      std::__throw_bad_array_new_length();
   1a85e:	c93fb0ef          	jal	ra,164f0 <std::__throw_bad_array_new_length()@plt>
	    std::__throw_bad_alloc();
   1a862:	b7ffb0ef          	jal	ra,163e0 <std::__throw_bad_alloc()@plt>
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
   1a866:	00083683          	ld	a3,0(a6)
   1a86a:	e314                	c.sd	a3,0(a4)
	      __new_buckets[__bkt]->_M_nxt = __p;
   1a86c:	639c                	c.ld	a5,0(a5)
   1a86e:	e398                	c.sd	a4,0(a5)
      while (__p)
   1a870:	ca1d                	c.beqz	a2,1a8a6 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x9c>
      _M_next() const noexcept
   1a872:	8732                	c.mv	a4,a2
      { return static_cast<_Hash_node*>(this->_M_nxt); }
   1a874:	6210                	c.ld	a2,0(a2)
    { return __num % __den; }
   1a876:	6714                	c.ld	a3,8(a4)
   1a878:	0286f6b3          	remu	a3,a3,s0
	  if (!__new_buckets[__bkt])
   1a87c:	00369793          	slli	a5,a3,0x3
   1a880:	97ca                	c.add	a5,s2
   1a882:	0007b803          	ld	a6,0(a5)
   1a886:	fe0810e3          	bne	a6,zero,1a866 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x5c>
	      __p->_M_nxt = _M_before_begin._M_nxt;
   1a88a:	6888                	c.ld	a0,16(s1)
   1a88c:	e308                	c.sd	a0,0(a4)
	      _M_before_begin._M_nxt = __p;
   1a88e:	e898                	c.sd	a4,16(s1)
	      __new_buckets[__bkt] = &_M_before_begin;
   1a890:	0117b023          	sd	a7,0(a5)
	      if (__p->_M_nxt)
   1a894:	631c                	c.ld	a5,0(a4)
   1a896:	c791                	c.beqz	a5,1a8a2 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x98>
		__new_buckets[__bbegin_bkt] = __p;
   1a898:	058e                	c.slli	a1,0x3
   1a89a:	95ca                	c.add	a1,s2
   1a89c:	e198                	c.sd	a4,0(a1)
	      __bbegin_bkt = __bkt;
   1a89e:	85b6                	c.mv	a1,a3
   1a8a0:	bfc1                	c.j	1a870 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
   1a8a2:	85b6                	c.mv	a1,a3
   1a8a4:	b7f1                	c.j	1a870 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x66>
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
   1a8a6:	6088                	c.ld	a0,0(s1)
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
   1a8a8:	03048793          	addi	a5,s1,48
	if (_M_uses_single_bucket(__bkts))
   1a8ac:	00f50463          	beq	a0,a5,1a8b4 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1a8b0:	c61fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      _M_bucket_count = __bkt_count;
   1a8b4:	e480                	c.sd	s0,8(s1)
      _M_buckets = __new_buckets;
   1a8b6:	0124b023          	sd	s2,0(s1)
    }
   1a8ba:	70a2                	c.ldsp	ra,40(sp)
   1a8bc:	7402                	c.ldsp	s0,32(sp)
   1a8be:	64e2                	c.ldsp	s1,24(sp)
   1a8c0:	6942                	c.ldsp	s2,16(sp)
   1a8c2:	69a2                	c.ldsp	s3,8(sp)
   1a8c4:	6145                	c.addi16sp	sp,48
   1a8c6:	8082                	c.jr	ra

000000000001a8c8 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   1a8c8:	7139                	c.addi16sp	sp,-64
   1a8ca:	fc06                	c.sdsp	ra,56(sp)
   1a8cc:	f822                	c.sdsp	s0,48(sp)
   1a8ce:	f426                	c.sdsp	s1,40(sp)
   1a8d0:	f04a                	c.sdsp	s2,32(sp)
   1a8d2:	ec4e                	c.sdsp	s3,24(sp)
   1a8d4:	e852                	c.sdsp	s4,16(sp)
   1a8d6:	842a                	c.mv	s0,a0
   1a8d8:	84ae                	c.mv	s1,a1
   1a8da:	89b2                	c.mv	s3,a2
   1a8dc:	8936                	c.mv	s2,a3
    { return _M_next_resize; }
   1a8de:	02853a03          	ld	s4,40(a0)
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
   1a8e2:	86ba                	c.mv	a3,a4
   1a8e4:	6d10                	c.ld	a2,24(a0)
   1a8e6:	650c                	c.ld	a1,8(a0)
   1a8e8:	02050513          	addi	a0,a0,32
   1a8ec:	ce5fb0ef          	jal	ra,165d0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
   1a8f0:	e02a                	c.sdsp	a0,0(sp)
   1a8f2:	e42e                	c.sdsp	a1,8(sp)
      if (__do_rehash.first)
   1a8f4:	0ff57513          	andi	a0,a0,255
   1a8f8:	e91d                	c.bnez	a0,1a92e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x66>
      if (_M_buckets[__bkt])
   1a8fa:	00349593          	slli	a1,s1,0x3
   1a8fe:	601c                	c.ld	a5,0(s0)
   1a900:	97ae                	c.add	a5,a1
   1a902:	639c                	c.ld	a5,0(a5)
   1a904:	cfa9                	c.beqz	a5,1a95e <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x96>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   1a906:	639c                	c.ld	a5,0(a5)
   1a908:	00f93023          	sd	a5,0(s2)
	  _M_buckets[__bkt]->_M_nxt = __node;
   1a90c:	601c                	c.ld	a5,0(s0)
   1a90e:	97ae                	c.add	a5,a1
   1a910:	639c                	c.ld	a5,0(a5)
   1a912:	0127b023          	sd	s2,0(a5)
      ++_M_element_count;
   1a916:	6c1c                	c.ld	a5,24(s0)
   1a918:	0785                	c.addi	a5,1
   1a91a:	ec1c                	c.sd	a5,24(s0)
    }
   1a91c:	854a                	c.mv	a0,s2
   1a91e:	70e2                	c.ldsp	ra,56(sp)
   1a920:	7442                	c.ldsp	s0,48(sp)
   1a922:	74a2                	c.ldsp	s1,40(sp)
   1a924:	7902                	c.ldsp	s2,32(sp)
   1a926:	69e2                	c.ldsp	s3,24(sp)
   1a928:	6a42                	c.ldsp	s4,16(sp)
   1a92a:	6121                	c.addi16sp	sp,64
   1a92c:	8082                	c.jr	ra
	  _M_rehash_aux(__bkt_count, __unique_keys{});
   1a92e:	4601                	c.li	a2,0
   1a930:	8522                	c.mv	a0,s0
   1a932:	0001f317          	auipc	t1,0x1f
   1a936:	96633303          	ld	t1,-1690(t1) # 39298 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)@@Base+0x1ea8e>
   1a93a:	9302                	c.jalr	t1
   1a93c:	a829                	c.j	1a956 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x8e>
      __catch(...)
   1a93e:	ac3fb0ef          	jal	ra,16400 <__cxa_begin_catch@plt>
    { _M_next_resize = __state; }
   1a942:	03443423          	sd	s4,40(s0)
	  __throw_exception_again;
   1a946:	cdbfb0ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   1a94a:	842a                	c.mv	s0,a0
   1a94c:	d45fb0ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1a950:	8522                	c.mv	a0,s0
   1a952:	d9ffb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    { return __num % __den; }
   1a956:	640c                	c.ld	a1,8(s0)
   1a958:	02b9f4b3          	remu	s1,s3,a1
   1a95c:	bf79                	c.j	1a8fa <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x32>
	  __node->_M_nxt = _M_before_begin._M_nxt;
   1a95e:	681c                	c.ld	a5,16(s0)
   1a960:	00f93023          	sd	a5,0(s2)
	  _M_before_begin._M_nxt = __node;
   1a964:	01243823          	sd	s2,16(s0)
	  if (__node->_M_nxt)
   1a968:	00093783          	ld	a5,0(s2)
   1a96c:	cb91                	c.beqz	a5,1a980 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0xb8>
   1a96e:	679c                	c.ld	a5,8(a5)
   1a970:	6418                	c.ld	a4,8(s0)
   1a972:	02e7f7b3          	remu	a5,a5,a4
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
   1a976:	6018                	c.ld	a4,0(s0)
   1a978:	078e                	c.slli	a5,0x3
   1a97a:	97ba                	c.add	a5,a4
   1a97c:	0127b023          	sd	s2,0(a5)
	  _M_buckets[__bkt] = &_M_before_begin;
   1a980:	601c                	c.ld	a5,0(s0)
   1a982:	97ae                	c.add	a5,a1
   1a984:	01040713          	addi	a4,s0,16
   1a988:	e398                	c.sd	a4,0(a5)
   1a98a:	b771                	c.j	1a916 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)+0x4e>

000000000001a98c <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)>:
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
   1a98c:	7179                	c.addi16sp	sp,-48
   1a98e:	f406                	c.sdsp	ra,40(sp)
   1a990:	f022                	c.sdsp	s0,32(sp)
   1a992:	ec26                	c.sdsp	s1,24(sp)
   1a994:	e84a                	c.sdsp	s2,16(sp)
   1a996:	e44e                	c.sdsp	s3,8(sp)
   1a998:	e052                	c.sdsp	s4,0(sp)
   1a99a:	892a                	c.mv	s2,a0
   1a99c:	842e                	c.mv	s0,a1
	return _M_hash()(__k);
   1a99e:	0005ba03          	ld	s4,0(a1)
    { return __num % __den; }
   1a9a2:	00853983          	ld	s3,8(a0)
   1a9a6:	033a79b3          	remu	s3,s4,s3
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
   1a9aa:	86d2                	c.mv	a3,s4
   1a9ac:	862e                	c.mv	a2,a1
   1a9ae:	85ce                	c.mv	a1,s3
   1a9b0:	0001f317          	auipc	t1,0x1f
   1a9b4:	b9833303          	ld	t1,-1128(t1) # 39548 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const@@Base+0x1f024>
   1a9b8:	9302                	c.jalr	t1
	if (__before_n)
   1a9ba:	cd09                	c.beqz	a0,1a9d4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x48>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
   1a9bc:	611c                	c.ld	a5,0(a0)
	return __node->_M_v().second;
   1a9be:	01078513          	addi	a0,a5,16
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   1a9c2:	cb89                	c.beqz	a5,1a9d4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x48>
    }
   1a9c4:	70a2                	c.ldsp	ra,40(sp)
   1a9c6:	7402                	c.ldsp	s0,32(sp)
   1a9c8:	64e2                	c.ldsp	s1,24(sp)
   1a9ca:	6942                	c.ldsp	s2,16(sp)
   1a9cc:	69a2                	c.ldsp	s3,8(sp)
   1a9ce:	6a02                	c.ldsp	s4,0(sp)
   1a9d0:	6145                	c.addi16sp	sp,48
   1a9d2:	8082                	c.jr	ra
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1a9d4:	03800513          	addi	a0,zero,56
   1a9d8:	b49fb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1a9dc:	84aa                	c.mv	s1,a0
    _Hash_node_base() noexcept : _M_nxt() { }
   1a9de:	00053023          	sd	zero,0(a0)
   1a9e2:	601c                	c.ld	a5,0(s0)
   1a9e4:	e51c                	c.sd	a5,8(a0)
  abbrev_entry() : code(0) {}
   1a9e6:	00053823          	sd	zero,16(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   1a9ea:	02053023          	sd	zero,32(a0)
   1a9ee:	02053423          	sd	zero,40(a0)
   1a9f2:	02053823          	sd	zero,48(a0)
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   1a9f6:	4705                	c.li	a4,1
   1a9f8:	86aa                	c.mv	a3,a0
   1a9fa:	8652                	c.mv	a2,s4
   1a9fc:	85ce                	c.mv	a1,s3
   1a9fe:	854a                	c.mv	a0,s2
   1aa00:	0001f317          	auipc	t1,0x1f
   1aa04:	b6033303          	ld	t1,-1184(t1) # 39560 <std::_Hashtable<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, dwarf::abbrev_entry>, false>*, unsigned long)@@Base+0x1ec98>
   1aa08:	9302                	c.jalr	t1
      return __pos->second;
   1aa0a:	0541                	c.addi	a0,16
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
   1aa0c:	bf65                	c.j	1a9c4 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x38>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1aa0e:	842a                	c.mv	s0,a0
   1aa10:	7088                	c.ld	a0,32(s1)
	if (__p)
   1aa12:	c119                	c.beqz	a0,1aa18 <std::__detail::_Map_base<unsigned long, std::pair<unsigned long const, dwarf::abbrev_entry>, std::allocator<std::pair<unsigned long const, dwarf::abbrev_entry> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned long const&)+0x8c>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1aa14:	afdfb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1aa18:	8526                	c.mv	a0,s1
   1aa1a:	af7fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1aa1e:	8522                	c.mv	a0,s0
   1aa20:	cd1fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001aa24 <dwarf::cursor::skip_initial_length()>:
  pos = begin + length;
  return make_shared<section>(sec->type, begin, length, sec->ord, fmt);
}

void cursor::skip_initial_length() {
  switch (sec->fmt) {
   1aa24:	611c                	c.ld	a5,0(a0)
   1aa26:	4f9c                	c.lw	a5,24(a5)
   1aa28:	4705                	c.li	a4,1
   1aa2a:	00e79663          	bne	a5,a4,1aa36 <dwarf::cursor::skip_initial_length()+0x12>
  case format::dwarf32:
    pos += sizeof(uword);
   1aa2e:	691c                	c.ld	a5,16(a0)
   1aa30:	0791                	c.addi	a5,4
   1aa32:	e91c                	c.sd	a5,16(a0)
   1aa34:	8082                	c.jr	ra
  switch (sec->fmt) {
   1aa36:	4709                	c.li	a4,2
   1aa38:	00e79563          	bne	a5,a4,1aa42 <dwarf::cursor::skip_initial_length()+0x1e>
    break;
  case format::dwarf64:
    pos += sizeof(uword) + sizeof(uint64_t);
   1aa3c:	691c                	c.ld	a5,16(a0)
   1aa3e:	07b1                	c.addi	a5,12
    break;
   1aa40:	bfcd                	c.j	1aa32 <dwarf::cursor::skip_initial_length()+0xe>
void cursor::skip_initial_length() {
   1aa42:	1101                	c.addi	sp,-32
   1aa44:	ec06                	c.sdsp	ra,24(sp)
   1aa46:	e822                	c.sdsp	s0,16(sp)
   1aa48:	e426                	c.sdsp	s1,8(sp)
  default:
    throw logic_error("cannot skip initial length with unknown format");
   1aa4a:	4541                	c.li	a0,16
   1aa4c:	9d5fb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1aa50:	84aa                	c.mv	s1,a0
   1aa52:	00013597          	auipc	a1,0x13
   1aa56:	a4e58593          	addi	a1,a1,-1458 # 2d4a0 <std::piecewise_construct+0x8>
   1aa5a:	bb7fb0ef          	jal	ra,16610 <std::logic_error::logic_error(char const*)@plt>
   1aa5e:	0001f617          	auipc	a2,0x1f
   1aa62:	a1263603          	ld	a2,-1518(a2) # 39470 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1aa66:	0001f597          	auipc	a1,0x1f
   1aa6a:	b125b583          	ld	a1,-1262(a1) # 39578 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1aa6e:	8526                	c.mv	a0,s1
   1aa70:	c51fb0ef          	jal	ra,166c0 <__cxa_throw@plt>
   1aa74:	842a                	c.mv	s0,a0
   1aa76:	8526                	c.mv	a0,s1
   1aa78:	a59fb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1aa7c:	8522                	c.mv	a0,s0
   1aa7e:	c73fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001aa82 <dwarf::cursor::cstr(unsigned long*)>:
  const char *p = this->cstr(&size);
  out.resize(size);
  memmove(&out.front(), p, size);
}

const char *cursor::cstr(size_t *size_out) {
   1aa82:	862a                	c.mv	a2,a0
  // Scan string size
  const char *p = pos;
   1aa84:	6908                	c.ld	a0,16(a0)
      { return _M_ptr; }
   1aa86:	00063803          	ld	a6,0(a2)
  while (pos < sec->end && *pos)
   1aa8a:	01083703          	ld	a4,16(a6)
   1aa8e:	02e57563          	bgeu	a0,a4,1aab8 <dwarf::cursor::cstr(unsigned long*)+0x36>
   1aa92:	87aa                	c.mv	a5,a0
   1aa94:	0007c683          	lbu	a3,0(a5)
   1aa98:	c699                	c.beqz	a3,1aaa6 <dwarf::cursor::cstr(unsigned long*)+0x24>
    pos++;
   1aa9a:	0785                	c.addi	a5,1
   1aa9c:	ea1c                	c.sd	a5,16(a2)
  while (pos < sec->end && *pos)
   1aa9e:	01083703          	ld	a4,16(a6)
   1aaa2:	fee7e9e3          	bltu	a5,a4,1aa94 <dwarf::cursor::cstr(unsigned long*)+0x12>
  if (pos == sec->end)
   1aaa6:	00e78b63          	beq	a5,a4,1aabc <dwarf::cursor::cstr(unsigned long*)+0x3a>
    throw format_error("unterminated string");
  if (size_out)
   1aaaa:	c199                	c.beqz	a1,1aab0 <dwarf::cursor::cstr(unsigned long*)+0x2e>
    *size_out = pos - p;
   1aaac:	8f89                	c.sub	a5,a0
   1aaae:	e19c                	c.sd	a5,0(a1)
  pos++;
   1aab0:	6a1c                	c.ld	a5,16(a2)
   1aab2:	0785                	c.addi	a5,1
   1aab4:	ea1c                	c.sd	a5,16(a2)
  return p;
}
   1aab6:	8082                	c.jr	ra
  while (pos < sec->end && *pos)
   1aab8:	87aa                	c.mv	a5,a0
   1aaba:	b7f5                	c.j	1aaa6 <dwarf::cursor::cstr(unsigned long*)+0x24>
const char *cursor::cstr(size_t *size_out) {
   1aabc:	1101                	c.addi	sp,-32
   1aabe:	ec06                	c.sdsp	ra,24(sp)
   1aac0:	e822                	c.sdsp	s0,16(sp)
   1aac2:	e426                	c.sdsp	s1,8(sp)
    throw format_error("unterminated string");
   1aac4:	4541                	c.li	a0,16
   1aac6:	95bfb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1aaca:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1aacc:	00013597          	auipc	a1,0x13
   1aad0:	a0458593          	addi	a1,a1,-1532 # 2d4d0 <std::piecewise_construct+0x38>
   1aad4:	c9dfb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   1aad8:	0001f797          	auipc	a5,0x1f
   1aadc:	a807b783          	ld	a5,-1408(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   1aae0:	07c1                	c.addi	a5,16
   1aae2:	e01c                	c.sd	a5,0(s0)
   1aae4:	0001f617          	auipc	a2,0x1f
   1aae8:	89c63603          	ld	a2,-1892(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   1aaec:	0001e597          	auipc	a1,0x1e
   1aaf0:	7c45b583          	ld	a1,1988(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1aaf4:	8522                	c.mv	a0,s0
   1aaf6:	bcbfb0ef          	jal	ra,166c0 <__cxa_throw@plt>
   1aafa:	84aa                	c.mv	s1,a0
   1aafc:	8522                	c.mv	a0,s0
   1aafe:	9d3fb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1ab02:	8526                	c.mv	a0,s1
   1ab04:	bedfb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001ab08 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
void cursor::string(std::string &out) {
   1ab08:	7179                	c.addi16sp	sp,-48
   1ab0a:	f406                	c.sdsp	ra,40(sp)
   1ab0c:	f022                	c.sdsp	s0,32(sp)
   1ab0e:	ec26                	c.sdsp	s1,24(sp)
   1ab10:	842e                	c.mv	s0,a1
  const char *p = this->cstr(&size);
   1ab12:	002c                	c.addi4spn	a1,sp,8
   1ab14:	f6fff0ef          	jal	ra,1aa82 <dwarf::cursor::cstr(unsigned long*)>
   1ab18:	84aa                	c.mv	s1,a0
      { this->resize(__n, _CharT()); }
   1ab1a:	4601                	c.li	a2,0
   1ab1c:	65a2                	c.ldsp	a1,8(sp)
   1ab1e:	8522                	c.mv	a0,s0
   1ab20:	891fb0ef          	jal	ra,163b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&out.front(), p, size);
   1ab24:	6622                	c.ldsp	a2,8(sp)
   1ab26:	85a6                	c.mv	a1,s1
   1ab28:	6008                	c.ld	a0,0(s0)
   1ab2a:	c57fb0ef          	jal	ra,16780 <memmove@plt>
}
   1ab2e:	70a2                	c.ldsp	ra,40(sp)
   1ab30:	7402                	c.ldsp	s0,32(sp)
   1ab32:	64e2                	c.ldsp	s1,24(sp)
   1ab34:	6145                	c.addi16sp	sp,48
   1ab36:	8082                	c.jr	ra

000000000001ab38 <dwarf::cursor::underflow()>:
  default:
    throw format_error("unknown form " + to_string(form));
  }
}

void cursor::underflow() {
   1ab38:	1101                	c.addi	sp,-32
   1ab3a:	ec06                	c.sdsp	ra,24(sp)
   1ab3c:	e822                	c.sdsp	s0,16(sp)
   1ab3e:	e426                	c.sdsp	s1,8(sp)
  throw underflow_error("cannot read past end of DWARF section");
   1ab40:	4541                	c.li	a0,16
   1ab42:	8dffb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1ab46:	842a                	c.mv	s0,a0
   1ab48:	00013597          	auipc	a1,0x13
   1ab4c:	9a058593          	addi	a1,a1,-1632 # 2d4e8 <std::piecewise_construct+0x50>
   1ab50:	c91fb0ef          	jal	ra,167e0 <std::underflow_error::underflow_error(char const*)@plt>
   1ab54:	0001f617          	auipc	a2,0x1f
   1ab58:	a8c63603          	ld	a2,-1396(a2) # 395e0 <std::underflow_error::~underflow_error()@GLIBCXX_3.4>
   1ab5c:	0001f597          	auipc	a1,0x1f
   1ab60:	89c5b583          	ld	a1,-1892(a1) # 393f8 <typeinfo for std::underflow_error@GLIBCXX_3.4>
   1ab64:	8522                	c.mv	a0,s0
   1ab66:	b5bfb0ef          	jal	ra,166c0 <__cxa_throw@plt>
   1ab6a:	84aa                	c.mv	s1,a0
   1ab6c:	8522                	c.mv	a0,s0
   1ab6e:	963fb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1ab72:	8526                	c.mv	a0,s1
   1ab74:	b7dfb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001ab78 <dwarf::cursor::sleb128()>:
   1ab78:	610c                	c.ld	a1,0(a0)
  unsigned shift = 0;
   1ab7a:	4701                	c.li	a4,0
  uint64_t result = 0;
   1ab7c:	4601                	c.li	a2,0
  while (pos < sec->end) {
   1ab7e:	691c                	c.ld	a5,16(a0)
   1ab80:	6994                	c.ld	a3,16(a1)
   1ab82:	04d7f063          	bgeu	a5,a3,1abc2 <dwarf::cursor::sleb128()+0x4a>
    uint8_t byte = *(uint8_t *)(pos++);
   1ab86:	00178693          	addi	a3,a5,1
   1ab8a:	e914                	c.sd	a3,16(a0)
   1ab8c:	0007c683          	lbu	a3,0(a5)
    result |= (uint64_t)(byte & 0x7f) << shift;
   1ab90:	07f6f793          	andi	a5,a3,127
   1ab94:	00e797b3          	sll	a5,a5,a4
   1ab98:	8e5d                	c.or	a2,a5
    shift += 7;
   1ab9a:	271d                	c.addiw	a4,7
    if ((byte & 0x80) == 0) {
   1ab9c:	0186979b          	slliw	a5,a3,0x18
   1aba0:	4187d79b          	sraiw	a5,a5,0x18
   1aba4:	fc07cde3          	blt	a5,zero,1ab7e <dwarf::cursor::sleb128()+0x6>
      if (shift < sizeof(result) * 8 && (byte & 0x40))
   1aba8:	03f00793          	addi	a5,zero,63
   1abac:	00e7e963          	bltu	a5,a4,1abbe <dwarf::cursor::sleb128()+0x46>
   1abb0:	0406f693          	andi	a3,a3,64
   1abb4:	c689                	c.beqz	a3,1abbe <dwarf::cursor::sleb128()+0x46>
        result |= -((uint64_t)1 << shift);
   1abb6:	57fd                	c.li	a5,-1
   1abb8:	00e797b3          	sll	a5,a5,a4
   1abbc:	8e5d                	c.or	a2,a5
      return result;
   1abbe:	8532                	c.mv	a0,a2
}
   1abc0:	8082                	c.jr	ra
int64_t cursor::sleb128() {
   1abc2:	1141                	c.addi	sp,-16
   1abc4:	e406                	c.sdsp	ra,8(sp)
  underflow();
   1abc6:	f73ff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
  return 0;
   1abca:	4501                	c.li	a0,0
}
   1abcc:	60a2                	c.ldsp	ra,8(sp)
   1abce:	0141                	c.addi	sp,16
   1abd0:	8082                	c.jr	ra

000000000001abd2 <dwarf::cursor::skip_form(dwarf::DW_FORM)>:
void cursor::skip_form(DW_FORM form) {
   1abd2:	711d                	c.addi16sp	sp,-96
   1abd4:	ec86                	c.sdsp	ra,88(sp)
   1abd6:	e8a2                	c.sdsp	s0,80(sp)
   1abd8:	e4a6                	c.sdsp	s1,72(sp)
   1abda:	e0ca                	c.sdsp	s2,64(sp)
   1abdc:	84ae                	c.mv	s1,a1
  switch (form) {
   1abde:	02000793          	addi	a5,zero,32
   1abe2:	22b7e863          	bltu	a5,a1,1ae12 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x240>
   1abe6:	842a                	c.mv	s0,a0
   1abe8:	00259793          	slli	a5,a1,0x2
   1abec:	00013717          	auipc	a4,0x13
   1abf0:	9ac70713          	addi	a4,a4,-1620 # 2d598 <std::piecewise_construct+0x100>
   1abf4:	97ba                	c.add	a5,a4
   1abf6:	439c                	c.lw	a5,0(a5)
   1abf8:	97ba                	c.add	a5,a4
   1abfa:	8782                	c.jr	a5
    while (pos < sec->end) {
   1abfc:	691c                	c.ld	a5,16(a0)
   1abfe:	6108                	c.ld	a0,0(a0)
   1ac00:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   1ac02:	4581                	c.li	a1,0
    int shift = 0;
   1ac04:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1ac06:	02e7f563          	bgeu	a5,a4,1ac30 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x5e>
      uint8_t byte = *(uint8_t *)(pos++);
   1ac0a:	0785                	c.addi	a5,1
   1ac0c:	e81c                	c.sd	a5,16(s0)
   1ac0e:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1ac12:	07f77693          	andi	a3,a4,127
   1ac16:	00c696b3          	sll	a3,a3,a2
   1ac1a:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1ac1c:	0187171b          	slliw	a4,a4,0x18
   1ac20:	4187571b          	sraiw	a4,a4,0x18
   1ac24:	00075a63          	bge	a4,zero,1ac38 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x66>
      shift += 7;
   1ac28:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1ac2a:	6918                	c.ld	a4,16(a0)
   1ac2c:	fce7efe3          	bltu	a5,a4,1ac0a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x38>
    underflow();
   1ac30:	8522                	c.mv	a0,s0
   1ac32:	f07ff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1ac36:	4581                	c.li	a1,0
    skip_form((DW_FORM)uleb128());
   1ac38:	2581                	c.addiw	a1,0
   1ac3a:	8522                	c.mv	a0,s0
   1ac3c:	f97ff0ef          	jal	ra,1abd2 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
    break;
   1ac40:	a091                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end) {
   1ac42:	691c                	c.ld	a5,16(a0)
   1ac44:	6108                	c.ld	a0,0(a0)
   1ac46:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   1ac48:	4581                	c.li	a1,0
    int shift = 0;
   1ac4a:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1ac4c:	02e7f563          	bgeu	a5,a4,1ac76 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xa4>
      uint8_t byte = *(uint8_t *)(pos++);
   1ac50:	0785                	c.addi	a5,1
   1ac52:	e81c                	c.sd	a5,16(s0)
   1ac54:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1ac58:	07f77693          	andi	a3,a4,127
   1ac5c:	00c696b3          	sll	a3,a3,a2
   1ac60:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1ac62:	0187171b          	slliw	a4,a4,0x18
   1ac66:	4187571b          	sraiw	a4,a4,0x18
   1ac6a:	00075a63          	bge	a4,zero,1ac7e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xac>
      shift += 7;
   1ac6e:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1ac70:	6918                	c.ld	a4,16(a0)
   1ac72:	fce7efe3          	bltu	a5,a4,1ac50 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x7e>
    underflow();
   1ac76:	8522                	c.mv	a0,s0
   1ac78:	ec1ff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1ac7c:	4581                	c.li	a1,0
    pos += tmp;
   1ac7e:	681c                	c.ld	a5,16(s0)
   1ac80:	97ae                	c.add	a5,a1
   1ac82:	e81c                	c.sd	a5,16(s0)
}
   1ac84:	60e6                	c.ldsp	ra,88(sp)
   1ac86:	6446                	c.ldsp	s0,80(sp)
   1ac88:	64a6                	c.ldsp	s1,72(sp)
   1ac8a:	6906                	c.ldsp	s2,64(sp)
   1ac8c:	6125                	c.addi16sp	sp,96
   1ac8e:	8082                	c.jr	ra
    pos += sec->addr_size;
   1ac90:	611c                	c.ld	a5,0(a0)
   1ac92:	0207e703          	lwu	a4,32(a5)
   1ac96:	691c                	c.ld	a5,16(a0)
   1ac98:	97ba                	c.add	a5,a4
   1ac9a:	e91c                	c.sd	a5,16(a0)
    break;
   1ac9c:	b7e5                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    switch (sec->fmt) {
   1ac9e:	611c                	c.ld	a5,0(a0)
   1aca0:	4f9c                	c.lw	a5,24(a5)
   1aca2:	4709                	c.li	a4,2
   1aca4:	00e78c63          	beq	a5,a4,1acbc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xea>
   1aca8:	fcf74ee3          	blt	a4,a5,1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
   1acac:	cf81                	c.beqz	a5,1acc4 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xf2>
   1acae:	4705                	c.li	a4,1
   1acb0:	fce79ae3          	bne	a5,a4,1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      pos += 4;
   1acb4:	691c                	c.ld	a5,16(a0)
   1acb6:	0791                	c.addi	a5,4
   1acb8:	e91c                	c.sd	a5,16(a0)
      break;
   1acba:	b7e9                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      pos += 8;
   1acbc:	691c                	c.ld	a5,16(a0)
   1acbe:	07a1                	c.addi	a5,8
   1acc0:	e91c                	c.sd	a5,16(a0)
      break;
   1acc2:	b7c9                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
      throw logic_error("cannot read form with unknown format");
   1acc4:	4541                	c.li	a0,16
   1acc6:	f5afb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1acca:	842a                	c.mv	s0,a0
   1accc:	00013597          	auipc	a1,0x13
   1acd0:	84458593          	addi	a1,a1,-1980 # 2d510 <std::piecewise_construct+0x78>
   1acd4:	93dfb0ef          	jal	ra,16610 <std::logic_error::logic_error(char const*)@plt>
   1acd8:	0001e617          	auipc	a2,0x1e
   1acdc:	79863603          	ld	a2,1944(a2) # 39470 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1ace0:	0001f597          	auipc	a1,0x1f
   1ace4:	8985b583          	ld	a1,-1896(a1) # 39578 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1ace8:	8522                	c.mv	a0,s0
   1acea:	9d7fb0ef          	jal	ra,166c0 <__cxa_throw@plt>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1acee:	611c                	c.ld	a5,0(a0)
   1acf0:	6b98                	c.ld	a4,16(a5)
   1acf2:	691c                	c.ld	a5,16(a0)
   1acf4:	00e7e463          	bltu	a5,a4,1acfc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x12a>
      underflow();
   1acf8:	e41ff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1acfc:	681c                	c.ld	a5,16(s0)
    if (sec->ord == byte_order::lsb) {
   1acfe:	6018                	c.ld	a4,0(s0)
   1ad00:	4f58                	c.lw	a4,28(a4)
   1ad02:	1a070d63          	beq	a4,zero,1aebc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ea>
        val = (val << 8) | (uint64_t)p[i];
   1ad06:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1ad0a:	aa5d                	c.j	1aec0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ee>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ad0c:	611c                	c.ld	a5,0(a0)
   1ad0e:	6b98                	c.ld	a4,16(a5)
   1ad10:	691c                	c.ld	a5,16(a0)
   1ad12:	40f70633          	sub	a2,a4,a5
   1ad16:	4685                	c.li	a3,1
   1ad18:	00c6f463          	bgeu	a3,a2,1ad20 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x14e>
   1ad1c:	00e7e563          	bltu	a5,a4,1ad26 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x154>
      underflow();
   1ad20:	8522                	c.mv	a0,s0
   1ad22:	e17ff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ad26:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1ad28:	601c                	c.ld	a5,0(s0)
   1ad2a:	4fdc                	c.lw	a5,28(a5)
   1ad2c:	eb99                	c.bnez	a5,1ad42 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x170>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ad2e:	00174783          	lbu	a5,1(a4)
   1ad32:	07a2                	c.slli	a5,0x8
   1ad34:	00074683          	lbu	a3,0(a4)
   1ad38:	8fd5                	c.or	a5,a3
    pos += tmp;
   1ad3a:	0789                	c.addi	a5,2
   1ad3c:	973e                	c.add	a4,a5
   1ad3e:	e818                	c.sd	a4,16(s0)
    break;
   1ad40:	b791                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
        val = (val << 8) | (uint64_t)p[i];
   1ad42:	00074783          	lbu	a5,0(a4)
   1ad46:	07a2                	c.slli	a5,0x8
   1ad48:	00174683          	lbu	a3,1(a4)
   1ad4c:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ad4e:	b7f5                	c.j	1ad3a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x168>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ad50:	611c                	c.ld	a5,0(a0)
   1ad52:	6b98                	c.ld	a4,16(a5)
   1ad54:	691c                	c.ld	a5,16(a0)
   1ad56:	40f70633          	sub	a2,a4,a5
   1ad5a:	468d                	c.li	a3,3
   1ad5c:	00c6f463          	bgeu	a3,a2,1ad64 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x192>
   1ad60:	00e7e563          	bltu	a5,a4,1ad6a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x198>
      underflow();
   1ad64:	8522                	c.mv	a0,s0
   1ad66:	dd3ff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ad6a:	680c                	c.ld	a1,16(s0)
    if (sec->ord == byte_order::lsb) {
   1ad6c:	601c                	c.ld	a5,0(s0)
   1ad6e:	4fdc                	c.lw	a5,28(a5)
   1ad70:	e785                	c.bnez	a5,1ad98 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1c6>
   1ad72:	862e                	c.mv	a2,a1
   1ad74:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1ad76:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1ad7a:	00064683          	lbu	a3,0(a2)
   1ad7e:	00e696b3          	sll	a3,a3,a4
   1ad82:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ad84:	0605                	c.addi	a2,1
   1ad86:	2721                	c.addiw	a4,8
   1ad88:	fea719e3          	bne	a4,a0,1ad7a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1a8>
    pos += tmp;
   1ad8c:	1782                	c.slli	a5,0x20
   1ad8e:	9381                	c.srli	a5,0x20
   1ad90:	0791                	c.addi	a5,4
   1ad92:	95be                	c.add	a1,a5
   1ad94:	e80c                	c.sd	a1,16(s0)
    break;
   1ad96:	b5fd                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
   1ad98:	872e                	c.mv	a4,a1
   1ad9a:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1ad9e:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1ada0:	07a2                	c.slli	a5,0x8
   1ada2:	00074683          	lbu	a3,0(a4)
   1ada6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1ada8:	0705                	c.addi	a4,1
   1adaa:	fee61be3          	bne	a2,a4,1ada0 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ce>
   1adae:	bff9                	c.j	1ad8c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x1ba>
    pos += 1;
   1adb0:	691c                	c.ld	a5,16(a0)
   1adb2:	0785                	c.addi	a5,1
   1adb4:	e91c                	c.sd	a5,16(a0)
    break;
   1adb6:	b5f9                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 2;
   1adb8:	691c                	c.ld	a5,16(a0)
   1adba:	0789                	c.addi	a5,2
   1adbc:	e91c                	c.sd	a5,16(a0)
    break;
   1adbe:	b5d9                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 4;
   1adc0:	691c                	c.ld	a5,16(a0)
   1adc2:	0791                	c.addi	a5,4
   1adc4:	e91c                	c.sd	a5,16(a0)
    break;
   1adc6:	bd7d                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    pos += 8;
   1adc8:	691c                	c.ld	a5,16(a0)
   1adca:	07a1                	c.addi	a5,8
   1adcc:	e91c                	c.sd	a5,16(a0)
    break;
   1adce:	bd5d                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1add0:	691c                	c.ld	a5,16(a0)
   1add2:	6114                	c.ld	a3,0(a0)
   1add4:	6a98                	c.ld	a4,16(a3)
   1add6:	00e7fb63          	bgeu	a5,a4,1adec <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x21a>
   1adda:	00078703          	lb	a4,0(a5)
   1adde:	00075763          	bge	a4,zero,1adec <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x21a>
      pos++;
   1ade2:	0785                	c.addi	a5,1
   1ade4:	e81c                	c.sd	a5,16(s0)
    while (pos < sec->end && (*(uint8_t *)pos & 0x80))
   1ade6:	6a98                	c.ld	a4,16(a3)
   1ade8:	fee7e9e3          	bltu	a5,a4,1adda <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x208>
    pos++;
   1adec:	0785                	c.addi	a5,1
   1adee:	e81c                	c.sd	a5,16(s0)
    break;
   1adf0:	bd51                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    while (pos < sec->end && *pos)
   1adf2:	691c                	c.ld	a5,16(a0)
   1adf4:	6114                	c.ld	a3,0(a0)
   1adf6:	6a98                	c.ld	a4,16(a3)
   1adf8:	00e7fa63          	bgeu	a5,a4,1ae0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x23a>
   1adfc:	0007c703          	lbu	a4,0(a5)
   1ae00:	c711                	c.beqz	a4,1ae0c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x23a>
      pos++;
   1ae02:	0785                	c.addi	a5,1
   1ae04:	e81c                	c.sd	a5,16(s0)
    while (pos < sec->end && *pos)
   1ae06:	6a98                	c.ld	a4,16(a3)
   1ae08:	fee7eae3          	bltu	a5,a4,1adfc <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x22a>
    pos++;
   1ae0c:	0785                	c.addi	a5,1
   1ae0e:	e81c                	c.sd	a5,16(s0)
    break;
   1ae10:	bd95                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>
    throw format_error("unknown form " + to_string(form));
   1ae12:	4541                	c.li	a0,16
   1ae14:	e0cfb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1ae18:	892a                	c.mv	s2,a0
   1ae1a:	85a6                	c.mv	a1,s1
   1ae1c:	850a                	c.mv	a0,sp
   1ae1e:	7350c0ef          	jal	ra,27d52 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1ae22:	00012617          	auipc	a2,0x12
   1ae26:	71660613          	addi	a2,a2,1814 # 2d538 <std::piecewise_construct+0xa0>
   1ae2a:	4581                	c.li	a1,0
   1ae2c:	850a                	c.mv	a0,sp
   1ae2e:	d62fb0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ae32:	85aa                	c.mv	a1,a0
   1ae34:	1000                	c.addi4spn	s0,sp,32
   1ae36:	8522                	c.mv	a0,s0
   1ae38:	e38fb0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1ae3c:	85a2                	c.mv	a1,s0
   1ae3e:	854a                	c.mv	a0,s2
   1ae40:	f60fb0ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1ae44:	0001e797          	auipc	a5,0x1e
   1ae48:	7147b783          	ld	a5,1812(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   1ae4c:	07c1                	c.addi	a5,16
   1ae4e:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1ae52:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1ae54:	181c                	c.addi4spn	a5,sp,48
   1ae56:	00f50463          	beq	a0,a5,1ae5e <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x28c>
   1ae5a:	eb6fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ae5e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1ae60:	081c                	c.addi4spn	a5,sp,16
   1ae62:	00f50463          	beq	a0,a5,1ae6a <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x298>
   1ae66:	eaafb0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1ae6a:	0001e617          	auipc	a2,0x1e
   1ae6e:	51663603          	ld	a2,1302(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   1ae72:	0001e597          	auipc	a1,0x1e
   1ae76:	43e5b583          	ld	a1,1086(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1ae7a:	854a                	c.mv	a0,s2
   1ae7c:	845fb0ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw logic_error("cannot read form with unknown format");
   1ae80:	84aa                	c.mv	s1,a0
   1ae82:	8522                	c.mv	a0,s0
   1ae84:	e4cfb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1ae88:	8526                	c.mv	a0,s1
   1ae8a:	867fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ae8e:	842a                	c.mv	s0,a0
   1ae90:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1ae92:	181c                	c.addi4spn	a5,sp,48
   1ae94:	00f50463          	beq	a0,a5,1ae9c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ca>
   1ae98:	e78fb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ae9c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1ae9e:	081c                	c.addi4spn	a5,sp,16
   1aea0:	00f50463          	beq	a0,a5,1aea8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2d6>
   1aea4:	e6cfb0ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw format_error("unknown form " + to_string(form));
   1aea8:	854a                	c.mv	a0,s2
   1aeaa:	e26fb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1aeae:	8522                	c.mv	a0,s0
   1aeb0:	841fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1aeb4:	842a                	c.mv	s0,a0
   1aeb6:	b7dd                	c.j	1ae9c <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2ca>
   1aeb8:	842a                	c.mv	s0,a0
   1aeba:	b7fd                	c.j	1aea8 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0x2d6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1aebc:	0007c703          	lbu	a4,0(a5)
    pos += tmp;
   1aec0:	0705                	c.addi	a4,1
   1aec2:	97ba                	c.add	a5,a4
   1aec4:	e81c                	c.sd	a5,16(s0)
    break;
   1aec6:	bb7d                	c.j	1ac84 <dwarf::cursor::skip_form(dwarf::DW_FORM)+0xb2>

000000000001aec8 <dwarf::cursor::subsection()>:
shared_ptr<section> cursor::subsection() {
   1aec8:	7179                	c.addi16sp	sp,-48
   1aeca:	f406                	c.sdsp	ra,40(sp)
   1aecc:	f022                	c.sdsp	s0,32(sp)
   1aece:	ec26                	c.sdsp	s1,24(sp)
   1aed0:	e84a                	c.sdsp	s2,16(sp)
   1aed2:	e44e                	c.sdsp	s3,8(sp)
   1aed4:	e052                	c.sdsp	s4,0(sp)
   1aed6:	892a                	c.mv	s2,a0
   1aed8:	84ae                	c.mv	s1,a1
  const char *begin = pos;
   1aeda:	0105b983          	ld	s3,16(a1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1aede:	619c                	c.ld	a5,0(a1)
   1aee0:	6b9c                	c.ld	a5,16(a5)
   1aee2:	413786b3          	sub	a3,a5,s3
   1aee6:	470d                	c.li	a4,3
   1aee8:	00d77463          	bgeu	a4,a3,1aef0 <dwarf::cursor::subsection()+0x28>
   1aeec:	00f9e563          	bltu	s3,a5,1aef6 <dwarf::cursor::subsection()+0x2e>
      underflow();
   1aef0:	8526                	c.mv	a0,s1
   1aef2:	c47ff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1aef6:	688c                	c.ld	a1,16(s1)
   1aef8:	6088                	c.ld	a0,0(s1)
    if (sec->ord == byte_order::lsb) {
   1aefa:	4d5c                	c.lw	a5,28(a0)
   1aefc:	e7d5                	c.bnez	a5,1afa8 <dwarf::cursor::subsection()+0xe0>
   1aefe:	862e                	c.mv	a2,a1
   1af00:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1af02:	02000813          	addi	a6,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1af06:	00064683          	lbu	a3,0(a2)
   1af0a:	00e696b3          	sll	a3,a3,a4
   1af0e:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1af10:	0605                	c.addi	a2,1
   1af12:	2721                	c.addiw	a4,8
   1af14:	ff0719e3          	bne	a4,a6,1af06 <dwarf::cursor::subsection()+0x3e>
    pos += sizeof(T);
   1af18:	0591                	c.addi	a1,4
   1af1a:	e88c                	c.sd	a1,16(s1)
   1af1c:	1782                	c.slli	a5,0x20
   1af1e:	9381                	c.srli	a5,0x20
  if (length < 0xfffffff0) {
   1af20:	4705                	c.li	a4,1
   1af22:	1702                	c.slli	a4,0x20
   1af24:	173d                	c.addi	a4,-17
   1af26:	08f76d63          	bltu	a4,a5,1afc0 <dwarf::cursor::subsection()+0xf8>
    length += sizeof(uword);
   1af2a:	0791                	c.addi	a5,4
    fmt = format::dwarf32;
   1af2c:	4a05                	c.li	s4,1
  pos = begin + length;
   1af2e:	00f98433          	add	s0,s3,a5
   1af32:	e880                	c.sd	s0,16(s1)
   1af34:	6084                	c.ld	s1,0(s1)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   1af36:	00093023          	sd	zero,0(s2)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1af3a:	06000513          	addi	a0,zero,96
   1af3e:	de2fb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1af42:	00052423          	sw	zero,8(a0)
   1af46:	00052623          	sw	zero,12(a0)
   1af4a:	00052823          	sw	zero,16(a0)
   1af4e:	00052a23          	sw	zero,20(a0)
   1af52:	00052c23          	sw	zero,24(a0)
   1af56:	00052e23          	sw	zero,28(a0)
   1af5a:	02053023          	sd	zero,32(a0)
   1af5e:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1af62:	4785                	c.li	a5,1
   1af64:	d91c                	c.sw	a5,48(a0)
   1af66:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1af68:	0001e797          	auipc	a5,0x1e
   1af6c:	6587b783          	ld	a5,1624(a5) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   1af70:	07c1                	c.addi	a5,16
   1af72:	e11c                	c.sd	a5,0(a0)
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1af74:	4098                	c.lw	a4,0(s1)
   1af76:	4cdc                	c.lw	a5,28(s1)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1af78:	dd18                	c.sw	a4,56(a0)
   1af7a:	05353023          	sd	s3,64(a0)
   1af7e:	e520                	c.sd	s0,72(a0)
   1af80:	05452823          	sw	s4,80(a0)
        ord(ord), addr_size(addr_size) {}
   1af84:	c97c                	c.sw	a5,84(a0)
   1af86:	04052c23          	sw	zero,88(a0)
	  _M_pi = __pi;
   1af8a:	00a93423          	sd	a0,8(s2)
   1af8e:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   1af92:	00f93023          	sd	a5,0(s2)
}
   1af96:	854a                	c.mv	a0,s2
   1af98:	70a2                	c.ldsp	ra,40(sp)
   1af9a:	7402                	c.ldsp	s0,32(sp)
   1af9c:	64e2                	c.ldsp	s1,24(sp)
   1af9e:	6942                	c.ldsp	s2,16(sp)
   1afa0:	69a2                	c.ldsp	s3,8(sp)
   1afa2:	6a02                	c.ldsp	s4,0(sp)
   1afa4:	6145                	c.addi16sp	sp,48
   1afa6:	8082                	c.jr	ra
   1afa8:	872e                	c.mv	a4,a1
   1afaa:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1afae:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1afb0:	07a2                	c.slli	a5,0x8
   1afb2:	00074683          	lbu	a3,0(a4)
   1afb6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1afb8:	0705                	c.addi	a4,1
   1afba:	fec71be3          	bne	a4,a2,1afb0 <dwarf::cursor::subsection()+0xe8>
   1afbe:	bfa9                	c.j	1af18 <dwarf::cursor::subsection()+0x50>
  } else if (length == 0xffffffff) {
   1afc0:	577d                	c.li	a4,-1
   1afc2:	9301                	c.srli	a4,0x20
   1afc4:	04e79b63          	bne	a5,a4,1b01a <dwarf::cursor::subsection()+0x152>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1afc8:	691c                	c.ld	a5,16(a0)
   1afca:	40b786b3          	sub	a3,a5,a1
   1afce:	471d                	c.li	a4,7
   1afd0:	00d77463          	bgeu	a4,a3,1afd8 <dwarf::cursor::subsection()+0x110>
   1afd4:	00f5e563          	bltu	a1,a5,1afde <dwarf::cursor::subsection()+0x116>
      underflow();
   1afd8:	8526                	c.mv	a0,s1
   1afda:	b5fff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1afde:	6898                	c.ld	a4,16(s1)
    if (sec->ord == byte_order::lsb) {
   1afe0:	609c                	c.ld	a5,0(s1)
   1afe2:	4fdc                	c.lw	a5,28(a5)
   1afe4:	e385                	c.bnez	a5,1b004 <dwarf::cursor::subsection()+0x13c>
   1afe6:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1afe8:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1afec:	00074603          	lbu	a2,0(a4)
   1aff0:	00d61633          	sll	a2,a2,a3
   1aff4:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1aff6:	0705                	c.addi	a4,1
   1aff8:	26a1                	c.addiw	a3,8
   1affa:	feb699e3          	bne	a3,a1,1afec <dwarf::cursor::subsection()+0x124>
    length += sizeof(uword) + sizeof(uint64_t);
   1affe:	07b1                	c.addi	a5,12
    fmt = format::dwarf64;
   1b000:	4a09                	c.li	s4,2
   1b002:	b735                	c.j	1af2e <dwarf::cursor::subsection()+0x66>
   1b004:	86ba                	c.mv	a3,a4
   1b006:	0721                	c.addi	a4,8
    uint64_t val = 0;
   1b008:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1b00a:	07a2                	c.slli	a5,0x8
   1b00c:	0006c603          	lbu	a2,0(a3)
   1b010:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1b012:	0685                	c.addi	a3,1
   1b014:	fee69be3          	bne	a3,a4,1b00a <dwarf::cursor::subsection()+0x142>
   1b018:	b7dd                	c.j	1affe <dwarf::cursor::subsection()+0x136>
    throw format_error("initial length has reserved value");
   1b01a:	4541                	c.li	a0,16
   1b01c:	c04fb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1b020:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   1b022:	00012597          	auipc	a1,0x12
   1b026:	52658593          	addi	a1,a1,1318 # 2d548 <std::piecewise_construct+0xb0>
   1b02a:	f46fb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   1b02e:	0001e797          	auipc	a5,0x1e
   1b032:	52a7b783          	ld	a5,1322(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   1b036:	07c1                	c.addi	a5,16
   1b038:	e01c                	c.sd	a5,0(s0)
   1b03a:	0001e617          	auipc	a2,0x1e
   1b03e:	34663603          	ld	a2,838(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   1b042:	0001e597          	auipc	a1,0x1e
   1b046:	26e5b583          	ld	a1,622(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1b04a:	8522                	c.mv	a0,s0
   1b04c:	e74fb0ef          	jal	ra,166c0 <__cxa_throw@plt>
   1b050:	84aa                	c.mv	s1,a0
   1b052:	8522                	c.mv	a0,s0
   1b054:	c7cfb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1b058:	8526                	c.mv	a0,s1
   1b05a:	e96fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001b05e <dwarf::cursor::offset()>:
section_offset cursor::offset() {
   1b05e:	1101                	c.addi	sp,-32
   1b060:	ec06                	c.sdsp	ra,24(sp)
   1b062:	e822                	c.sdsp	s0,16(sp)
   1b064:	e426                	c.sdsp	s1,8(sp)
   1b066:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   1b068:	611c                	c.ld	a5,0(a0)
  switch (sec->fmt) {
   1b06a:	4f98                	c.lw	a4,24(a5)
   1b06c:	4685                	c.li	a3,1
   1b06e:	04d70563          	beq	a4,a3,1b0b8 <dwarf::cursor::offset()+0x5a>
   1b072:	4689                	c.li	a3,2
   1b074:	0cd71163          	bne	a4,a3,1b136 <dwarf::cursor::offset()+0xd8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b078:	6b98                	c.ld	a4,16(a5)
   1b07a:	691c                	c.ld	a5,16(a0)
   1b07c:	40f70633          	sub	a2,a4,a5
   1b080:	469d                	c.li	a3,7
   1b082:	00c6f463          	bgeu	a3,a2,1b08a <dwarf::cursor::offset()+0x2c>
   1b086:	00e7e563          	bltu	a5,a4,1b090 <dwarf::cursor::offset()+0x32>
      underflow();
   1b08a:	8522                	c.mv	a0,s0
   1b08c:	aadff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b090:	6810                	c.ld	a2,16(s0)
    if (sec->ord == byte_order::lsb) {
   1b092:	601c                	c.ld	a5,0(s0)
   1b094:	4fdc                	c.lw	a5,28(a5)
   1b096:	e7c1                	c.bnez	a5,1b11e <dwarf::cursor::offset()+0xc0>
   1b098:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1b09a:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1b09c:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1b0a0:	0006c703          	lbu	a4,0(a3)
   1b0a4:	00f71733          	sll	a4,a4,a5
   1b0a8:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1b0aa:	0685                	c.addi	a3,1
   1b0ac:	27a1                	c.addiw	a5,8
   1b0ae:	feb799e3          	bne	a5,a1,1b0a0 <dwarf::cursor::offset()+0x42>
    pos += sizeof(T);
   1b0b2:	00860713          	addi	a4,a2,8
    return fixed<uint64_t>();
   1b0b6:	a091                	c.j	1b0fa <dwarf::cursor::offset()+0x9c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1b0b8:	6b98                	c.ld	a4,16(a5)
   1b0ba:	691c                	c.ld	a5,16(a0)
   1b0bc:	40f70633          	sub	a2,a4,a5
   1b0c0:	468d                	c.li	a3,3
   1b0c2:	00c6f463          	bgeu	a3,a2,1b0ca <dwarf::cursor::offset()+0x6c>
   1b0c6:	00e7e563          	bltu	a5,a4,1b0d0 <dwarf::cursor::offset()+0x72>
      underflow();
   1b0ca:	8522                	c.mv	a0,s0
   1b0cc:	a6dff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1b0d0:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1b0d2:	601c                	c.ld	a5,0(s0)
   1b0d4:	4fdc                	c.lw	a5,28(a5)
   1b0d6:	eb85                	c.bnez	a5,1b106 <dwarf::cursor::offset()+0xa8>
   1b0d8:	85ba                	c.mv	a1,a4
   1b0da:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1b0dc:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1b0e0:	0005c603          	lbu	a2,0(a1)
   1b0e4:	00d61633          	sll	a2,a2,a3
   1b0e8:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1b0ea:	0585                	c.addi	a1,1
   1b0ec:	26a1                	c.addiw	a3,8
   1b0ee:	fea699e3          	bne	a3,a0,1b0e0 <dwarf::cursor::offset()+0x82>
    pos += sizeof(T);
   1b0f2:	0711                	c.addi	a4,4
   1b0f4:	02079513          	slli	a0,a5,0x20
   1b0f8:	9101                	c.srli	a0,0x20
   1b0fa:	e818                	c.sd	a4,16(s0)
}
   1b0fc:	60e2                	c.ldsp	ra,24(sp)
   1b0fe:	6442                	c.ldsp	s0,16(sp)
   1b100:	64a2                	c.ldsp	s1,8(sp)
   1b102:	6105                	c.addi16sp	sp,32
   1b104:	8082                	c.jr	ra
   1b106:	86ba                	c.mv	a3,a4
   1b108:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1b10c:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1b10e:	07a2                	c.slli	a5,0x8
   1b110:	0006c603          	lbu	a2,0(a3)
   1b114:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1b116:	0685                	c.addi	a3,1
   1b118:	feb69be3          	bne	a3,a1,1b10e <dwarf::cursor::offset()+0xb0>
   1b11c:	bfd9                	c.j	1b0f2 <dwarf::cursor::offset()+0x94>
   1b11e:	87b2                	c.mv	a5,a2
   1b120:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1b124:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1b126:	0522                	c.slli	a0,0x8
   1b128:	0007c703          	lbu	a4,0(a5)
   1b12c:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1b12e:	0785                	c.addi	a5,1
   1b130:	fed79be3          	bne	a5,a3,1b126 <dwarf::cursor::offset()+0xc8>
   1b134:	bfbd                	c.j	1b0b2 <dwarf::cursor::offset()+0x54>
    throw logic_error("cannot read offset with unknown format");
   1b136:	4541                	c.li	a0,16
   1b138:	ae8fb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1b13c:	842a                	c.mv	s0,a0
   1b13e:	00012597          	auipc	a1,0x12
   1b142:	43258593          	addi	a1,a1,1074 # 2d570 <std::piecewise_construct+0xd8>
   1b146:	ccafb0ef          	jal	ra,16610 <std::logic_error::logic_error(char const*)@plt>
   1b14a:	0001e617          	auipc	a2,0x1e
   1b14e:	32663603          	ld	a2,806(a2) # 39470 <std::logic_error::~logic_error()@GLIBCXX_3.4>
   1b152:	0001e597          	auipc	a1,0x1e
   1b156:	4265b583          	ld	a1,1062(a1) # 39578 <typeinfo for std::logic_error@GLIBCXX_3.4>
   1b15a:	8522                	c.mv	a0,s0
   1b15c:	d64fb0ef          	jal	ra,166c0 <__cxa_throw@plt>
   1b160:	84aa                	c.mv	s1,a0
   1b162:	8522                	c.mv	a0,s0
   1b164:	b6cfb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1b168:	8526                	c.mv	a0,s1
   1b16a:	d86fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001b16e <dwarf::die::die(dwarf::unit const*)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

die::die(const unit *cu) : cu(cu), abbrev(nullptr) {}
   1b16e:	e50c                	c.sd	a1,8(a0)
   1b170:	00053823          	sd	zero,16(a0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1b174:	02050793          	addi	a5,a0,32
   1b178:	e93c                	c.sd	a5,80(a0)
   1b17a:	ed3c                	c.sd	a5,88(a0)
   1b17c:	05050793          	addi	a5,a0,80
   1b180:	f13c                	c.sd	a5,96(a0)
   1b182:	8082                	c.jr	ra

000000000001b184 <dwarf::die::get_unit() const>:

const unit &die::get_unit() const { return *cu; }
   1b184:	6508                	c.ld	a0,8(a0)
   1b186:	8082                	c.jr	ra

000000000001b188 <dwarf::die::get_section_offset() const>:

section_offset die::get_section_offset() const {
   1b188:	1141                	c.addi	sp,-16
   1b18a:	e406                	c.sdsp	ra,8(sp)
   1b18c:	e022                	c.sdsp	s0,0(sp)
   1b18e:	842a                	c.mv	s0,a0
  return cu->get_section_offset() + offset;
   1b190:	6508                	c.ld	a0,8(a0)
   1b192:	e1bfb0ef          	jal	ra,16fac <dwarf::unit::get_section_offset() const>
   1b196:	6c1c                	c.ld	a5,24(s0)
}
   1b198:	953e                	c.add	a0,a5
   1b19a:	60a2                	c.ldsp	ra,8(sp)
   1b19c:	6402                	c.ldsp	s0,0(sp)
   1b19e:	0141                	c.addi	sp,16
   1b1a0:	8082                	c.jr	ra

000000000001b1a2 <dwarf::die::read(unsigned long)>:

void die::read(section_offset off) {
   1b1a2:	7159                	c.addi16sp	sp,-112
   1b1a4:	f486                	c.sdsp	ra,104(sp)
   1b1a6:	f0a2                	c.sdsp	s0,96(sp)
   1b1a8:	eca6                	c.sdsp	s1,88(sp)
   1b1aa:	e8ca                	c.sdsp	s2,80(sp)
   1b1ac:	e4ce                	c.sdsp	s3,72(sp)
   1b1ae:	e0d2                	c.sdsp	s4,64(sp)
   1b1b0:	fc56                	c.sdsp	s5,56(sp)
   1b1b2:	f85a                	c.sdsp	s6,48(sp)
   1b1b4:	f45e                	c.sdsp	s7,40(sp)
   1b1b6:	f062                	c.sdsp	s8,32(sp)
   1b1b8:	84aa                	c.mv	s1,a0
   1b1ba:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), off);
   1b1bc:	6508                	c.ld	a0,8(a0)
   1b1be:	df5fb0ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1b1c2:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1b1c6:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1b1c8:	30040e63          	beq	s0,zero,1b4e4 <dwarf::die::read(unsigned long)+0x342>
    if (__is_single_threaded())
   1b1cc:	0001e797          	auipc	a5,0x1e
   1b1d0:	2b47b783          	ld	a5,692(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b1d4:	0007c783          	lbu	a5,0(a5)
   1b1d8:	cbbd                	c.beqz	a5,1b24e <dwarf::die::read(unsigned long)+0xac>
  { *__mem += __val; }
   1b1da:	581c                	c.lw	a5,48(s0)
   1b1dc:	2785                	c.addiw	a5,1
   1b1de:	d81c                	c.sw	a5,48(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1b1e0:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1b1e2:	e822                	c.sdsp	s0,16(sp)
    if (__is_single_threaded())
   1b1e4:	0001e797          	auipc	a5,0x1e
   1b1e8:	29c7b783          	ld	a5,668(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b1ec:	0007c783          	lbu	a5,0(a5)
   1b1f0:	c7ad                	c.beqz	a5,1b25a <dwarf::die::read(unsigned long)+0xb8>
  { *__mem += __val; }
   1b1f2:	581c                	c.lw	a5,48(s0)
   1b1f4:	2785                	c.addiw	a5,1
   1b1f6:	d81c                	c.sw	a5,48(s0)
      : sec(sec), pos(sec->begin + offset) {}
   1b1f8:	0089b783          	ld	a5,8(s3)
   1b1fc:	97ca                	c.add	a5,s2
   1b1fe:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   1b200:	0001e797          	auipc	a5,0x1e
   1b204:	2807b783          	ld	a5,640(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b208:	0007c783          	lbu	a5,0(a5)
   1b20c:	cfa9                	c.beqz	a5,1b266 <dwarf::die::read(unsigned long)+0xc4>
    _Atomic_word __result = *__mem;
   1b20e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1b210:	fff5079b          	addiw	a5,a0,-1
   1b214:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b216:	4785                	c.li	a5,1
   1b218:	2cf51c63          	bne	a0,a5,1b4f0 <dwarf::die::read(unsigned long)+0x34e>
	_M_dispose();
   1b21c:	601c                	c.ld	a5,0(s0)
   1b21e:	6b9c                	c.ld	a5,16(a5)
   1b220:	8522                	c.mv	a0,s0
   1b222:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b224:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b228:	0001e797          	auipc	a5,0x1e
   1b22c:	2587b783          	ld	a5,600(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b230:	0007c783          	lbu	a5,0(a5)
   1b234:	cf9d                	c.beqz	a5,1b272 <dwarf::die::read(unsigned long)+0xd0>
    _Atomic_word __result = *__mem;
   1b236:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1b238:	fff7871b          	addiw	a4,a5,-1
   1b23c:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b23e:	4705                	c.li	a4,1
   1b240:	2ae79863          	bne	a5,a4,1b4f0 <dwarf::die::read(unsigned long)+0x34e>
	    _M_destroy();
   1b244:	601c                	c.ld	a5,0(s0)
   1b246:	6f9c                	c.ld	a5,24(a5)
   1b248:	8522                	c.mv	a0,s0
   1b24a:	9782                	c.jalr	a5
   1b24c:	a455                	c.j	1b4f0 <dwarf::die::read(unsigned long)+0x34e>
      __atomic_add(__mem, __val);
   1b24e:	4585                	c.li	a1,1
   1b250:	03040513          	addi	a0,s0,48
   1b254:	8fcfb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1b258:	b761                	c.j	1b1e0 <dwarf::die::read(unsigned long)+0x3e>
   1b25a:	4585                	c.li	a1,1
   1b25c:	03040513          	addi	a0,s0,48
   1b260:	8f0fb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1b264:	bf51                	c.j	1b1f8 <dwarf::die::read(unsigned long)+0x56>
      return __exchange_and_add(__mem, __val);
   1b266:	55fd                	c.li	a1,-1
   1b268:	03040513          	addi	a0,s0,48
   1b26c:	914fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b270:	b75d                	c.j	1b216 <dwarf::die::read(unsigned long)+0x74>
   1b272:	55fd                	c.li	a1,-1
   1b274:	03440513          	addi	a0,s0,52
   1b278:	908fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b27c:	87aa                	c.mv	a5,a0
   1b27e:	b7c1                	c.j	1b23e <dwarf::die::read(unsigned long)+0x9c>
    return 0;
   1b280:	4581                	c.li	a1,0

  offset = off;

  abbrev_code acode = cur.uleb128();
  if (acode == 0) {
   1b282:	e9d1                	c.bnez	a1,1b316 <dwarf::die::read(unsigned long)+0x174>
    abbrev = nullptr;
   1b284:	0004b823          	sd	zero,16(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1b288:	67a2                	c.ldsp	a5,8(sp)
   1b28a:	6798                	c.ld	a4,8(a5)
   1b28c:	67e2                	c.ldsp	a5,24(sp)
   1b28e:	8f99                	c.sub	a5,a4
    next = cur.get_section_offset();
   1b290:	f4bc                	c.sd	a5,104(s1)
	if (_M_pi != nullptr)
   1b292:	6442                	c.ldsp	s0,16(sp)
   1b294:	cc19                	c.beqz	s0,1b2b2 <dwarf::die::read(unsigned long)+0x110>
    if (__is_single_threaded())
   1b296:	0001e797          	auipc	a5,0x1e
   1b29a:	1ea7b783          	ld	a5,490(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b29e:	0007c783          	lbu	a5,0(a5)
   1b2a2:	c785                	c.beqz	a5,1b2ca <dwarf::die::read(unsigned long)+0x128>
    _Atomic_word __result = *__mem;
   1b2a4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1b2a6:	fff5079b          	addiw	a5,a0,-1
   1b2aa:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b2ac:	4785                	c.li	a5,1
   1b2ae:	02f50463          	beq	a0,a5,1b2d6 <dwarf::die::read(unsigned long)+0x134>
  for (auto &attr : abbrev->attributes) {
    attrs.push_back(cur.get_section_offset());
    cur.skip_form(attr.form);
  }
  next = cur.get_section_offset();
}
   1b2b2:	70a6                	c.ldsp	ra,104(sp)
   1b2b4:	7406                	c.ldsp	s0,96(sp)
   1b2b6:	64e6                	c.ldsp	s1,88(sp)
   1b2b8:	6946                	c.ldsp	s2,80(sp)
   1b2ba:	69a6                	c.ldsp	s3,72(sp)
   1b2bc:	6a06                	c.ldsp	s4,64(sp)
   1b2be:	7ae2                	c.ldsp	s5,56(sp)
   1b2c0:	7b42                	c.ldsp	s6,48(sp)
   1b2c2:	7ba2                	c.ldsp	s7,40(sp)
   1b2c4:	7c02                	c.ldsp	s8,32(sp)
   1b2c6:	6165                	c.addi16sp	sp,112
   1b2c8:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1b2ca:	55fd                	c.li	a1,-1
   1b2cc:	03040513          	addi	a0,s0,48
   1b2d0:	8b0fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b2d4:	bfe1                	c.j	1b2ac <dwarf::die::read(unsigned long)+0x10a>
	_M_dispose();
   1b2d6:	601c                	c.ld	a5,0(s0)
   1b2d8:	6b9c                	c.ld	a5,16(a5)
   1b2da:	8522                	c.mv	a0,s0
   1b2dc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b2de:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b2e2:	0001e797          	auipc	a5,0x1e
   1b2e6:	19e7b783          	ld	a5,414(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b2ea:	0007c783          	lbu	a5,0(a5)
   1b2ee:	cf89                	c.beqz	a5,1b308 <dwarf::die::read(unsigned long)+0x166>
    _Atomic_word __result = *__mem;
   1b2f0:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1b2f2:	fff7871b          	addiw	a4,a5,-1
   1b2f6:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b2f8:	4705                	c.li	a4,1
   1b2fa:	fae79ce3          	bne	a5,a4,1b2b2 <dwarf::die::read(unsigned long)+0x110>
	    _M_destroy();
   1b2fe:	601c                	c.ld	a5,0(s0)
   1b300:	6f9c                	c.ld	a5,24(a5)
   1b302:	8522                	c.mv	a0,s0
   1b304:	9782                	c.jalr	a5
   1b306:	b775                	c.j	1b2b2 <dwarf::die::read(unsigned long)+0x110>
      return __exchange_and_add(__mem, __val);
   1b308:	55fd                	c.li	a1,-1
   1b30a:	03440513          	addi	a0,s0,52
   1b30e:	872fb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b312:	87aa                	c.mv	a5,a0
   1b314:	b7d5                	c.j	1b2f8 <dwarf::die::read(unsigned long)+0x156>
  abbrev = &cu->get_abbrev(acode);
   1b316:	6488                	c.ld	a0,8(s1)
   1b318:	82afe0ef          	jal	ra,19342 <dwarf::unit::get_abbrev(unsigned long) const>
   1b31c:	e888                	c.sd	a0,16(s1)
  tag = abbrev->tag;
   1b31e:	451c                	c.lw	a5,8(a0)
   1b320:	c09c                	c.sw	a5,0(s1)
  attrs.clear();
   1b322:	02048b13          	addi	s6,s1,32
    for (T *p = base; p < end; ++p)
   1b326:	68b4                	c.ld	a3,80(s1)
   1b328:	6cbc                	c.ld	a5,88(s1)
   1b32a:	00f6f763          	bgeu	a3,a5,1b338 <dwarf::die::read(unsigned long)+0x196>
   1b32e:	87b6                	c.mv	a5,a3
   1b330:	07a1                	c.addi	a5,8
   1b332:	6cb8                	c.ld	a4,88(s1)
   1b334:	fee7eee3          	bltu	a5,a4,1b330 <dwarf::die::read(unsigned long)+0x18e>
    end = base;
   1b338:	ecb4                	c.sd	a3,88(s1)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1b33a:	6d18                	c.ld	a4,24(a0)
   1b33c:	691c                	c.ld	a5,16(a0)
   1b33e:	8f1d                	c.sub	a4,a5
   1b340:	8709                	c.srai	a4,0x2
   1b342:	00012797          	auipc	a5,0x12
   1b346:	1467b783          	ld	a5,326(a5) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1b34a:	02f70733          	mul	a4,a4,a5
    if (n <= (size_type)(cap - base))
   1b34e:	70bc                	c.ld	a5,96(s1)
   1b350:	8f95                	c.sub	a5,a3
   1b352:	878d                	c.srai	a5,0x3
   1b354:	04e7fb63          	bgeu	a5,a4,1b3aa <dwarf::die::read(unsigned long)+0x208>
   1b358:	e391                	c.bnez	a5,1b35c <dwarf::die::read(unsigned long)+0x1ba>
   1b35a:	4785                	c.li	a5,1
    while (target < n)
   1b35c:	00e7f563          	bgeu	a5,a4,1b366 <dwarf::die::read(unsigned long)+0x1c4>
      target <<= 1;
   1b360:	0786                	c.slli	a5,0x1
    while (target < n)
   1b362:	fee7efe3          	bltu	a5,a4,1b360 <dwarf::die::read(unsigned long)+0x1be>
    char *newbuf = new char[sizeof(T[target])];
   1b366:	00379413          	slli	s0,a5,0x3
   1b36a:	8522                	c.mv	a0,s0
   1b36c:	fc5fa0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1b370:	89aa                	c.mv	s3,a0
    T *src = base, *dest = (T *)newbuf;
   1b372:	68a8                	c.ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1b374:	6cb8                	c.ld	a4,88(s1)
   1b376:	04e57463          	bgeu	a0,a4,1b3be <dwarf::die::read(unsigned long)+0x21c>
    T *src = base, *dest = (T *)newbuf;
   1b37a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1b37c:	07a1                	c.addi	a5,8
   1b37e:	fee7efe3          	bltu	a5,a4,1b37c <dwarf::die::read(unsigned long)+0x1da>
   1b382:	fff70913          	addi	s2,a4,-1
   1b386:	40a90933          	sub	s2,s2,a0
   1b38a:	ff897913          	andi	s2,s2,-8
   1b38e:	0921                	c.addi	s2,8
   1b390:	994e                	c.add	s2,s3
    if ((char *)base != buf)
   1b392:	00ab0563          	beq	s6,a0,1b39c <dwarf::die::read(unsigned long)+0x1fa>
      delete[] (char *)base;
   1b396:	c119                	c.beqz	a0,1b39c <dwarf::die::read(unsigned long)+0x1fa>
   1b398:	a28fb0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1b39c:	0534b823          	sd	s3,80(s1)
    end = dest;
   1b3a0:	0524bc23          	sd	s2,88(s1)
    cap = base + target;
   1b3a4:	99a2                	c.add	s3,s0
   1b3a6:	0734b023          	sd	s3,96(s1)
  for (auto &attr : abbrev->attributes) {
   1b3aa:	689c                	c.ld	a5,16(s1)
      : _M_current(__i) { }
   1b3ac:	0107b903          	ld	s2,16(a5)
   1b3b0:	0187ba03          	ld	s4,24(a5)
   1b3b4:	0b2a0163          	beq	s4,s2,1b456 <dwarf::die::read(unsigned long)+0x2b4>
    cur.skip_form(attr.form);
   1b3b8:	00810a93          	addi	s5,sp,8
   1b3bc:	a08d                	c.j	1b41e <dwarf::die::read(unsigned long)+0x27c>
    T *src = base, *dest = (T *)newbuf;
   1b3be:	894e                	c.mv	s2,s3
   1b3c0:	bfc9                	c.j	1b392 <dwarf::die::read(unsigned long)+0x1f0>
    char *newbuf = new char[sizeof(T[target])];
   1b3c2:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1b3c4:	68a8                	c.ld	a0,80(s1)
    for (; src < end; src++, dest++) {
   1b3c6:	6cb8                	c.ld	a4,88(s1)
   1b3c8:	04e57663          	bgeu	a0,a4,1b414 <dwarf::die::read(unsigned long)+0x272>
    T *src = base, *dest = (T *)newbuf;
   1b3cc:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1b3ce:	07a1                	c.addi	a5,8
   1b3d0:	fee7efe3          	bltu	a5,a4,1b3ce <dwarf::die::read(unsigned long)+0x22c>
   1b3d4:	fff70b93          	addi	s7,a4,-1
   1b3d8:	40ab8bb3          	sub	s7,s7,a0
   1b3dc:	ff8bfb93          	andi	s7,s7,-8
   1b3e0:	0ba1                	c.addi	s7,8
   1b3e2:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1b3e4:	00ab0563          	beq	s6,a0,1b3ee <dwarf::die::read(unsigned long)+0x24c>
      delete[] (char *)base;
   1b3e8:	c119                	c.beqz	a0,1b3ee <dwarf::die::read(unsigned long)+0x24c>
   1b3ea:	9d6fb0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1b3ee:	0584b823          	sd	s8,80(s1)
    end = dest;
   1b3f2:	0574bc23          	sd	s7,88(s1)
    cap = base + target;
   1b3f6:	9c22                	c.add	s8,s0
   1b3f8:	0784b023          	sd	s8,96(s1)
    new (end) T(std::move(x));
   1b3fc:	6cbc                	c.ld	a5,88(s1)
   1b3fe:	0137b023          	sd	s3,0(a5)
    end++;
   1b402:	6cbc                	c.ld	a5,88(s1)
   1b404:	07a1                	c.addi	a5,8
   1b406:	ecbc                	c.sd	a5,88(s1)
   1b408:	00492583          	lw	a1,4(s2)
   1b40c:	8556                	c.mv	a0,s5
   1b40e:	fc4ff0ef          	jal	ra,1abd2 <dwarf::cursor::skip_form(dwarf::DW_FORM)>
   1b412:	a019                	c.j	1b418 <dwarf::die::read(unsigned long)+0x276>
    T *src = base, *dest = (T *)newbuf;
   1b414:	8be2                	c.mv	s7,s8
   1b416:	b7f9                	c.j	1b3e4 <dwarf::die::read(unsigned long)+0x242>
  for (auto &attr : abbrev->attributes) {
   1b418:	0931                	c.addi	s2,12
   1b41a:	032a0e63          	beq	s4,s2,1b456 <dwarf::die::read(unsigned long)+0x2b4>
   1b41e:	67a2                	c.ldsp	a5,8(sp)
   1b420:	679c                	c.ld	a5,8(a5)
   1b422:	69e2                	c.ldsp	s3,24(sp)
   1b424:	40f989b3          	sub	s3,s3,a5
  size_type size() const { return end - base; }
   1b428:	68b4                	c.ld	a3,80(s1)
   1b42a:	6cb8                	c.ld	a4,88(s1)
   1b42c:	8f15                	c.sub	a4,a3
   1b42e:	870d                	c.srai	a4,0x3
    reserve(size() + 1);
   1b430:	0705                	c.addi	a4,1
    if (n <= (size_type)(cap - base))
   1b432:	70bc                	c.ld	a5,96(s1)
   1b434:	8f95                	c.sub	a5,a3
   1b436:	878d                	c.srai	a5,0x3
   1b438:	fce7f2e3          	bgeu	a5,a4,1b3fc <dwarf::die::read(unsigned long)+0x25a>
   1b43c:	e391                	c.bnez	a5,1b440 <dwarf::die::read(unsigned long)+0x29e>
   1b43e:	4785                	c.li	a5,1
    while (target < n)
   1b440:	00e7f563          	bgeu	a5,a4,1b44a <dwarf::die::read(unsigned long)+0x2a8>
      target <<= 1;
   1b444:	0786                	c.slli	a5,0x1
    while (target < n)
   1b446:	fee7efe3          	bltu	a5,a4,1b444 <dwarf::die::read(unsigned long)+0x2a2>
    char *newbuf = new char[sizeof(T[target])];
   1b44a:	00379413          	slli	s0,a5,0x3
   1b44e:	8522                	c.mv	a0,s0
   1b450:	ee1fa0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1b454:	b7bd                	c.j	1b3c2 <dwarf::die::read(unsigned long)+0x220>
   1b456:	67a2                	c.ldsp	a5,8(sp)
   1b458:	6798                	c.ld	a4,8(a5)
   1b45a:	67e2                	c.ldsp	a5,24(sp)
   1b45c:	8f99                	c.sub	a5,a4
  next = cur.get_section_offset();
   1b45e:	f4bc                	c.sd	a5,104(s1)
	if (_M_pi != nullptr)
   1b460:	6442                	c.ldsp	s0,16(sp)
   1b462:	e40408e3          	beq	s0,zero,1b2b2 <dwarf::die::read(unsigned long)+0x110>
    if (__is_single_threaded())
   1b466:	0001e797          	auipc	a5,0x1e
   1b46a:	01a7b783          	ld	a5,26(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b46e:	0007c783          	lbu	a5,0(a5)
   1b472:	c3a9                	c.beqz	a5,1b4b4 <dwarf::die::read(unsigned long)+0x312>
    _Atomic_word __result = *__mem;
   1b474:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1b476:	fff5079b          	addiw	a5,a0,-1
   1b47a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1b47c:	4785                	c.li	a5,1
   1b47e:	e2f51ae3          	bne	a0,a5,1b2b2 <dwarf::die::read(unsigned long)+0x110>
	_M_dispose();
   1b482:	601c                	c.ld	a5,0(s0)
   1b484:	6b9c                	c.ld	a5,16(a5)
   1b486:	8522                	c.mv	a0,s0
   1b488:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1b48a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1b48e:	0001e797          	auipc	a5,0x1e
   1b492:	ff27b783          	ld	a5,-14(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1b496:	0007c783          	lbu	a5,0(a5)
   1b49a:	c39d                	c.beqz	a5,1b4c0 <dwarf::die::read(unsigned long)+0x31e>
    _Atomic_word __result = *__mem;
   1b49c:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1b49e:	fff7871b          	addiw	a4,a5,-1
   1b4a2:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1b4a4:	4705                	c.li	a4,1
   1b4a6:	e0e796e3          	bne	a5,a4,1b2b2 <dwarf::die::read(unsigned long)+0x110>
	    _M_destroy();
   1b4aa:	601c                	c.ld	a5,0(s0)
   1b4ac:	6f9c                	c.ld	a5,24(a5)
   1b4ae:	8522                	c.mv	a0,s0
   1b4b0:	9782                	c.jalr	a5
   1b4b2:	b501                	c.j	1b2b2 <dwarf::die::read(unsigned long)+0x110>
      return __exchange_and_add(__mem, __val);
   1b4b4:	55fd                	c.li	a1,-1
   1b4b6:	03040513          	addi	a0,s0,48
   1b4ba:	ec7fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b4be:	bf7d                	c.j	1b47c <dwarf::die::read(unsigned long)+0x2da>
   1b4c0:	55fd                	c.li	a1,-1
   1b4c2:	03440513          	addi	a0,s0,52
   1b4c6:	ebbfa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1b4ca:	87aa                	c.mv	a5,a0
   1b4cc:	bfe1                	c.j	1b4a4 <dwarf::die::read(unsigned long)+0x302>
	if (_M_pi != nullptr)
   1b4ce:	842a                	c.mv	s0,a0
   1b4d0:	6542                	c.ldsp	a0,16(sp)
   1b4d2:	c511                	c.beqz	a0,1b4de <dwarf::die::read(unsigned long)+0x33c>
	  _M_pi->_M_release();
   1b4d4:	0001e317          	auipc	t1,0x1e
   1b4d8:	ef433303          	ld	t1,-268(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1b4dc:	9302                	c.jalr	t1
   1b4de:	8522                	c.mv	a0,s0
   1b4e0:	a10fb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1b4e4:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1b4e6:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1b4e8:	0089b783          	ld	a5,8(s3)
   1b4ec:	97ca                	c.add	a5,s2
   1b4ee:	ec3e                	c.sdsp	a5,24(sp)
  offset = off;
   1b4f0:	0124bc23          	sd	s2,24(s1)
    while (pos < sec->end) {
   1b4f4:	67e2                	c.ldsp	a5,24(sp)
      { return _M_ptr; }
   1b4f6:	6522                	c.ldsp	a0,8(sp)
   1b4f8:	6918                	c.ld	a4,16(a0)
   1b4fa:	02e7f763          	bgeu	a5,a4,1b528 <dwarf::die::read(unsigned long)+0x386>
    std::uint64_t result = 0;
   1b4fe:	4581                	c.li	a1,0
    int shift = 0;
   1b500:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   1b502:	0785                	c.addi	a5,1
   1b504:	ec3e                	c.sdsp	a5,24(sp)
   1b506:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1b50a:	07f77693          	andi	a3,a4,127
   1b50e:	00c696b3          	sll	a3,a3,a2
   1b512:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1b514:	0187171b          	slliw	a4,a4,0x18
   1b518:	4187571b          	sraiw	a4,a4,0x18
   1b51c:	d60753e3          	bge	a4,zero,1b282 <dwarf::die::read(unsigned long)+0xe0>
      shift += 7;
   1b520:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1b522:	6918                	c.ld	a4,16(a0)
   1b524:	fce7efe3          	bltu	a5,a4,1b502 <dwarf::die::read(unsigned long)+0x360>
    underflow();
   1b528:	0028                	c.addi4spn	a0,sp,8
   1b52a:	e0eff0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1b52e:	bb89                	c.j	1b280 <dwarf::die::read(unsigned long)+0xde>

000000000001b530 <dwarf::die::has(dwarf::DW_AT) const>:

bool die::has(DW_AT attr) const {
  if (!abbrev)
   1b530:	6918                	c.ld	a4,16(a0)
   1b532:	cf09                	c.beqz	a4,1b54c <dwarf::die::has(dwarf::DW_AT) const+0x1c>
   1b534:	6b1c                	c.ld	a5,16(a4)
   1b536:	6f14                	c.ld	a3,24(a4)
    return false;
  // XXX Totally lame
  for (auto &a : abbrev->attributes)
   1b538:	00f68c63          	beq	a3,a5,1b550 <dwarf::die::has(dwarf::DW_AT) const+0x20>
    if (a.name == attr)
   1b53c:	4398                	c.lw	a4,0(a5)
   1b53e:	00b70b63          	beq	a4,a1,1b554 <dwarf::die::has(dwarf::DW_AT) const+0x24>
  for (auto &a : abbrev->attributes)
   1b542:	07b1                	c.addi	a5,12
   1b544:	fef69ce3          	bne	a3,a5,1b53c <dwarf::die::has(dwarf::DW_AT) const+0xc>
      return true;
  return false;
   1b548:	4501                	c.li	a0,0
   1b54a:	8082                	c.jr	ra
    return false;
   1b54c:	4501                	c.li	a0,0
   1b54e:	8082                	c.jr	ra
  return false;
   1b550:	4501                	c.li	a0,0
   1b552:	8082                	c.jr	ra
      return true;
   1b554:	4505                	c.li	a0,1
}
   1b556:	8082                	c.jr	ra

000000000001b558 <dwarf::die::operator[](dwarf::DW_AT) const>:

value die::operator[](DW_AT attr) const {
   1b558:	711d                	c.addi16sp	sp,-96
   1b55a:	ec86                	c.sdsp	ra,88(sp)
   1b55c:	e8a2                	c.sdsp	s0,80(sp)
   1b55e:	e4a6                	c.sdsp	s1,72(sp)
   1b560:	8432                	c.mv	s0,a2
  // XXX We can pre-compute almost all of this work in the
  // abbrev_entry.
  if (abbrev) {
   1b562:	699c                	c.ld	a5,16(a1)
   1b564:	c3a1                	c.beqz	a5,1b5a4 <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
   1b566:	84aa                	c.mv	s1,a0
   1b568:	6b94                	c.ld	a3,16(a5)
   1b56a:	6f90                	c.ld	a2,24(a5)
    int i = 0;
    for (auto &a : abbrev->attributes) {
   1b56c:	02d60c63          	beq	a2,a3,1b5a4 <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
    int i = 0;
   1b570:	4781                	c.li	a5,0
   1b572:	a029                	c.j	1b57c <dwarf::die::operator[](dwarf::DW_AT) const+0x24>
      if (a.name == attr)
        return value(cu, a.name, a.form, a.type, attrs[i]);
      i++;
   1b574:	2785                	c.addiw	a5,1
    for (auto &a : abbrev->attributes) {
   1b576:	06b1                	c.addi	a3,12
   1b578:	02d60663          	beq	a2,a3,1b5a4 <dwarf::die::operator[](dwarf::DW_AT) const+0x4c>
      if (a.name == attr)
   1b57c:	4298                	c.lw	a4,0(a3)
   1b57e:	fe871be3          	bne	a4,s0,1b574 <dwarf::die::operator[](dwarf::DW_AT) const+0x1c>
        return value(cu, a.name, a.form, a.type, attrs[i]);
   1b582:	69b8                	c.ld	a4,80(a1)
   1b584:	078e                	c.slli	a5,0x3
   1b586:	97ba                	c.add	a5,a4
   1b588:	639c                	c.ld	a5,0(a5)
   1b58a:	4698                	c.lw	a4,8(a3)
   1b58c:	42d4                	c.lw	a3,4(a3)
   1b58e:	8622                	c.mv	a2,s0
   1b590:	658c                	c.ld	a1,8(a1)
   1b592:	8526                	c.mv	a0,s1
   1b594:	332020ef          	jal	ra,1d8c6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
    }
  }
  throw out_of_range("DIE does not have attribute " + to_string(attr));
}
   1b598:	8526                	c.mv	a0,s1
   1b59a:	60e6                	c.ldsp	ra,88(sp)
   1b59c:	6446                	c.ldsp	s0,80(sp)
   1b59e:	64a6                	c.ldsp	s1,72(sp)
   1b5a0:	6125                	c.addi16sp	sp,96
   1b5a2:	8082                	c.jr	ra
  throw out_of_range("DIE does not have attribute " + to_string(attr));
   1b5a4:	4541                	c.li	a0,16
   1b5a6:	e7bfa0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1b5aa:	84aa                	c.mv	s1,a0
   1b5ac:	85a2                	c.mv	a1,s0
   1b5ae:	850a                	c.mv	a0,sp
   1b5b0:	6c10d0ef          	jal	ra,29470 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1b5b4:	00012617          	auipc	a2,0x12
   1b5b8:	06c60613          	addi	a2,a2,108 # 2d620 <std::piecewise_construct+0x188>
   1b5bc:	4581                	c.li	a1,0
   1b5be:	850a                	c.mv	a0,sp
   1b5c0:	dd1fa0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1b5c4:	85aa                	c.mv	a1,a0
   1b5c6:	1000                	c.addi4spn	s0,sp,32
   1b5c8:	8522                	c.mv	a0,s0
   1b5ca:	ea7fa0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1b5ce:	85a2                	c.mv	a1,s0
   1b5d0:	8526                	c.mv	a0,s1
   1b5d2:	87efb0ef          	jal	ra,16650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1b5d6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1b5d8:	181c                	c.addi4spn	a5,sp,48
   1b5da:	00f50463          	beq	a0,a5,1b5e2 <dwarf::die::operator[](dwarf::DW_AT) const+0x8a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1b5de:	f33fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b5e2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1b5e4:	081c                	c.addi4spn	a5,sp,16
   1b5e6:	00f50463          	beq	a0,a5,1b5ee <dwarf::die::operator[](dwarf::DW_AT) const+0x96>
   1b5ea:	f27fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1b5ee:	0001e617          	auipc	a2,0x1e
   1b5f2:	ed263603          	ld	a2,-302(a2) # 394c0 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   1b5f6:	0001e597          	auipc	a1,0x1e
   1b5fa:	f7a5b583          	ld	a1,-134(a1) # 39570 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   1b5fe:	8526                	c.mv	a0,s1
   1b600:	8c0fb0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1b604:	842a                	c.mv	s0,a0
   1b606:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1b608:	181c                	c.addi4spn	a5,sp,48
   1b60a:	00f50463          	beq	a0,a5,1b612 <dwarf::die::operator[](dwarf::DW_AT) const+0xba>
   1b60e:	f03fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1b612:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1b614:	081c                	c.addi4spn	a5,sp,16
   1b616:	00f50463          	beq	a0,a5,1b61e <dwarf::die::operator[](dwarf::DW_AT) const+0xc6>
   1b61a:	ef7fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1b61e:	8526                	c.mv	a0,s1
   1b620:	eb1fa0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1b624:	8522                	c.mv	a0,s0
   1b626:	8cafb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1b62a:	842a                	c.mv	s0,a0
   1b62c:	b7dd                	c.j	1b612 <dwarf::die::operator[](dwarf::DW_AT) const+0xba>
   1b62e:	842a                	c.mv	s0,a0
   1b630:	b7fd                	c.j	1b61e <dwarf::die::operator[](dwarf::DW_AT) const+0xc6>

000000000001b632 <dwarf::die::operator==(dwarf::die const&) const>:
  }
  return res;
}

bool die::operator==(const die &o) const {
  return cu == o.cu && offset == o.offset;
   1b632:	6518                	c.ld	a4,8(a0)
   1b634:	659c                	c.ld	a5,8(a1)
   1b636:	00f70463          	beq	a4,a5,1b63e <dwarf::die::operator==(dwarf::die const&) const+0xc>
   1b63a:	4501                	c.li	a0,0
}
   1b63c:	8082                	c.jr	ra
  return cu == o.cu && offset == o.offset;
   1b63e:	6d08                	c.ld	a0,24(a0)
   1b640:	6d9c                	c.ld	a5,24(a1)
   1b642:	8d1d                	c.sub	a0,a5
   1b644:	00153513          	sltiu	a0,a0,1
   1b648:	8082                	c.jr	ra

000000000001b64a <dwarf::die::operator!=(dwarf::die const&) const>:

bool die::operator!=(const die &o) const { return !(*this == o); }
   1b64a:	1141                	c.addi	sp,-16
   1b64c:	e406                	c.sdsp	ra,8(sp)
   1b64e:	fe5ff0ef          	jal	ra,1b632 <dwarf::die::operator==(dwarf::die const&) const>
   1b652:	00154513          	xori	a0,a0,1
   1b656:	0ff57513          	andi	a0,a0,255
   1b65a:	60a2                	c.ldsp	ra,8(sp)
   1b65c:	0141                	c.addi	sp,16
   1b65e:	8082                	c.jr	ra

000000000001b660 <std::hash<dwarf::die>::operator()(dwarf::die const&) const>:

DWARFPP_END_NAMESPACE

size_t std::hash<dwarf::die>::operator()(const dwarf::die &a) const {
  return hash<decltype(a.cu)>()(a.cu) ^
         hash<decltype(a.get_unit_offset())>()(a.get_unit_offset());
   1b660:	6588                	c.ld	a0,8(a1)
   1b662:	6d9c                	c.ld	a5,24(a1)
}
   1b664:	8d3d                	c.xor	a0,a5
   1b666:	8082                	c.jr	ra

000000000001b668 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>:
die::iterator::iterator(const unit *cu, section_offset off) : d(cu) {
   1b668:	1101                	c.addi	sp,-32
   1b66a:	ec06                	c.sdsp	ra,24(sp)
   1b66c:	e822                	c.sdsp	s0,16(sp)
   1b66e:	e426                	c.sdsp	s1,8(sp)
   1b670:	842a                	c.mv	s0,a0
   1b672:	84b2                	c.mv	s1,a2
   1b674:	afbff0ef          	jal	ra,1b16e <dwarf::die::die(dwarf::unit const*)>
  d.read(off);
   1b678:	85a6                	c.mv	a1,s1
   1b67a:	8522                	c.mv	a0,s0
   1b67c:	b27ff0ef          	jal	ra,1b1a2 <dwarf::die::read(unsigned long)>
   1b680:	a821                	c.j	1b698 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)+0x30>
class die {
   1b682:	84aa                	c.mv	s1,a0
   1b684:	02040513          	addi	a0,s0,32
   1b688:	0001e317          	auipc	t1,0x1e
   1b68c:	d6033303          	ld	t1,-672(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1b690:	9302                	c.jalr	t1
   1b692:	8526                	c.mv	a0,s1
   1b694:	85cfb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
}
   1b698:	60e2                	c.ldsp	ra,24(sp)
   1b69a:	6442                	c.ldsp	s0,16(sp)
   1b69c:	64a2                	c.ldsp	s1,8(sp)
   1b69e:	6105                	c.addi16sp	sp,32
   1b6a0:	8082                	c.jr	ra

000000000001b6a2 <dwarf::die::begin() const>:
die::iterator die::begin() const {
   1b6a2:	1141                	c.addi	sp,-16
   1b6a4:	e406                	c.sdsp	ra,8(sp)
   1b6a6:	e022                	c.sdsp	s0,0(sp)
   1b6a8:	842a                	c.mv	s0,a0
  if (!abbrev || !abbrev->children)
   1b6aa:	699c                	c.ld	a5,16(a1)
   1b6ac:	c781                	c.beqz	a5,1b6b4 <dwarf::die::begin() const+0x12>
   1b6ae:	00c7c783          	lbu	a5,12(a5)
   1b6b2:	e3b9                	c.bnez	a5,1b6f8 <dwarf::die::begin() const+0x56>
inline die::iterator die::end() const { return iterator(); }
   1b6b4:	00043023          	sd	zero,0(s0)
   1b6b8:	00043423          	sd	zero,8(s0)
   1b6bc:	00043823          	sd	zero,16(s0)
   1b6c0:	00043c23          	sd	zero,24(s0)
   1b6c4:	02043023          	sd	zero,32(s0)
   1b6c8:	02043423          	sd	zero,40(s0)
   1b6cc:	02043823          	sd	zero,48(s0)
   1b6d0:	02043c23          	sd	zero,56(s0)
   1b6d4:	04043023          	sd	zero,64(s0)
   1b6d8:	04043423          	sd	zero,72(s0)
   1b6dc:	06043423          	sd	zero,104(s0)
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1b6e0:	02040793          	addi	a5,s0,32
   1b6e4:	e83c                	c.sd	a5,80(s0)
   1b6e6:	ec3c                	c.sd	a5,88(s0)
   1b6e8:	05040793          	addi	a5,s0,80
   1b6ec:	f03c                	c.sd	a5,96(s0)
}
   1b6ee:	8522                	c.mv	a0,s0
   1b6f0:	60a2                	c.ldsp	ra,8(sp)
   1b6f2:	6402                	c.ldsp	s0,0(sp)
   1b6f4:	0141                	c.addi	sp,16
   1b6f6:	8082                	c.jr	ra
  return iterator(cu, next);
   1b6f8:	75b0                	c.ld	a2,104(a1)
   1b6fa:	658c                	c.ld	a1,8(a1)
   1b6fc:	f6dff0ef          	jal	ra,1b668 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
   1b700:	b7fd                	c.j	1b6ee <dwarf::die::begin() const+0x4c>

000000000001b702 <dwarf::die::resolve(dwarf::DW_AT) const>:
value die::resolve(DW_AT attr) const {
   1b702:	714d                	c.addi16sp	sp,-336
   1b704:	e686                	c.sdsp	ra,328(sp)
   1b706:	e2a2                	c.sdsp	s0,320(sp)
   1b708:	fe26                	c.sdsp	s1,312(sp)
   1b70a:	fa4a                	c.sdsp	s2,304(sp)
   1b70c:	84aa                	c.mv	s1,a0
   1b70e:	842e                	c.mv	s0,a1
   1b710:	8932                	c.mv	s2,a2
  if (has(attr))
   1b712:	85b2                	c.mv	a1,a2
   1b714:	8522                	c.mv	a0,s0
   1b716:	e1bff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b71a:	cd09                	c.beqz	a0,1b734 <dwarf::die::resolve(dwarf::DW_AT) const+0x32>
    return (*this)[attr];
   1b71c:	864a                	c.mv	a2,s2
   1b71e:	85a2                	c.mv	a1,s0
   1b720:	8526                	c.mv	a0,s1
   1b722:	e37ff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
}
   1b726:	8526                	c.mv	a0,s1
   1b728:	60b6                	c.ldsp	ra,328(sp)
   1b72a:	6416                	c.ldsp	s0,320(sp)
   1b72c:	74f2                	c.ldsp	s1,312(sp)
   1b72e:	7952                	c.ldsp	s2,304(sp)
   1b730:	6171                	c.addi16sp	sp,336
   1b732:	8082                	c.jr	ra
  if (has(DW_AT::abstract_origin)) {
   1b734:	03100593          	addi	a1,zero,49
   1b738:	8522                	c.mv	a0,s0
   1b73a:	df7ff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b73e:	0e050763          	beq	a0,zero,1b82c <dwarf::die::resolve(dwarf::DW_AT) const+0x12a>
    die ao = (*this)[DW_AT::abstract_origin].as_reference();
   1b742:	03100613          	addi	a2,zero,49
   1b746:	85a2                	c.mv	a1,s0
   1b748:	11a0                	c.addi4spn	s0,sp,232
   1b74a:	8522                	c.mv	a0,s0
   1b74c:	e0dff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b750:	85a2                	c.mv	a1,s0
   1b752:	0020                	c.addi4spn	s0,sp,8
   1b754:	8522                	c.mv	a0,s0
   1b756:	452020ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
    if (ao.has(attr))
   1b75a:	85ca                	c.mv	a1,s2
   1b75c:	8522                	c.mv	a0,s0
   1b75e:	dd3ff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b762:	c519                	c.beqz	a0,1b770 <dwarf::die::resolve(dwarf::DW_AT) const+0x6e>
      return ao[attr];
   1b764:	864a                	c.mv	a2,s2
   1b766:	85a2                	c.mv	a1,s0
   1b768:	8526                	c.mv	a0,s1
   1b76a:	defff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b76e:	a869                	c.j	1b808 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
    if (ao.has(DW_AT::specification)) {
   1b770:	04700593          	addi	a1,zero,71
   1b774:	0028                	c.addi4spn	a0,sp,8
   1b776:	dbbff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b77a:	c531                	c.beqz	a0,1b7c6 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
      die s = ao[DW_AT::specification].as_reference();
   1b77c:	04700613          	addi	a2,zero,71
   1b780:	002c                	c.addi4spn	a1,sp,8
   1b782:	0208                	c.addi4spn	a0,sp,256
   1b784:	dd5ff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b788:	020c                	c.addi4spn	a1,sp,256
   1b78a:	18a8                	c.addi4spn	a0,sp,120
   1b78c:	41c020ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
      if (s.has(attr))
   1b790:	85ca                	c.mv	a1,s2
   1b792:	18a8                	c.addi4spn	a0,sp,120
   1b794:	d9dff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b798:	c519                	c.beqz	a0,1b7a6 <dwarf::die::resolve(dwarf::DW_AT) const+0xa4>
        return s[attr];
   1b79a:	864a                	c.mv	a2,s2
   1b79c:	18ac                	c.addi4spn	a1,sp,120
   1b79e:	8526                	c.mv	a0,s1
   1b7a0:	db9ff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b7a4:	a091                	c.j	1b7e8 <dwarf::die::resolve(dwarf::DW_AT) const+0xe6>
    for (T *p = base; p < end; ++p)
   1b7a6:	652e                	c.ldsp	a0,200(sp)
   1b7a8:	67ce                	c.ldsp	a5,208(sp)
   1b7aa:	00f57763          	bgeu	a0,a5,1b7b8 <dwarf::die::resolve(dwarf::DW_AT) const+0xb6>
   1b7ae:	87aa                	c.mv	a5,a0
   1b7b0:	07a1                	c.addi	a5,8
   1b7b2:	674e                	c.ldsp	a4,208(sp)
   1b7b4:	fee7eee3          	bltu	a5,a4,1b7b0 <dwarf::die::resolve(dwarf::DW_AT) const+0xae>
    end = base;
   1b7b8:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b7ba:	093c                	c.addi4spn	a5,sp,152
   1b7bc:	00f50563          	beq	a0,a5,1b7c6 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
      delete[] (char *)base;
   1b7c0:	c119                	c.beqz	a0,1b7c6 <dwarf::die::resolve(dwarf::DW_AT) const+0xc4>
   1b7c2:	dfffa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1b7c6:	6566                	c.ldsp	a0,88(sp)
   1b7c8:	7786                	c.ldsp	a5,96(sp)
   1b7ca:	00f57763          	bgeu	a0,a5,1b7d8 <dwarf::die::resolve(dwarf::DW_AT) const+0xd6>
   1b7ce:	87aa                	c.mv	a5,a0
   1b7d0:	07a1                	c.addi	a5,8
   1b7d2:	7706                	c.ldsp	a4,96(sp)
   1b7d4:	fee7eee3          	bltu	a5,a4,1b7d0 <dwarf::die::resolve(dwarf::DW_AT) const+0xce>
    end = base;
   1b7d8:	f0aa                	c.sdsp	a0,96(sp)
    if ((char *)base != buf)
   1b7da:	103c                	c.addi4spn	a5,sp,40
   1b7dc:	04f50e63          	beq	a0,a5,1b838 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
      delete[] (char *)base;
   1b7e0:	cd21                	c.beqz	a0,1b838 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
   1b7e2:	ddffa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1b7e6:	a889                	c.j	1b838 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
    for (T *p = base; p < end; ++p)
   1b7e8:	652e                	c.ldsp	a0,200(sp)
   1b7ea:	67ce                	c.ldsp	a5,208(sp)
   1b7ec:	00f57763          	bgeu	a0,a5,1b7fa <dwarf::die::resolve(dwarf::DW_AT) const+0xf8>
   1b7f0:	87aa                	c.mv	a5,a0
   1b7f2:	07a1                	c.addi	a5,8
   1b7f4:	674e                	c.ldsp	a4,208(sp)
   1b7f6:	fee7eee3          	bltu	a5,a4,1b7f2 <dwarf::die::resolve(dwarf::DW_AT) const+0xf0>
    end = base;
   1b7fa:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b7fc:	093c                	c.addi4spn	a5,sp,152
   1b7fe:	00f50563          	beq	a0,a5,1b808 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
      delete[] (char *)base;
   1b802:	c119                	c.beqz	a0,1b808 <dwarf::die::resolve(dwarf::DW_AT) const+0x106>
   1b804:	dbdfa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    for (T *p = base; p < end; ++p)
   1b808:	6566                	c.ldsp	a0,88(sp)
   1b80a:	7786                	c.ldsp	a5,96(sp)
   1b80c:	00f57763          	bgeu	a0,a5,1b81a <dwarf::die::resolve(dwarf::DW_AT) const+0x118>
   1b810:	87aa                	c.mv	a5,a0
   1b812:	07a1                	c.addi	a5,8
   1b814:	7706                	c.ldsp	a4,96(sp)
   1b816:	fee7eee3          	bltu	a5,a4,1b812 <dwarf::die::resolve(dwarf::DW_AT) const+0x110>
    end = base;
   1b81a:	f0aa                	c.sdsp	a0,96(sp)
    if ((char *)base != buf)
   1b81c:	103c                	c.addi4spn	a5,sp,40
   1b81e:	f0f504e3          	beq	a0,a5,1b726 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
      delete[] (char *)base;
   1b822:	f00502e3          	beq	a0,zero,1b726 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
   1b826:	d9bfa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1b82a:	bdf5                	c.j	1b726 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
  } else if (has(DW_AT::specification)) {
   1b82c:	04700593          	addi	a1,zero,71
   1b830:	8522                	c.mv	a0,s0
   1b832:	cffff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b836:	e511                	c.bnez	a0,1b842 <dwarf::die::resolve(dwarf::DW_AT) const+0x140>
  value() : cu(nullptr), typ(type::invalid) {}
   1b838:	0004b023          	sd	zero,0(s1)
   1b83c:	0004a623          	sw	zero,12(s1)
   1b840:	b5dd                	c.j	1b726 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
    die s = (*this)[DW_AT::specification].as_reference();
   1b842:	04700613          	addi	a2,zero,71
   1b846:	85a2                	c.mv	a1,s0
   1b848:	0a20                	c.addi4spn	s0,sp,280
   1b84a:	8522                	c.mv	a0,s0
   1b84c:	d0dff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b850:	85a2                	c.mv	a1,s0
   1b852:	18a0                	c.addi4spn	s0,sp,120
   1b854:	8522                	c.mv	a0,s0
   1b856:	352020ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
    if (s.has(attr))
   1b85a:	85ca                	c.mv	a1,s2
   1b85c:	8522                	c.mv	a0,s0
   1b85e:	cd3ff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b862:	c519                	c.beqz	a0,1b870 <dwarf::die::resolve(dwarf::DW_AT) const+0x16e>
      return s[attr];
   1b864:	864a                	c.mv	a2,s2
   1b866:	85a2                	c.mv	a1,s0
   1b868:	8526                	c.mv	a0,s1
   1b86a:	cefff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b86e:	a015                	c.j	1b892 <dwarf::die::resolve(dwarf::DW_AT) const+0x190>
    for (T *p = base; p < end; ++p)
   1b870:	652e                	c.ldsp	a0,200(sp)
   1b872:	67ce                	c.ldsp	a5,208(sp)
   1b874:	00f57763          	bgeu	a0,a5,1b882 <dwarf::die::resolve(dwarf::DW_AT) const+0x180>
   1b878:	87aa                	c.mv	a5,a0
   1b87a:	07a1                	c.addi	a5,8
   1b87c:	674e                	c.ldsp	a4,208(sp)
   1b87e:	fee7eee3          	bltu	a5,a4,1b87a <dwarf::die::resolve(dwarf::DW_AT) const+0x178>
    end = base;
   1b882:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b884:	093c                	c.addi4spn	a5,sp,152
   1b886:	faf509e3          	beq	a0,a5,1b838 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
      delete[] (char *)base;
   1b88a:	d55d                	c.beqz	a0,1b838 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
   1b88c:	d35fa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1b890:	b765                	c.j	1b838 <dwarf::die::resolve(dwarf::DW_AT) const+0x136>
    for (T *p = base; p < end; ++p)
   1b892:	652e                	c.ldsp	a0,200(sp)
   1b894:	67ce                	c.ldsp	a5,208(sp)
   1b896:	00f57763          	bgeu	a0,a5,1b8a4 <dwarf::die::resolve(dwarf::DW_AT) const+0x1a2>
   1b89a:	87aa                	c.mv	a5,a0
   1b89c:	07a1                	c.addi	a5,8
   1b89e:	674e                	c.ldsp	a4,208(sp)
   1b8a0:	fee7eee3          	bltu	a5,a4,1b89c <dwarf::die::resolve(dwarf::DW_AT) const+0x19a>
    end = base;
   1b8a4:	e9aa                	c.sdsp	a0,208(sp)
    if ((char *)base != buf)
   1b8a6:	093c                	c.addi4spn	a5,sp,152
   1b8a8:	e6f50fe3          	beq	a0,a5,1b726 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
      delete[] (char *)base;
   1b8ac:	e6050de3          	beq	a0,zero,1b726 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
   1b8b0:	d11fa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1b8b4:	bd8d                	c.j	1b726 <dwarf::die::resolve(dwarf::DW_AT) const+0x24>
class die {
   1b8b6:	842a                	c.mv	s0,a0
   1b8b8:	0928                	c.addi4spn	a0,sp,152
   1b8ba:	0001e317          	auipc	t1,0x1e
   1b8be:	b2e33303          	ld	t1,-1234(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1b8c2:	9302                	c.jalr	t1
   1b8c4:	1028                	c.addi4spn	a0,sp,40
   1b8c6:	0001e317          	auipc	t1,0x1e
   1b8ca:	b2233303          	ld	t1,-1246(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1b8ce:	9302                	c.jalr	t1
   1b8d0:	8522                	c.mv	a0,s0
   1b8d2:	e1ffa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   1b8d6:	842a                	c.mv	s0,a0
   1b8d8:	b7f5                	c.j	1b8c4 <dwarf::die::resolve(dwarf::DW_AT) const+0x1c2>
   1b8da:	842a                	c.mv	s0,a0
   1b8dc:	0928                	c.addi4spn	a0,sp,152
   1b8de:	0001e317          	auipc	t1,0x1e
   1b8e2:	b0a33303          	ld	t1,-1270(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1b8e6:	9302                	c.jalr	t1
   1b8e8:	8522                	c.mv	a0,s0
   1b8ea:	e07fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001b8ee <dwarf::die::iterator::operator++()>:
die::iterator &die::iterator::operator++() {
   1b8ee:	7155                	c.addi16sp	sp,-208
   1b8f0:	e586                	c.sdsp	ra,200(sp)
   1b8f2:	e1a2                	c.sdsp	s0,192(sp)
   1b8f4:	fd26                	c.sdsp	s1,184(sp)
   1b8f6:	f94a                	c.sdsp	s2,176(sp)
   1b8f8:	f54e                	c.sdsp	s3,168(sp)
   1b8fa:	f152                	c.sdsp	s4,160(sp)
   1b8fc:	ed56                	c.sdsp	s5,152(sp)
   1b8fe:	842a                	c.mv	s0,a0
  if (!d.abbrev)
   1b900:	691c                	c.ld	a5,16(a0)
   1b902:	c799                	c.beqz	a5,1b910 <dwarf::die::iterator::operator++()+0x22>
  if (!d.abbrev->children) {
   1b904:	00c7c783          	lbu	a5,12(a5)
   1b908:	ef91                	c.bnez	a5,1b924 <dwarf::die::iterator::operator++()+0x36>
    d.read(d.next);
   1b90a:	752c                	c.ld	a1,104(a0)
   1b90c:	897ff0ef          	jal	ra,1b1a2 <dwarf::die::read(unsigned long)>
}
   1b910:	8522                	c.mv	a0,s0
   1b912:	60ae                	c.ldsp	ra,200(sp)
   1b914:	640e                	c.ldsp	s0,192(sp)
   1b916:	74ea                	c.ldsp	s1,184(sp)
   1b918:	794a                	c.ldsp	s2,176(sp)
   1b91a:	79aa                	c.ldsp	s3,168(sp)
   1b91c:	7a0a                	c.ldsp	s4,160(sp)
   1b91e:	6aea                	c.ldsp	s5,152(sp)
   1b920:	6169                	c.addi16sp	sp,208
   1b922:	8082                	c.jr	ra
  } else if (d.has(DW_AT::sibling)) {
   1b924:	4585                	c.li	a1,1
   1b926:	c0bff0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1b92a:	0e050963          	beq	a0,zero,1ba1c <dwarf::die::iterator::operator++()+0x12e>
    d = d[DW_AT::sibling].as_reference();
   1b92e:	4605                	c.li	a2,1
   1b930:	85a2                	c.mv	a1,s0
   1b932:	18a4                	c.addi4spn	s1,sp,120
   1b934:	8526                	c.mv	a0,s1
   1b936:	c23ff0ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   1b93a:	85a6                	c.mv	a1,s1
   1b93c:	0028                	c.addi4spn	a0,sp,8
   1b93e:	26a020ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
  die &operator=(die &&o) = default;
   1b942:	47a2                	c.lwsp	a5,8(sp)
   1b944:	c01c                	c.sw	a5,0(s0)
   1b946:	67c2                	c.ldsp	a5,16(sp)
   1b948:	e41c                	c.sd	a5,8(s0)
   1b94a:	67e2                	c.ldsp	a5,24(sp)
   1b94c:	e81c                	c.sd	a5,16(s0)
   1b94e:	7782                	c.ldsp	a5,32(sp)
   1b950:	ec1c                	c.sd	a5,24(s0)
  size_type size() const { return end - base; }
   1b952:	7906                	c.ldsp	s2,96(sp)
   1b954:	67e6                	c.ldsp	a5,88(sp)
   1b956:	40f90933          	sub	s2,s2,a5
   1b95a:	40395493          	srai	s1,s2,0x3
    for (T *p = base; p < end; ++p)
   1b95e:	6834                	c.ld	a3,80(s0)
   1b960:	6c3c                	c.ld	a5,88(s0)
   1b962:	00f6f763          	bgeu	a3,a5,1b970 <dwarf::die::iterator::operator++()+0x82>
   1b966:	87b6                	c.mv	a5,a3
   1b968:	07a1                	c.addi	a5,8
   1b96a:	6c38                	c.ld	a4,88(s0)
   1b96c:	fee7eee3          	bltu	a5,a4,1b968 <dwarf::die::iterator::operator++()+0x7a>
    end = base;
   1b970:	ec34                	c.sd	a3,88(s0)
    if (n <= (size_type)(cap - base))
   1b972:	7028                	c.ld	a0,96(s0)
   1b974:	8d15                	c.sub	a0,a3
   1b976:	05257e63          	bgeu	a0,s2,1b9d2 <dwarf::die::iterator::operator++()+0xe4>
   1b97a:	850d                	c.srai	a0,0x3
   1b97c:	e111                	c.bnez	a0,1b980 <dwarf::die::iterator::operator++()+0x92>
   1b97e:	4505                	c.li	a0,1
    while (target < n)
   1b980:	00957563          	bgeu	a0,s1,1b98a <dwarf::die::iterator::operator++()+0x9c>
      target <<= 1;
   1b984:	0506                	c.slli	a0,0x1
    while (target < n)
   1b986:	fe956fe3          	bltu	a0,s1,1b984 <dwarf::die::iterator::operator++()+0x96>
    char *newbuf = new char[sizeof(T[target])];
   1b98a:	00351993          	slli	s3,a0,0x3
   1b98e:	854e                	c.mv	a0,s3
   1b990:	9a1fa0ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1b994:	8aaa                	c.mv	s5,a0
    T *src = base, *dest = (T *)newbuf;
   1b996:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1b998:	6c38                	c.ld	a4,88(s0)
   1b99a:	06e57f63          	bgeu	a0,a4,1ba18 <dwarf::die::iterator::operator++()+0x12a>
    T *src = base, *dest = (T *)newbuf;
   1b99e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1b9a0:	07a1                	c.addi	a5,8
   1b9a2:	fee7efe3          	bltu	a5,a4,1b9a0 <dwarf::die::iterator::operator++()+0xb2>
   1b9a6:	fff70a13          	addi	s4,a4,-1
   1b9aa:	40aa0a33          	sub	s4,s4,a0
   1b9ae:	ff8a7a13          	andi	s4,s4,-8
   1b9b2:	0a21                	c.addi	s4,8
   1b9b4:	9a56                	c.add	s4,s5
   1b9b6:	02040793          	addi	a5,s0,32
    if ((char *)base != buf)
   1b9ba:	00f50563          	beq	a0,a5,1b9c4 <dwarf::die::iterator::operator++()+0xd6>
      delete[] (char *)base;
   1b9be:	c119                	c.beqz	a0,1b9c4 <dwarf::die::iterator::operator++()+0xd6>
   1b9c0:	c01fa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1b9c4:	05543823          	sd	s5,80(s0)
    end = dest;
   1b9c8:	05443c23          	sd	s4,88(s0)
    cap = base + target;
   1b9cc:	9ace                	c.add	s5,s3
   1b9ce:	07543023          	sd	s5,96(s0)
    for (size_type i = 0; i < osize; i++)
   1b9d2:	cc89                	c.beqz	s1,1b9ec <dwarf::die::iterator::operator++()+0xfe>
   1b9d4:	4781                	c.li	a5,0
   1b9d6:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1b9da:	6766                	c.ldsp	a4,88(sp)
   1b9dc:	9736                	c.add	a4,a3
   1b9de:	6310                	c.ld	a2,0(a4)
   1b9e0:	6838                	c.ld	a4,80(s0)
   1b9e2:	9736                	c.add	a4,a3
   1b9e4:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1b9e6:	0785                	c.addi	a5,1
   1b9e8:	fef497e3          	bne	s1,a5,1b9d6 <dwarf::die::iterator::operator++()+0xe8>
    end = base + osize;
   1b9ec:	683c                	c.ld	a5,80(s0)
   1b9ee:	97ca                	c.add	a5,s2
   1b9f0:	ec3c                	c.sd	a5,88(s0)
   1b9f2:	77c6                	c.ldsp	a5,112(sp)
   1b9f4:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1b9f6:	6566                	c.ldsp	a0,88(sp)
   1b9f8:	7786                	c.ldsp	a5,96(sp)
   1b9fa:	00f57763          	bgeu	a0,a5,1ba08 <dwarf::die::iterator::operator++()+0x11a>
   1b9fe:	87aa                	c.mv	a5,a0
   1ba00:	07a1                	c.addi	a5,8
   1ba02:	7706                	c.ldsp	a4,96(sp)
   1ba04:	fee7eee3          	bltu	a5,a4,1ba00 <dwarf::die::iterator::operator++()+0x112>
    if ((char *)base != buf)
   1ba08:	103c                	c.addi4spn	a5,sp,40
   1ba0a:	f0f503e3          	beq	a0,a5,1b910 <dwarf::die::iterator::operator++()+0x22>
      delete[] (char *)base;
   1ba0e:	f00501e3          	beq	a0,zero,1b910 <dwarf::die::iterator::operator++()+0x22>
   1ba12:	baffa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1ba16:	bded                	c.j	1b910 <dwarf::die::iterator::operator++()+0x22>
    T *src = base, *dest = (T *)newbuf;
   1ba18:	8a56                	c.mv	s4,s5
   1ba1a:	bf71                	c.j	1b9b6 <dwarf::die::iterator::operator++()+0xc8>
    iterator sub(d.cu, d.next);
   1ba1c:	7430                	c.ld	a2,104(s0)
   1ba1e:	640c                	c.ld	a1,8(s0)
   1ba20:	0028                	c.addi4spn	a0,sp,8
   1ba22:	c47ff0ef          	jal	ra,1b668 <dwarf::die::iterator::iterator(dwarf::unit const*, unsigned long)>
      ++sub;
   1ba26:	0024                	c.addi4spn	s1,sp,8
    while (sub->abbrev)
   1ba28:	67e2                	c.ldsp	a5,24(sp)
   1ba2a:	c789                	c.beqz	a5,1ba34 <dwarf::die::iterator::operator++()+0x146>
      ++sub;
   1ba2c:	8526                	c.mv	a0,s1
   1ba2e:	ec1ff0ef          	jal	ra,1b8ee <dwarf::die::iterator::operator++()>
   1ba32:	bfdd                	c.j	1ba28 <dwarf::die::iterator::operator++()+0x13a>
    d.read(sub->next);
   1ba34:	75c6                	c.ldsp	a1,112(sp)
   1ba36:	8522                	c.mv	a0,s0
   1ba38:	f6aff0ef          	jal	ra,1b1a2 <dwarf::die::read(unsigned long)>
    for (T *p = base; p < end; ++p)
   1ba3c:	6566                	c.ldsp	a0,88(sp)
   1ba3e:	7786                	c.ldsp	a5,96(sp)
   1ba40:	00f57763          	bgeu	a0,a5,1ba4e <dwarf::die::iterator::operator++()+0x160>
   1ba44:	87aa                	c.mv	a5,a0
   1ba46:	07a1                	c.addi	a5,8
   1ba48:	7706                	c.ldsp	a4,96(sp)
   1ba4a:	fee7eee3          	bltu	a5,a4,1ba46 <dwarf::die::iterator::operator++()+0x158>
    if ((char *)base != buf)
   1ba4e:	103c                	c.addi4spn	a5,sp,40
   1ba50:	ecf500e3          	beq	a0,a5,1b910 <dwarf::die::iterator::operator++()+0x22>
      delete[] (char *)base;
   1ba54:	ea050ee3          	beq	a0,zero,1b910 <dwarf::die::iterator::operator++()+0x22>
   1ba58:	b69fa0ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1ba5c:	bd55                	c.j	1b910 <dwarf::die::iterator::operator++()+0x22>
class die {
   1ba5e:	842a                	c.mv	s0,a0
   1ba60:	1028                	c.addi4spn	a0,sp,40
   1ba62:	0001e317          	auipc	t1,0x1e
   1ba66:	98633303          	ld	t1,-1658(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1ba6a:	9302                	c.jalr	t1
   1ba6c:	8522                	c.mv	a0,s0
   1ba6e:	c83fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   1ba72:	842a                	c.mv	s0,a0
   1ba74:	1028                	c.addi4spn	a0,sp,40
   1ba76:	0001e317          	auipc	t1,0x1e
   1ba7a:	97233303          	ld	t1,-1678(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1ba7e:	9302                	c.jalr	t1
   1ba80:	8522                	c.mv	a0,s0
   1ba82:	c6ffa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000001ba86 <dwarf::die::attributes() const>:
const vector<pair<DW_AT, value>> die::attributes() const {
   1ba86:	7175                	c.addi16sp	sp,-144
   1ba88:	e506                	c.sdsp	ra,136(sp)
   1ba8a:	e122                	c.sdsp	s0,128(sp)
   1ba8c:	fca6                	c.sdsp	s1,120(sp)
   1ba8e:	f8ca                	c.sdsp	s2,112(sp)
   1ba90:	f4ce                	c.sdsp	s3,104(sp)
   1ba92:	f0d2                	c.sdsp	s4,96(sp)
   1ba94:	ecd6                	c.sdsp	s5,88(sp)
   1ba96:	e8da                	c.sdsp	s6,80(sp)
   1ba98:	e4de                	c.sdsp	s7,72(sp)
   1ba9a:	84aa                	c.mv	s1,a0
	: _M_start(), _M_finish(), _M_end_of_storage()
   1ba9c:	00053023          	sd	zero,0(a0)
   1baa0:	00053423          	sd	zero,8(a0)
   1baa4:	00053823          	sd	zero,16(a0)
  if (!abbrev)
   1baa8:	699c                	c.ld	a5,16(a1)
   1baaa:	c7d1                	c.beqz	a5,1bb36 <dwarf::die::attributes() const+0xb0>
   1baac:	89ae                	c.mv	s3,a1
   1baae:	6b80                	c.ld	s0,16(a5)
   1bab0:	0187ba03          	ld	s4,24(a5)
  for (auto &a : abbrev->attributes) {
   1bab4:	088a0163          	beq	s4,s0,1bb36 <dwarf::die::attributes() const+0xb0>
   1bab8:	4901                	c.li	s2,0
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1baba:	02810a93          	addi	s5,sp,40
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1babe:	00810b13          	addi	s6,sp,8
   1bac2:	0001eb97          	auipc	s7,0x1e
   1bac6:	a36bbb83          	ld	s7,-1482(s7) # 394f8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)@@Base+0x1d9aa>
   1baca:	a82d                	c.j	1bb04 <dwarf::die::attributes() const+0x7e>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
   1bacc:	401c                	c.lw	a5,0(s0)
   1bace:	c43e                	c.swsp	a5,8(sp)
   1bad0:	77a2                	c.ldsp	a5,40(sp)
   1bad2:	e83e                	c.sdsp	a5,16(sp)
   1bad4:	77c2                	c.ldsp	a5,48(sp)
   1bad6:	ec3e                	c.sdsp	a5,24(sp)
   1bad8:	77e2                	c.ldsp	a5,56(sp)
   1bada:	f03e                	c.sdsp	a5,32(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1badc:	648c                	c.ld	a1,8(s1)
   1bade:	689c                	c.ld	a5,16(s1)
   1bae0:	02f58f63          	beq	a1,a5,1bb1e <dwarf::die::attributes() const+0x98>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1bae4:	67a2                	c.ldsp	a5,8(sp)
   1bae6:	e19c                	c.sd	a5,0(a1)
   1bae8:	67c2                	c.ldsp	a5,16(sp)
   1baea:	e59c                	c.sd	a5,8(a1)
   1baec:	67e2                	c.ldsp	a5,24(sp)
   1baee:	e99c                	c.sd	a5,16(a1)
   1baf0:	7782                	c.ldsp	a5,32(sp)
   1baf2:	ed9c                	c.sd	a5,24(a1)
	    ++this->_M_impl._M_finish;
   1baf4:	649c                	c.ld	a5,8(s1)
   1baf6:	02078793          	addi	a5,a5,32
   1bafa:	e49c                	c.sd	a5,8(s1)
  for (auto &a : abbrev->attributes) {
   1bafc:	0431                	c.addi	s0,12
   1bafe:	0921                	c.addi	s2,8
   1bb00:	028a0b63          	beq	s4,s0,1bb36 <dwarf::die::attributes() const+0xb0>
        make_pair(a.name, value(cu, a.name, a.form, a.type, attrs[i])));
   1bb04:	0509b783          	ld	a5,80(s3)
   1bb08:	97ca                	c.add	a5,s2
   1bb0a:	639c                	c.ld	a5,0(a5)
   1bb0c:	4418                	c.lw	a4,8(s0)
   1bb0e:	4054                	c.lw	a3,4(s0)
   1bb10:	4010                	c.lw	a2,0(s0)
   1bb12:	0089b583          	ld	a1,8(s3)
   1bb16:	8556                	c.mv	a0,s5
   1bb18:	5af010ef          	jal	ra,1d8c6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>
   1bb1c:	bf45                	c.j	1bacc <dwarf::die::attributes() const+0x46>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1bb1e:	865a                	c.mv	a2,s6
   1bb20:	8526                	c.mv	a0,s1
   1bb22:	9b82                	c.jalr	s7
   1bb24:	bfe1                	c.j	1bafc <dwarf::die::attributes() const+0x76>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   1bb26:	842a                	c.mv	s0,a0
   1bb28:	6088                	c.ld	a0,0(s1)
	if (__p)
   1bb2a:	c119                	c.beqz	a0,1bb30 <dwarf::die::attributes() const+0xaa>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bb2c:	9e5fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1bb30:	8522                	c.mv	a0,s0
   1bb32:	bbffa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
}
   1bb36:	8526                	c.mv	a0,s1
   1bb38:	60aa                	c.ldsp	ra,136(sp)
   1bb3a:	640a                	c.ldsp	s0,128(sp)
   1bb3c:	74e6                	c.ldsp	s1,120(sp)
   1bb3e:	7946                	c.ldsp	s2,112(sp)
   1bb40:	79a6                	c.ldsp	s3,104(sp)
   1bb42:	7a06                	c.ldsp	s4,96(sp)
   1bb44:	6ae6                	c.ldsp	s5,88(sp)
   1bb46:	6b46                	c.ldsp	s6,80(sp)
   1bb48:	6ba6                	c.ldsp	s7,72(sp)
   1bb4a:	6149                	c.addi16sp	sp,144
   1bb4c:	8082                	c.jr	ra

000000000001bb4e <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)>:
      vector<_Tp, _Alloc>::
   1bb4e:	715d                	c.addi16sp	sp,-80
   1bb50:	e486                	c.sdsp	ra,72(sp)
   1bb52:	e0a2                	c.sdsp	s0,64(sp)
   1bb54:	fc26                	c.sdsp	s1,56(sp)
   1bb56:	f84a                	c.sdsp	s2,48(sp)
   1bb58:	f44e                	c.sdsp	s3,40(sp)
   1bb5a:	f052                	c.sdsp	s4,32(sp)
   1bb5c:	ec56                	c.sdsp	s5,24(sp)
   1bb5e:	e85a                	c.sdsp	s6,16(sp)
   1bb60:	e45e                	c.sdsp	s7,8(sp)
   1bb62:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1bb64:	00853903          	ld	s2,8(a0)
   1bb68:	00053a03          	ld	s4,0(a0)
   1bb6c:	414907b3          	sub	a5,s2,s4
   1bb70:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   1bb72:	577d                	c.li	a4,-1
   1bb74:	8319                	c.srli	a4,0x6
   1bb76:	02e78763          	beq	a5,a4,1bba4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x56>
   1bb7a:	8aaa                	c.mv	s5,a0
   1bb7c:	8bae                	c.mv	s7,a1
   1bb7e:	84b2                	c.mv	s1,a2
   1bb80:	842e                	c.mv	s0,a1
      return __a;
   1bb82:	873e                	c.mv	a4,a5
      if (__a < __b)
   1bb84:	03490663          	beq	s2,s4,1bbb0 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   1bb88:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bb8a:	02f76763          	bltu	a4,a5,1bbb8 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x6a>
   1bb8e:	8b3a                	c.mv	s6,a4
   1bb90:	57fd                	c.li	a5,-1
   1bb92:	8399                	c.srli	a5,0x6
   1bb94:	00e7f363          	bgeu	a5,a4,1bb9a <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x4c>
   1bb98:	8b3e                	c.mv	s6,a5
    { return __lhs.base() - __rhs.base(); }
   1bb9a:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1bb9e:	4981                	c.li	s3,0
   1bba0:	c715                	c.beqz	a4,1bbcc <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x7e>
   1bba2:	a005                	c.j	1bbc2 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x74>
	  __throw_length_error(__N(__s));
   1bba4:	00011517          	auipc	a0,0x11
   1bba8:	6ac50513          	addi	a0,a0,1708 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1bbac:	895fa0ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   1bbb0:	4705                	c.li	a4,1
   1bbb2:	bfd9                	c.j	1bb88 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x3a>
      _ForwardIterator __cur = __result;
   1bbb4:	84ce                	c.mv	s1,s3
   1bbb6:	a891                	c.j	1bc0a <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xbc>
   1bbb8:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1bbbc:	5b7d                	c.li	s6,-1
   1bbbe:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1bbc2:	005b1513          	slli	a0,s6,0x5
   1bbc6:	95bfa0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1bbca:	89aa                	c.mv	s3,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1bbcc:	018987b3          	add	a5,s3,s8
   1bbd0:	608c                	c.ld	a1,0(s1)
   1bbd2:	6490                	c.ld	a2,8(s1)
   1bbd4:	6894                	c.ld	a3,16(s1)
   1bbd6:	6c98                	c.ld	a4,24(s1)
   1bbd8:	e38c                	c.sd	a1,0(a5)
   1bbda:	e790                	c.sd	a2,8(a5)
   1bbdc:	eb94                	c.sd	a3,16(a5)
   1bbde:	ef98                	c.sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1bbe0:	fd440ae3          	beq	s0,s4,1bbb4 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0x66>
   1bbe4:	414b84b3          	sub	s1,s7,s4
   1bbe8:	94ce                	c.add	s1,s3
      _ForwardIterator __cur = __result;
   1bbea:	87ce                	c.mv	a5,s3
      for (; __first != __last; ++__first, (void)++__cur)
   1bbec:	8752                	c.mv	a4,s4
   1bbee:	6308                	c.ld	a0,0(a4)
   1bbf0:	670c                	c.ld	a1,8(a4)
   1bbf2:	6b10                	c.ld	a2,16(a4)
   1bbf4:	6f14                	c.ld	a3,24(a4)
   1bbf6:	e388                	c.sd	a0,0(a5)
   1bbf8:	e78c                	c.sd	a1,8(a5)
   1bbfa:	eb90                	c.sd	a2,16(a5)
   1bbfc:	ef94                	c.sd	a3,24(a5)
   1bbfe:	02070713          	addi	a4,a4,32
   1bc02:	02078793          	addi	a5,a5,32
   1bc06:	fe9794e3          	bne	a5,s1,1bbee <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xa0>
	      ++__new_finish;
   1bc0a:	02048493          	addi	s1,s1,32
   1bc0e:	03240463          	beq	s0,s2,1bc36 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xe8>
   1bc12:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   1bc16:	87a6                	c.mv	a5,s1
   1bc18:	6008                	c.ld	a0,0(s0)
   1bc1a:	6410                	c.ld	a2,8(s0)
   1bc1c:	6814                	c.ld	a3,16(s0)
   1bc1e:	6c18                	c.ld	a4,24(s0)
   1bc20:	e388                	c.sd	a0,0(a5)
   1bc22:	e790                	c.sd	a2,8(a5)
   1bc24:	eb94                	c.sd	a3,16(a5)
   1bc26:	ef98                	c.sd	a4,24(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1bc28:	02040413          	addi	s0,s0,32
   1bc2c:	02078793          	addi	a5,a5,32
   1bc30:	ff2414e3          	bne	s0,s2,1bc18 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xca>
   1bc34:	94de                	c.add	s1,s7
	if (__p)
   1bc36:	000a0563          	beq	s4,zero,1bc40 <void std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > >::_M_realloc_insert<std::pair<dwarf::DW_AT, dwarf::value> >(__gnu_cxx::__normal_iterator<std::pair<dwarf::DW_AT, dwarf::value>*, std::vector<std::pair<dwarf::DW_AT, dwarf::value>, std::allocator<std::pair<dwarf::DW_AT, dwarf::value> > > >, std::pair<dwarf::DW_AT, dwarf::value>&&)+0xf2>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1bc3a:	8552                	c.mv	a0,s4
   1bc3c:	8d5fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1bc40:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   1bc44:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1bc48:	0b16                	c.slli	s6,0x5
   1bc4a:	99da                	c.add	s3,s6
   1bc4c:	013ab823          	sd	s3,16(s5)
    }
   1bc50:	60a6                	c.ldsp	ra,72(sp)
   1bc52:	6406                	c.ldsp	s0,64(sp)
   1bc54:	74e2                	c.ldsp	s1,56(sp)
   1bc56:	7942                	c.ldsp	s2,48(sp)
   1bc58:	79a2                	c.ldsp	s3,40(sp)
   1bc5a:	7a02                	c.ldsp	s4,32(sp)
   1bc5c:	6ae2                	c.ldsp	s5,24(sp)
   1bc5e:	6b42                	c.ldsp	s6,16(sp)
   1bc60:	6ba2                	c.ldsp	s7,8(sp)
   1bc62:	6c02                	c.ldsp	s8,0(sp)
   1bc64:	6161                	c.addi16sp	sp,80
   1bc66:	8082                	c.jr	ra

000000000001bc68 <dwarf::value::get_section_offset() const>:
    : cu(cu), form(form), typ(typ), offset(offset) {
  if (form == DW_FORM::indirect)
    resolve_indirect(name);
}

section_offset value::get_section_offset() const {
   1bc68:	1141                	c.addi	sp,-16
   1bc6a:	e406                	c.sdsp	ra,8(sp)
   1bc6c:	e022                	c.sdsp	s0,0(sp)
   1bc6e:	842a                	c.mv	s0,a0
  return cu->get_section_offset() + offset;
   1bc70:	6108                	c.ld	a0,0(a0)
   1bc72:	b3afb0ef          	jal	ra,16fac <dwarf::unit::get_section_offset() const>
   1bc76:	681c                	c.ld	a5,16(s0)
}
   1bc78:	953e                	c.add	a0,a5
   1bc7a:	60a2                	c.ldsp	ra,8(sp)
   1bc7c:	6402                	c.ldsp	s0,0(sp)
   1bc7e:	0141                	c.addi	sp,16
   1bc80:	8082                	c.jr	ra

000000000001bc82 <dwarf::value::as_address() const>:

taddr value::as_address() const {
   1bc82:	7135                	c.addi16sp	sp,-160
   1bc84:	ed06                	c.sdsp	ra,152(sp)
   1bc86:	e922                	c.sdsp	s0,144(sp)
   1bc88:	e526                	c.sdsp	s1,136(sp)
   1bc8a:	e14a                	c.sdsp	s2,128(sp)
   1bc8c:	842a                	c.mv	s0,a0
  if (form != DW_FORM::addr)
   1bc8e:	4518                	c.lw	a4,8(a0)
   1bc90:	4785                	c.li	a5,1
   1bc92:	0af71063          	bne	a4,a5,1bd32 <dwarf::value::as_address() const+0xb0>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");

  cursor cur(cu->data(), offset);
   1bc96:	6108                	c.ld	a0,0(a0)
   1bc98:	b1afb0ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bc9c:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1bca0:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1bca2:	20048f63          	beq	s1,zero,1bec0 <dwarf::value::as_address() const+0x23e>
    if (__is_single_threaded())
   1bca6:	0001d797          	auipc	a5,0x1d
   1bcaa:	7da7b783          	ld	a5,2010(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bcae:	0007c783          	lbu	a5,0(a5)
   1bcb2:	10078863          	beq	a5,zero,1bdc2 <dwarf::value::as_address() const+0x140>
  { *__mem += __val; }
   1bcb6:	589c                	c.lw	a5,48(s1)
   1bcb8:	2785                	c.addiw	a5,1
   1bcba:	d89c                	c.sw	a5,48(s1)
   1bcbc:	6800                	c.ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bcbe:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1bcc0:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1bcc2:	0001d797          	auipc	a5,0x1d
   1bcc6:	7be7b783          	ld	a5,1982(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bcca:	0007c783          	lbu	a5,0(a5)
   1bcce:	10078063          	beq	a5,zero,1bdce <dwarf::value::as_address() const+0x14c>
  { *__mem += __val; }
   1bcd2:	589c                	c.lw	a5,48(s1)
   1bcd4:	2785                	c.addiw	a5,1
   1bcd6:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1bcd8:	00893783          	ld	a5,8(s2)
   1bcdc:	97a2                	c.add	a5,s0
   1bcde:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1bce0:	0001d797          	auipc	a5,0x1d
   1bce4:	7a07b783          	ld	a5,1952(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bce8:	0007c783          	lbu	a5,0(a5)
   1bcec:	0e078763          	beq	a5,zero,1bdda <dwarf::value::as_address() const+0x158>
    _Atomic_word __result = *__mem;
   1bcf0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1bcf2:	fff5079b          	addiw	a5,a0,-1
   1bcf6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1bcf8:	4785                	c.li	a5,1
   1bcfa:	1cf51a63          	bne	a0,a5,1bece <dwarf::value::as_address() const+0x24c>
	_M_dispose();
   1bcfe:	609c                	c.ld	a5,0(s1)
   1bd00:	6b9c                	c.ld	a5,16(a5)
   1bd02:	8526                	c.mv	a0,s1
   1bd04:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1bd06:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1bd0a:	0001d797          	auipc	a5,0x1d
   1bd0e:	7767b783          	ld	a5,1910(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bd12:	0007c783          	lbu	a5,0(a5)
   1bd16:	0c078863          	beq	a5,zero,1bde6 <dwarf::value::as_address() const+0x164>
    _Atomic_word __result = *__mem;
   1bd1a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1bd1c:	fff5079b          	addiw	a5,a0,-1
   1bd20:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1bd22:	4785                	c.li	a5,1
   1bd24:	1af51563          	bne	a0,a5,1bece <dwarf::value::as_address() const+0x24c>
	    _M_destroy();
   1bd28:	609c                	c.ld	a5,0(s1)
   1bd2a:	6f9c                	c.ld	a5,24(a5)
   1bd2c:	8526                	c.mv	a0,s1
   1bd2e:	9782                	c.jalr	a5
   1bd30:	aa79                	c.j	1bece <dwarf::value::as_address() const+0x24c>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1bd32:	4541                	c.li	a0,16
   1bd34:	eecfa0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1bd38:	84aa                	c.mv	s1,a0
   1bd3a:	444c                	c.lw	a1,12(s0)
   1bd3c:	0028                	c.addi4spn	a0,sp,8
   1bd3e:	6c00b0ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1bd42:	00012617          	auipc	a2,0x12
   1bd46:	91e60613          	addi	a2,a2,-1762 # 2d660 <std::piecewise_construct+0x1c8>
   1bd4a:	4581                	c.li	a1,0
   1bd4c:	0028                	c.addi4spn	a0,sp,8
   1bd4e:	e42fa0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1bd52:	85aa                	c.mv	a1,a0
   1bd54:	1020                	c.addi4spn	s0,sp,40
   1bd56:	8522                	c.mv	a0,s0
   1bd58:	f18fa0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1bd5c:	00012597          	auipc	a1,0x12
   1bd60:	91458593          	addi	a1,a1,-1772 # 2d670 <std::piecewise_construct+0x1d8>
   1bd64:	8522                	c.mv	a0,s0
   1bd66:	a3bfa0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1bd6a:	85aa                	c.mv	a1,a0
   1bd6c:	00a0                	c.addi4spn	s0,sp,72
   1bd6e:	8522                	c.mv	a0,s0
   1bd70:	f00fa0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1bd74:	85a2                	c.mv	a1,s0
   1bd76:	8526                	c.mv	a0,s1
   1bd78:	a79fa0ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1bd7c:	0001d797          	auipc	a5,0x1d
   1bd80:	6cc7b783          	ld	a5,1740(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1bd84:	07c1                	c.addi	a5,16
   1bd86:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1bd88:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1bd8a:	08bc                	c.addi4spn	a5,sp,88
   1bd8c:	00f50463          	beq	a0,a5,1bd94 <dwarf::value::as_address() const+0x112>
   1bd90:	f80fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1bd94:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1bd96:	183c                	c.addi4spn	a5,sp,56
   1bd98:	00f50463          	beq	a0,a5,1bda0 <dwarf::value::as_address() const+0x11e>
   1bd9c:	f74fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1bda0:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1bda2:	083c                	c.addi4spn	a5,sp,24
   1bda4:	00f50463          	beq	a0,a5,1bdac <dwarf::value::as_address() const+0x12a>
   1bda8:	f68fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1bdac:	0001e617          	auipc	a2,0x1e
   1bdb0:	82c63603          	ld	a2,-2004(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1bdb4:	0001d597          	auipc	a1,0x1d
   1bdb8:	7e45b583          	ld	a1,2020(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1bdbc:	8526                	c.mv	a0,s1
   1bdbe:	903fa0ef          	jal	ra,166c0 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   1bdc2:	4585                	c.li	a1,1
   1bdc4:	03048513          	addi	a0,s1,48
   1bdc8:	d88fa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bdcc:	bdc5                	c.j	1bcbc <dwarf::value::as_address() const+0x3a>
   1bdce:	4585                	c.li	a1,1
   1bdd0:	03048513          	addi	a0,s1,48
   1bdd4:	d7cfa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bdd8:	b701                	c.j	1bcd8 <dwarf::value::as_address() const+0x56>
      return __exchange_and_add(__mem, __val);
   1bdda:	55fd                	c.li	a1,-1
   1bddc:	03048513          	addi	a0,s1,48
   1bde0:	da0fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bde4:	bf11                	c.j	1bcf8 <dwarf::value::as_address() const+0x76>
   1bde6:	55fd                	c.li	a1,-1
   1bde8:	03448513          	addi	a0,s1,52
   1bdec:	d94fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bdf0:	bf0d                	c.j	1bd22 <dwarf::value::as_address() const+0xa0>
  return cur.address();
   1bdf2:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1bdf4:	74c6                	c.ldsp	s1,112(sp)
   1bdf6:	cc99                	c.beqz	s1,1be14 <dwarf::value::as_address() const+0x192>
    if (__is_single_threaded())
   1bdf8:	0001d797          	auipc	a5,0x1d
   1bdfc:	6887b783          	ld	a5,1672(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1be00:	0007c783          	lbu	a5,0(a5)
   1be04:	cf99                	c.beqz	a5,1be22 <dwarf::value::as_address() const+0x1a0>
    _Atomic_word __result = *__mem;
   1be06:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1be08:	fff5079b          	addiw	a5,a0,-1
   1be0c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1be0e:	4785                	c.li	a5,1
   1be10:	00f50f63          	beq	a0,a5,1be2e <dwarf::value::as_address() const+0x1ac>
}
   1be14:	8522                	c.mv	a0,s0
   1be16:	60ea                	c.ldsp	ra,152(sp)
   1be18:	644a                	c.ldsp	s0,144(sp)
   1be1a:	64aa                	c.ldsp	s1,136(sp)
   1be1c:	690a                	c.ldsp	s2,128(sp)
   1be1e:	610d                	c.addi16sp	sp,160
   1be20:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1be22:	55fd                	c.li	a1,-1
   1be24:	03048513          	addi	a0,s1,48
   1be28:	d58fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1be2c:	b7cd                	c.j	1be0e <dwarf::value::as_address() const+0x18c>
	_M_dispose();
   1be2e:	609c                	c.ld	a5,0(s1)
   1be30:	6b9c                	c.ld	a5,16(a5)
   1be32:	8526                	c.mv	a0,s1
   1be34:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1be36:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1be3a:	0001d797          	auipc	a5,0x1d
   1be3e:	6467b783          	ld	a5,1606(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1be42:	0007c783          	lbu	a5,0(a5)
   1be46:	cf89                	c.beqz	a5,1be60 <dwarf::value::as_address() const+0x1de>
    _Atomic_word __result = *__mem;
   1be48:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1be4a:	fff5079b          	addiw	a5,a0,-1
   1be4e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1be50:	4785                	c.li	a5,1
   1be52:	fcf511e3          	bne	a0,a5,1be14 <dwarf::value::as_address() const+0x192>
	    _M_destroy();
   1be56:	609c                	c.ld	a5,0(s1)
   1be58:	6f9c                	c.ld	a5,24(a5)
   1be5a:	8526                	c.mv	a0,s1
   1be5c:	9782                	c.jalr	a5
  return cur.address();
   1be5e:	bf5d                	c.j	1be14 <dwarf::value::as_address() const+0x192>
      return __exchange_and_add(__mem, __val);
   1be60:	55fd                	c.li	a1,-1
   1be62:	03448513          	addi	a0,s1,52
   1be66:	d1afa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1be6a:	b7dd                	c.j	1be50 <dwarf::value::as_address() const+0x1ce>
      { return _M_dataplus._M_p; }
   1be6c:	842a                	c.mv	s0,a0
   1be6e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1be70:	08bc                	c.addi4spn	a5,sp,88
   1be72:	00f50463          	beq	a0,a5,1be7a <dwarf::value::as_address() const+0x1f8>
   1be76:	e9afa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1be7a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1be7c:	183c                	c.addi4spn	a5,sp,56
   1be7e:	00f50463          	beq	a0,a5,1be86 <dwarf::value::as_address() const+0x204>
   1be82:	e8efa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1be86:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1be88:	083c                	c.addi4spn	a5,sp,24
   1be8a:	00f50463          	beq	a0,a5,1be92 <dwarf::value::as_address() const+0x210>
   1be8e:	e82fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as address");
   1be92:	8526                	c.mv	a0,s1
   1be94:	e3cfa0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1be98:	8522                	c.mv	a0,s0
   1be9a:	857fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1be9e:	842a                	c.mv	s0,a0
   1bea0:	bfe9                	c.j	1be7a <dwarf::value::as_address() const+0x1f8>
   1bea2:	842a                	c.mv	s0,a0
   1bea4:	b7cd                	c.j	1be86 <dwarf::value::as_address() const+0x204>
   1bea6:	842a                	c.mv	s0,a0
   1bea8:	b7ed                	c.j	1be92 <dwarf::value::as_address() const+0x210>
	if (_M_pi != nullptr)
   1beaa:	842a                	c.mv	s0,a0
   1beac:	7546                	c.ldsp	a0,112(sp)
   1beae:	c511                	c.beqz	a0,1beba <dwarf::value::as_address() const+0x238>
	  _M_pi->_M_release();
   1beb0:	0001d317          	auipc	t1,0x1d
   1beb4:	51833303          	ld	t1,1304(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1beb8:	9302                	c.jalr	t1
   1beba:	8522                	c.mv	a0,s0
   1bebc:	835fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
  cursor cur(cu->data(), offset);
   1bec0:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bec2:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1bec4:	f882                	c.sdsp	zero,112(sp)
   1bec6:	00893783          	ld	a5,8(s2)
   1beca:	97ba                	c.add	a5,a4
   1becc:	fcbe                	c.sdsp	a5,120(sp)
  return cur.address();
   1bece:	10a8                	c.addi4spn	a0,sp,104
   1bed0:	0001d317          	auipc	t1,0x1d
   1bed4:	4a833303          	ld	t1,1192(t1) # 39378 <dwarf::cursor::address()@@Base+0x1a382>
   1bed8:	9302                	c.jalr	t1
   1beda:	bf21                	c.j	1bdf2 <dwarf::value::as_address() const+0x170>

000000000001bedc <dwarf::value::as_block(unsigned long*) const>:

const void *value::as_block(size_t *size_out) const {
   1bedc:	7171                	c.addi16sp	sp,-176
   1bede:	f506                	c.sdsp	ra,168(sp)
   1bee0:	f122                	c.sdsp	s0,160(sp)
   1bee2:	ed26                	c.sdsp	s1,152(sp)
   1bee4:	e94a                	c.sdsp	s2,144(sp)
   1bee6:	e54e                	c.sdsp	s3,136(sp)
   1bee8:	e152                	c.sdsp	s4,128(sp)
   1beea:	84aa                	c.mv	s1,a0
   1beec:	842e                	c.mv	s0,a1
  // XXX Blocks can contain all sorts of things, including
  // references, which couldn't be resolved by callers in the
  // current minimal API.
  cursor cur(cu->data(), offset);
   1beee:	6108                	c.ld	a0,0(a0)
   1bef0:	8c2fb0ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bef4:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1bef8:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1befc:	34090963          	beq	s2,zero,1c24e <dwarf::value::as_block(unsigned long*) const+0x372>
    if (__is_single_threaded())
   1bf00:	0001d797          	auipc	a5,0x1d
   1bf04:	5807b783          	ld	a5,1408(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bf08:	0007c783          	lbu	a5,0(a5)
   1bf0c:	c7d9                	c.beqz	a5,1bf9a <dwarf::value::as_block(unsigned long*) const+0xbe>
  { *__mem += __val; }
   1bf0e:	03092783          	lw	a5,48(s2)
   1bf12:	2785                	c.addiw	a5,1
   1bf14:	02f92823          	sw	a5,48(s2)
   1bf18:	0104ba03          	ld	s4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1bf1c:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1bf1e:	f8ca                	c.sdsp	s2,112(sp)
    if (__is_single_threaded())
   1bf20:	0001d797          	auipc	a5,0x1d
   1bf24:	5607b783          	ld	a5,1376(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bf28:	0007c783          	lbu	a5,0(a5)
   1bf2c:	cfad                	c.beqz	a5,1bfa6 <dwarf::value::as_block(unsigned long*) const+0xca>
  { *__mem += __val; }
   1bf2e:	03092783          	lw	a5,48(s2)
   1bf32:	2785                	c.addiw	a5,1
   1bf34:	02f92823          	sw	a5,48(s2)
   1bf38:	0089b783          	ld	a5,8(s3)
   1bf3c:	97d2                	c.add	a5,s4
   1bf3e:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1bf40:	0001d797          	auipc	a5,0x1d
   1bf44:	5407b783          	ld	a5,1344(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bf48:	0007c783          	lbu	a5,0(a5)
   1bf4c:	c3bd                	c.beqz	a5,1bfb2 <dwarf::value::as_block(unsigned long*) const+0xd6>
    _Atomic_word __result = *__mem;
   1bf4e:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1bf52:	fff5079b          	addiw	a5,a0,-1
   1bf56:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1bf5a:	4785                	c.li	a5,1
   1bf5c:	30f51063          	bne	a0,a5,1c25c <dwarf::value::as_block(unsigned long*) const+0x380>
	_M_dispose();
   1bf60:	00093783          	ld	a5,0(s2)
   1bf64:	6b9c                	c.ld	a5,16(a5)
   1bf66:	854a                	c.mv	a0,s2
   1bf68:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1bf6a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1bf6e:	0001d797          	auipc	a5,0x1d
   1bf72:	5127b783          	ld	a5,1298(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1bf76:	0007c783          	lbu	a5,0(a5)
   1bf7a:	c3b1                	c.beqz	a5,1bfbe <dwarf::value::as_block(unsigned long*) const+0xe2>
    _Atomic_word __result = *__mem;
   1bf7c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1bf80:	fff5079b          	addiw	a5,a0,-1
   1bf84:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1bf88:	4785                	c.li	a5,1
   1bf8a:	2cf51963          	bne	a0,a5,1c25c <dwarf::value::as_block(unsigned long*) const+0x380>
	    _M_destroy();
   1bf8e:	00093783          	ld	a5,0(s2)
   1bf92:	6f9c                	c.ld	a5,24(a5)
   1bf94:	854a                	c.mv	a0,s2
   1bf96:	9782                	c.jalr	a5
   1bf98:	a4d1                	c.j	1c25c <dwarf::value::as_block(unsigned long*) const+0x380>
      __atomic_add(__mem, __val);
   1bf9a:	4585                	c.li	a1,1
   1bf9c:	03090513          	addi	a0,s2,48
   1bfa0:	bb0fa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bfa4:	bf95                	c.j	1bf18 <dwarf::value::as_block(unsigned long*) const+0x3c>
   1bfa6:	4585                	c.li	a1,1
   1bfa8:	03090513          	addi	a0,s2,48
   1bfac:	ba4fa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1bfb0:	b761                	c.j	1bf38 <dwarf::value::as_block(unsigned long*) const+0x5c>
      return __exchange_and_add(__mem, __val);
   1bfb2:	55fd                	c.li	a1,-1
   1bfb4:	03090513          	addi	a0,s2,48
   1bfb8:	bc8fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bfbc:	bf79                	c.j	1bf5a <dwarf::value::as_block(unsigned long*) const+0x7e>
   1bfbe:	55fd                	c.li	a1,-1
   1bfc0:	03490513          	addi	a0,s2,52
   1bfc4:	bbcfa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1bfc8:	b7c1                	c.j	1bf88 <dwarf::value::as_block(unsigned long*) const+0xac>
    while (pos < sec->end) {
   1bfca:	7766                	c.ldsp	a4,120(sp)
      { return _M_ptr; }
   1bfcc:	7526                	c.ldsp	a0,104(sp)
   1bfce:	6914                	c.ld	a3,16(a0)
    std::uint64_t result = 0;
   1bfd0:	4781                	c.li	a5,0
    int shift = 0;
   1bfd2:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1bfd4:	02d77563          	bgeu	a4,a3,1bffe <dwarf::value::as_block(unsigned long*) const+0x122>
      uint8_t byte = *(uint8_t *)(pos++);
   1bfd8:	0705                	c.addi	a4,1
   1bfda:	fcba                	c.sdsp	a4,120(sp)
   1bfdc:	fff74683          	lbu	a3,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1bfe0:	07f6f613          	andi	a2,a3,127
   1bfe4:	00b61633          	sll	a2,a2,a1
   1bfe8:	8fd1                	c.or	a5,a2
      if ((byte & 0x80) == 0)
   1bfea:	0186969b          	slliw	a3,a3,0x18
   1bfee:	4186d69b          	sraiw	a3,a3,0x18
   1bff2:	2406d063          	bge	a3,zero,1c232 <dwarf::value::as_block(unsigned long*) const+0x356>
      shift += 7;
   1bff6:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1bff8:	6914                	c.ld	a3,16(a0)
   1bffa:	fcd76fe3          	bltu	a4,a3,1bfd8 <dwarf::value::as_block(unsigned long*) const+0xfc>
    underflow();
   1bffe:	10a8                	c.addi4spn	a0,sp,104
   1c000:	b39fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1c004:	a0c9                	c.j	1c0c6 <dwarf::value::as_block(unsigned long*) const+0x1ea>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c006:	77a6                	c.ldsp	a5,104(sp)
   1c008:	6b98                	c.ld	a4,16(a5)
   1c00a:	77e6                	c.ldsp	a5,120(sp)
   1c00c:	00e7e563          	bltu	a5,a4,1c016 <dwarf::value::as_block(unsigned long*) const+0x13a>
      underflow();
   1c010:	10a8                	c.addi4spn	a0,sp,104
   1c012:	b27fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c016:	7766                	c.ldsp	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c018:	77a6                	c.ldsp	a5,104(sp)
   1c01a:	4fdc                	c.lw	a5,28(a5)
   1c01c:	20078763          	beq	a5,zero,1c22a <dwarf::value::as_block(unsigned long*) const+0x34e>
        val = (val << 8) | (uint64_t)p[i];
   1c020:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1c024:	a429                	c.j	1c22e <dwarf::value::as_block(unsigned long*) const+0x352>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c026:	77a6                	c.ldsp	a5,104(sp)
   1c028:	6b98                	c.ld	a4,16(a5)
   1c02a:	77e6                	c.ldsp	a5,120(sp)
   1c02c:	40f70633          	sub	a2,a4,a5
   1c030:	4685                	c.li	a3,1
   1c032:	00c6f463          	bgeu	a3,a2,1c03a <dwarf::value::as_block(unsigned long*) const+0x15e>
   1c036:	00e7e563          	bltu	a5,a4,1c040 <dwarf::value::as_block(unsigned long*) const+0x164>
      underflow();
   1c03a:	10a8                	c.addi4spn	a0,sp,104
   1c03c:	afdfe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c040:	7766                	c.ldsp	a4,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c042:	77a6                	c.ldsp	a5,104(sp)
   1c044:	4fdc                	c.lw	a5,28(a5)
   1c046:	eb91                	c.bnez	a5,1c05a <dwarf::value::as_block(unsigned long*) const+0x17e>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c048:	00174783          	lbu	a5,1(a4)
   1c04c:	07a2                	c.slli	a5,0x8
   1c04e:	00074683          	lbu	a3,0(a4)
   1c052:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   1c054:	0709                	c.addi	a4,2
   1c056:	fcba                	c.sdsp	a4,120(sp)
  case DW_FORM::block1:
    *size_out = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    *size_out = cur.fixed<uint16_t>();
    break;
   1c058:	aae9                	c.j	1c232 <dwarf::value::as_block(unsigned long*) const+0x356>
        val = (val << 8) | (uint64_t)p[i];
   1c05a:	00074783          	lbu	a5,0(a4)
   1c05e:	07a2                	c.slli	a5,0x8
   1c060:	00174683          	lbu	a3,1(a4)
   1c064:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1c066:	b7fd                	c.j	1c054 <dwarf::value::as_block(unsigned long*) const+0x178>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c068:	77a6                	c.ldsp	a5,104(sp)
   1c06a:	6b98                	c.ld	a4,16(a5)
   1c06c:	77e6                	c.ldsp	a5,120(sp)
   1c06e:	40f70633          	sub	a2,a4,a5
   1c072:	468d                	c.li	a3,3
   1c074:	00c6f463          	bgeu	a3,a2,1c07c <dwarf::value::as_block(unsigned long*) const+0x1a0>
   1c078:	00e7e563          	bltu	a5,a4,1c082 <dwarf::value::as_block(unsigned long*) const+0x1a6>
      underflow();
   1c07c:	10a8                	c.addi4spn	a0,sp,104
   1c07e:	abbfe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c082:	75e6                	c.ldsp	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c084:	77a6                	c.ldsp	a5,104(sp)
   1c086:	4fdc                	c.lw	a5,28(a5)
   1c088:	e39d                	c.bnez	a5,1c0ae <dwarf::value::as_block(unsigned long*) const+0x1d2>
   1c08a:	862e                	c.mv	a2,a1
   1c08c:	4701                	c.li	a4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c08e:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1c092:	00064683          	lbu	a3,0(a2)
   1c096:	00e696b3          	sll	a3,a3,a4
   1c09a:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1c09c:	0605                	c.addi	a2,1
   1c09e:	2721                	c.addiw	a4,8
   1c0a0:	fea719e3          	bne	a4,a0,1c092 <dwarf::value::as_block(unsigned long*) const+0x1b6>
    pos += sizeof(T);
   1c0a4:	0591                	c.addi	a1,4
   1c0a6:	fcae                	c.sdsp	a1,120(sp)
   1c0a8:	1782                	c.slli	a5,0x20
   1c0aa:	9381                	c.srli	a5,0x20
  case DW_FORM::block4:
    *size_out = cur.fixed<uint32_t>();
    break;
   1c0ac:	a259                	c.j	1c232 <dwarf::value::as_block(unsigned long*) const+0x356>
   1c0ae:	872e                	c.mv	a4,a1
   1c0b0:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1c0b4:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1c0b6:	07a2                	c.slli	a5,0x8
   1c0b8:	00074683          	lbu	a3,0(a4)
   1c0bc:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1c0be:	0705                	c.addi	a4,1
   1c0c0:	fec71be3          	bne	a4,a2,1c0b6 <dwarf::value::as_block(unsigned long*) const+0x1da>
   1c0c4:	b7c5                	c.j	1c0a4 <dwarf::value::as_block(unsigned long*) const+0x1c8>
    return 0;
   1c0c6:	4781                	c.li	a5,0
  case DW_FORM::block:
  case DW_FORM::exprloc:
    *size_out = cur.uleb128();
    break;
   1c0c8:	a2ad                	c.j	1c232 <dwarf::value::as_block(unsigned long*) const+0x356>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1c0ca:	4541                	c.li	a0,16
   1c0cc:	b54fa0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1c0d0:	892a                	c.mv	s2,a0
   1c0d2:	44cc                	c.lw	a1,12(s1)
   1c0d4:	0028                	c.addi4spn	a0,sp,8
   1c0d6:	3280b0ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c0da:	00011617          	auipc	a2,0x11
   1c0de:	58660613          	addi	a2,a2,1414 # 2d660 <std::piecewise_construct+0x1c8>
   1c0e2:	4581                	c.li	a1,0
   1c0e4:	0028                	c.addi4spn	a0,sp,8
   1c0e6:	aaafa0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c0ea:	85aa                	c.mv	a1,a0
   1c0ec:	1020                	c.addi4spn	s0,sp,40
   1c0ee:	8522                	c.mv	a0,s0
   1c0f0:	b80fa0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1c0f4:	00011597          	auipc	a1,0x11
   1c0f8:	58c58593          	addi	a1,a1,1420 # 2d680 <std::piecewise_construct+0x1e8>
   1c0fc:	8522                	c.mv	a0,s0
   1c0fe:	ea2fa0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1c102:	85aa                	c.mv	a1,a0
   1c104:	00a0                	c.addi4spn	s0,sp,72
   1c106:	8522                	c.mv	a0,s0
   1c108:	b68fa0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1c10c:	85a2                	c.mv	a1,s0
   1c10e:	854a                	c.mv	a0,s2
   1c110:	ee0fa0ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1c114:	0001d797          	auipc	a5,0x1d
   1c118:	3347b783          	ld	a5,820(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1c11c:	07c1                	c.addi	a5,16
   1c11e:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1c122:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c124:	08bc                	c.addi4spn	a5,sp,88
   1c126:	00f50463          	beq	a0,a5,1c12e <dwarf::value::as_block(unsigned long*) const+0x252>
   1c12a:	be6fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c12e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c130:	183c                	c.addi4spn	a5,sp,56
   1c132:	00f50463          	beq	a0,a5,1c13a <dwarf::value::as_block(unsigned long*) const+0x25e>
   1c136:	bdafa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c13a:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c13c:	083c                	c.addi4spn	a5,sp,24
   1c13e:	00f50463          	beq	a0,a5,1c146 <dwarf::value::as_block(unsigned long*) const+0x26a>
   1c142:	bcefa0ef          	jal	ra,16510 <operator delete(void*)@plt>
   1c146:	0001d617          	auipc	a2,0x1d
   1c14a:	49263603          	ld	a2,1170(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1c14e:	0001d597          	auipc	a1,0x1d
   1c152:	44a5b583          	ld	a1,1098(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1c156:	854a                	c.mv	a0,s2
   1c158:	d68fa0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1c15c:	842a                	c.mv	s0,a0
   1c15e:	a075                	c.j	1c20a <dwarf::value::as_block(unsigned long*) const+0x32e>
  }
  cur.ensure(*size_out);
  return cur.pos;
   1c160:	74e6                	c.ldsp	s1,120(sp)
   1c162:	7446                	c.ldsp	s0,112(sp)
   1c164:	cc19                	c.beqz	s0,1c182 <dwarf::value::as_block(unsigned long*) const+0x2a6>
    if (__is_single_threaded())
   1c166:	0001d797          	auipc	a5,0x1d
   1c16a:	31a7b783          	ld	a5,794(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c16e:	0007c783          	lbu	a5,0(a5)
   1c172:	c38d                	c.beqz	a5,1c194 <dwarf::value::as_block(unsigned long*) const+0x2b8>
    _Atomic_word __result = *__mem;
   1c174:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1c176:	fff5079b          	addiw	a5,a0,-1
   1c17a:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c17c:	4785                	c.li	a5,1
   1c17e:	02f50163          	beq	a0,a5,1c1a0 <dwarf::value::as_block(unsigned long*) const+0x2c4>
}
   1c182:	8526                	c.mv	a0,s1
   1c184:	70aa                	c.ldsp	ra,168(sp)
   1c186:	740a                	c.ldsp	s0,160(sp)
   1c188:	64ea                	c.ldsp	s1,152(sp)
   1c18a:	694a                	c.ldsp	s2,144(sp)
   1c18c:	69aa                	c.ldsp	s3,136(sp)
   1c18e:	6a0a                	c.ldsp	s4,128(sp)
   1c190:	614d                	c.addi16sp	sp,176
   1c192:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1c194:	55fd                	c.li	a1,-1
   1c196:	03040513          	addi	a0,s0,48
   1c19a:	9e6fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c19e:	bff9                	c.j	1c17c <dwarf::value::as_block(unsigned long*) const+0x2a0>
	_M_dispose();
   1c1a0:	601c                	c.ld	a5,0(s0)
   1c1a2:	6b9c                	c.ld	a5,16(a5)
   1c1a4:	8522                	c.mv	a0,s0
   1c1a6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c1a8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c1ac:	0001d797          	auipc	a5,0x1d
   1c1b0:	2d47b783          	ld	a5,724(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c1b4:	0007c783          	lbu	a5,0(a5)
   1c1b8:	cf89                	c.beqz	a5,1c1d2 <dwarf::value::as_block(unsigned long*) const+0x2f6>
    _Atomic_word __result = *__mem;
   1c1ba:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1c1bc:	fff5079b          	addiw	a5,a0,-1
   1c1c0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c1c2:	4785                	c.li	a5,1
   1c1c4:	faf51fe3          	bne	a0,a5,1c182 <dwarf::value::as_block(unsigned long*) const+0x2a6>
	    _M_destroy();
   1c1c8:	601c                	c.ld	a5,0(s0)
   1c1ca:	6f9c                	c.ld	a5,24(a5)
   1c1cc:	8522                	c.mv	a0,s0
   1c1ce:	9782                	c.jalr	a5
  return cur.pos;
   1c1d0:	bf4d                	c.j	1c182 <dwarf::value::as_block(unsigned long*) const+0x2a6>
      return __exchange_and_add(__mem, __val);
   1c1d2:	55fd                	c.li	a1,-1
   1c1d4:	03440513          	addi	a0,s0,52
   1c1d8:	9a8fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c1dc:	b7dd                	c.j	1c1c2 <dwarf::value::as_block(unsigned long*) const+0x2e6>
      { return _M_dataplus._M_p; }
   1c1de:	842a                	c.mv	s0,a0
   1c1e0:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c1e2:	08bc                	c.addi4spn	a5,sp,88
   1c1e4:	00f50463          	beq	a0,a5,1c1ec <dwarf::value::as_block(unsigned long*) const+0x310>
   1c1e8:	b28fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c1ec:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c1ee:	183c                	c.addi4spn	a5,sp,56
   1c1f0:	00f50463          	beq	a0,a5,1c1f8 <dwarf::value::as_block(unsigned long*) const+0x31c>
   1c1f4:	b1cfa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c1f8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c1fa:	083c                	c.addi4spn	a5,sp,24
   1c1fc:	00f50463          	beq	a0,a5,1c204 <dwarf::value::as_block(unsigned long*) const+0x328>
   1c200:	b10fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as block");
   1c204:	854a                	c.mv	a0,s2
   1c206:	acafa0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1c20a:	7546                	c.ldsp	a0,112(sp)
   1c20c:	c511                	c.beqz	a0,1c218 <dwarf::value::as_block(unsigned long*) const+0x33c>
	  _M_pi->_M_release();
   1c20e:	0001d317          	auipc	t1,0x1d
   1c212:	1ba33303          	ld	t1,442(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1c216:	9302                	c.jalr	t1
   1c218:	8522                	c.mv	a0,s0
   1c21a:	cd6fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1c21e:	842a                	c.mv	s0,a0
   1c220:	b7f1                	c.j	1c1ec <dwarf::value::as_block(unsigned long*) const+0x310>
   1c222:	842a                	c.mv	s0,a0
   1c224:	bfd1                	c.j	1c1f8 <dwarf::value::as_block(unsigned long*) const+0x31c>
   1c226:	842a                	c.mv	s0,a0
   1c228:	bff1                	c.j	1c204 <dwarf::value::as_block(unsigned long*) const+0x328>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c22a:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   1c22e:	0705                	c.addi	a4,1
   1c230:	fcba                	c.sdsp	a4,120(sp)
    *size_out = cur.fixed<uint8_t>();
   1c232:	e01c                	c.sd	a5,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c234:	7726                	c.ldsp	a4,104(sp)
   1c236:	6b14                	c.ld	a3,16(a4)
   1c238:	7766                	c.ldsp	a4,120(sp)
   1c23a:	40e68633          	sub	a2,a3,a4
   1c23e:	00f66463          	bltu	a2,a5,1c246 <dwarf::value::as_block(unsigned long*) const+0x36a>
   1c242:	f0d76fe3          	bltu	a4,a3,1c160 <dwarf::value::as_block(unsigned long*) const+0x284>
      underflow();
   1c246:	10a8                	c.addi4spn	a0,sp,104
   1c248:	8f1fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   1c24c:	bf11                	c.j	1c160 <dwarf::value::as_block(unsigned long*) const+0x284>
  cursor cur(cu->data(), offset);
   1c24e:	6898                	c.ld	a4,16(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c250:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1c252:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1c254:	0089b783          	ld	a5,8(s3)
   1c258:	97ba                	c.add	a5,a4
   1c25a:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1c25c:	449c                	c.lw	a5,8(s1)
   1c25e:	37f5                	c.addiw	a5,-3
   1c260:	0007869b          	addiw	a3,a5,0
   1c264:	4755                	c.li	a4,21
   1c266:	e6d762e3          	bltu	a4,a3,1c0ca <dwarf::value::as_block(unsigned long*) const+0x1ee>
   1c26a:	02079713          	slli	a4,a5,0x20
   1c26e:	01e75793          	srli	a5,a4,0x1e
   1c272:	00011717          	auipc	a4,0x11
   1c276:	57e70713          	addi	a4,a4,1406 # 2d7f0 <std::piecewise_construct+0x358>
   1c27a:	97ba                	c.add	a5,a4
   1c27c:	439c                	c.lw	a5,0(a5)
   1c27e:	97ba                	c.add	a5,a4
   1c280:	8782                	c.jr	a5

000000000001c282 <dwarf::value::as_uconstant() const>:

uint64_t value::as_uconstant() const {
   1c282:	7171                	c.addi16sp	sp,-176
   1c284:	f506                	c.sdsp	ra,168(sp)
   1c286:	f122                	c.sdsp	s0,160(sp)
   1c288:	ed26                	c.sdsp	s1,152(sp)
   1c28a:	e94a                	c.sdsp	s2,144(sp)
   1c28c:	e54e                	c.sdsp	s3,136(sp)
   1c28e:	842a                	c.mv	s0,a0
  cursor cur(cu->data(), offset);
   1c290:	6108                	c.ld	a0,0(a0)
   1c292:	d21fa0ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c296:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1c29a:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1c29c:	36048b63          	beq	s1,zero,1c612 <dwarf::value::as_uconstant() const+0x390>
    if (__is_single_threaded())
   1c2a0:	0001d797          	auipc	a5,0x1d
   1c2a4:	1e07b783          	ld	a5,480(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c2a8:	0007c783          	lbu	a5,0(a5)
   1c2ac:	cfad                	c.beqz	a5,1c326 <dwarf::value::as_uconstant() const+0xa4>
  { *__mem += __val; }
   1c2ae:	589c                	c.lw	a5,48(s1)
   1c2b0:	2785                	c.addiw	a5,1
   1c2b2:	d89c                	c.sw	a5,48(s1)
   1c2b4:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c2b8:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c2ba:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1c2bc:	0001d797          	auipc	a5,0x1d
   1c2c0:	1c47b783          	ld	a5,452(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c2c4:	0007c783          	lbu	a5,0(a5)
   1c2c8:	c7ad                	c.beqz	a5,1c332 <dwarf::value::as_uconstant() const+0xb0>
  { *__mem += __val; }
   1c2ca:	589c                	c.lw	a5,48(s1)
   1c2cc:	2785                	c.addiw	a5,1
   1c2ce:	d89c                	c.sw	a5,48(s1)
   1c2d0:	00893783          	ld	a5,8(s2)
   1c2d4:	97ce                	c.add	a5,s3
   1c2d6:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1c2d8:	0001d797          	auipc	a5,0x1d
   1c2dc:	1a87b783          	ld	a5,424(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c2e0:	0007c783          	lbu	a5,0(a5)
   1c2e4:	cfa9                	c.beqz	a5,1c33e <dwarf::value::as_uconstant() const+0xbc>
    _Atomic_word __result = *__mem;
   1c2e6:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c2e8:	fff5079b          	addiw	a5,a0,-1
   1c2ec:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c2ee:	4785                	c.li	a5,1
   1c2f0:	32f51863          	bne	a0,a5,1c620 <dwarf::value::as_uconstant() const+0x39e>
	_M_dispose();
   1c2f4:	609c                	c.ld	a5,0(s1)
   1c2f6:	6b9c                	c.ld	a5,16(a5)
   1c2f8:	8526                	c.mv	a0,s1
   1c2fa:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c2fc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c300:	0001d797          	auipc	a5,0x1d
   1c304:	1807b783          	ld	a5,384(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c308:	0007c783          	lbu	a5,0(a5)
   1c30c:	cf9d                	c.beqz	a5,1c34a <dwarf::value::as_uconstant() const+0xc8>
    _Atomic_word __result = *__mem;
   1c30e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c310:	fff5079b          	addiw	a5,a0,-1
   1c314:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c316:	4785                	c.li	a5,1
   1c318:	30f51463          	bne	a0,a5,1c620 <dwarf::value::as_uconstant() const+0x39e>
	    _M_destroy();
   1c31c:	609c                	c.ld	a5,0(s1)
   1c31e:	6f9c                	c.ld	a5,24(a5)
   1c320:	8526                	c.mv	a0,s1
   1c322:	9782                	c.jalr	a5
   1c324:	acf5                	c.j	1c620 <dwarf::value::as_uconstant() const+0x39e>
      __atomic_add(__mem, __val);
   1c326:	4585                	c.li	a1,1
   1c328:	03048513          	addi	a0,s1,48
   1c32c:	824fa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c330:	b751                	c.j	1c2b4 <dwarf::value::as_uconstant() const+0x32>
   1c332:	4585                	c.li	a1,1
   1c334:	03048513          	addi	a0,s1,48
   1c338:	818fa0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c33c:	bf51                	c.j	1c2d0 <dwarf::value::as_uconstant() const+0x4e>
      return __exchange_and_add(__mem, __val);
   1c33e:	55fd                	c.li	a1,-1
   1c340:	03048513          	addi	a0,s1,48
   1c344:	83cfa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c348:	b75d                	c.j	1c2ee <dwarf::value::as_uconstant() const+0x6c>
   1c34a:	55fd                	c.li	a1,-1
   1c34c:	03448513          	addi	a0,s1,52
   1c350:	830fa0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c354:	b7c9                	c.j	1c316 <dwarf::value::as_uconstant() const+0x94>
    while (pos < sec->end) {
   1c356:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   1c358:	75a6                	c.ldsp	a1,104(sp)
   1c35a:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   1c35c:	4401                	c.li	s0,0
    int shift = 0;
   1c35e:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1c360:	02e7f563          	bgeu	a5,a4,1c38a <dwarf::value::as_uconstant() const+0x108>
      uint8_t byte = *(uint8_t *)(pos++);
   1c364:	0785                	c.addi	a5,1
   1c366:	fcbe                	c.sdsp	a5,120(sp)
   1c368:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1c36c:	07f77693          	andi	a3,a4,127
   1c370:	00c696b3          	sll	a3,a3,a2
   1c374:	8c55                	c.or	s0,a3
      if ((byte & 0x80) == 0)
   1c376:	0187171b          	slliw	a4,a4,0x18
   1c37a:	4187571b          	sraiw	a4,a4,0x18
   1c37e:	26075263          	bge	a4,zero,1c5e2 <dwarf::value::as_uconstant() const+0x360>
      shift += 7;
   1c382:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1c384:	6998                	c.ld	a4,16(a1)
   1c386:	fce7efe3          	bltu	a5,a4,1c364 <dwarf::value::as_uconstant() const+0xe2>
    underflow();
   1c38a:	10a8                	c.addi4spn	a0,sp,104
   1c38c:	facfe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   1c390:	aa45                	c.j	1c540 <dwarf::value::as_uconstant() const+0x2be>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c392:	77a6                	c.ldsp	a5,104(sp)
   1c394:	6b98                	c.ld	a4,16(a5)
   1c396:	77e6                	c.ldsp	a5,120(sp)
   1c398:	00e7e563          	bltu	a5,a4,1c3a2 <dwarf::value::as_uconstant() const+0x120>
      underflow();
   1c39c:	10a8                	c.addi4spn	a0,sp,104
   1c39e:	f9afe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c3a2:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c3a4:	7726                	c.ldsp	a4,104(sp)
   1c3a6:	4f58                	c.lw	a4,28(a4)
   1c3a8:	22070963          	beq	a4,zero,1c5da <dwarf::value::as_uconstant() const+0x358>
        val = (val << 8) | (uint64_t)p[i];
   1c3ac:	0007c403          	lbu	s0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1c3b0:	a43d                	c.j	1c5de <dwarf::value::as_uconstant() const+0x35c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c3b2:	77a6                	c.ldsp	a5,104(sp)
   1c3b4:	6b98                	c.ld	a4,16(a5)
   1c3b6:	77e6                	c.ldsp	a5,120(sp)
   1c3b8:	40f70633          	sub	a2,a4,a5
   1c3bc:	4685                	c.li	a3,1
   1c3be:	00c6f463          	bgeu	a3,a2,1c3c6 <dwarf::value::as_uconstant() const+0x144>
   1c3c2:	00e7e563          	bltu	a5,a4,1c3cc <dwarf::value::as_uconstant() const+0x14a>
      underflow();
   1c3c6:	10a8                	c.addi4spn	a0,sp,104
   1c3c8:	f70fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c3cc:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c3ce:	7726                	c.ldsp	a4,104(sp)
   1c3d0:	4f58                	c.lw	a4,28(a4)
   1c3d2:	eb11                	c.bnez	a4,1c3e6 <dwarf::value::as_uconstant() const+0x164>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c3d4:	0017c403          	lbu	s0,1(a5)
   1c3d8:	0422                	c.slli	s0,0x8
   1c3da:	0007c703          	lbu	a4,0(a5)
   1c3de:	8c59                	c.or	s0,a4
    pos += sizeof(T);
   1c3e0:	0789                	c.addi	a5,2
   1c3e2:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<uint8_t>();
  case DW_FORM::data2:
    return cur.fixed<uint16_t>();
   1c3e4:	aafd                	c.j	1c5e2 <dwarf::value::as_uconstant() const+0x360>
        val = (val << 8) | (uint64_t)p[i];
   1c3e6:	0007c403          	lbu	s0,0(a5)
   1c3ea:	0422                	c.slli	s0,0x8
   1c3ec:	0017c703          	lbu	a4,1(a5)
   1c3f0:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c3f2:	b7fd                	c.j	1c3e0 <dwarf::value::as_uconstant() const+0x15e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c3f4:	77a6                	c.ldsp	a5,104(sp)
   1c3f6:	6b98                	c.ld	a4,16(a5)
   1c3f8:	77e6                	c.ldsp	a5,120(sp)
   1c3fa:	40f70633          	sub	a2,a4,a5
   1c3fe:	468d                	c.li	a3,3
   1c400:	00c6f463          	bgeu	a3,a2,1c408 <dwarf::value::as_uconstant() const+0x186>
   1c404:	00e7e563          	bltu	a5,a4,1c40e <dwarf::value::as_uconstant() const+0x18c>
      underflow();
   1c408:	10a8                	c.addi4spn	a0,sp,104
   1c40a:	f2efe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c40e:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c410:	77a6                	c.ldsp	a5,104(sp)
   1c412:	4fdc                	c.lw	a5,28(a5)
   1c414:	e39d                	c.bnez	a5,1c43a <dwarf::value::as_uconstant() const+0x1b8>
   1c416:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c418:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c41a:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1c41e:	0006c703          	lbu	a4,0(a3)
   1c422:	00f71733          	sll	a4,a4,a5
   1c426:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c428:	0685                	c.addi	a3,1
   1c42a:	27a1                	c.addiw	a5,8
   1c42c:	feb799e3          	bne	a5,a1,1c41e <dwarf::value::as_uconstant() const+0x19c>
    pos += sizeof(T);
   1c430:	0611                	c.addi	a2,4
   1c432:	fcb2                	c.sdsp	a2,120(sp)
   1c434:	1402                	c.slli	s0,0x20
   1c436:	9001                	c.srli	s0,0x20
  case DW_FORM::data4:
    return cur.fixed<uint32_t>();
   1c438:	a26d                	c.j	1c5e2 <dwarf::value::as_uconstant() const+0x360>
   1c43a:	87b2                	c.mv	a5,a2
   1c43c:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1c440:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1c442:	0422                	c.slli	s0,0x8
   1c444:	0007c703          	lbu	a4,0(a5)
   1c448:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c44a:	0785                	c.addi	a5,1
   1c44c:	fef69be3          	bne	a3,a5,1c442 <dwarf::value::as_uconstant() const+0x1c0>
   1c450:	b7c5                	c.j	1c430 <dwarf::value::as_uconstant() const+0x1ae>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c452:	77a6                	c.ldsp	a5,104(sp)
   1c454:	6b98                	c.ld	a4,16(a5)
   1c456:	77e6                	c.ldsp	a5,120(sp)
   1c458:	40f70633          	sub	a2,a4,a5
   1c45c:	469d                	c.li	a3,7
   1c45e:	00c6f463          	bgeu	a3,a2,1c466 <dwarf::value::as_uconstant() const+0x1e4>
   1c462:	00e7e563          	bltu	a5,a4,1c46c <dwarf::value::as_uconstant() const+0x1ea>
      underflow();
   1c466:	10a8                	c.addi4spn	a0,sp,104
   1c468:	ed0fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c46c:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c46e:	77a6                	c.ldsp	a5,104(sp)
   1c470:	4fdc                	c.lw	a5,28(a5)
   1c472:	e38d                	c.bnez	a5,1c494 <dwarf::value::as_uconstant() const+0x212>
   1c474:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c476:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c478:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1c47c:	0006c703          	lbu	a4,0(a3)
   1c480:	00f71733          	sll	a4,a4,a5
   1c484:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c486:	0685                	c.addi	a3,1
   1c488:	27a1                	c.addiw	a5,8
   1c48a:	feb799e3          	bne	a5,a1,1c47c <dwarf::value::as_uconstant() const+0x1fa>
    pos += sizeof(T);
   1c48e:	0621                	c.addi	a2,8
   1c490:	fcb2                	c.sdsp	a2,120(sp)
   1c492:	aa81                	c.j	1c5e2 <dwarf::value::as_uconstant() const+0x360>
   1c494:	87b2                	c.mv	a5,a2
   1c496:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1c49a:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1c49c:	0422                	c.slli	s0,0x8
   1c49e:	0007c703          	lbu	a4,0(a5)
   1c4a2:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c4a4:	0785                	c.addi	a5,1
   1c4a6:	fed79be3          	bne	a5,a3,1c49c <dwarf::value::as_uconstant() const+0x21a>
   1c4aa:	b7d5                	c.j	1c48e <dwarf::value::as_uconstant() const+0x20c>
    return cur.fixed<uint64_t>();
  case DW_FORM::udata:
    return cur.uleb128();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as uconstant");
   1c4ac:	4541                	c.li	a0,16
   1c4ae:	f73f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1c4b2:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1c4b4:	444c                	c.lw	a1,12(s0)
   1c4b6:	0028                	c.addi4spn	a0,sp,8
   1c4b8:	7470a0ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c4bc:	00011617          	auipc	a2,0x11
   1c4c0:	1a460613          	addi	a2,a2,420 # 2d660 <std::piecewise_construct+0x1c8>
   1c4c4:	4581                	c.li	a1,0
   1c4c6:	0028                	c.addi4spn	a0,sp,8
   1c4c8:	ec9f90ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c4cc:	85aa                	c.mv	a1,a0
   1c4ce:	1020                	c.addi4spn	s0,sp,40
   1c4d0:	8522                	c.mv	a0,s0
   1c4d2:	f9ff90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1c4d6:	00011597          	auipc	a1,0x11
   1c4da:	1ba58593          	addi	a1,a1,442 # 2d690 <std::piecewise_construct+0x1f8>
   1c4de:	8522                	c.mv	a0,s0
   1c4e0:	ac0fa0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1c4e4:	85aa                	c.mv	a1,a0
   1c4e6:	00a0                	c.addi4spn	s0,sp,72
   1c4e8:	8522                	c.mv	a0,s0
   1c4ea:	f87f90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1c4ee:	85a2                	c.mv	a1,s0
   1c4f0:	8526                	c.mv	a0,s1
   1c4f2:	afefa0ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1c4f6:	0001d797          	auipc	a5,0x1d
   1c4fa:	f527b783          	ld	a5,-174(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1c4fe:	07c1                	c.addi	a5,16
   1c500:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1c502:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c504:	08bc                	c.addi4spn	a5,sp,88
   1c506:	00f50463          	beq	a0,a5,1c50e <dwarf::value::as_uconstant() const+0x28c>
   1c50a:	806fa0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c50e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c510:	183c                	c.addi4spn	a5,sp,56
   1c512:	00f50463          	beq	a0,a5,1c51a <dwarf::value::as_uconstant() const+0x298>
   1c516:	ffbf90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c51a:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c51c:	083c                	c.addi4spn	a5,sp,24
   1c51e:	00f50463          	beq	a0,a5,1c526 <dwarf::value::as_uconstant() const+0x2a4>
   1c522:	feff90ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as uconstant");
   1c526:	0001d617          	auipc	a2,0x1d
   1c52a:	0b263603          	ld	a2,178(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1c52e:	0001d597          	auipc	a1,0x1d
   1c532:	06a5b583          	ld	a1,106(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1c536:	8526                	c.mv	a0,s1
   1c538:	988fa0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1c53c:	842a                	c.mv	s0,a0
   1c53e:	a8b5                	c.j	1c5ba <dwarf::value::as_uconstant() const+0x338>
    return 0;
   1c540:	4401                	c.li	s0,0
   1c542:	a045                	c.j	1c5e2 <dwarf::value::as_uconstant() const+0x360>
   1c544:	55fd                	c.li	a1,-1
   1c546:	03048513          	addi	a0,s1,48
   1c54a:	e37f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c54e:	a07d                	c.j	1c5fc <dwarf::value::as_uconstant() const+0x37a>
	_M_dispose();
   1c550:	609c                	c.ld	a5,0(s1)
   1c552:	6b9c                	c.ld	a5,16(a5)
   1c554:	8526                	c.mv	a0,s1
   1c556:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c558:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c55c:	0001d797          	auipc	a5,0x1d
   1c560:	f247b783          	ld	a5,-220(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c564:	0007c783          	lbu	a5,0(a5)
   1c568:	cf89                	c.beqz	a5,1c582 <dwarf::value::as_uconstant() const+0x300>
    _Atomic_word __result = *__mem;
   1c56a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c56c:	fff5079b          	addiw	a5,a0,-1
   1c570:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c572:	4785                	c.li	a5,1
   1c574:	08f51763          	bne	a0,a5,1c602 <dwarf::value::as_uconstant() const+0x380>
	    _M_destroy();
   1c578:	609c                	c.ld	a5,0(s1)
   1c57a:	6f9c                	c.ld	a5,24(a5)
   1c57c:	8526                	c.mv	a0,s1
   1c57e:	9782                	c.jalr	a5
   1c580:	a049                	c.j	1c602 <dwarf::value::as_uconstant() const+0x380>
      return __exchange_and_add(__mem, __val);
   1c582:	55fd                	c.li	a1,-1
   1c584:	03448513          	addi	a0,s1,52
   1c588:	df9f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c58c:	b7dd                	c.j	1c572 <dwarf::value::as_uconstant() const+0x2f0>
      { return _M_dataplus._M_p; }
   1c58e:	842a                	c.mv	s0,a0
   1c590:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c592:	08bc                	c.addi4spn	a5,sp,88
   1c594:	00f50463          	beq	a0,a5,1c59c <dwarf::value::as_uconstant() const+0x31a>
   1c598:	f79f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c59c:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c59e:	183c                	c.addi4spn	a5,sp,56
   1c5a0:	00f50463          	beq	a0,a5,1c5a8 <dwarf::value::as_uconstant() const+0x326>
   1c5a4:	f6df90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c5a8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c5aa:	083c                	c.addi4spn	a5,sp,24
   1c5ac:	00f50463          	beq	a0,a5,1c5b4 <dwarf::value::as_uconstant() const+0x332>
   1c5b0:	f61f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1c5b4:	8526                	c.mv	a0,s1
   1c5b6:	f1bf90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1c5ba:	7546                	c.ldsp	a0,112(sp)
   1c5bc:	c511                	c.beqz	a0,1c5c8 <dwarf::value::as_uconstant() const+0x346>
	  _M_pi->_M_release();
   1c5be:	0001d317          	auipc	t1,0x1d
   1c5c2:	e0a33303          	ld	t1,-502(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1c5c6:	9302                	c.jalr	t1
   1c5c8:	8522                	c.mv	a0,s0
   1c5ca:	926fa0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1c5ce:	842a                	c.mv	s0,a0
   1c5d0:	b7f1                	c.j	1c59c <dwarf::value::as_uconstant() const+0x31a>
   1c5d2:	842a                	c.mv	s0,a0
   1c5d4:	bfd1                	c.j	1c5a8 <dwarf::value::as_uconstant() const+0x326>
   1c5d6:	842a                	c.mv	s0,a0
   1c5d8:	bff1                	c.j	1c5b4 <dwarf::value::as_uconstant() const+0x332>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c5da:	0007c403          	lbu	s0,0(a5)
    pos += sizeof(T);
   1c5de:	0785                	c.addi	a5,1
   1c5e0:	fcbe                	c.sdsp	a5,120(sp)
	if (_M_pi != nullptr)
   1c5e2:	74c6                	c.ldsp	s1,112(sp)
   1c5e4:	cc99                	c.beqz	s1,1c602 <dwarf::value::as_uconstant() const+0x380>
    if (__is_single_threaded())
   1c5e6:	0001d797          	auipc	a5,0x1d
   1c5ea:	e9a7b783          	ld	a5,-358(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c5ee:	0007c783          	lbu	a5,0(a5)
   1c5f2:	dba9                	c.beqz	a5,1c544 <dwarf::value::as_uconstant() const+0x2c2>
    _Atomic_word __result = *__mem;
   1c5f4:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c5f6:	fff5079b          	addiw	a5,a0,-1
   1c5fa:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c5fc:	4785                	c.li	a5,1
   1c5fe:	f4f509e3          	beq	a0,a5,1c550 <dwarf::value::as_uconstant() const+0x2ce>
  }
}
   1c602:	8522                	c.mv	a0,s0
   1c604:	70aa                	c.ldsp	ra,168(sp)
   1c606:	740a                	c.ldsp	s0,160(sp)
   1c608:	64ea                	c.ldsp	s1,152(sp)
   1c60a:	694a                	c.ldsp	s2,144(sp)
   1c60c:	69aa                	c.ldsp	s3,136(sp)
   1c60e:	614d                	c.addi16sp	sp,176
   1c610:	8082                	c.jr	ra
  cursor cur(cu->data(), offset);
   1c612:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c614:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c616:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1c618:	00893783          	ld	a5,8(s2)
   1c61c:	97ba                	c.add	a5,a4
   1c61e:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1c620:	441c                	c.lw	a5,8(s0)
   1c622:	37ed                	c.addiw	a5,-5
   1c624:	0007869b          	addiw	a3,a5,0
   1c628:	4729                	c.li	a4,10
   1c62a:	e8d761e3          	bltu	a4,a3,1c4ac <dwarf::value::as_uconstant() const+0x22a>
   1c62e:	02079713          	slli	a4,a5,0x20
   1c632:	01e75793          	srli	a5,a4,0x1e
   1c636:	00011717          	auipc	a4,0x11
   1c63a:	21270713          	addi	a4,a4,530 # 2d848 <std::piecewise_construct+0x3b0>
   1c63e:	97ba                	c.add	a5,a4
   1c640:	439c                	c.lw	a5,0(a5)
   1c642:	97ba                	c.add	a5,a4
   1c644:	8782                	c.jr	a5

000000000001c646 <dwarf::value::as_sconstant() const>:

int64_t value::as_sconstant() const {
   1c646:	7171                	c.addi16sp	sp,-176
   1c648:	f506                	c.sdsp	ra,168(sp)
   1c64a:	f122                	c.sdsp	s0,160(sp)
   1c64c:	ed26                	c.sdsp	s1,152(sp)
   1c64e:	e94a                	c.sdsp	s2,144(sp)
   1c650:	e54e                	c.sdsp	s3,136(sp)
   1c652:	842a                	c.mv	s0,a0
  cursor cur(cu->data(), offset);
   1c654:	6108                	c.ld	a0,0(a0)
   1c656:	95dfa0ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c65a:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1c65e:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1c660:	34048963          	beq	s1,zero,1c9b2 <dwarf::value::as_sconstant() const+0x36c>
    if (__is_single_threaded())
   1c664:	0001d797          	auipc	a5,0x1d
   1c668:	e1c7b783          	ld	a5,-484(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c66c:	0007c783          	lbu	a5,0(a5)
   1c670:	cfad                	c.beqz	a5,1c6ea <dwarf::value::as_sconstant() const+0xa4>
  { *__mem += __val; }
   1c672:	589c                	c.lw	a5,48(s1)
   1c674:	2785                	c.addiw	a5,1
   1c676:	d89c                	c.sw	a5,48(s1)
   1c678:	01043983          	ld	s3,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c67c:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c67e:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1c680:	0001d797          	auipc	a5,0x1d
   1c684:	e007b783          	ld	a5,-512(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c688:	0007c783          	lbu	a5,0(a5)
   1c68c:	c7ad                	c.beqz	a5,1c6f6 <dwarf::value::as_sconstant() const+0xb0>
  { *__mem += __val; }
   1c68e:	589c                	c.lw	a5,48(s1)
   1c690:	2785                	c.addiw	a5,1
   1c692:	d89c                	c.sw	a5,48(s1)
   1c694:	00893783          	ld	a5,8(s2)
   1c698:	97ce                	c.add	a5,s3
   1c69a:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1c69c:	0001d797          	auipc	a5,0x1d
   1c6a0:	de47b783          	ld	a5,-540(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c6a4:	0007c783          	lbu	a5,0(a5)
   1c6a8:	cfa9                	c.beqz	a5,1c702 <dwarf::value::as_sconstant() const+0xbc>
    _Atomic_word __result = *__mem;
   1c6aa:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c6ac:	fff5079b          	addiw	a5,a0,-1
   1c6b0:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c6b2:	4785                	c.li	a5,1
   1c6b4:	30f51663          	bne	a0,a5,1c9c0 <dwarf::value::as_sconstant() const+0x37a>
	_M_dispose();
   1c6b8:	609c                	c.ld	a5,0(s1)
   1c6ba:	6b9c                	c.ld	a5,16(a5)
   1c6bc:	8526                	c.mv	a0,s1
   1c6be:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c6c0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c6c4:	0001d797          	auipc	a5,0x1d
   1c6c8:	dbc7b783          	ld	a5,-580(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c6cc:	0007c783          	lbu	a5,0(a5)
   1c6d0:	cf9d                	c.beqz	a5,1c70e <dwarf::value::as_sconstant() const+0xc8>
    _Atomic_word __result = *__mem;
   1c6d2:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c6d4:	fff5079b          	addiw	a5,a0,-1
   1c6d8:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c6da:	4785                	c.li	a5,1
   1c6dc:	2ef51263          	bne	a0,a5,1c9c0 <dwarf::value::as_sconstant() const+0x37a>
	    _M_destroy();
   1c6e0:	609c                	c.ld	a5,0(s1)
   1c6e2:	6f9c                	c.ld	a5,24(a5)
   1c6e4:	8526                	c.mv	a0,s1
   1c6e6:	9782                	c.jalr	a5
   1c6e8:	ace1                	c.j	1c9c0 <dwarf::value::as_sconstant() const+0x37a>
      __atomic_add(__mem, __val);
   1c6ea:	4585                	c.li	a1,1
   1c6ec:	03048513          	addi	a0,s1,48
   1c6f0:	c61f90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c6f4:	b751                	c.j	1c678 <dwarf::value::as_sconstant() const+0x32>
   1c6f6:	4585                	c.li	a1,1
   1c6f8:	03048513          	addi	a0,s1,48
   1c6fc:	c55f90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1c700:	bf51                	c.j	1c694 <dwarf::value::as_sconstant() const+0x4e>
      return __exchange_and_add(__mem, __val);
   1c702:	55fd                	c.li	a1,-1
   1c704:	03048513          	addi	a0,s1,48
   1c708:	c79f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c70c:	b75d                	c.j	1c6b2 <dwarf::value::as_sconstant() const+0x6c>
   1c70e:	55fd                	c.li	a1,-1
   1c710:	03448513          	addi	a0,s1,52
   1c714:	c6df90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c718:	b7c9                	c.j	1c6da <dwarf::value::as_sconstant() const+0x94>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c71a:	77a6                	c.ldsp	a5,104(sp)
   1c71c:	6b98                	c.ld	a4,16(a5)
   1c71e:	77e6                	c.ldsp	a5,120(sp)
   1c720:	00e7e563          	bltu	a5,a4,1c72a <dwarf::value::as_sconstant() const+0xe4>
      underflow();
   1c724:	10a8                	c.addi4spn	a0,sp,104
   1c726:	c12fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c72a:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c72c:	7726                	c.ldsp	a4,104(sp)
   1c72e:	4f58                	c.lw	a4,28(a4)
   1c730:	24070163          	beq	a4,zero,1c972 <dwarf::value::as_sconstant() const+0x32c>
        val = (val << 8) | (uint64_t)p[i];
   1c734:	0007c503          	lbu	a0,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1c738:	ac3d                	c.j	1c976 <dwarf::value::as_sconstant() const+0x330>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c73a:	77a6                	c.ldsp	a5,104(sp)
   1c73c:	6b98                	c.ld	a4,16(a5)
   1c73e:	77e6                	c.ldsp	a5,120(sp)
   1c740:	40f70633          	sub	a2,a4,a5
   1c744:	4685                	c.li	a3,1
   1c746:	00c6f463          	bgeu	a3,a2,1c74e <dwarf::value::as_sconstant() const+0x108>
   1c74a:	00e7e563          	bltu	a5,a4,1c754 <dwarf::value::as_sconstant() const+0x10e>
      underflow();
   1c74e:	10a8                	c.addi4spn	a0,sp,104
   1c750:	be8fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c754:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c756:	7726                	c.ldsp	a4,104(sp)
   1c758:	4f58                	c.lw	a4,28(a4)
   1c75a:	ef11                	c.bnez	a4,1c776 <dwarf::value::as_sconstant() const+0x130>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c75c:	0017c503          	lbu	a0,1(a5)
   1c760:	0522                	c.slli	a0,0x8
   1c762:	0007c703          	lbu	a4,0(a5)
   1c766:	8d59                	c.or	a0,a4
    pos += sizeof(T);
   1c768:	0789                	c.addi	a5,2
   1c76a:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
  case DW_FORM::data1:
    return cur.fixed<int8_t>();
  case DW_FORM::data2:
    return cur.fixed<int16_t>();
   1c76c:	0105141b          	slliw	s0,a0,0x10
   1c770:	4104541b          	sraiw	s0,s0,0x10
   1c774:	a439                	c.j	1c982 <dwarf::value::as_sconstant() const+0x33c>
        val = (val << 8) | (uint64_t)p[i];
   1c776:	0007c503          	lbu	a0,0(a5)
   1c77a:	0522                	c.slli	a0,0x8
   1c77c:	0017c703          	lbu	a4,1(a5)
   1c780:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c782:	b7dd                	c.j	1c768 <dwarf::value::as_sconstant() const+0x122>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c784:	77a6                	c.ldsp	a5,104(sp)
   1c786:	6b98                	c.ld	a4,16(a5)
   1c788:	77e6                	c.ldsp	a5,120(sp)
   1c78a:	40f70633          	sub	a2,a4,a5
   1c78e:	468d                	c.li	a3,3
   1c790:	00c6f463          	bgeu	a3,a2,1c798 <dwarf::value::as_sconstant() const+0x152>
   1c794:	00e7e563          	bltu	a5,a4,1c79e <dwarf::value::as_sconstant() const+0x158>
      underflow();
   1c798:	10a8                	c.addi4spn	a0,sp,104
   1c79a:	b9efe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c79e:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c7a0:	77a6                	c.ldsp	a5,104(sp)
   1c7a2:	4fdc                	c.lw	a5,28(a5)
   1c7a4:	e39d                	c.bnez	a5,1c7ca <dwarf::value::as_sconstant() const+0x184>
   1c7a6:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c7a8:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c7aa:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1c7ae:	0006c703          	lbu	a4,0(a3)
   1c7b2:	00f71733          	sll	a4,a4,a5
   1c7b6:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c7b8:	0685                	c.addi	a3,1
   1c7ba:	27a1                	c.addiw	a5,8
   1c7bc:	feb799e3          	bne	a5,a1,1c7ae <dwarf::value::as_sconstant() const+0x168>
    pos += sizeof(T);
   1c7c0:	0611                	c.addi	a2,4
   1c7c2:	fcb2                	c.sdsp	a2,120(sp)
  case DW_FORM::data4:
    return cur.fixed<int32_t>();
   1c7c4:	0005041b          	addiw	s0,a0,0
   1c7c8:	aa6d                	c.j	1c982 <dwarf::value::as_sconstant() const+0x33c>
   1c7ca:	87b2                	c.mv	a5,a2
   1c7cc:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1c7d0:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1c7d2:	0522                	c.slli	a0,0x8
   1c7d4:	0007c703          	lbu	a4,0(a5)
   1c7d8:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c7da:	0785                	c.addi	a5,1
   1c7dc:	fef69be3          	bne	a3,a5,1c7d2 <dwarf::value::as_sconstant() const+0x18c>
   1c7e0:	b7c5                	c.j	1c7c0 <dwarf::value::as_sconstant() const+0x17a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1c7e2:	77a6                	c.ldsp	a5,104(sp)
   1c7e4:	6b98                	c.ld	a4,16(a5)
   1c7e6:	77e6                	c.ldsp	a5,120(sp)
   1c7e8:	40f70633          	sub	a2,a4,a5
   1c7ec:	469d                	c.li	a3,7
   1c7ee:	00c6f463          	bgeu	a3,a2,1c7f6 <dwarf::value::as_sconstant() const+0x1b0>
   1c7f2:	00e7e563          	bltu	a5,a4,1c7fc <dwarf::value::as_sconstant() const+0x1b6>
      underflow();
   1c7f6:	10a8                	c.addi4spn	a0,sp,104
   1c7f8:	b40fe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1c7fc:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1c7fe:	77a6                	c.ldsp	a5,104(sp)
   1c800:	4fdc                	c.lw	a5,28(a5)
   1c802:	e395                	c.bnez	a5,1c826 <dwarf::value::as_sconstant() const+0x1e0>
   1c804:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1c806:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1c808:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1c80c:	0006c703          	lbu	a4,0(a3)
   1c810:	00f71733          	sll	a4,a4,a5
   1c814:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c816:	0685                	c.addi	a3,1
   1c818:	27a1                	c.addiw	a5,8
   1c81a:	feb799e3          	bne	a5,a1,1c80c <dwarf::value::as_sconstant() const+0x1c6>
    pos += sizeof(T);
   1c81e:	0621                	c.addi	a2,8
   1c820:	fcb2                	c.sdsp	a2,120(sp)
    return (T)val;
   1c822:	842a                	c.mv	s0,a0
   1c824:	aab9                	c.j	1c982 <dwarf::value::as_sconstant() const+0x33c>
   1c826:	87b2                	c.mv	a5,a2
   1c828:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1c82c:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1c82e:	0522                	c.slli	a0,0x8
   1c830:	0007c703          	lbu	a4,0(a5)
   1c834:	8d59                	c.or	a0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1c836:	0785                	c.addi	a5,1
   1c838:	fed79be3          	bne	a5,a3,1c82e <dwarf::value::as_sconstant() const+0x1e8>
   1c83c:	b7cd                	c.j	1c81e <dwarf::value::as_sconstant() const+0x1d8>
  case DW_FORM::data8:
    return cur.fixed<int64_t>();
  case DW_FORM::sdata:
    return cur.sleb128();
   1c83e:	10a8                	c.addi4spn	a0,sp,104
   1c840:	b38fe0ef          	jal	ra,1ab78 <dwarf::cursor::sleb128()>
   1c844:	842a                	c.mv	s0,a0
   1c846:	aa35                	c.j	1c982 <dwarf::value::as_sconstant() const+0x33c>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sconstant");
   1c848:	4541                	c.li	a0,16
   1c84a:	bd7f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1c84e:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1c850:	444c                	c.lw	a1,12(s0)
   1c852:	0028                	c.addi4spn	a0,sp,8
   1c854:	3ab0a0ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1c858:	00011617          	auipc	a2,0x11
   1c85c:	e0860613          	addi	a2,a2,-504 # 2d660 <std::piecewise_construct+0x1c8>
   1c860:	4581                	c.li	a1,0
   1c862:	0028                	c.addi4spn	a0,sp,8
   1c864:	b2df90ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1c868:	85aa                	c.mv	a1,a0
   1c86a:	1020                	c.addi4spn	s0,sp,40
   1c86c:	8522                	c.mv	a0,s0
   1c86e:	c03f90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1c872:	00011597          	auipc	a1,0x11
   1c876:	e2e58593          	addi	a1,a1,-466 # 2d6a0 <std::piecewise_construct+0x208>
   1c87a:	8522                	c.mv	a0,s0
   1c87c:	f25f90ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1c880:	85aa                	c.mv	a1,a0
   1c882:	00a0                	c.addi4spn	s0,sp,72
   1c884:	8522                	c.mv	a0,s0
   1c886:	bebf90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1c88a:	85a2                	c.mv	a1,s0
   1c88c:	8526                	c.mv	a0,s1
   1c88e:	f63f90ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1c892:	0001d797          	auipc	a5,0x1d
   1c896:	bb67b783          	ld	a5,-1098(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1c89a:	07c1                	c.addi	a5,16
   1c89c:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1c89e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c8a0:	08bc                	c.addi4spn	a5,sp,88
   1c8a2:	00f50463          	beq	a0,a5,1c8aa <dwarf::value::as_sconstant() const+0x264>
   1c8a6:	c6bf90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c8aa:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c8ac:	183c                	c.addi4spn	a5,sp,56
   1c8ae:	00f50463          	beq	a0,a5,1c8b6 <dwarf::value::as_sconstant() const+0x270>
   1c8b2:	c5ff90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c8b6:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c8b8:	083c                	c.addi4spn	a5,sp,24
   1c8ba:	00f50463          	beq	a0,a5,1c8c2 <dwarf::value::as_sconstant() const+0x27c>
   1c8be:	c53f90ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as sconstant");
   1c8c2:	0001d617          	auipc	a2,0x1d
   1c8c6:	d1663603          	ld	a2,-746(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1c8ca:	0001d597          	auipc	a1,0x1d
   1c8ce:	cce5b583          	ld	a1,-818(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1c8d2:	8526                	c.mv	a0,s1
   1c8d4:	dedf90ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1c8d8:	842a                	c.mv	s0,a0
   1c8da:	a8a5                	c.j	1c952 <dwarf::value::as_sconstant() const+0x30c>
   1c8dc:	55fd                	c.li	a1,-1
   1c8de:	03048513          	addi	a0,s1,48
   1c8e2:	a9ff90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c8e6:	a85d                	c.j	1c99c <dwarf::value::as_sconstant() const+0x356>
	_M_dispose();
   1c8e8:	609c                	c.ld	a5,0(s1)
   1c8ea:	6b9c                	c.ld	a5,16(a5)
   1c8ec:	8526                	c.mv	a0,s1
   1c8ee:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1c8f0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1c8f4:	0001d797          	auipc	a5,0x1d
   1c8f8:	b8c7b783          	ld	a5,-1140(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c8fc:	0007c783          	lbu	a5,0(a5)
   1c900:	cf89                	c.beqz	a5,1c91a <dwarf::value::as_sconstant() const+0x2d4>
    _Atomic_word __result = *__mem;
   1c902:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1c904:	fff5079b          	addiw	a5,a0,-1
   1c908:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1c90a:	4785                	c.li	a5,1
   1c90c:	08f51b63          	bne	a0,a5,1c9a2 <dwarf::value::as_sconstant() const+0x35c>
	    _M_destroy();
   1c910:	609c                	c.ld	a5,0(s1)
   1c912:	6f9c                	c.ld	a5,24(a5)
   1c914:	8526                	c.mv	a0,s1
   1c916:	9782                	c.jalr	a5
   1c918:	a069                	c.j	1c9a2 <dwarf::value::as_sconstant() const+0x35c>
      return __exchange_and_add(__mem, __val);
   1c91a:	55fd                	c.li	a1,-1
   1c91c:	03448513          	addi	a0,s1,52
   1c920:	a61f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1c924:	b7dd                	c.j	1c90a <dwarf::value::as_sconstant() const+0x2c4>
      { return _M_dataplus._M_p; }
   1c926:	842a                	c.mv	s0,a0
   1c928:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1c92a:	08bc                	c.addi4spn	a5,sp,88
   1c92c:	00f50463          	beq	a0,a5,1c934 <dwarf::value::as_sconstant() const+0x2ee>
   1c930:	be1f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c934:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1c936:	183c                	c.addi4spn	a5,sp,56
   1c938:	00f50463          	beq	a0,a5,1c940 <dwarf::value::as_sconstant() const+0x2fa>
   1c93c:	bd5f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1c940:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1c942:	083c                	c.addi4spn	a5,sp,24
   1c944:	00f50463          	beq	a0,a5,1c94c <dwarf::value::as_sconstant() const+0x306>
   1c948:	bc9f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1c94c:	8526                	c.mv	a0,s1
   1c94e:	b83f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1c952:	7546                	c.ldsp	a0,112(sp)
   1c954:	c511                	c.beqz	a0,1c960 <dwarf::value::as_sconstant() const+0x31a>
	  _M_pi->_M_release();
   1c956:	0001d317          	auipc	t1,0x1d
   1c95a:	a7233303          	ld	t1,-1422(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1c95e:	9302                	c.jalr	t1
   1c960:	8522                	c.mv	a0,s0
   1c962:	d8ff90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1c966:	842a                	c.mv	s0,a0
   1c968:	b7f1                	c.j	1c934 <dwarf::value::as_sconstant() const+0x2ee>
   1c96a:	842a                	c.mv	s0,a0
   1c96c:	bfd1                	c.j	1c940 <dwarf::value::as_sconstant() const+0x2fa>
   1c96e:	842a                	c.mv	s0,a0
   1c970:	bff1                	c.j	1c94c <dwarf::value::as_sconstant() const+0x306>
        val |= ((uint64_t)p[i]) << (i * 8);
   1c972:	0007c503          	lbu	a0,0(a5)
    pos += sizeof(T);
   1c976:	0785                	c.addi	a5,1
   1c978:	fcbe                	c.sdsp	a5,120(sp)
    return cur.fixed<int8_t>();
   1c97a:	0185141b          	slliw	s0,a0,0x18
   1c97e:	4184541b          	sraiw	s0,s0,0x18
	if (_M_pi != nullptr)
   1c982:	74c6                	c.ldsp	s1,112(sp)
   1c984:	cc99                	c.beqz	s1,1c9a2 <dwarf::value::as_sconstant() const+0x35c>
    if (__is_single_threaded())
   1c986:	0001d797          	auipc	a5,0x1d
   1c98a:	afa7b783          	ld	a5,-1286(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1c98e:	0007c783          	lbu	a5,0(a5)
   1c992:	d7a9                	c.beqz	a5,1c8dc <dwarf::value::as_sconstant() const+0x296>
    _Atomic_word __result = *__mem;
   1c994:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1c996:	fff5079b          	addiw	a5,a0,-1
   1c99a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1c99c:	4785                	c.li	a5,1
   1c99e:	f4f505e3          	beq	a0,a5,1c8e8 <dwarf::value::as_sconstant() const+0x2a2>
  }
}
   1c9a2:	8522                	c.mv	a0,s0
   1c9a4:	70aa                	c.ldsp	ra,168(sp)
   1c9a6:	740a                	c.ldsp	s0,160(sp)
   1c9a8:	64ea                	c.ldsp	s1,152(sp)
   1c9aa:	694a                	c.ldsp	s2,144(sp)
   1c9ac:	69aa                	c.ldsp	s3,136(sp)
   1c9ae:	614d                	c.addi16sp	sp,176
   1c9b0:	8082                	c.jr	ra
  cursor cur(cu->data(), offset);
   1c9b2:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c9b4:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   1c9b6:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1c9b8:	00893783          	ld	a5,8(s2)
   1c9bc:	97ba                	c.add	a5,a4
   1c9be:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1c9c0:	441c                	c.lw	a5,8(s0)
   1c9c2:	37ed                	c.addiw	a5,-5
   1c9c4:	0007869b          	addiw	a3,a5,0
   1c9c8:	4721                	c.li	a4,8
   1c9ca:	e6d76fe3          	bltu	a4,a3,1c848 <dwarf::value::as_sconstant() const+0x202>
   1c9ce:	02079713          	slli	a4,a5,0x20
   1c9d2:	01e75793          	srli	a5,a4,0x1e
   1c9d6:	00011717          	auipc	a4,0x11
   1c9da:	e9e70713          	addi	a4,a4,-354 # 2d874 <std::piecewise_construct+0x3dc>
   1c9de:	97ba                	c.add	a5,a4
   1c9e0:	439c                	c.lw	a5,0(a5)
   1c9e2:	97ba                	c.add	a5,a4
   1c9e4:	8782                	c.jr	a5

000000000001c9e6 <dwarf::value::as_exprloc() const>:

expr value::as_exprloc() const {
   1c9e6:	7171                	c.addi16sp	sp,-176
   1c9e8:	f506                	c.sdsp	ra,168(sp)
   1c9ea:	f122                	c.sdsp	s0,160(sp)
   1c9ec:	ed26                	c.sdsp	s1,152(sp)
   1c9ee:	e94a                	c.sdsp	s2,144(sp)
   1c9f0:	e54e                	c.sdsp	s3,136(sp)
   1c9f2:	e152                	c.sdsp	s4,128(sp)
   1c9f4:	84aa                	c.mv	s1,a0
   1c9f6:	842e                	c.mv	s0,a1
  cursor cur(cu->data(), offset);
   1c9f8:	6188                	c.ld	a0,0(a1)
   1c9fa:	db8fa0ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1c9fe:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1ca02:	00853903          	ld	s2,8(a0)
	if (_M_pi != nullptr)
   1ca06:	34090263          	beq	s2,zero,1cd4a <dwarf::value::as_exprloc() const+0x364>
    if (__is_single_threaded())
   1ca0a:	0001d797          	auipc	a5,0x1d
   1ca0e:	a767b783          	ld	a5,-1418(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ca12:	0007c783          	lbu	a5,0(a5)
   1ca16:	c7d9                	c.beqz	a5,1caa4 <dwarf::value::as_exprloc() const+0xbe>
  { *__mem += __val; }
   1ca18:	03092783          	lw	a5,48(s2)
   1ca1c:	2785                	c.addiw	a5,1
   1ca1e:	02f92823          	sw	a5,48(s2)
   1ca22:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1ca26:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1ca28:	f8ca                	c.sdsp	s2,112(sp)
    if (__is_single_threaded())
   1ca2a:	0001d797          	auipc	a5,0x1d
   1ca2e:	a567b783          	ld	a5,-1450(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ca32:	0007c783          	lbu	a5,0(a5)
   1ca36:	cfad                	c.beqz	a5,1cab0 <dwarf::value::as_exprloc() const+0xca>
  { *__mem += __val; }
   1ca38:	03092783          	lw	a5,48(s2)
   1ca3c:	2785                	c.addiw	a5,1
   1ca3e:	02f92823          	sw	a5,48(s2)
   1ca42:	0089b783          	ld	a5,8(s3)
   1ca46:	97d2                	c.add	a5,s4
   1ca48:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1ca4a:	0001d797          	auipc	a5,0x1d
   1ca4e:	a367b783          	ld	a5,-1482(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ca52:	0007c783          	lbu	a5,0(a5)
   1ca56:	c3bd                	c.beqz	a5,1cabc <dwarf::value::as_exprloc() const+0xd6>
    _Atomic_word __result = *__mem;
   1ca58:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   1ca5c:	fff5079b          	addiw	a5,a0,-1
   1ca60:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ca64:	4785                	c.li	a5,1
   1ca66:	2ef51963          	bne	a0,a5,1cd58 <dwarf::value::as_exprloc() const+0x372>
	_M_dispose();
   1ca6a:	00093783          	ld	a5,0(s2)
   1ca6e:	6b9c                	c.ld	a5,16(a5)
   1ca70:	854a                	c.mv	a0,s2
   1ca72:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ca74:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ca78:	0001d797          	auipc	a5,0x1d
   1ca7c:	a087b783          	ld	a5,-1528(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ca80:	0007c783          	lbu	a5,0(a5)
   1ca84:	c3b1                	c.beqz	a5,1cac8 <dwarf::value::as_exprloc() const+0xe2>
    _Atomic_word __result = *__mem;
   1ca86:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   1ca8a:	fff5079b          	addiw	a5,a0,-1
   1ca8e:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ca92:	4785                	c.li	a5,1
   1ca94:	2cf51263          	bne	a0,a5,1cd58 <dwarf::value::as_exprloc() const+0x372>
	    _M_destroy();
   1ca98:	00093783          	ld	a5,0(s2)
   1ca9c:	6f9c                	c.ld	a5,24(a5)
   1ca9e:	854a                	c.mv	a0,s2
   1caa0:	9782                	c.jalr	a5
   1caa2:	ac5d                	c.j	1cd58 <dwarf::value::as_exprloc() const+0x372>
      __atomic_add(__mem, __val);
   1caa4:	4585                	c.li	a1,1
   1caa6:	03090513          	addi	a0,s2,48
   1caaa:	8a7f90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1caae:	bf95                	c.j	1ca22 <dwarf::value::as_exprloc() const+0x3c>
   1cab0:	4585                	c.li	a1,1
   1cab2:	03090513          	addi	a0,s2,48
   1cab6:	89bf90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1caba:	b761                	c.j	1ca42 <dwarf::value::as_exprloc() const+0x5c>
      return __exchange_and_add(__mem, __val);
   1cabc:	55fd                	c.li	a1,-1
   1cabe:	03090513          	addi	a0,s2,48
   1cac2:	8bff90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cac6:	bf79                	c.j	1ca64 <dwarf::value::as_exprloc() const+0x7e>
   1cac8:	55fd                	c.li	a1,-1
   1caca:	03490513          	addi	a0,s2,52
   1cace:	8b3f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cad2:	b7c1                	c.j	1ca92 <dwarf::value::as_exprloc() const+0xac>
    while (pos < sec->end) {
   1cad4:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   1cad6:	7526                	c.ldsp	a0,104(sp)
   1cad8:	6918                	c.ld	a4,16(a0)
   1cada:	02e7f763          	bgeu	a5,a4,1cb08 <dwarf::value::as_exprloc() const+0x122>
    std::uint64_t result = 0;
   1cade:	4681                	c.li	a3,0
    int shift = 0;
   1cae0:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   1cae2:	0785                	c.addi	a5,1
   1cae4:	fcbe                	c.sdsp	a5,120(sp)
   1cae6:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1caea:	07f77613          	andi	a2,a4,127
   1caee:	00b61633          	sll	a2,a2,a1
   1caf2:	8ed1                	c.or	a3,a2
      if ((byte & 0x80) == 0)
   1caf4:	0187171b          	slliw	a4,a4,0x18
   1caf8:	4187571b          	sraiw	a4,a4,0x18
   1cafc:	22075e63          	bge	a4,zero,1cd38 <dwarf::value::as_exprloc() const+0x352>
      shift += 7;
   1cb00:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1cb02:	6918                	c.ld	a4,16(a0)
   1cb04:	fce7efe3          	bltu	a5,a4,1cae2 <dwarf::value::as_exprloc() const+0xfc>
    underflow();
   1cb08:	10a8                	c.addi4spn	a0,sp,104
   1cb0a:	82efe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   1cb0e:	aa99                	c.j	1cc64 <dwarf::value::as_exprloc() const+0x27e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cb10:	77a6                	c.ldsp	a5,104(sp)
   1cb12:	6b98                	c.ld	a4,16(a5)
   1cb14:	77e6                	c.ldsp	a5,120(sp)
   1cb16:	00e7e563          	bltu	a5,a4,1cb20 <dwarf::value::as_exprloc() const+0x13a>
      underflow();
   1cb1a:	10a8                	c.addi4spn	a0,sp,104
   1cb1c:	81cfe0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cb20:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cb22:	7726                	c.ldsp	a4,104(sp)
   1cb24:	4f58                	c.lw	a4,28(a4)
   1cb26:	20070563          	beq	a4,zero,1cd30 <dwarf::value::as_exprloc() const+0x34a>
        val = (val << 8) | (uint64_t)p[i];
   1cb2a:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1cb2e:	a419                	c.j	1cd34 <dwarf::value::as_exprloc() const+0x34e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cb30:	77a6                	c.ldsp	a5,104(sp)
   1cb32:	6b98                	c.ld	a4,16(a5)
   1cb34:	77e6                	c.ldsp	a5,120(sp)
   1cb36:	40f70633          	sub	a2,a4,a5
   1cb3a:	4685                	c.li	a3,1
   1cb3c:	00c6f463          	bgeu	a3,a2,1cb44 <dwarf::value::as_exprloc() const+0x15e>
   1cb40:	00e7e563          	bltu	a5,a4,1cb4a <dwarf::value::as_exprloc() const+0x164>
      underflow();
   1cb44:	10a8                	c.addi4spn	a0,sp,104
   1cb46:	ff3fd0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cb4a:	77e6                	c.ldsp	a5,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cb4c:	7726                	c.ldsp	a4,104(sp)
   1cb4e:	4f58                	c.lw	a4,28(a4)
   1cb50:	eb11                	c.bnez	a4,1cb64 <dwarf::value::as_exprloc() const+0x17e>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cb52:	0017c683          	lbu	a3,1(a5)
   1cb56:	06a2                	c.slli	a3,0x8
   1cb58:	0007c703          	lbu	a4,0(a5)
   1cb5c:	8ed9                	c.or	a3,a4
    pos += sizeof(T);
   1cb5e:	0789                	c.addi	a5,2
   1cb60:	fcbe                	c.sdsp	a5,120(sp)
  case DW_FORM::block1:
    size = cur.fixed<uint8_t>();
    break;
  case DW_FORM::block2:
    size = cur.fixed<uint16_t>();
    break;
   1cb62:	aad9                	c.j	1cd38 <dwarf::value::as_exprloc() const+0x352>
        val = (val << 8) | (uint64_t)p[i];
   1cb64:	0007c683          	lbu	a3,0(a5)
   1cb68:	06a2                	c.slli	a3,0x8
   1cb6a:	0017c703          	lbu	a4,1(a5)
   1cb6e:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cb70:	b7fd                	c.j	1cb5e <dwarf::value::as_exprloc() const+0x178>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cb72:	77a6                	c.ldsp	a5,104(sp)
   1cb74:	6b98                	c.ld	a4,16(a5)
   1cb76:	77e6                	c.ldsp	a5,120(sp)
   1cb78:	40f70633          	sub	a2,a4,a5
   1cb7c:	468d                	c.li	a3,3
   1cb7e:	00c6f463          	bgeu	a3,a2,1cb86 <dwarf::value::as_exprloc() const+0x1a0>
   1cb82:	00e7e563          	bltu	a5,a4,1cb8c <dwarf::value::as_exprloc() const+0x1a6>
      underflow();
   1cb86:	10a8                	c.addi4spn	a0,sp,104
   1cb88:	fb1fd0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1cb8c:	75e6                	c.ldsp	a1,120(sp)
    if (sec->ord == byte_order::lsb) {
   1cb8e:	77a6                	c.ldsp	a5,104(sp)
   1cb90:	4fdc                	c.lw	a5,28(a5)
   1cb92:	e39d                	c.bnez	a5,1cbb8 <dwarf::value::as_exprloc() const+0x1d2>
   1cb94:	862e                	c.mv	a2,a1
    uint64_t val = 0;
   1cb96:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1cb98:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1cb9c:	00064703          	lbu	a4,0(a2)
   1cba0:	00f71733          	sll	a4,a4,a5
   1cba4:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cba6:	0605                	c.addi	a2,1
   1cba8:	27a1                	c.addiw	a5,8
   1cbaa:	fea799e3          	bne	a5,a0,1cb9c <dwarf::value::as_exprloc() const+0x1b6>
    pos += sizeof(T);
   1cbae:	0591                	c.addi	a1,4
   1cbb0:	fcae                	c.sdsp	a1,120(sp)
   1cbb2:	1682                	c.slli	a3,0x20
   1cbb4:	9281                	c.srli	a3,0x20
  case DW_FORM::block4:
    size = cur.fixed<uint32_t>();
    break;
   1cbb6:	a249                	c.j	1cd38 <dwarf::value::as_exprloc() const+0x352>
   1cbb8:	87ae                	c.mv	a5,a1
   1cbba:	00458613          	addi	a2,a1,4
    uint64_t val = 0;
   1cbbe:	4681                	c.li	a3,0
        val = (val << 8) | (uint64_t)p[i];
   1cbc0:	06a2                	c.slli	a3,0x8
   1cbc2:	0007c703          	lbu	a4,0(a5)
   1cbc6:	8ed9                	c.or	a3,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1cbc8:	0785                	c.addi	a5,1
   1cbca:	fec79be3          	bne	a5,a2,1cbc0 <dwarf::value::as_exprloc() const+0x1da>
   1cbce:	b7c5                	c.j	1cbae <dwarf::value::as_exprloc() const+0x1c8>
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1cbd0:	4541                	c.li	a0,16
   1cbd2:	84ff90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1cbd6:	84aa                	c.mv	s1,a0
   1cbd8:	444c                	c.lw	a1,12(s0)
   1cbda:	0028                	c.addi4spn	a0,sp,8
   1cbdc:	0230a0ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1cbe0:	00011617          	auipc	a2,0x11
   1cbe4:	a8060613          	addi	a2,a2,-1408 # 2d660 <std::piecewise_construct+0x1c8>
   1cbe8:	4581                	c.li	a1,0
   1cbea:	0028                	c.addi4spn	a0,sp,8
   1cbec:	fa4f90ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1cbf0:	85aa                	c.mv	a1,a0
   1cbf2:	1020                	c.addi4spn	s0,sp,40
   1cbf4:	8522                	c.mv	a0,s0
   1cbf6:	87bf90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1cbfa:	00011597          	auipc	a1,0x11
   1cbfe:	ab658593          	addi	a1,a1,-1354 # 2d6b0 <std::piecewise_construct+0x218>
   1cc02:	8522                	c.mv	a0,s0
   1cc04:	b9df90ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1cc08:	85aa                	c.mv	a1,a0
   1cc0a:	00a0                	c.addi4spn	s0,sp,72
   1cc0c:	8522                	c.mv	a0,s0
   1cc0e:	863f90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1cc12:	85a2                	c.mv	a1,s0
   1cc14:	8526                	c.mv	a0,s1
   1cc16:	bdbf90ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1cc1a:	0001d797          	auipc	a5,0x1d
   1cc1e:	82e7b783          	ld	a5,-2002(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1cc22:	07c1                	c.addi	a5,16
   1cc24:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1cc26:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1cc28:	08bc                	c.addi4spn	a5,sp,88
   1cc2a:	00f50463          	beq	a0,a5,1cc32 <dwarf::value::as_exprloc() const+0x24c>
   1cc2e:	8e3f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cc32:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1cc34:	183c                	c.addi4spn	a5,sp,56
   1cc36:	00f50463          	beq	a0,a5,1cc3e <dwarf::value::as_exprloc() const+0x258>
   1cc3a:	8d7f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cc3e:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1cc40:	083c                	c.addi4spn	a5,sp,24
   1cc42:	00f50463          	beq	a0,a5,1cc4a <dwarf::value::as_exprloc() const+0x264>
   1cc46:	8cbf90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1cc4a:	0001d617          	auipc	a2,0x1d
   1cc4e:	98e63603          	ld	a2,-1650(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1cc52:	0001d597          	auipc	a1,0x1d
   1cc56:	9465b583          	ld	a1,-1722(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1cc5a:	8526                	c.mv	a0,s1
   1cc5c:	a65f90ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1cc60:	842a                	c.mv	s0,a0
   1cc62:	a07d                	c.j	1cd10 <dwarf::value::as_exprloc() const+0x32a>
    return 0;
   1cc64:	4681                	c.li	a3,0
   1cc66:	a8c9                	c.j	1cd38 <dwarf::value::as_exprloc() const+0x352>
   1cc68:	7446                	c.ldsp	s0,112(sp)
   1cc6a:	cc19                	c.beqz	s0,1cc88 <dwarf::value::as_exprloc() const+0x2a2>
    if (__is_single_threaded())
   1cc6c:	0001d797          	auipc	a5,0x1d
   1cc70:	8147b783          	ld	a5,-2028(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cc74:	0007c783          	lbu	a5,0(a5)
   1cc78:	c38d                	c.beqz	a5,1cc9a <dwarf::value::as_exprloc() const+0x2b4>
    _Atomic_word __result = *__mem;
   1cc7a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1cc7c:	fff5079b          	addiw	a5,a0,-1
   1cc80:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1cc82:	4785                	c.li	a5,1
   1cc84:	02f50163          	beq	a0,a5,1cca6 <dwarf::value::as_exprloc() const+0x2c0>
  }
  return expr(cu, cur.get_section_offset(), size);
}
   1cc88:	8526                	c.mv	a0,s1
   1cc8a:	70aa                	c.ldsp	ra,168(sp)
   1cc8c:	740a                	c.ldsp	s0,160(sp)
   1cc8e:	64ea                	c.ldsp	s1,152(sp)
   1cc90:	694a                	c.ldsp	s2,144(sp)
   1cc92:	69aa                	c.ldsp	s3,136(sp)
   1cc94:	6a0a                	c.ldsp	s4,128(sp)
   1cc96:	614d                	c.addi16sp	sp,176
   1cc98:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1cc9a:	55fd                	c.li	a1,-1
   1cc9c:	03040513          	addi	a0,s0,48
   1cca0:	ee0f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cca4:	bff9                	c.j	1cc82 <dwarf::value::as_exprloc() const+0x29c>
	_M_dispose();
   1cca6:	601c                	c.ld	a5,0(s0)
   1cca8:	6b9c                	c.ld	a5,16(a5)
   1ccaa:	8522                	c.mv	a0,s0
   1ccac:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ccae:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ccb2:	0001c797          	auipc	a5,0x1c
   1ccb6:	7ce7b783          	ld	a5,1998(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ccba:	0007c783          	lbu	a5,0(a5)
   1ccbe:	cf89                	c.beqz	a5,1ccd8 <dwarf::value::as_exprloc() const+0x2f2>
    _Atomic_word __result = *__mem;
   1ccc0:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1ccc2:	fff5079b          	addiw	a5,a0,-1
   1ccc6:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ccc8:	4785                	c.li	a5,1
   1ccca:	faf51fe3          	bne	a0,a5,1cc88 <dwarf::value::as_exprloc() const+0x2a2>
	    _M_destroy();
   1ccce:	601c                	c.ld	a5,0(s0)
   1ccd0:	6f9c                	c.ld	a5,24(a5)
   1ccd2:	8522                	c.mv	a0,s0
   1ccd4:	9782                	c.jalr	a5
  return expr(cu, cur.get_section_offset(), size);
   1ccd6:	bf4d                	c.j	1cc88 <dwarf::value::as_exprloc() const+0x2a2>
      return __exchange_and_add(__mem, __val);
   1ccd8:	55fd                	c.li	a1,-1
   1ccda:	03440513          	addi	a0,s0,52
   1ccde:	ea2f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1cce2:	b7dd                	c.j	1ccc8 <dwarf::value::as_exprloc() const+0x2e2>
      { return _M_dataplus._M_p; }
   1cce4:	842a                	c.mv	s0,a0
   1cce6:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1cce8:	08bc                	c.addi4spn	a5,sp,88
   1ccea:	00f50463          	beq	a0,a5,1ccf2 <dwarf::value::as_exprloc() const+0x30c>
   1ccee:	823f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ccf2:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1ccf4:	183c                	c.addi4spn	a5,sp,56
   1ccf6:	00f50463          	beq	a0,a5,1ccfe <dwarf::value::as_exprloc() const+0x318>
   1ccfa:	817f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ccfe:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1cd00:	083c                	c.addi4spn	a5,sp,24
   1cd02:	00f50463          	beq	a0,a5,1cd0a <dwarf::value::as_exprloc() const+0x324>
   1cd06:	80bf90ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as exprloc");
   1cd0a:	8526                	c.mv	a0,s1
   1cd0c:	fc4f90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1cd10:	7546                	c.ldsp	a0,112(sp)
   1cd12:	c511                	c.beqz	a0,1cd1e <dwarf::value::as_exprloc() const+0x338>
	  _M_pi->_M_release();
   1cd14:	0001c317          	auipc	t1,0x1c
   1cd18:	6b433303          	ld	t1,1716(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1cd1c:	9302                	c.jalr	t1
   1cd1e:	8522                	c.mv	a0,s0
   1cd20:	9d1f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1cd24:	842a                	c.mv	s0,a0
   1cd26:	b7f1                	c.j	1ccf2 <dwarf::value::as_exprloc() const+0x30c>
   1cd28:	842a                	c.mv	s0,a0
   1cd2a:	bfd1                	c.j	1ccfe <dwarf::value::as_exprloc() const+0x318>
   1cd2c:	842a                	c.mv	s0,a0
   1cd2e:	bff1                	c.j	1cd0a <dwarf::value::as_exprloc() const+0x324>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cd30:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   1cd34:	0785                	c.addi	a5,1
   1cd36:	fcbe                	c.sdsp	a5,120(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1cd38:	77a6                	c.ldsp	a5,104(sp)
   1cd3a:	679c                	c.ld	a5,8(a5)
  return expr(cu, cur.get_section_offset(), size);
   1cd3c:	7666                	c.ldsp	a2,120(sp)
   1cd3e:	8e1d                	c.sub	a2,a5
   1cd40:	600c                	c.ld	a1,0(s0)
   1cd42:	8526                	c.mv	a0,s1
   1cd44:	4e7020ef          	jal	ra,1fa2a <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>
   1cd48:	b705                	c.j	1cc68 <dwarf::value::as_exprloc() const+0x282>
  cursor cur(cu->data(), offset);
   1cd4a:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cd4c:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1cd4e:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1cd50:	0089b783          	ld	a5,8(s3)
   1cd54:	97ba                	c.add	a5,a4
   1cd56:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1cd58:	441c                	c.lw	a5,8(s0)
   1cd5a:	37f5                	c.addiw	a5,-3
   1cd5c:	0007869b          	addiw	a3,a5,0
   1cd60:	4755                	c.li	a4,21
   1cd62:	e6d767e3          	bltu	a4,a3,1cbd0 <dwarf::value::as_exprloc() const+0x1ea>
   1cd66:	02079713          	slli	a4,a5,0x20
   1cd6a:	01e75793          	srli	a5,a4,0x1e
   1cd6e:	00011717          	auipc	a4,0x11
   1cd72:	b2a70713          	addi	a4,a4,-1238 # 2d898 <std::piecewise_construct+0x400>
   1cd76:	97ba                	c.add	a5,a4
   1cd78:	439c                	c.lw	a5,0(a5)
   1cd7a:	97ba                	c.add	a5,a4
   1cd7c:	8782                	c.jr	a5

000000000001cd7e <dwarf::value::as_flag() const>:

bool value::as_flag() const {
   1cd7e:	7119                	c.addi16sp	sp,-128
   1cd80:	fc86                	c.sdsp	ra,120(sp)
   1cd82:	f8a2                	c.sdsp	s0,112(sp)
   1cd84:	f4a6                	c.sdsp	s1,104(sp)
   1cd86:	f0ca                	c.sdsp	s2,96(sp)
   1cd88:	842a                	c.mv	s0,a0
  switch (form) {
   1cd8a:	451c                	c.lw	a5,8(a0)
   1cd8c:	4731                	c.li	a4,12
   1cd8e:	00e78d63          	beq	a5,a4,1cda8 <dwarf::value::as_flag() const+0x2a>
   1cd92:	4765                	c.li	a4,25
   1cd94:	4485                	c.li	s1,1
   1cd96:	0ee79f63          	bne	a5,a4,1ce94 <dwarf::value::as_flag() const+0x116>
  case DW_FORM::flag_present:
    return true;
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
  }
}
   1cd9a:	8526                	c.mv	a0,s1
   1cd9c:	70e6                	c.ldsp	ra,120(sp)
   1cd9e:	7446                	c.ldsp	s0,112(sp)
   1cda0:	74a6                	c.ldsp	s1,104(sp)
   1cda2:	7906                	c.ldsp	s2,96(sp)
   1cda4:	6109                	c.addi16sp	sp,128
   1cda6:	8082                	c.jr	ra
    cursor cur(cu->data(), offset);
   1cda8:	6108                	c.ld	a0,0(a0)
   1cdaa:	a08fa0ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cdae:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1cdb2:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1cdb4:	22048463          	beq	s1,zero,1cfdc <dwarf::value::as_flag() const+0x25e>
    if (__is_single_threaded())
   1cdb8:	0001c797          	auipc	a5,0x1c
   1cdbc:	6c87b783          	ld	a5,1736(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cdc0:	0007c783          	lbu	a5,0(a5)
   1cdc4:	cfa5                	c.beqz	a5,1ce3c <dwarf::value::as_flag() const+0xbe>
  { *__mem += __val; }
   1cdc6:	589c                	c.lw	a5,48(s1)
   1cdc8:	2785                	c.addiw	a5,1
   1cdca:	d89c                	c.sw	a5,48(s1)
   1cdcc:	6800                	c.ld	s0,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cdce:	e0ca                	c.sdsp	s2,64(sp)
      : _M_pi(__r._M_pi)
   1cdd0:	e4a6                	c.sdsp	s1,72(sp)
    if (__is_single_threaded())
   1cdd2:	0001c797          	auipc	a5,0x1c
   1cdd6:	6ae7b783          	ld	a5,1710(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cdda:	0007c783          	lbu	a5,0(a5)
   1cdde:	c7ad                	c.beqz	a5,1ce48 <dwarf::value::as_flag() const+0xca>
  { *__mem += __val; }
   1cde0:	589c                	c.lw	a5,48(s1)
   1cde2:	2785                	c.addiw	a5,1
   1cde4:	d89c                	c.sw	a5,48(s1)
   1cde6:	00893783          	ld	a5,8(s2)
   1cdea:	97a2                	c.add	a5,s0
   1cdec:	e8be                	c.sdsp	a5,80(sp)
    if (__is_single_threaded())
   1cdee:	0001c797          	auipc	a5,0x1c
   1cdf2:	6927b783          	ld	a5,1682(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cdf6:	0007c783          	lbu	a5,0(a5)
   1cdfa:	cfa9                	c.beqz	a5,1ce54 <dwarf::value::as_flag() const+0xd6>
    _Atomic_word __result = *__mem;
   1cdfc:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1cdfe:	fff5079b          	addiw	a5,a0,-1
   1ce02:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1ce04:	4785                	c.li	a5,1
   1ce06:	1ef51263          	bne	a0,a5,1cfea <dwarf::value::as_flag() const+0x26c>
	_M_dispose();
   1ce0a:	609c                	c.ld	a5,0(s1)
   1ce0c:	6b9c                	c.ld	a5,16(a5)
   1ce0e:	8526                	c.mv	a0,s1
   1ce10:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1ce12:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1ce16:	0001c797          	auipc	a5,0x1c
   1ce1a:	66a7b783          	ld	a5,1642(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1ce1e:	0007c783          	lbu	a5,0(a5)
   1ce22:	cf9d                	c.beqz	a5,1ce60 <dwarf::value::as_flag() const+0xe2>
    _Atomic_word __result = *__mem;
   1ce24:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1ce26:	fff5079b          	addiw	a5,a0,-1
   1ce2a:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1ce2c:	4785                	c.li	a5,1
   1ce2e:	1af51e63          	bne	a0,a5,1cfea <dwarf::value::as_flag() const+0x26c>
	    _M_destroy();
   1ce32:	609c                	c.ld	a5,0(s1)
   1ce34:	6f9c                	c.ld	a5,24(a5)
   1ce36:	8526                	c.mv	a0,s1
   1ce38:	9782                	c.jalr	a5
   1ce3a:	aa45                	c.j	1cfea <dwarf::value::as_flag() const+0x26c>
      __atomic_add(__mem, __val);
   1ce3c:	4585                	c.li	a1,1
   1ce3e:	03048513          	addi	a0,s1,48
   1ce42:	d0ef90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ce46:	b759                	c.j	1cdcc <dwarf::value::as_flag() const+0x4e>
   1ce48:	4585                	c.li	a1,1
   1ce4a:	03048513          	addi	a0,s1,48
   1ce4e:	d02f90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1ce52:	bf51                	c.j	1cde6 <dwarf::value::as_flag() const+0x68>
      return __exchange_and_add(__mem, __val);
   1ce54:	55fd                	c.li	a1,-1
   1ce56:	03048513          	addi	a0,s1,48
   1ce5a:	d26f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ce5e:	b75d                	c.j	1ce04 <dwarf::value::as_flag() const+0x86>
   1ce60:	55fd                	c.li	a1,-1
   1ce62:	03448513          	addi	a0,s1,52
   1ce66:	d1af90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ce6a:	b7c9                	c.j	1ce2c <dwarf::value::as_flag() const+0xae>
    const unsigned char *p = (const unsigned char *)pos;
   1ce6c:	67c6                	c.ldsp	a5,80(sp)
    if (sec->ord == byte_order::lsb) {
   1ce6e:	6706                	c.ldsp	a4,64(sp)
   1ce70:	4f58                	c.lw	a4,28(a4)
   1ce72:	10070363          	beq	a4,zero,1cf78 <dwarf::value::as_flag() const+0x1fa>
        val = (val << 8) | (uint64_t)p[i];
   1ce76:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1ce7a:	a209                	c.j	1cf7c <dwarf::value::as_flag() const+0x1fe>
   1ce7c:	55fd                	c.li	a1,-1
   1ce7e:	03040513          	addi	a0,s0,48
   1ce82:	cfef90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ce86:	aa31                	c.j	1cfa2 <dwarf::value::as_flag() const+0x224>
   1ce88:	55fd                	c.li	a1,-1
   1ce8a:	03440513          	addi	a0,s0,52
   1ce8e:	cf2f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1ce92:	aa2d                	c.j	1cfcc <dwarf::value::as_flag() const+0x24e>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as flag");
   1ce94:	4541                	c.li	a0,16
   1ce96:	d8af90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1ce9a:	84aa                	c.mv	s1,a0
   1ce9c:	444c                	c.lw	a1,12(s0)
   1ce9e:	850a                	c.mv	a0,sp
   1cea0:	55e0a0ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1cea4:	00010617          	auipc	a2,0x10
   1cea8:	7bc60613          	addi	a2,a2,1980 # 2d660 <std::piecewise_construct+0x1c8>
   1ceac:	4581                	c.li	a1,0
   1ceae:	850a                	c.mv	a0,sp
   1ceb0:	ce0f90ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1ceb4:	85aa                	c.mv	a1,a0
   1ceb6:	1000                	c.addi4spn	s0,sp,32
   1ceb8:	8522                	c.mv	a0,s0
   1ceba:	db6f90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1cebe:	00011597          	auipc	a1,0x11
   1cec2:	80258593          	addi	a1,a1,-2046 # 2d6c0 <std::piecewise_construct+0x228>
   1cec6:	8522                	c.mv	a0,s0
   1cec8:	8d9f90ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1cecc:	85aa                	c.mv	a1,a0
   1cece:	0080                	c.addi4spn	s0,sp,64
   1ced0:	8522                	c.mv	a0,s0
   1ced2:	d9ef90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1ced6:	85a2                	c.mv	a1,s0
   1ced8:	8526                	c.mv	a0,s1
   1ceda:	917f90ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1cede:	0001c797          	auipc	a5,0x1c
   1cee2:	56a7b783          	ld	a5,1386(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1cee6:	07c1                	c.addi	a5,16
   1cee8:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1ceea:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1ceec:	089c                	c.addi4spn	a5,sp,80
   1ceee:	00f50463          	beq	a0,a5,1cef6 <dwarf::value::as_flag() const+0x178>
   1cef2:	e1ef90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cef6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1cef8:	181c                	c.addi4spn	a5,sp,48
   1cefa:	00f50463          	beq	a0,a5,1cf02 <dwarf::value::as_flag() const+0x184>
   1cefe:	e12f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cf02:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1cf04:	081c                	c.addi4spn	a5,sp,16
   1cf06:	00f50463          	beq	a0,a5,1cf0e <dwarf::value::as_flag() const+0x190>
   1cf0a:	e06f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1cf0e:	0001c617          	auipc	a2,0x1c
   1cf12:	6ca63603          	ld	a2,1738(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1cf16:	0001c597          	auipc	a1,0x1c
   1cf1a:	6825b583          	ld	a1,1666(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1cf1e:	8526                	c.mv	a0,s1
   1cf20:	fa0f90ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1cf24:	842a                	c.mv	s0,a0
   1cf26:	6526                	c.ldsp	a0,72(sp)
   1cf28:	c511                	c.beqz	a0,1cf34 <dwarf::value::as_flag() const+0x1b6>
	  _M_pi->_M_release();
   1cf2a:	0001c317          	auipc	t1,0x1c
   1cf2e:	49e33303          	ld	t1,1182(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1cf32:	9302                	c.jalr	t1
   1cf34:	8522                	c.mv	a0,s0
   1cf36:	fbaf90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1cf3a:	842a                	c.mv	s0,a0
   1cf3c:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1cf3e:	089c                	c.addi4spn	a5,sp,80
   1cf40:	00f50463          	beq	a0,a5,1cf48 <dwarf::value::as_flag() const+0x1ca>
   1cf44:	dccf90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cf48:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1cf4a:	181c                	c.addi4spn	a5,sp,48
   1cf4c:	00f50463          	beq	a0,a5,1cf54 <dwarf::value::as_flag() const+0x1d6>
   1cf50:	dc0f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1cf54:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1cf56:	081c                	c.addi4spn	a5,sp,16
   1cf58:	00f50463          	beq	a0,a5,1cf60 <dwarf::value::as_flag() const+0x1e2>
   1cf5c:	db4f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1cf60:	8526                	c.mv	a0,s1
   1cf62:	d6ef90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1cf66:	8522                	c.mv	a0,s0
   1cf68:	f88f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1cf6c:	842a                	c.mv	s0,a0
   1cf6e:	bfe9                	c.j	1cf48 <dwarf::value::as_flag() const+0x1ca>
   1cf70:	842a                	c.mv	s0,a0
   1cf72:	b7cd                	c.j	1cf54 <dwarf::value::as_flag() const+0x1d6>
   1cf74:	842a                	c.mv	s0,a0
   1cf76:	b7ed                	c.j	1cf60 <dwarf::value::as_flag() const+0x1e2>
        val |= ((uint64_t)p[i]) << (i * 8);
   1cf78:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   1cf7c:	0785                	c.addi	a5,1
   1cf7e:	e8be                	c.sdsp	a5,80(sp)
    return cur.fixed<ubyte>() != 0;
   1cf80:	009034b3          	sltu	s1,zero,s1
	if (_M_pi != nullptr)
   1cf84:	6426                	c.ldsp	s0,72(sp)
   1cf86:	e0040ae3          	beq	s0,zero,1cd9a <dwarf::value::as_flag() const+0x1c>
    if (__is_single_threaded())
   1cf8a:	0001c797          	auipc	a5,0x1c
   1cf8e:	4f67b783          	ld	a5,1270(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cf92:	0007c783          	lbu	a5,0(a5)
   1cf96:	ee0783e3          	beq	a5,zero,1ce7c <dwarf::value::as_flag() const+0xfe>
    _Atomic_word __result = *__mem;
   1cf9a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1cf9c:	fff5079b          	addiw	a5,a0,-1
   1cfa0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1cfa2:	4785                	c.li	a5,1
   1cfa4:	def51be3          	bne	a0,a5,1cd9a <dwarf::value::as_flag() const+0x1c>
	_M_dispose();
   1cfa8:	601c                	c.ld	a5,0(s0)
   1cfaa:	6b9c                	c.ld	a5,16(a5)
   1cfac:	8522                	c.mv	a0,s0
   1cfae:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1cfb0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1cfb4:	0001c797          	auipc	a5,0x1c
   1cfb8:	4cc7b783          	ld	a5,1228(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1cfbc:	0007c783          	lbu	a5,0(a5)
   1cfc0:	ec0784e3          	beq	a5,zero,1ce88 <dwarf::value::as_flag() const+0x10a>
    _Atomic_word __result = *__mem;
   1cfc4:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1cfc6:	fff5079b          	addiw	a5,a0,-1
   1cfca:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1cfcc:	4785                	c.li	a5,1
   1cfce:	dcf516e3          	bne	a0,a5,1cd9a <dwarf::value::as_flag() const+0x1c>
	    _M_destroy();
   1cfd2:	601c                	c.ld	a5,0(s0)
   1cfd4:	6f9c                	c.ld	a5,24(a5)
   1cfd6:	8522                	c.mv	a0,s0
   1cfd8:	9782                	c.jalr	a5
   1cfda:	b3c1                	c.j	1cd9a <dwarf::value::as_flag() const+0x1c>
    cursor cur(cu->data(), offset);
   1cfdc:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1cfde:	e0ca                	c.sdsp	s2,64(sp)
      : _M_pi(__r._M_pi)
   1cfe0:	e482                	c.sdsp	zero,72(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1cfe2:	00893783          	ld	a5,8(s2)
   1cfe6:	97ba                	c.add	a5,a4
   1cfe8:	e8be                	c.sdsp	a5,80(sp)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1cfea:	6786                	c.ldsp	a5,64(sp)
   1cfec:	6b98                	c.ld	a4,16(a5)
   1cfee:	67c6                	c.ldsp	a5,80(sp)
   1cff0:	e6e7eee3          	bltu	a5,a4,1ce6c <dwarf::value::as_flag() const+0xee>
      underflow();
   1cff4:	0088                	c.addi4spn	a0,sp,64
   1cff6:	b43fd0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   1cffa:	bd8d                	c.j	1ce6c <dwarf::value::as_flag() const+0xee>

000000000001cffc <dwarf::value::as_cstr(unsigned long*) const>:
  size_t size;
  const char *s = as_cstr(&size);
  return string(s, size);
}

const char *value::as_cstr(size_t *size_out) const {
   1cffc:	7131                	c.addi16sp	sp,-192
   1cffe:	fd06                	c.sdsp	ra,184(sp)
   1d000:	f922                	c.sdsp	s0,176(sp)
   1d002:	f526                	c.sdsp	s1,168(sp)
   1d004:	f14a                	c.sdsp	s2,160(sp)
   1d006:	ed4e                	c.sdsp	s3,152(sp)
   1d008:	e952                	c.sdsp	s4,144(sp)
   1d00a:	842a                	c.mv	s0,a0
   1d00c:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), offset);
   1d00e:	6108                	c.ld	a0,0(a0)
   1d010:	fa3f90ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d014:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1d018:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1d01a:	34048e63          	beq	s1,zero,1d376 <dwarf::value::as_cstr(unsigned long*) const+0x37a>
    if (__is_single_threaded())
   1d01e:	0001c797          	auipc	a5,0x1c
   1d022:	4627b783          	ld	a5,1122(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d026:	0007c783          	lbu	a5,0(a5)
   1d02a:	cfad                	c.beqz	a5,1d0a4 <dwarf::value::as_cstr(unsigned long*) const+0xa8>
  { *__mem += __val; }
   1d02c:	589c                	c.lw	a5,48(s1)
   1d02e:	2785                	c.addiw	a5,1
   1d030:	d89c                	c.sw	a5,48(s1)
   1d032:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d036:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1d038:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   1d03a:	0001c797          	auipc	a5,0x1c
   1d03e:	4467b783          	ld	a5,1094(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d042:	0007c783          	lbu	a5,0(a5)
   1d046:	c7ad                	c.beqz	a5,1d0b0 <dwarf::value::as_cstr(unsigned long*) const+0xb4>
  { *__mem += __val; }
   1d048:	589c                	c.lw	a5,48(s1)
   1d04a:	2785                	c.addiw	a5,1
   1d04c:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1d04e:	0089b783          	ld	a5,8(s3)
   1d052:	97d2                	c.add	a5,s4
   1d054:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1d056:	0001c797          	auipc	a5,0x1c
   1d05a:	42a7b783          	ld	a5,1066(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d05e:	0007c783          	lbu	a5,0(a5)
   1d062:	cfa9                	c.beqz	a5,1d0bc <dwarf::value::as_cstr(unsigned long*) const+0xc0>
    _Atomic_word __result = *__mem;
   1d064:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d066:	fff5079b          	addiw	a5,a0,-1
   1d06a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d06c:	4785                	c.li	a5,1
   1d06e:	30f51b63          	bne	a0,a5,1d384 <dwarf::value::as_cstr(unsigned long*) const+0x388>
	_M_dispose();
   1d072:	609c                	c.ld	a5,0(s1)
   1d074:	6b9c                	c.ld	a5,16(a5)
   1d076:	8526                	c.mv	a0,s1
   1d078:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d07a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d07e:	0001c797          	auipc	a5,0x1c
   1d082:	4027b783          	ld	a5,1026(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d086:	0007c783          	lbu	a5,0(a5)
   1d08a:	cf9d                	c.beqz	a5,1d0c8 <dwarf::value::as_cstr(unsigned long*) const+0xcc>
    _Atomic_word __result = *__mem;
   1d08c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d08e:	fff5079b          	addiw	a5,a0,-1
   1d092:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d094:	4785                	c.li	a5,1
   1d096:	2ef51763          	bne	a0,a5,1d384 <dwarf::value::as_cstr(unsigned long*) const+0x388>
	    _M_destroy();
   1d09a:	609c                	c.ld	a5,0(s1)
   1d09c:	6f9c                	c.ld	a5,24(a5)
   1d09e:	8526                	c.mv	a0,s1
   1d0a0:	9782                	c.jalr	a5
   1d0a2:	a4cd                	c.j	1d384 <dwarf::value::as_cstr(unsigned long*) const+0x388>
      __atomic_add(__mem, __val);
   1d0a4:	4585                	c.li	a1,1
   1d0a6:	03048513          	addi	a0,s1,48
   1d0aa:	aa6f90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d0ae:	b751                	c.j	1d032 <dwarf::value::as_cstr(unsigned long*) const+0x36>
   1d0b0:	4585                	c.li	a1,1
   1d0b2:	03048513          	addi	a0,s1,48
   1d0b6:	a9af90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d0ba:	bf51                	c.j	1d04e <dwarf::value::as_cstr(unsigned long*) const+0x52>
      return __exchange_and_add(__mem, __val);
   1d0bc:	55fd                	c.li	a1,-1
   1d0be:	03048513          	addi	a0,s1,48
   1d0c2:	abef90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d0c6:	b75d                	c.j	1d06c <dwarf::value::as_cstr(unsigned long*) const+0x70>
   1d0c8:	55fd                	c.li	a1,-1
   1d0ca:	03448513          	addi	a0,s1,52
   1d0ce:	ab2f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d0d2:	b7c9                	c.j	1d094 <dwarf::value::as_cstr(unsigned long*) const+0x98>
  switch (form) {
  case DW_FORM::string:
    return cur.cstr(size_out);
   1d0d4:	85ca                	c.mv	a1,s2
   1d0d6:	10a8                	c.addi4spn	a0,sp,104
   1d0d8:	9abfd0ef          	jal	ra,1aa82 <dwarf::cursor::cstr(unsigned long*)>
   1d0dc:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1d0de:	74c6                	c.ldsp	s1,112(sp)
   1d0e0:	c085                	c.beqz	s1,1d100 <dwarf::value::as_cstr(unsigned long*) const+0x104>
    if (__is_single_threaded())
   1d0e2:	0001c797          	auipc	a5,0x1c
   1d0e6:	39e7b783          	ld	a5,926(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d0ea:	0007c783          	lbu	a5,0(a5)
   1d0ee:	1e078063          	beq	a5,zero,1d2ce <dwarf::value::as_cstr(unsigned long*) const+0x2d2>
    _Atomic_word __result = *__mem;
   1d0f2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d0f4:	fff5079b          	addiw	a5,a0,-1
   1d0f8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d0fa:	4785                	c.li	a5,1
   1d0fc:	1cf50f63          	beq	a0,a5,1d2da <dwarf::value::as_cstr(unsigned long*) const+0x2de>
    return scur.cstr(size_out);
  }
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
  }
}
   1d100:	8522                	c.mv	a0,s0
   1d102:	70ea                	c.ldsp	ra,184(sp)
   1d104:	744a                	c.ldsp	s0,176(sp)
   1d106:	74aa                	c.ldsp	s1,168(sp)
   1d108:	790a                	c.ldsp	s2,160(sp)
   1d10a:	69ea                	c.ldsp	s3,152(sp)
   1d10c:	6a4a                	c.ldsp	s4,144(sp)
   1d10e:	6129                	c.addi16sp	sp,192
   1d110:	8082                	c.jr	ra
    section_offset off = cur.offset();
   1d112:	84aa                	c.mv	s1,a0
    cursor scur(cu->get_dwarf().get_section(section_type::str), off);
   1d114:	6008                	c.ld	a0,0(s0)
   1d116:	e93f90ef          	jal	ra,16fa8 <dwarf::unit::get_dwarf() const>
   1d11a:	85aa                	c.mv	a1,a0
   1d11c:	4629                	c.li	a2,10
   1d11e:	0108                	c.addi4spn	a0,sp,128
   1d120:	e9ff90ef          	jal	ra,16fbe <dwarf::dwarf::get_section(dwarf::section_type) const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d124:	678a                	c.ldsp	a5,128(sp)
   1d126:	e4be                	c.sdsp	a5,72(sp)
      : _M_pi(__r._M_pi)
   1d128:	652a                	c.ldsp	a0,136(sp)
   1d12a:	e8aa                	c.sdsp	a0,80(sp)
	if (_M_pi != nullptr)
   1d12c:	c919                	c.beqz	a0,1d142 <dwarf::value::as_cstr(unsigned long*) const+0x146>
    if (__is_single_threaded())
   1d12e:	0001c797          	auipc	a5,0x1c
   1d132:	3527b783          	ld	a5,850(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d136:	0007c783          	lbu	a5,0(a5)
   1d13a:	cf95                	c.beqz	a5,1d176 <dwarf::value::as_cstr(unsigned long*) const+0x17a>
  { *__mem += __val; }
   1d13c:	591c                	c.lw	a5,48(a0)
   1d13e:	2785                	c.addiw	a5,1
   1d140:	d91c                	c.sw	a5,48(a0)
   1d142:	678a                	c.ldsp	a5,128(sp)
   1d144:	679c                	c.ld	a5,8(a5)
   1d146:	00978533          	add	a0,a5,s1
   1d14a:	ecaa                	c.sdsp	a0,88(sp)
	if (_M_pi != nullptr)
   1d14c:	642a                	c.ldsp	s0,136(sp)
   1d14e:	cc19                	c.beqz	s0,1d16c <dwarf::value::as_cstr(unsigned long*) const+0x170>
    if (__is_single_threaded())
   1d150:	0001c797          	auipc	a5,0x1c
   1d154:	3307b783          	ld	a5,816(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d158:	0007c783          	lbu	a5,0(a5)
   1d15c:	c39d                	c.beqz	a5,1d182 <dwarf::value::as_cstr(unsigned long*) const+0x186>
    _Atomic_word __result = *__mem;
   1d15e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d160:	fff5079b          	addiw	a5,a0,-1
   1d164:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d166:	4785                	c.li	a5,1
   1d168:	02f50363          	beq	a0,a5,1d18e <dwarf::value::as_cstr(unsigned long*) const+0x192>
    return scur.cstr(size_out);
   1d16c:	85ca                	c.mv	a1,s2
   1d16e:	00a8                	c.addi4spn	a0,sp,72
   1d170:	913fd0ef          	jal	ra,1aa82 <dwarf::cursor::cstr(unsigned long*)>
   1d174:	a8a1                	c.j	1d1cc <dwarf::value::as_cstr(unsigned long*) const+0x1d0>
      __atomic_add(__mem, __val);
   1d176:	4585                	c.li	a1,1
   1d178:	03050513          	addi	a0,a0,48
   1d17c:	9d4f90ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d180:	b7c9                	c.j	1d142 <dwarf::value::as_cstr(unsigned long*) const+0x146>
      return __exchange_and_add(__mem, __val);
   1d182:	55fd                	c.li	a1,-1
   1d184:	03040513          	addi	a0,s0,48
   1d188:	9f8f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d18c:	bfe9                	c.j	1d166 <dwarf::value::as_cstr(unsigned long*) const+0x16a>
	_M_dispose();
   1d18e:	601c                	c.ld	a5,0(s0)
   1d190:	6b9c                	c.ld	a5,16(a5)
   1d192:	8522                	c.mv	a0,s0
   1d194:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d196:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d19a:	0001c797          	auipc	a5,0x1c
   1d19e:	2e67b783          	ld	a5,742(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d1a2:	0007c783          	lbu	a5,0(a5)
   1d1a6:	cf89                	c.beqz	a5,1d1c0 <dwarf::value::as_cstr(unsigned long*) const+0x1c4>
    _Atomic_word __result = *__mem;
   1d1a8:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1d1aa:	fff5079b          	addiw	a5,a0,-1
   1d1ae:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d1b0:	4785                	c.li	a5,1
   1d1b2:	faf51de3          	bne	a0,a5,1d16c <dwarf::value::as_cstr(unsigned long*) const+0x170>
	    _M_destroy();
   1d1b6:	601c                	c.ld	a5,0(s0)
   1d1b8:	6f9c                	c.ld	a5,24(a5)
   1d1ba:	8522                	c.mv	a0,s0
   1d1bc:	9782                	c.jalr	a5
   1d1be:	b77d                	c.j	1d16c <dwarf::value::as_cstr(unsigned long*) const+0x170>
      return __exchange_and_add(__mem, __val);
   1d1c0:	55fd                	c.li	a1,-1
   1d1c2:	03440513          	addi	a0,s0,52
   1d1c6:	9baf90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d1ca:	b7dd                	c.j	1d1b0 <dwarf::value::as_cstr(unsigned long*) const+0x1b4>
   1d1cc:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   1d1ce:	64c6                	c.ldsp	s1,80(sp)
   1d1d0:	f00487e3          	beq	s1,zero,1d0de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
    if (__is_single_threaded())
   1d1d4:	0001c797          	auipc	a5,0x1c
   1d1d8:	2ac7b783          	ld	a5,684(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d1dc:	0007c783          	lbu	a5,0(a5)
   1d1e0:	c3a9                	c.beqz	a5,1d222 <dwarf::value::as_cstr(unsigned long*) const+0x226>
    _Atomic_word __result = *__mem;
   1d1e2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d1e4:	fff5079b          	addiw	a5,a0,-1
   1d1e8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d1ea:	4785                	c.li	a5,1
   1d1ec:	eef519e3          	bne	a0,a5,1d0de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
	_M_dispose();
   1d1f0:	609c                	c.ld	a5,0(s1)
   1d1f2:	6b9c                	c.ld	a5,16(a5)
   1d1f4:	8526                	c.mv	a0,s1
   1d1f6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d1f8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d1fc:	0001c797          	auipc	a5,0x1c
   1d200:	2847b783          	ld	a5,644(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d204:	0007c783          	lbu	a5,0(a5)
   1d208:	c39d                	c.beqz	a5,1d22e <dwarf::value::as_cstr(unsigned long*) const+0x232>
    _Atomic_word __result = *__mem;
   1d20a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d20c:	fff5079b          	addiw	a5,a0,-1
   1d210:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d212:	4785                	c.li	a5,1
   1d214:	ecf515e3          	bne	a0,a5,1d0de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
	    _M_destroy();
   1d218:	609c                	c.ld	a5,0(s1)
   1d21a:	6f9c                	c.ld	a5,24(a5)
   1d21c:	8526                	c.mv	a0,s1
   1d21e:	9782                	c.jalr	a5
   1d220:	bd7d                	c.j	1d0de <dwarf::value::as_cstr(unsigned long*) const+0xe2>
      return __exchange_and_add(__mem, __val);
   1d222:	55fd                	c.li	a1,-1
   1d224:	03048513          	addi	a0,s1,48
   1d228:	958f90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d22c:	bf7d                	c.j	1d1ea <dwarf::value::as_cstr(unsigned long*) const+0x1ee>
   1d22e:	55fd                	c.li	a1,-1
   1d230:	03448513          	addi	a0,s1,52
   1d234:	94cf90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d238:	bfe9                	c.j	1d212 <dwarf::value::as_cstr(unsigned long*) const+0x216>
    throw value_type_mismatch("cannot read " + to_string(typ) + " as string");
   1d23a:	4541                	c.li	a0,16
   1d23c:	9e4f90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1d240:	84aa                	c.mv	s1,a0
   1d242:	444c                	c.lw	a1,12(s0)
   1d244:	0028                	c.addi4spn	a0,sp,8
   1d246:	1b80a0ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d24a:	00010617          	auipc	a2,0x10
   1d24e:	41660613          	addi	a2,a2,1046 # 2d660 <std::piecewise_construct+0x1c8>
   1d252:	4581                	c.li	a1,0
   1d254:	0028                	c.addi4spn	a0,sp,8
   1d256:	93af90ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d25a:	85aa                	c.mv	a1,a0
   1d25c:	1020                	c.addi4spn	s0,sp,40
   1d25e:	8522                	c.mv	a0,s0
   1d260:	a10f90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1d264:	00010597          	auipc	a1,0x10
   1d268:	46c58593          	addi	a1,a1,1132 # 2d6d0 <std::piecewise_construct+0x238>
   1d26c:	8522                	c.mv	a0,s0
   1d26e:	d32f90ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1d272:	85aa                	c.mv	a1,a0
   1d274:	00a0                	c.addi4spn	s0,sp,72
   1d276:	8522                	c.mv	a0,s0
   1d278:	9f8f90ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d27c:	85a2                	c.mv	a1,s0
   1d27e:	8526                	c.mv	a0,s1
   1d280:	d70f90ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1d284:	0001c797          	auipc	a5,0x1c
   1d288:	1c47b783          	ld	a5,452(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1d28c:	07c1                	c.addi	a5,16
   1d28e:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1d290:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d292:	08bc                	c.addi4spn	a5,sp,88
   1d294:	00f50463          	beq	a0,a5,1d29c <dwarf::value::as_cstr(unsigned long*) const+0x2a0>
   1d298:	a78f90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d29c:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d29e:	183c                	c.addi4spn	a5,sp,56
   1d2a0:	00f50463          	beq	a0,a5,1d2a8 <dwarf::value::as_cstr(unsigned long*) const+0x2ac>
   1d2a4:	a6cf90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d2a8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d2aa:	083c                	c.addi4spn	a5,sp,24
   1d2ac:	00f50463          	beq	a0,a5,1d2b4 <dwarf::value::as_cstr(unsigned long*) const+0x2b8>
   1d2b0:	a60f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1d2b4:	0001c617          	auipc	a2,0x1c
   1d2b8:	32463603          	ld	a2,804(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1d2bc:	0001c597          	auipc	a1,0x1c
   1d2c0:	2dc5b583          	ld	a1,732(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1d2c4:	8526                	c.mv	a0,s1
   1d2c6:	bfaf90ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d2ca:	842a                	c.mv	s0,a0
   1d2cc:	a8b1                	c.j	1d328 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
   1d2ce:	55fd                	c.li	a1,-1
   1d2d0:	03048513          	addi	a0,s1,48
   1d2d4:	8acf90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d2d8:	b50d                	c.j	1d0fa <dwarf::value::as_cstr(unsigned long*) const+0xfe>
	_M_dispose();
   1d2da:	609c                	c.ld	a5,0(s1)
   1d2dc:	6b9c                	c.ld	a5,16(a5)
   1d2de:	8526                	c.mv	a0,s1
   1d2e0:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d2e2:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d2e6:	0001c797          	auipc	a5,0x1c
   1d2ea:	19a7b783          	ld	a5,410(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d2ee:	0007c783          	lbu	a5,0(a5)
   1d2f2:	cf89                	c.beqz	a5,1d30c <dwarf::value::as_cstr(unsigned long*) const+0x310>
    _Atomic_word __result = *__mem;
   1d2f4:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d2f6:	fff5079b          	addiw	a5,a0,-1
   1d2fa:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d2fc:	4785                	c.li	a5,1
   1d2fe:	e0f511e3          	bne	a0,a5,1d100 <dwarf::value::as_cstr(unsigned long*) const+0x104>
	    _M_destroy();
   1d302:	609c                	c.ld	a5,0(s1)
   1d304:	6f9c                	c.ld	a5,24(a5)
   1d306:	8526                	c.mv	a0,s1
   1d308:	9782                	c.jalr	a5
   1d30a:	bbdd                	c.j	1d100 <dwarf::value::as_cstr(unsigned long*) const+0x104>
      return __exchange_and_add(__mem, __val);
   1d30c:	55fd                	c.li	a1,-1
   1d30e:	03448513          	addi	a0,s1,52
   1d312:	86ef90ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d316:	b7dd                	c.j	1d2fc <dwarf::value::as_cstr(unsigned long*) const+0x300>
	if (_M_pi != nullptr)
   1d318:	842a                	c.mv	s0,a0
   1d31a:	6546                	c.ldsp	a0,80(sp)
   1d31c:	c511                	c.beqz	a0,1d328 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
	  _M_pi->_M_release();
   1d31e:	0001c317          	auipc	t1,0x1c
   1d322:	0aa33303          	ld	t1,170(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1d326:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1d328:	7546                	c.ldsp	a0,112(sp)
   1d32a:	c511                	c.beqz	a0,1d336 <dwarf::value::as_cstr(unsigned long*) const+0x33a>
	  _M_pi->_M_release();
   1d32c:	0001c317          	auipc	t1,0x1c
   1d330:	09c33303          	ld	t1,156(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1d334:	9302                	c.jalr	t1
   1d336:	8522                	c.mv	a0,s0
   1d338:	bb8f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d33c:	842a                	c.mv	s0,a0
   1d33e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d340:	08bc                	c.addi4spn	a5,sp,88
   1d342:	00f50463          	beq	a0,a5,1d34a <dwarf::value::as_cstr(unsigned long*) const+0x34e>
   1d346:	9caf90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d34a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d34c:	183c                	c.addi4spn	a5,sp,56
   1d34e:	00f50463          	beq	a0,a5,1d356 <dwarf::value::as_cstr(unsigned long*) const+0x35a>
   1d352:	9bef90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d356:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d358:	083c                	c.addi4spn	a5,sp,24
   1d35a:	00f50463          	beq	a0,a5,1d362 <dwarf::value::as_cstr(unsigned long*) const+0x366>
   1d35e:	9b2f90ef          	jal	ra,16510 <operator delete(void*)@plt>
   1d362:	8526                	c.mv	a0,s1
   1d364:	96cf90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1d368:	b7c1                	c.j	1d328 <dwarf::value::as_cstr(unsigned long*) const+0x32c>
      { return _M_dataplus._M_p; }
   1d36a:	842a                	c.mv	s0,a0
   1d36c:	bff9                	c.j	1d34a <dwarf::value::as_cstr(unsigned long*) const+0x34e>
   1d36e:	842a                	c.mv	s0,a0
   1d370:	b7dd                	c.j	1d356 <dwarf::value::as_cstr(unsigned long*) const+0x35a>
   1d372:	842a                	c.mv	s0,a0
   1d374:	b7fd                	c.j	1d362 <dwarf::value::as_cstr(unsigned long*) const+0x366>
  cursor cur(cu->data(), offset);
   1d376:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d378:	f4ce                	c.sdsp	s3,104(sp)
      : _M_pi(__r._M_pi)
   1d37a:	f882                	c.sdsp	zero,112(sp)
   1d37c:	0089b783          	ld	a5,8(s3)
   1d380:	97ba                	c.add	a5,a4
   1d382:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1d384:	441c                	c.lw	a5,8(s0)
   1d386:	4721                	c.li	a4,8
   1d388:	d4e786e3          	beq	a5,a4,1d0d4 <dwarf::value::as_cstr(unsigned long*) const+0xd8>
   1d38c:	4739                	c.li	a4,14
   1d38e:	eae796e3          	bne	a5,a4,1d23a <dwarf::value::as_cstr(unsigned long*) const+0x23e>
    section_offset off = cur.offset();
   1d392:	10a8                	c.addi4spn	a0,sp,104
   1d394:	ccbfd0ef          	jal	ra,1b05e <dwarf::cursor::offset()>
   1d398:	bbad                	c.j	1d112 <dwarf::value::as_cstr(unsigned long*) const+0x116>

000000000001d39a <dwarf::value::as_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) const>:
void value::as_string(string &buf) const {
   1d39a:	7179                	c.addi16sp	sp,-48
   1d39c:	f406                	c.sdsp	ra,40(sp)
   1d39e:	f022                	c.sdsp	s0,32(sp)
   1d3a0:	ec26                	c.sdsp	s1,24(sp)
   1d3a2:	842e                	c.mv	s0,a1
  const char *p = as_cstr(&size);
   1d3a4:	002c                	c.addi4spn	a1,sp,8
   1d3a6:	c57ff0ef          	jal	ra,1cffc <dwarf::value::as_cstr(unsigned long*) const>
   1d3aa:	84aa                	c.mv	s1,a0
      { this->resize(__n, _CharT()); }
   1d3ac:	4601                	c.li	a2,0
   1d3ae:	65a2                	c.ldsp	a1,8(sp)
   1d3b0:	8522                	c.mv	a0,s0
   1d3b2:	ffff80ef          	jal	ra,163b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)@plt>
  memmove(&buf.front(), p, size);
   1d3b6:	6622                	c.ldsp	a2,8(sp)
   1d3b8:	85a6                	c.mv	a1,s1
   1d3ba:	6008                	c.ld	a0,0(s0)
   1d3bc:	bc4f90ef          	jal	ra,16780 <memmove@plt>
}
   1d3c0:	70a2                	c.ldsp	ra,40(sp)
   1d3c2:	7402                	c.ldsp	s0,32(sp)
   1d3c4:	64e2                	c.ldsp	s1,24(sp)
   1d3c6:	6145                	c.addi16sp	sp,48
   1d3c8:	8082                	c.jr	ra

000000000001d3ca <dwarf::value::as_sec_offset() const>:

section_offset value::as_sec_offset() const {
   1d3ca:	7171                	c.addi16sp	sp,-176
   1d3cc:	f506                	c.sdsp	ra,168(sp)
   1d3ce:	f122                	c.sdsp	s0,160(sp)
   1d3d0:	ed26                	c.sdsp	s1,152(sp)
   1d3d2:	e94a                	c.sdsp	s2,144(sp)
   1d3d4:	e54e                	c.sdsp	s3,136(sp)
   1d3d6:	892a                	c.mv	s2,a0
  // Prior to DWARF 4, sec_offsets were encoded as data4 or
  // data8.
  cursor cur(cu->data(), offset);
   1d3d8:	6108                	c.ld	a0,0(a0)
   1d3da:	bd9f90ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d3de:	6104                	c.ld	s1,0(a0)
      : _M_pi(__r._M_pi)
   1d3e0:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1d3e2:	2c040b63          	beq	s0,zero,1d6b8 <dwarf::value::as_sec_offset() const+0x2ee>
    if (__is_single_threaded())
   1d3e6:	0001c797          	auipc	a5,0x1c
   1d3ea:	09a7b783          	ld	a5,154(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d3ee:	0007c783          	lbu	a5,0(a5)
   1d3f2:	cfa5                	c.beqz	a5,1d46a <dwarf::value::as_sec_offset() const+0xa0>
  { *__mem += __val; }
   1d3f4:	581c                	c.lw	a5,48(s0)
   1d3f6:	2785                	c.addiw	a5,1
   1d3f8:	d81c                	c.sw	a5,48(s0)
   1d3fa:	01093983          	ld	s3,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d3fe:	f4a6                	c.sdsp	s1,104(sp)
      : _M_pi(__r._M_pi)
   1d400:	f8a2                	c.sdsp	s0,112(sp)
    if (__is_single_threaded())
   1d402:	0001c797          	auipc	a5,0x1c
   1d406:	07e7b783          	ld	a5,126(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d40a:	0007c783          	lbu	a5,0(a5)
   1d40e:	c7a5                	c.beqz	a5,1d476 <dwarf::value::as_sec_offset() const+0xac>
  { *__mem += __val; }
   1d410:	581c                	c.lw	a5,48(s0)
   1d412:	2785                	c.addiw	a5,1
   1d414:	d81c                	c.sw	a5,48(s0)
   1d416:	649c                	c.ld	a5,8(s1)
   1d418:	97ce                	c.add	a5,s3
   1d41a:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   1d41c:	0001c797          	auipc	a5,0x1c
   1d420:	0647b783          	ld	a5,100(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d424:	0007c783          	lbu	a5,0(a5)
   1d428:	cfa9                	c.beqz	a5,1d482 <dwarf::value::as_sec_offset() const+0xb8>
    _Atomic_word __result = *__mem;
   1d42a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d42c:	fff5079b          	addiw	a5,a0,-1
   1d430:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d432:	4785                	c.li	a5,1
   1d434:	28f51963          	bne	a0,a5,1d6c6 <dwarf::value::as_sec_offset() const+0x2fc>
	_M_dispose();
   1d438:	601c                	c.ld	a5,0(s0)
   1d43a:	6b9c                	c.ld	a5,16(a5)
   1d43c:	8522                	c.mv	a0,s0
   1d43e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d440:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d444:	0001c797          	auipc	a5,0x1c
   1d448:	03c7b783          	ld	a5,60(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d44c:	0007c783          	lbu	a5,0(a5)
   1d450:	cf9d                	c.beqz	a5,1d48e <dwarf::value::as_sec_offset() const+0xc4>
    _Atomic_word __result = *__mem;
   1d452:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1d454:	fff5079b          	addiw	a5,a0,-1
   1d458:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d45a:	4785                	c.li	a5,1
   1d45c:	26f51563          	bne	a0,a5,1d6c6 <dwarf::value::as_sec_offset() const+0x2fc>
	    _M_destroy();
   1d460:	601c                	c.ld	a5,0(s0)
   1d462:	6f9c                	c.ld	a5,24(a5)
   1d464:	8522                	c.mv	a0,s0
   1d466:	9782                	c.jalr	a5
   1d468:	acb9                	c.j	1d6c6 <dwarf::value::as_sec_offset() const+0x2fc>
      __atomic_add(__mem, __val);
   1d46a:	4585                	c.li	a1,1
   1d46c:	03040513          	addi	a0,s0,48
   1d470:	ee1f80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d474:	b759                	c.j	1d3fa <dwarf::value::as_sec_offset() const+0x30>
   1d476:	4585                	c.li	a1,1
   1d478:	03040513          	addi	a0,s0,48
   1d47c:	ed5f80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d480:	bf59                	c.j	1d416 <dwarf::value::as_sec_offset() const+0x4c>
      return __exchange_and_add(__mem, __val);
   1d482:	55fd                	c.li	a1,-1
   1d484:	03040513          	addi	a0,s0,48
   1d488:	ef9f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d48c:	b75d                	c.j	1d432 <dwarf::value::as_sec_offset() const+0x68>
   1d48e:	55fd                	c.li	a1,-1
   1d490:	03440513          	addi	a0,s0,52
   1d494:	eedf80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d498:	b7c9                	c.j	1d45a <dwarf::value::as_sec_offset() const+0x90>
  switch (form) {
   1d49a:	4719                	c.li	a4,6
   1d49c:	0ee79863          	bne	a5,a4,1d58c <dwarf::value::as_sec_offset() const+0x1c2>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d4a0:	77a6                	c.ldsp	a5,104(sp)
   1d4a2:	6b98                	c.ld	a4,16(a5)
   1d4a4:	77e6                	c.ldsp	a5,120(sp)
   1d4a6:	40f70633          	sub	a2,a4,a5
   1d4aa:	468d                	c.li	a3,3
   1d4ac:	00c6f463          	bgeu	a3,a2,1d4b4 <dwarf::value::as_sec_offset() const+0xea>
   1d4b0:	00e7e563          	bltu	a5,a4,1d4ba <dwarf::value::as_sec_offset() const+0xf0>
      underflow();
   1d4b4:	10a8                	c.addi4spn	a0,sp,104
   1d4b6:	e82fd0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d4ba:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d4bc:	77a6                	c.ldsp	a5,104(sp)
   1d4be:	4fdc                	c.lw	a5,28(a5)
   1d4c0:	ebb9                	c.bnez	a5,1d516 <dwarf::value::as_sec_offset() const+0x14c>
   1d4c2:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1d4c4:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d4c6:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1d4ca:	0006c703          	lbu	a4,0(a3)
   1d4ce:	00f71733          	sll	a4,a4,a5
   1d4d2:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d4d4:	0685                	c.addi	a3,1
   1d4d6:	27a1                	c.addiw	a5,8
   1d4d8:	feb799e3          	bne	a5,a1,1d4ca <dwarf::value::as_sec_offset() const+0x100>
    pos += sizeof(T);
   1d4dc:	0611                	c.addi	a2,4
   1d4de:	fcb2                	c.sdsp	a2,120(sp)
   1d4e0:	1402                	c.slli	s0,0x20
   1d4e2:	9001                	c.srli	s0,0x20
	if (_M_pi != nullptr)
   1d4e4:	74c6                	c.ldsp	s1,112(sp)
   1d4e6:	c085                	c.beqz	s1,1d506 <dwarf::value::as_sec_offset() const+0x13c>
    if (__is_single_threaded())
   1d4e8:	0001c797          	auipc	a5,0x1c
   1d4ec:	f987b783          	ld	a5,-104(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d4f0:	0007c783          	lbu	a5,0(a5)
   1d4f4:	12078763          	beq	a5,zero,1d622 <dwarf::value::as_sec_offset() const+0x258>
    _Atomic_word __result = *__mem;
   1d4f8:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d4fa:	fff5079b          	addiw	a5,a0,-1
   1d4fe:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d500:	4785                	c.li	a5,1
   1d502:	12f50663          	beq	a0,a5,1d62e <dwarf::value::as_sec_offset() const+0x264>
    return cur.offset();
  default:
    throw value_type_mismatch("cannot read " + to_string(typ) +
                              " as sec_offset");
  }
}
   1d506:	8522                	c.mv	a0,s0
   1d508:	70aa                	c.ldsp	ra,168(sp)
   1d50a:	740a                	c.ldsp	s0,160(sp)
   1d50c:	64ea                	c.ldsp	s1,152(sp)
   1d50e:	694a                	c.ldsp	s2,144(sp)
   1d510:	69aa                	c.ldsp	s3,136(sp)
   1d512:	614d                	c.addi16sp	sp,176
   1d514:	8082                	c.jr	ra
   1d516:	87b2                	c.mv	a5,a2
   1d518:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1d51c:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1d51e:	0422                	c.slli	s0,0x8
   1d520:	0007c703          	lbu	a4,0(a5)
   1d524:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d526:	0785                	c.addi	a5,1
   1d528:	fed79be3          	bne	a5,a3,1d51e <dwarf::value::as_sec_offset() const+0x154>
   1d52c:	bf45                	c.j	1d4dc <dwarf::value::as_sec_offset() const+0x112>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1d52e:	77a6                	c.ldsp	a5,104(sp)
   1d530:	6b98                	c.ld	a4,16(a5)
   1d532:	77e6                	c.ldsp	a5,120(sp)
   1d534:	40f70633          	sub	a2,a4,a5
   1d538:	469d                	c.li	a3,7
   1d53a:	00c6f463          	bgeu	a3,a2,1d542 <dwarf::value::as_sec_offset() const+0x178>
   1d53e:	00e7e563          	bltu	a5,a4,1d548 <dwarf::value::as_sec_offset() const+0x17e>
      underflow();
   1d542:	10a8                	c.addi4spn	a0,sp,104
   1d544:	df4fd0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1d548:	7666                	c.ldsp	a2,120(sp)
    if (sec->ord == byte_order::lsb) {
   1d54a:	77a6                	c.ldsp	a5,104(sp)
   1d54c:	4fdc                	c.lw	a5,28(a5)
   1d54e:	e38d                	c.bnez	a5,1d570 <dwarf::value::as_sec_offset() const+0x1a6>
   1d550:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1d552:	4401                	c.li	s0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1d554:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1d558:	0006c703          	lbu	a4,0(a3)
   1d55c:	00f71733          	sll	a4,a4,a5
   1d560:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d562:	0685                	c.addi	a3,1
   1d564:	27a1                	c.addiw	a5,8
   1d566:	feb799e3          	bne	a5,a1,1d558 <dwarf::value::as_sec_offset() const+0x18e>
    pos += sizeof(T);
   1d56a:	0621                	c.addi	a2,8
   1d56c:	fcb2                	c.sdsp	a2,120(sp)
   1d56e:	bf9d                	c.j	1d4e4 <dwarf::value::as_sec_offset() const+0x11a>
   1d570:	87b2                	c.mv	a5,a2
   1d572:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1d576:	4401                	c.li	s0,0
        val = (val << 8) | (uint64_t)p[i];
   1d578:	0422                	c.slli	s0,0x8
   1d57a:	0007c703          	lbu	a4,0(a5)
   1d57e:	8c59                	c.or	s0,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1d580:	0785                	c.addi	a5,1
   1d582:	fed79be3          	bne	a5,a3,1d578 <dwarf::value::as_sec_offset() const+0x1ae>
   1d586:	b7d5                	c.j	1d56a <dwarf::value::as_sec_offset() const+0x1a0>
    return cur.offset();
   1d588:	842a                	c.mv	s0,a0
   1d58a:	bfa9                	c.j	1d4e4 <dwarf::value::as_sec_offset() const+0x11a>
                              " as sec_offset");
   1d58c:	4541                	c.li	a0,16
   1d58e:	e93f80ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1d592:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1d594:	00c92583          	lw	a1,12(s2)
   1d598:	0028                	c.addi4spn	a0,sp,8
   1d59a:	665090ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1d59e:	00010617          	auipc	a2,0x10
   1d5a2:	0c260613          	addi	a2,a2,194 # 2d660 <std::piecewise_construct+0x1c8>
   1d5a6:	4581                	c.li	a1,0
   1d5a8:	0028                	c.addi4spn	a0,sp,8
   1d5aa:	de7f80ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1d5ae:	85aa                	c.mv	a1,a0
   1d5b0:	1020                	c.addi4spn	s0,sp,40
   1d5b2:	8522                	c.mv	a0,s0
   1d5b4:	ebdf80ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1d5b8:	00010597          	auipc	a1,0x10
   1d5bc:	12858593          	addi	a1,a1,296 # 2d6e0 <std::piecewise_construct+0x248>
   1d5c0:	8522                	c.mv	a0,s0
   1d5c2:	9def90ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1d5c6:	85aa                	c.mv	a1,a0
   1d5c8:	00a0                	c.addi4spn	s0,sp,72
   1d5ca:	8522                	c.mv	a0,s0
   1d5cc:	ea5f80ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1d5d0:	85a2                	c.mv	a1,s0
   1d5d2:	8526                	c.mv	a0,s1
   1d5d4:	a1cf90ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1d5d8:	0001c797          	auipc	a5,0x1c
   1d5dc:	e707b783          	ld	a5,-400(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1d5e0:	07c1                	c.addi	a5,16
   1d5e2:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1d5e4:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d5e6:	08bc                	c.addi4spn	a5,sp,88
   1d5e8:	00f50463          	beq	a0,a5,1d5f0 <dwarf::value::as_sec_offset() const+0x226>
   1d5ec:	f25f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d5f0:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d5f2:	183c                	c.addi4spn	a5,sp,56
   1d5f4:	00f50463          	beq	a0,a5,1d5fc <dwarf::value::as_sec_offset() const+0x232>
   1d5f8:	f19f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d5fc:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d5fe:	083c                	c.addi4spn	a5,sp,24
   1d600:	00f50463          	beq	a0,a5,1d608 <dwarf::value::as_sec_offset() const+0x23e>
   1d604:	f0df80ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as sec_offset");
   1d608:	0001c617          	auipc	a2,0x1c
   1d60c:	fd063603          	ld	a2,-48(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1d610:	0001c597          	auipc	a1,0x1c
   1d614:	f885b583          	ld	a1,-120(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1d618:	8526                	c.mv	a0,s1
   1d61a:	8a6f90ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1d61e:	842a                	c.mv	s0,a0
   1d620:	a8a5                	c.j	1d698 <dwarf::value::as_sec_offset() const+0x2ce>
      return __exchange_and_add(__mem, __val);
   1d622:	55fd                	c.li	a1,-1
   1d624:	03048513          	addi	a0,s1,48
   1d628:	d59f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d62c:	bdd1                	c.j	1d500 <dwarf::value::as_sec_offset() const+0x136>
	_M_dispose();
   1d62e:	609c                	c.ld	a5,0(s1)
   1d630:	6b9c                	c.ld	a5,16(a5)
   1d632:	8526                	c.mv	a0,s1
   1d634:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d636:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d63a:	0001c797          	auipc	a5,0x1c
   1d63e:	e467b783          	ld	a5,-442(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d642:	0007c783          	lbu	a5,0(a5)
   1d646:	cf89                	c.beqz	a5,1d660 <dwarf::value::as_sec_offset() const+0x296>
    _Atomic_word __result = *__mem;
   1d648:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1d64a:	fff5079b          	addiw	a5,a0,-1
   1d64e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d650:	4785                	c.li	a5,1
   1d652:	eaf51ae3          	bne	a0,a5,1d506 <dwarf::value::as_sec_offset() const+0x13c>
	    _M_destroy();
   1d656:	609c                	c.ld	a5,0(s1)
   1d658:	6f9c                	c.ld	a5,24(a5)
   1d65a:	8526                	c.mv	a0,s1
   1d65c:	9782                	c.jalr	a5
   1d65e:	b565                	c.j	1d506 <dwarf::value::as_sec_offset() const+0x13c>
      return __exchange_and_add(__mem, __val);
   1d660:	55fd                	c.li	a1,-1
   1d662:	03448513          	addi	a0,s1,52
   1d666:	d1bf80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d66a:	b7dd                	c.j	1d650 <dwarf::value::as_sec_offset() const+0x286>
      { return _M_dataplus._M_p; }
   1d66c:	842a                	c.mv	s0,a0
   1d66e:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1d670:	08bc                	c.addi4spn	a5,sp,88
   1d672:	00f50463          	beq	a0,a5,1d67a <dwarf::value::as_sec_offset() const+0x2b0>
   1d676:	e9bf80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d67a:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1d67c:	183c                	c.addi4spn	a5,sp,56
   1d67e:	00f50463          	beq	a0,a5,1d686 <dwarf::value::as_sec_offset() const+0x2bc>
   1d682:	e8ff80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1d686:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1d688:	083c                	c.addi4spn	a5,sp,24
   1d68a:	00f50463          	beq	a0,a5,1d692 <dwarf::value::as_sec_offset() const+0x2c8>
   1d68e:	e83f80ef          	jal	ra,16510 <operator delete(void*)@plt>
   1d692:	8526                	c.mv	a0,s1
   1d694:	e3df80ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   1d698:	7546                	c.ldsp	a0,112(sp)
   1d69a:	c511                	c.beqz	a0,1d6a6 <dwarf::value::as_sec_offset() const+0x2dc>
	  _M_pi->_M_release();
   1d69c:	0001c317          	auipc	t1,0x1c
   1d6a0:	d2c33303          	ld	t1,-724(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1d6a4:	9302                	c.jalr	t1
   1d6a6:	8522                	c.mv	a0,s0
   1d6a8:	848f90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1d6ac:	842a                	c.mv	s0,a0
   1d6ae:	b7f1                	c.j	1d67a <dwarf::value::as_sec_offset() const+0x2b0>
   1d6b0:	842a                	c.mv	s0,a0
   1d6b2:	bfd1                	c.j	1d686 <dwarf::value::as_sec_offset() const+0x2bc>
   1d6b4:	842a                	c.mv	s0,a0
   1d6b6:	bff1                	c.j	1d692 <dwarf::value::as_sec_offset() const+0x2c8>
  cursor cur(cu->data(), offset);
   1d6b8:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d6bc:	f4a6                	c.sdsp	s1,104(sp)
      : _M_pi(__r._M_pi)
   1d6be:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d6c0:	649c                	c.ld	a5,8(s1)
   1d6c2:	97ba                	c.add	a5,a4
   1d6c4:	fcbe                	c.sdsp	a5,120(sp)
  switch (form) {
   1d6c6:	00892783          	lw	a5,8(s2)
   1d6ca:	471d                	c.li	a4,7
   1d6cc:	e6e781e3          	beq	a5,a4,1d52e <dwarf::value::as_sec_offset() const+0x164>
   1d6d0:	475d                	c.li	a4,23
   1d6d2:	dce794e3          	bne	a5,a4,1d49a <dwarf::value::as_sec_offset() const+0xd0>
    return cur.offset();
   1d6d6:	10a8                	c.addi4spn	a0,sp,104
   1d6d8:	987fd0ef          	jal	ra,1b05e <dwarf::cursor::offset()>
   1d6dc:	b575                	c.j	1d588 <dwarf::value::as_sec_offset() const+0x1be>

000000000001d6de <dwarf::value::resolve_indirect(dwarf::DW_AT)>:

void value::resolve_indirect(DW_AT name) {
  if (form != DW_FORM::indirect)
   1d6de:	4518                	c.lw	a4,8(a0)
   1d6e0:	47d9                	c.li	a5,22
   1d6e2:	00f70363          	beq	a4,a5,1d6e8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xa>
   1d6e6:	8082                	c.jr	ra
void value::resolve_indirect(DW_AT name) {
   1d6e8:	711d                	c.addi16sp	sp,-96
   1d6ea:	ec86                	c.sdsp	ra,88(sp)
   1d6ec:	e8a2                	c.sdsp	s0,80(sp)
   1d6ee:	e4a6                	c.sdsp	s1,72(sp)
   1d6f0:	e0ca                	c.sdsp	s2,64(sp)
   1d6f2:	fc4e                	c.sdsp	s3,56(sp)
   1d6f4:	f852                	c.sdsp	s4,48(sp)
   1d6f6:	842a                	c.mv	s0,a0
   1d6f8:	892e                	c.mv	s2,a1
    return;

  cursor c(cu->data(), offset);
   1d6fa:	6108                	c.ld	a0,0(a0)
   1d6fc:	8b7f90ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d700:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1d704:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1d706:	1a048463          	beq	s1,zero,1d8ae <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1d0>
    if (__is_single_threaded())
   1d70a:	0001c797          	auipc	a5,0x1c
   1d70e:	d767b783          	ld	a5,-650(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d712:	0007c783          	lbu	a5,0(a5)
   1d716:	cfad                	c.beqz	a5,1d790 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xb2>
  { *__mem += __val; }
   1d718:	589c                	c.lw	a5,48(s1)
   1d71a:	2785                	c.addiw	a5,1
   1d71c:	d89c                	c.sw	a5,48(s1)
   1d71e:	01043a03          	ld	s4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d722:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d724:	e826                	c.sdsp	s1,16(sp)
    if (__is_single_threaded())
   1d726:	0001c797          	auipc	a5,0x1c
   1d72a:	d5a7b783          	ld	a5,-678(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d72e:	0007c783          	lbu	a5,0(a5)
   1d732:	c7ad                	c.beqz	a5,1d79c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xbe>
  { *__mem += __val; }
   1d734:	589c                	c.lw	a5,48(s1)
   1d736:	2785                	c.addiw	a5,1
   1d738:	d89c                	c.sw	a5,48(s1)
   1d73a:	0089b783          	ld	a5,8(s3)
   1d73e:	97d2                	c.add	a5,s4
   1d740:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   1d742:	0001c797          	auipc	a5,0x1c
   1d746:	d3e7b783          	ld	a5,-706(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d74a:	0007c783          	lbu	a5,0(a5)
   1d74e:	cfa9                	c.beqz	a5,1d7a8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xca>
    _Atomic_word __result = *__mem;
   1d750:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1d752:	fff5079b          	addiw	a5,a0,-1
   1d756:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d758:	4785                	c.li	a5,1
   1d75a:	16f51163          	bne	a0,a5,1d8bc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
	_M_dispose();
   1d75e:	609c                	c.ld	a5,0(s1)
   1d760:	6b9c                	c.ld	a5,16(a5)
   1d762:	8526                	c.mv	a0,s1
   1d764:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d766:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d76a:	0001c797          	auipc	a5,0x1c
   1d76e:	d167b783          	ld	a5,-746(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d772:	0007c783          	lbu	a5,0(a5)
   1d776:	cf9d                	c.beqz	a5,1d7b4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xd6>
    _Atomic_word __result = *__mem;
   1d778:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   1d77a:	fff7871b          	addiw	a4,a5,-1
   1d77e:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d780:	4705                	c.li	a4,1
   1d782:	12e79d63          	bne	a5,a4,1d8bc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
	    _M_destroy();
   1d786:	609c                	c.ld	a5,0(s1)
   1d788:	6f9c                	c.ld	a5,24(a5)
   1d78a:	8526                	c.mv	a0,s1
   1d78c:	9782                	c.jalr	a5
   1d78e:	a23d                	c.j	1d8bc <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1de>
      __atomic_add(__mem, __val);
   1d790:	4585                	c.li	a1,1
   1d792:	03048513          	addi	a0,s1,48
   1d796:	bbbf80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d79a:	b751                	c.j	1d71e <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x40>
   1d79c:	4585                	c.li	a1,1
   1d79e:	03048513          	addi	a0,s1,48
   1d7a2:	baff80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1d7a6:	bf51                	c.j	1d73a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x5c>
      return __exchange_and_add(__mem, __val);
   1d7a8:	55fd                	c.li	a1,-1
   1d7aa:	03048513          	addi	a0,s1,48
   1d7ae:	bd3f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d7b2:	b75d                	c.j	1d758 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x7a>
   1d7b4:	55fd                	c.li	a1,-1
   1d7b6:	03448513          	addi	a0,s1,52
   1d7ba:	bc7f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d7be:	87aa                	c.mv	a5,a0
   1d7c0:	b7c1                	c.j	1d780 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xa2>
    return 0;
   1d7c2:	4601                	c.li	a2,0
  DW_FORM form;
  do {
    form = (DW_FORM)c.uleb128();
   1d7c4:	2601                	c.addiw	a2,0
  } while (form == DW_FORM::indirect);
   1d7c6:	04961063          	bne	a2,s1,1d806 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x128>
    while (pos < sec->end) {
   1d7ca:	67e2                	c.ldsp	a5,24(sp)
      { return _M_ptr; }
   1d7cc:	65a2                	c.ldsp	a1,8(sp)
   1d7ce:	6998                	c.ld	a4,16(a1)
   1d7d0:	02e7f763          	bgeu	a5,a4,1d7fe <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x120>
    std::uint64_t result = 0;
   1d7d4:	4601                	c.li	a2,0
    int shift = 0;
   1d7d6:	884e                	c.mv	a6,s3
      uint8_t byte = *(uint8_t *)(pos++);
   1d7d8:	0785                	c.addi	a5,1
   1d7da:	ec3e                	c.sdsp	a5,24(sp)
   1d7dc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1d7e0:	07f77693          	andi	a3,a4,127
   1d7e4:	010696b3          	sll	a3,a3,a6
   1d7e8:	8e55                	c.or	a2,a3
      if ((byte & 0x80) == 0)
   1d7ea:	0187171b          	slliw	a4,a4,0x18
   1d7ee:	4187571b          	sraiw	a4,a4,0x18
   1d7f2:	fc0759e3          	bge	a4,zero,1d7c4 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xe6>
      shift += 7;
   1d7f6:	281d                	c.addiw	a6,7
    while (pos < sec->end) {
   1d7f8:	6998                	c.ld	a4,16(a1)
   1d7fa:	fce7efe3          	bltu	a5,a4,1d7d8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xfa>
    underflow();
   1d7fe:	8552                	c.mv	a0,s4
   1d800:	b38fd0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1d804:	bf7d                	c.j	1d7c2 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xe4>
  typ = attribute_spec(name, form).type;
   1d806:	85ca                	c.mv	a1,s2
   1d808:	1008                	c.addi4spn	a0,sp,32
   1d80a:	3bf010ef          	jal	ra,1f3c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
   1d80e:	57a2                	c.lwsp	a5,40(sp)
   1d810:	c45c                	c.sw	a5,12(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   1d812:	67a2                	c.ldsp	a5,8(sp)
   1d814:	6798                	c.ld	a4,8(a5)
   1d816:	67e2                	c.ldsp	a5,24(sp)
   1d818:	8f99                	c.sub	a5,a4
  offset = c.get_section_offset();
   1d81a:	e81c                	c.sd	a5,16(s0)
	if (_M_pi != nullptr)
   1d81c:	6442                	c.ldsp	s0,16(sp)
   1d81e:	cc19                	c.beqz	s0,1d83c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
    if (__is_single_threaded())
   1d820:	0001c797          	auipc	a5,0x1c
   1d824:	c607b783          	ld	a5,-928(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d828:	0007c783          	lbu	a5,0(a5)
   1d82c:	c385                	c.beqz	a5,1d84c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x16e>
    _Atomic_word __result = *__mem;
   1d82e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1d830:	fff5079b          	addiw	a5,a0,-1
   1d834:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1d836:	4785                	c.li	a5,1
   1d838:	02f50063          	beq	a0,a5,1d858 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x17a>
}
   1d83c:	60e6                	c.ldsp	ra,88(sp)
   1d83e:	6446                	c.ldsp	s0,80(sp)
   1d840:	64a6                	c.ldsp	s1,72(sp)
   1d842:	6906                	c.ldsp	s2,64(sp)
   1d844:	79e2                	c.ldsp	s3,56(sp)
   1d846:	7a42                	c.ldsp	s4,48(sp)
   1d848:	6125                	c.addi16sp	sp,96
   1d84a:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1d84c:	55fd                	c.li	a1,-1
   1d84e:	03040513          	addi	a0,s0,48
   1d852:	b2ff80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d856:	b7c5                	c.j	1d836 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x158>
	_M_dispose();
   1d858:	601c                	c.ld	a5,0(s0)
   1d85a:	6b9c                	c.ld	a5,16(a5)
   1d85c:	8522                	c.mv	a0,s0
   1d85e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1d860:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1d864:	0001c797          	auipc	a5,0x1c
   1d868:	c1c7b783          	ld	a5,-996(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d86c:	0007c783          	lbu	a5,0(a5)
   1d870:	cf89                	c.beqz	a5,1d88a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ac>
    _Atomic_word __result = *__mem;
   1d872:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   1d874:	fff7871b          	addiw	a4,a5,-1
   1d878:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1d87a:	4705                	c.li	a4,1
   1d87c:	fce790e3          	bne	a5,a4,1d83c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
	    _M_destroy();
   1d880:	601c                	c.ld	a5,0(s0)
   1d882:	6f9c                	c.ld	a5,24(a5)
   1d884:	8522                	c.mv	a0,s0
   1d886:	9782                	c.jalr	a5
   1d888:	bf55                	c.j	1d83c <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x15e>
      return __exchange_and_add(__mem, __val);
   1d88a:	55fd                	c.li	a1,-1
   1d88c:	03440513          	addi	a0,s0,52
   1d890:	af1f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1d894:	87aa                	c.mv	a5,a0
   1d896:	b7d5                	c.j	1d87a <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x19c>
	if (_M_pi != nullptr)
   1d898:	842a                	c.mv	s0,a0
   1d89a:	6542                	c.ldsp	a0,16(sp)
   1d89c:	c511                	c.beqz	a0,1d8a8 <dwarf::value::resolve_indirect(dwarf::DW_AT)+0x1ca>
	  _M_pi->_M_release();
   1d89e:	0001c317          	auipc	t1,0x1c
   1d8a2:	b2a33303          	ld	t1,-1238(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1d8a6:	9302                	c.jalr	t1
   1d8a8:	8522                	c.mv	a0,s0
   1d8aa:	e47f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
  cursor c(cu->data(), offset);
   1d8ae:	6818                	c.ld	a4,16(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d8b0:	e44e                	c.sdsp	s3,8(sp)
      : _M_pi(__r._M_pi)
   1d8b2:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1d8b4:	0089b783          	ld	a5,8(s3)
   1d8b8:	97ba                	c.add	a5,a4
   1d8ba:	ec3e                	c.sdsp	a5,24(sp)
    underflow();
   1d8bc:	00810a13          	addi	s4,sp,8
    int shift = 0;
   1d8c0:	4981                	c.li	s3,0
  } while (form == DW_FORM::indirect);
   1d8c2:	44d9                	c.li	s1,22
   1d8c4:	b719                	c.j	1d7ca <dwarf::value::resolve_indirect(dwarf::DW_AT)+0xec>

000000000001d8c6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)>:
    : cu(cu), form(form), typ(typ), offset(offset) {
   1d8c6:	e10c                	c.sd	a1,0(a0)
   1d8c8:	c514                	c.sw	a3,8(a0)
   1d8ca:	c558                	c.sw	a4,12(a0)
   1d8cc:	e91c                	c.sd	a5,16(a0)
  if (form == DW_FORM::indirect)
   1d8ce:	47d9                	c.li	a5,22
   1d8d0:	00f68363          	beq	a3,a5,1d8d6 <dwarf::value::value(dwarf::unit const*, dwarf::DW_AT, dwarf::DW_FORM, dwarf::value::type, unsigned long)+0x10>
   1d8d4:	8082                	c.jr	ra
value::value(const unit *cu, DW_AT name, DW_FORM form, type typ,
   1d8d6:	1141                	c.addi	sp,-16
   1d8d8:	e406                	c.sdsp	ra,8(sp)
    resolve_indirect(name);
   1d8da:	85b2                	c.mv	a1,a2
   1d8dc:	e03ff0ef          	jal	ra,1d6de <dwarf::value::resolve_indirect(dwarf::DW_AT)>
}
   1d8e0:	60a2                	c.ldsp	ra,8(sp)
   1d8e2:	0141                	c.addi	sp,16
   1d8e4:	8082                	c.jr	ra

000000000001d8e6 <dwarf::value::as_rangelist() const>:
rangelist value::as_rangelist() const {
   1d8e6:	7155                	c.addi16sp	sp,-208
   1d8e8:	e586                	c.sdsp	ra,200(sp)
   1d8ea:	e1a2                	c.sdsp	s0,192(sp)
   1d8ec:	fd26                	c.sdsp	s1,184(sp)
   1d8ee:	f94a                	c.sdsp	s2,176(sp)
   1d8f0:	f54e                	c.sdsp	s3,168(sp)
   1d8f2:	f152                	c.sdsp	s4,160(sp)
   1d8f4:	ed56                	c.sdsp	s5,152(sp)
   1d8f6:	e95a                	c.sdsp	s6,144(sp)
   1d8f8:	e55e                	c.sdsp	s7,136(sp)
   1d8fa:	e162                	c.sdsp	s8,128(sp)
   1d8fc:	8a2a                	c.mv	s4,a0
   1d8fe:	892e                	c.mv	s2,a1
  section_offset off = as_sec_offset();
   1d900:	852e                	c.mv	a0,a1
   1d902:	ac9ff0ef          	jal	ra,1d3ca <dwarf::value::as_sec_offset() const>
   1d906:	8aaa                	c.mv	s5,a0
  die cudie = cu->root();
   1d908:	00093503          	ld	a0,0(s2)
   1d90c:	d72fb0ef          	jal	ra,18e7e <dwarf::unit::root() const>
   1d910:	842a                	c.mv	s0,a0
  die(const die &o) = default;
   1d912:	411c                	c.lw	a5,0(a0)
   1d914:	c83e                	c.swsp	a5,16(sp)
   1d916:	651c                	c.ld	a5,8(a0)
   1d918:	ec3e                	c.sdsp	a5,24(sp)
   1d91a:	691c                	c.ld	a5,16(a0)
   1d91c:	f03e                	c.sdsp	a5,32(sp)
   1d91e:	6d1c                	c.ld	a5,24(a0)
   1d920:	f43e                	c.sdsp	a5,40(sp)
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1d922:	181c                	c.addi4spn	a5,sp,48
   1d924:	f0be                	c.sdsp	a5,96(sp)
   1d926:	f4be                	c.sdsp	a5,104(sp)
   1d928:	109c                	c.addi4spn	a5,sp,96
   1d92a:	f8be                	c.sdsp	a5,112(sp)
  size_type size() const { return end - base; }
   1d92c:	05853983          	ld	s3,88(a0)
   1d930:	693c                	c.ld	a5,80(a0)
   1d932:	40f989b3          	sub	s3,s3,a5
   1d936:	4039d493          	srai	s1,s3,0x3
    if (n <= (size_type)(cap - base))
   1d93a:	03000793          	addi	a5,zero,48
   1d93e:	0537f663          	bgeu	a5,s3,1d98a <dwarf::value::as_rangelist() const+0xa4>
    size_type target = cap - base;
   1d942:	4519                	c.li	a0,6
      target <<= 1;
   1d944:	0506                	c.slli	a0,0x1
    while (target < n)
   1d946:	fe956fe3          	bltu	a0,s1,1d944 <dwarf::value::as_rangelist() const+0x5e>
    char *newbuf = new char[sizeof(T[target])];
   1d94a:	00351b13          	slli	s6,a0,0x3
   1d94e:	855a                	c.mv	a0,s6
   1d950:	9e1f80ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1d954:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1d956:	7506                	c.ldsp	a0,96(sp)
    for (; src < end; src++, dest++) {
   1d958:	7726                	c.ldsp	a4,104(sp)
   1d95a:	04e57f63          	bgeu	a0,a4,1d9b8 <dwarf::value::as_rangelist() const+0xd2>
    T *src = base, *dest = (T *)newbuf;
   1d95e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1d960:	07a1                	c.addi	a5,8
   1d962:	fee7efe3          	bltu	a5,a4,1d960 <dwarf::value::as_rangelist() const+0x7a>
   1d966:	fff70b93          	addi	s7,a4,-1
   1d96a:	40ab8bb3          	sub	s7,s7,a0
   1d96e:	ff8bfb93          	andi	s7,s7,-8
   1d972:	0ba1                	c.addi	s7,8
   1d974:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1d976:	181c                	c.addi4spn	a5,sp,48
   1d978:	00f50563          	beq	a0,a5,1d982 <dwarf::value::as_rangelist() const+0x9c>
      delete[] (char *)base;
   1d97c:	c119                	c.beqz	a0,1d982 <dwarf::value::as_rangelist() const+0x9c>
   1d97e:	c43f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1d982:	f0e2                	c.sdsp	s8,96(sp)
    end = dest;
   1d984:	f4de                	c.sdsp	s7,104(sp)
    cap = base + target;
   1d986:	9c5a                	c.add	s8,s6
   1d988:	f8e2                	c.sdsp	s8,112(sp)
    for (size_type i = 0; i < osize; i++)
   1d98a:	cc89                	c.beqz	s1,1d9a4 <dwarf::value::as_rangelist() const+0xbe>
   1d98c:	4781                	c.li	a5,0
   1d98e:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1d992:	6838                	c.ld	a4,80(s0)
   1d994:	9736                	c.add	a4,a3
   1d996:	6310                	c.ld	a2,0(a4)
   1d998:	7706                	c.ldsp	a4,96(sp)
   1d99a:	9736                	c.add	a4,a3
   1d99c:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1d99e:	0785                	c.addi	a5,1
   1d9a0:	fef497e3          	bne	s1,a5,1d98e <dwarf::value::as_rangelist() const+0xa8>
    end = base + osize;
   1d9a4:	7786                	c.ldsp	a5,96(sp)
   1d9a6:	97ce                	c.add	a5,s3
   1d9a8:	f4be                	c.sdsp	a5,104(sp)
   1d9aa:	743c                	c.ld	a5,104(s0)
   1d9ac:	fcbe                	c.sdsp	a5,120(sp)
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   1d9ae:	45c5                	c.li	a1,17
   1d9b0:	0808                	c.addi4spn	a0,sp,16
   1d9b2:	b7ffd0ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   1d9b6:	a019                	c.j	1d9bc <dwarf::value::as_rangelist() const+0xd6>
    T *src = base, *dest = (T *)newbuf;
   1d9b8:	8be2                	c.mv	s7,s8
   1d9ba:	bf75                	c.j	1d976 <dwarf::value::as_rangelist() const+0x90>
   1d9bc:	c911                	c.beqz	a0,1d9d0 <dwarf::value::as_rangelist() const+0xea>
   1d9be:	0808                	c.addi4spn	a0,sp,16
   1d9c0:	0f7070ef          	jal	ra,252b6 <dwarf::at_low_pc(dwarf::die const&)>
   1d9c4:	84aa                	c.mv	s1,a0
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   1d9c6:	00093503          	ld	a0,0(s2)
   1d9ca:	ddef90ef          	jal	ra,16fa8 <dwarf::unit::get_dwarf() const>
   1d9ce:	a019                	c.j	1d9d4 <dwarf::value::as_rangelist() const+0xee>
  taddr cu_low_pc = cudie.has(DW_AT::low_pc) ? at_low_pc(cudie) : 0;
   1d9d0:	4481                	c.li	s1,0
   1d9d2:	bfd5                	c.j	1d9c6 <dwarf::value::as_rangelist() const+0xe0>
  auto sec = cu->get_dwarf().get_section(section_type::ranges);
   1d9d4:	85aa                	c.mv	a1,a0
   1d9d6:	4625                	c.li	a2,9
   1d9d8:	850a                	c.mv	a0,sp
   1d9da:	de4f90ef          	jal	ra,16fbe <dwarf::dwarf::get_section(dwarf::section_type) const>
  auto cusec = cu->data();
   1d9de:	00093503          	ld	a0,0(s2)
   1d9e2:	dd0f90ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1d9e6:	00053903          	ld	s2,0(a0)
      : _M_pi(__r._M_pi)
   1d9ea:	6500                	c.ld	s0,8(a0)
	if (_M_pi != nullptr)
   1d9ec:	c819                	c.beqz	s0,1da02 <dwarf::value::as_rangelist() const+0x11c>
    if (__is_single_threaded())
   1d9ee:	0001c797          	auipc	a5,0x1c
   1d9f2:	a927b783          	ld	a5,-1390(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1d9f6:	0007c783          	lbu	a5,0(a5)
   1d9fa:	cf89                	c.beqz	a5,1da14 <dwarf::value::as_rangelist() const+0x12e>
  { *__mem += __val; }
   1d9fc:	581c                	c.lw	a5,48(s0)
   1d9fe:	2785                	c.addiw	a5,1
   1da00:	d81c                	c.sw	a5,48(s0)
  return rangelist(sec, off, cusec->addr_size, cu_low_pc);
   1da02:	8726                	c.mv	a4,s1
   1da04:	02092683          	lw	a3,32(s2)
   1da08:	8656                	c.mv	a2,s5
   1da0a:	858a                	c.mv	a1,sp
   1da0c:	8552                	c.mv	a0,s4
   1da0e:	5c7030ef          	jal	ra,217d4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>
   1da12:	a039                	c.j	1da20 <dwarf::value::as_rangelist() const+0x13a>
      __atomic_add(__mem, __val);
   1da14:	4585                	c.li	a1,1
   1da16:	03040513          	addi	a0,s0,48
   1da1a:	937f80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1da1e:	b7d5                	c.j	1da02 <dwarf::value::as_rangelist() const+0x11c>
	if (_M_pi != nullptr)
   1da20:	cc19                	c.beqz	s0,1da3e <dwarf::value::as_rangelist() const+0x158>
    if (__is_single_threaded())
   1da22:	0001c797          	auipc	a5,0x1c
   1da26:	a5e7b783          	ld	a5,-1442(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1da2a:	0007c783          	lbu	a5,0(a5)
   1da2e:	c7a5                	c.beqz	a5,1da96 <dwarf::value::as_rangelist() const+0x1b0>
    _Atomic_word __result = *__mem;
   1da30:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1da32:	fff5079b          	addiw	a5,a0,-1
   1da36:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1da38:	4785                	c.li	a5,1
   1da3a:	06f50463          	beq	a0,a5,1daa2 <dwarf::value::as_rangelist() const+0x1bc>
	if (_M_pi != nullptr)
   1da3e:	6422                	c.ldsp	s0,8(sp)
   1da40:	cc19                	c.beqz	s0,1da5e <dwarf::value::as_rangelist() const+0x178>
    if (__is_single_threaded())
   1da42:	0001c797          	auipc	a5,0x1c
   1da46:	a3e7b783          	ld	a5,-1474(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1da4a:	0007c783          	lbu	a5,0(a5)
   1da4e:	cbc9                	c.beqz	a5,1dae0 <dwarf::value::as_rangelist() const+0x1fa>
    _Atomic_word __result = *__mem;
   1da50:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1da52:	fff5079b          	addiw	a5,a0,-1
   1da56:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1da58:	4785                	c.li	a5,1
   1da5a:	08f50963          	beq	a0,a5,1daec <dwarf::value::as_rangelist() const+0x206>
    for (T *p = base; p < end; ++p)
   1da5e:	7506                	c.ldsp	a0,96(sp)
   1da60:	77a6                	c.ldsp	a5,104(sp)
   1da62:	00f57763          	bgeu	a0,a5,1da70 <dwarf::value::as_rangelist() const+0x18a>
   1da66:	87aa                	c.mv	a5,a0
   1da68:	07a1                	c.addi	a5,8
   1da6a:	7726                	c.ldsp	a4,104(sp)
   1da6c:	fee7eee3          	bltu	a5,a4,1da68 <dwarf::value::as_rangelist() const+0x182>
    if ((char *)base != buf)
   1da70:	181c                	c.addi4spn	a5,sp,48
   1da72:	00f50563          	beq	a0,a5,1da7c <dwarf::value::as_rangelist() const+0x196>
      delete[] (char *)base;
   1da76:	c119                	c.beqz	a0,1da7c <dwarf::value::as_rangelist() const+0x196>
   1da78:	b49f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
}
   1da7c:	8552                	c.mv	a0,s4
   1da7e:	60ae                	c.ldsp	ra,200(sp)
   1da80:	640e                	c.ldsp	s0,192(sp)
   1da82:	74ea                	c.ldsp	s1,184(sp)
   1da84:	794a                	c.ldsp	s2,176(sp)
   1da86:	79aa                	c.ldsp	s3,168(sp)
   1da88:	7a0a                	c.ldsp	s4,160(sp)
   1da8a:	6aea                	c.ldsp	s5,152(sp)
   1da8c:	6b4a                	c.ldsp	s6,144(sp)
   1da8e:	6baa                	c.ldsp	s7,136(sp)
   1da90:	6c0a                	c.ldsp	s8,128(sp)
   1da92:	6169                	c.addi16sp	sp,208
   1da94:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   1da96:	55fd                	c.li	a1,-1
   1da98:	03040513          	addi	a0,s0,48
   1da9c:	8e5f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1daa0:	bf61                	c.j	1da38 <dwarf::value::as_rangelist() const+0x152>
	_M_dispose();
   1daa2:	601c                	c.ld	a5,0(s0)
   1daa4:	6b9c                	c.ld	a5,16(a5)
   1daa6:	8522                	c.mv	a0,s0
   1daa8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1daaa:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1daae:	0001c797          	auipc	a5,0x1c
   1dab2:	9d27b783          	ld	a5,-1582(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dab6:	0007c783          	lbu	a5,0(a5)
   1daba:	cf89                	c.beqz	a5,1dad4 <dwarf::value::as_rangelist() const+0x1ee>
    _Atomic_word __result = *__mem;
   1dabc:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1dabe:	fff5079b          	addiw	a5,a0,-1
   1dac2:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dac4:	4785                	c.li	a5,1
   1dac6:	f6f51ce3          	bne	a0,a5,1da3e <dwarf::value::as_rangelist() const+0x158>
	    _M_destroy();
   1daca:	601c                	c.ld	a5,0(s0)
   1dacc:	6f9c                	c.ld	a5,24(a5)
   1dace:	8522                	c.mv	a0,s0
   1dad0:	9782                	c.jalr	a5
   1dad2:	b7b5                	c.j	1da3e <dwarf::value::as_rangelist() const+0x158>
      return __exchange_and_add(__mem, __val);
   1dad4:	55fd                	c.li	a1,-1
   1dad6:	03440513          	addi	a0,s0,52
   1dada:	8a7f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dade:	b7dd                	c.j	1dac4 <dwarf::value::as_rangelist() const+0x1de>
   1dae0:	55fd                	c.li	a1,-1
   1dae2:	03040513          	addi	a0,s0,48
   1dae6:	89bf80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1daea:	b7bd                	c.j	1da58 <dwarf::value::as_rangelist() const+0x172>
	_M_dispose();
   1daec:	601c                	c.ld	a5,0(s0)
   1daee:	6b9c                	c.ld	a5,16(a5)
   1daf0:	8522                	c.mv	a0,s0
   1daf2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1daf4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1daf8:	0001c797          	auipc	a5,0x1c
   1dafc:	9887b783          	ld	a5,-1656(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1db00:	0007c783          	lbu	a5,0(a5)
   1db04:	cf89                	c.beqz	a5,1db1e <dwarf::value::as_rangelist() const+0x238>
    _Atomic_word __result = *__mem;
   1db06:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   1db08:	fff5079b          	addiw	a5,a0,-1
   1db0c:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1db0e:	4785                	c.li	a5,1
   1db10:	f4f517e3          	bne	a0,a5,1da5e <dwarf::value::as_rangelist() const+0x178>
	    _M_destroy();
   1db14:	601c                	c.ld	a5,0(s0)
   1db16:	6f9c                	c.ld	a5,24(a5)
   1db18:	8522                	c.mv	a0,s0
   1db1a:	9782                	c.jalr	a5
   1db1c:	b789                	c.j	1da5e <dwarf::value::as_rangelist() const+0x178>
      return __exchange_and_add(__mem, __val);
   1db1e:	55fd                	c.li	a1,-1
   1db20:	03440513          	addi	a0,s0,52
   1db24:	85df80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1db28:	b7dd                	c.j	1db0e <dwarf::value::as_rangelist() const+0x228>
	if (_M_pi != nullptr)
   1db2a:	84aa                	c.mv	s1,a0
   1db2c:	c419                	c.beqz	s0,1db3a <dwarf::value::as_rangelist() const+0x254>
	  _M_pi->_M_release();
   1db2e:	8522                	c.mv	a0,s0
   1db30:	0001c317          	auipc	t1,0x1c
   1db34:	89833303          	ld	t1,-1896(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1db38:	9302                	c.jalr	t1
   1db3a:	8426                	c.mv	s0,s1
	if (_M_pi != nullptr)
   1db3c:	6522                	c.ldsp	a0,8(sp)
   1db3e:	c511                	c.beqz	a0,1db4a <dwarf::value::as_rangelist() const+0x264>
	  _M_pi->_M_release();
   1db40:	0001c317          	auipc	t1,0x1c
   1db44:	88833303          	ld	t1,-1912(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1db48:	9302                	c.jalr	t1
class die {
   1db4a:	1808                	c.addi4spn	a0,sp,48
   1db4c:	0001c317          	auipc	t1,0x1c
   1db50:	89c33303          	ld	t1,-1892(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1db54:	9302                	c.jalr	t1
   1db56:	8522                	c.mv	a0,s0
   1db58:	b99f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   1db5c:	842a                	c.mv	s0,a0
   1db5e:	bff9                	c.j	1db3c <dwarf::value::as_rangelist() const+0x256>
   1db60:	842a                	c.mv	s0,a0
   1db62:	b7e5                	c.j	1db4a <dwarf::value::as_rangelist() const+0x264>

000000000001db64 <dwarf::value::as_string[abi:cxx11]() const>:
string value::as_string() const {
   1db64:	1101                	c.addi	sp,-32
   1db66:	ec06                	c.sdsp	ra,24(sp)
   1db68:	e822                	c.sdsp	s0,16(sp)
   1db6a:	842a                	c.mv	s0,a0
   1db6c:	852e                	c.mv	a0,a1
  const char *s = as_cstr(&size);
   1db6e:	002c                	c.addi4spn	a1,sp,8
   1db70:	c8cff0ef          	jal	ra,1cffc <dwarf::value::as_cstr(unsigned long*) const>
   1db74:	85aa                	c.mv	a1,a0
  return string(s, size);
   1db76:	6622                	c.ldsp	a2,8(sp)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1db78:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1db7c:	e01c                	c.sd	a5,0(s0)
	if (__s == 0 && __n > 0)
   1db7e:	cd11                	c.beqz	a0,1db9a <dwarf::value::as_string[abi:cxx11]() const+0x36>
	_M_construct(__s, __s + __n, std::forward_iterator_tag());
   1db80:	4681                	c.li	a3,0
   1db82:	962e                	c.add	a2,a1
   1db84:	8522                	c.mv	a0,s0
   1db86:	0001b317          	auipc	t1,0x1b
   1db8a:	78233303          	ld	t1,1922(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   1db8e:	9302                	c.jalr	t1
}
   1db90:	8522                	c.mv	a0,s0
   1db92:	60e2                	c.ldsp	ra,24(sp)
   1db94:	6442                	c.ldsp	s0,16(sp)
   1db96:	6105                	c.addi16sp	sp,32
   1db98:	8082                	c.jr	ra
	if (__s == 0 && __n > 0)
   1db9a:	d27d                	c.beqz	a2,1db80 <dwarf::value::as_string[abi:cxx11]() const+0x1c>
	  std::__throw_logic_error(__N("basic_string: "
   1db9c:	0000f517          	auipc	a0,0xf
   1dba0:	28450513          	addi	a0,a0,644 # 2ce20 <__libc_csu_fini+0x8>
   1dba4:	91df80ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>

000000000001dba8 <dwarf::value::as_reference() const>:
die value::as_reference() const {
   1dba8:	7165                	c.addi16sp	sp,-400
   1dbaa:	e706                	c.sdsp	ra,392(sp)
   1dbac:	e322                	c.sdsp	s0,384(sp)
   1dbae:	fea6                	c.sdsp	s1,376(sp)
   1dbb0:	faca                	c.sdsp	s2,368(sp)
   1dbb2:	f6ce                	c.sdsp	s3,360(sp)
   1dbb4:	f2d2                	c.sdsp	s4,352(sp)
   1dbb6:	eed6                	c.sdsp	s5,344(sp)
   1dbb8:	eada                	c.sdsp	s6,336(sp)
   1dbba:	e6de                	c.sdsp	s7,328(sp)
   1dbbc:	842a                	c.mv	s0,a0
   1dbbe:	892e                	c.mv	s2,a1
  cursor cur(cu->data(), offset);
   1dbc0:	6188                	c.ld	a0,0(a1)
   1dbc2:	bf0f90ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dbc6:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1dbca:	6504                	c.ld	s1,8(a0)
	if (_M_pi != nullptr)
   1dbcc:	7e048a63          	beq	s1,zero,1e3c0 <dwarf::value::as_reference() const+0x818>
    if (__is_single_threaded())
   1dbd0:	0001c797          	auipc	a5,0x1c
   1dbd4:	8b07b783          	ld	a5,-1872(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dbd8:	0007c783          	lbu	a5,0(a5)
   1dbdc:	cfb5                	c.beqz	a5,1dc58 <dwarf::value::as_reference() const+0xb0>
  { *__mem += __val; }
   1dbde:	589c                	c.lw	a5,48(s1)
   1dbe0:	2785                	c.addiw	a5,1
   1dbe2:	d89c                	c.sw	a5,48(s1)
   1dbe4:	01093a03          	ld	s4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1dbe8:	f64e                	c.sdsp	s3,296(sp)
      : _M_pi(__r._M_pi)
   1dbea:	fa26                	c.sdsp	s1,304(sp)
    if (__is_single_threaded())
   1dbec:	0001c797          	auipc	a5,0x1c
   1dbf0:	8947b783          	ld	a5,-1900(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dbf4:	0007c783          	lbu	a5,0(a5)
   1dbf8:	c7b5                	c.beqz	a5,1dc64 <dwarf::value::as_reference() const+0xbc>
  { *__mem += __val; }
   1dbfa:	589c                	c.lw	a5,48(s1)
   1dbfc:	2785                	c.addiw	a5,1
   1dbfe:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1dc00:	0089b783          	ld	a5,8(s3)
   1dc04:	97d2                	c.add	a5,s4
   1dc06:	fe3e                	c.sdsp	a5,312(sp)
    if (__is_single_threaded())
   1dc08:	0001c797          	auipc	a5,0x1c
   1dc0c:	8787b783          	ld	a5,-1928(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dc10:	0007c783          	lbu	a5,0(a5)
   1dc14:	cfb1                	c.beqz	a5,1dc70 <dwarf::value::as_reference() const+0xc8>
    _Atomic_word __result = *__mem;
   1dc16:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1dc18:	fff5079b          	addiw	a5,a0,-1
   1dc1c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1dc1e:	4785                	c.li	a5,1
   1dc20:	7af51863          	bne	a0,a5,1e3d0 <dwarf::value::as_reference() const+0x828>
	_M_dispose();
   1dc24:	609c                	c.ld	a5,0(s1)
   1dc26:	6b9c                	c.ld	a5,16(a5)
   1dc28:	8526                	c.mv	a0,s1
   1dc2a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1dc2c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1dc30:	0001c797          	auipc	a5,0x1c
   1dc34:	8507b783          	ld	a5,-1968(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1dc38:	0007c783          	lbu	a5,0(a5)
   1dc3c:	c3a1                	c.beqz	a5,1dc7c <dwarf::value::as_reference() const+0xd4>
    _Atomic_word __result = *__mem;
   1dc3e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1dc40:	fff5079b          	addiw	a5,a0,-1
   1dc44:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1dc46:	4785                	c.li	a5,1
   1dc48:	78f51463          	bne	a0,a5,1e3d0 <dwarf::value::as_reference() const+0x828>
	    _M_destroy();
   1dc4c:	609c                	c.ld	a5,0(s1)
   1dc4e:	6f9c                	c.ld	a5,24(a5)
   1dc50:	8526                	c.mv	a0,s1
   1dc52:	9782                	c.jalr	a5
   1dc54:	77c0006f          	jal	zero,1e3d0 <dwarf::value::as_reference() const+0x828>
      __atomic_add(__mem, __val);
   1dc58:	4585                	c.li	a1,1
   1dc5a:	03048513          	addi	a0,s1,48
   1dc5e:	ef2f80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1dc62:	b749                	c.j	1dbe4 <dwarf::value::as_reference() const+0x3c>
   1dc64:	4585                	c.li	a1,1
   1dc66:	03048513          	addi	a0,s1,48
   1dc6a:	ee6f80ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1dc6e:	bf49                	c.j	1dc00 <dwarf::value::as_reference() const+0x58>
      return __exchange_and_add(__mem, __val);
   1dc70:	55fd                	c.li	a1,-1
   1dc72:	03048513          	addi	a0,s1,48
   1dc76:	f0af80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dc7a:	b755                	c.j	1dc1e <dwarf::value::as_reference() const+0x76>
   1dc7c:	55fd                	c.li	a1,-1
   1dc7e:	03448513          	addi	a0,s1,52
   1dc82:	efef80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1dc86:	b7c1                	c.j	1dc46 <dwarf::value::as_reference() const+0x9e>
    while (pos < sec->end) {
   1dc88:	77f2                	c.ldsp	a5,312(sp)
      { return _M_ptr; }
   1dc8a:	75b2                	c.ldsp	a1,296(sp)
   1dc8c:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   1dc8e:	4481                	c.li	s1,0
    int shift = 0;
   1dc90:	4601                	c.li	a2,0
    while (pos < sec->end) {
   1dc92:	02e7f563          	bgeu	a5,a4,1dcbc <dwarf::value::as_reference() const+0x114>
      uint8_t byte = *(uint8_t *)(pos++);
   1dc96:	0785                	c.addi	a5,1
   1dc98:	fe3e                	c.sdsp	a5,312(sp)
   1dc9a:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1dc9e:	07f77693          	andi	a3,a4,127
   1dca2:	00c696b3          	sll	a3,a3,a2
   1dca6:	8cd5                	c.or	s1,a3
      if ((byte & 0x80) == 0)
   1dca8:	0187171b          	slliw	a4,a4,0x18
   1dcac:	4187571b          	sraiw	a4,a4,0x18
   1dcb0:	70075263          	bge	a4,zero,1e3b4 <dwarf::value::as_reference() const+0x80c>
      shift += 7;
   1dcb4:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1dcb6:	6998                	c.ld	a4,16(a1)
   1dcb8:	fce7efe3          	bltu	a5,a4,1dc96 <dwarf::value::as_reference() const+0xee>
    underflow();
   1dcbc:	1228                	c.addi4spn	a0,sp,296
   1dcbe:	e7bfc0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   1dcc2:	a935                	c.j	1e0fe <dwarf::value::as_reference() const+0x556>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dcc4:	77b2                	c.ldsp	a5,296(sp)
   1dcc6:	6b98                	c.ld	a4,16(a5)
   1dcc8:	77f2                	c.ldsp	a5,312(sp)
   1dcca:	00e7e563          	bltu	a5,a4,1dcd4 <dwarf::value::as_reference() const+0x12c>
      underflow();
   1dcce:	1228                	c.addi4spn	a0,sp,296
   1dcd0:	e69fc0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1dcd4:	77f2                	c.ldsp	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   1dcd6:	7732                	c.ldsp	a4,296(sp)
   1dcd8:	4f58                	c.lw	a4,28(a4)
   1dcda:	6c070963          	beq	a4,zero,1e3ac <dwarf::value::as_reference() const+0x804>
        val = (val << 8) | (uint64_t)p[i];
   1dcde:	0007c483          	lbu	s1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1dce2:	a5f9                	c.j	1e3b0 <dwarf::value::as_reference() const+0x808>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dce4:	77b2                	c.ldsp	a5,296(sp)
   1dce6:	6b98                	c.ld	a4,16(a5)
   1dce8:	77f2                	c.ldsp	a5,312(sp)
   1dcea:	40f70633          	sub	a2,a4,a5
   1dcee:	4685                	c.li	a3,1
   1dcf0:	00c6f463          	bgeu	a3,a2,1dcf8 <dwarf::value::as_reference() const+0x150>
   1dcf4:	00e7e563          	bltu	a5,a4,1dcfe <dwarf::value::as_reference() const+0x156>
      underflow();
   1dcf8:	1228                	c.addi4spn	a0,sp,296
   1dcfa:	e3ffc0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1dcfe:	77f2                	c.ldsp	a5,312(sp)
    if (sec->ord == byte_order::lsb) {
   1dd00:	7732                	c.ldsp	a4,296(sp)
   1dd02:	4f58                	c.lw	a4,28(a4)
   1dd04:	eb11                	c.bnez	a4,1dd18 <dwarf::value::as_reference() const+0x170>
        val |= ((uint64_t)p[i]) << (i * 8);
   1dd06:	0017c483          	lbu	s1,1(a5)
   1dd0a:	04a2                	c.slli	s1,0x8
   1dd0c:	0007c703          	lbu	a4,0(a5)
   1dd10:	8cd9                	c.or	s1,a4
    pos += sizeof(T);
   1dd12:	0789                	c.addi	a5,2
   1dd14:	fe3e                	c.sdsp	a5,312(sp)
    break;
   1dd16:	ad79                	c.j	1e3b4 <dwarf::value::as_reference() const+0x80c>
        val = (val << 8) | (uint64_t)p[i];
   1dd18:	0007c483          	lbu	s1,0(a5)
   1dd1c:	04a2                	c.slli	s1,0x8
   1dd1e:	0017c703          	lbu	a4,1(a5)
   1dd22:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1dd24:	b7fd                	c.j	1dd12 <dwarf::value::as_reference() const+0x16a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dd26:	77b2                	c.ldsp	a5,296(sp)
   1dd28:	6b98                	c.ld	a4,16(a5)
   1dd2a:	77f2                	c.ldsp	a5,312(sp)
   1dd2c:	40f70633          	sub	a2,a4,a5
   1dd30:	468d                	c.li	a3,3
   1dd32:	00c6f463          	bgeu	a3,a2,1dd3a <dwarf::value::as_reference() const+0x192>
   1dd36:	00e7e563          	bltu	a5,a4,1dd40 <dwarf::value::as_reference() const+0x198>
      underflow();
   1dd3a:	1228                	c.addi4spn	a0,sp,296
   1dd3c:	dfdfc0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1dd40:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1dd42:	77b2                	c.ldsp	a5,296(sp)
   1dd44:	4fdc                	c.lw	a5,28(a5)
   1dd46:	e39d                	c.bnez	a5,1dd6c <dwarf::value::as_reference() const+0x1c4>
   1dd48:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1dd4a:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1dd4c:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1dd50:	0006c703          	lbu	a4,0(a3)
   1dd54:	00f71733          	sll	a4,a4,a5
   1dd58:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1dd5a:	0685                	c.addi	a3,1
   1dd5c:	27a1                	c.addiw	a5,8
   1dd5e:	feb799e3          	bne	a5,a1,1dd50 <dwarf::value::as_reference() const+0x1a8>
    pos += sizeof(T);
   1dd62:	0611                	c.addi	a2,4
   1dd64:	fe32                	c.sdsp	a2,312(sp)
   1dd66:	1482                	c.slli	s1,0x20
   1dd68:	9081                	c.srli	s1,0x20
    break;
   1dd6a:	a5a9                	c.j	1e3b4 <dwarf::value::as_reference() const+0x80c>
   1dd6c:	87b2                	c.mv	a5,a2
   1dd6e:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   1dd72:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1dd74:	04a2                	c.slli	s1,0x8
   1dd76:	0007c703          	lbu	a4,0(a5)
   1dd7a:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1dd7c:	0785                	c.addi	a5,1
   1dd7e:	fef69be3          	bne	a3,a5,1dd74 <dwarf::value::as_reference() const+0x1cc>
   1dd82:	b7c5                	c.j	1dd62 <dwarf::value::as_reference() const+0x1ba>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1dd84:	77b2                	c.ldsp	a5,296(sp)
   1dd86:	6b98                	c.ld	a4,16(a5)
   1dd88:	77f2                	c.ldsp	a5,312(sp)
   1dd8a:	40f70633          	sub	a2,a4,a5
   1dd8e:	469d                	c.li	a3,7
   1dd90:	00c6f463          	bgeu	a3,a2,1dd98 <dwarf::value::as_reference() const+0x1f0>
   1dd94:	00e7e563          	bltu	a5,a4,1dd9e <dwarf::value::as_reference() const+0x1f6>
      underflow();
   1dd98:	1228                	c.addi4spn	a0,sp,296
   1dd9a:	d9ffc0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1dd9e:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1dda0:	77b2                	c.ldsp	a5,296(sp)
   1dda2:	4fdc                	c.lw	a5,28(a5)
   1dda4:	e38d                	c.bnez	a5,1ddc6 <dwarf::value::as_reference() const+0x21e>
   1dda6:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1dda8:	4481                	c.li	s1,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1ddaa:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1ddae:	0006c703          	lbu	a4,0(a3)
   1ddb2:	00f71733          	sll	a4,a4,a5
   1ddb6:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1ddb8:	0685                	c.addi	a3,1
   1ddba:	27a1                	c.addiw	a5,8
   1ddbc:	feb799e3          	bne	a5,a1,1ddae <dwarf::value::as_reference() const+0x206>
    pos += sizeof(T);
   1ddc0:	0621                	c.addi	a2,8
   1ddc2:	fe32                	c.sdsp	a2,312(sp)
   1ddc4:	abc5                	c.j	1e3b4 <dwarf::value::as_reference() const+0x80c>
   1ddc6:	87b2                	c.mv	a5,a2
   1ddc8:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1ddcc:	4481                	c.li	s1,0
        val = (val << 8) | (uint64_t)p[i];
   1ddce:	04a2                	c.slli	s1,0x8
   1ddd0:	0007c703          	lbu	a4,0(a5)
   1ddd4:	8cd9                	c.or	s1,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1ddd6:	0785                	c.addi	a5,1
   1ddd8:	fef69be3          	bne	a3,a5,1ddce <dwarf::value::as_reference() const+0x226>
   1dddc:	b7d5                	c.j	1ddc0 <dwarf::value::as_reference() const+0x218>
    off = cur.offset();
   1ddde:	1228                	c.addi4spn	a0,sp,296
   1dde0:	a7efd0ef          	jal	ra,1b05e <dwarf::cursor::offset()>
   1dde4:	89aa                	c.mv	s3,a0
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   1dde6:	00093503          	ld	a0,0(s2)
   1ddea:	9bef90ef          	jal	ra,16fa8 <dwarf::unit::get_dwarf() const>
   1ddee:	8caf90ef          	jal	ra,16eb8 <dwarf::dwarf::compilation_units() const>
      : _M_current(__i) { }
   1ddf2:	6104                	c.ld	s1,0(a0)
   1ddf4:	00853a83          	ld	s5,8(a0)
   1ddf8:	029a8563          	beq	s5,s1,1de22 <dwarf::value::as_reference() const+0x27a>
    const compilation_unit *base_cu = nullptr;
   1ddfc:	4901                	c.li	s2,0
   1ddfe:	a031                	c.j	1de0a <dwarf::value::as_reference() const+0x262>
      if (file_cu.get_section_offset() > off)
   1de00:	00a9ec63          	bltu	s3,a0,1de18 <dwarf::value::as_reference() const+0x270>
    for (auto &file_cu : cu->get_dwarf().compilation_units()) {
   1de04:	04e1                	c.addi	s1,24
   1de06:	009a8863          	beq	s5,s1,1de16 <dwarf::value::as_reference() const+0x26e>
   1de0a:	8a4a                	c.mv	s4,s2
   1de0c:	8926                	c.mv	s2,s1
      if (file_cu.get_section_offset() > off)
   1de0e:	8526                	c.mv	a0,s1
   1de10:	99cf90ef          	jal	ra,16fac <dwarf::unit::get_section_offset() const>
   1de14:	b7f5                	c.j	1de00 <dwarf::value::as_reference() const+0x258>
   1de16:	8a4a                	c.mv	s4,s2
    die d(base_cu);
   1de18:	85d2                	c.mv	a1,s4
   1de1a:	00a8                	c.addi4spn	a0,sp,72
   1de1c:	b52fd0ef          	jal	ra,1b16e <dwarf::die::die(dwarf::unit const*)>
   1de20:	a019                	c.j	1de26 <dwarf::value::as_reference() const+0x27e>
    const compilation_unit *base_cu = nullptr;
   1de22:	4a01                	c.li	s4,0
   1de24:	bfd5                	c.j	1de18 <dwarf::value::as_reference() const+0x270>
    d.read(off - base_cu->get_section_offset());
   1de26:	8552                	c.mv	a0,s4
   1de28:	984f90ef          	jal	ra,16fac <dwarf::unit::get_section_offset() const>
   1de2c:	40a985b3          	sub	a1,s3,a0
   1de30:	00a8                	c.addi4spn	a0,sp,72
   1de32:	b70fd0ef          	jal	ra,1b1a2 <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   1de36:	47a6                	c.lwsp	a5,72(sp)
   1de38:	c01c                	c.sw	a5,0(s0)
   1de3a:	67c6                	c.ldsp	a5,80(sp)
   1de3c:	e41c                	c.sd	a5,8(s0)
   1de3e:	67e6                	c.ldsp	a5,88(sp)
   1de40:	e81c                	c.sd	a5,16(s0)
   1de42:	7786                	c.ldsp	a5,96(sp)
   1de44:	ec1c                	c.sd	a5,24(s0)
   1de46:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1de4a:	05443823          	sd	s4,80(s0)
   1de4e:	05443c23          	sd	s4,88(s0)
   1de52:	05040793          	addi	a5,s0,80
   1de56:	f03c                	c.sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   1de58:	676a                	c.ldsp	a4,152(sp)
   1de5a:	10b4                	c.addi4spn	a3,sp,104
   1de5c:	04d70063          	beq	a4,a3,1de9c <dwarf::value::as_reference() const+0x2f4>
      base = o.base;
   1de60:	e838                	c.sd	a4,80(s0)
      end = o.end;
   1de62:	778a                	c.ldsp	a5,160(sp)
   1de64:	ec3c                	c.sd	a5,88(s0)
      cap = o.cap;
   1de66:	77aa                	c.ldsp	a5,168(sp)
   1de68:	f03c                	c.sd	a5,96(s0)
      o.base = (T *)o.buf;
   1de6a:	10bc                	c.addi4spn	a5,sp,104
   1de6c:	ed3e                	c.sdsp	a5,152(sp)
      o.end = o.base;
   1de6e:	f13e                	c.sdsp	a5,160(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   1de70:	093c                	c.addi4spn	a5,sp,152
   1de72:	f53e                	c.sdsp	a5,168(sp)
   1de74:	77ca                	c.ldsp	a5,176(sp)
   1de76:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1de78:	656a                	c.ldsp	a0,152(sp)
   1de7a:	778a                	c.ldsp	a5,160(sp)
   1de7c:	00f57763          	bgeu	a0,a5,1de8a <dwarf::value::as_reference() const+0x2e2>
   1de80:	87aa                	c.mv	a5,a0
   1de82:	07a1                	c.addi	a5,8
   1de84:	770a                	c.ldsp	a4,160(sp)
   1de86:	fee7eee3          	bltu	a5,a4,1de82 <dwarf::value::as_reference() const+0x2da>
    end = base;
   1de8a:	f12a                	c.sdsp	a0,160(sp)
    if ((char *)base != buf)
   1de8c:	10bc                	c.addi4spn	a5,sp,104
   1de8e:	2cf50f63          	beq	a0,a5,1e16c <dwarf::value::as_reference() const+0x5c4>
      delete[] (char *)base;
   1de92:	2c050d63          	beq	a0,zero,1e16c <dwarf::value::as_reference() const+0x5c4>
   1de96:	f2af80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1de9a:	acc9                	c.j	1e16c <dwarf::value::as_reference() const+0x5c4>
  size_type size() const { return end - base; }
   1de9c:	798a                	c.ldsp	s3,160(sp)
   1de9e:	40d989b3          	sub	s3,s3,a3
   1dea2:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1dea6:	414787b3          	sub	a5,a5,s4
   1deaa:	0537fc63          	bgeu	a5,s3,1df02 <dwarf::value::as_reference() const+0x35a>
   1deae:	878d                	c.srai	a5,0x3
   1deb0:	e391                	c.bnez	a5,1deb4 <dwarf::value::as_reference() const+0x30c>
   1deb2:	4785                	c.li	a5,1
    while (target < n)
   1deb4:	0127f563          	bgeu	a5,s2,1debe <dwarf::value::as_reference() const+0x316>
      target <<= 1;
   1deb8:	0786                	c.slli	a5,0x1
    while (target < n)
   1deba:	ff27efe3          	bltu	a5,s2,1deb8 <dwarf::value::as_reference() const+0x310>
    char *newbuf = new char[sizeof(T[target])];
   1debe:	00379493          	slli	s1,a5,0x3
   1dec2:	8526                	c.mv	a0,s1
   1dec4:	c6cf80ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1dec8:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   1deca:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1decc:	6c38                	c.ld	a4,88(s0)
   1dece:	06e57663          	bgeu	a0,a4,1df3a <dwarf::value::as_reference() const+0x392>
    T *src = base, *dest = (T *)newbuf;
   1ded2:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1ded4:	07a1                	c.addi	a5,8
   1ded6:	fee7efe3          	bltu	a5,a4,1ded4 <dwarf::value::as_reference() const+0x32c>
   1deda:	fff70a93          	addi	s5,a4,-1
   1dede:	40aa8ab3          	sub	s5,s5,a0
   1dee2:	ff8afa93          	andi	s5,s5,-8
   1dee6:	0aa1                	c.addi	s5,8
   1dee8:	9ada                	c.add	s5,s6
    if ((char *)base != buf)
   1deea:	00aa0563          	beq	s4,a0,1def4 <dwarf::value::as_reference() const+0x34c>
      delete[] (char *)base;
   1deee:	c119                	c.beqz	a0,1def4 <dwarf::value::as_reference() const+0x34c>
   1def0:	ed0f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1def4:	05643823          	sd	s6,80(s0)
    end = dest;
   1def8:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1defc:	9b26                	c.add	s6,s1
   1defe:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   1df02:	00090e63          	beq	s2,zero,1df1e <dwarf::value::as_reference() const+0x376>
   1df06:	4781                	c.li	a5,0
   1df08:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1df0c:	676a                	c.ldsp	a4,152(sp)
   1df0e:	9736                	c.add	a4,a3
   1df10:	6310                	c.ld	a2,0(a4)
   1df12:	6838                	c.ld	a4,80(s0)
   1df14:	9736                	c.add	a4,a3
   1df16:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1df18:	0785                	c.addi	a5,1
   1df1a:	fef917e3          	bne	s2,a5,1df08 <dwarf::value::as_reference() const+0x360>
    end = base + osize;
   1df1e:	683c                	c.ld	a5,80(s0)
   1df20:	97ce                	c.add	a5,s3
   1df22:	ec3c                	c.sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   1df24:	66ea                	c.ldsp	a3,152(sp)
   1df26:	778a                	c.ldsp	a5,160(sp)
   1df28:	00f6f763          	bgeu	a3,a5,1df36 <dwarf::value::as_reference() const+0x38e>
   1df2c:	87b6                	c.mv	a5,a3
   1df2e:	07a1                	c.addi	a5,8
   1df30:	770a                	c.ldsp	a4,160(sp)
   1df32:	fee7eee3          	bltu	a5,a4,1df2e <dwarf::value::as_reference() const+0x386>
    end = base;
   1df36:	f136                	c.sdsp	a3,160(sp)
  }
   1df38:	bf35                	c.j	1de74 <dwarf::value::as_reference() const+0x2cc>
    T *src = base, *dest = (T *)newbuf;
   1df3a:	8ada                	c.mv	s5,s6
   1df3c:	b77d                	c.j	1deea <dwarf::value::as_reference() const+0x342>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1df3e:	77b2                	c.ldsp	a5,296(sp)
   1df40:	6b98                	c.ld	a4,16(a5)
   1df42:	77f2                	c.ldsp	a5,312(sp)
   1df44:	40f70633          	sub	a2,a4,a5
   1df48:	469d                	c.li	a3,7
   1df4a:	00c6f463          	bgeu	a3,a2,1df52 <dwarf::value::as_reference() const+0x3aa>
   1df4e:	00e7e563          	bltu	a5,a4,1df58 <dwarf::value::as_reference() const+0x3b0>
      underflow();
   1df52:	1228                	c.addi4spn	a0,sp,296
   1df54:	be5fc0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1df58:	7672                	c.ldsp	a2,312(sp)
    if (sec->ord == byte_order::lsb) {
   1df5a:	77b2                	c.ldsp	a5,296(sp)
   1df5c:	4fdc                	c.lw	a5,28(a5)
   1df5e:	e795                	c.bnez	a5,1df8a <dwarf::value::as_reference() const+0x3e2>
   1df60:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   1df62:	4a81                	c.li	s5,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1df64:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1df68:	0006c703          	lbu	a4,0(a3)
   1df6c:	00f71733          	sll	a4,a4,a5
   1df70:	00eaeab3          	or	s5,s5,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   1df74:	0685                	c.addi	a3,1
   1df76:	27a1                	c.addiw	a5,8
   1df78:	feb798e3          	bne	a5,a1,1df68 <dwarf::value::as_reference() const+0x3c0>
    pos += sizeof(T);
   1df7c:	0621                	c.addi	a2,8
   1df7e:	fe32                	c.sdsp	a2,312(sp)
      return cu->get_dwarf().get_type_unit(sig).type();
   1df80:	00093503          	ld	a0,0(s2)
   1df84:	824f90ef          	jal	ra,16fa8 <dwarf::unit::get_dwarf() const>
   1df88:	a831                	c.j	1dfa4 <dwarf::value::as_reference() const+0x3fc>
   1df8a:	87b2                	c.mv	a5,a2
   1df8c:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   1df90:	4a81                	c.li	s5,0
        val = (val << 8) | (uint64_t)p[i];
   1df92:	0aa2                	c.slli	s5,0x8
   1df94:	0007c703          	lbu	a4,0(a5)
   1df98:	01576ab3          	or	s5,a4,s5
      for (unsigned i = 0; i < sizeof(T); i++)
   1df9c:	0785                	c.addi	a5,1
   1df9e:	fef69ae3          	bne	a3,a5,1df92 <dwarf::value::as_reference() const+0x3ea>
   1dfa2:	bfe9                	c.j	1df7c <dwarf::value::as_reference() const+0x3d4>
   1dfa4:	85d6                	c.mv	a1,s5
   1dfa6:	85bfa0ef          	jal	ra,18800 <dwarf::dwarf::get_type_unit(unsigned long) const>
   1dfaa:	cccfb0ef          	jal	ra,19476 <dwarf::type_unit::type() const>
   1dfae:	84aa                	c.mv	s1,a0
  die(const die &o) = default;
   1dfb0:	411c                	c.lw	a5,0(a0)
   1dfb2:	c01c                	c.sw	a5,0(s0)
   1dfb4:	651c                	c.ld	a5,8(a0)
   1dfb6:	e41c                	c.sd	a5,8(s0)
   1dfb8:	691c                	c.ld	a5,16(a0)
   1dfba:	e81c                	c.sd	a5,16(s0)
   1dfbc:	6d1c                	c.ld	a5,24(a0)
   1dfbe:	ec1c                	c.sd	a5,24(s0)
   1dfc0:	02040b13          	addi	s6,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1dfc4:	05643823          	sd	s6,80(s0)
   1dfc8:	05643c23          	sd	s6,88(s0)
   1dfcc:	05040793          	addi	a5,s0,80
   1dfd0:	f03c                	c.sd	a5,96(s0)
  size_type size() const { return end - base; }
   1dfd2:	05853983          	ld	s3,88(a0)
   1dfd6:	6938                	c.ld	a4,80(a0)
   1dfd8:	40e989b3          	sub	s3,s3,a4
   1dfdc:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1dfe0:	416787b3          	sub	a5,a5,s6
   1dfe4:	0537fc63          	bgeu	a5,s3,1e03c <dwarf::value::as_reference() const+0x494>
   1dfe8:	878d                	c.srai	a5,0x3
   1dfea:	e391                	c.bnez	a5,1dfee <dwarf::value::as_reference() const+0x446>
   1dfec:	4785                	c.li	a5,1
    while (target < n)
   1dfee:	0127f563          	bgeu	a5,s2,1dff8 <dwarf::value::as_reference() const+0x450>
      target <<= 1;
   1dff2:	0786                	c.slli	a5,0x1
    while (target < n)
   1dff4:	ff27efe3          	bltu	a5,s2,1dff2 <dwarf::value::as_reference() const+0x44a>
    char *newbuf = new char[sizeof(T[target])];
   1dff8:	00379a13          	slli	s4,a5,0x3
   1dffc:	8552                	c.mv	a0,s4
   1dffe:	b32f80ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1e002:	8baa                	c.mv	s7,a0
    T *src = base, *dest = (T *)newbuf;
   1e004:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1e006:	6c38                	c.ld	a4,88(s0)
   1e008:	04e57e63          	bgeu	a0,a4,1e064 <dwarf::value::as_reference() const+0x4bc>
    T *src = base, *dest = (T *)newbuf;
   1e00c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1e00e:	07a1                	c.addi	a5,8
   1e010:	fee7efe3          	bltu	a5,a4,1e00e <dwarf::value::as_reference() const+0x466>
   1e014:	fff70a93          	addi	s5,a4,-1
   1e018:	40aa8ab3          	sub	s5,s5,a0
   1e01c:	ff8afa93          	andi	s5,s5,-8
   1e020:	0aa1                	c.addi	s5,8
   1e022:	9ade                	c.add	s5,s7
    if ((char *)base != buf)
   1e024:	00ab0563          	beq	s6,a0,1e02e <dwarf::value::as_reference() const+0x486>
      delete[] (char *)base;
   1e028:	c119                	c.beqz	a0,1e02e <dwarf::value::as_reference() const+0x486>
   1e02a:	d96f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e02e:	05743823          	sd	s7,80(s0)
    end = dest;
   1e032:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1e036:	9bd2                	c.add	s7,s4
   1e038:	07743023          	sd	s7,96(s0)
    for (size_type i = 0; i < osize; i++)
   1e03c:	00090e63          	beq	s2,zero,1e058 <dwarf::value::as_reference() const+0x4b0>
   1e040:	4781                	c.li	a5,0
   1e042:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1e046:	68b8                	c.ld	a4,80(s1)
   1e048:	9736                	c.add	a4,a3
   1e04a:	6310                	c.ld	a2,0(a4)
   1e04c:	6838                	c.ld	a4,80(s0)
   1e04e:	9736                	c.add	a4,a3
   1e050:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1e052:	0785                	c.addi	a5,1
   1e054:	fef917e3          	bne	s2,a5,1e042 <dwarf::value::as_reference() const+0x49a>
    end = base + osize;
   1e058:	683c                	c.ld	a5,80(s0)
   1e05a:	97ce                	c.add	a5,s3
   1e05c:	ec3c                	c.sd	a5,88(s0)
   1e05e:	74bc                	c.ld	a5,104(s1)
   1e060:	f43c                	c.sd	a5,104(s0)
   1e062:	a229                	c.j	1e16c <dwarf::value::as_reference() const+0x5c4>
    T *src = base, *dest = (T *)newbuf;
   1e064:	8ade                	c.mv	s5,s7
   1e066:	bf7d                	c.j	1e024 <dwarf::value::as_reference() const+0x47c>
                              " as reference");
   1e068:	4541                	c.li	a0,16
   1e06a:	bb6f80ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1e06e:	84aa                	c.mv	s1,a0
    throw value_type_mismatch("cannot read " + to_string(typ) +
   1e070:	00c92583          	lw	a1,12(s2)
   1e074:	0028                	c.addi4spn	a0,sp,8
   1e076:	388090ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1e07a:	0000f617          	auipc	a2,0xf
   1e07e:	5e660613          	addi	a2,a2,1510 # 2d660 <std::piecewise_construct+0x1c8>
   1e082:	4581                	c.li	a1,0
   1e084:	0028                	c.addi4spn	a0,sp,8
   1e086:	b0af80ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e08a:	85aa                	c.mv	a1,a0
   1e08c:	1020                	c.addi4spn	s0,sp,40
   1e08e:	8522                	c.mv	a0,s0
   1e090:	be0f80ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1e094:	0000f597          	auipc	a1,0xf
   1e098:	65c58593          	addi	a1,a1,1628 # 2d6f0 <std::piecewise_construct+0x258>
   1e09c:	8522                	c.mv	a0,s0
   1e09e:	f02f80ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1e0a2:	85aa                	c.mv	a1,a0
   1e0a4:	00a0                	c.addi4spn	s0,sp,72
   1e0a6:	8522                	c.mv	a0,s0
   1e0a8:	bc8f80ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::logic_error(what_arg) {}
   1e0ac:	85a2                	c.mv	a1,s0
   1e0ae:	8526                	c.mv	a0,s1
   1e0b0:	f40f80ef          	jal	ra,167f0 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e0b4:	0001b797          	auipc	a5,0x1b
   1e0b8:	3947b783          	ld	a5,916(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1e0bc:	07c1                	c.addi	a5,16
   1e0be:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1e0c0:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e0c2:	08bc                	c.addi4spn	a5,sp,88
   1e0c4:	00f50463          	beq	a0,a5,1e0cc <dwarf::value::as_reference() const+0x524>
   1e0c8:	c48f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e0cc:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e0ce:	183c                	c.addi4spn	a5,sp,56
   1e0d0:	00f50463          	beq	a0,a5,1e0d8 <dwarf::value::as_reference() const+0x530>
   1e0d4:	c3cf80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e0d8:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1e0da:	083c                	c.addi4spn	a5,sp,24
   1e0dc:	00f50463          	beq	a0,a5,1e0e4 <dwarf::value::as_reference() const+0x53c>
   1e0e0:	c30f80ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as reference");
   1e0e4:	0001b617          	auipc	a2,0x1b
   1e0e8:	4f463603          	ld	a2,1268(a2) # 395d8 <dwarf::value_type_mismatch::~value_type_mismatch()@@Base+0x1a622>
   1e0ec:	0001b597          	auipc	a1,0x1b
   1e0f0:	4ac5b583          	ld	a1,1196(a1) # 39598 <typeinfo for dwarf::value_type_mismatch@@Base+0xb78>
   1e0f4:	8526                	c.mv	a0,s1
   1e0f6:	dcaf80ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   1e0fa:	842a                	c.mv	s0,a0
   1e0fc:	a24d                	c.j	1e29e <dwarf::value::as_reference() const+0x6f6>
    return 0;
   1e0fe:	4481                	c.li	s1,0
   1e100:	ac55                	c.j	1e3b4 <dwarf::value::as_reference() const+0x80c>
  d.read(off);
   1e102:	85a6                	c.mv	a1,s1
   1e104:	1928                	c.addi4spn	a0,sp,184
   1e106:	89cfd0ef          	jal	ra,1b1a2 <dwarf::die::read(unsigned long)>
  die(die &&o) = default;
   1e10a:	57ea                	c.lwsp	a5,184(sp)
   1e10c:	c01c                	c.sw	a5,0(s0)
   1e10e:	678e                	c.ldsp	a5,192(sp)
   1e110:	e41c                	c.sd	a5,8(s0)
   1e112:	67ae                	c.ldsp	a5,200(sp)
   1e114:	e81c                	c.sd	a5,16(s0)
   1e116:	67ce                	c.ldsp	a5,208(sp)
   1e118:	ec1c                	c.sd	a5,24(s0)
   1e11a:	02040a13          	addi	s4,s0,32
      : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {
   1e11e:	05443823          	sd	s4,80(s0)
   1e122:	05443c23          	sd	s4,88(s0)
   1e126:	05040793          	addi	a5,s0,80
   1e12a:	f03c                	c.sd	a5,96(s0)
    if ((char *)o.base == o.buf) {
   1e12c:	6732                	c.ldsp	a4,264(sp)
   1e12e:	09b4                	c.addi4spn	a3,sp,216
   1e130:	06d70a63          	beq	a4,a3,1e1a4 <dwarf::value::as_reference() const+0x5fc>
      base = o.base;
   1e134:	e838                	c.sd	a4,80(s0)
      end = o.end;
   1e136:	67d2                	c.ldsp	a5,272(sp)
   1e138:	ec3c                	c.sd	a5,88(s0)
      cap = o.cap;
   1e13a:	67f2                	c.ldsp	a5,280(sp)
   1e13c:	f03c                	c.sd	a5,96(s0)
      o.base = (T *)o.buf;
   1e13e:	09bc                	c.addi4spn	a5,sp,216
   1e140:	e63e                	c.sdsp	a5,264(sp)
      o.end = o.base;
   1e142:	ea3e                	c.sdsp	a5,272(sp)
      o.cap = (T *)&o.buf[sizeof(T[Min])];
   1e144:	023c                	c.addi4spn	a5,sp,264
   1e146:	ee3e                	c.sdsp	a5,280(sp)
   1e148:	7792                	c.ldsp	a5,288(sp)
   1e14a:	f43c                	c.sd	a5,104(s0)
    for (T *p = base; p < end; ++p)
   1e14c:	6532                	c.ldsp	a0,264(sp)
   1e14e:	67d2                	c.ldsp	a5,272(sp)
   1e150:	00f57763          	bgeu	a0,a5,1e15e <dwarf::value::as_reference() const+0x5b6>
   1e154:	87aa                	c.mv	a5,a0
   1e156:	07a1                	c.addi	a5,8
   1e158:	6752                	c.ldsp	a4,272(sp)
   1e15a:	fee7eee3          	bltu	a5,a4,1e156 <dwarf::value::as_reference() const+0x5ae>
    end = base;
   1e15e:	ea2a                	c.sdsp	a0,272(sp)
    if ((char *)base != buf)
   1e160:	09bc                	c.addi4spn	a5,sp,216
   1e162:	00f50563          	beq	a0,a5,1e16c <dwarf::value::as_reference() const+0x5c4>
      delete[] (char *)base;
   1e166:	c119                	c.beqz	a0,1e16c <dwarf::value::as_reference() const+0x5c4>
   1e168:	c58f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1e16c:	74d2                	c.ldsp	s1,304(sp)
   1e16e:	cc99                	c.beqz	s1,1e18c <dwarf::value::as_reference() const+0x5e4>
    if (__is_single_threaded())
   1e170:	0001b797          	auipc	a5,0x1b
   1e174:	3107b783          	ld	a5,784(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e178:	0007c783          	lbu	a5,0(a5)
   1e17c:	c7e9                	c.beqz	a5,1e246 <dwarf::value::as_reference() const+0x69e>
    _Atomic_word __result = *__mem;
   1e17e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1e180:	fff5079b          	addiw	a5,a0,-1
   1e184:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1e186:	4785                	c.li	a5,1
   1e188:	0cf50563          	beq	a0,a5,1e252 <dwarf::value::as_reference() const+0x6aa>
}
   1e18c:	8522                	c.mv	a0,s0
   1e18e:	60ba                	c.ldsp	ra,392(sp)
   1e190:	641a                	c.ldsp	s0,384(sp)
   1e192:	74f6                	c.ldsp	s1,376(sp)
   1e194:	7956                	c.ldsp	s2,368(sp)
   1e196:	79b6                	c.ldsp	s3,360(sp)
   1e198:	7a16                	c.ldsp	s4,352(sp)
   1e19a:	6af6                	c.ldsp	s5,344(sp)
   1e19c:	6b56                	c.ldsp	s6,336(sp)
   1e19e:	6bb6                	c.ldsp	s7,328(sp)
   1e1a0:	6159                	c.addi16sp	sp,400
   1e1a2:	8082                	c.jr	ra
  size_type size() const { return end - base; }
   1e1a4:	69d2                	c.ldsp	s3,272(sp)
   1e1a6:	40d989b3          	sub	s3,s3,a3
   1e1aa:	4039d913          	srai	s2,s3,0x3
    if (n <= (size_type)(cap - base))
   1e1ae:	414787b3          	sub	a5,a5,s4
   1e1b2:	0537fc63          	bgeu	a5,s3,1e20a <dwarf::value::as_reference() const+0x662>
   1e1b6:	878d                	c.srai	a5,0x3
   1e1b8:	e391                	c.bnez	a5,1e1bc <dwarf::value::as_reference() const+0x614>
   1e1ba:	4785                	c.li	a5,1
    while (target < n)
   1e1bc:	0127f563          	bgeu	a5,s2,1e1c6 <dwarf::value::as_reference() const+0x61e>
      target <<= 1;
   1e1c0:	0786                	c.slli	a5,0x1
    while (target < n)
   1e1c2:	ff27efe3          	bltu	a5,s2,1e1c0 <dwarf::value::as_reference() const+0x618>
    char *newbuf = new char[sizeof(T[target])];
   1e1c6:	00379493          	slli	s1,a5,0x3
   1e1ca:	8526                	c.mv	a0,s1
   1e1cc:	964f80ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1e1d0:	8b2a                	c.mv	s6,a0
    T *src = base, *dest = (T *)newbuf;
   1e1d2:	6828                	c.ld	a0,80(s0)
    for (; src < end; src++, dest++) {
   1e1d4:	6c38                	c.ld	a4,88(s0)
   1e1d6:	06e57663          	bgeu	a0,a4,1e242 <dwarf::value::as_reference() const+0x69a>
    T *src = base, *dest = (T *)newbuf;
   1e1da:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1e1dc:	07a1                	c.addi	a5,8
   1e1de:	fee7efe3          	bltu	a5,a4,1e1dc <dwarf::value::as_reference() const+0x634>
   1e1e2:	fff70a93          	addi	s5,a4,-1
   1e1e6:	40aa8ab3          	sub	s5,s5,a0
   1e1ea:	ff8afa93          	andi	s5,s5,-8
   1e1ee:	0aa1                	c.addi	s5,8
   1e1f0:	9ada                	c.add	s5,s6
    if ((char *)base != buf)
   1e1f2:	00aa0563          	beq	s4,a0,1e1fc <dwarf::value::as_reference() const+0x654>
      delete[] (char *)base;
   1e1f6:	c119                	c.beqz	a0,1e1fc <dwarf::value::as_reference() const+0x654>
   1e1f8:	bc8f80ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1e1fc:	05643823          	sd	s6,80(s0)
    end = dest;
   1e200:	05543c23          	sd	s5,88(s0)
    cap = base + target;
   1e204:	9b26                	c.add	s6,s1
   1e206:	07643023          	sd	s6,96(s0)
    for (size_type i = 0; i < osize; i++)
   1e20a:	00090e63          	beq	s2,zero,1e226 <dwarf::value::as_reference() const+0x67e>
   1e20e:	4781                	c.li	a5,0
   1e210:	00379693          	slli	a3,a5,0x3
      new (&base[i]) T(o[i]);
   1e214:	6732                	c.ldsp	a4,264(sp)
   1e216:	9736                	c.add	a4,a3
   1e218:	6310                	c.ld	a2,0(a4)
   1e21a:	6838                	c.ld	a4,80(s0)
   1e21c:	9736                	c.add	a4,a3
   1e21e:	e310                	c.sd	a2,0(a4)
    for (size_type i = 0; i < osize; i++)
   1e220:	0785                	c.addi	a5,1
   1e222:	fef917e3          	bne	s2,a5,1e210 <dwarf::value::as_reference() const+0x668>
    end = base + osize;
   1e226:	683c                	c.ld	a5,80(s0)
   1e228:	97ce                	c.add	a5,s3
   1e22a:	ec3c                	c.sd	a5,88(s0)
    for (T *p = base; p < end; ++p)
   1e22c:	66b2                	c.ldsp	a3,264(sp)
   1e22e:	67d2                	c.ldsp	a5,272(sp)
   1e230:	00f6f763          	bgeu	a3,a5,1e23e <dwarf::value::as_reference() const+0x696>
   1e234:	87b6                	c.mv	a5,a3
   1e236:	07a1                	c.addi	a5,8
   1e238:	6752                	c.ldsp	a4,272(sp)
   1e23a:	fee7eee3          	bltu	a5,a4,1e236 <dwarf::value::as_reference() const+0x68e>
    end = base;
   1e23e:	ea36                	c.sdsp	a3,272(sp)
  }
   1e240:	b721                	c.j	1e148 <dwarf::value::as_reference() const+0x5a0>
    T *src = base, *dest = (T *)newbuf;
   1e242:	8ada                	c.mv	s5,s6
   1e244:	b77d                	c.j	1e1f2 <dwarf::value::as_reference() const+0x64a>
      return __exchange_and_add(__mem, __val);
   1e246:	55fd                	c.li	a1,-1
   1e248:	03048513          	addi	a0,s1,48
   1e24c:	934f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e250:	bf1d                	c.j	1e186 <dwarf::value::as_reference() const+0x5de>
	_M_dispose();
   1e252:	609c                	c.ld	a5,0(s1)
   1e254:	6b9c                	c.ld	a5,16(a5)
   1e256:	8526                	c.mv	a0,s1
   1e258:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1e25a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1e25e:	0001b797          	auipc	a5,0x1b
   1e262:	2227b783          	ld	a5,546(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1e266:	0007c783          	lbu	a5,0(a5)
   1e26a:	cf89                	c.beqz	a5,1e284 <dwarf::value::as_reference() const+0x6dc>
    _Atomic_word __result = *__mem;
   1e26c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   1e26e:	fff5079b          	addiw	a5,a0,-1
   1e272:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1e274:	4785                	c.li	a5,1
   1e276:	f0f51be3          	bne	a0,a5,1e18c <dwarf::value::as_reference() const+0x5e4>
	    _M_destroy();
   1e27a:	609c                	c.ld	a5,0(s1)
   1e27c:	6f9c                	c.ld	a5,24(a5)
   1e27e:	8526                	c.mv	a0,s1
   1e280:	9782                	c.jalr	a5
   1e282:	b729                	c.j	1e18c <dwarf::value::as_reference() const+0x5e4>
      return __exchange_and_add(__mem, __val);
   1e284:	55fd                	c.li	a1,-1
   1e286:	03448513          	addi	a0,s1,52
   1e28a:	8f6f80ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1e28e:	b7dd                	c.j	1e274 <dwarf::value::as_reference() const+0x6cc>
class die {
   1e290:	842a                	c.mv	s0,a0
   1e292:	10a8                	c.addi4spn	a0,sp,104
   1e294:	0001b317          	auipc	t1,0x1b
   1e298:	15433303          	ld	t1,340(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1e29c:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   1e29e:	7552                	c.ldsp	a0,304(sp)
   1e2a0:	c511                	c.beqz	a0,1e2ac <dwarf::value::as_reference() const+0x704>
	  _M_pi->_M_release();
   1e2a2:	0001b317          	auipc	t1,0x1b
   1e2a6:	12633303          	ld	t1,294(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   1e2aa:	9302                	c.jalr	t1
   1e2ac:	8522                	c.mv	a0,s0
   1e2ae:	c42f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    } catch (std::out_of_range &e) {
   1e2b2:	4785                	c.li	a5,1
   1e2b4:	842a                	c.mv	s0,a0
   1e2b6:	fef594e3          	bne	a1,a5,1e29e <dwarf::value::as_reference() const+0x6f6>
   1e2ba:	946f80ef          	jal	ra,16400 <__cxa_begin_catch@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1e2be:	4541                	c.li	a0,16
   1e2c0:	960f80ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1e2c4:	84aa                	c.mv	s1,a0
   1e2c6:	85d6                	c.mv	a1,s5
   1e2c8:	1028                	c.addi4spn	a0,sp,40
   1e2ca:	0001b317          	auipc	t1,0x1b
   1e2ce:	02e33303          	ld	t1,46(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1e2d2:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   1e2d4:	0000f617          	auipc	a2,0xf
   1e2d8:	42c60613          	addi	a2,a2,1068 # 2d700 <std::piecewise_construct+0x268>
   1e2dc:	4581                	c.li	a1,0
   1e2de:	1028                	c.addi4spn	a0,sp,40
   1e2e0:	8b0f80ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1e2e4:	85aa                	c.mv	a1,a0
   1e2e6:	00a0                	c.addi4spn	s0,sp,72
   1e2e8:	8522                	c.mv	a0,s0
   1e2ea:	986f80ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1e2ee:	85a2                	c.mv	a1,s0
   1e2f0:	8526                	c.mv	a0,s1
   1e2f2:	aaef80ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1e2f6:	0001b797          	auipc	a5,0x1b
   1e2fa:	2627b783          	ld	a5,610(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   1e2fe:	07c1                	c.addi	a5,16
   1e300:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1e302:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e304:	08bc                	c.addi4spn	a5,sp,88
   1e306:	00f50463          	beq	a0,a5,1e30e <dwarf::value::as_reference() const+0x766>
   1e30a:	a06f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e30e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e310:	183c                	c.addi4spn	a5,sp,56
   1e312:	00f50463          	beq	a0,a5,1e31a <dwarf::value::as_reference() const+0x772>
   1e316:	9faf80ef          	jal	ra,16510 <operator delete(void*)@plt>
   1e31a:	0001b617          	auipc	a2,0x1b
   1e31e:	06663603          	ld	a2,102(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   1e322:	0001b597          	auipc	a1,0x1b
   1e326:	f8e5b583          	ld	a1,-114(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1e32a:	8526                	c.mv	a0,s1
   1e32c:	b94f80ef          	jal	ra,166c0 <__cxa_throw@plt>
    }
   1e330:	842a                	c.mv	s0,a0
   1e332:	a00d                	c.j	1e354 <dwarf::value::as_reference() const+0x7ac>
      { return _M_dataplus._M_p; }
   1e334:	842a                	c.mv	s0,a0
   1e336:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e338:	08bc                	c.addi4spn	a5,sp,88
   1e33a:	00f50463          	beq	a0,a5,1e342 <dwarf::value::as_reference() const+0x79a>
   1e33e:	9d2f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e342:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e344:	183c                	c.addi4spn	a5,sp,56
   1e346:	00f50463          	beq	a0,a5,1e34e <dwarf::value::as_reference() const+0x7a6>
   1e34a:	9c6f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1e34e:	8526                	c.mv	a0,s1
   1e350:	980f80ef          	jal	ra,164d0 <__cxa_free_exception@plt>
    }
   1e354:	b3cf80ef          	jal	ra,16690 <__cxa_end_catch@plt>
   1e358:	b799                	c.j	1e29e <dwarf::value::as_reference() const+0x6f6>
      { return _M_dataplus._M_p; }
   1e35a:	842a                	c.mv	s0,a0
   1e35c:	b7dd                	c.j	1e342 <dwarf::value::as_reference() const+0x79a>
      throw format_error("unknown type signature 0x" + to_hex(sig));
   1e35e:	842a                	c.mv	s0,a0
   1e360:	b7fd                	c.j	1e34e <dwarf::value::as_reference() const+0x7a6>
   1e362:	842a                	c.mv	s0,a0
   1e364:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   1e366:	08bc                	c.addi4spn	a5,sp,88
   1e368:	00f50463          	beq	a0,a5,1e370 <dwarf::value::as_reference() const+0x7c8>
   1e36c:	9a4f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e370:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   1e372:	183c                	c.addi4spn	a5,sp,56
   1e374:	00f50463          	beq	a0,a5,1e37c <dwarf::value::as_reference() const+0x7d4>
   1e378:	998f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e37c:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   1e37e:	083c                	c.addi4spn	a5,sp,24
   1e380:	00f50463          	beq	a0,a5,1e388 <dwarf::value::as_reference() const+0x7e0>
   1e384:	98cf80ef          	jal	ra,16510 <operator delete(void*)@plt>
                              " as reference");
   1e388:	8526                	c.mv	a0,s1
   1e38a:	946f80ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1e38e:	bf01                	c.j	1e29e <dwarf::value::as_reference() const+0x6f6>
      { return _M_dataplus._M_p; }
   1e390:	842a                	c.mv	s0,a0
   1e392:	bff9                	c.j	1e370 <dwarf::value::as_reference() const+0x7c8>
   1e394:	842a                	c.mv	s0,a0
   1e396:	b7dd                	c.j	1e37c <dwarf::value::as_reference() const+0x7d4>
   1e398:	842a                	c.mv	s0,a0
   1e39a:	b7fd                	c.j	1e388 <dwarf::value::as_reference() const+0x7e0>
class die {
   1e39c:	842a                	c.mv	s0,a0
   1e39e:	09a8                	c.addi4spn	a0,sp,216
   1e3a0:	0001b317          	auipc	t1,0x1b
   1e3a4:	04833303          	ld	t1,72(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1e3a8:	9302                	c.jalr	t1
   1e3aa:	bdd5                	c.j	1e29e <dwarf::value::as_reference() const+0x6f6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1e3ac:	0007c483          	lbu	s1,0(a5)
    pos += sizeof(T);
   1e3b0:	0785                	c.addi	a5,1
   1e3b2:	fe3e                	c.sdsp	a5,312(sp)
  die d(cu);
   1e3b4:	00093583          	ld	a1,0(s2)
   1e3b8:	1928                	c.addi4spn	a0,sp,184
   1e3ba:	db5fc0ef          	jal	ra,1b16e <dwarf::die::die(dwarf::unit const*)>
   1e3be:	b391                	c.j	1e102 <dwarf::value::as_reference() const+0x55a>
  cursor cur(cu->data(), offset);
   1e3c0:	01093703          	ld	a4,16(s2)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1e3c4:	f64e                	c.sdsp	s3,296(sp)
      : _M_pi(__r._M_pi)
   1e3c6:	fa02                	c.sdsp	zero,304(sp)
      : sec(sec), pos(sec->begin + offset) {}
   1e3c8:	0089b783          	ld	a5,8(s3)
   1e3cc:	97ba                	c.add	a5,a4
   1e3ce:	fe3e                	c.sdsp	a5,312(sp)
  switch (form) {
   1e3d0:	00892783          	lw	a5,8(s2)
   1e3d4:	37c1                	c.addiw	a5,-16
   1e3d6:	0007869b          	addiw	a3,a5,0
   1e3da:	4741                	c.li	a4,16
   1e3dc:	c8d766e3          	bltu	a4,a3,1e068 <dwarf::value::as_reference() const+0x4c0>
   1e3e0:	02079713          	slli	a4,a5,0x20
   1e3e4:	01e75793          	srli	a5,a4,0x1e
   1e3e8:	0000f717          	auipc	a4,0xf
   1e3ec:	50870713          	addi	a4,a4,1288 # 2d8f0 <std::piecewise_construct+0x458>
   1e3f0:	97ba                	c.add	a5,a4
   1e3f2:	439c                	c.lw	a5,0(a5)
   1e3f4:	97ba                	c.add	a5,a4
   1e3f6:	8782                	c.jr	a5

000000000001e3f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)>:

string to_string(const value &v) {
   1e3f8:	7169                	c.addi16sp	sp,-304
   1e3fa:	f606                	c.sdsp	ra,296(sp)
   1e3fc:	f222                	c.sdsp	s0,288(sp)
   1e3fe:	ee26                	c.sdsp	s1,280(sp)
   1e400:	ea4a                	c.sdsp	s2,272(sp)
   1e402:	e64e                	c.sdsp	s3,264(sp)
   1e404:	e252                	c.sdsp	s4,256(sp)
   1e406:	fdd6                	c.sdsp	s5,248(sp)
   1e408:	f9da                	c.sdsp	s6,240(sp)
   1e40a:	f5de                	c.sdsp	s7,232(sp)
   1e40c:	f1e2                	c.sdsp	s8,224(sp)
   1e40e:	ede6                	c.sdsp	s9,216(sp)
   1e410:	e9ea                	c.sdsp	s10,208(sp)
   1e412:	e5ee                	c.sdsp	s11,200(sp)
   1e414:	842a                	c.mv	s0,a0
   1e416:	852e                	c.mv	a0,a1
  type get_type() const { return typ; }
   1e418:	45cc                	c.lw	a1,12(a1)
  switch (v.get_type()) {
   1e41a:	4735                	c.li	a4,13
   1e41c:	26b760e3          	bltu	a4,a1,1ee7c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa84>
   1e420:	00259793          	slli	a5,a1,0x2
   1e424:	0000f717          	auipc	a4,0xf
   1e428:	51070713          	addi	a4,a4,1296 # 2d934 <std::piecewise_construct+0x49c>
   1e42c:	97ba                	c.add	a5,a4
   1e42e:	439c                	c.lw	a5,0(a5)
   1e430:	97ba                	c.add	a5,a4
   1e432:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e434:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e438:	e01c                	c.sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   1e43a:	4681                	c.li	a3,0
   1e43c:	0000f617          	auipc	a2,0xf
   1e440:	30860613          	addi	a2,a2,776 # 2d744 <std::piecewise_construct+0x2ac>
   1e444:	0000f597          	auipc	a1,0xf
   1e448:	2ec58593          	addi	a1,a1,748 # 2d730 <std::piecewise_construct+0x298>
   1e44c:	8522                	c.mv	a0,s0
   1e44e:	0001b317          	auipc	t1,0x1b
   1e452:	eba33303          	ld	t1,-326(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   1e456:	9302                	c.jalr	t1
  }
  case value::type::string:
    return v.as_string();
  }
  return "<unexpected value type " + to_string(v.get_type()) + ">";
}
   1e458:	8522                	c.mv	a0,s0
   1e45a:	70b2                	c.ldsp	ra,296(sp)
   1e45c:	7412                	c.ldsp	s0,288(sp)
   1e45e:	64f2                	c.ldsp	s1,280(sp)
   1e460:	6952                	c.ldsp	s2,272(sp)
   1e462:	69b2                	c.ldsp	s3,264(sp)
   1e464:	6a12                	c.ldsp	s4,256(sp)
   1e466:	7aee                	c.ldsp	s5,248(sp)
   1e468:	7b4e                	c.ldsp	s6,240(sp)
   1e46a:	7bae                	c.ldsp	s7,232(sp)
   1e46c:	7c0e                	c.ldsp	s8,224(sp)
   1e46e:	6cee                	c.ldsp	s9,216(sp)
   1e470:	6d4e                	c.ldsp	s10,208(sp)
   1e472:	6dae                	c.ldsp	s11,200(sp)
   1e474:	6155                	c.addi16sp	sp,304
   1e476:	8082                	c.jr	ra
    return "0x" + to_hex(v.as_address());
   1e478:	80bfd0ef          	jal	ra,1bc82 <dwarf::value::as_address() const>
   1e47c:	85aa                	c.mv	a1,a0
   1e47e:	0884                	c.addi4spn	s1,sp,80
   1e480:	8526                	c.mv	a0,s1
   1e482:	0001b317          	auipc	t1,0x1b
   1e486:	e7633303          	ld	t1,-394(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1e48a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1e48c:	4709                	c.li	a4,2
   1e48e:	00010697          	auipc	a3,0x10
   1e492:	20a68693          	addi	a3,a3,522 # 2e698 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   1e496:	4601                	c.li	a2,0
   1e498:	4581                	c.li	a1,0
   1e49a:	8526                	c.mv	a0,s1
   1e49c:	9c4f80ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e4a0:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e4a2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e4a6:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e4a8:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e4aa:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1e4ae:	03278463          	beq	a5,s2,1e4d6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xde>
      { _M_dataplus._M_p = __p; }
   1e4b2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1e4b4:	689c                	c.ld	a5,16(s1)
   1e4b6:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1e4b8:	649c                	c.ld	a5,8(s1)
   1e4ba:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1e4bc:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e4c0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e4c4:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1e4c8:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e4ca:	109c                	c.addi4spn	a5,sp,96
   1e4cc:	f8f506e3          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1e4d0:	840f80ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1e4d4:	b751                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e4d6:	6490                	c.ld	a2,8(s1)
   1e4d8:	0605                	c.addi	a2,1
	if (__n == 0)
   1e4da:	de79                	c.beqz	a2,1e4b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e4dc:	85ca                	c.mv	a1,s2
   1e4de:	8d2f80ef          	jal	ra,165b0 <memcpy@plt>
   1e4e2:	bfd9                	c.j	1e4b8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xc0>
    const char *b = (const char *)v.as_block(&size);
   1e4e4:	080c                	c.addi4spn	a1,sp,16
   1e4e6:	9f7fd0ef          	jal	ra,1bedc <dwarf::value::as_block(unsigned long*) const>
   1e4ea:	8a2a                	c.mv	s4,a0
    string res = ::to_string(size) + " byte block:";
   1e4ec:	64c2                	c.ldsp	s1,16(sp)
  to_string(unsigned long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
    string __str(__detail::__to_chars_len(__val), '\0');
   1e4ee:	45a9                	c.li	a1,10
   1e4f0:	8526                	c.mv	a0,s1
   1e4f2:	0001b317          	auipc	t1,0x1b
   1e4f6:	03633303          	ld	t1,54(t1) # 39528 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a240>
   1e4fa:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   1e4fc:	109c                	c.addi4spn	a5,sp,96
   1e4fe:	e8be                	c.sdsp	a5,80(sp)
      { _M_construct(__n, __c); }
   1e500:	4601                	c.li	a2,0
   1e502:	02051593          	slli	a1,a0,0x20
   1e506:	9181                	c.srli	a1,0x20
   1e508:	0888                	c.addi4spn	a0,sp,80
   1e50a:	866f80ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   1e50e:	8626                	c.mv	a2,s1
   1e510:	45e6                	c.lwsp	a1,88(sp)
   1e512:	6546                	c.ldsp	a0,80(sp)
   1e514:	0001b317          	auipc	t1,0x1b
   1e518:	edc33303          	ld	t1,-292(t1) # 393f0 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1a0a8>
   1e51c:	9302                	c.jalr	t1
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e51e:	57fd                	c.li	a5,-1
   1e520:	8389                	c.srli	a5,0x2
   1e522:	6766                	c.ldsp	a4,88(sp)
   1e524:	8f99                	c.sub	a5,a4
   1e526:	472d                	c.li	a4,11
   1e528:	00f77b63          	bgeu	a4,a5,1e53e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x146>
	return _M_append(__s, __n);
   1e52c:	4631                	c.li	a2,12
   1e52e:	0000f597          	auipc	a1,0xf
   1e532:	23258593          	addi	a1,a1,562 # 2d760 <std::piecewise_construct+0x2c8>
   1e536:	0888                	c.addi4spn	a0,sp,80
   1e538:	e89f70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1e53c:	a00d                	c.j	1e55e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x166>
	  __throw_length_error(__N(__s));
   1e53e:	0000f517          	auipc	a0,0xf
   1e542:	20a50513          	addi	a0,a0,522 # 2d748 <std::piecewise_construct+0x2b0>
   1e546:	efbf70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1e54a:	842a                	c.mv	s0,a0
   1e54c:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e54e:	109c                	c.addi4spn	a5,sp,96
   1e550:	00f50463          	beq	a0,a5,1e558 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x160>
   1e554:	fbdf70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e558:	8522                	c.mv	a0,s0
   1e55a:	996f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1e55e:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e560:	009c                	c.addi4spn	a5,sp,64
   1e562:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1e564:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e566:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1e56a:	05278663          	beq	a5,s2,1e5b6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1be>
      { _M_dataplus._M_p = __p; }
   1e56e:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1e570:	691c                	c.ld	a5,16(a0)
   1e572:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1e574:	649c                	c.ld	a5,8(s1)
   1e576:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1e578:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e57c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e580:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1e584:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e586:	109c                	c.addi4spn	a5,sp,96
   1e588:	00f50463          	beq	a0,a5,1e590 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x198>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e58c:	f85f70ef          	jal	ra,16510 <operator delete(void*)@plt>
    for (size_t pos = 0; pos < size; ++pos) {
   1e590:	67c2                	c.ldsp	a5,16(sp)
   1e592:	14078363          	beq	a5,zero,1e6d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2e0>
   1e596:	4481                	c.li	s1,0
	return _M_is_local() ? size_type(_S_local_capacity)
   1e598:	04010b13          	addi	s6,sp,64
   1e59c:	4cbd                	c.li	s9,15
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   1e59e:	03010993          	addi	s3,sp,48
	: allocator_type(__a), _M_p(__dat) { }
   1e5a2:	05010b93          	addi	s7,sp,80
   1e5a6:	06010913          	addi	s2,sp,96
    pos--;
   1e5aa:	00810c13          	addi	s8,sp,8
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e5ae:	5afd                	c.li	s5,-1
   1e5b0:	002ada93          	srli	s5,s5,0x2
   1e5b4:	a04d                	c.j	1e656 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x25e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e5b6:	6510                	c.ld	a2,8(a0)
   1e5b8:	0605                	c.addi	a2,1
	if (__n == 0)
   1e5ba:	de4d                	c.beqz	a2,1e574 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x17c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e5bc:	85ca                	c.mv	a1,s2
   1e5be:	0088                	c.addi4spn	a0,sp,64
   1e5c0:	ff1f70ef          	jal	ra,165b0 <memcpy@plt>
   1e5c4:	bf45                	c.j	1e574 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x17c>
	return _M_is_local() ? size_type(_S_local_capacity)
   1e5c6:	87e6                	c.mv	a5,s9
   1e5c8:	a871                	c.j	1e664 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x26c>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   1e5ca:	4705                	c.li	a4,1
   1e5cc:	4681                	c.li	a3,0
   1e5ce:	4601                	c.li	a2,0
   1e5d0:	85ee                	c.mv	a1,s11
   1e5d2:	854e                	c.mv	a0,s3
   1e5d4:	95cf80ef          	jal	ra,16730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e5d8:	a841                	c.j	1e668 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x270>
	: allocator_type(__a), _M_p(__dat) { }
   1e5da:	e8ca                	c.sdsp	s2,80(sp)
	_M_construct(__s, __end, forward_iterator_tag());
   1e5dc:	4681                	c.li	a3,0
   1e5de:	00011617          	auipc	a2,0x11
   1e5e2:	ad360613          	addi	a2,a2,-1325 # 2f0b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   1e5e6:	00011597          	auipc	a1,0x11
   1e5ea:	aca58593          	addi	a1,a1,-1334 # 2f0b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   1e5ee:	855e                	c.mv	a0,s7
   1e5f0:	0001b317          	auipc	t1,0x1b
   1e5f4:	d1833303          	ld	t1,-744(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   1e5f8:	9302                	c.jalr	t1
   1e5fa:	a021                	c.j	1e602 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x20a>
  *pos-- = '\0';
   1e5fc:	00910d13          	addi	s10,sp,9
   1e600:	a86d                	c.j	1e6ba <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2c2>
      { return _M_dataplus._M_p; }
   1e602:	65c6                	c.ldsp	a1,80(sp)
      { return _M_string_length; }
   1e604:	6666                	c.ldsp	a2,88(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e606:	77e2                	c.ldsp	a5,56(sp)
   1e608:	40fa87b3          	sub	a5,s5,a5
   1e60c:	00c7e663          	bltu	a5,a2,1e618 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x220>
	return _M_append(__s, __n);
   1e610:	854e                	c.mv	a0,s3
   1e612:	daff70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1e616:	a03d                	c.j	1e644 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x24c>
	  __throw_length_error(__N(__s));
   1e618:	0000f517          	auipc	a0,0xf
   1e61c:	13050513          	addi	a0,a0,304 # 2d748 <std::piecewise_construct+0x2b0>
   1e620:	e21f70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1e624:	842a                	c.mv	s0,a0
   1e626:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e628:	109c                	c.addi4spn	a5,sp,96
   1e62a:	00f50463          	beq	a0,a5,1e632 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x23a>
   1e62e:	ee3f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e632:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1e634:	009c                	c.addi4spn	a5,sp,64
   1e636:	00f50463          	beq	a0,a5,1e63e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x246>
   1e63a:	ed7f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e63e:	8522                	c.mv	a0,s0
   1e640:	8b0f80ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1e644:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e646:	01250463          	beq	a0,s2,1e64e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x256>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e64a:	ec7f70ef          	jal	ra,16510 <operator delete(void*)@plt>
   1e64e:	0485                	c.addi	s1,1
   1e650:	67c2                	c.ldsp	a5,16(sp)
   1e652:	08f4f363          	bgeu	s1,a5,1e6d8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2e0>
      { return _M_string_length; }
   1e656:	7de2                	c.ldsp	s11,56(sp)
	if (__size + 1 > this->capacity())
   1e658:	001d8d13          	addi	s10,s11,1
	return _M_is_local() ? size_type(_S_local_capacity)
   1e65c:	77c2                	c.ldsp	a5,48(sp)
   1e65e:	f76784e3          	beq	a5,s6,1e5c6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1ce>
   1e662:	6786                	c.ldsp	a5,64(sp)
	if (__size + 1 > this->capacity())
   1e664:	f7a7e3e3          	bltu	a5,s10,1e5ca <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1d2>
	__c1 = __c2;
   1e668:	75c2                	c.ldsp	a1,48(sp)
   1e66a:	95ee                	c.add	a1,s11
   1e66c:	02000793          	addi	a5,zero,32
   1e670:	00f58023          	sb	a5,0(a1)
      { _M_string_length = __length; }
   1e674:	fc6a                	c.sdsp	s10,56(sp)
   1e676:	77c2                	c.ldsp	a5,48(sp)
   1e678:	97ea                	c.add	a5,s10
   1e67a:	00078023          	sb	zero,0(a5)
      res += to_hex(b[pos]);
   1e67e:	009a07b3          	add	a5,s4,s1
   1e682:	0007c783          	lbu	a5,0(a5)
  if (v == 0)
   1e686:	dbb1                	c.beqz	a5,1e5da <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x1e2>
  *pos-- = '\0';
   1e688:	00010523          	sb	zero,10(sp)
  while (v && pos >= buf) {
   1e68c:	00f7f713          	andi	a4,a5,15
    if (digit < 10)
   1e690:	4625                	c.li	a2,9
      *pos = '0' + digit;
   1e692:	03070693          	addi	a3,a4,48
    if (digit < 10)
   1e696:	00e67463          	bgeu	a2,a4,1e69e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2a6>
      *pos = 'a' + (digit - 10);
   1e69a:	05770693          	addi	a3,a4,87
   1e69e:	00d104a3          	sb	a3,9(sp)
    v >>= 4;
   1e6a2:	8391                	c.srli	a5,0x4
  while (v && pos >= buf) {
   1e6a4:	dfa1                	c.beqz	a5,1e5fc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x204>
    if (digit < 10)
   1e6a6:	46a5                	c.li	a3,9
      *pos = 'a' + (digit - 10);
   1e6a8:	05778713          	addi	a4,a5,87
    if (digit < 10)
   1e6ac:	00f6e463          	bltu	a3,a5,1e6b4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2bc>
      *pos = '0' + digit;
   1e6b0:	03078713          	addi	a4,a5,48
   1e6b4:	00e10423          	sb	a4,8(sp)
    pos--;
   1e6b8:	8d62                	c.mv	s10,s8
	: allocator_type(__a), _M_p(__dat) { }
   1e6ba:	e8ca                	c.sdsp	s2,80(sp)
	return __builtin_strlen(__s);
   1e6bc:	856a                	c.mv	a0,s10
   1e6be:	d53f70ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1e6c2:	4681                	c.li	a3,0
   1e6c4:	00ad0633          	add	a2,s10,a0
   1e6c8:	85ea                	c.mv	a1,s10
   1e6ca:	855e                	c.mv	a0,s7
   1e6cc:	0001b317          	auipc	t1,0x1b
   1e6d0:	c3c33303          	ld	t1,-964(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   1e6d4:	9302                	c.jalr	t1
      }
   1e6d6:	b735                	c.j	1e602 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x20a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e6d8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e6dc:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e6de:	77c2                	c.ldsp	a5,48(sp)
	if (__str._M_is_local())
   1e6e0:	0098                	c.addi4spn	a4,sp,64
   1e6e2:	00e78863          	beq	a5,a4,1e6f2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2fa>
      { _M_dataplus._M_p = __p; }
   1e6e6:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1e6e8:	6786                	c.ldsp	a5,64(sp)
   1e6ea:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1e6ec:	77e2                	c.ldsp	a5,56(sp)
   1e6ee:	e41c                	c.sd	a5,8(s0)
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e6f0:	b3a5                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e6f2:	7662                	c.ldsp	a2,56(sp)
   1e6f4:	0605                	c.addi	a2,1
	if (__n == 0)
   1e6f6:	da7d                	c.beqz	a2,1e6ec <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2f4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e6f8:	85ba                	c.mv	a1,a4
   1e6fa:	eb7f70ef          	jal	ra,165b0 <memcpy@plt>
   1e6fe:	b7fd                	c.j	1e6ec <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x2f4>
    return "0x" + to_hex(v.as_uconstant());
   1e700:	b83fd0ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   1e704:	85aa                	c.mv	a1,a0
   1e706:	0884                	c.addi4spn	s1,sp,80
   1e708:	8526                	c.mv	a0,s1
   1e70a:	0001b317          	auipc	t1,0x1b
   1e70e:	bee33303          	ld	t1,-1042(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1e712:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1e714:	4709                	c.li	a4,2
   1e716:	00010697          	auipc	a3,0x10
   1e71a:	f8268693          	addi	a3,a3,-126 # 2e698 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d0>
   1e71e:	4601                	c.li	a2,0
   1e720:	4581                	c.li	a1,0
   1e722:	8526                	c.mv	a0,s1
   1e724:	f3df70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e728:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e72a:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e72e:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e730:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e732:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1e736:	03278463          	beq	a5,s2,1e75e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x366>
      { _M_dataplus._M_p = __p; }
   1e73a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1e73c:	689c                	c.ld	a5,16(s1)
   1e73e:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1e740:	649c                	c.ld	a5,8(s1)
   1e742:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1e744:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e748:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e74c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1e750:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e752:	109c                	c.addi4spn	a5,sp,96
   1e754:	d0f502e3          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e758:	db9f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1e75c:	b9f5                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e75e:	6490                	c.ld	a2,8(s1)
   1e760:	0605                	c.addi	a2,1
	if (__n == 0)
   1e762:	de79                	c.beqz	a2,1e740 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x348>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e764:	85ca                	c.mv	a1,s2
   1e766:	e4bf70ef          	jal	ra,165b0 <memcpy@plt>
   1e76a:	bfd9                	c.j	1e740 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x348>
    return ::to_string(v.as_uconstant());
   1e76c:	b17fd0ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   1e770:	84aa                	c.mv	s1,a0
    string __str(__detail::__to_chars_len(__val), '\0');
   1e772:	45a9                	c.li	a1,10
   1e774:	0001b317          	auipc	t1,0x1b
   1e778:	db433303          	ld	t1,-588(t1) # 39528 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a240>
   1e77c:	9302                	c.jalr	t1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e77e:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e782:	e01c                	c.sd	a5,0(s0)
      { _M_construct(__n, __c); }
   1e784:	4601                	c.li	a2,0
   1e786:	02051593          	slli	a1,a0,0x20
   1e78a:	9181                	c.srli	a1,0x20
   1e78c:	8522                	c.mv	a0,s0
   1e78e:	de3f70ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   1e792:	8626                	c.mv	a2,s1
   1e794:	440c                	c.lw	a1,8(s0)
   1e796:	6008                	c.ld	a0,0(s0)
   1e798:	0001b317          	auipc	t1,0x1b
   1e79c:	c5833303          	ld	t1,-936(t1) # 393f0 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1a0a8>
   1e7a0:	9302                	c.jalr	t1
    return __str;
   1e7a2:	b95d                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return ::to_string(v.as_sconstant());
   1e7a4:	ea3fd0ef          	jal	ra,1c646 <dwarf::value::as_sconstant() const>
    const bool __neg = __val < 0;
   1e7a8:	03f55913          	srli	s2,a0,0x3f
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
   1e7ac:	43f55793          	srai	a5,a0,0x3f
   1e7b0:	00a7c4b3          	xor	s1,a5,a0
   1e7b4:	8c9d                	c.sub	s1,a5
    const auto __len = __detail::__to_chars_len(__uval);
   1e7b6:	45a9                	c.li	a1,10
   1e7b8:	8526                	c.mv	a0,s1
   1e7ba:	0001b317          	auipc	t1,0x1b
   1e7be:	d6e33303          	ld	t1,-658(t1) # 39528 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)@@Base+0x1a240>
   1e7c2:	9302                	c.jalr	t1
   1e7c4:	0005099b          	addiw	s3,a0,0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e7c8:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e7cc:	e01c                	c.sd	a5,0(s0)
    string __str(__neg + __len, '-');
   1e7ce:	00a905bb          	addw	a1,s2,a0
      { _M_construct(__n, __c); }
   1e7d2:	02d00613          	addi	a2,zero,45
   1e7d6:	1582                	c.slli	a1,0x20
   1e7d8:	9181                	c.srli	a1,0x20
   1e7da:	8522                	c.mv	a0,s0
   1e7dc:	d95f70ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
	return _M_data()[__pos];
   1e7e0:	6008                	c.ld	a0,0(s0)
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   1e7e2:	8626                	c.mv	a2,s1
   1e7e4:	85ce                	c.mv	a1,s3
   1e7e6:	954a                	c.add	a0,s2
   1e7e8:	0001b317          	auipc	t1,0x1b
   1e7ec:	c0833303          	ld	t1,-1016(t1) # 393f0 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)@@Base+0x1a0a8>
   1e7f0:	9302                	c.jalr	t1
    return __str;
   1e7f2:	b19d                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e7f4:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e7f8:	e01c                	c.sd	a5,0(s0)
	_M_construct(__s, __end, forward_iterator_tag());
   1e7fa:	4681                	c.li	a3,0
   1e7fc:	0000f617          	auipc	a2,0xf
   1e800:	f7d60613          	addi	a2,a2,-131 # 2d779 <std::piecewise_construct+0x2e1>
   1e804:	0000f597          	auipc	a1,0xf
   1e808:	f6c58593          	addi	a1,a1,-148 # 2d770 <std::piecewise_construct+0x2d8>
   1e80c:	8522                	c.mv	a0,s0
   1e80e:	0001b317          	auipc	t1,0x1b
   1e812:	afa33303          	ld	t1,-1286(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   1e816:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e818:	b181                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return v.as_flag() ? "true" : "false";
   1e81a:	d64fe0ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   1e81e:	0000f497          	auipc	s1,0xf
   1e822:	f0a48493          	addi	s1,s1,-246 # 2d728 <std::piecewise_construct+0x290>
   1e826:	c509                	c.beqz	a0,1e830 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x438>
   1e828:	0000f497          	auipc	s1,0xf
   1e82c:	ef848493          	addi	s1,s1,-264 # 2d720 <std::piecewise_construct+0x288>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e830:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   1e834:	e01c                	c.sd	a5,0(s0)
	return __builtin_strlen(__s);
   1e836:	8526                	c.mv	a0,s1
   1e838:	bd9f70ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   1e83c:	4681                	c.li	a3,0
   1e83e:	00a48633          	add	a2,s1,a0
   1e842:	85a6                	c.mv	a1,s1
   1e844:	8522                	c.mv	a0,s0
   1e846:	0001b317          	auipc	t1,0x1b
   1e84a:	ac233303          	ld	t1,-1342(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   1e84e:	9302                	c.jalr	t1
   1e850:	b121                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
    return "<line 0x" + to_hex(v.as_sec_offset()) + ">";
   1e852:	b79fe0ef          	jal	ra,1d3ca <dwarf::value::as_sec_offset() const>
   1e856:	85aa                	c.mv	a1,a0
   1e858:	1804                	c.addi4spn	s1,sp,48
   1e85a:	8526                	c.mv	a0,s1
   1e85c:	0001b317          	auipc	t1,0x1b
   1e860:	a9c33303          	ld	t1,-1380(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1e864:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1e866:	4721                	c.li	a4,8
   1e868:	0000f697          	auipc	a3,0xf
   1e86c:	f1868693          	addi	a3,a3,-232 # 2d780 <std::piecewise_construct+0x2e8>
   1e870:	4601                	c.li	a2,0
   1e872:	4581                	c.li	a1,0
   1e874:	8526                	c.mv	a0,s1
   1e876:	debf70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e87a:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e87c:	109c                	c.addi4spn	a5,sp,96
   1e87e:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1e880:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e882:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1e886:	03278b63          	beq	a5,s2,1e8bc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4c4>
      { _M_dataplus._M_p = __p; }
   1e88a:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1e88c:	691c                	c.ld	a5,16(a0)
   1e88e:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1e890:	649c                	c.ld	a5,8(s1)
   1e892:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1e894:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e898:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e89c:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e8a0:	6766                	c.ldsp	a4,88(sp)
   1e8a2:	57fd                	c.li	a5,-1
   1e8a4:	8389                	c.srli	a5,0x2
   1e8a6:	02f70363          	beq	a4,a5,1e8cc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4d4>
	return _M_append(__s, __n);
   1e8aa:	4605                	c.li	a2,1
   1e8ac:	0000f597          	auipc	a1,0xf
   1e8b0:	ecc58593          	addi	a1,a1,-308 # 2d778 <std::piecewise_construct+0x2e0>
   1e8b4:	0888                	c.addi4spn	a0,sp,80
   1e8b6:	b0bf70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1e8ba:	a83d                	c.j	1e8f8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x500>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e8bc:	6510                	c.ld	a2,8(a0)
   1e8be:	0605                	c.addi	a2,1
	if (__n == 0)
   1e8c0:	da61                	c.beqz	a2,1e890 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x498>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e8c2:	85ca                	c.mv	a1,s2
   1e8c4:	1088                	c.addi4spn	a0,sp,96
   1e8c6:	cebf70ef          	jal	ra,165b0 <memcpy@plt>
   1e8ca:	b7d9                	c.j	1e890 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x498>
	  __throw_length_error(__N(__s));
   1e8cc:	0000f517          	auipc	a0,0xf
   1e8d0:	e7c50513          	addi	a0,a0,-388 # 2d748 <std::piecewise_construct+0x2b0>
   1e8d4:	b6df70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1e8d8:	842a                	c.mv	s0,a0
   1e8da:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e8dc:	109c                	c.addi4spn	a5,sp,96
   1e8de:	00f50463          	beq	a0,a5,1e8e6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4ee>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e8e2:	c2ff70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e8e6:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1e8e8:	009c                	c.addi4spn	a5,sp,64
   1e8ea:	00f50463          	beq	a0,a5,1e8f2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4fa>
   1e8ee:	c23f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e8f2:	8522                	c.mv	a0,s0
   1e8f4:	dfdf70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1e8f8:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e8fa:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e8fe:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e900:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e902:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1e906:	03278a63          	beq	a5,s2,1e93a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x542>
      { _M_dataplus._M_p = __p; }
   1e90a:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1e90c:	689c                	c.ld	a5,16(s1)
   1e90e:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1e910:	649c                	c.ld	a5,8(s1)
   1e912:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1e914:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e918:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e91c:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1e920:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e922:	109c                	c.addi4spn	a5,sp,96
   1e924:	00f50463          	beq	a0,a5,1e92c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x534>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e928:	be9f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e92c:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1e92e:	009c                	c.addi4spn	a5,sp,64
   1e930:	b2f504e3          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1e934:	bddf70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1e938:	b605                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e93a:	6490                	c.ld	a2,8(s1)
   1e93c:	0605                	c.addi	a2,1
	if (__n == 0)
   1e93e:	da69                	c.beqz	a2,1e910 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x518>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e940:	85ca                	c.mv	a1,s2
   1e942:	c6ff70ef          	jal	ra,165b0 <memcpy@plt>
   1e946:	b7e9                	c.j	1e910 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x518>
    return "<loclist 0x" + to_hex(v.as_sec_offset()) + ">";
   1e948:	a83fe0ef          	jal	ra,1d3ca <dwarf::value::as_sec_offset() const>
   1e94c:	85aa                	c.mv	a1,a0
   1e94e:	1804                	c.addi4spn	s1,sp,48
   1e950:	8526                	c.mv	a0,s1
   1e952:	0001b317          	auipc	t1,0x1b
   1e956:	9a633303          	ld	t1,-1626(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1e95a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1e95c:	472d                	c.li	a4,11
   1e95e:	0000f697          	auipc	a3,0xf
   1e962:	e3268693          	addi	a3,a3,-462 # 2d790 <std::piecewise_construct+0x2f8>
   1e966:	4601                	c.li	a2,0
   1e968:	4581                	c.li	a1,0
   1e96a:	8526                	c.mv	a0,s1
   1e96c:	cf5f70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1e970:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e972:	109c                	c.addi4spn	a5,sp,96
   1e974:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1e976:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e978:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1e97c:	03278b63          	beq	a5,s2,1e9b2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5ba>
      { _M_dataplus._M_p = __p; }
   1e980:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1e982:	691c                	c.ld	a5,16(a0)
   1e984:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1e986:	649c                	c.ld	a5,8(s1)
   1e988:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1e98a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1e98e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1e992:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1e996:	6766                	c.ldsp	a4,88(sp)
   1e998:	57fd                	c.li	a5,-1
   1e99a:	8389                	c.srli	a5,0x2
   1e99c:	02f70363          	beq	a4,a5,1e9c2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5ca>
	return _M_append(__s, __n);
   1e9a0:	4605                	c.li	a2,1
   1e9a2:	0000f597          	auipc	a1,0xf
   1e9a6:	dd658593          	addi	a1,a1,-554 # 2d778 <std::piecewise_construct+0x2e0>
   1e9aa:	0888                	c.addi4spn	a0,sp,80
   1e9ac:	a15f70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1e9b0:	a83d                	c.j	1e9ee <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5f6>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1e9b2:	6510                	c.ld	a2,8(a0)
   1e9b4:	0605                	c.addi	a2,1
	if (__n == 0)
   1e9b6:	da61                	c.beqz	a2,1e986 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x58e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1e9b8:	85ca                	c.mv	a1,s2
   1e9ba:	1088                	c.addi4spn	a0,sp,96
   1e9bc:	bf5f70ef          	jal	ra,165b0 <memcpy@plt>
   1e9c0:	b7d9                	c.j	1e986 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x58e>
	  __throw_length_error(__N(__s));
   1e9c2:	0000f517          	auipc	a0,0xf
   1e9c6:	d8650513          	addi	a0,a0,-634 # 2d748 <std::piecewise_construct+0x2b0>
   1e9ca:	a77f70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1e9ce:	842a                	c.mv	s0,a0
   1e9d0:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1e9d2:	109c                	c.addi4spn	a5,sp,96
   1e9d4:	00f50463          	beq	a0,a5,1e9dc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5e4>
   1e9d8:	b39f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1e9dc:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1e9de:	009c                	c.addi4spn	a5,sp,64
   1e9e0:	00f50463          	beq	a0,a5,1e9e8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5f0>
   1e9e4:	b2df70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1e9e8:	8522                	c.mv	a0,s0
   1e9ea:	d07f70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1e9ee:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1e9f0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1e9f4:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1e9f6:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1e9f8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1e9fc:	03278a63          	beq	a5,s2,1ea30 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x638>
      { _M_dataplus._M_p = __p; }
   1ea00:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ea02:	689c                	c.ld	a5,16(s1)
   1ea04:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ea06:	649c                	c.ld	a5,8(s1)
   1ea08:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ea0a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ea0e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ea12:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ea16:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ea18:	109c                	c.addi4spn	a5,sp,96
   1ea1a:	00f50463          	beq	a0,a5,1ea22 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x62a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ea1e:	af3f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ea22:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ea24:	009c                	c.addi4spn	a5,sp,64
   1ea26:	a2f509e3          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ea2a:	ae7f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ea2e:	b42d                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ea30:	6490                	c.ld	a2,8(s1)
   1ea32:	0605                	c.addi	a2,1
	if (__n == 0)
   1ea34:	da69                	c.beqz	a2,1ea06 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ea36:	85ca                	c.mv	a1,s2
   1ea38:	b79f70ef          	jal	ra,165b0 <memcpy@plt>
   1ea3c:	b7e9                	c.j	1ea06 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60e>
    return "<mac 0x" + to_hex(v.as_sec_offset()) + ">";
   1ea3e:	98dfe0ef          	jal	ra,1d3ca <dwarf::value::as_sec_offset() const>
   1ea42:	85aa                	c.mv	a1,a0
   1ea44:	1804                	c.addi4spn	s1,sp,48
   1ea46:	8526                	c.mv	a0,s1
   1ea48:	0001b317          	auipc	t1,0x1b
   1ea4c:	8b033303          	ld	t1,-1872(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1ea50:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ea52:	471d                	c.li	a4,7
   1ea54:	0000f697          	auipc	a3,0xf
   1ea58:	d4c68693          	addi	a3,a3,-692 # 2d7a0 <std::piecewise_construct+0x308>
   1ea5c:	4601                	c.li	a2,0
   1ea5e:	4581                	c.li	a1,0
   1ea60:	8526                	c.mv	a0,s1
   1ea62:	bfff70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ea66:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ea68:	109c                	c.addi4spn	a5,sp,96
   1ea6a:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1ea6c:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ea6e:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1ea72:	03278b63          	beq	a5,s2,1eaa8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6b0>
      { _M_dataplus._M_p = __p; }
   1ea76:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1ea78:	691c                	c.ld	a5,16(a0)
   1ea7a:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1ea7c:	649c                	c.ld	a5,8(s1)
   1ea7e:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1ea80:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ea84:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ea88:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1ea8c:	6766                	c.ldsp	a4,88(sp)
   1ea8e:	57fd                	c.li	a5,-1
   1ea90:	8389                	c.srli	a5,0x2
   1ea92:	02f70363          	beq	a4,a5,1eab8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6c0>
	return _M_append(__s, __n);
   1ea96:	4605                	c.li	a2,1
   1ea98:	0000f597          	auipc	a1,0xf
   1ea9c:	ce058593          	addi	a1,a1,-800 # 2d778 <std::piecewise_construct+0x2e0>
   1eaa0:	0888                	c.addi4spn	a0,sp,80
   1eaa2:	91ff70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1eaa6:	a83d                	c.j	1eae4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6ec>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eaa8:	6510                	c.ld	a2,8(a0)
   1eaaa:	0605                	c.addi	a2,1
	if (__n == 0)
   1eaac:	da61                	c.beqz	a2,1ea7c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x684>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eaae:	85ca                	c.mv	a1,s2
   1eab0:	1088                	c.addi4spn	a0,sp,96
   1eab2:	afff70ef          	jal	ra,165b0 <memcpy@plt>
   1eab6:	b7d9                	c.j	1ea7c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x684>
	  __throw_length_error(__N(__s));
   1eab8:	0000f517          	auipc	a0,0xf
   1eabc:	c9050513          	addi	a0,a0,-880 # 2d748 <std::piecewise_construct+0x2b0>
   1eac0:	981f70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1eac4:	842a                	c.mv	s0,a0
   1eac6:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1eac8:	109c                	c.addi4spn	a5,sp,96
   1eaca:	00f50463          	beq	a0,a5,1ead2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6da>
   1eace:	a43f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ead2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ead4:	009c                	c.addi4spn	a5,sp,64
   1ead6:	00f50463          	beq	a0,a5,1eade <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6e6>
   1eada:	a37f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1eade:	8522                	c.mv	a0,s0
   1eae0:	c11f70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1eae4:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1eae6:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1eaea:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1eaec:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1eaee:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1eaf2:	03278a63          	beq	a5,s2,1eb26 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x72e>
      { _M_dataplus._M_p = __p; }
   1eaf6:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1eaf8:	689c                	c.ld	a5,16(s1)
   1eafa:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1eafc:	649c                	c.ld	a5,8(s1)
   1eafe:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1eb00:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eb04:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eb08:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1eb0c:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1eb0e:	109c                	c.addi4spn	a5,sp,96
   1eb10:	00f50463          	beq	a0,a5,1eb18 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x720>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1eb14:	9fdf70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1eb18:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1eb1a:	009c                	c.addi4spn	a5,sp,64
   1eb1c:	92f50ee3          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1eb20:	9f1f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1eb24:	ba15                	c.j	1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eb26:	6490                	c.ld	a2,8(s1)
   1eb28:	0605                	c.addi	a2,1
	if (__n == 0)
   1eb2a:	da69                	c.beqz	a2,1eafc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x704>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eb2c:	85ca                	c.mv	a1,s2
   1eb2e:	a83f70ef          	jal	ra,165b0 <memcpy@plt>
   1eb32:	b7e9                	c.j	1eafc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x704>
    return "<rangelist 0x" + to_hex(v.as_sec_offset()) + ">";
   1eb34:	897fe0ef          	jal	ra,1d3ca <dwarf::value::as_sec_offset() const>
   1eb38:	85aa                	c.mv	a1,a0
   1eb3a:	1804                	c.addi4spn	s1,sp,48
   1eb3c:	8526                	c.mv	a0,s1
   1eb3e:	0001a317          	auipc	t1,0x1a
   1eb42:	7ba33303          	ld	t1,1978(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1eb46:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1eb48:	4735                	c.li	a4,13
   1eb4a:	0000f697          	auipc	a3,0xf
   1eb4e:	c5e68693          	addi	a3,a3,-930 # 2d7a8 <std::piecewise_construct+0x310>
   1eb52:	4601                	c.li	a2,0
   1eb54:	4581                	c.li	a1,0
   1eb56:	8526                	c.mv	a0,s1
   1eb58:	b09f70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1eb5c:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1eb5e:	109c                	c.addi4spn	a5,sp,96
   1eb60:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1eb62:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1eb64:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1eb68:	03278b63          	beq	a5,s2,1eb9e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7a6>
      { _M_dataplus._M_p = __p; }
   1eb6c:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1eb6e:	691c                	c.ld	a5,16(a0)
   1eb70:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1eb72:	649c                	c.ld	a5,8(s1)
   1eb74:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1eb76:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eb7a:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eb7e:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1eb82:	6766                	c.ldsp	a4,88(sp)
   1eb84:	57fd                	c.li	a5,-1
   1eb86:	8389                	c.srli	a5,0x2
   1eb88:	02f70363          	beq	a4,a5,1ebae <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7b6>
	return _M_append(__s, __n);
   1eb8c:	4605                	c.li	a2,1
   1eb8e:	0000f597          	auipc	a1,0xf
   1eb92:	bea58593          	addi	a1,a1,-1046 # 2d778 <std::piecewise_construct+0x2e0>
   1eb96:	0888                	c.addi4spn	a0,sp,80
   1eb98:	829f70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1eb9c:	a83d                	c.j	1ebda <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7e2>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eb9e:	6510                	c.ld	a2,8(a0)
   1eba0:	0605                	c.addi	a2,1
	if (__n == 0)
   1eba2:	da61                	c.beqz	a2,1eb72 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x77a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eba4:	85ca                	c.mv	a1,s2
   1eba6:	1088                	c.addi4spn	a0,sp,96
   1eba8:	a09f70ef          	jal	ra,165b0 <memcpy@plt>
   1ebac:	b7d9                	c.j	1eb72 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x77a>
	  __throw_length_error(__N(__s));
   1ebae:	0000f517          	auipc	a0,0xf
   1ebb2:	b9a50513          	addi	a0,a0,-1126 # 2d748 <std::piecewise_construct+0x2b0>
   1ebb6:	88bf70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1ebba:	842a                	c.mv	s0,a0
   1ebbc:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ebbe:	109c                	c.addi4spn	a5,sp,96
   1ebc0:	00f50463          	beq	a0,a5,1ebc8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7d0>
   1ebc4:	94df70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ebc8:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ebca:	009c                	c.addi4spn	a5,sp,64
   1ebcc:	00f50463          	beq	a0,a5,1ebd4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7dc>
   1ebd0:	941f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1ebd4:	8522                	c.mv	a0,s0
   1ebd6:	b1bf70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1ebda:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ebdc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ebe0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ebe2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ebe4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ebe8:	03278b63          	beq	a5,s2,1ec1e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x826>
      { _M_dataplus._M_p = __p; }
   1ebec:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ebee:	689c                	c.ld	a5,16(s1)
   1ebf0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ebf2:	649c                	c.ld	a5,8(s1)
   1ebf4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ebf6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ebfa:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ebfe:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ec02:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ec04:	109c                	c.addi4spn	a5,sp,96
   1ec06:	00f50463          	beq	a0,a5,1ec0e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x816>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ec0a:	907f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ec0e:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ec10:	009c                	c.addi4spn	a5,sp,64
   1ec12:	84f503e3          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ec16:	8fbf70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ec1a:	83fff06f          	jal	zero,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ec1e:	6490                	c.ld	a2,8(s1)
   1ec20:	0605                	c.addi	a2,1
	if (__n == 0)
   1ec22:	da61                	c.beqz	a2,1ebf2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ec24:	85ca                	c.mv	a1,s2
   1ec26:	98bf70ef          	jal	ra,165b0 <memcpy@plt>
   1ec2a:	b7e1                	c.j	1ebf2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7fa>
    die d = v.as_reference();
   1ec2c:	85aa                	c.mv	a1,a0
   1ec2e:	0884                	c.addi4spn	s1,sp,80
   1ec30:	8526                	c.mv	a0,s1
   1ec32:	f77fe0ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
    auto tu = dynamic_cast<const type_unit *>(&d.get_unit());
   1ec36:	8526                	c.mv	a0,s1
   1ec38:	d4cfc0ef          	jal	ra,1b184 <dwarf::die::get_unit() const>
   1ec3c:	12050063          	beq	a0,zero,1ed5c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x964>
   1ec40:	4681                	c.li	a3,0
   1ec42:	0001b617          	auipc	a2,0x1b
   1ec46:	96663603          	ld	a2,-1690(a2) # 395a8 <typeinfo for dwarf::type_unit@@Base+0xcd8>
   1ec4a:	0001a597          	auipc	a1,0x1a
   1ec4e:	6565b583          	ld	a1,1622(a1) # 392a0 <typeinfo for dwarf::unit@@Base+0xc2f0>
   1ec52:	90ff70ef          	jal	ra,16560 <__dynamic_cast@plt>
    if (tu)
   1ec56:	10050363          	beq	a0,zero,1ed5c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x964>
      return "<.debug_types+0x" + to_hex(d.get_section_offset()) + ">";
   1ec5a:	8526                	c.mv	a0,s1
   1ec5c:	d2cfc0ef          	jal	ra,1b188 <dwarf::die::get_section_offset() const>
   1ec60:	85aa                	c.mv	a1,a0
   1ec62:	0808                	c.addi4spn	a0,sp,16
   1ec64:	0001a317          	auipc	t1,0x1a
   1ec68:	69433303          	ld	t1,1684(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1ec6c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ec6e:	4741                	c.li	a4,16
   1ec70:	0000f697          	auipc	a3,0xf
   1ec74:	b4868693          	addi	a3,a3,-1208 # 2d7b8 <std::piecewise_construct+0x320>
   1ec78:	4601                	c.li	a2,0
   1ec7a:	4581                	c.li	a1,0
   1ec7c:	0808                	c.addi4spn	a0,sp,16
   1ec7e:	9e3f70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ec82:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ec84:	009c                	c.addi4spn	a5,sp,64
   1ec86:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1ec88:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ec8a:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1ec8e:	03278b63          	beq	a5,s2,1ecc4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8cc>
      { _M_dataplus._M_p = __p; }
   1ec92:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1ec94:	691c                	c.ld	a5,16(a0)
   1ec96:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1ec98:	649c                	c.ld	a5,8(s1)
   1ec9a:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1ec9c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eca0:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eca4:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1eca8:	7762                	c.ldsp	a4,56(sp)
   1ecaa:	57fd                	c.li	a5,-1
   1ecac:	8389                	c.srli	a5,0x2
   1ecae:	02f70363          	beq	a4,a5,1ecd4 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8dc>
	return _M_append(__s, __n);
   1ecb2:	4605                	c.li	a2,1
   1ecb4:	0000f597          	auipc	a1,0xf
   1ecb8:	ac458593          	addi	a1,a1,-1340 # 2d778 <std::piecewise_construct+0x2e0>
   1ecbc:	1808                	c.addi4spn	a0,sp,48
   1ecbe:	f02f70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1ecc2:	a0a9                	c.j	1ed0c <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x914>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ecc4:	6510                	c.ld	a2,8(a0)
   1ecc6:	0605                	c.addi	a2,1
	if (__n == 0)
   1ecc8:	da61                	c.beqz	a2,1ec98 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8a0>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ecca:	85ca                	c.mv	a1,s2
   1eccc:	0088                	c.addi4spn	a0,sp,64
   1ecce:	8e3f70ef          	jal	ra,165b0 <memcpy@plt>
   1ecd2:	b7d9                	c.j	1ec98 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8a0>
	  __throw_length_error(__N(__s));
   1ecd4:	0000f517          	auipc	a0,0xf
   1ecd8:	a7450513          	addi	a0,a0,-1420 # 2d748 <std::piecewise_construct+0x2b0>
   1ecdc:	f64f70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1ece0:	842a                	c.mv	s0,a0
   1ece2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ece4:	009c                	c.addi4spn	a5,sp,64
   1ece6:	00f50463          	beq	a0,a5,1ecee <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8f6>
   1ecea:	827f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ecee:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1ecf0:	101c                	c.addi4spn	a5,sp,32
   1ecf2:	00f50463          	beq	a0,a5,1ecfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1ecf6:	81bf70ef          	jal	ra,16510 <operator delete(void*)@plt>
class die {
   1ecfa:	1888                	c.addi4spn	a0,sp,112
   1ecfc:	0001a317          	auipc	t1,0x1a
   1ed00:	6ec33303          	ld	t1,1772(t1) # 393e8 <dwarf::small_vector<unsigned long, 6u>::~small_vector()@@Base+0x1fa94>
   1ed04:	9302                	c.jalr	t1
   1ed06:	8522                	c.mv	a0,s0
   1ed08:	9e9f70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1ed0c:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ed0e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ed12:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ed14:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ed16:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ed1a:	03278a63          	beq	a5,s2,1ed4e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x956>
      { _M_dataplus._M_p = __p; }
   1ed1e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ed20:	689c                	c.ld	a5,16(s1)
   1ed22:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ed24:	649c                	c.ld	a5,8(s1)
   1ed26:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ed28:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ed2c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ed30:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ed34:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ed36:	009c                	c.addi4spn	a5,sp,64
   1ed38:	00f50463          	beq	a0,a5,1ed40 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x948>
   1ed3c:	fd4f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ed40:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1ed42:	101c                	c.addi4spn	a5,sp,32
   1ed44:	0ef50d63          	beq	a0,a5,1ee3e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
   1ed48:	fc8f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ed4c:	a8cd                	c.j	1ee3e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ed4e:	6490                	c.ld	a2,8(s1)
   1ed50:	0605                	c.addi	a2,1
	if (__n == 0)
   1ed52:	da69                	c.beqz	a2,1ed24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x92c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ed54:	85ca                	c.mv	a1,s2
   1ed56:	85bf70ef          	jal	ra,165b0 <memcpy@plt>
   1ed5a:	b7e9                	c.j	1ed24 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x92c>
    return "<0x" + to_hex(d.get_section_offset()) + ">";
   1ed5c:	0888                	c.addi4spn	a0,sp,80
   1ed5e:	c2afc0ef          	jal	ra,1b188 <dwarf::die::get_section_offset() const>
   1ed62:	85aa                	c.mv	a1,a0
   1ed64:	0808                	c.addi4spn	a0,sp,16
   1ed66:	0001a317          	auipc	t1,0x1a
   1ed6a:	59233303          	ld	t1,1426(t1) # 392f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<unsigned long>(unsigned long)@@Base+0x1f592>
   1ed6e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ed70:	470d                	c.li	a4,3
   1ed72:	0000f697          	auipc	a3,0xf
   1ed76:	a5e68693          	addi	a3,a3,-1442 # 2d7d0 <std::piecewise_construct+0x338>
   1ed7a:	4601                	c.li	a2,0
   1ed7c:	4581                	c.li	a1,0
   1ed7e:	0808                	c.addi4spn	a0,sp,16
   1ed80:	8e1f70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ed84:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ed86:	009c                	c.addi4spn	a5,sp,64
   1ed88:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   1ed8a:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ed8c:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1ed90:	03278b63          	beq	a5,s2,1edc6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9ce>
      { _M_dataplus._M_p = __p; }
   1ed94:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   1ed96:	691c                	c.ld	a5,16(a0)
   1ed98:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   1ed9a:	649c                	c.ld	a5,8(s1)
   1ed9c:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   1ed9e:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eda2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eda6:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1edaa:	7762                	c.ldsp	a4,56(sp)
   1edac:	57fd                	c.li	a5,-1
   1edae:	8389                	c.srli	a5,0x2
   1edb0:	02f70363          	beq	a4,a5,1edd6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9de>
	return _M_append(__s, __n);
   1edb4:	4605                	c.li	a2,1
   1edb6:	0000f597          	auipc	a1,0xf
   1edba:	9c258593          	addi	a1,a1,-1598 # 2d778 <std::piecewise_construct+0x2e0>
   1edbe:	1808                	c.addi4spn	a0,sp,48
   1edc0:	e00f70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1edc4:	a82d                	c.j	1edfe <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa06>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1edc6:	6510                	c.ld	a2,8(a0)
   1edc8:	0605                	c.addi	a2,1
	if (__n == 0)
   1edca:	da61                	c.beqz	a2,1ed9a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9a2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1edcc:	85ca                	c.mv	a1,s2
   1edce:	0088                	c.addi4spn	a0,sp,64
   1edd0:	fe0f70ef          	jal	ra,165b0 <memcpy@plt>
   1edd4:	b7d9                	c.j	1ed9a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9a2>
	  __throw_length_error(__N(__s));
   1edd6:	0000f517          	auipc	a0,0xf
   1edda:	97250513          	addi	a0,a0,-1678 # 2d748 <std::piecewise_construct+0x2b0>
   1edde:	e62f70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1ede2:	842a                	c.mv	s0,a0
   1ede4:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ede6:	009c                	c.addi4spn	a5,sp,64
   1ede8:	00f50463          	beq	a0,a5,1edf0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9f8>
   1edec:	f24f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1edf0:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1edf2:	101c                	c.addi4spn	a5,sp,32
   1edf4:	f0f503e3          	beq	a0,a5,1ecfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1edf8:	f18f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1edfc:	bdfd                	c.j	1ecfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
	return _M_append(__s, __n);
   1edfe:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ee00:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ee04:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ee06:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ee08:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ee0c:	05278b63          	beq	a5,s2,1ee62 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa6a>
      { _M_dataplus._M_p = __p; }
   1ee10:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ee12:	689c                	c.ld	a5,16(s1)
   1ee14:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ee16:	649c                	c.ld	a5,8(s1)
   1ee18:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ee1a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ee1e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ee22:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ee26:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ee28:	009c                	c.addi4spn	a5,sp,64
   1ee2a:	00f50463          	beq	a0,a5,1ee32 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa3a>
   1ee2e:	ee2f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ee32:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   1ee34:	101c                	c.addi4spn	a5,sp,32
   1ee36:	00f50463          	beq	a0,a5,1ee3e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa46>
   1ee3a:	ed6f70ef          	jal	ra,16510 <operator delete(void*)@plt>
    for (T *p = base; p < end; ++p)
   1ee3e:	750a                	c.ldsp	a0,160(sp)
   1ee40:	77aa                	c.ldsp	a5,168(sp)
   1ee42:	00f57763          	bgeu	a0,a5,1ee50 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa58>
   1ee46:	87aa                	c.mv	a5,a0
   1ee48:	07a1                	c.addi	a5,8
   1ee4a:	772a                	c.ldsp	a4,168(sp)
   1ee4c:	fee7eee3          	bltu	a5,a4,1ee48 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa50>
    if ((char *)base != buf)
   1ee50:	189c                	c.addi4spn	a5,sp,112
   1ee52:	e0f50363          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
      delete[] (char *)base;
   1ee56:	e0050163          	beq	a0,zero,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ee5a:	f66f70ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   1ee5e:	dfaff06f          	jal	zero,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ee62:	6490                	c.ld	a2,8(s1)
   1ee64:	0605                	c.addi	a2,1
	if (__n == 0)
   1ee66:	da45                	c.beqz	a2,1ee16 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa1e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ee68:	85ca                	c.mv	a1,s2
   1ee6a:	f46f70ef          	jal	ra,165b0 <memcpy@plt>
   1ee6e:	b765                	c.j	1ee16 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xa1e>
    return v.as_string();
   1ee70:	85aa                	c.mv	a1,a0
   1ee72:	8522                	c.mv	a0,s0
   1ee74:	cf1fe0ef          	jal	ra,1db64 <dwarf::value::as_string[abi:cxx11]() const>
   1ee78:	de0ff06f          	jal	zero,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
  return "<unexpected value type " + to_string(v.get_type()) + ">";
   1ee7c:	1804                	c.addi4spn	s1,sp,48
   1ee7e:	8526                	c.mv	a0,s1
   1ee80:	57e080ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   1ee84:	475d                	c.li	a4,23
   1ee86:	0000f697          	auipc	a3,0xf
   1ee8a:	95268693          	addi	a3,a3,-1710 # 2d7d8 <std::piecewise_construct+0x340>
   1ee8e:	4601                	c.li	a2,0
   1ee90:	4581                	c.li	a1,0
   1ee92:	8526                	c.mv	a0,s1
   1ee94:	fccf70ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   1ee98:	84aa                	c.mv	s1,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ee9a:	109c                	c.addi4spn	a5,sp,96
   1ee9c:	e8be                	c.sdsp	a5,80(sp)
      { return _M_dataplus._M_p; }
   1ee9e:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1eea0:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   1eea4:	03278b63          	beq	a5,s2,1eeda <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xae2>
      { _M_dataplus._M_p = __p; }
   1eea8:	e8be                	c.sdsp	a5,80(sp)
      { _M_allocated_capacity = __capacity; }
   1eeaa:	691c                	c.ld	a5,16(a0)
   1eeac:	f0be                	c.sdsp	a5,96(sp)
      { _M_string_length = __length; }
   1eeae:	649c                	c.ld	a5,8(s1)
   1eeb0:	ecbe                	c.sdsp	a5,88(sp)
      { _M_dataplus._M_p = __p; }
   1eeb2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1eeb6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1eeba:	00048823          	sb	zero,16(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   1eebe:	6766                	c.ldsp	a4,88(sp)
   1eec0:	57fd                	c.li	a5,-1
   1eec2:	8389                	c.srli	a5,0x2
   1eec4:	02f70363          	beq	a4,a5,1eeea <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xaf2>
	return _M_append(__s, __n);
   1eec8:	4605                	c.li	a2,1
   1eeca:	0000f597          	auipc	a1,0xf
   1eece:	8ae58593          	addi	a1,a1,-1874 # 2d778 <std::piecewise_construct+0x2e0>
   1eed2:	0888                	c.addi4spn	a0,sp,80
   1eed4:	cecf70ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   1eed8:	a83d                	c.j	1ef16 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb1e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1eeda:	6510                	c.ld	a2,8(a0)
   1eedc:	0605                	c.addi	a2,1
	if (__n == 0)
   1eede:	da61                	c.beqz	a2,1eeae <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xab6>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1eee0:	85ca                	c.mv	a1,s2
   1eee2:	1088                	c.addi4spn	a0,sp,96
   1eee4:	eccf70ef          	jal	ra,165b0 <memcpy@plt>
   1eee8:	b7d9                	c.j	1eeae <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xab6>
	  __throw_length_error(__N(__s));
   1eeea:	0000f517          	auipc	a0,0xf
   1eeee:	85e50513          	addi	a0,a0,-1954 # 2d748 <std::piecewise_construct+0x2b0>
   1eef2:	d4ef70ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   1eef6:	842a                	c.mv	s0,a0
   1eef8:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1eefa:	109c                	c.addi4spn	a5,sp,96
   1eefc:	00f50463          	beq	a0,a5,1ef04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb0c>
   1ef00:	e10f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ef04:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ef06:	009c                	c.addi4spn	a5,sp,64
   1ef08:	00f50463          	beq	a0,a5,1ef10 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb18>
   1ef0c:	e04f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1ef10:	8522                	c.mv	a0,s0
   1ef12:	fdef70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return _M_append(__s, __n);
   1ef16:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   1ef18:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   1ef1c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   1ef1e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   1ef20:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   1ef24:	03278b63          	beq	a5,s2,1ef5a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb62>
      { _M_dataplus._M_p = __p; }
   1ef28:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   1ef2a:	689c                	c.ld	a5,16(s1)
   1ef2c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   1ef2e:	649c                	c.ld	a5,8(s1)
   1ef30:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   1ef32:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   1ef36:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   1ef3a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   1ef3e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ef40:	109c                	c.addi4spn	a5,sp,96
   1ef42:	00f50463          	beq	a0,a5,1ef4a <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb52>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ef46:	dcaf70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1ef4a:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   1ef4c:	009c                	c.addi4spn	a5,sp,64
   1ef4e:	d0f50563          	beq	a0,a5,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
   1ef52:	dbef70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   1ef56:	d02ff06f          	jal	zero,1e458 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   1ef5a:	6490                	c.ld	a2,8(s1)
   1ef5c:	0605                	c.addi	a2,1
	if (__n == 0)
   1ef5e:	da61                	c.beqz	a2,1ef2e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   1ef60:	85ca                	c.mv	a1,s2
   1ef62:	e4ef70ef          	jal	ra,165b0 <memcpy@plt>
   1ef66:	b7e1                	c.j	1ef2e <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb36>
      { return _M_dataplus._M_p; }
   1ef68:	842a                	c.mv	s0,a0
   1ef6a:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ef6c:	109c                	c.addi4spn	a5,sp,96
   1ef6e:	00f50463          	beq	a0,a5,1ef76 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb7e>
   1ef72:	d9ef70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1ef76:	8522                	c.mv	a0,s0
   1ef78:	f78f70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ef7c:	842a                	c.mv	s0,a0
   1ef7e:	eb4ff06f          	jal	zero,1e632 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x23a>
   1ef82:	842a                	c.mv	s0,a0
   1ef84:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   1ef86:	109c                	c.addi4spn	a5,sp,96
   1ef88:	00f50463          	beq	a0,a5,1ef90 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ef8c:	d84f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   1ef90:	8522                	c.mv	a0,s0
   1ef92:	f5ef70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1ef96:	842a                	c.mv	s0,a0
   1ef98:	b2b9                	c.j	1e8e6 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x4ee>
   1ef9a:	842a                	c.mv	s0,a0
   1ef9c:	b481                	c.j	1e9dc <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x5e4>
   1ef9e:	842a                	c.mv	s0,a0
   1efa0:	be0d                	c.j	1ead2 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x6da>
   1efa2:	842a                	c.mv	s0,a0
   1efa4:	b115                	c.j	1ebc8 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x7d0>
   1efa6:	842a                	c.mv	s0,a0
   1efa8:	b399                	c.j	1ecee <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x8f6>
   1efaa:	842a                	c.mv	s0,a0
   1efac:	b591                	c.j	1edf0 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x9f8>
   1efae:	842a                	c.mv	s0,a0
   1efb0:	b3a9                	c.j	1ecfa <dwarf::to_string[abi:cxx11](dwarf::value const&)+0x902>
   1efb2:	842a                	c.mv	s0,a0
   1efb4:	bf81                	c.j	1ef04 <dwarf::to_string[abi:cxx11](dwarf::value const&)+0xb0c>

000000000001efb6 <dwarf::value_type_mismatch::~value_type_mismatch()>:
class value_type_mismatch : public std::logic_error {
   1efb6:	1141                	c.addi	sp,-16
   1efb8:	e406                	c.sdsp	ra,8(sp)
   1efba:	0001a797          	auipc	a5,0x1a
   1efbe:	48e7b783          	ld	a5,1166(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1efc2:	07c1                	c.addi	a5,16
   1efc4:	e11c                	c.sd	a5,0(a0)
   1efc6:	f3af70ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   1efca:	60a2                	c.ldsp	ra,8(sp)
   1efcc:	0141                	c.addi	sp,16
   1efce:	8082                	c.jr	ra

000000000001efd0 <dwarf::value_type_mismatch::~value_type_mismatch()>:
   1efd0:	1141                	c.addi	sp,-16
   1efd2:	e406                	c.sdsp	ra,8(sp)
   1efd4:	e022                	c.sdsp	s0,0(sp)
   1efd6:	842a                	c.mv	s0,a0
   1efd8:	0001a797          	auipc	a5,0x1a
   1efdc:	4707b783          	ld	a5,1136(a5) # 39448 <vtable for dwarf::value_type_mismatch@@Base+0xa10>
   1efe0:	07c1                	c.addi	a5,16
   1efe2:	e11c                	c.sd	a5,0(a0)
   1efe4:	f1cf70ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   1efe8:	8522                	c.mv	a0,s0
   1efea:	d26f70ef          	jal	ra,16510 <operator delete(void*)@plt>
   1efee:	60a2                	c.ldsp	ra,8(sp)
   1eff0:	6402                	c.ldsp	s0,0(sp)
   1eff2:	0141                	c.addi	sp,16
   1eff4:	8082                	c.jr	ra

000000000001eff6 <dwarf::cursor::address()>:
  taddr address() {
   1eff6:	7119                	c.addi16sp	sp,-128
   1eff8:	fc86                	c.sdsp	ra,120(sp)
   1effa:	f8a2                	c.sdsp	s0,112(sp)
   1effc:	f4a6                	c.sdsp	s1,104(sp)
   1effe:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   1f000:	6118                	c.ld	a4,0(a0)
    switch (sec->addr_size) {
   1f002:	531c                	c.lw	a5,32(a4)
   1f004:	4691                	c.li	a3,4
   1f006:	0ad78b63          	beq	a5,a3,1f0bc <dwarf::cursor::address()+0xc6>
   1f00a:	04f6e163          	bltu	a3,a5,1f04c <dwarf::cursor::address()+0x56>
   1f00e:	4685                	c.li	a3,1
   1f010:	08d78063          	beq	a5,a3,1f090 <dwarf::cursor::address()+0x9a>
   1f014:	4689                	c.li	a3,2
   1f016:	10d79d63          	bne	a5,a3,1f130 <dwarf::cursor::address()+0x13a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f01a:	6b18                	c.ld	a4,16(a4)
   1f01c:	691c                	c.ld	a5,16(a0)
   1f01e:	40f70633          	sub	a2,a4,a5
   1f022:	4685                	c.li	a3,1
   1f024:	00c6f463          	bgeu	a3,a2,1f02c <dwarf::cursor::address()+0x36>
   1f028:	00e7e563          	bltu	a5,a4,1f032 <dwarf::cursor::address()+0x3c>
      underflow();
   1f02c:	8522                	c.mv	a0,s0
   1f02e:	b0bfb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f032:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f034:	601c                	c.ld	a5,0(s0)
   1f036:	4fdc                	c.lw	a5,28(a5)
   1f038:	ebb5                	c.bnez	a5,1f0ac <dwarf::cursor::address()+0xb6>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f03a:	00174783          	lbu	a5,1(a4)
   1f03e:	07a2                	c.slli	a5,0x8
   1f040:	00074683          	lbu	a3,0(a4)
   1f044:	00d7e533          	or	a0,a5,a3
    pos += sizeof(T);
   1f048:	0709                	c.addi	a4,2
      return fixed<uint16_t>();
   1f04a:	ac49                	c.j	1f2dc <dwarf::cursor::address()+0x2e6>
    switch (sec->addr_size) {
   1f04c:	46a1                	c.li	a3,8
   1f04e:	0ed79163          	bne	a5,a3,1f130 <dwarf::cursor::address()+0x13a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f052:	6b18                	c.ld	a4,16(a4)
   1f054:	691c                	c.ld	a5,16(a0)
   1f056:	40f70633          	sub	a2,a4,a5
   1f05a:	469d                	c.li	a3,7
   1f05c:	00c6f463          	bgeu	a3,a2,1f064 <dwarf::cursor::address()+0x6e>
   1f060:	00e7e563          	bltu	a5,a4,1f06a <dwarf::cursor::address()+0x74>
      underflow();
   1f064:	8522                	c.mv	a0,s0
   1f066:	ad3fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f06a:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f06c:	601c                	c.ld	a5,0(s0)
   1f06e:	4fdc                	c.lw	a5,28(a5)
   1f070:	e7c5                	c.bnez	a5,1f118 <dwarf::cursor::address()+0x122>
   1f072:	863a                	c.mv	a2,a4
    uint64_t val = 0;
   1f074:	4501                	c.li	a0,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f076:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   1f07a:	00064683          	lbu	a3,0(a2)
   1f07e:	00f696b3          	sll	a3,a3,a5
   1f082:	8d55                	c.or	a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f084:	0605                	c.addi	a2,1
   1f086:	27a1                	c.addiw	a5,8
   1f088:	feb799e3          	bne	a5,a1,1f07a <dwarf::cursor::address()+0x84>
    pos += sizeof(T);
   1f08c:	0721                	c.addi	a4,8
      return fixed<uint64_t>();
   1f08e:	a4b9                	c.j	1f2dc <dwarf::cursor::address()+0x2e6>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f090:	6b18                	c.ld	a4,16(a4)
   1f092:	691c                	c.ld	a5,16(a0)
   1f094:	00e7e463          	bltu	a5,a4,1f09c <dwarf::cursor::address()+0xa6>
      underflow();
   1f098:	aa1fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f09c:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f09e:	601c                	c.ld	a5,0(s0)
   1f0a0:	4fdc                	c.lw	a5,28(a5)
   1f0a2:	22078a63          	beq	a5,zero,1f2d6 <dwarf::cursor::address()+0x2e0>
        val = (val << 8) | (uint64_t)p[i];
   1f0a6:	00074503          	lbu	a0,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   1f0aa:	ac05                	c.j	1f2da <dwarf::cursor::address()+0x2e4>
        val = (val << 8) | (uint64_t)p[i];
   1f0ac:	00074783          	lbu	a5,0(a4)
   1f0b0:	07a2                	c.slli	a5,0x8
   1f0b2:	00174683          	lbu	a3,1(a4)
   1f0b6:	00d7e533          	or	a0,a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f0ba:	b779                	c.j	1f048 <dwarf::cursor::address()+0x52>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f0bc:	6b18                	c.ld	a4,16(a4)
   1f0be:	691c                	c.ld	a5,16(a0)
   1f0c0:	40f70633          	sub	a2,a4,a5
   1f0c4:	468d                	c.li	a3,3
   1f0c6:	00c6f463          	bgeu	a3,a2,1f0ce <dwarf::cursor::address()+0xd8>
   1f0ca:	00e7e563          	bltu	a5,a4,1f0d4 <dwarf::cursor::address()+0xde>
      underflow();
   1f0ce:	8522                	c.mv	a0,s0
   1f0d0:	a69fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f0d4:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f0d6:	601c                	c.ld	a5,0(s0)
   1f0d8:	4fdc                	c.lw	a5,28(a5)
   1f0da:	e39d                	c.bnez	a5,1f100 <dwarf::cursor::address()+0x10a>
   1f0dc:	85ba                	c.mv	a1,a4
   1f0de:	4681                	c.li	a3,0
      for (unsigned i = 0; i < sizeof(T); i++)
   1f0e0:	02000513          	addi	a0,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   1f0e4:	0005c603          	lbu	a2,0(a1)
   1f0e8:	00d61633          	sll	a2,a2,a3
   1f0ec:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1f0ee:	0585                	c.addi	a1,1
   1f0f0:	26a1                	c.addiw	a3,8
   1f0f2:	fea699e3          	bne	a3,a0,1f0e4 <dwarf::cursor::address()+0xee>
    pos += sizeof(T);
   1f0f6:	0711                	c.addi	a4,4
   1f0f8:	02079513          	slli	a0,a5,0x20
   1f0fc:	9101                	c.srli	a0,0x20
      return fixed<uint32_t>();
   1f0fe:	aaf9                	c.j	1f2dc <dwarf::cursor::address()+0x2e6>
   1f100:	86ba                	c.mv	a3,a4
   1f102:	00470593          	addi	a1,a4,4
    uint64_t val = 0;
   1f106:	4781                	c.li	a5,0
        val = (val << 8) | (uint64_t)p[i];
   1f108:	07a2                	c.slli	a5,0x8
   1f10a:	0006c603          	lbu	a2,0(a3)
   1f10e:	8fd1                	c.or	a5,a2
      for (unsigned i = 0; i < sizeof(T); i++)
   1f110:	0685                	c.addi	a3,1
   1f112:	fed59be3          	bne	a1,a3,1f108 <dwarf::cursor::address()+0x112>
   1f116:	b7c5                	c.j	1f0f6 <dwarf::cursor::address()+0x100>
   1f118:	87ba                	c.mv	a5,a4
   1f11a:	00870613          	addi	a2,a4,8
    uint64_t val = 0;
   1f11e:	4501                	c.li	a0,0
        val = (val << 8) | (uint64_t)p[i];
   1f120:	0522                	c.slli	a0,0x8
   1f122:	0007c683          	lbu	a3,0(a5)
   1f126:	8d55                	c.or	a0,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   1f128:	0785                	c.addi	a5,1
   1f12a:	fec79be3          	bne	a5,a2,1f120 <dwarf::cursor::address()+0x12a>
   1f12e:	bfb9                	c.j	1f08c <dwarf::cursor::address()+0x96>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   1f130:	4541                	c.li	a0,16
   1f132:	aeef70ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1f136:	84aa                	c.mv	s1,a0
   1f138:	601c                	c.ld	a5,0(s0)
   1f13a:	5380                	c.lw	s0,32(a5)
   1f13c:	87a2                	c.mv	a5,s0
      unsigned __n = 1;
   1f13e:	4585                	c.li	a1,1
	  if (__value < (unsigned)__base) return __n;
   1f140:	48a5                	c.li	a7,9
	  if (__value < __b2) return __n + 1;
   1f142:	06300813          	addi	a6,zero,99
	  if (__value < __b3) return __n + 2;
   1f146:	3e700513          	addi	a0,zero,999
	  if (__value < __b4) return __n + 3;
   1f14a:	6709                	c.lui	a4,0x2
   1f14c:	70f70613          	addi	a2,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   1f150:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   1f154:	00f8f563          	bgeu	a7,a5,1f15e <dwarf::cursor::address()+0x168>
	  if (__value < __b2) return __n + 1;
   1f158:	06f86a63          	bltu	a6,a5,1f1cc <dwarf::cursor::address()+0x1d6>
   1f15c:	2585                	c.addiw	a1,1
	: allocator_type(__a), _M_p(__dat) { }
   1f15e:	081c                	c.addi4spn	a5,sp,16
   1f160:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   1f162:	4601                	c.li	a2,0
   1f164:	1582                	c.slli	a1,0x20
   1f166:	9181                	c.srli	a1,0x20
   1f168:	850a                	c.mv	a0,sp
   1f16a:	c06f70ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   1f16e:	6602                	c.ldsp	a2,0(sp)
      unsigned __pos = __len - 1;
   1f170:	6722                	c.ldsp	a4,8(sp)
   1f172:	377d                	c.addiw	a4,-1
      while (__val >= 100)
   1f174:	06300893          	addi	a7,zero,99
	  auto const __num = (__val % 100) * 2;
   1f178:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   1f17c:	0001a517          	auipc	a0,0x1a
   1f180:	1e453503          	ld	a0,484(a0) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
      while (__val >= 100)
   1f184:	0688e463          	bltu	a7,s0,1f1ec <dwarf::cursor::address()+0x1f6>
      if (__val >= 10)
   1f188:	47a5                	c.li	a5,9
   1f18a:	0a87f263          	bgeu	a5,s0,1f22e <dwarf::cursor::address()+0x238>
	  auto const __num = __val * 2;
   1f18e:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   1f192:	0001a717          	auipc	a4,0x1a
   1f196:	1ce73703          	ld	a4,462(a4) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
   1f19a:	0014079b          	addiw	a5,s0,1
   1f19e:	1782                	c.slli	a5,0x20
   1f1a0:	9381                	c.srli	a5,0x20
   1f1a2:	97ba                	c.add	a5,a4
   1f1a4:	0007c783          	lbu	a5,0(a5)
   1f1a8:	00f600a3          	sb	a5,1(a2)
	  __first[0] = __digits[__num];
   1f1ac:	1402                	c.slli	s0,0x20
   1f1ae:	9001                	c.srli	s0,0x20
   1f1b0:	9722                	c.add	a4,s0
   1f1b2:	00074783          	lbu	a5,0(a4)
   1f1b6:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   1f1ba:	0000e617          	auipc	a2,0xe
   1f1be:	48660613          	addi	a2,a2,1158 # 2d640 <std::piecewise_construct+0x1a8>
   1f1c2:	4581                	c.li	a1,0
   1f1c4:	850a                	c.mv	a0,sp
   1f1c6:	9caf70ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f1ca:	a0bd                	c.j	1f238 <dwarf::cursor::address()+0x242>
	  if (__value < __b3) return __n + 2;
   1f1cc:	00f56463          	bltu	a0,a5,1f1d4 <dwarf::cursor::address()+0x1de>
   1f1d0:	2589                	c.addiw	a1,2
   1f1d2:	b771                	c.j	1f15e <dwarf::cursor::address()+0x168>
	  if (__value < __b4) return __n + 3;
   1f1d4:	02079693          	slli	a3,a5,0x20
   1f1d8:	9281                	c.srli	a3,0x20
   1f1da:	00f66463          	bltu	a2,a5,1f1e2 <dwarf::cursor::address()+0x1ec>
   1f1de:	258d                	c.addiw	a1,3
   1f1e0:	bfbd                	c.j	1f15e <dwarf::cursor::address()+0x168>
	  __value /= __b4;
   1f1e2:	02e6d7b3          	divu	a5,a3,a4
   1f1e6:	2781                	c.addiw	a5,0
	  __n += 4;
   1f1e8:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   1f1ea:	b7ad                	c.j	1f154 <dwarf::cursor::address()+0x15e>
	  auto const __num = (__val % 100) * 2;
   1f1ec:	030477bb          	remuw	a5,s0,a6
   1f1f0:	0017979b          	slliw	a5,a5,0x1
	  __val /= 100;
   1f1f4:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   1f1f8:	02071593          	slli	a1,a4,0x20
   1f1fc:	9181                	c.srli	a1,0x20
   1f1fe:	95b2                	c.add	a1,a2
   1f200:	0017869b          	addiw	a3,a5,1
   1f204:	1682                	c.slli	a3,0x20
   1f206:	9281                	c.srli	a3,0x20
   1f208:	96aa                	c.add	a3,a0
   1f20a:	0006c683          	lbu	a3,0(a3)
   1f20e:	00d58023          	sb	a3,0(a1)
	  __first[__pos - 1] = __digits[__num];
   1f212:	fff7069b          	addiw	a3,a4,-1
   1f216:	1682                	c.slli	a3,0x20
   1f218:	9281                	c.srli	a3,0x20
   1f21a:	96b2                	c.add	a3,a2
   1f21c:	1782                	c.slli	a5,0x20
   1f21e:	9381                	c.srli	a5,0x20
   1f220:	97aa                	c.add	a5,a0
   1f222:	0007c783          	lbu	a5,0(a5)
   1f226:	00f68023          	sb	a5,0(a3)
	  __pos -= 2;
   1f22a:	3779                	c.addiw	a4,-2
   1f22c:	bfa1                	c.j	1f184 <dwarf::cursor::address()+0x18e>
	__first[0] = '0' + __val;
   1f22e:	0304079b          	addiw	a5,s0,48
   1f232:	0ff7f793          	andi	a5,a5,255
   1f236:	b741                	c.j	1f1b6 <dwarf::cursor::address()+0x1c0>
   1f238:	85aa                	c.mv	a1,a0
   1f23a:	1000                	c.addi4spn	s0,sp,32
   1f23c:	8522                	c.mv	a0,s0
   1f23e:	a32f70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   1f242:	0000e597          	auipc	a1,0xe
   1f246:	40e58593          	addi	a1,a1,1038 # 2d650 <std::piecewise_construct+0x1b8>
   1f24a:	8522                	c.mv	a0,s0
   1f24c:	d54f70ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   1f250:	85aa                	c.mv	a1,a0
   1f252:	0080                	c.addi4spn	s0,sp,64
   1f254:	8522                	c.mv	a0,s0
   1f256:	a1af70ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw std::runtime_error(
   1f25a:	85a2                	c.mv	a1,s0
   1f25c:	8526                	c.mv	a0,s1
   1f25e:	c22f70ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   1f262:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1f264:	089c                	c.addi4spn	a5,sp,80
   1f266:	00f50463          	beq	a0,a5,1f26e <dwarf::cursor::address()+0x278>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f26a:	aa6f70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f26e:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f270:	181c                	c.addi4spn	a5,sp,48
   1f272:	00f50463          	beq	a0,a5,1f27a <dwarf::cursor::address()+0x284>
   1f276:	a9af70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f27a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f27c:	081c                	c.addi4spn	a5,sp,16
   1f27e:	00f50463          	beq	a0,a5,1f286 <dwarf::cursor::address()+0x290>
   1f282:	a8ef70ef          	jal	ra,16510 <operator delete(void*)@plt>
          "address size " + std::to_string(sec->addr_size) + " not supported");
   1f286:	0001a617          	auipc	a2,0x1a
   1f28a:	18263603          	ld	a2,386(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   1f28e:	0001a597          	auipc	a1,0x1a
   1f292:	36a5b583          	ld	a1,874(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   1f296:	8526                	c.mv	a0,s1
   1f298:	c28f70ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   1f29c:	842a                	c.mv	s0,a0
   1f29e:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   1f2a0:	089c                	c.addi4spn	a5,sp,80
   1f2a2:	00f50463          	beq	a0,a5,1f2aa <dwarf::cursor::address()+0x2b4>
   1f2a6:	a6af70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f2aa:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f2ac:	181c                	c.addi4spn	a5,sp,48
   1f2ae:	00f50463          	beq	a0,a5,1f2b6 <dwarf::cursor::address()+0x2c0>
   1f2b2:	a5ef70ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f2b6:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f2b8:	081c                	c.addi4spn	a5,sp,16
   1f2ba:	00f50463          	beq	a0,a5,1f2c2 <dwarf::cursor::address()+0x2cc>
   1f2be:	a52f70ef          	jal	ra,16510 <operator delete(void*)@plt>
   1f2c2:	8526                	c.mv	a0,s1
   1f2c4:	a0cf70ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1f2c8:	8522                	c.mv	a0,s0
   1f2ca:	c26f70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f2ce:	842a                	c.mv	s0,a0
   1f2d0:	bfe9                	c.j	1f2aa <dwarf::cursor::address()+0x2b4>
   1f2d2:	842a                	c.mv	s0,a0
   1f2d4:	b7cd                	c.j	1f2b6 <dwarf::cursor::address()+0x2c0>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f2d6:	00074503          	lbu	a0,0(a4)
    pos += sizeof(T);
   1f2da:	0705                	c.addi	a4,1
   1f2dc:	e818                	c.sd	a4,16(s0)
  }
   1f2de:	70e6                	c.ldsp	ra,120(sp)
   1f2e0:	7446                	c.ldsp	s0,112(sp)
   1f2e2:	74a6                	c.ldsp	s1,104(sp)
   1f2e4:	6109                	c.addi16sp	sp,128
   1f2e6:	8082                	c.jr	ra

000000000001f2e8 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
   1f2e8:	87aa                	c.mv	a5,a0
      const unsigned __b2 = __base  * __base;
   1f2ea:	02b586bb          	mulw	a3,a1,a1
      const unsigned __b3 = __b2 * __base;
   1f2ee:	02b6863b          	mulw	a2,a3,a1
      const unsigned long __b4 = __b3 * __base;
   1f2f2:	02b6073b          	mulw	a4,a2,a1
   1f2f6:	1702                	c.slli	a4,0x20
   1f2f8:	9301                	c.srli	a4,0x20
	  if (__value < (unsigned)__base) return __n;
   1f2fa:	1582                	c.slli	a1,0x20
   1f2fc:	9181                	c.srli	a1,0x20
   1f2fe:	04b56363          	bltu	a0,a1,1f344 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5c>
	  if (__value < __b2) return __n + 1;
   1f302:	1682                	c.slli	a3,0x20
   1f304:	9281                	c.srli	a3,0x20
   1f306:	02d56663          	bltu	a0,a3,1f332 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x4a>
	  if (__value < __b3) return __n + 2;
   1f30a:	1602                	c.slli	a2,0x20
   1f30c:	9201                	c.srli	a2,0x20
   1f30e:	02c56563          	bltu	a0,a2,1f338 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x50>
	  if (__value < __b4) return __n + 3;
   1f312:	02e56663          	bltu	a0,a4,1f33e <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x56>
      unsigned __n = 1;
   1f316:	4505                	c.li	a0,1
	  __value /= __b4;
   1f318:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   1f31c:	2511                	c.addiw	a0,4
	  if (__value < (unsigned)__base) return __n;
   1f31e:	02b7e263          	bltu	a5,a1,1f342 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x5a>
	  if (__value < __b2) return __n + 1;
   1f322:	00d7e963          	bltu	a5,a3,1f334 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x4c>
	  if (__value < __b3) return __n + 2;
   1f326:	00c7ea63          	bltu	a5,a2,1f33a <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x52>
	  if (__value < __b4) return __n + 3;
   1f32a:	fee7f7e3          	bgeu	a5,a4,1f318 <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x30>
   1f32e:	250d                	c.addiw	a0,3
   1f330:	8082                	c.jr	ra
      unsigned __n = 1;
   1f332:	4505                	c.li	a0,1
	  if (__value < __b2) return __n + 1;
   1f334:	2505                	c.addiw	a0,1
   1f336:	8082                	c.jr	ra
      unsigned __n = 1;
   1f338:	4505                	c.li	a0,1
	  if (__value < __b3) return __n + 2;
   1f33a:	2509                	c.addiw	a0,2
   1f33c:	8082                	c.jr	ra
      unsigned __n = 1;
   1f33e:	4505                	c.li	a0,1
   1f340:	b7fd                	c.j	1f32e <unsigned int std::__detail::__to_chars_len<unsigned long>(unsigned long, int)+0x46>
   1f342:	8082                	c.jr	ra
   1f344:	4505                	c.li	a0,1
    }
   1f346:	8082                	c.jr	ra

000000000001f348 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)>:
      unsigned __pos = __len - 1;
   1f348:	35fd                	c.addiw	a1,-1
      while (__val >= 100)
   1f34a:	06300793          	addi	a5,zero,99
   1f34e:	04c7f663          	bgeu	a5,a2,1f39a <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x52>
	  auto const __num = (__val % 100) * 2;
   1f352:	06400693          	addi	a3,zero,100
	  __first[__pos] = __digits[__num + 1];
   1f356:	0001ae17          	auipc	t3,0x1a
   1f35a:	112e3e03          	ld	t3,274(t3) # 39468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbad8>
      while (__val >= 100)
   1f35e:	6309                	c.lui	t1,0x2
   1f360:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   1f364:	02d677b3          	remu	a5,a2,a3
   1f368:	0786                	c.slli	a5,0x1
   1f36a:	8832                	c.mv	a6,a2
	  __val /= 100;
   1f36c:	02d65633          	divu	a2,a2,a3
	  __first[__pos] = __digits[__num + 1];
   1f370:	02059713          	slli	a4,a1,0x20
   1f374:	9301                	c.srli	a4,0x20
   1f376:	972a                	c.add	a4,a0
   1f378:	97f2                	c.add	a5,t3
   1f37a:	0017c883          	lbu	a7,1(a5)
   1f37e:	01170023          	sb	a7,0(a4)
	  __first[__pos - 1] = __digits[__num];
   1f382:	fff5871b          	addiw	a4,a1,-1
   1f386:	1702                	c.slli	a4,0x20
   1f388:	9301                	c.srli	a4,0x20
   1f38a:	972a                	c.add	a4,a0
   1f38c:	0007c783          	lbu	a5,0(a5)
   1f390:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   1f394:	35f9                	c.addiw	a1,-2
      while (__val >= 100)
   1f396:	fd0367e3          	bltu	t1,a6,1f364 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x1c>
      if (__val >= 10)
   1f39a:	47a5                	c.li	a5,9
   1f39c:	02c7f163          	bgeu	a5,a2,1f3be <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x76>
	  auto const __num = __val * 2;
   1f3a0:	0606                	c.slli	a2,0x1
	  __first[1] = __digits[__num + 1];
   1f3a2:	0001a797          	auipc	a5,0x1a
   1f3a6:	0c67b783          	ld	a5,198(a5) # 39468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbad8>
   1f3aa:	97b2                	c.add	a5,a2
   1f3ac:	0017c703          	lbu	a4,1(a5)
   1f3b0:	00e500a3          	sb	a4,1(a0)
	  __first[0] = __digits[__num];
   1f3b4:	0007c603          	lbu	a2,0(a5)
   1f3b8:	00c50023          	sb	a2,0(a0)
    }
   1f3bc:	8082                	c.jr	ra
	__first[0] = '0' + __val;
   1f3be:	0306061b          	addiw	a2,a2,48
   1f3c2:	0ff67613          	andi	a2,a2,255
   1f3c6:	bfcd                	c.j	1f3b8 <void std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)+0x70>

000000000001f3c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>:
    }
  }
  throw format_error("unknown attribute form " + to_string(form));
}

attribute_spec::attribute_spec(DW_AT name, DW_FORM form)
   1f3c8:	711d                	c.addi16sp	sp,-96
   1f3ca:	ec86                	c.sdsp	ra,88(sp)
   1f3cc:	e8a2                	c.sdsp	s0,80(sp)
   1f3ce:	e4a6                	c.sdsp	s1,72(sp)
   1f3d0:	e0ca                	c.sdsp	s2,64(sp)
   1f3d2:	8432                	c.mv	s0,a2
    : name(name), form(form), type(resolve_type(name, form)) {}
   1f3d4:	c10c                	c.sw	a1,0(a0)
   1f3d6:	c150                	c.sw	a2,4(a0)
  switch (form) {
   1f3d8:	02000793          	addi	a5,zero,32
   1f3dc:	16c7ee63          	bltu	a5,a2,1f558 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x190>
   1f3e0:	84ae                	c.mv	s1,a1
   1f3e2:	00261793          	slli	a5,a2,0x2
   1f3e6:	0000e717          	auipc	a4,0xe
   1f3ea:	6c270713          	addi	a4,a4,1730 # 2daa8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x118>
   1f3ee:	97ba                	c.add	a5,a4
   1f3f0:	439c                	c.lw	a5,0(a5)
   1f3f2:	97ba                	c.add	a5,a4
   1f3f4:	8782                	c.jr	a5
    return value::type::constant;
   1f3f6:	440d                	c.li	s0,3
   1f3f8:	a8d5                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f3fa:	05100793          	addi	a5,zero,81
   1f3fe:	4409                	c.li	s0,2
   1f400:	0eb7c663          	blt	a5,a1,1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f404:	47e1                	c.li	a5,24
   1f406:	00b7de63          	bge	a5,a1,1f422 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x5a>
   1f40a:	359d                	c.addiw	a1,-25
   1f40c:	0000e797          	auipc	a5,0xe
   1f410:	75c7b783          	ld	a5,1884(a5) # 2db68 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1d8>
   1f414:	00b7d7b3          	srl	a5,a5,a1
   1f418:	8b85                	c.andi	a5,1
      return value::type::exprloc;
   1f41a:	4419                	c.li	s0,6
    switch (name) {
   1f41c:	ebe1                	c.bnez	a5,1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f41e:	4409                	c.li	s0,2
   1f420:	a0f1                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f422:	4789                	c.li	a5,2
   1f424:	1af58263          	beq	a1,a5,1f5c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x200>
   1f428:	35d5                	c.addiw	a1,-11
   1f42a:	0cb7e163          	bltu	a5,a1,1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::exprloc;
   1f42e:	4419                	c.li	s0,6
   1f430:	a875                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f432:	05500793          	addi	a5,zero,85
   1f436:	18b7cb63          	blt	a5,a1,1f5cc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x204>
   1f43a:	47e1                	c.li	a5,24
   1f43c:	00b7de63          	bge	a5,a1,1f458 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x90>
   1f440:	fe75871b          	addiw	a4,a1,-25
   1f444:	0000e797          	auipc	a5,0xe
   1f448:	72c7b783          	ld	a5,1836(a5) # 2db70 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e0>
   1f44c:	00e7d7b3          	srl	a5,a5,a4
   1f450:	8b85                	c.andi	a5,1
   1f452:	ef9d                	c.bnez	a5,1f490 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xc8>
   1f454:	440d                	c.li	s0,3
   1f456:	a859                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f458:	4789                	c.li	a5,2
   1f45a:	16f58b63          	beq	a1,a5,1f5d0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x208>
   1f45e:	47c1                	c.li	a5,16
   1f460:	440d                	c.li	s0,3
   1f462:	08f59563          	bne	a1,a5,1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::line;
   1f466:	4421                	c.li	s0,8
   1f468:	a051                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::sconstant;
   1f46a:	4415                	c.li	s0,5
   1f46c:	a041                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::exprloc;
   1f46e:	4419                	c.li	s0,6
   1f470:	a8b5                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::flag;
   1f472:	441d                	c.li	s0,7
   1f474:	a8a5                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::reference;
   1f476:	4431                	c.li	s0,12
   1f478:	a895                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::string;
   1f47a:	4435                	c.li	s0,13
   1f47c:	a885                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    return value::type::invalid;
   1f47e:	4401                	c.li	s0,0
   1f480:	a0b5                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f482:	05500793          	addi	a5,zero,85
   1f486:	04b7cd63          	blt	a5,a1,1f4e0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x118>
   1f48a:	47e1                	c.li	a5,24
   1f48c:	04b7d263          	bge	a5,a1,1f4d0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x108>
   1f490:	fe74871b          	addiw	a4,s1,-25
   1f494:	4785                	c.li	a5,1
   1f496:	00e797b3          	sll	a5,a5,a4
   1f49a:	0000e717          	auipc	a4,0xe
   1f49e:	6de73703          	ld	a4,1758(a4) # 2db78 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1e8>
   1f4a2:	8f7d                	c.and	a4,a5
   1f4a4:	12071a63          	bne	a4,zero,1f5d8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x210>
   1f4a8:	0000e717          	auipc	a4,0xe
   1f4ac:	6d873703          	ld	a4,1752(a4) # 2db80 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f0>
   1f4b0:	8ff9                	c.and	a5,a4
   1f4b2:	12079563          	bne	a5,zero,1f5dc <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x214>
   1f4b6:	04300793          	addi	a5,zero,67
   1f4ba:	12f48363          	beq	s1,a5,1f5e0 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x218>
                         to_string(name));
   1f4be:	4541                	c.li	a0,16
   1f4c0:	f61f60ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1f4c4:	892a                	c.mv	s2,a0
   1f4c6:	85a6                	c.mv	a1,s1
   1f4c8:	850a                	c.mv	a0,sp
   1f4ca:	7a7090ef          	jal	ra,29470 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
   1f4ce:	a035                	c.j	1f4fa <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x132>
    switch (name) {
   1f4d0:	4789                	c.li	a5,2
   1f4d2:	10f58163          	beq	a1,a5,1f5d4 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x20c>
   1f4d6:	47c1                	c.li	a5,16
      return value::type::line;
   1f4d8:	4421                	c.li	s0,8
    switch (name) {
   1f4da:	00f58963          	beq	a1,a5,1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f4de:	b7c5                	c.j	1f4be <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xf6>
   1f4e0:	77f9                	c.lui	a5,0xffffe
   1f4e2:	9fad                	c.addw	a5,a1
   1f4e4:	6709                	c.lui	a4,0x2
      return value::type::invalid;
   1f4e6:	4401                	c.li	s0,0
    switch (name) {
   1f4e8:	fce7fbe3          	bgeu	a5,a4,1f4be <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0xf6>
    : name(name), form(form), type(resolve_type(name, form)) {}
   1f4ec:	c500                	c.sw	s0,8(a0)
   1f4ee:	60e6                	c.ldsp	ra,88(sp)
   1f4f0:	6446                	c.ldsp	s0,80(sp)
   1f4f2:	64a6                	c.ldsp	s1,72(sp)
   1f4f4:	6906                	c.ldsp	s2,64(sp)
   1f4f6:	6125                	c.addi16sp	sp,96
   1f4f8:	8082                	c.jr	ra
    { return std::move(__rhs.insert(0, __lhs)); }
   1f4fa:	0000e617          	auipc	a2,0xe
   1f4fe:	56660613          	addi	a2,a2,1382 # 2da60 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0xd0>
   1f502:	4581                	c.li	a1,0
   1f504:	850a                	c.mv	a0,sp
   1f506:	e8bf60ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f50a:	85aa                	c.mv	a1,a0
   1f50c:	1000                	c.addi4spn	s0,sp,32
   1f50e:	8522                	c.mv	a0,s0
   1f510:	f61f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   1f514:	85a2                	c.mv	a1,s0
   1f516:	854a                	c.mv	a0,s2
   1f518:	888f70ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f51c:	0001a797          	auipc	a5,0x1a
   1f520:	03c7b783          	ld	a5,60(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   1f524:	07c1                	c.addi	a5,16
   1f526:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   1f52a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f52c:	181c                	c.addi4spn	a5,sp,48
   1f52e:	00f50463          	beq	a0,a5,1f536 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x16e>
   1f532:	fdff60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f536:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f538:	081c                	c.addi4spn	a5,sp,16
   1f53a:	00f50463          	beq	a0,a5,1f542 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x17a>
   1f53e:	fd3f60ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string(name));
   1f542:	0001a617          	auipc	a2,0x1a
   1f546:	e3e63603          	ld	a2,-450(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   1f54a:	0001a597          	auipc	a1,0x1a
   1f54e:	d665b583          	ld	a1,-666(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1f552:	854a                	c.mv	a0,s2
   1f554:	96cf70ef          	jal	ra,166c0 <__cxa_throw@plt>
  throw format_error("unknown attribute form " + to_string(form));
   1f558:	4541                	c.li	a0,16
   1f55a:	ec7f60ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   1f55e:	84aa                	c.mv	s1,a0
   1f560:	85a2                	c.mv	a1,s0
   1f562:	850a                	c.mv	a0,sp
   1f564:	7ee080ef          	jal	ra,27d52 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>
    { return std::move(__rhs.insert(0, __lhs)); }
   1f568:	0000e617          	auipc	a2,0xe
   1f56c:	52860613          	addi	a2,a2,1320 # 2da90 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x100>
   1f570:	4581                	c.li	a1,0
   1f572:	850a                	c.mv	a0,sp
   1f574:	e1df60ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   1f578:	85aa                	c.mv	a1,a0
   1f57a:	1000                	c.addi4spn	s0,sp,32
   1f57c:	8522                	c.mv	a0,s0
   1f57e:	ef3f60ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   1f582:	85a2                	c.mv	a1,s0
   1f584:	8526                	c.mv	a0,s1
   1f586:	81af70ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   1f58a:	0001a797          	auipc	a5,0x1a
   1f58e:	fce7b783          	ld	a5,-50(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   1f592:	07c1                	c.addi	a5,16
   1f594:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   1f596:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f598:	181c                	c.addi4spn	a5,sp,48
   1f59a:	00f50463          	beq	a0,a5,1f5a2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1da>
   1f59e:	f73f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f5a2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f5a4:	081c                	c.addi4spn	a5,sp,16
   1f5a6:	00f50463          	beq	a0,a5,1f5ae <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x1e6>
   1f5aa:	f67f60ef          	jal	ra,16510 <operator delete(void*)@plt>
   1f5ae:	0001a617          	auipc	a2,0x1a
   1f5b2:	dd263603          	ld	a2,-558(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   1f5b6:	0001a597          	auipc	a1,0x1a
   1f5ba:	cfa5b583          	ld	a1,-774(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   1f5be:	8526                	c.mv	a0,s1
   1f5c0:	900f70ef          	jal	ra,166c0 <__cxa_throw@plt>
  switch (form) {
   1f5c4:	4411                	c.li	s0,4
   1f5c6:	b71d                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::exprloc;
   1f5c8:	4419                	c.li	s0,6
   1f5ca:	b70d                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f5cc:	440d                	c.li	s0,3
   1f5ce:	bf39                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f5d0:	4425                	c.li	s0,9
   1f5d2:	bf29                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
    switch (name) {
   1f5d4:	4425                	c.li	s0,9
   1f5d6:	bf19                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
   1f5d8:	4425                	c.li	s0,9
   1f5da:	bf09                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::rangelist;
   1f5dc:	442d                	c.li	s0,11
   1f5de:	b739                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      return value::type::mac;
   1f5e0:	4429                	c.li	s0,10
   1f5e2:	b729                	c.j	1f4ec <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x124>
      { return _M_dataplus._M_p; }
   1f5e4:	842a                	c.mv	s0,a0
   1f5e6:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f5e8:	181c                	c.addi4spn	a5,sp,48
   1f5ea:	00f50463          	beq	a0,a5,1f5f2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x22a>
   1f5ee:	f23f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f5f2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f5f4:	081c                	c.addi4spn	a5,sp,16
   1f5f6:	00f50463          	beq	a0,a5,1f5fe <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x236>
   1f5fa:	f17f60ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string(name));
   1f5fe:	854a                	c.mv	a0,s2
   1f600:	ed1f60ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1f604:	8522                	c.mv	a0,s0
   1f606:	8eaf70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f60a:	842a                	c.mv	s0,a0
   1f60c:	b7dd                	c.j	1f5f2 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x22a>
   1f60e:	842a                	c.mv	s0,a0
   1f610:	b7fd                	c.j	1f5fe <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x236>
   1f612:	842a                	c.mv	s0,a0
   1f614:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   1f616:	181c                	c.addi4spn	a5,sp,48
   1f618:	00f50463          	beq	a0,a5,1f620 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x258>
   1f61c:	ef5f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   1f620:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   1f622:	081c                	c.addi4spn	a5,sp,16
   1f624:	00f50463          	beq	a0,a5,1f62c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x264>
   1f628:	ee9f60ef          	jal	ra,16510 <operator delete(void*)@plt>
  throw format_error("unknown attribute form " + to_string(form));
   1f62c:	8526                	c.mv	a0,s1
   1f62e:	ea3f60ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   1f632:	8522                	c.mv	a0,s0
   1f634:	8bcf70ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   1f638:	842a                	c.mv	s0,a0
   1f63a:	b7dd                	c.j	1f620 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x258>
   1f63c:	842a                	c.mv	s0,a0
   1f63e:	b7fd                	c.j	1f62c <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)+0x264>

000000000001f640 <dwarf::abbrev_entry::read(dwarf::cursor*)>:

bool abbrev_entry::read(cursor *cur) {
   1f640:	715d                	c.addi16sp	sp,-80
   1f642:	e486                	c.sdsp	ra,72(sp)
   1f644:	e0a2                	c.sdsp	s0,64(sp)
   1f646:	fc26                	c.sdsp	s1,56(sp)
   1f648:	f84a                	c.sdsp	s2,48(sp)
   1f64a:	f44e                	c.sdsp	s3,40(sp)
   1f64c:	f052                	c.sdsp	s4,32(sp)
   1f64e:	ec56                	c.sdsp	s5,24(sp)
   1f650:	e85a                	c.sdsp	s6,16(sp)
   1f652:	84aa                	c.mv	s1,a0
   1f654:	842e                	c.mv	s0,a1
      { _M_erase_at_end(this->_M_impl._M_start); }
   1f656:	691c                	c.ld	a5,16(a0)
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f658:	6d18                	c.ld	a4,24(a0)
   1f65a:	00e78363          	beq	a5,a4,1f660 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x20>
	    this->_M_impl._M_finish = __pos;
   1f65e:	ed1c                	c.sd	a5,24(a0)
    while (pos < sec->end) {
   1f660:	681c                	c.ld	a5,16(s0)
   1f662:	6008                	c.ld	a0,0(s0)
   1f664:	6918                	c.ld	a4,16(a0)
   1f666:	02e7f763          	bgeu	a5,a4,1f694 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x54>
   1f66a:	4581                	c.li	a1,0
   1f66c:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   1f66e:	0785                	c.addi	a5,1
   1f670:	e81c                	c.sd	a5,16(s0)
   1f672:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f676:	07f77693          	andi	a3,a4,127
   1f67a:	00c696b3          	sll	a3,a3,a2
   1f67e:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1f680:	0187171b          	slliw	a4,a4,0x18
   1f684:	4187571b          	sraiw	a4,a4,0x18
   1f688:	02075663          	bge	a4,zero,1f6b4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x74>
      shift += 7;
   1f68c:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1f68e:	6918                	c.ld	a4,16(a0)
   1f690:	fce7efe3          	bltu	a5,a4,1f66e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x2e>
    underflow();
   1f694:	8522                	c.mv	a0,s0
   1f696:	ca2fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
  attributes.clear();

  // Section 7.5.3
  code = cur->uleb128();
   1f69a:	0004b023          	sd	zero,0(s1)
  if (!code)
    return false;
   1f69e:	4501                	c.li	a0,0
      break;
    attributes.push_back(attribute_spec(name, form));
  }
  attributes.shrink_to_fit();
  return true;
}
   1f6a0:	60a6                	c.ldsp	ra,72(sp)
   1f6a2:	6406                	c.ldsp	s0,64(sp)
   1f6a4:	74e2                	c.ldsp	s1,56(sp)
   1f6a6:	7942                	c.ldsp	s2,48(sp)
   1f6a8:	79a2                	c.ldsp	s3,40(sp)
   1f6aa:	7a02                	c.ldsp	s4,32(sp)
   1f6ac:	6ae2                	c.ldsp	s5,24(sp)
   1f6ae:	6b42                	c.ldsp	s6,16(sp)
   1f6b0:	6161                	c.addi16sp	sp,80
   1f6b2:	8082                	c.jr	ra
  code = cur->uleb128();
   1f6b4:	e08c                	c.sd	a1,0(s1)
  if (!code)
   1f6b6:	12058263          	beq	a1,zero,1f7da <dwarf::abbrev_entry::read(dwarf::cursor*)+0x19a>
    while (pos < sec->end) {
   1f6ba:	681c                	c.ld	a5,16(s0)
   1f6bc:	6008                	c.ld	a0,0(s0)
   1f6be:	6918                	c.ld	a4,16(a0)
   1f6c0:	02e7f763          	bgeu	a5,a4,1f6ee <dwarf::abbrev_entry::read(dwarf::cursor*)+0xae>
    std::uint64_t result = 0;
   1f6c4:	4581                	c.li	a1,0
    int shift = 0;
   1f6c6:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   1f6c8:	0785                	c.addi	a5,1
   1f6ca:	e81c                	c.sd	a5,16(s0)
   1f6cc:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f6d0:	07f77693          	andi	a3,a4,127
   1f6d4:	00c696b3          	sll	a3,a3,a2
   1f6d8:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   1f6da:	0187171b          	slliw	a4,a4,0x18
   1f6de:	4187571b          	sraiw	a4,a4,0x18
   1f6e2:	00075a63          	bge	a4,zero,1f6f6 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xb6>
      shift += 7;
   1f6e6:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1f6e8:	6918                	c.ld	a4,16(a0)
   1f6ea:	fce7efe3          	bltu	a5,a4,1f6c8 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x88>
    underflow();
   1f6ee:	8522                	c.mv	a0,s0
   1f6f0:	c48fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1f6f4:	4581                	c.li	a1,0
  tag = (DW_TAG)cur->uleb128();
   1f6f6:	c48c                	c.sw	a1,8(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1f6f8:	601c                	c.ld	a5,0(s0)
   1f6fa:	6b98                	c.ld	a4,16(a5)
   1f6fc:	681c                	c.ld	a5,16(s0)
   1f6fe:	00e7e563          	bltu	a5,a4,1f708 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xc8>
      underflow();
   1f702:	8522                	c.mv	a0,s0
   1f704:	c34fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1f708:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   1f70a:	601c                	c.ld	a5,0(s0)
   1f70c:	4fdc                	c.lw	a5,28(a5)
   1f70e:	cbe1                	c.beqz	a5,1f7de <dwarf::abbrev_entry::read(dwarf::cursor*)+0x19e>
        val = (val << 8) | (uint64_t)p[i];
   1f710:	00074783          	lbu	a5,0(a4) # 2000 <__abi_tag-0xe294>
      for (unsigned i = 0; i < sizeof(T); i++)
   1f714:	a0f9                	c.j	1f7e2 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x1a2>
    DW_FORM form = (DW_FORM)cur->uleb128();
   1f716:	2601                	c.addiw	a2,0
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   1f718:	00cb67b3          	or	a5,s6,a2
   1f71c:	c7dd                	c.beqz	a5,1f7ca <dwarf::abbrev_entry::read(dwarf::cursor*)+0x18a>
    attributes.push_back(attribute_spec(name, form));
   1f71e:	85da                	c.mv	a1,s6
   1f720:	854e                	c.mv	a0,s3
   1f722:	ca7ff0ef          	jal	ra,1f3c8 <dwarf::attribute_spec::attribute_spec(dwarf::DW_AT, dwarf::DW_FORM)>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f726:	6c8c                	c.ld	a1,24(s1)
   1f728:	709c                	c.ld	a5,32(s1)
   1f72a:	08f58c63          	beq	a1,a5,1f7c2 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x182>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f72e:	4782                	c.lwsp	a5,0(sp)
   1f730:	c19c                	c.sw	a5,0(a1)
   1f732:	4792                	c.lwsp	a5,4(sp)
   1f734:	c1dc                	c.sw	a5,4(a1)
   1f736:	47a2                	c.lwsp	a5,8(sp)
   1f738:	c59c                	c.sw	a5,8(a1)
	    ++this->_M_impl._M_finish;
   1f73a:	6c9c                	c.ld	a5,24(s1)
   1f73c:	07b1                	c.addi	a5,12
   1f73e:	ec9c                	c.sd	a5,24(s1)
    while (pos < sec->end) {
   1f740:	681c                	c.ld	a5,16(s0)
   1f742:	600c                	c.ld	a1,0(s0)
   1f744:	6998                	c.ld	a4,16(a1)
   1f746:	02e7f863          	bgeu	a5,a4,1f776 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x136>
    std::uint64_t result = 0;
   1f74a:	4b01                	c.li	s6,0
    int shift = 0;
   1f74c:	864a                	c.mv	a2,s2
      uint8_t byte = *(uint8_t *)(pos++);
   1f74e:	0785                	c.addi	a5,1
   1f750:	e81c                	c.sd	a5,16(s0)
   1f752:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f756:	07f77693          	andi	a3,a4,127
   1f75a:	00c696b3          	sll	a3,a3,a2
   1f75e:	00db6b33          	or	s6,s6,a3
      if ((byte & 0x80) == 0)
   1f762:	0187171b          	slliw	a4,a4,0x18
   1f766:	4187571b          	sraiw	a4,a4,0x18
   1f76a:	00075a63          	bge	a4,zero,1f77e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x13e>
      shift += 7;
   1f76e:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   1f770:	6998                	c.ld	a4,16(a1)
   1f772:	fce7eee3          	bltu	a5,a4,1f74e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x10e>
    underflow();
   1f776:	8522                	c.mv	a0,s0
   1f778:	bc0fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1f77c:	4b01                	c.li	s6,0
    DW_AT name = (DW_AT)cur->uleb128();
   1f77e:	2b01                	c.addiw	s6,0
    while (pos < sec->end) {
   1f780:	681c                	c.ld	a5,16(s0)
   1f782:	6008                	c.ld	a0,0(s0)
   1f784:	6918                	c.ld	a4,16(a0)
   1f786:	02e7f763          	bgeu	a5,a4,1f7b4 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x174>
    std::uint64_t result = 0;
   1f78a:	4601                	c.li	a2,0
    int shift = 0;
   1f78c:	85ca                	c.mv	a1,s2
      uint8_t byte = *(uint8_t *)(pos++);
   1f78e:	0785                	c.addi	a5,1
   1f790:	e81c                	c.sd	a5,16(s0)
   1f792:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1f796:	07f77693          	andi	a3,a4,127
   1f79a:	00b696b3          	sll	a3,a3,a1
   1f79e:	8e55                	c.or	a2,a3
      if ((byte & 0x80) == 0)
   1f7a0:	0187171b          	slliw	a4,a4,0x18
   1f7a4:	4187571b          	sraiw	a4,a4,0x18
   1f7a8:	f60757e3          	bge	a4,zero,1f716 <dwarf::abbrev_entry::read(dwarf::cursor*)+0xd6>
      shift += 7;
   1f7ac:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1f7ae:	6918                	c.ld	a4,16(a0)
   1f7b0:	fce7efe3          	bltu	a5,a4,1f78e <dwarf::abbrev_entry::read(dwarf::cursor*)+0x14e>
    underflow();
   1f7b4:	8522                	c.mv	a0,s0
   1f7b6:	b82fb0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    if (name == (DW_AT)0 && form == (DW_FORM)0)
   1f7ba:	000b0863          	beq	s6,zero,1f7ca <dwarf::abbrev_entry::read(dwarf::cursor*)+0x18a>
    DW_FORM form = (DW_FORM)cur->uleb128();
   1f7be:	864a                	c.mv	a2,s2
   1f7c0:	bfb9                	c.j	1f71e <dwarf::abbrev_entry::read(dwarf::cursor*)+0xde>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   1f7c2:	864e                	c.mv	a2,s3
   1f7c4:	8552                	c.mv	a0,s4
   1f7c6:	9a82                	c.jalr	s5
  }
   1f7c8:	bfa5                	c.j	1f740 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x100>
      { _M_shrink_to_fit(); }
   1f7ca:	8552                	c.mv	a0,s4
   1f7cc:	0001a317          	auipc	t1,0x1a
   1f7d0:	dd433303          	ld	t1,-556(t1) # 395a0 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()@@Base+0x19d9e>
   1f7d4:	9302                	c.jalr	t1
  return true;
   1f7d6:	4505                	c.li	a0,1
   1f7d8:	b5e1                	c.j	1f6a0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x60>
    return false;
   1f7da:	4501                	c.li	a0,0
   1f7dc:	b5d1                	c.j	1f6a0 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x60>
        val |= ((uint64_t)p[i]) << (i * 8);
   1f7de:	00074783          	lbu	a5,0(a4)
  attributes.clear();
   1f7e2:	01048a13          	addi	s4,s1,16
    pos += sizeof(T);
   1f7e6:	0705                	c.addi	a4,1
   1f7e8:	e818                	c.sd	a4,16(s0)
  children = cur->fixed<DW_CHILDREN>() == DW_CHILDREN::yes;
   1f7ea:	17fd                	c.addi	a5,-1
   1f7ec:	0017b793          	sltiu	a5,a5,1
   1f7f0:	00f48623          	sb	a5,12(s1)
    int shift = 0;
   1f7f4:	4901                	c.li	s2,0
    attributes.push_back(attribute_spec(name, form));
   1f7f6:	898a                	c.mv	s3,sp
   1f7f8:	0001aa97          	auipc	s5,0x1a
   1f7fc:	ca8aba83          	ld	s5,-856(s5) # 394a0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)@@Base+0x19bde>
   1f800:	b781                	c.j	1f740 <dwarf::abbrev_entry::read(dwarf::cursor*)+0x100>

000000000001f802 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()>:

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    bool
    vector<_Tp, _Alloc>::
   1f802:	7179                	c.addi16sp	sp,-48
   1f804:	f406                	c.sdsp	ra,40(sp)
   1f806:	f022                	c.sdsp	s0,32(sp)
   1f808:	ec26                	c.sdsp	s1,24(sp)
   1f80a:	e84a                	c.sdsp	s2,16(sp)
   1f80c:	e44e                	c.sdsp	s3,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f80e:	6500                	c.ld	s0,8(a0)
    _M_shrink_to_fit()
    {
      if (capacity() == size())
   1f810:	691c                	c.ld	a5,16(a0)
   1f812:	0af40063          	beq	s0,a5,1f8b2 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb0>
   1f816:	84aa                	c.mv	s1,a0
			 - this->_M_impl._M_start); }
   1f818:	00053983          	ld	s3,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f81c:	41340933          	sub	s2,s0,s3
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
   1f820:	57c5                	c.li	a5,-15
   1f822:	8385                	c.srli	a5,0x1
   1f824:	0127e863          	bltu	a5,s2,1f834 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x32>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f828:	06090f63          	beq	s2,zero,1f8a6 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xa4>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f82c:	854a                	c.mv	a0,s2
   1f82e:	cf3f60ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1f832:	a829                	c.j	1f84c <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4a>
	  __throw_length_error(
   1f834:	0000e517          	auipc	a0,0xe
   1f838:	2fc50513          	addi	a0,a0,764 # 2db30 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1a0>
   1f83c:	c05f60ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
		__make_move_if_noexcept_iterator(__c.end()),
		__c.get_allocator()).swap(__c);
	    return true;
	  }
	catch(...)
   1f840:	bc1f60ef          	jal	ra,16400 <__cxa_begin_catch@plt>
   1f844:	e4df60ef          	jal	ra,16690 <__cxa_end_catch@plt>
	  { return false; }
   1f848:	4501                	c.li	a0,0
   1f84a:	a0ad                	c.j	1f8b4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
   1f84c:	862a                	c.mv	a2,a0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   1f84e:	9932                	c.add	s2,a2
	  for (; __first != __last; ++__first, (void)++__cur)
   1f850:	05340d63          	beq	s0,s3,1f8aa <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xa8>
   1f854:	87ce                	c.mv	a5,s3
      _ForwardIterator __cur = __result;
   1f856:	8732                	c.mv	a4,a2
   1f858:	4394                	c.lw	a3,0(a5)
   1f85a:	c314                	c.sw	a3,0(a4)
   1f85c:	43d4                	c.lw	a3,4(a5)
   1f85e:	c354                	c.sw	a3,4(a4)
   1f860:	4794                	c.lw	a3,8(a5)
   1f862:	c714                	c.sw	a3,8(a4)
	  for (; __first != __last; ++__first, (void)++__cur)
   1f864:	0731                	c.addi	a4,12
   1f866:	07b1                	c.addi	a5,12
   1f868:	fef418e3          	bne	s0,a5,1f858 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x56>
   1f86c:	ff440793          	addi	a5,s0,-12
   1f870:	413787b3          	sub	a5,a5,s3
   1f874:	8389                	c.srli	a5,0x2
   1f876:	0000e717          	auipc	a4,0xe
   1f87a:	31273703          	ld	a4,786(a4) # 2db88 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   1f87e:	02e787b3          	mul	a5,a5,a4
   1f882:	078a                	c.slli	a5,0x2
   1f884:	8389                	c.srli	a5,0x2
   1f886:	0785                	c.addi	a5,1
   1f888:	00179713          	slli	a4,a5,0x1
   1f88c:	97ba                	c.add	a5,a4
   1f88e:	078a                	c.slli	a5,0x2
   1f890:	97b2                	c.add	a5,a2
	  _M_start = __x._M_start;
   1f892:	6088                	c.ld	a0,0(s1)
   1f894:	e090                	c.sd	a2,0(s1)
	  _M_finish = __x._M_finish;
   1f896:	e49c                	c.sd	a5,8(s1)
	  _M_end_of_storage = __x._M_end_of_storage;
   1f898:	0124b823          	sd	s2,16(s1)
	if (__p)
   1f89c:	c909                	c.beqz	a0,1f8ae <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xac>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f89e:	c73f60ef          	jal	ra,16510 <operator delete(void*)@plt>
	    return true;
   1f8a2:	4505                	c.li	a0,1
      { __a.deallocate(__p, __n); }
   1f8a4:	a801                	c.j	1f8b4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f8a6:	4601                	c.li	a2,0
   1f8a8:	b75d                	c.j	1f84e <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x4c>
      _ForwardIterator __cur = __result;
   1f8aa:	87b2                	c.mv	a5,a2
   1f8ac:	b7dd                	c.j	1f892 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0x90>
   1f8ae:	4505                	c.li	a0,1
   1f8b0:	a011                	c.j	1f8b4 <std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_shrink_to_fit()+0xb2>
	return false;
   1f8b2:	4501                	c.li	a0,0
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }
   1f8b4:	70a2                	c.ldsp	ra,40(sp)
   1f8b6:	7402                	c.ldsp	s0,32(sp)
   1f8b8:	64e2                	c.ldsp	s1,24(sp)
   1f8ba:	6942                	c.ldsp	s2,16(sp)
   1f8bc:	69a2                	c.ldsp	s3,8(sp)
   1f8be:	6145                	c.addi16sp	sp,48
   1f8c0:	8082                	c.jr	ra

000000000001f8c2 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)>:
      vector<_Tp, _Alloc>::
   1f8c2:	715d                	c.addi16sp	sp,-80
   1f8c4:	e486                	c.sdsp	ra,72(sp)
   1f8c6:	e0a2                	c.sdsp	s0,64(sp)
   1f8c8:	fc26                	c.sdsp	s1,56(sp)
   1f8ca:	f84a                	c.sdsp	s2,48(sp)
   1f8cc:	f44e                	c.sdsp	s3,40(sp)
   1f8ce:	f052                	c.sdsp	s4,32(sp)
   1f8d0:	ec56                	c.sdsp	s5,24(sp)
   1f8d2:	e85a                	c.sdsp	s6,16(sp)
   1f8d4:	e45e                	c.sdsp	s7,8(sp)
   1f8d6:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f8d8:	6504                	c.ld	s1,8(a0)
   1f8da:	00053983          	ld	s3,0(a0)
   1f8de:	413487b3          	sub	a5,s1,s3
   1f8e2:	8789                	c.srai	a5,0x2
   1f8e4:	0000e717          	auipc	a4,0xe
   1f8e8:	ba473703          	ld	a4,-1116(a4) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   1f8ec:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   1f8f0:	0000e717          	auipc	a4,0xe
   1f8f4:	2a073703          	ld	a4,672(a4) # 2db90 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   1f8f8:	02e78963          	beq	a5,a4,1f92a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x68>
   1f8fc:	8a2a                	c.mv	s4,a0
   1f8fe:	842e                	c.mv	s0,a1
   1f900:	8b32                	c.mv	s6,a2
   1f902:	8bae                	c.mv	s7,a1
      return __a;
   1f904:	873e                	c.mv	a4,a5
      if (__a < __b)
   1f906:	03348863          	beq	s1,s3,1f936 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x74>
	const size_type __len = size() + (std::max)(size(), __n);
   1f90a:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f90c:	02f76963          	bltu	a4,a5,1f93e <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x7c>
   1f910:	8aba                	c.mv	s5,a4
   1f912:	0000e797          	auipc	a5,0xe
   1f916:	27e7b783          	ld	a5,638(a5) # 2db90 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
   1f91a:	00e7f363          	bgeu	a5,a4,1f920 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x5e>
   1f91e:	8abe                	c.mv	s5,a5
    { return __lhs.base() - __rhs.base(); }
   1f920:	41340c33          	sub	s8,s0,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1f924:	4901                	c.li	s2,0
   1f926:	cb0d                	c.beqz	a4,1f958 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x96>
   1f928:	a00d                	c.j	1f94a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x88>
	  __throw_length_error(__N(__s));
   1f92a:	0000e517          	auipc	a0,0xe
   1f92e:	92650513          	addi	a0,a0,-1754 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   1f932:	b0ff60ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   1f936:	4705                	c.li	a4,1
   1f938:	bfc9                	c.j	1f90a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x48>
      _ForwardIterator __cur = __result;
   1f93a:	8b4a                	c.mv	s6,s2
   1f93c:	a895                	c.j	1f9b0 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xee>
   1f93e:	41340c33          	sub	s8,s0,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1f942:	0000ea97          	auipc	s5,0xe
   1f946:	24eaba83          	ld	s5,590(s5) # 2db90 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x200>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f94a:	001a9513          	slli	a0,s5,0x1
   1f94e:	9556                	c.add	a0,s5
   1f950:	050a                	c.slli	a0,0x2
   1f952:	bcff60ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1f956:	892a                	c.mv	s2,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f958:	018907b3          	add	a5,s2,s8
   1f95c:	000b2703          	lw	a4,0(s6)
   1f960:	c398                	c.sw	a4,0(a5)
   1f962:	004b2703          	lw	a4,4(s6)
   1f966:	c3d8                	c.sw	a4,4(a5)
   1f968:	008b2703          	lw	a4,8(s6)
   1f96c:	c798                	c.sw	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   1f96e:	fd3b86e3          	beq	s7,s3,1f93a <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x78>
      _ForwardIterator __cur = __result;
   1f972:	874a                	c.mv	a4,s2
      for (; __first != __last; ++__first, (void)++__cur)
   1f974:	87ce                	c.mv	a5,s3
   1f976:	4394                	c.lw	a3,0(a5)
   1f978:	c314                	c.sw	a3,0(a4)
   1f97a:	43d4                	c.lw	a3,4(a5)
   1f97c:	c354                	c.sw	a3,4(a4)
   1f97e:	4794                	c.lw	a3,8(a5)
   1f980:	c714                	c.sw	a3,8(a4)
   1f982:	07b1                	c.addi	a5,12
   1f984:	0731                	c.addi	a4,12
   1f986:	ff7798e3          	bne	a5,s7,1f976 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xb4>
   1f98a:	ff440793          	addi	a5,s0,-12
   1f98e:	413787b3          	sub	a5,a5,s3
   1f992:	8389                	c.srli	a5,0x2
   1f994:	0000e717          	auipc	a4,0xe
   1f998:	1f473703          	ld	a4,500(a4) # 2db88 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   1f99c:	02e787b3          	mul	a5,a5,a4
   1f9a0:	078a                	c.slli	a5,0x2
   1f9a2:	8389                	c.srli	a5,0x2
   1f9a4:	0785                	c.addi	a5,1
   1f9a6:	00179b13          	slli	s6,a5,0x1
   1f9aa:	9b3e                	c.add	s6,a5
   1f9ac:	0b0a                	c.slli	s6,0x2
   1f9ae:	9b4a                	c.add	s6,s2
	      ++__new_finish;
   1f9b0:	0b31                	c.addi	s6,12
   1f9b2:	049b8063          	beq	s7,s1,1f9f2 <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x130>
   1f9b6:	87a2                	c.mv	a5,s0
      _ForwardIterator __cur = __result;
   1f9b8:	875a                	c.mv	a4,s6
   1f9ba:	4394                	c.lw	a3,0(a5)
   1f9bc:	c314                	c.sw	a3,0(a4)
   1f9be:	43d4                	c.lw	a3,4(a5)
   1f9c0:	c354                	c.sw	a3,4(a4)
   1f9c2:	4794                	c.lw	a3,8(a5)
   1f9c4:	c714                	c.sw	a3,8(a4)
      for (; __first != __last; ++__first, (void)++__cur)
   1f9c6:	07b1                	c.addi	a5,12
   1f9c8:	0731                	c.addi	a4,12
   1f9ca:	fe9798e3          	bne	a5,s1,1f9ba <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0xf8>
   1f9ce:	408487b3          	sub	a5,s1,s0
   1f9d2:	17d1                	c.addi	a5,-12
   1f9d4:	8389                	c.srli	a5,0x2
   1f9d6:	0000e717          	auipc	a4,0xe
   1f9da:	1b273703          	ld	a4,434(a4) # 2db88 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x1f8>
   1f9de:	02e787b3          	mul	a5,a5,a4
   1f9e2:	078a                	c.slli	a5,0x2
   1f9e4:	8389                	c.srli	a5,0x2
   1f9e6:	0785                	c.addi	a5,1
   1f9e8:	00179713          	slli	a4,a5,0x1
   1f9ec:	97ba                	c.add	a5,a4
   1f9ee:	078a                	c.slli	a5,0x2
   1f9f0:	9b3e                	c.add	s6,a5
	if (__p)
   1f9f2:	00098563          	beq	s3,zero,1f9fc <void std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> >::_M_realloc_insert<dwarf::attribute_spec>(__gnu_cxx::__normal_iterator<dwarf::attribute_spec*, std::vector<dwarf::attribute_spec, std::allocator<dwarf::attribute_spec> > >, dwarf::attribute_spec&&)+0x13a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f9f6:	854e                	c.mv	a0,s3
   1f9f8:	b19f60ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   1f9fc:	012a3023          	sd	s2,0(s4)
      this->_M_impl._M_finish = __new_finish;
   1fa00:	016a3423          	sd	s6,8(s4)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1fa04:	001a9793          	slli	a5,s5,0x1
   1fa08:	97d6                	c.add	a5,s5
   1fa0a:	078a                	c.slli	a5,0x2
   1fa0c:	993e                	c.add	s2,a5
   1fa0e:	012a3823          	sd	s2,16(s4)
    }
   1fa12:	60a6                	c.ldsp	ra,72(sp)
   1fa14:	6406                	c.ldsp	s0,64(sp)
   1fa16:	74e2                	c.ldsp	s1,56(sp)
   1fa18:	7942                	c.ldsp	s2,48(sp)
   1fa1a:	79a2                	c.ldsp	s3,40(sp)
   1fa1c:	7a02                	c.ldsp	s4,32(sp)
   1fa1e:	6ae2                	c.ldsp	s5,24(sp)
   1fa20:	6b42                	c.ldsp	s6,16(sp)
   1fa22:	6ba2                	c.ldsp	s7,8(sp)
   1fa24:	6c02                	c.ldsp	s8,0(sp)
   1fa26:	6161                	c.addi16sp	sp,80
   1fa28:	8082                	c.jr	ra

000000000001fa2a <dwarf::expr::expr(dwarf::unit const*, unsigned long, unsigned long)>:
DWARFPP_BEGIN_NAMESPACE

expr_context no_expr_context;

expr::expr(const unit *cu, section_offset offset, section_length len)
    : cu(cu), offset(offset), len(len) {}
   1fa2a:	e10c                	c.sd	a1,0(a0)
   1fa2c:	e510                	c.sd	a2,8(a0)
   1fa2e:	e914                	c.sd	a3,16(a0)
   1fa30:	8082                	c.jr	ra

000000000001fa32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>:
  return evaluate(ctx, {argument});
}

expr_result
expr::evaluate(expr_context *ctx,
               const std::initializer_list<taddr> &arguments) const {
   1fa32:	7169                	c.addi16sp	sp,-304
   1fa34:	f606                	c.sdsp	ra,296(sp)
   1fa36:	f222                	c.sdsp	s0,288(sp)
   1fa38:	ee26                	c.sdsp	s1,280(sp)
   1fa3a:	ea4a                	c.sdsp	s2,272(sp)
   1fa3c:	e64e                	c.sdsp	s3,264(sp)
   1fa3e:	e252                	c.sdsp	s4,256(sp)
   1fa40:	fdd6                	c.sdsp	s5,248(sp)
   1fa42:	f9da                	c.sdsp	s6,240(sp)
   1fa44:	f5de                	c.sdsp	s7,232(sp)
   1fa46:	f1e2                	c.sdsp	s8,224(sp)
   1fa48:	ede6                	c.sdsp	s9,216(sp)
   1fa4a:	e9ea                	c.sdsp	s10,208(sp)
   1fa4c:	e5ee                	c.sdsp	s11,200(sp)
   1fa4e:	8aaa                	c.mv	s5,a0
   1fa50:	892e                	c.mv	s2,a1
   1fa52:	8b32                	c.mv	s6,a2
   1fa54:	89b6                	c.mv	s3,a3
  small_vector() : base((T *)buf), end(base), cap((T *)&buf[sizeof(T[Min])]) {}
   1fa56:	10bc                	c.addi4spn	a5,sp,104
   1fa58:	f53e                	c.sdsp	a5,168(sp)
   1fa5a:	f93e                	c.sdsp	a5,176(sp)
   1fa5c:	113c                	c.addi4spn	a5,sp,168
   1fa5e:	fd3e                	c.sdsp	a5,184(sp)
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
   1fa60:	6698                	c.ld	a4,8(a3)
    if (n <= (size_type)(cap - base))
   1fa62:	47a1                	c.li	a5,8
   1fa64:	04e7f363          	bgeu	a5,a4,1faaa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x78>
      target <<= 1;
   1fa68:	0786                	c.slli	a5,0x1
    while (target < n)
   1fa6a:	fee7efe3          	bltu	a5,a4,1fa68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x36>
    char *newbuf = new char[sizeof(T[target])];
   1fa6e:	00379413          	slli	s0,a5,0x3
   1fa72:	8522                	c.mv	a0,s0
   1fa74:	8bdf60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1fa78:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   1fa7a:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1fa7c:	774a                	c.ldsp	a4,176(sp)
   1fa7e:	04e57263          	bgeu	a0,a4,1fac2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x90>
    T *src = base, *dest = (T *)newbuf;
   1fa82:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1fa84:	07a1                	c.addi	a5,8
   1fa86:	fee7efe3          	bltu	a5,a4,1fa84 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x52>
   1fa8a:	fff70493          	addi	s1,a4,-1
   1fa8e:	8c89                	c.sub	s1,a0
   1fa90:	98e1                	c.andi	s1,-8
   1fa92:	04a1                	c.addi	s1,8
   1fa94:	94d2                	c.add	s1,s4
    if ((char *)base != buf)
   1fa96:	10bc                	c.addi4spn	a5,sp,104
   1fa98:	00f50563          	beq	a0,a5,1faa2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70>
      delete[] (char *)base;
   1fa9c:	c119                	c.beqz	a0,1faa2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70>
   1fa9e:	b23f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1faa2:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   1faa4:	f926                	c.sdsp	s1,176(sp)
    cap = base + target;
   1faa6:	9a22                	c.add	s4,s0
   1faa8:	fd52                	c.sdsp	s4,184(sp)

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
   1faaa:	0009b783          	ld	a5,0(s3)

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
   1faae:	0089b483          	ld	s1,8(s3)
   1fab2:	048e                	c.slli	s1,0x3
  small_vector<taddr, 8> stack;

  // Create the initial stack.  arguments are in reverse order
  // (that is, element 0 is TOS), so reverse it.
  stack.reserve(arguments.size());
  for (const taddr *elt = arguments.end() - 1; elt >= arguments.begin(); elt--)
   1fab4:	14e1                	c.addi	s1,-8
   1fab6:	94be                	c.add	s1,a5
   1fab8:	08f4e563          	bltu	s1,a5,1fb42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110>
    if ((char *)base != buf)
   1fabc:	06810a13          	addi	s4,sp,104
   1fac0:	a881                	c.j	1fb10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde>
    T *src = base, *dest = (T *)newbuf;
   1fac2:	84d2                	c.mv	s1,s4
   1fac4:	bfc9                	c.j	1fa96 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x64>
    char *newbuf = new char[sizeof(T[target])];
   1fac6:	8c2a                	c.mv	s8,a0
    T *src = base, *dest = (T *)newbuf;
   1fac8:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1faca:	774a                	c.ldsp	a4,176(sp)
   1facc:	06e57963          	bgeu	a0,a4,1fb3e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x10c>
    T *src = base, *dest = (T *)newbuf;
   1fad0:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1fad2:	07a1                	c.addi	a5,8
   1fad4:	fee7efe3          	bltu	a5,a4,1fad2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa0>
   1fad8:	fff70b93          	addi	s7,a4,-1
   1fadc:	40ab8bb3          	sub	s7,s7,a0
   1fae0:	ff8bfb93          	andi	s7,s7,-8
   1fae4:	0ba1                	c.addi	s7,8
   1fae6:	9be2                	c.add	s7,s8
    if ((char *)base != buf)
   1fae8:	01450563          	beq	a0,s4,1faf2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc0>
      delete[] (char *)base;
   1faec:	c119                	c.beqz	a0,1faf2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc0>
   1faee:	ad3f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1faf2:	f562                	c.sdsp	s8,168(sp)
    end = dest;
   1faf4:	f95e                	c.sdsp	s7,176(sp)
    cap = base + target;
   1faf6:	9c22                	c.add	s8,s0
   1faf8:	fd62                	c.sdsp	s8,184(sp)
    new (end) T(x);
   1fafa:	6098                	c.ld	a4,0(s1)
   1fafc:	77ca                	c.ldsp	a5,176(sp)
   1fafe:	e398                	c.sd	a4,0(a5)
    end++;
   1fb00:	77ca                	c.ldsp	a5,176(sp)
   1fb02:	07a1                	c.addi	a5,8
   1fb04:	f93e                	c.sdsp	a5,176(sp)
   1fb06:	14e1                	c.addi	s1,-8
   1fb08:	0009b783          	ld	a5,0(s3)
   1fb0c:	02f4eb63          	bltu	s1,a5,1fb42 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x110>
  size_type size() const { return end - base; }
   1fb10:	772a                	c.ldsp	a4,168(sp)
   1fb12:	77ca                	c.ldsp	a5,176(sp)
   1fb14:	8f99                	c.sub	a5,a4
   1fb16:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   1fb18:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   1fb1a:	756a                	c.ldsp	a0,184(sp)
   1fb1c:	8d19                	c.sub	a0,a4
   1fb1e:	850d                	c.srai	a0,0x3
   1fb20:	fcf57de3          	bgeu	a0,a5,1fafa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc8>
   1fb24:	e111                	c.bnez	a0,1fb28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf6>
   1fb26:	4505                	c.li	a0,1
    while (target < n)
   1fb28:	00f57563          	bgeu	a0,a5,1fb32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x100>
      target <<= 1;
   1fb2c:	0506                	c.slli	a0,0x1
    while (target < n)
   1fb2e:	fef56fe3          	bltu	a0,a5,1fb2c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfa>
    char *newbuf = new char[sizeof(T[target])];
   1fb32:	00351413          	slli	s0,a0,0x3
   1fb36:	8522                	c.mv	a0,s0
   1fb38:	ff8f60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1fb3c:	b769                	c.j	1fac6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x94>
    T *src = base, *dest = (T *)newbuf;
   1fb3e:	8be2                	c.mv	s7,s8
   1fb40:	b765                	c.j	1fae8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb6>
    stack.push_back(*elt);

  // Create a subsection for just this expression so we can
  // easily detect the end (including premature end).
  auto cusec = cu->data();
   1fb42:	00093503          	ld	a0,0(s2)
   1fb46:	c6cf70ef          	jal	ra,16fb2 <dwarf::unit::data() const>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fb4a:	00053983          	ld	s3,0(a0)
      : _M_pi(__r._M_pi)
   1fb4e:	00853b83          	ld	s7,8(a0)
	if (_M_pi != nullptr)
   1fb52:	000b8e63          	beq	s7,zero,1fb6e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13c>
    if (__is_single_threaded())
   1fb56:	0001a797          	auipc	a5,0x1a
   1fb5a:	92a7b783          	ld	a5,-1750(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fb5e:	0007c783          	lbu	a5,0(a5)
   1fb62:	c385                	c.beqz	a5,1fb82 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x150>
  { *__mem += __val; }
   1fb64:	030ba783          	lw	a5,48(s7)
   1fb68:	2785                	c.addiw	a5,1
   1fb6a:	02fba823          	sw	a5,48(s7)
  shared_ptr<section> subsec(
      make_shared<section>(cusec->type, cusec->begin + offset, len, cusec->ord,
   1fb6e:	0089b403          	ld	s0,8(s3)
   1fb72:	00893783          	ld	a5,8(s2)
   1fb76:	943e                	c.add	s0,a5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1fb78:	06000513          	addi	a0,zero,96
   1fb7c:	9a5f60ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   1fb80:	a039                	c.j	1fb8e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15c>
      __atomic_add(__mem, __val);
   1fb82:	4585                	c.li	a1,1
   1fb84:	030b8513          	addi	a0,s7,48
   1fb88:	fc8f60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fb8c:	b7cd                	c.j	1fb6e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13c>
   1fb8e:	84aa                	c.mv	s1,a0
   1fb90:	00052423          	sw	zero,8(a0)
   1fb94:	00052623          	sw	zero,12(a0)
   1fb98:	00052823          	sw	zero,16(a0)
   1fb9c:	00052a23          	sw	zero,20(a0)
   1fba0:	00052c23          	sw	zero,24(a0)
   1fba4:	00052e23          	sw	zero,28(a0)
   1fba8:	02053023          	sd	zero,32(a0)
   1fbac:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   1fbb0:	4785                	c.li	a5,1
   1fbb2:	d91c                	c.sw	a5,48(a0)
   1fbb4:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   1fbb6:	0001a797          	auipc	a5,0x1a
   1fbba:	a0a7b783          	ld	a5,-1526(a5) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   1fbbe:	07c1                	c.addi	a5,16
   1fbc0:	e11c                	c.sd	a5,0(a0)
   1fbc2:	0009a583          	lw	a1,0(s3)
   1fbc6:	01093603          	ld	a2,16(s2)
   1fbca:	01c9a703          	lw	a4,28(s3)
   1fbce:	0189a683          	lw	a3,24(s3)
   1fbd2:	0209a783          	lw	a5,32(s3)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   1fbd6:	dd0c                	c.sw	a1,56(a0)
   1fbd8:	e120                	c.sd	s0,64(a0)
   1fbda:	9432                	c.add	s0,a2
   1fbdc:	e520                	c.sd	s0,72(a0)
   1fbde:	c934                	c.sw	a3,80(a0)
        ord(ord), addr_size(addr_size) {}
   1fbe0:	c978                	c.sw	a4,84(a0)
   1fbe2:	cd3c                	c.sw	a5,88(a0)
   1fbe4:	03850c13          	addi	s8,a0,56
    if (__is_single_threaded())
   1fbe8:	0001a797          	auipc	a5,0x1a
   1fbec:	8987b783          	ld	a5,-1896(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fbf0:	0007c783          	lbu	a5,0(a5)
   1fbf4:	10078863          	beq	a5,zero,1fd04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2d2>
  { *__mem += __val; }
   1fbf8:	4789                	c.li	a5,2
   1fbfa:	d91c                	c.sw	a5,48(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   1fbfc:	e8e2                	c.sdsp	s8,80(sp)
      : _M_pi(__r._M_pi)
   1fbfe:	eca6                	c.sdsp	s1,88(sp)
    if (__is_single_threaded())
   1fc00:	0001a797          	auipc	a5,0x1a
   1fc04:	8807b783          	ld	a5,-1920(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc08:	0007c783          	lbu	a5,0(a5)
   1fc0c:	10078263          	beq	a5,zero,1fd10 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2de>
  { *__mem += __val; }
   1fc10:	589c                	c.lw	a5,48(s1)
   1fc12:	2785                	c.addiw	a5,1
   1fc14:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   1fc16:	60bc                	c.ld	a5,64(s1)
   1fc18:	f0be                	c.sdsp	a5,96(sp)
    if (__is_single_threaded())
   1fc1a:	0001a797          	auipc	a5,0x1a
   1fc1e:	8667b783          	ld	a5,-1946(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc22:	0007c783          	lbu	a5,0(a5)
   1fc26:	0e078b63          	beq	a5,zero,1fd1c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2ea>
    _Atomic_word __result = *__mem;
   1fc2a:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1fc2c:	fff5079b          	addiw	a5,a0,-1
   1fc30:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fc32:	4785                	c.li	a5,1
   1fc34:	0ef50a63          	beq	a0,a5,1fd28 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2f6>
  bool end() const { return pos >= sec->end; }
   1fc38:	67c6                	c.ldsp	a5,80(sp)
  // create the result directly, rather than using the top of
  // stack.
  expr_result result;

  // 2.6.1.1.4 Empty location descriptions
  if (cur.end()) {
   1fc3a:	6b98                	c.ld	a4,16(a5)
   1fc3c:	7786                	c.ldsp	a5,96(sp)
   1fc3e:	12e7e563          	bltu	a5,a4,1fd68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x336>
    result.location_type = expr_result::type::empty;
   1fc42:	4791                	c.li	a5,4
   1fc44:	00faa023          	sw	a5,0(s5)
    result.value = 0;
   1fc48:	000ab423          	sd	zero,8(s5)
	if (_M_pi != nullptr)
   1fc4c:	6466                	c.ldsp	s0,88(sp)
   1fc4e:	c01d                	c.beqz	s0,1fc74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
    if (__is_single_threaded())
   1fc50:	0001a797          	auipc	a5,0x1a
   1fc54:	8307b783          	ld	a5,-2000(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc58:	0007c783          	lbu	a5,0(a5)
   1fc5c:	e399                	c.bnez	a5,1fc62 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x230>
   1fc5e:	6100106f          	jal	zero,2126e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x183c>
    _Atomic_word __result = *__mem;
   1fc62:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   1fc64:	fff5079b          	addiw	a5,a0,-1
   1fc68:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fc6a:	4785                	c.li	a5,1
   1fc6c:	00f51463          	bne	a0,a5,1fc74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
   1fc70:	60c0106f          	jal	zero,2127c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x184a>
    if (__is_single_threaded())
   1fc74:	0001a797          	auipc	a5,0x1a
   1fc78:	80c7b783          	ld	a5,-2036(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fc7c:	0007c783          	lbu	a5,0(a5)
   1fc80:	e399                	c.bnez	a5,1fc86 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x254>
   1fc82:	6400106f          	jal	zero,212c2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1890>
    _Atomic_word __result = *__mem;
   1fc86:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   1fc88:	fff5079b          	addiw	a5,a0,-1
   1fc8c:	d89c                	c.sw	a5,48(s1)
   1fc8e:	4785                	c.li	a5,1
   1fc90:	00f51463          	bne	a0,a5,1fc98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
   1fc94:	63c0106f          	jal	zero,212d0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x189e>
	if (_M_pi != nullptr)
   1fc98:	020b8663          	beq	s7,zero,1fcc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
    if (__is_single_threaded())
   1fc9c:	00019797          	auipc	a5,0x19
   1fca0:	7e47b783          	ld	a5,2020(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fca4:	0007c783          	lbu	a5,0(a5)
   1fca8:	e399                	c.bnez	a5,1fcae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x27c>
   1fcaa:	66c0106f          	jal	zero,21316 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18e4>
    _Atomic_word __result = *__mem;
   1fcae:	030ba503          	lw	a0,48(s7)
    *__mem += __val;
   1fcb2:	fff5079b          	addiw	a5,a0,-1
   1fcb6:	02fba823          	sw	a5,48(s7)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   1fcba:	4785                	c.li	a5,1
   1fcbc:	00f51463          	bne	a0,a5,1fcc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
   1fcc0:	6640106f          	jal	zero,21324 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18f2>
    for (T *p = base; p < end; ++p)
   1fcc4:	752a                	c.ldsp	a0,168(sp)
   1fcc6:	77ca                	c.ldsp	a5,176(sp)
   1fcc8:	00f57763          	bgeu	a0,a5,1fcd6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2a4>
   1fccc:	87aa                	c.mv	a5,a0
   1fcce:	07a1                	c.addi	a5,8
   1fcd0:	774a                	c.ldsp	a4,176(sp)
   1fcd2:	fee7eee3          	bltu	a5,a4,1fcce <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x29c>
    end = base;
   1fcd6:	f92a                	c.sdsp	a0,176(sp)
    if ((char *)base != buf)
   1fcd8:	10bc                	c.addi4spn	a5,sp,104
   1fcda:	00f50563          	beq	a0,a5,1fce4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2b2>
      delete[] (char *)base;
   1fcde:	c119                	c.beqz	a0,1fce4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x2b2>
   1fce0:	8e1f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>

  return result;

underflow:
  throw expr_error("stack underflow evaluating DWARF expression");
}
   1fce4:	8556                	c.mv	a0,s5
   1fce6:	70b2                	c.ldsp	ra,296(sp)
   1fce8:	7412                	c.ldsp	s0,288(sp)
   1fcea:	64f2                	c.ldsp	s1,280(sp)
   1fcec:	6952                	c.ldsp	s2,272(sp)
   1fcee:	69b2                	c.ldsp	s3,264(sp)
   1fcf0:	6a12                	c.ldsp	s4,256(sp)
   1fcf2:	7aee                	c.ldsp	s5,248(sp)
   1fcf4:	7b4e                	c.ldsp	s6,240(sp)
   1fcf6:	7bae                	c.ldsp	s7,232(sp)
   1fcf8:	7c0e                	c.ldsp	s8,224(sp)
   1fcfa:	6cee                	c.ldsp	s9,216(sp)
   1fcfc:	6d4e                	c.ldsp	s10,208(sp)
   1fcfe:	6dae                	c.ldsp	s11,200(sp)
   1fd00:	6155                	c.addi16sp	sp,304
   1fd02:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   1fd04:	4585                	c.li	a1,1
   1fd06:	03050513          	addi	a0,a0,48
   1fd0a:	e46f60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fd0e:	b5fd                	c.j	1fbfc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ca>
   1fd10:	4585                	c.li	a1,1
   1fd12:	03048513          	addi	a0,s1,48
   1fd16:	e3af60ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   1fd1a:	bdf5                	c.j	1fc16 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1e4>
      return __exchange_and_add(__mem, __val);
   1fd1c:	55fd                	c.li	a1,-1
   1fd1e:	03048513          	addi	a0,s1,48
   1fd22:	e5ef60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fd26:	b731                	c.j	1fc32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x200>
	_M_dispose();
   1fd28:	609c                	c.ld	a5,0(s1)
   1fd2a:	6b9c                	c.ld	a5,16(a5)
   1fd2c:	8526                	c.mv	a0,s1
   1fd2e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   1fd30:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   1fd34:	00019797          	auipc	a5,0x19
   1fd38:	74c7b783          	ld	a5,1868(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   1fd3c:	0007c783          	lbu	a5,0(a5)
   1fd40:	cf89                	c.beqz	a5,1fd5a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x328>
    _Atomic_word __result = *__mem;
   1fd42:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   1fd44:	fff7871b          	addiw	a4,a5,-1
   1fd48:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   1fd4a:	4705                	c.li	a4,1
   1fd4c:	eee796e3          	bne	a5,a4,1fc38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x206>
	    _M_destroy();
   1fd50:	609c                	c.ld	a5,0(s1)
   1fd52:	6f9c                	c.ld	a5,24(a5)
   1fd54:	8526                	c.mv	a0,s1
   1fd56:	9782                	c.jalr	a5
   1fd58:	b5c5                	c.j	1fc38 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x206>
      return __exchange_and_add(__mem, __val);
   1fd5a:	55fd                	c.li	a1,-1
   1fd5c:	03448513          	addi	a0,s1,52
   1fd60:	e20f60ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   1fd64:	87aa                	c.mv	a5,a0
   1fd66:	b7d5                	c.j	1fd4a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x318>
  result.location_type = expr_result::type::address;
   1fd68:	000aa023          	sw	zero,0(s5)
    switch (op) {
   1fd6c:	0fc00993          	addi	s3,zero,252
   1fd70:	0000e417          	auipc	s0,0xe
   1fd74:	05040413          	addi	s0,s0,80 # 2ddc0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x430>
    return ::__libc_single_threaded;
   1fd78:	00019d17          	auipc	s10,0x19
   1fd7c:	708d3d03          	ld	s10,1800(s10) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      CHECKN(2);
   1fd80:	4da1                	c.li	s11,8
  while (!cur.end()) {
   1fd82:	3db0006f          	jal	zero,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    while (pos < sec->end) {
   1fd86:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   1fd88:	4901                	c.li	s2,0
    int shift = 0;
   1fd8a:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1fd8c:	02f77663          	bgeu	a4,a5,1fdb8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x386>
      uint8_t byte = *(uint8_t *)(pos++);
   1fd90:	0705                	c.addi	a4,1
   1fd92:	f0ba                	c.sdsp	a4,96(sp)
   1fd94:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1fd98:	07f7f613          	andi	a2,a5,127
   1fd9c:	00b61633          	sll	a2,a2,a1
   1fda0:	00c96933          	or	s2,s2,a2
      if ((byte & 0x80) == 0)
   1fda4:	0187979b          	slliw	a5,a5,0x18
   1fda8:	4187d79b          	sraiw	a5,a5,0x18
   1fdac:	0e07dbe3          	bge	a5,zero,206a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc70>
      shift += 7;
   1fdb0:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1fdb2:	6a9c                	c.ld	a5,16(a3)
   1fdb4:	fcf76ee3          	bltu	a4,a5,1fd90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x35e>
    underflow();
   1fdb8:	0888                	c.addi4spn	a0,sp,80
   1fdba:	d7ffa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1fdbe:	0e30006f          	jal	zero,206a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc6e>
    while (pos < sec->end) {
   1fdc2:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   1fdc4:	4501                	c.li	a0,0
    int shift = 0;
   1fdc6:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1fdc8:	02f77563          	bgeu	a4,a5,1fdf2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3c0>
      uint8_t byte = *(uint8_t *)(pos++);
   1fdcc:	0705                	c.addi	a4,1
   1fdce:	f0ba                	c.sdsp	a4,96(sp)
   1fdd0:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1fdd4:	07f7f613          	andi	a2,a5,127
   1fdd8:	00b61633          	sll	a2,a2,a1
   1fddc:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   1fdde:	0187979b          	slliw	a5,a5,0x18
   1fde2:	4187d79b          	sraiw	a5,a5,0x18
   1fde6:	5a07dee3          	bge	a5,zero,20ba2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1170>
      shift += 7;
   1fdea:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1fdec:	6a9c                	c.ld	a5,16(a3)
   1fdee:	fcf76fe3          	bltu	a4,a5,1fdcc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x39a>
    underflow();
   1fdf2:	0888                	c.addi4spn	a0,sp,80
   1fdf4:	d45fa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1fdf8:	5a90006f          	jal	zero,20ba0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x116e>
    while (pos < sec->end) {
   1fdfc:	6a9c                	c.ld	a5,16(a3)
    std::uint64_t result = 0;
   1fdfe:	4a01                	c.li	s4,0
    int shift = 0;
   1fe00:	4581                	c.li	a1,0
    while (pos < sec->end) {
   1fe02:	02f77663          	bgeu	a4,a5,1fe2e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3fc>
      uint8_t byte = *(uint8_t *)(pos++);
   1fe06:	0705                	c.addi	a4,1
   1fe08:	f0ba                	c.sdsp	a4,96(sp)
   1fe0a:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   1fe0e:	07f7f613          	andi	a2,a5,127
   1fe12:	00b61633          	sll	a2,a2,a1
   1fe16:	00ca6a33          	or	s4,s4,a2
      if ((byte & 0x80) == 0)
   1fe1a:	0187979b          	slliw	a5,a5,0x18
   1fe1e:	4187d79b          	sraiw	a5,a5,0x18
   1fe22:	6c07d263          	bge	a5,zero,204e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab4>
      shift += 7;
   1fe26:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   1fe28:	6a9c                	c.ld	a5,16(a3)
   1fe2a:	fcf76ee3          	bltu	a4,a5,1fe06 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x3d4>
    underflow();
   1fe2e:	0888                	c.addi4spn	a0,sp,80
   1fe30:	d09fa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   1fe34:	ad45                	c.j	204e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xab2>
      stack.push_back((unsigned)op - (unsigned)DW_OP::lit0);
   1fe36:	fd09091b          	addiw	s2,s2,-48
   1fe3a:	1902                	c.slli	s2,0x20
   1fe3c:	02095913          	srli	s2,s2,0x20
  size_type size() const { return end - base; }
   1fe40:	772a                	c.ldsp	a4,168(sp)
   1fe42:	77ca                	c.ldsp	a5,176(sp)
   1fe44:	8f99                	c.sub	a5,a4
   1fe46:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   1fe48:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   1fe4a:	7a6a                	c.ldsp	s4,184(sp)
   1fe4c:	40ea0a33          	sub	s4,s4,a4
   1fe50:	403a5a13          	srai	s4,s4,0x3
   1fe54:	04fa7963          	bgeu	s4,a5,1fea6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x474>
   1fe58:	000a1363          	bne	s4,zero,1fe5e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x42c>
   1fe5c:	4a05                	c.li	s4,1
    while (target < n)
   1fe5e:	00fa7563          	bgeu	s4,a5,1fe68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x436>
      target <<= 1;
   1fe62:	0a06                	c.slli	s4,0x1
    while (target < n)
   1fe64:	fefa6fe3          	bltu	s4,a5,1fe62 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x430>
    char *newbuf = new char[sizeof(T[target])];
   1fe68:	0a0e                	c.slli	s4,0x3
   1fe6a:	8552                	c.mv	a0,s4
   1fe6c:	cc4f60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1fe70:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   1fe72:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1fe74:	774a                	c.ldsp	a4,176(sp)
   1fe76:	04e57063          	bgeu	a0,a4,1feb6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x484>
    T *src = base, *dest = (T *)newbuf;
   1fe7a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1fe7c:	07a1                	c.addi	a5,8
   1fe7e:	fee7efe3          	bltu	a5,a4,1fe7c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x44a>
   1fe82:	fff70793          	addi	a5,a4,-1
   1fe86:	8f89                	c.sub	a5,a0
   1fe88:	9be1                	c.andi	a5,-8
   1fe8a:	07a1                	c.addi	a5,8
   1fe8c:	97e6                	c.add	a5,s9
   1fe8e:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   1fe90:	10bc                	c.addi4spn	a5,sp,104
   1fe92:	00f50563          	beq	a0,a5,1fe9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x46a>
      delete[] (char *)base;
   1fe96:	c119                	c.beqz	a0,1fe9c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x46a>
   1fe98:	f28f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1fe9c:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   1fe9e:	67a2                	c.ldsp	a5,8(sp)
   1fea0:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   1fea2:	9cd2                	c.add	s9,s4
   1fea4:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   1fea6:	77ca                	c.ldsp	a5,176(sp)
   1fea8:	0127b023          	sd	s2,0(a5)
    end++;
   1feac:	77ca                	c.ldsp	a5,176(sp)
   1feae:	07a1                	c.addi	a5,8
   1feb0:	f93e                	c.sdsp	a5,176(sp)
      break;
   1feb2:	2ab0006f          	jal	zero,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   1feb6:	e466                	c.sdsp	s9,8(sp)
   1feb8:	bfe1                	c.j	1fe90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x45e>
      stack.push_back(cur.address());
   1feba:	0888                	c.addi4spn	a0,sp,80
   1febc:	00019317          	auipc	t1,0x19
   1fec0:	4bc33303          	ld	t1,1212(t1) # 39378 <dwarf::cursor::address()@@Base+0x1a382>
   1fec4:	9302                	c.jalr	t1
   1fec6:	e42a                	c.sdsp	a0,8(sp)
  size_type size() const { return end - base; }
   1fec8:	772a                	c.ldsp	a4,168(sp)
   1feca:	77ca                	c.ldsp	a5,176(sp)
   1fecc:	8f99                	c.sub	a5,a4
   1fece:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   1fed0:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   1fed2:	796a                	c.ldsp	s2,184(sp)
   1fed4:	40e90933          	sub	s2,s2,a4
   1fed8:	40395913          	srai	s2,s2,0x3
   1fedc:	04f97963          	bgeu	s2,a5,1ff2e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4fc>
   1fee0:	00091363          	bne	s2,zero,1fee6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4b4>
   1fee4:	4905                	c.li	s2,1
    while (target < n)
   1fee6:	00f97563          	bgeu	s2,a5,1fef0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4be>
      target <<= 1;
   1feea:	0906                	c.slli	s2,0x1
    while (target < n)
   1feec:	fef96fe3          	bltu	s2,a5,1feea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4b8>
    char *newbuf = new char[sizeof(T[target])];
   1fef0:	090e                	c.slli	s2,0x3
   1fef2:	854a                	c.mv	a0,s2
   1fef4:	c3cf60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   1fef8:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   1fefa:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1fefc:	774a                	c.ldsp	a4,176(sp)
   1fefe:	04e57063          	bgeu	a0,a4,1ff3e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x50c>
    T *src = base, *dest = (T *)newbuf;
   1ff02:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1ff04:	07a1                	c.addi	a5,8
   1ff06:	fee7efe3          	bltu	a5,a4,1ff04 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4d2>
   1ff0a:	fff70a13          	addi	s4,a4,-1
   1ff0e:	40aa0a33          	sub	s4,s4,a0
   1ff12:	ff8a7a13          	andi	s4,s4,-8
   1ff16:	0a21                	c.addi	s4,8
   1ff18:	9a66                	c.add	s4,s9
    if ((char *)base != buf)
   1ff1a:	10bc                	c.addi4spn	a5,sp,104
   1ff1c:	00f50563          	beq	a0,a5,1ff26 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
      delete[] (char *)base;
   1ff20:	c119                	c.beqz	a0,1ff26 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4f4>
   1ff22:	e9ef60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1ff26:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   1ff28:	f952                	c.sdsp	s4,176(sp)
    cap = base + target;
   1ff2a:	9cca                	c.add	s9,s2
   1ff2c:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   1ff2e:	77ca                	c.ldsp	a5,176(sp)
   1ff30:	6722                	c.ldsp	a4,8(sp)
   1ff32:	e398                	c.sd	a4,0(a5)
    end++;
   1ff34:	77ca                	c.ldsp	a5,176(sp)
   1ff36:	07a1                	c.addi	a5,8
   1ff38:	f93e                	c.sdsp	a5,176(sp)
      break;
   1ff3a:	2230006f          	jal	zero,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   1ff3e:	8a66                	c.mv	s4,s9
   1ff40:	bfe9                	c.j	1ff1a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x4e8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ff42:	6a9c                	c.ld	a5,16(a3)
   1ff44:	00f76563          	bltu	a4,a5,1ff4e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x51c>
      underflow();
   1ff48:	0888                	c.addi4spn	a0,sp,80
   1ff4a:	beffa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ff4e:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   1ff50:	6746                	c.ldsp	a4,80(sp)
   1ff52:	4f58                	c.lw	a4,28(a4)
   1ff54:	e319                	c.bnez	a4,1ff5a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x528>
   1ff56:	55a0106f          	jal	zero,214b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a7e>
        val = (val << 8) | (uint64_t)p[i];
   1ff5a:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   1ff5e:	5560106f          	jal	zero,214b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a82>
    char *newbuf = new char[sizeof(T[target])];
   1ff62:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   1ff64:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   1ff66:	774a                	c.ldsp	a4,176(sp)
   1ff68:	04e57063          	bgeu	a0,a4,1ffa8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x576>
    T *src = base, *dest = (T *)newbuf;
   1ff6c:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   1ff6e:	07a1                	c.addi	a5,8
   1ff70:	fee7efe3          	bltu	a5,a4,1ff6e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x53c>
   1ff74:	fff70793          	addi	a5,a4,-1
   1ff78:	8f89                	c.sub	a5,a0
   1ff7a:	9be1                	c.andi	a5,-8
   1ff7c:	07a1                	c.addi	a5,8
   1ff7e:	97d2                	c.add	a5,s4
   1ff80:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   1ff82:	10bc                	c.addi4spn	a5,sp,104
   1ff84:	00f50563          	beq	a0,a5,1ff8e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x55c>
      delete[] (char *)base;
   1ff88:	c119                	c.beqz	a0,1ff8e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x55c>
   1ff8a:	e36f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   1ff8e:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   1ff90:	67a2                	c.ldsp	a5,8(sp)
   1ff92:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   1ff94:	9a4a                	c.add	s4,s2
   1ff96:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   1ff98:	77ca                	c.ldsp	a5,176(sp)
   1ff9a:	0197b023          	sd	s9,0(a5)
    end++;
   1ff9e:	77ca                	c.ldsp	a5,176(sp)
   1ffa0:	07a1                	c.addi	a5,8
   1ffa2:	f93e                	c.sdsp	a5,176(sp)
      break;
   1ffa4:	1b90006f          	jal	zero,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   1ffa8:	e452                	c.sdsp	s4,8(sp)
   1ffaa:	bfe1                	c.j	1ff82 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x550>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   1ffac:	6a9c                	c.ld	a5,16(a3)
   1ffae:	40e78633          	sub	a2,a5,a4
   1ffb2:	4685                	c.li	a3,1
   1ffb4:	00c6f463          	bgeu	a3,a2,1ffbc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x58a>
   1ffb8:	00f76563          	bltu	a4,a5,1ffc2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x590>
      underflow();
   1ffbc:	0888                	c.addi4spn	a0,sp,80
   1ffbe:	b7bfa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   1ffc2:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   1ffc4:	6746                	c.ldsp	a4,80(sp)
   1ffc6:	4f58                	c.lw	a4,28(a4)
   1ffc8:	e339                	c.bnez	a4,2000e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5dc>
        val |= ((uint64_t)p[i]) << (i * 8);
   1ffca:	0017ca03          	lbu	s4,1(a5)
   1ffce:	0a22                	c.slli	s4,0x8
   1ffd0:	0007c703          	lbu	a4,0(a5)
   1ffd4:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   1ffd8:	0789                	c.addi	a5,2
   1ffda:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   1ffdc:	772a                	c.ldsp	a4,168(sp)
   1ffde:	77ca                	c.ldsp	a5,176(sp)
   1ffe0:	8f99                	c.sub	a5,a4
   1ffe2:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   1ffe4:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   1ffe6:	796a                	c.ldsp	s2,184(sp)
   1ffe8:	40e90933          	sub	s2,s2,a4
   1ffec:	40395913          	srai	s2,s2,0x3
   1fff0:	06f97263          	bgeu	s2,a5,20054 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x622>
   1fff4:	00091363          	bne	s2,zero,1fffa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5c8>
   1fff8:	4905                	c.li	s2,1
    while (target < n)
   1fffa:	00f97563          	bgeu	s2,a5,20004 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5d2>
      target <<= 1;
   1fffe:	0906                	c.slli	s2,0x1
    while (target < n)
   20000:	fef96fe3          	bltu	s2,a5,1fffe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5cc>
    char *newbuf = new char[sizeof(T[target])];
   20004:	090e                	c.slli	s2,0x3
   20006:	854a                	c.mv	a0,s2
   20008:	b28f60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   2000c:	a809                	c.j	2001e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5ec>
        val = (val << 8) | (uint64_t)p[i];
   2000e:	0007ca03          	lbu	s4,0(a5)
   20012:	0a22                	c.slli	s4,0x8
   20014:	0017c703          	lbu	a4,1(a5)
   20018:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   2001c:	bf75                	c.j	1ffd8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5a6>
   2001e:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20020:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20022:	774a                	c.ldsp	a4,176(sp)
   20024:	04e57063          	bgeu	a0,a4,20064 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x632>
    T *src = base, *dest = (T *)newbuf;
   20028:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2002a:	07a1                	c.addi	a5,8
   2002c:	fee7efe3          	bltu	a5,a4,2002a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x5f8>
   20030:	fff70793          	addi	a5,a4,-1
   20034:	8f89                	c.sub	a5,a0
   20036:	9be1                	c.andi	a5,-8
   20038:	07a1                	c.addi	a5,8
   2003a:	97e6                	c.add	a5,s9
   2003c:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   2003e:	10bc                	c.addi4spn	a5,sp,104
   20040:	00f50563          	beq	a0,a5,2004a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x618>
      delete[] (char *)base;
   20044:	c119                	c.beqz	a0,2004a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x618>
   20046:	d7af60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2004a:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   2004c:	67a2                	c.ldsp	a5,8(sp)
   2004e:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20050:	9cca                	c.add	s9,s2
   20052:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20054:	77ca                	c.ldsp	a5,176(sp)
   20056:	0147b023          	sd	s4,0(a5)
    end++;
   2005a:	77ca                	c.ldsp	a5,176(sp)
   2005c:	07a1                	c.addi	a5,8
   2005e:	f93e                	c.sdsp	a5,176(sp)
      break;
   20060:	0fd0006f          	jal	zero,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20064:	e466                	c.sdsp	s9,8(sp)
   20066:	bfe1                	c.j	2003e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x60c>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20068:	6a9c                	c.ld	a5,16(a3)
   2006a:	40e78633          	sub	a2,a5,a4
   2006e:	468d                	c.li	a3,3
   20070:	00c6f463          	bgeu	a3,a2,20078 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x646>
   20074:	00f76563          	bltu	a4,a5,2007e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x64c>
      underflow();
   20078:	0888                	c.addi4spn	a0,sp,80
   2007a:	abffa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   2007e:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20080:	67c6                	c.ldsp	a5,80(sp)
   20082:	4fdc                	c.lw	a5,28(a5)
   20084:	efa9                	c.bnez	a5,200de <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6ac>
   20086:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20088:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   2008a:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   2008e:	0006c703          	lbu	a4,0(a3)
   20092:	00f71733          	sll	a4,a4,a5
   20096:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   2009a:	0685                	c.addi	a3,1
   2009c:	27a1                	c.addiw	a5,8
   2009e:	feb798e3          	bne	a5,a1,2008e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x65c>
    pos += sizeof(T);
   200a2:	0611                	c.addi	a2,4
   200a4:	f0b2                	c.sdsp	a2,96(sp)
   200a6:	1a02                	c.slli	s4,0x20
   200a8:	020a5a13          	srli	s4,s4,0x20
  size_type size() const { return end - base; }
   200ac:	772a                	c.ldsp	a4,168(sp)
   200ae:	77ca                	c.ldsp	a5,176(sp)
   200b0:	8f99                	c.sub	a5,a4
   200b2:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   200b4:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   200b6:	796a                	c.ldsp	s2,184(sp)
   200b8:	40e90933          	sub	s2,s2,a4
   200bc:	40395913          	srai	s2,s2,0x3
   200c0:	06f97763          	bgeu	s2,a5,2012e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6fc>
   200c4:	00091363          	bne	s2,zero,200ca <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x698>
   200c8:	4905                	c.li	s2,1
    while (target < n)
   200ca:	00f97563          	bgeu	s2,a5,200d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6a2>
      target <<= 1;
   200ce:	0906                	c.slli	s2,0x1
    while (target < n)
   200d0:	fef96fe3          	bltu	s2,a5,200ce <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x69c>
    char *newbuf = new char[sizeof(T[target])];
   200d4:	090e                	c.slli	s2,0x3
   200d6:	854a                	c.mv	a0,s2
   200d8:	a58f60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   200dc:	a831                	c.j	200f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6c6>
   200de:	87b2                	c.mv	a5,a2
   200e0:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   200e4:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   200e6:	0a22                	c.slli	s4,0x8
   200e8:	0007c703          	lbu	a4,0(a5)
   200ec:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   200f0:	0785                	c.addi	a5,1
   200f2:	fef69ae3          	bne	a3,a5,200e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6b4>
   200f6:	b775                	c.j	200a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x670>
   200f8:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   200fa:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   200fc:	774a                	c.ldsp	a4,176(sp)
   200fe:	04e57063          	bgeu	a0,a4,2013e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x70c>
    T *src = base, *dest = (T *)newbuf;
   20102:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20104:	07a1                	c.addi	a5,8
   20106:	fee7efe3          	bltu	a5,a4,20104 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6d2>
   2010a:	fff70793          	addi	a5,a4,-1
   2010e:	8f89                	c.sub	a5,a0
   20110:	9be1                	c.andi	a5,-8
   20112:	07a1                	c.addi	a5,8
   20114:	97e6                	c.add	a5,s9
   20116:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20118:	10bc                	c.addi4spn	a5,sp,104
   2011a:	00f50563          	beq	a0,a5,20124 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6f2>
      delete[] (char *)base;
   2011e:	c119                	c.beqz	a0,20124 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6f2>
   20120:	ca0f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20124:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20126:	67a2                	c.ldsp	a5,8(sp)
   20128:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2012a:	9cca                	c.add	s9,s2
   2012c:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2012e:	77ca                	c.ldsp	a5,176(sp)
   20130:	0147b023          	sd	s4,0(a5)
    end++;
   20134:	77ca                	c.ldsp	a5,176(sp)
   20136:	07a1                	c.addi	a5,8
   20138:	f93e                	c.sdsp	a5,176(sp)
      break;
   2013a:	0230006f          	jal	zero,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2013e:	e466                	c.sdsp	s9,8(sp)
   20140:	bfe1                	c.j	20118 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x6e6>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20142:	6a9c                	c.ld	a5,16(a3)
   20144:	40e78633          	sub	a2,a5,a4
   20148:	469d                	c.li	a3,7
   2014a:	00c6f463          	bgeu	a3,a2,20152 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x720>
   2014e:	00f76563          	bltu	a4,a5,20158 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x726>
      underflow();
   20152:	0888                	c.addi4spn	a0,sp,80
   20154:	9e5fa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20158:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   2015a:	67c6                	c.ldsp	a5,80(sp)
   2015c:	4fdc                	c.lw	a5,28(a5)
   2015e:	ebb1                	c.bnez	a5,201b2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x780>
   20160:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20162:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20164:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   20168:	0006c703          	lbu	a4,0(a3)
   2016c:	00f71733          	sll	a4,a4,a5
   20170:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20174:	0685                	c.addi	a3,1
   20176:	27a1                	c.addiw	a5,8
   20178:	feb798e3          	bne	a5,a1,20168 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x736>
    pos += sizeof(T);
   2017c:	0621                	c.addi	a2,8
   2017e:	f0b2                	c.sdsp	a2,96(sp)
  size_type size() const { return end - base; }
   20180:	772a                	c.ldsp	a4,168(sp)
   20182:	77ca                	c.ldsp	a5,176(sp)
   20184:	8f99                	c.sub	a5,a4
   20186:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20188:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2018a:	796a                	c.ldsp	s2,184(sp)
   2018c:	40e90933          	sub	s2,s2,a4
   20190:	40395913          	srai	s2,s2,0x3
   20194:	06f97763          	bgeu	s2,a5,20202 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7d0>
   20198:	00091363          	bne	s2,zero,2019e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x76c>
   2019c:	4905                	c.li	s2,1
    while (target < n)
   2019e:	00f97563          	bgeu	s2,a5,201a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x776>
      target <<= 1;
   201a2:	0906                	c.slli	s2,0x1
    while (target < n)
   201a4:	fef96fe3          	bltu	s2,a5,201a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x770>
    char *newbuf = new char[sizeof(T[target])];
   201a8:	090e                	c.slli	s2,0x3
   201aa:	854a                	c.mv	a0,s2
   201ac:	984f60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   201b0:	a831                	c.j	201cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x79a>
   201b2:	87b2                	c.mv	a5,a2
   201b4:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   201b8:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   201ba:	0a22                	c.slli	s4,0x8
   201bc:	0007c703          	lbu	a4,0(a5)
   201c0:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   201c4:	0785                	c.addi	a5,1
   201c6:	fed79ae3          	bne	a5,a3,201ba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x788>
   201ca:	bf4d                	c.j	2017c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x74a>
   201cc:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   201ce:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   201d0:	774a                	c.ldsp	a4,176(sp)
   201d2:	02e57f63          	bgeu	a0,a4,20210 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7de>
    T *src = base, *dest = (T *)newbuf;
   201d6:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   201d8:	07a1                	c.addi	a5,8
   201da:	fee7efe3          	bltu	a5,a4,201d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7a6>
   201de:	fff70793          	addi	a5,a4,-1
   201e2:	8f89                	c.sub	a5,a0
   201e4:	9be1                	c.andi	a5,-8
   201e6:	07a1                	c.addi	a5,8
   201e8:	97e6                	c.add	a5,s9
   201ea:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   201ec:	10bc                	c.addi4spn	a5,sp,104
   201ee:	00f50563          	beq	a0,a5,201f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7c6>
      delete[] (char *)base;
   201f2:	c119                	c.beqz	a0,201f8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7c6>
   201f4:	bccf60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   201f8:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   201fa:	67a2                	c.ldsp	a5,8(sp)
   201fc:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   201fe:	9cca                	c.add	s9,s2
   20200:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20202:	77ca                	c.ldsp	a5,176(sp)
   20204:	0147b023          	sd	s4,0(a5)
    end++;
   20208:	77ca                	c.ldsp	a5,176(sp)
   2020a:	07a1                	c.addi	a5,8
   2020c:	f93e                	c.sdsp	a5,176(sp)
      break;
   2020e:	a7b9                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20210:	e466                	c.sdsp	s9,8(sp)
   20212:	bfe9                	c.j	201ec <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7ba>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20214:	6a9c                	c.ld	a5,16(a3)
   20216:	00f76563          	bltu	a4,a5,20220 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7ee>
      underflow();
   2021a:	0888                	c.addi4spn	a0,sp,80
   2021c:	91dfa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20220:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20222:	6746                	c.ldsp	a4,80(sp)
   20224:	4f58                	c.lw	a4,28(a4)
   20226:	e319                	c.bnez	a4,2022c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x7fa>
   20228:	2c80106f          	jal	zero,214f0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1abe>
        val = (val << 8) | (uint64_t)p[i];
   2022c:	0007cc83          	lbu	s9,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20230:	2c40106f          	jal	zero,214f4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ac2>
    char *newbuf = new char[sizeof(T[target])];
   20234:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20236:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20238:	774a                	c.ldsp	a4,176(sp)
   2023a:	02e57f63          	bgeu	a0,a4,20278 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x846>
    T *src = base, *dest = (T *)newbuf;
   2023e:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20240:	07a1                	c.addi	a5,8
   20242:	fee7efe3          	bltu	a5,a4,20240 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x80e>
   20246:	fff70793          	addi	a5,a4,-1
   2024a:	8f89                	c.sub	a5,a0
   2024c:	9be1                	c.andi	a5,-8
   2024e:	07a1                	c.addi	a5,8
   20250:	97d2                	c.add	a5,s4
   20252:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20254:	10bc                	c.addi4spn	a5,sp,104
   20256:	00f50563          	beq	a0,a5,20260 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x82e>
      delete[] (char *)base;
   2025a:	c119                	c.beqz	a0,20260 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x82e>
   2025c:	b64f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20260:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20262:	67a2                	c.ldsp	a5,8(sp)
   20264:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20266:	9a4a                	c.add	s4,s2
   20268:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   2026a:	77ca                	c.ldsp	a5,176(sp)
   2026c:	0197b023          	sd	s9,0(a5)
    end++;
   20270:	77ca                	c.ldsp	a5,176(sp)
   20272:	07a1                	c.addi	a5,8
   20274:	f93e                	c.sdsp	a5,176(sp)
      break;
   20276:	a5dd                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20278:	e452                	c.sdsp	s4,8(sp)
   2027a:	bfe9                	c.j	20254 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x822>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2027c:	6a9c                	c.ld	a5,16(a3)
   2027e:	40e78633          	sub	a2,a5,a4
   20282:	4685                	c.li	a3,1
   20284:	00c6f463          	bgeu	a3,a2,2028c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x85a>
   20288:	00f76563          	bltu	a4,a5,20292 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x860>
      underflow();
   2028c:	0888                	c.addi4spn	a0,sp,80
   2028e:	8abfa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20292:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20294:	6746                	c.ldsp	a4,80(sp)
   20296:	4f58                	c.lw	a4,28(a4)
   20298:	e739                	c.bnez	a4,202e6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8b4>
        val |= ((uint64_t)p[i]) << (i * 8);
   2029a:	0017ca03          	lbu	s4,1(a5)
   2029e:	0a22                	c.slli	s4,0x8
   202a0:	0007c703          	lbu	a4,0(a5)
   202a4:	00ea6a33          	or	s4,s4,a4
    pos += sizeof(T);
   202a8:	0789                	c.addi	a5,2
   202aa:	f0be                	c.sdsp	a5,96(sp)
      stack.push_back(cur.fixed<int16_t>());
   202ac:	010a1a1b          	slliw	s4,s4,0x10
   202b0:	410a5a1b          	sraiw	s4,s4,0x10
  size_type size() const { return end - base; }
   202b4:	772a                	c.ldsp	a4,168(sp)
   202b6:	77ca                	c.ldsp	a5,176(sp)
   202b8:	8f99                	c.sub	a5,a4
   202ba:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   202bc:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   202be:	796a                	c.ldsp	s2,184(sp)
   202c0:	40e90933          	sub	s2,s2,a4
   202c4:	40395913          	srai	s2,s2,0x3
   202c8:	06f97263          	bgeu	s2,a5,2032c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8fa>
   202cc:	00091363          	bne	s2,zero,202d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a0>
   202d0:	4905                	c.li	s2,1
    while (target < n)
   202d2:	00f97563          	bgeu	s2,a5,202dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8aa>
      target <<= 1;
   202d6:	0906                	c.slli	s2,0x1
    while (target < n)
   202d8:	fef96fe3          	bltu	s2,a5,202d6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8a4>
    char *newbuf = new char[sizeof(T[target])];
   202dc:	090e                	c.slli	s2,0x3
   202de:	854a                	c.mv	a0,s2
   202e0:	850f60ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   202e4:	a809                	c.j	202f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8c4>
        val = (val << 8) | (uint64_t)p[i];
   202e6:	0007ca03          	lbu	s4,0(a5)
   202ea:	0a22                	c.slli	s4,0x8
   202ec:	0017c703          	lbu	a4,1(a5)
   202f0:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   202f4:	bf55                	c.j	202a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x876>
   202f6:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   202f8:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   202fa:	774a                	c.ldsp	a4,176(sp)
   202fc:	02e57f63          	bgeu	a0,a4,2033a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x908>
    T *src = base, *dest = (T *)newbuf;
   20300:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20302:	07a1                	c.addi	a5,8
   20304:	fee7efe3          	bltu	a5,a4,20302 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8d0>
   20308:	fff70793          	addi	a5,a4,-1
   2030c:	8f89                	c.sub	a5,a0
   2030e:	9be1                	c.andi	a5,-8
   20310:	07a1                	c.addi	a5,8
   20312:	97e6                	c.add	a5,s9
   20314:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20316:	10bc                	c.addi4spn	a5,sp,104
   20318:	00f50563          	beq	a0,a5,20322 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8f0>
      delete[] (char *)base;
   2031c:	c119                	c.beqz	a0,20322 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8f0>
   2031e:	aa2f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20322:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20324:	67a2                	c.ldsp	a5,8(sp)
   20326:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20328:	9cca                	c.add	s9,s2
   2032a:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2032c:	77ca                	c.ldsp	a5,176(sp)
   2032e:	0147b023          	sd	s4,0(a5)
    end++;
   20332:	77ca                	c.ldsp	a5,176(sp)
   20334:	07a1                	c.addi	a5,8
   20336:	f93e                	c.sdsp	a5,176(sp)
      break;
   20338:	a515                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2033a:	e466                	c.sdsp	s9,8(sp)
   2033c:	bfe9                	c.j	20316 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x8e4>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2033e:	6a9c                	c.ld	a5,16(a3)
   20340:	40e78633          	sub	a2,a5,a4
   20344:	468d                	c.li	a3,3
   20346:	00c6f463          	bgeu	a3,a2,2034e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x91c>
   2034a:	00f76563          	bltu	a4,a5,20354 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x922>
      underflow();
   2034e:	0888                	c.addi4spn	a0,sp,80
   20350:	fe8fa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20354:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   20356:	67c6                	c.ldsp	a5,80(sp)
   20358:	4fdc                	c.lw	a5,28(a5)
   2035a:	ebb9                	c.bnez	a5,203b0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x97e>
   2035c:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   2035e:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20360:	02000593          	addi	a1,zero,32
        val |= ((uint64_t)p[i]) << (i * 8);
   20364:	0006c703          	lbu	a4,0(a3)
   20368:	00f71733          	sll	a4,a4,a5
   2036c:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20370:	0685                	c.addi	a3,1
   20372:	27a1                	c.addiw	a5,8
   20374:	feb798e3          	bne	a5,a1,20364 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x932>
    pos += sizeof(T);
   20378:	0611                	c.addi	a2,4
   2037a:	f0b2                	c.sdsp	a2,96(sp)
      stack.push_back(cur.fixed<int32_t>());
   2037c:	2a01                	c.addiw	s4,0
  size_type size() const { return end - base; }
   2037e:	772a                	c.ldsp	a4,168(sp)
   20380:	77ca                	c.ldsp	a5,176(sp)
   20382:	8f99                	c.sub	a5,a4
   20384:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20386:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20388:	796a                	c.ldsp	s2,184(sp)
   2038a:	40e90933          	sub	s2,s2,a4
   2038e:	40395913          	srai	s2,s2,0x3
   20392:	06f97763          	bgeu	s2,a5,20400 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9ce>
   20396:	00091363          	bne	s2,zero,2039c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x96a>
   2039a:	4905                	c.li	s2,1
    while (target < n)
   2039c:	00f97563          	bgeu	s2,a5,203a6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x974>
      target <<= 1;
   203a0:	0906                	c.slli	s2,0x1
    while (target < n)
   203a2:	fef96fe3          	bltu	s2,a5,203a0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x96e>
    char *newbuf = new char[sizeof(T[target])];
   203a6:	090e                	c.slli	s2,0x3
   203a8:	854a                	c.mv	a0,s2
   203aa:	f87f50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   203ae:	a831                	c.j	203ca <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x998>
   203b0:	87b2                	c.mv	a5,a2
   203b2:	00460693          	addi	a3,a2,4
    uint64_t val = 0;
   203b6:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   203b8:	0a22                	c.slli	s4,0x8
   203ba:	0007c703          	lbu	a4,0(a5)
   203be:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   203c2:	0785                	c.addi	a5,1
   203c4:	fef69ae3          	bne	a3,a5,203b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x986>
   203c8:	bf45                	c.j	20378 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x946>
   203ca:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   203cc:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   203ce:	774a                	c.ldsp	a4,176(sp)
   203d0:	02e57f63          	bgeu	a0,a4,2040e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9dc>
    T *src = base, *dest = (T *)newbuf;
   203d4:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   203d6:	07a1                	c.addi	a5,8
   203d8:	fee7efe3          	bltu	a5,a4,203d6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9a4>
   203dc:	fff70793          	addi	a5,a4,-1
   203e0:	8f89                	c.sub	a5,a0
   203e2:	9be1                	c.andi	a5,-8
   203e4:	07a1                	c.addi	a5,8
   203e6:	97e6                	c.add	a5,s9
   203e8:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   203ea:	10bc                	c.addi4spn	a5,sp,104
   203ec:	00f50563          	beq	a0,a5,203f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9c4>
      delete[] (char *)base;
   203f0:	c119                	c.beqz	a0,203f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9c4>
   203f2:	9cef60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   203f6:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   203f8:	67a2                	c.ldsp	a5,8(sp)
   203fa:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   203fc:	9cca                	c.add	s9,s2
   203fe:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   20400:	77ca                	c.ldsp	a5,176(sp)
   20402:	0147b023          	sd	s4,0(a5)
    end++;
   20406:	77ca                	c.ldsp	a5,176(sp)
   20408:	07a1                	c.addi	a5,8
   2040a:	f93e                	c.sdsp	a5,176(sp)
      break;
   2040c:	ab81                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2040e:	e466                	c.sdsp	s9,8(sp)
   20410:	bfe9                	c.j	203ea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9b8>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20412:	6a9c                	c.ld	a5,16(a3)
   20414:	40e78633          	sub	a2,a5,a4
   20418:	469d                	c.li	a3,7
   2041a:	00c6f463          	bgeu	a3,a2,20422 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9f0>
   2041e:	00f76563          	bltu	a4,a5,20428 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x9f6>
      underflow();
   20422:	0888                	c.addi4spn	a0,sp,80
   20424:	f14fa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20428:	7606                	c.ldsp	a2,96(sp)
    if (sec->ord == byte_order::lsb) {
   2042a:	67c6                	c.ldsp	a5,80(sp)
   2042c:	4fdc                	c.lw	a5,28(a5)
   2042e:	ebb1                	c.bnez	a5,20482 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa50>
   20430:	86b2                	c.mv	a3,a2
    uint64_t val = 0;
   20432:	4a01                	c.li	s4,0
      for (unsigned i = 0; i < sizeof(T); i++)
   20434:	04000593          	addi	a1,zero,64
        val |= ((uint64_t)p[i]) << (i * 8);
   20438:	0006c703          	lbu	a4,0(a3)
   2043c:	00f71733          	sll	a4,a4,a5
   20440:	00ea6a33          	or	s4,s4,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20444:	0685                	c.addi	a3,1
   20446:	27a1                	c.addiw	a5,8
   20448:	feb798e3          	bne	a5,a1,20438 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa06>
    pos += sizeof(T);
   2044c:	0621                	c.addi	a2,8
   2044e:	f0b2                	c.sdsp	a2,96(sp)
  size_type size() const { return end - base; }
   20450:	772a                	c.ldsp	a4,168(sp)
   20452:	77ca                	c.ldsp	a5,176(sp)
   20454:	8f99                	c.sub	a5,a4
   20456:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20458:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2045a:	796a                	c.ldsp	s2,184(sp)
   2045c:	40e90933          	sub	s2,s2,a4
   20460:	40395913          	srai	s2,s2,0x3
   20464:	06f97763          	bgeu	s2,a5,204d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaa0>
   20468:	00091363          	bne	s2,zero,2046e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa3c>
   2046c:	4905                	c.li	s2,1
    while (target < n)
   2046e:	00f97563          	bgeu	s2,a5,20478 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa46>
      target <<= 1;
   20472:	0906                	c.slli	s2,0x1
    while (target < n)
   20474:	fef96fe3          	bltu	s2,a5,20472 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa40>
    char *newbuf = new char[sizeof(T[target])];
   20478:	090e                	c.slli	s2,0x3
   2047a:	854a                	c.mv	a0,s2
   2047c:	eb5f50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   20480:	a831                	c.j	2049c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa6a>
   20482:	87b2                	c.mv	a5,a2
   20484:	00860693          	addi	a3,a2,8
    uint64_t val = 0;
   20488:	4a01                	c.li	s4,0
        val = (val << 8) | (uint64_t)p[i];
   2048a:	0a22                	c.slli	s4,0x8
   2048c:	0007c703          	lbu	a4,0(a5)
   20490:	01476a33          	or	s4,a4,s4
      for (unsigned i = 0; i < sizeof(T); i++)
   20494:	0785                	c.addi	a5,1
   20496:	fed79ae3          	bne	a5,a3,2048a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa58>
   2049a:	bf4d                	c.j	2044c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa1a>
   2049c:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   2049e:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   204a0:	774a                	c.ldsp	a4,176(sp)
   204a2:	02e57f63          	bgeu	a0,a4,204e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaae>
    T *src = base, *dest = (T *)newbuf;
   204a6:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   204a8:	07a1                	c.addi	a5,8
   204aa:	fee7efe3          	bltu	a5,a4,204a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa76>
   204ae:	fff70793          	addi	a5,a4,-1
   204b2:	8f89                	c.sub	a5,a0
   204b4:	9be1                	c.andi	a5,-8
   204b6:	07a1                	c.addi	a5,8
   204b8:	97e6                	c.add	a5,s9
   204ba:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   204bc:	10bc                	c.addi4spn	a5,sp,104
   204be:	00f50563          	beq	a0,a5,204c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa96>
      delete[] (char *)base;
   204c2:	c119                	c.beqz	a0,204c8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa96>
   204c4:	8fcf60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   204c8:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   204ca:	67a2                	c.ldsp	a5,8(sp)
   204cc:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   204ce:	9cca                	c.add	s9,s2
   204d0:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   204d2:	77ca                	c.ldsp	a5,176(sp)
   204d4:	0147b023          	sd	s4,0(a5)
    end++;
   204d8:	77ca                	c.ldsp	a5,176(sp)
   204da:	07a1                	c.addi	a5,8
   204dc:	f93e                	c.sdsp	a5,176(sp)
      break;
   204de:	a9bd                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   204e0:	e466                	c.sdsp	s9,8(sp)
   204e2:	bfe9                	c.j	204bc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xa8a>
    return 0;
   204e4:	4a01                	c.li	s4,0
  size_type size() const { return end - base; }
   204e6:	772a                	c.ldsp	a4,168(sp)
   204e8:	77ca                	c.ldsp	a5,176(sp)
   204ea:	8f99                	c.sub	a5,a4
   204ec:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   204ee:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   204f0:	796a                	c.ldsp	s2,184(sp)
   204f2:	40e90933          	sub	s2,s2,a4
   204f6:	40395913          	srai	s2,s2,0x3
   204fa:	04f97963          	bgeu	s2,a5,2054c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb1a>
   204fe:	00091363          	bne	s2,zero,20504 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad2>
   20502:	4905                	c.li	s2,1
    while (target < n)
   20504:	00f97563          	bgeu	s2,a5,2050e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xadc>
      target <<= 1;
   20508:	0906                	c.slli	s2,0x1
    while (target < n)
   2050a:	fef96fe3          	bltu	s2,a5,20508 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xad6>
    char *newbuf = new char[sizeof(T[target])];
   2050e:	090e                	c.slli	s2,0x3
   20510:	854a                	c.mv	a0,s2
   20512:	e1ff50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   20516:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20518:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2051a:	774a                	c.ldsp	a4,176(sp)
   2051c:	02e57f63          	bgeu	a0,a4,2055a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb28>
    T *src = base, *dest = (T *)newbuf;
   20520:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20522:	07a1                	c.addi	a5,8
   20524:	fee7efe3          	bltu	a5,a4,20522 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xaf0>
   20528:	fff70793          	addi	a5,a4,-1
   2052c:	8f89                	c.sub	a5,a0
   2052e:	9be1                	c.andi	a5,-8
   20530:	07a1                	c.addi	a5,8
   20532:	97e6                	c.add	a5,s9
   20534:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20536:	10bc                	c.addi4spn	a5,sp,104
   20538:	00f50563          	beq	a0,a5,20542 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb10>
      delete[] (char *)base;
   2053c:	c119                	c.beqz	a0,20542 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb10>
   2053e:	882f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20542:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   20544:	67a2                	c.ldsp	a5,8(sp)
   20546:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20548:	9cca                	c.add	s9,s2
   2054a:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   2054c:	77ca                	c.ldsp	a5,176(sp)
   2054e:	0147b023          	sd	s4,0(a5)
    end++;
   20552:	77ca                	c.ldsp	a5,176(sp)
   20554:	07a1                	c.addi	a5,8
   20556:	f93e                	c.sdsp	a5,176(sp)
      break;
   20558:	a111                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2055a:	e466                	c.sdsp	s9,8(sp)
   2055c:	bfe9                	c.j	20536 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb04>
      stack.push_back(cur.sleb128());
   2055e:	0888                	c.addi4spn	a0,sp,80
   20560:	e18fa0ef          	jal	ra,1ab78 <dwarf::cursor::sleb128()>
   20564:	e42a                	c.sdsp	a0,8(sp)
  size_type size() const { return end - base; }
   20566:	772a                	c.ldsp	a4,168(sp)
   20568:	77ca                	c.ldsp	a5,176(sp)
   2056a:	8f99                	c.sub	a5,a4
   2056c:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   2056e:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20570:	796a                	c.ldsp	s2,184(sp)
   20572:	40e90933          	sub	s2,s2,a4
   20576:	40395913          	srai	s2,s2,0x3
   2057a:	04f97963          	bgeu	s2,a5,205cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb9a>
   2057e:	00091363          	bne	s2,zero,20584 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb52>
   20582:	4905                	c.li	s2,1
    while (target < n)
   20584:	00f97563          	bgeu	s2,a5,2058e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb5c>
      target <<= 1;
   20588:	0906                	c.slli	s2,0x1
    while (target < n)
   2058a:	fef96fe3          	bltu	s2,a5,20588 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb56>
    char *newbuf = new char[sizeof(T[target])];
   2058e:	090e                	c.slli	s2,0x3
   20590:	854a                	c.mv	a0,s2
   20592:	d9ff50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   20596:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   20598:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2059a:	774a                	c.ldsp	a4,176(sp)
   2059c:	02e57f63          	bgeu	a0,a4,205da <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xba8>
    T *src = base, *dest = (T *)newbuf;
   205a0:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   205a2:	07a1                	c.addi	a5,8
   205a4:	fee7efe3          	bltu	a5,a4,205a2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb70>
   205a8:	fff70a13          	addi	s4,a4,-1
   205ac:	40aa0a33          	sub	s4,s4,a0
   205b0:	ff8a7a13          	andi	s4,s4,-8
   205b4:	0a21                	c.addi	s4,8
   205b6:	9a66                	c.add	s4,s9
    if ((char *)base != buf)
   205b8:	10bc                	c.addi4spn	a5,sp,104
   205ba:	00f50563          	beq	a0,a5,205c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb92>
      delete[] (char *)base;
   205be:	c119                	c.beqz	a0,205c4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb92>
   205c0:	800f60ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   205c4:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   205c6:	f952                	c.sdsp	s4,176(sp)
    cap = base + target;
   205c8:	9cca                	c.add	s9,s2
   205ca:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(std::move(x));
   205cc:	77ca                	c.ldsp	a5,176(sp)
   205ce:	6722                	c.ldsp	a4,8(sp)
   205d0:	e398                	c.sd	a4,0(a5)
    end++;
   205d2:	77ca                	c.ldsp	a5,176(sp)
   205d4:	07a1                	c.addi	a5,8
   205d6:	f93e                	c.sdsp	a5,176(sp)
      break;
   205d8:	a651                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   205da:	8a66                	c.mv	s4,s9
   205dc:	bff1                	c.j	205b8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xb86>
      throw runtime_error("DW_OP_fbreg not implemented");
   205de:	4541                	c.li	a0,16
   205e0:	e41f50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   205e4:	892a                	c.mv	s2,a0
   205e6:	0000d597          	auipc	a1,0xd
   205ea:	66a58593          	addi	a1,a1,1642 # 2dc50 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2c0>
   205ee:	e03f50ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   205f2:	00019617          	auipc	a2,0x19
   205f6:	e1663603          	ld	a2,-490(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   205fa:	00019597          	auipc	a1,0x19
   205fe:	ffe5b583          	ld	a1,-2(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   20602:	854a                	c.mv	a0,s2
   20604:	8bcf60ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   20608:	842a                	c.mv	s0,a0
   2060a:	5710006f          	jal	zero,2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      tmp1.u = (unsigned)op - (unsigned)DW_OP::breg0;
   2060e:	f909091b          	addiw	s2,s2,-112
      tmp2.s = cur.sleb128();
   20612:	0888                	c.addi4spn	a0,sp,80
   20614:	d64fa0ef          	jal	ra,1ab78 <dwarf::cursor::sleb128()>
   20618:	8caa                	c.mv	s9,a0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   2061a:	000b3783          	ld	a5,0(s6)
   2061e:	6b9c                	c.ld	a5,16(a5)
   20620:	85ca                	c.mv	a1,s2
   20622:	855a                	c.mv	a0,s6
   20624:	9782                	c.jalr	a5
   20626:	9caa                	c.add	s9,a0
  size_type size() const { return end - base; }
   20628:	772a                	c.ldsp	a4,168(sp)
   2062a:	77ca                	c.ldsp	a5,176(sp)
   2062c:	8f99                	c.sub	a5,a4
   2062e:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20630:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20632:	796a                	c.ldsp	s2,184(sp)
   20634:	40e90933          	sub	s2,s2,a4
   20638:	40395913          	srai	s2,s2,0x3
   2063c:	04f97963          	bgeu	s2,a5,2068e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc5c>
   20640:	00091363          	bne	s2,zero,20646 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc14>
   20644:	4905                	c.li	s2,1
    while (target < n)
   20646:	00f97563          	bgeu	s2,a5,20650 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc1e>
      target <<= 1;
   2064a:	0906                	c.slli	s2,0x1
    while (target < n)
   2064c:	fef96fe3          	bltu	s2,a5,2064a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc18>
    char *newbuf = new char[sizeof(T[target])];
   20650:	090e                	c.slli	s2,0x3
   20652:	854a                	c.mv	a0,s2
   20654:	cddf50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   20658:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   2065a:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2065c:	774a                	c.ldsp	a4,176(sp)
   2065e:	02e57f63          	bgeu	a0,a4,2069c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc6a>
    T *src = base, *dest = (T *)newbuf;
   20662:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20664:	07a1                	c.addi	a5,8
   20666:	fee7efe3          	bltu	a5,a4,20664 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc32>
   2066a:	fff70793          	addi	a5,a4,-1
   2066e:	8f89                	c.sub	a5,a0
   20670:	9be1                	c.andi	a5,-8
   20672:	07a1                	c.addi	a5,8
   20674:	97d2                	c.add	a5,s4
   20676:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20678:	10bc                	c.addi4spn	a5,sp,104
   2067a:	00f50563          	beq	a0,a5,20684 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc52>
      delete[] (char *)base;
   2067e:	c119                	c.beqz	a0,20684 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc52>
   20680:	f41f50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20684:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20686:	67a2                	c.ldsp	a5,8(sp)
   20688:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2068a:	9a4a                	c.add	s4,s2
   2068c:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   2068e:	77ca                	c.ldsp	a5,176(sp)
   20690:	0197b023          	sd	s9,0(a5)
    end++;
   20694:	77ca                	c.ldsp	a5,176(sp)
   20696:	07a1                	c.addi	a5,8
   20698:	f93e                	c.sdsp	a5,176(sp)
      break;
   2069a:	a4c9                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2069c:	e452                	c.sdsp	s4,8(sp)
   2069e:	bfe9                	c.j	20678 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xc46>
   206a0:	4901                	c.li	s2,0
      tmp2.s = cur.sleb128();
   206a2:	0888                	c.addi4spn	a0,sp,80
   206a4:	cd4fa0ef          	jal	ra,1ab78 <dwarf::cursor::sleb128()>
   206a8:	8caa                	c.mv	s9,a0
      stack.push_back((int64_t)ctx->reg(tmp1.u) + tmp2.s);
   206aa:	000b3783          	ld	a5,0(s6)
   206ae:	6b9c                	c.ld	a5,16(a5)
   206b0:	0009059b          	addiw	a1,s2,0
   206b4:	855a                	c.mv	a0,s6
   206b6:	9782                	c.jalr	a5
   206b8:	9caa                	c.add	s9,a0
  size_type size() const { return end - base; }
   206ba:	772a                	c.ldsp	a4,168(sp)
   206bc:	77ca                	c.ldsp	a5,176(sp)
   206be:	8f99                	c.sub	a5,a4
   206c0:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   206c2:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   206c4:	796a                	c.ldsp	s2,184(sp)
   206c6:	40e90933          	sub	s2,s2,a4
   206ca:	40395913          	srai	s2,s2,0x3
   206ce:	04f97963          	bgeu	s2,a5,20720 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcee>
   206d2:	00091363          	bne	s2,zero,206d8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xca6>
   206d6:	4905                	c.li	s2,1
    while (target < n)
   206d8:	00f97563          	bgeu	s2,a5,206e2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcb0>
      target <<= 1;
   206dc:	0906                	c.slli	s2,0x1
    while (target < n)
   206de:	fef96fe3          	bltu	s2,a5,206dc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcaa>
    char *newbuf = new char[sizeof(T[target])];
   206e2:	090e                	c.slli	s2,0x3
   206e4:	854a                	c.mv	a0,s2
   206e6:	c4bf50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   206ea:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   206ec:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   206ee:	774a                	c.ldsp	a4,176(sp)
   206f0:	02e57f63          	bgeu	a0,a4,2072e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcfc>
    T *src = base, *dest = (T *)newbuf;
   206f4:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   206f6:	07a1                	c.addi	a5,8
   206f8:	fee7efe3          	bltu	a5,a4,206f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcc4>
   206fc:	fff70793          	addi	a5,a4,-1
   20700:	8f89                	c.sub	a5,a0
   20702:	9be1                	c.andi	a5,-8
   20704:	07a1                	c.addi	a5,8
   20706:	97d2                	c.add	a5,s4
   20708:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   2070a:	10bc                	c.addi4spn	a5,sp,104
   2070c:	00f50563          	beq	a0,a5,20716 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xce4>
      delete[] (char *)base;
   20710:	c119                	c.beqz	a0,20716 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xce4>
   20712:	eaff50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20716:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20718:	67a2                	c.ldsp	a5,8(sp)
   2071a:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2071c:	9a4a                	c.add	s4,s2
   2071e:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(std::move(x));
   20720:	77ca                	c.ldsp	a5,176(sp)
   20722:	0197b023          	sd	s9,0(a5)
    end++;
   20726:	77ca                	c.ldsp	a5,176(sp)
   20728:	07a1                	c.addi	a5,8
   2072a:	f93e                	c.sdsp	a5,176(sp)
      break;
   2072c:	ac05                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   2072e:	e452                	c.sdsp	s4,8(sp)
   20730:	bfe9                	c.j	2070a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xcd8>
  bool empty() const { return base == end; }
   20732:	772a                	c.ldsp	a4,168(sp)
   20734:	7cca                	c.ldsp	s9,176(sp)
      CHECK();
   20736:	2aec85e3          	beq	s9,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
  size_type size() const { return end - base; }
   2073a:	40ec87b3          	sub	a5,s9,a4
   2073e:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20740:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   20742:	796a                	c.ldsp	s2,184(sp)
   20744:	40e90933          	sub	s2,s2,a4
   20748:	40395913          	srai	s2,s2,0x3
   2074c:	04f97963          	bgeu	s2,a5,2079e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd6c>
   20750:	00091363          	bne	s2,zero,20756 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd24>
   20754:	4905                	c.li	s2,1
    while (target < n)
   20756:	00f97563          	bgeu	s2,a5,20760 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd2e>
      target <<= 1;
   2075a:	0906                	c.slli	s2,0x1
    while (target < n)
   2075c:	fef96fe3          	bltu	s2,a5,2075a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd28>
    char *newbuf = new char[sizeof(T[target])];
   20760:	090e                	c.slli	s2,0x3
   20762:	854a                	c.mv	a0,s2
   20764:	bcdf50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   20768:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   2076a:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   2076c:	774a                	c.ldsp	a4,176(sp)
   2076e:	04e57063          	bgeu	a0,a4,207ae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd7c>
    T *src = base, *dest = (T *)newbuf;
   20772:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   20774:	07a1                	c.addi	a5,8
   20776:	fee7efe3          	bltu	a5,a4,20774 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd42>
   2077a:	fff70793          	addi	a5,a4,-1
   2077e:	8f89                	c.sub	a5,a0
   20780:	9be1                	c.andi	a5,-8
   20782:	07a1                	c.addi	a5,8
   20784:	97d2                	c.add	a5,s4
   20786:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20788:	10bc                	c.addi4spn	a5,sp,104
   2078a:	00f50563          	beq	a0,a5,20794 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd62>
      delete[] (char *)base;
   2078e:	c119                	c.beqz	a0,20794 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd62>
   20790:	e31f50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   20794:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   20796:	67a2                	c.ldsp	a5,8(sp)
   20798:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   2079a:	9a4a                	c.add	s4,s2
   2079c:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(x);
   2079e:	ff8cb703          	ld	a4,-8(s9)
   207a2:	77ca                	c.ldsp	a5,176(sp)
   207a4:	e398                	c.sd	a4,0(a5)
    end++;
   207a6:	77ca                	c.ldsp	a5,176(sp)
   207a8:	07a1                	c.addi	a5,8
   207aa:	f93e                	c.sdsp	a5,176(sp)
  }
   207ac:	aa45                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   207ae:	e452                	c.sdsp	s4,8(sp)
   207b0:	bfe1                	c.j	20788 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd56>
  bool empty() const { return base == end; }
   207b2:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   207b4:	772a                	c.ldsp	a4,168(sp)
   207b6:	22e785e3          	beq	a5,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
    end--;
   207ba:	17e1                	c.addi	a5,-8
   207bc:	f93e                	c.sdsp	a5,176(sp)
  }
   207be:	aa79                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   207c0:	6a9c                	c.ld	a5,16(a3)
   207c2:	00f76563          	bltu	a4,a5,207cc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xd9a>
      underflow();
   207c6:	0888                	c.addi4spn	a0,sp,80
   207c8:	b70fa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   207cc:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   207ce:	6746                	c.ldsp	a4,80(sp)
   207d0:	4f58                	c.lw	a4,28(a4)
   207d2:	560703e3          	beq	a4,zero,21538 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b06>
        val = (val << 8) | (uint64_t)p[i];
   207d6:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   207da:	5630006f          	jal	zero,2153c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b0a>
    char *newbuf = new char[sizeof(T[target])];
   207de:	8caa                	c.mv	s9,a0
    T *src = base, *dest = (T *)newbuf;
   207e0:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   207e2:	774a                	c.ldsp	a4,176(sp)
   207e4:	04e57063          	bgeu	a0,a4,20824 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdf2>
    T *src = base, *dest = (T *)newbuf;
   207e8:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   207ea:	07a1                	c.addi	a5,8
   207ec:	fee7efe3          	bltu	a5,a4,207ea <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdb8>
   207f0:	fff70793          	addi	a5,a4,-1
   207f4:	8f89                	c.sub	a5,a0
   207f6:	9be1                	c.andi	a5,-8
   207f8:	07a1                	c.addi	a5,8
   207fa:	97e6                	c.add	a5,s9
   207fc:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   207fe:	10bc                	c.addi4spn	a5,sp,104
   20800:	00f50563          	beq	a0,a5,2080a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd8>
      delete[] (char *)base;
   20804:	c119                	c.beqz	a0,2080a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdd8>
   20806:	dbbf50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2080a:	f566                	c.sdsp	s9,168(sp)
    end = dest;
   2080c:	67a2                	c.ldsp	a5,8(sp)
   2080e:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20810:	9cca                	c.add	s9,s2
   20812:	fd66                	c.sdsp	s9,184(sp)
    new (end) T(x);
   20814:	000a3703          	ld	a4,0(s4)
   20818:	77ca                	c.ldsp	a5,176(sp)
   2081a:	e398                	c.sd	a4,0(a5)
    end++;
   2081c:	77ca                	c.ldsp	a5,176(sp)
   2081e:	07a1                	c.addi	a5,8
   20820:	f93e                	c.sdsp	a5,176(sp)
  }
   20822:	aa2d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   20824:	e466                	c.sdsp	s9,8(sp)
   20826:	bfe1                	c.j	207fe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdcc>
  size_type size() const { return end - base; }
   20828:	7cca                	c.ldsp	s9,176(sp)
   2082a:	772a                	c.ldsp	a4,168(sp)
   2082c:	40ec87b3          	sub	a5,s9,a4
      CHECKN(2);
   20830:	46a1                	c.li	a3,8
   20832:	1af6f7e3          	bgeu	a3,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20836:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   20838:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2083a:	796a                	c.ldsp	s2,184(sp)
   2083c:	40e90933          	sub	s2,s2,a4
   20840:	40395913          	srai	s2,s2,0x3
   20844:	04f97963          	bgeu	s2,a5,20896 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe64>
   20848:	00091363          	bne	s2,zero,2084e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe1c>
   2084c:	4905                	c.li	s2,1
    while (target < n)
   2084e:	00f97563          	bgeu	s2,a5,20858 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe26>
      target <<= 1;
   20852:	0906                	c.slli	s2,0x1
    while (target < n)
   20854:	fef96fe3          	bltu	s2,a5,20852 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe20>
    char *newbuf = new char[sizeof(T[target])];
   20858:	090e                	c.slli	s2,0x3
   2085a:	854a                	c.mv	a0,s2
   2085c:	ad5f50ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   20860:	8a2a                	c.mv	s4,a0
    T *src = base, *dest = (T *)newbuf;
   20862:	752a                	c.ldsp	a0,168(sp)
    for (; src < end; src++, dest++) {
   20864:	774a                	c.ldsp	a4,176(sp)
   20866:	04e57063          	bgeu	a0,a4,208a6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe74>
    T *src = base, *dest = (T *)newbuf;
   2086a:	87aa                	c.mv	a5,a0
    for (; src < end; src++, dest++) {
   2086c:	07a1                	c.addi	a5,8
   2086e:	fee7efe3          	bltu	a5,a4,2086c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe3a>
   20872:	fff70793          	addi	a5,a4,-1
   20876:	8f89                	c.sub	a5,a0
   20878:	9be1                	c.andi	a5,-8
   2087a:	07a1                	c.addi	a5,8
   2087c:	97d2                	c.add	a5,s4
   2087e:	e43e                	c.sdsp	a5,8(sp)
    if ((char *)base != buf)
   20880:	10bc                	c.addi4spn	a5,sp,104
   20882:	00f50563          	beq	a0,a5,2088c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe5a>
      delete[] (char *)base;
   20886:	c119                	c.beqz	a0,2088c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe5a>
   20888:	d39f50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
    base = (T *)newbuf;
   2088c:	f552                	c.sdsp	s4,168(sp)
    end = dest;
   2088e:	67a2                	c.ldsp	a5,8(sp)
   20890:	f93e                	c.sdsp	a5,176(sp)
    cap = base + target;
   20892:	9a4a                	c.add	s4,s2
   20894:	fd52                	c.sdsp	s4,184(sp)
    new (end) T(x);
   20896:	ff0cb703          	ld	a4,-16(s9)
   2089a:	77ca                	c.ldsp	a5,176(sp)
   2089c:	e398                	c.sd	a4,0(a5)
    end++;
   2089e:	77ca                	c.ldsp	a5,176(sp)
   208a0:	07a1                	c.addi	a5,8
   208a2:	f93e                	c.sdsp	a5,176(sp)
  }
   208a4:	a865                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    T *src = base, *dest = (T *)newbuf;
   208a6:	e452                	c.sdsp	s4,8(sp)
   208a8:	bfe1                	c.j	20880 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xe4e>
  size_type size() const { return end - base; }
   208aa:	77ca                	c.ldsp	a5,176(sp)
   208ac:	772a                	c.ldsp	a4,168(sp)
   208ae:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   208b2:	46a1                	c.li	a3,8
   208b4:	12e6f6e3          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   208b8:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   208bc:	ff07b683          	ld	a3,-16(a5)
   208c0:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   208c4:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(1) = tmp1.u;
   208c6:	fee7b823          	sd	a4,-16(a5)
      break;
   208ca:	a849                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   208cc:	77ca                	c.ldsp	a5,176(sp)
   208ce:	772a                	c.ldsp	a4,168(sp)
   208d0:	40e78733          	sub	a4,a5,a4
      CHECKN(3);
   208d4:	46c1                	c.li	a3,16
   208d6:	10e6f5e3          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   208da:	ff87b703          	ld	a4,-8(a5)
      stack.back() = stack.revat(1);
   208de:	ff07b683          	ld	a3,-16(a5)
   208e2:	fed7bc23          	sd	a3,-8(a5)
  reference revat(size_type n) { return *(end - 1 - n); }
   208e6:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(1) = stack.revat(2);
   208e8:	fe87b683          	ld	a3,-24(a5)
   208ec:	fed7b823          	sd	a3,-16(a5)
   208f0:	77ca                	c.ldsp	a5,176(sp)
      stack.revat(2) = tmp1.u;
   208f2:	fee7b423          	sd	a4,-24(a5)
      break;
   208f6:	a09d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      tmp1.u = subsec->addr_size;
   208f8:	0584e603          	lwu	a2,88(s1)
  bool empty() const { return base == end; }
   208fc:	794a                	c.ldsp	s2,176(sp)
      CHECK();
   208fe:	77aa                	c.ldsp	a5,168(sp)
   20900:	0f2780e3          	beq	a5,s2,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   20904:	000b3783          	ld	a5,0(s6)
   20908:	6f9c                	c.ld	a5,24(a5)
   2090a:	2601                	c.addiw	a2,0
   2090c:	ff893583          	ld	a1,-8(s2)
   20910:	855a                	c.mv	a0,s6
   20912:	9782                	c.jalr	a5
   20914:	a091                	c.j	20958 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf26>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20916:	6a9c                	c.ld	a5,16(a3)
   20918:	00f76563          	bltu	a4,a5,20922 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xef0>
      underflow();
   2091c:	0888                	c.addi4spn	a0,sp,80
   2091e:	a1afa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20922:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20924:	6746                	c.ldsp	a4,80(sp)
   20926:	4f58                	c.lw	a4,28(a4)
   20928:	44070de3          	beq	a4,zero,21582 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b50>
        val = (val << 8) | (uint64_t)p[i];
   2092c:	0007c603          	lbu	a2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   20930:	4570006f          	jal	zero,21586 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b54>
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   20934:	00019797          	auipc	a5,0x19
   20938:	a1c7b783          	ld	a5,-1508(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   2093c:	07c1                	c.addi	a5,16
   2093e:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   20942:	00019617          	auipc	a2,0x19
   20946:	b6663603          	ld	a2,-1178(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   2094a:	00019597          	auipc	a1,0x19
   2094e:	bd65b583          	ld	a1,-1066(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   20952:	854a                	c.mv	a0,s2
   20954:	d6df50ef          	jal	ra,166c0 <__cxa_throw@plt>
      stack.back() = ctx->deref_size(stack.back(), tmp1.u);
   20958:	fea93c23          	sd	a0,-8(s2)
      { return _M_ptr; }
   2095c:	66c6                	c.ldsp	a3,80(sp)
  bool end() const { return pos >= sec->end; }
   2095e:	7706                	c.ldsp	a4,96(sp)
  while (!cur.end()) {
   20960:	6a9c                	c.ld	a5,16(a3)
   20962:	0af77be3          	bgeu	a4,a5,21218 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17e6>
    if (sec->ord == byte_order::lsb) {
   20966:	4edc                	c.lw	a5,28(a3)
   20968:	460785e3          	beq	a5,zero,215d2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ba0>
        val = (val << 8) | (uint64_t)p[i];
   2096c:	00074783          	lbu	a5,0(a4)
      for (unsigned i = 0; i < sizeof(T); i++)
   20970:	4670006f          	jal	zero,215d6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ba4>
      tmp1.u = subsec->addr_size;
   20974:	0584e683          	lwu	a3,88(s1)
  size_type size() const { return end - base; }
   20978:	794a                	c.ldsp	s2,176(sp)
   2097a:	77aa                	c.ldsp	a5,168(sp)
   2097c:	40f907b3          	sub	a5,s2,a5
      CHECKN(2);
   20980:	06fdf0e3          	bgeu	s11,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp2.u = stack.back();
   20984:	ff893583          	ld	a1,-8(s2)
    end--;
   20988:	ff890793          	addi	a5,s2,-8
   2098c:	f93e                	c.sdsp	a5,176(sp)
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   2098e:	000b3783          	ld	a5,0(s6)
   20992:	739c                	c.ld	a5,32(a5)
   20994:	2681                	c.addiw	a3,0
   20996:	ff093603          	ld	a2,-16(s2)
   2099a:	855a                	c.mv	a0,s6
   2099c:	9782                	c.jalr	a5
   2099e:	a091                	c.j	209e2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xfb0>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   209a0:	6a9c                	c.ld	a5,16(a3)
   209a2:	00f76563          	bltu	a4,a5,209ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf7a>
      underflow();
   209a6:	0888                	c.addi4spn	a0,sp,80
   209a8:	990fa0ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   209ac:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   209ae:	6746                	c.ldsp	a4,80(sp)
   209b0:	4f58                	c.lw	a4,28(a4)
   209b2:	3e070ce3          	beq	a4,zero,215aa <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b78>
        val = (val << 8) | (uint64_t)p[i];
   209b6:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   209ba:	3f50006f          	jal	zero,215ae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b7c>
   209be:	00019797          	auipc	a5,0x19
   209c2:	9927b783          	ld	a5,-1646(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   209c6:	07c1                	c.addi	a5,16
   209c8:	00f93023          	sd	a5,0(s2)
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   209cc:	00019617          	auipc	a2,0x19
   209d0:	adc63603          	ld	a2,-1316(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   209d4:	00019597          	auipc	a1,0x19
   209d8:	b4c5b583          	ld	a1,-1204(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   209dc:	854a                	c.mv	a0,s2
   209de:	ce3f50ef          	jal	ra,166c0 <__cxa_throw@plt>
      stack.back() = ctx->xderef_size(tmp2.u, stack.back(), tmp1.u);
   209e2:	fea93823          	sd	a0,-16(s2)
      break;
   209e6:	bf9d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error("DW_OP_push_object_address not implemented");
   209e8:	4541                	c.li	a0,16
   209ea:	a37f50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   209ee:	892a                	c.mv	s2,a0
   209f0:	0000d597          	auipc	a1,0xd
   209f4:	2e058593          	addi	a1,a1,736 # 2dcd0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x340>
   209f8:	9f9f50ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   209fc:	00019617          	auipc	a2,0x19
   20a00:	a0c63603          	ld	a2,-1524(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   20a04:	00019597          	auipc	a1,0x19
   20a08:	bf45b583          	ld	a1,-1036(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   20a0c:	854a                	c.mv	a0,s2
   20a0e:	cb3f50ef          	jal	ra,166c0 <__cxa_throw@plt>
  bool empty() const { return base == end; }
   20a12:	794a                	c.ldsp	s2,176(sp)
      CHECK();
   20a14:	77aa                	c.ldsp	a5,168(sp)
   20a16:	7d278563          	beq	a5,s2,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ctx->form_tls_address(stack.back());
   20a1a:	000b3783          	ld	a5,0(s6)
   20a1e:	779c                	c.ld	a5,40(a5)
   20a20:	ff893583          	ld	a1,-8(s2)
   20a24:	855a                	c.mv	a0,s6
   20a26:	9782                	c.jalr	a5
   20a28:	fea93c23          	sd	a0,-8(s2)
      break;
   20a2c:	bf05                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   20a2e:	4541                	c.li	a0,16
   20a30:	9f1f50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   20a34:	892a                	c.mv	s2,a0
   20a36:	0000d597          	auipc	a1,0xd
   20a3a:	2ca58593          	addi	a1,a1,714 # 2dd00 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x370>
   20a3e:	9b3f50ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   20a42:	00019617          	auipc	a2,0x19
   20a46:	9c663603          	ld	a2,-1594(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   20a4a:	00019597          	auipc	a1,0x19
   20a4e:	bae5b583          	ld	a1,-1106(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   20a52:	854a                	c.mv	a0,s2
   20a54:	c6df50ef          	jal	ra,166c0 <__cxa_throw@plt>
   20a58:	774a                	c.ldsp	a4,176(sp)
      CHECK();
   20a5a:	77aa                	c.ldsp	a5,168(sp)
   20a5c:	78f70263          	beq	a4,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      if (tmp1.s < 0)
   20a60:	ff873783          	ld	a5,-8(a4)
   20a64:	43f7d693          	srai	a3,a5,0x3f
   20a68:	8fb5                	c.xor	a5,a3
   20a6a:	8f95                	c.sub	a5,a3
      stack.back() = tmp1.u;
   20a6c:	fef73c23          	sd	a5,-8(a4)
      break;
   20a70:	b5f5                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20a72:	77ca                	c.ldsp	a5,176(sp)
   20a74:	772a                	c.ldsp	a4,168(sp)
   20a76:	40e78733          	sub	a4,a5,a4
      UBINOP(&);
   20a7a:	46a1                	c.li	a3,8
   20a7c:	76e6f263          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20a80:	ff87b683          	ld	a3,-8(a5)
    end--;
   20a84:	ff878713          	addi	a4,a5,-8
   20a88:	f93a                	c.sdsp	a4,176(sp)
   20a8a:	ff07b703          	ld	a4,-16(a5)
   20a8e:	8f75                	c.and	a4,a3
   20a90:	fee7b823          	sd	a4,-16(a5)
      break;
   20a94:	b5e1                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20a96:	77ca                	c.ldsp	a5,176(sp)
   20a98:	772a                	c.ldsp	a4,168(sp)
   20a9a:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20a9e:	46a1                	c.li	a3,8
   20aa0:	74e6f063          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20aa4:	ff87b703          	ld	a4,-8(a5)
    end--;
   20aa8:	ff878693          	addi	a3,a5,-8
   20aac:	f936                	c.sdsp	a3,176(sp)
      tmp3.s = tmp1.s / tmp2.s;
   20aae:	ff07b683          	ld	a3,-16(a5)
   20ab2:	02d74733          	div	a4,a4,a3
      stack.back() = tmp3.u;
   20ab6:	fee7b823          	sd	a4,-16(a5)
      break;
   20aba:	b54d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20abc:	77ca                	c.ldsp	a5,176(sp)
   20abe:	772a                	c.ldsp	a4,168(sp)
   20ac0:	40e78733          	sub	a4,a5,a4
      UBINOP(-);
   20ac4:	46a1                	c.li	a3,8
   20ac6:	70e6fd63          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20aca:	ff87b683          	ld	a3,-8(a5)
    end--;
   20ace:	ff878713          	addi	a4,a5,-8
   20ad2:	f93a                	c.sdsp	a4,176(sp)
   20ad4:	ff07b703          	ld	a4,-16(a5)
   20ad8:	8f15                	c.sub	a4,a3
   20ada:	fee7b823          	sd	a4,-16(a5)
      break;
   20ade:	bdbd                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20ae0:	77ca                	c.ldsp	a5,176(sp)
   20ae2:	772a                	c.ldsp	a4,168(sp)
   20ae4:	40e78733          	sub	a4,a5,a4
      UBINOP(%);
   20ae8:	46a1                	c.li	a3,8
   20aea:	6ee6fb63          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20aee:	ff87b683          	ld	a3,-8(a5)
    end--;
   20af2:	ff878713          	addi	a4,a5,-8
   20af6:	f93a                	c.sdsp	a4,176(sp)
   20af8:	ff07b703          	ld	a4,-16(a5)
   20afc:	02d77733          	remu	a4,a4,a3
   20b00:	fee7b823          	sd	a4,-16(a5)
      break;
   20b04:	bda1                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20b06:	77ca                	c.ldsp	a5,176(sp)
   20b08:	772a                	c.ldsp	a4,168(sp)
   20b0a:	40e78733          	sub	a4,a5,a4
      UBINOP(*);
   20b0e:	46a1                	c.li	a3,8
   20b10:	6ce6f863          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20b14:	ff87b683          	ld	a3,-8(a5)
    end--;
   20b18:	ff878713          	addi	a4,a5,-8
   20b1c:	f93a                	c.sdsp	a4,176(sp)
   20b1e:	ff07b703          	ld	a4,-16(a5)
   20b22:	02d70733          	mul	a4,a4,a3
   20b26:	fee7b823          	sd	a4,-16(a5)
      break;
   20b2a:	bd0d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  bool empty() const { return base == end; }
   20b2c:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20b2e:	772a                	c.ldsp	a4,168(sp)
   20b30:	6af70863          	beq	a4,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.s = -tmp1.s;
   20b34:	ff87b703          	ld	a4,-8(a5)
   20b38:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp1.u;
   20b3c:	fee7bc23          	sd	a4,-8(a5)
      break;
   20b40:	bd31                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
   20b42:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20b44:	772a                	c.ldsp	a4,168(sp)
   20b46:	68f70d63          	beq	a4,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() = ~stack.back();
   20b4a:	ff87b703          	ld	a4,-8(a5)
   20b4e:	fff74713          	xori	a4,a4,-1
   20b52:	fee7bc23          	sd	a4,-8(a5)
      break;
   20b56:	b519                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20b58:	77ca                	c.ldsp	a5,176(sp)
   20b5a:	772a                	c.ldsp	a4,168(sp)
   20b5c:	40e78733          	sub	a4,a5,a4
      UBINOP(|);
   20b60:	46a1                	c.li	a3,8
   20b62:	66e6ff63          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20b66:	ff87b683          	ld	a3,-8(a5)
    end--;
   20b6a:	ff878713          	addi	a4,a5,-8
   20b6e:	f93a                	c.sdsp	a4,176(sp)
   20b70:	ff07b703          	ld	a4,-16(a5)
   20b74:	8f55                	c.or	a4,a3
   20b76:	fee7b823          	sd	a4,-16(a5)
      break;
   20b7a:	b3cd                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20b7c:	77ca                	c.ldsp	a5,176(sp)
   20b7e:	772a                	c.ldsp	a4,168(sp)
   20b80:	40e78733          	sub	a4,a5,a4
      UBINOP(+);
   20b84:	46a1                	c.li	a3,8
   20b86:	64e6fd63          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20b8a:	ff87b683          	ld	a3,-8(a5)
    end--;
   20b8e:	ff878713          	addi	a4,a5,-8
   20b92:	f93a                	c.sdsp	a4,176(sp)
   20b94:	ff07b703          	ld	a4,-16(a5)
   20b98:	9736                	c.add	a4,a3
   20b9a:	fee7b823          	sd	a4,-16(a5)
      break;
   20b9e:	bb7d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    return 0;
   20ba0:	4501                	c.li	a0,0
  bool empty() const { return base == end; }
   20ba2:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20ba4:	772a                	c.ldsp	a4,168(sp)
   20ba6:	62f70d63          	beq	a4,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      stack.back() += tmp1.u;
   20baa:	ff87b703          	ld	a4,-8(a5)
   20bae:	972a                	c.add	a4,a0
   20bb0:	fee7bc23          	sd	a4,-8(a5)
      break;
   20bb4:	b365                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20bb6:	77ca                	c.ldsp	a5,176(sp)
   20bb8:	772a                	c.ldsp	a4,168(sp)
   20bba:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20bbe:	46a1                	c.li	a3,8
   20bc0:	62e6f063          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20bc4:	ff87b683          	ld	a3,-8(a5)
    end--;
   20bc8:	ff878713          	addi	a4,a5,-8
   20bcc:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   20bce:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20bd2:	03f00613          	addi	a2,zero,63
   20bd6:	00d66763          	bltu	a2,a3,20be4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11b2>
        stack.back() = tmp2.u << tmp1.u;
   20bda:	00d71733          	sll	a4,a4,a3
   20bde:	fee7b823          	sd	a4,-16(a5)
   20be2:	bbad                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        stack.back() = 0;
   20be4:	fe07b823          	sd	zero,-16(a5)
   20be8:	bb95                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20bea:	77ca                	c.ldsp	a5,176(sp)
   20bec:	772a                	c.ldsp	a4,168(sp)
   20bee:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20bf2:	46a1                	c.li	a3,8
   20bf4:	5ee6f663          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20bf8:	ff87b683          	ld	a3,-8(a5)
    end--;
   20bfc:	ff878713          	addi	a4,a5,-8
   20c00:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   20c02:	ff07b703          	ld	a4,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20c06:	03f00613          	addi	a2,zero,63
   20c0a:	00d66763          	bltu	a2,a3,20c18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x11e6>
        stack.back() = tmp2.u >> tmp1.u;
   20c0e:	00d75733          	srl	a4,a4,a3
   20c12:	fee7b823          	sd	a4,-16(a5)
   20c16:	b399                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        stack.back() = 0;
   20c18:	fe07b823          	sd	zero,-16(a5)
   20c1c:	b381                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20c1e:	77ca                	c.ldsp	a5,176(sp)
   20c20:	772a                	c.ldsp	a4,168(sp)
   20c22:	40e78733          	sub	a4,a5,a4
      CHECKN(2);
   20c26:	46a1                	c.li	a3,8
   20c28:	5ae6fc63          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp1.u = stack.back();
   20c2c:	ff87b603          	ld	a2,-8(a5)
    end--;
   20c30:	ff878713          	addi	a4,a5,-8
   20c34:	f93a                	c.sdsp	a4,176(sp)
      tmp2.u = stack.back();
   20c36:	ff07b683          	ld	a3,-16(a5)
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20c3a:	03f00593          	addi	a1,zero,63
        tmp2.u = 0;
   20c3e:	4701                	c.li	a4,0
      if (tmp1.u < sizeof(tmp2.u) * 8)
   20c40:	00c5e963          	bltu	a1,a2,20c52 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1220>
      if (tmp3.u)
   20c44:	43f6d593          	srai	a1,a3,0x3f
   20c48:	00d5c733          	xor	a4,a1,a3
   20c4c:	8f0d                	c.sub	a4,a1
        tmp2.u >>= tmp1.u;
   20c4e:	00c75733          	srl	a4,a4,a2
      if (tmp3.u)
   20c52:	0006d463          	bge	a3,zero,20c5a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1228>
        tmp2.s = -tmp2.s;
   20c56:	40e00733          	sub	a4,zero,a4
      stack.back() = tmp2.u;
   20c5a:	fee7b823          	sd	a4,-16(a5)
      break;
   20c5e:	b9fd                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20c60:	77ca                	c.ldsp	a5,176(sp)
   20c62:	772a                	c.ldsp	a4,168(sp)
   20c64:	40e78733          	sub	a4,a5,a4
      UBINOP(^);
   20c68:	46a1                	c.li	a3,8
   20c6a:	56e6fb63          	bgeu	a3,a4,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20c6e:	ff87b683          	ld	a3,-8(a5)
    end--;
   20c72:	ff878713          	addi	a4,a5,-8
   20c76:	f93a                	c.sdsp	a4,176(sp)
   20c78:	ff07b703          	ld	a4,-16(a5)
   20c7c:	8f35                	c.xor	a4,a3
   20c7e:	fee7b823          	sd	a4,-16(a5)
      break;
   20c82:	b9e9                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20c84:	774a                	c.ldsp	a4,176(sp)
   20c86:	77aa                	c.ldsp	a5,168(sp)
   20c88:	40f707b3          	sub	a5,a4,a5
      SRELOP(<=);
   20c8c:	46a1                	c.li	a3,8
   20c8e:	54f6f963          	bgeu	a3,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20c92:	ff873783          	ld	a5,-8(a4)
    end--;
   20c96:	ff870693          	addi	a3,a4,-8
   20c9a:	f936                	c.sdsp	a3,176(sp)
   20c9c:	ff073683          	ld	a3,-16(a4)
   20ca0:	00d7a7b3          	slt	a5,a5,a3
   20ca4:	0017c793          	xori	a5,a5,1
   20ca8:	1782                	c.slli	a5,0x20
   20caa:	9381                	c.srli	a5,0x20
   20cac:	fef73823          	sd	a5,-16(a4)
      break;
   20cb0:	b175                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20cb2:	774a                	c.ldsp	a4,176(sp)
   20cb4:	77aa                	c.ldsp	a5,168(sp)
   20cb6:	40f707b3          	sub	a5,a4,a5
      SRELOP(>=);
   20cba:	46a1                	c.li	a3,8
   20cbc:	52f6f263          	bgeu	a3,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20cc0:	ff873783          	ld	a5,-8(a4)
    end--;
   20cc4:	ff870693          	addi	a3,a4,-8
   20cc8:	f936                	c.sdsp	a3,176(sp)
   20cca:	ff073683          	ld	a3,-16(a4)
   20cce:	00d7a7b3          	slt	a5,a5,a3
   20cd2:	0017c793          	xori	a5,a5,1
   20cd6:	1782                	c.slli	a5,0x20
   20cd8:	9381                	c.srli	a5,0x20
   20cda:	fef73823          	sd	a5,-16(a4)
      break;
   20cde:	b9bd                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20ce0:	774a                	c.ldsp	a4,176(sp)
   20ce2:	77aa                	c.ldsp	a5,168(sp)
   20ce4:	40f707b3          	sub	a5,a4,a5
      SRELOP(==);
   20ce8:	46a1                	c.li	a3,8
   20cea:	4ef6fb63          	bgeu	a3,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20cee:	ff873783          	ld	a5,-8(a4)
    end--;
   20cf2:	ff870693          	addi	a3,a4,-8
   20cf6:	f936                	c.sdsp	a3,176(sp)
   20cf8:	ff073683          	ld	a3,-16(a4)
   20cfc:	00d7a7b3          	slt	a5,a5,a3
   20d00:	0017c793          	xori	a5,a5,1
   20d04:	1782                	c.slli	a5,0x20
   20d06:	9381                	c.srli	a5,0x20
   20d08:	fef73823          	sd	a5,-16(a4)
      break;
   20d0c:	b981                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20d0e:	774a                	c.ldsp	a4,176(sp)
   20d10:	77aa                	c.ldsp	a5,168(sp)
   20d12:	40f707b3          	sub	a5,a4,a5
      SRELOP(<);
   20d16:	46a1                	c.li	a3,8
   20d18:	4cf6f463          	bgeu	a3,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20d1c:	ff873783          	ld	a5,-8(a4)
    end--;
   20d20:	ff870693          	addi	a3,a4,-8
   20d24:	f936                	c.sdsp	a3,176(sp)
   20d26:	ff073683          	ld	a3,-16(a4)
   20d2a:	00d7a7b3          	slt	a5,a5,a3
   20d2e:	0017c793          	xori	a5,a5,1
   20d32:	1782                	c.slli	a5,0x20
   20d34:	9381                	c.srli	a5,0x20
   20d36:	fef73823          	sd	a5,-16(a4)
      break;
   20d3a:	b10d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20d3c:	774a                	c.ldsp	a4,176(sp)
   20d3e:	77aa                	c.ldsp	a5,168(sp)
   20d40:	40f707b3          	sub	a5,a4,a5
      SRELOP(>);
   20d44:	46a1                	c.li	a3,8
   20d46:	48f6fd63          	bgeu	a3,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20d4a:	ff873783          	ld	a5,-8(a4)
    end--;
   20d4e:	ff870693          	addi	a3,a4,-8
   20d52:	f936                	c.sdsp	a3,176(sp)
   20d54:	ff073683          	ld	a3,-16(a4)
   20d58:	00d7a7b3          	slt	a5,a5,a3
   20d5c:	0017c793          	xori	a5,a5,1
   20d60:	1782                	c.slli	a5,0x20
   20d62:	9381                	c.srli	a5,0x20
   20d64:	fef73823          	sd	a5,-16(a4)
      break;
   20d68:	bed5                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  size_type size() const { return end - base; }
   20d6a:	774a                	c.ldsp	a4,176(sp)
   20d6c:	77aa                	c.ldsp	a5,168(sp)
   20d6e:	40f707b3          	sub	a5,a4,a5
      SRELOP(!=);
   20d72:	46a1                	c.li	a3,8
   20d74:	46f6f663          	bgeu	a3,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
   20d78:	ff873783          	ld	a5,-8(a4)
    end--;
   20d7c:	ff870693          	addi	a3,a4,-8
   20d80:	f936                	c.sdsp	a3,176(sp)
   20d82:	ff073683          	ld	a3,-16(a4)
   20d86:	00d7a7b3          	slt	a5,a5,a3
   20d8a:	0017c793          	xori	a5,a5,1
   20d8e:	1782                	c.slli	a5,0x20
   20d90:	9381                	c.srli	a5,0x20
   20d92:	fef73823          	sd	a5,-16(a4)
      break;
   20d96:	b6d9                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20d98:	6a9c                	c.ld	a5,16(a3)
   20d9a:	40e78633          	sub	a2,a5,a4
   20d9e:	4685                	c.li	a3,1
   20da0:	00c6f463          	bgeu	a3,a2,20da8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1376>
   20da4:	00f76563          	bltu	a4,a5,20dae <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x137c>
      underflow();
   20da8:	0888                	c.addi4spn	a0,sp,80
   20daa:	d8ff90ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20dae:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20db0:	6746                	c.ldsp	a4,80(sp)
   20db2:	4f58                	c.lw	a4,28(a4)
   20db4:	eb5d                	c.bnez	a4,20e6a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1438>
        val |= ((uint64_t)p[i]) << (i * 8);
   20db6:	0017c903          	lbu	s2,1(a5)
   20dba:	0922                	c.slli	s2,0x8
   20dbc:	0007c703          	lbu	a4,0(a5)
   20dc0:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   20dc4:	0789                	c.addi	a5,2
   20dc6:	f0be                	c.sdsp	a5,96(sp)
      tmp1.s = cur.fixed<int16_t>();
   20dc8:	0109191b          	slliw	s2,s2,0x10
   20dcc:	4109591b          	sraiw	s2,s2,0x10
    if (__is_single_threaded())
   20dd0:	000d4783          	lbu	a5,0(s10)
   20dd4:	10078263          	beq	a5,zero,20ed8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14a6>
  { *__mem += __val; }
   20dd8:	589c                	c.lw	a5,48(s1)
   20dda:	2785                	c.addiw	a5,1
   20ddc:	d89c                	c.sw	a5,48(s1)
  section_offset get_section_offset() const { return pos - sec->begin; }
   20dde:	67c6                	c.ldsp	a5,80(sp)
   20de0:	6798                	c.ld	a4,8(a5)
   20de2:	7786                	c.ldsp	a5,96(sp)
   20de4:	8f99                	c.sub	a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   20de6:	993e                	c.add	s2,a5
   20de8:	589c                	c.lw	a5,48(s1)
   20dea:	2785                	c.addiw	a5,1
   20dec:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   20dee:	60bc                	c.ld	a5,64(s1)
   20df0:	993e                	c.add	s2,a5
   20df2:	e8e2                	c.sdsp	s8,80(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   20df4:	6a66                	c.ldsp	s4,88(sp)
	__r._M_pi = _M_pi;
   20df6:	eca6                	c.sdsp	s1,88(sp)
	if (_M_pi != nullptr)
   20df8:	020a0363          	beq	s4,zero,20e1e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
    if (__is_single_threaded())
   20dfc:	00018797          	auipc	a5,0x18
   20e00:	6847b783          	ld	a5,1668(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20e04:	0007c783          	lbu	a5,0(a5)
   20e08:	10078063          	beq	a5,zero,20f08 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14d6>
    _Atomic_word __result = *__mem;
   20e0c:	030a2503          	lw	a0,48(s4)
    *__mem += __val;
   20e10:	fff5079b          	addiw	a5,a0,-1
   20e14:	02fa2823          	sw	a5,48(s4)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   20e18:	4785                	c.li	a5,1
   20e1a:	0ef50d63          	beq	a0,a5,20f14 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x14e2>
struct cursor {
   20e1e:	f0ca                	c.sdsp	s2,96(sp)
    if (__is_single_threaded())
   20e20:	000d4783          	lbu	a5,0(s10)
   20e24:	12078c63          	beq	a5,zero,20f5c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x152a>
    _Atomic_word __result = *__mem;
   20e28:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   20e2a:	fff5079b          	addiw	a5,a0,-1
   20e2e:	d89c                	c.sw	a5,48(s1)
   20e30:	4785                	c.li	a5,1
   20e32:	b2f515e3          	bne	a0,a5,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
	_M_dispose();
   20e36:	609c                	c.ld	a5,0(s1)
   20e38:	6b9c                	c.ld	a5,16(a5)
   20e3a:	8526                	c.mv	a0,s1
   20e3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20e3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20e42:	00018797          	auipc	a5,0x18
   20e46:	63e7b783          	ld	a5,1598(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20e4a:	0007c783          	lbu	a5,0(a5)
   20e4e:	10078d63          	beq	a5,zero,20f68 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1536>
    _Atomic_word __result = *__mem;
   20e52:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   20e54:	fff7871b          	addiw	a4,a5,-1
   20e58:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20e5a:	4705                	c.li	a4,1
   20e5c:	b0e790e3          	bne	a5,a4,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
	    _M_destroy();
   20e60:	609c                	c.ld	a5,0(s1)
   20e62:	6f9c                	c.ld	a5,24(a5)
   20e64:	8526                	c.mv	a0,s1
   20e66:	9782                	c.jalr	a5
   20e68:	bcd5                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
        val = (val << 8) | (uint64_t)p[i];
   20e6a:	0007c903          	lbu	s2,0(a5)
   20e6e:	0922                	c.slli	s2,0x8
   20e70:	0017c703          	lbu	a4,1(a5)
   20e74:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20e78:	b7b1                	c.j	20dc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1392>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   20e7a:	6a9c                	c.ld	a5,16(a3)
   20e7c:	40e78633          	sub	a2,a5,a4
   20e80:	4685                	c.li	a3,1
   20e82:	00c6f463          	bgeu	a3,a2,20e8a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1458>
   20e86:	00f76563          	bltu	a4,a5,20e90 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x145e>
      underflow();
   20e8a:	0888                	c.addi4spn	a0,sp,80
   20e8c:	cadf90ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   20e90:	7786                	c.ldsp	a5,96(sp)
    if (sec->ord == byte_order::lsb) {
   20e92:	6746                	c.ldsp	a4,80(sp)
   20e94:	4f58                	c.lw	a4,28(a4)
   20e96:	eb0d                	c.bnez	a4,20ec8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1496>
        val |= ((uint64_t)p[i]) << (i * 8);
   20e98:	0017c903          	lbu	s2,1(a5)
   20e9c:	0922                	c.slli	s2,0x8
   20e9e:	0007c703          	lbu	a4,0(a5)
   20ea2:	00e96933          	or	s2,s2,a4
    pos += sizeof(T);
   20ea6:	0789                	c.addi	a5,2
   20ea8:	f0be                	c.sdsp	a5,96(sp)
  bool empty() const { return base == end; }
   20eaa:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   20eac:	772a                	c.ldsp	a4,168(sp)
   20eae:	32f70963          	beq	a4,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      tmp2.u = stack.back();
   20eb2:	ff87b703          	ld	a4,-8(a5)
    end--;
   20eb6:	17e1                	c.addi	a5,-8
   20eb8:	f93e                	c.sdsp	a5,176(sp)
      if (tmp2.u == 0)
   20eba:	aa0701e3          	beq	a4,zero,2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      tmp1.s = cur.fixed<int16_t>();
   20ebe:	0109191b          	slliw	s2,s2,0x10
   20ec2:	4109591b          	sraiw	s2,s2,0x10
   20ec6:	b729                	c.j	20dd0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x139e>
        val = (val << 8) | (uint64_t)p[i];
   20ec8:	0007c903          	lbu	s2,0(a5)
   20ecc:	0922                	c.slli	s2,0x8
   20ece:	0017c703          	lbu	a4,1(a5)
   20ed2:	00e96933          	or	s2,s2,a4
      for (unsigned i = 0; i < sizeof(T); i++)
   20ed6:	bfc1                	c.j	20ea6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1474>
      __atomic_add(__mem, __val);
   20ed8:	4585                	c.li	a1,1
   20eda:	03048513          	addi	a0,s1,48
   20ede:	c72f50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
  section_offset get_section_offset() const { return pos - sec->begin; }
   20ee2:	67c6                	c.ldsp	a5,80(sp)
   20ee4:	6798                	c.ld	a4,8(a5)
   20ee6:	7786                	c.ldsp	a5,96(sp)
   20ee8:	8f99                	c.sub	a5,a4
      cur = cursor(subsec, (int64_t)cur.get_section_offset() + tmp1.s);
   20eea:	993e                	c.add	s2,a5
    if (__is_single_threaded())
   20eec:	00018797          	auipc	a5,0x18
   20ef0:	5947b783          	ld	a5,1428(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20ef4:	0007c783          	lbu	a5,0(a5)
   20ef8:	ee0798e3          	bne	a5,zero,20de8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13b6>
      __atomic_add(__mem, __val);
   20efc:	4585                	c.li	a1,1
   20efe:	03048513          	addi	a0,s1,48
   20f02:	c4ef50ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   20f06:	b5e5                	c.j	20dee <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13bc>
      return __exchange_and_add(__mem, __val);
   20f08:	55fd                	c.li	a1,-1
   20f0a:	030a0513          	addi	a0,s4,48
   20f0e:	c72f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20f12:	b719                	c.j	20e18 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13e6>
	_M_dispose();
   20f14:	000a3783          	ld	a5,0(s4)
   20f18:	6b9c                	c.ld	a5,16(a5)
   20f1a:	8552                	c.mv	a0,s4
   20f1c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   20f1e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   20f22:	00018797          	auipc	a5,0x18
   20f26:	55e7b783          	ld	a5,1374(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   20f2a:	0007c783          	lbu	a5,0(a5)
   20f2e:	c385                	c.beqz	a5,20f4e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x151c>
    _Atomic_word __result = *__mem;
   20f30:	034a2783          	lw	a5,52(s4)
    *__mem += __val;
   20f34:	fff7871b          	addiw	a4,a5,-1
   20f38:	02ea2a23          	sw	a4,52(s4)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   20f3c:	4705                	c.li	a4,1
   20f3e:	eee790e3          	bne	a5,a4,20e1e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
	    _M_destroy();
   20f42:	000a3783          	ld	a5,0(s4)
   20f46:	6f9c                	c.ld	a5,24(a5)
   20f48:	8552                	c.mv	a0,s4
   20f4a:	9782                	c.jalr	a5
   20f4c:	bdc9                	c.j	20e1e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13ec>
      return __exchange_and_add(__mem, __val);
   20f4e:	55fd                	c.li	a1,-1
   20f50:	034a0513          	addi	a0,s4,52
   20f54:	c2cf50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20f58:	87aa                	c.mv	a5,a0
   20f5a:	b7cd                	c.j	20f3c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x150a>
   20f5c:	55fd                	c.li	a1,-1
   20f5e:	03048513          	addi	a0,s1,48
   20f62:	c1ef50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20f66:	b5e9                	c.j	20e30 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x13fe>
   20f68:	55fd                	c.li	a1,-1
   20f6a:	03448513          	addi	a0,s1,52
   20f6e:	c12f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   20f72:	87aa                	c.mv	a5,a0
   20f74:	b5dd                	c.j	20e5a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1428>
      throw runtime_error(to_string(op) + " not implemented");
   20f76:	4541                	c.li	a0,16
   20f78:	ca8f50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   20f7c:	89aa                	c.mv	s3,a0
   20f7e:	85ca                	c.mv	a1,s2
   20f80:	0808                	c.addi4spn	a0,sp,16
   20f82:	329070ef          	jal	ra,28aaa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   20f86:	0000d597          	auipc	a1,0xd
   20f8a:	da258593          	addi	a1,a1,-606 # 2dd28 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   20f8e:	0808                	c.addi4spn	a0,sp,16
   20f90:	811f50ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   20f94:	85aa                	c.mv	a1,a0
   20f96:	1800                	c.addi4spn	s0,sp,48
   20f98:	8522                	c.mv	a0,s0
   20f9a:	cd6f50ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   20f9e:	85a2                	c.mv	a1,s0
   20fa0:	854e                	c.mv	a0,s3
   20fa2:	edef50ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   20fa6:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   20fa8:	009c                	c.addi4spn	a5,sp,64
   20faa:	00f50463          	beq	a0,a5,20fb2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1580>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   20fae:	d62f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   20fb2:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   20fb4:	101c                	c.addi4spn	a5,sp,32
   20fb6:	00f50463          	beq	a0,a5,20fbe <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x158c>
   20fba:	d56f50ef          	jal	ra,16510 <operator delete(void*)@plt>
   20fbe:	00018617          	auipc	a2,0x18
   20fc2:	44a63603          	ld	a2,1098(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   20fc6:	00018597          	auipc	a1,0x18
   20fca:	6325b583          	ld	a1,1586(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   20fce:	854e                	c.mv	a0,s3
   20fd0:	ef0f50ef          	jal	ra,166c0 <__cxa_throw@plt>
      result.location_type = expr_result::type::reg;
   20fd4:	4785                	c.li	a5,1
   20fd6:	00faa023          	sw	a5,0(s5)
      result.value = (unsigned)op - (unsigned)DW_OP::reg0;
   20fda:	fb09079b          	addiw	a5,s2,-80
   20fde:	1782                	c.slli	a5,0x20
   20fe0:	9381                	c.srli	a5,0x20
   20fe2:	00fab423          	sd	a5,8(s5)
      break;
   20fe6:	ba9d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      result.location_type = expr_result::type::reg;
   20fe8:	4785                	c.li	a5,1
   20fea:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   20fee:	6a9c                	c.ld	a5,16(a3)
   20ff0:	02f77763          	bgeu	a4,a5,2101e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15ec>
    std::uint64_t result = 0;
   20ff4:	4501                	c.li	a0,0
    int shift = 0;
   20ff6:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   20ff8:	0705                	c.addi	a4,1
   20ffa:	f0ba                	c.sdsp	a4,96(sp)
   20ffc:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21000:	07f7f613          	andi	a2,a5,127
   21004:	00b61633          	sll	a2,a2,a1
   21008:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   2100a:	0187979b          	slliw	a5,a5,0x18
   2100e:	4187d79b          	sraiw	a5,a5,0x18
   21012:	0007da63          	bge	a5,zero,21026 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15f4>
      shift += 7;
   21016:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   21018:	6a9c                	c.ld	a5,16(a3)
   2101a:	fcf76fe3          	bltu	a4,a5,20ff8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x15c6>
    underflow();
   2101e:	0888                	c.addi4spn	a0,sp,80
   21020:	b19f90ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   21024:	4501                	c.li	a0,0
      result.value = cur.uleb128();
   21026:	00aab423          	sd	a0,8(s5)
      break;
   2102a:	ba0d                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      result.location_type = expr_result::type::implicit;
   2102c:	478d                	c.li	a5,3
   2102e:	00faa023          	sw	a5,0(s5)
    while (pos < sec->end) {
   21032:	6a9c                	c.ld	a5,16(a3)
   21034:	02f77763          	bgeu	a4,a5,21062 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1630>
    std::uint64_t result = 0;
   21038:	4501                	c.li	a0,0
    int shift = 0;
   2103a:	4581                	c.li	a1,0
      uint8_t byte = *(uint8_t *)(pos++);
   2103c:	0705                	c.addi	a4,1
   2103e:	f0ba                	c.sdsp	a4,96(sp)
   21040:	fff74783          	lbu	a5,-1(a4)
      result |= (uint64_t)(byte & 0x7f) << shift;
   21044:	07f7f613          	andi	a2,a5,127
   21048:	00b61633          	sll	a2,a2,a1
   2104c:	8d51                	c.or	a0,a2
      if ((byte & 0x80) == 0)
   2104e:	0187979b          	slliw	a5,a5,0x18
   21052:	4187d79b          	sraiw	a5,a5,0x18
   21056:	0007da63          	bge	a5,zero,2106a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1638>
      shift += 7;
   2105a:	259d                	c.addiw	a1,7
    while (pos < sec->end) {
   2105c:	6a9c                	c.ld	a5,16(a3)
   2105e:	fcf76fe3          	bltu	a4,a5,2103c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x160a>
    underflow();
   21062:	0888                	c.addi4spn	a0,sp,80
   21064:	ad5f90ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   21068:	4501                	c.li	a0,0
      result.implicit_len = cur.uleb128();
   2106a:	00aabc23          	sd	a0,24(s5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2106e:	67c6                	c.ldsp	a5,80(sp)
   21070:	6b98                	c.ld	a4,16(a5)
   21072:	7786                	c.ldsp	a5,96(sp)
   21074:	40f706b3          	sub	a3,a4,a5
   21078:	00a6e463          	bltu	a3,a0,21080 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x164e>
   2107c:	00e7e563          	bltu	a5,a4,21086 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1654>
      underflow();
   21080:	0888                	c.addi4spn	a0,sp,80
   21082:	ab7f90ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
      result.implicit = cur.pos;
   21086:	7786                	c.ldsp	a5,96(sp)
   21088:	00fab823          	sd	a5,16(s5)
      break;
   2108c:	b8c1                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
  bool empty() const { return base == end; }
   2108e:	77ca                	c.ldsp	a5,176(sp)
      CHECK();
   21090:	772a                	c.ldsp	a4,168(sp)
   21092:	14f70763          	beq	a4,a5,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
      result.location_type = expr_result::type::literal;
   21096:	4709                	c.li	a4,2
   21098:	00eaa023          	sw	a4,0(s5)
      result.value = stack.back();
   2109c:	ff87b783          	ld	a5,-8(a5)
   210a0:	00fab423          	sd	a5,8(s5)
      break;
   210a4:	b865                	c.j	2095c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf2a>
      throw runtime_error(to_string(op) + " not implemented");
   210a6:	4541                	c.li	a0,16
   210a8:	b78f50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   210ac:	89aa                	c.mv	s3,a0
   210ae:	85ca                	c.mv	a1,s2
   210b0:	0808                	c.addi4spn	a0,sp,16
   210b2:	1f9070ef          	jal	ra,28aaa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__lhs.append(__rhs)); }
   210b6:	0000d597          	auipc	a1,0xd
   210ba:	c7258593          	addi	a1,a1,-910 # 2dd28 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   210be:	0808                	c.addi4spn	a0,sp,16
   210c0:	ee0f50ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   210c4:	85aa                	c.mv	a1,a0
   210c6:	1800                	c.addi4spn	s0,sp,48
   210c8:	8522                	c.mv	a0,s0
   210ca:	ba6f50ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   210ce:	85a2                	c.mv	a1,s0
   210d0:	854e                	c.mv	a0,s3
   210d2:	daef50ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   210d6:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   210d8:	009c                	c.addi4spn	a5,sp,64
   210da:	00f50463          	beq	a0,a5,210e2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16b0>
   210de:	c32f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   210e2:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   210e4:	101c                	c.addi4spn	a5,sp,32
   210e6:	00f50463          	beq	a0,a5,210ee <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x16bc>
   210ea:	c26f50ef          	jal	ra,16510 <operator delete(void*)@plt>
   210ee:	00018617          	auipc	a2,0x18
   210f2:	31a63603          	ld	a2,794(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   210f6:	00018597          	auipc	a1,0x18
   210fa:	5025b583          	ld	a1,1282(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   210fe:	854e                	c.mv	a0,s3
   21100:	dc0f50ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw expr_error("unknown user op " + to_string(op));
   21104:	4541                	c.li	a0,16
   21106:	b1af50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2110a:	89aa                	c.mv	s3,a0
   2110c:	85ca                	c.mv	a1,s2
   2110e:	0808                	c.addi4spn	a0,sp,16
   21110:	19b070ef          	jal	ra,28aaa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   21114:	0000d617          	auipc	a2,0xd
   21118:	c2c60613          	addi	a2,a2,-980 # 2dd40 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3b0>
   2111c:	4581                	c.li	a1,0
   2111e:	0808                	c.addi4spn	a0,sp,16
   21120:	a70f50ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21124:	85aa                	c.mv	a1,a0
   21126:	1800                	c.addi4spn	s0,sp,48
   21128:	8522                	c.mv	a0,s0
   2112a:	b46f50ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   2112e:	85a2                	c.mv	a1,s0
   21130:	854e                	c.mv	a0,s3
   21132:	c6ef50ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   21136:	00018797          	auipc	a5,0x18
   2113a:	21a7b783          	ld	a5,538(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   2113e:	07c1                	c.addi	a5,16
   21140:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   21144:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21146:	009c                	c.addi4spn	a5,sp,64
   21148:	00f50463          	beq	a0,a5,21150 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x171e>
   2114c:	bc4f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21150:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21152:	101c                	c.addi4spn	a5,sp,32
   21154:	00f50463          	beq	a0,a5,2115c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x172a>
   21158:	bb8f50ef          	jal	ra,16510 <operator delete(void*)@plt>
   2115c:	00018617          	auipc	a2,0x18
   21160:	34c63603          	ld	a2,844(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   21164:	00018597          	auipc	a1,0x18
   21168:	3bc5b583          	ld	a1,956(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   2116c:	854e                	c.mv	a0,s3
   2116e:	d52f50ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw expr_error("bad operation " + to_string(op));
   21172:	4541                	c.li	a0,16
   21174:	aacf50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   21178:	89aa                	c.mv	s3,a0
   2117a:	85ca                	c.mv	a1,s2
   2117c:	0808                	c.addi4spn	a0,sp,16
   2117e:	12d070ef          	jal	ra,28aaa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>
    { return std::move(__rhs.insert(0, __lhs)); }
   21182:	0000d617          	auipc	a2,0xd
   21186:	bd660613          	addi	a2,a2,-1066 # 2dd58 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3c8>
   2118a:	4581                	c.li	a1,0
   2118c:	0808                	c.addi4spn	a0,sp,16
   2118e:	a02f50ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   21192:	85aa                	c.mv	a1,a0
   21194:	1800                	c.addi4spn	s0,sp,48
   21196:	8522                	c.mv	a0,s0
   21198:	ad8f50ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   2119c:	85a2                	c.mv	a1,s0
   2119e:	854e                	c.mv	a0,s3
   211a0:	c00f50ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   211a4:	00018797          	auipc	a5,0x18
   211a8:	1ac7b783          	ld	a5,428(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   211ac:	07c1                	c.addi	a5,16
   211ae:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   211b2:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   211b4:	009c                	c.addi4spn	a5,sp,64
   211b6:	00f50463          	beq	a0,a5,211be <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x178c>
   211ba:	b56f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   211be:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   211c0:	101c                	c.addi4spn	a5,sp,32
   211c2:	00f50463          	beq	a0,a5,211ca <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1798>
   211c6:	b4af50ef          	jal	ra,16510 <operator delete(void*)@plt>
   211ca:	00018617          	auipc	a2,0x18
   211ce:	2de63603          	ld	a2,734(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   211d2:	00018597          	auipc	a1,0x18
   211d6:	34e5b583          	ld	a1,846(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   211da:	854e                	c.mv	a0,s3
   211dc:	ce4f50ef          	jal	ra,166c0 <__cxa_throw@plt>
  throw expr_error("stack underflow evaluating DWARF expression");
   211e0:	4541                	c.li	a0,16
   211e2:	a3ef50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   211e6:	892a                	c.mv	s2,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   211e8:	0000d597          	auipc	a1,0xd
   211ec:	b8058593          	addi	a1,a1,-1152 # 2dd68 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x3d8>
   211f0:	d80f50ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   211f4:	00018797          	auipc	a5,0x18
   211f8:	15c7b783          	ld	a5,348(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   211fc:	07c1                	c.addi	a5,16
   211fe:	00f93023          	sd	a5,0(s2)
   21202:	00018617          	auipc	a2,0x18
   21206:	2a663603          	ld	a2,678(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   2120a:	00018597          	auipc	a1,0x18
   2120e:	3165b583          	ld	a1,790(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   21212:	854a                	c.mv	a0,s2
   21214:	cacf50ef          	jal	ra,166c0 <__cxa_throw@plt>
  if (result.location_type == expr_result::type::address) {
   21218:	000aa783          	lw	a5,0(s5)
   2121c:	c399                	c.beqz	a5,21222 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17f0>
   2121e:	a2ffe06f          	jal	zero,1fc4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a>
   21222:	77ca                	c.ldsp	a5,176(sp)
    if (stack.empty())
   21224:	772a                	c.ldsp	a4,168(sp)
   21226:	00f70863          	beq	a4,a5,21236 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1804>
    result.value = stack.back();
   2122a:	ff87b783          	ld	a5,-8(a5)
   2122e:	00fab423          	sd	a5,8(s5)
   21232:	a1bfe06f          	jal	zero,1fc4c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x21a>
      throw expr_error("final stack is empty; no result given");
   21236:	4541                	c.li	a0,16
   21238:	9e8f50ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2123c:	892a                	c.mv	s2,a0
   2123e:	0000d597          	auipc	a1,0xd
   21242:	b5a58593          	addi	a1,a1,-1190 # 2dd98 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x408>
   21246:	d2af50ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2124a:	00018797          	auipc	a5,0x18
   2124e:	1067b783          	ld	a5,262(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   21252:	07c1                	c.addi	a5,16
   21254:	00f93023          	sd	a5,0(s2)
   21258:	00018617          	auipc	a2,0x18
   2125c:	25063603          	ld	a2,592(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   21260:	00018597          	auipc	a1,0x18
   21264:	2c05b583          	ld	a1,704(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   21268:	854a                	c.mv	a0,s2
   2126a:	c56f50ef          	jal	ra,166c0 <__cxa_throw@plt>
   2126e:	55fd                	c.li	a1,-1
   21270:	03040513          	addi	a0,s0,48
   21274:	90cf50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21278:	9f3fe06f          	jal	zero,1fc6a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x238>
	_M_dispose();
   2127c:	601c                	c.ld	a5,0(s0)
   2127e:	6b9c                	c.ld	a5,16(a5)
   21280:	8522                	c.mv	a0,s0
   21282:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21284:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21288:	00018797          	auipc	a5,0x18
   2128c:	1f87b783          	ld	a5,504(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21290:	0007c783          	lbu	a5,0(a5)
   21294:	c385                	c.beqz	a5,212b4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1882>
    _Atomic_word __result = *__mem;
   21296:	585c                	c.lw	a5,52(s0)
    *__mem += __val;
   21298:	fff7871b          	addiw	a4,a5,-1
   2129c:	d858                	c.sw	a4,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2129e:	4705                	c.li	a4,1
   212a0:	00e78463          	beq	a5,a4,212a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1876>
   212a4:	9d1fe06f          	jal	zero,1fc74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
	    _M_destroy();
   212a8:	601c                	c.ld	a5,0(s0)
   212aa:	6f9c                	c.ld	a5,24(a5)
   212ac:	8522                	c.mv	a0,s0
   212ae:	9782                	c.jalr	a5
   212b0:	9c5fe06f          	jal	zero,1fc74 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x242>
      return __exchange_and_add(__mem, __val);
   212b4:	55fd                	c.li	a1,-1
   212b6:	03440513          	addi	a0,s0,52
   212ba:	8c6f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   212be:	87aa                	c.mv	a5,a0
   212c0:	bff9                	c.j	2129e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x186c>
   212c2:	55fd                	c.li	a1,-1
   212c4:	03048513          	addi	a0,s1,48
   212c8:	8b8f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   212cc:	9c3fe06f          	jal	zero,1fc8e <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x25c>
	_M_dispose();
   212d0:	609c                	c.ld	a5,0(s1)
   212d2:	6b9c                	c.ld	a5,16(a5)
   212d4:	8526                	c.mv	a0,s1
   212d6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   212d8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   212dc:	00018797          	auipc	a5,0x18
   212e0:	1a47b783          	ld	a5,420(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   212e4:	0007c783          	lbu	a5,0(a5)
   212e8:	c385                	c.beqz	a5,21308 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18d6>
    _Atomic_word __result = *__mem;
   212ea:	58dc                	c.lw	a5,52(s1)
    *__mem += __val;
   212ec:	fff7871b          	addiw	a4,a5,-1
   212f0:	d8d8                	c.sw	a4,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   212f2:	4705                	c.li	a4,1
   212f4:	00e78463          	beq	a5,a4,212fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18ca>
   212f8:	9a1fe06f          	jal	zero,1fc98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
	    _M_destroy();
   212fc:	609c                	c.ld	a5,0(s1)
   212fe:	6f9c                	c.ld	a5,24(a5)
   21300:	8526                	c.mv	a0,s1
   21302:	9782                	c.jalr	a5
   21304:	995fe06f          	jal	zero,1fc98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x266>
      return __exchange_and_add(__mem, __val);
   21308:	55fd                	c.li	a1,-1
   2130a:	03448513          	addi	a0,s1,52
   2130e:	872f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21312:	87aa                	c.mv	a5,a0
   21314:	bff9                	c.j	212f2 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x18c0>
   21316:	55fd                	c.li	a1,-1
   21318:	030b8513          	addi	a0,s7,48
   2131c:	864f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21320:	99bfe06f          	jal	zero,1fcba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x288>
	_M_dispose();
   21324:	000bb783          	ld	a5,0(s7)
   21328:	6b9c                	c.ld	a5,16(a5)
   2132a:	855e                	c.mv	a0,s7
   2132c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2132e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21332:	00018797          	auipc	a5,0x18
   21336:	14e7b783          	ld	a5,334(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2133a:	0007c783          	lbu	a5,0(a5)
   2133e:	c39d                	c.beqz	a5,21364 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1932>
    _Atomic_word __result = *__mem;
   21340:	034ba783          	lw	a5,52(s7)
    *__mem += __val;
   21344:	fff7871b          	addiw	a4,a5,-1
   21348:	02ebaa23          	sw	a4,52(s7)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2134c:	4705                	c.li	a4,1
   2134e:	00e78463          	beq	a5,a4,21356 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1924>
   21352:	973fe06f          	jal	zero,1fcc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
	    _M_destroy();
   21356:	000bb783          	ld	a5,0(s7)
   2135a:	6f9c                	c.ld	a5,24(a5)
   2135c:	855e                	c.mv	a0,s7
   2135e:	9782                	c.jalr	a5
   21360:	965fe06f          	jal	zero,1fcc4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x292>
      return __exchange_and_add(__mem, __val);
   21364:	55fd                	c.li	a1,-1
   21366:	034b8513          	addi	a0,s7,52
   2136a:	816f50ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2136e:	87aa                	c.mv	a5,a0
   21370:	bff1                	c.j	2134c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x191a>
      throw runtime_error("DW_OP_fbreg not implemented");
   21372:	842a                	c.mv	s0,a0
   21374:	854a                	c.mv	a0,s2
   21376:	95af50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2137a:	6566                	c.ldsp	a0,88(sp)
   2137c:	c511                	c.beqz	a0,21388 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1956>
	  _M_pi->_M_release();
   2137e:	00018317          	auipc	t1,0x18
   21382:	04a33303          	ld	t1,74(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   21386:	9302                	c.jalr	t1
   21388:	8526                	c.mv	a0,s1
   2138a:	00018317          	auipc	t1,0x18
   2138e:	03e33303          	ld	t1,62(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   21392:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   21394:	000b8863          	beq	s7,zero,213a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1972>
	  _M_pi->_M_release();
   21398:	855e                	c.mv	a0,s7
   2139a:	00018317          	auipc	t1,0x18
   2139e:	02e33303          	ld	t1,46(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   213a2:	9302                	c.jalr	t1
    for (T *p = base; p < end; ++p)
   213a4:	752a                	c.ldsp	a0,168(sp)
   213a6:	87aa                	c.mv	a5,a0
   213a8:	774a                	c.ldsp	a4,176(sp)
   213aa:	10e7e163          	bltu	a5,a4,214ac <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a7a>
    if ((char *)base != buf)
   213ae:	10bc                	c.addi4spn	a5,sp,104
   213b0:	00f50563          	beq	a0,a5,213ba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1988>
      delete[] (char *)base;
   213b4:	c119                	c.beqz	a0,213ba <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1988>
   213b6:	a0af50ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   213ba:	8522                	c.mv	a0,s0
   213bc:	b34f50ef          	jal	ra,166f0 <_Unwind_Resume@plt>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   213c0:	842a                	c.mv	s0,a0
   213c2:	854a                	c.mv	a0,s2
   213c4:	90cf50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   213c8:	bf4d                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   213ca:	842a                	c.mv	s0,a0
   213cc:	854a                	c.mv	a0,s2
   213ce:	902f50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   213d2:	b765                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      throw runtime_error("DW_OP_push_object_address not implemented");
   213d4:	842a                	c.mv	s0,a0
   213d6:	854a                	c.mv	a0,s2
   213d8:	8f8f50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   213dc:	bf79                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      throw runtime_error("DW_OP_call_frame_cfa not implemented");
   213de:	842a                	c.mv	s0,a0
   213e0:	854a                	c.mv	a0,s2
   213e2:	8eef50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   213e6:	bf51                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   213e8:	842a                	c.mv	s0,a0
   213ea:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   213ec:	009c                	c.addi4spn	a5,sp,64
   213ee:	00f50463          	beq	a0,a5,213f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c4>
   213f2:	91ef50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   213f6:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   213f8:	101c                	c.addi4spn	a5,sp,32
   213fa:	00f50463          	beq	a0,a5,21402 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19d0>
   213fe:	912f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   21402:	854e                	c.mv	a0,s3
   21404:	8ccf50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   21408:	bf8d                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   2140a:	842a                	c.mv	s0,a0
   2140c:	b7ed                	c.j	213f6 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19c4>
   2140e:	842a                	c.mv	s0,a0
   21410:	bfcd                	c.j	21402 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19d0>
   21412:	842a                	c.mv	s0,a0
   21414:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21416:	009c                	c.addi4spn	a5,sp,64
   21418:	00f50463          	beq	a0,a5,21420 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ee>
   2141c:	8f4f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21420:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21422:	101c                	c.addi4spn	a5,sp,32
   21424:	00f50463          	beq	a0,a5,2142c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19fa>
   21428:	8e8f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw runtime_error(to_string(op) + " not implemented");
   2142c:	854e                	c.mv	a0,s3
   2142e:	8a2f50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   21432:	b7a1                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21434:	842a                	c.mv	s0,a0
   21436:	b7ed                	c.j	21420 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19ee>
   21438:	842a                	c.mv	s0,a0
   2143a:	bfcd                	c.j	2142c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x19fa>
   2143c:	842a                	c.mv	s0,a0
   2143e:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   21440:	009c                	c.addi4spn	a5,sp,64
   21442:	00f50463          	beq	a0,a5,2144a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a18>
   21446:	8caf50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2144a:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2144c:	101c                	c.addi4spn	a5,sp,32
   2144e:	00f50463          	beq	a0,a5,21456 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a24>
   21452:	8bef50ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw expr_error("unknown user op " + to_string(op));
   21456:	854e                	c.mv	a0,s3
   21458:	878f50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2145c:	bf39                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   2145e:	842a                	c.mv	s0,a0
   21460:	b7ed                	c.j	2144a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a18>
   21462:	842a                	c.mv	s0,a0
   21464:	bfcd                	c.j	21456 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a24>
   21466:	842a                	c.mv	s0,a0
   21468:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2146a:	009c                	c.addi4spn	a5,sp,64
   2146c:	00f50463          	beq	a0,a5,21474 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a42>
   21470:	8a0f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   21474:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   21476:	101c                	c.addi4spn	a5,sp,32
   21478:	00f50463          	beq	a0,a5,21480 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a4e>
   2147c:	894f50ef          	jal	ra,16510 <operator delete(void*)@plt>
      throw expr_error("bad operation " + to_string(op));
   21480:	854e                	c.mv	a0,s3
   21482:	84ef50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   21486:	bdd5                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
      { return _M_dataplus._M_p; }
   21488:	842a                	c.mv	s0,a0
   2148a:	b7ed                	c.j	21474 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a42>
   2148c:	842a                	c.mv	s0,a0
   2148e:	bfcd                	c.j	21480 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1a4e>
      throw expr_error("final stack is empty; no result given");
   21490:	842a                	c.mv	s0,a0
   21492:	854a                	c.mv	a0,s2
   21494:	83cf50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   21498:	b5cd                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
  throw expr_error("stack underflow evaluating DWARF expression");
   2149a:	842a                	c.mv	s0,a0
   2149c:	854a                	c.mv	a0,s2
   2149e:	832f50ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   214a2:	bde1                	c.j	2137a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1948>
	if (_M_pi != nullptr)
   214a4:	842a                	c.mv	s0,a0
   214a6:	b5fd                	c.j	21394 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1962>
    for (T *p = base; p < end; ++p)
   214a8:	842a                	c.mv	s0,a0
   214aa:	bded                	c.j	213a4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1972>
   214ac:	07a1                	c.addi	a5,8
   214ae:	bded                	c.j	213a8 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1976>
        val |= ((uint64_t)p[i]) << (i * 8);
   214b0:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   214b4:	0785                	c.addi	a5,1
   214b6:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   214b8:	772a                	c.ldsp	a4,168(sp)
   214ba:	77ca                	c.ldsp	a5,176(sp)
   214bc:	8f99                	c.sub	a5,a4
   214be:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   214c0:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   214c2:	796a                	c.ldsp	s2,184(sp)
   214c4:	40e90933          	sub	s2,s2,a4
   214c8:	40395913          	srai	s2,s2,0x3
   214cc:	00f96463          	bltu	s2,a5,214d4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aa2>
   214d0:	ac9fe06f          	jal	zero,1ff98 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x566>
   214d4:	00091363          	bne	s2,zero,214da <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aa8>
   214d8:	4905                	c.li	s2,1
    while (target < n)
   214da:	00f97563          	bgeu	s2,a5,214e4 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1ab2>
      target <<= 1;
   214de:	0906                	c.slli	s2,0x1
    while (target < n)
   214e0:	fef96fe3          	bltu	s2,a5,214de <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aac>
    char *newbuf = new char[sizeof(T[target])];
   214e4:	090e                	c.slli	s2,0x3
   214e6:	854a                	c.mv	a0,s2
   214e8:	e49f40ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   214ec:	a77fe06f          	jal	zero,1ff62 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x530>
        val |= ((uint64_t)p[i]) << (i * 8);
   214f0:	0007cc83          	lbu	s9,0(a5)
    pos += sizeof(T);
   214f4:	0785                	c.addi	a5,1
   214f6:	f0be                	c.sdsp	a5,96(sp)
      stack.push_back(cur.fixed<int8_t>());
   214f8:	018c9c9b          	slliw	s9,s9,0x18
   214fc:	418cdc9b          	sraiw	s9,s9,0x18
  size_type size() const { return end - base; }
   21500:	772a                	c.ldsp	a4,168(sp)
   21502:	77ca                	c.ldsp	a5,176(sp)
   21504:	8f99                	c.sub	a5,a4
   21506:	878d                	c.srai	a5,0x3
    reserve(size() + 1);
   21508:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   2150a:	796a                	c.ldsp	s2,184(sp)
   2150c:	40e90933          	sub	s2,s2,a4
   21510:	40395913          	srai	s2,s2,0x3
   21514:	00f96463          	bltu	s2,a5,2151c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1aea>
   21518:	d53fe06f          	jal	zero,2026a <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x838>
   2151c:	00091363          	bne	s2,zero,21522 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1af0>
   21520:	4905                	c.li	s2,1
    while (target < n)
   21522:	00f97563          	bgeu	s2,a5,2152c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1afa>
      target <<= 1;
   21526:	0906                	c.slli	s2,0x1
    while (target < n)
   21528:	fef96fe3          	bltu	s2,a5,21526 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1af4>
    char *newbuf = new char[sizeof(T[target])];
   2152c:	090e                	c.slli	s2,0x3
   2152e:	854a                	c.mv	a0,s2
   21530:	e01f40ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   21534:	d01fe06f          	jal	zero,20234 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x802>
        val |= ((uint64_t)p[i]) << (i * 8);
   21538:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   2153c:	0785                	c.addi	a5,1
   2153e:	f0be                	c.sdsp	a5,96(sp)
  size_type size() const { return end - base; }
   21540:	774a                	c.ldsp	a4,176(sp)
   21542:	762a                	c.ldsp	a2,168(sp)
   21544:	40c707b3          	sub	a5,a4,a2
   21548:	878d                	c.srai	a5,0x3
      CHECKN(tmp1.u);
   2154a:	c8d7ebe3          	bltu	a5,a3,211e0 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x17ae>
  reference revat(size_type n) { return *(end - 1 - n); }
   2154e:	068e                	c.slli	a3,0x3
   21550:	8f15                	c.sub	a4,a3
   21552:	ff870a13          	addi	s4,a4,-8
    reserve(size() + 1);
   21556:	0785                	c.addi	a5,1
    if (n <= (size_type)(cap - base))
   21558:	796a                	c.ldsp	s2,184(sp)
   2155a:	40c90933          	sub	s2,s2,a2
   2155e:	40395913          	srai	s2,s2,0x3
   21562:	aaf97963          	bgeu	s2,a5,20814 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xde2>
   21566:	00091363          	bne	s2,zero,2156c <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b3a>
   2156a:	4905                	c.li	s2,1
    while (target < n)
   2156c:	00f97563          	bgeu	s2,a5,21576 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b44>
      target <<= 1;
   21570:	0906                	c.slli	s2,0x1
    while (target < n)
   21572:	fef96fe3          	bltu	s2,a5,21570 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1b3e>
    char *newbuf = new char[sizeof(T[target])];
   21576:	090e                	c.slli	s2,0x3
   21578:	854a                	c.mv	a0,s2
   2157a:	db7f40ef          	jal	ra,16330 <operator new[](unsigned long)@plt>
   2157e:	a60ff06f          	jal	zero,207de <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xdac>
        val |= ((uint64_t)p[i]) << (i * 8);
   21582:	0007c603          	lbu	a2,0(a5)
    pos += sizeof(T);
   21586:	0785                	c.addi	a5,1
   21588:	f0be                	c.sdsp	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   2158a:	0584e783          	lwu	a5,88(s1)
   2158e:	b6c7f763          	bgeu	a5,a2,208fc <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xeca>
        throw expr_error("DW_OP_deref_size operand exceeds address size");
   21592:	4541                	c.li	a0,16
   21594:	e8df40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   21598:	892a                	c.mv	s2,a0
   2159a:	0000c597          	auipc	a1,0xc
   2159e:	6d658593          	addi	a1,a1,1750 # 2dc70 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x2e0>
   215a2:	9cef50ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   215a6:	b8eff06f          	jal	zero,20934 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf02>
        val |= ((uint64_t)p[i]) << (i * 8);
   215aa:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   215ae:	0785                	c.addi	a5,1
   215b0:	f0be                	c.sdsp	a5,96(sp)
      if (tmp1.u > subsec->addr_size)
   215b2:	0584e783          	lwu	a5,88(s1)
   215b6:	bcd7f163          	bgeu	a5,a3,20978 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf46>
        throw expr_error("DW_OP_xderef_size operand exceeds address size");
   215ba:	4541                	c.li	a0,16
   215bc:	e65f40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   215c0:	892a                	c.mv	s2,a0
   215c2:	0000c597          	auipc	a1,0xc
   215c6:	6de58593          	addi	a1,a1,1758 # 2dca0 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x310>
   215ca:	9a6f50ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   215ce:	bf0ff06f          	jal	zero,209be <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0xf8c>
        val |= ((uint64_t)p[i]) << (i * 8);
   215d2:	00074783          	lbu	a5,0(a4)
    pos += sizeof(T);
   215d6:	0705                	c.addi	a4,1
   215d8:	f0ba                	c.sdsp	a4,96(sp)
    return (T)val;
   215da:	0ff7f913          	andi	s2,a5,255
    switch (op) {
   215de:	37f5                	c.addiw	a5,-3
   215e0:	0ff7f613          	andi	a2,a5,255
   215e4:	b8c9e7e3          	bltu	s3,a2,21172 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const+0x1740>
   215e8:	00261793          	slli	a5,a2,0x2
   215ec:	97a2                	c.add	a5,s0
   215ee:	439c                	c.lw	a5,0(a5)
   215f0:	97a2                	c.add	a5,s0
   215f2:	8782                	c.jr	a5

00000000000215f4 <dwarf::expr::evaluate(dwarf::expr_context*) const>:
expr_result expr::evaluate(expr_context *ctx) const {
   215f4:	1101                	c.addi	sp,-32
   215f6:	ec06                	c.sdsp	ra,24(sp)
   215f8:	e822                	c.sdsp	s0,16(sp)
   215fa:	842a                	c.mv	s0,a0
  return evaluate(ctx, {});
   215fc:	e002                	c.sdsp	zero,0(sp)
   215fe:	e402                	c.sdsp	zero,8(sp)
   21600:	868a                	c.mv	a3,sp
   21602:	c30fe0ef          	jal	ra,1fa32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   21606:	8522                	c.mv	a0,s0
   21608:	60e2                	c.ldsp	ra,24(sp)
   2160a:	6442                	c.ldsp	s0,16(sp)
   2160c:	6105                	c.addi16sp	sp,32
   2160e:	8082                	c.jr	ra

0000000000021610 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>:
expr_result expr::evaluate(expr_context *ctx, taddr argument) const {
   21610:	7179                	c.addi16sp	sp,-48
   21612:	f406                	c.sdsp	ra,40(sp)
   21614:	f022                	c.sdsp	s0,32(sp)
   21616:	842a                	c.mv	s0,a0
  return evaluate(ctx, {argument});
   21618:	ec36                	c.sdsp	a3,24(sp)
   2161a:	083c                	c.addi4spn	a5,sp,24
   2161c:	e43e                	c.sdsp	a5,8(sp)
   2161e:	4785                	c.li	a5,1
   21620:	e83e                	c.sdsp	a5,16(sp)
   21622:	0034                	c.addi4spn	a3,sp,8
   21624:	c0efe0ef          	jal	ra,1fa32 <dwarf::expr::evaluate(dwarf::expr_context*, std::initializer_list<unsigned long> const&) const>
}
   21628:	8522                	c.mv	a0,s0
   2162a:	70a2                	c.ldsp	ra,40(sp)
   2162c:	7402                	c.ldsp	s0,32(sp)
   2162e:	6145                	c.addi16sp	sp,48
   21630:	8082                	c.jr	ra

0000000000021632 <_GLOBAL__sub_I_expr.cc>:

DWARFPP_END_NAMESPACE
   21632:	1141                	c.addi	sp,-16
   21634:	e406                	c.sdsp	ra,8(sp)
expr_context no_expr_context;
   21636:	e0818613          	addi	a2,gp,-504 # 39608 <__dso_handle>
   2163a:	00018597          	auipc	a1,0x18
   2163e:	cee5b583          	ld	a1,-786(a1) # 39328 <dwarf::no_expr_context@@Base+0x318>
   21642:	00018517          	auipc	a0,0x18
   21646:	c8e53503          	ld	a0,-882(a0) # 392d0 <dwarf::expr_context::~expr_context()@@Base+0x17c7c>
   2164a:	8d6f50ef          	jal	ra,16720 <__cxa_atexit@plt>
DWARFPP_END_NAMESPACE
   2164e:	60a2                	c.ldsp	ra,8(sp)
   21650:	0141                	c.addi	sp,16
   21652:	8082                	c.jr	ra

0000000000021654 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   21654:	8082                	c.jr	ra

0000000000021656 <dwarf::expr_error::~expr_error()>:
class expr_error : public std::runtime_error {
   21656:	1141                	c.addi	sp,-16
   21658:	e406                	c.sdsp	ra,8(sp)
   2165a:	00018797          	auipc	a5,0x18
   2165e:	cf67b783          	ld	a5,-778(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   21662:	07c1                	c.addi	a5,16
   21664:	e11c                	c.sd	a5,0(a0)
   21666:	edbf40ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   2166a:	60a2                	c.ldsp	ra,8(sp)
   2166c:	0141                	c.addi	sp,16
   2166e:	8082                	c.jr	ra

0000000000021670 <dwarf::expr_error::~expr_error()>:
   21670:	1141                	c.addi	sp,-16
   21672:	e406                	c.sdsp	ra,8(sp)
   21674:	e022                	c.sdsp	s0,0(sp)
   21676:	842a                	c.mv	s0,a0
   21678:	00018797          	auipc	a5,0x18
   2167c:	cd87b783          	ld	a5,-808(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   21680:	07c1                	c.addi	a5,16
   21682:	e11c                	c.sd	a5,0(a0)
   21684:	ebdf40ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   21688:	8522                	c.mv	a0,s0
   2168a:	e87f40ef          	jal	ra,16510 <operator delete(void*)@plt>
   2168e:	60a2                	c.ldsp	ra,8(sp)
   21690:	6402                	c.ldsp	s0,0(sp)
   21692:	0141                	c.addi	sp,16
   21694:	8082                	c.jr	ra

0000000000021696 <dwarf::expr_context::~expr_context()>:
  virtual ~expr_context() {}
   21696:	1141                	c.addi	sp,-16
   21698:	e406                	c.sdsp	ra,8(sp)
   2169a:	e77f40ef          	jal	ra,16510 <operator delete(void*)@plt>
   2169e:	60a2                	c.ldsp	ra,8(sp)
   216a0:	0141                	c.addi	sp,16
   216a2:	8082                	c.jr	ra

00000000000216a4 <dwarf::expr_context::form_tls_address(unsigned long)>:
  virtual taddr form_tls_address(taddr address) {
   216a4:	1101                	c.addi	sp,-32
   216a6:	ec06                	c.sdsp	ra,24(sp)
   216a8:	e822                	c.sdsp	s0,16(sp)
   216aa:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   216ac:	4541                	c.li	a0,16
   216ae:	d73f40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   216b2:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   216b4:	0000c597          	auipc	a1,0xc
   216b8:	4e458593          	addi	a1,a1,1252 # 2db98 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x208>
   216bc:	8b4f50ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   216c0:	00018797          	auipc	a5,0x18
   216c4:	c907b783          	ld	a5,-880(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   216c8:	07c1                	c.addi	a5,16
   216ca:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_form_tls_address operations not supported");
   216cc:	00018617          	auipc	a2,0x18
   216d0:	ddc63603          	ld	a2,-548(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   216d4:	00018597          	auipc	a1,0x18
   216d8:	e4c5b583          	ld	a1,-436(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   216dc:	8522                	c.mv	a0,s0
   216de:	fe3f40ef          	jal	ra,166c0 <__cxa_throw@plt>
   216e2:	84aa                	c.mv	s1,a0
   216e4:	8522                	c.mv	a0,s0
   216e6:	debf40ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   216ea:	8526                	c.mv	a0,s1
   216ec:	804f50ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000216f0 <dwarf::expr_context::xderef_size(unsigned long, unsigned long, unsigned int)>:
  virtual taddr xderef_size(taddr address, taddr asid, unsigned size) {
   216f0:	1101                	c.addi	sp,-32
   216f2:	ec06                	c.sdsp	ra,24(sp)
   216f4:	e822                	c.sdsp	s0,16(sp)
   216f6:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_xderef_size operations not supported");
   216f8:	4541                	c.li	a0,16
   216fa:	d27f40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   216fe:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   21700:	0000c597          	auipc	a1,0xc
   21704:	4c858593          	addi	a1,a1,1224 # 2dbc8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x238>
   21708:	868f50ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2170c:	00018797          	auipc	a5,0x18
   21710:	c447b783          	ld	a5,-956(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   21714:	07c1                	c.addi	a5,16
   21716:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_xderef_size operations not supported");
   21718:	00018617          	auipc	a2,0x18
   2171c:	d9063603          	ld	a2,-624(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   21720:	00018597          	auipc	a1,0x18
   21724:	e005b583          	ld	a1,-512(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   21728:	8522                	c.mv	a0,s0
   2172a:	f97f40ef          	jal	ra,166c0 <__cxa_throw@plt>
   2172e:	84aa                	c.mv	s1,a0
   21730:	8522                	c.mv	a0,s0
   21732:	d9ff40ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   21736:	8526                	c.mv	a0,s1
   21738:	fb9f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002173c <dwarf::expr_context::deref_size(unsigned long, unsigned int)>:
  virtual taddr deref_size(taddr address, unsigned size) {
   2173c:	1101                	c.addi	sp,-32
   2173e:	ec06                	c.sdsp	ra,24(sp)
   21740:	e822                	c.sdsp	s0,16(sp)
   21742:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_deref_size operations not supported");
   21744:	4541                	c.li	a0,16
   21746:	cdbf40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2174a:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2174c:	0000c597          	auipc	a1,0xc
   21750:	4ac58593          	addi	a1,a1,1196 # 2dbf8 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x268>
   21754:	81cf50ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   21758:	00018797          	auipc	a5,0x18
   2175c:	bf87b783          	ld	a5,-1032(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   21760:	07c1                	c.addi	a5,16
   21762:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_deref_size operations not supported");
   21764:	00018617          	auipc	a2,0x18
   21768:	d4463603          	ld	a2,-700(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   2176c:	00018597          	auipc	a1,0x18
   21770:	db45b583          	ld	a1,-588(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   21774:	8522                	c.mv	a0,s0
   21776:	f4bf40ef          	jal	ra,166c0 <__cxa_throw@plt>
   2177a:	84aa                	c.mv	s1,a0
   2177c:	8522                	c.mv	a0,s0
   2177e:	d53f40ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   21782:	8526                	c.mv	a0,s1
   21784:	f6df40ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000021788 <dwarf::expr_context::reg(unsigned int)>:
  virtual taddr reg(unsigned regnum) {
   21788:	1101                	c.addi	sp,-32
   2178a:	ec06                	c.sdsp	ra,24(sp)
   2178c:	e822                	c.sdsp	s0,16(sp)
   2178e:	e426                	c.sdsp	s1,8(sp)
    throw expr_error("DW_OP_breg* operations not supported");
   21790:	4541                	c.li	a0,16
   21792:	c8ff40ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   21796:	842a                	c.mv	s0,a0
  explicit expr_error(const char *what_arg) : std::runtime_error(what_arg) {}
   21798:	0000c597          	auipc	a1,0xc
   2179c:	49058593          	addi	a1,a1,1168 # 2dc28 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x298>
   217a0:	fd1f40ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   217a4:	00018797          	auipc	a5,0x18
   217a8:	bac7b783          	ld	a5,-1108(a5) # 39350 <vtable for dwarf::expr_error@@Base+0x8c8>
   217ac:	07c1                	c.addi	a5,16
   217ae:	e01c                	c.sd	a5,0(s0)
    throw expr_error("DW_OP_breg* operations not supported");
   217b0:	00018617          	auipc	a2,0x18
   217b4:	cf863603          	ld	a2,-776(a2) # 394a8 <dwarf::expr_error::~expr_error()@@Base+0x17e52>
   217b8:	00018597          	auipc	a1,0x18
   217bc:	d685b583          	ld	a1,-664(a1) # 39520 <typeinfo for dwarf::expr_error@@Base+0xac0>
   217c0:	8522                	c.mv	a0,s0
   217c2:	efff40ef          	jal	ra,166c0 <__cxa_throw@plt>
   217c6:	84aa                	c.mv	s1,a0
   217c8:	8522                	c.mv	a0,s0
   217ca:	d07f40ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   217ce:	8526                	c.mv	a0,s1
   217d0:	f21f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000217d4 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)>:

using namespace std;

DWARFPP_BEGIN_NAMESPACE

rangelist::rangelist(const std::shared_ptr<section> &sec, section_offset off,
   217d4:	715d                	c.addi16sp	sp,-80
   217d6:	e486                	c.sdsp	ra,72(sp)
   217d8:	e0a2                	c.sdsp	s0,64(sp)
   217da:	fc26                	c.sdsp	s1,56(sp)
   217dc:	f84a                	c.sdsp	s2,48(sp)
   217de:	f44e                	c.sdsp	s3,40(sp)
   217e0:	f052                	c.sdsp	s4,32(sp)
   217e2:	ec56                	c.sdsp	s5,24(sp)
   217e4:	e85a                	c.sdsp	s6,16(sp)
   217e6:	842a                	c.mv	s0,a0
   217e8:	89b6                	c.mv	s3,a3
   217ea:	8a3a                	c.mv	s4,a4
	: _M_start(), _M_finish(), _M_end_of_storage()
   217ec:	00053023          	sd	zero,0(a0)
   217f0:	00053423          	sd	zero,8(a0)
   217f4:	00053823          	sd	zero,16(a0)
      { return _M_ptr; }
   217f8:	0005b903          	ld	s2,0(a1)
   217fc:	57fd                	c.li	a5,-1
   217fe:	e03e                	c.sdsp	a5,0(sp)
      fmt = this->fmt;
   21800:	01892a83          	lw	s5,24(s2)
    if (addr_size == 0)
   21804:	e299                	c.bnez	a3,2180a <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x36>
      addr_size = this->addr_size;
   21806:	02092983          	lw	s3,32(s2)
        type, begin + start, std::min(len, (section_length)(end - begin)), ord,
   2180a:	00893703          	ld	a4,8(s2)
   2180e:	00c704b3          	add	s1,a4,a2
   21812:	01093783          	ld	a5,16(s2)
   21816:	8f99                	c.sub	a5,a4
   21818:	e43e                	c.sdsp	a5,8(sp)
      if (__b < __a)
   2181a:	577d                	c.li	a4,-1
	return __b;
   2181c:	00810b13          	addi	s6,sp,8
      if (__b < __a)
   21820:	00e79363          	bne	a5,a4,21826 <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0x52>
      return __a;
   21824:	8b0a                	c.mv	s6,sp
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   21826:	00043c23          	sd	zero,24(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2182a:	06000513          	addi	a0,zero,96
   2182e:	cf3f40ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   21832:	00052423          	sw	zero,8(a0)
   21836:	00052623          	sw	zero,12(a0)
   2183a:	00052823          	sw	zero,16(a0)
   2183e:	00052a23          	sw	zero,20(a0)
   21842:	00052c23          	sw	zero,24(a0)
   21846:	00052e23          	sw	zero,28(a0)
   2184a:	02053023          	sd	zero,32(a0)
   2184e:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   21852:	4785                	c.li	a5,1
   21854:	d91c                	c.sw	a5,48(a0)
   21856:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   21858:	00018797          	auipc	a5,0x18
   2185c:	d687b783          	ld	a5,-664(a5) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   21860:	07c1                	c.addi	a5,16
   21862:	e11c                	c.sd	a5,0(a0)
   21864:	00092683          	lw	a3,0(s2)
   21868:	000b3703          	ld	a4,0(s6)
   2186c:	01c92783          	lw	a5,28(s2)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   21870:	dd14                	c.sw	a3,56(a0)
   21872:	e124                	c.sd	s1,64(a0)
   21874:	94ba                	c.add	s1,a4
   21876:	e524                	c.sd	s1,72(a0)
   21878:	05552823          	sw	s5,80(a0)
        ord(ord), addr_size(addr_size) {}
   2187c:	c97c                	c.sw	a5,84(a0)
   2187e:	05352c23          	sw	s3,88(a0)
	  _M_pi = __pi;
   21882:	f008                	c.sd	a0,32(s0)
   21884:	03850793          	addi	a5,a0,56
	  __p = __pi->_M_ptr();
   21888:	ec1c                	c.sd	a5,24(s0)
                     unsigned cu_addr_size, taddr cu_low_pc)
    : sec(sec->slice(off, ~0, format::unknown, cu_addr_size)),
      base_addr(cu_low_pc) {}
   2188a:	03443423          	sd	s4,40(s0)
   2188e:	60a6                	c.ldsp	ra,72(sp)
   21890:	6406                	c.ldsp	s0,64(sp)
   21892:	74e2                	c.ldsp	s1,56(sp)
   21894:	7942                	c.ldsp	s2,48(sp)
   21896:	79a2                	c.ldsp	s3,40(sp)
   21898:	7a02                	c.ldsp	s4,32(sp)
   2189a:	6ae2                	c.ldsp	s5,24(sp)
   2189c:	6b42                	c.ldsp	s6,16(sp)
   2189e:	6161                	c.addi16sp	sp,80
   218a0:	8082                	c.jr	ra
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   218a2:	84aa                	c.mv	s1,a0
   218a4:	6008                	c.ld	a0,0(s0)
	if (__p)
   218a6:	c119                	c.beqz	a0,218ac <dwarf::rangelist::rangelist(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, unsigned long)+0xd8>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   218a8:	c69f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   218ac:	8526                	c.mv	a0,s1
   218ae:	e43f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000218b2 <dwarf::rangelist::end() const>:
      : _M_ptr(0), _M_refcount()
   218b2:	00053023          	sd	zero,0(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   218b6:	00053423          	sd	zero,8(a0)
  iterator() : sec(nullptr), base_addr(0), pos(0) {}
   218ba:	00053823          	sd	zero,16(a0)
   218be:	00053c23          	sd	zero,24(a0)
  if (sec)
    return iterator(sec, base_addr);
  return end();
}

rangelist::iterator rangelist::end() const { return iterator(); }
   218c2:	8082                	c.jr	ra

00000000000218c4 <dwarf::rangelist::iterator::operator++()>:
    : sec(sec), base_addr(base_addr), pos(0) {
  // Read in the first entry
  ++(*this);
}

rangelist::iterator &rangelist::iterator::operator++() {
   218c4:	715d                	c.addi16sp	sp,-80
   218c6:	e486                	c.sdsp	ra,72(sp)
   218c8:	e0a2                	c.sdsp	s0,64(sp)
   218ca:	fc26                	c.sdsp	s1,56(sp)
   218cc:	f84a                	c.sdsp	s2,48(sp)
   218ce:	f44e                	c.sdsp	s3,40(sp)
   218d0:	f052                	c.sdsp	s4,32(sp)
   218d2:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   218d4:	6104                	c.ld	s1,0(a0)
  // DWARF4 section 2.17.3
  taddr largest_offset = ~(taddr)0;
  if (sec->addr_size < sizeof(taddr))
   218d6:	509c                	c.lw	a5,32(s1)
   218d8:	471d                	c.li	a4,7
  taddr largest_offset = ~(taddr)0;
   218da:	5a7d                	c.li	s4,-1
  if (sec->addr_size < sizeof(taddr))
   218dc:	00f76863          	bltu	a4,a5,218ec <dwarf::rangelist::iterator::operator++()+0x28>
    largest_offset += 1 << (8 * sec->addr_size);
   218e0:	0037979b          	slliw	a5,a5,0x3
   218e4:	4a05                	c.li	s4,1
   218e6:	00fa1a3b          	sllw	s4,s4,a5
   218ea:	1a7d                	c.addi	s4,-1
      : _M_pi(__r._M_pi)
   218ec:	00843903          	ld	s2,8(s0)
	if (_M_pi != nullptr)
   218f0:	20090963          	beq	s2,zero,21b02 <dwarf::rangelist::iterator::operator++()+0x23e>
    if (__is_single_threaded())
   218f4:	00018797          	auipc	a5,0x18
   218f8:	b8c7b783          	ld	a5,-1140(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   218fc:	0007c783          	lbu	a5,0(a5)
   21900:	c7d1                	c.beqz	a5,2198c <dwarf::rangelist::iterator::operator++()+0xc8>
  { *__mem += __val; }
   21902:	03092783          	lw	a5,48(s2)
   21906:	2785                	c.addiw	a5,1
   21908:	02f92823          	sw	a5,48(s2)

  // Read in entries until we reach a regular entry of an
  // end-of-list.  Note that pos points to the beginning of the
  // entry *following* the current entry, so that's where we
  // start.
  cursor cur(sec, pos);
   2190c:	01843983          	ld	s3,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21910:	e426                	c.sdsp	s1,8(sp)
      : _M_pi(__r._M_pi)
   21912:	e84a                	c.sdsp	s2,16(sp)
    if (__is_single_threaded())
   21914:	00018797          	auipc	a5,0x18
   21918:	b6c7b783          	ld	a5,-1172(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2191c:	0007c783          	lbu	a5,0(a5)
   21920:	cfa5                	c.beqz	a5,21998 <dwarf::rangelist::iterator::operator++()+0xd4>
  { *__mem += __val; }
   21922:	03092783          	lw	a5,48(s2)
   21926:	2785                	c.addiw	a5,1
   21928:	02f92823          	sw	a5,48(s2)
      : sec(sec), pos(sec->begin + offset) {}
   2192c:	649c                	c.ld	a5,8(s1)
   2192e:	97ce                	c.add	a5,s3
   21930:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   21932:	00018797          	auipc	a5,0x18
   21936:	b4e7b783          	ld	a5,-1202(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2193a:	0007c783          	lbu	a5,0(a5)
   2193e:	c3bd                	c.beqz	a5,219a4 <dwarf::rangelist::iterator::operator++()+0xe0>
    _Atomic_word __result = *__mem;
   21940:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   21944:	fff5079b          	addiw	a5,a0,-1
   21948:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2194c:	4785                	c.li	a5,1
   2194e:	1cf51063          	bne	a0,a5,21b0e <dwarf::rangelist::iterator::operator++()+0x24a>
	_M_dispose();
   21952:	00093783          	ld	a5,0(s2)
   21956:	6b9c                	c.ld	a5,16(a5)
   21958:	854a                	c.mv	a0,s2
   2195a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2195c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21960:	00018797          	auipc	a5,0x18
   21964:	b207b783          	ld	a5,-1248(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21968:	0007c783          	lbu	a5,0(a5)
   2196c:	c3b1                	c.beqz	a5,219b0 <dwarf::rangelist::iterator::operator++()+0xec>
    _Atomic_word __result = *__mem;
   2196e:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   21972:	fff5079b          	addiw	a5,a0,-1
   21976:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2197a:	4785                	c.li	a5,1
   2197c:	18f51963          	bne	a0,a5,21b0e <dwarf::rangelist::iterator::operator++()+0x24a>
	    _M_destroy();
   21980:	00093783          	ld	a5,0(s2)
   21984:	6f9c                	c.ld	a5,24(a5)
   21986:	854a                	c.mv	a0,s2
   21988:	9782                	c.jalr	a5
   2198a:	a251                	c.j	21b0e <dwarf::rangelist::iterator::operator++()+0x24a>
      __atomic_add(__mem, __val);
   2198c:	4585                	c.li	a1,1
   2198e:	03090513          	addi	a0,s2,48
   21992:	9bff40ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21996:	bf9d                	c.j	2190c <dwarf::rangelist::iterator::operator++()+0x48>
   21998:	4585                	c.li	a1,1
   2199a:	03090513          	addi	a0,s2,48
   2199e:	9b3f40ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   219a2:	b769                	c.j	2192c <dwarf::rangelist::iterator::operator++()+0x68>
      return __exchange_and_add(__mem, __val);
   219a4:	55fd                	c.li	a1,-1
   219a6:	03090513          	addi	a0,s2,48
   219aa:	9d7f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   219ae:	bf79                	c.j	2194c <dwarf::rangelist::iterator::operator++()+0x88>
   219b0:	55fd                	c.li	a1,-1
   219b2:	03490513          	addi	a0,s2,52
   219b6:	9cbf40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   219ba:	b7c1                	c.j	2197a <dwarf::rangelist::iterator::operator++()+0xb6>
  while (true) {
    entry.low = cur.address();
   219bc:	f008                	c.sd	a0,32(s0)
    entry.high = cur.address();
   219be:	854a                	c.mv	a0,s2
   219c0:	9982                	c.jalr	s3
   219c2:	f408                	c.sd	a0,40(s0)

    if (entry.low == 0 && entry.high == 0) {
   219c4:	701c                	c.ld	a5,32(s0)
   219c6:	00a7e4b3          	or	s1,a5,a0
   219ca:	e0d9                	c.bnez	s1,21a50 <dwarf::rangelist::iterator::operator++()+0x18c>
   219cc:	00043023          	sd	zero,0(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   219d0:	00843903          	ld	s2,8(s0)
	__r._M_pi = _M_pi;
   219d4:	00043423          	sd	zero,8(s0)
	if (_M_pi != nullptr)
   219d8:	08090b63          	beq	s2,zero,21a6e <dwarf::rangelist::iterator::operator++()+0x1aa>
    if (__is_single_threaded())
   219dc:	00018797          	auipc	a5,0x18
   219e0:	aa47b783          	ld	a5,-1372(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   219e4:	0007c783          	lbu	a5,0(a5)
   219e8:	c7b9                	c.beqz	a5,21a36 <dwarf::rangelist::iterator::operator++()+0x172>
    _Atomic_word __result = *__mem;
   219ea:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   219ee:	fff5079b          	addiw	a5,a0,-1
   219f2:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   219f6:	4785                	c.li	a5,1
   219f8:	06f51b63          	bne	a0,a5,21a6e <dwarf::rangelist::iterator::operator++()+0x1aa>
	_M_dispose();
   219fc:	00093783          	ld	a5,0(s2)
   21a00:	6b9c                	c.ld	a5,16(a5)
   21a02:	854a                	c.mv	a0,s2
   21a04:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21a06:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21a0a:	00018797          	auipc	a5,0x18
   21a0e:	a767b783          	ld	a5,-1418(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21a12:	0007c783          	lbu	a5,0(a5)
   21a16:	c795                	c.beqz	a5,21a42 <dwarf::rangelist::iterator::operator++()+0x17e>
    _Atomic_word __result = *__mem;
   21a18:	03492783          	lw	a5,52(s2)
    *__mem += __val;
   21a1c:	fff7871b          	addiw	a4,a5,-1
   21a20:	02e92a23          	sw	a4,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21a24:	4705                	c.li	a4,1
   21a26:	04e79463          	bne	a5,a4,21a6e <dwarf::rangelist::iterator::operator++()+0x1aa>
	    _M_destroy();
   21a2a:	00093783          	ld	a5,0(s2)
   21a2e:	6f9c                	c.ld	a5,24(a5)
   21a30:	854a                	c.mv	a0,s2
   21a32:	9782                	c.jalr	a5
      // End of list
      sec.reset();
      pos = 0;
      break;
   21a34:	a82d                	c.j	21a6e <dwarf::rangelist::iterator::operator++()+0x1aa>
      return __exchange_and_add(__mem, __val);
   21a36:	55fd                	c.li	a1,-1
   21a38:	03090513          	addi	a0,s2,48
   21a3c:	945f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21a40:	bf5d                	c.j	219f6 <dwarf::rangelist::iterator::operator++()+0x132>
   21a42:	55fd                	c.li	a1,-1
   21a44:	03490513          	addi	a0,s2,52
   21a48:	939f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21a4c:	87aa                	c.mv	a5,a0
   21a4e:	bfd9                	c.j	21a24 <dwarf::rangelist::iterator::operator++()+0x160>
    } else if (entry.low == largest_offset) {
   21a50:	01479663          	bne	a5,s4,21a5c <dwarf::rangelist::iterator::operator++()+0x198>
      // Base address change
      base_addr = entry.high;
   21a54:	e808                	c.sd	a0,16(s0)
    entry.low = cur.address();
   21a56:	854a                	c.mv	a0,s2
   21a58:	9982                	c.jalr	s3
   21a5a:	b78d                	c.j	219bc <dwarf::rangelist::iterator::operator++()+0xf8>
    } else {
      // Regular entry.  Adjust by base address.
      entry.low += base_addr;
   21a5c:	6818                	c.ld	a4,16(s0)
   21a5e:	97ba                	c.add	a5,a4
   21a60:	f01c                	c.sd	a5,32(s0)
      entry.high += base_addr;
   21a62:	972a                	c.add	a4,a0
   21a64:	f418                	c.sd	a4,40(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   21a66:	67a2                	c.ldsp	a5,8(sp)
   21a68:	679c                	c.ld	a5,8(a5)
   21a6a:	64e2                	c.ldsp	s1,24(sp)
   21a6c:	8c9d                	c.sub	s1,a5
      pos = 0;
   21a6e:	ec04                	c.sd	s1,24(s0)
	if (_M_pi != nullptr)
   21a70:	64c2                	c.ldsp	s1,16(sp)
   21a72:	cc99                	c.beqz	s1,21a90 <dwarf::rangelist::iterator::operator++()+0x1cc>
    if (__is_single_threaded())
   21a74:	00018797          	auipc	a5,0x18
   21a78:	a0c7b783          	ld	a5,-1524(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21a7c:	0007c783          	lbu	a5,0(a5)
   21a80:	c38d                	c.beqz	a5,21aa2 <dwarf::rangelist::iterator::operator++()+0x1de>
    _Atomic_word __result = *__mem;
   21a82:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   21a84:	fff5079b          	addiw	a5,a0,-1
   21a88:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21a8a:	4785                	c.li	a5,1
   21a8c:	02f50163          	beq	a0,a5,21aae <dwarf::rangelist::iterator::operator++()+0x1ea>
      break;
    }
  }

  return *this;
}
   21a90:	8522                	c.mv	a0,s0
   21a92:	60a6                	c.ldsp	ra,72(sp)
   21a94:	6406                	c.ldsp	s0,64(sp)
   21a96:	74e2                	c.ldsp	s1,56(sp)
   21a98:	7942                	c.ldsp	s2,48(sp)
   21a9a:	79a2                	c.ldsp	s3,40(sp)
   21a9c:	7a02                	c.ldsp	s4,32(sp)
   21a9e:	6161                	c.addi16sp	sp,80
   21aa0:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   21aa2:	55fd                	c.li	a1,-1
   21aa4:	03048513          	addi	a0,s1,48
   21aa8:	8d9f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21aac:	bff9                	c.j	21a8a <dwarf::rangelist::iterator::operator++()+0x1c6>
	_M_dispose();
   21aae:	609c                	c.ld	a5,0(s1)
   21ab0:	6b9c                	c.ld	a5,16(a5)
   21ab2:	8526                	c.mv	a0,s1
   21ab4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21ab6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21aba:	00018797          	auipc	a5,0x18
   21abe:	9c67b783          	ld	a5,-1594(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21ac2:	0007c783          	lbu	a5,0(a5)
   21ac6:	cf89                	c.beqz	a5,21ae0 <dwarf::rangelist::iterator::operator++()+0x21c>
    _Atomic_word __result = *__mem;
   21ac8:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   21aca:	fff5079b          	addiw	a5,a0,-1
   21ace:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21ad0:	4785                	c.li	a5,1
   21ad2:	faf51fe3          	bne	a0,a5,21a90 <dwarf::rangelist::iterator::operator++()+0x1cc>
	    _M_destroy();
   21ad6:	609c                	c.ld	a5,0(s1)
   21ad8:	6f9c                	c.ld	a5,24(a5)
   21ada:	8526                	c.mv	a0,s1
   21adc:	9782                	c.jalr	a5
  return *this;
   21ade:	bf4d                	c.j	21a90 <dwarf::rangelist::iterator::operator++()+0x1cc>
      return __exchange_and_add(__mem, __val);
   21ae0:	55fd                	c.li	a1,-1
   21ae2:	03448513          	addi	a0,s1,52
   21ae6:	89bf40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21aea:	b7dd                	c.j	21ad0 <dwarf::rangelist::iterator::operator++()+0x20c>
	if (_M_pi != nullptr)
   21aec:	842a                	c.mv	s0,a0
   21aee:	6542                	c.ldsp	a0,16(sp)
   21af0:	c511                	c.beqz	a0,21afc <dwarf::rangelist::iterator::operator++()+0x238>
	  _M_pi->_M_release();
   21af2:	00018317          	auipc	t1,0x18
   21af6:	8d633303          	ld	t1,-1834(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   21afa:	9302                	c.jalr	t1
   21afc:	8522                	c.mv	a0,s0
   21afe:	bf3f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
  cursor cur(sec, pos);
   21b02:	6c18                	c.ld	a4,24(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21b04:	e426                	c.sdsp	s1,8(sp)
      : _M_pi(__r._M_pi)
   21b06:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   21b08:	649c                	c.ld	a5,8(s1)
   21b0a:	97ba                	c.add	a5,a4
   21b0c:	ec3e                	c.sdsp	a5,24(sp)
    entry.low = cur.address();
   21b0e:	00810913          	addi	s2,sp,8
   21b12:	00018997          	auipc	s3,0x18
   21b16:	8669b983          	ld	s3,-1946(s3) # 39378 <dwarf::cursor::address()@@Base+0x1a382>
   21b1a:	bf35                	c.j	21a56 <dwarf::rangelist::iterator::operator++()+0x192>

0000000000021b1c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>:
rangelist::iterator::iterator(const std::shared_ptr<section> &sec,
   21b1c:	1101                	c.addi	sp,-32
   21b1e:	ec06                	c.sdsp	ra,24(sp)
   21b20:	e822                	c.sdsp	s0,16(sp)
   21b22:	e426                	c.sdsp	s1,8(sp)
   21b24:	842a                	c.mv	s0,a0
   21b26:	84b2                	c.mv	s1,a2
      __shared_ptr(const __shared_ptr&) noexcept = default;
   21b28:	619c                	c.ld	a5,0(a1)
   21b2a:	e11c                	c.sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   21b2c:	6588                	c.ld	a0,8(a1)
   21b2e:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   21b30:	c919                	c.beqz	a0,21b46 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x2a>
    if (__is_single_threaded())
   21b32:	00018797          	auipc	a5,0x18
   21b36:	94e7b783          	ld	a5,-1714(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21b3a:	0007c783          	lbu	a5,0(a5)
   21b3e:	cb99                	c.beqz	a5,21b54 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x38>
  { *__mem += __val; }
   21b40:	591c                	c.lw	a5,48(a0)
   21b42:	2785                	c.addiw	a5,1
   21b44:	d91c                	c.sw	a5,48(a0)
    : sec(sec), base_addr(base_addr), pos(0) {
   21b46:	e804                	c.sd	s1,16(s0)
   21b48:	00043c23          	sd	zero,24(s0)
  ++(*this);
   21b4c:	8522                	c.mv	a0,s0
   21b4e:	d77ff0ef          	jal	ra,218c4 <dwarf::rangelist::iterator::operator++()>
   21b52:	a015                	c.j	21b76 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x5a>
      __atomic_add(__mem, __val);
   21b54:	4585                	c.li	a1,1
   21b56:	03050513          	addi	a0,a0,48
   21b5a:	ff6f40ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   21b5e:	b7e5                	c.j	21b46 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x2a>
	if (_M_pi != nullptr)
   21b60:	84aa                	c.mv	s1,a0
   21b62:	6408                	c.ld	a0,8(s0)
   21b64:	c511                	c.beqz	a0,21b70 <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)+0x54>
	  _M_pi->_M_release();
   21b66:	00018317          	auipc	t1,0x18
   21b6a:	86233303          	ld	t1,-1950(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   21b6e:	9302                	c.jalr	t1
   21b70:	8526                	c.mv	a0,s1
   21b72:	b7ff40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
}
   21b76:	60e2                	c.ldsp	ra,24(sp)
   21b78:	6442                	c.ldsp	s0,16(sp)
   21b7a:	64a2                	c.ldsp	s1,8(sp)
   21b7c:	6105                	c.addi16sp	sp,32
   21b7e:	8082                	c.jr	ra

0000000000021b80 <dwarf::rangelist::begin() const>:
rangelist::iterator rangelist::begin() const {
   21b80:	1141                	c.addi	sp,-16
   21b82:	e406                	c.sdsp	ra,8(sp)
   21b84:	e022                	c.sdsp	s0,0(sp)
   21b86:	842a                	c.mv	s0,a0
  if (sec)
   21b88:	6d9c                	c.ld	a5,24(a1)
   21b8a:	cb91                	c.beqz	a5,21b9e <dwarf::rangelist::begin() const+0x1e>
    return iterator(sec, base_addr);
   21b8c:	7590                	c.ld	a2,40(a1)
   21b8e:	05e1                	c.addi	a1,24
   21b90:	f8dff0ef          	jal	ra,21b1c <dwarf::rangelist::iterator::iterator(std::shared_ptr<dwarf::section> const&, unsigned long)>
}
   21b94:	8522                	c.mv	a0,s0
   21b96:	60a2                	c.ldsp	ra,8(sp)
   21b98:	6402                	c.ldsp	s0,0(sp)
   21b9a:	0141                	c.addi	sp,16
   21b9c:	8082                	c.jr	ra
  return end();
   21b9e:	d15ff0ef          	jal	ra,218b2 <dwarf::rangelist::end() const>
   21ba2:	bfcd                	c.j	21b94 <dwarf::rangelist::begin() const+0x14>

0000000000021ba4 <dwarf::rangelist::contains(unsigned long) const>:
bool rangelist::contains(taddr addr) const {
   21ba4:	7119                	c.addi16sp	sp,-128
   21ba6:	fc86                	c.sdsp	ra,120(sp)
   21ba8:	f8a2                	c.sdsp	s0,112(sp)
   21baa:	f4a6                	c.sdsp	s1,104(sp)
   21bac:	84aa                	c.mv	s1,a0
   21bae:	842e                	c.mv	s0,a1
  for (auto ent : *this)
   21bb0:	85aa                	c.mv	a1,a0
   21bb2:	850a                	c.mv	a0,sp
   21bb4:	fcdff0ef          	jal	ra,21b80 <dwarf::rangelist::begin() const>
   21bb8:	85a6                	c.mv	a1,s1
   21bba:	1808                	c.addi4spn	a0,sp,48
   21bbc:	cf7ff0ef          	jal	ra,218b2 <dwarf::rangelist::end() const>
   21bc0:	848a                	c.mv	s1,sp
    return sec == o.sec && pos == o.pos;
   21bc2:	6702                	c.ldsp	a4,0(sp)
   21bc4:	77c2                	c.ldsp	a5,48(sp)
   21bc6:	0ef70c63          	beq	a4,a5,21cbe <dwarf::rangelist::contains(unsigned long) const+0x11a>
   21bca:	7722                	c.ldsp	a4,40(sp)
  bool contains(taddr addr) const { return low <= addr && addr < high; }
   21bcc:	7782                	c.ldsp	a5,32(sp)
   21bce:	00f47663          	bgeu	s0,a5,21bda <dwarf::rangelist::contains(unsigned long) const+0x36>
   21bd2:	8526                	c.mv	a0,s1
   21bd4:	cf1ff0ef          	jal	ra,218c4 <dwarf::rangelist::iterator::operator++()>
   21bd8:	b7ed                	c.j	21bc2 <dwarf::rangelist::contains(unsigned long) const+0x1e>
   21bda:	fee47ce3          	bgeu	s0,a4,21bd2 <dwarf::rangelist::contains(unsigned long) const+0x2e>
	if (_M_pi != nullptr)
   21bde:	7462                	c.ldsp	s0,56(sp)
   21be0:	cc19                	c.beqz	s0,21bfe <dwarf::rangelist::contains(unsigned long) const+0x5a>
    if (__is_single_threaded())
   21be2:	00018797          	auipc	a5,0x18
   21be6:	89e7b783          	ld	a5,-1890(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21bea:	0007c783          	lbu	a5,0(a5)
   21bee:	cf95                	c.beqz	a5,21c2a <dwarf::rangelist::contains(unsigned long) const+0x86>
    _Atomic_word __result = *__mem;
   21bf0:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21bf2:	fff5079b          	addiw	a5,a0,-1
   21bf6:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21bf8:	4785                	c.li	a5,1
   21bfa:	02f50e63          	beq	a0,a5,21c36 <dwarf::rangelist::contains(unsigned long) const+0x92>
	if (_M_pi != nullptr)
   21bfe:	6422                	c.ldsp	s0,8(sp)
   21c00:	cc19                	c.beqz	s0,21c1e <dwarf::rangelist::contains(unsigned long) const+0x7a>
    if (__is_single_threaded())
   21c02:	00018797          	auipc	a5,0x18
   21c06:	87e7b783          	ld	a5,-1922(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21c0a:	0007c783          	lbu	a5,0(a5)
   21c0e:	c3bd                	c.beqz	a5,21c74 <dwarf::rangelist::contains(unsigned long) const+0xd0>
    _Atomic_word __result = *__mem;
   21c10:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21c12:	fff5079b          	addiw	a5,a0,-1
   21c16:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21c18:	4785                	c.li	a5,1
   21c1a:	06f50363          	beq	a0,a5,21c80 <dwarf::rangelist::contains(unsigned long) const+0xdc>
      return true;
   21c1e:	4505                	c.li	a0,1
}
   21c20:	70e6                	c.ldsp	ra,120(sp)
   21c22:	7446                	c.ldsp	s0,112(sp)
   21c24:	74a6                	c.ldsp	s1,104(sp)
   21c26:	6109                	c.addi16sp	sp,128
   21c28:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   21c2a:	55fd                	c.li	a1,-1
   21c2c:	03040513          	addi	a0,s0,48
   21c30:	f50f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21c34:	b7d1                	c.j	21bf8 <dwarf::rangelist::contains(unsigned long) const+0x54>
	_M_dispose();
   21c36:	601c                	c.ld	a5,0(s0)
   21c38:	6b9c                	c.ld	a5,16(a5)
   21c3a:	8522                	c.mv	a0,s0
   21c3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21c3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21c42:	00018797          	auipc	a5,0x18
   21c46:	83e7b783          	ld	a5,-1986(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21c4a:	0007c783          	lbu	a5,0(a5)
   21c4e:	cf89                	c.beqz	a5,21c68 <dwarf::rangelist::contains(unsigned long) const+0xc4>
    _Atomic_word __result = *__mem;
   21c50:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21c52:	fff5079b          	addiw	a5,a0,-1
   21c56:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21c58:	4785                	c.li	a5,1
   21c5a:	faf512e3          	bne	a0,a5,21bfe <dwarf::rangelist::contains(unsigned long) const+0x5a>
	    _M_destroy();
   21c5e:	601c                	c.ld	a5,0(s0)
   21c60:	6f9c                	c.ld	a5,24(a5)
   21c62:	8522                	c.mv	a0,s0
   21c64:	9782                	c.jalr	a5
   21c66:	bf61                	c.j	21bfe <dwarf::rangelist::contains(unsigned long) const+0x5a>
      return __exchange_and_add(__mem, __val);
   21c68:	55fd                	c.li	a1,-1
   21c6a:	03440513          	addi	a0,s0,52
   21c6e:	f12f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21c72:	b7dd                	c.j	21c58 <dwarf::rangelist::contains(unsigned long) const+0xb4>
   21c74:	55fd                	c.li	a1,-1
   21c76:	03040513          	addi	a0,s0,48
   21c7a:	f06f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21c7e:	bf69                	c.j	21c18 <dwarf::rangelist::contains(unsigned long) const+0x74>
	_M_dispose();
   21c80:	601c                	c.ld	a5,0(s0)
   21c82:	6b9c                	c.ld	a5,16(a5)
   21c84:	8522                	c.mv	a0,s0
   21c86:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21c88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21c8c:	00017797          	auipc	a5,0x17
   21c90:	7f47b783          	ld	a5,2036(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21c94:	0007c783          	lbu	a5,0(a5)
   21c98:	cf89                	c.beqz	a5,21cb2 <dwarf::rangelist::contains(unsigned long) const+0x10e>
    _Atomic_word __result = *__mem;
   21c9a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21c9c:	fff5079b          	addiw	a5,a0,-1
   21ca0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21ca2:	4785                	c.li	a5,1
   21ca4:	f6f51de3          	bne	a0,a5,21c1e <dwarf::rangelist::contains(unsigned long) const+0x7a>
	    _M_destroy();
   21ca8:	601c                	c.ld	a5,0(s0)
   21caa:	6f9c                	c.ld	a5,24(a5)
   21cac:	8522                	c.mv	a0,s0
   21cae:	9782                	c.jalr	a5
   21cb0:	b7bd                	c.j	21c1e <dwarf::rangelist::contains(unsigned long) const+0x7a>
      return __exchange_and_add(__mem, __val);
   21cb2:	55fd                	c.li	a1,-1
   21cb4:	03440513          	addi	a0,s0,52
   21cb8:	ec8f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21cbc:	b7dd                	c.j	21ca2 <dwarf::rangelist::contains(unsigned long) const+0xfe>
    return sec == o.sec && pos == o.pos;
   21cbe:	6762                	c.ldsp	a4,24(sp)
   21cc0:	67a6                	c.ldsp	a5,72(sp)
   21cc2:	f0f714e3          	bne	a4,a5,21bca <dwarf::rangelist::contains(unsigned long) const+0x26>
	if (_M_pi != nullptr)
   21cc6:	7462                	c.ldsp	s0,56(sp)
   21cc8:	cc19                	c.beqz	s0,21ce6 <dwarf::rangelist::contains(unsigned long) const+0x142>
    if (__is_single_threaded())
   21cca:	00017797          	auipc	a5,0x17
   21cce:	7b67b783          	ld	a5,1974(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21cd2:	0007c783          	lbu	a5,0(a5)
   21cd6:	cb95                	c.beqz	a5,21d0a <dwarf::rangelist::contains(unsigned long) const+0x166>
    _Atomic_word __result = *__mem;
   21cd8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21cda:	fff5079b          	addiw	a5,a0,-1
   21cde:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21ce0:	4785                	c.li	a5,1
   21ce2:	02f50a63          	beq	a0,a5,21d16 <dwarf::rangelist::contains(unsigned long) const+0x172>
	if (_M_pi != nullptr)
   21ce6:	6422                	c.ldsp	s0,8(sp)
   21ce8:	cc19                	c.beqz	s0,21d06 <dwarf::rangelist::contains(unsigned long) const+0x162>
    if (__is_single_threaded())
   21cea:	00017797          	auipc	a5,0x17
   21cee:	7967b783          	ld	a5,1942(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21cf2:	0007c783          	lbu	a5,0(a5)
   21cf6:	cfb9                	c.beqz	a5,21d54 <dwarf::rangelist::contains(unsigned long) const+0x1b0>
    _Atomic_word __result = *__mem;
   21cf8:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   21cfa:	fff5079b          	addiw	a5,a0,-1
   21cfe:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21d00:	4785                	c.li	a5,1
   21d02:	04f50f63          	beq	a0,a5,21d60 <dwarf::rangelist::contains(unsigned long) const+0x1bc>
  return false;
   21d06:	4501                	c.li	a0,0
   21d08:	bf21                	c.j	21c20 <dwarf::rangelist::contains(unsigned long) const+0x7c>
      return __exchange_and_add(__mem, __val);
   21d0a:	55fd                	c.li	a1,-1
   21d0c:	03040513          	addi	a0,s0,48
   21d10:	e70f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21d14:	b7f1                	c.j	21ce0 <dwarf::rangelist::contains(unsigned long) const+0x13c>
	_M_dispose();
   21d16:	601c                	c.ld	a5,0(s0)
   21d18:	6b9c                	c.ld	a5,16(a5)
   21d1a:	8522                	c.mv	a0,s0
   21d1c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21d1e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21d22:	00017797          	auipc	a5,0x17
   21d26:	75e7b783          	ld	a5,1886(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21d2a:	0007c783          	lbu	a5,0(a5)
   21d2e:	cf89                	c.beqz	a5,21d48 <dwarf::rangelist::contains(unsigned long) const+0x1a4>
    _Atomic_word __result = *__mem;
   21d30:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21d32:	fff5079b          	addiw	a5,a0,-1
   21d36:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21d38:	4785                	c.li	a5,1
   21d3a:	faf516e3          	bne	a0,a5,21ce6 <dwarf::rangelist::contains(unsigned long) const+0x142>
	    _M_destroy();
   21d3e:	601c                	c.ld	a5,0(s0)
   21d40:	6f9c                	c.ld	a5,24(a5)
   21d42:	8522                	c.mv	a0,s0
   21d44:	9782                	c.jalr	a5
   21d46:	b745                	c.j	21ce6 <dwarf::rangelist::contains(unsigned long) const+0x142>
      return __exchange_and_add(__mem, __val);
   21d48:	55fd                	c.li	a1,-1
   21d4a:	03440513          	addi	a0,s0,52
   21d4e:	e32f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21d52:	b7dd                	c.j	21d38 <dwarf::rangelist::contains(unsigned long) const+0x194>
   21d54:	55fd                	c.li	a1,-1
   21d56:	03040513          	addi	a0,s0,48
   21d5a:	e26f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21d5e:	b74d                	c.j	21d00 <dwarf::rangelist::contains(unsigned long) const+0x15c>
	_M_dispose();
   21d60:	601c                	c.ld	a5,0(s0)
   21d62:	6b9c                	c.ld	a5,16(a5)
   21d64:	8522                	c.mv	a0,s0
   21d66:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21d68:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21d6c:	00017797          	auipc	a5,0x17
   21d70:	7147b783          	ld	a5,1812(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21d74:	0007c783          	lbu	a5,0(a5)
   21d78:	cf89                	c.beqz	a5,21d92 <dwarf::rangelist::contains(unsigned long) const+0x1ee>
    _Atomic_word __result = *__mem;
   21d7a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   21d7c:	fff5079b          	addiw	a5,a0,-1
   21d80:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21d82:	4785                	c.li	a5,1
   21d84:	f8f511e3          	bne	a0,a5,21d06 <dwarf::rangelist::contains(unsigned long) const+0x162>
	    _M_destroy();
   21d88:	601c                	c.ld	a5,0(s0)
   21d8a:	6f9c                	c.ld	a5,24(a5)
   21d8c:	8522                	c.mv	a0,s0
   21d8e:	9782                	c.jalr	a5
   21d90:	bf9d                	c.j	21d06 <dwarf::rangelist::contains(unsigned long) const+0x162>
      return __exchange_and_add(__mem, __val);
   21d92:	55fd                	c.li	a1,-1
   21d94:	03440513          	addi	a0,s0,52
   21d98:	de8f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21d9c:	b7dd                	c.j	21d82 <dwarf::rangelist::contains(unsigned long) const+0x1de>
	if (_M_pi != nullptr)
   21d9e:	842a                	c.mv	s0,a0
   21da0:	7562                	c.ldsp	a0,56(sp)
   21da2:	c511                	c.beqz	a0,21dae <dwarf::rangelist::contains(unsigned long) const+0x20a>
	  _M_pi->_M_release();
   21da4:	00017317          	auipc	t1,0x17
   21da8:	62433303          	ld	t1,1572(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   21dac:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   21dae:	6522                	c.ldsp	a0,8(sp)
   21db0:	c511                	c.beqz	a0,21dbc <dwarf::rangelist::contains(unsigned long) const+0x218>
	  _M_pi->_M_release();
   21db2:	00017317          	auipc	t1,0x17
   21db6:	61633303          	ld	t1,1558(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   21dba:	9302                	c.jalr	t1
   21dbc:	8522                	c.mv	a0,s0
   21dbe:	933f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   21dc2:	842a                	c.mv	s0,a0
   21dc4:	b7ed                	c.j	21dae <dwarf::rangelist::contains(unsigned long) const+0x20a>

0000000000021dc6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>:
rangelist::rangelist(const initializer_list<pair<taddr, taddr>> &ranges) {
   21dc6:	7139                	c.addi16sp	sp,-64
   21dc8:	fc06                	c.sdsp	ra,56(sp)
   21dca:	f822                	c.sdsp	s0,48(sp)
   21dcc:	f426                	c.sdsp	s1,40(sp)
   21dce:	f04a                	c.sdsp	s2,32(sp)
   21dd0:	ec4e                	c.sdsp	s3,24(sp)
   21dd2:	e852                	c.sdsp	s4,16(sp)
   21dd4:	842a                	c.mv	s0,a0
	: _M_start(), _M_finish(), _M_end_of_storage()
   21dd6:	00053023          	sd	zero,0(a0)
   21dda:	00053423          	sd	zero,8(a0)
   21dde:	00053823          	sd	zero,16(a0)
      : _M_ptr(0), _M_refcount()
   21de2:	00053c23          	sd	zero,24(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   21de6:	02053023          	sd	zero,32(a0)
  synthetic.reserve(ranges.size() * 2 + 2);
   21dea:	659c                	c.ld	a5,8(a1)
   21dec:	0785                	c.addi	a5,1
   21dee:	00179693          	slli	a3,a5,0x1
      if (__n > this->max_size())
   21df2:	577d                	c.li	a4,-1
   21df4:	8311                	c.srli	a4,0x4
   21df6:	00d76a63          	bltu	a4,a3,21e0a <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x44>
   21dfa:	892e                	c.mv	s2,a1
      if (this->capacity() < __n)
   21dfc:	c6a5                	c.beqz	a3,21e64 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x9e>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   21dfe:	00479493          	slli	s1,a5,0x4
   21e02:	8526                	c.mv	a0,s1
   21e04:	f1cf40ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   21e08:	a035                	c.j	21e34 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x6e>
	__throw_length_error(__N("vector::reserve"));
   21e0a:	0000c517          	auipc	a0,0xc
   21e0e:	3de50513          	addi	a0,a0,990 # 2e1e8 <typeinfo name for dwarf::expr_context+0x18>
   21e12:	e2ef40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	if (_M_pi != nullptr)
   21e16:	84aa                	c.mv	s1,a0
   21e18:	7008                	c.ld	a0,32(s0)
   21e1a:	c511                	c.beqz	a0,21e26 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x60>
	  _M_pi->_M_release();
   21e1c:	00017317          	auipc	t1,0x17
   21e20:	5ac33303          	ld	t1,1452(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   21e24:	9302                	c.jalr	t1
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   21e26:	6008                	c.ld	a0,0(s0)
	if (__p)
   21e28:	c119                	c.beqz	a0,21e2e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   21e2a:	ee6f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   21e2e:	8526                	c.mv	a0,s1
   21e30:	8c1f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   21e34:	89aa                	c.mv	s3,a0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   21e36:	00043a03          	ld	s4,0(s0)
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   21e3a:	6410                	c.ld	a2,8(s0)
   21e3c:	41460633          	sub	a2,a2,s4
      if (__count > 0)
   21e40:	00c04563          	blt	zero,a2,21e4a <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x84>
   21e44:	000a0963          	beq	s4,zero,21e56 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x90>
   21e48:	a021                	c.j	21e50 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x8a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   21e4a:	85d2                	c.mv	a1,s4
   21e4c:	935f40ef          	jal	ra,16780 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   21e50:	8552                	c.mv	a0,s4
   21e52:	ebef40ef          	jal	ra,16510 <operator delete(void*)@plt>
	  this->_M_impl._M_start = __tmp;
   21e56:	01343023          	sd	s3,0(s0)
	  this->_M_impl._M_finish = __tmp + __old_size;
   21e5a:	01343423          	sd	s3,8(s0)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   21e5e:	99a6                	c.add	s3,s1
   21e60:	01343823          	sd	s3,16(s0)
      begin() const noexcept { return _M_array; }
   21e64:	00093483          	ld	s1,0(s2)
      end() const noexcept { return begin() + size(); }
   21e68:	00893903          	ld	s2,8(s2)
   21e6c:	0912                	c.slli	s2,0x4
   21e6e:	9926                	c.add	s2,s1
  for (auto &range : ranges) {
   21e70:	05248363          	beq	s1,s2,21eb6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf0>
	  _M_realloc_insert(end(), __x);
   21e74:	00017997          	auipc	s3,0x17
   21e78:	6a49b983          	ld	s3,1700(s3) # 39518 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)@@Base+0x17566>
   21e7c:	a821                	c.j	21e94 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xce>
   21e7e:	8626                	c.mv	a2,s1
   21e80:	8522                	c.mv	a0,s0
   21e82:	9982                	c.jalr	s3
   21e84:	a005                	c.j	21ea4 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xde>
   21e86:	00848613          	addi	a2,s1,8
   21e8a:	8522                	c.mv	a0,s0
   21e8c:	9982                	c.jalr	s3
   21e8e:	04c1                	c.addi	s1,16
   21e90:	02990363          	beq	s2,s1,21eb6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xf0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   21e94:	640c                	c.ld	a1,8(s0)
   21e96:	681c                	c.ld	a5,16(s0)
   21e98:	fef583e3          	beq	a1,a5,21e7e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xb8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   21e9c:	609c                	c.ld	a5,0(s1)
   21e9e:	e19c                	c.sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   21ea0:	05a1                	c.addi	a1,8
   21ea2:	e40c                	c.sd	a1,8(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   21ea4:	640c                	c.ld	a1,8(s0)
   21ea6:	681c                	c.ld	a5,16(s0)
   21ea8:	fcf58fe3          	beq	a1,a5,21e86 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc0>
   21eac:	649c                	c.ld	a5,8(s1)
   21eae:	e19c                	c.sd	a5,0(a1)
	    ++this->_M_impl._M_finish;
   21eb0:	05a1                	c.addi	a1,8
   21eb2:	e40c                	c.sd	a1,8(s0)
   21eb4:	bfe9                	c.j	21e8e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0xc8>
  synthetic.push_back(0);
   21eb6:	e002                	c.sdsp	zero,0(sp)
      { emplace_back(std::move(__x)); }
   21eb8:	858a                	c.mv	a1,sp
   21eba:	8522                	c.mv	a0,s0
   21ebc:	00017317          	auipc	t1,0x17
   21ec0:	54433303          	ld	t1,1348(t1) # 39400 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x17286>
   21ec4:	9302                	c.jalr	t1
  synthetic.push_back(0);
   21ec6:	e402                	c.sdsp	zero,8(sp)
   21ec8:	002c                	c.addi4spn	a1,sp,8
   21eca:	8522                	c.mv	a0,s0
   21ecc:	00017317          	auipc	t1,0x17
   21ed0:	53433303          	ld	t1,1332(t1) # 39400 <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)@@Base+0x17286>
   21ed4:	9302                	c.jalr	t1
      { return _M_data_ptr(this->_M_impl._M_start); }
   21ed6:	00043903          	ld	s2,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   21eda:	6404                	c.ld	s1,8(s0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   21edc:	06000513          	addi	a0,zero,96
   21ee0:	e40f40ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   21ee4:	00052423          	sw	zero,8(a0)
   21ee8:	00052623          	sw	zero,12(a0)
   21eec:	00052823          	sw	zero,16(a0)
   21ef0:	00052a23          	sw	zero,20(a0)
   21ef4:	00052c23          	sw	zero,24(a0)
   21ef8:	00052e23          	sw	zero,28(a0)
   21efc:	02053023          	sd	zero,32(a0)
   21f00:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   21f04:	4785                	c.li	a5,1
   21f06:	d91c                	c.sw	a5,48(a0)
   21f08:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   21f0a:	00017797          	auipc	a5,0x17
   21f0e:	6b67b783          	ld	a5,1718(a5) # 395c0 <vtable for std::_Sp_counted_ptr_inplace<dwarf::section, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0xc48>
   21f12:	07c1                	c.addi	a5,16
   21f14:	e11c                	c.sd	a5,0(a0)
      : type(type), begin((char *)begin), end((char *)begin + length), fmt(fmt),
   21f16:	47a5                	c.li	a5,9
   21f18:	dd1c                	c.sw	a5,56(a0)
   21f1a:	05253023          	sd	s2,64(a0)
   21f1e:	e524                	c.sd	s1,72(a0)
   21f20:	04052823          	sw	zero,80(a0)
        ord(ord), addr_size(addr_size) {}
   21f24:	04052a23          	sw	zero,84(a0)
   21f28:	47a1                	c.li	a5,8
   21f2a:	cd3c                	c.sw	a5,88(a0)
   21f2c:	03850793          	addi	a5,a0,56
   21f30:	ec1c                	c.sd	a5,24(s0)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   21f32:	7004                	c.ld	s1,32(s0)
	__r._M_pi = _M_pi;
   21f34:	f008                	c.sd	a0,32(s0)
	if (_M_pi != nullptr)
   21f36:	cc99                	c.beqz	s1,21f54 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
    if (__is_single_threaded())
   21f38:	00017797          	auipc	a5,0x17
   21f3c:	5487b783          	ld	a5,1352(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21f40:	0007c783          	lbu	a5,0(a5)
   21f44:	c395                	c.beqz	a5,21f68 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1a2>
    _Atomic_word __result = *__mem;
   21f46:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   21f48:	fff5079b          	addiw	a5,a0,-1
   21f4c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   21f4e:	4785                	c.li	a5,1
   21f50:	02f50263          	beq	a0,a5,21f74 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1ae>
  base_addr = 0;
   21f54:	02043423          	sd	zero,40(s0)
}
   21f58:	70e2                	c.ldsp	ra,56(sp)
   21f5a:	7442                	c.ldsp	s0,48(sp)
   21f5c:	74a2                	c.ldsp	s1,40(sp)
   21f5e:	7902                	c.ldsp	s2,32(sp)
   21f60:	69e2                	c.ldsp	s3,24(sp)
   21f62:	6a42                	c.ldsp	s4,16(sp)
   21f64:	6121                	c.addi16sp	sp,64
   21f66:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   21f68:	55fd                	c.li	a1,-1
   21f6a:	03048513          	addi	a0,s1,48
   21f6e:	c12f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21f72:	bff1                	c.j	21f4e <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x188>
	_M_dispose();
   21f74:	609c                	c.ld	a5,0(s1)
   21f76:	6b9c                	c.ld	a5,16(a5)
   21f78:	8526                	c.mv	a0,s1
   21f7a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   21f7c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   21f80:	00017797          	auipc	a5,0x17
   21f84:	5007b783          	ld	a5,1280(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   21f88:	0007c783          	lbu	a5,0(a5)
   21f8c:	cf89                	c.beqz	a5,21fa6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1e0>
    _Atomic_word __result = *__mem;
   21f8e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   21f90:	fff5079b          	addiw	a5,a0,-1
   21f94:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   21f96:	4785                	c.li	a5,1
   21f98:	faf51ee3          	bne	a0,a5,21f54 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
	    _M_destroy();
   21f9c:	609c                	c.ld	a5,0(s1)
   21f9e:	6f9c                	c.ld	a5,24(a5)
   21fa0:	8526                	c.mv	a0,s1
   21fa2:	9782                	c.jalr	a5
   21fa4:	bf45                	c.j	21f54 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x18e>
      return __exchange_and_add(__mem, __val);
   21fa6:	55fd                	c.li	a1,-1
   21fa8:	03448513          	addi	a0,s1,52
   21fac:	bd4f40ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   21fb0:	b7dd                	c.j	21f96 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)+0x1d0>

0000000000021fb2 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)>:
      vector<_Tp, _Alloc>::
   21fb2:	715d                	c.addi16sp	sp,-80
   21fb4:	e486                	c.sdsp	ra,72(sp)
   21fb6:	e0a2                	c.sdsp	s0,64(sp)
   21fb8:	fc26                	c.sdsp	s1,56(sp)
   21fba:	f84a                	c.sdsp	s2,48(sp)
   21fbc:	f44e                	c.sdsp	s3,40(sp)
   21fbe:	f052                	c.sdsp	s4,32(sp)
   21fc0:	ec56                	c.sdsp	s5,24(sp)
   21fc2:	e85a                	c.sdsp	s6,16(sp)
   21fc4:	e45e                	c.sdsp	s7,8(sp)
   21fc6:	00853903          	ld	s2,8(a0)
   21fca:	00053983          	ld	s3,0(a0)
   21fce:	413907b3          	sub	a5,s2,s3
   21fd2:	878d                	c.srai	a5,0x3
	if (max_size() - size() < __n)
   21fd4:	577d                	c.li	a4,-1
   21fd6:	8311                	c.srli	a4,0x4
   21fd8:	02e78663          	beq	a5,a4,22004 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x52>
   21fdc:	84aa                	c.mv	s1,a0
   21fde:	8a2e                	c.mv	s4,a1
   21fe0:	8bb2                	c.mv	s7,a2
      return __a;
   21fe2:	873e                	c.mv	a4,a5
      if (__a < __b)
   21fe4:	03390663          	beq	s2,s3,22010 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x5e>
	const size_type __len = size() + (std::max)(size(), __n);
   21fe8:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   21fea:	04f76263          	bltu	a4,a5,2202e <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x7c>
   21fee:	8aba                	c.mv	s5,a4
   21ff0:	57fd                	c.li	a5,-1
   21ff2:	8391                	c.srli	a5,0x4
   21ff4:	00e7f363          	bgeu	a5,a4,21ffa <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x48>
   21ff8:	8abe                	c.mv	s5,a5
   21ffa:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   21ffe:	4b01                	c.li	s6,0
   22000:	c329                	c.beqz	a4,22042 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x90>
   22002:	a81d                	c.j	22038 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x86>
	  __throw_length_error(__N(__s));
   22004:	0000b517          	auipc	a0,0xb
   22008:	24c50513          	addi	a0,a0,588 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2200c:	c34f40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   22010:	4705                	c.li	a4,1
   22012:	bfd9                	c.j	21fe8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x36>
   22014:	8622                	c.mv	a2,s0
   22016:	85ce                	c.mv	a1,s3
   22018:	855a                	c.mv	a0,s6
   2201a:	f66f40ef          	jal	ra,16780 <memmove@plt>
	      ++__new_finish;
   2201e:	0421                	c.addi	s0,8
   22020:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22022:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22026:	03204b63          	blt	zero,s2,2205c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xaa>
	}
      return __result + __count;
   2202a:	944a                	c.add	s0,s2
      _M_deallocate(pointer __p, size_t __n)
   2202c:	a081                	c.j	2206c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xba>
   2202e:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22032:	5afd                	c.li	s5,-1
   22034:	004ada93          	srli	s5,s5,0x4
   22038:	003a9513          	slli	a0,s5,0x3
   2203c:	ce4f40ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   22040:	8b2a                	c.mv	s6,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22042:	008b07b3          	add	a5,s6,s0
   22046:	000bb703          	ld	a4,0(s7)
   2204a:	e398                	c.sd	a4,0(a5)
      if (__count > 0)
   2204c:	fc8044e3          	blt	zero,s0,22014 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x62>
   22050:	0421                	c.addi	s0,8
   22052:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22054:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   22058:	01205763          	bge	zero,s2,22066 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xb4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2205c:	864a                	c.mv	a2,s2
   2205e:	85d2                	c.mv	a1,s4
   22060:	8522                	c.mv	a0,s0
   22062:	d4ef40ef          	jal	ra,165b0 <memcpy@plt>
      return __result + __count;
   22066:	944a                	c.add	s0,s2
	if (__p)
   22068:	00098563          	beq	s3,zero,22072 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xc0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2206c:	854e                	c.mv	a0,s3
   2206e:	ca2f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   22072:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   22076:	e480                	c.sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   22078:	0a8e                	c.slli	s5,0x3
   2207a:	9ada                	c.add	s5,s6
   2207c:	0154b823          	sd	s5,16(s1)
    }
   22080:	60a6                	c.ldsp	ra,72(sp)
   22082:	6406                	c.ldsp	s0,64(sp)
   22084:	74e2                	c.ldsp	s1,56(sp)
   22086:	7942                	c.ldsp	s2,48(sp)
   22088:	79a2                	c.ldsp	s3,40(sp)
   2208a:	7a02                	c.ldsp	s4,32(sp)
   2208c:	6ae2                	c.ldsp	s5,24(sp)
   2208e:	6b42                	c.ldsp	s6,16(sp)
   22090:	6ba2                	c.ldsp	s7,8(sp)
   22092:	6161                	c.addi16sp	sp,80
   22094:	8082                	c.jr	ra

0000000000022096 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)>:
      vector<_Tp, _Alloc>::
   22096:	715d                	c.addi16sp	sp,-80
   22098:	e486                	c.sdsp	ra,72(sp)
   2209a:	e0a2                	c.sdsp	s0,64(sp)
   2209c:	fc26                	c.sdsp	s1,56(sp)
   2209e:	f84a                	c.sdsp	s2,48(sp)
   220a0:	f44e                	c.sdsp	s3,40(sp)
   220a2:	f052                	c.sdsp	s4,32(sp)
   220a4:	ec56                	c.sdsp	s5,24(sp)
   220a6:	e85a                	c.sdsp	s6,16(sp)
   220a8:	e45e                	c.sdsp	s7,8(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   220aa:	00853903          	ld	s2,8(a0)
   220ae:	00053983          	ld	s3,0(a0)
   220b2:	413907b3          	sub	a5,s2,s3
   220b6:	878d                	c.srai	a5,0x3
	if (max_size() - size() < __n)
   220b8:	577d                	c.li	a4,-1
   220ba:	8311                	c.srli	a4,0x4
   220bc:	02e78663          	beq	a5,a4,220e8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x52>
   220c0:	84aa                	c.mv	s1,a0
   220c2:	8a2e                	c.mv	s4,a1
   220c4:	8bb2                	c.mv	s7,a2
      return __a;
   220c6:	873e                	c.mv	a4,a5
      if (__a < __b)
   220c8:	03390663          	beq	s2,s3,220f4 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x5e>
	const size_type __len = size() + (std::max)(size(), __n);
   220cc:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   220ce:	04f76263          	bltu	a4,a5,22112 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x7c>
   220d2:	8aba                	c.mv	s5,a4
   220d4:	57fd                	c.li	a5,-1
   220d6:	8391                	c.srli	a5,0x4
   220d8:	00e7f363          	bgeu	a5,a4,220de <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x48>
   220dc:	8abe                	c.mv	s5,a5
   220de:	413a0433          	sub	s0,s4,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   220e2:	4b01                	c.li	s6,0
   220e4:	c329                	c.beqz	a4,22126 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x90>
   220e6:	a81d                	c.j	2211c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x86>
	  __throw_length_error(__N(__s));
   220e8:	0000b517          	auipc	a0,0xb
   220ec:	16850513          	addi	a0,a0,360 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   220f0:	b50f40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   220f4:	4705                	c.li	a4,1
   220f6:	bfd9                	c.j	220cc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x36>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   220f8:	8622                	c.mv	a2,s0
   220fa:	85ce                	c.mv	a1,s3
   220fc:	855a                	c.mv	a0,s6
   220fe:	e82f40ef          	jal	ra,16780 <memmove@plt>
	      ++__new_finish;
   22102:	0421                	c.addi	s0,8
   22104:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22106:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   2210a:	03204b63          	blt	zero,s2,22140 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xaa>
      return __result + __count;
   2210e:	944a                	c.add	s0,s2
      _M_deallocate(pointer __p, size_t __n)
   22110:	a081                	c.j	22150 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xba>
   22112:	413a0433          	sub	s0,s4,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   22116:	5afd                	c.li	s5,-1
   22118:	004ada93          	srli	s5,s5,0x4
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2211c:	003a9513          	slli	a0,s5,0x3
   22120:	c00f40ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   22124:	8b2a                	c.mv	s6,a0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22126:	008b07b3          	add	a5,s6,s0
   2212a:	000bb703          	ld	a4,0(s7)
   2212e:	e398                	c.sd	a4,0(a5)
      if (__count > 0)
   22130:	fc8044e3          	blt	zero,s0,220f8 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0x62>
   22134:	0421                	c.addi	s0,8
   22136:	945a                	c.add	s0,s6
      ptrdiff_t __count = __last - __first;
   22138:	41490933          	sub	s2,s2,s4
      if (__count > 0)
   2213c:	01205763          	bge	zero,s2,2214a <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xb4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   22140:	864a                	c.mv	a2,s2
   22142:	85d2                	c.mv	a1,s4
   22144:	8522                	c.mv	a0,s0
   22146:	c6af40ef          	jal	ra,165b0 <memcpy@plt>
      return __result + __count;
   2214a:	944a                	c.add	s0,s2
	if (__p)
   2214c:	00098563          	beq	s3,zero,22156 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)+0xc0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22150:	854e                	c.mv	a0,s3
   22152:	bbef40ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   22156:	0164b023          	sd	s6,0(s1)
      this->_M_impl._M_finish = __new_finish;
   2215a:	e480                	c.sd	s0,8(s1)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2215c:	0a8e                	c.slli	s5,0x3
   2215e:	9ada                	c.add	s5,s6
   22160:	0154b823          	sd	s5,16(s1)
    }
   22164:	60a6                	c.ldsp	ra,72(sp)
   22166:	6406                	c.ldsp	s0,64(sp)
   22168:	74e2                	c.ldsp	s1,56(sp)
   2216a:	7942                	c.ldsp	s2,48(sp)
   2216c:	79a2                	c.ldsp	s3,40(sp)
   2216e:	7a02                	c.ldsp	s4,32(sp)
   22170:	6ae2                	c.ldsp	s5,24(sp)
   22172:	6b42                	c.ldsp	s6,16(sp)
   22174:	6ba2                	c.ldsp	s7,8(sp)
   22176:	6161                	c.addi16sp	sp,80
   22178:	8082                	c.jr	ra

000000000002217a <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2217a:	651c                	c.ld	a5,8(a0)
   2217c:	6918                	c.ld	a4,16(a0)
   2217e:	00e78863          	beq	a5,a4,2218e <void std::vector<unsigned long, std::allocator<unsigned long> >::emplace_back<unsigned long>(unsigned long&&)+0x14>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22182:	6198                	c.ld	a4,0(a1)
   22184:	e398                	c.sd	a4,0(a5)
	    ++this->_M_impl._M_finish;
   22186:	651c                	c.ld	a5,8(a0)
   22188:	07a1                	c.addi	a5,8
   2218a:	e51c                	c.sd	a5,8(a0)
   2218c:	8082                	c.jr	ra
      vector<_Tp, _Alloc>::
   2218e:	1141                	c.addi	sp,-16
   22190:	e406                	c.sdsp	ra,8(sp)
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   22192:	862e                	c.mv	a2,a1
   22194:	85be                	c.mv	a1,a5
   22196:	00017317          	auipc	t1,0x17
   2219a:	19a33303          	ld	t1,410(t1) # 39330 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@@Base+0x1729a>
   2219e:	9302                	c.jalr	t1
      }
   221a0:	60a2                	c.ldsp	ra,8(sp)
   221a2:	0141                	c.addi	sp,16
   221a4:	8082                	c.jr	ra

00000000000221a6 <dwarf::line_table::entry::reset(bool)>:

line_table::file::file(string path, uint64_t mtime, uint64_t length)
    : path(path), mtime(mtime), length(length) {}

void line_table::entry::reset(bool is_stmt) {
  address = op_index = 0;
   221a6:	00052423          	sw	zero,8(a0)
   221aa:	00053023          	sd	zero,0(a0)
  file = nullptr;
   221ae:	00053823          	sd	zero,16(a0)
  file_index = line = 1;
   221b2:	4785                	c.li	a5,1
   221b4:	cd5c                	c.sw	a5,28(a0)
   221b6:	cd1c                	c.sw	a5,24(a0)
  column = 0;
   221b8:	02052023          	sw	zero,32(a0)
  this->is_stmt = is_stmt;
   221bc:	02b50223          	sb	a1,36(a0)
  basic_block = end_sequence = prologue_end = epilogue_begin = false;
   221c0:	02050423          	sb	zero,40(a0)
   221c4:	020503a3          	sb	zero,39(a0)
   221c8:	02050323          	sb	zero,38(a0)
   221cc:	020502a3          	sb	zero,37(a0)
  isa = discriminator = 0;
   221d0:	02052823          	sw	zero,48(a0)
   221d4:	02052623          	sw	zero,44(a0)
}
   221d8:	8082                	c.jr	ra

00000000000221da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>:
line_table::file::file(string path, uint64_t mtime, uint64_t length)
   221da:	1101                	c.addi	sp,-32
   221dc:	ec06                	c.sdsp	ra,24(sp)
   221de:	e822                	c.sdsp	s0,16(sp)
   221e0:	e426                	c.sdsp	s1,8(sp)
   221e2:	e04a                	c.sdsp	s2,0(sp)
   221e4:	842a                	c.mv	s0,a0
   221e6:	87ae                	c.mv	a5,a1
   221e8:	8932                	c.mv	s2,a2
   221ea:	84b6                	c.mv	s1,a3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   221ec:	01050713          	addi	a4,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   221f0:	e118                	c.sd	a4,0(a0)
      { return _M_dataplus._M_p; }
   221f2:	618c                	c.ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   221f4:	6790                	c.ld	a2,8(a5)
   221f6:	4681                	c.li	a3,0
   221f8:	962e                	c.add	a2,a1
   221fa:	00017317          	auipc	t1,0x17
   221fe:	11633303          	ld	t1,278(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   22202:	9302                	c.jalr	t1
    : path(path), mtime(mtime), length(length) {}
   22204:	03243023          	sd	s2,32(s0)
   22208:	f404                	c.sd	s1,40(s0)
   2220a:	60e2                	c.ldsp	ra,24(sp)
   2220c:	6442                	c.ldsp	s0,16(sp)
   2220e:	64a2                	c.ldsp	s1,8(sp)
   22210:	6902                	c.ldsp	s2,0(sp)
   22212:	6105                	c.addi16sp	sp,32
   22214:	8082                	c.jr	ra

0000000000022216 <dwarf::line_table::entry::get_description[abi:cxx11]() const>:

string line_table::entry::get_description() const {
   22216:	715d                	c.addi16sp	sp,-80
   22218:	e486                	c.sdsp	ra,72(sp)
   2221a:	e0a2                	c.sdsp	s0,64(sp)
   2221c:	fc26                	c.sdsp	s1,56(sp)
   2221e:	f84a                	c.sdsp	s2,48(sp)
   22220:	f44e                	c.sdsp	s3,40(sp)
   22222:	f052                	c.sdsp	s4,32(sp)
   22224:	842a                	c.mv	s0,a0
   22226:	84ae                	c.mv	s1,a1
  string res = file->path;
   22228:	699c                	c.ld	a5,16(a1)
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2222a:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2222e:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   22232:	638c                	c.ld	a1,0(a5)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22234:	6790                	c.ld	a2,8(a5)
   22236:	4681                	c.li	a3,0
   22238:	962e                	c.add	a2,a1
   2223a:	00017317          	auipc	t1,0x17
   2223e:	0d633303          	ld	t1,214(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   22242:	9302                	c.jalr	t1
  if (line) {
   22244:	4cdc                	c.lw	a5,28(s1)
   22246:	eb91                	c.bnez	a5,2225a <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x44>
    res.append(":").append(std::to_string(line));
    if (column)
      res.append(":").append(std::to_string(column));
  }
  return res;
}
   22248:	8522                	c.mv	a0,s0
   2224a:	60a6                	c.ldsp	ra,72(sp)
   2224c:	6406                	c.ldsp	s0,64(sp)
   2224e:	74e2                	c.ldsp	s1,56(sp)
   22250:	7942                	c.ldsp	s2,48(sp)
   22252:	79a2                	c.ldsp	s3,40(sp)
   22254:	7a02                	c.ldsp	s4,32(sp)
   22256:	6161                	c.addi16sp	sp,80
   22258:	8082                	c.jr	ra
	if (this->max_size() - (this->size() - __n1) < __n2)
   2225a:	6418                	c.ld	a4,8(s0)
   2225c:	57fd                	c.li	a5,-1
   2225e:	8389                	c.srli	a5,0x2
   22260:	00f70b63          	beq	a4,a5,22276 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x60>
	return _M_append(__s, __n);
   22264:	4605                	c.li	a2,1
   22266:	0000c597          	auipc	a1,0xc
   2226a:	f9258593          	addi	a1,a1,-110 # 2e1f8 <typeinfo name for dwarf::expr_context+0x28>
   2226e:	8522                	c.mv	a0,s0
   22270:	950f40ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22274:	a809                	c.j	22286 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x70>
	  __throw_length_error(__N(__s));
   22276:	0000b517          	auipc	a0,0xb
   2227a:	4d250513          	addi	a0,a0,1234 # 2d748 <std::piecewise_construct+0x2b0>
   2227e:	9c2f40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22282:	84aa                	c.mv	s1,a0
   22284:	a0b5                	c.j	222f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
	return _M_append(__s, __n);
   22286:	89aa                	c.mv	s3,a0
    res.append(":").append(std::to_string(line));
   22288:	01c4aa03          	lw	s4,28(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   2228c:	45a9                	c.li	a1,10
   2228e:	8552                	c.mv	a0,s4
   22290:	00017317          	auipc	t1,0x17
   22294:	20833303          	ld	t1,520(t1) # 39498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x1528a>
   22298:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   2229a:	081c                	c.addi4spn	a5,sp,16
   2229c:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   2229e:	4601                	c.li	a2,0
   222a0:	02051593          	slli	a1,a0,0x20
   222a4:	9181                	c.srli	a1,0x20
   222a6:	850a                	c.mv	a0,sp
   222a8:	ac8f40ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   222ac:	8652                	c.mv	a2,s4
   222ae:	45a2                	c.lwsp	a1,8(sp)
   222b0:	6502                	c.ldsp	a0,0(sp)
   222b2:	00017317          	auipc	t1,0x17
   222b6:	20633303          	ld	t1,518(t1) # 394b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15238>
   222ba:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   222bc:	6582                	c.ldsp	a1,0(sp)
      { return _M_string_length; }
   222be:	6622                	c.ldsp	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   222c0:	0089b703          	ld	a4,8(s3)
   222c4:	57fd                	c.li	a5,-1
   222c6:	8389                	c.srli	a5,0x2
   222c8:	8f99                	c.sub	a5,a4
   222ca:	00c7e663          	bltu	a5,a2,222d6 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xc0>
	return _M_append(__s, __n);
   222ce:	854e                	c.mv	a0,s3
   222d0:	8f0f40ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   222d4:	a035                	c.j	22300 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xea>
	  __throw_length_error(__N(__s));
   222d6:	0000b517          	auipc	a0,0xb
   222da:	47250513          	addi	a0,a0,1138 # 2d748 <std::piecewise_construct+0x2b0>
   222de:	962f40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   222e2:	84aa                	c.mv	s1,a0
   222e4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   222e6:	081c                	c.addi4spn	a5,sp,16
   222e8:	00f50463          	beq	a0,a5,222f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   222ec:	a24f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   222f0:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   222f2:	01250463          	beq	a0,s2,222fa <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xe4>
   222f6:	a1af40ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   222fa:	8526                	c.mv	a0,s1
   222fc:	bf4f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   22300:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22302:	081c                	c.addi4spn	a5,sp,16
   22304:	00f50463          	beq	a0,a5,2230c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xf6>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22308:	a08f40ef          	jal	ra,16510 <operator delete(void*)@plt>
    if (column)
   2230c:	509c                	c.lw	a5,32(s1)
   2230e:	df8d                	c.beqz	a5,22248 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>
	if (this->max_size() - (this->size() - __n1) < __n2)
   22310:	6418                	c.ld	a4,8(s0)
   22312:	57fd                	c.li	a5,-1
   22314:	8389                	c.srli	a5,0x2
   22316:	00f70b63          	beq	a4,a5,2232c <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x116>
	return _M_append(__s, __n);
   2231a:	4605                	c.li	a2,1
   2231c:	0000c597          	auipc	a1,0xc
   22320:	edc58593          	addi	a1,a1,-292 # 2e1f8 <typeinfo name for dwarf::expr_context+0x28>
   22324:	8522                	c.mv	a0,s0
   22326:	89af40ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   2232a:	a039                	c.j	22338 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x122>
	  __throw_length_error(__N(__s));
   2232c:	0000b517          	auipc	a0,0xb
   22330:	41c50513          	addi	a0,a0,1052 # 2d748 <std::piecewise_construct+0x2b0>
   22334:	90cf40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return _M_append(__s, __n);
   22338:	89aa                	c.mv	s3,a0
      res.append(":").append(std::to_string(column));
   2233a:	5084                	c.lw	s1,32(s1)
    string __str(__detail::__to_chars_len(__val), '\0');
   2233c:	45a9                	c.li	a1,10
   2233e:	8526                	c.mv	a0,s1
   22340:	00017317          	auipc	t1,0x17
   22344:	15833303          	ld	t1,344(t1) # 39498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x1528a>
   22348:	9302                	c.jalr	t1
	: allocator_type(__a), _M_p(__dat) { }
   2234a:	081c                	c.addi4spn	a5,sp,16
   2234c:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   2234e:	4601                	c.li	a2,0
   22350:	02051593          	slli	a1,a0,0x20
   22354:	9181                	c.srli	a1,0x20
   22356:	850a                	c.mv	a0,sp
   22358:	a18f40ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   2235c:	8626                	c.mv	a2,s1
   2235e:	45a2                	c.lwsp	a1,8(sp)
   22360:	6502                	c.ldsp	a0,0(sp)
   22362:	00017317          	auipc	t1,0x17
   22366:	15633303          	ld	t1,342(t1) # 394b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15238>
   2236a:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   2236c:	6582                	c.ldsp	a1,0(sp)
      { return _M_string_length; }
   2236e:	6622                	c.ldsp	a2,8(sp)
	if (this->max_size() - (this->size() - __n1) < __n2)
   22370:	0089b703          	ld	a4,8(s3)
   22374:	57fd                	c.li	a5,-1
   22376:	8389                	c.srli	a5,0x2
   22378:	8f99                	c.sub	a5,a4
   2237a:	00c7e663          	bltu	a5,a2,22386 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x170>
	return _M_append(__s, __n);
   2237e:	854e                	c.mv	a0,s3
   22380:	840f40ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   22384:	a839                	c.j	223a2 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x18c>
	  __throw_length_error(__N(__s));
   22386:	0000b517          	auipc	a0,0xb
   2238a:	3c250513          	addi	a0,a0,962 # 2d748 <std::piecewise_construct+0x2b0>
   2238e:	8b2f40ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   22392:	84aa                	c.mv	s1,a0
   22394:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   22396:	081c                	c.addi4spn	a5,sp,16
   22398:	f4f50ce3          	beq	a0,a5,222f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
   2239c:	974f40ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   223a0:	bf81                	c.j	222f0 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0xda>
      { return _M_dataplus._M_p; }
   223a2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   223a4:	081c                	c.addi4spn	a5,sp,16
   223a6:	eaf501e3          	beq	a0,a5,22248 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>
   223aa:	966f40ef          	jal	ra,16510 <operator delete(void*)@plt>
  return res;
   223ae:	bd69                	c.j	22248 <dwarf::line_table::entry::get_description[abi:cxx11]() const+0x32>

00000000000223b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>:
bool line_table::impl::read_file_entry(cursor *cur, bool in_header) {
   223b0:	7175                	c.addi16sp	sp,-144
   223b2:	e506                	c.sdsp	ra,136(sp)
   223b4:	e122                	c.sdsp	s0,128(sp)
   223b6:	fca6                	c.sdsp	s1,120(sp)
   223b8:	f8ca                	c.sdsp	s2,112(sp)
  assert(cur->sec == sec);
   223ba:	6118                	c.ld	a4,0(a0)
   223bc:	619c                	c.ld	a5,0(a1)
   223be:	00f71f63          	bne	a4,a5,223dc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x2c>
   223c2:	892a                	c.mv	s2,a0
   223c4:	842e                	c.mv	s0,a1
   223c6:	84b2                	c.mv	s1,a2
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   223c8:	109c                	c.addi4spn	a5,sp,96
   223ca:	e8be                	c.sdsp	a5,80(sp)
      { _M_string_length = __length; }
   223cc:	ec82                	c.sdsp	zero,88(sp)
	__c1 = __c2;
   223ce:	06010023          	sb	zero,96(sp)
  cur->string(file_name);
   223d2:	088c                	c.addi4spn	a1,sp,80
   223d4:	8522                	c.mv	a0,s0
   223d6:	f32f80ef          	jal	ra,1ab08 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   223da:	a00d                	c.j	223fc <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x4c>
  assert(cur->sec == sec);
   223dc:	0000c697          	auipc	a3,0xc
   223e0:	e2468693          	addi	a3,a3,-476 # 2e200 <typeinfo name for dwarf::expr_context+0x30>
   223e4:	0bb00613          	addi	a2,zero,187
   223e8:	0000c597          	auipc	a1,0xc
   223ec:	e6058593          	addi	a1,a1,-416 # 2e248 <typeinfo name for dwarf::expr_context+0x78>
   223f0:	0000c517          	auipc	a0,0xc
   223f4:	e6050513          	addi	a0,a0,-416 # 2e250 <typeinfo name for dwarf::expr_context+0x80>
   223f8:	908f40ef          	jal	ra,16500 <__assert_fail@plt>
  if (in_header && file_name.empty())
   223fc:	c481                	c.beqz	s1,22404 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x54>
   223fe:	67e6                	c.ldsp	a5,88(sp)
   22400:	1c078863          	beq	a5,zero,225d0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x220>
    while (pos < sec->end) {
   22404:	681c                	c.ld	a5,16(s0)
      { return _M_ptr; }
   22406:	600c                	c.ld	a1,0(s0)
   22408:	6998                	c.ld	a4,16(a1)
   2240a:	02e7f763          	bgeu	a5,a4,22438 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x88>
   2240e:	4481                	c.li	s1,0
   22410:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   22412:	0785                	c.addi	a5,1
   22414:	e81c                	c.sd	a5,16(s0)
   22416:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2241a:	07f77693          	andi	a3,a4,127
   2241e:	00c696b3          	sll	a3,a3,a2
   22422:	8cd5                	c.or	s1,a3
      if ((byte & 0x80) == 0)
   22424:	0187171b          	slliw	a4,a4,0x18
   22428:	4187571b          	sraiw	a4,a4,0x18
   2242c:	00075a63          	bge	a4,zero,22440 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x90>
      shift += 7;
   22430:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   22432:	6998                	c.ld	a4,16(a1)
   22434:	fce7efe3          	bltu	a5,a4,22412 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x62>
    underflow();
   22438:	8522                	c.mv	a0,s0
   2243a:	efef80ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   2243e:	4481                	c.li	s1,0
    while (pos < sec->end) {
   22440:	681c                	c.ld	a5,16(s0)
   22442:	6008                	c.ld	a0,0(s0)
   22444:	6918                	c.ld	a4,16(a0)
   22446:	02e7f763          	bgeu	a5,a4,22474 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xc4>
    std::uint64_t result = 0;
   2244a:	4581                	c.li	a1,0
    int shift = 0;
   2244c:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   2244e:	0785                	c.addi	a5,1
   22450:	e81c                	c.sd	a5,16(s0)
   22452:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   22456:	07f77693          	andi	a3,a4,127
   2245a:	00c696b3          	sll	a3,a3,a2
   2245e:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   22460:	0187171b          	slliw	a4,a4,0x18
   22464:	4187571b          	sraiw	a4,a4,0x18
   22468:	00075a63          	bge	a4,zero,2247c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xcc>
      shift += 7;
   2246c:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   2246e:	6918                	c.ld	a4,16(a0)
   22470:	fce7efe3          	bltu	a5,a4,2244e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x9e>
    underflow();
   22474:	8522                	c.mv	a0,s0
   22476:	ec2f80ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   2247a:	4581                	c.li	a1,0
  uint64_t mtime = cur->uleb128();
   2247c:	e4ae                	c.sdsp	a1,72(sp)
    while (pos < sec->end) {
   2247e:	681c                	c.ld	a5,16(s0)
   22480:	6008                	c.ld	a0,0(s0)
   22482:	6918                	c.ld	a4,16(a0)
   22484:	02e7f763          	bgeu	a5,a4,224b2 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x102>
    std::uint64_t result = 0;
   22488:	4581                	c.li	a1,0
    int shift = 0;
   2248a:	4601                	c.li	a2,0
      uint8_t byte = *(uint8_t *)(pos++);
   2248c:	0785                	c.addi	a5,1
   2248e:	e81c                	c.sd	a5,16(s0)
   22490:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   22494:	07f77693          	andi	a3,a4,127
   22498:	00c696b3          	sll	a3,a3,a2
   2249c:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   2249e:	0187171b          	slliw	a4,a4,0x18
   224a2:	4187571b          	sraiw	a4,a4,0x18
   224a6:	00075a63          	bge	a4,zero,224ba <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x10a>
      shift += 7;
   224aa:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   224ac:	6918                	c.ld	a4,16(a0)
   224ae:	fce7efe3          	bltu	a5,a4,2248c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0xdc>
    underflow();
   224b2:	8522                	c.mv	a0,s0
   224b4:	e84f80ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   224b8:	4581                	c.li	a1,0
  uint64_t length = cur->uleb128();
   224ba:	e0ae                	c.sdsp	a1,64(sp)
  section_offset get_section_offset() const { return pos - sec->begin; }
   224bc:	6018                	c.ld	a4,0(s0)
   224be:	681c                	c.ld	a5,16(s0)
   224c0:	6718                	c.ld	a4,8(a4)
   224c2:	8f99                	c.sub	a5,a4
  if (cur->get_section_offset() <= last_file_name_end)
   224c4:	06893703          	ld	a4,104(s2)
   224c8:	10f77663          	bgeu	a4,a5,225d4 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x224>
  last_file_name_end = cur->get_section_offset();
   224cc:	06f93423          	sd	a5,104(s2)
  if (file_name[0] == '/')
   224d0:	67c6                	c.ldsp	a5,80(sp)
   224d2:	0007c703          	lbu	a4,0(a5)
   224d6:	02f00793          	addi	a5,zero,47
   224da:	02f70763          	beq	a4,a5,22508 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x158>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   224de:	03893703          	ld	a4,56(s2)
   224e2:	04093783          	ld	a5,64(s2)
   224e6:	8f99                	c.sub	a5,a4
   224e8:	8795                	c.srai	a5,0x5
  else if (dir_index < include_directories.size())
   224ea:	06f4f763          	bgeu	s1,a5,22558 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1a8>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   224ee:	05090913          	addi	s2,s2,80
	return *(this->_M_impl._M_start + __n);
   224f2:	00549593          	slli	a1,s1,0x5
   224f6:	0890                	c.addi4spn	a2,sp,80
   224f8:	95ba                	c.add	a1,a4
   224fa:	1008                	c.addi4spn	a0,sp,32
   224fc:	00017317          	auipc	t1,0x17
   22500:	0cc33303          	ld	t1,204(t1) # 395c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1501c>
   22504:	9302                	c.jalr	t1
   22506:	a821                	c.j	2251e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x16e>
    file_names.emplace_back(move(file_name), mtime, length);
   22508:	0094                	c.addi4spn	a3,sp,64
   2250a:	00b0                	c.addi4spn	a2,sp,72
   2250c:	088c                	c.addi4spn	a1,sp,80
   2250e:	05090513          	addi	a0,s2,80
   22512:	00017317          	auipc	t1,0x17
   22516:	fd633303          	ld	t1,-42(t1) # 394e8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x1435c>
   2251a:	9302                	c.jalr	t1
   2251c:	a875                	c.j	225d8 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x228>
    file_names.emplace_back(include_directories[dir_index] + file_name, mtime,
   2251e:	0094                	c.addi4spn	a3,sp,64
   22520:	00b0                	c.addi4spn	a2,sp,72
   22522:	100c                	c.addi4spn	a1,sp,32
   22524:	854a                	c.mv	a0,s2
   22526:	00017317          	auipc	t1,0x17
   2252a:	fc233303          	ld	t1,-62(t1) # 394e8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x1435c>
   2252e:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   22530:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   22532:	181c                	c.addi4spn	a5,sp,48
   22534:	00f50463          	beq	a0,a5,2253c <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18c>
   22538:	fd9f30ef          	jal	ra,16510 <operator delete(void*)@plt>
  return true;
   2253c:	4405                	c.li	s0,1
      { return _M_dataplus._M_p; }
   2253e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   22540:	109c                	c.addi4spn	a5,sp,96
   22542:	00f50463          	beq	a0,a5,2254a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x19a>
   22546:	fcbf30ef          	jal	ra,16510 <operator delete(void*)@plt>
}
   2254a:	8522                	c.mv	a0,s0
   2254c:	60aa                	c.ldsp	ra,136(sp)
   2254e:	640a                	c.ldsp	s0,128(sp)
   22550:	74e6                	c.ldsp	s1,120(sp)
   22552:	7946                	c.ldsp	s2,112(sp)
   22554:	6149                	c.addi16sp	sp,144
   22556:	8082                	c.jr	ra
                       std::to_string(dir_index));
   22558:	4541                	c.li	a0,16
   2255a:	ec7f30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2255e:	892a                	c.mv	s2,a0
   22560:	85a6                	c.mv	a1,s1
   22562:	850a                	c.mv	a0,sp
   22564:	00017317          	auipc	t1,0x17
   22568:	d9c33303          	ld	t1,-612(t1) # 39300 <std::__cxx11::to_string(unsigned long)@@Base+0x1522c>
   2256c:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   2256e:	0000c617          	auipc	a2,0xc
   22572:	cf260613          	addi	a2,a2,-782 # 2e260 <typeinfo name for dwarf::expr_context+0x90>
   22576:	4581                	c.li	a1,0
   22578:	850a                	c.mv	a0,sp
   2257a:	e17f30ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2257e:	85aa                	c.mv	a1,a0
   22580:	1000                	c.addi4spn	s0,sp,32
   22582:	8522                	c.mv	a0,s0
   22584:	eedf30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   22588:	85a2                	c.mv	a1,s0
   2258a:	854a                	c.mv	a0,s2
   2258c:	814f40ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   22590:	00017797          	auipc	a5,0x17
   22594:	fc87b783          	ld	a5,-56(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   22598:	07c1                	c.addi	a5,16
   2259a:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   2259e:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   225a0:	181c                	c.addi4spn	a5,sp,48
   225a2:	00f50463          	beq	a0,a5,225aa <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x1fa>
   225a6:	f6bf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   225aa:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   225ac:	081c                	c.addi4spn	a5,sp,16
   225ae:	00f50463          	beq	a0,a5,225b6 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x206>
   225b2:	f5ff30ef          	jal	ra,16510 <operator delete(void*)@plt>
   225b6:	00017617          	auipc	a2,0x17
   225ba:	dca63603          	ld	a2,-566(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   225be:	00017597          	auipc	a1,0x17
   225c2:	cf25b583          	ld	a1,-782(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   225c6:	854a                	c.mv	a0,s2
   225c8:	8f8f40ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   225cc:	842a                	c.mv	s0,a0
   225ce:	a831                	c.j	225ea <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
    return false;
   225d0:	4401                	c.li	s0,0
   225d2:	b7b5                	c.j	2253e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
    return true;
   225d4:	4405                	c.li	s0,1
   225d6:	b7a5                	c.j	2253e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
  return true;
   225d8:	4405                	c.li	s0,1
   225da:	b795                	c.j	2253e <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x18e>
   225dc:	842a                	c.mv	s0,a0
   225de:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   225e0:	181c                	c.addi4spn	a5,sp,48
   225e2:	00f50463          	beq	a0,a5,225ea <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
   225e6:	f2bf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   225ea:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   225ec:	109c                	c.addi4spn	a5,sp,96
   225ee:	00f50463          	beq	a0,a5,225f6 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x246>
   225f2:	f1ff30ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   225f6:	8522                	c.mv	a0,s0
   225f8:	8f8f40ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   225fc:	842a                	c.mv	s0,a0
   225fe:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   22600:	181c                	c.addi4spn	a5,sp,48
   22602:	00f50463          	beq	a0,a5,2260a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22606:	f0bf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2260a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2260c:	081c                	c.addi4spn	a5,sp,16
   2260e:	00f50463          	beq	a0,a5,22616 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x266>
   22612:	efff30ef          	jal	ra,16510 <operator delete(void*)@plt>
                       std::to_string(dir_index));
   22616:	854a                	c.mv	a0,s2
   22618:	eb9f30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2261c:	b7f9                	c.j	225ea <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x23a>
      { return _M_dataplus._M_p; }
   2261e:	842a                	c.mv	s0,a0
   22620:	b7ed                	c.j	2260a <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x25a>
   22622:	842a                	c.mv	s0,a0
   22624:	bfcd                	c.j	22616 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)+0x266>

0000000000022626 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
line_table::line_table(const shared_ptr<section> &sec, section_offset offset,
   22626:	7105                	c.addi16sp	sp,-480
   22628:	ef86                	c.sdsp	ra,472(sp)
   2262a:	eba2                	c.sdsp	s0,464(sp)
   2262c:	e7a6                	c.sdsp	s1,456(sp)
   2262e:	e3ca                	c.sdsp	s2,448(sp)
   22630:	ff4e                	c.sdsp	s3,440(sp)
   22632:	fb52                	c.sdsp	s4,432(sp)
   22634:	f756                	c.sdsp	s5,424(sp)
   22636:	f35a                	c.sdsp	s6,416(sp)
   22638:	ef5e                	c.sdsp	s7,408(sp)
   2263a:	eb62                	c.sdsp	s8,400(sp)
   2263c:	e766                	c.sdsp	s9,392(sp)
   2263e:	e36a                	c.sdsp	s10,384(sp)
   22640:	feee                	c.sdsp	s11,376(sp)
   22642:	842a                	c.mv	s0,a0
   22644:	892e                	c.mv	s2,a1
   22646:	8ab2                	c.mv	s5,a2
   22648:	8a36                	c.mv	s4,a3
   2264a:	84ba                	c.mv	s1,a4
   2264c:	89be                	c.mv	s3,a5
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2264e:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   22652:	0b000513          	addi	a0,zero,176
   22656:	ecbf30ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2265a:	00052423          	sw	zero,8(a0)
   2265e:	00052623          	sw	zero,12(a0)
   22662:	00052823          	sw	zero,16(a0)
   22666:	00052a23          	sw	zero,20(a0)
   2266a:	00052c23          	sw	zero,24(a0)
   2266e:	00052e23          	sw	zero,28(a0)
   22672:	02053023          	sd	zero,32(a0)
   22676:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2267a:	4785                	c.li	a5,1
   2267c:	d91c                	c.sw	a5,48(a0)
   2267e:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   22680:	00017797          	auipc	a5,0x17
   22684:	d187b783          	ld	a5,-744(a5) # 39398 <vtable for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x890>
   22688:	07c1                	c.addi	a5,16
   2268a:	e11c                	c.sd	a5,0(a0)
      : _M_ptr(0), _M_refcount()
   2268c:	02053c23          	sd	zero,56(a0)
      constexpr __shared_count() noexcept : _M_pi(0)
   22690:	04053023          	sd	zero,64(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   22694:	04053c23          	sd	zero,88(a0)
   22698:	06053023          	sd	zero,96(a0)
   2269c:	06053423          	sd	zero,104(a0)
   226a0:	06053823          	sd	zero,112(a0)
   226a4:	06053c23          	sd	zero,120(a0)
   226a8:	08053023          	sd	zero,128(a0)
   226ac:	08053423          	sd	zero,136(a0)
   226b0:	08053823          	sd	zero,144(a0)
   226b4:	08053c23          	sd	zero,152(a0)
  impl() : last_file_name_end(0), file_names_complete(false){};
   226b8:	0a053023          	sd	zero,160(a0)
   226bc:	0a050423          	sb	zero,168(a0)
	  _M_pi = __pi;
   226c0:	e408                	c.sd	a0,8(s0)
   226c2:	03850513          	addi	a0,a0,56
	  __p = __pi->_M_ptr();
   226c6:	e008                	c.sd	a0,0(s0)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   226c8:	181c                	c.addi4spn	a5,sp,48
   226ca:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   226cc:	f402                	c.sdsp	zero,40(sp)
   226ce:	02010823          	sb	zero,48(sp)
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   226d2:	089c                	c.addi4spn	a5,sp,80
   226d4:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   226d6:	e482                	c.sdsp	zero,72(sp)
   226d8:	04010823          	sb	zero,80(sp)
      { return _M_string_length; }
   226dc:	6490                	c.ld	a2,8(s1)
  if (cu_comp_dir.empty() || cu_comp_dir.back() == '/')
   226de:	ca11                	c.beqz	a2,226f2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
      { return _M_dataplus._M_p; }
   226e0:	608c                	c.ld	a1,0(s1)
   226e2:	00c587b3          	add	a5,a1,a2
   226e6:	fff7c703          	lbu	a4,-1(a5)
   226ea:	02f00793          	addi	a5,zero,47
   226ee:	00f71763          	bne	a4,a5,226fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
	this->_M_assign(__str);
   226f2:	85a6                	c.mv	a1,s1
   226f4:	1008                	c.addi4spn	a0,sp,32
   226f6:	d5bf30ef          	jal	ra,16450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   226fa:	a869                	c.j	22794 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16e>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   226fc:	0a9c                	c.addi4spn	a5,sp,336
   226fe:	e2be                	c.sdsp	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22700:	4681                	c.li	a3,0
   22702:	962e                	c.add	a2,a1
   22704:	0288                	c.addi4spn	a0,sp,320
   22706:	00017317          	auipc	t1,0x17
   2270a:	c0a33303          	ld	t1,-1014(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   2270e:	9302                	c.jalr	t1
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
   22710:	02f00713          	addi	a4,zero,47
   22714:	4685                	c.li	a3,1
   22716:	4601                	c.li	a2,0
   22718:	65b6                	c.ldsp	a1,328(sp)
   2271a:	0288                	c.addi4spn	a0,sp,320
   2271c:	834f40ef          	jal	ra,16750 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)@plt>
   22720:	a835                	c.j	2275c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x136>
      { return _M_dataplus._M_p; }
   22722:	84aa                	c.mv	s1,a0
   22724:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22726:	0a9c                	c.addi4spn	a5,sp,336
   22728:	00f50463          	beq	a0,a5,22730 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2272c:	de5f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22730:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   22732:	089c                	c.addi4spn	a5,sp,80
   22734:	00f50463          	beq	a0,a5,2273c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x116>
   22738:	dd9f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2273c:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2273e:	181c                	c.addi4spn	a5,sp,48
   22740:	00f50463          	beq	a0,a5,22748 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x122>
   22744:	dcdf30ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   22748:	6408                	c.ld	a0,8(s0)
   2274a:	c511                	c.beqz	a0,22756 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x130>
	  _M_pi->_M_release();
   2274c:	00017317          	auipc	t1,0x17
   22750:	c7c33303          	ld	t1,-900(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   22754:	9302                	c.jalr	t1
   22756:	8526                	c.mv	a0,s1
   22758:	f99f30ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2275c:	7502                	c.ldsp	a0,32(sp)
   2275e:	6796                	c.ldsp	a5,320(sp)
	if (__str._M_is_local())
   22760:	0a98                	c.addi4spn	a4,sp,336
   22762:	0ce78163          	beq	a5,a4,22824 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1fe>
	    if (!_M_is_local())
   22766:	1818                	c.addi4spn	a4,sp,48
   22768:	36e50ee3          	beq	a0,a4,232e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcbe>
		    __capacity = _M_allocated_capacity;
   2276c:	7742                	c.ldsp	a4,48(sp)
      { _M_dataplus._M_p = __p; }
   2276e:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   22770:	67b6                	c.ldsp	a5,328(sp)
   22772:	f43e                	c.sdsp	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   22774:	67d6                	c.ldsp	a5,336(sp)
   22776:	f83e                	c.sdsp	a5,48(sp)
	    if (__data)
   22778:	36050be3          	beq	a0,zero,232ee <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc8>
      { _M_dataplus._M_p = __p; }
   2277c:	e2aa                	c.sdsp	a0,320(sp)
      { _M_allocated_capacity = __capacity; }
   2277e:	eaba                	c.sdsp	a4,336(sp)
      { _M_string_length = __length; }
   22780:	e682                	c.sdsp	zero,328(sp)
      { return _M_dataplus._M_p; }
   22782:	6796                	c.ldsp	a5,320(sp)
   22784:	00078023          	sb	zero,0(a5)
   22788:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   2278a:	0a9c                	c.addi4spn	a5,sp,336
   2278c:	00f50463          	beq	a0,a5,22794 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16e>
   22790:	d81f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   22794:	00093b03          	ld	s6,0(s2)
      : _M_pi(__r._M_pi)
   22798:	00893483          	ld	s1,8(s2)
	if (_M_pi != nullptr)
   2279c:	320487e3          	beq	s1,zero,232ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xca4>
    if (__is_single_threaded())
   227a0:	00017797          	auipc	a5,0x17
   227a4:	ce07b783          	ld	a5,-800(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   227a8:	0007c783          	lbu	a5,0(a5)
   227ac:	c3cd                	c.beqz	a5,2284e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x228>
  { *__mem += __val; }
   227ae:	589c                	c.lw	a5,48(s1)
   227b0:	2785                	c.addiw	a5,1
   227b2:	d89c                	c.sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   227b4:	e45a                	c.sdsp	s6,8(sp)
      : _M_pi(__r._M_pi)
   227b6:	e826                	c.sdsp	s1,16(sp)
    if (__is_single_threaded())
   227b8:	00017797          	auipc	a5,0x17
   227bc:	cc87b783          	ld	a5,-824(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   227c0:	0007c783          	lbu	a5,0(a5)
   227c4:	cbd9                	c.beqz	a5,2285a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x234>
  { *__mem += __val; }
   227c6:	589c                	c.lw	a5,48(s1)
   227c8:	2785                	c.addiw	a5,1
   227ca:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   227cc:	008b3783          	ld	a5,8(s6)
   227d0:	97d6                	c.add	a5,s5
   227d2:	ec3e                	c.sdsp	a5,24(sp)
    if (__is_single_threaded())
   227d4:	00017797          	auipc	a5,0x17
   227d8:	cac7b783          	ld	a5,-852(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   227dc:	0007c783          	lbu	a5,0(a5)
   227e0:	c3d9                	c.beqz	a5,22866 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x240>
    _Atomic_word __result = *__mem;
   227e2:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   227e4:	fff5079b          	addiw	a5,a0,-1
   227e8:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   227ea:	4785                	c.li	a5,1
   227ec:	2ef515e3          	bne	a0,a5,232d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
	_M_dispose();
   227f0:	609c                	c.ld	a5,0(s1)
   227f2:	6b9c                	c.ld	a5,16(a5)
   227f4:	8526                	c.mv	a0,s1
   227f6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   227f8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   227fc:	00017797          	auipc	a5,0x17
   22800:	c847b783          	ld	a5,-892(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22804:	0007c783          	lbu	a5,0(a5)
   22808:	c7ad                	c.beqz	a5,22872 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x24c>
    _Atomic_word __result = *__mem;
   2280a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2280c:	fff5079b          	addiw	a5,a0,-1
   22810:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22812:	4785                	c.li	a5,1
   22814:	2cf511e3          	bne	a0,a5,232d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
	    _M_destroy();
   22818:	609c                	c.ld	a5,0(s1)
   2281a:	6f9c                	c.ld	a5,24(a5)
   2281c:	8526                	c.mv	a0,s1
   2281e:	9782                	c.jalr	a5
   22820:	2b70006f          	jal	zero,232d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcb0>
      { return _M_string_length; }
   22824:	6636                	c.ldsp	a2,328(sp)
		if (__str.size())
   22826:	ea01                	c.bnez	a2,22836 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
      { return _M_string_length; }
   22828:	6736                	c.ldsp	a4,328(sp)
      { _M_string_length = __length; }
   2282a:	f43a                	c.sdsp	a4,40(sp)
   2282c:	7782                	c.ldsp	a5,32(sp)
   2282e:	97ba                	c.add	a5,a4
   22830:	00078023          	sb	zero,0(a5)
      }
   22834:	b7b1                	c.j	22780 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15a>
	if (__n == 1)
   22836:	4785                	c.li	a5,1
   22838:	00f60663          	beq	a2,a5,22844 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2283c:	0a8c                	c.addi4spn	a1,sp,336
   2283e:	d73f30ef          	jal	ra,165b0 <memcpy@plt>
   22842:	b7dd                	c.j	22828 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x202>
	__c1 = __c2;
   22844:	15014783          	lbu	a5,336(sp)
   22848:	00f50023          	sb	a5,0(a0)
      }
   2284c:	bff1                	c.j	22828 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x202>
      __atomic_add(__mem, __val);
   2284e:	4585                	c.li	a1,1
   22850:	03048513          	addi	a0,s1,48
   22854:	afdf30ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   22858:	bfb1                	c.j	227b4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18e>
   2285a:	4585                	c.li	a1,1
   2285c:	03048513          	addi	a0,s1,48
   22860:	af1f30ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   22864:	b7a5                	c.j	227cc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1a6>
      return __exchange_and_add(__mem, __val);
   22866:	55fd                	c.li	a1,-1
   22868:	03048513          	addi	a0,s1,48
   2286c:	b15f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22870:	bfad                	c.j	227ea <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1c4>
   22872:	55fd                	c.li	a1,-1
   22874:	03448513          	addi	a0,s1,52
   22878:	b09f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2287c:	bf59                	c.j	22812 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2287e:	7716                	c.ldsp	a4,352(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22880:	77b6                	c.ldsp	a5,360(sp)
	__r._M_pi = _M_pi;
   22882:	f682                	c.sdsp	zero,360(sp)
	__r._M_ptr = nullptr;
   22884:	f282                	c.sdsp	zero,352(sp)
   22886:	e098                	c.sd	a4,0(s1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22888:	0084b903          	ld	s2,8(s1)
	__r._M_pi = _M_pi;
   2288c:	e49c                	c.sd	a5,8(s1)
	if (_M_pi != nullptr)
   2288e:	08090763          	beq	s2,zero,2291c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
    if (__is_single_threaded())
   22892:	00017797          	auipc	a5,0x17
   22896:	bee7b783          	ld	a5,-1042(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2289a:	0007c783          	lbu	a5,0(a5)
   2289e:	c7b9                	c.beqz	a5,228ec <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2c6>
    _Atomic_word __result = *__mem;
   228a0:	03092783          	lw	a5,48(s2)
    *__mem += __val;
   228a4:	fff7871b          	addiw	a4,a5,-1
   228a8:	02e92823          	sw	a4,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   228ac:	4705                	c.li	a4,1
   228ae:	06e79763          	bne	a5,a4,2291c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
	_M_dispose();
   228b2:	00093783          	ld	a5,0(s2)
   228b6:	6b9c                	c.ld	a5,16(a5)
   228b8:	854a                	c.mv	a0,s2
   228ba:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   228bc:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   228c0:	00017797          	auipc	a5,0x17
   228c4:	bc07b783          	ld	a5,-1088(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   228c8:	0007c783          	lbu	a5,0(a5)
   228cc:	c7f9                	c.beqz	a5,2299a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x374>
    _Atomic_word __result = *__mem;
   228ce:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   228d2:	fff5079b          	addiw	a5,a0,-1
   228d6:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   228da:	4785                	c.li	a5,1
   228dc:	02f51063          	bne	a0,a5,228fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d6>
	    _M_destroy();
   228e0:	00093783          	ld	a5,0(s2)
   228e4:	6f9c                	c.ld	a5,24(a5)
   228e6:	854a                	c.mv	a0,s2
   228e8:	9782                	c.jalr	a5
   228ea:	a809                	c.j	228fc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2d6>
      return __exchange_and_add(__mem, __val);
   228ec:	55fd                	c.li	a1,-1
   228ee:	03090513          	addi	a0,s2,48
   228f2:	a8ff30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   228f6:	4785                	c.li	a5,1
   228f8:	faf50de3          	beq	a0,a5,228b2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x28c>
	if (_M_pi != nullptr)
   228fc:	74b6                	c.ldsp	s1,360(sp)
   228fe:	cc99                	c.beqz	s1,2291c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
    if (__is_single_threaded())
   22900:	00017797          	auipc	a5,0x17
   22904:	b807b783          	ld	a5,-1152(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22908:	0007c783          	lbu	a5,0(a5)
   2290c:	cfc9                	c.beqz	a5,229a6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x380>
    _Atomic_word __result = *__mem;
   2290e:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   22910:	fff5079b          	addiw	a5,a0,-1
   22914:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22916:	4785                	c.li	a5,1
   22918:	08f50d63          	beq	a0,a5,229b2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x38c>
      { return _M_ptr; }
   2291c:	601c                	c.ld	a5,0(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2291e:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   22922:	6784                	c.ld	s1,8(a5)
	if (_M_pi != nullptr)
   22924:	180489e3          	beq	s1,zero,232b6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc90>
    if (__is_single_threaded())
   22928:	00017797          	auipc	a5,0x17
   2292c:	b587b783          	ld	a5,-1192(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22930:	0007c783          	lbu	a5,0(a5)
   22934:	cfd5                	c.beqz	a5,229f0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ca>
  { *__mem += __val; }
   22936:	589c                	c.lw	a5,48(s1)
   22938:	2785                	c.addiw	a5,1
   2293a:	d89c                	c.sw	a5,48(s1)
   2293c:	589c                	c.lw	a5,48(s1)
   2293e:	2785                	c.addiw	a5,1
   22940:	d89c                	c.sw	a5,48(s1)
   22942:	00893a83          	ld	s5,8(s2)
   22946:	e44a                	c.sdsp	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   22948:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   2294a:	e826                	c.sdsp	s1,16(sp)
	if (_M_pi != nullptr)
   2294c:	160902e3          	beq	s2,zero,232b0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc8a>
    if (__is_single_threaded())
   22950:	00017797          	auipc	a5,0x17
   22954:	b307b783          	ld	a5,-1232(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22958:	0007c783          	lbu	a5,0(a5)
   2295c:	cfc5                	c.beqz	a5,22a14 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ee>
    _Atomic_word __result = *__mem;
   2295e:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   22962:	fff5079b          	addiw	a5,a0,-1
   22966:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2296a:	4785                	c.li	a5,1
   2296c:	0af50a63          	beq	a0,a5,22a20 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3fa>
struct cursor {
   22970:	ec56                	c.sdsp	s5,24(sp)
	if (_M_pi != nullptr)
   22972:	c085                	c.beqz	s1,22992 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
    if (__is_single_threaded())
   22974:	00017797          	auipc	a5,0x17
   22978:	b0c7b783          	ld	a5,-1268(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2297c:	0007c783          	lbu	a5,0(a5)
   22980:	0e078363          	beq	a5,zero,22a66 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x440>
    _Atomic_word __result = *__mem;
   22984:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   22986:	fff5079b          	addiw	a5,a0,-1
   2298a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2298c:	4785                	c.li	a5,1
   2298e:	0ef50263          	beq	a0,a5,22a72 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x44c>
  cur.skip_initial_length();
   22992:	0028                	c.addi4spn	a0,sp,8
   22994:	890f80ef          	jal	ra,1aa24 <dwarf::cursor::skip_initial_length()>
   22998:	aa21                	c.j	22ab0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48a>
      return __exchange_and_add(__mem, __val);
   2299a:	55fd                	c.li	a1,-1
   2299c:	03490513          	addi	a0,s2,52
   229a0:	9e1f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   229a4:	bf1d                	c.j	228da <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b4>
   229a6:	55fd                	c.li	a1,-1
   229a8:	03048513          	addi	a0,s1,48
   229ac:	9d5f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   229b0:	b79d                	c.j	22916 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f0>
	_M_dispose();
   229b2:	609c                	c.ld	a5,0(s1)
   229b4:	6b9c                	c.ld	a5,16(a5)
   229b6:	8526                	c.mv	a0,s1
   229b8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   229ba:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   229be:	00017797          	auipc	a5,0x17
   229c2:	ac27b783          	ld	a5,-1342(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   229c6:	0007c783          	lbu	a5,0(a5)
   229ca:	cf89                	c.beqz	a5,229e4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3be>
    _Atomic_word __result = *__mem;
   229cc:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   229ce:	fff5079b          	addiw	a5,a0,-1
   229d2:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   229d4:	4785                	c.li	a5,1
   229d6:	f4f513e3          	bne	a0,a5,2291c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
	    _M_destroy();
   229da:	609c                	c.ld	a5,0(s1)
   229dc:	6f9c                	c.ld	a5,24(a5)
   229de:	8526                	c.mv	a0,s1
   229e0:	9782                	c.jalr	a5
   229e2:	bf2d                	c.j	2291c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2f6>
      return __exchange_and_add(__mem, __val);
   229e4:	55fd                	c.li	a1,-1
   229e6:	03448513          	addi	a0,s1,52
   229ea:	997f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   229ee:	b7dd                	c.j	229d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3ae>
      __atomic_add(__mem, __val);
   229f0:	4585                	c.li	a1,1
   229f2:	03048513          	addi	a0,s1,48
   229f6:	95bf30ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   229fa:	00017797          	auipc	a5,0x17
   229fe:	a867b783          	ld	a5,-1402(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22a02:	0007c783          	lbu	a5,0(a5)
   22a06:	fb9d                	c.bnez	a5,2293c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x316>
      __atomic_add(__mem, __val);
   22a08:	4585                	c.li	a1,1
   22a0a:	03048513          	addi	a0,s1,48
   22a0e:	943f30ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   22a12:	bf05                	c.j	22942 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x31c>
      return __exchange_and_add(__mem, __val);
   22a14:	55fd                	c.li	a1,-1
   22a16:	03090513          	addi	a0,s2,48
   22a1a:	967f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22a1e:	b7b1                	c.j	2296a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x344>
	_M_dispose();
   22a20:	00093783          	ld	a5,0(s2)
   22a24:	6b9c                	c.ld	a5,16(a5)
   22a26:	854a                	c.mv	a0,s2
   22a28:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22a2a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22a2e:	00017797          	auipc	a5,0x17
   22a32:	a527b783          	ld	a5,-1454(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22a36:	0007c783          	lbu	a5,0(a5)
   22a3a:	c385                	c.beqz	a5,22a5a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x434>
    _Atomic_word __result = *__mem;
   22a3c:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   22a40:	fff5079b          	addiw	a5,a0,-1
   22a44:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22a48:	4785                	c.li	a5,1
   22a4a:	f2f513e3          	bne	a0,a5,22970 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34a>
	    _M_destroy();
   22a4e:	00093783          	ld	a5,0(s2)
   22a52:	6f9c                	c.ld	a5,24(a5)
   22a54:	854a                	c.mv	a0,s2
   22a56:	9782                	c.jalr	a5
   22a58:	bf21                	c.j	22970 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34a>
      return __exchange_and_add(__mem, __val);
   22a5a:	55fd                	c.li	a1,-1
   22a5c:	03490513          	addi	a0,s2,52
   22a60:	921f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22a64:	b7d5                	c.j	22a48 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x422>
   22a66:	55fd                	c.li	a1,-1
   22a68:	03048513          	addi	a0,s1,48
   22a6c:	915f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22a70:	bf31                	c.j	2298c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x366>
	_M_dispose();
   22a72:	609c                	c.ld	a5,0(s1)
   22a74:	6b9c                	c.ld	a5,16(a5)
   22a76:	8526                	c.mv	a0,s1
   22a78:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   22a7a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   22a7e:	00017797          	auipc	a5,0x17
   22a82:	a027b783          	ld	a5,-1534(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22a86:	0007c783          	lbu	a5,0(a5)
   22a8a:	cf89                	c.beqz	a5,22aa4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x47e>
    _Atomic_word __result = *__mem;
   22a8c:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   22a8e:	fff5079b          	addiw	a5,a0,-1
   22a92:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   22a94:	4785                	c.li	a5,1
   22a96:	eef51ee3          	bne	a0,a5,22992 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
	    _M_destroy();
   22a9a:	609c                	c.ld	a5,0(s1)
   22a9c:	6f9c                	c.ld	a5,24(a5)
   22a9e:	8526                	c.mv	a0,s1
   22aa0:	9782                	c.jalr	a5
   22aa2:	bdc5                	c.j	22992 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
      return __exchange_and_add(__mem, __val);
   22aa4:	55fd                	c.li	a1,-1
   22aa6:	03448513          	addi	a0,s1,52
   22aaa:	8d7f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   22aae:	b7dd                	c.j	22a94 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x46e>
      { return _M_ptr; }
   22ab0:	601c                	c.ld	a5,0(s0)
   22ab2:	639c                	c.ld	a5,0(a5)
  m->sec->addr_size = cu_addr_size;
   22ab4:	0347a023          	sw	s4,32(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22ab8:	67a2                	c.ldsp	a5,8(sp)
   22aba:	6b98                	c.ld	a4,16(a5)
   22abc:	67e2                	c.ldsp	a5,24(sp)
   22abe:	40f70633          	sub	a2,a4,a5
   22ac2:	4685                	c.li	a3,1
   22ac4:	00c6f463          	bgeu	a3,a2,22acc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4a6>
   22ac8:	00e7e563          	bltu	a5,a4,22ad2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ac>
      underflow();
   22acc:	0028                	c.addi4spn	a0,sp,8
   22ace:	86af80ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22ad2:	6762                	c.ldsp	a4,24(sp)
    if (sec->ord == byte_order::lsb) {
   22ad4:	67a2                	c.ldsp	a5,8(sp)
   22ad6:	4fdc                	c.lw	a5,28(a5)
   22ad8:	e795                	c.bnez	a5,22b04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4de>
        val |= ((uint64_t)p[i]) << (i * 8);
   22ada:	00174783          	lbu	a5,1(a4)
   22ade:	07a2                	c.slli	a5,0x8
   22ae0:	00074683          	lbu	a3,0(a4)
   22ae4:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   22ae6:	0709                	c.addi	a4,2
   22ae8:	ec3a                	c.sdsp	a4,24(sp)
    return (T)val;
   22aea:	03079493          	slli	s1,a5,0x30
   22aee:	90c1                	c.srli	s1,0x30
  if (version < 2 || version > 4)
   22af0:	37f9                	c.addiw	a5,-2
   22af2:	17c2                	c.slli	a5,0x30
   22af4:	93c1                	c.srli	a5,0x30
   22af6:	4709                	c.li	a4,2
   22af8:	00f76d63          	bltu	a4,a5,22b12 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4ec>
  section_length header_length = cur.offset();
   22afc:	0028                	c.addi4spn	a0,sp,8
   22afe:	d60f80ef          	jal	ra,1b05e <dwarf::cursor::offset()>
   22b02:	a069                	c.j	22b8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x566>
        val = (val << 8) | (uint64_t)p[i];
   22b04:	00074783          	lbu	a5,0(a4)
   22b08:	07a2                	c.slli	a5,0x8
   22b0a:	00174683          	lbu	a3,1(a4)
   22b0e:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   22b10:	bfd9                	c.j	22ae6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c0>
                       std::to_string(version));
   22b12:	4541                	c.li	a0,16
   22b14:	90df30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   22b18:	892a                	c.mv	s2,a0
   22b1a:	85a6                	c.mv	a1,s1
   22b1c:	0284                	c.addi4spn	s1,sp,320
   22b1e:	8526                	c.mv	a0,s1
   22b20:	00017317          	auipc	t1,0x17
   22b24:	97033303          	ld	t1,-1680(t1) # 39490 <std::__cxx11::to_string(int)@@Base+0x1fcfc>
   22b28:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   22b2a:	0000b617          	auipc	a2,0xb
   22b2e:	76660613          	addi	a2,a2,1894 # 2e290 <typeinfo name for dwarf::expr_context+0xc0>
   22b32:	4581                	c.li	a1,0
   22b34:	8526                	c.mv	a0,s1
   22b36:	85bf30ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   22b3a:	85aa                	c.mv	a1,a0
   22b3c:	1204                	c.addi4spn	s1,sp,288
   22b3e:	8526                	c.mv	a0,s1
   22b40:	931f30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   22b44:	85a6                	c.mv	a1,s1
   22b46:	854a                	c.mv	a0,s2
   22b48:	a59f30ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   22b4c:	00017797          	auipc	a5,0x17
   22b50:	a0c7b783          	ld	a5,-1524(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   22b54:	07c1                	c.addi	a5,16
   22b56:	00f93023          	sd	a5,0(s2)
      { return _M_dataplus._M_p; }
   22b5a:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   22b5c:	1a1c                	c.addi4spn	a5,sp,304
   22b5e:	00f50463          	beq	a0,a5,22b66 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x540>
   22b62:	9aff30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22b66:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22b68:	0a9c                	c.addi4spn	a5,sp,336
   22b6a:	00f50463          	beq	a0,a5,22b72 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54c>
   22b6e:	9a3f30ef          	jal	ra,16510 <operator delete(void*)@plt>
   22b72:	00017617          	auipc	a2,0x17
   22b76:	80e63603          	ld	a2,-2034(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   22b7a:	00016597          	auipc	a1,0x16
   22b7e:	7365b583          	ld	a1,1846(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   22b82:	854a                	c.mv	a0,s2
   22b84:	b3df30ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   22b88:	84aa                	c.mv	s1,a0
   22b8a:	a9ed                	c.j	23084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
  section_offset get_section_offset() const { return pos - sec->begin; }
   22b8c:	6762                	c.ldsp	a4,24(sp)
      { return _M_ptr; }
   22b8e:	66a2                	c.ldsp	a3,8(sp)
   22b90:	00043903          	ld	s2,0(s0)
   22b94:	669c                	c.ld	a5,8(a3)
   22b96:	40f707b3          	sub	a5,a4,a5
  m->program_offset = cur.get_section_offset() + header_length;
   22b9a:	97aa                	c.add	a5,a0
   22b9c:	00f93823          	sd	a5,16(s2)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22ba0:	6a9c                	c.ld	a5,16(a3)
   22ba2:	00f76563          	bltu	a4,a5,22bac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x586>
      underflow();
   22ba6:	0028                	c.addi4spn	a0,sp,8
   22ba8:	f91f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22bac:	67e2                	c.ldsp	a5,24(sp)
   22bae:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   22bb0:	4f54                	c.lw	a3,28(a4)
   22bb2:	6c068763          	beq	a3,zero,23280 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc5a>
        val = (val << 8) | (uint64_t)p[i];
   22bb6:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22bba:	a5e9                	c.j	23284 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc5e>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   22bbc:	6b18                	c.ld	a4,16(a4)
   22bbe:	00e7e563          	bltu	a5,a4,22bc8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5a2>
      underflow();
   22bc2:	0028                	c.addi4spn	a0,sp,8
   22bc4:	f75f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   22bc8:	67e2                	c.ldsp	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   22bca:	6722                	c.ldsp	a4,8(sp)
   22bcc:	4f58                	c.lw	a4,28(a4)
   22bce:	68070463          	beq	a4,zero,23256 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc30>
        val = (val << 8) | (uint64_t)p[i];
   22bd2:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22bd6:	a551                	c.j	2325a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc34>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   22bd8:	00017797          	auipc	a5,0x17
   22bdc:	9807b783          	ld	a5,-1664(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   22be0:	07c1                	c.addi	a5,16
   22be2:	00f93023          	sd	a5,0(s2)
                       " be 0 in line number table");
   22be6:	00016617          	auipc	a2,0x16
   22bea:	79a63603          	ld	a2,1946(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   22bee:	00016597          	auipc	a1,0x16
   22bf2:	6c25b583          	ld	a1,1730(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   22bf6:	854a                	c.mv	a0,s2
   22bf8:	ac9f30ef          	jal	ra,166c0 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   22bfc:	67e2                	c.ldsp	a5,24(sp)
   22bfe:	66a2                	c.ldsp	a3,8(sp)
    if (sec->ord == byte_order::lsb) {
   22c00:	4ed8                	c.lw	a4,28(a3)
   22c02:	62070a63          	beq	a4,zero,23236 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc10>
        val = (val << 8) | (uint64_t)p[i];
   22c06:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22c0a:	ad05                	c.j	2323a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc14>
    const unsigned char *p = (const unsigned char *)pos;
   22c0c:	67e2                	c.ldsp	a5,24(sp)
   22c0e:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   22c10:	4f54                	c.lw	a3,28(a4)
   22c12:	60068463          	beq	a3,zero,2321a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf4>
        val = (val << 8) | (uint64_t)p[i];
   22c16:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22c1a:	a511                	c.j	2321e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbf8>
    const unsigned char *p = (const unsigned char *)pos;
   22c1c:	67e2                	c.ldsp	a5,24(sp)
   22c1e:	6722                	c.ldsp	a4,8(sp)
    if (sec->ord == byte_order::lsb) {
   22c20:	4f54                	c.lw	a3,28(a4)
   22c22:	5c068a63          	beq	a3,zero,231f6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd0>
        val = (val << 8) | (uint64_t)p[i];
   22c26:	0007c683          	lbu	a3,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22c2a:	abc1                	c.j	231fa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbd4>
    throw format_error("line_range cannot be 0 in line number table");
   22c2c:	4541                	c.li	a0,16
   22c2e:	ff2f30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   22c32:	892a                	c.mv	s2,a0
   22c34:	0000b597          	auipc	a1,0xb
   22c38:	6cc58593          	addi	a1,a1,1740 # 2e300 <typeinfo name for dwarf::expr_context+0x130>
   22c3c:	b35f30ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   22c40:	00017797          	auipc	a5,0x17
   22c44:	9187b783          	ld	a5,-1768(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   22c48:	07c1                	c.addi	a5,16
   22c4a:	00f93023          	sd	a5,0(s2)
   22c4e:	00016617          	auipc	a2,0x16
   22c52:	73263603          	ld	a2,1842(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   22c56:	00016597          	auipc	a1,0x16
   22c5a:	65a5b583          	ld	a1,1626(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   22c5e:	854a                	c.mv	a0,s2
   22c60:	a61f30ef          	jal	ra,166c0 <__cxa_throw@plt>
    const unsigned char *p = (const unsigned char *)pos;
   22c64:	67e2                	c.ldsp	a5,24(sp)
    if (sec->ord == byte_order::lsb) {
   22c66:	6722                	c.ldsp	a4,8(sp)
   22c68:	4f58                	c.lw	a4,28(a4)
   22c6a:	54070063          	beq	a4,zero,231aa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb84>
        val = (val << 8) | (uint64_t)p[i];
   22c6e:	0007c703          	lbu	a4,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   22c72:	ab35                	c.j	231ae <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb88>
	  _M_default_append(__new_size - size());
   22c74:	40b785b3          	sub	a1,a5,a1
   22c78:	02050513          	addi	a0,a0,32
   22c7c:	00017317          	auipc	t1,0x17
   22c80:	85433303          	ld	t1,-1964(t1) # 394d0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)@@Base+0x15082>
   22c84:	9302                	c.jalr	t1
   22c86:	a3b9                	c.j	231d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
    const unsigned char *p = (const unsigned char *)pos;
   22c88:	66e2                	c.ldsp	a3,24(sp)
    if (sec->ord == byte_order::lsb) {
   22c8a:	67a2                	c.ldsp	a5,8(sp)
   22c8c:	4fdc                	c.lw	a5,28(a5)
   22c8e:	4c078d63          	beq	a5,zero,23168 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb42>
        val = (val << 8) | (uint64_t)p[i];
   22c92:	0006c703          	lbu	a4,0(a3)
      for (unsigned i = 0; i < sizeof(T); i++)
   22c96:	a9d9                	c.j	2316c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb46>
                         std::to_string(i) + ", got " + std::to_string(length));
   22c98:	4541                	c.li	a0,16
   22c9a:	f86f30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   22c9e:	89aa                	c.mv	s3,a0
      throw format_error("expected " + std::to_string(opcode_lengths[i]) +
   22ca0:	85da                	c.mv	a1,s6
   22ca2:	10010a13          	addi	s4,sp,256
   22ca6:	8552                	c.mv	a0,s4
   22ca8:	00016317          	auipc	t1,0x16
   22cac:	7e833303          	ld	t1,2024(t1) # 39490 <std::__cxx11::to_string(int)@@Base+0x1fcfc>
   22cb0:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   22cb2:	0000b617          	auipc	a2,0xb
   22cb6:	67e60613          	addi	a2,a2,1662 # 2e330 <typeinfo name for dwarf::expr_context+0x160>
   22cba:	4581                	c.li	a1,0
   22cbc:	8552                	c.mv	a0,s4
   22cbe:	ed2f30ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   22cc2:	85aa                	c.mv	a1,a0
   22cc4:	0e010a13          	addi	s4,sp,224
   22cc8:	8552                	c.mv	a0,s4
   22cca:	fa6f30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   22cce:	0000b597          	auipc	a1,0xb
   22cd2:	67258593          	addi	a1,a1,1650 # 2e340 <typeinfo name for dwarf::expr_context+0x170>
   22cd6:	8552                	c.mv	a0,s4
   22cd8:	ac9f30ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   22cdc:	85aa                	c.mv	a1,a0
   22cde:	0c010a13          	addi	s4,sp,192
   22ce2:	8552                	c.mv	a0,s4
   22ce4:	f8cf30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   22ce8:	0009059b          	addiw	a1,s2,0
   22cec:	12010913          	addi	s2,sp,288
   22cf0:	854a                	c.mv	a0,s2
   22cf2:	00016317          	auipc	t1,0x16
   22cf6:	7fe33303          	ld	t1,2046(t1) # 394f0 <std::__cxx11::to_string(unsigned int)@@Base+0x151ce>
   22cfa:	9302                	c.jalr	t1
                         " arguments for line number opcode " +
   22cfc:	864a                	c.mv	a2,s2
   22cfe:	85d2                	c.mv	a1,s4
   22d00:	1108                	c.addi4spn	a0,sp,160
   22d02:	00016317          	auipc	t1,0x16
   22d06:	6be33303          	ld	t1,1726(t1) # 393c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x15054>
   22d0a:	9302                	c.jalr	t1
   22d0c:	0000b597          	auipc	a1,0xb
   22d10:	65c58593          	addi	a1,a1,1628 # 2e368 <typeinfo name for dwarf::expr_context+0x198>
   22d14:	1108                	c.addi4spn	a0,sp,160
   22d16:	a8bf30ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   22d1a:	85aa                	c.mv	a1,a0
   22d1c:	08010913          	addi	s2,sp,128
   22d20:	854a                	c.mv	a0,s2
   22d22:	f4ef30ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   22d26:	85a6                	c.mv	a1,s1
   22d28:	0284                	c.addi4spn	s1,sp,320
   22d2a:	8526                	c.mv	a0,s1
   22d2c:	00016317          	auipc	t1,0x16
   22d30:	76433303          	ld	t1,1892(t1) # 39490 <std::__cxx11::to_string(int)@@Base+0x1fcfc>
   22d34:	9302                	c.jalr	t1
   22d36:	8626                	c.mv	a2,s1
   22d38:	85ca                	c.mv	a1,s2
   22d3a:	1088                	c.addi4spn	a0,sp,96
   22d3c:	00016317          	auipc	t1,0x16
   22d40:	68433303          	ld	t1,1668(t1) # 393c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x15054>
   22d44:	9302                	c.jalr	t1
      : std::runtime_error(what_arg) {}
   22d46:	108c                	c.addi4spn	a1,sp,96
   22d48:	854e                	c.mv	a0,s3
   22d4a:	857f30ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   22d4e:	00017797          	auipc	a5,0x17
   22d52:	80a7b783          	ld	a5,-2038(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   22d56:	07c1                	c.addi	a5,16
   22d58:	00f9b023          	sd	a5,0(s3)
      { return _M_dataplus._M_p; }
   22d5c:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   22d5e:	189c                	c.addi4spn	a5,sp,112
   22d60:	00f50463          	beq	a0,a5,22d68 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x742>
   22d64:	facf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22d68:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22d6a:	0a9c                	c.addi4spn	a5,sp,336
   22d6c:	00f50463          	beq	a0,a5,22d74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x74e>
   22d70:	fa0f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22d74:	650a                	c.ldsp	a0,128(sp)
	if (!_M_is_local())
   22d76:	091c                	c.addi4spn	a5,sp,144
   22d78:	00f50463          	beq	a0,a5,22d80 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x75a>
   22d7c:	f94f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22d80:	750a                	c.ldsp	a0,160(sp)
	if (!_M_is_local())
   22d82:	191c                	c.addi4spn	a5,sp,176
   22d84:	00f50463          	beq	a0,a5,22d8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x766>
   22d88:	f88f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22d8c:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   22d8e:	1a1c                	c.addi4spn	a5,sp,304
   22d90:	00f50463          	beq	a0,a5,22d98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x772>
   22d94:	f7cf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22d98:	650e                	c.ldsp	a0,192(sp)
	if (!_M_is_local())
   22d9a:	099c                	c.addi4spn	a5,sp,208
   22d9c:	00f50463          	beq	a0,a5,22da4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x77e>
   22da0:	f70f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22da4:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   22da6:	199c                	c.addi4spn	a5,sp,240
   22da8:	00f50463          	beq	a0,a5,22db0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x78a>
   22dac:	f64f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22db0:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   22db2:	0a1c                	c.addi4spn	a5,sp,272
   22db4:	00f50463          	beq	a0,a5,22dbc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x796>
   22db8:	f58f30ef          	jal	ra,16510 <operator delete(void*)@plt>
   22dbc:	00016617          	auipc	a2,0x16
   22dc0:	5c463603          	ld	a2,1476(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   22dc4:	00016597          	auipc	a1,0x16
   22dc8:	4ec5b583          	ld	a1,1260(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   22dcc:	854e                	c.mv	a0,s3
   22dce:	8f3f30ef          	jal	ra,166c0 <__cxa_throw@plt>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22dd2:	0a1c                	c.addi4spn	a5,sp,272
   22dd4:	e23e                	c.sdsp	a5,256(sp)
      { _M_string_length = __length; }
   22dd6:	e602                	c.sdsp	zero,264(sp)
	__c1 = __c2;
   22dd8:	10010823          	sb	zero,272(sp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22ddc:	60a8                	c.ld	a0,64(s1)
   22dde:	64bc                	c.ld	a5,72(s1)
   22de0:	04f50563          	beq	a0,a5,22e2a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x804>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   22de4:	01050793          	addi	a5,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22de8:	e11c                	c.sd	a5,0(a0)
      { return _M_dataplus._M_p; }
   22dea:	7582                	c.ldsp	a1,32(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22dec:	4681                	c.li	a3,0
   22dee:	7622                	c.ldsp	a2,40(sp)
   22df0:	962e                	c.add	a2,a1
   22df2:	00016317          	auipc	t1,0x16
   22df6:	51e33303          	ld	t1,1310(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   22dfa:	9302                	c.jalr	t1
	    ++this->_M_impl._M_finish;
   22dfc:	60bc                	c.ld	a5,64(s1)
   22dfe:	02078793          	addi	a5,a5,32
   22e02:	e0bc                	c.sd	a5,64(s1)
    cur.string(incdir);
   22e04:	10010a13          	addi	s4,sp,256
   22e08:	00810b13          	addi	s6,sp,8
    if (incdir.back() != '/')
   22e0c:	02f00913          	addi	s2,zero,47
	return _M_is_local() ? size_type(_S_local_capacity)
   22e10:	11010d13          	addi	s10,sp,272
      m->include_directories.push_back(comp_dir + incdir);
   22e14:	14010a93          	addi	s5,sp,320
   22e18:	02010b93          	addi	s7,sp,32
   22e1c:	00016c17          	auipc	s8,0x16
   22e20:	7acc3c03          	ld	s8,1964(s8) # 395c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1501c>
	if (!_M_is_local())
   22e24:	15010c93          	addi	s9,sp,336
   22e28:	a055                	c.j	22ecc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
	  _M_realloc_insert(end(), __x);
   22e2a:	1010                	c.addi4spn	a2,sp,32
   22e2c:	85aa                	c.mv	a1,a0
   22e2e:	03848513          	addi	a0,s1,56
   22e32:	00016317          	auipc	t1,0x16
   22e36:	62633303          	ld	t1,1574(t1) # 39458 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14e3e>
   22e3a:	9302                	c.jalr	t1
   22e3c:	b7e1                	c.j	22e04 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7de>
      { return _M_string_length; }
   22e3e:	64b2                	c.ldsp	s1,264(sp)
    if (incdir.empty())
   22e40:	c8d9                	c.beqz	s1,22ed6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8b0>
      { return _M_dataplus._M_p; }
   22e42:	6792                	c.ldsp	a5,256(sp)
    if (incdir.back() != '/')
   22e44:	00978733          	add	a4,a5,s1
   22e48:	fff74703          	lbu	a4,-1(a4)
   22e4c:	01271f63          	bne	a4,s2,22e6a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x844>
    if (incdir[0] == '/')
   22e50:	6792                	c.ldsp	a5,256(sp)
   22e52:	0007c783          	lbu	a5,0(a5)
   22e56:	05278563          	beq	a5,s2,22ea0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x87a>
      m->include_directories.push_back(comp_dir + incdir);
   22e5a:	6004                	c.ld	s1,0(s0)
   22e5c:	03848493          	addi	s1,s1,56
   22e60:	8652                	c.mv	a2,s4
   22e62:	85de                	c.mv	a1,s7
   22e64:	8556                	c.mv	a0,s5
   22e66:	9c02                	c.jalr	s8
   22e68:	a0b1                	c.j	22eb4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x88e>
	if (__size + 1 > this->capacity())
   22e6a:	00148d93          	addi	s11,s1,1
	return _M_is_local() ? size_type(_S_local_capacity)
   22e6e:	01a78f63          	beq	a5,s10,22e8c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x866>
   22e72:	67d2                	c.ldsp	a5,272(sp)
	if (__size + 1 > this->capacity())
   22e74:	01b7ee63          	bltu	a5,s11,22e90 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86a>
   22e78:	6792                	c.ldsp	a5,256(sp)
   22e7a:	97a6                	c.add	a5,s1
   22e7c:	01278023          	sb	s2,0(a5)
      { _M_string_length = __length; }
   22e80:	e66e                	c.sdsp	s11,264(sp)
   22e82:	6792                	c.ldsp	a5,256(sp)
   22e84:	97ee                	c.add	a5,s11
   22e86:	00078023          	sb	zero,0(a5)
      }
   22e8a:	b7d9                	c.j	22e50 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x82a>
	return _M_is_local() ? size_type(_S_local_capacity)
   22e8c:	47bd                	c.li	a5,15
   22e8e:	b7dd                	c.j	22e74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84e>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
   22e90:	4705                	c.li	a4,1
   22e92:	4681                	c.li	a3,0
   22e94:	4601                	c.li	a2,0
   22e96:	85a6                	c.mv	a1,s1
   22e98:	8552                	c.mv	a0,s4
   22e9a:	897f30ef          	jal	ra,16730 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)@plt>
   22e9e:	bfe9                	c.j	22e78 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x852>
      m->include_directories.push_back(move(incdir));
   22ea0:	6008                	c.ld	a0,0(s0)
      { emplace_back(std::move(__x)); }
   22ea2:	85d2                	c.mv	a1,s4
   22ea4:	03850513          	addi	a0,a0,56
   22ea8:	00016317          	auipc	t1,0x16
   22eac:	71033303          	ld	t1,1808(t1) # 395b8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14c70>
   22eb0:	9302                	c.jalr	t1
   22eb2:	a829                	c.j	22ecc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
   22eb4:	85d6                	c.mv	a1,s5
   22eb6:	8526                	c.mv	a0,s1
   22eb8:	00016317          	auipc	t1,0x16
   22ebc:	70033303          	ld	t1,1792(t1) # 395b8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14c70>
   22ec0:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   22ec2:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22ec4:	01950463          	beq	a0,s9,22ecc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8a6>
   22ec8:	e48f30ef          	jal	ra,16510 <operator delete(void*)@plt>
    cur.string(incdir);
   22ecc:	85d2                	c.mv	a1,s4
   22ece:	855a                	c.mv	a0,s6
   22ed0:	c39f70ef          	jal	ra,1ab08 <dwarf::cursor::string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
   22ed4:	b7ad                	c.j	22e3e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x818>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22ed6:	1a1c                	c.addi4spn	a5,sp,304
   22ed8:	f23e                	c.sdsp	a5,288(sp)
      { _M_string_length = __length; }
   22eda:	f602                	c.sdsp	zero,296(sp)
   22edc:	12010823          	sb	zero,304(sp)
      { return _M_string_length; }
   22ee0:	0089b603          	ld	a2,8(s3)
  if (!cu_name.empty() && cu_name[0] == '/')
   22ee4:	ca09                	c.beqz	a2,22ef6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8d0>
      { return _M_dataplus._M_p; }
   22ee6:	0009b583          	ld	a1,0(s3)
   22eea:	0005c703          	lbu	a4,0(a1)
   22eee:	02f00793          	addi	a5,zero,47
   22ef2:	00f70e63          	beq	a4,a5,22f0e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8e8>
    m->file_names.emplace_back(comp_dir + cu_name);
   22ef6:	6004                	c.ld	s1,0(s0)
   22ef8:	05048493          	addi	s1,s1,80
   22efc:	864e                	c.mv	a2,s3
   22efe:	100c                	c.addi4spn	a1,sp,32
   22f00:	0288                	c.addi4spn	a0,sp,320
   22f02:	00016317          	auipc	t1,0x16
   22f06:	6c633303          	ld	t1,1734(t1) # 395c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x1501c>
   22f0a:	9302                	c.jalr	t1
   22f0c:	a895                	c.j	22f80 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x95a>
   22f0e:	6004                	c.ld	s1,0(s0)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   22f10:	0584b903          	ld	s2,88(s1)
   22f14:	70bc                	c.ld	a5,96(s1)
   22f16:	04f90b63          	beq	s2,a5,22f6c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x946>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   22f1a:	0a9c                	c.addi4spn	a5,sp,336
   22f1c:	e2be                	c.sdsp	a5,320(sp)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   22f1e:	4681                	c.li	a3,0
   22f20:	962e                	c.add	a2,a1
   22f22:	0288                	c.addi4spn	a0,sp,320
   22f24:	00016317          	auipc	t1,0x16
   22f28:	3ec33303          	ld	t1,1004(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   22f2c:	9302                	c.jalr	t1
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   22f2e:	4681                	c.li	a3,0
   22f30:	4601                	c.li	a2,0
   22f32:	028c                	c.addi4spn	a1,sp,320
   22f34:	854a                	c.mv	a0,s2
   22f36:	aa4ff0ef          	jal	ra,221da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   22f3a:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22f3c:	0a9c                	c.addi4spn	a5,sp,336
   22f3e:	00f50463          	beq	a0,a5,22f46 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x920>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   22f42:	dcef30ef          	jal	ra,16510 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   22f46:	6cbc                	c.ld	a5,88(s1)
   22f48:	03078793          	addi	a5,a5,48
   22f4c:	ecbc                	c.sd	a5,88(s1)
   22f4e:	a0b1                	c.j	22f9a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
      { return _M_dataplus._M_p; }
   22f50:	84aa                	c.mv	s1,a0
   22f52:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22f54:	0a9c                	c.addi4spn	a5,sp,336
   22f56:	00f50463          	beq	a0,a5,22f5e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   22f5a:	db6f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22f5e:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   22f60:	1a1c                	c.addi4spn	a5,sp,304
   22f62:	1cf50d63          	beq	a0,a5,2313c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   22f66:	daaf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   22f6a:	aac9                	c.j	2313c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   22f6c:	864e                	c.mv	a2,s3
   22f6e:	85ca                	c.mv	a1,s2
   22f70:	05048513          	addi	a0,s1,80
   22f74:	00016317          	auipc	t1,0x16
   22f78:	4cc33303          	ld	t1,1228(t1) # 39440 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@@Base+0x14a4a>
   22f7c:	9302                	c.jalr	t1
   22f7e:	a831                	c.j	22f9a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
   22f80:	028c                	c.addi4spn	a1,sp,320
   22f82:	8526                	c.mv	a0,s1
   22f84:	00016317          	auipc	t1,0x16
   22f88:	60c33303          	ld	t1,1548(t1) # 39590 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14708>
   22f8c:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   22f8e:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   22f90:	0a9c                	c.addi4spn	a5,sp,336
   22f92:	00f50463          	beq	a0,a5,22f9a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x974>
   22f96:	d7af30ef          	jal	ra,16510 <operator delete(void*)@plt>
  while (m->read_file_entry(&cur, true))
   22f9a:	0024                	c.addi4spn	s1,sp,8
   22f9c:	a011                	c.j	22fa0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x97a>
   22f9e:	c519                	c.beqz	a0,22fac <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x986>
   22fa0:	4605                	c.li	a2,1
   22fa2:	85a6                	c.mv	a1,s1
   22fa4:	6008                	c.ld	a0,0(s0)
   22fa6:	c0aff0ef          	jal	ra,223b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
   22faa:	bfd5                	c.j	22f9e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x978>
      { return _M_dataplus._M_p; }
   22fac:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   22fae:	1a1c                	c.addi4spn	a5,sp,304
   22fb0:	00f50463          	beq	a0,a5,22fb8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x992>
   22fb4:	d5cf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22fb8:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   22fba:	0a1c                	c.addi4spn	a5,sp,272
   22fbc:	00f50463          	beq	a0,a5,22fc4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x99e>
   22fc0:	d50f30ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   22fc4:	6442                	c.ldsp	s0,16(sp)
   22fc6:	cc19                	c.beqz	s0,22fe4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
    if (__is_single_threaded())
   22fc8:	00016797          	auipc	a5,0x16
   22fcc:	4b87b783          	ld	a5,1208(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   22fd0:	0007c783          	lbu	a5,0(a5)
   22fd4:	c3b9                	c.beqz	a5,2301a <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9f4>
    _Atomic_word __result = *__mem;
   22fd6:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   22fd8:	fff5079b          	addiw	a5,a0,-1
   22fdc:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   22fde:	4785                	c.li	a5,1
   22fe0:	04f50363          	beq	a0,a5,23026 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa00>
      { return _M_dataplus._M_p; }
   22fe4:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   22fe6:	089c                	c.addi4spn	a5,sp,80
   22fe8:	00f50463          	beq	a0,a5,22ff0 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9ca>
   22fec:	d24f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   22ff0:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   22ff2:	181c                	c.addi4spn	a5,sp,48
   22ff4:	00f50463          	beq	a0,a5,22ffc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d6>
   22ff8:	d18f30ef          	jal	ra,16510 <operator delete(void*)@plt>
}
   22ffc:	60fe                	c.ldsp	ra,472(sp)
   22ffe:	645e                	c.ldsp	s0,464(sp)
   23000:	64be                	c.ldsp	s1,456(sp)
   23002:	691e                	c.ldsp	s2,448(sp)
   23004:	79fa                	c.ldsp	s3,440(sp)
   23006:	7a5a                	c.ldsp	s4,432(sp)
   23008:	7aba                	c.ldsp	s5,424(sp)
   2300a:	7b1a                	c.ldsp	s6,416(sp)
   2300c:	6bfa                	c.ldsp	s7,408(sp)
   2300e:	6c5a                	c.ldsp	s8,400(sp)
   23010:	6cba                	c.ldsp	s9,392(sp)
   23012:	6d1a                	c.ldsp	s10,384(sp)
   23014:	7df6                	c.ldsp	s11,376(sp)
   23016:	613d                	c.addi16sp	sp,480
   23018:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2301a:	55fd                	c.li	a1,-1
   2301c:	03040513          	addi	a0,s0,48
   23020:	b60f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23024:	bf6d                	c.j	22fde <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9b8>
	_M_dispose();
   23026:	601c                	c.ld	a5,0(s0)
   23028:	6b9c                	c.ld	a5,16(a5)
   2302a:	8522                	c.mv	a0,s0
   2302c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2302e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23032:	00016797          	auipc	a5,0x16
   23036:	44e7b783          	ld	a5,1102(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2303a:	0007c783          	lbu	a5,0(a5)
   2303e:	cf89                	c.beqz	a5,23058 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa32>
    _Atomic_word __result = *__mem;
   23040:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   23042:	fff5079b          	addiw	a5,a0,-1
   23046:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   23048:	4785                	c.li	a5,1
   2304a:	f8f51de3          	bne	a0,a5,22fe4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
	    _M_destroy();
   2304e:	601c                	c.ld	a5,0(s0)
   23050:	6f9c                	c.ld	a5,24(a5)
   23052:	8522                	c.mv	a0,s0
   23054:	9782                	c.jalr	a5
   23056:	b779                	c.j	22fe4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9be>
      return __exchange_and_add(__mem, __val);
   23058:	55fd                	c.li	a1,-1
   2305a:	03440513          	addi	a0,s0,52
   2305e:	b22f30ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23062:	b7dd                	c.j	23048 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa22>
      { return _M_dataplus._M_p; }
   23064:	84aa                	c.mv	s1,a0
   23066:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   23068:	1a1c                	c.addi4spn	a5,sp,304
   2306a:	00f50463          	beq	a0,a5,23072 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
   2306e:	ca2f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23072:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23074:	0a9c                	c.addi4spn	a5,sp,336
   23076:	00f50463          	beq	a0,a5,2307e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa58>
   2307a:	c96f30ef          	jal	ra,16510 <operator delete(void*)@plt>
                       std::to_string(version));
   2307e:	854a                	c.mv	a0,s2
   23080:	c50f30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   23084:	6542                	c.ldsp	a0,16(sp)
   23086:	ea050563          	beq	a0,zero,22730 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
	  _M_pi->_M_release();
   2308a:	00016317          	auipc	t1,0x16
   2308e:	33e33303          	ld	t1,830(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   23092:	9302                	c.jalr	t1
   23094:	e9cff06f          	jal	zero,22730 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
      { return _M_dataplus._M_p; }
   23098:	84aa                	c.mv	s1,a0
   2309a:	bfe1                	c.j	23072 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4c>
                       " be 0 in line number table");
   2309c:	84aa                	c.mv	s1,a0
   2309e:	854a                	c.mv	a0,s2
   230a0:	c30f30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   230a4:	b7c5                	c.j	23084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
    throw format_error("line_range cannot be 0 in line number table");
   230a6:	84aa                	c.mv	s1,a0
   230a8:	854a                	c.mv	a0,s2
   230aa:	c26f30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   230ae:	bfd9                	c.j	23084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
   230b0:	84aa                	c.mv	s1,a0
   230b2:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   230b4:	189c                	c.addi4spn	a5,sp,112
   230b6:	00f50463          	beq	a0,a5,230be <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa98>
   230ba:	c56f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230be:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   230c0:	0a9c                	c.addi4spn	a5,sp,336
   230c2:	00f50463          	beq	a0,a5,230ca <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xaa4>
   230c6:	c4af30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230ca:	650a                	c.ldsp	a0,128(sp)
	if (!_M_is_local())
   230cc:	091c                	c.addi4spn	a5,sp,144
   230ce:	00f50463          	beq	a0,a5,230d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xab0>
   230d2:	c3ef30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230d6:	750a                	c.ldsp	a0,160(sp)
	if (!_M_is_local())
   230d8:	191c                	c.addi4spn	a5,sp,176
   230da:	00f50463          	beq	a0,a5,230e2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xabc>
   230de:	c32f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230e2:	7512                	c.ldsp	a0,288(sp)
	if (!_M_is_local())
   230e4:	1a1c                	c.addi4spn	a5,sp,304
   230e6:	00f50463          	beq	a0,a5,230ee <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xac8>
   230ea:	c26f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230ee:	650e                	c.ldsp	a0,192(sp)
	if (!_M_is_local())
   230f0:	099c                	c.addi4spn	a5,sp,208
   230f2:	00f50463          	beq	a0,a5,230fa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xad4>
   230f6:	c1af30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   230fa:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   230fc:	199c                	c.addi4spn	a5,sp,240
   230fe:	00f50463          	beq	a0,a5,23106 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
   23102:	c0ef30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23106:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   23108:	0a1c                	c.addi4spn	a5,sp,272
   2310a:	00f50463          	beq	a0,a5,23112 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xaec>
   2310e:	c02f30ef          	jal	ra,16510 <operator delete(void*)@plt>
                         std::to_string(i) + ", got " + std::to_string(length));
   23112:	854e                	c.mv	a0,s3
   23114:	bbcf30ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   23118:	b7b5                	c.j	23084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
      { return _M_dataplus._M_p; }
   2311a:	84aa                	c.mv	s1,a0
   2311c:	b74d                	c.j	230be <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa98>
   2311e:	84aa                	c.mv	s1,a0
   23120:	bf5d                	c.j	230d6 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xab0>
   23122:	84aa                	c.mv	s1,a0
   23124:	bf7d                	c.j	230e2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xabc>
   23126:	84aa                	c.mv	s1,a0
   23128:	bfc9                	c.j	230fa <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xad4>
   2312a:	84aa                	c.mv	s1,a0
   2312c:	bfe9                	c.j	23106 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xae0>
   2312e:	84aa                	c.mv	s1,a0
   23130:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   23132:	0a9c                	c.addi4spn	a5,sp,336
   23134:	00f50463          	beq	a0,a5,2313c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23138:	bd8f30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2313c:	6512                	c.ldsp	a0,256(sp)
	if (!_M_is_local())
   2313e:	0a1c                	c.addi4spn	a5,sp,272
   23140:	f4f502e3          	beq	a0,a5,23084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
   23144:	bccf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23148:	bf35                	c.j	23084 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa5e>
      { return _M_dataplus._M_p; }
   2314a:	84aa                	c.mv	s1,a0
   2314c:	6516                	c.ldsp	a0,320(sp)
	if (!_M_is_local())
   2314e:	0a9c                	c.addi4spn	a5,sp,336
   23150:	e0f507e3          	beq	a0,a5,22f5e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   23154:	bbcf30ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   23158:	b519                	c.j	22f5e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
      { return _M_dataplus._M_p; }
   2315a:	84aa                	c.mv	s1,a0
   2315c:	b509                	c.j	22f5e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x938>
   2315e:	84aa                	c.mv	s1,a0
   23160:	bff1                	c.j	2313c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb16>
   23162:	84aa                	c.mv	s1,a0
   23164:	dccff06f          	jal	zero,22730 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10a>
        val |= ((uint64_t)p[i]) << (i * 8);
   23168:	0006c703          	lbu	a4,0(a3)
    pos += sizeof(T);
   2316c:	0685                	c.addi	a3,1
   2316e:	ec36                	c.sdsp	a3,24(sp)
    return (T)val;
   23170:	0ff77793          	andi	a5,a4,255
    if (length != opcode_lengths[i])
   23174:	84ba                	c.mv	s1,a4
   23176:	000a2b03          	lw	s6,0(s4)
   2317a:	b1671fe3          	bne	a4,s6,22c98 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x672>
      { return _M_ptr; }
   2317e:	6004                	c.ld	s1,0(s0)
    m->standard_opcode_lengths[i] = length;
   23180:	7098                	c.ld	a4,32(s1)
   23182:	974a                	c.add	a4,s2
   23184:	00f70023          	sb	a5,0(a4)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   23188:	0905                	c.addi	s2,1
   2318a:	0a11                	c.addi	s4,4
   2318c:	01d4c703          	lbu	a4,29(s1)
   23190:	0009079b          	addiw	a5,s2,0
   23194:	c2e7ffe3          	bgeu	a5,a4,22dd2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7ac>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23198:	67a2                	c.ldsp	a5,8(sp)
   2319a:	6b98                	c.ld	a4,16(a5)
   2319c:	67e2                	c.ldsp	a5,24(sp)
   2319e:	aee7e5e3          	bltu	a5,a4,22c88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x662>
      underflow();
   231a2:	8556                	c.mv	a0,s5
   231a4:	995f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   231a8:	b4c5                	c.j	22c88 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x662>
        val |= ((uint64_t)p[i]) << (i * 8);
   231aa:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   231ae:	0785                	c.addi	a5,1
   231b0:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   231b2:	00e48ea3          	sb	a4,29(s1)
   231b6:	6008                	c.ld	a0,0(s0)
  m->standard_opcode_lengths.resize(m->opcode_base);
   231b8:	01d54783          	lbu	a5,29(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   231bc:	7514                	c.ld	a3,40(a0)
   231be:	7118                	c.ld	a4,32(a0)
   231c0:	40e685b3          	sub	a1,a3,a4
	if (__new_size > size())
   231c4:	aaf5e8e3          	bltu	a1,a5,22c74 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64e>
	else if (__new_size < size())
   231c8:	00b7f663          	bgeu	a5,a1,231d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   231cc:	973e                	c.add	a4,a5
	if (size_type __n = this->_M_impl._M_finish - __pos)
   231ce:	00e68363          	beq	a3,a4,231d4 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xbae>
	    this->_M_impl._M_finish = __pos;
   231d2:	f518                	c.sd	a4,40(a0)
   231d4:	6004                	c.ld	s1,0(s0)
	return *(this->_M_impl._M_start + __n);
   231d6:	709c                	c.ld	a5,32(s1)
  m->standard_opcode_lengths[0] = 0;
   231d8:	00078023          	sb	zero,0(a5)
  for (unsigned i = 1; i < m->opcode_base; i++) {
   231dc:	01d4c703          	lbu	a4,29(s1)
   231e0:	4785                	c.li	a5,1
   231e2:	bee7f8e3          	bgeu	a5,a4,22dd2 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7ac>
   231e6:	0000ba17          	auipc	s4,0xb
   231ea:	2aea0a13          	addi	s4,s4,686 # 2e494 <dwarf::opcode_lengths+0x4>
   231ee:	4905                	c.li	s2,1
      underflow();
   231f0:	00810a93          	addi	s5,sp,8
   231f4:	b755                	c.j	23198 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb72>
        val |= ((uint64_t)p[i]) << (i * 8);
   231f6:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   231fa:	0785                	c.addi	a5,1
   231fc:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   231fe:	00d48e23          	sb	a3,28(s1)
   23202:	6004                	c.ld	s1,0(s0)
  if (m->line_range == 0)
   23204:	01c4c683          	lbu	a3,28(s1)
   23208:	a20682e3          	beq	a3,zero,22c2c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x606>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2320c:	6b18                	c.ld	a4,16(a4)
   2320e:	a4e7ebe3          	bltu	a5,a4,22c64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x63e>
      underflow();
   23212:	0028                	c.addi4spn	a0,sp,8
   23214:	925f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   23218:	b4b1                	c.j	22c64 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x63e>
        val |= ((uint64_t)p[i]) << (i * 8);
   2321a:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   2321e:	0785                	c.addi	a5,1
   23220:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23222:	00d48da3          	sb	a3,27(s1)
   23226:	6004                	c.ld	s1,0(s0)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23228:	6b18                	c.ld	a4,16(a4)
   2322a:	9ee7e9e3          	bltu	a5,a4,22c1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f6>
      underflow();
   2322e:	0028                	c.addi4spn	a0,sp,8
   23230:	909f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   23234:	b2e5                	c.j	22c1c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f6>
        val |= ((uint64_t)p[i]) << (i * 8);
   23236:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   2323a:	0785                	c.addi	a5,1
   2323c:	ec3e                	c.sdsp	a5,24(sp)
   2323e:	6004                	c.ld	s1,0(s0)
  m->default_is_stmt = cur.fixed<ubyte>();
   23240:	00e03733          	sltu	a4,zero,a4
   23244:	00e48d23          	sb	a4,26(s1)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23248:	6a98                	c.ld	a4,16(a3)
   2324a:	9ce7e1e3          	bltu	a5,a4,22c0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e6>
      underflow();
   2324e:	0028                	c.addi4spn	a0,sp,8
   23250:	8e9f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   23254:	ba65                	c.j	22c0c <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5e6>
        val |= ((uint64_t)p[i]) << (i * 8);
   23256:	0007c703          	lbu	a4,0(a5)
    pos += sizeof(T);
   2325a:	0785                	c.addi	a5,1
   2325c:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   2325e:	00e90ca3          	sb	a4,25(s2)
  if (m->maximum_operations_per_instruction == 0)
   23262:	601c                	c.ld	a5,0(s0)
   23264:	0197c783          	lbu	a5,25(a5)
   23268:	eb9d                	c.bnez	a5,2329e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc78>
                       " be 0 in line number table");
   2326a:	4541                	c.li	a0,16
   2326c:	9b4f30ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   23270:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23272:	0000b597          	auipc	a1,0xb
   23276:	04658593          	addi	a1,a1,70 # 2e2b8 <typeinfo name for dwarf::expr_context+0xe8>
   2327a:	cf6f30ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2327e:	baa9                	c.j	22bd8 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5b2>
        val |= ((uint64_t)p[i]) << (i * 8);
   23280:	0007c683          	lbu	a3,0(a5)
    pos += sizeof(T);
   23284:	0785                	c.addi	a5,1
   23286:	ec3e                	c.sdsp	a5,24(sp)
    return (T)val;
   23288:	00d90c23          	sb	a3,24(s2)
   2328c:	00043903          	ld	s2,0(s0)
  m->maximum_operations_per_instruction = 1;
   23290:	4685                	c.li	a3,1
   23292:	00d90ca3          	sb	a3,25(s2)
  if (version == 4)
   23296:	2481                	c.addiw	s1,0
   23298:	4691                	c.li	a3,4
   2329a:	92d481e3          	beq	s1,a3,22bbc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x596>
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   2329e:	67a2                	c.ldsp	a5,8(sp)
   232a0:	6b98                	c.ld	a4,16(a5)
   232a2:	67e2                	c.ldsp	a5,24(sp)
   232a4:	94e7ece3          	bltu	a5,a4,22bfc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5d6>
      underflow();
   232a8:	0028                	c.addi4spn	a0,sp,8
   232aa:	88ff70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
   232ae:	b2b9                	c.j	22bfc <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5d6>
struct cursor {
   232b0:	ec56                	c.sdsp	s5,24(sp)
      ~__shared_count() noexcept
   232b2:	ec2ff06f          	jal	zero,22974 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34e>
      : sec(sec), pos(sec->begin + offset) {}
   232b6:	00893a83          	ld	s5,8(s2)
   232ba:	e44a                	c.sdsp	s2,8(sp)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   232bc:	6942                	c.ldsp	s2,16(sp)
	__r._M_pi = _M_pi;
   232be:	e802                	c.sdsp	zero,16(sp)
	if (_M_pi != nullptr)
   232c0:	e8091863          	bne	s2,zero,22950 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x32a>
struct cursor {
   232c4:	ec56                	c.sdsp	s5,24(sp)
      ~__shared_count() noexcept
   232c6:	eccff06f          	jal	zero,22992 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x36c>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   232ca:	e45a                	c.sdsp	s6,8(sp)
      : _M_pi(__r._M_pi)
   232cc:	e802                	c.sdsp	zero,16(sp)
      : sec(sec), pos(sec->begin + offset) {}
   232ce:	008b3783          	ld	a5,8(s6)
   232d2:	97d6                	c.add	a5,s5
   232d4:	ec3e                	c.sdsp	a5,24(sp)
      { return _M_ptr; }
   232d6:	6004                	c.ld	s1,0(s0)
  m->sec = cur.subsection();
   232d8:	002c                	c.addi4spn	a1,sp,8
   232da:	1288                	c.addi4spn	a0,sp,352
   232dc:	bedf70ef          	jal	ra,1aec8 <dwarf::cursor::subsection()>
   232e0:	d9eff06f          	jal	zero,2287e <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x258>
      { _M_dataplus._M_p = __p; }
   232e4:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   232e6:	67b6                	c.ldsp	a5,328(sp)
   232e8:	f43e                	c.sdsp	a5,40(sp)
      { _M_allocated_capacity = __capacity; }
   232ea:	67d6                	c.ldsp	a5,336(sp)
   232ec:	f83e                	c.sdsp	a5,48(sp)
      { _M_dataplus._M_p = __p; }
   232ee:	0a9c                	c.addi4spn	a5,sp,336
   232f0:	e2be                	c.sdsp	a5,320(sp)
   232f2:	c8eff06f          	jal	zero,22780 <dwarf::line_table::line_table(std::shared_ptr<dwarf::section> const&, unsigned long, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x15a>

00000000000232f6 <dwarf::line_table::iterator::step(dwarf::cursor*)>:

  pos = cur.get_section_offset();
  return *this;
}

bool line_table::iterator::step(cursor *cur) {
   232f6:	7135                	c.addi16sp	sp,-160
   232f8:	ed06                	c.sdsp	ra,152(sp)
   232fa:	e922                	c.sdsp	s0,144(sp)
   232fc:	e526                	c.sdsp	s1,136(sp)
   232fe:	e14a                	c.sdsp	s2,128(sp)
   23300:	fcce                	c.sdsp	s3,120(sp)
   23302:	f8d2                	c.sdsp	s4,112(sp)
   23304:	f4d6                	c.sdsp	s5,104(sp)
   23306:	84aa                	c.mv	s1,a0
   23308:	842e                	c.mv	s0,a1
   2330a:	611c                	c.ld	a5,0(a0)
   2330c:	0007b983          	ld	s3,0(a5)
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   23310:	619c                	c.ld	a5,0(a1)
   23312:	6b98                	c.ld	a4,16(a5)
   23314:	699c                	c.ld	a5,16(a1)
   23316:	00e7e563          	bltu	a5,a4,23320 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2a>
      underflow();
   2331a:	852e                	c.mv	a0,a1
   2331c:	81df70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   23320:	681c                	c.ld	a5,16(s0)
   23322:	600c                	c.ld	a1,0(s0)
    if (sec->ord == byte_order::lsb) {
   23324:	4dd8                	c.lw	a4,28(a1)
   23326:	5e070763          	beq	a4,zero,23914 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x61e>
        val = (val << 8) | (uint64_t)p[i];
   2332a:	0007c903          	lbu	s2,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2332e:	a3ed                	c.j	23918 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x622>

  // Read the opcode (DWARF4 section 6.2.3)
  ubyte opcode = cur->fixed<ubyte>();
  if (opcode >= m->opcode_base) {
    // Special opcode (DWARF4 section 6.2.5.1)
    ubyte adjusted_opcode = opcode - m->opcode_base;
   23330:	40e907bb          	subw	a5,s2,a4
   23334:	0ff7f793          	andi	a5,a5,255
    unsigned op_advance = adjusted_opcode / m->line_range;
   23338:	01c9c683          	lbu	a3,28(s3)
    signed line_inc = m->line_base + (signed)adjusted_opcode % m->line_range;
   2333c:	01b98703          	lb	a4,27(s3)
   23340:	02d7f63b          	remuw	a2,a5,a3
   23344:	9f31                	c.addw	a4,a2

    regs.line += line_inc;
   23346:	4cf0                	c.lw	a2,92(s1)
   23348:	9f31                	c.addw	a4,a2
   2334a:	ccf8                	c.sw	a4,92(s1)
    unsigned op_advance = adjusted_opcode / m->line_range;
   2334c:	02d7d7bb          	divuw	a5,a5,a3
    regs.address +=
        m->minimum_instruction_length *
        ((regs.op_index + op_advance) / m->maximum_operations_per_instruction);
   23350:	44b8                	c.lw	a4,72(s1)
   23352:	9fb9                	c.addw	a5,a4
   23354:	0199c703          	lbu	a4,25(s3)
   23358:	02e7d73b          	divuw	a4,a5,a4
        m->minimum_instruction_length *
   2335c:	0189c683          	lbu	a3,24(s3)
   23360:	02d7073b          	mulw	a4,a4,a3
   23364:	1702                	c.slli	a4,0x20
   23366:	9301                	c.srli	a4,0x20
    regs.address +=
   23368:	60b4                	c.ld	a3,64(s1)
   2336a:	9736                	c.add	a4,a3
   2336c:	e0b8                	c.sd	a4,64(s1)
    regs.op_index =
        (regs.op_index + op_advance) % m->maximum_operations_per_instruction;
   2336e:	0199c683          	lbu	a3,25(s3)
   23372:	02d7f7bb          	remuw	a5,a5,a3
    regs.op_index =
   23376:	c4bc                	c.sw	a5,72(s1)
    entry = regs;
   23378:	0484b803          	ld	a6,72(s1)
   2337c:	68a8                	c.ld	a0,80(s1)
   2337e:	6cac                	c.ld	a1,88(s1)
   23380:	70b0                	c.ld	a2,96(s1)
   23382:	74b4                	c.ld	a3,104(s1)
   23384:	78bc                	c.ld	a5,112(s1)
   23386:	e498                	c.sd	a4,8(s1)
   23388:	0104b823          	sd	a6,16(s1)
   2338c:	ec88                	c.sd	a0,24(s1)
   2338e:	f08c                	c.sd	a1,32(s1)
   23390:	f490                	c.sd	a2,40(s1)
   23392:	f894                	c.sd	a3,48(s1)
   23394:	fc9c                	c.sd	a5,56(s1)

    regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   23396:	06048423          	sb	zero,104(s1)
   2339a:	060483a3          	sb	zero,103(s1)
   2339e:	060482a3          	sb	zero,101(s1)
    regs.discriminator = 0;
   233a2:	0604a823          	sw	zero,112(s1)

    return true;
   233a6:	4505                	c.li	a0,1
   233a8:	a2e5                	c.j	23590 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x29a>
    while (pos < sec->end) {
   233aa:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   233ac:	4501                	c.li	a0,0
    int shift = 0;
   233ae:	4601                	c.li	a2,0
    while (pos < sec->end) {
   233b0:	02e7f563          	bgeu	a5,a4,233da <dwarf::line_table::iterator::step(dwarf::cursor*)+0xe4>
      uint8_t byte = *(uint8_t *)(pos++);
   233b4:	0785                	c.addi	a5,1
   233b6:	e81c                	c.sd	a5,16(s0)
   233b8:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   233bc:	07f77693          	andi	a3,a4,127
   233c0:	00c696b3          	sll	a3,a3,a2
   233c4:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   233c6:	0187171b          	slliw	a4,a4,0x18
   233ca:	4187571b          	sraiw	a4,a4,0x18
   233ce:	00075a63          	bge	a4,zero,233e2 <dwarf::line_table::iterator::step(dwarf::cursor*)+0xec>
      shift += 7;
   233d2:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   233d4:	6998                	c.ld	a4,16(a1)
   233d6:	fce7efe3          	bltu	a5,a4,233b4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0xbe>
    underflow();
   233da:	8522                	c.mv	a0,s0
   233dc:	f5cf70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   233e0:	4501                	c.li	a0,0
  section_offset get_section_offset() const { return pos - sec->begin; }
   233e2:	681c                	c.ld	a5,16(s0)
   233e4:	6018                	c.ld	a4,0(s0)
   233e6:	00873a03          	ld	s4,8(a4)
   233ea:	41478a33          	sub	s4,a5,s4
    return ((DW_LNS)opcode == DW_LNS::copy);
  } else { // opcode == 0
    // Extended opcode (DWARF4 sections 6.2.3 and 6.2.5.3)
    assert(opcode == 0);
    uint64_t length = cur->uleb128();
    section_offset end = cur->get_section_offset() + length;
   233ee:	9a2a                	c.add	s4,a0
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   233f0:	6b18                	c.ld	a4,16(a4)
   233f2:	00e7e563          	bltu	a5,a4,233fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x106>
      underflow();
   233f6:	8522                	c.mv	a0,s0
   233f8:	f40f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   233fc:	681c                	c.ld	a5,16(s0)
   233fe:	6008                	c.ld	a0,0(s0)
    if (sec->ord == byte_order::lsb) {
   23400:	4d58                	c.lw	a4,28(a0)
   23402:	4c070d63          	beq	a4,zero,238dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5e6>
        val = (val << 8) | (uint64_t)p[i];
   23406:	0007c583          	lbu	a1,0(a5)
      for (unsigned i = 0; i < sizeof(T); i++)
   2340a:	a9d9                	c.j	238e0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5ea>
    while (pos < sec->end) {
   2340c:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   2340e:	4501                	c.li	a0,0
    int shift = 0;
   23410:	4601                	c.li	a2,0
    while (pos < sec->end) {
   23412:	02e7f563          	bgeu	a5,a4,2343c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x146>
      uint8_t byte = *(uint8_t *)(pos++);
   23416:	0785                	c.addi	a5,1
   23418:	e81c                	c.sd	a5,16(s0)
   2341a:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2341e:	07f77693          	andi	a3,a4,127
   23422:	00c696b3          	sll	a3,a3,a2
   23426:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   23428:	0187171b          	slliw	a4,a4,0x18
   2342c:	4187571b          	sraiw	a4,a4,0x18
   23430:	00075a63          	bge	a4,zero,23444 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x14e>
      shift += 7;
   23434:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23436:	6998                	c.ld	a4,16(a1)
   23438:	fce7efe3          	bltu	a5,a4,23416 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x120>
    underflow();
   2343c:	8522                	c.mv	a0,s0
   2343e:	efaf70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   23442:	4501                	c.li	a0,0
      regs.isa = cur->uleb128();
   23444:	d4e8                	c.sw	a0,108(s1)
      break;
   23446:	a289                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   23448:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   2344a:	4501                	c.li	a0,0
    int shift = 0;
   2344c:	4601                	c.li	a2,0
    while (pos < sec->end) {
   2344e:	02e7f563          	bgeu	a5,a4,23478 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x182>
      uint8_t byte = *(uint8_t *)(pos++);
   23452:	0785                	c.addi	a5,1
   23454:	e81c                	c.sd	a5,16(s0)
   23456:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2345a:	07f77693          	andi	a3,a4,127
   2345e:	00c696b3          	sll	a3,a3,a2
   23462:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   23464:	0187171b          	slliw	a4,a4,0x18
   23468:	4187571b          	sraiw	a4,a4,0x18
   2346c:	00075a63          	bge	a4,zero,23480 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x18a>
      shift += 7;
   23470:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23472:	6998                	c.ld	a4,16(a1)
   23474:	fce7efe3          	bltu	a5,a4,23452 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x15c>
    underflow();
   23478:	8522                	c.mv	a0,s0
   2347a:	ebef70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   2347e:	4501                	c.li	a0,0
      regs.column = cur->uleb128();
   23480:	d0a8                	c.sw	a0,96(s1)
      break;
   23482:	a219                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   23484:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   23486:	4501                	c.li	a0,0
    int shift = 0;
   23488:	4601                	c.li	a2,0
    while (pos < sec->end) {
   2348a:	02e7f563          	bgeu	a5,a4,234b4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1be>
      uint8_t byte = *(uint8_t *)(pos++);
   2348e:	0785                	c.addi	a5,1
   23490:	e81c                	c.sd	a5,16(s0)
   23492:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   23496:	07f77693          	andi	a3,a4,127
   2349a:	00c696b3          	sll	a3,a3,a2
   2349e:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   234a0:	0187171b          	slliw	a4,a4,0x18
   234a4:	4187571b          	sraiw	a4,a4,0x18
   234a8:	00075a63          	bge	a4,zero,234bc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1c6>
      shift += 7;
   234ac:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   234ae:	6998                	c.ld	a4,16(a1)
   234b0:	fce7efe3          	bltu	a5,a4,2348e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x198>
    underflow();
   234b4:	8522                	c.mv	a0,s0
   234b6:	e82f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   234ba:	4501                	c.li	a0,0
      regs.file_index = cur->uleb128();
   234bc:	cca8                	c.sw	a0,88(s1)
      break;
   234be:	a0e9                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
    while (pos < sec->end) {
   234c0:	6998                	c.ld	a4,16(a1)
    std::uint64_t result = 0;
   234c2:	4501                	c.li	a0,0
    int shift = 0;
   234c4:	4601                	c.li	a2,0
    while (pos < sec->end) {
   234c6:	02e7f563          	bgeu	a5,a4,234f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1fa>
      uint8_t byte = *(uint8_t *)(pos++);
   234ca:	0785                	c.addi	a5,1
   234cc:	e81c                	c.sd	a5,16(s0)
   234ce:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   234d2:	07f77693          	andi	a3,a4,127
   234d6:	00c696b3          	sll	a3,a3,a2
   234da:	8d55                	c.or	a0,a3
      if ((byte & 0x80) == 0)
   234dc:	0187171b          	slliw	a4,a4,0x18
   234e0:	4187571b          	sraiw	a4,a4,0x18
   234e4:	06075f63          	bge	a4,zero,23562 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x26c>
      shift += 7;
   234e8:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   234ea:	6998                	c.ld	a4,16(a1)
   234ec:	fce7efe3          	bltu	a5,a4,234ca <dwarf::line_table::iterator::step(dwarf::cursor*)+0x1d4>
    underflow();
   234f0:	8522                	c.mv	a0,s0
   234f2:	e46f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   234f6:	4501                	c.li	a0,0
   234f8:	a0ad                	c.j	23562 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x26c>
      entry = regs;
   234fa:	0404b803          	ld	a6,64(s1)
   234fe:	64a8                	c.ld	a0,72(s1)
   23500:	68ac                	c.ld	a1,80(s1)
   23502:	6cb0                	c.ld	a2,88(s1)
   23504:	70b4                	c.ld	a3,96(s1)
   23506:	74b8                	c.ld	a4,104(s1)
   23508:	78bc                	c.ld	a5,112(s1)
   2350a:	0104b423          	sd	a6,8(s1)
   2350e:	e888                	c.sd	a0,16(s1)
   23510:	ec8c                	c.sd	a1,24(s1)
   23512:	f090                	c.sd	a2,32(s1)
   23514:	f494                	c.sd	a3,40(s1)
   23516:	f898                	c.sd	a4,48(s1)
   23518:	fc9c                	c.sd	a5,56(s1)
      regs.basic_block = regs.prologue_end = regs.epilogue_begin = false;
   2351a:	06048423          	sb	zero,104(s1)
   2351e:	060483a3          	sb	zero,103(s1)
   23522:	060482a3          	sb	zero,101(s1)
      regs.discriminator = 0;
   23526:	0604a823          	sw	zero,112(s1)
      break;
   2352a:	a8b9                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.line = (signed)regs.line + cur->sleb128();
   2352c:	05c4a983          	lw	s3,92(s1)
   23530:	8522                	c.mv	a0,s0
   23532:	e46f70ef          	jal	ra,1ab78 <dwarf::cursor::sleb128()>
   23536:	0135053b          	addw	a0,a0,s3
   2353a:	cce8                	c.sw	a0,92(s1)
      break;
   2353c:	a0b1                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.is_stmt = !regs.is_stmt;
   2353e:	0644c783          	lbu	a5,100(s1)
   23542:	0017c793          	xori	a5,a5,1
   23546:	06f48223          	sb	a5,100(s1)
      break;
   2354a:	a83d                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.basic_block = true;
   2354c:	4785                	c.li	a5,1
   2354e:	06f482a3          	sb	a5,101(s1)
      break;
   23552:	a81d                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      uarg = (255 - m->opcode_base) / m->line_range;
   23554:	0ff00513          	addi	a0,zero,255
   23558:	9d19                	c.subw	a0,a4
   2355a:	01c9c783          	lbu	a5,28(s3)
   2355e:	02f5453b          	divw	a0,a0,a5
          ((regs.op_index + uarg) / m->maximum_operations_per_instruction);
   23562:	0484e783          	lwu	a5,72(s1)
   23566:	97aa                	c.add	a5,a0
   23568:	0199c703          	lbu	a4,25(s3)
   2356c:	02e7d733          	divu	a4,a5,a4
          m->minimum_instruction_length *
   23570:	0189c683          	lbu	a3,24(s3)
   23574:	02d70733          	mul	a4,a4,a3
      regs.address +=
   23578:	60b4                	c.ld	a3,64(s1)
   2357a:	9736                	c.add	a4,a3
   2357c:	e0b8                	c.sd	a4,64(s1)
          (regs.op_index + uarg) % m->maximum_operations_per_instruction;
   2357e:	0199c703          	lbu	a4,25(s3)
   23582:	02e7f7b3          	remu	a5,a5,a4
      regs.op_index =
   23586:	c4bc                	c.sw	a5,72(s1)
    return ((DW_LNS)opcode == DW_LNS::copy);
   23588:	fff90513          	addi	a0,s2,-1
   2358c:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
      throw format_error("extended line number opcode exceeded its size");
    cur += end - cur->get_section_offset();
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
  }
}
   23590:	60ea                	c.ldsp	ra,152(sp)
   23592:	644a                	c.ldsp	s0,144(sp)
   23594:	64aa                	c.ldsp	s1,136(sp)
   23596:	690a                	c.ldsp	s2,128(sp)
   23598:	79e6                	c.ldsp	s3,120(sp)
   2359a:	7a46                	c.ldsp	s4,112(sp)
   2359c:	7aa6                	c.ldsp	s5,104(sp)
   2359e:	610d                	c.addi16sp	sp,160
   235a0:	8082                	c.jr	ra
    if ((section_offset)(sec->end - pos) < bytes || pos >= sec->end)
   235a2:	6998                	c.ld	a4,16(a1)
   235a4:	40f70633          	sub	a2,a4,a5
   235a8:	4685                	c.li	a3,1
   235aa:	00c6f463          	bgeu	a3,a2,235b2 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2bc>
   235ae:	00e7e563          	bltu	a5,a4,235b8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2c2>
      underflow();
   235b2:	8522                	c.mv	a0,s0
   235b4:	d84f70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    const unsigned char *p = (const unsigned char *)pos;
   235b8:	6818                	c.ld	a4,16(s0)
    if (sec->ord == byte_order::lsb) {
   235ba:	601c                	c.ld	a5,0(s0)
   235bc:	4fdc                	c.lw	a5,28(a5)
   235be:	ef99                	c.bnez	a5,235dc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2e6>
        val |= ((uint64_t)p[i]) << (i * 8);
   235c0:	00174783          	lbu	a5,1(a4)
   235c4:	07a2                	c.slli	a5,0x8
   235c6:	00074683          	lbu	a3,0(a4)
   235ca:	8fd5                	c.or	a5,a3
    pos += sizeof(T);
   235cc:	0709                	c.addi	a4,2
   235ce:	e818                	c.sd	a4,16(s0)
      regs.address += cur->fixed<uhalf>();
   235d0:	60b8                	c.ld	a4,64(s1)
   235d2:	97ba                	c.add	a5,a4
   235d4:	e0bc                	c.sd	a5,64(s1)
      regs.op_index = 0;
   235d6:	0404a423          	sw	zero,72(s1)
      break;
   235da:	b77d                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
        val = (val << 8) | (uint64_t)p[i];
   235dc:	00074783          	lbu	a5,0(a4)
   235e0:	07a2                	c.slli	a5,0x8
   235e2:	00174683          	lbu	a3,1(a4)
   235e6:	8fd5                	c.or	a5,a3
      for (unsigned i = 0; i < sizeof(T); i++)
   235e8:	b7d5                	c.j	235cc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x2d6>
      regs.prologue_end = true;
   235ea:	4785                	c.li	a5,1
   235ec:	06f483a3          	sb	a5,103(s1)
      break;
   235f0:	bf61                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
      regs.epilogue_begin = true;
   235f2:	4785                	c.li	a5,1
   235f4:	06f48423          	sb	a5,104(s1)
      break;
   235f8:	bf41                	c.j	23588 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x292>
                         to_string((DW_LNS)opcode));
   235fa:	4541                	c.li	a0,16
   235fc:	e25f20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   23600:	84aa                	c.mv	s1,a0
   23602:	85ca                	c.mv	a1,s2
   23604:	1008                	c.addi4spn	a0,sp,32
   23606:	0f9030ef          	jal	ra,26efe <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>
    { return std::move(__rhs.insert(0, __lhs)); }
   2360a:	0000b617          	auipc	a2,0xb
   2360e:	d6660613          	addi	a2,a2,-666 # 2e370 <typeinfo name for dwarf::expr_context+0x1a0>
   23612:	4581                	c.li	a1,0
   23614:	1008                	c.addi4spn	a0,sp,32
   23616:	d7bf20ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2361a:	85aa                	c.mv	a1,a0
   2361c:	0080                	c.addi4spn	s0,sp,64
   2361e:	8522                	c.mv	a0,s0
   23620:	e51f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   23624:	85a2                	c.mv	a1,s0
   23626:	8526                	c.mv	a0,s1
   23628:	f79f20ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2362c:	00016797          	auipc	a5,0x16
   23630:	f2c7b783          	ld	a5,-212(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   23634:	07c1                	c.addi	a5,16
   23636:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   23638:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2363a:	089c                	c.addi4spn	a5,sp,80
   2363c:	00f50463          	beq	a0,a5,23644 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x34e>
   23640:	ed1f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23644:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23646:	181c                	c.addi4spn	a5,sp,48
   23648:	00f50463          	beq	a0,a5,23650 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x35a>
   2364c:	ec5f20ef          	jal	ra,16510 <operator delete(void*)@plt>
   23650:	00016617          	auipc	a2,0x16
   23654:	d3063603          	ld	a2,-720(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   23658:	00016597          	auipc	a1,0x16
   2365c:	c585b583          	ld	a1,-936(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   23660:	8526                	c.mv	a0,s1
   23662:	85ef30ef          	jal	ra,166c0 <__cxa_throw@plt>
    switch ((DW_LNE)opcode) {
   23666:	4711                	c.li	a4,4
   23668:	04e91063          	bne	s2,a4,236a8 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3b2>
    while (pos < sec->end) {
   2366c:	6918                	c.ld	a4,16(a0)
    std::uint64_t result = 0;
   2366e:	4581                	c.li	a1,0
    int shift = 0;
   23670:	4601                	c.li	a2,0
    while (pos < sec->end) {
   23672:	02e7f563          	bgeu	a5,a4,2369c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a6>
      uint8_t byte = *(uint8_t *)(pos++);
   23676:	0785                	c.addi	a5,1
   23678:	e81c                	c.sd	a5,16(s0)
   2367a:	fff7c703          	lbu	a4,-1(a5)
      result |= (uint64_t)(byte & 0x7f) << shift;
   2367e:	07f77693          	andi	a3,a4,127
   23682:	00c696b3          	sll	a3,a3,a2
   23686:	8dd5                	c.or	a1,a3
      if ((byte & 0x80) == 0)
   23688:	0187171b          	slliw	a4,a4,0x18
   2368c:	4187571b          	sraiw	a4,a4,0x18
   23690:	00075a63          	bge	a4,zero,236a4 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3ae>
      shift += 7;
   23694:	261d                	c.addiw	a2,7
    while (pos < sec->end) {
   23696:	6918                	c.ld	a4,16(a0)
   23698:	fce7efe3          	bltu	a5,a4,23676 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x380>
    underflow();
   2369c:	8522                	c.mv	a0,s0
   2369e:	c9af70ef          	jal	ra,1ab38 <dwarf::cursor::underflow()>
    return 0;
   236a2:	4581                	c.li	a1,0
      regs.discriminator = cur->uleb128();
   236a4:	d8ac                	c.sw	a1,112(s1)
      break;
   236a6:	a899                	c.j	236fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
    switch ((DW_LNE)opcode) {
   236a8:	f809091b          	addiw	s2,s2,-128
   236ac:	0189191b          	slliw	s2,s2,0x18
   236b0:	4189591b          	sraiw	s2,s2,0x18
   236b4:	0e094963          	blt	s2,zero,237a6 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b0>
                          to_string((DW_LNE)opcode) + " not implemented");
   236b8:	4541                	c.li	a0,16
   236ba:	d67f20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   236be:	84aa                	c.mv	s1,a0
   236c0:	85d6                	c.mv	a1,s5
   236c2:	850a                	c.mv	a0,sp
   236c4:	2ba030ef          	jal	ra,2697e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
   236c8:	a0ad                	c.j	23732 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x43c>
      regs.end_sequence = true;
   236ca:	4785                	c.li	a5,1
   236cc:	06f48323          	sb	a5,102(s1)
      entry = regs;
   236d0:	0404b803          	ld	a6,64(s1)
   236d4:	64a8                	c.ld	a0,72(s1)
   236d6:	68ac                	c.ld	a1,80(s1)
   236d8:	6cb0                	c.ld	a2,88(s1)
   236da:	70b4                	c.ld	a3,96(s1)
   236dc:	74b8                	c.ld	a4,104(s1)
   236de:	78bc                	c.ld	a5,112(s1)
   236e0:	0104b423          	sd	a6,8(s1)
   236e4:	e888                	c.sd	a0,16(s1)
   236e6:	ec8c                	c.sd	a1,24(s1)
   236e8:	f090                	c.sd	a2,32(s1)
   236ea:	f494                	c.sd	a3,40(s1)
   236ec:	f898                	c.sd	a4,48(s1)
   236ee:	fc9c                	c.sd	a5,56(s1)
      regs.reset(m->default_is_stmt);
   236f0:	01a9c583          	lbu	a1,26(s3)
   236f4:	04048513          	addi	a0,s1,64
   236f8:	aaffe0ef          	jal	ra,221a6 <dwarf::line_table::entry::reset(bool)>
  section_offset get_section_offset() const { return pos - sec->begin; }
   236fc:	6018                	c.ld	a4,0(s0)
   236fe:	681c                	c.ld	a5,16(s0)
   23700:	6718                	c.ld	a4,8(a4)
   23702:	8f99                	c.sub	a5,a4
    return ((DW_LNE)opcode == DW_LNE::end_sequence);
   23704:	fff90513          	addi	a0,s2,-1
   23708:	00153513          	sltiu	a0,a0,1
    if (cur->get_section_offset() > end)
   2370c:	e8fa72e3          	bgeu	s4,a5,23590 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x29a>
      throw format_error("extended line number opcode exceeded its size");
   23710:	4541                	c.li	a0,16
   23712:	d0ff20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   23716:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23718:	0000b597          	auipc	a1,0xb
   2371c:	c9858593          	addi	a1,a1,-872 # 2e3b0 <typeinfo name for dwarf::expr_context+0x1e0>
   23720:	850f30ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   23724:	a0fd                	c.j	23812 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x51c>
      m->read_file_entry(cur, false);
   23726:	4601                	c.li	a2,0
   23728:	85a2                	c.mv	a1,s0
   2372a:	854e                	c.mv	a0,s3
   2372c:	c85fe0ef          	jal	ra,223b0 <dwarf::line_table::impl::read_file_entry(dwarf::cursor*, bool)>
      break;
   23730:	b7f1                	c.j	236fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
    { return std::move(__rhs.insert(0, __lhs)); }
   23732:	0000b617          	auipc	a2,0xb
   23736:	c5e60613          	addi	a2,a2,-930 # 2e390 <typeinfo name for dwarf::expr_context+0x1c0>
   2373a:	4581                	c.li	a1,0
   2373c:	850a                	c.mv	a0,sp
   2373e:	c53f20ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23742:	85aa                	c.mv	a1,a0
   23744:	1000                	c.addi4spn	s0,sp,32
   23746:	8522                	c.mv	a0,s0
   23748:	d29f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2374c:	0000a597          	auipc	a1,0xa
   23750:	5dc58593          	addi	a1,a1,1500 # 2dd28 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits+0x398>
   23754:	8522                	c.mv	a0,s0
   23756:	84af30ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2375a:	85aa                	c.mv	a1,a0
   2375c:	0080                	c.addi4spn	s0,sp,64
   2375e:	8522                	c.mv	a0,s0
   23760:	d11f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      throw runtime_error("vendor line number opcode " +
   23764:	85a2                	c.mv	a1,s0
   23766:	8526                	c.mv	a0,s1
   23768:	f19f20ef          	jal	ra,16680 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2376c:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2376e:	089c                	c.addi4spn	a5,sp,80
   23770:	00f50463          	beq	a0,a5,23778 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x482>
   23774:	d9df20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23778:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2377a:	181c                	c.addi4spn	a5,sp,48
   2377c:	00f50463          	beq	a0,a5,23784 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x48e>
   23780:	d91f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23784:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   23786:	081c                	c.addi4spn	a5,sp,16
   23788:	00f50463          	beq	a0,a5,23790 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x49a>
   2378c:	d85f20ef          	jal	ra,16510 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   23790:	00016617          	auipc	a2,0x16
   23794:	c7863603          	ld	a2,-904(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   23798:	00016597          	auipc	a1,0x16
   2379c:	e605b583          	ld	a1,-416(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   237a0:	8526                	c.mv	a0,s1
   237a2:	f1ff20ef          	jal	ra,166c0 <__cxa_throw@plt>
                         to_string((DW_LNE)opcode));
   237a6:	4541                	c.li	a0,16
   237a8:	c79f20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   237ac:	84aa                	c.mv	s1,a0
   237ae:	85d6                	c.mv	a1,s5
   237b0:	1008                	c.addi4spn	a0,sp,32
   237b2:	1cc030ef          	jal	ra,2697e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>
    { return std::move(__rhs.insert(0, __lhs)); }
   237b6:	0000b617          	auipc	a2,0xb
   237ba:	bba60613          	addi	a2,a2,-1094 # 2e370 <typeinfo name for dwarf::expr_context+0x1a0>
   237be:	4581                	c.li	a1,0
   237c0:	1008                	c.addi4spn	a0,sp,32
   237c2:	bcff20ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   237c6:	85aa                	c.mv	a1,a0
   237c8:	0080                	c.addi4spn	s0,sp,64
   237ca:	8522                	c.mv	a0,s0
   237cc:	ca5f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   237d0:	85a2                	c.mv	a1,s0
   237d2:	8526                	c.mv	a0,s1
   237d4:	dcdf20ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   237d8:	00016797          	auipc	a5,0x16
   237dc:	d807b783          	ld	a5,-640(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   237e0:	07c1                	c.addi	a5,16
   237e2:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   237e4:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   237e6:	089c                	c.addi4spn	a5,sp,80
   237e8:	00f50463          	beq	a0,a5,237f0 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4fa>
   237ec:	d25f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   237f0:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   237f2:	181c                	c.addi4spn	a5,sp,48
   237f4:	00f50463          	beq	a0,a5,237fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x506>
   237f8:	d19f20ef          	jal	ra,16510 <operator delete(void*)@plt>
   237fc:	00016617          	auipc	a2,0x16
   23800:	b8463603          	ld	a2,-1148(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   23804:	00016597          	auipc	a1,0x16
   23808:	aac5b583          	ld	a1,-1364(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2380c:	8526                	c.mv	a0,s1
   2380e:	eb3f20ef          	jal	ra,166c0 <__cxa_throw@plt>
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   23812:	00016797          	auipc	a5,0x16
   23816:	d467b783          	ld	a5,-698(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   2381a:	07c1                	c.addi	a5,16
   2381c:	e01c                	c.sd	a5,0(s0)
      throw format_error("extended line number opcode exceeded its size");
   2381e:	00016617          	auipc	a2,0x16
   23822:	b6263603          	ld	a2,-1182(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   23826:	00016597          	auipc	a1,0x16
   2382a:	a8a5b583          	ld	a1,-1398(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   2382e:	8522                	c.mv	a0,s0
   23830:	e91f20ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   23834:	842a                	c.mv	s0,a0
   23836:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23838:	089c                	c.addi4spn	a5,sp,80
   2383a:	00f50463          	beq	a0,a5,23842 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x54c>
   2383e:	cd3f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23842:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23844:	181c                	c.addi4spn	a5,sp,48
   23846:	00f50463          	beq	a0,a5,2384e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x558>
   2384a:	cc7f20ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string((DW_LNS)opcode));
   2384e:	8526                	c.mv	a0,s1
   23850:	c81f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   23854:	8522                	c.mv	a0,s0
   23856:	e9bf20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2385a:	842a                	c.mv	s0,a0
   2385c:	b7dd                	c.j	23842 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x54c>
   2385e:	842a                	c.mv	s0,a0
   23860:	b7fd                	c.j	2384e <dwarf::line_table::iterator::step(dwarf::cursor*)+0x558>
   23862:	842a                	c.mv	s0,a0
   23864:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23866:	089c                	c.addi4spn	a5,sp,80
   23868:	00f50463          	beq	a0,a5,23870 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x57a>
   2386c:	ca5f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23870:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23872:	181c                	c.addi4spn	a5,sp,48
   23874:	00f50463          	beq	a0,a5,2387c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x586>
   23878:	c99f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2387c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2387e:	081c                	c.addi4spn	a5,sp,16
   23880:	00f50463          	beq	a0,a5,23888 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x592>
   23884:	c8df20ef          	jal	ra,16510 <operator delete(void*)@plt>
                          to_string((DW_LNE)opcode) + " not implemented");
   23888:	8526                	c.mv	a0,s1
   2388a:	c47f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2388e:	8522                	c.mv	a0,s0
   23890:	e61f20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23894:	842a                	c.mv	s0,a0
   23896:	bfe9                	c.j	23870 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x57a>
   23898:	842a                	c.mv	s0,a0
   2389a:	b7cd                	c.j	2387c <dwarf::line_table::iterator::step(dwarf::cursor*)+0x586>
   2389c:	842a                	c.mv	s0,a0
   2389e:	b7ed                	c.j	23888 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x592>
   238a0:	842a                	c.mv	s0,a0
   238a2:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   238a4:	089c                	c.addi4spn	a5,sp,80
   238a6:	00f50463          	beq	a0,a5,238ae <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b8>
   238aa:	c67f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   238ae:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   238b0:	181c                	c.addi4spn	a5,sp,48
   238b2:	00f50463          	beq	a0,a5,238ba <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5c4>
   238b6:	c5bf20ef          	jal	ra,16510 <operator delete(void*)@plt>
                         to_string((DW_LNE)opcode));
   238ba:	8526                	c.mv	a0,s1
   238bc:	c15f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   238c0:	8522                	c.mv	a0,s0
   238c2:	e2ff20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   238c6:	842a                	c.mv	s0,a0
   238c8:	b7dd                	c.j	238ae <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5b8>
   238ca:	842a                	c.mv	s0,a0
   238cc:	b7fd                	c.j	238ba <dwarf::line_table::iterator::step(dwarf::cursor*)+0x5c4>
      throw format_error("extended line number opcode exceeded its size");
   238ce:	84aa                	c.mv	s1,a0
   238d0:	8522                	c.mv	a0,s0
   238d2:	bfff20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   238d6:	8526                	c.mv	a0,s1
   238d8:	e19f20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
        val |= ((uint64_t)p[i]) << (i * 8);
   238dc:	0007c583          	lbu	a1,0(a5)
    pos += sizeof(T);
   238e0:	0785                	c.addi	a5,1
   238e2:	e81c                	c.sd	a5,16(s0)
    return (T)val;
   238e4:	0ff5f913          	andi	s2,a1,255
    switch ((DW_LNE)opcode) {
   238e8:	8aae                	c.mv	s5,a1
   238ea:	470d                	c.li	a4,3
   238ec:	e2e90de3          	beq	s2,a4,23726 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x430>
   238f0:	d7276be3          	bltu	a4,s2,23666 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x370>
   238f4:	4785                	c.li	a5,1
   238f6:	dcf90ae3          	beq	s2,a5,236ca <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3d4>
   238fa:	4789                	c.li	a5,2
   238fc:	eaf915e3          	bne	s2,a5,237a6 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x4b0>
      regs.address = cur->address();
   23900:	8522                	c.mv	a0,s0
   23902:	00016317          	auipc	t1,0x16
   23906:	a7633303          	ld	t1,-1418(t1) # 39378 <dwarf::cursor::address()@@Base+0x1a382>
   2390a:	9302                	c.jalr	t1
   2390c:	e0a8                	c.sd	a0,64(s1)
      regs.op_index = 0;
   2390e:	0404a423          	sw	zero,72(s1)
      break;
   23912:	b3ed                	c.j	236fc <dwarf::line_table::iterator::step(dwarf::cursor*)+0x406>
        val |= ((uint64_t)p[i]) << (i * 8);
   23914:	0007c903          	lbu	s2,0(a5)
    pos += sizeof(T);
   23918:	0785                	c.addi	a5,1
   2391a:	e81c                	c.sd	a5,16(s0)
    return (T)val;
   2391c:	0ff97913          	andi	s2,s2,255
  if (opcode >= m->opcode_base) {
   23920:	01d9c703          	lbu	a4,29(s3)
   23924:	a0e976e3          	bgeu	s2,a4,23330 <dwarf::line_table::iterator::step(dwarf::cursor*)+0x3a>
  } else if (opcode != 0) {
   23928:	a80901e3          	beq	s2,zero,233aa <dwarf::line_table::iterator::step(dwarf::cursor*)+0xb4>
    switch ((DW_LNS)opcode) {
   2392c:	46b1                	c.li	a3,12
   2392e:	cd26e6e3          	bltu	a3,s2,235fa <dwarf::line_table::iterator::step(dwarf::cursor*)+0x304>
   23932:	00291693          	slli	a3,s2,0x2
   23936:	0000b617          	auipc	a2,0xb
   2393a:	b2260613          	addi	a2,a2,-1246 # 2e458 <typeinfo name for dwarf::expr_context+0x288>
   2393e:	96b2                	c.add	a3,a2
   23940:	4294                	c.lw	a3,0(a3)
   23942:	96b2                	c.add	a3,a2
   23944:	8682                	c.jr	a3

0000000000023946 <dwarf::line_table::iterator::operator++()>:
line_table::iterator &line_table::iterator::operator++() {
   23946:	7171                	c.addi16sp	sp,-176
   23948:	f506                	c.sdsp	ra,168(sp)
   2394a:	f122                	c.sdsp	s0,160(sp)
   2394c:	ed26                	c.sdsp	s1,152(sp)
   2394e:	e94a                	c.sdsp	s2,144(sp)
   23950:	e54e                	c.sdsp	s3,136(sp)
   23952:	842a                	c.mv	s0,a0
   23954:	611c                	c.ld	a5,0(a0)
   23956:	639c                	c.ld	a5,0(a5)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23958:	0007b903          	ld	s2,0(a5)
      : _M_pi(__r._M_pi)
   2395c:	6784                	c.ld	s1,8(a5)
	if (_M_pi != nullptr)
   2395e:	2a048063          	beq	s1,zero,23bfe <dwarf::line_table::iterator::operator++()+0x2b8>
    if (__is_single_threaded())
   23962:	00016797          	auipc	a5,0x16
   23966:	b1e7b783          	ld	a5,-1250(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2396a:	0007c783          	lbu	a5,0(a5)
   2396e:	cfad                	c.beqz	a5,239e8 <dwarf::line_table::iterator::operator++()+0xa2>
  { *__mem += __val; }
   23970:	589c                	c.lw	a5,48(s1)
   23972:	2785                	c.addiw	a5,1
   23974:	d89c                	c.sw	a5,48(s1)
  cursor cur(table->m->sec, pos);
   23976:	07843983          	ld	s3,120(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2397a:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   2397c:	f8a6                	c.sdsp	s1,112(sp)
    if (__is_single_threaded())
   2397e:	00016797          	auipc	a5,0x16
   23982:	b027b783          	ld	a5,-1278(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23986:	0007c783          	lbu	a5,0(a5)
   2398a:	c7ad                	c.beqz	a5,239f4 <dwarf::line_table::iterator::operator++()+0xae>
  { *__mem += __val; }
   2398c:	589c                	c.lw	a5,48(s1)
   2398e:	2785                	c.addiw	a5,1
   23990:	d89c                	c.sw	a5,48(s1)
      : sec(sec), pos(sec->begin + offset) {}
   23992:	00893783          	ld	a5,8(s2)
   23996:	97ce                	c.add	a5,s3
   23998:	fcbe                	c.sdsp	a5,120(sp)
    if (__is_single_threaded())
   2399a:	00016797          	auipc	a5,0x16
   2399e:	ae67b783          	ld	a5,-1306(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   239a2:	0007c783          	lbu	a5,0(a5)
   239a6:	cfa9                	c.beqz	a5,23a00 <dwarf::line_table::iterator::operator++()+0xba>
    _Atomic_word __result = *__mem;
   239a8:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   239aa:	fff5079b          	addiw	a5,a0,-1
   239ae:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   239b0:	4785                	c.li	a5,1
   239b2:	24f51d63          	bne	a0,a5,23c0c <dwarf::line_table::iterator::operator++()+0x2c6>
	_M_dispose();
   239b6:	609c                	c.ld	a5,0(s1)
   239b8:	6b9c                	c.ld	a5,16(a5)
   239ba:	8526                	c.mv	a0,s1
   239bc:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   239be:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   239c2:	00016797          	auipc	a5,0x16
   239c6:	abe7b783          	ld	a5,-1346(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   239ca:	0007c783          	lbu	a5,0(a5)
   239ce:	cf9d                	c.beqz	a5,23a0c <dwarf::line_table::iterator::operator++()+0xc6>
    _Atomic_word __result = *__mem;
   239d0:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   239d2:	fff5079b          	addiw	a5,a0,-1
   239d6:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   239d8:	4785                	c.li	a5,1
   239da:	22f51963          	bne	a0,a5,23c0c <dwarf::line_table::iterator::operator++()+0x2c6>
	    _M_destroy();
   239de:	609c                	c.ld	a5,0(s1)
   239e0:	6f9c                	c.ld	a5,24(a5)
   239e2:	8526                	c.mv	a0,s1
   239e4:	9782                	c.jalr	a5
   239e6:	a41d                	c.j	23c0c <dwarf::line_table::iterator::operator++()+0x2c6>
      __atomic_add(__mem, __val);
   239e8:	4585                	c.li	a1,1
   239ea:	03048513          	addi	a0,s1,48
   239ee:	963f20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   239f2:	b751                	c.j	23976 <dwarf::line_table::iterator::operator++()+0x30>
   239f4:	4585                	c.li	a1,1
   239f6:	03048513          	addi	a0,s1,48
   239fa:	957f20ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   239fe:	bf51                	c.j	23992 <dwarf::line_table::iterator::operator++()+0x4c>
      return __exchange_and_add(__mem, __val);
   23a00:	55fd                	c.li	a1,-1
   23a02:	03048513          	addi	a0,s1,48
   23a06:	97bf20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23a0a:	b75d                	c.j	239b0 <dwarf::line_table::iterator::operator++()+0x6a>
   23a0c:	55fd                	c.li	a1,-1
   23a0e:	03448513          	addi	a0,s1,52
   23a12:	96ff20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23a16:	b7c9                	c.j	239d8 <dwarf::line_table::iterator::operator++()+0x92>
  if (stepped && !output)
   23a18:	20048d63          	beq	s1,zero,23c32 <dwarf::line_table::iterator::operator++()+0x2ec>
   23a1c:	c935                	c.beqz	a0,23a90 <dwarf::line_table::iterator::operator++()+0x14a>
  if (stepped && cur.end()) {
   23a1e:	00d7e763          	bltu	a5,a3,23a2c <dwarf::line_table::iterator::operator++()+0xe6>
      { return _M_ptr; }
   23a22:	6014                	c.ld	a3,0(s0)
   23a24:	6294                	c.ld	a3,0(a3)
    table->m->file_names_complete = true;
   23a26:	4605                	c.li	a2,1
   23a28:	06c68823          	sb	a2,112(a3)
    if (entry.file_index < table->m->file_names.size())
   23a2c:	02046583          	lwu	a1,32(s0)
   23a30:	6014                	c.ld	a3,0(s0)
   23a32:	6294                	c.ld	a3,0(a3)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23a34:	6ab0                	c.ld	a2,80(a3)
   23a36:	6eb4                	c.ld	a3,88(a3)
   23a38:	8e91                	c.sub	a3,a2
   23a3a:	8691                	c.srai	a3,0x4
   23a3c:	0000a517          	auipc	a0,0xa
   23a40:	a4c53503          	ld	a0,-1460(a0) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23a44:	02a686b3          	mul	a3,a3,a0
   23a48:	08d5f163          	bgeu	a1,a3,23aca <dwarf::line_table::iterator::operator++()+0x184>
	return *(this->_M_impl._M_start + __n);
   23a4c:	00159693          	slli	a3,a1,0x1
   23a50:	96ae                	c.add	a3,a1
   23a52:	0692                	c.slli	a3,0x4
   23a54:	9636                	c.add	a2,a3
      entry.file = &table->m->file_names[entry.file_index];
   23a56:	ec10                	c.sd	a2,24(s0)
  section_offset get_section_offset() const { return pos - sec->begin; }
   23a58:	6718                	c.ld	a4,8(a4)
   23a5a:	8f99                	c.sub	a5,a4
  pos = cur.get_section_offset();
   23a5c:	fc3c                	c.sd	a5,120(s0)
	if (_M_pi != nullptr)
   23a5e:	74c6                	c.ldsp	s1,112(sp)
   23a60:	c085                	c.beqz	s1,23a80 <dwarf::line_table::iterator::operator++()+0x13a>
    if (__is_single_threaded())
   23a62:	00016797          	auipc	a5,0x16
   23a66:	a1e7b783          	ld	a5,-1506(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23a6a:	0007c783          	lbu	a5,0(a5)
   23a6e:	0e078a63          	beq	a5,zero,23b62 <dwarf::line_table::iterator::operator++()+0x21c>
    _Atomic_word __result = *__mem;
   23a72:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   23a74:	fff5079b          	addiw	a5,a0,-1
   23a78:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   23a7a:	4785                	c.li	a5,1
   23a7c:	0ef50963          	beq	a0,a5,23b6e <dwarf::line_table::iterator::operator++()+0x228>
}
   23a80:	8522                	c.mv	a0,s0
   23a82:	70aa                	c.ldsp	ra,168(sp)
   23a84:	740a                	c.ldsp	s0,160(sp)
   23a86:	64ea                	c.ldsp	s1,152(sp)
   23a88:	694a                	c.ldsp	s2,144(sp)
   23a8a:	69aa                	c.ldsp	s3,136(sp)
   23a8c:	614d                	c.addi16sp	sp,176
   23a8e:	8082                	c.jr	ra
    throw format_error("unexpected end of line table");
   23a90:	4541                	c.li	a0,16
   23a92:	98ff20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   23a96:	84aa                	c.mv	s1,a0
   23a98:	0000b597          	auipc	a1,0xb
   23a9c:	94858593          	addi	a1,a1,-1720 # 2e3e0 <typeinfo name for dwarf::expr_context+0x210>
   23aa0:	cd1f20ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   23aa4:	00016797          	auipc	a5,0x16
   23aa8:	ab47b783          	ld	a5,-1356(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   23aac:	07c1                	c.addi	a5,16
   23aae:	e09c                	c.sd	a5,0(s1)
   23ab0:	00016617          	auipc	a2,0x16
   23ab4:	8d063603          	ld	a2,-1840(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   23ab8:	00015597          	auipc	a1,0x15
   23abc:	7f85b583          	ld	a1,2040(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   23ac0:	8526                	c.mv	a0,s1
   23ac2:	bfff20ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   23ac6:	842a                	c.mv	s0,a0
   23ac8:	a0f5                	c.j	23bb4 <dwarf::line_table::iterator::operator++()+0x26e>
                         " in line table");
   23aca:	4541                	c.li	a0,16
   23acc:	955f20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   23ad0:	84aa                	c.mv	s1,a0
      throw format_error("bad file index " + std::to_string(entry.file_index) +
   23ad2:	500c                	c.lw	a1,32(s0)
   23ad4:	0020                	c.addi4spn	s0,sp,8
   23ad6:	8522                	c.mv	a0,s0
   23ad8:	00016317          	auipc	t1,0x16
   23adc:	a1833303          	ld	t1,-1512(t1) # 394f0 <std::__cxx11::to_string(unsigned int)@@Base+0x151ce>
   23ae0:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   23ae2:	0000b617          	auipc	a2,0xb
   23ae6:	91e60613          	addi	a2,a2,-1762 # 2e400 <typeinfo name for dwarf::expr_context+0x230>
   23aea:	4581                	c.li	a1,0
   23aec:	8522                	c.mv	a0,s0
   23aee:	8a3f20ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23af2:	85aa                	c.mv	a1,a0
   23af4:	1020                	c.addi4spn	s0,sp,40
   23af6:	8522                	c.mv	a0,s0
   23af8:	979f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   23afc:	0000b597          	auipc	a1,0xb
   23b00:	91458593          	addi	a1,a1,-1772 # 2e410 <typeinfo name for dwarf::expr_context+0x240>
   23b04:	8522                	c.mv	a0,s0
   23b06:	c9bf20ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   23b0a:	85aa                	c.mv	a1,a0
   23b0c:	00a0                	c.addi4spn	s0,sp,72
   23b0e:	8522                	c.mv	a0,s0
   23b10:	961f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   23b14:	85a2                	c.mv	a1,s0
   23b16:	8526                	c.mv	a0,s1
   23b18:	a89f20ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   23b1c:	00016797          	auipc	a5,0x16
   23b20:	a3c7b783          	ld	a5,-1476(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   23b24:	07c1                	c.addi	a5,16
   23b26:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   23b28:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   23b2a:	08bc                	c.addi4spn	a5,sp,88
   23b2c:	00f50463          	beq	a0,a5,23b34 <dwarf::line_table::iterator::operator++()+0x1ee>
   23b30:	9e1f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23b34:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   23b36:	183c                	c.addi4spn	a5,sp,56
   23b38:	00f50463          	beq	a0,a5,23b40 <dwarf::line_table::iterator::operator++()+0x1fa>
   23b3c:	9d5f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23b40:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   23b42:	083c                	c.addi4spn	a5,sp,24
   23b44:	00f50463          	beq	a0,a5,23b4c <dwarf::line_table::iterator::operator++()+0x206>
   23b48:	9c9f20ef          	jal	ra,16510 <operator delete(void*)@plt>
                         " in line table");
   23b4c:	00016617          	auipc	a2,0x16
   23b50:	83463603          	ld	a2,-1996(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   23b54:	00015597          	auipc	a1,0x15
   23b58:	75c5b583          	ld	a1,1884(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   23b5c:	8526                	c.mv	a0,s1
   23b5e:	b63f20ef          	jal	ra,166c0 <__cxa_throw@plt>
      return __exchange_and_add(__mem, __val);
   23b62:	55fd                	c.li	a1,-1
   23b64:	03048513          	addi	a0,s1,48
   23b68:	819f20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23b6c:	b739                	c.j	23a7a <dwarf::line_table::iterator::operator++()+0x134>
	_M_dispose();
   23b6e:	609c                	c.ld	a5,0(s1)
   23b70:	6b9c                	c.ld	a5,16(a5)
   23b72:	8526                	c.mv	a0,s1
   23b74:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   23b76:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   23b7a:	00016797          	auipc	a5,0x16
   23b7e:	9067b783          	ld	a5,-1786(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   23b82:	0007c783          	lbu	a5,0(a5)
   23b86:	cf89                	c.beqz	a5,23ba0 <dwarf::line_table::iterator::operator++()+0x25a>
    _Atomic_word __result = *__mem;
   23b88:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   23b8a:	fff5079b          	addiw	a5,a0,-1
   23b8e:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   23b90:	4785                	c.li	a5,1
   23b92:	eef517e3          	bne	a0,a5,23a80 <dwarf::line_table::iterator::operator++()+0x13a>
	    _M_destroy();
   23b96:	609c                	c.ld	a5,0(s1)
   23b98:	6f9c                	c.ld	a5,24(a5)
   23b9a:	8526                	c.mv	a0,s1
   23b9c:	9782                	c.jalr	a5
  return *this;
   23b9e:	b5cd                	c.j	23a80 <dwarf::line_table::iterator::operator++()+0x13a>
      return __exchange_and_add(__mem, __val);
   23ba0:	55fd                	c.li	a1,-1
   23ba2:	03448513          	addi	a0,s1,52
   23ba6:	fdaf20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   23baa:	b7dd                	c.j	23b90 <dwarf::line_table::iterator::operator++()+0x24a>
    throw format_error("unexpected end of line table");
   23bac:	842a                	c.mv	s0,a0
   23bae:	8526                	c.mv	a0,s1
   23bb0:	921f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   23bb4:	7546                	c.ldsp	a0,112(sp)
   23bb6:	c511                	c.beqz	a0,23bc2 <dwarf::line_table::iterator::operator++()+0x27c>
	  _M_pi->_M_release();
   23bb8:	00016317          	auipc	t1,0x16
   23bbc:	81033303          	ld	t1,-2032(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   23bc0:	9302                	c.jalr	t1
   23bc2:	8522                	c.mv	a0,s0
   23bc4:	b2df20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23bc8:	842a                	c.mv	s0,a0
   23bca:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   23bcc:	08bc                	c.addi4spn	a5,sp,88
   23bce:	00f50463          	beq	a0,a5,23bd6 <dwarf::line_table::iterator::operator++()+0x290>
   23bd2:	93ff20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23bd6:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   23bd8:	183c                	c.addi4spn	a5,sp,56
   23bda:	00f50463          	beq	a0,a5,23be2 <dwarf::line_table::iterator::operator++()+0x29c>
   23bde:	933f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23be2:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   23be4:	083c                	c.addi4spn	a5,sp,24
   23be6:	00f50463          	beq	a0,a5,23bee <dwarf::line_table::iterator::operator++()+0x2a8>
   23bea:	927f20ef          	jal	ra,16510 <operator delete(void*)@plt>
                         " in line table");
   23bee:	8526                	c.mv	a0,s1
   23bf0:	8e1f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   23bf4:	b7c1                	c.j	23bb4 <dwarf::line_table::iterator::operator++()+0x26e>
      { return _M_dataplus._M_p; }
   23bf6:	842a                	c.mv	s0,a0
   23bf8:	bff9                	c.j	23bd6 <dwarf::line_table::iterator::operator++()+0x290>
   23bfa:	842a                	c.mv	s0,a0
   23bfc:	b7dd                	c.j	23be2 <dwarf::line_table::iterator::operator++()+0x29c>
  cursor cur(table->m->sec, pos);
   23bfe:	7d38                	c.ld	a4,120(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   23c00:	f4ca                	c.sdsp	s2,104(sp)
      : _M_pi(__r._M_pi)
   23c02:	f882                	c.sdsp	zero,112(sp)
      : sec(sec), pos(sec->begin + offset) {}
   23c04:	00893783          	ld	a5,8(s2)
   23c08:	97ba                	c.add	a5,a4
   23c0a:	fcbe                	c.sdsp	a5,120(sp)
line_table::iterator &line_table::iterator::operator++() {
   23c0c:	4501                	c.li	a0,0
   23c0e:	4481                	c.li	s1,0
    stepped = true;
   23c10:	4905                	c.li	s2,1
    output = step(&cur);
   23c12:	06810993          	addi	s3,sp,104
  bool end() const { return pos >= sec->end; }
   23c16:	77e6                	c.ldsp	a5,120(sp)
      { return _M_ptr; }
   23c18:	7726                	c.ldsp	a4,104(sp)
   23c1a:	6b14                	c.ld	a3,16(a4)
  while (!cur.end() && !output) {
   23c1c:	ded7fee3          	bgeu	a5,a3,23a18 <dwarf::line_table::iterator::operator++()+0xd2>
   23c20:	e519                	c.bnez	a0,23c2e <dwarf::line_table::iterator::operator++()+0x2e8>
    stepped = true;
   23c22:	84ca                	c.mv	s1,s2
    output = step(&cur);
   23c24:	85ce                	c.mv	a1,s3
   23c26:	8522                	c.mv	a0,s0
   23c28:	eceff0ef          	jal	ra,232f6 <dwarf::line_table::iterator::step(dwarf::cursor*)>
   23c2c:	b7ed                	c.j	23c16 <dwarf::line_table::iterator::operator++()+0x2d0>
  if (stepped && !output)
   23c2e:	de049fe3          	bne	s1,zero,23a2c <dwarf::line_table::iterator::operator++()+0xe6>
  if (output) {
   23c32:	e20503e3          	beq	a0,zero,23a58 <dwarf::line_table::iterator::operator++()+0x112>
   23c36:	bbdd                	c.j	23a2c <dwarf::line_table::iterator::operator++()+0xe6>

0000000000023c38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>:
    : table(table), pos(pos) {
   23c38:	e10c                	c.sd	a1,0(a0)
   23c3a:	fd30                	c.sd	a2,120(a0)
  if (table) {
   23c3c:	c19d                	c.beqz	a1,23c62 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)+0x2a>
line_table::iterator::iterator(const line_table *table, section_offset pos)
   23c3e:	1141                	c.addi	sp,-16
   23c40:	e406                	c.sdsp	ra,8(sp)
   23c42:	e022                	c.sdsp	s0,0(sp)
   23c44:	842a                	c.mv	s0,a0
    regs.reset(table->m->default_is_stmt);
   23c46:	619c                	c.ld	a5,0(a1)
   23c48:	01a7c583          	lbu	a1,26(a5)
   23c4c:	04050513          	addi	a0,a0,64
   23c50:	d56fe0ef          	jal	ra,221a6 <dwarf::line_table::entry::reset(bool)>
    ++(*this);
   23c54:	8522                	c.mv	a0,s0
   23c56:	cf1ff0ef          	jal	ra,23946 <dwarf::line_table::iterator::operator++()>
}
   23c5a:	60a2                	c.ldsp	ra,8(sp)
   23c5c:	6402                	c.ldsp	s0,0(sp)
   23c5e:	0141                	c.addi	sp,16
   23c60:	8082                	c.jr	ra
   23c62:	8082                	c.jr	ra

0000000000023c64 <dwarf::line_table::begin() const>:
line_table::iterator line_table::begin() const {
   23c64:	1141                	c.addi	sp,-16
   23c66:	e406                	c.sdsp	ra,8(sp)
   23c68:	e022                	c.sdsp	s0,0(sp)
   23c6a:	842a                	c.mv	s0,a0
      { return _M_ptr != nullptr; }
   23c6c:	619c                	c.ld	a5,0(a1)
  if (!valid())
   23c6e:	cb89                	c.beqz	a5,23c80 <dwarf::line_table::begin() const+0x1c>
  return iterator(this, m->program_offset);
   23c70:	6b90                	c.ld	a2,16(a5)
   23c72:	fc7ff0ef          	jal	ra,23c38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   23c76:	8522                	c.mv	a0,s0
   23c78:	60a2                	c.ldsp	ra,8(sp)
   23c7a:	6402                	c.ldsp	s0,0(sp)
   23c7c:	0141                	c.addi	sp,16
   23c7e:	8082                	c.jr	ra
    return iterator(nullptr, 0);
   23c80:	4601                	c.li	a2,0
   23c82:	4581                	c.li	a1,0
   23c84:	fb5ff0ef          	jal	ra,23c38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   23c88:	b7fd                	c.j	23c76 <dwarf::line_table::begin() const+0x12>

0000000000023c8a <dwarf::line_table::end() const>:
line_table::iterator line_table::end() const {
   23c8a:	1141                	c.addi	sp,-16
   23c8c:	e406                	c.sdsp	ra,8(sp)
   23c8e:	e022                	c.sdsp	s0,0(sp)
   23c90:	842a                	c.mv	s0,a0
   23c92:	619c                	c.ld	a5,0(a1)
  if (!valid())
   23c94:	cf81                	c.beqz	a5,23cac <dwarf::line_table::end() const+0x22>
      { return _M_ptr; }
   23c96:	639c                	c.ld	a5,0(a5)
  size_t size() const { return end - begin; }
   23c98:	6b90                	c.ld	a2,16(a5)
   23c9a:	679c                	c.ld	a5,8(a5)
  return iterator(this, m->sec->size());
   23c9c:	8e1d                	c.sub	a2,a5
   23c9e:	f9bff0ef          	jal	ra,23c38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
}
   23ca2:	8522                	c.mv	a0,s0
   23ca4:	60a2                	c.ldsp	ra,8(sp)
   23ca6:	6402                	c.ldsp	s0,0(sp)
   23ca8:	0141                	c.addi	sp,16
   23caa:	8082                	c.jr	ra
    return iterator(nullptr, 0);
   23cac:	4601                	c.li	a2,0
   23cae:	4581                	c.li	a1,0
   23cb0:	f89ff0ef          	jal	ra,23c38 <dwarf::line_table::iterator::iterator(dwarf::line_table const*, unsigned long)>
   23cb4:	b7fd                	c.j	23ca2 <dwarf::line_table::end() const+0x18>

0000000000023cb6 <dwarf::line_table::find_address(unsigned long) const>:
line_table::iterator line_table::find_address(taddr addr) const {
   23cb6:	7121                	c.addi16sp	sp,-448
   23cb8:	ff06                	c.sdsp	ra,440(sp)
   23cba:	fb22                	c.sdsp	s0,432(sp)
   23cbc:	f726                	c.sdsp	s1,424(sp)
   23cbe:	f34a                	c.sdsp	s2,416(sp)
   23cc0:	ef4e                	c.sdsp	s3,408(sp)
   23cc2:	eb52                	c.sdsp	s4,400(sp)
   23cc4:	e756                	c.sdsp	s5,392(sp)
   23cc6:	842a                	c.mv	s0,a0
   23cc8:	84ae                	c.mv	s1,a1
   23cca:	8932                	c.mv	s2,a2
  iterator prev = begin(), e = end();
   23ccc:	f99ff0ef          	jal	ra,23c64 <dwarf::line_table::begin() const>
   23cd0:	85a6                	c.mv	a1,s1
   23cd2:	0208                	c.addi4spn	a0,sp,256
   23cd4:	fb7ff0ef          	jal	ra,23c8a <dwarf::line_table::end() const>
   23cd8:	6a12                	c.ldsp	s4,256(sp)
   23cda:	79f6                	c.ldsp	s3,376(sp)
    return o.pos == pos && o.table == table;
   23cdc:	7c3c                	c.ld	a5,120(s0)
   23cde:	03378b63          	beq	a5,s3,23d14 <dwarf::line_table::find_address(unsigned long) const+0x5e>
  iterator it = prev;
   23ce2:	87a2                	c.mv	a5,s0
   23ce4:	0118                	c.addi4spn	a4,sp,128
   23ce6:	08040813          	addi	a6,s0,128
   23cea:	6388                	c.ld	a0,0(a5)
   23cec:	678c                	c.ld	a1,8(a5)
   23cee:	6b90                	c.ld	a2,16(a5)
   23cf0:	6f94                	c.ld	a3,24(a5)
   23cf2:	e308                	c.sd	a0,0(a4)
   23cf4:	e70c                	c.sd	a1,8(a4)
   23cf6:	eb10                	c.sd	a2,16(a4)
   23cf8:	ef14                	c.sd	a3,24(a4)
   23cfa:	02078793          	addi	a5,a5,32
   23cfe:	02070713          	addi	a4,a4,32
   23d02:	ff0794e3          	bne	a5,a6,23cea <dwarf::line_table::find_address(unsigned long) const+0x34>
  for (++it; it != e; prev = it++) {
   23d06:	0108                	c.addi4spn	a0,sp,128
   23d08:	c3fff0ef          	jal	ra,23946 <dwarf::line_table::iterator::operator++()>
    iterator tmp(*this);
   23d0c:	10010a93          	addi	s5,sp,256
    ++(*this);
   23d10:	0104                	c.addi4spn	s1,sp,128
   23d12:	a881                	c.j	23d62 <dwarf::line_table::find_address(unsigned long) const+0xac>
    return o.pos == pos && o.table == table;
   23d14:	601c                	c.ld	a5,0(s0)
   23d16:	fcfa16e3          	bne	s4,a5,23ce2 <dwarf::line_table::find_address(unsigned long) const+0x2c>
   23d1a:	a071                	c.j	23da6 <dwarf::line_table::find_address(unsigned long) const+0xf0>
    iterator tmp(*this);
   23d1c:	011c                	c.addi4spn	a5,sp,128
   23d1e:	870a                	c.mv	a4,sp
   23d20:	6388                	c.ld	a0,0(a5)
   23d22:	678c                	c.ld	a1,8(a5)
   23d24:	6b90                	c.ld	a2,16(a5)
   23d26:	6f94                	c.ld	a3,24(a5)
   23d28:	e308                	c.sd	a0,0(a4)
   23d2a:	e70c                	c.sd	a1,8(a4)
   23d2c:	eb10                	c.sd	a2,16(a4)
   23d2e:	ef14                	c.sd	a3,24(a4)
   23d30:	02078793          	addi	a5,a5,32
   23d34:	02070713          	addi	a4,a4,32
   23d38:	ff5794e3          	bne	a5,s5,23d20 <dwarf::line_table::find_address(unsigned long) const+0x6a>
    ++(*this);
   23d3c:	8526                	c.mv	a0,s1
   23d3e:	c09ff0ef          	jal	ra,23946 <dwarf::line_table::iterator::operator++()>
   23d42:	878a                	c.mv	a5,sp
   23d44:	8722                	c.mv	a4,s0
   23d46:	6388                	c.ld	a0,0(a5)
   23d48:	678c                	c.ld	a1,8(a5)
   23d4a:	6b90                	c.ld	a2,16(a5)
   23d4c:	6f94                	c.ld	a3,24(a5)
   23d4e:	e308                	c.sd	a0,0(a4)
   23d50:	e70c                	c.sd	a1,8(a4)
   23d52:	eb10                	c.sd	a2,16(a4)
   23d54:	ef14                	c.sd	a3,24(a4)
   23d56:	02078793          	addi	a5,a5,32
   23d5a:	02070713          	addi	a4,a4,32
   23d5e:	fe9794e3          	bne	a5,s1,23d46 <dwarf::line_table::find_address(unsigned long) const+0x90>
    return o.pos == pos && o.table == table;
   23d62:	77ee                	c.ldsp	a5,248(sp)
   23d64:	01378c63          	beq	a5,s3,23d7c <dwarf::line_table::find_address(unsigned long) const+0xc6>
    if (prev->address <= addr && it->address > addr && !prev->end_sequence)
   23d68:	641c                	c.ld	a5,8(s0)
   23d6a:	faf969e3          	bltu	s2,a5,23d1c <dwarf::line_table::find_address(unsigned long) const+0x66>
   23d6e:	67aa                	c.ldsp	a5,136(sp)
   23d70:	faf976e3          	bgeu	s2,a5,23d1c <dwarf::line_table::find_address(unsigned long) const+0x66>
   23d74:	02e44783          	lbu	a5,46(s0)
   23d78:	f3d5                	c.bnez	a5,23d1c <dwarf::line_table::find_address(unsigned long) const+0x66>
   23d7a:	a035                	c.j	23da6 <dwarf::line_table::find_address(unsigned long) const+0xf0>
   23d7c:	678a                	c.ldsp	a5,128(sp)
   23d7e:	fefa15e3          	bne	s4,a5,23d68 <dwarf::line_table::find_address(unsigned long) const+0xb2>
  prev = e;
   23d82:	021c                	c.addi4spn	a5,sp,256
   23d84:	8722                	c.mv	a4,s0
   23d86:	18010813          	addi	a6,sp,384
   23d8a:	6388                	c.ld	a0,0(a5)
   23d8c:	678c                	c.ld	a1,8(a5)
   23d8e:	6b90                	c.ld	a2,16(a5)
   23d90:	6f94                	c.ld	a3,24(a5)
   23d92:	e308                	c.sd	a0,0(a4)
   23d94:	e70c                	c.sd	a1,8(a4)
   23d96:	eb10                	c.sd	a2,16(a4)
   23d98:	ef14                	c.sd	a3,24(a4)
   23d9a:	02078793          	addi	a5,a5,32
   23d9e:	02070713          	addi	a4,a4,32
   23da2:	ff0794e3          	bne	a5,a6,23d8a <dwarf::line_table::find_address(unsigned long) const+0xd4>
}
   23da6:	8522                	c.mv	a0,s0
   23da8:	70fa                	c.ldsp	ra,440(sp)
   23daa:	745a                	c.ldsp	s0,432(sp)
   23dac:	74ba                	c.ldsp	s1,424(sp)
   23dae:	791a                	c.ldsp	s2,416(sp)
   23db0:	69fa                	c.ldsp	s3,408(sp)
   23db2:	6a5a                	c.ldsp	s4,400(sp)
   23db4:	6aba                	c.ldsp	s5,392(sp)
   23db6:	6139                	c.addi16sp	sp,448
   23db8:	8082                	c.jr	ra

0000000000023dba <dwarf::line_table::get_file(unsigned int) const>:
const line_table::file *line_table::get_file(unsigned index) const {
   23dba:	7165                	c.addi16sp	sp,-400
   23dbc:	e706                	c.sdsp	ra,392(sp)
   23dbe:	e322                	c.sdsp	s0,384(sp)
   23dc0:	fea6                	c.sdsp	s1,376(sp)
   23dc2:	faca                	c.sdsp	s2,368(sp)
   23dc4:	f6ce                	c.sdsp	s3,360(sp)
   23dc6:	842a                	c.mv	s0,a0
  if (index >= m->file_names.size()) {
   23dc8:	02059493          	slli	s1,a1,0x20
   23dcc:	9081                	c.srli	s1,0x20
   23dce:	6118                	c.ld	a4,0(a0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23dd0:	6f3c                	c.ld	a5,88(a4)
   23dd2:	6b34                	c.ld	a3,80(a4)
   23dd4:	8f95                	c.sub	a5,a3
   23dd6:	8791                	c.srai	a5,0x4
   23dd8:	00009697          	auipc	a3,0x9
   23ddc:	6b06b683          	ld	a3,1712(a3) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23de0:	02d787b3          	mul	a5,a5,a3
   23de4:	06f4ee63          	bltu	s1,a5,23e60 <dwarf::line_table::get_file(unsigned int) const+0xa6>
   23de8:	892e                	c.mv	s2,a1
    if (!m->file_names_complete) {
   23dea:	07074783          	lbu	a5,112(a4)
   23dee:	c795                	c.beqz	a5,23e1a <dwarf::line_table::get_file(unsigned int) const+0x60>
                         std::to_string(m->file_names.size()));
   23df0:	4541                	c.li	a0,16
   23df2:	e2ef20ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   23df6:	84aa                	c.mv	s1,a0
      throw out_of_range("file name index " + std::to_string(index) +
   23df8:	85ca                	c.mv	a1,s2
   23dfa:	890a                	c.mv	s2,sp
   23dfc:	854a                	c.mv	a0,s2
   23dfe:	00015317          	auipc	t1,0x15
   23e02:	6f233303          	ld	t1,1778(t1) # 394f0 <std::__cxx11::to_string(unsigned int)@@Base+0x151ce>
   23e06:	9302                	c.jalr	t1
    { return std::move(__rhs.insert(0, __lhs)); }
   23e08:	0000a617          	auipc	a2,0xa
   23e0c:	61860613          	addi	a2,a2,1560 # 2e420 <typeinfo name for dwarf::expr_context+0x250>
   23e10:	4581                	c.li	a1,0
   23e12:	854a                	c.mv	a0,s2
   23e14:	d7cf20ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   23e18:	a095                	c.j	23e7c <dwarf::line_table::get_file(unsigned int) const+0xc2>
      for (auto &ent : *this)
   23e1a:	85aa                	c.mv	a1,a0
   23e1c:	1088                	c.addi4spn	a0,sp,96
   23e1e:	e47ff0ef          	jal	ra,23c64 <dwarf::line_table::begin() const>
   23e22:	85a2                	c.mv	a1,s0
   23e24:	1188                	c.addi4spn	a0,sp,224
   23e26:	e65ff0ef          	jal	ra,23c8a <dwarf::line_table::end() const>
   23e2a:	06010993          	addi	s3,sp,96
   23e2e:	a021                	c.j	23e36 <dwarf::line_table::get_file(unsigned int) const+0x7c>
   23e30:	854e                	c.mv	a0,s3
   23e32:	b15ff0ef          	jal	ra,23946 <dwarf::line_table::iterator::operator++()>
   23e36:	676e                	c.ldsp	a4,216(sp)
   23e38:	67f6                	c.ldsp	a5,344(sp)
   23e3a:	fef71be3          	bne	a4,a5,23e30 <dwarf::line_table::get_file(unsigned int) const+0x76>
   23e3e:	770e                	c.ldsp	a4,224(sp)
   23e40:	7786                	c.ldsp	a5,96(sp)
   23e42:	fef717e3          	bne	a4,a5,23e30 <dwarf::line_table::get_file(unsigned int) const+0x76>
   23e46:	6018                	c.ld	a4,0(s0)
   23e48:	6f3c                	c.ld	a5,88(a4)
   23e4a:	6b38                	c.ld	a4,80(a4)
   23e4c:	8f99                	c.sub	a5,a4
   23e4e:	8791                	c.srai	a5,0x4
   23e50:	00009717          	auipc	a4,0x9
   23e54:	63873703          	ld	a4,1592(a4) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23e58:	02e787b3          	mul	a5,a5,a4
    if (index >= m->file_names.size())
   23e5c:	f8f4fae3          	bgeu	s1,a5,23df0 <dwarf::line_table::get_file(unsigned int) const+0x36>
	return *(this->_M_impl._M_start + __n);
   23e60:	6018                	c.ld	a4,0(s0)
   23e62:	00149793          	slli	a5,s1,0x1
   23e66:	97a6                	c.add	a5,s1
   23e68:	0792                	c.slli	a5,0x4
   23e6a:	6b28                	c.ld	a0,80(a4)
   23e6c:	953e                	c.add	a0,a5
}
   23e6e:	60ba                	c.ldsp	ra,392(sp)
   23e70:	641a                	c.ldsp	s0,384(sp)
   23e72:	74f6                	c.ldsp	s1,376(sp)
   23e74:	7956                	c.ldsp	s2,368(sp)
   23e76:	79b6                	c.ldsp	s3,360(sp)
   23e78:	6159                	c.addi16sp	sp,400
   23e7a:	8082                	c.jr	ra
   23e7c:	85aa                	c.mv	a1,a0
   23e7e:	02010913          	addi	s2,sp,32
   23e82:	854a                	c.mv	a0,s2
   23e84:	decf20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   23e88:	0000a597          	auipc	a1,0xa
   23e8c:	5b058593          	addi	a1,a1,1456 # 2e438 <typeinfo name for dwarf::expr_context+0x268>
   23e90:	854a                	c.mv	a0,s2
   23e92:	90ff20ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   23e96:	85aa                	c.mv	a1,a0
   23e98:	0088                	c.addi4spn	a0,sp,64
   23e9a:	dd6f20ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
   23e9e:	6018                	c.ld	a4,0(s0)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   23ea0:	6f3c                	c.ld	a5,88(a4)
   23ea2:	6b38                	c.ld	a4,80(a4)
   23ea4:	8f99                	c.sub	a5,a4
   23ea6:	8791                	c.srai	a5,0x4
                         std::to_string(m->file_names.size()));
   23ea8:	00009597          	auipc	a1,0x9
   23eac:	5e05b583          	ld	a1,1504(a1) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   23eb0:	02b785b3          	mul	a1,a5,a1
   23eb4:	1088                	c.addi4spn	a0,sp,96
   23eb6:	00015317          	auipc	t1,0x15
   23eba:	44a33303          	ld	t1,1098(t1) # 39300 <std::__cxx11::to_string(unsigned long)@@Base+0x1522c>
   23ebe:	9302                	c.jalr	t1
                         " exceeds file table size of " +
   23ec0:	1090                	c.addi4spn	a2,sp,96
   23ec2:	008c                	c.addi4spn	a1,sp,64
   23ec4:	1188                	c.addi4spn	a0,sp,224
   23ec6:	00015317          	auipc	t1,0x15
   23eca:	4fa33303          	ld	t1,1274(t1) # 393c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x15054>
   23ece:	9302                	c.jalr	t1
      throw out_of_range("file name index " + std::to_string(index) +
   23ed0:	118c                	c.addi4spn	a1,sp,224
   23ed2:	8526                	c.mv	a0,s1
   23ed4:	f7cf20ef          	jal	ra,16650 <std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   23ed8:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   23eda:	199c                	c.addi4spn	a5,sp,240
   23edc:	00f50463          	beq	a0,a5,23ee4 <dwarf::line_table::get_file(unsigned int) const+0x12a>
   23ee0:	e30f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23ee4:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   23ee6:	189c                	c.addi4spn	a5,sp,112
   23ee8:	00f50463          	beq	a0,a5,23ef0 <dwarf::line_table::get_file(unsigned int) const+0x136>
   23eec:	e24f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23ef0:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23ef2:	089c                	c.addi4spn	a5,sp,80
   23ef4:	00f50463          	beq	a0,a5,23efc <dwarf::line_table::get_file(unsigned int) const+0x142>
   23ef8:	e18f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23efc:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23efe:	181c                	c.addi4spn	a5,sp,48
   23f00:	00f50463          	beq	a0,a5,23f08 <dwarf::line_table::get_file(unsigned int) const+0x14e>
   23f04:	e0cf20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23f08:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   23f0a:	081c                	c.addi4spn	a5,sp,16
   23f0c:	00f50463          	beq	a0,a5,23f14 <dwarf::line_table::get_file(unsigned int) const+0x15a>
   23f10:	e00f20ef          	jal	ra,16510 <operator delete(void*)@plt>
                         std::to_string(m->file_names.size()));
   23f14:	00015617          	auipc	a2,0x15
   23f18:	5ac63603          	ld	a2,1452(a2) # 394c0 <std::out_of_range::~out_of_range()@GLIBCXX_3.4>
   23f1c:	00015597          	auipc	a1,0x15
   23f20:	6545b583          	ld	a1,1620(a1) # 39570 <typeinfo for std::out_of_range@GLIBCXX_3.4>
   23f24:	8526                	c.mv	a0,s1
   23f26:	f9af20ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   23f2a:	842a                	c.mv	s0,a0
   23f2c:	750e                	c.ldsp	a0,224(sp)
	if (!_M_is_local())
   23f2e:	199c                	c.addi4spn	a5,sp,240
   23f30:	00f50463          	beq	a0,a5,23f38 <dwarf::line_table::get_file(unsigned int) const+0x17e>
   23f34:	ddcf20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23f38:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   23f3a:	189c                	c.addi4spn	a5,sp,112
   23f3c:	00f50463          	beq	a0,a5,23f44 <dwarf::line_table::get_file(unsigned int) const+0x18a>
   23f40:	dd0f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23f44:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   23f46:	089c                	c.addi4spn	a5,sp,80
   23f48:	00f50463          	beq	a0,a5,23f50 <dwarf::line_table::get_file(unsigned int) const+0x196>
   23f4c:	dc4f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23f50:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   23f52:	181c                	c.addi4spn	a5,sp,48
   23f54:	00f50463          	beq	a0,a5,23f5c <dwarf::line_table::get_file(unsigned int) const+0x1a2>
   23f58:	db8f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   23f5c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   23f5e:	081c                	c.addi4spn	a5,sp,16
   23f60:	00f50463          	beq	a0,a5,23f68 <dwarf::line_table::get_file(unsigned int) const+0x1ae>
   23f64:	dacf20ef          	jal	ra,16510 <operator delete(void*)@plt>
   23f68:	8526                	c.mv	a0,s1
   23f6a:	d66f20ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   23f6e:	8522                	c.mv	a0,s0
   23f70:	f80f20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   23f74:	842a                	c.mv	s0,a0
   23f76:	b7c9                	c.j	23f38 <dwarf::line_table::get_file(unsigned int) const+0x17e>
   23f78:	842a                	c.mv	s0,a0
   23f7a:	b7e9                	c.j	23f44 <dwarf::line_table::get_file(unsigned int) const+0x18a>
   23f7c:	842a                	c.mv	s0,a0
   23f7e:	bfc9                	c.j	23f50 <dwarf::line_table::get_file(unsigned int) const+0x196>
   23f80:	842a                	c.mv	s0,a0
   23f82:	bfe9                	c.j	23f5c <dwarf::line_table::get_file(unsigned int) const+0x1a2>

0000000000023f84 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   23f84:	8082                	c.jr	ra

0000000000023f86 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   23f86:	1141                	c.addi	sp,-16
   23f88:	e406                	c.sdsp	ra,8(sp)
   23f8a:	d86f20ef          	jal	ra,16510 <operator delete(void*)@plt>
   23f8e:	60a2                	c.ldsp	ra,8(sp)
   23f90:	0141                	c.addi	sp,16
   23f92:	8082                	c.jr	ra

0000000000023f94 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   23f94:	1141                	c.addi	sp,-16
   23f96:	e406                	c.sdsp	ra,8(sp)
   23f98:	d78f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   23f9c:	60a2                	c.ldsp	ra,8(sp)
   23f9e:	0141                	c.addi	sp,16
   23fa0:	8082                	c.jr	ra

0000000000023fa2 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   23fa2:	1141                	c.addi	sp,-16
   23fa4:	e406                	c.sdsp	ra,8(sp)
   23fa6:	e022                	c.sdsp	s0,0(sp)
   23fa8:	03850413          	addi	s0,a0,56
	    ||
   23fac:	00015797          	auipc	a5,0x15
   23fb0:	58c7b783          	ld	a5,1420(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   23fb4:	02f58a63          	beq	a1,a5,23fe8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   23fb8:	6588                	c.ld	a0,8(a1)
   23fba:	00015797          	auipc	a5,0x15
   23fbe:	4567b783          	ld	a5,1110(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   23fc2:	02f50363          	beq	a0,a5,23fe8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   23fc6:	00054703          	lbu	a4,0(a0)
   23fca:	02a00793          	addi	a5,zero,42
   23fce:	02f70263          	beq	a4,a5,23ff2 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   23fd2:	00015597          	auipc	a1,0x15
   23fd6:	43e5b583          	ld	a1,1086(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   23fda:	b86f20ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   23fde:	00153513          	sltiu	a0,a0,1
   23fe2:	40a00533          	sub	a0,zero,a0
   23fe6:	8c69                	c.and	s0,a0
      }
   23fe8:	8522                	c.mv	a0,s0
   23fea:	60a2                	c.ldsp	ra,8(sp)
   23fec:	6402                	c.ldsp	s0,0(sp)
   23fee:	0141                	c.addi	sp,16
   23ff0:	8082                	c.jr	ra
	return nullptr;
   23ff2:	4401                	c.li	s0,0
   23ff4:	bfd5                	c.j	23fe8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

0000000000023ff6 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   23ff6:	1101                	c.addi	sp,-32
   23ff8:	ec06                	c.sdsp	ra,24(sp)
   23ffa:	e822                	c.sdsp	s0,16(sp)
   23ffc:	e426                	c.sdsp	s1,8(sp)
   23ffe:	e04a                	c.sdsp	s2,0(sp)
   24000:	84aa                	c.mv	s1,a0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24002:	6540                	c.ld	s0,136(a0)
   24004:	09053903          	ld	s2,144(a0)
	  for (; __first != __last; ++__first)
   24008:	05241d63          	bne	s0,s2,24062 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
	_M_deallocate(_M_impl._M_start,
   2400c:	64c8                	c.ld	a0,136(s1)
	if (__p)
   2400e:	c119                	c.beqz	a0,24014 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1e>
   24010:	d00f20ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24014:	78a0                	c.ld	s0,112(s1)
   24016:	0784b903          	ld	s2,120(s1)
   2401a:	07241063          	bne	s0,s2,2407a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x84>
	_M_deallocate(_M_impl._M_start,
   2401e:	78a8                	c.ld	a0,112(s1)
	if (__p)
   24020:	c119                	c.beqz	a0,24026 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x30>
   24022:	ceef20ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   24026:	6ca8                	c.ld	a0,88(s1)
	if (__p)
   24028:	c119                	c.beqz	a0,2402e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x38>
   2402a:	ce6f20ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2402e:	60a0                	c.ld	s0,64(s1)
   24030:	cc19                	c.beqz	s0,2404e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
    if (__is_single_threaded())
   24032:	00015797          	auipc	a5,0x15
   24036:	44e7b783          	ld	a5,1102(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2403a:	0007c783          	lbu	a5,0(a5)
   2403e:	c7b1                	c.beqz	a5,2408a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x94>
    _Atomic_word __result = *__mem;
   24040:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   24042:	fff5079b          	addiw	a5,a0,-1
   24046:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   24048:	4785                	c.li	a5,1
   2404a:	04f50663          	beq	a0,a5,24096 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xa0>
      }
   2404e:	60e2                	c.ldsp	ra,24(sp)
   24050:	6442                	c.ldsp	s0,16(sp)
   24052:	64a2                	c.ldsp	s1,8(sp)
   24054:	6902                	c.ldsp	s2,0(sp)
   24056:	6105                	c.addi16sp	sp,32
   24058:	8082                	c.jr	ra
   2405a:	03040413          	addi	s0,s0,48
   2405e:	fa8907e3          	beq	s2,s0,2400c <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x16>
   24062:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24064:	01040793          	addi	a5,s0,16
   24068:	fef509e3          	beq	a0,a5,2405a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   2406c:	ca4f20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   24070:	b7ed                	c.j	2405a <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x64>
   24072:	02040413          	addi	s0,s0,32
   24076:	fa8904e3          	beq	s2,s0,2401e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x28>
      { return _M_dataplus._M_p; }
   2407a:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   2407c:	01040793          	addi	a5,s0,16
   24080:	fef509e3          	beq	a0,a5,24072 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
   24084:	c8cf20ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   24088:	b7ed                	c.j	24072 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x7c>
      return __exchange_and_add(__mem, __val);
   2408a:	55fd                	c.li	a1,-1
   2408c:	03040513          	addi	a0,s0,48
   24090:	af0f20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   24094:	bf55                	c.j	24048 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x52>
	_M_dispose();
   24096:	601c                	c.ld	a5,0(s0)
   24098:	6b9c                	c.ld	a5,16(a5)
   2409a:	8522                	c.mv	a0,s0
   2409c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2409e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   240a2:	00015797          	auipc	a5,0x15
   240a6:	3de7b783          	ld	a5,990(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   240aa:	0007c783          	lbu	a5,0(a5)
   240ae:	cf89                	c.beqz	a5,240c8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xd2>
    _Atomic_word __result = *__mem;
   240b0:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   240b2:	fff5079b          	addiw	a5,a0,-1
   240b6:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   240b8:	4785                	c.li	a5,1
   240ba:	f8f51ae3          	bne	a0,a5,2404e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
	    _M_destroy();
   240be:	601c                	c.ld	a5,0(s0)
   240c0:	6f9c                	c.ld	a5,24(a5)
   240c2:	8522                	c.mv	a0,s0
   240c4:	9782                	c.jalr	a5
      }
   240c6:	b761                	c.j	2404e <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x58>
      return __exchange_and_add(__mem, __val);
   240c8:	55fd                	c.li	a1,-1
   240ca:	03440513          	addi	a0,s0,52
   240ce:	ab2f20ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   240d2:	b7dd                	c.j	240b8 <std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc2>

00000000000240d4 <std::__cxx11::to_string(unsigned long)>:
  {
   240d4:	1101                	c.addi	sp,-32
   240d6:	ec06                	c.sdsp	ra,24(sp)
   240d8:	e822                	c.sdsp	s0,16(sp)
   240da:	e426                	c.sdsp	s1,8(sp)
   240dc:	84aa                	c.mv	s1,a0
   240de:	842e                	c.mv	s0,a1
	  if (__value < (unsigned)__base) return __n;
   240e0:	47a5                	c.li	a5,9
   240e2:	10b7ff63          	bgeu	a5,a1,24200 <std::__cxx11::to_string(unsigned long)+0x12c>
	  if (__value < __b2) return __n + 1;
   240e6:	06300793          	addi	a5,zero,99
   240ea:	04b7fd63          	bgeu	a5,a1,24144 <std::__cxx11::to_string(unsigned long)+0x70>
	  if (__value < __b3) return __n + 2;
   240ee:	3e700793          	addi	a5,zero,999
   240f2:	06b7fc63          	bgeu	a5,a1,2416a <std::__cxx11::to_string(unsigned long)+0x96>
	  if (__value < __b4) return __n + 3;
   240f6:	6789                	c.lui	a5,0x2
   240f8:	70f78793          	addi	a5,a5,1807 # 270f <__abi_tag-0xdb85>
   240fc:	10b7f063          	bgeu	a5,a1,241fc <std::__cxx11::to_string(unsigned long)+0x128>
   24100:	872e                	c.mv	a4,a1
      unsigned __n = 1;
   24102:	4585                	c.li	a1,1
	  __value /= __b4;
   24104:	6609                	c.lui	a2,0x2
   24106:	71060613          	addi	a2,a2,1808 # 2710 <__abi_tag-0xdb84>
	  if (__value < (unsigned)__base) return __n;
   2410a:	66e1                	c.lui	a3,0x18
   2410c:	69f68693          	addi	a3,a3,1695 # 1869f <dwarf::type_unit::type_unit(dwarf::dwarf const&, unsigned long)+0x4f9>
	  if (__value < __b2) return __n + 1;
   24110:	000f4537          	lui	a0,0xf4
   24114:	23f50513          	addi	a0,a0,575 # f423f <__global_pointer$+0xbaa3f>
	  if (__value < __b3) return __n + 2;
   24118:	00989837          	lui	a6,0x989
   2411c:	67f80813          	addi	a6,a6,1663 # 98967f <__global_pointer$+0x94fe7f>
	  if (__value < __b4) return __n + 3;
   24120:	05f5e8b7          	lui	a7,0x5f5e
   24124:	0ff88893          	addi	a7,a7,255 # 5f5e0ff <__global_pointer$+0x5f248ff>
   24128:	87ba                	c.mv	a5,a4
	  __value /= __b4;
   2412a:	02c75733          	divu	a4,a4,a2
	  __n += 4;
   2412e:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   24130:	02f6ff63          	bgeu	a3,a5,2416e <std::__cxx11::to_string(unsigned long)+0x9a>
	  if (__value < __b2) return __n + 1;
   24134:	00f57963          	bgeu	a0,a5,24146 <std::__cxx11::to_string(unsigned long)+0x72>
	  if (__value < __b3) return __n + 2;
   24138:	02f87a63          	bgeu	a6,a5,2416c <std::__cxx11::to_string(unsigned long)+0x98>
	  if (__value < __b4) return __n + 3;
   2413c:	fef8e6e3          	bltu	a7,a5,24128 <std::__cxx11::to_string(unsigned long)+0x54>
   24140:	258d                	c.addiw	a1,3
   24142:	a035                	c.j	2416e <std::__cxx11::to_string(unsigned long)+0x9a>
      unsigned __n = 1;
   24144:	4585                	c.li	a1,1
	  if (__value < __b2) return __n + 1;
   24146:	2585                	c.addiw	a1,1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24148:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2414c:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2414e:	4601                	c.li	a2,0
   24150:	1582                	c.slli	a1,0x20
   24152:	9181                	c.srli	a1,0x20
   24154:	8526                	c.mv	a0,s1
   24156:	c1af20ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2415a:	6090                	c.ld	a2,0(s1)
      while (__val >= 100)
   2415c:	06300793          	addi	a5,zero,99
   24160:	0687f763          	bgeu	a5,s0,241ce <std::__cxx11::to_string(unsigned long)+0xfa>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24164:	6494                	c.ld	a3,8(s1)
      unsigned __pos = __len - 1;
   24166:	36fd                	c.addiw	a3,-1
   24168:	a839                	c.j	24186 <std::__cxx11::to_string(unsigned long)+0xb2>
      unsigned __n = 1;
   2416a:	4585                	c.li	a1,1
	  if (__value < __b3) return __n + 2;
   2416c:	2589                	c.addiw	a1,2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2416e:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   24172:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   24174:	4601                	c.li	a2,0
   24176:	1582                	c.slli	a1,0x20
   24178:	9181                	c.srli	a1,0x20
   2417a:	8526                	c.mv	a0,s1
   2417c:	bf4f20ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   24180:	6090                	c.ld	a2,0(s1)
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24182:	6494                	c.ld	a3,8(s1)
      unsigned __pos = __len - 1;
   24184:	36fd                	c.addiw	a3,-1
	  auto const __num = (__val % 100) * 2;
   24186:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2418a:	00015317          	auipc	t1,0x15
   2418e:	2de33303          	ld	t1,734(t1) # 39468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbad8>
      while (__val >= 100)
   24192:	6889                	c.lui	a7,0x2
   24194:	70f88893          	addi	a7,a7,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   24198:	02b477b3          	remu	a5,s0,a1
   2419c:	0786                	c.slli	a5,0x1
   2419e:	8522                	c.mv	a0,s0
	  __val /= 100;
   241a0:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   241a4:	02069713          	slli	a4,a3,0x20
   241a8:	9301                	c.srli	a4,0x20
   241aa:	9732                	c.add	a4,a2
   241ac:	979a                	c.add	a5,t1
   241ae:	0017c803          	lbu	a6,1(a5)
   241b2:	01070023          	sb	a6,0(a4)
	  __first[__pos - 1] = __digits[__num];
   241b6:	fff6871b          	addiw	a4,a3,-1
   241ba:	1702                	c.slli	a4,0x20
   241bc:	9301                	c.srli	a4,0x20
   241be:	9732                	c.add	a4,a2
   241c0:	0007c783          	lbu	a5,0(a5)
   241c4:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   241c8:	36f9                	c.addiw	a3,-2
      while (__val >= 100)
   241ca:	fca8e7e3          	bltu	a7,a0,24198 <std::__cxx11::to_string(unsigned long)+0xc4>
      if (__val >= 10)
   241ce:	47a5                	c.li	a5,9
   241d0:	0287fa63          	bgeu	a5,s0,24204 <std::__cxx11::to_string(unsigned long)+0x130>
	  auto const __num = __val * 2;
   241d4:	0406                	c.slli	s0,0x1
	  __first[1] = __digits[__num + 1];
   241d6:	00015797          	auipc	a5,0x15
   241da:	2927b783          	ld	a5,658(a5) # 39468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbad8>
   241de:	97a2                	c.add	a5,s0
   241e0:	0017c703          	lbu	a4,1(a5)
   241e4:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   241e8:	0007c403          	lbu	s0,0(a5)
   241ec:	00860023          	sb	s0,0(a2)
  }
   241f0:	8526                	c.mv	a0,s1
   241f2:	60e2                	c.ldsp	ra,24(sp)
   241f4:	6442                	c.ldsp	s0,16(sp)
   241f6:	64a2                	c.ldsp	s1,8(sp)
   241f8:	6105                	c.addi16sp	sp,32
   241fa:	8082                	c.jr	ra
      unsigned __n = 1;
   241fc:	4585                	c.li	a1,1
   241fe:	b789                	c.j	24140 <std::__cxx11::to_string(unsigned long)+0x6c>
   24200:	4585                	c.li	a1,1
   24202:	b799                	c.j	24148 <std::__cxx11::to_string(unsigned long)+0x74>
	__first[0] = '0' + __val;
   24204:	0304041b          	addiw	s0,s0,48
   24208:	0ff47413          	andi	s0,s0,255
   2420c:	b7c5                	c.j	241ec <std::__cxx11::to_string(unsigned long)+0x118>

000000000002420e <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)>:
      const unsigned __b2 = __base  * __base;
   2420e:	02b586bb          	mulw	a3,a1,a1
   24212:	0006889b          	addiw	a7,a3,0
      const unsigned __b3 = __b2 * __base;
   24216:	0005881b          	addiw	a6,a1,0
   2421a:	02b686bb          	mulw	a3,a3,a1
   2421e:	0006831b          	addiw	t1,a3,0
      const unsigned long __b4 = __b3 * __base;
   24222:	02b686bb          	mulw	a3,a3,a1
   24226:	0006859b          	addiw	a1,a3,0
   2422a:	1682                	c.slli	a3,0x20
   2422c:	9281                	c.srli	a3,0x20
	  if (__value < (unsigned)__base) return __n;
   2422e:	05056763          	bltu	a0,a6,2427c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x6e>
	  if (__value < __b2) return __n + 1;
   24232:	03156c63          	bltu	a0,a7,2426a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x5c>
	  if (__value < __b3) return __n + 2;
   24236:	02656d63          	bltu	a0,t1,24270 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x62>
	  if (__value < __b4) return __n + 3;
   2423a:	02051793          	slli	a5,a0,0x20
   2423e:	9381                	c.srli	a5,0x20
   24240:	02b56b63          	bltu	a0,a1,24276 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x68>
      unsigned __n = 1;
   24244:	4505                	c.li	a0,1
   24246:	567d                	c.li	a2,-1
   24248:	9201                	c.srli	a2,0x20
	  __value /= __b4;
   2424a:	02d7d7b3          	divu	a5,a5,a3
   2424e:	0007871b          	addiw	a4,a5,0
	  __n += 4;
   24252:	2511                	c.addiw	a0,4
	  if (__value < (unsigned)__base) return __n;
   24254:	03076363          	bltu	a4,a6,2427a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x6c>
	  if (__value < __b2) return __n + 1;
   24258:	01176a63          	bltu	a4,a7,2426c <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x5e>
	  if (__value < __b3) return __n + 2;
   2425c:	00676b63          	bltu	a4,t1,24272 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x64>
   24260:	8ff1                	c.and	a5,a2
	  if (__value < __b4) return __n + 3;
   24262:	feb774e3          	bgeu	a4,a1,2424a <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x3c>
   24266:	250d                	c.addiw	a0,3
   24268:	8082                	c.jr	ra
      unsigned __n = 1;
   2426a:	4505                	c.li	a0,1
	  if (__value < __b2) return __n + 1;
   2426c:	2505                	c.addiw	a0,1
   2426e:	8082                	c.jr	ra
      unsigned __n = 1;
   24270:	4505                	c.li	a0,1
	  if (__value < __b3) return __n + 2;
   24272:	2509                	c.addiw	a0,2
   24274:	8082                	c.jr	ra
      unsigned __n = 1;
   24276:	4505                	c.li	a0,1
   24278:	b7fd                	c.j	24266 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)+0x58>
   2427a:	8082                	c.jr	ra
   2427c:	4505                	c.li	a0,1
    }
   2427e:	8082                	c.jr	ra

0000000000024280 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)>:
      unsigned __pos = __len - 1;
   24280:	35fd                	c.addiw	a1,-1
      while (__val >= 100)
   24282:	06300793          	addi	a5,zero,99
   24286:	04c7ff63          	bgeu	a5,a2,242e4 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x64>
	  auto const __num = (__val % 100) * 2;
   2428a:	06400893          	addi	a7,zero,100
	  __first[__pos] = __digits[__num + 1];
   2428e:	00015817          	auipc	a6,0x15
   24292:	0d283803          	ld	a6,210(a6) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
      while (__val >= 100)
   24296:	6e09                	c.lui	t3,0x2
   24298:	70fe0e13          	addi	t3,t3,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2429c:	031677bb          	remuw	a5,a2,a7
   242a0:	0017979b          	slliw	a5,a5,0x1
   242a4:	0006031b          	addiw	t1,a2,0
	  __val /= 100;
   242a8:	0316563b          	divuw	a2,a2,a7
	  __first[__pos] = __digits[__num + 1];
   242ac:	02059693          	slli	a3,a1,0x20
   242b0:	9281                	c.srli	a3,0x20
   242b2:	96aa                	c.add	a3,a0
   242b4:	0017871b          	addiw	a4,a5,1
   242b8:	1702                	c.slli	a4,0x20
   242ba:	9301                	c.srli	a4,0x20
   242bc:	9742                	c.add	a4,a6
   242be:	00074703          	lbu	a4,0(a4)
   242c2:	00e68023          	sb	a4,0(a3)
	  __first[__pos - 1] = __digits[__num];
   242c6:	fff5871b          	addiw	a4,a1,-1
   242ca:	1702                	c.slli	a4,0x20
   242cc:	9301                	c.srli	a4,0x20
   242ce:	972a                	c.add	a4,a0
   242d0:	1782                	c.slli	a5,0x20
   242d2:	9381                	c.srli	a5,0x20
   242d4:	97c2                	c.add	a5,a6
   242d6:	0007c783          	lbu	a5,0(a5)
   242da:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   242de:	35f9                	c.addiw	a1,-2
      while (__val >= 100)
   242e0:	fa6e6ee3          	bltu	t3,t1,2429c <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x1c>
      if (__val >= 10)
   242e4:	47a5                	c.li	a5,9
   242e6:	02c7f963          	bgeu	a5,a2,24318 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x98>
	  auto const __num = __val * 2;
   242ea:	0016161b          	slliw	a2,a2,0x1
	  __first[1] = __digits[__num + 1];
   242ee:	00015717          	auipc	a4,0x15
   242f2:	07273703          	ld	a4,114(a4) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
   242f6:	0016079b          	addiw	a5,a2,1
   242fa:	1782                	c.slli	a5,0x20
   242fc:	9381                	c.srli	a5,0x20
   242fe:	97ba                	c.add	a5,a4
   24300:	0007c783          	lbu	a5,0(a5)
   24304:	00f500a3          	sb	a5,1(a0)
	  __first[0] = __digits[__num];
   24308:	1602                	c.slli	a2,0x20
   2430a:	9201                	c.srli	a2,0x20
   2430c:	9732                	c.add	a4,a2
   2430e:	00074603          	lbu	a2,0(a4)
   24312:	00c50023          	sb	a2,0(a0)
    }
   24316:	8082                	c.jr	ra
	__first[0] = '0' + __val;
   24318:	0306061b          	addiw	a2,a2,48
   2431c:	0ff67613          	andi	a2,a2,255
   24320:	bfcd                	c.j	24312 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)+0x92>

0000000000024322 <std::__cxx11::to_string(unsigned int)>:
  {
   24322:	1101                	c.addi	sp,-32
   24324:	ec06                	c.sdsp	ra,24(sp)
   24326:	e822                	c.sdsp	s0,16(sp)
   24328:	e426                	c.sdsp	s1,8(sp)
   2432a:	842a                	c.mv	s0,a0
   2432c:	84ae                	c.mv	s1,a1
    string __str(__detail::__to_chars_len(__val), '\0');
   2432e:	45a9                	c.li	a1,10
   24330:	8526                	c.mv	a0,s1
   24332:	00015317          	auipc	t1,0x15
   24336:	16633303          	ld	t1,358(t1) # 39498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x1528a>
   2433a:	9302                	c.jalr	t1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2433c:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   24340:	e01c                	c.sd	a5,0(s0)
      { _M_construct(__n, __c); }
   24342:	4601                	c.li	a2,0
   24344:	02051593          	slli	a1,a0,0x20
   24348:	9181                	c.srli	a1,0x20
   2434a:	8522                	c.mv	a0,s0
   2434c:	a24f20ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
   24350:	8626                	c.mv	a2,s1
   24352:	440c                	c.lw	a1,8(s0)
   24354:	6008                	c.ld	a0,0(s0)
   24356:	00015317          	auipc	t1,0x15
   2435a:	16233303          	ld	t1,354(t1) # 394b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15238>
   2435e:	9302                	c.jalr	t1
  }
   24360:	8522                	c.mv	a0,s0
   24362:	60e2                	c.ldsp	ra,24(sp)
   24364:	6442                	c.ldsp	s0,16(sp)
   24366:	64a2                	c.ldsp	s1,8(sp)
   24368:	6105                	c.addi16sp	sp,32
   2436a:	8082                	c.jr	ra

000000000002436c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
   2436c:	1101                	c.addi	sp,-32
   2436e:	ec06                	c.sdsp	ra,24(sp)
   24370:	e822                	c.sdsp	s0,16(sp)
   24372:	e426                	c.sdsp	s1,8(sp)
   24374:	e04a                	c.sdsp	s2,0(sp)
   24376:	842a                	c.mv	s0,a0
   24378:	852e                	c.mv	a0,a1
   2437a:	87b2                	c.mv	a5,a2
      { return _M_string_length; }
   2437c:	6598                	c.ld	a4,8(a1)
   2437e:	6610                	c.ld	a2,8(a2)
	  const auto __size = __lhs.size() + __rhs.size();
   24380:	00e60833          	add	a6,a2,a4
      { return _M_dataplus._M_p; }
   24384:	6194                	c.ld	a3,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24386:	05c1                	c.addi	a1,16
	return _M_is_local() ? size_type(_S_local_capacity)
   24388:	06b68163          	beq	a3,a1,243ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7e>
   2438c:	690c                	c.ld	a1,16(a0)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   2438e:	0105fb63          	bgeu	a1,a6,243a4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x38>
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24392:	01078593          	addi	a1,a5,16
	return _M_is_local() ? size_type(_S_local_capacity)
   24396:	0007b883          	ld	a7,0(a5)
   2439a:	04b88a63          	beq	a7,a1,243ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x82>
   2439e:	6b8c                	c.ld	a1,16(a5)
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
   243a0:	0505f963          	bgeu	a1,a6,243f2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x86>
      { return _M_dataplus._M_p; }
   243a4:	638c                	c.ld	a1,0(a5)
	if (this->max_size() - (this->size() - __n1) < __n2)
   243a6:	57fd                	c.li	a5,-1
   243a8:	8389                	c.srli	a5,0x2
   243aa:	8f99                	c.sub	a5,a4
   243ac:	08c7e463          	bltu	a5,a2,24434 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xc8>
	return _M_append(__s, __n);
   243b0:	810f20ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   243b4:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   243b6:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   243ba:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   243bc:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   243be:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   243c2:	07278f63          	beq	a5,s2,24440 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd4>
      { _M_dataplus._M_p = __p; }
   243c6:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   243c8:	689c                	c.ld	a5,16(s1)
   243ca:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   243cc:	649c                	c.ld	a5,8(s1)
   243ce:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   243d0:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   243d4:	0004b423          	sd	zero,8(s1)
   243d8:	00048823          	sb	zero,16(s1)
    }
   243dc:	8522                	c.mv	a0,s0
   243de:	60e2                	c.ldsp	ra,24(sp)
   243e0:	6442                	c.ldsp	s0,16(sp)
   243e2:	64a2                	c.ldsp	s1,8(sp)
   243e4:	6902                	c.ldsp	s2,0(sp)
   243e6:	6105                	c.addi16sp	sp,32
   243e8:	8082                	c.jr	ra
	return _M_is_local() ? size_type(_S_local_capacity)
   243ea:	45bd                	c.li	a1,15
   243ec:	b74d                	c.j	2438e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x22>
   243ee:	45bd                	c.li	a1,15
   243f0:	bf45                	c.j	243a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x34>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   243f2:	4601                	c.li	a2,0
   243f4:	4581                	c.li	a1,0
   243f6:	853e                	c.mv	a0,a5
   243f8:	a68f20ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   243fc:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   243fe:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24402:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24404:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24406:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2440a:	01278e63          	beq	a5,s2,24426 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xba>
      { _M_dataplus._M_p = __p; }
   2440e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24410:	689c                	c.ld	a5,16(s1)
   24412:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   24414:	649c                	c.ld	a5,8(s1)
   24416:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   24418:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2441c:	0004b423          	sd	zero,8(s1)
   24420:	00048823          	sb	zero,16(s1)
      }
   24424:	bf65                	c.j	243dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24426:	6490                	c.ld	a2,8(s1)
   24428:	0605                	c.addi	a2,1
	if (__n == 0)
   2442a:	d66d                	c.beqz	a2,24414 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2442c:	85ca                	c.mv	a1,s2
   2442e:	982f20ef          	jal	ra,165b0 <memcpy@plt>
   24432:	b7cd                	c.j	24414 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xa8>
	  __throw_length_error(__N(__s));
   24434:	00009517          	auipc	a0,0x9
   24438:	31450513          	addi	a0,a0,788 # 2d748 <std::piecewise_construct+0x2b0>
   2443c:	804f20ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24440:	6490                	c.ld	a2,8(s1)
   24442:	0605                	c.addi	a2,1
	if (__n == 0)
   24444:	d641                	c.beqz	a2,243cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24446:	85ca                	c.mv	a1,s2
   24448:	968f20ef          	jal	ra,165b0 <memcpy@plt>
   2444c:	b741                	c.j	243cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>

000000000002444e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)>:
      if (__n != 0)
   2444e:	0e058f63          	beq	a1,zero,2454c <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xfe>
    vector<_Tp, _Alloc>::
   24452:	7139                	c.addi16sp	sp,-64
   24454:	fc06                	c.sdsp	ra,56(sp)
   24456:	f822                	c.sdsp	s0,48(sp)
   24458:	f426                	c.sdsp	s1,40(sp)
   2445a:	f04a                	c.sdsp	s2,32(sp)
   2445c:	ec4e                	c.sdsp	s3,24(sp)
   2445e:	e852                	c.sdsp	s4,16(sp)
   24460:	e456                	c.sdsp	s5,8(sp)
   24462:	89aa                	c.mv	s3,a0
   24464:	842e                	c.mv	s0,a1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24466:	6514                	c.ld	a3,8(a0)
   24468:	6104                	c.ld	s1,0(a0)
   2446a:	409684b3          	sub	s1,a3,s1
	  if (__size > max_size() || __navail > max_size() - __size)
   2446e:	57fd                	c.li	a5,-1
   24470:	8385                	c.srli	a5,0x1
   24472:	8f85                	c.sub	a5,s1
					 - this->_M_impl._M_finish);
   24474:	6918                	c.ld	a4,16(a0)
   24476:	8f15                	c.sub	a4,a3
	  if (__navail >= __n)
   24478:	04b76063          	bltu	a4,a1,244b8 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x6a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   2447c:	00068023          	sb	zero,0(a3)
	      ++__first;
   24480:	00168513          	addi	a0,a3,1
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   24484:	4785                	c.li	a5,1
   24486:	00f59d63          	bne	a1,a5,244a0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x52>
	      this->_M_impl._M_finish =
   2448a:	00a9b423          	sd	a0,8(s3)
    }
   2448e:	70e2                	c.ldsp	ra,56(sp)
   24490:	7442                	c.ldsp	s0,48(sp)
   24492:	74a2                	c.ldsp	s1,40(sp)
   24494:	7902                	c.ldsp	s2,32(sp)
   24496:	69e2                	c.ldsp	s3,24(sp)
   24498:	6a42                	c.ldsp	s4,16(sp)
   2449a:	6aa2                	c.ldsp	s5,8(sp)
   2449c:	6121                	c.addi16sp	sp,64
   2449e:	8082                	c.jr	ra
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   244a0:	00b684b3          	add	s1,a3,a1
      if (const size_t __len = __last - __first)
   244a4:	fff58613          	addi	a2,a1,-1
   244a8:	e219                	c.bnez	a2,244ae <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x60>
      return __first + __n;
   244aa:	8526                	c.mv	a0,s1
   244ac:	bff9                	c.j	2448a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x3c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   244ae:	4581                	c.li	a1,0
   244b0:	930f20ef          	jal	ra,165e0 <memset@plt>
      return __first + __n;
   244b4:	8526                	c.mv	a0,s1
   244b6:	bfd1                	c.j	2448a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x3c>
	if (max_size() - size() < __n)
   244b8:	04b7e763          	bltu	a5,a1,24506 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xb8>
	const size_type __len = size() + (std::max)(size(), __n);
   244bc:	87a6                	c.mv	a5,s1
   244be:	00b4f363          	bgeu	s1,a1,244c4 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x76>
   244c2:	87ae                	c.mv	a5,a1
   244c4:	97a6                	c.add	a5,s1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   244c6:	0497e663          	bltu	a5,s1,24512 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xc4>
   244ca:	8a3e                	c.mv	s4,a5
   244cc:	0007d563          	bge	a5,zero,244d6 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x88>
   244d0:	5a7d                	c.li	s4,-1
   244d2:	001a5a13          	srli	s4,s4,0x1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   244d6:	4901                	c.li	s2,0
   244d8:	c789                	c.beqz	a5,244e2 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x94>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   244da:	8552                	c.mv	a0,s4
   244dc:	844f20ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   244e0:	892a                	c.mv	s2,a0
		      std::__uninitialized_default_n_a(__new_start + __size,
   244e2:	00990533          	add	a0,s2,s1
   244e6:	00050023          	sb	zero,0(a0)
      if (__n <= 0)
   244ea:	4785                	c.li	a5,1
   244ec:	02f41763          	bne	s0,a5,2451a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xcc>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   244f0:	0009ba83          	ld	s5,0(s3)
      ptrdiff_t __count = __last - __first;
   244f4:	0089b603          	ld	a2,8(s3)
   244f8:	41560633          	sub	a2,a2,s5
      if (__count > 0)
   244fc:	02c04763          	blt	zero,a2,2452a <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xdc>
	if (__p)
   24500:	020a8c63          	beq	s5,zero,24538 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xea>
   24504:	a03d                	c.j	24532 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xe4>
	  __throw_length_error(__N(__s));
   24506:	00009517          	auipc	a0,0x9
   2450a:	c6250513          	addi	a0,a0,-926 # 2d168 <std::_Sp_make_shared_tag::_S_ti()::__tag+0x10>
   2450e:	f33f10ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24512:	5a7d                	c.li	s4,-1
   24514:	001a5a13          	srli	s4,s4,0x1
   24518:	b7c9                	c.j	244da <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x8c>
      if (const size_t __len = __last - __first)
   2451a:	fff40613          	addi	a2,s0,-1
   2451e:	da69                	c.beqz	a2,244f0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xa2>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
   24520:	4581                	c.li	a1,0
   24522:	0505                	c.addi	a0,1
   24524:	8bcf20ef          	jal	ra,165e0 <memset@plt>
   24528:	b7e1                	c.j	244f0 <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0xa2>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   2452a:	85d6                	c.mv	a1,s5
   2452c:	854a                	c.mv	a0,s2
   2452e:	a52f20ef          	jal	ra,16780 <memmove@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24532:	8556                	c.mv	a0,s5
   24534:	fddf10ef          	jal	ra,16510 <operator delete(void*)@plt>
	      this->_M_impl._M_start = __new_start;
   24538:	0129b023          	sd	s2,0(s3)
	      this->_M_impl._M_finish = __new_start + __size + __n;
   2453c:	94a2                	c.add	s1,s0
   2453e:	94ca                	c.add	s1,s2
   24540:	0099b423          	sd	s1,8(s3)
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   24544:	9952                	c.add	s2,s4
   24546:	0129b823          	sd	s2,16(s3)
    }
   2454a:	b791                	c.j	2448e <std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)+0x40>
   2454c:	8082                	c.jr	ra

000000000002454e <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
      basic_string<_CharT, _Traits, _Alloc>::
   2454e:	7179                	c.addi16sp	sp,-48
   24550:	f406                	c.sdsp	ra,40(sp)
   24552:	f022                	c.sdsp	s0,32(sp)
   24554:	ec26                	c.sdsp	s1,24(sp)
   24556:	e84a                	c.sdsp	s2,16(sp)
   24558:	842a                	c.mv	s0,a0
   2455a:	892e                	c.mv	s2,a1
   2455c:	40b604b3          	sub	s1,a2,a1
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   24560:	e426                	c.sdsp	s1,8(sp)
	if (__dnew > size_type(_S_local_capacity))
   24562:	47bd                	c.li	a5,15
   24564:	0297e663          	bltu	a5,s1,24590 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x42>
      { return _M_dataplus._M_p; }
   24568:	6108                	c.ld	a0,0(a0)
	if (__n == 1)
   2456a:	4785                	c.li	a5,1
   2456c:	02f49e63          	bne	s1,a5,245a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x5a>
	__c1 = __c2;
   24570:	0005c783          	lbu	a5,0(a1)
   24574:	00f50023          	sb	a5,0(a0)
	_M_set_length(__dnew);
   24578:	6722                	c.ldsp	a4,8(sp)
      { _M_string_length = __length; }
   2457a:	e418                	c.sd	a4,8(s0)
   2457c:	601c                	c.ld	a5,0(s0)
   2457e:	97ba                	c.add	a5,a4
   24580:	00078023          	sb	zero,0(a5)
      }
   24584:	70a2                	c.ldsp	ra,40(sp)
   24586:	7402                	c.ldsp	s0,32(sp)
   24588:	64e2                	c.ldsp	s1,24(sp)
   2458a:	6942                	c.ldsp	s2,16(sp)
   2458c:	6145                	c.addi16sp	sp,48
   2458e:	8082                	c.jr	ra
	    _M_data(_M_create(__dnew, size_type(0)));
   24590:	4601                	c.li	a2,0
   24592:	002c                	c.addi4spn	a1,sp,8
   24594:	97cf20ef          	jal	ra,16710 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
      { _M_dataplus._M_p = __p; }
   24598:	e008                	c.sd	a0,0(s0)
      { _M_allocated_capacity = __capacity; }
   2459a:	67a2                	c.ldsp	a5,8(sp)
   2459c:	e81c                	c.sd	a5,16(s0)
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2459e:	8626                	c.mv	a2,s1
   245a0:	85ca                	c.mv	a1,s2
   245a2:	80ef20ef          	jal	ra,165b0 <memcpy@plt>
   245a6:	bfc9                	c.j	24578 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x2a>
	if (__n == 0)
   245a8:	d8e1                	c.beqz	s1,24578 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x2a>
   245aa:	bfd5                	c.j	2459e <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x50>

00000000000245ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   245ac:	1101                	c.addi	sp,-32
   245ae:	ec06                	c.sdsp	ra,24(sp)
   245b0:	e822                	c.sdsp	s0,16(sp)
   245b2:	e426                	c.sdsp	s1,8(sp)
   245b4:	e04a                	c.sdsp	s2,0(sp)
   245b6:	842a                	c.mv	s0,a0
   245b8:	87ae                	c.mv	a5,a1
   245ba:	84b2                	c.mv	s1,a2
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   245bc:	01050913          	addi	s2,a0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   245c0:	01253023          	sd	s2,0(a0)
      { return _M_dataplus._M_p; }
   245c4:	618c                	c.ld	a1,0(a1)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   245c6:	6790                	c.ld	a2,8(a5)
   245c8:	4681                	c.li	a3,0
   245ca:	962e                	c.add	a2,a1
   245cc:	00015317          	auipc	t1,0x15
   245d0:	d4433303          	ld	t1,-700(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   245d4:	9302                	c.jalr	t1
      { return _M_dataplus._M_p; }
   245d6:	608c                	c.ld	a1,0(s1)
      { return _M_string_length; }
   245d8:	6490                	c.ld	a2,8(s1)
	if (this->max_size() - (this->size() - __n1) < __n2)
   245da:	6418                	c.ld	a4,8(s0)
   245dc:	57fd                	c.li	a5,-1
   245de:	8389                	c.srli	a5,0x2
   245e0:	8f99                	c.sub	a5,a4
   245e2:	00c7e663          	bltu	a5,a2,245ee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x42>
	return _M_append(__s, __n);
   245e6:	8522                	c.mv	a0,s0
   245e8:	dd9f10ef          	jal	ra,163c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)@plt>
   245ec:	a005                	c.j	2460c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x60>
	  __throw_length_error(__N(__s));
   245ee:	00009517          	auipc	a0,0x9
   245f2:	15a50513          	addi	a0,a0,346 # 2d748 <std::piecewise_construct+0x2b0>
   245f6:	e4bf10ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
      { return _M_dataplus._M_p; }
   245fa:	84aa                	c.mv	s1,a0
   245fc:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   245fe:	01250463          	beq	a0,s2,24606 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5a>
   24602:	f0ff10ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   24606:	8526                	c.mv	a0,s1
   24608:	8e8f20ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    }
   2460c:	8522                	c.mv	a0,s0
   2460e:	60e2                	c.ldsp	ra,24(sp)
   24610:	6442                	c.ldsp	s0,16(sp)
   24612:	64a2                	c.ldsp	s1,8(sp)
   24614:	6902                	c.ldsp	s2,0(sp)
   24616:	6105                	c.addi16sp	sp,32
   24618:	8082                	c.jr	ra

000000000002461a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   2461a:	711d                	c.addi16sp	sp,-96
   2461c:	ec86                	c.sdsp	ra,88(sp)
   2461e:	e8a2                	c.sdsp	s0,80(sp)
   24620:	e4a6                	c.sdsp	s1,72(sp)
   24622:	e0ca                	c.sdsp	s2,64(sp)
   24624:	fc4e                	c.sdsp	s3,56(sp)
   24626:	f852                	c.sdsp	s4,48(sp)
   24628:	f456                	c.sdsp	s5,40(sp)
   2462a:	f05a                	c.sdsp	s6,32(sp)
   2462c:	ec5e                	c.sdsp	s7,24(sp)
   2462e:	e862                	c.sdsp	s8,16(sp)
   24630:	e466                	c.sdsp	s9,8(sp)
   24632:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24634:	00853b83          	ld	s7,8(a0)
   24638:	00053983          	ld	s3,0(a0)
   2463c:	413b87b3          	sub	a5,s7,s3
   24640:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   24642:	577d                	c.li	a4,-1
   24644:	8319                	c.srli	a4,0x6
   24646:	02e78863          	beq	a5,a4,24676 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>
   2464a:	8aaa                	c.mv	s5,a0
   2464c:	892e                	c.mv	s2,a1
   2464e:	8432                	c.mv	s0,a2
   24650:	8d2e                	c.mv	s10,a1
      return __a;
   24652:	873e                	c.mv	a4,a5
      if (__a < __b)
   24654:	033b8763          	beq	s7,s3,24682 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
	const size_type __len = size() + (std::max)(size(), __n);
   24658:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2465a:	12f76663          	bltu	a4,a5,24786 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16c>
   2465e:	8a3a                	c.mv	s4,a4
   24660:	57fd                	c.li	a5,-1
   24662:	8399                	c.srli	a5,0x6
   24664:	00e7f363          	bgeu	a5,a4,2466a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x50>
   24668:	8a3e                	c.mv	s4,a5
   2466a:	413904b3          	sub	s1,s2,s3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2466e:	4b01                	c.li	s6,0
   24670:	12070563          	beq	a4,zero,2479a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x180>
   24674:	aa31                	c.j	24790 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x176>
	  __throw_length_error(__N(__s));
   24676:	00009517          	auipc	a0,0x9
   2467a:	bda50513          	addi	a0,a0,-1062 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2467e:	dc3f10ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   24682:	4705                	c.li	a4,1
   24684:	bfd1                	c.j	24658 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3e>
      for (; __first != __last; ++__first, (void)++__cur)
   24686:	053d0663          	beq	s10,s3,246d2 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb8>
   2468a:	01098493          	addi	s1,s3,16
   2468e:	41390c33          	sub	s8,s2,s3
   24692:	9c5a                	c.add	s8,s6
      _ForwardIterator __cur = __result;
   24694:	845a                	c.mv	s0,s6
   24696:	a831                	c.j	246b2 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24698:	ff84b603          	ld	a2,-8(s1)
   2469c:	0605                	c.addi	a2,1
   2469e:	e615                	c.bnez	a2,246ca <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb0>
      { _M_string_length = __length; }
   246a0:	ff8cb783          	ld	a5,-8(s9)
   246a4:	e41c                	c.sd	a5,8(s0)
      for (; __first != __last; ++__first, (void)++__cur)
   246a6:	02040413          	addi	s0,s0,32
   246aa:	02048493          	addi	s1,s1,32
   246ae:	03840363          	beq	s0,s8,246d4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   246b2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   246b6:	e008                	c.sd	a0,0(s0)
      _M_data() const
   246b8:	8ca6                	c.mv	s9,s1
      { return _M_dataplus._M_p; }
   246ba:	ff04b783          	ld	a5,-16(s1)
	if (__str._M_is_local())
   246be:	fc978de3          	beq	a5,s1,24698 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
      { _M_dataplus._M_p = __p; }
   246c2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   246c4:	609c                	c.ld	a5,0(s1)
   246c6:	e81c                	c.sd	a5,16(s0)
   246c8:	bfe1                	c.j	246a0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   246ca:	85a6                	c.mv	a1,s1
   246cc:	ee5f10ef          	jal	ra,165b0 <memcpy@plt>
   246d0:	bfc1                	c.j	246a0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x86>
      _ForwardIterator __cur = __result;
   246d2:	8c5a                	c.mv	s8,s6
	      ++__new_finish;
   246d4:	020c0c13          	addi	s8,s8,32
      for (; __first != __last; ++__first, (void)++__cur)
   246d8:	057d0763          	beq	s10,s7,24726 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c>
   246dc:	01090413          	addi	s0,s2,16
   246e0:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   246e4:	84e2                	c.mv	s1,s8
   246e6:	a831                	c.j	24702 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe8>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   246e8:	ff85b603          	ld	a2,-8(a1)
   246ec:	0605                	c.addi	a2,1
	if (__n == 0)
   246ee:	e615                	c.bnez	a2,2471a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
      { _M_string_length = __length; }
   246f0:	ff8cb783          	ld	a5,-8(s9)
   246f4:	e49c                	c.sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   246f6:	02048493          	addi	s1,s1,32
   246fa:	02040413          	addi	s0,s0,32
   246fe:	028d0163          	beq	s10,s0,24720 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x106>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24702:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24706:	e088                	c.sd	a0,0(s1)
      _M_data() const
   24708:	8ca2                	c.mv	s9,s0
      { return _M_dataplus._M_p; }
   2470a:	ff043583          	ld	a1,-16(s0)
	if (__str._M_is_local())
   2470e:	fcb40de3          	beq	s0,a1,246e8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xce>
      { _M_dataplus._M_p = __p; }
   24712:	e08c                	c.sd	a1,0(s1)
      { _M_allocated_capacity = __capacity; }
   24714:	601c                	c.ld	a5,0(s0)
   24716:	e89c                	c.sd	a5,16(s1)
   24718:	bfe1                	c.j	246f0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2471a:	e97f10ef          	jal	ra,165b0 <memcpy@plt>
   2471e:	bfc9                	c.j	246f0 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd6>
   24720:	412b8933          	sub	s2,s7,s2
   24724:	9c4a                	c.add	s8,s2
	if (__p)
   24726:	00098563          	beq	s3,zero,24730 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x116>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2472a:	854e                	c.mv	a0,s3
   2472c:	de5f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   24730:	016ab023          	sd	s6,0(s5)
      this->_M_impl._M_finish = __new_finish;
   24734:	018ab423          	sd	s8,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   24738:	0a16                	c.slli	s4,0x5
   2473a:	9a5a                	c.add	s4,s6
   2473c:	014ab823          	sd	s4,16(s5)
    }
   24740:	60e6                	c.ldsp	ra,88(sp)
   24742:	6446                	c.ldsp	s0,80(sp)
   24744:	64a6                	c.ldsp	s1,72(sp)
   24746:	6906                	c.ldsp	s2,64(sp)
   24748:	79e2                	c.ldsp	s3,56(sp)
   2474a:	7a42                	c.ldsp	s4,48(sp)
   2474c:	7aa2                	c.ldsp	s5,40(sp)
   2474e:	7b02                	c.ldsp	s6,32(sp)
   24750:	6be2                	c.ldsp	s7,24(sp)
   24752:	6c42                	c.ldsp	s8,16(sp)
   24754:	6ca2                	c.ldsp	s9,8(sp)
   24756:	6d02                	c.ldsp	s10,0(sp)
   24758:	6125                	c.addi16sp	sp,96
   2475a:	8082                	c.jr	ra
      __catch(...)
   2475c:	ca5f10ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   24760:	000b1f63          	bne	s6,zero,2477e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x164>
      { return _M_dataplus._M_p; }
   24764:	6088                	c.ld	a0,0(s1)
	if (!_M_is_local())
   24766:	01850463          	beq	a0,s8,2476e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x154>
   2476a:	da7f10ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   2476e:	eb3f10ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   24772:	842a                	c.mv	s0,a0
   24774:	f1df10ef          	jal	ra,16690 <__cxa_end_catch@plt>
   24778:	8522                	c.mv	a0,s0
   2477a:	f77f10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
   2477e:	855a                	c.mv	a0,s6
   24780:	d91f10ef          	jal	ra,16510 <operator delete(void*)@plt>
   24784:	b7ed                	c.j	2476e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x154>
   24786:	413904b3          	sub	s1,s2,s3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2478a:	5a7d                	c.li	s4,-1
   2478c:	006a5a13          	srli	s4,s4,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24790:	005a1513          	slli	a0,s4,0x5
   24794:	d8df10ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   24798:	8b2a                	c.mv	s6,a0
	  _Alloc_traits::construct(this->_M_impl,
   2479a:	94da                	c.add	s1,s6
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2479c:	01048c13          	addi	s8,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   247a0:	0184b023          	sd	s8,0(s1)
      { return _M_dataplus._M_p; }
   247a4:	600c                	c.ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   247a6:	6410                	c.ld	a2,8(s0)
   247a8:	4681                	c.li	a3,0
   247aa:	962e                	c.add	a2,a1
   247ac:	8526                	c.mv	a0,s1
   247ae:	00015317          	auipc	t1,0x15
   247b2:	b6233303          	ld	t1,-1182(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   247b6:	9302                	c.jalr	t1
      }
   247b8:	b5f9                	c.j	24686 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>

00000000000247ba <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   247ba:	711d                	c.addi16sp	sp,-96
   247bc:	ec86                	c.sdsp	ra,88(sp)
   247be:	e8a2                	c.sdsp	s0,80(sp)
   247c0:	e4a6                	c.sdsp	s1,72(sp)
   247c2:	e0ca                	c.sdsp	s2,64(sp)
   247c4:	fc4e                	c.sdsp	s3,56(sp)
   247c6:	f852                	c.sdsp	s4,48(sp)
   247c8:	f456                	c.sdsp	s5,40(sp)
   247ca:	f05a                	c.sdsp	s6,32(sp)
   247cc:	ec5e                	c.sdsp	s7,24(sp)
   247ce:	e862                	c.sdsp	s8,16(sp)
   247d0:	e466                	c.sdsp	s9,8(sp)
   247d2:	e06a                	c.sdsp	s10,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   247d4:	00853b83          	ld	s7,8(a0)
   247d8:	00053a03          	ld	s4,0(a0)
   247dc:	414b87b3          	sub	a5,s7,s4
   247e0:	8795                	c.srai	a5,0x5
	if (max_size() - size() < __n)
   247e2:	577d                	c.li	a4,-1
   247e4:	8319                	c.srli	a4,0x6
   247e6:	02e78863          	beq	a5,a4,24816 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5c>
   247ea:	8aaa                	c.mv	s5,a0
   247ec:	892e                	c.mv	s2,a1
   247ee:	8432                	c.mv	s0,a2
   247f0:	8d2e                	c.mv	s10,a1
      return __a;
   247f2:	873e                	c.mv	a4,a5
      if (__a < __b)
   247f4:	034b8763          	beq	s7,s4,24822 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	const size_type __len = size() + (std::max)(size(), __n);
   247f8:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   247fa:	10f76063          	bltu	a4,a5,248fa <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x140>
   247fe:	8b3a                	c.mv	s6,a4
   24800:	57fd                	c.li	a5,-1
   24802:	8399                	c.srli	a5,0x6
   24804:	00e7f363          	bgeu	a5,a4,2480a <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>
   24808:	8b3e                	c.mv	s6,a5
   2480a:	414904b3          	sub	s1,s2,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2480e:	4981                	c.li	s3,0
   24810:	0e070f63          	beq	a4,zero,2490e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x154>
   24814:	a8c5                	c.j	24904 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14a>
	  __throw_length_error(__N(__s));
   24816:	00009517          	auipc	a0,0x9
   2481a:	a3a50513          	addi	a0,a0,-1478 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2481e:	c23f10ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   24822:	4705                	c.li	a4,1
   24824:	bfd1                	c.j	247f8 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x3e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24826:	6410                	c.ld	a2,8(s0)
   24828:	0605                	c.addi	a2,1
	if (__n == 0)
   2482a:	0e060e63          	beq	a2,zero,24926 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2482e:	85e2                	c.mv	a1,s8
   24830:	d81f10ef          	jal	ra,165b0 <memcpy@plt>
   24834:	a8cd                	c.j	24926 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x16c>
   24836:	ff85b603          	ld	a2,-8(a1)
   2483a:	0605                	c.addi	a2,1
	if (__n == 0)
   2483c:	e615                	c.bnez	a2,24868 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xae>
      { _M_string_length = __length; }
   2483e:	ff8c3783          	ld	a5,-8(s8)
   24842:	e41c                	c.sd	a5,8(s0)
   24844:	02040413          	addi	s0,s0,32
   24848:	02048493          	addi	s1,s1,32
   2484c:	03940263          	beq	s0,s9,24870 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24850:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24854:	e008                	c.sd	a0,0(s0)
      _M_data() const
   24856:	8c26                	c.mv	s8,s1
      { return _M_dataplus._M_p; }
   24858:	ff04b583          	ld	a1,-16(s1)
	if (__str._M_is_local())
   2485c:	fcb48de3          	beq	s1,a1,24836 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7c>
      { _M_dataplus._M_p = __p; }
   24860:	e00c                	c.sd	a1,0(s0)
      { _M_allocated_capacity = __capacity; }
   24862:	609c                	c.ld	a5,0(s1)
   24864:	e81c                	c.sd	a5,16(s0)
   24866:	bfe1                	c.j	2483e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24868:	d49f10ef          	jal	ra,165b0 <memcpy@plt>
   2486c:	bfc9                	c.j	2483e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x84>
      _ForwardIterator __cur = __result;
   2486e:	8cce                	c.mv	s9,s3
	      ++__new_finish;
   24870:	020c8c93          	addi	s9,s9,32
      for (; __first != __last; ++__first, (void)++__cur)
   24874:	057d0863          	beq	s10,s7,248c4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x10a>
   24878:	01090413          	addi	s0,s2,16
   2487c:	010b8d13          	addi	s10,s7,16
      _ForwardIterator __cur = __result;
   24880:	84e6                	c.mv	s1,s9
   24882:	a831                	c.j	2489e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24884:	ff843603          	ld	a2,-8(s0)
   24888:	0605                	c.addi	a2,1
	if (__n == 0)
   2488a:	e615                	c.bnez	a2,248b6 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xfc>
      { _M_string_length = __length; }
   2488c:	ff8c3783          	ld	a5,-8(s8)
   24890:	e49c                	c.sd	a5,8(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   24892:	02048493          	addi	s1,s1,32
   24896:	02040413          	addi	s0,s0,32
   2489a:	03a40263          	beq	s0,s10,248be <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x104>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2489e:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   248a2:	e088                	c.sd	a0,0(s1)
      _M_data() const
   248a4:	8c22                	c.mv	s8,s0
      { return _M_dataplus._M_p; }
   248a6:	ff043783          	ld	a5,-16(s0)
	if (__str._M_is_local())
   248aa:	fc878de3          	beq	a5,s0,24884 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xca>
      { _M_dataplus._M_p = __p; }
   248ae:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   248b0:	601c                	c.ld	a5,0(s0)
   248b2:	e89c                	c.sd	a5,16(s1)
   248b4:	bfe1                	c.j	2488c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   248b6:	85a2                	c.mv	a1,s0
   248b8:	cf9f10ef          	jal	ra,165b0 <memcpy@plt>
   248bc:	bfc1                	c.j	2488c <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd2>
   248be:	412b8933          	sub	s2,s7,s2
   248c2:	9cca                	c.add	s9,s2
	if (__p)
   248c4:	000a0563          	beq	s4,zero,248ce <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x114>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   248c8:	8552                	c.mv	a0,s4
   248ca:	c47f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   248ce:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   248d2:	019ab423          	sd	s9,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   248d6:	0b16                	c.slli	s6,0x5
   248d8:	99da                	c.add	s3,s6
   248da:	013ab823          	sd	s3,16(s5)
    }
   248de:	60e6                	c.ldsp	ra,88(sp)
   248e0:	6446                	c.ldsp	s0,80(sp)
   248e2:	64a6                	c.ldsp	s1,72(sp)
   248e4:	6906                	c.ldsp	s2,64(sp)
   248e6:	79e2                	c.ldsp	s3,56(sp)
   248e8:	7a42                	c.ldsp	s4,48(sp)
   248ea:	7aa2                	c.ldsp	s5,40(sp)
   248ec:	7b02                	c.ldsp	s6,32(sp)
   248ee:	6be2                	c.ldsp	s7,24(sp)
   248f0:	6c42                	c.ldsp	s8,16(sp)
   248f2:	6ca2                	c.ldsp	s9,8(sp)
   248f4:	6d02                	c.ldsp	s10,0(sp)
   248f6:	6125                	c.addi16sp	sp,96
   248f8:	8082                	c.jr	ra
   248fa:	414904b3          	sub	s1,s2,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   248fe:	5b7d                	c.li	s6,-1
   24900:	006b5b13          	srli	s6,s6,0x6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24904:	005b1513          	slli	a0,s6,0x5
   24908:	c19f10ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2490c:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   2490e:	94ce                	c.add	s1,s3
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24910:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24914:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   24916:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24918:	01040c13          	addi	s8,s0,16
	if (__str._M_is_local())
   2491c:	f18785e3          	beq	a5,s8,24826 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
      { _M_dataplus._M_p = __p; }
   24920:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   24922:	681c                	c.ld	a5,16(s0)
   24924:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   24926:	641c                	c.ld	a5,8(s0)
   24928:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2492a:	01843023          	sd	s8,0(s0)
      { _M_string_length = __length; }
   2492e:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24932:	00040823          	sb	zero,16(s0)
   24936:	f34d0ce3          	beq	s10,s4,2486e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xb4>
   2493a:	010a0493          	addi	s1,s4,16
   2493e:	41490cb3          	sub	s9,s2,s4
   24942:	9cce                	c.add	s9,s3
      _ForwardIterator __cur = __result;
   24944:	844e                	c.mv	s0,s3
   24946:	b729                	c.j	24850 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x96>

0000000000024948 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   24948:	7179                	c.addi16sp	sp,-48
   2494a:	f406                	c.sdsp	ra,40(sp)
   2494c:	f022                	c.sdsp	s0,32(sp)
   2494e:	ec26                	c.sdsp	s1,24(sp)
   24950:	e84a                	c.sdsp	s2,16(sp)
   24952:	e44e                	c.sdsp	s3,8(sp)
   24954:	84aa                	c.mv	s1,a0
   24956:	842e                	c.mv	s0,a1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   24958:	00853903          	ld	s2,8(a0)
   2495c:	691c                	c.ld	a5,16(a0)
   2495e:	04f90b63          	beq	s2,a5,249b4 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24962:	01090513          	addi	a0,s2,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24966:	00a93023          	sd	a0,0(s2)
      { return _M_dataplus._M_p; }
   2496a:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2496c:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   24970:	03378b63          	beq	a5,s3,249a6 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5e>
      { _M_dataplus._M_p = __p; }
   24974:	00f93023          	sd	a5,0(s2)
      { _M_allocated_capacity = __capacity; }
   24978:	699c                	c.ld	a5,16(a1)
   2497a:	00f93823          	sd	a5,16(s2)
      { _M_string_length = __length; }
   2497e:	641c                	c.ld	a5,8(s0)
   24980:	00f93423          	sd	a5,8(s2)
      { _M_dataplus._M_p = __p; }
   24984:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24988:	00043423          	sd	zero,8(s0)
   2498c:	00040823          	sb	zero,16(s0)
	    ++this->_M_impl._M_finish;
   24990:	649c                	c.ld	a5,8(s1)
   24992:	02078793          	addi	a5,a5,32
   24996:	e49c                	c.sd	a5,8(s1)
      }
   24998:	70a2                	c.ldsp	ra,40(sp)
   2499a:	7402                	c.ldsp	s0,32(sp)
   2499c:	64e2                	c.ldsp	s1,24(sp)
   2499e:	6942                	c.ldsp	s2,16(sp)
   249a0:	69a2                	c.ldsp	s3,8(sp)
   249a2:	6145                	c.addi16sp	sp,48
   249a4:	8082                	c.jr	ra
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   249a6:	6590                	c.ld	a2,8(a1)
   249a8:	0605                	c.addi	a2,1
	if (__n == 0)
   249aa:	da71                	c.beqz	a2,2497e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   249ac:	85ce                	c.mv	a1,s3
   249ae:	c03f10ef          	jal	ra,165b0 <memcpy@plt>
   249b2:	b7f1                	c.j	2497e <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x36>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   249b4:	862e                	c.mv	a2,a1
   249b6:	85ca                	c.mv	a1,s2
   249b8:	00015317          	auipc	t1,0x15
   249bc:	b4833303          	ld	t1,-1208(t1) # 39500 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14d46>
   249c0:	9302                	c.jalr	t1
      }
   249c2:	bfd9                	c.j	24998 <void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x50>

00000000000249c4 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
   249c4:	1101                	c.addi	sp,-32
   249c6:	ec06                	c.sdsp	ra,24(sp)
   249c8:	e822                	c.sdsp	s0,16(sp)
   249ca:	e426                	c.sdsp	s1,8(sp)
   249cc:	842a                	c.mv	s0,a0
   249ce:	84ae                	c.mv	s1,a1
	  for (; __first != __last; ++__first)
   249d0:	00b51b63          	bne	a0,a1,249e6 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x22>
	    std::_Destroy(std::__addressof(*__first));
	}
   249d4:	60e2                	c.ldsp	ra,24(sp)
   249d6:	6442                	c.ldsp	s0,16(sp)
   249d8:	64a2                	c.ldsp	s1,8(sp)
   249da:	6105                	c.addi16sp	sp,32
   249dc:	8082                	c.jr	ra
	  for (; __first != __last; ++__first)
   249de:	03040413          	addi	s0,s0,48
   249e2:	fe8489e3          	beq	s1,s0,249d4 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x10>
      { return _M_dataplus._M_p; }
   249e6:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   249e8:	01040793          	addi	a5,s0,16
   249ec:	fef509e3          	beq	a0,a5,249de <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   249f0:	b21f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   249f4:	b7ed                	c.j	249de <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)+0x1a>

00000000000249f6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
      vector<_Tp, _Alloc>::
   249f6:	7119                	c.addi16sp	sp,-128
   249f8:	fc86                	c.sdsp	ra,120(sp)
   249fa:	f8a2                	c.sdsp	s0,112(sp)
   249fc:	f4a6                	c.sdsp	s1,104(sp)
   249fe:	f0ca                	c.sdsp	s2,96(sp)
   24a00:	ecce                	c.sdsp	s3,88(sp)
   24a02:	e8d2                	c.sdsp	s4,80(sp)
   24a04:	e4d6                	c.sdsp	s5,72(sp)
   24a06:	e0da                	c.sdsp	s6,64(sp)
   24a08:	fc5e                	c.sdsp	s7,56(sp)
   24a0a:	f862                	c.sdsp	s8,48(sp)
   24a0c:	f466                	c.sdsp	s9,40(sp)
   24a0e:	f06a                	c.sdsp	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24a10:	00853a83          	ld	s5,8(a0)
   24a14:	00053b03          	ld	s6,0(a0)
   24a18:	416a87b3          	sub	a5,s5,s6
   24a1c:	8791                	c.srai	a5,0x4
   24a1e:	00009717          	auipc	a4,0x9
   24a22:	a6a73703          	ld	a4,-1430(a4) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   24a26:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   24a2a:	0000a717          	auipc	a4,0xa
   24a2e:	afe73703          	ld	a4,-1282(a4) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24a32:	02e78a63          	beq	a5,a4,24a66 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x70>
   24a36:	8baa                	c.mv	s7,a0
   24a38:	8a2e                	c.mv	s4,a1
   24a3a:	8432                	c.mv	s0,a2
   24a3c:	8d2e                	c.mv	s10,a1
      return __a;
   24a3e:	873e                	c.mv	a4,a5
      if (__a < __b)
   24a40:	036a8963          	beq	s5,s6,24a72 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   24a44:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24a46:	1af76a63          	bltu	a4,a5,24bfa <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x204>
   24a4a:	8cba                	c.mv	s9,a4
   24a4c:	0000a797          	auipc	a5,0xa
   24a50:	adc7b783          	ld	a5,-1316(a5) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24a54:	00e7f363          	bgeu	a5,a4,24a5a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64>
   24a58:	8cbe                	c.mv	s9,a5
   24a5a:	416a04b3          	sub	s1,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   24a5e:	4c01                	c.li	s8,0
   24a60:	1a070a63          	beq	a4,zero,24c14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x21e>
   24a64:	a24d                	c.j	24c06 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
	  __throw_length_error(__N(__s));
   24a66:	00008517          	auipc	a0,0x8
   24a6a:	7ea50513          	addi	a0,a0,2026 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   24a6e:	9d3f10ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   24a72:	4705                	c.li	a4,1
   24a74:	bfc1                	c.j	24a44 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   24a76:	4681                	c.li	a3,0
   24a78:	4601                	c.li	a2,0
   24a7a:	858a                	c.mv	a1,sp
   24a7c:	8526                	c.mv	a0,s1
   24a7e:	f5cfd0ef          	jal	ra,221da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
      { return _M_dataplus._M_p; }
   24a82:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24a84:	081c                	c.addi4spn	a5,sp,16
   24a86:	00f50463          	beq	a0,a5,24a8e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24a8a:	a87f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   24a8e:	010b0913          	addi	s2,s6,16
   24a92:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   24a94:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   24a96:	076d1663          	bne	s10,s6,24b02 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c>
	      ++__new_finish;
   24a9a:	03048493          	addi	s1,s1,48
   24a9e:	115d0463          	beq	s10,s5,24ba6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b0>
   24aa2:	010a0993          	addi	s3,s4,16
   24aa6:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   24aa8:	8426                	c.mv	s0,s1
   24aaa:	a85d                	c.j	24b60 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x16a>
      { return _M_dataplus._M_p; }
   24aac:	842a                	c.mv	s0,a0
   24aae:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24ab0:	081c                	c.addi4spn	a5,sp,16
   24ab2:	00f50463          	beq	a0,a5,24aba <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc4>
   24ab6:	a5bf10ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   24aba:	8522                	c.mv	a0,s0
      __catch(...)
   24abc:	945f10ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   24ac0:	120c1263          	bne	s8,zero,24be4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ee>
      { return _M_dataplus._M_p; }
   24ac4:	6088                	c.ld	a0,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24ac6:	04c1                	c.addi	s1,16
	if (!_M_is_local())
   24ac8:	00950463          	beq	a0,s1,24ad0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24acc:	a45f10ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   24ad0:	b51f10ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   24ad4:	842a                	c.mv	s0,a0
   24ad6:	bbbf10ef          	jal	ra,16690 <__cxa_end_catch@plt>
   24ada:	8522                	c.mv	a0,s0
   24adc:	c15f10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24ae0:	6410                	c.ld	a2,8(s0)
   24ae2:	0605                	c.addi	a2,1
	if (__n == 0)
   24ae4:	ca0d                	c.beqz	a2,24b16 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24ae6:	85ca                	c.mv	a1,s2
   24ae8:	ac9f10ef          	jal	ra,165b0 <memcpy@plt>
   24aec:	a02d                	c.j	24b16 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x120>
   24aee:	a23f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   24af2:	03040413          	addi	s0,s0,48
   24af6:	03048493          	addi	s1,s1,48
   24afa:	03090913          	addi	s2,s2,48
   24afe:	f9a40ee3          	beq	s0,s10,24a9a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24b02:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24b06:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   24b08:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24b0a:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   24b0c:	fd278ae3          	beq	a5,s2,24ae0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xea>
      { _M_dataplus._M_p = __p; }
   24b10:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   24b12:	681c                	c.ld	a5,16(s0)
   24b14:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   24b16:	641c                	c.ld	a5,8(s0)
   24b18:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   24b1a:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24b1e:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24b22:	00040823          	sb	zero,16(s0)
class line_table::file {
   24b26:	701c                	c.ld	a5,32(s0)
   24b28:	f09c                	c.sd	a5,32(s1)
   24b2a:	741c                	c.ld	a5,40(s0)
   24b2c:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   24b2e:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24b30:	fb351fe3          	bne	a0,s3,24aee <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf8>
   24b34:	bf7d                	c.j	24af2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24b36:	00893603          	ld	a2,8(s2)
   24b3a:	0605                	c.addi	a2,1
	if (__n == 0)
   24b3c:	ee1d                	c.bnez	a2,24b7a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x184>
      { _M_string_length = __length; }
   24b3e:	00893783          	ld	a5,8(s2)
   24b42:	e41c                	c.sd	a5,8(s0)
   24b44:	02093783          	ld	a5,32(s2)
   24b48:	f01c                	c.sd	a5,32(s0)
   24b4a:	02893783          	ld	a5,40(s2)
   24b4e:	f41c                	c.sd	a5,40(s0)
   24b50:	03090913          	addi	s2,s2,48
   24b54:	03040413          	addi	s0,s0,48
   24b58:	03098993          	addi	s3,s3,48
   24b5c:	03590263          	beq	s2,s5,24b80 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x18a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24b60:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24b64:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24b66:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24b6a:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   24b6c:	fd3785e3          	beq	a5,s3,24b36 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x140>
      { _M_dataplus._M_p = __p; }
   24b70:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24b72:	01093783          	ld	a5,16(s2)
   24b76:	e81c                	c.sd	a5,16(s0)
   24b78:	b7d9                	c.j	24b3e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x148>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24b7a:	a37f10ef          	jal	ra,165b0 <memcpy@plt>
   24b7e:	b7c1                	c.j	24b3e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x148>
   24b80:	414a87b3          	sub	a5,s5,s4
   24b84:	fd078793          	addi	a5,a5,-48
   24b88:	8391                	c.srli	a5,0x4
   24b8a:	0000a717          	auipc	a4,0xa
   24b8e:	9a673703          	ld	a4,-1626(a4) # 2e530 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   24b92:	02e787b3          	mul	a5,a5,a4
   24b96:	0792                	c.slli	a5,0x4
   24b98:	8391                	c.srli	a5,0x4
   24b9a:	0785                	c.addi	a5,1
   24b9c:	00179713          	slli	a4,a5,0x1
   24ba0:	97ba                	c.add	a5,a4
   24ba2:	0792                	c.slli	a5,0x4
   24ba4:	94be                	c.add	s1,a5
	if (__p)
   24ba6:	000b0563          	beq	s6,zero,24bb0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ba>
   24baa:	855a                	c.mv	a0,s6
   24bac:	965f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   24bb0:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   24bb4:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   24bb8:	001c9793          	slli	a5,s9,0x1
   24bbc:	97e6                	c.add	a5,s9
   24bbe:	0792                	c.slli	a5,0x4
   24bc0:	97e2                	c.add	a5,s8
   24bc2:	00fbb823          	sd	a5,16(s7)
    }
   24bc6:	70e6                	c.ldsp	ra,120(sp)
   24bc8:	7446                	c.ldsp	s0,112(sp)
   24bca:	74a6                	c.ldsp	s1,104(sp)
   24bcc:	7906                	c.ldsp	s2,96(sp)
   24bce:	69e6                	c.ldsp	s3,88(sp)
   24bd0:	6a46                	c.ldsp	s4,80(sp)
   24bd2:	6aa6                	c.ldsp	s5,72(sp)
   24bd4:	6b06                	c.ldsp	s6,64(sp)
   24bd6:	7be2                	c.ldsp	s7,56(sp)
   24bd8:	7c42                	c.ldsp	s8,48(sp)
   24bda:	7ca2                	c.ldsp	s9,40(sp)
   24bdc:	7d02                	c.ldsp	s10,32(sp)
   24bde:	6109                	c.addi16sp	sp,128
   24be0:	8082                	c.jr	ra
   24be2:	bde9                	c.j	24abc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc6>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
   24be4:	85e2                	c.mv	a1,s8
   24be6:	8562                	c.mv	a0,s8
   24be8:	00014317          	auipc	t1,0x14
   24bec:	6d833303          	ld	t1,1752(t1) # 392c0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x148fc>
   24bf0:	9302                	c.jalr	t1
   24bf2:	8562                	c.mv	a0,s8
   24bf4:	91df10ef          	jal	ra,16510 <operator delete(void*)@plt>
   24bf8:	bde1                	c.j	24ad0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xda>
   24bfa:	416a04b3          	sub	s1,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24bfe:	0000ac97          	auipc	s9,0xa
   24c02:	92acbc83          	ld	s9,-1750(s9) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24c06:	001c9513          	slli	a0,s9,0x1
   24c0a:	9566                	c.add	a0,s9
   24c0c:	0512                	c.slli	a0,0x4
   24c0e:	913f10ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   24c12:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   24c14:	94e2                	c.add	s1,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24c16:	081c                	c.addi4spn	a5,sp,16
   24c18:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   24c1a:	600c                	c.ld	a1,0(s0)
	_M_construct(__str._M_data(), __str._M_data() + __str.length(),
   24c1c:	6410                	c.ld	a2,8(s0)
   24c1e:	4681                	c.li	a3,0
   24c20:	962e                	c.add	a2,a1
   24c22:	850a                	c.mv	a0,sp
   24c24:	00014317          	auipc	t1,0x14
   24c28:	6ec33303          	ld	t1,1772(t1) # 39310 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@@Base+0x14dc2>
   24c2c:	9302                	c.jalr	t1
      }
   24c2e:	b5a1                	c.j	24a76 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>

0000000000024c30 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   24c30:	7119                	c.addi16sp	sp,-128
   24c32:	fc86                	c.sdsp	ra,120(sp)
   24c34:	f8a2                	c.sdsp	s0,112(sp)
   24c36:	f4a6                	c.sdsp	s1,104(sp)
   24c38:	f0ca                	c.sdsp	s2,96(sp)
   24c3a:	ecce                	c.sdsp	s3,88(sp)
   24c3c:	e8d2                	c.sdsp	s4,80(sp)
   24c3e:	e4d6                	c.sdsp	s5,72(sp)
   24c40:	e0da                	c.sdsp	s6,64(sp)
   24c42:	fc5e                	c.sdsp	s7,56(sp)
   24c44:	f862                	c.sdsp	s8,48(sp)
   24c46:	f466                	c.sdsp	s9,40(sp)
   24c48:	f06a                	c.sdsp	s10,32(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24c4a:	00853a83          	ld	s5,8(a0)
   24c4e:	00053b03          	ld	s6,0(a0)
   24c52:	416a87b3          	sub	a5,s5,s6
   24c56:	8791                	c.srai	a5,0x4
   24c58:	00009717          	auipc	a4,0x9
   24c5c:	83073703          	ld	a4,-2000(a4) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   24c60:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   24c64:	0000a717          	auipc	a4,0xa
   24c68:	8c473703          	ld	a4,-1852(a4) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24c6c:	02e78a63          	beq	a5,a4,24ca0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>
   24c70:	8baa                	c.mv	s7,a0
   24c72:	8a2e                	c.mv	s4,a1
   24c74:	8432                	c.mv	s0,a2
   24c76:	8d2e                	c.mv	s10,a1
      return __a;
   24c78:	873e                	c.mv	a4,a5
      if (__a < __b)
   24c7a:	036a8963          	beq	s5,s6,24cac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x7c>
	const size_type __len = size() + (std::max)(size(), __n);
   24c7e:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24c80:	1af76e63          	bltu	a4,a5,24e3c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x20c>
   24c84:	8cba                	c.mv	s9,a4
   24c86:	0000a797          	auipc	a5,0xa
   24c8a:	8a27b783          	ld	a5,-1886(a5) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24c8e:	00e7f363          	bgeu	a5,a4,24c94 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x64>
   24c92:	8cbe                	c.mv	s9,a5
   24c94:	416a0933          	sub	s2,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   24c98:	4c01                	c.li	s8,0
   24c9a:	1a070e63          	beq	a4,zero,24e56 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x226>
   24c9e:	a26d                	c.j	24e48 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x218>
	  __throw_length_error(__N(__s));
   24ca0:	00008517          	auipc	a0,0x8
   24ca4:	5b050513          	addi	a0,a0,1456 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   24ca8:	f98f10ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   24cac:	4705                	c.li	a4,1
   24cae:	bfc1                	c.j	24c7e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24cb0:	6410                	c.ld	a2,8(s0)
   24cb2:	0605                	c.addi	a2,1
	if (__n == 0)
   24cb4:	1a060c63          	beq	a2,zero,24e6c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x23c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24cb8:	85a6                	c.mv	a1,s1
   24cba:	0808                	c.addi4spn	a0,sp,16
   24cbc:	8f5f10ef          	jal	ra,165b0 <memcpy@plt>
   24cc0:	a275                	c.j	24e6c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x23c>
      { return _M_dataplus._M_p; }
   24cc2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24cc4:	081c                	c.addi4spn	a5,sp,16
   24cc6:	00f50463          	beq	a0,a5,24cce <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x9e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24cca:	847f10ef          	jal	ra,16510 <operator delete(void*)@plt>
   24cce:	010b0913          	addi	s2,s6,16
   24cd2:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   24cd4:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   24cd6:	076d1863          	bne	s10,s6,24d46 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x116>
	      ++__new_finish;
   24cda:	03048493          	addi	s1,s1,48
   24cde:	115d0663          	beq	s10,s5,24dea <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1ba>
   24ce2:	010a0993          	addi	s3,s4,16
   24ce6:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   24ce8:	8426                	c.mv	s0,s1
   24cea:	a86d                	c.j	24da4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x174>
      { return _M_dataplus._M_p; }
   24cec:	842a                	c.mv	s0,a0
   24cee:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24cf0:	081c                	c.addi4spn	a5,sp,16
   24cf2:	00f50463          	beq	a0,a5,24cfa <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xca>
   24cf6:	81bf10ef          	jal	ra,16510 <operator delete(void*)@plt>
      __catch(...)
   24cfa:	8522                	c.mv	a0,s0
   24cfc:	f04f10ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   24d00:	120c1363          	bne	s8,zero,24e26 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1f6>
      { return _M_dataplus._M_p; }
   24d04:	00093503          	ld	a0,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24d08:	01090493          	addi	s1,s2,16
	if (!_M_is_local())
   24d0c:	00950463          	beq	a0,s1,24d14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
   24d10:	801f10ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   24d14:	90df10ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   24d18:	842a                	c.mv	s0,a0
   24d1a:	977f10ef          	jal	ra,16690 <__cxa_end_catch@plt>
   24d1e:	8522                	c.mv	a0,s0
   24d20:	9d1f10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24d24:	6410                	c.ld	a2,8(s0)
   24d26:	0605                	c.addi	a2,1
	if (__n == 0)
   24d28:	ca0d                	c.beqz	a2,24d5a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x12a>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24d2a:	85ca                	c.mv	a1,s2
   24d2c:	885f10ef          	jal	ra,165b0 <memcpy@plt>
   24d30:	a02d                	c.j	24d5a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x12a>
   24d32:	fdef10ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   24d36:	03040413          	addi	s0,s0,48
   24d3a:	03048493          	addi	s1,s1,48
   24d3e:	03090913          	addi	s2,s2,48
   24d42:	f9a40ce3          	beq	s0,s10,24cda <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xaa>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24d46:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24d4a:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   24d4c:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24d4e:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   24d50:	fd278ae3          	beq	a5,s2,24d24 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xf4>
      { _M_dataplus._M_p = __p; }
   24d54:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   24d56:	681c                	c.ld	a5,16(s0)
   24d58:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   24d5a:	641c                	c.ld	a5,8(s0)
   24d5c:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   24d5e:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24d62:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24d66:	00040823          	sb	zero,16(s0)
   24d6a:	701c                	c.ld	a5,32(s0)
   24d6c:	f09c                	c.sd	a5,32(s1)
   24d6e:	741c                	c.ld	a5,40(s0)
   24d70:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   24d72:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   24d74:	fb351fe3          	bne	a0,s3,24d32 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x102>
   24d78:	bf7d                	c.j	24d36 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x106>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24d7a:	00893603          	ld	a2,8(s2)
   24d7e:	0605                	c.addi	a2,1
	if (__n == 0)
   24d80:	ee1d                	c.bnez	a2,24dbe <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x18e>
      { _M_string_length = __length; }
   24d82:	00893783          	ld	a5,8(s2)
   24d86:	e41c                	c.sd	a5,8(s0)
   24d88:	02093783          	ld	a5,32(s2)
   24d8c:	f01c                	c.sd	a5,32(s0)
   24d8e:	02893783          	ld	a5,40(s2)
   24d92:	f41c                	c.sd	a5,40(s0)
   24d94:	03090913          	addi	s2,s2,48
   24d98:	03040413          	addi	s0,s0,48
   24d9c:	03098993          	addi	s3,s3,48
   24da0:	03590263          	beq	s2,s5,24dc4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x194>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   24da4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24da8:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   24daa:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24dae:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   24db0:	fd3785e3          	beq	a5,s3,24d7a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x14a>
      { _M_dataplus._M_p = __p; }
   24db4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   24db6:	01093783          	ld	a5,16(s2)
   24dba:	e81c                	c.sd	a5,16(s0)
   24dbc:	b7d9                	c.j	24d82 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x152>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24dbe:	ff2f10ef          	jal	ra,165b0 <memcpy@plt>
   24dc2:	b7c1                	c.j	24d82 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x152>
   24dc4:	414a87b3          	sub	a5,s5,s4
   24dc8:	fd078793          	addi	a5,a5,-48
   24dcc:	8391                	c.srli	a5,0x4
   24dce:	00009717          	auipc	a4,0x9
   24dd2:	76273703          	ld	a4,1890(a4) # 2e530 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   24dd6:	02e787b3          	mul	a5,a5,a4
   24dda:	0792                	c.slli	a5,0x4
   24ddc:	8391                	c.srli	a5,0x4
   24dde:	0785                	c.addi	a5,1
   24de0:	00179713          	slli	a4,a5,0x1
   24de4:	97ba                	c.add	a5,a4
   24de6:	0792                	c.slli	a5,0x4
   24de8:	94be                	c.add	s1,a5
	if (__p)
   24dea:	000b0563          	beq	s6,zero,24df4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x1c4>
   24dee:	855a                	c.mv	a0,s6
   24df0:	f20f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   24df4:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   24df8:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   24dfc:	001c9793          	slli	a5,s9,0x1
   24e00:	97e6                	c.add	a5,s9
   24e02:	0792                	c.slli	a5,0x4
   24e04:	97e2                	c.add	a5,s8
   24e06:	00fbb823          	sd	a5,16(s7)
    }
   24e0a:	70e6                	c.ldsp	ra,120(sp)
   24e0c:	7446                	c.ldsp	s0,112(sp)
   24e0e:	74a6                	c.ldsp	s1,104(sp)
   24e10:	7906                	c.ldsp	s2,96(sp)
   24e12:	69e6                	c.ldsp	s3,88(sp)
   24e14:	6a46                	c.ldsp	s4,80(sp)
   24e16:	6aa6                	c.ldsp	s5,72(sp)
   24e18:	6b06                	c.ldsp	s6,64(sp)
   24e1a:	7be2                	c.ldsp	s7,56(sp)
   24e1c:	7c42                	c.ldsp	s8,48(sp)
   24e1e:	7ca2                	c.ldsp	s9,40(sp)
   24e20:	7d02                	c.ldsp	s10,32(sp)
   24e22:	6109                	c.addi16sp	sp,128
   24e24:	8082                	c.jr	ra
   24e26:	85e2                	c.mv	a1,s8
   24e28:	8562                	c.mv	a0,s8
   24e2a:	00014317          	auipc	t1,0x14
   24e2e:	49633303          	ld	t1,1174(t1) # 392c0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x148fc>
   24e32:	9302                	c.jalr	t1
   24e34:	8562                	c.mv	a0,s8
   24e36:	edaf10ef          	jal	ra,16510 <operator delete(void*)@plt>
   24e3a:	bde9                	c.j	24d14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xe4>
   24e3c:	416a0933          	sub	s2,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24e40:	00009c97          	auipc	s9,0x9
   24e44:	6e8cbc83          	ld	s9,1768(s9) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   24e48:	001c9513          	slli	a0,s9,0x1
   24e4c:	9566                	c.add	a0,s9
   24e4e:	0512                	c.slli	a0,0x4
   24e50:	ed0f10ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   24e54:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   24e56:	9962                	c.add	s2,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24e58:	081c                	c.addi4spn	a5,sp,16
   24e5a:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   24e5c:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24e5e:	01040493          	addi	s1,s0,16
	if (__str._M_is_local())
   24e62:	e49787e3          	beq	a5,s1,24cb0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x80>
      { _M_dataplus._M_p = __p; }
   24e66:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   24e68:	681c                	c.ld	a5,16(s0)
   24e6a:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   24e6c:	641c                	c.ld	a5,8(s0)
   24e6e:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   24e70:	e004                	c.sd	s1,0(s0)
      { _M_string_length = __length; }
   24e72:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   24e76:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   24e7a:	4681                	c.li	a3,0
   24e7c:	4601                	c.li	a2,0
   24e7e:	858a                	c.mv	a1,sp
   24e80:	854a                	c.mv	a0,s2
   24e82:	b58fd0ef          	jal	ra,221da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   24e86:	bd35                	c.j	24cc2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>

0000000000024e88 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
      vector<_Tp, _Alloc>::
   24e88:	715d                	c.addi16sp	sp,-80
   24e8a:	e486                	c.sdsp	ra,72(sp)
   24e8c:	e0a2                	c.sdsp	s0,64(sp)
   24e8e:	fc26                	c.sdsp	s1,56(sp)
   24e90:	f84a                	c.sdsp	s2,48(sp)
   24e92:	f44e                	c.sdsp	s3,40(sp)
   24e94:	84aa                	c.mv	s1,a0
   24e96:	842e                	c.mv	s0,a1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   24e98:	00853903          	ld	s2,8(a0)
   24e9c:	691c                	c.ld	a5,16(a0)
   24e9e:	06f90e63          	beq	s2,a5,24f1a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x92>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   24ea2:	081c                	c.addi4spn	a5,sp,16
   24ea4:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   24ea6:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   24ea8:	01058993          	addi	s3,a1,16
	if (__str._M_is_local())
   24eac:	03378463          	beq	a5,s3,24ed4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4c>
      { _M_dataplus._M_p = __p; }
   24eb0:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   24eb2:	699c                	c.ld	a5,16(a1)
   24eb4:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   24eb6:	641c                	c.ld	a5,8(s0)
   24eb8:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   24eba:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   24ebe:	00043423          	sd	zero,8(s0)
   24ec2:	00040823          	sb	zero,16(s0)
   24ec6:	4681                	c.li	a3,0
   24ec8:	4601                	c.li	a2,0
   24eca:	858a                	c.mv	a1,sp
   24ecc:	854a                	c.mv	a0,s2
   24ece:	b0cfd0ef          	jal	ra,221da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   24ed2:	a809                	c.j	24ee4 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x5c>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24ed4:	6590                	c.ld	a2,8(a1)
   24ed6:	0605                	c.addi	a2,1
	if (__n == 0)
   24ed8:	de79                	c.beqz	a2,24eb6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24eda:	85ce                	c.mv	a1,s3
   24edc:	0808                	c.addi4spn	a0,sp,16
   24ede:	ed2f10ef          	jal	ra,165b0 <memcpy@plt>
   24ee2:	bfd1                	c.j	24eb6 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2e>
      { return _M_dataplus._M_p; }
   24ee4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24ee6:	081c                	c.addi4spn	a5,sp,16
   24ee8:	00f50463          	beq	a0,a5,24ef0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x68>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24eec:	e24f10ef          	jal	ra,16510 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   24ef0:	649c                	c.ld	a5,8(s1)
   24ef2:	03078793          	addi	a5,a5,48
   24ef6:	e49c                	c.sd	a5,8(s1)
      }
   24ef8:	60a6                	c.ldsp	ra,72(sp)
   24efa:	6406                	c.ldsp	s0,64(sp)
   24efc:	74e2                	c.ldsp	s1,56(sp)
   24efe:	7942                	c.ldsp	s2,48(sp)
   24f00:	79a2                	c.ldsp	s3,40(sp)
   24f02:	6161                	c.addi16sp	sp,80
   24f04:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   24f06:	842a                	c.mv	s0,a0
   24f08:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24f0a:	081c                	c.addi4spn	a5,sp,16
   24f0c:	00f50463          	beq	a0,a5,24f14 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x8c>
   24f10:	e00f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   24f14:	8522                	c.mv	a0,s0
   24f16:	fdaf10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   24f1a:	862e                	c.mv	a2,a1
   24f1c:	85ca                	c.mv	a1,s2
   24f1e:	00014317          	auipc	t1,0x14
   24f22:	5aa33303          	ld	t1,1450(t1) # 394c8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x14898>
   24f26:	9302                	c.jalr	t1
      }
   24f28:	bfc1                	c.j	24ef8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x70>

0000000000024f2a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   24f2a:	7175                	c.addi16sp	sp,-144
   24f2c:	e506                	c.sdsp	ra,136(sp)
   24f2e:	e122                	c.sdsp	s0,128(sp)
   24f30:	fca6                	c.sdsp	s1,120(sp)
   24f32:	f8ca                	c.sdsp	s2,112(sp)
   24f34:	f4ce                	c.sdsp	s3,104(sp)
   24f36:	f0d2                	c.sdsp	s4,96(sp)
   24f38:	ecd6                	c.sdsp	s5,88(sp)
   24f3a:	e8da                	c.sdsp	s6,80(sp)
   24f3c:	e4de                	c.sdsp	s7,72(sp)
   24f3e:	e0e2                	c.sdsp	s8,64(sp)
   24f40:	fc66                	c.sdsp	s9,56(sp)
   24f42:	f86a                	c.sdsp	s10,48(sp)
   24f44:	f46e                	c.sdsp	s11,40(sp)
   24f46:	893a                	c.mv	s2,a4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   24f48:	00853a83          	ld	s5,8(a0)
   24f4c:	00053b03          	ld	s6,0(a0)
   24f50:	416a87b3          	sub	a5,s5,s6
   24f54:	8791                	c.srai	a5,0x4
   24f56:	00008717          	auipc	a4,0x8
   24f5a:	53273703          	ld	a4,1330(a4) # 2d488 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits+0xe8>
   24f5e:	02e787b3          	mul	a5,a5,a4
	if (max_size() - size() < __n)
   24f62:	00009717          	auipc	a4,0x9
   24f66:	5c673703          	ld	a4,1478(a4) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24f6a:	02e78b63          	beq	a5,a4,24fa0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x76>
   24f6e:	8baa                	c.mv	s7,a0
   24f70:	8a2e                	c.mv	s4,a1
   24f72:	8432                	c.mv	s0,a2
   24f74:	84b6                	c.mv	s1,a3
   24f76:	8d2e                	c.mv	s10,a1
      return __a;
   24f78:	873e                	c.mv	a4,a5
      if (__a < __b)
   24f7a:	036a8963          	beq	s5,s6,24fac <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x82>
	const size_type __len = size() + (std::max)(size(), __n);
   24f7e:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   24f80:	1af76e63          	bltu	a4,a5,2513c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x212>
   24f84:	8cba                	c.mv	s9,a4
   24f86:	00009797          	auipc	a5,0x9
   24f8a:	5a27b783          	ld	a5,1442(a5) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
   24f8e:	00e7f363          	bgeu	a5,a4,24f94 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x6a>
   24f92:	8cbe                	c.mv	s9,a5
   24f94:	416a09b3          	sub	s3,s4,s6
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   24f98:	4c01                	c.li	s8,0
   24f9a:	1a070e63          	beq	a4,zero,25156 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x22c>
   24f9e:	a26d                	c.j	25148 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x21e>
	  __throw_length_error(__N(__s));
   24fa0:	00008517          	auipc	a0,0x8
   24fa4:	2b050513          	addi	a0,a0,688 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   24fa8:	c98f10ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   24fac:	4705                	c.li	a4,1
   24fae:	bfc1                	c.j	24f7e <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x54>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   24fb0:	6410                	c.ld	a2,8(s0)
   24fb2:	0605                	c.addi	a2,1
	if (__n == 0)
   24fb4:	1a060c63          	beq	a2,zero,2516c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x242>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   24fb8:	85ee                	c.mv	a1,s11
   24fba:	0808                	c.addi4spn	a0,sp,16
   24fbc:	df4f10ef          	jal	ra,165b0 <memcpy@plt>
   24fc0:	a275                	c.j	2516c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x242>
      { return _M_dataplus._M_p; }
   24fc2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24fc4:	081c                	c.addi4spn	a5,sp,16
   24fc6:	00f50463          	beq	a0,a5,24fce <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   24fca:	d46f10ef          	jal	ra,16510 <operator delete(void*)@plt>
   24fce:	010b0913          	addi	s2,s6,16
   24fd2:	845a                	c.mv	s0,s6
      _ForwardIterator __cur = __result;
   24fd4:	84e2                	c.mv	s1,s8
      for (; __first != __last; ++__first, (void)++__cur)
   24fd6:	076d1763          	bne	s10,s6,25044 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x11a>
	      ++__new_finish;
   24fda:	03048493          	addi	s1,s1,48
   24fde:	115d0563          	beq	s10,s5,250e8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1be>
   24fe2:	010a0993          	addi	s3,s4,16
   24fe6:	8952                	c.mv	s2,s4
      _ForwardIterator __cur = __result;
   24fe8:	8426                	c.mv	s0,s1
   24fea:	a865                	c.j	250a2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x178>
      { return _M_dataplus._M_p; }
   24fec:	842a                	c.mv	s0,a0
   24fee:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   24ff0:	081c                	c.addi4spn	a5,sp,16
   24ff2:	00f50463          	beq	a0,a5,24ffa <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xd0>
   24ff6:	d1af10ef          	jal	ra,16510 <operator delete(void*)@plt>
      __catch(...)
   24ffa:	8522                	c.mv	a0,s0
   24ffc:	c04f10ef          	jal	ra,16400 <__cxa_begin_catch@plt>
	  if (!__new_finish)
   25000:	120c1363          	bne	s8,zero,25126 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1fc>
      { return _M_dataplus._M_p; }
   25004:	0009b503          	ld	a0,0(s3)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   25008:	09c1                	c.addi	s3,16
	if (!_M_is_local())
   2500a:	01350463          	beq	a0,s3,25012 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xe8>
   2500e:	d02f10ef          	jal	ra,16510 <operator delete(void*)@plt>
	  __throw_exception_again;
   25012:	e0ef10ef          	jal	ra,16620 <__cxa_rethrow@plt>
      __catch(...)
   25016:	842a                	c.mv	s0,a0
   25018:	e78f10ef          	jal	ra,16690 <__cxa_end_catch@plt>
   2501c:	8522                	c.mv	a0,s0
   2501e:	ed2f10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25022:	6410                	c.ld	a2,8(s0)
   25024:	0605                	c.addi	a2,1
	if (__n == 0)
   25026:	ca0d                	c.beqz	a2,25058 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x12e>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   25028:	85ca                	c.mv	a1,s2
   2502a:	d86f10ef          	jal	ra,165b0 <memcpy@plt>
   2502e:	a02d                	c.j	25058 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x12e>
   25030:	ce0f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      for (; __first != __last; ++__first, (void)++__cur)
   25034:	03040413          	addi	s0,s0,48
   25038:	03048493          	addi	s1,s1,48
   2503c:	03090913          	addi	s2,s2,48
   25040:	f9a40de3          	beq	s0,s10,24fda <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xb0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   25044:	01048513          	addi	a0,s1,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25048:	e088                	c.sd	a0,0(s1)
      { return _M_dataplus._M_p; }
   2504a:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2504c:	89ca                	c.mv	s3,s2
	if (__str._M_is_local())
   2504e:	fd278ae3          	beq	a5,s2,25022 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xf8>
      { _M_dataplus._M_p = __p; }
   25052:	e09c                	c.sd	a5,0(s1)
      { _M_allocated_capacity = __capacity; }
   25054:	681c                	c.ld	a5,16(s0)
   25056:	e89c                	c.sd	a5,16(s1)
      { _M_string_length = __length; }
   25058:	641c                	c.ld	a5,8(s0)
   2505a:	e49c                	c.sd	a5,8(s1)
      { _M_dataplus._M_p = __p; }
   2505c:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   25060:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25064:	00040823          	sb	zero,16(s0)
   25068:	701c                	c.ld	a5,32(s0)
   2506a:	f09c                	c.sd	a5,32(s1)
   2506c:	741c                	c.ld	a5,40(s0)
   2506e:	f49c                	c.sd	a5,40(s1)
      { return _M_dataplus._M_p; }
   25070:	6008                	c.ld	a0,0(s0)
	if (!_M_is_local())
   25072:	fb351fe3          	bne	a0,s3,25030 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x106>
   25076:	bf7d                	c.j	25034 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x10a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   25078:	00893603          	ld	a2,8(s2)
   2507c:	0605                	c.addi	a2,1
	if (__n == 0)
   2507e:	ee1d                	c.bnez	a2,250bc <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x192>
      { _M_string_length = __length; }
   25080:	00893783          	ld	a5,8(s2)
   25084:	e41c                	c.sd	a5,8(s0)
   25086:	02093783          	ld	a5,32(s2)
   2508a:	f01c                	c.sd	a5,32(s0)
   2508c:	02893783          	ld	a5,40(s2)
   25090:	f41c                	c.sd	a5,40(s0)
   25092:	03090913          	addi	s2,s2,48
   25096:	03040413          	addi	s0,s0,48
   2509a:	03098993          	addi	s3,s3,48
   2509e:	03590263          	beq	s2,s5,250c2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x198>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   250a2:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   250a6:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   250a8:	00093783          	ld	a5,0(s2)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   250ac:	85ce                	c.mv	a1,s3
	if (__str._M_is_local())
   250ae:	fd3785e3          	beq	a5,s3,25078 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x14e>
      { _M_dataplus._M_p = __p; }
   250b2:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   250b4:	01093783          	ld	a5,16(s2)
   250b8:	e81c                	c.sd	a5,16(s0)
   250ba:	b7d9                	c.j	25080 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x156>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   250bc:	cf4f10ef          	jal	ra,165b0 <memcpy@plt>
   250c0:	b7c1                	c.j	25080 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x156>
   250c2:	414a87b3          	sub	a5,s5,s4
   250c6:	fd078793          	addi	a5,a5,-48
   250ca:	8391                	c.srli	a5,0x4
   250cc:	00009717          	auipc	a4,0x9
   250d0:	46473703          	ld	a4,1124(a4) # 2e530 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68>
   250d4:	02e787b3          	mul	a5,a5,a4
   250d8:	0792                	c.slli	a5,0x4
   250da:	8391                	c.srli	a5,0x4
   250dc:	0785                	c.addi	a5,1
   250de:	00179713          	slli	a4,a5,0x1
   250e2:	97ba                	c.add	a5,a4
   250e4:	0792                	c.slli	a5,0x4
   250e6:	94be                	c.add	s1,a5
	if (__p)
   250e8:	000b0563          	beq	s6,zero,250f2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x1c8>
   250ec:	855a                	c.mv	a0,s6
   250ee:	c22f10ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   250f2:	018bb023          	sd	s8,0(s7)
      this->_M_impl._M_finish = __new_finish;
   250f6:	009bb423          	sd	s1,8(s7)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   250fa:	001c9793          	slli	a5,s9,0x1
   250fe:	97e6                	c.add	a5,s9
   25100:	0792                	c.slli	a5,0x4
   25102:	97e2                	c.add	a5,s8
   25104:	00fbb823          	sd	a5,16(s7)
    }
   25108:	60aa                	c.ldsp	ra,136(sp)
   2510a:	640a                	c.ldsp	s0,128(sp)
   2510c:	74e6                	c.ldsp	s1,120(sp)
   2510e:	7946                	c.ldsp	s2,112(sp)
   25110:	79a6                	c.ldsp	s3,104(sp)
   25112:	7a06                	c.ldsp	s4,96(sp)
   25114:	6ae6                	c.ldsp	s5,88(sp)
   25116:	6b46                	c.ldsp	s6,80(sp)
   25118:	6ba6                	c.ldsp	s7,72(sp)
   2511a:	6c06                	c.ldsp	s8,64(sp)
   2511c:	7ce2                	c.ldsp	s9,56(sp)
   2511e:	7d42                	c.ldsp	s10,48(sp)
   25120:	7da2                	c.ldsp	s11,40(sp)
   25122:	6149                	c.addi16sp	sp,144
   25124:	8082                	c.jr	ra
   25126:	85e2                	c.mv	a1,s8
   25128:	8562                	c.mv	a0,s8
   2512a:	00014317          	auipc	t1,0x14
   2512e:	19633303          	ld	t1,406(t1) # 392c0 <void std::_Destroy_aux<false>::__destroy<dwarf::line_table::file*>(dwarf::line_table::file*, dwarf::line_table::file*)@@Base+0x148fc>
   25132:	9302                	c.jalr	t1
   25134:	8562                	c.mv	a0,s8
   25136:	bdaf10ef          	jal	ra,16510 <operator delete(void*)@plt>
   2513a:	bde1                	c.j	25012 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xe8>
   2513c:	416a09b3          	sub	s3,s4,s6
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   25140:	00009c97          	auipc	s9,0x9
   25144:	3e8cbc83          	ld	s9,1000(s9) # 2e528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x60>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   25148:	001c9513          	slli	a0,s9,0x1
   2514c:	9566                	c.add	a0,s9
   2514e:	0512                	c.slli	a0,0x4
   25150:	bd0f10ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   25154:	8c2a                	c.mv	s8,a0
	  _Alloc_traits::construct(this->_M_impl,
   25156:	99e2                	c.add	s3,s8
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   25158:	081c                	c.addi4spn	a5,sp,16
   2515a:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   2515c:	601c                	c.ld	a5,0(s0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2515e:	01040d93          	addi	s11,s0,16
	if (__str._M_is_local())
   25162:	e5b787e3          	beq	a5,s11,24fb0 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x86>
      { _M_dataplus._M_p = __p; }
   25166:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   25168:	681c                	c.ld	a5,16(s0)
   2516a:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   2516c:	641c                	c.ld	a5,8(s0)
   2516e:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   25170:	01b43023          	sd	s11,0(s0)
      { _M_string_length = __length; }
   25174:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   25178:	00040823          	sb	zero,16(s0)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   2517c:	00093683          	ld	a3,0(s2)
   25180:	6090                	c.ld	a2,0(s1)
   25182:	858a                	c.mv	a1,sp
   25184:	854e                	c.mv	a0,s3
   25186:	854fd0ef          	jal	ra,221da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   2518a:	bd25                	c.j	24fc2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x98>

000000000002518c <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)>:
      vector<_Tp, _Alloc>::
   2518c:	711d                	c.addi16sp	sp,-96
   2518e:	ec86                	c.sdsp	ra,88(sp)
   25190:	e8a2                	c.sdsp	s0,80(sp)
   25192:	e4a6                	c.sdsp	s1,72(sp)
   25194:	e0ca                	c.sdsp	s2,64(sp)
   25196:	fc4e                	c.sdsp	s3,56(sp)
   25198:	f852                	c.sdsp	s4,48(sp)
   2519a:	f456                	c.sdsp	s5,40(sp)
   2519c:	8aaa                	c.mv	s5,a0
   2519e:	842e                	c.mv	s0,a1
   251a0:	84b2                	c.mv	s1,a2
   251a2:	8936                	c.mv	s2,a3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   251a4:	00853983          	ld	s3,8(a0)
   251a8:	691c                	c.ld	a5,16(a0)
   251aa:	08f98363          	beq	s3,a5,25230 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0xa4>
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   251ae:	081c                	c.addi4spn	a5,sp,16
   251b0:	e03e                	c.sdsp	a5,0(sp)
      { return _M_dataplus._M_p; }
   251b2:	619c                	c.ld	a5,0(a1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   251b4:	01058a13          	addi	s4,a1,16
	if (__str._M_is_local())
   251b8:	03478563          	beq	a5,s4,251e2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x56>
      { _M_dataplus._M_p = __p; }
   251bc:	e03e                	c.sdsp	a5,0(sp)
      { _M_allocated_capacity = __capacity; }
   251be:	699c                	c.ld	a5,16(a1)
   251c0:	e83e                	c.sdsp	a5,16(sp)
      { _M_string_length = __length; }
   251c2:	641c                	c.ld	a5,8(s0)
   251c4:	e43e                	c.sdsp	a5,8(sp)
      { _M_dataplus._M_p = __p; }
   251c6:	01443023          	sd	s4,0(s0)
      { _M_string_length = __length; }
   251ca:	00043423          	sd	zero,8(s0)
   251ce:	00040823          	sb	zero,16(s0)
   251d2:	00093683          	ld	a3,0(s2)
   251d6:	6090                	c.ld	a2,0(s1)
   251d8:	858a                	c.mv	a1,sp
   251da:	854e                	c.mv	a0,s3
   251dc:	ffffc0ef          	jal	ra,221da <dwarf::line_table::file::file(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long, unsigned long)>
   251e0:	a809                	c.j	251f2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x66>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   251e2:	6590                	c.ld	a2,8(a1)
   251e4:	0605                	c.addi	a2,1
	if (__n == 0)
   251e6:	de71                	c.beqz	a2,251c2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x36>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   251e8:	85d2                	c.mv	a1,s4
   251ea:	0808                	c.addi4spn	a0,sp,16
   251ec:	bc4f10ef          	jal	ra,165b0 <memcpy@plt>
   251f0:	bfc9                	c.j	251c2 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x36>
      { return _M_dataplus._M_p; }
   251f2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   251f4:	081c                	c.addi4spn	a5,sp,16
   251f6:	00f50463          	beq	a0,a5,251fe <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x72>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   251fa:	b16f10ef          	jal	ra,16510 <operator delete(void*)@plt>
	    ++this->_M_impl._M_finish;
   251fe:	008ab783          	ld	a5,8(s5)
   25202:	03078793          	addi	a5,a5,48
   25206:	00fab423          	sd	a5,8(s5)
      }
   2520a:	60e6                	c.ldsp	ra,88(sp)
   2520c:	6446                	c.ldsp	s0,80(sp)
   2520e:	64a6                	c.ldsp	s1,72(sp)
   25210:	6906                	c.ldsp	s2,64(sp)
   25212:	79e2                	c.ldsp	s3,56(sp)
   25214:	7a42                	c.ldsp	s4,48(sp)
   25216:	7aa2                	c.ldsp	s5,40(sp)
   25218:	6125                	c.addi16sp	sp,96
   2521a:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   2521c:	842a                	c.mv	s0,a0
   2521e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25220:	081c                	c.addi4spn	a5,sp,16
   25222:	00f50463          	beq	a0,a5,2522a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x9e>
   25226:	aeaf10ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2522a:	8522                	c.mv	a0,s0
   2522c:	cc4f10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   25230:	8736                	c.mv	a4,a3
   25232:	86b2                	c.mv	a3,a2
   25234:	862e                	c.mv	a2,a1
   25236:	85ce                	c.mv	a1,s3
   25238:	00014317          	auipc	t1,0x14
   2523c:	2a033303          	ld	t1,672(t1) # 394d8 <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(__gnu_cxx::__normal_iterator<dwarf::line_table::file*, std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)@@Base+0x145ae>
   25240:	9302                	c.jalr	t1
      }
   25242:	b7e1                	c.j	2520a <void std::vector<dwarf::line_table::file, std::allocator<dwarf::line_table::file> >::emplace_back<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, unsigned long&, unsigned long&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, unsigned long&, unsigned long&)+0x7e>

0000000000025244 <dwarf::at_sibling(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x0X
//

AT_REFERENCE(sibling);
   25244:	7139                	c.addi16sp	sp,-64
   25246:	fc06                	c.sdsp	ra,56(sp)
   25248:	f822                	c.sdsp	s0,48(sp)
   2524a:	f426                	c.sdsp	s1,40(sp)
   2524c:	842a                	c.mv	s0,a0
   2524e:	4605                	c.li	a2,1
   25250:	0024                	c.addi4spn	s1,sp,8
   25252:	8526                	c.mv	a0,s1
   25254:	b04f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25258:	85a6                	c.mv	a1,s1
   2525a:	8522                	c.mv	a0,s0
   2525c:	94df80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   25260:	8522                	c.mv	a0,s0
   25262:	70e2                	c.ldsp	ra,56(sp)
   25264:	7442                	c.ldsp	s0,48(sp)
   25266:	74a2                	c.ldsp	s1,40(sp)
   25268:	6121                	c.addi16sp	sp,64
   2526a:	8082                	c.jr	ra

000000000002526c <dwarf::at_name[abi:cxx11](dwarf::die const&)>:
// XXX location
AT_STRING(name);
   2526c:	7139                	c.addi16sp	sp,-64
   2526e:	fc06                	c.sdsp	ra,56(sp)
   25270:	f822                	c.sdsp	s0,48(sp)
   25272:	f426                	c.sdsp	s1,40(sp)
   25274:	842a                	c.mv	s0,a0
   25276:	460d                	c.li	a2,3
   25278:	0024                	c.addi4spn	s1,sp,8
   2527a:	8526                	c.mv	a0,s1
   2527c:	adcf60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25280:	85a6                	c.mv	a1,s1
   25282:	8522                	c.mv	a0,s0
   25284:	8e1f80ef          	jal	ra,1db64 <dwarf::value::as_string[abi:cxx11]() const>
   25288:	8522                	c.mv	a0,s0
   2528a:	70e2                	c.ldsp	ra,56(sp)
   2528c:	7442                	c.ldsp	s0,48(sp)
   2528e:	74a2                	c.ldsp	s1,40(sp)
   25290:	6121                	c.addi16sp	sp,64
   25292:	8082                	c.jr	ra

0000000000025294 <dwarf::at_ordering(dwarf::die const&)>:
AT_ENUM(ordering, DW_ORD);
   25294:	7179                	c.addi16sp	sp,-48
   25296:	f406                	c.sdsp	ra,40(sp)
   25298:	f022                	c.sdsp	s0,32(sp)
   2529a:	85aa                	c.mv	a1,a0
   2529c:	4625                	c.li	a2,9
   2529e:	0020                	c.addi4spn	s0,sp,8
   252a0:	8522                	c.mv	a0,s0
   252a2:	ab6f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   252a6:	8522                	c.mv	a0,s0
   252a8:	fdbf60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   252ac:	2501                	c.addiw	a0,0
   252ae:	70a2                	c.ldsp	ra,40(sp)
   252b0:	7402                	c.ldsp	s0,32(sp)
   252b2:	6145                	c.addi16sp	sp,48
   252b4:	8082                	c.jr	ra

00000000000252b6 <dwarf::at_low_pc(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x1X
//

// XXX stmt_list
AT_ADDRESS(low_pc);
   252b6:	7179                	c.addi16sp	sp,-48
   252b8:	f406                	c.sdsp	ra,40(sp)
   252ba:	f022                	c.sdsp	s0,32(sp)
   252bc:	85aa                	c.mv	a1,a0
   252be:	4645                	c.li	a2,17
   252c0:	0020                	c.addi4spn	s0,sp,8
   252c2:	8522                	c.mv	a0,s0
   252c4:	a94f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   252c8:	8522                	c.mv	a0,s0
   252ca:	9b9f60ef          	jal	ra,1bc82 <dwarf::value::as_address() const>
   252ce:	70a2                	c.ldsp	ra,40(sp)
   252d0:	7402                	c.ldsp	s0,32(sp)
   252d2:	6145                	c.addi16sp	sp,48
   252d4:	8082                	c.jr	ra

00000000000252d6 <dwarf::at_language(dwarf::die const&)>:
  default:
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
                       to_string(v.get_type()));
  }
}
AT_ENUM(language, DW_LANG);
   252d6:	7179                	c.addi16sp	sp,-48
   252d8:	f406                	c.sdsp	ra,40(sp)
   252da:	f022                	c.sdsp	s0,32(sp)
   252dc:	85aa                	c.mv	a1,a0
   252de:	464d                	c.li	a2,19
   252e0:	0020                	c.addi4spn	s0,sp,8
   252e2:	8522                	c.mv	a0,s0
   252e4:	a74f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   252e8:	8522                	c.mv	a0,s0
   252ea:	f99f60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   252ee:	2501                	c.addiw	a0,0
   252f0:	70a2                	c.ldsp	ra,40(sp)
   252f2:	7402                	c.ldsp	s0,32(sp)
   252f4:	6145                	c.addi16sp	sp,48
   252f6:	8082                	c.jr	ra

00000000000252f8 <dwarf::at_discr(dwarf::die const&)>:
AT_REFERENCE(discr);
   252f8:	7139                	c.addi16sp	sp,-64
   252fa:	fc06                	c.sdsp	ra,56(sp)
   252fc:	f822                	c.sdsp	s0,48(sp)
   252fe:	f426                	c.sdsp	s1,40(sp)
   25300:	842a                	c.mv	s0,a0
   25302:	4655                	c.li	a2,21
   25304:	0024                	c.addi4spn	s1,sp,8
   25306:	8526                	c.mv	a0,s1
   25308:	a50f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2530c:	85a6                	c.mv	a1,s1
   2530e:	8522                	c.mv	a0,s0
   25310:	899f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   25314:	8522                	c.mv	a0,s0
   25316:	70e2                	c.ldsp	ra,56(sp)
   25318:	7442                	c.ldsp	s0,48(sp)
   2531a:	74a2                	c.ldsp	s1,40(sp)
   2531c:	6121                	c.addi16sp	sp,64
   2531e:	8082                	c.jr	ra

0000000000025320 <dwarf::at_discr_value(dwarf::die const&)>:
AT_ANY(discr_value); // XXX Signed or unsigned
   25320:	1141                	c.addi	sp,-16
   25322:	e406                	c.sdsp	ra,8(sp)
   25324:	e022                	c.sdsp	s0,0(sp)
   25326:	842a                	c.mv	s0,a0
   25328:	4659                	c.li	a2,22
   2532a:	a2ef60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2532e:	8522                	c.mv	a0,s0
   25330:	60a2                	c.ldsp	ra,8(sp)
   25332:	6402                	c.ldsp	s0,0(sp)
   25334:	0141                	c.addi	sp,16
   25336:	8082                	c.jr	ra

0000000000025338 <dwarf::at_visibility(dwarf::die const&)>:
AT_ENUM(visibility, DW_VIS);
   25338:	7179                	c.addi16sp	sp,-48
   2533a:	f406                	c.sdsp	ra,40(sp)
   2533c:	f022                	c.sdsp	s0,32(sp)
   2533e:	85aa                	c.mv	a1,a0
   25340:	465d                	c.li	a2,23
   25342:	0020                	c.addi4spn	s0,sp,8
   25344:	8522                	c.mv	a0,s0
   25346:	a12f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2534a:	8522                	c.mv	a0,s0
   2534c:	f37f60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   25350:	2501                	c.addiw	a0,0
   25352:	70a2                	c.ldsp	ra,40(sp)
   25354:	7402                	c.ldsp	s0,32(sp)
   25356:	6145                	c.addi16sp	sp,48
   25358:	8082                	c.jr	ra

000000000002535a <dwarf::at_import(dwarf::die const&)>:
AT_REFERENCE(import);
   2535a:	7139                	c.addi16sp	sp,-64
   2535c:	fc06                	c.sdsp	ra,56(sp)
   2535e:	f822                	c.sdsp	s0,48(sp)
   25360:	f426                	c.sdsp	s1,40(sp)
   25362:	842a                	c.mv	s0,a0
   25364:	4661                	c.li	a2,24
   25366:	0024                	c.addi4spn	s1,sp,8
   25368:	8526                	c.mv	a0,s1
   2536a:	9eef60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2536e:	85a6                	c.mv	a1,s1
   25370:	8522                	c.mv	a0,s0
   25372:	837f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   25376:	8522                	c.mv	a0,s0
   25378:	70e2                	c.ldsp	ra,56(sp)
   2537a:	7442                	c.ldsp	s0,48(sp)
   2537c:	74a2                	c.ldsp	s1,40(sp)
   2537e:	6121                	c.addi16sp	sp,64
   25380:	8082                	c.jr	ra

0000000000025382 <dwarf::at_common_reference(dwarf::die const&)>:
// XXX string_length
AT_REFERENCE(common_reference);
   25382:	7139                	c.addi16sp	sp,-64
   25384:	fc06                	c.sdsp	ra,56(sp)
   25386:	f822                	c.sdsp	s0,48(sp)
   25388:	f426                	c.sdsp	s1,40(sp)
   2538a:	842a                	c.mv	s0,a0
   2538c:	4669                	c.li	a2,26
   2538e:	0024                	c.addi4spn	s1,sp,8
   25390:	8526                	c.mv	a0,s1
   25392:	9c6f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25396:	85a6                	c.mv	a1,s1
   25398:	8522                	c.mv	a0,s0
   2539a:	80ff80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   2539e:	8522                	c.mv	a0,s0
   253a0:	70e2                	c.ldsp	ra,56(sp)
   253a2:	7442                	c.ldsp	s0,48(sp)
   253a4:	74a2                	c.ldsp	s1,40(sp)
   253a6:	6121                	c.addi16sp	sp,64
   253a8:	8082                	c.jr	ra

00000000000253aa <dwarf::at_comp_dir[abi:cxx11](dwarf::die const&)>:
AT_STRING(comp_dir);
   253aa:	7139                	c.addi16sp	sp,-64
   253ac:	fc06                	c.sdsp	ra,56(sp)
   253ae:	f822                	c.sdsp	s0,48(sp)
   253b0:	f426                	c.sdsp	s1,40(sp)
   253b2:	842a                	c.mv	s0,a0
   253b4:	466d                	c.li	a2,27
   253b6:	0024                	c.addi4spn	s1,sp,8
   253b8:	8526                	c.mv	a0,s1
   253ba:	99ef60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   253be:	85a6                	c.mv	a1,s1
   253c0:	8522                	c.mv	a0,s0
   253c2:	fa2f80ef          	jal	ra,1db64 <dwarf::value::as_string[abi:cxx11]() const>
   253c6:	8522                	c.mv	a0,s0
   253c8:	70e2                	c.ldsp	ra,56(sp)
   253ca:	7442                	c.ldsp	s0,48(sp)
   253cc:	74a2                	c.ldsp	s1,40(sp)
   253ce:	6121                	c.addi16sp	sp,64
   253d0:	8082                	c.jr	ra

00000000000253d2 <dwarf::at_const_value(dwarf::die const&)>:
AT_ANY(const_value);
   253d2:	1141                	c.addi	sp,-16
   253d4:	e406                	c.sdsp	ra,8(sp)
   253d6:	e022                	c.sdsp	s0,0(sp)
   253d8:	842a                	c.mv	s0,a0
   253da:	4671                	c.li	a2,28
   253dc:	97cf60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   253e0:	8522                	c.mv	a0,s0
   253e2:	60a2                	c.ldsp	ra,8(sp)
   253e4:	6402                	c.ldsp	s0,0(sp)
   253e6:	0141                	c.addi	sp,16
   253e8:	8082                	c.jr	ra

00000000000253ea <dwarf::at_containing_type(dwarf::die const&)>:
AT_REFERENCE(containing_type);
   253ea:	7139                	c.addi16sp	sp,-64
   253ec:	fc06                	c.sdsp	ra,56(sp)
   253ee:	f822                	c.sdsp	s0,48(sp)
   253f0:	f426                	c.sdsp	s1,40(sp)
   253f2:	842a                	c.mv	s0,a0
   253f4:	4675                	c.li	a2,29
   253f6:	0024                	c.addi4spn	s1,sp,8
   253f8:	8526                	c.mv	a0,s1
   253fa:	95ef60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   253fe:	85a6                	c.mv	a1,s1
   25400:	8522                	c.mv	a0,s0
   25402:	fa6f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   25406:	8522                	c.mv	a0,s0
   25408:	70e2                	c.ldsp	ra,56(sp)
   2540a:	7442                	c.ldsp	s0,48(sp)
   2540c:	74a2                	c.ldsp	s1,40(sp)
   2540e:	6121                	c.addi16sp	sp,64
   25410:	8082                	c.jr	ra

0000000000025412 <dwarf::at_inline(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x2X
//

DW_INL at_inline(const die &d) {
   25412:	7179                	c.addi16sp	sp,-48
   25414:	f406                	c.sdsp	ra,40(sp)
   25416:	f022                	c.sdsp	s0,32(sp)
   25418:	85aa                	c.mv	a1,a0
  // XXX Missing attribute is equivalent to DW_INL_not_inlined
  // (DWARF4 section 3.3.8)
  return (DW_INL)d[DW_AT::inline_].as_uconstant();
   2541a:	02000613          	addi	a2,zero,32
   2541e:	0020                	c.addi4spn	s0,sp,8
   25420:	8522                	c.mv	a0,s0
   25422:	936f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25426:	8522                	c.mv	a0,s0
   25428:	e5bf60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
}
   2542c:	2501                	c.addiw	a0,0
   2542e:	70a2                	c.ldsp	ra,40(sp)
   25430:	7402                	c.ldsp	s0,32(sp)
   25432:	6145                	c.addi16sp	sp,48
   25434:	8082                	c.jr	ra

0000000000025436 <dwarf::at_is_optional(dwarf::die const&)>:
AT_FLAG(is_optional);
   25436:	7179                	c.addi16sp	sp,-48
   25438:	f406                	c.sdsp	ra,40(sp)
   2543a:	f022                	c.sdsp	s0,32(sp)
   2543c:	85aa                	c.mv	a1,a0
   2543e:	02100613          	addi	a2,zero,33
   25442:	0020                	c.addi4spn	s0,sp,8
   25444:	8522                	c.mv	a0,s0
   25446:	912f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2544a:	8522                	c.mv	a0,s0
   2544c:	933f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25450:	70a2                	c.ldsp	ra,40(sp)
   25452:	7402                	c.ldsp	s0,32(sp)
   25454:	6145                	c.addi16sp	sp,48
   25456:	8082                	c.jr	ra

0000000000025458 <dwarf::at_producer[abi:cxx11](dwarf::die const&)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
AT_STRING(producer);
   25458:	7139                	c.addi16sp	sp,-64
   2545a:	fc06                	c.sdsp	ra,56(sp)
   2545c:	f822                	c.sdsp	s0,48(sp)
   2545e:	f426                	c.sdsp	s1,40(sp)
   25460:	842a                	c.mv	s0,a0
   25462:	02500613          	addi	a2,zero,37
   25466:	0024                	c.addi4spn	s1,sp,8
   25468:	8526                	c.mv	a0,s1
   2546a:	8eef60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2546e:	85a6                	c.mv	a1,s1
   25470:	8522                	c.mv	a0,s0
   25472:	ef2f80ef          	jal	ra,1db64 <dwarf::value::as_string[abi:cxx11]() const>
   25476:	8522                	c.mv	a0,s0
   25478:	70e2                	c.ldsp	ra,56(sp)
   2547a:	7442                	c.ldsp	s0,48(sp)
   2547c:	74a2                	c.ldsp	s1,40(sp)
   2547e:	6121                	c.addi16sp	sp,64
   25480:	8082                	c.jr	ra

0000000000025482 <dwarf::at_prototyped(dwarf::die const&)>:
AT_FLAG(prototyped);
   25482:	7179                	c.addi16sp	sp,-48
   25484:	f406                	c.sdsp	ra,40(sp)
   25486:	f022                	c.sdsp	s0,32(sp)
   25488:	85aa                	c.mv	a1,a0
   2548a:	02700613          	addi	a2,zero,39
   2548e:	0020                	c.addi4spn	s0,sp,8
   25490:	8522                	c.mv	a0,s0
   25492:	8c6f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25496:	8522                	c.mv	a0,s0
   25498:	8e7f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   2549c:	70a2                	c.ldsp	ra,40(sp)
   2549e:	7402                	c.ldsp	s0,32(sp)
   254a0:	6145                	c.addi16sp	sp,48
   254a2:	8082                	c.jr	ra

00000000000254a4 <dwarf::at_abstract_origin(dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x3X
//

AT_REFERENCE(abstract_origin);
   254a4:	7139                	c.addi16sp	sp,-64
   254a6:	fc06                	c.sdsp	ra,56(sp)
   254a8:	f822                	c.sdsp	s0,48(sp)
   254aa:	f426                	c.sdsp	s1,40(sp)
   254ac:	842a                	c.mv	s0,a0
   254ae:	03100613          	addi	a2,zero,49
   254b2:	0024                	c.addi4spn	s1,sp,8
   254b4:	8526                	c.mv	a0,s1
   254b6:	8a2f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   254ba:	85a6                	c.mv	a1,s1
   254bc:	8522                	c.mv	a0,s0
   254be:	eeaf80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   254c2:	8522                	c.mv	a0,s0
   254c4:	70e2                	c.ldsp	ra,56(sp)
   254c6:	7442                	c.ldsp	s0,48(sp)
   254c8:	74a2                	c.ldsp	s1,40(sp)
   254ca:	6121                	c.addi16sp	sp,64
   254cc:	8082                	c.jr	ra

00000000000254ce <dwarf::at_accessibility(dwarf::die const&)>:
AT_ENUM(accessibility, DW_ACCESS);
   254ce:	7179                	c.addi16sp	sp,-48
   254d0:	f406                	c.sdsp	ra,40(sp)
   254d2:	f022                	c.sdsp	s0,32(sp)
   254d4:	85aa                	c.mv	a1,a0
   254d6:	03200613          	addi	a2,zero,50
   254da:	0020                	c.addi4spn	s0,sp,8
   254dc:	8522                	c.mv	a0,s0
   254de:	87af60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   254e2:	8522                	c.mv	a0,s0
   254e4:	d9ff60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   254e8:	2501                	c.addiw	a0,0
   254ea:	70a2                	c.ldsp	ra,40(sp)
   254ec:	7402                	c.ldsp	s0,32(sp)
   254ee:	6145                	c.addi16sp	sp,48
   254f0:	8082                	c.jr	ra

00000000000254f2 <dwarf::at_artificial(dwarf::die const&)>:
// XXX const address_class
AT_FLAG(artificial);
   254f2:	7179                	c.addi16sp	sp,-48
   254f4:	f406                	c.sdsp	ra,40(sp)
   254f6:	f022                	c.sdsp	s0,32(sp)
   254f8:	85aa                	c.mv	a1,a0
   254fa:	03400613          	addi	a2,zero,52
   254fe:	0020                	c.addi4spn	s0,sp,8
   25500:	8522                	c.mv	a0,s0
   25502:	856f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25506:	8522                	c.mv	a0,s0
   25508:	877f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   2550c:	70a2                	c.ldsp	ra,40(sp)
   2550e:	7402                	c.ldsp	s0,32(sp)
   25510:	6145                	c.addi16sp	sp,48
   25512:	8082                	c.jr	ra

0000000000025514 <dwarf::at_calling_convention(dwarf::die const&)>:
// XXX base_types
AT_ENUM(calling_convention, DW_CC);
   25514:	7179                	c.addi16sp	sp,-48
   25516:	f406                	c.sdsp	ra,40(sp)
   25518:	f022                	c.sdsp	s0,32(sp)
   2551a:	85aa                	c.mv	a1,a0
   2551c:	03600613          	addi	a2,zero,54
   25520:	0020                	c.addi4spn	s0,sp,8
   25522:	8522                	c.mv	a0,s0
   25524:	834f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25528:	8522                	c.mv	a0,s0
   2552a:	d59f60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   2552e:	2501                	c.addiw	a0,0
   25530:	70a2                	c.ldsp	ra,40(sp)
   25532:	7402                	c.ldsp	s0,32(sp)
   25534:	6145                	c.addi16sp	sp,48
   25536:	8082                	c.jr	ra

0000000000025538 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)>:
AT_UDYNAMIC(count);
expr_result at_data_member_location(const die &d, expr_context *ctx, taddr base,
                                    taddr pc) {
   25538:	7135                	c.addi16sp	sp,-160
   2553a:	ed06                	c.sdsp	ra,152(sp)
   2553c:	e922                	c.sdsp	s0,144(sp)
   2553e:	e526                	c.sdsp	s1,136(sp)
   25540:	e14a                	c.sdsp	s2,128(sp)
   25542:	fcce                	c.sdsp	s3,120(sp)
   25544:	842a                	c.mv	s0,a0
   25546:	8932                	c.mv	s2,a2
   25548:	84b6                	c.mv	s1,a3
  value v(d[DW_AT::data_member_location]);
   2554a:	03800613          	addi	a2,zero,56
   2554e:	0088                	c.addi4spn	a0,sp,64
   25550:	808f60ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   25554:	47b6                	c.lwsp	a5,76(sp)
  switch (v.get_type()) {
   25556:	4719                	c.li	a4,6
   25558:	04e78b63          	beq	a5,a4,255ae <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x76>
   2555c:	02f74b63          	blt	a4,a5,25592 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x5a>
   25560:	37f5                	c.addiw	a5,-3
   25562:	4705                	c.li	a4,1
   25564:	06f76d63          	bltu	a4,a5,255de <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xa6>
  case value::type::constant:
  case value::type::uconstant:
    return {expr_result::type::address, base + v.as_uconstant()};
   25568:	00043023          	sd	zero,0(s0)
   2556c:	00043423          	sd	zero,8(s0)
   25570:	00043823          	sd	zero,16(s0)
   25574:	00043c23          	sd	zero,24(s0)
   25578:	0088                	c.addi4spn	a0,sp,64
   2557a:	d09f60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   2557e:	94aa                	c.add	s1,a0
   25580:	e404                	c.sd	s1,8(s0)
    throw std::runtime_error("not implemented");
  default:
    throw format_error("DW_AT_data_member_location has unexpected type " +
                       to_string(v.get_type()));
  }
}
   25582:	8522                	c.mv	a0,s0
   25584:	60ea                	c.ldsp	ra,152(sp)
   25586:	644a                	c.ldsp	s0,144(sp)
   25588:	64aa                	c.ldsp	s1,136(sp)
   2558a:	690a                	c.ldsp	s2,128(sp)
   2558c:	79e6                	c.ldsp	s3,120(sp)
   2558e:	610d                	c.addi16sp	sp,160
   25590:	8082                	c.jr	ra
  switch (v.get_type()) {
   25592:	4725                	c.li	a4,9
   25594:	04e79563          	bne	a5,a4,255de <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xa6>
    throw std::runtime_error("not implemented");
   25598:	4541                	c.li	a0,16
   2559a:	e87f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2559e:	842a                	c.mv	s0,a0
   255a0:	00009597          	auipc	a1,0x9
   255a4:	f9858593          	addi	a1,a1,-104 # 2e538 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x70>
   255a8:	e49f00ef          	jal	ra,163f0 <std::runtime_error::runtime_error(char const*)@plt>
   255ac:	a831                	c.j	255c8 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x90>
    return v.as_exprloc().evaluate(ctx, base);
   255ae:	008c                	c.addi4spn	a1,sp,64
   255b0:	05810993          	addi	s3,sp,88
   255b4:	854e                	c.mv	a0,s3
   255b6:	c30f70ef          	jal	ra,1c9e6 <dwarf::value::as_exprloc() const>
   255ba:	86a6                	c.mv	a3,s1
   255bc:	864a                	c.mv	a2,s2
   255be:	85ce                	c.mv	a1,s3
   255c0:	8522                	c.mv	a0,s0
   255c2:	84efc0ef          	jal	ra,21610 <dwarf::expr::evaluate(dwarf::expr_context*, unsigned long) const>
   255c6:	bf75                	c.j	25582 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x4a>
    throw std::runtime_error("not implemented");
   255c8:	00014617          	auipc	a2,0x14
   255cc:	e4063603          	ld	a2,-448(a2) # 39408 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
   255d0:	00014597          	auipc	a1,0x14
   255d4:	0285b583          	ld	a1,40(a1) # 395f8 <typeinfo for std::runtime_error@GLIBCXX_3.4>
   255d8:	8522                	c.mv	a0,s0
   255da:	8e6f10ef          	jal	ra,166c0 <__cxa_throw@plt>
                       to_string(v.get_type()));
   255de:	4541                	c.li	a0,16
   255e0:	e41f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   255e4:	84aa                	c.mv	s1,a0
   255e6:	45b6                	c.lwsp	a1,76(sp)
   255e8:	850a                	c.mv	a0,sp
   255ea:	615010ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    { return std::move(__rhs.insert(0, __lhs)); }
   255ee:	00009617          	auipc	a2,0x9
   255f2:	f5a60613          	addi	a2,a2,-166 # 2e548 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   255f6:	4581                	c.li	a1,0
   255f8:	850a                	c.mv	a0,sp
   255fa:	d97f00ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   255fe:	85aa                	c.mv	a1,a0
   25600:	1000                	c.addi4spn	s0,sp,32
   25602:	8522                	c.mv	a0,s0
   25604:	e6df00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   25608:	85a2                	c.mv	a1,s0
   2560a:	8526                	c.mv	a0,s1
   2560c:	f95f00ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25610:	00014797          	auipc	a5,0x14
   25614:	f487b783          	ld	a5,-184(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   25618:	07c1                	c.addi	a5,16
   2561a:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   2561c:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2561e:	181c                	c.addi4spn	a5,sp,48
   25620:	00f50463          	beq	a0,a5,25628 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xf0>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   25624:	eedf00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25628:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2562a:	081c                	c.addi4spn	a5,sp,16
   2562c:	00f50463          	beq	a0,a5,25634 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0xfc>
   25630:	ee1f00ef          	jal	ra,16510 <operator delete(void*)@plt>
   25634:	00014617          	auipc	a2,0x14
   25638:	d4c63603          	ld	a2,-692(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   2563c:	00014597          	auipc	a1,0x14
   25640:	c745b583          	ld	a1,-908(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   25644:	8526                	c.mv	a0,s1
   25646:	87af10ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw std::runtime_error("not implemented");
   2564a:	84aa                	c.mv	s1,a0
   2564c:	8522                	c.mv	a0,s0
   2564e:	e83f00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   25652:	8526                	c.mv	a0,s1
   25654:	89cf10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   25658:	842a                	c.mv	s0,a0
   2565a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2565c:	181c                	c.addi4spn	a5,sp,48
   2565e:	00f50463          	beq	a0,a5,25666 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x12e>
   25662:	eaff00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25666:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25668:	081c                	c.addi4spn	a5,sp,16
   2566a:	00f50463          	beq	a0,a5,25672 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x13a>
   2566e:	ea3f00ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   25672:	8526                	c.mv	a0,s1
   25674:	e5df00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   25678:	8522                	c.mv	a0,s0
   2567a:	876f10ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2567e:	842a                	c.mv	s0,a0
   25680:	b7dd                	c.j	25666 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x12e>
   25682:	842a                	c.mv	s0,a0
   25684:	b7fd                	c.j	25672 <dwarf::at_data_member_location(dwarf::die const&, dwarf::expr_context*, unsigned long, unsigned long)+0x13a>

0000000000025686 <dwarf::at_declaration(dwarf::die const&)>:
// XXX decl_column decl_file decl_line
AT_FLAG(declaration);
   25686:	7179                	c.addi16sp	sp,-48
   25688:	f406                	c.sdsp	ra,40(sp)
   2568a:	f022                	c.sdsp	s0,32(sp)
   2568c:	85aa                	c.mv	a1,a0
   2568e:	03c00613          	addi	a2,zero,60
   25692:	0020                	c.addi4spn	s0,sp,8
   25694:	8522                	c.mv	a0,s0
   25696:	ec3f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2569a:	8522                	c.mv	a0,s0
   2569c:	ee2f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   256a0:	70a2                	c.ldsp	ra,40(sp)
   256a2:	7402                	c.ldsp	s0,32(sp)
   256a4:	6145                	c.addi16sp	sp,48
   256a6:	8082                	c.jr	ra

00000000000256a8 <dwarf::at_encoding(dwarf::die const&)>:
// XXX discr_list
AT_ENUM(encoding, DW_ATE);
   256a8:	7179                	c.addi16sp	sp,-48
   256aa:	f406                	c.sdsp	ra,40(sp)
   256ac:	f022                	c.sdsp	s0,32(sp)
   256ae:	85aa                	c.mv	a1,a0
   256b0:	03e00613          	addi	a2,zero,62
   256b4:	0020                	c.addi4spn	s0,sp,8
   256b6:	8522                	c.mv	a0,s0
   256b8:	ea1f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   256bc:	8522                	c.mv	a0,s0
   256be:	bc5f60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   256c2:	2501                	c.addiw	a0,0
   256c4:	70a2                	c.ldsp	ra,40(sp)
   256c6:	7402                	c.ldsp	s0,32(sp)
   256c8:	6145                	c.addi16sp	sp,48
   256ca:	8082                	c.jr	ra

00000000000256cc <dwarf::at_external(dwarf::die const&)>:
AT_FLAG(external);
   256cc:	7179                	c.addi16sp	sp,-48
   256ce:	f406                	c.sdsp	ra,40(sp)
   256d0:	f022                	c.sdsp	s0,32(sp)
   256d2:	85aa                	c.mv	a1,a0
   256d4:	03f00613          	addi	a2,zero,63
   256d8:	0020                	c.addi4spn	s0,sp,8
   256da:	8522                	c.mv	a0,s0
   256dc:	e7df50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   256e0:	8522                	c.mv	a0,s0
   256e2:	e9cf70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   256e6:	70a2                	c.ldsp	ra,40(sp)
   256e8:	7402                	c.ldsp	s0,32(sp)
   256ea:	6145                	c.addi16sp	sp,48
   256ec:	8082                	c.jr	ra

00000000000256ee <dwarf::at_friend(dwarf::die const&)>:
//////////////////////////////////////////////////////////////////
// 0x4X
//

// XXX frame_base
die at_friend(const die &d) { return d[DW_AT::friend_].as_reference(); }
   256ee:	7139                	c.addi16sp	sp,-64
   256f0:	fc06                	c.sdsp	ra,56(sp)
   256f2:	f822                	c.sdsp	s0,48(sp)
   256f4:	f426                	c.sdsp	s1,40(sp)
   256f6:	842a                	c.mv	s0,a0
   256f8:	04100613          	addi	a2,zero,65
   256fc:	0024                	c.addi4spn	s1,sp,8
   256fe:	8526                	c.mv	a0,s1
   25700:	e59f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25704:	85a6                	c.mv	a1,s1
   25706:	8522                	c.mv	a0,s0
   25708:	ca0f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   2570c:	8522                	c.mv	a0,s0
   2570e:	70e2                	c.ldsp	ra,56(sp)
   25710:	7442                	c.ldsp	s0,48(sp)
   25712:	74a2                	c.ldsp	s1,40(sp)
   25714:	6121                	c.addi16sp	sp,64
   25716:	8082                	c.jr	ra

0000000000025718 <dwarf::at_identifier_case(dwarf::die const&)>:
AT_ENUM(identifier_case, DW_ID);
   25718:	7179                	c.addi16sp	sp,-48
   2571a:	f406                	c.sdsp	ra,40(sp)
   2571c:	f022                	c.sdsp	s0,32(sp)
   2571e:	85aa                	c.mv	a1,a0
   25720:	04200613          	addi	a2,zero,66
   25724:	0020                	c.addi4spn	s0,sp,8
   25726:	8522                	c.mv	a0,s0
   25728:	e31f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2572c:	8522                	c.mv	a0,s0
   2572e:	b55f60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   25732:	2501                	c.addiw	a0,0
   25734:	70a2                	c.ldsp	ra,40(sp)
   25736:	7402                	c.ldsp	s0,32(sp)
   25738:	6145                	c.addi16sp	sp,48
   2573a:	8082                	c.jr	ra

000000000002573c <dwarf::at_namelist_item(dwarf::die const&)>:
// XXX macro_info
AT_REFERENCE(namelist_item);
   2573c:	7139                	c.addi16sp	sp,-64
   2573e:	fc06                	c.sdsp	ra,56(sp)
   25740:	f822                	c.sdsp	s0,48(sp)
   25742:	f426                	c.sdsp	s1,40(sp)
   25744:	842a                	c.mv	s0,a0
   25746:	04400613          	addi	a2,zero,68
   2574a:	0024                	c.addi4spn	s1,sp,8
   2574c:	8526                	c.mv	a0,s1
   2574e:	e0bf50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25752:	85a6                	c.mv	a1,s1
   25754:	8522                	c.mv	a0,s0
   25756:	c52f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   2575a:	8522                	c.mv	a0,s0
   2575c:	70e2                	c.ldsp	ra,56(sp)
   2575e:	7442                	c.ldsp	s0,48(sp)
   25760:	74a2                	c.ldsp	s1,40(sp)
   25762:	6121                	c.addi16sp	sp,64
   25764:	8082                	c.jr	ra

0000000000025766 <dwarf::at_priority(dwarf::die const&)>:
AT_REFERENCE(priority); // XXX Computed might be useful
   25766:	7139                	c.addi16sp	sp,-64
   25768:	fc06                	c.sdsp	ra,56(sp)
   2576a:	f822                	c.sdsp	s0,48(sp)
   2576c:	f426                	c.sdsp	s1,40(sp)
   2576e:	842a                	c.mv	s0,a0
   25770:	04500613          	addi	a2,zero,69
   25774:	0024                	c.addi4spn	s1,sp,8
   25776:	8526                	c.mv	a0,s1
   25778:	de1f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2577c:	85a6                	c.mv	a1,s1
   2577e:	8522                	c.mv	a0,s0
   25780:	c28f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   25784:	8522                	c.mv	a0,s0
   25786:	70e2                	c.ldsp	ra,56(sp)
   25788:	7442                	c.ldsp	s0,48(sp)
   2578a:	74a2                	c.ldsp	s1,40(sp)
   2578c:	6121                	c.addi16sp	sp,64
   2578e:	8082                	c.jr	ra

0000000000025790 <dwarf::at_specification(dwarf::die const&)>:
// XXX segment
AT_REFERENCE(specification);
   25790:	7139                	c.addi16sp	sp,-64
   25792:	fc06                	c.sdsp	ra,56(sp)
   25794:	f822                	c.sdsp	s0,48(sp)
   25796:	f426                	c.sdsp	s1,40(sp)
   25798:	842a                	c.mv	s0,a0
   2579a:	04700613          	addi	a2,zero,71
   2579e:	0024                	c.addi4spn	s1,sp,8
   257a0:	8526                	c.mv	a0,s1
   257a2:	db7f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   257a6:	85a6                	c.mv	a1,s1
   257a8:	8522                	c.mv	a0,s0
   257aa:	bfef80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   257ae:	8522                	c.mv	a0,s0
   257b0:	70e2                	c.ldsp	ra,56(sp)
   257b2:	7442                	c.ldsp	s0,48(sp)
   257b4:	74a2                	c.ldsp	s1,40(sp)
   257b6:	6121                	c.addi16sp	sp,64
   257b8:	8082                	c.jr	ra

00000000000257ba <dwarf::at_type(dwarf::die const&)>:
// XXX static_link
AT_REFERENCE(type);
   257ba:	7139                	c.addi16sp	sp,-64
   257bc:	fc06                	c.sdsp	ra,56(sp)
   257be:	f822                	c.sdsp	s0,48(sp)
   257c0:	f426                	c.sdsp	s1,40(sp)
   257c2:	842a                	c.mv	s0,a0
   257c4:	04900613          	addi	a2,zero,73
   257c8:	0024                	c.addi4spn	s1,sp,8
   257ca:	8526                	c.mv	a0,s1
   257cc:	d8df50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   257d0:	85a6                	c.mv	a1,s1
   257d2:	8522                	c.mv	a0,s0
   257d4:	bd4f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   257d8:	8522                	c.mv	a0,s0
   257da:	70e2                	c.ldsp	ra,56(sp)
   257dc:	7442                	c.ldsp	s0,48(sp)
   257de:	74a2                	c.ldsp	s1,40(sp)
   257e0:	6121                	c.addi16sp	sp,64
   257e2:	8082                	c.jr	ra

00000000000257e4 <dwarf::at_variable_parameter(dwarf::die const&)>:
// XXX use_location
AT_FLAG(variable_parameter);
   257e4:	7179                	c.addi16sp	sp,-48
   257e6:	f406                	c.sdsp	ra,40(sp)
   257e8:	f022                	c.sdsp	s0,32(sp)
   257ea:	85aa                	c.mv	a1,a0
   257ec:	04b00613          	addi	a2,zero,75
   257f0:	0020                	c.addi4spn	s0,sp,8
   257f2:	8522                	c.mv	a0,s0
   257f4:	d65f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   257f8:	8522                	c.mv	a0,s0
   257fa:	d84f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   257fe:	70a2                	c.ldsp	ra,40(sp)
   25800:	7402                	c.ldsp	s0,32(sp)
   25802:	6145                	c.addi16sp	sp,48
   25804:	8082                	c.jr	ra

0000000000025806 <dwarf::at_virtuality(dwarf::die const&)>:
// XXX 7.11 The value DW_VIRTUALITY_none is equivalent to the absence
// of the DW_AT_virtuality attribute.
AT_ENUM(virtuality, DW_VIRTUALITY);
   25806:	7179                	c.addi16sp	sp,-48
   25808:	f406                	c.sdsp	ra,40(sp)
   2580a:	f022                	c.sdsp	s0,32(sp)
   2580c:	85aa                	c.mv	a1,a0
   2580e:	04c00613          	addi	a2,zero,76
   25812:	0020                	c.addi4spn	s0,sp,8
   25814:	8522                	c.mv	a0,s0
   25816:	d43f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2581a:	8522                	c.mv	a0,s0
   2581c:	a67f60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   25820:	2501                	c.addiw	a0,0
   25822:	70a2                	c.ldsp	ra,40(sp)
   25824:	7402                	c.ldsp	s0,32(sp)
   25826:	6145                	c.addi16sp	sp,48
   25828:	8082                	c.jr	ra

000000000002582a <dwarf::at_entry_pc(dwarf::die const&)>:
// 0x5X
//

// XXX data_location
AT_UDYNAMIC(byte_stride);
AT_ADDRESS(entry_pc);
   2582a:	7179                	c.addi16sp	sp,-48
   2582c:	f406                	c.sdsp	ra,40(sp)
   2582e:	f022                	c.sdsp	s0,32(sp)
   25830:	85aa                	c.mv	a1,a0
   25832:	05200613          	addi	a2,zero,82
   25836:	0020                	c.addi4spn	s0,sp,8
   25838:	8522                	c.mv	a0,s0
   2583a:	d1ff50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2583e:	8522                	c.mv	a0,s0
   25840:	c42f60ef          	jal	ra,1bc82 <dwarf::value::as_address() const>
   25844:	70a2                	c.ldsp	ra,40(sp)
   25846:	7402                	c.ldsp	s0,32(sp)
   25848:	6145                	c.addi16sp	sp,48
   2584a:	8082                	c.jr	ra

000000000002584c <dwarf::at_use_UTF8(dwarf::die const&)>:
AT_FLAG(use_UTF8);
   2584c:	7179                	c.addi16sp	sp,-48
   2584e:	f406                	c.sdsp	ra,40(sp)
   25850:	f022                	c.sdsp	s0,32(sp)
   25852:	85aa                	c.mv	a1,a0
   25854:	05300613          	addi	a2,zero,83
   25858:	0020                	c.addi4spn	s0,sp,8
   2585a:	8522                	c.mv	a0,s0
   2585c:	cfdf50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25860:	8522                	c.mv	a0,s0
   25862:	d1cf70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25866:	70a2                	c.ldsp	ra,40(sp)
   25868:	7402                	c.ldsp	s0,32(sp)
   2586a:	6145                	c.addi16sp	sp,48
   2586c:	8082                	c.jr	ra

000000000002586e <dwarf::at_extension(dwarf::die const&)>:
AT_REFERENCE(extension);
   2586e:	7139                	c.addi16sp	sp,-64
   25870:	fc06                	c.sdsp	ra,56(sp)
   25872:	f822                	c.sdsp	s0,48(sp)
   25874:	f426                	c.sdsp	s1,40(sp)
   25876:	842a                	c.mv	s0,a0
   25878:	05400613          	addi	a2,zero,84
   2587c:	0024                	c.addi4spn	s1,sp,8
   2587e:	8526                	c.mv	a0,s1
   25880:	cd9f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25884:	85a6                	c.mv	a1,s1
   25886:	8522                	c.mv	a0,s0
   25888:	b20f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   2588c:	8522                	c.mv	a0,s0
   2588e:	70e2                	c.ldsp	ra,56(sp)
   25890:	7442                	c.ldsp	s0,48(sp)
   25892:	74a2                	c.ldsp	s1,40(sp)
   25894:	6121                	c.addi16sp	sp,64
   25896:	8082                	c.jr	ra

0000000000025898 <dwarf::at_ranges(dwarf::die const&)>:
rangelist at_ranges(const die &d) { return d[DW_AT::ranges].as_rangelist(); }
   25898:	7139                	c.addi16sp	sp,-64
   2589a:	fc06                	c.sdsp	ra,56(sp)
   2589c:	f822                	c.sdsp	s0,48(sp)
   2589e:	f426                	c.sdsp	s1,40(sp)
   258a0:	842a                	c.mv	s0,a0
   258a2:	05500613          	addi	a2,zero,85
   258a6:	0024                	c.addi4spn	s1,sp,8
   258a8:	8526                	c.mv	a0,s1
   258aa:	caff50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   258ae:	85a6                	c.mv	a1,s1
   258b0:	8522                	c.mv	a0,s0
   258b2:	834f80ef          	jal	ra,1d8e6 <dwarf::value::as_rangelist() const>
   258b6:	8522                	c.mv	a0,s0
   258b8:	70e2                	c.ldsp	ra,56(sp)
   258ba:	7442                	c.ldsp	s0,48(sp)
   258bc:	74a2                	c.ldsp	s1,40(sp)
   258be:	6121                	c.addi16sp	sp,64
   258c0:	8082                	c.jr	ra

00000000000258c2 <dwarf::at_description[abi:cxx11](dwarf::die const&)>:
// XXX trampoline
// XXX const call_column, call_file, call_line
AT_STRING(description);
   258c2:	7139                	c.addi16sp	sp,-64
   258c4:	fc06                	c.sdsp	ra,56(sp)
   258c6:	f822                	c.sdsp	s0,48(sp)
   258c8:	f426                	c.sdsp	s1,40(sp)
   258ca:	842a                	c.mv	s0,a0
   258cc:	05a00613          	addi	a2,zero,90
   258d0:	0024                	c.addi4spn	s1,sp,8
   258d2:	8526                	c.mv	a0,s1
   258d4:	c85f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   258d8:	85a6                	c.mv	a1,s1
   258da:	8522                	c.mv	a0,s0
   258dc:	a88f80ef          	jal	ra,1db64 <dwarf::value::as_string[abi:cxx11]() const>
   258e0:	8522                	c.mv	a0,s0
   258e2:	70e2                	c.ldsp	ra,56(sp)
   258e4:	7442                	c.ldsp	s0,48(sp)
   258e6:	74a2                	c.ldsp	s1,40(sp)
   258e8:	6121                	c.addi16sp	sp,64
   258ea:	8082                	c.jr	ra

00000000000258ec <dwarf::at_small(dwarf::die const&)>:
// XXX const binary_scale
// XXX const decimal_scale
AT_REFERENCE(small);
   258ec:	7139                	c.addi16sp	sp,-64
   258ee:	fc06                	c.sdsp	ra,56(sp)
   258f0:	f822                	c.sdsp	s0,48(sp)
   258f2:	f426                	c.sdsp	s1,40(sp)
   258f4:	842a                	c.mv	s0,a0
   258f6:	05d00613          	addi	a2,zero,93
   258fa:	0024                	c.addi4spn	s1,sp,8
   258fc:	8526                	c.mv	a0,s1
   258fe:	c5bf50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25902:	85a6                	c.mv	a1,s1
   25904:	8522                	c.mv	a0,s0
   25906:	aa2f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   2590a:	8522                	c.mv	a0,s0
   2590c:	70e2                	c.ldsp	ra,56(sp)
   2590e:	7442                	c.ldsp	s0,48(sp)
   25910:	74a2                	c.ldsp	s1,40(sp)
   25912:	6121                	c.addi16sp	sp,64
   25914:	8082                	c.jr	ra

0000000000025916 <dwarf::at_picture_string[abi:cxx11](dwarf::die const&)>:

//////////////////////////////////////////////////////////////////
// 0x6X
//

AT_STRING(picture_string);
   25916:	7139                	c.addi16sp	sp,-64
   25918:	fc06                	c.sdsp	ra,56(sp)
   2591a:	f822                	c.sdsp	s0,48(sp)
   2591c:	f426                	c.sdsp	s1,40(sp)
   2591e:	842a                	c.mv	s0,a0
   25920:	06000613          	addi	a2,zero,96
   25924:	0024                	c.addi4spn	s1,sp,8
   25926:	8526                	c.mv	a0,s1
   25928:	c31f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   2592c:	85a6                	c.mv	a1,s1
   2592e:	8522                	c.mv	a0,s0
   25930:	a34f80ef          	jal	ra,1db64 <dwarf::value::as_string[abi:cxx11]() const>
   25934:	8522                	c.mv	a0,s0
   25936:	70e2                	c.ldsp	ra,56(sp)
   25938:	7442                	c.ldsp	s0,48(sp)
   2593a:	74a2                	c.ldsp	s1,40(sp)
   2593c:	6121                	c.addi16sp	sp,64
   2593e:	8082                	c.jr	ra

0000000000025940 <dwarf::at_mutable(dwarf::die const&)>:
AT_FLAG_(mutable);
   25940:	7179                	c.addi16sp	sp,-48
   25942:	f406                	c.sdsp	ra,40(sp)
   25944:	f022                	c.sdsp	s0,32(sp)
   25946:	85aa                	c.mv	a1,a0
   25948:	06100613          	addi	a2,zero,97
   2594c:	0020                	c.addi4spn	s0,sp,8
   2594e:	8522                	c.mv	a0,s0
   25950:	c09f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25954:	8522                	c.mv	a0,s0
   25956:	c28f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   2595a:	70a2                	c.ldsp	ra,40(sp)
   2595c:	7402                	c.ldsp	s0,32(sp)
   2595e:	6145                	c.addi16sp	sp,48
   25960:	8082                	c.jr	ra

0000000000025962 <dwarf::at_threads_scaled(dwarf::die const&)>:
AT_FLAG(threads_scaled);
   25962:	7179                	c.addi16sp	sp,-48
   25964:	f406                	c.sdsp	ra,40(sp)
   25966:	f022                	c.sdsp	s0,32(sp)
   25968:	85aa                	c.mv	a1,a0
   2596a:	06200613          	addi	a2,zero,98
   2596e:	0020                	c.addi4spn	s0,sp,8
   25970:	8522                	c.mv	a0,s0
   25972:	be7f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25976:	8522                	c.mv	a0,s0
   25978:	c06f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   2597c:	70a2                	c.ldsp	ra,40(sp)
   2597e:	7402                	c.ldsp	s0,32(sp)
   25980:	6145                	c.addi16sp	sp,48
   25982:	8082                	c.jr	ra

0000000000025984 <dwarf::at_explicit(dwarf::die const&)>:
AT_FLAG_(explicit);
   25984:	7179                	c.addi16sp	sp,-48
   25986:	f406                	c.sdsp	ra,40(sp)
   25988:	f022                	c.sdsp	s0,32(sp)
   2598a:	85aa                	c.mv	a1,a0
   2598c:	06300613          	addi	a2,zero,99
   25990:	0020                	c.addi4spn	s0,sp,8
   25992:	8522                	c.mv	a0,s0
   25994:	bc5f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25998:	8522                	c.mv	a0,s0
   2599a:	be4f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   2599e:	70a2                	c.ldsp	ra,40(sp)
   259a0:	7402                	c.ldsp	s0,32(sp)
   259a2:	6145                	c.addi16sp	sp,48
   259a4:	8082                	c.jr	ra

00000000000259a6 <dwarf::at_object_pointer(dwarf::die const&)>:
AT_REFERENCE(object_pointer);
   259a6:	7139                	c.addi16sp	sp,-64
   259a8:	fc06                	c.sdsp	ra,56(sp)
   259aa:	f822                	c.sdsp	s0,48(sp)
   259ac:	f426                	c.sdsp	s1,40(sp)
   259ae:	842a                	c.mv	s0,a0
   259b0:	06400613          	addi	a2,zero,100
   259b4:	0024                	c.addi4spn	s1,sp,8
   259b6:	8526                	c.mv	a0,s1
   259b8:	ba1f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   259bc:	85a6                	c.mv	a1,s1
   259be:	8522                	c.mv	a0,s0
   259c0:	9e8f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   259c4:	8522                	c.mv	a0,s0
   259c6:	70e2                	c.ldsp	ra,56(sp)
   259c8:	7442                	c.ldsp	s0,48(sp)
   259ca:	74a2                	c.ldsp	s1,40(sp)
   259cc:	6121                	c.addi16sp	sp,64
   259ce:	8082                	c.jr	ra

00000000000259d0 <dwarf::at_endianity(dwarf::die const&)>:
AT_ENUM(endianity, DW_END);
   259d0:	7179                	c.addi16sp	sp,-48
   259d2:	f406                	c.sdsp	ra,40(sp)
   259d4:	f022                	c.sdsp	s0,32(sp)
   259d6:	85aa                	c.mv	a1,a0
   259d8:	06500613          	addi	a2,zero,101
   259dc:	0020                	c.addi4spn	s0,sp,8
   259de:	8522                	c.mv	a0,s0
   259e0:	b79f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   259e4:	8522                	c.mv	a0,s0
   259e6:	89df60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   259ea:	2501                	c.addiw	a0,0
   259ec:	70a2                	c.ldsp	ra,40(sp)
   259ee:	7402                	c.ldsp	s0,32(sp)
   259f0:	6145                	c.addi16sp	sp,48
   259f2:	8082                	c.jr	ra

00000000000259f4 <dwarf::at_elemental(dwarf::die const&)>:
AT_FLAG(elemental);
   259f4:	7179                	c.addi16sp	sp,-48
   259f6:	f406                	c.sdsp	ra,40(sp)
   259f8:	f022                	c.sdsp	s0,32(sp)
   259fa:	85aa                	c.mv	a1,a0
   259fc:	06600613          	addi	a2,zero,102
   25a00:	0020                	c.addi4spn	s0,sp,8
   25a02:	8522                	c.mv	a0,s0
   25a04:	b55f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a08:	8522                	c.mv	a0,s0
   25a0a:	b74f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25a0e:	70a2                	c.ldsp	ra,40(sp)
   25a10:	7402                	c.ldsp	s0,32(sp)
   25a12:	6145                	c.addi16sp	sp,48
   25a14:	8082                	c.jr	ra

0000000000025a16 <dwarf::at_pure(dwarf::die const&)>:
AT_FLAG(pure);
   25a16:	7179                	c.addi16sp	sp,-48
   25a18:	f406                	c.sdsp	ra,40(sp)
   25a1a:	f022                	c.sdsp	s0,32(sp)
   25a1c:	85aa                	c.mv	a1,a0
   25a1e:	06700613          	addi	a2,zero,103
   25a22:	0020                	c.addi4spn	s0,sp,8
   25a24:	8522                	c.mv	a0,s0
   25a26:	b33f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a2a:	8522                	c.mv	a0,s0
   25a2c:	b52f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25a30:	70a2                	c.ldsp	ra,40(sp)
   25a32:	7402                	c.ldsp	s0,32(sp)
   25a34:	6145                	c.addi16sp	sp,48
   25a36:	8082                	c.jr	ra

0000000000025a38 <dwarf::at_recursive(dwarf::die const&)>:
AT_FLAG(recursive);
   25a38:	7179                	c.addi16sp	sp,-48
   25a3a:	f406                	c.sdsp	ra,40(sp)
   25a3c:	f022                	c.sdsp	s0,32(sp)
   25a3e:	85aa                	c.mv	a1,a0
   25a40:	06800613          	addi	a2,zero,104
   25a44:	0020                	c.addi4spn	s0,sp,8
   25a46:	8522                	c.mv	a0,s0
   25a48:	b11f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a4c:	8522                	c.mv	a0,s0
   25a4e:	b30f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25a52:	70a2                	c.ldsp	ra,40(sp)
   25a54:	7402                	c.ldsp	s0,32(sp)
   25a56:	6145                	c.addi16sp	sp,48
   25a58:	8082                	c.jr	ra

0000000000025a5a <dwarf::at_signature(dwarf::die const&)>:
AT_REFERENCE(signature); // XXX Computed might be useful
   25a5a:	7139                	c.addi16sp	sp,-64
   25a5c:	fc06                	c.sdsp	ra,56(sp)
   25a5e:	f822                	c.sdsp	s0,48(sp)
   25a60:	f426                	c.sdsp	s1,40(sp)
   25a62:	842a                	c.mv	s0,a0
   25a64:	06900613          	addi	a2,zero,105
   25a68:	0024                	c.addi4spn	s1,sp,8
   25a6a:	8526                	c.mv	a0,s1
   25a6c:	aedf50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a70:	85a6                	c.mv	a1,s1
   25a72:	8522                	c.mv	a0,s0
   25a74:	934f80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   25a78:	8522                	c.mv	a0,s0
   25a7a:	70e2                	c.ldsp	ra,56(sp)
   25a7c:	7442                	c.ldsp	s0,48(sp)
   25a7e:	74a2                	c.ldsp	s1,40(sp)
   25a80:	6121                	c.addi16sp	sp,64
   25a82:	8082                	c.jr	ra

0000000000025a84 <dwarf::at_main_subprogram(dwarf::die const&)>:
AT_FLAG(main_subprogram);
   25a84:	7179                	c.addi16sp	sp,-48
   25a86:	f406                	c.sdsp	ra,40(sp)
   25a88:	f022                	c.sdsp	s0,32(sp)
   25a8a:	85aa                	c.mv	a1,a0
   25a8c:	06a00613          	addi	a2,zero,106
   25a90:	0020                	c.addi4spn	s0,sp,8
   25a92:	8522                	c.mv	a0,s0
   25a94:	ac5f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25a98:	8522                	c.mv	a0,s0
   25a9a:	ae4f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25a9e:	70a2                	c.ldsp	ra,40(sp)
   25aa0:	7402                	c.ldsp	s0,32(sp)
   25aa2:	6145                	c.addi16sp	sp,48
   25aa4:	8082                	c.jr	ra

0000000000025aa6 <dwarf::at_const_expr(dwarf::die const&)>:
// XXX const data_bit_offset
AT_FLAG(const_expr);
   25aa6:	7179                	c.addi16sp	sp,-48
   25aa8:	f406                	c.sdsp	ra,40(sp)
   25aaa:	f022                	c.sdsp	s0,32(sp)
   25aac:	85aa                	c.mv	a1,a0
   25aae:	06c00613          	addi	a2,zero,108
   25ab2:	0020                	c.addi4spn	s0,sp,8
   25ab4:	8522                	c.mv	a0,s0
   25ab6:	aa3f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25aba:	8522                	c.mv	a0,s0
   25abc:	ac2f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25ac0:	70a2                	c.ldsp	ra,40(sp)
   25ac2:	7402                	c.ldsp	s0,32(sp)
   25ac4:	6145                	c.addi16sp	sp,48
   25ac6:	8082                	c.jr	ra

0000000000025ac8 <dwarf::at_enum_class(dwarf::die const&)>:
AT_FLAG(enum_class);
   25ac8:	7179                	c.addi16sp	sp,-48
   25aca:	f406                	c.sdsp	ra,40(sp)
   25acc:	f022                	c.sdsp	s0,32(sp)
   25ace:	85aa                	c.mv	a1,a0
   25ad0:	06d00613          	addi	a2,zero,109
   25ad4:	0020                	c.addi4spn	s0,sp,8
   25ad6:	8522                	c.mv	a0,s0
   25ad8:	a81f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25adc:	8522                	c.mv	a0,s0
   25ade:	aa0f70ef          	jal	ra,1cd7e <dwarf::value::as_flag() const>
   25ae2:	70a2                	c.ldsp	ra,40(sp)
   25ae4:	7402                	c.ldsp	s0,32(sp)
   25ae6:	6145                	c.addi16sp	sp,48
   25ae8:	8082                	c.jr	ra

0000000000025aea <dwarf::at_linkage_name[abi:cxx11](dwarf::die const&)>:
AT_STRING(linkage_name);
   25aea:	7139                	c.addi16sp	sp,-64
   25aec:	fc06                	c.sdsp	ra,56(sp)
   25aee:	f822                	c.sdsp	s0,48(sp)
   25af0:	f426                	c.sdsp	s1,40(sp)
   25af2:	842a                	c.mv	s0,a0
   25af4:	06e00613          	addi	a2,zero,110
   25af8:	0024                	c.addi4spn	s1,sp,8
   25afa:	8526                	c.mv	a0,s1
   25afc:	a5df50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
   25b00:	85a6                	c.mv	a1,s1
   25b02:	8522                	c.mv	a0,s0
   25b04:	860f80ef          	jal	ra,1db64 <dwarf::value::as_string[abi:cxx11]() const>
   25b08:	8522                	c.mv	a0,s0
   25b0a:	70e2                	c.ldsp	ra,56(sp)
   25b0c:	7442                	c.ldsp	s0,48(sp)
   25b0e:	74a2                	c.ldsp	s1,40(sp)
   25b10:	6121                	c.addi16sp	sp,64
   25b12:	8082                	c.jr	ra

0000000000025b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>:
                             int depth = 0) {
   25b14:	7169                	c.addi16sp	sp,-304
   25b16:	f606                	c.sdsp	ra,296(sp)
   25b18:	f222                	c.sdsp	s0,288(sp)
   25b1a:	ee26                	c.sdsp	s1,280(sp)
   25b1c:	ea4a                	c.sdsp	s2,272(sp)
   25b1e:	e64e                	c.sdsp	s3,264(sp)
   25b20:	842a                	c.mv	s0,a0
  if (depth > 16)
   25b22:	47c1                	c.li	a5,16
   25b24:	02d7cf63          	blt	a5,a3,25b62 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x4e>
   25b28:	8932                	c.mv	s2,a2
   25b2a:	84b6                	c.mv	s1,a3
  value v(d[attr]);
   25b2c:	862a                	c.mv	a2,a0
   25b2e:	0988                	c.addi4spn	a0,sp,208
   25b30:	a29f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   25b34:	47fe                	c.lwsp	a5,220(sp)
  switch (v.get_type()) {
   25b36:	4719                	c.li	a4,6
   25b38:	0ce78c63          	beq	a5,a4,25c10 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xfc>
   25b3c:	08f75963          	bge	a4,a5,25bce <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xba>
   25b40:	4731                	c.li	a4,12
   25b42:	0ee79363          	bne	a5,a4,25c28 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x114>
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   25b46:	098c                	c.addi4spn	a1,sp,208
   25b48:	06010993          	addi	s3,sp,96
   25b4c:	854e                	c.mv	a0,s3
   25b4e:	85af80ef          	jal	ra,1dba8 <dwarf::value::as_reference() const>
   25b52:	0014869b          	addiw	a3,s1,1
   25b56:	864a                	c.mv	a2,s2
   25b58:	85ce                	c.mv	a1,s3
   25b5a:	8522                	c.mv	a0,s0
   25b5c:	fb9ff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25b60:	a079                	c.j	25bee <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xda>
    throw format_error("reference depth exceeded for " + to_string(attr));
   25b62:	4541                	c.li	a0,16
   25b64:	8bdf00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25b68:	84aa                	c.mv	s1,a0
   25b6a:	85a2                	c.mv	a1,s0
   25b6c:	0088                	c.addi4spn	a0,sp,64
   25b6e:	103030ef          	jal	ra,29470 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__rhs.insert(0, __lhs)); }
   25b72:	00009617          	auipc	a2,0x9
   25b76:	a0660613          	addi	a2,a2,-1530 # 2e578 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb0>
   25b7a:	4581                	c.li	a1,0
   25b7c:	0088                	c.addi4spn	a0,sp,64
   25b7e:	813f00ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   25b82:	85aa                	c.mv	a1,a0
   25b84:	1080                	c.addi4spn	s0,sp,96
   25b86:	8522                	c.mv	a0,s0
   25b88:	8e9f00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
      : std::runtime_error(what_arg) {}
   25b8c:	85a2                	c.mv	a1,s0
   25b8e:	8526                	c.mv	a0,s1
   25b90:	a11f00ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25b94:	00014797          	auipc	a5,0x14
   25b98:	9c47b783          	ld	a5,-1596(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   25b9c:	07c1                	c.addi	a5,16
   25b9e:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   25ba0:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25ba2:	189c                	c.addi4spn	a5,sp,112
   25ba4:	00f50463          	beq	a0,a5,25bac <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x98>
   25ba8:	969f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25bac:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25bae:	089c                	c.addi4spn	a5,sp,80
   25bb0:	00f50463          	beq	a0,a5,25bb8 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xa4>
   25bb4:	95df00ef          	jal	ra,16510 <operator delete(void*)@plt>
   25bb8:	00013617          	auipc	a2,0x13
   25bbc:	7c863603          	ld	a2,1992(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   25bc0:	00013597          	auipc	a1,0x13
   25bc4:	6f05b583          	ld	a1,1776(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   25bc8:	8526                	c.mv	a0,s1
   25bca:	af7f00ef          	jal	ra,166c0 <__cxa_throw@plt>
  switch (v.get_type()) {
   25bce:	37f5                	c.addiw	a5,-3
   25bd0:	4705                	c.li	a4,1
   25bd2:	04f76b63          	bltu	a4,a5,25c28 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x114>
    return v.as_uconstant();
   25bd6:	0988                	c.addi4spn	a0,sp,208
   25bd8:	eaaf60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   25bdc:	842a                	c.mv	s0,a0
}
   25bde:	8522                	c.mv	a0,s0
   25be0:	70b2                	c.ldsp	ra,296(sp)
   25be2:	7412                	c.ldsp	s0,288(sp)
   25be4:	64f2                	c.ldsp	s1,280(sp)
   25be6:	6952                	c.ldsp	s2,272(sp)
   25be8:	69b2                	c.ldsp	s3,264(sp)
   25bea:	6155                	c.addi16sp	sp,304
   25bec:	8082                	c.jr	ra
    return _at_udynamic(attr, v.as_reference(), ctx, depth + 1);
   25bee:	842a                	c.mv	s0,a0
    for (T *p = base; p < end; ++p)
   25bf0:	754a                	c.ldsp	a0,176(sp)
   25bf2:	77ea                	c.ldsp	a5,184(sp)
   25bf4:	00f57763          	bgeu	a0,a5,25c02 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xee>
   25bf8:	87aa                	c.mv	a5,a0
   25bfa:	07a1                	c.addi	a5,8
   25bfc:	776a                	c.ldsp	a4,184(sp)
   25bfe:	fee7eee3          	bltu	a5,a4,25bfa <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xe6>
    if ((char *)base != buf)
   25c02:	011c                	c.addi4spn	a5,sp,128
   25c04:	fcf50de3          	beq	a0,a5,25bde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
      delete[] (char *)base;
   25c08:	d979                	c.beqz	a0,25bde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
   25c0a:	9b7f00ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   25c0e:	bfc1                	c.j	25bde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
    return v.as_exprloc().evaluate(ctx).value;
   25c10:	098c                	c.addi4spn	a1,sp,208
   25c12:	11a0                	c.addi4spn	s0,sp,232
   25c14:	8522                	c.mv	a0,s0
   25c16:	dd1f60ef          	jal	ra,1c9e6 <dwarf::value::as_exprloc() const>
   25c1a:	864a                	c.mv	a2,s2
   25c1c:	85a2                	c.mv	a1,s0
   25c1e:	1088                	c.addi4spn	a0,sp,96
   25c20:	9d5fb0ef          	jal	ra,215f4 <dwarf::expr::evaluate(dwarf::expr_context*) const>
   25c24:	7426                	c.ldsp	s0,104(sp)
   25c26:	bf65                	c.j	25bde <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0xca>
                       to_string(v.get_type()));
   25c28:	4541                	c.li	a0,16
   25c2a:	ff6f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25c2e:	84aa                	c.mv	s1,a0
    throw format_error(to_string(attr) + " has unexpected type " +
   25c30:	85a2                	c.mv	a1,s0
   25c32:	850a                	c.mv	a0,sp
   25c34:	03d030ef          	jal	ra,29470 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   25c38:	00009597          	auipc	a1,0x9
   25c3c:	96058593          	addi	a1,a1,-1696 # 2e598 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   25c40:	850a                	c.mv	a0,sp
   25c42:	b5ff00ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25c46:	85aa                	c.mv	a1,a0
   25c48:	1008                	c.addi4spn	a0,sp,32
   25c4a:	827f00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   25c4e:	45fe                	c.lwsp	a1,220(sp)
   25c50:	0088                	c.addi4spn	a0,sp,64
   25c52:	7ac010ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(attr) + " has unexpected type " +
   25c56:	0090                	c.addi4spn	a2,sp,64
   25c58:	100c                	c.addi4spn	a1,sp,32
   25c5a:	1088                	c.addi4spn	a0,sp,96
   25c5c:	00013317          	auipc	t1,0x13
   25c60:	76433303          	ld	t1,1892(t1) # 393c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x15054>
   25c64:	9302                	c.jalr	t1
   25c66:	108c                	c.addi4spn	a1,sp,96
   25c68:	8526                	c.mv	a0,s1
   25c6a:	937f00ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25c6e:	00014797          	auipc	a5,0x14
   25c72:	8ea7b783          	ld	a5,-1814(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   25c76:	07c1                	c.addi	a5,16
   25c78:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   25c7a:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25c7c:	189c                	c.addi4spn	a5,sp,112
   25c7e:	00f50463          	beq	a0,a5,25c86 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x172>
   25c82:	88ff00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25c86:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25c88:	089c                	c.addi4spn	a5,sp,80
   25c8a:	00f50463          	beq	a0,a5,25c92 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x17e>
   25c8e:	883f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25c92:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   25c94:	181c                	c.addi4spn	a5,sp,48
   25c96:	00f50463          	beq	a0,a5,25c9e <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x18a>
   25c9a:	877f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25c9e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25ca0:	081c                	c.addi4spn	a5,sp,16
   25ca2:	00f50463          	beq	a0,a5,25caa <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x196>
   25ca6:	86bf00ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   25caa:	00013617          	auipc	a2,0x13
   25cae:	6d663603          	ld	a2,1750(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   25cb2:	00013597          	auipc	a1,0x13
   25cb6:	5fe5b583          	ld	a1,1534(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   25cba:	8526                	c.mv	a0,s1
   25cbc:	a05f00ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   25cc0:	842a                	c.mv	s0,a0
   25cc2:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25cc4:	189c                	c.addi4spn	a5,sp,112
   25cc6:	00f50463          	beq	a0,a5,25cce <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1ba>
   25cca:	847f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25cce:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25cd0:	089c                	c.addi4spn	a5,sp,80
   25cd2:	00f50463          	beq	a0,a5,25cda <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1c6>
   25cd6:	83bf00ef          	jal	ra,16510 <operator delete(void*)@plt>
    throw format_error("reference depth exceeded for " + to_string(attr));
   25cda:	8526                	c.mv	a0,s1
   25cdc:	ff4f00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   25ce0:	8522                	c.mv	a0,s0
   25ce2:	a0ff00ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   25ce6:	842a                	c.mv	s0,a0
   25ce8:	b7dd                	c.j	25cce <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1ba>
   25cea:	842a                	c.mv	s0,a0
   25cec:	b7fd                	c.j	25cda <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1c6>
    for (T *p = base; p < end; ++p)
   25cee:	842a                	c.mv	s0,a0
   25cf0:	754a                	c.ldsp	a0,176(sp)
   25cf2:	87aa                	c.mv	a5,a0
   25cf4:	776a                	c.ldsp	a4,184(sp)
   25cf6:	00e7eb63          	bltu	a5,a4,25d0c <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f8>
    if ((char *)base != buf)
   25cfa:	011c                	c.addi4spn	a5,sp,128
   25cfc:	00f50563          	beq	a0,a5,25d06 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f2>
      delete[] (char *)base;
   25d00:	c119                	c.beqz	a0,25d06 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1f2>
   25d02:	8bff00ef          	jal	ra,165c0 <operator delete[](void*)@plt>
   25d06:	8522                	c.mv	a0,s0
   25d08:	9e9f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    for (T *p = base; p < end; ++p)
   25d0c:	07a1                	c.addi	a5,8
   25d0e:	b7dd                	c.j	25cf4 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x1e0>
   25d10:	842a                	c.mv	s0,a0
   25d12:	7506                	c.ldsp	a0,96(sp)
	if (!_M_is_local())
   25d14:	189c                	c.addi4spn	a5,sp,112
   25d16:	00f50463          	beq	a0,a5,25d1e <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x20a>
   25d1a:	ff6f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d1e:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   25d20:	089c                	c.addi4spn	a5,sp,80
   25d22:	00f50463          	beq	a0,a5,25d2a <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x216>
   25d26:	feaf00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d2a:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   25d2c:	181c                	c.addi4spn	a5,sp,48
   25d2e:	00f50463          	beq	a0,a5,25d36 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x222>
   25d32:	fdef00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25d36:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   25d38:	081c                	c.addi4spn	a5,sp,16
   25d3a:	00f50463          	beq	a0,a5,25d42 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x22e>
   25d3e:	fd2f00ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   25d42:	8526                	c.mv	a0,s1
   25d44:	f8cf00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   25d48:	8522                	c.mv	a0,s0
   25d4a:	9a7f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   25d4e:	842a                	c.mv	s0,a0
   25d50:	b7f9                	c.j	25d1e <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x20a>
   25d52:	842a                	c.mv	s0,a0
   25d54:	bfd9                	c.j	25d2a <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x216>
   25d56:	842a                	c.mv	s0,a0
   25d58:	bff9                	c.j	25d36 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x222>
   25d5a:	842a                	c.mv	s0,a0
   25d5c:	b7dd                	c.j	25d42 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)+0x22e>

0000000000025d5e <dwarf::at_byte_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_size);
   25d5e:	1141                	c.addi	sp,-16
   25d60:	e406                	c.sdsp	ra,8(sp)
   25d62:	862e                	c.mv	a2,a1
   25d64:	4681                	c.li	a3,0
   25d66:	85aa                	c.mv	a1,a0
   25d68:	452d                	c.li	a0,11
   25d6a:	dabff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25d6e:	60a2                	c.ldsp	ra,8(sp)
   25d70:	0141                	c.addi	sp,16
   25d72:	8082                	c.jr	ra

0000000000025d74 <dwarf::at_bit_offset(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_offset);
   25d74:	1141                	c.addi	sp,-16
   25d76:	e406                	c.sdsp	ra,8(sp)
   25d78:	862e                	c.mv	a2,a1
   25d7a:	4681                	c.li	a3,0
   25d7c:	85aa                	c.mv	a1,a0
   25d7e:	4531                	c.li	a0,12
   25d80:	d95ff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25d84:	60a2                	c.ldsp	ra,8(sp)
   25d86:	0141                	c.addi	sp,16
   25d88:	8082                	c.jr	ra

0000000000025d8a <dwarf::at_bit_size(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_size);
   25d8a:	1141                	c.addi	sp,-16
   25d8c:	e406                	c.sdsp	ra,8(sp)
   25d8e:	862e                	c.mv	a2,a1
   25d90:	4681                	c.li	a3,0
   25d92:	85aa                	c.mv	a1,a0
   25d94:	4535                	c.li	a0,13
   25d96:	d7fff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25d9a:	60a2                	c.ldsp	ra,8(sp)
   25d9c:	0141                	c.addi	sp,16
   25d9e:	8082                	c.jr	ra

0000000000025da0 <dwarf::at_lower_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(lower_bound); // XXX Language-based default?
   25da0:	1141                	c.addi	sp,-16
   25da2:	e406                	c.sdsp	ra,8(sp)
   25da4:	862e                	c.mv	a2,a1
   25da6:	4681                	c.li	a3,0
   25da8:	85aa                	c.mv	a1,a0
   25daa:	02200513          	addi	a0,zero,34
   25dae:	d67ff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25db2:	60a2                	c.ldsp	ra,8(sp)
   25db4:	0141                	c.addi	sp,16
   25db6:	8082                	c.jr	ra

0000000000025db8 <dwarf::at_bit_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(bit_stride);
   25db8:	1141                	c.addi	sp,-16
   25dba:	e406                	c.sdsp	ra,8(sp)
   25dbc:	862e                	c.mv	a2,a1
   25dbe:	4681                	c.li	a3,0
   25dc0:	85aa                	c.mv	a1,a0
   25dc2:	02e00513          	addi	a0,zero,46
   25dc6:	d4fff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25dca:	60a2                	c.ldsp	ra,8(sp)
   25dcc:	0141                	c.addi	sp,16
   25dce:	8082                	c.jr	ra

0000000000025dd0 <dwarf::at_upper_bound(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(upper_bound);
   25dd0:	1141                	c.addi	sp,-16
   25dd2:	e406                	c.sdsp	ra,8(sp)
   25dd4:	862e                	c.mv	a2,a1
   25dd6:	4681                	c.li	a3,0
   25dd8:	85aa                	c.mv	a1,a0
   25dda:	02f00513          	addi	a0,zero,47
   25dde:	d37ff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25de2:	60a2                	c.ldsp	ra,8(sp)
   25de4:	0141                	c.addi	sp,16
   25de6:	8082                	c.jr	ra

0000000000025de8 <dwarf::at_count(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(count);
   25de8:	1141                	c.addi	sp,-16
   25dea:	e406                	c.sdsp	ra,8(sp)
   25dec:	862e                	c.mv	a2,a1
   25dee:	4681                	c.li	a3,0
   25df0:	85aa                	c.mv	a1,a0
   25df2:	03700513          	addi	a0,zero,55
   25df6:	d1fff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25dfa:	60a2                	c.ldsp	ra,8(sp)
   25dfc:	0141                	c.addi	sp,16
   25dfe:	8082                	c.jr	ra

0000000000025e00 <dwarf::at_allocated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(allocated);
   25e00:	1141                	c.addi	sp,-16
   25e02:	e406                	c.sdsp	ra,8(sp)
   25e04:	862e                	c.mv	a2,a1
   25e06:	4681                	c.li	a3,0
   25e08:	85aa                	c.mv	a1,a0
   25e0a:	04e00513          	addi	a0,zero,78
   25e0e:	d07ff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25e12:	60a2                	c.ldsp	ra,8(sp)
   25e14:	0141                	c.addi	sp,16
   25e16:	8082                	c.jr	ra

0000000000025e18 <dwarf::at_associated(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(associated);
   25e18:	1141                	c.addi	sp,-16
   25e1a:	e406                	c.sdsp	ra,8(sp)
   25e1c:	862e                	c.mv	a2,a1
   25e1e:	4681                	c.li	a3,0
   25e20:	85aa                	c.mv	a1,a0
   25e22:	04f00513          	addi	a0,zero,79
   25e26:	cefff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25e2a:	60a2                	c.ldsp	ra,8(sp)
   25e2c:	0141                	c.addi	sp,16
   25e2e:	8082                	c.jr	ra

0000000000025e30 <dwarf::at_byte_stride(dwarf::die const&, dwarf::expr_context*)>:
AT_UDYNAMIC(byte_stride);
   25e30:	1141                	c.addi	sp,-16
   25e32:	e406                	c.sdsp	ra,8(sp)
   25e34:	862e                	c.mv	a2,a1
   25e36:	4681                	c.li	a3,0
   25e38:	85aa                	c.mv	a1,a0
   25e3a:	05100513          	addi	a0,zero,81
   25e3e:	cd7ff0ef          	jal	ra,25b14 <dwarf::_at_udynamic(dwarf::DW_AT, dwarf::die const&, dwarf::expr_context*, int)>
   25e42:	60a2                	c.ldsp	ra,8(sp)
   25e44:	0141                	c.addi	sp,16
   25e46:	8082                	c.jr	ra

0000000000025e48 <dwarf::at_high_pc(dwarf::die const&)>:
taddr at_high_pc(const die &d) {
   25e48:	7131                	c.addi16sp	sp,-192
   25e4a:	fd06                	c.sdsp	ra,184(sp)
   25e4c:	f922                	c.sdsp	s0,176(sp)
   25e4e:	f526                	c.sdsp	s1,168(sp)
   25e50:	842a                	c.mv	s0,a0
  value v(d[DW_AT::high_pc]);
   25e52:	4649                	c.li	a2,18
   25e54:	85aa                	c.mv	a1,a0
   25e56:	0128                	c.addi4spn	a0,sp,136
   25e58:	f00f50ef          	jal	ra,1b558 <dwarf::die::operator[](dwarf::DW_AT) const>
  type get_type() const { return typ; }
   25e5c:	47da                	c.lwsp	a5,148(sp)
  switch (v.get_type()) {
   25e5e:	4705                	c.li	a4,1
   25e60:	02e78263          	beq	a5,a4,25e84 <dwarf::at_high_pc(dwarf::die const&)+0x3c>
   25e64:	37f5                	c.addiw	a5,-3
   25e66:	02f76363          	bltu	a4,a5,25e8c <dwarf::at_high_pc(dwarf::die const&)+0x44>
    return at_low_pc(d) + v.as_uconstant();
   25e6a:	8522                	c.mv	a0,s0
   25e6c:	c4aff0ef          	jal	ra,252b6 <dwarf::at_low_pc(dwarf::die const&)>
   25e70:	842a                	c.mv	s0,a0
   25e72:	0128                	c.addi4spn	a0,sp,136
   25e74:	c0ef60ef          	jal	ra,1c282 <dwarf::value::as_uconstant() const>
   25e78:	9522                	c.add	a0,s0
}
   25e7a:	70ea                	c.ldsp	ra,184(sp)
   25e7c:	744a                	c.ldsp	s0,176(sp)
   25e7e:	74aa                	c.ldsp	s1,168(sp)
   25e80:	6129                	c.addi16sp	sp,192
   25e82:	8082                	c.jr	ra
    return v.as_address();
   25e84:	0128                	c.addi4spn	a0,sp,136
   25e86:	dfdf50ef          	jal	ra,1bc82 <dwarf::value::as_address() const>
   25e8a:	bfc5                	c.j	25e7a <dwarf::at_high_pc(dwarf::die const&)+0x32>
                       to_string(v.get_type()));
   25e8c:	4541                	c.li	a0,16
   25e8e:	d92f00ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   25e92:	84aa                	c.mv	s1,a0
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   25e94:	45c9                	c.li	a1,18
   25e96:	0028                	c.addi4spn	a0,sp,8
   25e98:	5d8030ef          	jal	ra,29470 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>
    { return std::move(__lhs.append(__rhs)); }
   25e9c:	00008597          	auipc	a1,0x8
   25ea0:	6fc58593          	addi	a1,a1,1788 # 2e598 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd0>
   25ea4:	0028                	c.addi4spn	a0,sp,8
   25ea6:	8fbf00ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   25eaa:	85aa                	c.mv	a1,a0
   25eac:	1028                	c.addi4spn	a0,sp,40
   25eae:	dc2f00ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
                       to_string(v.get_type()));
   25eb2:	45da                	c.lwsp	a1,148(sp)
   25eb4:	00a8                	c.addi4spn	a0,sp,72
   25eb6:	548010ef          	jal	ra,273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>
    throw format_error(to_string(DW_AT::high_pc) + " has unexpected type " +
   25eba:	00b0                	c.addi4spn	a2,sp,72
   25ebc:	102c                	c.addi4spn	a1,sp,40
   25ebe:	10a8                	c.addi4spn	a0,sp,104
   25ec0:	00013317          	auipc	t1,0x13
   25ec4:	50033303          	ld	t1,1280(t1) # 393c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@@Base+0x15054>
   25ec8:	9302                	c.jalr	t1
      : std::runtime_error(what_arg) {}
   25eca:	10ac                	c.addi4spn	a1,sp,104
   25ecc:	8526                	c.mv	a0,s1
   25ece:	ed2f00ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   25ed2:	00013797          	auipc	a5,0x13
   25ed6:	6867b783          	ld	a5,1670(a5) # 39558 <vtable for dwarf::format_error@@Base+0xc28>
   25eda:	07c1                	c.addi	a5,16
   25edc:	e09c                	c.sd	a5,0(s1)
      { return _M_dataplus._M_p; }
   25ede:	7526                	c.ldsp	a0,104(sp)
	if (!_M_is_local())
   25ee0:	18bc                	c.addi4spn	a5,sp,120
   25ee2:	00f50463          	beq	a0,a5,25eea <dwarf::at_high_pc(dwarf::die const&)+0xa2>
   25ee6:	e2af00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25eea:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   25eec:	08bc                	c.addi4spn	a5,sp,88
   25eee:	00f50463          	beq	a0,a5,25ef6 <dwarf::at_high_pc(dwarf::die const&)+0xae>
   25ef2:	e1ef00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25ef6:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   25ef8:	183c                	c.addi4spn	a5,sp,56
   25efa:	00f50463          	beq	a0,a5,25f02 <dwarf::at_high_pc(dwarf::die const&)+0xba>
   25efe:	e12f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25f02:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   25f04:	083c                	c.addi4spn	a5,sp,24
   25f06:	00f50463          	beq	a0,a5,25f0e <dwarf::at_high_pc(dwarf::die const&)+0xc6>
   25f0a:	e06f00ef          	jal	ra,16510 <operator delete(void*)@plt>
                       to_string(v.get_type()));
   25f0e:	00013617          	auipc	a2,0x13
   25f12:	47263603          	ld	a2,1138(a2) # 39380 <dwarf::format_error::~format_error()@@Base+0x1fdb4>
   25f16:	00013597          	auipc	a1,0x13
   25f1a:	39a5b583          	ld	a1,922(a1) # 392b0 <typeinfo for dwarf::format_error@@Base+0x9f8>
   25f1e:	8526                	c.mv	a0,s1
   25f20:	fa0f00ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   25f24:	842a                	c.mv	s0,a0
   25f26:	7526                	c.ldsp	a0,104(sp)
	if (!_M_is_local())
   25f28:	18bc                	c.addi4spn	a5,sp,120
   25f2a:	00f50463          	beq	a0,a5,25f32 <dwarf::at_high_pc(dwarf::die const&)+0xea>
   25f2e:	de2f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25f32:	6526                	c.ldsp	a0,72(sp)
	if (!_M_is_local())
   25f34:	08bc                	c.addi4spn	a5,sp,88
   25f36:	00f50463          	beq	a0,a5,25f3e <dwarf::at_high_pc(dwarf::die const&)+0xf6>
   25f3a:	dd6f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25f3e:	7522                	c.ldsp	a0,40(sp)
	if (!_M_is_local())
   25f40:	183c                	c.addi4spn	a5,sp,56
   25f42:	00f50463          	beq	a0,a5,25f4a <dwarf::at_high_pc(dwarf::die const&)+0x102>
   25f46:	dcaf00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   25f4a:	6522                	c.ldsp	a0,8(sp)
	if (!_M_is_local())
   25f4c:	083c                	c.addi4spn	a5,sp,24
   25f4e:	00f50463          	beq	a0,a5,25f56 <dwarf::at_high_pc(dwarf::die const&)+0x10e>
   25f52:	dbef00ef          	jal	ra,16510 <operator delete(void*)@plt>
   25f56:	8526                	c.mv	a0,s1
   25f58:	d78f00ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   25f5c:	8522                	c.mv	a0,s0
   25f5e:	f92f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   25f62:	842a                	c.mv	s0,a0
   25f64:	b7f9                	c.j	25f32 <dwarf::at_high_pc(dwarf::die const&)+0xea>
   25f66:	842a                	c.mv	s0,a0
   25f68:	bfd9                	c.j	25f3e <dwarf::at_high_pc(dwarf::die const&)+0xf6>
   25f6a:	842a                	c.mv	s0,a0
   25f6c:	bff9                	c.j	25f4a <dwarf::at_high_pc(dwarf::die const&)+0x102>
   25f6e:	842a                	c.mv	s0,a0
   25f70:	b7dd                	c.j	25f56 <dwarf::at_high_pc(dwarf::die const&)+0x10e>

0000000000025f72 <dwarf::die_pc_range(dwarf::die const&)>:

rangelist die_pc_range(const die &d) {
   25f72:	7139                	c.addi16sp	sp,-64
   25f74:	fc06                	c.sdsp	ra,56(sp)
   25f76:	f822                	c.sdsp	s0,48(sp)
   25f78:	f426                	c.sdsp	s1,40(sp)
   25f7a:	f04a                	c.sdsp	s2,32(sp)
   25f7c:	84aa                	c.mv	s1,a0
   25f7e:	842e                	c.mv	s0,a1
  // DWARF4 section 2.17
  if (d.has(DW_AT::ranges))
   25f80:	05500593          	addi	a1,zero,85
   25f84:	8522                	c.mv	a0,s0
   25f86:	daaf50ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   25f8a:	cd01                	c.beqz	a0,25fa2 <dwarf::die_pc_range(dwarf::die const&)+0x30>
    return at_ranges(d);
   25f8c:	85a2                	c.mv	a1,s0
   25f8e:	8526                	c.mv	a0,s1
   25f90:	909ff0ef          	jal	ra,25898 <dwarf::at_ranges(dwarf::die const&)>
  taddr low = at_low_pc(d);
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
  return rangelist({{low, high}});
}
   25f94:	8526                	c.mv	a0,s1
   25f96:	70e2                	c.ldsp	ra,56(sp)
   25f98:	7442                	c.ldsp	s0,48(sp)
   25f9a:	74a2                	c.ldsp	s1,40(sp)
   25f9c:	7902                	c.ldsp	s2,32(sp)
   25f9e:	6121                	c.addi16sp	sp,64
   25fa0:	8082                	c.jr	ra
  taddr low = at_low_pc(d);
   25fa2:	8522                	c.mv	a0,s0
   25fa4:	b12ff0ef          	jal	ra,252b6 <dwarf::at_low_pc(dwarf::die const&)>
   25fa8:	892a                	c.mv	s2,a0
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   25faa:	45c9                	c.li	a1,18
   25fac:	8522                	c.mv	a0,s0
   25fae:	d82f50ef          	jal	ra,1b530 <dwarf::die::has(dwarf::DW_AT) const>
   25fb2:	00190793          	addi	a5,s2,1
   25fb6:	ed01                	c.bnez	a0,25fce <dwarf::die_pc_range(dwarf::die const&)+0x5c>
   25fb8:	e84a                	c.sdsp	s2,16(sp)
   25fba:	ec3e                	c.sdsp	a5,24(sp)
  return rangelist({{low, high}});
   25fbc:	081c                	c.addi4spn	a5,sp,16
   25fbe:	e03e                	c.sdsp	a5,0(sp)
   25fc0:	4785                	c.li	a5,1
   25fc2:	e43e                	c.sdsp	a5,8(sp)
   25fc4:	858a                	c.mv	a1,sp
   25fc6:	8526                	c.mv	a0,s1
   25fc8:	dfffb0ef          	jal	ra,21dc6 <dwarf::rangelist::rangelist(std::initializer_list<std::pair<unsigned long, unsigned long> > const&)>
   25fcc:	b7e1                	c.j	25f94 <dwarf::die_pc_range(dwarf::die const&)+0x22>
  taddr high = d.has(DW_AT::high_pc) ? at_high_pc(d) : (low + 1);
   25fce:	8522                	c.mv	a0,s0
   25fd0:	e79ff0ef          	jal	ra,25e48 <dwarf::at_high_pc(dwarf::die const&)>
   25fd4:	87aa                	c.mv	a5,a0
   25fd6:	b7cd                	c.j	25fb8 <dwarf::die_pc_range(dwarf::die const&)+0x46>

0000000000025fd8 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)>:
    {".debug_ranges", section_type::ranges},
    {".debug_str", section_type::str},
    {".debug_types", section_type::types},
};

bool elf::section_name_to_type(const char *name, section_type *out) {
   25fd8:	7179                	c.addi16sp	sp,-48
   25fda:	f406                	c.sdsp	ra,40(sp)
   25fdc:	f022                	c.sdsp	s0,32(sp)
   25fde:	ec26                	c.sdsp	s1,24(sp)
   25fe0:	e84a                	c.sdsp	s2,16(sp)
   25fe2:	e44e                	c.sdsp	s3,8(sp)
   25fe4:	84aa                	c.mv	s1,a0
   25fe6:	89ae                	c.mv	s3,a1
  for (auto &sec : sections) {
   25fe8:	00012417          	auipc	s0,0x12
   25fec:	70840413          	addi	s0,s0,1800 # 386f0 <dwarf::sections>
   25ff0:	00012917          	auipc	s2,0x12
   25ff4:	7c090913          	addi	s2,s2,1984 # 387b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (strcmp(sec.name, name) == 0) {
   25ff8:	85a6                	c.mv	a1,s1
   25ffa:	6008                	c.ld	a0,0(s0)
   25ffc:	b64f00ef          	jal	ra,16360 <strcmp@plt>
   26000:	cd01                	c.beqz	a0,26018 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x40>
  for (auto &sec : sections) {
   26002:	0441                	c.addi	s0,16
   26004:	ff241ae3          	bne	s0,s2,25ff8 <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x20>
      *out = sec.type;
      return true;
    }
  }
  return false;
   26008:	4501                	c.li	a0,0
}
   2600a:	70a2                	c.ldsp	ra,40(sp)
   2600c:	7402                	c.ldsp	s0,32(sp)
   2600e:	64e2                	c.ldsp	s1,24(sp)
   26010:	6942                	c.ldsp	s2,16(sp)
   26012:	69a2                	c.ldsp	s3,8(sp)
   26014:	6145                	c.addi16sp	sp,48
   26016:	8082                	c.jr	ra
      *out = sec.type;
   26018:	441c                	c.lw	a5,8(s0)
   2601a:	00f9a023          	sw	a5,0(s3)
      return true;
   2601e:	4505                	c.li	a0,1
   26020:	b7ed                	c.j	2600a <dwarf::elf::section_name_to_type(char const*, dwarf::section_type*)+0x32>

0000000000026022 <dwarf::elf::section_type_to_name(dwarf::section_type)>:

const char *elf::section_type_to_name(section_type type) {
  for (auto &sec : sections) {
   26022:	00012797          	auipc	a5,0x12
   26026:	6ce78793          	addi	a5,a5,1742 # 386f0 <dwarf::sections>
   2602a:	00012697          	auipc	a3,0x12
   2602e:	78668693          	addi	a3,a3,1926 # 387b0 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    if (sec.type == type)
   26032:	4798                	c.lw	a4,8(a5)
   26034:	00a70763          	beq	a4,a0,26042 <dwarf::elf::section_type_to_name(dwarf::section_type)+0x20>
  for (auto &sec : sections) {
   26038:	07c1                	c.addi	a5,16
   2603a:	fed79ce3          	bne	a5,a3,26032 <dwarf::elf::section_type_to_name(dwarf::section_type)+0x10>
      return sec.name;
  }
  return nullptr;
   2603e:	4501                	c.li	a0,0
}
   26040:	8082                	c.jr	ra
      return sec.name;
   26042:	6388                	c.ld	a0,0(a5)
   26044:	8082                	c.jr	ra

0000000000026046 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)>:
        return "(DW_ORD)0x" + to_hex((int)v);
}

std::string
to_string(DW_DSC v)
{
   26046:	7139                	c.addi16sp	sp,-64
   26048:	fc06                	c.sdsp	ra,56(sp)
   2604a:	f822                	c.sdsp	s0,48(sp)
   2604c:	f426                	c.sdsp	s1,40(sp)
   2604e:	f04a                	c.sdsp	s2,32(sp)
   26050:	842a                	c.mv	s0,a0
        switch (v) {
   26052:	c595                	c.beqz	a1,2607e <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x38>
   26054:	4785                	c.li	a5,1
   26056:	04f58c63          	beq	a1,a5,260ae <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x68>
        case DW_DSC::label: return "DW_DSC_label";
        case DW_DSC::range: return "DW_DSC_range";
        }
        return "(DW_DSC)0x" + to_hex((int)v);
   2605a:	848a                	c.mv	s1,sp
   2605c:	8526                	c.mv	a0,s1
   2605e:	00013317          	auipc	t1,0x13
   26062:	3ba33303          	ld	t1,954(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   26066:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26068:	4729                	c.li	a4,10
   2606a:	00008697          	auipc	a3,0x8
   2606e:	62668693          	addi	a3,a3,1574 # 2e690 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c8>
   26072:	4601                	c.li	a2,0
   26074:	4581                	c.li	a1,0
   26076:	8526                	c.mv	a0,s1
   26078:	de8f00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2607c:	a899                	c.j	260d2 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2607e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26082:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26084:	4681                	c.li	a3,0
   26086:	00008617          	auipc	a2,0x8
   2608a:	5f660613          	addi	a2,a2,1526 # 2e67c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b4>
   2608e:	00008597          	auipc	a1,0x8
   26092:	5e258593          	addi	a1,a1,1506 # 2e670 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a8>
   26096:	00013317          	auipc	t1,0x13
   2609a:	27233303          	ld	t1,626(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2609e:	9302                	c.jalr	t1
}
   260a0:	8522                	c.mv	a0,s0
   260a2:	70e2                	c.ldsp	ra,56(sp)
   260a4:	7442                	c.ldsp	s0,48(sp)
   260a6:	74a2                	c.ldsp	s1,40(sp)
   260a8:	7902                	c.ldsp	s2,32(sp)
   260aa:	6121                	c.addi16sp	sp,64
   260ac:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   260ae:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   260b2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   260b4:	4681                	c.li	a3,0
   260b6:	00008617          	auipc	a2,0x8
   260ba:	5d660613          	addi	a2,a2,1494 # 2e68c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c4>
   260be:	00008597          	auipc	a1,0x8
   260c2:	5c258593          	addi	a1,a1,1474 # 2e680 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b8>
   260c6:	00013317          	auipc	t1,0x13
   260ca:	24233303          	ld	t1,578(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   260ce:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   260d0:	bfc1                	c.j	260a0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   260d2:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   260d4:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   260d8:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   260da:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   260dc:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   260e0:	03278463          	beq	a5,s2,26108 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xc2>
      { _M_dataplus._M_p = __p; }
   260e4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   260e6:	689c                	c.ld	a5,16(s1)
   260e8:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   260ea:	649c                	c.ld	a5,8(s1)
   260ec:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   260ee:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   260f2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   260f6:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   260fa:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   260fc:	081c                	c.addi4spn	a5,sp,16
   260fe:	faf501e3          	beq	a0,a5,260a0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26102:	c0ef00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26106:	bf69                	c.j	260a0 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26108:	6490                	c.ld	a2,8(s1)
   2610a:	0605                	c.addi	a2,1
	if (__n == 0)
   2610c:	de79                	c.beqz	a2,260ea <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2610e:	85ca                	c.mv	a1,s2
   26110:	ca0f00ef          	jal	ra,165b0 <memcpy@plt>
   26114:	bfd9                	c.j	260ea <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xa4>
      { return _M_dataplus._M_p; }
   26116:	842a                	c.mv	s0,a0
   26118:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2611a:	081c                	c.addi4spn	a5,sp,16
   2611c:	00f50463          	beq	a0,a5,26124 <dwarf::to_string[abi:cxx11](dwarf::DW_DSC)+0xde>
   26120:	bf0f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26124:	8522                	c.mv	a0,s0
   26126:	dcaf00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002612a <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)>:
{
   2612a:	7139                	c.addi16sp	sp,-64
   2612c:	fc06                	c.sdsp	ra,56(sp)
   2612e:	f822                	c.sdsp	s0,48(sp)
   26130:	f426                	c.sdsp	s1,40(sp)
   26132:	f04a                	c.sdsp	s2,32(sp)
   26134:	842a                	c.mv	s0,a0
        switch (v) {
   26136:	c595                	c.beqz	a1,26162 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x38>
   26138:	4785                	c.li	a5,1
   2613a:	04f58c63          	beq	a1,a5,26192 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x68>
        return "(DW_ORD)0x" + to_hex((int)v);
   2613e:	848a                	c.mv	s1,sp
   26140:	8526                	c.mv	a0,s1
   26142:	00013317          	auipc	t1,0x13
   26146:	2d633303          	ld	t1,726(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2614a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2614c:	4729                	c.li	a4,10
   2614e:	00008697          	auipc	a3,0x8
   26152:	58268693          	addi	a3,a3,1410 # 2e6d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x208>
   26156:	4601                	c.li	a2,0
   26158:	4581                	c.li	a1,0
   2615a:	8526                	c.mv	a0,s1
   2615c:	d04f00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26160:	a899                	c.j	261b6 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26162:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26166:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26168:	4681                	c.li	a3,0
   2616a:	00008617          	auipc	a2,0x8
   2616e:	54660613          	addi	a2,a2,1350 # 2e6b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e8>
   26172:	00008597          	auipc	a1,0x8
   26176:	52e58593          	addi	a1,a1,1326 # 2e6a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d8>
   2617a:	00013317          	auipc	t1,0x13
   2617e:	18e33303          	ld	t1,398(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26182:	9302                	c.jalr	t1
}
   26184:	8522                	c.mv	a0,s0
   26186:	70e2                	c.ldsp	ra,56(sp)
   26188:	7442                	c.ldsp	s0,48(sp)
   2618a:	74a2                	c.ldsp	s1,40(sp)
   2618c:	7902                	c.ldsp	s2,32(sp)
   2618e:	6121                	c.addi16sp	sp,64
   26190:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26192:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26196:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26198:	4681                	c.li	a3,0
   2619a:	00008617          	auipc	a2,0x8
   2619e:	52e60613          	addi	a2,a2,1326 # 2e6c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x200>
   261a2:	00008597          	auipc	a1,0x8
   261a6:	51658593          	addi	a1,a1,1302 # 2e6b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0>
   261aa:	00013317          	auipc	t1,0x13
   261ae:	15e33303          	ld	t1,350(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   261b2:	9302                	c.jalr	t1
   261b4:	bfc1                	c.j	26184 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   261b6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   261b8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   261bc:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   261be:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   261c0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   261c4:	03278463          	beq	a5,s2,261ec <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xc2>
      { _M_dataplus._M_p = __p; }
   261c8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   261ca:	689c                	c.ld	a5,16(s1)
   261cc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   261ce:	649c                	c.ld	a5,8(s1)
   261d0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   261d2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   261d6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   261da:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   261de:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   261e0:	081c                	c.addi4spn	a5,sp,16
   261e2:	faf501e3          	beq	a0,a5,26184 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   261e6:	b2af00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   261ea:	bf69                	c.j	26184 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   261ec:	6490                	c.ld	a2,8(s1)
   261ee:	0605                	c.addi	a2,1
	if (__n == 0)
   261f0:	de79                	c.beqz	a2,261ce <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   261f2:	85ca                	c.mv	a1,s2
   261f4:	bbcf00ef          	jal	ra,165b0 <memcpy@plt>
   261f8:	bfd9                	c.j	261ce <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xa4>
      { return _M_dataplus._M_p; }
   261fa:	842a                	c.mv	s0,a0
   261fc:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   261fe:	081c                	c.addi4spn	a5,sp,16
   26200:	00f50463          	beq	a0,a5,26208 <dwarf::to_string[abi:cxx11](dwarf::DW_ORD)+0xde>
   26204:	b0cf00ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26208:	8522                	c.mv	a0,s0
   2620a:	ce6f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002620e <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)>:
{
   2620e:	7139                	c.addi16sp	sp,-64
   26210:	fc06                	c.sdsp	ra,56(sp)
   26212:	f822                	c.sdsp	s0,48(sp)
   26214:	f426                	c.sdsp	s1,40(sp)
   26216:	f04a                	c.sdsp	s2,32(sp)
   26218:	842a                	c.mv	s0,a0
        switch (v) {
   2621a:	c595                	c.beqz	a1,26246 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x38>
   2621c:	4785                	c.li	a5,1
   2621e:	04f58c63          	beq	a1,a5,26276 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x68>
        return "(DW_CHILDREN)0x" + to_hex((int)v);
   26222:	848a                	c.mv	s1,sp
   26224:	8526                	c.mv	a0,s1
   26226:	00013317          	auipc	t1,0x13
   2622a:	1f233303          	ld	t1,498(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2622e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26230:	473d                	c.li	a4,15
   26232:	00008697          	auipc	a3,0x8
   26236:	4ce68693          	addi	a3,a3,1230 # 2e700 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x238>
   2623a:	4601                	c.li	a2,0
   2623c:	4581                	c.li	a1,0
   2623e:	8526                	c.mv	a0,s1
   26240:	c20f00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26244:	a899                	c.j	2629a <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x8c>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26246:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2624a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2624c:	4681                	c.li	a3,0
   2624e:	00008617          	auipc	a2,0x8
   26252:	4a060613          	addi	a2,a2,1184 # 2e6ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x226>
   26256:	00008597          	auipc	a1,0x8
   2625a:	48a58593          	addi	a1,a1,1162 # 2e6e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x218>
   2625e:	00013317          	auipc	t1,0x13
   26262:	0aa33303          	ld	t1,170(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26266:	9302                	c.jalr	t1
}
   26268:	8522                	c.mv	a0,s0
   2626a:	70e2                	c.ldsp	ra,56(sp)
   2626c:	7442                	c.ldsp	s0,48(sp)
   2626e:	74a2                	c.ldsp	s1,40(sp)
   26270:	7902                	c.ldsp	s2,32(sp)
   26272:	6121                	c.addi16sp	sp,64
   26274:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26276:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2627a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2627c:	4681                	c.li	a3,0
   2627e:	00008617          	auipc	a2,0x8
   26282:	48160613          	addi	a2,a2,1153 # 2e6ff <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x237>
   26286:	00008597          	auipc	a1,0x8
   2628a:	46a58593          	addi	a1,a1,1130 # 2e6f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x228>
   2628e:	00013317          	auipc	t1,0x13
   26292:	07a33303          	ld	t1,122(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26296:	9302                	c.jalr	t1
   26298:	bfc1                	c.j	26268 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2629a:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2629c:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   262a0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   262a2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   262a4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   262a8:	03278463          	beq	a5,s2,262d0 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xc2>
      { _M_dataplus._M_p = __p; }
   262ac:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   262ae:	689c                	c.ld	a5,16(s1)
   262b0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   262b2:	649c                	c.ld	a5,8(s1)
   262b4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   262b6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   262ba:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   262be:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   262c2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   262c4:	081c                	c.addi4spn	a5,sp,16
   262c6:	faf501e3          	beq	a0,a5,26268 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   262ca:	a46f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   262ce:	bf69                	c.j	26268 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0x5a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   262d0:	6490                	c.ld	a2,8(s1)
   262d2:	0605                	c.addi	a2,1
	if (__n == 0)
   262d4:	de79                	c.beqz	a2,262b2 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xa4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   262d6:	85ca                	c.mv	a1,s2
   262d8:	ad8f00ef          	jal	ra,165b0 <memcpy@plt>
   262dc:	bfd9                	c.j	262b2 <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xa4>
      { return _M_dataplus._M_p; }
   262de:	842a                	c.mv	s0,a0
   262e0:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   262e2:	081c                	c.addi4spn	a5,sp,16
   262e4:	00f50463          	beq	a0,a5,262ec <dwarf::to_string[abi:cxx11](dwarf::DW_CHILDREN)+0xde>
   262e8:	a28f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   262ec:	8522                	c.mv	a0,s0
   262ee:	c02f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000262f2 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)>:
{
   262f2:	7139                	c.addi16sp	sp,-64
   262f4:	fc06                	c.sdsp	ra,56(sp)
   262f6:	f822                	c.sdsp	s0,48(sp)
   262f8:	f426                	c.sdsp	s1,40(sp)
   262fa:	f04a                	c.sdsp	s2,32(sp)
   262fc:	842a                	c.mv	s0,a0
        switch (v) {
   262fe:	4789                	c.li	a5,2
   26300:	06f58263          	beq	a1,a5,26364 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x72>
   26304:	478d                	c.li	a5,3
   26306:	08f58163          	beq	a1,a5,26388 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x96>
   2630a:	4785                	c.li	a5,1
   2630c:	02f58463          	beq	a1,a5,26334 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x42>
        return "(DW_ACCESS)0x" + to_hex((int)v);
   26310:	848a                	c.mv	s1,sp
   26312:	8526                	c.mv	a0,s1
   26314:	00013317          	auipc	t1,0x13
   26318:	10433303          	ld	t1,260(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2631c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2631e:	4735                	c.li	a4,13
   26320:	00008697          	auipc	a3,0x8
   26324:	43868693          	addi	a3,a3,1080 # 2e758 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x290>
   26328:	4601                	c.li	a2,0
   2632a:	4581                	c.li	a1,0
   2632c:	8526                	c.mv	a0,s1
   2632e:	b32f00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26332:	a8ad                	c.j	263ac <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26334:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26338:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2633a:	4681                	c.li	a3,0
   2633c:	00008617          	auipc	a2,0x8
   26340:	3e460613          	addi	a2,a2,996 # 2e720 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x258>
   26344:	00008597          	auipc	a1,0x8
   26348:	3cc58593          	addi	a1,a1,972 # 2e710 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x248>
   2634c:	00013317          	auipc	t1,0x13
   26350:	fbc33303          	ld	t1,-68(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26354:	9302                	c.jalr	t1
}
   26356:	8522                	c.mv	a0,s0
   26358:	70e2                	c.ldsp	ra,56(sp)
   2635a:	7442                	c.ldsp	s0,48(sp)
   2635c:	74a2                	c.ldsp	s1,40(sp)
   2635e:	7902                	c.ldsp	s2,32(sp)
   26360:	6121                	c.addi16sp	sp,64
   26362:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26364:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26368:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2636a:	4681                	c.li	a3,0
   2636c:	00008617          	auipc	a2,0x8
   26370:	3cf60613          	addi	a2,a2,975 # 2e73b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x273>
   26374:	00008597          	auipc	a1,0x8
   26378:	3b458593          	addi	a1,a1,948 # 2e728 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x260>
   2637c:	00013317          	auipc	t1,0x13
   26380:	f8c33303          	ld	t1,-116(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26384:	9302                	c.jalr	t1
   26386:	bfc1                	c.j	26356 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26388:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2638c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2638e:	4681                	c.li	a3,0
   26390:	00008617          	auipc	a2,0x8
   26394:	3c160613          	addi	a2,a2,961 # 2e751 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x289>
   26398:	00008597          	auipc	a1,0x8
   2639c:	3a858593          	addi	a1,a1,936 # 2e740 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x278>
   263a0:	00013317          	auipc	t1,0x13
   263a4:	f6833303          	ld	t1,-152(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   263a8:	9302                	c.jalr	t1
   263aa:	b775                	c.j	26356 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   263ac:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   263ae:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   263b2:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   263b4:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   263b6:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   263ba:	03278463          	beq	a5,s2,263e2 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xf0>
      { _M_dataplus._M_p = __p; }
   263be:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   263c0:	689c                	c.ld	a5,16(s1)
   263c2:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   263c4:	649c                	c.ld	a5,8(s1)
   263c6:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   263c8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   263cc:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   263d0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   263d4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   263d6:	081c                	c.addi4spn	a5,sp,16
   263d8:	f6f50fe3          	beq	a0,a5,26356 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   263dc:	934f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   263e0:	bf9d                	c.j	26356 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   263e2:	6490                	c.ld	a2,8(s1)
   263e4:	0605                	c.addi	a2,1
	if (__n == 0)
   263e6:	de79                	c.beqz	a2,263c4 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   263e8:	85ca                	c.mv	a1,s2
   263ea:	9c6f00ef          	jal	ra,165b0 <memcpy@plt>
   263ee:	bfd9                	c.j	263c4 <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0xd2>
      { return _M_dataplus._M_p; }
   263f0:	842a                	c.mv	s0,a0
   263f2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   263f4:	081c                	c.addi4spn	a5,sp,16
   263f6:	00f50463          	beq	a0,a5,263fe <dwarf::to_string[abi:cxx11](dwarf::DW_ACCESS)+0x10c>
   263fa:	916f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   263fe:	8522                	c.mv	a0,s0
   26400:	af0f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026404 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)>:
{
   26404:	7139                	c.addi16sp	sp,-64
   26406:	fc06                	c.sdsp	ra,56(sp)
   26408:	f822                	c.sdsp	s0,48(sp)
   2640a:	f426                	c.sdsp	s1,40(sp)
   2640c:	f04a                	c.sdsp	s2,32(sp)
   2640e:	842a                	c.mv	s0,a0
        switch (v) {
   26410:	4785                	c.li	a5,1
   26412:	06f58063          	beq	a1,a5,26472 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x6e>
   26416:	4789                	c.li	a5,2
   26418:	06f58f63          	beq	a1,a5,26496 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x92>
   2641c:	c19d                	c.beqz	a1,26442 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x3e>
        return "(DW_VIRTUALITY)0x" + to_hex((int)v);
   2641e:	848a                	c.mv	s1,sp
   26420:	8526                	c.mv	a0,s1
   26422:	00013317          	auipc	t1,0x13
   26426:	ff633303          	ld	t1,-10(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2642a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2642c:	4745                	c.li	a4,17
   2642e:	00008697          	auipc	a3,0x8
   26432:	38a68693          	addi	a3,a3,906 # 2e7b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2f0>
   26436:	4601                	c.li	a2,0
   26438:	4581                	c.li	a1,0
   2643a:	8526                	c.mv	a0,s1
   2643c:	a24f00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26440:	a8ad                	c.j	264ba <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26442:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26446:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26448:	4681                	c.li	a3,0
   2644a:	00008617          	auipc	a2,0x8
   2644e:	33060613          	addi	a2,a2,816 # 2e77a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b2>
   26452:	00008597          	auipc	a1,0x8
   26456:	31658593          	addi	a1,a1,790 # 2e768 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2a0>
   2645a:	00013317          	auipc	t1,0x13
   2645e:	eae33303          	ld	t1,-338(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26462:	9302                	c.jalr	t1
}
   26464:	8522                	c.mv	a0,s0
   26466:	70e2                	c.ldsp	ra,56(sp)
   26468:	7442                	c.ldsp	s0,48(sp)
   2646a:	74a2                	c.ldsp	s1,40(sp)
   2646c:	7902                	c.ldsp	s2,32(sp)
   2646e:	6121                	c.addi16sp	sp,64
   26470:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26472:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26476:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26478:	4681                	c.li	a3,0
   2647a:	00008617          	auipc	a2,0x8
   2647e:	31b60613          	addi	a2,a2,795 # 2e795 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2cd>
   26482:	00008597          	auipc	a1,0x8
   26486:	2fe58593          	addi	a1,a1,766 # 2e780 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2b8>
   2648a:	00013317          	auipc	t1,0x13
   2648e:	e7e33303          	ld	t1,-386(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26492:	9302                	c.jalr	t1
   26494:	bfc1                	c.j	26464 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26496:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2649a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2649c:	4681                	c.li	a3,0
   2649e:	00008617          	auipc	a2,0x8
   264a2:	31460613          	addi	a2,a2,788 # 2e7b2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2ea>
   264a6:	00008597          	auipc	a1,0x8
   264aa:	2f258593          	addi	a1,a1,754 # 2e798 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2d0>
   264ae:	00013317          	auipc	t1,0x13
   264b2:	e5a33303          	ld	t1,-422(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   264b6:	9302                	c.jalr	t1
   264b8:	b775                	c.j	26464 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   264ba:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   264bc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   264c0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   264c2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   264c4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   264c8:	03278463          	beq	a5,s2,264f0 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xec>
      { _M_dataplus._M_p = __p; }
   264cc:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   264ce:	689c                	c.ld	a5,16(s1)
   264d0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   264d2:	649c                	c.ld	a5,8(s1)
   264d4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   264d6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   264da:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   264de:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   264e2:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   264e4:	081c                	c.addi4spn	a5,sp,16
   264e6:	f6f50fe3          	beq	a0,a5,26464 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   264ea:	826f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   264ee:	bf9d                	c.j	26464 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   264f0:	6490                	c.ld	a2,8(s1)
   264f2:	0605                	c.addi	a2,1
	if (__n == 0)
   264f4:	de79                	c.beqz	a2,264d2 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xce>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   264f6:	85ca                	c.mv	a1,s2
   264f8:	8b8f00ef          	jal	ra,165b0 <memcpy@plt>
   264fc:	bfd9                	c.j	264d2 <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0xce>
      { return _M_dataplus._M_p; }
   264fe:	842a                	c.mv	s0,a0
   26500:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26502:	081c                	c.addi4spn	a5,sp,16
   26504:	00f50463          	beq	a0,a5,2650c <dwarf::to_string[abi:cxx11](dwarf::DW_VIRTUALITY)+0x108>
   26508:	808f00ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2650c:	8522                	c.mv	a0,s0
   2650e:	9e2f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026512 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)>:
{
   26512:	7139                	c.addi16sp	sp,-64
   26514:	fc06                	c.sdsp	ra,56(sp)
   26516:	f822                	c.sdsp	s0,48(sp)
   26518:	f426                	c.sdsp	s1,40(sp)
   2651a:	f04a                	c.sdsp	s2,32(sp)
   2651c:	842a                	c.mv	s0,a0
        switch (v) {
   2651e:	4789                	c.li	a5,2
   26520:	06f58263          	beq	a1,a5,26584 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x72>
   26524:	478d                	c.li	a5,3
   26526:	08f58163          	beq	a1,a5,265a8 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x96>
   2652a:	4785                	c.li	a5,1
   2652c:	02f58463          	beq	a1,a5,26554 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x42>
        return "(DW_CC)0x" + to_hex((int)v);
   26530:	848a                	c.mv	s1,sp
   26532:	8526                	c.mv	a0,s1
   26534:	00013317          	auipc	t1,0x13
   26538:	ee433303          	ld	t1,-284(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2653c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2653e:	4725                	c.li	a4,9
   26540:	00008697          	auipc	a3,0x8
   26544:	2c068693          	addi	a3,a3,704 # 2e800 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x338>
   26548:	4601                	c.li	a2,0
   2654a:	4581                	c.li	a1,0
   2654c:	8526                	c.mv	a0,s1
   2654e:	912f00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26552:	a8ad                	c.j	265cc <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26554:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26558:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2655a:	4681                	c.li	a3,0
   2655c:	00008617          	auipc	a2,0x8
   26560:	28060613          	addi	a2,a2,640 # 2e7dc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x314>
   26564:	00008597          	auipc	a1,0x8
   26568:	26c58593          	addi	a1,a1,620 # 2e7d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x308>
   2656c:	00013317          	auipc	t1,0x13
   26570:	d9c33303          	ld	t1,-612(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26574:	9302                	c.jalr	t1
}
   26576:	8522                	c.mv	a0,s0
   26578:	70e2                	c.ldsp	ra,56(sp)
   2657a:	7442                	c.ldsp	s0,48(sp)
   2657c:	74a2                	c.ldsp	s1,40(sp)
   2657e:	7902                	c.ldsp	s2,32(sp)
   26580:	6121                	c.addi16sp	sp,64
   26582:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26584:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26588:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2658a:	4681                	c.li	a3,0
   2658c:	00008617          	auipc	a2,0x8
   26590:	26160613          	addi	a2,a2,609 # 2e7ed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x325>
   26594:	00008597          	auipc	a1,0x8
   26598:	24c58593          	addi	a1,a1,588 # 2e7e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x318>
   2659c:	00013317          	auipc	t1,0x13
   265a0:	d6c33303          	ld	t1,-660(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   265a4:	9302                	c.jalr	t1
   265a6:	bfc1                	c.j	26576 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   265a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   265ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   265ae:	4681                	c.li	a3,0
   265b0:	00008617          	auipc	a2,0x8
   265b4:	24c60613          	addi	a2,a2,588 # 2e7fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x334>
   265b8:	00008597          	auipc	a1,0x8
   265bc:	23858593          	addi	a1,a1,568 # 2e7f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x328>
   265c0:	00013317          	auipc	t1,0x13
   265c4:	d4833303          	ld	t1,-696(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   265c8:	9302                	c.jalr	t1
   265ca:	b775                	c.j	26576 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   265cc:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   265ce:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   265d2:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   265d4:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   265d6:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   265da:	03278463          	beq	a5,s2,26602 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xf0>
      { _M_dataplus._M_p = __p; }
   265de:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   265e0:	689c                	c.ld	a5,16(s1)
   265e2:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   265e4:	649c                	c.ld	a5,8(s1)
   265e6:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   265e8:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   265ec:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   265f0:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   265f4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   265f6:	081c                	c.addi4spn	a5,sp,16
   265f8:	f6f50fe3          	beq	a0,a5,26576 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   265fc:	f15ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26600:	bf9d                	c.j	26576 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26602:	6490                	c.ld	a2,8(s1)
   26604:	0605                	c.addi	a2,1
	if (__n == 0)
   26606:	de79                	c.beqz	a2,265e4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26608:	85ca                	c.mv	a1,s2
   2660a:	fa7ef0ef          	jal	ra,165b0 <memcpy@plt>
   2660e:	bfd9                	c.j	265e4 <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0xd2>
      { return _M_dataplus._M_p; }
   26610:	842a                	c.mv	s0,a0
   26612:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26614:	081c                	c.addi4spn	a5,sp,16
   26616:	00f50463          	beq	a0,a5,2661e <dwarf::to_string[abi:cxx11](dwarf::DW_CC)+0x10c>
   2661a:	ef7ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2661e:	8522                	c.mv	a0,s0
   26620:	8d0f00ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026624 <dwarf::to_string[abi:cxx11](dwarf::DW_END)>:
{
   26624:	7139                	c.addi16sp	sp,-64
   26626:	fc06                	c.sdsp	ra,56(sp)
   26628:	f822                	c.sdsp	s0,48(sp)
   2662a:	f426                	c.sdsp	s1,40(sp)
   2662c:	f04a                	c.sdsp	s2,32(sp)
   2662e:	842a                	c.mv	s0,a0
        switch (v) {
   26630:	4785                	c.li	a5,1
   26632:	06f58063          	beq	a1,a5,26692 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x6e>
   26636:	4789                	c.li	a5,2
   26638:	06f58f63          	beq	a1,a5,266b6 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x92>
   2663c:	c19d                	c.beqz	a1,26662 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x3e>
        return "(DW_END)0x" + to_hex((int)v);
   2663e:	848a                	c.mv	s1,sp
   26640:	8526                	c.mv	a0,s1
   26642:	00013317          	auipc	t1,0x13
   26646:	dd633303          	ld	t1,-554(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2664a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2664c:	4729                	c.li	a4,10
   2664e:	00008697          	auipc	a3,0x8
   26652:	1f268693          	addi	a3,a3,498 # 2e840 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x378>
   26656:	4601                	c.li	a2,0
   26658:	4581                	c.li	a1,0
   2665a:	8526                	c.mv	a0,s1
   2665c:	804f00ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26660:	a8ad                	c.j	266da <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xb6>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26662:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26666:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26668:	4681                	c.li	a3,0
   2666a:	00008617          	auipc	a2,0x8
   2666e:	1b460613          	addi	a2,a2,436 # 2e81e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x356>
   26672:	00008597          	auipc	a1,0x8
   26676:	19e58593          	addi	a1,a1,414 # 2e810 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x348>
   2667a:	00013317          	auipc	t1,0x13
   2667e:	c8e33303          	ld	t1,-882(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26682:	9302                	c.jalr	t1
}
   26684:	8522                	c.mv	a0,s0
   26686:	70e2                	c.ldsp	ra,56(sp)
   26688:	7442                	c.ldsp	s0,48(sp)
   2668a:	74a2                	c.ldsp	s1,40(sp)
   2668c:	7902                	c.ldsp	s2,32(sp)
   2668e:	6121                	c.addi16sp	sp,64
   26690:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26692:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26696:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26698:	4681                	c.li	a3,0
   2669a:	00008617          	auipc	a2,0x8
   2669e:	19060613          	addi	a2,a2,400 # 2e82a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x362>
   266a2:	00008597          	auipc	a1,0x8
   266a6:	17e58593          	addi	a1,a1,382 # 2e820 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x358>
   266aa:	00013317          	auipc	t1,0x13
   266ae:	c5e33303          	ld	t1,-930(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   266b2:	9302                	c.jalr	t1
   266b4:	bfc1                	c.j	26684 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   266b6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   266ba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   266bc:	4681                	c.li	a3,0
   266be:	00008617          	auipc	a2,0x8
   266c2:	17f60613          	addi	a2,a2,383 # 2e83d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x375>
   266c6:	00008597          	auipc	a1,0x8
   266ca:	16a58593          	addi	a1,a1,362 # 2e830 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x368>
   266ce:	00013317          	auipc	t1,0x13
   266d2:	c3a33303          	ld	t1,-966(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   266d6:	9302                	c.jalr	t1
   266d8:	b775                	c.j	26684 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   266da:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   266dc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   266e0:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   266e2:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   266e4:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   266e8:	03278463          	beq	a5,s2,26710 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xec>
      { _M_dataplus._M_p = __p; }
   266ec:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   266ee:	689c                	c.ld	a5,16(s1)
   266f0:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   266f2:	649c                	c.ld	a5,8(s1)
   266f4:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   266f6:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   266fa:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   266fe:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26702:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26704:	081c                	c.addi4spn	a5,sp,16
   26706:	f6f50fe3          	beq	a0,a5,26684 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2670a:	e07ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2670e:	bf9d                	c.j	26684 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x60>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26710:	6490                	c.ld	a2,8(s1)
   26712:	0605                	c.addi	a2,1
	if (__n == 0)
   26714:	de79                	c.beqz	a2,266f2 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xce>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26716:	85ca                	c.mv	a1,s2
   26718:	e99ef0ef          	jal	ra,165b0 <memcpy@plt>
   2671c:	bfd9                	c.j	266f2 <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0xce>
      { return _M_dataplus._M_p; }
   2671e:	842a                	c.mv	s0,a0
   26720:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26722:	081c                	c.addi4spn	a5,sp,16
   26724:	00f50463          	beq	a0,a5,2672c <dwarf::to_string[abi:cxx11](dwarf::DW_END)+0x108>
   26728:	de9ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2672c:	8522                	c.mv	a0,s0
   2672e:	fc3ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026732 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)>:
{
   26732:	7139                	c.addi16sp	sp,-64
   26734:	fc06                	c.sdsp	ra,56(sp)
   26736:	f822                	c.sdsp	s0,48(sp)
   26738:	f426                	c.sdsp	s1,40(sp)
   2673a:	f04a                	c.sdsp	s2,32(sp)
   2673c:	842a                	c.mv	s0,a0
        switch (v) {
   2673e:	4789                	c.li	a5,2
   26740:	06f58263          	beq	a1,a5,267a4 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x72>
   26744:	478d                	c.li	a5,3
   26746:	08f58163          	beq	a1,a5,267c8 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x96>
   2674a:	4785                	c.li	a5,1
   2674c:	02f58463          	beq	a1,a5,26774 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x42>
        return "(DW_VIS)0x" + to_hex((int)v);
   26750:	848a                	c.mv	s1,sp
   26752:	8526                	c.mv	a0,s1
   26754:	00013317          	auipc	t1,0x13
   26758:	cc433303          	ld	t1,-828(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2675c:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2675e:	4729                	c.li	a4,10
   26760:	00008697          	auipc	a3,0x8
   26764:	12868693          	addi	a3,a3,296 # 2e888 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3c0>
   26768:	4601                	c.li	a2,0
   2676a:	4581                	c.li	a1,0
   2676c:	8526                	c.mv	a0,s1
   2676e:	ef3ef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26772:	a8ad                	c.j	267ec <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xba>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26774:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26778:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2677a:	4681                	c.li	a3,0
   2677c:	00008617          	auipc	a2,0x8
   26780:	0e060613          	addi	a2,a2,224 # 2e85c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x394>
   26784:	00008597          	auipc	a1,0x8
   26788:	0cc58593          	addi	a1,a1,204 # 2e850 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x388>
   2678c:	00013317          	auipc	t1,0x13
   26790:	b7c33303          	ld	t1,-1156(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26794:	9302                	c.jalr	t1
}
   26796:	8522                	c.mv	a0,s0
   26798:	70e2                	c.ldsp	ra,56(sp)
   2679a:	7442                	c.ldsp	s0,48(sp)
   2679c:	74a2                	c.ldsp	s1,40(sp)
   2679e:	7902                	c.ldsp	s2,32(sp)
   267a0:	6121                	c.addi16sp	sp,64
   267a2:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   267a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   267a8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   267aa:	4681                	c.li	a3,0
   267ac:	00008617          	auipc	a2,0x8
   267b0:	0c360613          	addi	a2,a2,195 # 2e86f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a7>
   267b4:	00008597          	auipc	a1,0x8
   267b8:	0ac58593          	addi	a1,a1,172 # 2e860 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x398>
   267bc:	00013317          	auipc	t1,0x13
   267c0:	b4c33303          	ld	t1,-1204(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   267c4:	9302                	c.jalr	t1
   267c6:	bfc1                	c.j	26796 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   267c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   267cc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   267ce:	4681                	c.li	a3,0
   267d0:	00008617          	auipc	a2,0x8
   267d4:	0b060613          	addi	a2,a2,176 # 2e880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3b8>
   267d8:	00008597          	auipc	a1,0x8
   267dc:	09858593          	addi	a1,a1,152 # 2e870 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3a8>
   267e0:	00013317          	auipc	t1,0x13
   267e4:	b2833303          	ld	t1,-1240(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   267e8:	9302                	c.jalr	t1
   267ea:	b775                	c.j	26796 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   267ec:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   267ee:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   267f2:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   267f4:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   267f6:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   267fa:	03278463          	beq	a5,s2,26822 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xf0>
      { _M_dataplus._M_p = __p; }
   267fe:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26800:	689c                	c.ld	a5,16(s1)
   26802:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26804:	649c                	c.ld	a5,8(s1)
   26806:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26808:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2680c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26810:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26814:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26816:	081c                	c.addi4spn	a5,sp,16
   26818:	f6f50fe3          	beq	a0,a5,26796 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2681c:	cf5ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26820:	bf9d                	c.j	26796 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x64>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26822:	6490                	c.ld	a2,8(s1)
   26824:	0605                	c.addi	a2,1
	if (__n == 0)
   26826:	de79                	c.beqz	a2,26804 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26828:	85ca                	c.mv	a1,s2
   2682a:	d87ef0ef          	jal	ra,165b0 <memcpy@plt>
   2682e:	bfd9                	c.j	26804 <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0xd2>
      { return _M_dataplus._M_p; }
   26830:	842a                	c.mv	s0,a0
   26832:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26834:	081c                	c.addi4spn	a5,sp,16
   26836:	00f50463          	beq	a0,a5,2683e <dwarf::to_string[abi:cxx11](dwarf::DW_VIS)+0x10c>
   2683a:	cd7ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2683e:	8522                	c.mv	a0,s0
   26840:	eb1ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026844 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)>:
{
   26844:	7139                	c.addi16sp	sp,-64
   26846:	fc06                	c.sdsp	ra,56(sp)
   26848:	f822                	c.sdsp	s0,48(sp)
   2684a:	f426                	c.sdsp	s1,40(sp)
   2684c:	f04a                	c.sdsp	s2,32(sp)
   2684e:	842a                	c.mv	s0,a0
        switch (v) {
   26850:	4789                	c.li	a5,2
   26852:	08f58763          	beq	a1,a5,268e0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x9c>
   26856:	02b7c863          	blt	a5,a1,26886 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x42>
   2685a:	c9b9                	c.beqz	a1,268b0 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x6c>
   2685c:	4785                	c.li	a5,1
   2685e:	0af59363          	bne	a1,a5,26904 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26862:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26866:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26868:	4681                	c.li	a3,0
   2686a:	00008617          	auipc	a2,0x8
   2686e:	05460613          	addi	a2,a2,84 # 2e8be <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f6>
   26872:	00008597          	auipc	a1,0x8
   26876:	03e58593          	addi	a1,a1,62 # 2e8b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e8>
   2687a:	00013317          	auipc	t1,0x13
   2687e:	a8e33303          	ld	t1,-1394(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26882:	9302                	c.jalr	t1
   26884:	a0b9                	c.j	268d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
   26886:	478d                	c.li	a5,3
   26888:	06f59e63          	bne	a1,a5,26904 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2688c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26890:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26892:	4681                	c.li	a3,0
   26894:	00008617          	auipc	a2,0x8
   26898:	06360613          	addi	a2,a2,99 # 2e8f7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x42f>
   2689c:	00008597          	auipc	a1,0x8
   268a0:	04458593          	addi	a1,a1,68 # 2e8e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x418>
   268a4:	00013317          	auipc	t1,0x13
   268a8:	a6433303          	ld	t1,-1436(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   268ac:	9302                	c.jalr	t1
   268ae:	a015                	c.j	268d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   268b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   268b4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   268b6:	4681                	c.li	a3,0
   268b8:	00008617          	auipc	a2,0x8
   268bc:	ff260613          	addi	a2,a2,-14 # 2e8aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3e2>
   268c0:	00008597          	auipc	a1,0x8
   268c4:	fd858593          	addi	a1,a1,-40 # 2e898 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3d0>
   268c8:	00013317          	auipc	t1,0x13
   268cc:	a4033303          	ld	t1,-1472(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   268d0:	9302                	c.jalr	t1
}
   268d2:	8522                	c.mv	a0,s0
   268d4:	70e2                	c.ldsp	ra,56(sp)
   268d6:	7442                	c.ldsp	s0,48(sp)
   268d8:	74a2                	c.ldsp	s1,40(sp)
   268da:	7902                	c.ldsp	s2,32(sp)
   268dc:	6121                	c.addi16sp	sp,64
   268de:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   268e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   268e4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   268e6:	4681                	c.li	a3,0
   268e8:	00008617          	auipc	a2,0x8
   268ec:	ff360613          	addi	a2,a2,-13 # 2e8db <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x413>
   268f0:	00008597          	auipc	a1,0x8
   268f4:	fd058593          	addi	a1,a1,-48 # 2e8c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x3f8>
   268f8:	00013317          	auipc	t1,0x13
   268fc:	a1033303          	ld	t1,-1520(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26900:	9302                	c.jalr	t1
   26902:	bfc1                	c.j	268d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
        return "(DW_INL)0x" + to_hex((int)v);
   26904:	848a                	c.mv	s1,sp
   26906:	8526                	c.mv	a0,s1
   26908:	00013317          	auipc	t1,0x13
   2690c:	b1033303          	ld	t1,-1264(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   26910:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26912:	4729                	c.li	a4,10
   26914:	00008697          	auipc	a3,0x8
   26918:	fe468693          	addi	a3,a3,-28 # 2e8f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x430>
   2691c:	4601                	c.li	a2,0
   2691e:	4581                	c.li	a1,0
   26920:	8526                	c.mv	a0,s1
   26922:	d3fef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26926:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26928:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2692c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2692e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26930:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26934:	03278463          	beq	a5,s2,2695c <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x118>
      { _M_dataplus._M_p = __p; }
   26938:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2693a:	689c                	c.ld	a5,16(s1)
   2693c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2693e:	649c                	c.ld	a5,8(s1)
   26940:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26942:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26946:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2694a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2694e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26950:	081c                	c.addi4spn	a5,sp,16
   26952:	f8f500e3          	beq	a0,a5,268d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26956:	bbbef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2695a:	bfa5                	c.j	268d2 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x8e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2695c:	6490                	c.ld	a2,8(s1)
   2695e:	0605                	c.addi	a2,1
	if (__n == 0)
   26960:	de79                	c.beqz	a2,2693e <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xfa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26962:	85ca                	c.mv	a1,s2
   26964:	c4def0ef          	jal	ra,165b0 <memcpy@plt>
   26968:	bfd9                	c.j	2693e <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0xfa>
      { return _M_dataplus._M_p; }
   2696a:	842a                	c.mv	s0,a0
   2696c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2696e:	081c                	c.addi4spn	a5,sp,16
   26970:	00f50463          	beq	a0,a5,26978 <dwarf::to_string[abi:cxx11](dwarf::DW_INL)+0x134>
   26974:	b9def0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26978:	8522                	c.mv	a0,s0
   2697a:	d77ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002697e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)>:
        return "(DW_LNS)0x" + to_hex((int)v);
}

std::string
to_string(DW_LNE v)
{
   2697e:	7139                	c.addi16sp	sp,-64
   26980:	fc06                	c.sdsp	ra,56(sp)
   26982:	f822                	c.sdsp	s0,48(sp)
   26984:	f426                	c.sdsp	s1,40(sp)
   26986:	f04a                	c.sdsp	s2,32(sp)
   26988:	842a                	c.mv	s0,a0
        switch (v) {
   2698a:	478d                	c.li	a5,3
   2698c:	08f58963          	beq	a1,a5,26a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xa0>
   26990:	02b7ca63          	blt	a5,a1,269c4 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x46>
   26994:	4785                	c.li	a5,1
   26996:	04f58c63          	beq	a1,a5,269ee <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x70>
   2699a:	4789                	c.li	a5,2
   2699c:	0af59363          	bne	a1,a5,26a42 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xc4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   269a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   269a4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   269a6:	4681                	c.li	a3,0
   269a8:	00008617          	auipc	a2,0x8
   269ac:	f8a60613          	addi	a2,a2,-118 # 2e932 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x46a>
   269b0:	00008597          	auipc	a1,0x8
   269b4:	f7058593          	addi	a1,a1,-144 # 2e920 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x458>
   269b8:	00013317          	auipc	t1,0x13
   269bc:	95033303          	ld	t1,-1712(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   269c0:	9302                	c.jalr	t1
   269c2:	a0b9                	c.j	26a10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
   269c4:	4791                	c.li	a5,4
   269c6:	06f59e63          	bne	a1,a5,26a42 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xc4>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   269ca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   269ce:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   269d0:	4681                	c.li	a3,0
   269d2:	00008617          	auipc	a2,0x8
   269d6:	f9660613          	addi	a2,a2,-106 # 2e968 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a0>
   269da:	00008597          	auipc	a1,0x8
   269de:	f7658593          	addi	a1,a1,-138 # 2e950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x488>
   269e2:	00013317          	auipc	t1,0x13
   269e6:	92633303          	ld	t1,-1754(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   269ea:	9302                	c.jalr	t1
   269ec:	a015                	c.j	26a10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   269ee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   269f2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   269f4:	4681                	c.li	a3,0
   269f6:	00008617          	auipc	a2,0x8
   269fa:	f2560613          	addi	a2,a2,-219 # 2e91b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x453>
   269fe:	00008597          	auipc	a1,0x8
   26a02:	f0a58593          	addi	a1,a1,-246 # 2e908 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x440>
   26a06:	00013317          	auipc	t1,0x13
   26a0a:	90233303          	ld	t1,-1790(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26a0e:	9302                	c.jalr	t1
        case DW_LNE::set_discriminator: return "DW_LNE_set_discriminator";
        case DW_LNE::lo_user: break;
        case DW_LNE::hi_user: break;
        }
        return "(DW_LNE)0x" + to_hex((int)v);
}
   26a10:	8522                	c.mv	a0,s0
   26a12:	70e2                	c.ldsp	ra,56(sp)
   26a14:	7442                	c.ldsp	s0,48(sp)
   26a16:	74a2                	c.ldsp	s1,40(sp)
   26a18:	7902                	c.ldsp	s2,32(sp)
   26a1a:	6121                	c.addi16sp	sp,64
   26a1c:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26a1e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26a22:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26a24:	4681                	c.li	a3,0
   26a26:	00008617          	auipc	a2,0x8
   26a2a:	f2460613          	addi	a2,a2,-220 # 2e94a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x482>
   26a2e:	00008597          	auipc	a1,0x8
   26a32:	f0a58593          	addi	a1,a1,-246 # 2e938 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x470>
   26a36:	00013317          	auipc	t1,0x13
   26a3a:	8d233303          	ld	t1,-1838(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26a3e:	9302                	c.jalr	t1
   26a40:	bfc1                	c.j	26a10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
        return "(DW_LNE)0x" + to_hex((int)v);
   26a42:	848a                	c.mv	s1,sp
   26a44:	8526                	c.mv	a0,s1
   26a46:	00013317          	auipc	t1,0x13
   26a4a:	9d233303          	ld	t1,-1582(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   26a4e:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26a50:	4729                	c.li	a4,10
   26a52:	00008697          	auipc	a3,0x8
   26a56:	f1e68693          	addi	a3,a3,-226 # 2e970 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4a8>
   26a5a:	4601                	c.li	a2,0
   26a5c:	4581                	c.li	a1,0
   26a5e:	8526                	c.mv	a0,s1
   26a60:	c01ef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26a64:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26a66:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26a6a:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26a6c:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26a6e:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26a72:	03278463          	beq	a5,s2,26a9a <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x11c>
      { _M_dataplus._M_p = __p; }
   26a76:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26a78:	689c                	c.ld	a5,16(s1)
   26a7a:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26a7c:	649c                	c.ld	a5,8(s1)
   26a7e:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26a80:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26a84:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26a88:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26a8c:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26a8e:	081c                	c.addi4spn	a5,sp,16
   26a90:	f8f500e3          	beq	a0,a5,26a10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26a94:	a7def0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26a98:	bfa5                	c.j	26a10 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x92>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26a9a:	6490                	c.ld	a2,8(s1)
   26a9c:	0605                	c.addi	a2,1
	if (__n == 0)
   26a9e:	de79                	c.beqz	a2,26a7c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xfe>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26aa0:	85ca                	c.mv	a1,s2
   26aa2:	b0fef0ef          	jal	ra,165b0 <memcpy@plt>
   26aa6:	bfd9                	c.j	26a7c <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0xfe>
      { return _M_dataplus._M_p; }
   26aa8:	842a                	c.mv	s0,a0
   26aaa:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26aac:	081c                	c.addi4spn	a5,sp,16
   26aae:	00f50463          	beq	a0,a5,26ab6 <dwarf::to_string[abi:cxx11](dwarf::DW_LNE)+0x138>
   26ab2:	a5fef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26ab6:	8522                	c.mv	a0,s0
   26ab8:	c39ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026abc <dwarf::to_string[abi:cxx11](dwarf::DW_ID)>:
{
   26abc:	7139                	c.addi16sp	sp,-64
   26abe:	fc06                	c.sdsp	ra,56(sp)
   26ac0:	f822                	c.sdsp	s0,48(sp)
   26ac2:	f426                	c.sdsp	s1,40(sp)
   26ac4:	f04a                	c.sdsp	s2,32(sp)
   26ac6:	842a                	c.mv	s0,a0
        switch (v) {
   26ac8:	4789                	c.li	a5,2
   26aca:	08f58763          	beq	a1,a5,26b58 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x9c>
   26ace:	02b7c863          	blt	a5,a1,26afe <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x42>
   26ad2:	c9b9                	c.beqz	a1,26b28 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x6c>
   26ad4:	4785                	c.li	a5,1
   26ad6:	0af59363          	bne	a1,a5,26b7c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26ada:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26ade:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26ae0:	4681                	c.li	a3,0
   26ae2:	00008617          	auipc	a2,0x8
   26ae6:	ec360613          	addi	a2,a2,-317 # 2e9a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4dd>
   26aea:	00008597          	auipc	a1,0x8
   26aee:	eae58593          	addi	a1,a1,-338 # 2e998 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4d0>
   26af2:	00013317          	auipc	t1,0x13
   26af6:	81633303          	ld	t1,-2026(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26afa:	9302                	c.jalr	t1
   26afc:	a0b9                	c.j	26b4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
   26afe:	478d                	c.li	a5,3
   26b00:	06f59e63          	bne	a1,a5,26b7c <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xc0>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26b04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26b08:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26b0a:	4681                	c.li	a3,0
   26b0c:	00008617          	auipc	a2,0x8
   26b10:	ec260613          	addi	a2,a2,-318 # 2e9ce <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x506>
   26b14:	00008597          	auipc	a1,0x8
   26b18:	ea458593          	addi	a1,a1,-348 # 2e9b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4f0>
   26b1c:	00012317          	auipc	t1,0x12
   26b20:	7ec33303          	ld	t1,2028(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26b24:	9302                	c.jalr	t1
   26b26:	a015                	c.j	26b4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26b28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26b2c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26b2e:	4681                	c.li	a3,0
   26b30:	00008617          	auipc	a2,0x8
   26b34:	e6460613          	addi	a2,a2,-412 # 2e994 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4cc>
   26b38:	00008597          	auipc	a1,0x8
   26b3c:	e4858593          	addi	a1,a1,-440 # 2e980 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4b8>
   26b40:	00012317          	auipc	t1,0x12
   26b44:	7c833303          	ld	t1,1992(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26b48:	9302                	c.jalr	t1
}
   26b4a:	8522                	c.mv	a0,s0
   26b4c:	70e2                	c.ldsp	ra,56(sp)
   26b4e:	7442                	c.ldsp	s0,48(sp)
   26b50:	74a2                	c.ldsp	s1,40(sp)
   26b52:	7902                	c.ldsp	s2,32(sp)
   26b54:	6121                	c.addi16sp	sp,64
   26b56:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26b58:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26b5c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26b5e:	4681                	c.li	a3,0
   26b60:	00008617          	auipc	a2,0x8
   26b64:	e5760613          	addi	a2,a2,-425 # 2e9b7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4ef>
   26b68:	00008597          	auipc	a1,0x8
   26b6c:	e4058593          	addi	a1,a1,-448 # 2e9a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x4e0>
   26b70:	00012317          	auipc	t1,0x12
   26b74:	79833303          	ld	t1,1944(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26b78:	9302                	c.jalr	t1
   26b7a:	bfc1                	c.j	26b4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
        return "(DW_ID)0x" + to_hex((int)v);
   26b7c:	848a                	c.mv	s1,sp
   26b7e:	8526                	c.mv	a0,s1
   26b80:	00013317          	auipc	t1,0x13
   26b84:	89833303          	ld	t1,-1896(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   26b88:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26b8a:	4725                	c.li	a4,9
   26b8c:	00008697          	auipc	a3,0x8
   26b90:	e4468693          	addi	a3,a3,-444 # 2e9d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x508>
   26b94:	4601                	c.li	a2,0
   26b96:	4581                	c.li	a1,0
   26b98:	8526                	c.mv	a0,s1
   26b9a:	ac7ef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26b9e:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26ba0:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26ba4:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26ba6:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26ba8:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26bac:	03278463          	beq	a5,s2,26bd4 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x118>
      { _M_dataplus._M_p = __p; }
   26bb0:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26bb2:	689c                	c.ld	a5,16(s1)
   26bb4:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26bb6:	649c                	c.ld	a5,8(s1)
   26bb8:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26bba:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26bbe:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26bc2:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26bc6:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26bc8:	081c                	c.addi4spn	a5,sp,16
   26bca:	f8f500e3          	beq	a0,a5,26b4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26bce:	943ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26bd2:	bfa5                	c.j	26b4a <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x8e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26bd4:	6490                	c.ld	a2,8(s1)
   26bd6:	0605                	c.addi	a2,1
	if (__n == 0)
   26bd8:	de79                	c.beqz	a2,26bb6 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xfa>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26bda:	85ca                	c.mv	a1,s2
   26bdc:	9d5ef0ef          	jal	ra,165b0 <memcpy@plt>
   26be0:	bfd9                	c.j	26bb6 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0xfa>
      { return _M_dataplus._M_p; }
   26be2:	842a                	c.mv	s0,a0
   26be4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26be6:	081c                	c.addi4spn	a5,sp,16
   26be8:	00f50463          	beq	a0,a5,26bf0 <dwarf::to_string[abi:cxx11](dwarf::DW_ID)+0x134>
   26bec:	925ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26bf0:	8522                	c.mv	a0,s0
   26bf2:	affef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026bf6 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)>:
{
   26bf6:	7139                	c.addi16sp	sp,-64
   26bf8:	fc06                	c.sdsp	ra,56(sp)
   26bfa:	f822                	c.sdsp	s0,48(sp)
   26bfc:	f426                	c.sdsp	s1,40(sp)
   26bfe:	f04a                	c.sdsp	s2,32(sp)
   26c00:	842a                	c.mv	s0,a0
        switch (v) {
   26c02:	4795                	c.li	a5,5
   26c04:	0cb7ec63          	bltu	a5,a1,26cdc <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0xe6>
   26c08:	00259793          	slli	a5,a1,0x2
   26c0c:	0000a717          	auipc	a4,0xa
   26c10:	8f070713          	addi	a4,a4,-1808 # 304fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2034>
   26c14:	97ba                	c.add	a5,a4
   26c16:	439c                	c.lw	a5,0(a5)
   26c18:	97ba                	c.add	a5,a4
   26c1a:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c22:	4681                	c.li	a3,0
   26c24:	00008617          	auipc	a2,0x8
   26c28:	dca60613          	addi	a2,a2,-566 # 2e9ee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x526>
   26c2c:	00008597          	auipc	a1,0x8
   26c30:	db458593          	addi	a1,a1,-588 # 2e9e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x518>
   26c34:	00012317          	auipc	t1,0x12
   26c38:	6d433303          	ld	t1,1748(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26c3c:	9302                	c.jalr	t1
}
   26c3e:	8522                	c.mv	a0,s0
   26c40:	70e2                	c.ldsp	ra,56(sp)
   26c42:	7442                	c.ldsp	s0,48(sp)
   26c44:	74a2                	c.ldsp	s1,40(sp)
   26c46:	7902                	c.ldsp	s2,32(sp)
   26c48:	6121                	c.addi16sp	sp,64
   26c4a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c50:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c52:	4681                	c.li	a3,0
   26c54:	00008617          	auipc	a2,0x8
   26c58:	db360613          	addi	a2,a2,-589 # 2ea07 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x53f>
   26c5c:	00008597          	auipc	a1,0x8
   26c60:	d9458593          	addi	a1,a1,-620 # 2e9f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x528>
   26c64:	00012317          	auipc	t1,0x12
   26c68:	6a433303          	ld	t1,1700(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26c6c:	9302                	c.jalr	t1
   26c6e:	bfc1                	c.j	26c3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c76:	4681                	c.li	a3,0
   26c78:	00008617          	auipc	a2,0x8
   26c7c:	da860613          	addi	a2,a2,-600 # 2ea20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x558>
   26c80:	00008597          	auipc	a1,0x8
   26c84:	d8858593          	addi	a1,a1,-632 # 2ea08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x540>
   26c88:	00012317          	auipc	t1,0x12
   26c8c:	68033303          	ld	t1,1664(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26c90:	9302                	c.jalr	t1
   26c92:	b775                	c.j	26c3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26c94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26c98:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26c9a:	4681                	c.li	a3,0
   26c9c:	00008617          	auipc	a2,0x8
   26ca0:	da260613          	addi	a2,a2,-606 # 2ea3e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x576>
   26ca4:	00008597          	auipc	a1,0x8
   26ca8:	d8458593          	addi	a1,a1,-636 # 2ea28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x560>
   26cac:	00012317          	auipc	t1,0x12
   26cb0:	65c33303          	ld	t1,1628(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26cb4:	9302                	c.jalr	t1
   26cb6:	b761                	c.j	26c3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26cb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26cbc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26cbe:	4681                	c.li	a3,0
   26cc0:	00008617          	auipc	a2,0x8
   26cc4:	d9760613          	addi	a2,a2,-617 # 2ea57 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58f>
   26cc8:	00008597          	auipc	a1,0x8
   26ccc:	d7858593          	addi	a1,a1,-648 # 2ea40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x578>
   26cd0:	00012317          	auipc	t1,0x12
   26cd4:	63833303          	ld	t1,1592(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26cd8:	9302                	c.jalr	t1
   26cda:	b795                	c.j	26c3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
        return "(DW_DS)0x" + to_hex((int)v);
   26cdc:	848a                	c.mv	s1,sp
   26cde:	8526                	c.mv	a0,s1
   26ce0:	00012317          	auipc	t1,0x12
   26ce4:	73833303          	ld	t1,1848(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   26ce8:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26cea:	4725                	c.li	a4,9
   26cec:	00008697          	auipc	a3,0x8
   26cf0:	d6c68693          	addi	a3,a3,-660 # 2ea58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x590>
   26cf4:	4601                	c.li	a2,0
   26cf6:	4581                	c.li	a1,0
   26cf8:	8526                	c.mv	a0,s1
   26cfa:	967ef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26cfe:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d00:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26d04:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26d06:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26d08:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26d0c:	03278463          	beq	a5,s2,26d34 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x13e>
      { _M_dataplus._M_p = __p; }
   26d10:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26d12:	689c                	c.ld	a5,16(s1)
   26d14:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26d16:	649c                	c.ld	a5,8(s1)
   26d18:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26d1a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26d1e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26d22:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26d26:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26d28:	081c                	c.addi4spn	a5,sp,16
   26d2a:	f0f50ae3          	beq	a0,a5,26c3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26d2e:	fe2ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26d32:	b731                	c.j	26c3e <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26d34:	6490                	c.ld	a2,8(s1)
   26d36:	0605                	c.addi	a2,1
	if (__n == 0)
   26d38:	de79                	c.beqz	a2,26d16 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x120>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26d3a:	85ca                	c.mv	a1,s2
   26d3c:	875ef0ef          	jal	ra,165b0 <memcpy@plt>
   26d40:	bfd9                	c.j	26d16 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x120>
      { return _M_dataplus._M_p; }
   26d42:	842a                	c.mv	s0,a0
   26d44:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26d46:	081c                	c.addi4spn	a5,sp,16
   26d48:	00f50463          	beq	a0,a5,26d50 <dwarf::to_string[abi:cxx11](dwarf::DW_DS)+0x15a>
   26d4c:	fc4ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26d50:	8522                	c.mv	a0,s0
   26d52:	99fef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026d56 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)>:
{
   26d56:	715d                	c.addi16sp	sp,-80
   26d58:	e486                	c.sdsp	ra,72(sp)
   26d5a:	e0a2                	c.sdsp	s0,64(sp)
   26d5c:	fc26                	c.sdsp	s1,56(sp)
   26d5e:	f84a                	c.sdsp	s2,48(sp)
   26d60:	f44e                	c.sdsp	s3,40(sp)
   26d62:	f052                	c.sdsp	s4,32(sp)
   26d64:	842a                	c.mv	s0,a0
        switch (v) {
   26d66:	4791                	c.li	a5,4
   26d68:	0cb7ed63          	bltu	a5,a1,26e42 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0xec>
   26d6c:	058a                	c.slli	a1,0x2
   26d6e:	00009717          	auipc	a4,0x9
   26d72:	7a670713          	addi	a4,a4,1958 # 30514 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x204c>
   26d76:	95ba                	c.add	a1,a4
   26d78:	419c                	c.lw	a5,0(a1)
   26d7a:	97ba                	c.add	a5,a4
   26d7c:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26d7e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26d82:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26d84:	4681                	c.li	a3,0
   26d86:	00008617          	auipc	a2,0x8
   26d8a:	cfc60613          	addi	a2,a2,-772 # 2ea82 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5ba>
   26d8e:	00008597          	auipc	a1,0x8
   26d92:	cda58593          	addi	a1,a1,-806 # 2ea68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5a0>
   26d96:	00012317          	auipc	t1,0x12
   26d9a:	57233303          	ld	t1,1394(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26d9e:	9302                	c.jalr	t1
}
   26da0:	8522                	c.mv	a0,s0
   26da2:	60a6                	c.ldsp	ra,72(sp)
   26da4:	6406                	c.ldsp	s0,64(sp)
   26da6:	74e2                	c.ldsp	s1,56(sp)
   26da8:	7942                	c.ldsp	s2,48(sp)
   26daa:	79a2                	c.ldsp	s3,40(sp)
   26dac:	7a02                	c.ldsp	s4,32(sp)
   26dae:	6161                	c.addi16sp	sp,80
   26db0:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26db2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26db6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26db8:	4681                	c.li	a3,0
   26dba:	00008617          	auipc	a2,0x8
   26dbe:	ce460613          	addi	a2,a2,-796 # 2ea9e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d6>
   26dc2:	00008597          	auipc	a1,0x8
   26dc6:	cc658593          	addi	a1,a1,-826 # 2ea88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5c0>
   26dca:	00012317          	auipc	t1,0x12
   26dce:	53e33303          	ld	t1,1342(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26dd2:	9302                	c.jalr	t1
   26dd4:	b7f1                	c.j	26da0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26dd6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26dda:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26ddc:	4681                	c.li	a3,0
   26dde:	00008617          	auipc	a2,0x8
   26de2:	cdc60613          	addi	a2,a2,-804 # 2eaba <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f2>
   26de6:	00008597          	auipc	a1,0x8
   26dea:	cba58593          	addi	a1,a1,-838 # 2eaa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5d8>
   26dee:	00012317          	auipc	t1,0x12
   26df2:	51a33303          	ld	t1,1306(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26df6:	9302                	c.jalr	t1
   26df8:	b765                	c.j	26da0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26dfa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26dfe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26e00:	4681                	c.li	a3,0
   26e02:	00008617          	auipc	a2,0x8
   26e06:	cd960613          	addi	a2,a2,-807 # 2eadb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x613>
   26e0a:	00008597          	auipc	a1,0x8
   26e0e:	cb658593          	addi	a1,a1,-842 # 2eac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x5f8>
   26e12:	00012317          	auipc	t1,0x12
   26e16:	4f633303          	ld	t1,1270(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26e1a:	9302                	c.jalr	t1
   26e1c:	b751                	c.j	26da0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26e1e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26e22:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26e24:	4681                	c.li	a3,0
   26e26:	00008617          	auipc	a2,0x8
   26e2a:	cd260613          	addi	a2,a2,-814 # 2eaf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x630>
   26e2e:	00008597          	auipc	a1,0x8
   26e32:	cb258593          	addi	a1,a1,-846 # 2eae0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x618>
   26e36:	00012317          	auipc	t1,0x12
   26e3a:	4d233303          	ld	t1,1234(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26e3e:	9302                	c.jalr	t1
   26e40:	b785                	c.j	26da0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
    const bool __neg = __val < 0;
   26e42:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   26e46:	0005891b          	addiw	s2,a1,0
   26e4a:	0405cb63          	blt	a1,zero,26ea0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x14a>
    const auto __len = __detail::__to_chars_len(__uval);
   26e4e:	45a9                	c.li	a1,10
   26e50:	854a                	c.mv	a0,s2
   26e52:	00012317          	auipc	t1,0x12
   26e56:	64633303          	ld	t1,1606(t1) # 39498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x1528a>
   26e5a:	9302                	c.jalr	t1
   26e5c:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   26e60:	081c                	c.addi4spn	a5,sp,16
   26e62:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   26e64:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   26e68:	02d00613          	addi	a2,zero,45
   26e6c:	1582                	c.slli	a1,0x20
   26e6e:	9181                	c.srli	a1,0x20
   26e70:	848a                	c.mv	s1,sp
   26e72:	8526                	c.mv	a0,s1
   26e74:	efcef0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   26e78:	864a                	c.mv	a2,s2
   26e7a:	85d2                	c.mv	a1,s4
   26e7c:	6502                	c.ldsp	a0,0(sp)
   26e7e:	954e                	c.add	a0,s3
   26e80:	00012317          	auipc	t1,0x12
   26e84:	63833303          	ld	t1,1592(t1) # 394b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15238>
   26e88:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26e8a:	474d                	c.li	a4,19
   26e8c:	00008697          	auipc	a3,0x8
   26e90:	c7468693          	addi	a3,a3,-908 # 2eb00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x638>
   26e94:	4601                	c.li	a2,0
   26e96:	4581                	c.li	a1,0
   26e98:	8526                	c.mv	a0,s1
   26e9a:	fc6ef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   26e9e:	a021                	c.j	26ea6 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x150>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   26ea0:	40b0093b          	subw	s2,zero,a1
   26ea4:	b76d                	c.j	26e4e <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0xf8>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   26ea6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26ea8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   26eac:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   26eae:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   26eb0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   26eb4:	03278463          	beq	a5,s2,26edc <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x186>
      { _M_dataplus._M_p = __p; }
   26eb8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   26eba:	689c                	c.ld	a5,16(s1)
   26ebc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   26ebe:	649c                	c.ld	a5,8(s1)
   26ec0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   26ec2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   26ec6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   26eca:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   26ece:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26ed0:	081c                	c.addi4spn	a5,sp,16
   26ed2:	ecf507e3          	beq	a0,a5,26da0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   26ed6:	e3aef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   26eda:	b5d9                	c.j	26da0 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   26edc:	6490                	c.ld	a2,8(s1)
   26ede:	0605                	c.addi	a2,1
	if (__n == 0)
   26ee0:	de79                	c.beqz	a2,26ebe <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x168>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   26ee2:	85ca                	c.mv	a1,s2
   26ee4:	eccef0ef          	jal	ra,165b0 <memcpy@plt>
   26ee8:	bfd9                	c.j	26ebe <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x168>
      { return _M_dataplus._M_p; }
   26eea:	842a                	c.mv	s0,a0
   26eec:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   26eee:	081c                	c.addi4spn	a5,sp,16
   26ef0:	00f50463          	beq	a0,a5,26ef8 <dwarf::to_string[abi:cxx11](dwarf::expr_result::type)+0x1a2>
   26ef4:	e1cef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   26ef8:	8522                	c.mv	a0,s0
   26efa:	ff6ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000026efe <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)>:
{
   26efe:	7139                	c.addi16sp	sp,-64
   26f00:	fc06                	c.sdsp	ra,56(sp)
   26f02:	f822                	c.sdsp	s0,48(sp)
   26f04:	f426                	c.sdsp	s1,40(sp)
   26f06:	f04a                	c.sdsp	s2,32(sp)
   26f08:	842a                	c.mv	s0,a0
        switch (v) {
   26f0a:	47b1                	c.li	a5,12
   26f0c:	1cb7ea63          	bltu	a5,a1,270e0 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x1e2>
   26f10:	00259793          	slli	a5,a1,0x2
   26f14:	00009717          	auipc	a4,0x9
   26f18:	61470713          	addi	a4,a4,1556 # 30528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2060>
   26f1c:	97ba                	c.add	a5,a4
   26f1e:	439c                	c.lw	a5,0(a5)
   26f20:	97ba                	c.add	a5,a4
   26f22:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26f24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26f28:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26f2a:	4681                	c.li	a3,0
   26f2c:	00008617          	auipc	a2,0x8
   26f30:	bf760613          	addi	a2,a2,-1033 # 2eb23 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x65b>
   26f34:	00008597          	auipc	a1,0x8
   26f38:	be458593          	addi	a1,a1,-1052 # 2eb18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x650>
   26f3c:	00012317          	auipc	t1,0x12
   26f40:	3cc33303          	ld	t1,972(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26f44:	9302                	c.jalr	t1
}
   26f46:	8522                	c.mv	a0,s0
   26f48:	70e2                	c.ldsp	ra,56(sp)
   26f4a:	7442                	c.ldsp	s0,48(sp)
   26f4c:	74a2                	c.ldsp	s1,40(sp)
   26f4e:	7902                	c.ldsp	s2,32(sp)
   26f50:	6121                	c.addi16sp	sp,64
   26f52:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26f54:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26f58:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26f5a:	4681                	c.li	a3,0
   26f5c:	00008617          	auipc	a2,0x8
   26f60:	bdd60613          	addi	a2,a2,-1059 # 2eb39 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x671>
   26f64:	00008597          	auipc	a1,0x8
   26f68:	bc458593          	addi	a1,a1,-1084 # 2eb28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x660>
   26f6c:	00012317          	auipc	t1,0x12
   26f70:	39c33303          	ld	t1,924(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26f74:	9302                	c.jalr	t1
   26f76:	bfc1                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26f78:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26f7c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26f7e:	4681                	c.li	a3,0
   26f80:	00008617          	auipc	a2,0x8
   26f84:	bd360613          	addi	a2,a2,-1069 # 2eb53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x68b>
   26f88:	00008597          	auipc	a1,0x8
   26f8c:	bb858593          	addi	a1,a1,-1096 # 2eb40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x678>
   26f90:	00012317          	auipc	t1,0x12
   26f94:	37833303          	ld	t1,888(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26f98:	9302                	c.jalr	t1
   26f9a:	b775                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26f9c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26fa0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26fa2:	4681                	c.li	a3,0
   26fa4:	00008617          	auipc	a2,0x8
   26fa8:	bc360613          	addi	a2,a2,-1085 # 2eb67 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x69f>
   26fac:	00008597          	auipc	a1,0x8
   26fb0:	bac58593          	addi	a1,a1,-1108 # 2eb58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x690>
   26fb4:	00012317          	auipc	t1,0x12
   26fb8:	35433303          	ld	t1,852(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26fbc:	9302                	c.jalr	t1
   26fbe:	b761                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26fc0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26fc4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26fc6:	4681                	c.li	a3,0
   26fc8:	00008617          	auipc	a2,0x8
   26fcc:	bb160613          	addi	a2,a2,-1103 # 2eb79 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b1>
   26fd0:	00008597          	auipc	a1,0x8
   26fd4:	b9858593          	addi	a1,a1,-1128 # 2eb68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6a0>
   26fd8:	00012317          	auipc	t1,0x12
   26fdc:	33033303          	ld	t1,816(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   26fe0:	9302                	c.jalr	t1
   26fe2:	b795                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   26fe4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   26fe8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   26fea:	4681                	c.li	a3,0
   26fec:	00008617          	auipc	a2,0x8
   26ff0:	ba660613          	addi	a2,a2,-1114 # 2eb92 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6ca>
   26ff4:	00008597          	auipc	a1,0x8
   26ff8:	b8c58593          	addi	a1,a1,-1140 # 2eb80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6b8>
   26ffc:	00012317          	auipc	t1,0x12
   27000:	30c33303          	ld	t1,780(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27004:	9302                	c.jalr	t1
   27006:	b781                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27008:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2700c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2700e:	4681                	c.li	a3,0
   27010:	00008617          	auipc	a2,0x8
   27014:	b9e60613          	addi	a2,a2,-1122 # 2ebae <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e6>
   27018:	00008597          	auipc	a1,0x8
   2701c:	b8058593          	addi	a1,a1,-1152 # 2eb98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6d0>
   27020:	00012317          	auipc	t1,0x12
   27024:	2e833303          	ld	t1,744(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27028:	9302                	c.jalr	t1
   2702a:	bf31                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2702c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27030:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27032:	4681                	c.li	a3,0
   27034:	00008617          	auipc	a2,0x8
   27038:	b8f60613          	addi	a2,a2,-1137 # 2ebc3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6fb>
   2703c:	00008597          	auipc	a1,0x8
   27040:	b7458593          	addi	a1,a1,-1164 # 2ebb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x6e8>
   27044:	00012317          	auipc	t1,0x12
   27048:	2c433303          	ld	t1,708(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2704c:	9302                	c.jalr	t1
   2704e:	bde5                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27050:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27054:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27056:	4681                	c.li	a3,0
   27058:	00008617          	auipc	a2,0x8
   2705c:	b8760613          	addi	a2,a2,-1145 # 2ebdf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x717>
   27060:	00008597          	auipc	a1,0x8
   27064:	b6858593          	addi	a1,a1,-1176 # 2ebc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x700>
   27068:	00012317          	auipc	t1,0x12
   2706c:	2a033303          	ld	t1,672(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27070:	9302                	c.jalr	t1
   27072:	bdd1                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27074:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27078:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2707a:	4681                	c.li	a3,0
   2707c:	00008617          	auipc	a2,0x8
   27080:	b7b60613          	addi	a2,a2,-1157 # 2ebf7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x72f>
   27084:	00008597          	auipc	a1,0x8
   27088:	b5c58593          	addi	a1,a1,-1188 # 2ebe0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x718>
   2708c:	00012317          	auipc	t1,0x12
   27090:	27c33303          	ld	t1,636(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27094:	9302                	c.jalr	t1
   27096:	bd45                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27098:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2709c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2709e:	4681                	c.li	a3,0
   270a0:	00008617          	auipc	a2,0x8
   270a4:	b7160613          	addi	a2,a2,-1167 # 2ec11 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x749>
   270a8:	00008597          	auipc	a1,0x8
   270ac:	b5058593          	addi	a1,a1,-1200 # 2ebf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x730>
   270b0:	00012317          	auipc	t1,0x12
   270b4:	25833303          	ld	t1,600(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   270b8:	9302                	c.jalr	t1
   270ba:	b571                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   270bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   270c0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   270c2:	4681                	c.li	a3,0
   270c4:	00008617          	auipc	a2,0x8
   270c8:	b6260613          	addi	a2,a2,-1182 # 2ec26 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x75e>
   270cc:	00008597          	auipc	a1,0x8
   270d0:	b4c58593          	addi	a1,a1,-1204 # 2ec18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x750>
   270d4:	00012317          	auipc	t1,0x12
   270d8:	23433303          	ld	t1,564(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   270dc:	9302                	c.jalr	t1
   270de:	b5a5                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
        return "(DW_LNS)0x" + to_hex((int)v);
   270e0:	848a                	c.mv	s1,sp
   270e2:	8526                	c.mv	a0,s1
   270e4:	00012317          	auipc	t1,0x12
   270e8:	33433303          	ld	t1,820(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   270ec:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   270ee:	4729                	c.li	a4,10
   270f0:	00008697          	auipc	a3,0x8
   270f4:	b3868693          	addi	a3,a3,-1224 # 2ec28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x760>
   270f8:	4601                	c.li	a2,0
   270fa:	4581                	c.li	a1,0
   270fc:	8526                	c.mv	a0,s1
   270fe:	d62ef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27102:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27104:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27108:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2710a:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2710c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27110:	03278463          	beq	a5,s2,27138 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x23a>
      { _M_dataplus._M_p = __p; }
   27114:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27116:	689c                	c.ld	a5,16(s1)
   27118:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2711a:	649c                	c.ld	a5,8(s1)
   2711c:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2711e:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27122:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27126:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2712a:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2712c:	081c                	c.addi4spn	a5,sp,16
   2712e:	e0f50ce3          	beq	a0,a5,26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27132:	bdeef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27136:	bd01                	c.j	26f46 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27138:	6490                	c.ld	a2,8(s1)
   2713a:	0605                	c.addi	a2,1
	if (__n == 0)
   2713c:	de79                	c.beqz	a2,2711a <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x21c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2713e:	85ca                	c.mv	a1,s2
   27140:	c70ef0ef          	jal	ra,165b0 <memcpy@plt>
   27144:	bfd9                	c.j	2711a <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x21c>
      { return _M_dataplus._M_p; }
   27146:	842a                	c.mv	s0,a0
   27148:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2714a:	081c                	c.addi4spn	a5,sp,16
   2714c:	00f50463          	beq	a0,a5,27154 <dwarf::to_string[abi:cxx11](dwarf::DW_LNS)+0x256>
   27150:	bc0ef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27154:	8522                	c.mv	a0,s0
   27156:	d9aef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002715a <dwarf::to_string[abi:cxx11](dwarf::section_type)>:
{
   2715a:	715d                	c.addi16sp	sp,-80
   2715c:	e486                	c.sdsp	ra,72(sp)
   2715e:	e0a2                	c.sdsp	s0,64(sp)
   27160:	fc26                	c.sdsp	s1,56(sp)
   27162:	f84a                	c.sdsp	s2,48(sp)
   27164:	f44e                	c.sdsp	s3,40(sp)
   27166:	f052                	c.sdsp	s4,32(sp)
   27168:	842a                	c.mv	s0,a0
        switch (v) {
   2716a:	47ad                	c.li	a5,11
   2716c:	1cb7eb63          	bltu	a5,a1,27342 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x1e8>
   27170:	058a                	c.slli	a1,0x2
   27172:	00009717          	auipc	a4,0x9
   27176:	3ea70713          	addi	a4,a4,1002 # 3055c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2094>
   2717a:	95ba                	c.add	a1,a4
   2717c:	419c                	c.lw	a5,0(a1)
   2717e:	97ba                	c.add	a5,a4
   27180:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27182:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27186:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27188:	4681                	c.li	a3,0
   2718a:	00008617          	auipc	a2,0x8
   2718e:	ac260613          	addi	a2,a2,-1342 # 2ec4c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x784>
   27192:	00008597          	auipc	a1,0x8
   27196:	aa658593          	addi	a1,a1,-1370 # 2ec38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x770>
   2719a:	00012317          	auipc	t1,0x12
   2719e:	16e33303          	ld	t1,366(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   271a2:	9302                	c.jalr	t1
}
   271a4:	8522                	c.mv	a0,s0
   271a6:	60a6                	c.ldsp	ra,72(sp)
   271a8:	6406                	c.ldsp	s0,64(sp)
   271aa:	74e2                	c.ldsp	s1,56(sp)
   271ac:	7942                	c.ldsp	s2,48(sp)
   271ae:	79a2                	c.ldsp	s3,40(sp)
   271b0:	7a02                	c.ldsp	s4,32(sp)
   271b2:	6161                	c.addi16sp	sp,80
   271b4:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   271b6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   271ba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   271bc:	4681                	c.li	a3,0
   271be:	00008617          	auipc	a2,0x8
   271c2:	aa760613          	addi	a2,a2,-1369 # 2ec65 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x79d>
   271c6:	00008597          	auipc	a1,0x8
   271ca:	a8a58593          	addi	a1,a1,-1398 # 2ec50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x788>
   271ce:	00012317          	auipc	t1,0x12
   271d2:	13a33303          	ld	t1,314(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   271d6:	9302                	c.jalr	t1
   271d8:	b7f1                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   271da:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   271de:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   271e0:	4681                	c.li	a3,0
   271e2:	00008617          	auipc	a2,0x8
   271e6:	a9960613          	addi	a2,a2,-1383 # 2ec7b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b3>
   271ea:	00008597          	auipc	a1,0x8
   271ee:	a7e58593          	addi	a1,a1,-1410 # 2ec68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7a0>
   271f2:	00012317          	auipc	t1,0x12
   271f6:	11633303          	ld	t1,278(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   271fa:	9302                	c.jalr	t1
   271fc:	b765                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   271fe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27202:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27204:	4681                	c.li	a3,0
   27206:	00008617          	auipc	a2,0x8
   2720a:	a8c60613          	addi	a2,a2,-1396 # 2ec92 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7ca>
   2720e:	00008597          	auipc	a1,0x8
   27212:	a7258593          	addi	a1,a1,-1422 # 2ec80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7b8>
   27216:	00012317          	auipc	t1,0x12
   2721a:	0f233303          	ld	t1,242(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2721e:	9302                	c.jalr	t1
   27220:	b751                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27222:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27226:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27228:	4681                	c.li	a3,0
   2722a:	00008617          	auipc	a2,0x8
   2722e:	a8060613          	addi	a2,a2,-1408 # 2ecaa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e2>
   27232:	00008597          	auipc	a1,0x8
   27236:	a6658593          	addi	a1,a1,-1434 # 2ec98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7d0>
   2723a:	00012317          	auipc	t1,0x12
   2723e:	0ce33303          	ld	t1,206(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27242:	9302                	c.jalr	t1
   27244:	b785                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27246:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2724a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2724c:	4681                	c.li	a3,0
   2724e:	00008617          	auipc	a2,0x8
   27252:	a7360613          	addi	a2,a2,-1421 # 2ecc1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7f9>
   27256:	00008597          	auipc	a1,0x8
   2725a:	a5a58593          	addi	a1,a1,-1446 # 2ecb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x7e8>
   2725e:	00012317          	auipc	t1,0x12
   27262:	0aa33303          	ld	t1,170(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27266:	9302                	c.jalr	t1
   27268:	bf35                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2726a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2726e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27270:	4681                	c.li	a3,0
   27272:	00008617          	auipc	a2,0x8
   27276:	a6b60613          	addi	a2,a2,-1429 # 2ecdd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x815>
   2727a:	00008597          	auipc	a1,0x8
   2727e:	a4e58593          	addi	a1,a1,-1458 # 2ecc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x800>
   27282:	00012317          	auipc	t1,0x12
   27286:	08633303          	ld	t1,134(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2728a:	9302                	c.jalr	t1
   2728c:	bf21                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2728e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27292:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27294:	4681                	c.li	a3,0
   27296:	00008617          	auipc	a2,0x8
   2729a:	a6060613          	addi	a2,a2,-1440 # 2ecf6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x82e>
   2729e:	00008597          	auipc	a1,0x8
   272a2:	a4258593          	addi	a1,a1,-1470 # 2ece0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x818>
   272a6:	00012317          	auipc	t1,0x12
   272aa:	06233303          	ld	t1,98(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   272ae:	9302                	c.jalr	t1
   272b0:	bdd5                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   272b2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   272b6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   272b8:	4681                	c.li	a3,0
   272ba:	00008617          	auipc	a2,0x8
   272be:	a5460613          	addi	a2,a2,-1452 # 2ed0e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x846>
   272c2:	00008597          	auipc	a1,0x8
   272c6:	a3658593          	addi	a1,a1,-1482 # 2ecf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x830>
   272ca:	00012317          	auipc	t1,0x12
   272ce:	03e33303          	ld	t1,62(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   272d2:	9302                	c.jalr	t1
   272d4:	bdc1                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   272d6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   272da:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   272dc:	4681                	c.li	a3,0
   272de:	00008617          	auipc	a2,0x8
   272e2:	a4660613          	addi	a2,a2,-1466 # 2ed24 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x85c>
   272e6:	00008597          	auipc	a1,0x8
   272ea:	a2a58593          	addi	a1,a1,-1494 # 2ed10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x848>
   272ee:	00012317          	auipc	t1,0x12
   272f2:	01a33303          	ld	t1,26(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   272f6:	9302                	c.jalr	t1
   272f8:	b575                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   272fa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   272fe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27300:	4681                	c.li	a3,0
   27302:	00008617          	auipc	a2,0x8
   27306:	a3760613          	addi	a2,a2,-1481 # 2ed39 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x871>
   2730a:	00008597          	auipc	a1,0x8
   2730e:	a1e58593          	addi	a1,a1,-1506 # 2ed28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x860>
   27312:	00012317          	auipc	t1,0x12
   27316:	ff633303          	ld	t1,-10(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2731a:	9302                	c.jalr	t1
   2731c:	b561                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2731e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27322:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27324:	4681                	c.li	a3,0
   27326:	00008617          	auipc	a2,0x8
   2732a:	a2d60613          	addi	a2,a2,-1491 # 2ed53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x88b>
   2732e:	00008597          	auipc	a1,0x8
   27332:	a1258593          	addi	a1,a1,-1518 # 2ed40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x878>
   27336:	00012317          	auipc	t1,0x12
   2733a:	fd233303          	ld	t1,-46(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2733e:	9302                	c.jalr	t1
   27340:	b595                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
    const bool __neg = __val < 0;
   27342:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   27346:	0005891b          	addiw	s2,a1,0
   2734a:	0405cb63          	blt	a1,zero,273a0 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x246>
    const auto __len = __detail::__to_chars_len(__uval);
   2734e:	45a9                	c.li	a1,10
   27350:	854a                	c.mv	a0,s2
   27352:	00012317          	auipc	t1,0x12
   27356:	14633303          	ld	t1,326(t1) # 39498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x1528a>
   2735a:	9302                	c.jalr	t1
   2735c:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   27360:	081c                	c.addi4spn	a5,sp,16
   27362:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   27364:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   27368:	02d00613          	addi	a2,zero,45
   2736c:	1582                	c.slli	a1,0x20
   2736e:	9181                	c.srli	a1,0x20
   27370:	848a                	c.mv	s1,sp
   27372:	8526                	c.mv	a0,s1
   27374:	9fcef0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   27378:	864a                	c.mv	a2,s2
   2737a:	85d2                	c.mv	a1,s4
   2737c:	6502                	c.ldsp	a0,0(sp)
   2737e:	954e                	c.add	a0,s3
   27380:	00012317          	auipc	t1,0x12
   27384:	13833303          	ld	t1,312(t1) # 394b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15238>
   27388:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2738a:	4739                	c.li	a4,14
   2738c:	00008697          	auipc	a3,0x8
   27390:	9cc68693          	addi	a3,a3,-1588 # 2ed58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x890>
   27394:	4601                	c.li	a2,0
   27396:	4581                	c.li	a1,0
   27398:	8526                	c.mv	a0,s1
   2739a:	ac6ef0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2739e:	a021                	c.j	273a6 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x24c>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   273a0:	40b0093b          	subw	s2,zero,a1
   273a4:	b76d                	c.j	2734e <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x1f4>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   273a6:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   273a8:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   273ac:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   273ae:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   273b0:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   273b4:	03278463          	beq	a5,s2,273dc <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x282>
      { _M_dataplus._M_p = __p; }
   273b8:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   273ba:	689c                	c.ld	a5,16(s1)
   273bc:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   273be:	649c                	c.ld	a5,8(s1)
   273c0:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   273c2:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   273c6:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   273ca:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   273ce:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   273d0:	081c                	c.addi4spn	a5,sp,16
   273d2:	dcf509e3          	beq	a0,a5,271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   273d6:	93aef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   273da:	b3e9                	c.j	271a4 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   273dc:	6490                	c.ld	a2,8(s1)
   273de:	0605                	c.addi	a2,1
	if (__n == 0)
   273e0:	de79                	c.beqz	a2,273be <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x264>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   273e2:	85ca                	c.mv	a1,s2
   273e4:	9ccef0ef          	jal	ra,165b0 <memcpy@plt>
   273e8:	bfd9                	c.j	273be <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x264>
      { return _M_dataplus._M_p; }
   273ea:	842a                	c.mv	s0,a0
   273ec:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   273ee:	081c                	c.addi4spn	a5,sp,16
   273f0:	00f50463          	beq	a0,a5,273f8 <dwarf::to_string[abi:cxx11](dwarf::section_type)+0x29e>
   273f4:	91cef0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   273f8:	8522                	c.mv	a0,s0
   273fa:	af6ef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000273fe <dwarf::to_string[abi:cxx11](dwarf::value::type)>:
{
   273fe:	715d                	c.addi16sp	sp,-80
   27400:	e486                	c.sdsp	ra,72(sp)
   27402:	e0a2                	c.sdsp	s0,64(sp)
   27404:	fc26                	c.sdsp	s1,56(sp)
   27406:	f84a                	c.sdsp	s2,48(sp)
   27408:	f44e                	c.sdsp	s3,40(sp)
   2740a:	f052                	c.sdsp	s4,32(sp)
   2740c:	842a                	c.mv	s0,a0
        switch (v) {
   2740e:	47b5                	c.li	a5,13
   27410:	20b7ef63          	bltu	a5,a1,2762e <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x230>
   27414:	058a                	c.slli	a1,0x2
   27416:	00009717          	auipc	a4,0x9
   2741a:	17670713          	addi	a4,a4,374 # 3058c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20c4>
   2741e:	95ba                	c.add	a1,a4
   27420:	419c                	c.lw	a5,0(a1)
   27422:	97ba                	c.add	a5,a4
   27424:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27426:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2742a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2742c:	4681                	c.li	a3,0
   2742e:	00008617          	auipc	a2,0x8
   27432:	94e60613          	addi	a2,a2,-1714 # 2ed7c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b4>
   27436:	00008597          	auipc	a1,0x8
   2743a:	93258593          	addi	a1,a1,-1742 # 2ed68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8a0>
   2743e:	00012317          	auipc	t1,0x12
   27442:	eca33303          	ld	t1,-310(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27446:	9302                	c.jalr	t1
}
   27448:	8522                	c.mv	a0,s0
   2744a:	60a6                	c.ldsp	ra,72(sp)
   2744c:	6406                	c.ldsp	s0,64(sp)
   2744e:	74e2                	c.ldsp	s1,56(sp)
   27450:	7942                	c.ldsp	s2,48(sp)
   27452:	79a2                	c.ldsp	s3,40(sp)
   27454:	7a02                	c.ldsp	s4,32(sp)
   27456:	6161                	c.addi16sp	sp,80
   27458:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2745a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2745e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27460:	4681                	c.li	a3,0
   27462:	00008617          	auipc	a2,0x8
   27466:	93260613          	addi	a2,a2,-1742 # 2ed94 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8cc>
   2746a:	00008597          	auipc	a1,0x8
   2746e:	91658593          	addi	a1,a1,-1770 # 2ed80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8b8>
   27472:	00012317          	auipc	t1,0x12
   27476:	e9633303          	ld	t1,-362(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2747a:	9302                	c.jalr	t1
   2747c:	b7f1                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2747e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27482:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27484:	4681                	c.li	a3,0
   27486:	00008617          	auipc	a2,0x8
   2748a:	92460613          	addi	a2,a2,-1756 # 2edaa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e2>
   2748e:	00008597          	auipc	a1,0x8
   27492:	90a58593          	addi	a1,a1,-1782 # 2ed98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8d0>
   27496:	00012317          	auipc	t1,0x12
   2749a:	e7233303          	ld	t1,-398(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2749e:	9302                	c.jalr	t1
   274a0:	b765                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   274a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   274a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   274a8:	4681                	c.li	a3,0
   274aa:	00008617          	auipc	a2,0x8
   274ae:	91b60613          	addi	a2,a2,-1765 # 2edc5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8fd>
   274b2:	00008597          	auipc	a1,0x8
   274b6:	8fe58593          	addi	a1,a1,-1794 # 2edb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x8e8>
   274ba:	00012317          	auipc	t1,0x12
   274be:	e4e33303          	ld	t1,-434(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   274c2:	9302                	c.jalr	t1
   274c4:	b751                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   274c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   274ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   274cc:	4681                	c.li	a3,0
   274ce:	00008617          	auipc	a2,0x8
   274d2:	91060613          	addi	a2,a2,-1776 # 2edde <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x916>
   274d6:	00008597          	auipc	a1,0x8
   274da:	8f258593          	addi	a1,a1,-1806 # 2edc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x900>
   274de:	00012317          	auipc	t1,0x12
   274e2:	e2a33303          	ld	t1,-470(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   274e6:	9302                	c.jalr	t1
   274e8:	b785                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   274ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   274ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   274f0:	4681                	c.li	a3,0
   274f2:	00008617          	auipc	a2,0x8
   274f6:	90460613          	addi	a2,a2,-1788 # 2edf6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x92e>
   274fa:	00008597          	auipc	a1,0x8
   274fe:	8e658593          	addi	a1,a1,-1818 # 2ede0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x918>
   27502:	00012317          	auipc	t1,0x12
   27506:	e0633303          	ld	t1,-506(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2750a:	9302                	c.jalr	t1
   2750c:	bf35                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2750e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27512:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27514:	4681                	c.li	a3,0
   27516:	00008617          	auipc	a2,0x8
   2751a:	8f660613          	addi	a2,a2,-1802 # 2ee0c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x944>
   2751e:	00008597          	auipc	a1,0x8
   27522:	8da58593          	addi	a1,a1,-1830 # 2edf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x930>
   27526:	00012317          	auipc	t1,0x12
   2752a:	de233303          	ld	t1,-542(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2752e:	9302                	c.jalr	t1
   27530:	bf21                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27532:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27536:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27538:	4681                	c.li	a3,0
   2753a:	00008617          	auipc	a2,0x8
   2753e:	8e760613          	addi	a2,a2,-1817 # 2ee21 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x959>
   27542:	00008597          	auipc	a1,0x8
   27546:	8ce58593          	addi	a1,a1,-1842 # 2ee10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x948>
   2754a:	00012317          	auipc	t1,0x12
   2754e:	dbe33303          	ld	t1,-578(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27552:	9302                	c.jalr	t1
   27554:	bdd5                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27556:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2755a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2755c:	4681                	c.li	a3,0
   2755e:	00008617          	auipc	a2,0x8
   27562:	8db60613          	addi	a2,a2,-1829 # 2ee39 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x971>
   27566:	00008597          	auipc	a1,0x8
   2756a:	8c258593          	addi	a1,a1,-1854 # 2ee28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x960>
   2756e:	00012317          	auipc	t1,0x12
   27572:	d9a33303          	ld	t1,-614(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27576:	9302                	c.jalr	t1
   27578:	bdc1                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2757a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2757e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27580:	4681                	c.li	a3,0
   27582:	00008617          	auipc	a2,0x8
   27586:	8d260613          	addi	a2,a2,-1838 # 2ee54 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98c>
   2758a:	00008597          	auipc	a1,0x8
   2758e:	8b658593          	addi	a1,a1,-1866 # 2ee40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x978>
   27592:	00012317          	auipc	t1,0x12
   27596:	d7633303          	ld	t1,-650(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2759a:	9302                	c.jalr	t1
   2759c:	b575                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2759e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   275a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   275a4:	4681                	c.li	a3,0
   275a6:	00008617          	auipc	a2,0x8
   275aa:	8c260613          	addi	a2,a2,-1854 # 2ee68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a0>
   275ae:	00008597          	auipc	a1,0x8
   275b2:	8aa58593          	addi	a1,a1,-1878 # 2ee58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x990>
   275b6:	00012317          	auipc	t1,0x12
   275ba:	d5233303          	ld	t1,-686(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   275be:	9302                	c.jalr	t1
   275c0:	b561                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   275c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   275c6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   275c8:	4681                	c.li	a3,0
   275ca:	00008617          	auipc	a2,0x8
   275ce:	8bc60613          	addi	a2,a2,-1860 # 2ee86 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9be>
   275d2:	00008597          	auipc	a1,0x8
   275d6:	89e58593          	addi	a1,a1,-1890 # 2ee70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9a8>
   275da:	00012317          	auipc	t1,0x12
   275de:	d2e33303          	ld	t1,-722(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   275e2:	9302                	c.jalr	t1
   275e4:	b595                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   275e6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   275ea:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   275ec:	4681                	c.li	a3,0
   275ee:	00008617          	auipc	a2,0x8
   275f2:	8b060613          	addi	a2,a2,-1872 # 2ee9e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d6>
   275f6:	00008597          	auipc	a1,0x8
   275fa:	89258593          	addi	a1,a1,-1902 # 2ee88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9c0>
   275fe:	00012317          	auipc	t1,0x12
   27602:	d0a33303          	ld	t1,-758(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27606:	9302                	c.jalr	t1
   27608:	b581                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2760a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2760e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27610:	4681                	c.li	a3,0
   27612:	00008617          	auipc	a2,0x8
   27616:	8a160613          	addi	a2,a2,-1887 # 2eeb3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9eb>
   2761a:	00008597          	auipc	a1,0x8
   2761e:	88658593          	addi	a1,a1,-1914 # 2eea0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9d8>
   27622:	00012317          	auipc	t1,0x12
   27626:	ce633303          	ld	t1,-794(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2762a:	9302                	c.jalr	t1
   2762c:	bd31                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
    const bool __neg = __val < 0;
   2762e:	01f5d99b          	srliw	s3,a1,0x1f
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   27632:	0005891b          	addiw	s2,a1,0
   27636:	0405cb63          	blt	a1,zero,2768c <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x28e>
    const auto __len = __detail::__to_chars_len(__uval);
   2763a:	45a9                	c.li	a1,10
   2763c:	854a                	c.mv	a0,s2
   2763e:	00012317          	auipc	t1,0x12
   27642:	e5a33303          	ld	t1,-422(t1) # 39498 <unsigned int std::__detail::__to_chars_len<unsigned int>(unsigned int, int)@@Base+0x1528a>
   27646:	9302                	c.jalr	t1
   27648:	00050a1b          	addiw	s4,a0,0
	: allocator_type(__a), _M_p(__dat) { }
   2764c:	081c                	c.addi4spn	a5,sp,16
   2764e:	e03e                	c.sdsp	a5,0(sp)
    string __str(__neg + __len, '-');
   27650:	00a985bb          	addw	a1,s3,a0
      { _M_construct(__n, __c); }
   27654:	02d00613          	addi	a2,zero,45
   27658:	1582                	c.slli	a1,0x20
   2765a:	9181                	c.srli	a1,0x20
   2765c:	848a                	c.mv	s1,sp
   2765e:	8526                	c.mv	a0,s1
   27660:	f11ee0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
   27664:	864a                	c.mv	a2,s2
   27666:	85d2                	c.mv	a1,s4
   27668:	6502                	c.ldsp	a0,0(sp)
   2766a:	954e                	c.add	a0,s3
   2766c:	00012317          	auipc	t1,0x12
   27670:	e4c33303          	ld	t1,-436(t1) # 394b8 <void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@@Base+0x15238>
   27674:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27676:	4735                	c.li	a4,13
   27678:	00008697          	auipc	a3,0x8
   2767c:	84068693          	addi	a3,a3,-1984 # 2eeb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x9f0>
   27680:	4601                	c.li	a2,0
   27682:	4581                	c.li	a1,0
   27684:	8526                	c.mv	a0,s1
   27686:	fdbee0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2768a:	a021                	c.j	27692 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x294>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2768c:	40b0093b          	subw	s2,zero,a1
   27690:	b76d                	c.j	2763a <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x23c>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27692:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27694:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27698:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2769a:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2769c:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   276a0:	03278463          	beq	a5,s2,276c8 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ca>
      { _M_dataplus._M_p = __p; }
   276a4:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   276a6:	689c                	c.ld	a5,16(s1)
   276a8:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   276aa:	649c                	c.ld	a5,8(s1)
   276ac:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   276ae:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   276b2:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   276b6:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   276ba:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   276bc:	081c                	c.addi4spn	a5,sp,16
   276be:	d8f505e3          	beq	a0,a5,27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   276c2:	e4fee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   276c6:	b349                	c.j	27448 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   276c8:	6490                	c.ld	a2,8(s1)
   276ca:	0605                	c.addi	a2,1
	if (__n == 0)
   276cc:	de79                	c.beqz	a2,276aa <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ac>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   276ce:	85ca                	c.mv	a1,s2
   276d0:	ee1ee0ef          	jal	ra,165b0 <memcpy@plt>
   276d4:	bfd9                	c.j	276aa <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2ac>
      { return _M_dataplus._M_p; }
   276d6:	842a                	c.mv	s0,a0
   276d8:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   276da:	081c                	c.addi4spn	a5,sp,16
   276dc:	00f50463          	beq	a0,a5,276e4 <dwarf::to_string[abi:cxx11](dwarf::value::type)+0x2e6>
   276e0:	e31ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   276e4:	8522                	c.mv	a0,s0
   276e6:	80aef0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000276ea <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)>:
{
   276ea:	7139                	c.addi16sp	sp,-64
   276ec:	fc06                	c.sdsp	ra,56(sp)
   276ee:	f822                	c.sdsp	s0,48(sp)
   276f0:	f426                	c.sdsp	s1,40(sp)
   276f2:	f04a                	c.sdsp	s2,32(sp)
   276f4:	842a                	c.mv	s0,a0
        switch (v) {
   276f6:	47c1                	c.li	a5,16
   276f8:	26b7e263          	bltu	a5,a1,2795c <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x272>
   276fc:	00259793          	slli	a5,a1,0x2
   27700:	00009717          	auipc	a4,0x9
   27704:	ec470713          	addi	a4,a4,-316 # 305c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x20fc>
   27708:	97ba                	c.add	a5,a4
   2770a:	439c                	c.lw	a5,0(a5)
   2770c:	97ba                	c.add	a5,a4
   2770e:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27710:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27714:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27716:	4681                	c.li	a3,0
   27718:	00007617          	auipc	a2,0x7
   2771c:	7be60613          	addi	a2,a2,1982 # 2eed6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa0e>
   27720:	00007597          	auipc	a1,0x7
   27724:	7a858593          	addi	a1,a1,1960 # 2eec8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa00>
   27728:	00012317          	auipc	t1,0x12
   2772c:	be033303          	ld	t1,-1056(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27730:	9302                	c.jalr	t1
}
   27732:	8522                	c.mv	a0,s0
   27734:	70e2                	c.ldsp	ra,56(sp)
   27736:	7442                	c.ldsp	s0,48(sp)
   27738:	74a2                	c.ldsp	s1,40(sp)
   2773a:	7902                	c.ldsp	s2,32(sp)
   2773c:	6121                	c.addi16sp	sp,64
   2773e:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27740:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27744:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27746:	4681                	c.li	a3,0
   27748:	00007617          	auipc	a2,0x7
   2774c:	79e60613          	addi	a2,a2,1950 # 2eee6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa1e>
   27750:	00007597          	auipc	a1,0x7
   27754:	78858593          	addi	a1,a1,1928 # 2eed8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa10>
   27758:	00012317          	auipc	t1,0x12
   2775c:	bb033303          	ld	t1,-1104(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27760:	9302                	c.jalr	t1
   27762:	bfc1                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27764:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27768:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2776a:	4681                	c.li	a3,0
   2776c:	00007617          	auipc	a2,0x7
   27770:	79060613          	addi	a2,a2,1936 # 2eefc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa34>
   27774:	00007597          	auipc	a1,0x7
   27778:	77458593          	addi	a1,a1,1908 # 2eee8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa20>
   2777c:	00012317          	auipc	t1,0x12
   27780:	b8c33303          	ld	t1,-1140(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27784:	9302                	c.jalr	t1
   27786:	b775                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27788:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2778c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2778e:	4681                	c.li	a3,0
   27790:	00007617          	auipc	a2,0x7
   27794:	77c60613          	addi	a2,a2,1916 # 2ef0c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa44>
   27798:	00007597          	auipc	a1,0x7
   2779c:	76858593          	addi	a1,a1,1896 # 2ef00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa38>
   277a0:	00012317          	auipc	t1,0x12
   277a4:	b6833303          	ld	t1,-1176(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   277a8:	9302                	c.jalr	t1
   277aa:	b761                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   277ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   277b0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   277b2:	4681                	c.li	a3,0
   277b4:	00007617          	auipc	a2,0x7
   277b8:	76960613          	addi	a2,a2,1897 # 2ef1d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa55>
   277bc:	00007597          	auipc	a1,0x7
   277c0:	75458593          	addi	a1,a1,1876 # 2ef10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa48>
   277c4:	00012317          	auipc	t1,0x12
   277c8:	b4433303          	ld	t1,-1212(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   277cc:	9302                	c.jalr	t1
   277ce:	b795                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   277d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   277d4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   277d6:	4681                	c.li	a3,0
   277d8:	00007617          	auipc	a2,0x7
   277dc:	75a60613          	addi	a2,a2,1882 # 2ef32 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa6a>
   277e0:	00007597          	auipc	a1,0x7
   277e4:	74058593          	addi	a1,a1,1856 # 2ef20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa58>
   277e8:	00012317          	auipc	t1,0x12
   277ec:	b2033303          	ld	t1,-1248(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   277f0:	9302                	c.jalr	t1
   277f2:	b781                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   277f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   277f8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   277fa:	4681                	c.li	a3,0
   277fc:	00007617          	auipc	a2,0x7
   27800:	74b60613          	addi	a2,a2,1867 # 2ef47 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa7f>
   27804:	00007597          	auipc	a1,0x7
   27808:	73458593          	addi	a1,a1,1844 # 2ef38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa70>
   2780c:	00012317          	auipc	t1,0x12
   27810:	afc33303          	ld	t1,-1284(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27814:	9302                	c.jalr	t1
   27816:	bf31                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27818:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2781c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2781e:	4681                	c.li	a3,0
   27820:	00007617          	auipc	a2,0x7
   27824:	73c60613          	addi	a2,a2,1852 # 2ef5c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa94>
   27828:	00007597          	auipc	a1,0x7
   2782c:	72058593          	addi	a1,a1,1824 # 2ef48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa80>
   27830:	00012317          	auipc	t1,0x12
   27834:	ad833303          	ld	t1,-1320(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27838:	9302                	c.jalr	t1
   2783a:	bde5                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2783c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27840:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27842:	4681                	c.li	a3,0
   27844:	00007617          	auipc	a2,0x7
   27848:	73260613          	addi	a2,a2,1842 # 2ef76 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaae>
   2784c:	00007597          	auipc	a1,0x7
   27850:	71458593          	addi	a1,a1,1812 # 2ef60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xa98>
   27854:	00012317          	auipc	t1,0x12
   27858:	ab433303          	ld	t1,-1356(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2785c:	9302                	c.jalr	t1
   2785e:	bdd1                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27860:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27864:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27866:	4681                	c.li	a3,0
   27868:	00007617          	auipc	a2,0x7
   2786c:	72560613          	addi	a2,a2,1829 # 2ef8d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac5>
   27870:	00007597          	auipc	a1,0x7
   27874:	70858593          	addi	a1,a1,1800 # 2ef78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xab0>
   27878:	00012317          	auipc	t1,0x12
   2787c:	a9033303          	ld	t1,-1392(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27880:	9302                	c.jalr	t1
   27882:	bd45                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27884:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27888:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2788a:	4681                	c.li	a3,0
   2788c:	00007617          	auipc	a2,0x7
   27890:	71960613          	addi	a2,a2,1817 # 2efa5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xadd>
   27894:	00007597          	auipc	a1,0x7
   27898:	6fc58593          	addi	a1,a1,1788 # 2ef90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xac8>
   2789c:	00012317          	auipc	t1,0x12
   278a0:	a6c33303          	ld	t1,-1428(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   278a4:	9302                	c.jalr	t1
   278a6:	b571                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   278a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   278ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   278ae:	4681                	c.li	a3,0
   278b0:	00007617          	auipc	a2,0x7
   278b4:	70560613          	addi	a2,a2,1797 # 2efb5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaed>
   278b8:	00007597          	auipc	a1,0x7
   278bc:	6f058593          	addi	a1,a1,1776 # 2efa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xae0>
   278c0:	00012317          	auipc	t1,0x12
   278c4:	a4833303          	ld	t1,-1464(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   278c8:	9302                	c.jalr	t1
   278ca:	b5a5                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   278cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   278d0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   278d2:	4681                	c.li	a3,0
   278d4:	00007617          	auipc	a2,0x7
   278d8:	6f760613          	addi	a2,a2,1783 # 2efcb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb03>
   278dc:	00007597          	auipc	a1,0x7
   278e0:	6dc58593          	addi	a1,a1,1756 # 2efb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xaf0>
   278e4:	00012317          	auipc	t1,0x12
   278e8:	a2433303          	ld	t1,-1500(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   278ec:	9302                	c.jalr	t1
   278ee:	b591                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   278f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   278f4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   278f6:	4681                	c.li	a3,0
   278f8:	00007617          	auipc	a2,0x7
   278fc:	6ed60613          	addi	a2,a2,1773 # 2efe5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb1d>
   27900:	00007597          	auipc	a1,0x7
   27904:	6d058593          	addi	a1,a1,1744 # 2efd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb08>
   27908:	00012317          	auipc	t1,0x12
   2790c:	a0033303          	ld	t1,-1536(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27910:	9302                	c.jalr	t1
   27912:	b505                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27914:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27918:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2791a:	4681                	c.li	a3,0
   2791c:	00007617          	auipc	a2,0x7
   27920:	6e060613          	addi	a2,a2,1760 # 2effc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb34>
   27924:	00007597          	auipc	a1,0x7
   27928:	6c458593          	addi	a1,a1,1732 # 2efe8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb20>
   2792c:	00012317          	auipc	t1,0x12
   27930:	9dc33303          	ld	t1,-1572(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27934:	9302                	c.jalr	t1
   27936:	bbf5                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27938:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2793c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2793e:	4681                	c.li	a3,0
   27940:	00007617          	auipc	a2,0x7
   27944:	6ca60613          	addi	a2,a2,1738 # 2f00a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb42>
   27948:	00007597          	auipc	a1,0x7
   2794c:	6b858593          	addi	a1,a1,1720 # 2f000 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb38>
   27950:	00012317          	auipc	t1,0x12
   27954:	9b833303          	ld	t1,-1608(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27958:	9302                	c.jalr	t1
   2795a:	bbe1                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
        return "(DW_ATE)0x" + to_hex((int)v);
   2795c:	848a                	c.mv	s1,sp
   2795e:	8526                	c.mv	a0,s1
   27960:	00012317          	auipc	t1,0x12
   27964:	ab833303          	ld	t1,-1352(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   27968:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2796a:	4729                	c.li	a4,10
   2796c:	00007697          	auipc	a3,0x7
   27970:	6a468693          	addi	a3,a3,1700 # 2f010 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb48>
   27974:	4601                	c.li	a2,0
   27976:	4581                	c.li	a1,0
   27978:	8526                	c.mv	a0,s1
   2797a:	ce7ee0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2797e:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27980:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27984:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27986:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27988:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2798c:	03278463          	beq	a5,s2,279b4 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ca>
      { _M_dataplus._M_p = __p; }
   27990:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27992:	689c                	c.ld	a5,16(s1)
   27994:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27996:	649c                	c.ld	a5,8(s1)
   27998:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2799a:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2799e:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   279a2:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   279a6:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   279a8:	081c                	c.addi4spn	a5,sp,16
   279aa:	d8f504e3          	beq	a0,a5,27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   279ae:	b63ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   279b2:	b341                	c.j	27732 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   279b4:	6490                	c.ld	a2,8(s1)
   279b6:	0605                	c.addi	a2,1
	if (__n == 0)
   279b8:	de79                	c.beqz	a2,27996 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ac>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   279ba:	85ca                	c.mv	a1,s2
   279bc:	bf5ee0ef          	jal	ra,165b0 <memcpy@plt>
   279c0:	bfd9                	c.j	27996 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2ac>
      { return _M_dataplus._M_p; }
   279c2:	842a                	c.mv	s0,a0
   279c4:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   279c6:	081c                	c.addi4spn	a5,sp,16
   279c8:	00f50463          	beq	a0,a5,279d0 <dwarf::to_string[abi:cxx11](dwarf::DW_ATE)+0x2e6>
   279cc:	b45ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   279d0:	8522                	c.mv	a0,s0
   279d2:	d1fee0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

00000000000279d6 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)>:
{
   279d6:	7139                	c.addi16sp	sp,-64
   279d8:	fc06                	c.sdsp	ra,56(sp)
   279da:	f822                	c.sdsp	s0,48(sp)
   279dc:	f426                	c.sdsp	s1,40(sp)
   279de:	f04a                	c.sdsp	s2,32(sp)
   279e0:	842a                	c.mv	s0,a0
        switch (v) {
   279e2:	47d1                	c.li	a5,20
   279e4:	2eb7ea63          	bltu	a5,a1,27cd8 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x302>
   279e8:	00259793          	slli	a5,a1,0x2
   279ec:	00009717          	auipc	a4,0x9
   279f0:	c1c70713          	addi	a4,a4,-996 # 30608 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2140>
   279f4:	97ba                	c.add	a5,a4
   279f6:	439c                	c.lw	a5,0(a5)
   279f8:	97ba                	c.add	a5,a4
   279fa:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   279fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27a00:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27a02:	4681                	c.li	a3,0
   27a04:	00007617          	auipc	a2,0x7
   27a08:	62760613          	addi	a2,a2,1575 # 2f02b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb63>
   27a0c:	00007597          	auipc	a1,0x7
   27a10:	61458593          	addi	a1,a1,1556 # 2f020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb58>
   27a14:	00012317          	auipc	t1,0x12
   27a18:	8f433303          	ld	t1,-1804(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27a1c:	9302                	c.jalr	t1
}
   27a1e:	8522                	c.mv	a0,s0
   27a20:	70e2                	c.ldsp	ra,56(sp)
   27a22:	7442                	c.ldsp	s0,48(sp)
   27a24:	74a2                	c.ldsp	s1,40(sp)
   27a26:	7902                	c.ldsp	s2,32(sp)
   27a28:	6121                	c.addi16sp	sp,64
   27a2a:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a2c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27a30:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27a32:	4681                	c.li	a3,0
   27a34:	00007617          	auipc	a2,0x7
   27a38:	60560613          	addi	a2,a2,1541 # 2f039 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb71>
   27a3c:	00007597          	auipc	a1,0x7
   27a40:	5f458593          	addi	a1,a1,1524 # 2f030 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb68>
   27a44:	00012317          	auipc	t1,0x12
   27a48:	8c433303          	ld	t1,-1852(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27a4c:	9302                	c.jalr	t1
   27a4e:	bfc1                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a50:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27a54:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27a56:	4681                	c.li	a3,0
   27a58:	00007617          	auipc	a2,0x7
   27a5c:	5f560613          	addi	a2,a2,1525 # 2f04d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb85>
   27a60:	00007597          	auipc	a1,0x7
   27a64:	5e058593          	addi	a1,a1,1504 # 2f040 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb78>
   27a68:	00012317          	auipc	t1,0x12
   27a6c:	8a033303          	ld	t1,-1888(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27a70:	9302                	c.jalr	t1
   27a72:	b775                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a74:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27a78:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27a7a:	4681                	c.li	a3,0
   27a7c:	00007617          	auipc	a2,0x7
   27a80:	5e760613          	addi	a2,a2,1511 # 2f063 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb9b>
   27a84:	00007597          	auipc	a1,0x7
   27a88:	5cc58593          	addi	a1,a1,1484 # 2f050 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xb88>
   27a8c:	00012317          	auipc	t1,0x12
   27a90:	87c33303          	ld	t1,-1924(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27a94:	9302                	c.jalr	t1
   27a96:	b761                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27a98:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27a9c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27a9e:	4681                	c.li	a3,0
   27aa0:	00007617          	auipc	a2,0x7
   27aa4:	5d760613          	addi	a2,a2,1495 # 2f077 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbaf>
   27aa8:	00007597          	auipc	a1,0x7
   27aac:	5c058593          	addi	a1,a1,1472 # 2f068 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xba0>
   27ab0:	00012317          	auipc	t1,0x12
   27ab4:	85833303          	ld	t1,-1960(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27ab8:	9302                	c.jalr	t1
   27aba:	b795                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27abc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ac0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ac2:	4681                	c.li	a3,0
   27ac4:	00007617          	auipc	a2,0x7
   27ac8:	5c360613          	addi	a2,a2,1475 # 2f087 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbbf>
   27acc:	00007597          	auipc	a1,0x7
   27ad0:	5ac58593          	addi	a1,a1,1452 # 2f078 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbb0>
   27ad4:	00012317          	auipc	t1,0x12
   27ad8:	83433303          	ld	t1,-1996(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27adc:	9302                	c.jalr	t1
   27ade:	b781                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27ae0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ae4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ae6:	4681                	c.li	a3,0
   27ae8:	00007617          	auipc	a2,0x7
   27aec:	5b160613          	addi	a2,a2,1457 # 2f099 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd1>
   27af0:	00007597          	auipc	a1,0x7
   27af4:	59858593          	addi	a1,a1,1432 # 2f088 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbc0>
   27af8:	00012317          	auipc	t1,0x12
   27afc:	81033303          	ld	t1,-2032(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27b00:	9302                	c.jalr	t1
   27b02:	bf31                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b04:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b08:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b0a:	4681                	c.li	a3,0
   27b0c:	00007617          	auipc	a2,0x7
   27b10:	5a560613          	addi	a2,a2,1445 # 2f0b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   27b14:	00007597          	auipc	a1,0x7
   27b18:	58c58593          	addi	a1,a1,1420 # 2f0a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbd8>
   27b1c:	00011317          	auipc	t1,0x11
   27b20:	7ec33303          	ld	t1,2028(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27b24:	9302                	c.jalr	t1
   27b26:	bde5                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b28:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b2c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b2e:	4681                	c.li	a3,0
   27b30:	00007617          	auipc	a2,0x7
   27b34:	59860613          	addi	a2,a2,1432 # 2f0c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc00>
   27b38:	00007597          	auipc	a1,0x7
   27b3c:	58058593          	addi	a1,a1,1408 # 2f0b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbf0>
   27b40:	00011317          	auipc	t1,0x11
   27b44:	7c833303          	ld	t1,1992(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27b48:	9302                	c.jalr	t1
   27b4a:	bdd1                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b4c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b50:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b52:	4681                	c.li	a3,0
   27b54:	00007617          	auipc	a2,0x7
   27b58:	58b60613          	addi	a2,a2,1419 # 2f0df <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc17>
   27b5c:	00007597          	auipc	a1,0x7
   27b60:	57458593          	addi	a1,a1,1396 # 2f0d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc08>
   27b64:	00011317          	auipc	t1,0x11
   27b68:	7a433303          	ld	t1,1956(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27b6c:	9302                	c.jalr	t1
   27b6e:	bd45                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b76:	4681                	c.li	a3,0
   27b78:	00007617          	auipc	a2,0x7
   27b7c:	57460613          	addi	a2,a2,1396 # 2f0ec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc24>
   27b80:	00007597          	auipc	a1,0x7
   27b84:	56058593          	addi	a1,a1,1376 # 2f0e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc18>
   27b88:	00011317          	auipc	t1,0x11
   27b8c:	78033303          	ld	t1,1920(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27b90:	9302                	c.jalr	t1
   27b92:	b571                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27b94:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27b98:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27b9a:	4681                	c.li	a3,0
   27b9c:	00007617          	auipc	a2,0x7
   27ba0:	55f60613          	addi	a2,a2,1375 # 2f0fb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc33>
   27ba4:	00007597          	auipc	a1,0x7
   27ba8:	54c58593          	addi	a1,a1,1356 # 2f0f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc28>
   27bac:	00011317          	auipc	t1,0x11
   27bb0:	75c33303          	ld	t1,1884(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27bb4:	9302                	c.jalr	t1
   27bb6:	b5a5                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27bb8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27bbc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27bbe:	4681                	c.li	a3,0
   27bc0:	00007617          	auipc	a2,0x7
   27bc4:	54d60613          	addi	a2,a2,1357 # 2f10d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc45>
   27bc8:	00007597          	auipc	a1,0x7
   27bcc:	53858593          	addi	a1,a1,1336 # 2f100 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc38>
   27bd0:	00011317          	auipc	t1,0x11
   27bd4:	73833303          	ld	t1,1848(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27bd8:	9302                	c.jalr	t1
   27bda:	b591                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27bdc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27be0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27be2:	4681                	c.li	a3,0
   27be4:	00007617          	auipc	a2,0x7
   27be8:	53d60613          	addi	a2,a2,1341 # 2f121 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc59>
   27bec:	00007597          	auipc	a1,0x7
   27bf0:	52458593          	addi	a1,a1,1316 # 2f110 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc48>
   27bf4:	00011317          	auipc	t1,0x11
   27bf8:	71433303          	ld	t1,1812(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27bfc:	9302                	c.jalr	t1
   27bfe:	b505                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c00:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c04:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c06:	4681                	c.li	a3,0
   27c08:	00007617          	auipc	a2,0x7
   27c0c:	52b60613          	addi	a2,a2,1323 # 2f133 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc6b>
   27c10:	00007597          	auipc	a1,0x7
   27c14:	51858593          	addi	a1,a1,1304 # 2f128 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc60>
   27c18:	00011317          	auipc	t1,0x11
   27c1c:	6f033303          	ld	t1,1776(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27c20:	9302                	c.jalr	t1
   27c22:	bbf5                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c28:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c2a:	4681                	c.li	a3,0
   27c2c:	00007617          	auipc	a2,0x7
   27c30:	51860613          	addi	a2,a2,1304 # 2f144 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc7c>
   27c34:	00007597          	auipc	a1,0x7
   27c38:	50458593          	addi	a1,a1,1284 # 2f138 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc70>
   27c3c:	00011317          	auipc	t1,0x11
   27c40:	6cc33303          	ld	t1,1740(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27c44:	9302                	c.jalr	t1
   27c46:	bbe1                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c48:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c4c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c4e:	4681                	c.li	a3,0
   27c50:	00007617          	auipc	a2,0x7
   27c54:	50e60613          	addi	a2,a2,1294 # 2f15e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc96>
   27c58:	00007597          	auipc	a1,0x7
   27c5c:	4f058593          	addi	a1,a1,1264 # 2f148 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc80>
   27c60:	00011317          	auipc	t1,0x11
   27c64:	6a833303          	ld	t1,1704(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27c68:	9302                	c.jalr	t1
   27c6a:	bb55                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c6c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c70:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c72:	4681                	c.li	a3,0
   27c74:	00007617          	auipc	a2,0x7
   27c78:	4f760613          	addi	a2,a2,1271 # 2f16b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca3>
   27c7c:	00007597          	auipc	a1,0x7
   27c80:	4e458593          	addi	a1,a1,1252 # 2f160 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xc98>
   27c84:	00011317          	auipc	t1,0x11
   27c88:	68433303          	ld	t1,1668(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27c8c:	9302                	c.jalr	t1
   27c8e:	bb41                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27c90:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27c94:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27c96:	4681                	c.li	a3,0
   27c98:	00007617          	auipc	a2,0x7
   27c9c:	4e160613          	addi	a2,a2,1249 # 2f179 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb1>
   27ca0:	00007597          	auipc	a1,0x7
   27ca4:	4d058593          	addi	a1,a1,1232 # 2f170 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xca8>
   27ca8:	00011317          	auipc	t1,0x11
   27cac:	66033303          	ld	t1,1632(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27cb0:	9302                	c.jalr	t1
   27cb2:	b3b5                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27cb4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27cb8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27cba:	4681                	c.li	a3,0
   27cbc:	00007617          	auipc	a2,0x7
   27cc0:	4d260613          	addi	a2,a2,1234 # 2f18e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc6>
   27cc4:	00007597          	auipc	a1,0x7
   27cc8:	4bc58593          	addi	a1,a1,1212 # 2f180 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcb8>
   27ccc:	00011317          	auipc	t1,0x11
   27cd0:	63c33303          	ld	t1,1596(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27cd4:	9302                	c.jalr	t1
   27cd6:	b3a1                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
        return "(DW_LANG)0x" + to_hex((int)v);
   27cd8:	848a                	c.mv	s1,sp
   27cda:	8526                	c.mv	a0,s1
   27cdc:	00011317          	auipc	t1,0x11
   27ce0:	73c33303          	ld	t1,1852(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   27ce4:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   27ce6:	472d                	c.li	a4,11
   27ce8:	00007697          	auipc	a3,0x7
   27cec:	4a868693          	addi	a3,a3,1192 # 2f190 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcc8>
   27cf0:	4601                	c.li	a2,0
   27cf2:	4581                	c.li	a1,0
   27cf4:	8526                	c.mv	a0,s1
   27cf6:	96bee0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   27cfa:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27cfc:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   27d00:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   27d02:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   27d04:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   27d08:	03278463          	beq	a5,s2,27d30 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x35a>
      { _M_dataplus._M_p = __p; }
   27d0c:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   27d0e:	689c                	c.ld	a5,16(s1)
   27d10:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   27d12:	649c                	c.ld	a5,8(s1)
   27d14:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   27d16:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   27d1a:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   27d1e:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   27d22:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27d24:	081c                	c.addi4spn	a5,sp,16
   27d26:	cef50ce3          	beq	a0,a5,27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   27d2a:	fe6ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   27d2e:	b9c5                	c.j	27a1e <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x48>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   27d30:	6490                	c.ld	a2,8(s1)
   27d32:	0605                	c.addi	a2,1
	if (__n == 0)
   27d34:	de79                	c.beqz	a2,27d12 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x33c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   27d36:	85ca                	c.mv	a1,s2
   27d38:	879ee0ef          	jal	ra,165b0 <memcpy@plt>
   27d3c:	bfd9                	c.j	27d12 <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x33c>
      { return _M_dataplus._M_p; }
   27d3e:	842a                	c.mv	s0,a0
   27d40:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   27d42:	081c                	c.addi4spn	a5,sp,16
   27d44:	00f50463          	beq	a0,a5,27d4c <dwarf::to_string[abi:cxx11](dwarf::DW_LANG)+0x376>
   27d48:	fc8ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   27d4c:	8522                	c.mv	a0,s0
   27d4e:	9a3ee0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000027d52 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)>:
{
   27d52:	7139                	c.addi16sp	sp,-64
   27d54:	fc06                	c.sdsp	ra,56(sp)
   27d56:	f822                	c.sdsp	s0,48(sp)
   27d58:	f426                	c.sdsp	s1,40(sp)
   27d5a:	f04a                	c.sdsp	s2,32(sp)
   27d5c:	842a                	c.mv	s0,a0
        switch (v) {
   27d5e:	02000793          	addi	a5,zero,32
   27d62:	3ab7e463          	bltu	a5,a1,2810a <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3b8>
   27d66:	00259793          	slli	a5,a1,0x2
   27d6a:	00009717          	auipc	a4,0x9
   27d6e:	8f270713          	addi	a4,a4,-1806 # 3065c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2194>
   27d72:	97ba                	c.add	a5,a4
   27d74:	439c                	c.lw	a5,0(a5)
   27d76:	97ba                	c.add	a5,a4
   27d78:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27d7a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27d7e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27d80:	4681                	c.li	a3,0
   27d82:	00007617          	auipc	a2,0x7
   27d86:	42a60613          	addi	a2,a2,1066 # 2f1ac <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce4>
   27d8a:	00007597          	auipc	a1,0x7
   27d8e:	41658593          	addi	a1,a1,1046 # 2f1a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcd8>
   27d92:	00011317          	auipc	t1,0x11
   27d96:	57633303          	ld	t1,1398(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27d9a:	9302                	c.jalr	t1
}
   27d9c:	8522                	c.mv	a0,s0
   27d9e:	70e2                	c.ldsp	ra,56(sp)
   27da0:	7442                	c.ldsp	s0,48(sp)
   27da2:	74a2                	c.ldsp	s1,40(sp)
   27da4:	7902                	c.ldsp	s2,32(sp)
   27da6:	6121                	c.addi16sp	sp,64
   27da8:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27daa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27dae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27db0:	4681                	c.li	a3,0
   27db2:	00007617          	auipc	a2,0x7
   27db6:	40c60613          	addi	a2,a2,1036 # 2f1be <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf6>
   27dba:	00007597          	auipc	a1,0x7
   27dbe:	3f658593          	addi	a1,a1,1014 # 2f1b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xce8>
   27dc2:	00011317          	auipc	t1,0x11
   27dc6:	54633303          	ld	t1,1350(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27dca:	9302                	c.jalr	t1
   27dcc:	bfc1                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27dce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27dd2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27dd4:	4681                	c.li	a3,0
   27dd6:	00007617          	auipc	a2,0x7
   27dda:	3f860613          	addi	a2,a2,1016 # 2f1ce <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd06>
   27dde:	00007597          	auipc	a1,0x7
   27de2:	3e258593          	addi	a1,a1,994 # 2f1c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xcf8>
   27de6:	00011317          	auipc	t1,0x11
   27dea:	52233303          	ld	t1,1314(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27dee:	9302                	c.jalr	t1
   27df0:	b775                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27df2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27df6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27df8:	4681                	c.li	a3,0
   27dfa:	00007617          	auipc	a2,0x7
   27dfe:	3e360613          	addi	a2,a2,995 # 2f1dd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd15>
   27e02:	00007597          	auipc	a1,0x7
   27e06:	3ce58593          	addi	a1,a1,974 # 2f1d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd08>
   27e0a:	00011317          	auipc	t1,0x11
   27e0e:	4fe33303          	ld	t1,1278(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27e12:	9302                	c.jalr	t1
   27e14:	b761                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e16:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e1a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e1c:	4681                	c.li	a3,0
   27e1e:	00007617          	auipc	a2,0x7
   27e22:	3cf60613          	addi	a2,a2,975 # 2f1ed <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd25>
   27e26:	00007597          	auipc	a1,0x7
   27e2a:	3ba58593          	addi	a1,a1,954 # 2f1e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd18>
   27e2e:	00011317          	auipc	t1,0x11
   27e32:	4da33303          	ld	t1,1242(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27e36:	9302                	c.jalr	t1
   27e38:	b795                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e3a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e3e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e40:	4681                	c.li	a3,0
   27e42:	00007617          	auipc	a2,0x7
   27e46:	3bb60613          	addi	a2,a2,955 # 2f1fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd35>
   27e4a:	00007597          	auipc	a1,0x7
   27e4e:	3a658593          	addi	a1,a1,934 # 2f1f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd28>
   27e52:	00011317          	auipc	t1,0x11
   27e56:	4b633303          	ld	t1,1206(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27e5a:	9302                	c.jalr	t1
   27e5c:	b781                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e5e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e62:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e64:	4681                	c.li	a3,0
   27e66:	00007617          	auipc	a2,0x7
   27e6a:	3a860613          	addi	a2,a2,936 # 2f20e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd46>
   27e6e:	00007597          	auipc	a1,0x7
   27e72:	39258593          	addi	a1,a1,914 # 2f200 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd38>
   27e76:	00011317          	auipc	t1,0x11
   27e7a:	49233303          	ld	t1,1170(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27e7e:	9302                	c.jalr	t1
   27e80:	bf31                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27e82:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27e86:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27e88:	4681                	c.li	a3,0
   27e8a:	00007617          	auipc	a2,0x7
   27e8e:	39360613          	addi	a2,a2,915 # 2f21d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd55>
   27e92:	00007597          	auipc	a1,0x7
   27e96:	37e58593          	addi	a1,a1,894 # 2f210 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd48>
   27e9a:	00011317          	auipc	t1,0x11
   27e9e:	46e33303          	ld	t1,1134(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27ea2:	9302                	c.jalr	t1
   27ea4:	bde5                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27ea6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27eaa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27eac:	4681                	c.li	a3,0
   27eae:	00007617          	auipc	a2,0x7
   27eb2:	38060613          	addi	a2,a2,896 # 2f22e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd66>
   27eb6:	00007597          	auipc	a1,0x7
   27eba:	36a58593          	addi	a1,a1,874 # 2f220 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd58>
   27ebe:	00011317          	auipc	t1,0x11
   27ec2:	44a33303          	ld	t1,1098(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27ec6:	9302                	c.jalr	t1
   27ec8:	bdd1                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27eca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ece:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ed0:	4681                	c.li	a3,0
   27ed2:	00007617          	auipc	a2,0x7
   27ed6:	36b60613          	addi	a2,a2,875 # 2f23d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd75>
   27eda:	00007597          	auipc	a1,0x7
   27ede:	35658593          	addi	a1,a1,854 # 2f230 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd68>
   27ee2:	00011317          	auipc	t1,0x11
   27ee6:	42633303          	ld	t1,1062(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27eea:	9302                	c.jalr	t1
   27eec:	bd45                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27eee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27ef2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ef4:	4681                	c.li	a3,0
   27ef6:	00007617          	auipc	a2,0x7
   27efa:	35660613          	addi	a2,a2,854 # 2f24c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd84>
   27efe:	00007597          	auipc	a1,0x7
   27f02:	34258593          	addi	a1,a1,834 # 2f240 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd78>
   27f06:	00011317          	auipc	t1,0x11
   27f0a:	40233303          	ld	t1,1026(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27f0e:	9302                	c.jalr	t1
   27f10:	b571                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f12:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f16:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f18:	4681                	c.li	a3,0
   27f1a:	00007617          	auipc	a2,0x7
   27f1e:	34360613          	addi	a2,a2,835 # 2f25d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd95>
   27f22:	00007597          	auipc	a1,0x7
   27f26:	32e58593          	addi	a1,a1,814 # 2f250 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd88>
   27f2a:	00011317          	auipc	t1,0x11
   27f2e:	3de33303          	ld	t1,990(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27f32:	9302                	c.jalr	t1
   27f34:	b5a5                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f36:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f3a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f3c:	4681                	c.li	a3,0
   27f3e:	00007617          	auipc	a2,0x7
   27f42:	32e60613          	addi	a2,a2,814 # 2f26c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda4>
   27f46:	00007597          	auipc	a1,0x7
   27f4a:	31a58593          	addi	a1,a1,794 # 2f260 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xd98>
   27f4e:	00011317          	auipc	t1,0x11
   27f52:	3ba33303          	ld	t1,954(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27f56:	9302                	c.jalr	t1
   27f58:	b591                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f5a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f5e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f60:	4681                	c.li	a3,0
   27f62:	00007617          	auipc	a2,0x7
   27f66:	31b60613          	addi	a2,a2,795 # 2f27d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb5>
   27f6a:	00007597          	auipc	a1,0x7
   27f6e:	30658593          	addi	a1,a1,774 # 2f270 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xda8>
   27f72:	00011317          	auipc	t1,0x11
   27f76:	39633303          	ld	t1,918(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27f7a:	9302                	c.jalr	t1
   27f7c:	b505                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27f7e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27f82:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27f84:	4681                	c.li	a3,0
   27f86:	00007617          	auipc	a2,0x7
   27f8a:	30a60613          	addi	a2,a2,778 # 2f290 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdc8>
   27f8e:	00007597          	auipc	a1,0x7
   27f92:	2f258593          	addi	a1,a1,754 # 2f280 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdb8>
   27f96:	00011317          	auipc	t1,0x11
   27f9a:	37233303          	ld	t1,882(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27f9e:	9302                	c.jalr	t1
   27fa0:	bbf5                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27fa2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27fa6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27fa8:	4681                	c.li	a3,0
   27faa:	00007617          	auipc	a2,0x7
   27fae:	2fa60613          	addi	a2,a2,762 # 2f2a4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xddc>
   27fb2:	00007597          	auipc	a1,0x7
   27fb6:	2e658593          	addi	a1,a1,742 # 2f298 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdd0>
   27fba:	00011317          	auipc	t1,0x11
   27fbe:	34e33303          	ld	t1,846(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27fc2:	9302                	c.jalr	t1
   27fc4:	bbe1                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27fc6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27fca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27fcc:	4681                	c.li	a3,0
   27fce:	00007617          	auipc	a2,0x7
   27fd2:	2e660613          	addi	a2,a2,742 # 2f2b4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdec>
   27fd6:	00007597          	auipc	a1,0x7
   27fda:	2d258593          	addi	a1,a1,722 # 2f2a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xde0>
   27fde:	00011317          	auipc	t1,0x11
   27fe2:	32a33303          	ld	t1,810(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   27fe6:	9302                	c.jalr	t1
   27fe8:	bb55                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   27fea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   27fee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   27ff0:	4681                	c.li	a3,0
   27ff2:	00007617          	auipc	a2,0x7
   27ff6:	2d260613          	addi	a2,a2,722 # 2f2c4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdfc>
   27ffa:	00007597          	auipc	a1,0x7
   27ffe:	2be58593          	addi	a1,a1,702 # 2f2b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xdf0>
   28002:	00011317          	auipc	t1,0x11
   28006:	30633303          	ld	t1,774(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2800a:	9302                	c.jalr	t1
   2800c:	bb41                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2800e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28012:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28014:	4681                	c.li	a3,0
   28016:	00007617          	auipc	a2,0x7
   2801a:	2be60613          	addi	a2,a2,702 # 2f2d4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe0c>
   2801e:	00007597          	auipc	a1,0x7
   28022:	2aa58593          	addi	a1,a1,682 # 2f2c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe00>
   28026:	00011317          	auipc	t1,0x11
   2802a:	2e233303          	ld	t1,738(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2802e:	9302                	c.jalr	t1
   28030:	b3b5                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28032:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28036:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28038:	4681                	c.li	a3,0
   2803a:	00007617          	auipc	a2,0x7
   2803e:	2af60613          	addi	a2,a2,687 # 2f2e9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe21>
   28042:	00007597          	auipc	a1,0x7
   28046:	29658593          	addi	a1,a1,662 # 2f2d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe10>
   2804a:	00011317          	auipc	t1,0x11
   2804e:	2be33303          	ld	t1,702(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28052:	9302                	c.jalr	t1
   28054:	b3a1                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28056:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2805a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2805c:	4681                	c.li	a3,0
   2805e:	00007617          	auipc	a2,0x7
   28062:	2a260613          	addi	a2,a2,674 # 2f300 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe38>
   28066:	00007597          	auipc	a1,0x7
   2806a:	28a58593          	addi	a1,a1,650 # 2f2f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe28>
   2806e:	00011317          	auipc	t1,0x11
   28072:	29a33303          	ld	t1,666(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28076:	9302                	c.jalr	t1
   28078:	b315                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2807a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2807e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28080:	4681                	c.li	a3,0
   28082:	00007617          	auipc	a2,0x7
   28086:	29860613          	addi	a2,a2,664 # 2f31a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe52>
   2808a:	00007597          	auipc	a1,0x7
   2808e:	27e58593          	addi	a1,a1,638 # 2f308 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe40>
   28092:	00011317          	auipc	t1,0x11
   28096:	27633303          	ld	t1,630(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2809a:	9302                	c.jalr	t1
   2809c:	b301                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2809e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280a4:	4681                	c.li	a3,0
   280a6:	00007617          	auipc	a2,0x7
   280aa:	28960613          	addi	a2,a2,649 # 2f32f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe67>
   280ae:	00007597          	auipc	a1,0x7
   280b2:	27258593          	addi	a1,a1,626 # 2f320 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe58>
   280b6:	00011317          	auipc	t1,0x11
   280ba:	25233303          	ld	t1,594(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   280be:	9302                	c.jalr	t1
   280c0:	b9f1                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280c6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280c8:	4681                	c.li	a3,0
   280ca:	00007617          	auipc	a2,0x7
   280ce:	27a60613          	addi	a2,a2,634 # 2f344 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe7c>
   280d2:	00007597          	auipc	a1,0x7
   280d6:	25e58593          	addi	a1,a1,606 # 2f330 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe68>
   280da:	00011317          	auipc	t1,0x11
   280de:	22e33303          	ld	t1,558(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   280e2:	9302                	c.jalr	t1
   280e4:	b965                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   280e6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   280ea:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   280ec:	4681                	c.li	a3,0
   280ee:	00007617          	auipc	a2,0x7
   280f2:	26a60613          	addi	a2,a2,618 # 2f358 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe90>
   280f6:	00007597          	auipc	a1,0x7
   280fa:	25258593          	addi	a1,a1,594 # 2f348 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe80>
   280fe:	00011317          	auipc	t1,0x11
   28102:	20a33303          	ld	t1,522(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28106:	9302                	c.jalr	t1
   28108:	b951                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
        return "(DW_FORM)0x" + to_hex((int)v);
   2810a:	848a                	c.mv	s1,sp
   2810c:	8526                	c.mv	a0,s1
   2810e:	00011317          	auipc	t1,0x11
   28112:	30a33303          	ld	t1,778(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   28116:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28118:	472d                	c.li	a4,11
   2811a:	00007697          	auipc	a3,0x7
   2811e:	24668693          	addi	a3,a3,582 # 2f360 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xe98>
   28122:	4601                	c.li	a2,0
   28124:	4581                	c.li	a1,0
   28126:	8526                	c.mv	a0,s1
   28128:	d38ee0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2812c:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2812e:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28132:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   28134:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   28136:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2813a:	03278463          	beq	a5,s2,28162 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x410>
      { _M_dataplus._M_p = __p; }
   2813e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   28140:	689c                	c.ld	a5,16(s1)
   28142:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   28144:	649c                	c.ld	a5,8(s1)
   28146:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   28148:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2814c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   28150:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   28154:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28156:	081c                	c.addi4spn	a5,sp,16
   28158:	c4f502e3          	beq	a0,a5,27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2815c:	bb4ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28160:	b935                	c.j	27d9c <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   28162:	6490                	c.ld	a2,8(s1)
   28164:	0605                	c.addi	a2,1
	if (__n == 0)
   28166:	de79                	c.beqz	a2,28144 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3f2>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28168:	85ca                	c.mv	a1,s2
   2816a:	c46ee0ef          	jal	ra,165b0 <memcpy@plt>
   2816e:	bfd9                	c.j	28144 <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x3f2>
      { return _M_dataplus._M_p; }
   28170:	842a                	c.mv	s0,a0
   28172:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28174:	081c                	c.addi4spn	a5,sp,16
   28176:	00f50463          	beq	a0,a5,2817e <dwarf::to_string[abi:cxx11](dwarf::DW_FORM)+0x42c>
   2817a:	b96ee0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2817e:	8522                	c.mv	a0,s0
   28180:	d70ee0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000028184 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)>:
{
   28184:	7139                	c.addi16sp	sp,-64
   28186:	fc06                	c.sdsp	ra,56(sp)
   28188:	f822                	c.sdsp	s0,48(sp)
   2818a:	f426                	c.sdsp	s1,40(sp)
   2818c:	f04a                	c.sdsp	s2,32(sp)
   2818e:	842a                	c.mv	s0,a0
        switch (v) {
   28190:	04300793          	addi	a5,zero,67
   28194:	08b7ede3          	bltu	a5,a1,28a2e <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8aa>
   28198:	00259793          	slli	a5,a1,0x2
   2819c:	00008717          	auipc	a4,0x8
   281a0:	54470713          	addi	a4,a4,1348 # 306e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2218>
   281a4:	97ba                	c.add	a5,a4
   281a6:	439c                	c.lw	a5,0(a5)
   281a8:	97ba                	c.add	a5,a4
   281aa:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   281ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   281b0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   281b2:	4681                	c.li	a3,0
   281b4:	00007617          	auipc	a2,0x7
   281b8:	1cd60613          	addi	a2,a2,461 # 2f381 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeb9>
   281bc:	00007597          	auipc	a1,0x7
   281c0:	1b458593          	addi	a1,a1,436 # 2f370 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xea8>
   281c4:	00011317          	auipc	t1,0x11
   281c8:	14433303          	ld	t1,324(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   281cc:	9302                	c.jalr	t1
}
   281ce:	8522                	c.mv	a0,s0
   281d0:	70e2                	c.ldsp	ra,56(sp)
   281d2:	7442                	c.ldsp	s0,48(sp)
   281d4:	74a2                	c.ldsp	s1,40(sp)
   281d6:	7902                	c.ldsp	s2,32(sp)
   281d8:	6121                	c.addi16sp	sp,64
   281da:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   281dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   281e0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   281e2:	4681                	c.li	a3,0
   281e4:	00007617          	auipc	a2,0x7
   281e8:	1b560613          	addi	a2,a2,437 # 2f399 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed1>
   281ec:	00007597          	auipc	a1,0x7
   281f0:	19c58593          	addi	a1,a1,412 # 2f388 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xec0>
   281f4:	00011317          	auipc	t1,0x11
   281f8:	11433303          	ld	t1,276(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   281fc:	9302                	c.jalr	t1
   281fe:	bfc1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28200:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28204:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28206:	4681                	c.li	a3,0
   28208:	00007617          	auipc	a2,0x7
   2820c:	1aa60613          	addi	a2,a2,426 # 2f3b2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xeea>
   28210:	00007597          	auipc	a1,0x7
   28214:	19058593          	addi	a1,a1,400 # 2f3a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xed8>
   28218:	00011317          	auipc	t1,0x11
   2821c:	0f033303          	ld	t1,240(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28220:	9302                	c.jalr	t1
   28222:	b775                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28224:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28228:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2822a:	4681                	c.li	a3,0
   2822c:	00007617          	auipc	a2,0x7
   28230:	1a360613          	addi	a2,a2,419 # 2f3cf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf07>
   28234:	00007597          	auipc	a1,0x7
   28238:	18458593          	addi	a1,a1,388 # 2f3b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xef0>
   2823c:	00011317          	auipc	t1,0x11
   28240:	0cc33303          	ld	t1,204(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28244:	9302                	c.jalr	t1
   28246:	b761                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28248:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2824c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2824e:	4681                	c.li	a3,0
   28250:	00007617          	auipc	a2,0x7
   28254:	19760613          	addi	a2,a2,407 # 2f3e7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf1f>
   28258:	00007597          	auipc	a1,0x7
   2825c:	17858593          	addi	a1,a1,376 # 2f3d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf08>
   28260:	00011317          	auipc	t1,0x11
   28264:	0a833303          	ld	t1,168(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28268:	9302                	c.jalr	t1
   2826a:	b795                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2826c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28270:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28272:	4681                	c.li	a3,0
   28274:	00007617          	auipc	a2,0x7
   28278:	18f60613          	addi	a2,a2,399 # 2f403 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf3b>
   2827c:	00007597          	auipc	a1,0x7
   28280:	16c58593          	addi	a1,a1,364 # 2f3e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf20>
   28284:	00011317          	auipc	t1,0x11
   28288:	08433303          	ld	t1,132(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2828c:	9302                	c.jalr	t1
   2828e:	b781                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28290:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28294:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28296:	4681                	c.li	a3,0
   28298:	00007617          	auipc	a2,0x7
   2829c:	17c60613          	addi	a2,a2,380 # 2f414 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf4c>
   282a0:	00007597          	auipc	a1,0x7
   282a4:	16858593          	addi	a1,a1,360 # 2f408 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf40>
   282a8:	00011317          	auipc	t1,0x11
   282ac:	06033303          	ld	t1,96(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   282b0:	9302                	c.jalr	t1
   282b2:	bf31                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   282b8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   282ba:	4681                	c.li	a3,0
   282bc:	00007617          	auipc	a2,0x7
   282c0:	17060613          	addi	a2,a2,368 # 2f42c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf64>
   282c4:	00007597          	auipc	a1,0x7
   282c8:	15458593          	addi	a1,a1,340 # 2f418 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf50>
   282cc:	00011317          	auipc	t1,0x11
   282d0:	03c33303          	ld	t1,60(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   282d4:	9302                	c.jalr	t1
   282d6:	bde5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   282dc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   282de:	4681                	c.li	a3,0
   282e0:	00007617          	auipc	a2,0x7
   282e4:	15d60613          	addi	a2,a2,349 # 2f43d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf75>
   282e8:	00007597          	auipc	a1,0x7
   282ec:	14858593          	addi	a1,a1,328 # 2f430 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf68>
   282f0:	00011317          	auipc	t1,0x11
   282f4:	01833303          	ld	t1,24(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   282f8:	9302                	c.jalr	t1
   282fa:	bdd1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   282fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28300:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28302:	4681                	c.li	a3,0
   28304:	00007617          	auipc	a2,0x7
   28308:	14f60613          	addi	a2,a2,335 # 2f453 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf8b>
   2830c:	00007597          	auipc	a1,0x7
   28310:	13458593          	addi	a1,a1,308 # 2f440 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf78>
   28314:	00011317          	auipc	t1,0x11
   28318:	ff433303          	ld	t1,-12(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2831c:	9302                	c.jalr	t1
   2831e:	bd45                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28320:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28324:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28326:	4681                	c.li	a3,0
   28328:	00007617          	auipc	a2,0x7
   2832c:	14560613          	addi	a2,a2,325 # 2f46d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa5>
   28330:	00007597          	auipc	a1,0x7
   28334:	12858593          	addi	a1,a1,296 # 2f458 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xf90>
   28338:	00011317          	auipc	t1,0x11
   2833c:	fd033303          	ld	t1,-48(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28340:	9302                	c.jalr	t1
   28342:	b571                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28344:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28348:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2834a:	4681                	c.li	a3,0
   2834c:	00007617          	auipc	a2,0x7
   28350:	13760613          	addi	a2,a2,311 # 2f483 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfbb>
   28354:	00007597          	auipc	a1,0x7
   28358:	11c58593          	addi	a1,a1,284 # 2f470 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfa8>
   2835c:	00011317          	auipc	t1,0x11
   28360:	fac33303          	ld	t1,-84(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28364:	9302                	c.jalr	t1
   28366:	b5a5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28368:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2836c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2836e:	4681                	c.li	a3,0
   28370:	00007617          	auipc	a2,0x7
   28374:	12a60613          	addi	a2,a2,298 # 2f49a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd2>
   28378:	00007597          	auipc	a1,0x7
   2837c:	11058593          	addi	a1,a1,272 # 2f488 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfc0>
   28380:	00011317          	auipc	t1,0x11
   28384:	f8833303          	ld	t1,-120(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28388:	9302                	c.jalr	t1
   2838a:	b591                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2838c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28390:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28392:	4681                	c.li	a3,0
   28394:	00007617          	auipc	a2,0x7
   28398:	12160613          	addi	a2,a2,289 # 2f4b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfed>
   2839c:	00007597          	auipc	a1,0x7
   283a0:	10458593          	addi	a1,a1,260 # 2f4a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xfd8>
   283a4:	00011317          	auipc	t1,0x11
   283a8:	f6433303          	ld	t1,-156(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   283ac:	9302                	c.jalr	t1
   283ae:	b505                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283b0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283b4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   283b6:	4681                	c.li	a3,0
   283b8:	00007617          	auipc	a2,0x7
   283bc:	11660613          	addi	a2,a2,278 # 2f4ce <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1006>
   283c0:	00007597          	auipc	a1,0x7
   283c4:	0f858593          	addi	a1,a1,248 # 2f4b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xff0>
   283c8:	00011317          	auipc	t1,0x11
   283cc:	f4033303          	ld	t1,-192(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   283d0:	9302                	c.jalr	t1
   283d2:	bbf5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283d4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283d8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   283da:	4681                	c.li	a3,0
   283dc:	00007617          	auipc	a2,0x7
   283e0:	10260613          	addi	a2,a2,258 # 2f4de <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1016>
   283e4:	00007597          	auipc	a1,0x7
   283e8:	0ec58593          	addi	a1,a1,236 # 2f4d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1008>
   283ec:	00011317          	auipc	t1,0x11
   283f0:	f1c33303          	ld	t1,-228(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   283f4:	9302                	c.jalr	t1
   283f6:	bbe1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   283f8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   283fc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   283fe:	4681                	c.li	a3,0
   28400:	00007617          	auipc	a2,0x7
   28404:	0f160613          	addi	a2,a2,241 # 2f4f1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1029>
   28408:	00007597          	auipc	a1,0x7
   2840c:	0d858593          	addi	a1,a1,216 # 2f4e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1018>
   28410:	00011317          	auipc	t1,0x11
   28414:	ef833303          	ld	t1,-264(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28418:	9302                	c.jalr	t1
   2841a:	bb55                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2841c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28420:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28422:	4681                	c.li	a3,0
   28424:	00007617          	auipc	a2,0x7
   28428:	0f160613          	addi	a2,a2,241 # 2f515 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x104d>
   2842c:	00007597          	auipc	a1,0x7
   28430:	0cc58593          	addi	a1,a1,204 # 2f4f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1030>
   28434:	00011317          	auipc	t1,0x11
   28438:	ed433303          	ld	t1,-300(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2843c:	9302                	c.jalr	t1
   2843e:	bb41                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28440:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28444:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28446:	4681                	c.li	a3,0
   28448:	00007617          	auipc	a2,0x7
   2844c:	0de60613          	addi	a2,a2,222 # 2f526 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x105e>
   28450:	00007597          	auipc	a1,0x7
   28454:	0c858593          	addi	a1,a1,200 # 2f518 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1050>
   28458:	00011317          	auipc	t1,0x11
   2845c:	eb033303          	ld	t1,-336(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28460:	9302                	c.jalr	t1
   28462:	b3b5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28464:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28468:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2846a:	4681                	c.li	a3,0
   2846c:	00007617          	auipc	a2,0x7
   28470:	0cf60613          	addi	a2,a2,207 # 2f53b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1073>
   28474:	00007597          	auipc	a1,0x7
   28478:	0b458593          	addi	a1,a1,180 # 2f528 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1060>
   2847c:	00011317          	auipc	t1,0x11
   28480:	e8c33303          	ld	t1,-372(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28484:	9302                	c.jalr	t1
   28486:	b3a1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28488:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2848c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2848e:	4681                	c.li	a3,0
   28490:	00007617          	auipc	a2,0x7
   28494:	0c760613          	addi	a2,a2,199 # 2f557 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x108f>
   28498:	00007597          	auipc	a1,0x7
   2849c:	0a858593          	addi	a1,a1,168 # 2f540 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1078>
   284a0:	00011317          	auipc	t1,0x11
   284a4:	e6833303          	ld	t1,-408(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   284a8:	9302                	c.jalr	t1
   284aa:	b315                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284ac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284b0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284b2:	4681                	c.li	a3,0
   284b4:	00007617          	auipc	a2,0x7
   284b8:	0b660613          	addi	a2,a2,182 # 2f56a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a2>
   284bc:	00007597          	auipc	a1,0x7
   284c0:	09c58593          	addi	a1,a1,156 # 2f558 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1090>
   284c4:	00011317          	auipc	t1,0x11
   284c8:	e4433303          	ld	t1,-444(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   284cc:	9302                	c.jalr	t1
   284ce:	b301                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284d4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284d6:	4681                	c.li	a3,0
   284d8:	00007617          	auipc	a2,0x7
   284dc:	0b160613          	addi	a2,a2,177 # 2f589 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c1>
   284e0:	00007597          	auipc	a1,0x7
   284e4:	09058593          	addi	a1,a1,144 # 2f570 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10a8>
   284e8:	00011317          	auipc	t1,0x11
   284ec:	e2033303          	ld	t1,-480(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   284f0:	9302                	c.jalr	t1
   284f2:	b9f1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   284f4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   284f8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   284fa:	4681                	c.li	a3,0
   284fc:	00007617          	auipc	a2,0x7
   28500:	0a160613          	addi	a2,a2,161 # 2f59d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d5>
   28504:	00007597          	auipc	a1,0x7
   28508:	08c58593          	addi	a1,a1,140 # 2f590 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10c8>
   2850c:	00011317          	auipc	t1,0x11
   28510:	dfc33303          	ld	t1,-516(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28514:	9302                	c.jalr	t1
   28516:	b965                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28518:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2851c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2851e:	4681                	c.li	a3,0
   28520:	00007617          	auipc	a2,0x7
   28524:	09960613          	addi	a2,a2,153 # 2f5b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f1>
   28528:	00007597          	auipc	a1,0x7
   2852c:	07858593          	addi	a1,a1,120 # 2f5a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10d8>
   28530:	00011317          	auipc	t1,0x11
   28534:	dd833303          	ld	t1,-552(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28538:	9302                	c.jalr	t1
   2853a:	b951                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2853c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28540:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28542:	4681                	c.li	a3,0
   28544:	00007617          	auipc	a2,0x7
   28548:	08b60613          	addi	a2,a2,139 # 2f5cf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1107>
   2854c:	00007597          	auipc	a1,0x7
   28550:	07458593          	addi	a1,a1,116 # 2f5c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x10f8>
   28554:	00011317          	auipc	t1,0x11
   28558:	db433303          	ld	t1,-588(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2855c:	9302                	c.jalr	t1
   2855e:	b985                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28560:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28564:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28566:	4681                	c.li	a3,0
   28568:	00007617          	auipc	a2,0x7
   2856c:	07c60613          	addi	a2,a2,124 # 2f5e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x111c>
   28570:	00007597          	auipc	a1,0x7
   28574:	06058593          	addi	a1,a1,96 # 2f5d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1108>
   28578:	00011317          	auipc	t1,0x11
   2857c:	d9033303          	ld	t1,-624(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28580:	9302                	c.jalr	t1
   28582:	b1b1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28584:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28588:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2858a:	4681                	c.li	a3,0
   2858c:	00007617          	auipc	a2,0x7
   28590:	06c60613          	addi	a2,a2,108 # 2f5f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1130>
   28594:	00007597          	auipc	a1,0x7
   28598:	05458593          	addi	a1,a1,84 # 2f5e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1120>
   2859c:	00011317          	auipc	t1,0x11
   285a0:	d6c33303          	ld	t1,-660(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   285a4:	9302                	c.jalr	t1
   285a6:	b125                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285ae:	4681                	c.li	a3,0
   285b0:	00007617          	auipc	a2,0x7
   285b4:	06960613          	addi	a2,a2,105 # 2f619 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1151>
   285b8:	00007597          	auipc	a1,0x7
   285bc:	04858593          	addi	a1,a1,72 # 2f600 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1138>
   285c0:	00011317          	auipc	t1,0x11
   285c4:	d4833303          	ld	t1,-696(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   285c8:	9302                	c.jalr	t1
   285ca:	b111                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285cc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285d0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285d2:	4681                	c.li	a3,0
   285d4:	00007617          	auipc	a2,0x7
   285d8:	05c60613          	addi	a2,a2,92 # 2f630 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1168>
   285dc:	00007597          	auipc	a1,0x7
   285e0:	04458593          	addi	a1,a1,68 # 2f620 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1158>
   285e4:	00011317          	auipc	t1,0x11
   285e8:	d2433303          	ld	t1,-732(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   285ec:	9302                	c.jalr	t1
   285ee:	b6c5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   285f0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   285f4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   285f6:	4681                	c.li	a3,0
   285f8:	00007617          	auipc	a2,0x7
   285fc:	05260613          	addi	a2,a2,82 # 2f64a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1182>
   28600:	00007597          	auipc	a1,0x7
   28604:	03858593          	addi	a1,a1,56 # 2f638 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1170>
   28608:	00011317          	auipc	t1,0x11
   2860c:	d0033303          	ld	t1,-768(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28610:	9302                	c.jalr	t1
   28612:	be75                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28614:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28618:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2861a:	4681                	c.li	a3,0
   2861c:	00007617          	auipc	a2,0x7
   28620:	04560613          	addi	a2,a2,69 # 2f661 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1199>
   28624:	00007597          	auipc	a1,0x7
   28628:	02c58593          	addi	a1,a1,44 # 2f650 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1188>
   2862c:	00011317          	auipc	t1,0x11
   28630:	cdc33303          	ld	t1,-804(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28634:	9302                	c.jalr	t1
   28636:	be61                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28638:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2863c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2863e:	4681                	c.li	a3,0
   28640:	00007617          	auipc	a2,0x7
   28644:	03760613          	addi	a2,a2,55 # 2f677 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11af>
   28648:	00007597          	auipc	a1,0x7
   2864c:	02058593          	addi	a1,a1,32 # 2f668 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11a0>
   28650:	00011317          	auipc	t1,0x11
   28654:	cb833303          	ld	t1,-840(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28658:	9302                	c.jalr	t1
   2865a:	be95                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2865c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28660:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28662:	4681                	c.li	a3,0
   28664:	00007617          	auipc	a2,0x7
   28668:	02560613          	addi	a2,a2,37 # 2f689 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c1>
   2866c:	00007597          	auipc	a1,0x7
   28670:	00c58593          	addi	a1,a1,12 # 2f678 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11b0>
   28674:	00011317          	auipc	t1,0x11
   28678:	c9433303          	ld	t1,-876(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2867c:	9302                	c.jalr	t1
   2867e:	be81                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28680:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28684:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28686:	4681                	c.li	a3,0
   28688:	00007617          	auipc	a2,0x7
   2868c:	01860613          	addi	a2,a2,24 # 2f6a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11d8>
   28690:	00007597          	auipc	a1,0x7
   28694:	00058593          	addi	a1,a1,0 # 2f690 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11c8>
   28698:	00011317          	auipc	t1,0x11
   2869c:	c7033303          	ld	t1,-912(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   286a0:	9302                	c.jalr	t1
   286a2:	b635                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286a4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286a8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286aa:	4681                	c.li	a3,0
   286ac:	00007617          	auipc	a2,0x7
   286b0:	00960613          	addi	a2,a2,9 # 2f6b5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ed>
   286b4:	00007597          	auipc	a1,0x7
   286b8:	ff458593          	addi	a1,a1,-12 # 2f6a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11e0>
   286bc:	00011317          	auipc	t1,0x11
   286c0:	c4c33303          	ld	t1,-948(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   286c4:	9302                	c.jalr	t1
   286c6:	b621                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286cc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286ce:	4681                	c.li	a3,0
   286d0:	00007617          	auipc	a2,0x7
   286d4:	ff760613          	addi	a2,a2,-9 # 2f6c7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11ff>
   286d8:	00007597          	auipc	a1,0x7
   286dc:	fe058593          	addi	a1,a1,-32 # 2f6b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x11f0>
   286e0:	00011317          	auipc	t1,0x11
   286e4:	c2833303          	ld	t1,-984(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   286e8:	9302                	c.jalr	t1
   286ea:	b4d5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   286ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   286f0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   286f2:	4681                	c.li	a3,0
   286f4:	00007617          	auipc	a2,0x7
   286f8:	fe860613          	addi	a2,a2,-24 # 2f6dc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1214>
   286fc:	00007597          	auipc	a1,0x7
   28700:	fcc58593          	addi	a1,a1,-52 # 2f6c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1200>
   28704:	00011317          	auipc	t1,0x11
   28708:	c0433303          	ld	t1,-1020(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2870c:	9302                	c.jalr	t1
   2870e:	b4c1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28710:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28714:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28716:	4681                	c.li	a3,0
   28718:	00007617          	auipc	a2,0x7
   2871c:	fda60613          	addi	a2,a2,-38 # 2f6f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x122a>
   28720:	00007597          	auipc	a1,0x7
   28724:	fc058593          	addi	a1,a1,-64 # 2f6e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1218>
   28728:	00011317          	auipc	t1,0x11
   2872c:	be033303          	ld	t1,-1056(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28730:	9302                	c.jalr	t1
   28732:	bc71                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28734:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28738:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2873a:	4681                	c.li	a3,0
   2873c:	00007617          	auipc	a2,0x7
   28740:	fcd60613          	addi	a2,a2,-51 # 2f709 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1241>
   28744:	00007597          	auipc	a1,0x7
   28748:	fb458593          	addi	a1,a1,-76 # 2f6f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1230>
   2874c:	00011317          	auipc	t1,0x11
   28750:	bbc33303          	ld	t1,-1092(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28754:	9302                	c.jalr	t1
   28756:	bca5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28758:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2875c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2875e:	4681                	c.li	a3,0
   28760:	00007617          	auipc	a2,0x7
   28764:	fce60613          	addi	a2,a2,-50 # 2f72e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1266>
   28768:	00007597          	auipc	a1,0x7
   2876c:	fa858593          	addi	a1,a1,-88 # 2f710 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1248>
   28770:	00011317          	auipc	t1,0x11
   28774:	b9833303          	ld	t1,-1128(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28778:	9302                	c.jalr	t1
   2877a:	bc91                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2877c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28780:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28782:	4681                	c.li	a3,0
   28784:	00007617          	auipc	a2,0x7
   28788:	fcb60613          	addi	a2,a2,-53 # 2f74f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1287>
   2878c:	00007597          	auipc	a1,0x7
   28790:	fa458593          	addi	a1,a1,-92 # 2f730 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1268>
   28794:	00011317          	auipc	t1,0x11
   28798:	b7433303          	ld	t1,-1164(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2879c:	9302                	c.jalr	t1
   2879e:	bc05                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287a4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287a6:	4681                	c.li	a3,0
   287a8:	00007617          	auipc	a2,0x7
   287ac:	fba60613          	addi	a2,a2,-70 # 2f762 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x129a>
   287b0:	00007597          	auipc	a1,0x7
   287b4:	fa058593          	addi	a1,a1,-96 # 2f750 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1288>
   287b8:	00011317          	auipc	t1,0x11
   287bc:	b5033303          	ld	t1,-1200(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   287c0:	9302                	c.jalr	t1
   287c2:	b431                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287c8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287ca:	4681                	c.li	a3,0
   287cc:	00007617          	auipc	a2,0x7
   287d0:	fac60613          	addi	a2,a2,-84 # 2f778 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b0>
   287d4:	00007597          	auipc	a1,0x7
   287d8:	f9458593          	addi	a1,a1,-108 # 2f768 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12a0>
   287dc:	00011317          	auipc	t1,0x11
   287e0:	b2c33303          	ld	t1,-1236(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   287e4:	9302                	c.jalr	t1
   287e6:	b2e5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   287e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   287ec:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   287ee:	4681                	c.li	a3,0
   287f0:	00007617          	auipc	a2,0x7
   287f4:	fa360613          	addi	a2,a2,-93 # 2f793 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12cb>
   287f8:	00007597          	auipc	a1,0x7
   287fc:	f8858593          	addi	a1,a1,-120 # 2f780 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12b8>
   28800:	00011317          	auipc	t1,0x11
   28804:	b0833303          	ld	t1,-1272(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28808:	9302                	c.jalr	t1
   2880a:	b2d1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2880c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28810:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28812:	4681                	c.li	a3,0
   28814:	00007617          	auipc	a2,0x7
   28818:	f9360613          	addi	a2,a2,-109 # 2f7a7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12df>
   2881c:	00007597          	auipc	a1,0x7
   28820:	f7c58593          	addi	a1,a1,-132 # 2f798 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12d0>
   28824:	00011317          	auipc	t1,0x11
   28828:	ae433303          	ld	t1,-1308(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2882c:	9302                	c.jalr	t1
   2882e:	b245                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28830:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28834:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28836:	4681                	c.li	a3,0
   28838:	00007617          	auipc	a2,0x7
   2883c:	f8460613          	addi	a2,a2,-124 # 2f7bc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f4>
   28840:	00007597          	auipc	a1,0x7
   28844:	f6858593          	addi	a1,a1,-152 # 2f7a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12e0>
   28848:	00011317          	auipc	t1,0x11
   2884c:	ac033303          	ld	t1,-1344(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28850:	9302                	c.jalr	t1
   28852:	bab5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28854:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28858:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2885a:	4681                	c.li	a3,0
   2885c:	00007617          	auipc	a2,0x7
   28860:	f7a60613          	addi	a2,a2,-134 # 2f7d6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x130e>
   28864:	00007597          	auipc	a1,0x7
   28868:	f5c58593          	addi	a1,a1,-164 # 2f7c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x12f8>
   2886c:	00011317          	auipc	t1,0x11
   28870:	a9c33303          	ld	t1,-1380(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28874:	9302                	c.jalr	t1
   28876:	baa1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28878:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2887c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2887e:	4681                	c.li	a3,0
   28880:	00007617          	auipc	a2,0x7
   28884:	f6c60613          	addi	a2,a2,-148 # 2f7ec <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1324>
   28888:	00007597          	auipc	a1,0x7
   2888c:	f5058593          	addi	a1,a1,-176 # 2f7d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1310>
   28890:	00011317          	auipc	t1,0x11
   28894:	a7833303          	ld	t1,-1416(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28898:	9302                	c.jalr	t1
   2889a:	ba15                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2889c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   288a0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   288a2:	4681                	c.li	a3,0
   288a4:	00007617          	auipc	a2,0x7
   288a8:	f6160613          	addi	a2,a2,-159 # 2f805 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x133d>
   288ac:	00007597          	auipc	a1,0x7
   288b0:	f4458593          	addi	a1,a1,-188 # 2f7f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1328>
   288b4:	00011317          	auipc	t1,0x11
   288b8:	a5433303          	ld	t1,-1452(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   288bc:	9302                	c.jalr	t1
   288be:	ba01                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   288c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   288c4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   288c6:	4681                	c.li	a3,0
   288c8:	00007617          	auipc	a2,0x7
   288cc:	f5060613          	addi	a2,a2,-176 # 2f818 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1350>
   288d0:	00007597          	auipc	a1,0x7
   288d4:	f3858593          	addi	a1,a1,-200 # 2f808 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1340>
   288d8:	00011317          	auipc	t1,0x11
   288dc:	a3033303          	ld	t1,-1488(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   288e0:	9302                	c.jalr	t1
   288e2:	b0f5                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   288e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   288e8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   288ea:	4681                	c.li	a3,0
   288ec:	00007617          	auipc	a2,0x7
   288f0:	f4a60613          	addi	a2,a2,-182 # 2f836 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x136e>
   288f4:	00007597          	auipc	a1,0x7
   288f8:	f2c58593          	addi	a1,a1,-212 # 2f820 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1358>
   288fc:	00011317          	auipc	t1,0x11
   28900:	a0c33303          	ld	t1,-1524(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28904:	9302                	c.jalr	t1
   28906:	b0e1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28908:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2890c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2890e:	4681                	c.li	a3,0
   28910:	00007617          	auipc	a2,0x7
   28914:	f3f60613          	addi	a2,a2,-193 # 2f84f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1387>
   28918:	00007597          	auipc	a1,0x7
   2891c:	f2058593          	addi	a1,a1,-224 # 2f838 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1370>
   28920:	00011317          	auipc	t1,0x11
   28924:	9e833303          	ld	t1,-1560(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28928:	9302                	c.jalr	t1
   2892a:	b055                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2892c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28930:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28932:	4681                	c.li	a3,0
   28934:	00007617          	auipc	a2,0x7
   28938:	f2f60613          	addi	a2,a2,-209 # 2f863 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x139b>
   2893c:	00007597          	auipc	a1,0x7
   28940:	f1458593          	addi	a1,a1,-236 # 2f850 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1388>
   28944:	00011317          	auipc	t1,0x11
   28948:	9c433303          	ld	t1,-1596(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2894c:	9302                	c.jalr	t1
   2894e:	b041                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28950:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28954:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28956:	4681                	c.li	a3,0
   28958:	00007617          	auipc	a2,0x7
   2895c:	f2460613          	addi	a2,a2,-220 # 2f87c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b4>
   28960:	00007597          	auipc	a1,0x7
   28964:	f0858593          	addi	a1,a1,-248 # 2f868 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13a0>
   28968:	00011317          	auipc	t1,0x11
   2896c:	9a033303          	ld	t1,-1632(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28970:	9302                	c.jalr	t1
   28972:	b8b1                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28974:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28978:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2897a:	4681                	c.li	a3,0
   2897c:	00007617          	auipc	a2,0x7
   28980:	f1460613          	addi	a2,a2,-236 # 2f890 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13c8>
   28984:	00007597          	auipc	a1,0x7
   28988:	efc58593          	addi	a1,a1,-260 # 2f880 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13b8>
   2898c:	00011317          	auipc	t1,0x11
   28990:	97c33303          	ld	t1,-1668(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28994:	9302                	c.jalr	t1
   28996:	b825                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28998:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2899c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2899e:	4681                	c.li	a3,0
   289a0:	00007617          	auipc	a2,0x7
   289a4:	f0a60613          	addi	a2,a2,-246 # 2f8aa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e2>
   289a8:	00007597          	auipc	a1,0x7
   289ac:	ef058593          	addi	a1,a1,-272 # 2f898 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13d0>
   289b0:	00011317          	auipc	t1,0x11
   289b4:	95833303          	ld	t1,-1704(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   289b8:	9302                	c.jalr	t1
   289ba:	b811                	c.j	281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   289bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289c0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289c2:	4681                	c.li	a3,0
   289c4:	00007617          	auipc	a2,0x7
   289c8:	efc60613          	addi	a2,a2,-260 # 2f8c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13f8>
   289cc:	00007597          	auipc	a1,0x7
   289d0:	ee458593          	addi	a1,a1,-284 # 2f8b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x13e8>
   289d4:	00011317          	auipc	t1,0x11
   289d8:	93433303          	ld	t1,-1740(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   289dc:	9302                	c.jalr	t1
   289de:	ff0ff06f          	jal	zero,281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   289e2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   289e6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   289e8:	4681                	c.li	a3,0
   289ea:	00007617          	auipc	a2,0x7
   289ee:	efa60613          	addi	a2,a2,-262 # 2f8e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x141c>
   289f2:	00007597          	auipc	a1,0x7
   289f6:	ed658593          	addi	a1,a1,-298 # 2f8c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1400>
   289fa:	00011317          	auipc	t1,0x11
   289fe:	90e33303          	ld	t1,-1778(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28a02:	9302                	c.jalr	t1
   28a04:	fcaff06f          	jal	zero,281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28a0c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28a0e:	4681                	c.li	a3,0
   28a10:	00007617          	auipc	a2,0x7
   28a14:	eed60613          	addi	a2,a2,-275 # 2f8fd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1435>
   28a18:	00007597          	auipc	a1,0x7
   28a1c:	ed058593          	addi	a1,a1,-304 # 2f8e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1420>
   28a20:	00011317          	auipc	t1,0x11
   28a24:	8e833303          	ld	t1,-1816(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28a28:	9302                	c.jalr	t1
   28a2a:	fa4ff06f          	jal	zero,281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
        return "(DW_TAG)0x" + to_hex((int)v);
   28a2e:	848a                	c.mv	s1,sp
   28a30:	8526                	c.mv	a0,s1
   28a32:	00011317          	auipc	t1,0x11
   28a36:	9e633303          	ld	t1,-1562(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   28a3a:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   28a3c:	4729                	c.li	a4,10
   28a3e:	00007697          	auipc	a3,0x7
   28a42:	ec268693          	addi	a3,a3,-318 # 2f900 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1438>
   28a46:	4601                	c.li	a2,0
   28a48:	4581                	c.li	a1,0
   28a4a:	8526                	c.mv	a0,s1
   28a4c:	c15ed0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   28a50:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28a52:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   28a56:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   28a58:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   28a5a:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   28a5e:	03278563          	beq	a5,s2,28a88 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x904>
      { _M_dataplus._M_p = __p; }
   28a62:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   28a64:	689c                	c.ld	a5,16(s1)
   28a66:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   28a68:	649c                	c.ld	a5,8(s1)
   28a6a:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   28a6c:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   28a70:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   28a74:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   28a78:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28a7a:	081c                	c.addi4spn	a5,sp,16
   28a7c:	f4f50963          	beq	a0,a5,281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   28a80:	a91ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   28a84:	f4aff06f          	jal	zero,281ce <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   28a88:	6490                	c.ld	a2,8(s1)
   28a8a:	0605                	c.addi	a2,1
	if (__n == 0)
   28a8c:	de71                	c.beqz	a2,28a68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8e4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   28a8e:	85ca                	c.mv	a1,s2
   28a90:	b21ed0ef          	jal	ra,165b0 <memcpy@plt>
   28a94:	bfd1                	c.j	28a68 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x8e4>
      { return _M_dataplus._M_p; }
   28a96:	842a                	c.mv	s0,a0
   28a98:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   28a9a:	081c                	c.addi4spn	a5,sp,16
   28a9c:	00f50463          	beq	a0,a5,28aa4 <dwarf::to_string[abi:cxx11](dwarf::DW_TAG)+0x920>
   28aa0:	a71ed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   28aa4:	8522                	c.mv	a0,s0
   28aa6:	c4bed0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000028aaa <dwarf::to_string[abi:cxx11](dwarf::DW_OP)>:
{
   28aaa:	7139                	c.addi16sp	sp,-64
   28aac:	fc06                	c.sdsp	ra,56(sp)
   28aae:	f822                	c.sdsp	s0,48(sp)
   28ab0:	f426                	c.sdsp	s1,40(sp)
   28ab2:	f04a                	c.sdsp	s2,32(sp)
   28ab4:	842a                	c.mv	s0,a0
        switch (v) {
   28ab6:	ffd5879b          	addiw	a5,a1,-3
   28aba:	0ff7f693          	andi	a3,a5,255
   28abe:	09c00713          	addi	a4,zero,156
   28ac2:	12d769e3          	bltu	a4,a3,293f4 <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x94a>
   28ac6:	00269793          	slli	a5,a3,0x2
   28aca:	00008717          	auipc	a4,0x8
   28ace:	d2670713          	addi	a4,a4,-730 # 307f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2328>
   28ad2:	97ba                	c.add	a5,a4
   28ad4:	439c                	c.lw	a5,0(a5)
   28ad6:	97ba                	c.add	a5,a4
   28ad8:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ada:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ade:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ae0:	4681                	c.li	a3,0
   28ae2:	00007617          	auipc	a2,0x7
   28ae6:	e3860613          	addi	a2,a2,-456 # 2f91a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1452>
   28aea:	00007597          	auipc	a1,0x7
   28aee:	e2658593          	addi	a1,a1,-474 # 2f910 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1448>
   28af2:	00011317          	auipc	t1,0x11
   28af6:	81633303          	ld	t1,-2026(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28afa:	9302                	c.jalr	t1
}
   28afc:	8522                	c.mv	a0,s0
   28afe:	70e2                	c.ldsp	ra,56(sp)
   28b00:	7442                	c.ldsp	s0,48(sp)
   28b02:	74a2                	c.ldsp	s1,40(sp)
   28b04:	7902                	c.ldsp	s2,32(sp)
   28b06:	6121                	c.addi16sp	sp,64
   28b08:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b0a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b0e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b10:	4681                	c.li	a3,0
   28b12:	00007617          	auipc	a2,0x7
   28b16:	e1960613          	addi	a2,a2,-487 # 2f92b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1463>
   28b1a:	00007597          	auipc	a1,0x7
   28b1e:	e0658593          	addi	a1,a1,-506 # 2f920 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1458>
   28b22:	00010317          	auipc	t1,0x10
   28b26:	7e633303          	ld	t1,2022(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28b2a:	9302                	c.jalr	t1
   28b2c:	bfc1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b2e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b32:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b34:	4681                	c.li	a3,0
   28b36:	00007617          	auipc	a2,0x7
   28b3a:	e0760613          	addi	a2,a2,-505 # 2f93d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1475>
   28b3e:	00007597          	auipc	a1,0x7
   28b42:	df258593          	addi	a1,a1,-526 # 2f930 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1468>
   28b46:	00010317          	auipc	t1,0x10
   28b4a:	7c233303          	ld	t1,1986(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28b4e:	9302                	c.jalr	t1
   28b50:	b775                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b52:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b56:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b58:	4681                	c.li	a3,0
   28b5a:	00007617          	auipc	a2,0x7
   28b5e:	df360613          	addi	a2,a2,-525 # 2f94d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1485>
   28b62:	00007597          	auipc	a1,0x7
   28b66:	dde58593          	addi	a1,a1,-546 # 2f940 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1478>
   28b6a:	00010317          	auipc	t1,0x10
   28b6e:	79e33303          	ld	t1,1950(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28b72:	9302                	c.jalr	t1
   28b74:	b761                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b76:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b7a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28b7c:	4681                	c.li	a3,0
   28b7e:	00007617          	auipc	a2,0x7
   28b82:	ddf60613          	addi	a2,a2,-545 # 2f95d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1495>
   28b86:	00007597          	auipc	a1,0x7
   28b8a:	dca58593          	addi	a1,a1,-566 # 2f950 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1488>
   28b8e:	00010317          	auipc	t1,0x10
   28b92:	77a33303          	ld	t1,1914(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28b96:	9302                	c.jalr	t1
   28b98:	b795                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28b9a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28b9e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ba0:	4681                	c.li	a3,0
   28ba2:	00007617          	auipc	a2,0x7
   28ba6:	dcb60613          	addi	a2,a2,-565 # 2f96d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a5>
   28baa:	00007597          	auipc	a1,0x7
   28bae:	db658593          	addi	a1,a1,-586 # 2f960 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1498>
   28bb2:	00010317          	auipc	t1,0x10
   28bb6:	75633303          	ld	t1,1878(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28bba:	9302                	c.jalr	t1
   28bbc:	b781                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28bbe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28bc2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28bc4:	4681                	c.li	a3,0
   28bc6:	00007617          	auipc	a2,0x7
   28bca:	db760613          	addi	a2,a2,-585 # 2f97d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b5>
   28bce:	00007597          	auipc	a1,0x7
   28bd2:	da258593          	addi	a1,a1,-606 # 2f970 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14a8>
   28bd6:	00010317          	auipc	t1,0x10
   28bda:	73233303          	ld	t1,1842(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28bde:	9302                	c.jalr	t1
   28be0:	bf31                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28be2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28be6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28be8:	4681                	c.li	a3,0
   28bea:	00007617          	auipc	a2,0x7
   28bee:	da360613          	addi	a2,a2,-605 # 2f98d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c5>
   28bf2:	00007597          	auipc	a1,0x7
   28bf6:	d8e58593          	addi	a1,a1,-626 # 2f980 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14b8>
   28bfa:	00010317          	auipc	t1,0x10
   28bfe:	70e33303          	ld	t1,1806(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28c02:	9302                	c.jalr	t1
   28c04:	bde5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c06:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c0a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c0c:	4681                	c.li	a3,0
   28c0e:	00007617          	auipc	a2,0x7
   28c12:	d8f60613          	addi	a2,a2,-625 # 2f99d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d5>
   28c16:	00007597          	auipc	a1,0x7
   28c1a:	d7a58593          	addi	a1,a1,-646 # 2f990 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14c8>
   28c1e:	00010317          	auipc	t1,0x10
   28c22:	6ea33303          	ld	t1,1770(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28c26:	9302                	c.jalr	t1
   28c28:	bdd1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c2a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c2e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c30:	4681                	c.li	a3,0
   28c32:	00007617          	auipc	a2,0x7
   28c36:	d7b60613          	addi	a2,a2,-645 # 2f9ad <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e5>
   28c3a:	00007597          	auipc	a1,0x7
   28c3e:	d6658593          	addi	a1,a1,-666 # 2f9a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14d8>
   28c42:	00010317          	auipc	t1,0x10
   28c46:	6c633303          	ld	t1,1734(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28c4a:	9302                	c.jalr	t1
   28c4c:	bd45                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c4e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c52:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c54:	4681                	c.li	a3,0
   28c56:	00007617          	auipc	a2,0x7
   28c5a:	d6660613          	addi	a2,a2,-666 # 2f9bc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f4>
   28c5e:	00007597          	auipc	a1,0x7
   28c62:	d5258593          	addi	a1,a1,-686 # 2f9b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14e8>
   28c66:	00010317          	auipc	t1,0x10
   28c6a:	6a233303          	ld	t1,1698(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28c6e:	9302                	c.jalr	t1
   28c70:	b571                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c72:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c76:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c78:	4681                	c.li	a3,0
   28c7a:	00007617          	auipc	a2,0x7
   28c7e:	d5260613          	addi	a2,a2,-686 # 2f9cc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1504>
   28c82:	00007597          	auipc	a1,0x7
   28c86:	d3e58593          	addi	a1,a1,-706 # 2f9c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x14f8>
   28c8a:	00010317          	auipc	t1,0x10
   28c8e:	67e33303          	ld	t1,1662(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28c92:	9302                	c.jalr	t1
   28c94:	b5a5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28c96:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28c9a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28c9c:	4681                	c.li	a3,0
   28c9e:	00007617          	auipc	a2,0x7
   28ca2:	d3b60613          	addi	a2,a2,-709 # 2f9d9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1511>
   28ca6:	00007597          	auipc	a1,0x7
   28caa:	d2a58593          	addi	a1,a1,-726 # 2f9d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1508>
   28cae:	00010317          	auipc	t1,0x10
   28cb2:	65a33303          	ld	t1,1626(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28cb6:	9302                	c.jalr	t1
   28cb8:	b591                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28cba:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28cbe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28cc0:	4681                	c.li	a3,0
   28cc2:	00007617          	auipc	a2,0x7
   28cc6:	d2860613          	addi	a2,a2,-728 # 2f9ea <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1522>
   28cca:	00007597          	auipc	a1,0x7
   28cce:	d1658593          	addi	a1,a1,-746 # 2f9e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1518>
   28cd2:	00010317          	auipc	t1,0x10
   28cd6:	63633303          	ld	t1,1590(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28cda:	9302                	c.jalr	t1
   28cdc:	b505                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28cde:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ce2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ce4:	4681                	c.li	a3,0
   28ce6:	00007617          	auipc	a2,0x7
   28cea:	d1460613          	addi	a2,a2,-748 # 2f9fa <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1532>
   28cee:	00007597          	auipc	a1,0x7
   28cf2:	d0258593          	addi	a1,a1,-766 # 2f9f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1528>
   28cf6:	00010317          	auipc	t1,0x10
   28cfa:	61233303          	ld	t1,1554(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28cfe:	9302                	c.jalr	t1
   28d00:	bbf5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d02:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d06:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d08:	4681                	c.li	a3,0
   28d0a:	00007617          	auipc	a2,0x7
   28d0e:	d0060613          	addi	a2,a2,-768 # 2fa0a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1542>
   28d12:	00007597          	auipc	a1,0x7
   28d16:	cee58593          	addi	a1,a1,-786 # 2fa00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1538>
   28d1a:	00010317          	auipc	t1,0x10
   28d1e:	5ee33303          	ld	t1,1518(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28d22:	9302                	c.jalr	t1
   28d24:	bbe1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d26:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d2a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d2c:	4681                	c.li	a3,0
   28d2e:	00007617          	auipc	a2,0x7
   28d32:	cec60613          	addi	a2,a2,-788 # 2fa1a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1552>
   28d36:	00007597          	auipc	a1,0x7
   28d3a:	cda58593          	addi	a1,a1,-806 # 2fa10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1548>
   28d3e:	00010317          	auipc	t1,0x10
   28d42:	5ca33303          	ld	t1,1482(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28d46:	9302                	c.jalr	t1
   28d48:	bb55                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d4a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d4e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d50:	4681                	c.li	a3,0
   28d52:	00007617          	auipc	a2,0x7
   28d56:	cd760613          	addi	a2,a2,-809 # 2fa29 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1561>
   28d5a:	00007597          	auipc	a1,0x7
   28d5e:	cc658593          	addi	a1,a1,-826 # 2fa20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1558>
   28d62:	00010317          	auipc	t1,0x10
   28d66:	5a633303          	ld	t1,1446(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28d6a:	9302                	c.jalr	t1
   28d6c:	bb41                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d6e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d72:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d74:	4681                	c.li	a3,0
   28d76:	00007617          	auipc	a2,0x7
   28d7a:	cc660613          	addi	a2,a2,-826 # 2fa3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1574>
   28d7e:	00007597          	auipc	a1,0x7
   28d82:	cb258593          	addi	a1,a1,-846 # 2fa30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1568>
   28d86:	00010317          	auipc	t1,0x10
   28d8a:	58233303          	ld	t1,1410(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28d8e:	9302                	c.jalr	t1
   28d90:	b3b5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28d92:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28d96:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28d98:	4681                	c.li	a3,0
   28d9a:	00007617          	auipc	a2,0x7
   28d9e:	caf60613          	addi	a2,a2,-849 # 2fa49 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1581>
   28da2:	00007597          	auipc	a1,0x7
   28da6:	c9e58593          	addi	a1,a1,-866 # 2fa40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1578>
   28daa:	00010317          	auipc	t1,0x10
   28dae:	55e33303          	ld	t1,1374(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28db2:	9302                	c.jalr	t1
   28db4:	b3a1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28db6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28dba:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28dbc:	4681                	c.li	a3,0
   28dbe:	00007617          	auipc	a2,0x7
   28dc2:	c9b60613          	addi	a2,a2,-869 # 2fa59 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1591>
   28dc6:	00007597          	auipc	a1,0x7
   28dca:	c8a58593          	addi	a1,a1,-886 # 2fa50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1588>
   28dce:	00010317          	auipc	t1,0x10
   28dd2:	53a33303          	ld	t1,1338(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28dd6:	9302                	c.jalr	t1
   28dd8:	b315                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28dda:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28dde:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28de0:	4681                	c.li	a3,0
   28de2:	00007617          	auipc	a2,0x7
   28de6:	c8760613          	addi	a2,a2,-889 # 2fa69 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a1>
   28dea:	00007597          	auipc	a1,0x7
   28dee:	c7658593          	addi	a1,a1,-906 # 2fa60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1598>
   28df2:	00010317          	auipc	t1,0x10
   28df6:	51633303          	ld	t1,1302(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28dfa:	9302                	c.jalr	t1
   28dfc:	b301                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28dfe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e02:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e04:	4681                	c.li	a3,0
   28e06:	00007617          	auipc	a2,0x7
   28e0a:	c7560613          	addi	a2,a2,-907 # 2fa7b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b3>
   28e0e:	00007597          	auipc	a1,0x7
   28e12:	c6258593          	addi	a1,a1,-926 # 2fa70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15a8>
   28e16:	00010317          	auipc	t1,0x10
   28e1a:	4f233303          	ld	t1,1266(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28e1e:	9302                	c.jalr	t1
   28e20:	b9f1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e22:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e26:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e28:	4681                	c.li	a3,0
   28e2a:	00007617          	auipc	a2,0x7
   28e2e:	c5f60613          	addi	a2,a2,-929 # 2fa89 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c1>
   28e32:	00007597          	auipc	a1,0x7
   28e36:	c4e58593          	addi	a1,a1,-946 # 2fa80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15b8>
   28e3a:	00010317          	auipc	t1,0x10
   28e3e:	4ce33303          	ld	t1,1230(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28e42:	9302                	c.jalr	t1
   28e44:	b965                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e46:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e4a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e4c:	4681                	c.li	a3,0
   28e4e:	00007617          	auipc	a2,0x7
   28e52:	c4b60613          	addi	a2,a2,-949 # 2fa99 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d1>
   28e56:	00007597          	auipc	a1,0x7
   28e5a:	c3a58593          	addi	a1,a1,-966 # 2fa90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15c8>
   28e5e:	00010317          	auipc	t1,0x10
   28e62:	4aa33303          	ld	t1,1194(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28e66:	9302                	c.jalr	t1
   28e68:	b951                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e6a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e6e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e70:	4681                	c.li	a3,0
   28e72:	00007617          	auipc	a2,0x7
   28e76:	c3760613          	addi	a2,a2,-969 # 2faa9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e1>
   28e7a:	00007597          	auipc	a1,0x7
   28e7e:	c2658593          	addi	a1,a1,-986 # 2faa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15d8>
   28e82:	00010317          	auipc	t1,0x10
   28e86:	48633303          	ld	t1,1158(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28e8a:	9302                	c.jalr	t1
   28e8c:	b985                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28e8e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28e92:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28e94:	4681                	c.li	a3,0
   28e96:	00007617          	auipc	a2,0x7
   28e9a:	c2360613          	addi	a2,a2,-989 # 2fab9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f1>
   28e9e:	00007597          	auipc	a1,0x7
   28ea2:	c1258593          	addi	a1,a1,-1006 # 2fab0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15e8>
   28ea6:	00010317          	auipc	t1,0x10
   28eaa:	46233303          	ld	t1,1122(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28eae:	9302                	c.jalr	t1
   28eb0:	b1b1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28eb2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28eb6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28eb8:	4681                	c.li	a3,0
   28eba:	00007617          	auipc	a2,0x7
   28ebe:	c0e60613          	addi	a2,a2,-1010 # 2fac8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1600>
   28ec2:	00007597          	auipc	a1,0x7
   28ec6:	bfe58593          	addi	a1,a1,-1026 # 2fac0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x15f8>
   28eca:	00010317          	auipc	t1,0x10
   28ece:	43e33303          	ld	t1,1086(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28ed2:	9302                	c.jalr	t1
   28ed4:	b125                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ed6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28eda:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28edc:	4681                	c.li	a3,0
   28ede:	00007617          	auipc	a2,0x7
   28ee2:	bfc60613          	addi	a2,a2,-1028 # 2fada <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1612>
   28ee6:	00007597          	auipc	a1,0x7
   28eea:	bea58593          	addi	a1,a1,-1046 # 2fad0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1608>
   28eee:	00010317          	auipc	t1,0x10
   28ef2:	41a33303          	ld	t1,1050(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28ef6:	9302                	c.jalr	t1
   28ef8:	b111                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28efa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28efe:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f00:	4681                	c.li	a3,0
   28f02:	00007617          	auipc	a2,0x7
   28f06:	bef60613          	addi	a2,a2,-1041 # 2faf1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1629>
   28f0a:	00007597          	auipc	a1,0x7
   28f0e:	bd658593          	addi	a1,a1,-1066 # 2fae0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1618>
   28f12:	00010317          	auipc	t1,0x10
   28f16:	3f633303          	ld	t1,1014(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28f1a:	9302                	c.jalr	t1
   28f1c:	b6c5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f1e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f22:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f24:	4681                	c.li	a3,0
   28f26:	00007617          	auipc	a2,0x7
   28f2a:	bdb60613          	addi	a2,a2,-1061 # 2fb01 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1639>
   28f2e:	00007597          	auipc	a1,0x7
   28f32:	bca58593          	addi	a1,a1,-1078 # 2faf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1630>
   28f36:	00010317          	auipc	t1,0x10
   28f3a:	3d233303          	ld	t1,978(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28f3e:	9302                	c.jalr	t1
   28f40:	be75                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f42:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f46:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f48:	4681                	c.li	a3,0
   28f4a:	00007617          	auipc	a2,0x7
   28f4e:	bc760613          	addi	a2,a2,-1081 # 2fb11 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1649>
   28f52:	00007597          	auipc	a1,0x7
   28f56:	bb658593          	addi	a1,a1,-1098 # 2fb08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1640>
   28f5a:	00010317          	auipc	t1,0x10
   28f5e:	3ae33303          	ld	t1,942(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28f62:	9302                	c.jalr	t1
   28f64:	be61                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f66:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f6a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f6c:	4681                	c.li	a3,0
   28f6e:	00007617          	auipc	a2,0x7
   28f72:	bb460613          	addi	a2,a2,-1100 # 2fb22 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x165a>
   28f76:	00007597          	auipc	a1,0x7
   28f7a:	ba258593          	addi	a1,a1,-1118 # 2fb18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1650>
   28f7e:	00010317          	auipc	t1,0x10
   28f82:	38a33303          	ld	t1,906(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28f86:	9302                	c.jalr	t1
   28f88:	be95                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28f8a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28f8e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28f90:	4681                	c.li	a3,0
   28f92:	00007617          	auipc	a2,0x7
   28f96:	b9f60613          	addi	a2,a2,-1121 # 2fb31 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1669>
   28f9a:	00007597          	auipc	a1,0x7
   28f9e:	b8e58593          	addi	a1,a1,-1138 # 2fb28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1660>
   28fa2:	00010317          	auipc	t1,0x10
   28fa6:	36633303          	ld	t1,870(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28faa:	9302                	c.jalr	t1
   28fac:	be81                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28fae:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28fb2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28fb4:	4681                	c.li	a3,0
   28fb6:	00007617          	auipc	a2,0x7
   28fba:	b8c60613          	addi	a2,a2,-1140 # 2fb42 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x167a>
   28fbe:	00007597          	auipc	a1,0x7
   28fc2:	b7a58593          	addi	a1,a1,-1158 # 2fb38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1670>
   28fc6:	00010317          	auipc	t1,0x10
   28fca:	34233303          	ld	t1,834(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28fce:	9302                	c.jalr	t1
   28fd0:	b635                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28fd2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28fd6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28fd8:	4681                	c.li	a3,0
   28fda:	00007617          	auipc	a2,0x7
   28fde:	b7760613          	addi	a2,a2,-1161 # 2fb51 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1689>
   28fe2:	00007597          	auipc	a1,0x7
   28fe6:	b6658593          	addi	a1,a1,-1178 # 2fb48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1680>
   28fea:	00010317          	auipc	t1,0x10
   28fee:	31e33303          	ld	t1,798(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   28ff2:	9302                	c.jalr	t1
   28ff4:	b621                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   28ff6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   28ffa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   28ffc:	4681                	c.li	a3,0
   28ffe:	00007617          	auipc	a2,0x7
   29002:	b6260613          	addi	a2,a2,-1182 # 2fb60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1698>
   29006:	00007597          	auipc	a1,0x7
   2900a:	b5258593          	addi	a1,a1,-1198 # 2fb58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1690>
   2900e:	00010317          	auipc	t1,0x10
   29012:	2fa33303          	ld	t1,762(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29016:	9302                	c.jalr	t1
   29018:	b4d5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2901a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2901e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29020:	4681                	c.li	a3,0
   29022:	00007617          	auipc	a2,0x7
   29026:	b4e60613          	addi	a2,a2,-1202 # 2fb70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a8>
   2902a:	00007597          	auipc	a1,0x7
   2902e:	b3e58593          	addi	a1,a1,-1218 # 2fb68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16a0>
   29032:	00010317          	auipc	t1,0x10
   29036:	2d633303          	ld	t1,726(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2903a:	9302                	c.jalr	t1
   2903c:	b4c1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2903e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29042:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29044:	4681                	c.li	a3,0
   29046:	00007617          	auipc	a2,0x7
   2904a:	b3a60613          	addi	a2,a2,-1222 # 2fb80 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b8>
   2904e:	00007597          	auipc	a1,0x7
   29052:	b2a58593          	addi	a1,a1,-1238 # 2fb78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16b0>
   29056:	00010317          	auipc	t1,0x10
   2905a:	2b233303          	ld	t1,690(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2905e:	9302                	c.jalr	t1
   29060:	bc71                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29062:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29066:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29068:	4681                	c.li	a3,0
   2906a:	00007617          	auipc	a2,0x7
   2906e:	b2660613          	addi	a2,a2,-1242 # 2fb90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c8>
   29072:	00007597          	auipc	a1,0x7
   29076:	b1658593          	addi	a1,a1,-1258 # 2fb88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16c0>
   2907a:	00010317          	auipc	t1,0x10
   2907e:	28e33303          	ld	t1,654(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29082:	9302                	c.jalr	t1
   29084:	bca5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29086:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2908a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2908c:	4681                	c.li	a3,0
   2908e:	00007617          	auipc	a2,0x7
   29092:	b1260613          	addi	a2,a2,-1262 # 2fba0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d8>
   29096:	00007597          	auipc	a1,0x7
   2909a:	b0258593          	addi	a1,a1,-1278 # 2fb98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16d0>
   2909e:	00010317          	auipc	t1,0x10
   290a2:	26a33303          	ld	t1,618(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   290a6:	9302                	c.jalr	t1
   290a8:	bc91                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290aa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290ae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290b0:	4681                	c.li	a3,0
   290b2:	00007617          	auipc	a2,0x7
   290b6:	afe60613          	addi	a2,a2,-1282 # 2fbb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e8>
   290ba:	00007597          	auipc	a1,0x7
   290be:	aee58593          	addi	a1,a1,-1298 # 2fba8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16e0>
   290c2:	00010317          	auipc	t1,0x10
   290c6:	24633303          	ld	t1,582(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   290ca:	9302                	c.jalr	t1
   290cc:	bc05                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290ce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290d2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290d4:	4681                	c.li	a3,0
   290d6:	00007617          	auipc	a2,0x7
   290da:	aec60613          	addi	a2,a2,-1300 # 2fbc2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16fa>
   290de:	00007597          	auipc	a1,0x7
   290e2:	ada58593          	addi	a1,a1,-1318 # 2fbb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x16f0>
   290e6:	00010317          	auipc	t1,0x10
   290ea:	22233303          	ld	t1,546(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   290ee:	9302                	c.jalr	t1
   290f0:	b431                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   290f2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   290f6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   290f8:	4681                	c.li	a3,0
   290fa:	00007617          	auipc	a2,0x7
   290fe:	ad960613          	addi	a2,a2,-1319 # 2fbd3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x170b>
   29102:	00007597          	auipc	a1,0x7
   29106:	ac658593          	addi	a1,a1,-1338 # 2fbc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1700>
   2910a:	00010317          	auipc	t1,0x10
   2910e:	1fe33303          	ld	t1,510(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29112:	9302                	c.jalr	t1
   29114:	b2e5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29116:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2911a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2911c:	4681                	c.li	a3,0
   2911e:	00007617          	auipc	a2,0x7
   29122:	ac460613          	addi	a2,a2,-1340 # 2fbe2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x171a>
   29126:	00007597          	auipc	a1,0x7
   2912a:	ab258593          	addi	a1,a1,-1358 # 2fbd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1710>
   2912e:	00010317          	auipc	t1,0x10
   29132:	1da33303          	ld	t1,474(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29136:	9302                	c.jalr	t1
   29138:	b2d1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2913a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2913e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29140:	4681                	c.li	a3,0
   29142:	00007617          	auipc	a2,0x7
   29146:	ab160613          	addi	a2,a2,-1359 # 2fbf3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x172b>
   2914a:	00007597          	auipc	a1,0x7
   2914e:	a9e58593          	addi	a1,a1,-1378 # 2fbe8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1720>
   29152:	00010317          	auipc	t1,0x10
   29156:	1b633303          	ld	t1,438(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2915a:	9302                	c.jalr	t1
   2915c:	b245                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2915e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29162:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29164:	4681                	c.li	a3,0
   29166:	00007617          	auipc	a2,0x7
   2916a:	a9d60613          	addi	a2,a2,-1379 # 2fc03 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x173b>
   2916e:	00007597          	auipc	a1,0x7
   29172:	a8a58593          	addi	a1,a1,-1398 # 2fbf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1730>
   29176:	00010317          	auipc	t1,0x10
   2917a:	19233303          	ld	t1,402(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2917e:	9302                	c.jalr	t1
   29180:	bab5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29182:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29186:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29188:	4681                	c.li	a3,0
   2918a:	00007617          	auipc	a2,0x7
   2918e:	a8a60613          	addi	a2,a2,-1398 # 2fc14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x174c>
   29192:	00007597          	auipc	a1,0x7
   29196:	a7658593          	addi	a1,a1,-1418 # 2fc08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1740>
   2919a:	00010317          	auipc	t1,0x10
   2919e:	16e33303          	ld	t1,366(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   291a2:	9302                	c.jalr	t1
   291a4:	baa1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291a6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291aa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291ac:	4681                	c.li	a3,0
   291ae:	00007617          	auipc	a2,0x7
   291b2:	a7460613          	addi	a2,a2,-1420 # 2fc22 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x175a>
   291b6:	00007597          	auipc	a1,0x7
   291ba:	a6258593          	addi	a1,a1,-1438 # 2fc18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1750>
   291be:	00010317          	auipc	t1,0x10
   291c2:	14a33303          	ld	t1,330(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   291c6:	9302                	c.jalr	t1
   291c8:	ba15                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291ca:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291ce:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291d0:	4681                	c.li	a3,0
   291d2:	00007617          	auipc	a2,0x7
   291d6:	a6160613          	addi	a2,a2,-1439 # 2fc33 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x176b>
   291da:	00007597          	auipc	a1,0x7
   291de:	a4e58593          	addi	a1,a1,-1458 # 2fc28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1760>
   291e2:	00010317          	auipc	t1,0x10
   291e6:	12633303          	ld	t1,294(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   291ea:	9302                	c.jalr	t1
   291ec:	ba01                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   291ee:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   291f2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   291f4:	4681                	c.li	a3,0
   291f6:	00007617          	auipc	a2,0x7
   291fa:	a4d60613          	addi	a2,a2,-1459 # 2fc43 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x177b>
   291fe:	00007597          	auipc	a1,0x7
   29202:	a3a58593          	addi	a1,a1,-1478 # 2fc38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1770>
   29206:	00010317          	auipc	t1,0x10
   2920a:	10233303          	ld	t1,258(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2920e:	9302                	c.jalr	t1
   29210:	b0f5                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29212:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29216:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29218:	4681                	c.li	a3,0
   2921a:	00007617          	auipc	a2,0x7
   2921e:	a3960613          	addi	a2,a2,-1479 # 2fc53 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x178b>
   29222:	00007597          	auipc	a1,0x7
   29226:	a2658593          	addi	a1,a1,-1498 # 2fc48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1780>
   2922a:	00010317          	auipc	t1,0x10
   2922e:	0de33303          	ld	t1,222(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29232:	9302                	c.jalr	t1
   29234:	b0e1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29236:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2923a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2923c:	4681                	c.li	a3,0
   2923e:	00007617          	auipc	a2,0x7
   29242:	a2a60613          	addi	a2,a2,-1494 # 2fc68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a0>
   29246:	00007597          	auipc	a1,0x7
   2924a:	a1258593          	addi	a1,a1,-1518 # 2fc58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1790>
   2924e:	00010317          	auipc	t1,0x10
   29252:	0ba33303          	ld	t1,186(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29256:	9302                	c.jalr	t1
   29258:	b055                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2925a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2925e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29260:	4681                	c.li	a3,0
   29262:	00007617          	auipc	a2,0x7
   29266:	a1f60613          	addi	a2,a2,-1505 # 2fc81 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17b9>
   2926a:	00007597          	auipc	a1,0x7
   2926e:	a0658593          	addi	a1,a1,-1530 # 2fc70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17a8>
   29272:	00010317          	auipc	t1,0x10
   29276:	09633303          	ld	t1,150(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2927a:	9302                	c.jalr	t1
   2927c:	b041                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2927e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29282:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29284:	4681                	c.li	a3,0
   29286:	00007617          	auipc	a2,0x7
   2928a:	a0b60613          	addi	a2,a2,-1525 # 2fc91 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c9>
   2928e:	00007597          	auipc	a1,0x7
   29292:	9fa58593          	addi	a1,a1,-1542 # 2fc88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17c0>
   29296:	00010317          	auipc	t1,0x10
   2929a:	07233303          	ld	t1,114(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2929e:	9302                	c.jalr	t1
   292a0:	b8b1                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292a2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292a6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292a8:	4681                	c.li	a3,0
   292aa:	00007617          	auipc	a2,0x7
   292ae:	a0760613          	addi	a2,a2,-1529 # 2fcb1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17e9>
   292b2:	00007597          	auipc	a1,0x7
   292b6:	9e658593          	addi	a1,a1,-1562 # 2fc98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17d0>
   292ba:	00010317          	auipc	t1,0x10
   292be:	04e33303          	ld	t1,78(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   292c2:	9302                	c.jalr	t1
   292c4:	b825                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292c6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292ca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292cc:	4681                	c.li	a3,0
   292ce:	00007617          	auipc	a2,0x7
   292d2:	9f560613          	addi	a2,a2,-1547 # 2fcc3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17fb>
   292d6:	00007597          	auipc	a1,0x7
   292da:	9e258593          	addi	a1,a1,-1566 # 2fcb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x17f0>
   292de:	00010317          	auipc	t1,0x10
   292e2:	02a33303          	ld	t1,42(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   292e6:	9302                	c.jalr	t1
   292e8:	b811                	c.j	28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   292ea:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   292ee:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   292f0:	4681                	c.li	a3,0
   292f2:	00007617          	auipc	a2,0x7
   292f6:	9e160613          	addi	a2,a2,-1567 # 2fcd3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x180b>
   292fa:	00007597          	auipc	a1,0x7
   292fe:	9ce58593          	addi	a1,a1,-1586 # 2fcc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1800>
   29302:	00010317          	auipc	t1,0x10
   29306:	00633303          	ld	t1,6(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2930a:	9302                	c.jalr	t1
   2930c:	ff0ff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29310:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29314:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29316:	4681                	c.li	a3,0
   29318:	00007617          	auipc	a2,0x7
   2931c:	9ce60613          	addi	a2,a2,-1586 # 2fce6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x181e>
   29320:	00007597          	auipc	a1,0x7
   29324:	9b858593          	addi	a1,a1,-1608 # 2fcd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1810>
   29328:	00010317          	auipc	t1,0x10
   2932c:	fe033303          	ld	t1,-32(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29330:	9302                	c.jalr	t1
   29332:	fcaff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29336:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2933a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2933c:	4681                	c.li	a3,0
   2933e:	00007617          	auipc	a2,0x7
   29342:	9c060613          	addi	a2,a2,-1600 # 2fcfe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1836>
   29346:	00007597          	auipc	a1,0x7
   2934a:	9a258593          	addi	a1,a1,-1630 # 2fce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1820>
   2934e:	00010317          	auipc	t1,0x10
   29352:	fba33303          	ld	t1,-70(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29356:	9302                	c.jalr	t1
   29358:	fa4ff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2935c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29360:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29362:	4681                	c.li	a3,0
   29364:	00007617          	auipc	a2,0x7
   29368:	9b060613          	addi	a2,a2,-1616 # 2fd14 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x184c>
   2936c:	00007597          	auipc	a1,0x7
   29370:	99458593          	addi	a1,a1,-1644 # 2fd00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1838>
   29374:	00010317          	auipc	t1,0x10
   29378:	f9433303          	ld	t1,-108(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2937c:	9302                	c.jalr	t1
   2937e:	f7eff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29382:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29386:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29388:	4681                	c.li	a3,0
   2938a:	00007617          	auipc	a2,0x7
   2938e:	99d60613          	addi	a2,a2,-1635 # 2fd27 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x185f>
   29392:	00007597          	auipc	a1,0x7
   29396:	98658593          	addi	a1,a1,-1658 # 2fd18 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1850>
   2939a:	00010317          	auipc	t1,0x10
   2939e:	f6e33303          	ld	t1,-146(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   293a2:	9302                	c.jalr	t1
   293a4:	f58ff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293a8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293ac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293ae:	4681                	c.li	a3,0
   293b0:	00007617          	auipc	a2,0x7
   293b4:	98c60613          	addi	a2,a2,-1652 # 2fd3c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1874>
   293b8:	00007597          	auipc	a1,0x7
   293bc:	97058593          	addi	a1,a1,-1680 # 2fd28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1860>
   293c0:	00010317          	auipc	t1,0x10
   293c4:	f4833303          	ld	t1,-184(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   293c8:	9302                	c.jalr	t1
   293ca:	f32ff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   293ce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   293d2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   293d4:	4681                	c.li	a3,0
   293d6:	00007617          	auipc	a2,0x7
   293da:	97b60613          	addi	a2,a2,-1669 # 2fd51 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1889>
   293de:	00007597          	auipc	a1,0x7
   293e2:	96258593          	addi	a1,a1,-1694 # 2fd40 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1878>
   293e6:	00010317          	auipc	t1,0x10
   293ea:	f2233303          	ld	t1,-222(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   293ee:	9302                	c.jalr	t1
   293f0:	f0cff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
        return "(DW_OP)0x" + to_hex((int)v);
   293f4:	848a                	c.mv	s1,sp
   293f6:	8526                	c.mv	a0,s1
   293f8:	00010317          	auipc	t1,0x10
   293fc:	02033303          	ld	t1,32(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   29400:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   29402:	4725                	c.li	a4,9
   29404:	00007697          	auipc	a3,0x7
   29408:	95468693          	addi	a3,a3,-1708 # 2fd58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1890>
   2940c:	4601                	c.li	a2,0
   2940e:	4581                	c.li	a1,0
   29410:	8526                	c.mv	a0,s1
   29412:	a4eed0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   29416:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29418:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2941c:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2941e:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   29420:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   29424:	03278563          	beq	a5,s2,2944e <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x9a4>
      { _M_dataplus._M_p = __p; }
   29428:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2942a:	689c                	c.ld	a5,16(s1)
   2942c:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2942e:	649c                	c.ld	a5,8(s1)
   29430:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   29432:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   29436:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2943a:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2943e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29440:	081c                	c.addi4spn	a5,sp,16
   29442:	eaf50d63          	beq	a0,a5,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   29446:	8caed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2944a:	eb2ff06f          	jal	zero,28afc <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x52>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2944e:	6490                	c.ld	a2,8(s1)
   29450:	0605                	c.addi	a2,1
	if (__n == 0)
   29452:	de71                	c.beqz	a2,2942e <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x984>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   29454:	85ca                	c.mv	a1,s2
   29456:	95aed0ef          	jal	ra,165b0 <memcpy@plt>
   2945a:	bfd1                	c.j	2942e <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x984>
      { return _M_dataplus._M_p; }
   2945c:	842a                	c.mv	s0,a0
   2945e:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   29460:	081c                	c.addi4spn	a5,sp,16
   29462:	00f50463          	beq	a0,a5,2946a <dwarf::to_string[abi:cxx11](dwarf::DW_OP)+0x9c0>
   29466:	8aaed0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2946a:	8522                	c.mv	a0,s0
   2946c:	a84ed0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

0000000000029470 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)>:
{
   29470:	7139                	c.addi16sp	sp,-64
   29472:	fc06                	c.sdsp	ra,56(sp)
   29474:	f822                	c.sdsp	s0,48(sp)
   29476:	f426                	c.sdsp	s1,40(sp)
   29478:	f04a                	c.sdsp	s2,32(sp)
   2947a:	842a                	c.mv	s0,a0
        switch (v) {
   2947c:	06e00793          	addi	a5,zero,110
   29480:	54b7ede3          	bltu	a5,a1,2a1da <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xd6a>
   29484:	00259793          	slli	a5,a1,0x2
   29488:	00007717          	auipc	a4,0x7
   2948c:	5dc70713          	addi	a4,a4,1500 # 30a64 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x259c>
   29490:	97ba                	c.add	a5,a4
   29492:	439c                	c.lw	a5,0(a5)
   29494:	97ba                	c.add	a5,a4
   29496:	8782                	c.jr	a5
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29498:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2949c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2949e:	4681                	c.li	a3,0
   294a0:	00007617          	auipc	a2,0x7
   294a4:	8d560613          	addi	a2,a2,-1835 # 2fd75 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ad>
   294a8:	00007597          	auipc	a1,0x7
   294ac:	8c058593          	addi	a1,a1,-1856 # 2fd68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18a0>
   294b0:	00010317          	auipc	t1,0x10
   294b4:	e5833303          	ld	t1,-424(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   294b8:	9302                	c.jalr	t1
}
   294ba:	8522                	c.mv	a0,s0
   294bc:	70e2                	c.ldsp	ra,56(sp)
   294be:	7442                	c.ldsp	s0,48(sp)
   294c0:	74a2                	c.ldsp	s1,40(sp)
   294c2:	7902                	c.ldsp	s2,32(sp)
   294c4:	6121                	c.addi16sp	sp,64
   294c6:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   294c8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   294cc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   294ce:	4681                	c.li	a3,0
   294d0:	00007617          	auipc	a2,0x7
   294d4:	8b660613          	addi	a2,a2,-1866 # 2fd86 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18be>
   294d8:	00007597          	auipc	a1,0x7
   294dc:	8a058593          	addi	a1,a1,-1888 # 2fd78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18b0>
   294e0:	00010317          	auipc	t1,0x10
   294e4:	e2833303          	ld	t1,-472(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   294e8:	9302                	c.jalr	t1
   294ea:	bfc1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   294ec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   294f0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   294f2:	4681                	c.li	a3,0
   294f4:	00007617          	auipc	a2,0x7
   294f8:	89e60613          	addi	a2,a2,-1890 # 2fd92 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ca>
   294fc:	00007597          	auipc	a1,0x7
   29500:	88c58593          	addi	a1,a1,-1908 # 2fd88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18c0>
   29504:	00010317          	auipc	t1,0x10
   29508:	e0433303          	ld	t1,-508(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2950c:	9302                	c.jalr	t1
   2950e:	b775                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29510:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29514:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29516:	4681                	c.li	a3,0
   29518:	00007617          	auipc	a2,0x7
   2951c:	88e60613          	addi	a2,a2,-1906 # 2fda6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18de>
   29520:	00007597          	auipc	a1,0x7
   29524:	87858593          	addi	a1,a1,-1928 # 2fd98 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18d0>
   29528:	00010317          	auipc	t1,0x10
   2952c:	de033303          	ld	t1,-544(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29530:	9302                	c.jalr	t1
   29532:	b761                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29534:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29538:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2953a:	4681                	c.li	a3,0
   2953c:	00007617          	auipc	a2,0x7
   29540:	87b60613          	addi	a2,a2,-1925 # 2fdb7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18ef>
   29544:	00007597          	auipc	a1,0x7
   29548:	86458593          	addi	a1,a1,-1948 # 2fda8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18e0>
   2954c:	00010317          	auipc	t1,0x10
   29550:	dbc33303          	ld	t1,-580(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29554:	9302                	c.jalr	t1
   29556:	b795                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29558:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2955c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2955e:	4681                	c.li	a3,0
   29560:	00007617          	auipc	a2,0x7
   29564:	86860613          	addi	a2,a2,-1944 # 2fdc8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1900>
   29568:	00007597          	auipc	a1,0x7
   2956c:	85058593          	addi	a1,a1,-1968 # 2fdb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x18f0>
   29570:	00010317          	auipc	t1,0x10
   29574:	d9833303          	ld	t1,-616(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29578:	9302                	c.jalr	t1
   2957a:	b781                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2957c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29580:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29582:	4681                	c.li	a3,0
   29584:	00007617          	auipc	a2,0x7
   29588:	85a60613          	addi	a2,a2,-1958 # 2fdde <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1916>
   2958c:	00007597          	auipc	a1,0x7
   29590:	84458593          	addi	a1,a1,-1980 # 2fdd0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1908>
   29594:	00010317          	auipc	t1,0x10
   29598:	d7433303          	ld	t1,-652(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2959c:	9302                	c.jalr	t1
   2959e:	bf31                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   295a0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   295a4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   295a6:	4681                	c.li	a3,0
   295a8:	00007617          	auipc	a2,0x7
   295ac:	84760613          	addi	a2,a2,-1977 # 2fdef <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1927>
   295b0:	00007597          	auipc	a1,0x7
   295b4:	83058593          	addi	a1,a1,-2000 # 2fde0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1918>
   295b8:	00010317          	auipc	t1,0x10
   295bc:	d5033303          	ld	t1,-688(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   295c0:	9302                	c.jalr	t1
   295c2:	bde5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   295c4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   295c8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   295ca:	4681                	c.li	a3,0
   295cc:	00007617          	auipc	a2,0x7
   295d0:	83060613          	addi	a2,a2,-2000 # 2fdfc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1934>
   295d4:	00007597          	auipc	a1,0x7
   295d8:	81c58593          	addi	a1,a1,-2020 # 2fdf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1928>
   295dc:	00010317          	auipc	t1,0x10
   295e0:	d2c33303          	ld	t1,-724(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   295e4:	9302                	c.jalr	t1
   295e6:	bdd1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   295e8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   295ec:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   295ee:	4681                	c.li	a3,0
   295f0:	00007617          	auipc	a2,0x7
   295f4:	81d60613          	addi	a2,a2,-2019 # 2fe0d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1945>
   295f8:	00007597          	auipc	a1,0x7
   295fc:	80858593          	addi	a1,a1,-2040 # 2fe00 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1938>
   29600:	00010317          	auipc	t1,0x10
   29604:	d0833303          	ld	t1,-760(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29608:	9302                	c.jalr	t1
   2960a:	bd45                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2960c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29610:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29612:	4681                	c.li	a3,0
   29614:	00007617          	auipc	a2,0x7
   29618:	80a60613          	addi	a2,a2,-2038 # 2fe1e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1956>
   2961c:	00006597          	auipc	a1,0x6
   29620:	7f458593          	addi	a1,a1,2036 # 2fe10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1948>
   29624:	00010317          	auipc	t1,0x10
   29628:	ce433303          	ld	t1,-796(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2962c:	9302                	c.jalr	t1
   2962e:	b571                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29630:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29634:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29636:	4681                	c.li	a3,0
   29638:	00006617          	auipc	a2,0x6
   2963c:	7f360613          	addi	a2,a2,2035 # 2fe2b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1963>
   29640:	00006597          	auipc	a1,0x6
   29644:	7e058593          	addi	a1,a1,2016 # 2fe20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1958>
   29648:	00010317          	auipc	t1,0x10
   2964c:	cc033303          	ld	t1,-832(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29650:	9302                	c.jalr	t1
   29652:	b5a5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29654:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29658:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2965a:	4681                	c.li	a3,0
   2965c:	00006617          	auipc	a2,0x6
   29660:	7e560613          	addi	a2,a2,2021 # 2fe41 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1979>
   29664:	00006597          	auipc	a1,0x6
   29668:	7cc58593          	addi	a1,a1,1996 # 2fe30 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1968>
   2966c:	00010317          	auipc	t1,0x10
   29670:	c9c33303          	ld	t1,-868(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29674:	9302                	c.jalr	t1
   29676:	b591                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29678:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2967c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2967e:	4681                	c.li	a3,0
   29680:	00006617          	auipc	a2,0x6
   29684:	7d860613          	addi	a2,a2,2008 # 2fe58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1990>
   29688:	00006597          	auipc	a1,0x6
   2968c:	7c058593          	addi	a1,a1,1984 # 2fe48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1980>
   29690:	00010317          	auipc	t1,0x10
   29694:	c7833303          	ld	t1,-904(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29698:	9302                	c.jalr	t1
   2969a:	b505                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2969c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296a0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296a2:	4681                	c.li	a3,0
   296a4:	00006617          	auipc	a2,0x6
   296a8:	7c860613          	addi	a2,a2,1992 # 2fe6c <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a4>
   296ac:	00006597          	auipc	a1,0x6
   296b0:	7b458593          	addi	a1,a1,1972 # 2fe60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1998>
   296b4:	00010317          	auipc	t1,0x10
   296b8:	c5433303          	ld	t1,-940(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   296bc:	9302                	c.jalr	t1
   296be:	bbf5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296c0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296c4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296c6:	4681                	c.li	a3,0
   296c8:	00006617          	auipc	a2,0x6
   296cc:	7bb60613          	addi	a2,a2,1979 # 2fe83 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19bb>
   296d0:	00006597          	auipc	a1,0x6
   296d4:	7a058593          	addi	a1,a1,1952 # 2fe70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19a8>
   296d8:	00010317          	auipc	t1,0x10
   296dc:	c3033303          	ld	t1,-976(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   296e0:	9302                	c.jalr	t1
   296e2:	bbe1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   296e4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   296e8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   296ea:	4681                	c.li	a3,0
   296ec:	00006617          	auipc	a2,0x6
   296f0:	7b260613          	addi	a2,a2,1970 # 2fe9e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d6>
   296f4:	00006597          	auipc	a1,0x6
   296f8:	79458593          	addi	a1,a1,1940 # 2fe88 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19c0>
   296fc:	00010317          	auipc	t1,0x10
   29700:	c0c33303          	ld	t1,-1012(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29704:	9302                	c.jalr	t1
   29706:	bb55                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29708:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2970c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2970e:	4681                	c.li	a3,0
   29710:	00006617          	auipc	a2,0x6
   29714:	79e60613          	addi	a2,a2,1950 # 2feae <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e6>
   29718:	00006597          	auipc	a1,0x6
   2971c:	78858593          	addi	a1,a1,1928 # 2fea0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19d8>
   29720:	00010317          	auipc	t1,0x10
   29724:	be833303          	ld	t1,-1048(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29728:	9302                	c.jalr	t1
   2972a:	bb41                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2972c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29730:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29732:	4681                	c.li	a3,0
   29734:	00006617          	auipc	a2,0x6
   29738:	78d60613          	addi	a2,a2,1933 # 2fec1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19f9>
   2973c:	00006597          	auipc	a1,0x6
   29740:	77458593          	addi	a1,a1,1908 # 2feb0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x19e8>
   29744:	00010317          	auipc	t1,0x10
   29748:	bc433303          	ld	t1,-1084(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2974c:	9302                	c.jalr	t1
   2974e:	b3b5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29750:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29754:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29756:	4681                	c.li	a3,0
   29758:	00006617          	auipc	a2,0x6
   2975c:	78560613          	addi	a2,a2,1925 # 2fedd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a15>
   29760:	00006597          	auipc	a1,0x6
   29764:	76858593          	addi	a1,a1,1896 # 2fec8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a00>
   29768:	00010317          	auipc	t1,0x10
   2976c:	ba033303          	ld	t1,-1120(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29770:	9302                	c.jalr	t1
   29772:	b3a1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29774:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29778:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2977a:	4681                	c.li	a3,0
   2977c:	00006617          	auipc	a2,0x6
   29780:	77760613          	addi	a2,a2,1911 # 2fef3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a2b>
   29784:	00006597          	auipc	a1,0x6
   29788:	75c58593          	addi	a1,a1,1884 # 2fee0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a18>
   2978c:	00010317          	auipc	t1,0x10
   29790:	b7c33303          	ld	t1,-1156(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29794:	9302                	c.jalr	t1
   29796:	b315                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29798:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2979c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2979e:	4681                	c.li	a3,0
   297a0:	00006617          	auipc	a2,0x6
   297a4:	76460613          	addi	a2,a2,1892 # 2ff04 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a3c>
   297a8:	00006597          	auipc	a1,0x6
   297ac:	75058593          	addi	a1,a1,1872 # 2fef8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a30>
   297b0:	00010317          	auipc	t1,0x10
   297b4:	b5833303          	ld	t1,-1192(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   297b8:	9302                	c.jalr	t1
   297ba:	b301                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   297bc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297c0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297c2:	4681                	c.li	a3,0
   297c4:	00006617          	auipc	a2,0x6
   297c8:	75560613          	addi	a2,a2,1877 # 2ff19 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a51>
   297cc:	00006597          	auipc	a1,0x6
   297d0:	73c58593          	addi	a1,a1,1852 # 2ff08 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a40>
   297d4:	00010317          	auipc	t1,0x10
   297d8:	b3433303          	ld	t1,-1228(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   297dc:	9302                	c.jalr	t1
   297de:	b9f1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   297e0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   297e4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   297e6:	4681                	c.li	a3,0
   297e8:	00006617          	auipc	a2,0x6
   297ec:	74960613          	addi	a2,a2,1865 # 2ff31 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a69>
   297f0:	00006597          	auipc	a1,0x6
   297f4:	73058593          	addi	a1,a1,1840 # 2ff20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a58>
   297f8:	00010317          	auipc	t1,0x10
   297fc:	b1033303          	ld	t1,-1264(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29800:	9302                	c.jalr	t1
   29802:	b965                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29804:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29808:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2980a:	4681                	c.li	a3,0
   2980c:	00006617          	auipc	a2,0x6
   29810:	73a60613          	addi	a2,a2,1850 # 2ff46 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a7e>
   29814:	00006597          	auipc	a1,0x6
   29818:	72458593          	addi	a1,a1,1828 # 2ff38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a70>
   2981c:	00010317          	auipc	t1,0x10
   29820:	aec33303          	ld	t1,-1300(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29824:	9302                	c.jalr	t1
   29826:	b951                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29828:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2982c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2982e:	4681                	c.li	a3,0
   29830:	00006617          	auipc	a2,0x6
   29834:	72860613          	addi	a2,a2,1832 # 2ff58 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a90>
   29838:	00006597          	auipc	a1,0x6
   2983c:	71058593          	addi	a1,a1,1808 # 2ff48 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a80>
   29840:	00010317          	auipc	t1,0x10
   29844:	ac833303          	ld	t1,-1336(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29848:	9302                	c.jalr	t1
   2984a:	b985                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2984c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29850:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29852:	4681                	c.li	a3,0
   29854:	00006617          	auipc	a2,0x6
   29858:	71d60613          	addi	a2,a2,1821 # 2ff71 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1aa9>
   2985c:	00006597          	auipc	a1,0x6
   29860:	70458593          	addi	a1,a1,1796 # 2ff60 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1a98>
   29864:	00010317          	auipc	t1,0x10
   29868:	aa433303          	ld	t1,-1372(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2986c:	9302                	c.jalr	t1
   2986e:	b1b1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29870:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29874:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29876:	4681                	c.li	a3,0
   29878:	00006617          	auipc	a2,0x6
   2987c:	71160613          	addi	a2,a2,1809 # 2ff89 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac1>
   29880:	00006597          	auipc	a1,0x6
   29884:	6f858593          	addi	a1,a1,1784 # 2ff78 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ab0>
   29888:	00010317          	auipc	t1,0x10
   2988c:	a8033303          	ld	t1,-1408(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29890:	9302                	c.jalr	t1
   29892:	b125                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29894:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29898:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2989a:	4681                	c.li	a3,0
   2989c:	00006617          	auipc	a2,0x6
   298a0:	70460613          	addi	a2,a2,1796 # 2ffa0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ad8>
   298a4:	00006597          	auipc	a1,0x6
   298a8:	6ec58593          	addi	a1,a1,1772 # 2ff90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ac8>
   298ac:	00010317          	auipc	t1,0x10
   298b0:	a5c33303          	ld	t1,-1444(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   298b4:	9302                	c.jalr	t1
   298b6:	b111                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   298b8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   298bc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   298be:	4681                	c.li	a3,0
   298c0:	00006617          	auipc	a2,0x6
   298c4:	6f960613          	addi	a2,a2,1785 # 2ffb9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af1>
   298c8:	00006597          	auipc	a1,0x6
   298cc:	6e058593          	addi	a1,a1,1760 # 2ffa8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ae0>
   298d0:	00010317          	auipc	t1,0x10
   298d4:	a3833303          	ld	t1,-1480(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   298d8:	9302                	c.jalr	t1
   298da:	b6c5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   298dc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   298e0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   298e2:	4681                	c.li	a3,0
   298e4:	00006617          	auipc	a2,0x6
   298e8:	6f160613          	addi	a2,a2,1777 # 2ffd5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b0d>
   298ec:	00006597          	auipc	a1,0x6
   298f0:	6d458593          	addi	a1,a1,1748 # 2ffc0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1af8>
   298f4:	00010317          	auipc	t1,0x10
   298f8:	a1433303          	ld	t1,-1516(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   298fc:	9302                	c.jalr	t1
   298fe:	be75                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29900:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29904:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29906:	4681                	c.li	a3,0
   29908:	00006617          	auipc	a2,0x6
   2990c:	6e360613          	addi	a2,a2,1763 # 2ffeb <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b23>
   29910:	00006597          	auipc	a1,0x6
   29914:	6c858593          	addi	a1,a1,1736 # 2ffd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b10>
   29918:	00010317          	auipc	t1,0x10
   2991c:	9f033303          	ld	t1,-1552(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29920:	9302                	c.jalr	t1
   29922:	be61                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29924:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29928:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2992a:	4681                	c.li	a3,0
   2992c:	00006617          	auipc	a2,0x6
   29930:	6d760613          	addi	a2,a2,1751 # 30003 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b3b>
   29934:	00006597          	auipc	a1,0x6
   29938:	6bc58593          	addi	a1,a1,1724 # 2fff0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b28>
   2993c:	00010317          	auipc	t1,0x10
   29940:	9cc33303          	ld	t1,-1588(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29944:	9302                	c.jalr	t1
   29946:	be95                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29948:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2994c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2994e:	4681                	c.li	a3,0
   29950:	00006617          	auipc	a2,0x6
   29954:	6c860613          	addi	a2,a2,1736 # 30018 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b50>
   29958:	00006597          	auipc	a1,0x6
   2995c:	6b058593          	addi	a1,a1,1712 # 30008 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b40>
   29960:	00010317          	auipc	t1,0x10
   29964:	9a833303          	ld	t1,-1624(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29968:	9302                	c.jalr	t1
   2996a:	be81                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2996c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29970:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29972:	4681                	c.li	a3,0
   29974:	00006617          	auipc	a2,0x6
   29978:	6bc60613          	addi	a2,a2,1724 # 30030 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b68>
   2997c:	00006597          	auipc	a1,0x6
   29980:	6a458593          	addi	a1,a1,1700 # 30020 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b58>
   29984:	00010317          	auipc	t1,0x10
   29988:	98433303          	ld	t1,-1660(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2998c:	9302                	c.jalr	t1
   2998e:	b635                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29990:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29994:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29996:	4681                	c.li	a3,0
   29998:	00006617          	auipc	a2,0x6
   2999c:	6b860613          	addi	a2,a2,1720 # 30050 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b88>
   299a0:	00006597          	auipc	a1,0x6
   299a4:	69858593          	addi	a1,a1,1688 # 30038 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b70>
   299a8:	00010317          	auipc	t1,0x10
   299ac:	96033303          	ld	t1,-1696(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   299b0:	9302                	c.jalr	t1
   299b2:	b621                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   299b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   299b8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   299ba:	4681                	c.li	a3,0
   299bc:	00006617          	auipc	a2,0x6
   299c0:	6a760613          	addi	a2,a2,1703 # 30063 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b9b>
   299c4:	00006597          	auipc	a1,0x6
   299c8:	69458593          	addi	a1,a1,1684 # 30058 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1b90>
   299cc:	00010317          	auipc	t1,0x10
   299d0:	93c33303          	ld	t1,-1732(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   299d4:	9302                	c.jalr	t1
   299d6:	b4d5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   299d8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   299dc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   299de:	4681                	c.li	a3,0
   299e0:	00006617          	auipc	a2,0x6
   299e4:	6a260613          	addi	a2,a2,1698 # 30082 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bba>
   299e8:	00006597          	auipc	a1,0x6
   299ec:	68058593          	addi	a1,a1,1664 # 30068 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ba0>
   299f0:	00010317          	auipc	t1,0x10
   299f4:	91833303          	ld	t1,-1768(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   299f8:	9302                	c.jalr	t1
   299fa:	b4c1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   299fc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a00:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a02:	4681                	c.li	a3,0
   29a04:	00006617          	auipc	a2,0x6
   29a08:	69560613          	addi	a2,a2,1685 # 30099 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd1>
   29a0c:	00006597          	auipc	a1,0x6
   29a10:	67c58593          	addi	a1,a1,1660 # 30088 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bc0>
   29a14:	00010317          	auipc	t1,0x10
   29a18:	8f433303          	ld	t1,-1804(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29a1c:	9302                	c.jalr	t1
   29a1e:	bc71                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a20:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a24:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a26:	4681                	c.li	a3,0
   29a28:	00006617          	auipc	a2,0x6
   29a2c:	68760613          	addi	a2,a2,1671 # 300af <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be7>
   29a30:	00006597          	auipc	a1,0x6
   29a34:	67058593          	addi	a1,a1,1648 # 300a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bd8>
   29a38:	00010317          	auipc	t1,0x10
   29a3c:	8d033303          	ld	t1,-1840(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29a40:	9302                	c.jalr	t1
   29a42:	bca5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a44:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a48:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a4a:	4681                	c.li	a3,0
   29a4c:	00006617          	auipc	a2,0x6
   29a50:	67360613          	addi	a2,a2,1651 # 300bf <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf7>
   29a54:	00006597          	auipc	a1,0x6
   29a58:	65c58593          	addi	a1,a1,1628 # 300b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1be8>
   29a5c:	00010317          	auipc	t1,0x10
   29a60:	8ac33303          	ld	t1,-1876(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29a64:	9302                	c.jalr	t1
   29a66:	bc91                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a68:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a6c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a6e:	4681                	c.li	a3,0
   29a70:	00006617          	auipc	a2,0x6
   29a74:	66160613          	addi	a2,a2,1633 # 300d1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c09>
   29a78:	00006597          	auipc	a1,0x6
   29a7c:	64858593          	addi	a1,a1,1608 # 300c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1bf8>
   29a80:	00010317          	auipc	t1,0x10
   29a84:	88833303          	ld	t1,-1912(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29a88:	9302                	c.jalr	t1
   29a8a:	bc05                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29a8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29a90:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29a92:	4681                	c.li	a3,0
   29a94:	00006617          	auipc	a2,0x6
   29a98:	65460613          	addi	a2,a2,1620 # 300e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c20>
   29a9c:	00006597          	auipc	a1,0x6
   29aa0:	63c58593          	addi	a1,a1,1596 # 300d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c10>
   29aa4:	00010317          	auipc	t1,0x10
   29aa8:	86433303          	ld	t1,-1948(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29aac:	9302                	c.jalr	t1
   29aae:	b431                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ab0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ab4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ab6:	4681                	c.li	a3,0
   29ab8:	00006617          	auipc	a2,0x6
   29abc:	64660613          	addi	a2,a2,1606 # 300fe <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c36>
   29ac0:	00006597          	auipc	a1,0x6
   29ac4:	63058593          	addi	a1,a1,1584 # 300f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c28>
   29ac8:	00010317          	auipc	t1,0x10
   29acc:	84033303          	ld	t1,-1984(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29ad0:	9302                	c.jalr	t1
   29ad2:	b2e5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ad4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ad8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ada:	4681                	c.li	a3,0
   29adc:	00006617          	auipc	a2,0x6
   29ae0:	63260613          	addi	a2,a2,1586 # 3010e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c46>
   29ae4:	00006597          	auipc	a1,0x6
   29ae8:	61c58593          	addi	a1,a1,1564 # 30100 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c38>
   29aec:	00010317          	auipc	t1,0x10
   29af0:	81c33303          	ld	t1,-2020(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29af4:	9302                	c.jalr	t1
   29af6:	b2d1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29af8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29afc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29afe:	4681                	c.li	a3,0
   29b00:	00006617          	auipc	a2,0x6
   29b04:	62060613          	addi	a2,a2,1568 # 30120 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c58>
   29b08:	00006597          	auipc	a1,0x6
   29b0c:	60858593          	addi	a1,a1,1544 # 30110 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c48>
   29b10:	0000f317          	auipc	t1,0xf
   29b14:	7f833303          	ld	t1,2040(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29b18:	9302                	c.jalr	t1
   29b1a:	b245                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b1c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b20:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b22:	4681                	c.li	a3,0
   29b24:	00006617          	auipc	a2,0x6
   29b28:	61060613          	addi	a2,a2,1552 # 30134 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c6c>
   29b2c:	00006597          	auipc	a1,0x6
   29b30:	5fc58593          	addi	a1,a1,1532 # 30128 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c60>
   29b34:	0000f317          	auipc	t1,0xf
   29b38:	7d433303          	ld	t1,2004(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29b3c:	9302                	c.jalr	t1
   29b3e:	bab5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b44:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b46:	4681                	c.li	a3,0
   29b48:	00006617          	auipc	a2,0x6
   29b4c:	60560613          	addi	a2,a2,1541 # 3014d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c85>
   29b50:	00006597          	auipc	a1,0x6
   29b54:	5e858593          	addi	a1,a1,1512 # 30138 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c70>
   29b58:	0000f317          	auipc	t1,0xf
   29b5c:	7b033303          	ld	t1,1968(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29b60:	9302                	c.jalr	t1
   29b62:	baa1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b64:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b68:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b6a:	4681                	c.li	a3,0
   29b6c:	00006617          	auipc	a2,0x6
   29b70:	5f460613          	addi	a2,a2,1524 # 30160 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c98>
   29b74:	00006597          	auipc	a1,0x6
   29b78:	5dc58593          	addi	a1,a1,1500 # 30150 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1c88>
   29b7c:	0000f317          	auipc	t1,0xf
   29b80:	78c33303          	ld	t1,1932(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29b84:	9302                	c.jalr	t1
   29b86:	ba15                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29b88:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29b8c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29b8e:	4681                	c.li	a3,0
   29b90:	00006617          	auipc	a2,0x6
   29b94:	5eb60613          	addi	a2,a2,1515 # 3017b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb3>
   29b98:	00006597          	auipc	a1,0x6
   29b9c:	5d058593          	addi	a1,a1,1488 # 30168 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ca0>
   29ba0:	0000f317          	auipc	t1,0xf
   29ba4:	76833303          	ld	t1,1896(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29ba8:	9302                	c.jalr	t1
   29baa:	ba01                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bac:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bb0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bb2:	4681                	c.li	a3,0
   29bb4:	00006617          	auipc	a2,0x6
   29bb8:	5da60613          	addi	a2,a2,1498 # 3018e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc6>
   29bbc:	00006597          	auipc	a1,0x6
   29bc0:	5c458593          	addi	a1,a1,1476 # 30180 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cb8>
   29bc4:	0000f317          	auipc	t1,0xf
   29bc8:	74433303          	ld	t1,1860(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29bcc:	9302                	c.jalr	t1
   29bce:	b0f5                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bd0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bd4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bd6:	4681                	c.li	a3,0
   29bd8:	00006617          	auipc	a2,0x6
   29bdc:	5c560613          	addi	a2,a2,1477 # 3019d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd5>
   29be0:	00006597          	auipc	a1,0x6
   29be4:	5b058593          	addi	a1,a1,1456 # 30190 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cc8>
   29be8:	0000f317          	auipc	t1,0xf
   29bec:	72033303          	ld	t1,1824(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29bf0:	9302                	c.jalr	t1
   29bf2:	b0e1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29bf4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29bf8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29bfa:	4681                	c.li	a3,0
   29bfc:	00006617          	auipc	a2,0x6
   29c00:	5b760613          	addi	a2,a2,1463 # 301b3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ceb>
   29c04:	00006597          	auipc	a1,0x6
   29c08:	59c58593          	addi	a1,a1,1436 # 301a0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cd8>
   29c0c:	0000f317          	auipc	t1,0xf
   29c10:	6fc33303          	ld	t1,1788(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29c14:	9302                	c.jalr	t1
   29c16:	b055                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c18:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c1c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c1e:	4681                	c.li	a3,0
   29c20:	00006617          	auipc	a2,0x6
   29c24:	5a960613          	addi	a2,a2,1449 # 301c9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d01>
   29c28:	00006597          	auipc	a1,0x6
   29c2c:	59058593          	addi	a1,a1,1424 # 301b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1cf0>
   29c30:	0000f317          	auipc	t1,0xf
   29c34:	6d833303          	ld	t1,1752(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29c38:	9302                	c.jalr	t1
   29c3a:	b041                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c3c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c40:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c42:	4681                	c.li	a3,0
   29c44:	00006617          	auipc	a2,0x6
   29c48:	59660613          	addi	a2,a2,1430 # 301da <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d12>
   29c4c:	00006597          	auipc	a1,0x6
   29c50:	58458593          	addi	a1,a1,1412 # 301d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d08>
   29c54:	0000f317          	auipc	t1,0xf
   29c58:	6b433303          	ld	t1,1716(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29c5c:	9302                	c.jalr	t1
   29c5e:	b8b1                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c60:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c64:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c66:	4681                	c.li	a3,0
   29c68:	00006617          	auipc	a2,0x6
   29c6c:	58a60613          	addi	a2,a2,1418 # 301f2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d2a>
   29c70:	00006597          	auipc	a1,0x6
   29c74:	57058593          	addi	a1,a1,1392 # 301e0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d18>
   29c78:	0000f317          	auipc	t1,0xf
   29c7c:	69033303          	ld	t1,1680(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29c80:	9302                	c.jalr	t1
   29c82:	b825                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29c84:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29c88:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29c8a:	4681                	c.li	a3,0
   29c8c:	00006617          	auipc	a2,0x6
   29c90:	58460613          	addi	a2,a2,1412 # 30210 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d48>
   29c94:	00006597          	auipc	a1,0x6
   29c98:	56458593          	addi	a1,a1,1380 # 301f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d30>
   29c9c:	0000f317          	auipc	t1,0xf
   29ca0:	66c33303          	ld	t1,1644(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29ca4:	9302                	c.jalr	t1
   29ca6:	b811                	c.j	294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ca8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cac:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cae:	4681                	c.li	a3,0
   29cb0:	00006617          	auipc	a2,0x6
   29cb4:	57860613          	addi	a2,a2,1400 # 30228 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d60>
   29cb8:	00006597          	auipc	a1,0x6
   29cbc:	56058593          	addi	a1,a1,1376 # 30218 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d50>
   29cc0:	0000f317          	auipc	t1,0xf
   29cc4:	64833303          	ld	t1,1608(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29cc8:	9302                	c.jalr	t1
   29cca:	ff0ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cce:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cd2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cd4:	4681                	c.li	a3,0
   29cd6:	00006617          	auipc	a2,0x6
   29cda:	57460613          	addi	a2,a2,1396 # 3024a <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d82>
   29cde:	00006597          	auipc	a1,0x6
   29ce2:	55258593          	addi	a1,a1,1362 # 30230 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d68>
   29ce6:	0000f317          	auipc	t1,0xf
   29cea:	62233303          	ld	t1,1570(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29cee:	9302                	c.jalr	t1
   29cf0:	fcaff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29cf4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29cf8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29cfa:	4681                	c.li	a3,0
   29cfc:	00006617          	auipc	a2,0x6
   29d00:	56360613          	addi	a2,a2,1379 # 3025f <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d97>
   29d04:	00006597          	auipc	a1,0x6
   29d08:	54c58593          	addi	a1,a1,1356 # 30250 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d88>
   29d0c:	0000f317          	auipc	t1,0xf
   29d10:	5fc33303          	ld	t1,1532(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29d14:	9302                	c.jalr	t1
   29d16:	fa4ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d1a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d1e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d20:	4681                	c.li	a3,0
   29d22:	00006617          	auipc	a2,0x6
   29d26:	54e60613          	addi	a2,a2,1358 # 30270 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1da8>
   29d2a:	00006597          	auipc	a1,0x6
   29d2e:	53658593          	addi	a1,a1,1334 # 30260 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1d98>
   29d32:	0000f317          	auipc	t1,0xf
   29d36:	5d633303          	ld	t1,1494(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29d3a:	9302                	c.jalr	t1
   29d3c:	f7eff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d40:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d44:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d46:	4681                	c.li	a3,0
   29d48:	00006617          	auipc	a2,0x6
   29d4c:	54360613          	addi	a2,a2,1347 # 3028b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc3>
   29d50:	00006597          	auipc	a1,0x6
   29d54:	52858593          	addi	a1,a1,1320 # 30278 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1db0>
   29d58:	0000f317          	auipc	t1,0xf
   29d5c:	5b033303          	ld	t1,1456(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29d60:	9302                	c.jalr	t1
   29d62:	f58ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d66:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d6a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d6c:	4681                	c.li	a3,0
   29d6e:	00006617          	auipc	a2,0x6
   29d72:	53360613          	addi	a2,a2,1331 # 302a1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dd9>
   29d76:	00006597          	auipc	a1,0x6
   29d7a:	51a58593          	addi	a1,a1,1306 # 30290 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dc8>
   29d7e:	0000f317          	auipc	t1,0xf
   29d82:	58a33303          	ld	t1,1418(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29d86:	9302                	c.jalr	t1
   29d88:	f32ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29d8c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29d90:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29d92:	4681                	c.li	a3,0
   29d94:	00006617          	auipc	a2,0x6
   29d98:	52260613          	addi	a2,a2,1314 # 302b6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dee>
   29d9c:	00006597          	auipc	a1,0x6
   29da0:	50c58593          	addi	a1,a1,1292 # 302a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1de0>
   29da4:	0000f317          	auipc	t1,0xf
   29da8:	56433303          	ld	t1,1380(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29dac:	9302                	c.jalr	t1
   29dae:	f0cff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29db2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29db6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29db8:	4681                	c.li	a3,0
   29dba:	00006617          	auipc	a2,0x6
   29dbe:	50c60613          	addi	a2,a2,1292 # 302c6 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1dfe>
   29dc2:	00006597          	auipc	a1,0x6
   29dc6:	4f658593          	addi	a1,a1,1270 # 302b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1df0>
   29dca:	0000f317          	auipc	t1,0xf
   29dce:	53e33303          	ld	t1,1342(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29dd2:	9302                	c.jalr	t1
   29dd4:	ee6ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29dd8:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ddc:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29dde:	4681                	c.li	a3,0
   29de0:	00006617          	auipc	a2,0x6
   29de4:	4f760613          	addi	a2,a2,1271 # 302d7 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e0f>
   29de8:	00006597          	auipc	a1,0x6
   29dec:	4e058593          	addi	a1,a1,1248 # 302c8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e00>
   29df0:	0000f317          	auipc	t1,0xf
   29df4:	51833303          	ld	t1,1304(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29df8:	9302                	c.jalr	t1
   29dfa:	ec0ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29dfe:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e02:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e04:	4681                	c.li	a3,0
   29e06:	00006617          	auipc	a2,0x6
   29e0a:	4de60613          	addi	a2,a2,1246 # 302e4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e1c>
   29e0e:	00006597          	auipc	a1,0x6
   29e12:	4ca58593          	addi	a1,a1,1226 # 302d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e10>
   29e16:	0000f317          	auipc	t1,0xf
   29e1a:	4f233303          	ld	t1,1266(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29e1e:	9302                	c.jalr	t1
   29e20:	e9aff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e24:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e28:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e2a:	4681                	c.li	a3,0
   29e2c:	00006617          	auipc	a2,0x6
   29e30:	4cc60613          	addi	a2,a2,1228 # 302f8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e30>
   29e34:	00006597          	auipc	a1,0x6
   29e38:	4b458593          	addi	a1,a1,1204 # 302e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e20>
   29e3c:	0000f317          	auipc	t1,0xf
   29e40:	4cc33303          	ld	t1,1228(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29e44:	9302                	c.jalr	t1
   29e46:	e74ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e4a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e4e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e50:	4681                	c.li	a3,0
   29e52:	00006617          	auipc	a2,0x6
   29e56:	4bf60613          	addi	a2,a2,1215 # 30311 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e49>
   29e5a:	00006597          	auipc	a1,0x6
   29e5e:	4a658593          	addi	a1,a1,1190 # 30300 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e38>
   29e62:	0000f317          	auipc	t1,0xf
   29e66:	4a633303          	ld	t1,1190(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29e6a:	9302                	c.jalr	t1
   29e6c:	e4eff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e70:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e74:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e76:	4681                	c.li	a3,0
   29e78:	00006617          	auipc	a2,0x6
   29e7c:	4af60613          	addi	a2,a2,1199 # 30327 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e5f>
   29e80:	00006597          	auipc	a1,0x6
   29e84:	49858593          	addi	a1,a1,1176 # 30318 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e50>
   29e88:	0000f317          	auipc	t1,0xf
   29e8c:	48033303          	ld	t1,1152(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29e90:	9302                	c.jalr	t1
   29e92:	e28ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29e96:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29e9a:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29e9c:	4681                	c.li	a3,0
   29e9e:	00006617          	auipc	a2,0x6
   29ea2:	49960613          	addi	a2,a2,1177 # 30337 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e6f>
   29ea6:	00006597          	auipc	a1,0x6
   29eaa:	48258593          	addi	a1,a1,1154 # 30328 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e60>
   29eae:	0000f317          	auipc	t1,0xf
   29eb2:	45a33303          	ld	t1,1114(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29eb6:	9302                	c.jalr	t1
   29eb8:	e02ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ebc:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ec0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ec2:	4681                	c.li	a3,0
   29ec4:	00006617          	auipc	a2,0x6
   29ec8:	48560613          	addi	a2,a2,1157 # 30349 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e81>
   29ecc:	00006597          	auipc	a1,0x6
   29ed0:	46c58593          	addi	a1,a1,1132 # 30338 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e70>
   29ed4:	0000f317          	auipc	t1,0xf
   29ed8:	43433303          	ld	t1,1076(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29edc:	9302                	c.jalr	t1
   29ede:	ddcff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29ee2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ee6:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ee8:	4681                	c.li	a3,0
   29eea:	00006617          	auipc	a2,0x6
   29eee:	47860613          	addi	a2,a2,1144 # 30362 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e9a>
   29ef2:	00006597          	auipc	a1,0x6
   29ef6:	45e58593          	addi	a1,a1,1118 # 30350 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1e88>
   29efa:	0000f317          	auipc	t1,0xf
   29efe:	40e33303          	ld	t1,1038(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29f02:	9302                	c.jalr	t1
   29f04:	db6ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f08:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f0c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f0e:	4681                	c.li	a3,0
   29f10:	00006617          	auipc	a2,0x6
   29f14:	46b60613          	addi	a2,a2,1131 # 3037b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb3>
   29f18:	00006597          	auipc	a1,0x6
   29f1c:	45058593          	addi	a1,a1,1104 # 30368 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ea0>
   29f20:	0000f317          	auipc	t1,0xf
   29f24:	3e833303          	ld	t1,1000(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29f28:	9302                	c.jalr	t1
   29f2a:	d90ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f2e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f32:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f34:	4681                	c.li	a3,0
   29f36:	00006617          	auipc	a2,0x6
   29f3a:	45560613          	addi	a2,a2,1109 # 3038b <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec3>
   29f3e:	00006597          	auipc	a1,0x6
   29f42:	44258593          	addi	a1,a1,1090 # 30380 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eb8>
   29f46:	0000f317          	auipc	t1,0xf
   29f4a:	3c233303          	ld	t1,962(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29f4e:	9302                	c.jalr	t1
   29f50:	d6aff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f54:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f58:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f5a:	4681                	c.li	a3,0
   29f5c:	00006617          	auipc	a2,0x6
   29f60:	44660613          	addi	a2,a2,1094 # 303a2 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1eda>
   29f64:	00006597          	auipc	a1,0x6
   29f68:	42c58593          	addi	a1,a1,1068 # 30390 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ec8>
   29f6c:	0000f317          	auipc	t1,0xf
   29f70:	39c33303          	ld	t1,924(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29f74:	9302                	c.jalr	t1
   29f76:	d44ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29f7a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29f7e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29f80:	4681                	c.li	a3,0
   29f82:	00006617          	auipc	a2,0x6
   29f86:	43760613          	addi	a2,a2,1079 # 303b9 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef1>
   29f8a:	00006597          	auipc	a1,0x6
   29f8e:	41e58593          	addi	a1,a1,1054 # 303a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ee0>
   29f92:	0000f317          	auipc	t1,0xf
   29f96:	37633303          	ld	t1,886(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29f9a:	9302                	c.jalr	t1
   29f9c:	d1eff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29fa0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29fa4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29fa6:	4681                	c.li	a3,0
   29fa8:	00006617          	auipc	a2,0x6
   29fac:	42c60613          	addi	a2,a2,1068 # 303d4 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f0c>
   29fb0:	00006597          	auipc	a1,0x6
   29fb4:	41058593          	addi	a1,a1,1040 # 303c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ef8>
   29fb8:	0000f317          	auipc	t1,0xf
   29fbc:	35033303          	ld	t1,848(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29fc0:	9302                	c.jalr	t1
   29fc2:	cf8ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29fc6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29fca:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29fcc:	4681                	c.li	a3,0
   29fce:	00006617          	auipc	a2,0x6
   29fd2:	41760613          	addi	a2,a2,1047 # 303e5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f1d>
   29fd6:	00006597          	auipc	a1,0x6
   29fda:	40258593          	addi	a1,a1,1026 # 303d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f10>
   29fde:	0000f317          	auipc	t1,0xf
   29fe2:	32a33303          	ld	t1,810(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   29fe6:	9302                	c.jalr	t1
   29fe8:	cd2ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   29fec:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   29ff0:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   29ff2:	4681                	c.li	a3,0
   29ff4:	00006617          	auipc	a2,0x6
   29ff8:	40860613          	addi	a2,a2,1032 # 303fc <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f34>
   29ffc:	00006597          	auipc	a1,0x6
   2a000:	3ec58593          	addi	a1,a1,1004 # 303e8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f20>
   2a004:	0000f317          	auipc	t1,0xf
   2a008:	30433303          	ld	t1,772(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a00c:	9302                	c.jalr	t1
   2a00e:	cacff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a012:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a016:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a018:	4681                	c.li	a3,0
   2a01a:	00006617          	auipc	a2,0x6
   2a01e:	3f460613          	addi	a2,a2,1012 # 3040e <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f46>
   2a022:	00006597          	auipc	a1,0x6
   2a026:	3de58593          	addi	a1,a1,990 # 30400 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f38>
   2a02a:	0000f317          	auipc	t1,0xf
   2a02e:	2de33303          	ld	t1,734(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a032:	9302                	c.jalr	t1
   2a034:	c86ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a038:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a03c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a03e:	4681                	c.li	a3,0
   2a040:	00006617          	auipc	a2,0x6
   2a044:	3e460613          	addi	a2,a2,996 # 30424 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f5c>
   2a048:	00006597          	auipc	a1,0x6
   2a04c:	3c858593          	addi	a1,a1,968 # 30410 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f48>
   2a050:	0000f317          	auipc	t1,0xf
   2a054:	2b833303          	ld	t1,696(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a058:	9302                	c.jalr	t1
   2a05a:	c60ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a05e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a062:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a064:	4681                	c.li	a3,0
   2a066:	00006617          	auipc	a2,0x6
   2a06a:	3d160613          	addi	a2,a2,977 # 30437 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f6f>
   2a06e:	00006597          	auipc	a1,0x6
   2a072:	3ba58593          	addi	a1,a1,954 # 30428 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f60>
   2a076:	0000f317          	auipc	t1,0xf
   2a07a:	29233303          	ld	t1,658(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a07e:	9302                	c.jalr	t1
   2a080:	c3aff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a084:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a088:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a08a:	4681                	c.li	a3,0
   2a08c:	00006617          	auipc	a2,0x6
   2a090:	3bb60613          	addi	a2,a2,955 # 30447 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f7f>
   2a094:	00006597          	auipc	a1,0x6
   2a098:	3a458593          	addi	a1,a1,932 # 30438 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f70>
   2a09c:	0000f317          	auipc	t1,0xf
   2a0a0:	26c33303          	ld	t1,620(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a0a4:	9302                	c.jalr	t1
   2a0a6:	c14ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0aa:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0ae:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0b0:	4681                	c.li	a3,0
   2a0b2:	00006617          	auipc	a2,0x6
   2a0b6:	3a060613          	addi	a2,a2,928 # 30452 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f8a>
   2a0ba:	00006597          	auipc	a1,0x6
   2a0be:	38e58593          	addi	a1,a1,910 # 30448 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f80>
   2a0c2:	0000f317          	auipc	t1,0xf
   2a0c6:	24633303          	ld	t1,582(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a0ca:	9302                	c.jalr	t1
   2a0cc:	beeff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0d0:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0d4:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0d6:	4681                	c.li	a3,0
   2a0d8:	00006617          	auipc	a2,0x6
   2a0dc:	38f60613          	addi	a2,a2,911 # 30467 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f9f>
   2a0e0:	00006597          	auipc	a1,0x6
   2a0e4:	37858593          	addi	a1,a1,888 # 30458 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1f90>
   2a0e8:	0000f317          	auipc	t1,0xf
   2a0ec:	22033303          	ld	t1,544(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a0f0:	9302                	c.jalr	t1
   2a0f2:	bc8ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a0f6:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a0fa:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a0fc:	4681                	c.li	a3,0
   2a0fe:	00006617          	auipc	a2,0x6
   2a102:	37960613          	addi	a2,a2,889 # 30477 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1faf>
   2a106:	00006597          	auipc	a1,0x6
   2a10a:	36258593          	addi	a1,a1,866 # 30468 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fa0>
   2a10e:	0000f317          	auipc	t1,0xf
   2a112:	1fa33303          	ld	t1,506(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a116:	9302                	c.jalr	t1
   2a118:	ba2ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a11c:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a120:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a122:	4681                	c.li	a3,0
   2a124:	00006617          	auipc	a2,0x6
   2a128:	36960613          	addi	a2,a2,873 # 3048d <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc5>
   2a12c:	00006597          	auipc	a1,0x6
   2a130:	34c58593          	addi	a1,a1,844 # 30478 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fb0>
   2a134:	0000f317          	auipc	t1,0xf
   2a138:	1d433303          	ld	t1,468(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a13c:	9302                	c.jalr	t1
   2a13e:	b7cff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a142:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a146:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a148:	4681                	c.li	a3,0
   2a14a:	00006617          	auipc	a2,0x6
   2a14e:	35b60613          	addi	a2,a2,859 # 304a5 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fdd>
   2a152:	00006597          	auipc	a1,0x6
   2a156:	33e58593          	addi	a1,a1,830 # 30490 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fc8>
   2a15a:	0000f317          	auipc	t1,0xf
   2a15e:	1ae33303          	ld	t1,430(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a162:	9302                	c.jalr	t1
   2a164:	b56ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a168:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a16c:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a16e:	4681                	c.li	a3,0
   2a170:	00006617          	auipc	a2,0x6
   2a174:	34860613          	addi	a2,a2,840 # 304b8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff0>
   2a178:	00006597          	auipc	a1,0x6
   2a17c:	33058593          	addi	a1,a1,816 # 304a8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1fe0>
   2a180:	0000f317          	auipc	t1,0xf
   2a184:	18833303          	ld	t1,392(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a188:	9302                	c.jalr	t1
   2a18a:	b30ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a18e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a192:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a194:	4681                	c.li	a3,0
   2a196:	00006617          	auipc	a2,0x6
   2a19a:	33a60613          	addi	a2,a2,826 # 304d0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2008>
   2a19e:	00006597          	auipc	a1,0x6
   2a1a2:	32258593          	addi	a1,a1,802 # 304c0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x1ff8>
   2a1a6:	0000f317          	auipc	t1,0xf
   2a1aa:	16233303          	ld	t1,354(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a1ae:	9302                	c.jalr	t1
   2a1b0:	b0aff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1b4:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a1b8:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a1ba:	4681                	c.li	a3,0
   2a1bc:	00006617          	auipc	a2,0x6
   2a1c0:	32e60613          	addi	a2,a2,814 # 304ea <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2022>
   2a1c4:	00006597          	auipc	a1,0x6
   2a1c8:	31458593          	addi	a1,a1,788 # 304d8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2010>
   2a1cc:	0000f317          	auipc	t1,0xf
   2a1d0:	13c33303          	ld	t1,316(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a1d4:	9302                	c.jalr	t1
   2a1d6:	ae4ff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
        return "(DW_AT)0x" + to_hex((int)v);
   2a1da:	848a                	c.mv	s1,sp
   2a1dc:	8526                	c.mv	a0,s1
   2a1de:	0000f317          	auipc	t1,0xf
   2a1e2:	23a33303          	ld	t1,570(t1) # 39418 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)@@Base+0xf1c2>
   2a1e6:	9302                	c.jalr	t1
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2a1e8:	4725                	c.li	a4,9
   2a1ea:	00006697          	auipc	a3,0x6
   2a1ee:	30668693          	addi	a3,a3,774 # 304f0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2028>
   2a1f2:	4601                	c.li	a2,0
   2a1f4:	4581                	c.li	a1,0
   2a1f6:	8526                	c.mv	a0,s1
   2a1f8:	c68ec0ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2a1fc:	84aa                	c.mv	s1,a0
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a1fe:	01040513          	addi	a0,s0,16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2a202:	e008                	c.sd	a0,0(s0)
      { return _M_dataplus._M_p; }
   2a204:	609c                	c.ld	a5,0(s1)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2a206:	01048913          	addi	s2,s1,16
	if (__str._M_is_local())
   2a20a:	03278563          	beq	a5,s2,2a234 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xdc4>
      { _M_dataplus._M_p = __p; }
   2a20e:	e01c                	c.sd	a5,0(s0)
      { _M_allocated_capacity = __capacity; }
   2a210:	689c                	c.ld	a5,16(s1)
   2a212:	e81c                	c.sd	a5,16(s0)
      { _M_string_length = __length; }
   2a214:	649c                	c.ld	a5,8(s1)
   2a216:	e41c                	c.sd	a5,8(s0)
      { _M_dataplus._M_p = __p; }
   2a218:	0124b023          	sd	s2,0(s1)
      { _M_string_length = __length; }
   2a21c:	0004b423          	sd	zero,8(s1)
	__c1 = __c2;
   2a220:	00048823          	sb	zero,16(s1)
      { return _M_dataplus._M_p; }
   2a224:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2a226:	081c                	c.addi4spn	a5,sp,16
   2a228:	a8f50963          	beq	a0,a5,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2a22c:	ae4ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
   2a230:	a8aff06f          	jal	zero,294ba <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0x4a>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2a234:	6490                	c.ld	a2,8(s1)
   2a236:	0605                	c.addi	a2,1
	if (__n == 0)
   2a238:	de71                	c.beqz	a2,2a214 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xda4>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2a23a:	85ca                	c.mv	a1,s2
   2a23c:	b74ec0ef          	jal	ra,165b0 <memcpy@plt>
   2a240:	bfd1                	c.j	2a214 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xda4>
      { return _M_dataplus._M_p; }
   2a242:	842a                	c.mv	s0,a0
   2a244:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2a246:	081c                	c.addi4spn	a5,sp,16
   2a248:	00f50463          	beq	a0,a5,2a250 <dwarf::to_string[abi:cxx11](dwarf::DW_AT)+0xde0>
   2a24c:	ac4ec0ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2a250:	8522                	c.mv	a0,s0
   2a252:	c9eec0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002a256 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)>:
template <typename T> std::string to_hex(T v) {
   2a256:	7179                	c.addi16sp	sp,-48
   2a258:	f406                	c.sdsp	ra,40(sp)
   2a25a:	f022                	c.sdsp	s0,32(sp)
   2a25c:	ec26                	c.sdsp	s1,24(sp)
   2a25e:	84aa                	c.mv	s1,a0
  if (v == 0)
   2a260:	c989                	c.beqz	a1,2a272 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x1c>
  *pos-- = '\0';
   2a262:	00010423          	sb	zero,8(sp)
   2a266:	00710413          	addi	s0,sp,7
    if (digit < 10)
   2a26a:	46a5                	c.li	a3,9
  while (v && pos >= buf) {
   2a26c:	fff10613          	addi	a2,sp,-1
   2a270:	a82d                	c.j	2a2aa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x54>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a272:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2a276:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2a278:	4681                	c.li	a3,0
   2a27a:	00005617          	auipc	a2,0x5
   2a27e:	e3760613          	addi	a2,a2,-457 # 2f0b1 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe9>
   2a282:	00005597          	auipc	a1,0x5
   2a286:	e2e58593          	addi	a1,a1,-466 # 2f0b0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0xbe8>
   2a28a:	0000f317          	auipc	t1,0xf
   2a28e:	07e33303          	ld	t1,126(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a292:	9302                	c.jalr	t1
   2a294:	a0a1                	c.j	2a2dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x86>
   2a296:	00e40023          	sb	a4,0(s0)
    pos--;
   2a29a:	fff40793          	addi	a5,s0,-1
    v >>= 4;
   2a29e:	4045d59b          	sraiw	a1,a1,0x4
  while (v && pos >= buf) {
   2a2a2:	cd89                	c.beqz	a1,2a2bc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x66>
   2a2a4:	00c78c63          	beq	a5,a2,2a2bc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x66>
    pos--;
   2a2a8:	843e                	c.mv	s0,a5
    int digit = v & 0xf;
   2a2aa:	00f5f793          	andi	a5,a1,15
      *pos = 'a' + (digit - 10);
   2a2ae:	05778713          	addi	a4,a5,87
    if (digit < 10)
   2a2b2:	fef6c2e3          	blt	a3,a5,2a296 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x40>
      *pos = '0' + digit;
   2a2b6:	03078713          	addi	a4,a5,48
   2a2ba:	bff1                	c.j	2a296 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > to_hex<int>(int)+0x40>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2a2bc:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2a2c0:	e09c                	c.sd	a5,0(s1)
	return __builtin_strlen(__s);
   2a2c2:	8522                	c.mv	a0,s0
   2a2c4:	94cec0ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2a2c8:	4681                	c.li	a3,0
   2a2ca:	00a40633          	add	a2,s0,a0
   2a2ce:	85a2                	c.mv	a1,s0
   2a2d0:	8526                	c.mv	a0,s1
   2a2d2:	0000f317          	auipc	t1,0xf
   2a2d6:	03633303          	ld	t1,54(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2a2da:	9302                	c.jalr	t1
}
   2a2dc:	8526                	c.mv	a0,s1
   2a2de:	70a2                	c.ldsp	ra,40(sp)
   2a2e0:	7402                	c.ldsp	s0,32(sp)
   2a2e2:	64e2                	c.ldsp	s1,24(sp)
   2a2e4:	6145                	c.addi16sp	sp,48
   2a2e6:	8082                	c.jr	ra

000000000002a2e8 <elf::elf::get_hdr() const>:
    // isn't super-cheap.
    m->sections.push_back(section(*this, sec));
  }
}

const Ehdr<> &elf::get_hdr() const { return m->hdr; }
   2a2e8:	6108                	c.ld	a0,0(a0)
   2a2ea:	0541                	c.addi	a0,16
   2a2ec:	8082                	c.jr	ra

000000000002a2ee <elf::elf::get_loader() const>:

shared_ptr<loader> elf::get_loader() const { return m->l; }
   2a2ee:	1141                	c.addi	sp,-16
   2a2f0:	e406                	c.sdsp	ra,8(sp)
   2a2f2:	e022                	c.sdsp	s0,0(sp)
   2a2f4:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   2a2f6:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a2f8:	6398                	c.ld	a4,0(a5)
   2a2fa:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   2a2fc:	6788                	c.ld	a0,8(a5)
   2a2fe:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2a300:	c919                	c.beqz	a0,2a316 <elf::elf::get_loader() const+0x28>
    if (__is_single_threaded())
   2a302:	0000f797          	auipc	a5,0xf
   2a306:	17e7b783          	ld	a5,382(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a30a:	0007c783          	lbu	a5,0(a5)
   2a30e:	cb89                	c.beqz	a5,2a320 <elf::elf::get_loader() const+0x32>
  { *__mem += __val; }
   2a310:	591c                	c.lw	a5,48(a0)
   2a312:	2785                	c.addiw	a5,1
   2a314:	d91c                	c.sw	a5,48(a0)
   2a316:	8522                	c.mv	a0,s0
   2a318:	60a2                	c.ldsp	ra,8(sp)
   2a31a:	6402                	c.ldsp	s0,0(sp)
   2a31c:	0141                	c.addi	sp,16
   2a31e:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2a320:	4585                	c.li	a1,1
   2a322:	03050513          	addi	a0,a0,48
   2a326:	82aec0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a32a:	b7f5                	c.j	2a316 <elf::elf::get_loader() const+0x28>

000000000002a32c <elf::elf::sections() const>:

const std::vector<section> &elf::sections() const { return m->sections; }
   2a32c:	6108                	c.ld	a0,0(a0)
   2a32e:	05050513          	addi	a0,a0,80
   2a332:	8082                	c.jr	ra

000000000002a334 <elf::elf::segments() const>:

const std::vector<segment> &elf::segments() const { return m->segments; }
   2a334:	6108                	c.ld	a0,0(a0)
   2a336:	06850513          	addi	a0,a0,104
   2a33a:	8082                	c.jr	ra

000000000002a33c <elf::elf::get_section(unsigned int) const>:
    if (name == sec.get_name(nullptr))
      return sec;
  return m->invalid_section;
}

const section &elf::get_section(unsigned index) const {
   2a33c:	1101                	c.addi	sp,-32
   2a33e:	ec06                	c.sdsp	ra,24(sp)
   2a340:	e822                	c.sdsp	s0,16(sp)
   2a342:	e426                	c.sdsp	s1,8(sp)
   2a344:	84aa                	c.mv	s1,a0
  if (index >= sections().size())
   2a346:	02059413          	slli	s0,a1,0x20
   2a34a:	9001                	c.srli	s0,0x20
   2a34c:	fe1ff0ef          	jal	ra,2a32c <elf::elf::sections() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a350:	651c                	c.ld	a5,8(a0)
   2a352:	6118                	c.ld	a4,0(a0)
   2a354:	8f99                	c.sub	a5,a4
   2a356:	8791                	c.srai	a5,0x4
   2a358:	00f46a63          	bltu	s0,a5,2a36c <elf::elf::get_section(unsigned int) const+0x30>
    return m->invalid_section;
   2a35c:	6088                	c.ld	a0,0(s1)
   2a35e:	08050513          	addi	a0,a0,128
  return sections().at(index);
}
   2a362:	60e2                	c.ldsp	ra,24(sp)
   2a364:	6442                	c.ldsp	s0,16(sp)
   2a366:	64a2                	c.ldsp	s1,8(sp)
   2a368:	6105                	c.addi16sp	sp,32
   2a36a:	8082                	c.jr	ra
  return sections().at(index);
   2a36c:	8526                	c.mv	a0,s1
   2a36e:	fbfff0ef          	jal	ra,2a32c <elf::elf::sections() const>
   2a372:	611c                	c.ld	a5,0(a0)
   2a374:	6510                	c.ld	a2,8(a0)
   2a376:	8e1d                	c.sub	a2,a5
   2a378:	8611                	c.srai	a2,0x4
	return *(this->_M_impl._M_start + __n);
   2a37a:	00441713          	slli	a4,s0,0x4
   2a37e:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   2a382:	fec460e3          	bltu	s0,a2,2a362 <elf::elf::get_section(unsigned int) const+0x26>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   2a386:	85a2                	c.mv	a1,s0
   2a388:	00007517          	auipc	a0,0x7
   2a38c:	89850513          	addi	a0,a0,-1896 # 30c20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   2a390:	ab0ec0ef          	jal	ra,16640 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

000000000002a394 <elf::elf::get_segment(unsigned int) const>:

const segment &elf::get_segment(unsigned index) const {
   2a394:	1101                	c.addi	sp,-32
   2a396:	ec06                	c.sdsp	ra,24(sp)
   2a398:	e822                	c.sdsp	s0,16(sp)
   2a39a:	e426                	c.sdsp	s1,8(sp)
   2a39c:	84aa                	c.mv	s1,a0
  if (index >= segments().size())
   2a39e:	02059413          	slli	s0,a1,0x20
   2a3a2:	9001                	c.srli	s0,0x20
   2a3a4:	f91ff0ef          	jal	ra,2a334 <elf::elf::segments() const>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2a3a8:	651c                	c.ld	a5,8(a0)
   2a3aa:	6118                	c.ld	a4,0(a0)
   2a3ac:	8f99                	c.sub	a5,a4
   2a3ae:	8791                	c.srai	a5,0x4
   2a3b0:	00f46a63          	bltu	s0,a5,2a3c4 <elf::elf::get_segment(unsigned int) const+0x30>
    return m->invalid_segment;
   2a3b4:	6088                	c.ld	a0,0(s1)
   2a3b6:	09050513          	addi	a0,a0,144
  return segments().at(index);
}
   2a3ba:	60e2                	c.ldsp	ra,24(sp)
   2a3bc:	6442                	c.ldsp	s0,16(sp)
   2a3be:	64a2                	c.ldsp	s1,8(sp)
   2a3c0:	6105                	c.addi16sp	sp,32
   2a3c2:	8082                	c.jr	ra
  return segments().at(index);
   2a3c4:	8526                	c.mv	a0,s1
   2a3c6:	f6fff0ef          	jal	ra,2a334 <elf::elf::segments() const>
   2a3ca:	611c                	c.ld	a5,0(a0)
   2a3cc:	6510                	c.ld	a2,8(a0)
   2a3ce:	8e1d                	c.sub	a2,a5
   2a3d0:	8611                	c.srai	a2,0x4
	return *(this->_M_impl._M_start + __n);
   2a3d2:	00441713          	slli	a4,s0,0x4
   2a3d6:	00e78533          	add	a0,a5,a4
	if (__n >= this->size())
   2a3da:	fec460e3          	bltu	s0,a2,2a3ba <elf::elf::get_segment(unsigned int) const+0x26>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   2a3de:	85a2                	c.mv	a1,s0
   2a3e0:	00007517          	auipc	a0,0x7
   2a3e4:	84050513          	addi	a0,a0,-1984 # 30c20 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2758>
   2a3e8:	a58ec0ef          	jal	ra,16640 <std::__throw_out_of_range_fmt(char const*, ...)@plt>

000000000002a3ec <elf::segment::get_hdr() const>:

segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Phdr<> &segment::get_hdr() const { return m->hdr; }
   2a3ec:	6108                	c.ld	a0,0(a0)
   2a3ee:	0541                	c.addi	a0,16
   2a3f0:	8082                	c.jr	ra

000000000002a3f2 <elf::segment::data() const>:

const void *segment::data() const {
   2a3f2:	7179                	c.addi16sp	sp,-48
   2a3f4:	f406                	c.sdsp	ra,40(sp)
   2a3f6:	f022                	c.sdsp	s0,32(sp)
   2a3f8:	ec26                	c.sdsp	s1,24(sp)
   2a3fa:	842a                	c.mv	s0,a0
      { return _M_ptr; }
   2a3fc:	610c                	c.ld	a1,0(a0)
  if (!m->data)
   2a3fe:	65bc                	c.ld	a5,72(a1)
   2a400:	cb81                	c.beqz	a5,2a410 <elf::segment::data() const+0x1e>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
  return m->data;
   2a402:	601c                	c.ld	a5,0(s0)
   2a404:	67a8                	c.ld	a0,72(a5)
}
   2a406:	70a2                	c.ldsp	ra,40(sp)
   2a408:	7402                	c.ldsp	s0,32(sp)
   2a40a:	64e2                	c.ldsp	s1,24(sp)
   2a40c:	6145                	c.addi16sp	sp,48
   2a40e:	8082                	c.jr	ra
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.filesz);
   2a410:	850a                	c.mv	a0,sp
   2a412:	eddff0ef          	jal	ra,2a2ee <elf::elf::get_loader() const>
   2a416:	6502                	c.ldsp	a0,0(sp)
   2a418:	6004                	c.ld	s1,0(s0)
   2a41a:	611c                	c.ld	a5,0(a0)
   2a41c:	6b9c                	c.ld	a5,16(a5)
   2a41e:	7890                	c.ld	a2,48(s1)
   2a420:	6c8c                	c.ld	a1,24(s1)
   2a422:	9782                	c.jalr	a5
   2a424:	e4a8                	c.sd	a0,72(s1)
	if (_M_pi != nullptr)
   2a426:	64a2                	c.ldsp	s1,8(sp)
   2a428:	dce9                	c.beqz	s1,2a402 <elf::segment::data() const+0x10>
    if (__is_single_threaded())
   2a42a:	0000f797          	auipc	a5,0xf
   2a42e:	0567b783          	ld	a5,86(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a432:	0007c783          	lbu	a5,0(a5)
   2a436:	c3a9                	c.beqz	a5,2a478 <elf::segment::data() const+0x86>
    _Atomic_word __result = *__mem;
   2a438:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2a43a:	fff5079b          	addiw	a5,a0,-1
   2a43e:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a440:	4785                	c.li	a5,1
   2a442:	fcf510e3          	bne	a0,a5,2a402 <elf::segment::data() const+0x10>
	_M_dispose();
   2a446:	609c                	c.ld	a5,0(s1)
   2a448:	6b9c                	c.ld	a5,16(a5)
   2a44a:	8526                	c.mv	a0,s1
   2a44c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a44e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a452:	0000f797          	auipc	a5,0xf
   2a456:	02e7b783          	ld	a5,46(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a45a:	0007c783          	lbu	a5,0(a5)
   2a45e:	c39d                	c.beqz	a5,2a484 <elf::segment::data() const+0x92>
    _Atomic_word __result = *__mem;
   2a460:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2a462:	fff5079b          	addiw	a5,a0,-1
   2a466:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a468:	4785                	c.li	a5,1
   2a46a:	f8f51ce3          	bne	a0,a5,2a402 <elf::segment::data() const+0x10>
	    _M_destroy();
   2a46e:	609c                	c.ld	a5,0(s1)
   2a470:	6f9c                	c.ld	a5,24(a5)
   2a472:	8526                	c.mv	a0,s1
   2a474:	9782                	c.jalr	a5
   2a476:	b771                	c.j	2a402 <elf::segment::data() const+0x10>
      return __exchange_and_add(__mem, __val);
   2a478:	55fd                	c.li	a1,-1
   2a47a:	03048513          	addi	a0,s1,48
   2a47e:	f03eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a482:	bf7d                	c.j	2a440 <elf::segment::data() const+0x4e>
   2a484:	55fd                	c.li	a1,-1
   2a486:	03448513          	addi	a0,s1,52
   2a48a:	ef7eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a48e:	bfe9                	c.j	2a468 <elf::segment::data() const+0x76>
	if (_M_pi != nullptr)
   2a490:	842a                	c.mv	s0,a0
   2a492:	6522                	c.ldsp	a0,8(sp)
   2a494:	c511                	c.beqz	a0,2a4a0 <elf::segment::data() const+0xae>
	  _M_pi->_M_release();
   2a496:	0000f317          	auipc	t1,0xf
   2a49a:	f3233303          	ld	t1,-206(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2a49e:	9302                	c.jalr	t1
   2a4a0:	8522                	c.mv	a0,s0
   2a4a2:	a4eec0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002a4a6 <elf::segment::file_size() const>:

size_t segment::file_size() const { return m->hdr.filesz; }
   2a4a6:	611c                	c.ld	a5,0(a0)
   2a4a8:	7b88                	c.ld	a0,48(a5)
   2a4aa:	8082                	c.jr	ra

000000000002a4ac <elf::segment::mem_size() const>:

size_t segment::mem_size() const { return m->hdr.memsz; }
   2a4ac:	611c                	c.ld	a5,0(a0)
   2a4ae:	7f88                	c.ld	a0,56(a5)
   2a4b0:	8082                	c.jr	ra

000000000002a4b2 <elf::section::get_hdr() const>:

section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const Shdr<> &section::get_hdr() const { return m->hdr; }
   2a4b2:	6108                	c.ld	a0,0(a0)
   2a4b4:	0541                	c.addi	a0,16
   2a4b6:	8082                	c.jr	ra

000000000002a4b8 <elf::section::data() const>:
      { return _M_ptr; }
   2a4b8:	610c                	c.ld	a1,0(a0)
}

string section::get_name() const { return get_name(nullptr); }

const void *section::data() const {
  if (m->hdr.type == sht::nobits)
   2a4ba:	49d8                	c.lw	a4,20(a1)
   2a4bc:	47a1                	c.li	a5,8
   2a4be:	0af70063          	beq	a4,a5,2a55e <elf::section::data() const+0xa6>
const void *section::data() const {
   2a4c2:	7179                	c.addi16sp	sp,-48
   2a4c4:	f406                	c.sdsp	ra,40(sp)
   2a4c6:	f022                	c.sdsp	s0,32(sp)
   2a4c8:	ec26                	c.sdsp	s1,24(sp)
   2a4ca:	842a                	c.mv	s0,a0
    return nullptr;
  if (!m->data)
   2a4cc:	71bc                	c.ld	a5,96(a1)
   2a4ce:	cb81                	c.beqz	a5,2a4de <elf::section::data() const+0x26>
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
  return m->data;
   2a4d0:	601c                	c.ld	a5,0(s0)
   2a4d2:	73a8                	c.ld	a0,96(a5)
}
   2a4d4:	70a2                	c.ldsp	ra,40(sp)
   2a4d6:	7402                	c.ldsp	s0,32(sp)
   2a4d8:	64e2                	c.ldsp	s1,24(sp)
   2a4da:	6145                	c.addi16sp	sp,48
   2a4dc:	8082                	c.jr	ra
    m->data = m->f.get_loader()->load(m->hdr.offset, m->hdr.size);
   2a4de:	850a                	c.mv	a0,sp
   2a4e0:	e0fff0ef          	jal	ra,2a2ee <elf::elf::get_loader() const>
   2a4e4:	6502                	c.ldsp	a0,0(sp)
   2a4e6:	6004                	c.ld	s1,0(s0)
   2a4e8:	611c                	c.ld	a5,0(a0)
   2a4ea:	6b9c                	c.ld	a5,16(a5)
   2a4ec:	7890                	c.ld	a2,48(s1)
   2a4ee:	748c                	c.ld	a1,40(s1)
   2a4f0:	9782                	c.jalr	a5
   2a4f2:	f0a8                	c.sd	a0,96(s1)
	if (_M_pi != nullptr)
   2a4f4:	64a2                	c.ldsp	s1,8(sp)
   2a4f6:	dce9                	c.beqz	s1,2a4d0 <elf::section::data() const+0x18>
    if (__is_single_threaded())
   2a4f8:	0000f797          	auipc	a5,0xf
   2a4fc:	f887b783          	ld	a5,-120(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a500:	0007c783          	lbu	a5,0(a5)
   2a504:	c3a9                	c.beqz	a5,2a546 <elf::section::data() const+0x8e>
    _Atomic_word __result = *__mem;
   2a506:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2a508:	fff5079b          	addiw	a5,a0,-1
   2a50c:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a50e:	4785                	c.li	a5,1
   2a510:	fcf510e3          	bne	a0,a5,2a4d0 <elf::section::data() const+0x18>
	_M_dispose();
   2a514:	609c                	c.ld	a5,0(s1)
   2a516:	6b9c                	c.ld	a5,16(a5)
   2a518:	8526                	c.mv	a0,s1
   2a51a:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a51c:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a520:	0000f797          	auipc	a5,0xf
   2a524:	f607b783          	ld	a5,-160(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a528:	0007c783          	lbu	a5,0(a5)
   2a52c:	c39d                	c.beqz	a5,2a552 <elf::section::data() const+0x9a>
    _Atomic_word __result = *__mem;
   2a52e:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2a530:	fff5079b          	addiw	a5,a0,-1
   2a534:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a536:	4785                	c.li	a5,1
   2a538:	f8f51ce3          	bne	a0,a5,2a4d0 <elf::section::data() const+0x18>
	    _M_destroy();
   2a53c:	609c                	c.ld	a5,0(s1)
   2a53e:	6f9c                	c.ld	a5,24(a5)
   2a540:	8526                	c.mv	a0,s1
   2a542:	9782                	c.jalr	a5
   2a544:	b771                	c.j	2a4d0 <elf::section::data() const+0x18>
      return __exchange_and_add(__mem, __val);
   2a546:	55fd                	c.li	a1,-1
   2a548:	03048513          	addi	a0,s1,48
   2a54c:	e35eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a550:	bf7d                	c.j	2a50e <elf::section::data() const+0x56>
   2a552:	55fd                	c.li	a1,-1
   2a554:	03448513          	addi	a0,s1,52
   2a558:	e29eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a55c:	bfe9                	c.j	2a536 <elf::section::data() const+0x7e>
    return nullptr;
   2a55e:	4501                	c.li	a0,0
}
   2a560:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2a562:	842a                	c.mv	s0,a0
   2a564:	6522                	c.ldsp	a0,8(sp)
   2a566:	c511                	c.beqz	a0,2a572 <elf::section::data() const+0xba>
	  _M_pi->_M_release();
   2a568:	0000f317          	auipc	t1,0xf
   2a56c:	e6033303          	ld	t1,-416(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2a570:	9302                	c.jalr	t1
   2a572:	8522                	c.mv	a0,s0
   2a574:	97cec0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002a578 <elf::section::size() const>:

size_t section::size() const { return m->hdr.size; }
   2a578:	611c                	c.ld	a5,0(a0)
   2a57a:	7b88                	c.ld	a0,48(a5)
   2a57c:	8082                	c.jr	ra

000000000002a57e <elf::strtab::strtab(elf::elf, void const*, unsigned long)>:

  const elf f;
  const char *data, *end;
};

strtab::strtab(elf f, const void *data, size_t size)
   2a57e:	7179                	c.addi16sp	sp,-48
   2a580:	f406                	c.sdsp	ra,40(sp)
   2a582:	f022                	c.sdsp	s0,32(sp)
   2a584:	ec26                	c.sdsp	s1,24(sp)
   2a586:	e84a                	c.sdsp	s2,16(sp)
   2a588:	e44e                	c.sdsp	s3,8(sp)
   2a58a:	e052                	c.sdsp	s4,0(sp)
   2a58c:	892a                	c.mv	s2,a0
   2a58e:	84ae                	c.mv	s1,a1
   2a590:	89b2                	c.mv	s3,a2
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   2a592:	00d60a33          	add	s4,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2a596:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2a59a:	05800513          	addi	a0,zero,88
   2a59e:	f83eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2a5a2:	842a                	c.mv	s0,a0
   2a5a4:	00052423          	sw	zero,8(a0)
   2a5a8:	00052623          	sw	zero,12(a0)
   2a5ac:	00052823          	sw	zero,16(a0)
   2a5b0:	00052a23          	sw	zero,20(a0)
   2a5b4:	00052c23          	sw	zero,24(a0)
   2a5b8:	00052e23          	sw	zero,28(a0)
   2a5bc:	02053023          	sd	zero,32(a0)
   2a5c0:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2a5c4:	4785                	c.li	a5,1
   2a5c6:	d91c                	c.sw	a5,48(a0)
   2a5c8:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2a5ca:	0000f797          	auipc	a5,0xf
   2a5ce:	0267b783          	ld	a5,38(a5) # 395f0 <vtable for std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x910>
   2a5d2:	07c1                	c.addi	a5,16
   2a5d4:	e11c                	c.sd	a5,0(a0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a5d6:	609c                	c.ld	a5,0(s1)
   2a5d8:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2a5da:	6488                	c.ld	a0,8(s1)
   2a5dc:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2a5de:	c919                	c.beqz	a0,2a5f4 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x76>
    if (__is_single_threaded())
   2a5e0:	0000f717          	auipc	a4,0xf
   2a5e4:	ea073703          	ld	a4,-352(a4) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a5e8:	00074703          	lbu	a4,0(a4)
   2a5ec:	c715                	c.beqz	a4,2a618 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x9a>
  { *__mem += __val; }
   2a5ee:	5918                	c.lw	a4,48(a0)
   2a5f0:	2705                	c.addiw	a4,1
   2a5f2:	d918                	c.sw	a4,48(a0)
      : f(f), data(data), end(end) {}
   2a5f4:	05343423          	sd	s3,72(s0)
   2a5f8:	05443823          	sd	s4,80(s0)
	  _M_pi = __pi;
   2a5fc:	00893423          	sd	s0,8(s2)
   2a600:	03840413          	addi	s0,s0,56
	  __p = __pi->_M_ptr();
   2a604:	00893023          	sd	s0,0(s2)
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size)) {}
   2a608:	70a2                	c.ldsp	ra,40(sp)
   2a60a:	7402                	c.ldsp	s0,32(sp)
   2a60c:	64e2                	c.ldsp	s1,24(sp)
   2a60e:	6942                	c.ldsp	s2,16(sp)
   2a610:	69a2                	c.ldsp	s3,8(sp)
   2a612:	6a02                	c.ldsp	s4,0(sp)
   2a614:	6145                	c.addi16sp	sp,48
   2a616:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2a618:	4585                	c.li	a1,1
   2a61a:	03050513          	addi	a0,a0,48
   2a61e:	d33eb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a622:	bfc9                	c.j	2a5f4 <elf::strtab::strtab(elf::elf, void const*, unsigned long)+0x76>

000000000002a624 <elf::section::as_strtab() const>:
strtab section::as_strtab() const {
   2a624:	7179                	c.addi16sp	sp,-48
   2a626:	f406                	c.sdsp	ra,40(sp)
   2a628:	f022                	c.sdsp	s0,32(sp)
   2a62a:	ec26                	c.sdsp	s1,24(sp)
   2a62c:	e84a                	c.sdsp	s2,16(sp)
      { return _M_ptr; }
   2a62e:	619c                	c.ld	a5,0(a1)
  if (m->hdr.type != sht::strtab)
   2a630:	4bd4                	c.lw	a3,20(a5)
   2a632:	470d                	c.li	a4,3
   2a634:	02e69763          	bne	a3,a4,2a662 <elf::section::as_strtab() const+0x3e>
   2a638:	892a                	c.mv	s2,a0
   2a63a:	842e                	c.mv	s0,a1
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2a63c:	6398                	c.ld	a4,0(a5)
   2a63e:	e03a                	c.sdsp	a4,0(sp)
      : _M_pi(__r._M_pi)
   2a640:	6788                	c.ld	a0,8(a5)
   2a642:	e42a                	c.sdsp	a0,8(sp)
	if (_M_pi != nullptr)
   2a644:	c919                	c.beqz	a0,2a65a <elf::section::as_strtab() const+0x36>
    if (__is_single_threaded())
   2a646:	0000f717          	auipc	a4,0xf
   2a64a:	e3a73703          	ld	a4,-454(a4) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a64e:	00074703          	lbu	a4,0(a4)
   2a652:	c339                	c.beqz	a4,2a698 <elf::section::as_strtab() const+0x74>
  { *__mem += __val; }
   2a654:	5918                	c.lw	a4,48(a0)
   2a656:	2705                	c.addiw	a4,1
   2a658:	d918                	c.sw	a4,48(a0)
  return strtab(m->f, data(), size());
   2a65a:	8522                	c.mv	a0,s0
   2a65c:	e5dff0ef          	jal	ra,2a4b8 <elf::section::data() const>
   2a660:	a091                	c.j	2a6a4 <elf::section::as_strtab() const+0x80>
    throw section_type_mismatch("cannot use section as strtab");
   2a662:	4541                	c.li	a0,16
   2a664:	dbdeb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2a668:	842a                	c.mv	s0,a0
class section_type_mismatch : public std::logic_error {
public:
  explicit section_type_mismatch(const std::string &what_arg)
      : std::logic_error(what_arg) {}
  explicit section_type_mismatch(const char *what_arg)
      : std::logic_error(what_arg) {}
   2a66a:	00006597          	auipc	a1,0x6
   2a66e:	60658593          	addi	a1,a1,1542 # 30c70 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27a8>
   2a672:	f0feb0ef          	jal	ra,16580 <std::logic_error::logic_error(char const*)@plt>
   2a676:	0000f797          	auipc	a5,0xf
   2a67a:	d427b783          	ld	a5,-702(a5) # 393b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   2a67e:	07c1                	c.addi	a5,16
   2a680:	e01c                	c.sd	a5,0(s0)
   2a682:	0000f617          	auipc	a2,0xf
   2a686:	c2663603          	ld	a2,-986(a2) # 392a8 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xd8e8>
   2a68a:	0000f597          	auipc	a1,0xf
   2a68e:	c565b583          	ld	a1,-938(a1) # 392e0 <typeinfo for elf::section_type_mismatch@@Base+0x788>
   2a692:	8522                	c.mv	a0,s0
   2a694:	82cec0ef          	jal	ra,166c0 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   2a698:	4585                	c.li	a1,1
   2a69a:	03050513          	addi	a0,a0,48
   2a69e:	cb3eb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2a6a2:	bf65                	c.j	2a65a <elf::section::as_strtab() const+0x36>
  return strtab(m->f, data(), size());
   2a6a4:	84aa                	c.mv	s1,a0
   2a6a6:	8522                	c.mv	a0,s0
   2a6a8:	ed1ff0ef          	jal	ra,2a578 <elf::section::size() const>
   2a6ac:	86aa                	c.mv	a3,a0
   2a6ae:	8626                	c.mv	a2,s1
   2a6b0:	858a                	c.mv	a1,sp
   2a6b2:	854a                	c.mv	a0,s2
   2a6b4:	ecbff0ef          	jal	ra,2a57e <elf::strtab::strtab(elf::elf, void const*, unsigned long)>
	if (_M_pi != nullptr)
   2a6b8:	6422                	c.ldsp	s0,8(sp)
   2a6ba:	cc19                	c.beqz	s0,2a6d8 <elf::section::as_strtab() const+0xb4>
    if (__is_single_threaded())
   2a6bc:	0000f797          	auipc	a5,0xf
   2a6c0:	dc47b783          	ld	a5,-572(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a6c4:	0007c783          	lbu	a5,0(a5)
   2a6c8:	cf99                	c.beqz	a5,2a6e6 <elf::section::as_strtab() const+0xc2>
    _Atomic_word __result = *__mem;
   2a6ca:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2a6cc:	fff5079b          	addiw	a5,a0,-1
   2a6d0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a6d2:	4785                	c.li	a5,1
   2a6d4:	00f50f63          	beq	a0,a5,2a6f2 <elf::section::as_strtab() const+0xce>
}
   2a6d8:	854a                	c.mv	a0,s2
   2a6da:	70a2                	c.ldsp	ra,40(sp)
   2a6dc:	7402                	c.ldsp	s0,32(sp)
   2a6de:	64e2                	c.ldsp	s1,24(sp)
   2a6e0:	6942                	c.ldsp	s2,16(sp)
   2a6e2:	6145                	c.addi16sp	sp,48
   2a6e4:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2a6e6:	55fd                	c.li	a1,-1
   2a6e8:	03040513          	addi	a0,s0,48
   2a6ec:	c95eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a6f0:	b7cd                	c.j	2a6d2 <elf::section::as_strtab() const+0xae>
	_M_dispose();
   2a6f2:	601c                	c.ld	a5,0(s0)
   2a6f4:	6b9c                	c.ld	a5,16(a5)
   2a6f6:	8522                	c.mv	a0,s0
   2a6f8:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a6fa:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a6fe:	0000f797          	auipc	a5,0xf
   2a702:	d827b783          	ld	a5,-638(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a706:	0007c783          	lbu	a5,0(a5)
   2a70a:	cf89                	c.beqz	a5,2a724 <elf::section::as_strtab() const+0x100>
    _Atomic_word __result = *__mem;
   2a70c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2a70e:	fff5079b          	addiw	a5,a0,-1
   2a712:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2a714:	4785                	c.li	a5,1
   2a716:	fcf511e3          	bne	a0,a5,2a6d8 <elf::section::as_strtab() const+0xb4>
	    _M_destroy();
   2a71a:	601c                	c.ld	a5,0(s0)
   2a71c:	6f9c                	c.ld	a5,24(a5)
   2a71e:	8522                	c.mv	a0,s0
   2a720:	9782                	c.jalr	a5
  return strtab(m->f, data(), size());
   2a722:	bf5d                	c.j	2a6d8 <elf::section::as_strtab() const+0xb4>
      return __exchange_and_add(__mem, __val);
   2a724:	55fd                	c.li	a1,-1
   2a726:	03440513          	addi	a0,s0,52
   2a72a:	c57eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2a72e:	b7dd                	c.j	2a714 <elf::section::as_strtab() const+0xf0>
    throw section_type_mismatch("cannot use section as strtab");
   2a730:	84aa                	c.mv	s1,a0
   2a732:	8522                	c.mv	a0,s0
   2a734:	d9deb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2a738:	8526                	c.mv	a0,s1
   2a73a:	fb7eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2a73e:	842a                	c.mv	s0,a0
   2a740:	6522                	c.ldsp	a0,8(sp)
   2a742:	c511                	c.beqz	a0,2a74e <elf::section::as_strtab() const+0x12a>
	  _M_pi->_M_release();
   2a744:	0000f317          	auipc	t1,0xf
   2a748:	c8433303          	ld	t1,-892(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2a74c:	9302                	c.jalr	t1
   2a74e:	8522                	c.mv	a0,s0
   2a750:	fa1eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002a754 <elf::strtab::get(unsigned long, unsigned long*) const>:

const char *strtab::get(Elf64::Off offset, size_t *len_out) const {
   2a754:	7119                	c.addi16sp	sp,-128
   2a756:	fc86                	c.sdsp	ra,120(sp)
   2a758:	f8a2                	c.sdsp	s0,112(sp)
   2a75a:	f4a6                	c.sdsp	s1,104(sp)
      { return _M_ptr; }
   2a75c:	611c                	c.ld	a5,0(a0)
  const char *start = m->data + offset;
   2a75e:	6b88                	c.ld	a0,16(a5)
   2a760:	952e                	c.add	a0,a1

  if (start >= m->end)
   2a762:	6f94                	c.ld	a3,24(a5)
    throw range_error("string offset " + std::to_string(offset) +
                      " exceeds section size");

  // Find the null terminator
  const char *p = start;
   2a764:	87aa                	c.mv	a5,a0
  if (start >= m->end)
   2a766:	02d57463          	bgeu	a0,a3,2a78e <elf::strtab::get(unsigned long, unsigned long*) const+0x3a>
  while (p < m->end && *p)
   2a76a:	0007c703          	lbu	a4,0(a5)
   2a76e:	16070263          	beq	a4,zero,2a8d2 <elf::strtab::get(unsigned long, unsigned long*) const+0x17e>
    p++;
   2a772:	0785                	c.addi	a5,1
  while (p < m->end && *p)
   2a774:	fef69be3          	bne	a3,a5,2a76a <elf::strtab::get(unsigned long, unsigned long*) const+0x16>
  if (p == m->end)
    throw format_error("unterminated string");
   2a778:	4541                	c.li	a0,16
   2a77a:	ca7eb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2a77e:	842a                	c.mv	s0,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2a780:	00003597          	auipc	a1,0x3
   2a784:	d5058593          	addi	a1,a1,-688 # 2d4d0 <std::piecewise_construct+0x38>
   2a788:	fe9eb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2a78c:	aaa9                	c.j	2a8e6 <elf::strtab::get(unsigned long, unsigned long*) const+0x192>
   2a78e:	842e                	c.mv	s0,a1
                      " exceeds section size");
   2a790:	4541                	c.li	a0,16
   2a792:	c8feb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2a796:	84aa                	c.mv	s1,a0
   2a798:	87a2                	c.mv	a5,s0
      unsigned __n = 1;
   2a79a:	4585                	c.li	a1,1
	  if (__value < (unsigned)__base) return __n;
   2a79c:	4825                	c.li	a6,9
	  if (__value < __b2) return __n + 1;
   2a79e:	06300513          	addi	a0,zero,99
	  if (__value < __b3) return __n + 2;
   2a7a2:	3e700613          	addi	a2,zero,999
	  if (__value < __b4) return __n + 3;
   2a7a6:	6709                	c.lui	a4,0x2
   2a7a8:	70f70693          	addi	a3,a4,1807 # 270f <__abi_tag-0xdb85>
	  __value /= __b4;
   2a7ac:	71070713          	addi	a4,a4,1808
	  if (__value < (unsigned)__base) return __n;
   2a7b0:	00f87563          	bgeu	a6,a5,2a7ba <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  if (__value < __b2) return __n + 1;
   2a7b4:	00f56c63          	bltu	a0,a5,2a7cc <elf::strtab::get(unsigned long, unsigned long*) const+0x78>
   2a7b8:	2585                	c.addiw	a1,1
	: allocator_type(__a), _M_p(__dat) { }
   2a7ba:	081c                	c.addi4spn	a5,sp,16
   2a7bc:	e03e                	c.sdsp	a5,0(sp)
      { _M_construct(__n, __c); }
   2a7be:	4601                	c.li	a2,0
   2a7c0:	1582                	c.slli	a1,0x20
   2a7c2:	9181                	c.srli	a1,0x20
   2a7c4:	850a                	c.mv	a0,sp
   2a7c6:	dabeb0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
   2a7ca:	a829                	c.j	2a7e4 <elf::strtab::get(unsigned long, unsigned long*) const+0x90>
	  if (__value < __b3) return __n + 2;
   2a7cc:	00f66463          	bltu	a2,a5,2a7d4 <elf::strtab::get(unsigned long, unsigned long*) const+0x80>
   2a7d0:	2589                	c.addiw	a1,2
   2a7d2:	b7e5                	c.j	2a7ba <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  if (__value < __b4) return __n + 3;
   2a7d4:	00f6e463          	bltu	a3,a5,2a7dc <elf::strtab::get(unsigned long, unsigned long*) const+0x88>
   2a7d8:	258d                	c.addiw	a1,3
   2a7da:	b7c5                	c.j	2a7ba <elf::strtab::get(unsigned long, unsigned long*) const+0x66>
	  __value /= __b4;
   2a7dc:	02e7d7b3          	divu	a5,a5,a4
	  __n += 4;
   2a7e0:	2591                	c.addiw	a1,4
	  if (__value < (unsigned)__base) return __n;
   2a7e2:	b7f9                	c.j	2a7b0 <elf::strtab::get(unsigned long, unsigned long*) const+0x5c>
      { return _M_dataplus._M_p; }
   2a7e4:	6602                	c.ldsp	a2,0(sp)
      unsigned __pos = __len - 1;
   2a7e6:	67a2                	c.ldsp	a5,8(sp)
   2a7e8:	37fd                	c.addiw	a5,-1
      while (__val >= 100)
   2a7ea:	06300813          	addi	a6,zero,99
	  auto const __num = (__val % 100) * 2;
   2a7ee:	06400593          	addi	a1,zero,100
	  __first[__pos] = __digits[__num + 1];
   2a7f2:	0000f517          	auipc	a0,0xf
   2a7f6:	c7653503          	ld	a0,-906(a0) # 39468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbad8>
      while (__val >= 100)
   2a7fa:	02886c63          	bltu	a6,s0,2a832 <elf::strtab::get(unsigned long, unsigned long*) const+0xde>
      if (__val >= 10)
   2a7fe:	47a5                	c.li	a5,9
   2a800:	0687f263          	bgeu	a5,s0,2a864 <elf::strtab::get(unsigned long, unsigned long*) const+0x110>
	  auto const __num = __val * 2;
   2a804:	0406                	c.slli	s0,0x1
	  __first[1] = __digits[__num + 1];
   2a806:	0000f797          	auipc	a5,0xf
   2a80a:	c627b783          	ld	a5,-926(a5) # 39468 <std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@@Base+0xbad8>
   2a80e:	97a2                	c.add	a5,s0
   2a810:	0017c703          	lbu	a4,1(a5)
   2a814:	00e600a3          	sb	a4,1(a2)
	  __first[0] = __digits[__num];
   2a818:	0007c783          	lbu	a5,0(a5)
   2a81c:	00f60023          	sb	a5,0(a2)
    { return std::move(__rhs.insert(0, __lhs)); }
   2a820:	00006617          	auipc	a2,0x6
   2a824:	47060613          	addi	a2,a2,1136 # 30c90 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27c8>
   2a828:	4581                	c.li	a1,0
   2a82a:	850a                	c.mv	a0,sp
   2a82c:	b65eb0ef          	jal	ra,16390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)@plt>
   2a830:	a83d                	c.j	2a86e <elf::strtab::get(unsigned long, unsigned long*) const+0x11a>
	  auto const __num = (__val % 100) * 2;
   2a832:	02b47733          	remu	a4,s0,a1
   2a836:	0706                	c.slli	a4,0x1
	  __val /= 100;
   2a838:	02b45433          	divu	s0,s0,a1
	  __first[__pos] = __digits[__num + 1];
   2a83c:	02079693          	slli	a3,a5,0x20
   2a840:	9281                	c.srli	a3,0x20
   2a842:	96b2                	c.add	a3,a2
   2a844:	972a                	c.add	a4,a0
   2a846:	00174883          	lbu	a7,1(a4)
   2a84a:	01168023          	sb	a7,0(a3)
	  __first[__pos - 1] = __digits[__num];
   2a84e:	fff7869b          	addiw	a3,a5,-1
   2a852:	1682                	c.slli	a3,0x20
   2a854:	9281                	c.srli	a3,0x20
   2a856:	96b2                	c.add	a3,a2
   2a858:	00074703          	lbu	a4,0(a4)
   2a85c:	00e68023          	sb	a4,0(a3)
	  __pos -= 2;
   2a860:	37f9                	c.addiw	a5,-2
   2a862:	bf61                	c.j	2a7fa <elf::strtab::get(unsigned long, unsigned long*) const+0xa6>
	__first[0] = '0' + __val;
   2a864:	0304079b          	addiw	a5,s0,48
   2a868:	0ff7f793          	andi	a5,a5,255
   2a86c:	bf45                	c.j	2a81c <elf::strtab::get(unsigned long, unsigned long*) const+0xc8>
   2a86e:	85aa                	c.mv	a1,a0
   2a870:	1000                	c.addi4spn	s0,sp,32
   2a872:	8522                	c.mv	a0,s0
   2a874:	bfdeb0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    { return std::move(__lhs.append(__rhs)); }
   2a878:	00006597          	auipc	a1,0x6
   2a87c:	42858593          	addi	a1,a1,1064 # 30ca0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27d8>
   2a880:	8522                	c.mv	a0,s0
   2a882:	f1feb0ef          	jal	ra,167a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)@plt>
   2a886:	85aa                	c.mv	a1,a0
   2a888:	0080                	c.addi4spn	s0,sp,64
   2a88a:	8522                	c.mv	a0,s0
   2a88c:	be5eb0ef          	jal	ra,16470 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    throw range_error("string offset " + std::to_string(offset) +
   2a890:	85a2                	c.mv	a1,s0
   2a892:	8526                	c.mv	a0,s1
   2a894:	f1deb0ef          	jal	ra,167b0 <std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
      { return _M_dataplus._M_p; }
   2a898:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2a89a:	089c                	c.addi4spn	a5,sp,80
   2a89c:	00f50463          	beq	a0,a5,2a8a4 <elf::strtab::get(unsigned long, unsigned long*) const+0x150>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2a8a0:	c71eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a8a4:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2a8a6:	181c                	c.addi4spn	a5,sp,48
   2a8a8:	00f50463          	beq	a0,a5,2a8b0 <elf::strtab::get(unsigned long, unsigned long*) const+0x15c>
   2a8ac:	c65eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a8b0:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2a8b2:	081c                	c.addi4spn	a5,sp,16
   2a8b4:	00f50463          	beq	a0,a5,2a8bc <elf::strtab::get(unsigned long, unsigned long*) const+0x168>
   2a8b8:	c59eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
                      " exceeds section size");
   2a8bc:	0000f617          	auipc	a2,0xf
   2a8c0:	b2463603          	ld	a2,-1244(a2) # 393e0 <std::range_error::~range_error()@GLIBCXX_3.4>
   2a8c4:	0000f597          	auipc	a1,0xf
   2a8c8:	c8c5b583          	ld	a1,-884(a1) # 39550 <typeinfo for std::range_error@GLIBCXX_3.4>
   2a8cc:	8526                	c.mv	a0,s1
   2a8ce:	df3eb0ef          	jal	ra,166c0 <__cxa_throw@plt>
  if (p == m->end)
   2a8d2:	eaf683e3          	beq	a3,a5,2a778 <elf::strtab::get(unsigned long, unsigned long*) const+0x24>

  if (len_out)
   2a8d6:	c219                	c.beqz	a2,2a8dc <elf::strtab::get(unsigned long, unsigned long*) const+0x188>
    *len_out = p - start;
   2a8d8:	8f89                	c.sub	a5,a0
   2a8da:	e21c                	c.sd	a5,0(a2)
  return start;
}
   2a8dc:	70e6                	c.ldsp	ra,120(sp)
   2a8de:	7446                	c.ldsp	s0,112(sp)
   2a8e0:	74a6                	c.ldsp	s1,104(sp)
   2a8e2:	6109                	c.addi16sp	sp,128
   2a8e4:	8082                	c.jr	ra
   2a8e6:	0000f797          	auipc	a5,0xf
   2a8ea:	a5a7b783          	ld	a5,-1446(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2a8ee:	07c1                	c.addi	a5,16
   2a8f0:	e01c                	c.sd	a5,0(s0)
    throw format_error("unterminated string");
   2a8f2:	0000f617          	auipc	a2,0xf
   2a8f6:	c7663603          	ld	a2,-906(a2) # 39568 <elf::format_error::~format_error()@@Base+0xdcc8>
   2a8fa:	0000f597          	auipc	a1,0xf
   2a8fe:	a265b583          	ld	a1,-1498(a1) # 39320 <typeinfo for elf::format_error@@Base+0x7e0>
   2a902:	8522                	c.mv	a0,s0
   2a904:	dbdeb0ef          	jal	ra,166c0 <__cxa_throw@plt>
      { return _M_dataplus._M_p; }
   2a908:	842a                	c.mv	s0,a0
   2a90a:	6506                	c.ldsp	a0,64(sp)
	if (!_M_is_local())
   2a90c:	089c                	c.addi4spn	a5,sp,80
   2a90e:	00f50463          	beq	a0,a5,2a916 <elf::strtab::get(unsigned long, unsigned long*) const+0x1c2>
   2a912:	bffeb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a916:	7502                	c.ldsp	a0,32(sp)
	if (!_M_is_local())
   2a918:	181c                	c.addi4spn	a5,sp,48
   2a91a:	00f50463          	beq	a0,a5,2a922 <elf::strtab::get(unsigned long, unsigned long*) const+0x1ce>
   2a91e:	bf3eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2a922:	6502                	c.ldsp	a0,0(sp)
	if (!_M_is_local())
   2a924:	081c                	c.addi4spn	a5,sp,16
   2a926:	00f50463          	beq	a0,a5,2a92e <elf::strtab::get(unsigned long, unsigned long*) const+0x1da>
   2a92a:	be7eb0ef          	jal	ra,16510 <operator delete(void*)@plt>
                      " exceeds section size");
   2a92e:	8526                	c.mv	a0,s1
   2a930:	ba1eb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2a934:	8522                	c.mv	a0,s0
   2a936:	dbbeb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2a93a:	842a                	c.mv	s0,a0
   2a93c:	bfe9                	c.j	2a916 <elf::strtab::get(unsigned long, unsigned long*) const+0x1c2>
   2a93e:	842a                	c.mv	s0,a0
   2a940:	b7cd                	c.j	2a922 <elf::strtab::get(unsigned long, unsigned long*) const+0x1ce>
   2a942:	842a                	c.mv	s0,a0
   2a944:	b7ed                	c.j	2a92e <elf::strtab::get(unsigned long, unsigned long*) const+0x1da>
    throw format_error("unterminated string");
   2a946:	84aa                	c.mv	s1,a0
   2a948:	8522                	c.mv	a0,s0
   2a94a:	b87eb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2a94e:	8526                	c.mv	a0,s1
   2a950:	da1eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002a954 <elf::section::get_name(unsigned long*) const>:
const char *section::get_name(size_t *len_out) const {
   2a954:	7139                	c.addi16sp	sp,-64
   2a956:	fc06                	c.sdsp	ra,56(sp)
   2a958:	f822                	c.sdsp	s0,48(sp)
   2a95a:	f426                	c.sdsp	s1,40(sp)
   2a95c:	f04a                	c.sdsp	s2,32(sp)
   2a95e:	ec4e                	c.sdsp	s3,24(sp)
   2a960:	842a                	c.mv	s0,a0
   2a962:	84ae                	c.mv	s1,a1
   2a964:	00053903          	ld	s2,0(a0)
  if (!m->name)
   2a968:	05093783          	ld	a5,80(s2)
   2a96c:	cf91                	c.beqz	a5,2a988 <elf::section::get_name(unsigned long*) const+0x34>
  if (len_out)
   2a96e:	c481                	c.beqz	s1,2a976 <elf::section::get_name(unsigned long*) const+0x22>
    *len_out = m->name_len;
   2a970:	601c                	c.ld	a5,0(s0)
   2a972:	6fbc                	c.ld	a5,88(a5)
   2a974:	e09c                	c.sd	a5,0(s1)
  return m->name;
   2a976:	601c                	c.ld	a5,0(s0)
   2a978:	6ba8                	c.ld	a0,80(a5)
}
   2a97a:	70e2                	c.ldsp	ra,56(sp)
   2a97c:	7442                	c.ldsp	s0,48(sp)
   2a97e:	74a2                	c.ldsp	s1,40(sp)
   2a980:	7902                	c.ldsp	s2,32(sp)
   2a982:	69e2                	c.ldsp	s3,24(sp)
   2a984:	6121                	c.addi16sp	sp,64
   2a986:	8082                	c.jr	ra
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   2a988:	854a                	c.mv	a0,s2
   2a98a:	95fff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2a98e:	03e55583          	lhu	a1,62(a0)
   2a992:	854a                	c.mv	a0,s2
   2a994:	9a9ff0ef          	jal	ra,2a33c <elf::elf::get_section(unsigned int) const>
   2a998:	85aa                	c.mv	a1,a0
                  .as_strtab()
   2a99a:	890a                	c.mv	s2,sp
   2a99c:	854a                	c.mv	a0,s2
   2a99e:	c87ff0ef          	jal	ra,2a624 <elf::section::as_strtab() const>
   2a9a2:	00043983          	ld	s3,0(s0)
                  .get(m->hdr.name, &m->name_len);
   2a9a6:	05898613          	addi	a2,s3,88
   2a9aa:	0109e583          	lwu	a1,16(s3)
   2a9ae:	854a                	c.mv	a0,s2
   2a9b0:	da5ff0ef          	jal	ra,2a754 <elf::strtab::get(unsigned long, unsigned long*) const>
    m->name = m->f.get_section(m->f.get_hdr().shstrndx)
   2a9b4:	04a9b823          	sd	a0,80(s3)
	if (_M_pi != nullptr)
   2a9b8:	6922                	c.ldsp	s2,8(sp)
   2a9ba:	fa090ae3          	beq	s2,zero,2a96e <elf::section::get_name(unsigned long*) const+0x1a>
    if (__is_single_threaded())
   2a9be:	0000f797          	auipc	a5,0xf
   2a9c2:	ac27b783          	ld	a5,-1342(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a9c6:	0007c783          	lbu	a5,0(a5)
   2a9ca:	c7b9                	c.beqz	a5,2aa18 <elf::section::get_name(unsigned long*) const+0xc4>
    _Atomic_word __result = *__mem;
   2a9cc:	03092503          	lw	a0,48(s2)
    *__mem += __val;
   2a9d0:	fff5079b          	addiw	a5,a0,-1
   2a9d4:	02f92823          	sw	a5,48(s2)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2a9d8:	4785                	c.li	a5,1
   2a9da:	f8f51ae3          	bne	a0,a5,2a96e <elf::section::get_name(unsigned long*) const+0x1a>
	_M_dispose();
   2a9de:	00093783          	ld	a5,0(s2)
   2a9e2:	6b9c                	c.ld	a5,16(a5)
   2a9e4:	854a                	c.mv	a0,s2
   2a9e6:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2a9e8:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2a9ec:	0000f797          	auipc	a5,0xf
   2a9f0:	a947b783          	ld	a5,-1388(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2a9f4:	0007c783          	lbu	a5,0(a5)
   2a9f8:	c795                	c.beqz	a5,2aa24 <elf::section::get_name(unsigned long*) const+0xd0>
    _Atomic_word __result = *__mem;
   2a9fa:	03492503          	lw	a0,52(s2)
    *__mem += __val;
   2a9fe:	fff5079b          	addiw	a5,a0,-1
   2aa02:	02f92a23          	sw	a5,52(s2)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2aa06:	4785                	c.li	a5,1
   2aa08:	f6f513e3          	bne	a0,a5,2a96e <elf::section::get_name(unsigned long*) const+0x1a>
	    _M_destroy();
   2aa0c:	00093783          	ld	a5,0(s2)
   2aa10:	6f9c                	c.ld	a5,24(a5)
   2aa12:	854a                	c.mv	a0,s2
   2aa14:	9782                	c.jalr	a5
   2aa16:	bfa1                	c.j	2a96e <elf::section::get_name(unsigned long*) const+0x1a>
      return __exchange_and_add(__mem, __val);
   2aa18:	55fd                	c.li	a1,-1
   2aa1a:	03090513          	addi	a0,s2,48
   2aa1e:	963eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2aa22:	bf5d                	c.j	2a9d8 <elf::section::get_name(unsigned long*) const+0x84>
   2aa24:	55fd                	c.li	a1,-1
   2aa26:	03490513          	addi	a0,s2,52
   2aa2a:	957eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2aa2e:	bfe1                	c.j	2aa06 <elf::section::get_name(unsigned long*) const+0xb2>
	if (_M_pi != nullptr)
   2aa30:	842a                	c.mv	s0,a0
   2aa32:	6522                	c.ldsp	a0,8(sp)
   2aa34:	c511                	c.beqz	a0,2aa40 <elf::section::get_name(unsigned long*) const+0xec>
	  _M_pi->_M_release();
   2aa36:	0000f317          	auipc	t1,0xf
   2aa3a:	99233303          	ld	t1,-1646(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2aa3e:	9302                	c.jalr	t1
   2aa40:	8522                	c.mv	a0,s0
   2aa42:	cafeb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002aa46 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
const section &elf::get_section(const std::string &name) const {
   2aa46:	7179                	c.addi16sp	sp,-48
   2aa48:	f406                	c.sdsp	ra,40(sp)
   2aa4a:	f022                	c.sdsp	s0,32(sp)
   2aa4c:	ec26                	c.sdsp	s1,24(sp)
   2aa4e:	e84a                	c.sdsp	s2,16(sp)
   2aa50:	e44e                	c.sdsp	s3,8(sp)
   2aa52:	e052                	c.sdsp	s4,0(sp)
   2aa54:	8a2a                	c.mv	s4,a0
   2aa56:	84ae                	c.mv	s1,a1
  for (auto &sec : sections())
   2aa58:	8d5ff0ef          	jal	ra,2a32c <elf::elf::sections() const>
      : _M_current(__i) { }
   2aa5c:	6100                	c.ld	s0,0(a0)
   2aa5e:	00853983          	ld	s3,8(a0)
   2aa62:	01340f63          	beq	s0,s3,2aa80 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x3a>
   2aa66:	8922                	c.mv	s2,s0
    if (name == sec.get_name(nullptr))
   2aa68:	4581                	c.li	a1,0
   2aa6a:	8522                	c.mv	a0,s0
   2aa6c:	ee9ff0ef          	jal	ra,2a954 <elf::section::get_name(unsigned long*) const>
    { return __lhs.compare(__rhs) == 0; }
   2aa70:	85aa                	c.mv	a1,a0
   2aa72:	8526                	c.mv	a0,s1
   2aa74:	92deb0ef          	jal	ra,163a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const@plt>
   2aa78:	c901                	c.beqz	a0,2aa88 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x42>
  for (auto &sec : sections())
   2aa7a:	0441                	c.addi	s0,16
   2aa7c:	fe8995e3          	bne	s3,s0,2aa66 <elf::elf::get_section(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x20>
  return m->invalid_section;
   2aa80:	000a3903          	ld	s2,0(s4)
   2aa84:	08090913          	addi	s2,s2,128
}
   2aa88:	854a                	c.mv	a0,s2
   2aa8a:	70a2                	c.ldsp	ra,40(sp)
   2aa8c:	7402                	c.ldsp	s0,32(sp)
   2aa8e:	64e2                	c.ldsp	s1,24(sp)
   2aa90:	6942                	c.ldsp	s2,16(sp)
   2aa92:	69a2                	c.ldsp	s3,8(sp)
   2aa94:	6a02                	c.ldsp	s4,0(sp)
   2aa96:	6145                	c.addi16sp	sp,48
   2aa98:	8082                	c.jr	ra

000000000002aa9a <elf::sym::get_name(unsigned long*) const>:

sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
}

const char *sym::get_name(size_t *len_out) const {
   2aa9a:	1141                	c.addi	sp,-16
   2aa9c:	e406                	c.sdsp	ra,8(sp)
   2aa9e:	862e                	c.mv	a2,a1
  return strs.get(get_data().name, len_out);
   2aaa0:	01056583          	lwu	a1,16(a0)
   2aaa4:	cb1ff0ef          	jal	ra,2a754 <elf::strtab::get(unsigned long, unsigned long*) const>
}
   2aaa8:	60a2                	c.ldsp	ra,8(sp)
   2aaaa:	0141                	c.addi	sp,16
   2aaac:	8082                	c.jr	ra

000000000002aaae <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>:
  const elf f;
  const char *data, *end;
  const strtab strs;
};

symtab::symtab(elf f, const void *data, size_t size, strtab strs)
   2aaae:	715d                	c.addi16sp	sp,-80
   2aab0:	e486                	c.sdsp	ra,72(sp)
   2aab2:	e0a2                	c.sdsp	s0,64(sp)
   2aab4:	fc26                	c.sdsp	s1,56(sp)
   2aab6:	f84a                	c.sdsp	s2,48(sp)
   2aab8:	f44e                	c.sdsp	s3,40(sp)
   2aaba:	f052                	c.sdsp	s4,32(sp)
   2aabc:	ec56                	c.sdsp	s5,24(sp)
   2aabe:	e85a                	c.sdsp	s6,16(sp)
   2aac0:	e45e                	c.sdsp	s7,8(sp)
   2aac2:	892a                	c.mv	s2,a0
   2aac4:	8a2e                	c.mv	s4,a1
   2aac6:	89b2                	c.mv	s3,a2
   2aac8:	84ba                	c.mv	s1,a4
    : m(make_shared<impl>(f, (const char *)data, (const char *)data + size,
   2aaca:	00d60ab3          	add	s5,a2,a3
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2aace:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2aad2:	06800513          	addi	a0,zero,104
   2aad6:	a4beb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2aada:	842a                	c.mv	s0,a0
   2aadc:	00052423          	sw	zero,8(a0)
   2aae0:	00052623          	sw	zero,12(a0)
   2aae4:	00052823          	sw	zero,16(a0)
   2aae8:	00052a23          	sw	zero,20(a0)
   2aaec:	00052c23          	sw	zero,24(a0)
   2aaf0:	00052e23          	sw	zero,28(a0)
   2aaf4:	02053023          	sd	zero,32(a0)
   2aaf8:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2aafc:	4785                	c.li	a5,1
   2aafe:	d91c                	c.sw	a5,48(a0)
   2ab00:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2ab02:	0000f797          	auipc	a5,0xf
   2ab06:	8467b783          	ld	a5,-1978(a5) # 39348 <vtable for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x630>
   2ab0a:	07c1                	c.addi	a5,16
   2ab0c:	e11c                	c.sd	a5,0(a0)
   2ab0e:	03850b13          	addi	s6,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ab12:	0004bb83          	ld	s7,0(s1)
      : _M_pi(__r._M_pi)
   2ab16:	6484                	c.ld	s1,8(s1)
	if (_M_pi != nullptr)
   2ab18:	c899                	c.beqz	s1,2ab2e <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x80>
    if (__is_single_threaded())
   2ab1a:	0000f797          	auipc	a5,0xf
   2ab1e:	9667b783          	ld	a5,-1690(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ab22:	0007c783          	lbu	a5,0(a5)
   2ab26:	cfad                	c.beqz	a5,2aba0 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xf2>
  { *__mem += __val; }
   2ab28:	589c                	c.lw	a5,48(s1)
   2ab2a:	2785                	c.addiw	a5,1
   2ab2c:	d89c                	c.sw	a5,48(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ab2e:	000a3783          	ld	a5,0(s4)
   2ab32:	fc1c                	c.sd	a5,56(s0)
      : _M_pi(__r._M_pi)
   2ab34:	008a3503          	ld	a0,8(s4)
   2ab38:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2ab3a:	c919                	c.beqz	a0,2ab50 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xa2>
    if (__is_single_threaded())
   2ab3c:	0000f717          	auipc	a4,0xf
   2ab40:	94473703          	ld	a4,-1724(a4) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ab44:	00074703          	lbu	a4,0(a4)
   2ab48:	c335                	c.beqz	a4,2abac <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xfe>
  { *__mem += __val; }
   2ab4a:	5918                	c.lw	a4,48(a0)
   2ab4c:	2705                	c.addiw	a4,1
   2ab4e:	d918                	c.sw	a4,48(a0)
      : f(f), data(data), end(end), strs(strs) {}
   2ab50:	05343423          	sd	s3,72(s0)
   2ab54:	05543823          	sd	s5,80(s0)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ab58:	05743c23          	sd	s7,88(s0)
      : _M_pi(__r._M_pi)
   2ab5c:	f024                	c.sd	s1,96(s0)
	if (_M_pi != nullptr)
   2ab5e:	c095                	c.beqz	s1,2ab82 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
    if (__is_single_threaded())
   2ab60:	0000f797          	auipc	a5,0xf
   2ab64:	9207b783          	ld	a5,-1760(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ab68:	0007c783          	lbu	a5,0(a5)
   2ab6c:	c7b1                	c.beqz	a5,2abb8 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x10a>
  { *__mem += __val; }
   2ab6e:	589c                	c.lw	a5,48(s1)
   2ab70:	2785                	c.addiw	a5,1
   2ab72:	d89c                	c.sw	a5,48(s1)
    _Atomic_word __result = *__mem;
   2ab74:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2ab76:	fff5079b          	addiw	a5,a0,-1
   2ab7a:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2ab7c:	4785                	c.li	a5,1
   2ab7e:	04f50f63          	beq	a0,a5,2abdc <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x12e>
	  _M_pi = __pi;
   2ab82:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2ab86:	01693023          	sd	s6,0(s2)
                          strs)) {}
   2ab8a:	60a6                	c.ldsp	ra,72(sp)
   2ab8c:	6406                	c.ldsp	s0,64(sp)
   2ab8e:	74e2                	c.ldsp	s1,56(sp)
   2ab90:	7942                	c.ldsp	s2,48(sp)
   2ab92:	79a2                	c.ldsp	s3,40(sp)
   2ab94:	7a02                	c.ldsp	s4,32(sp)
   2ab96:	6ae2                	c.ldsp	s5,24(sp)
   2ab98:	6b42                	c.ldsp	s6,16(sp)
   2ab9a:	6ba2                	c.ldsp	s7,8(sp)
   2ab9c:	6161                	c.addi16sp	sp,80
   2ab9e:	8082                	c.jr	ra
      __atomic_add(__mem, __val);
   2aba0:	4585                	c.li	a1,1
   2aba2:	03048513          	addi	a0,s1,48
   2aba6:	faaeb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2abaa:	b751                	c.j	2ab2e <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x80>
   2abac:	4585                	c.li	a1,1
   2abae:	03050513          	addi	a0,a0,48
   2abb2:	f9eeb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2abb6:	bf69                	c.j	2ab50 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xa2>
   2abb8:	4585                	c.li	a1,1
   2abba:	03048513          	addi	a0,s1,48
   2abbe:	f92eb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
    if (__is_single_threaded())
   2abc2:	0000f797          	auipc	a5,0xf
   2abc6:	8be7b783          	ld	a5,-1858(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2abca:	0007c783          	lbu	a5,0(a5)
   2abce:	f3dd                	c.bnez	a5,2ab74 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xc6>
      return __exchange_and_add(__mem, __val);
   2abd0:	55fd                	c.li	a1,-1
   2abd2:	03048513          	addi	a0,s1,48
   2abd6:	faaeb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2abda:	b74d                	c.j	2ab7c <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xce>
	_M_dispose();
   2abdc:	609c                	c.ld	a5,0(s1)
   2abde:	6b9c                	c.ld	a5,16(a5)
   2abe0:	8526                	c.mv	a0,s1
   2abe2:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2abe4:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2abe8:	0000f797          	auipc	a5,0xf
   2abec:	8987b783          	ld	a5,-1896(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2abf0:	0007c783          	lbu	a5,0(a5)
   2abf4:	cf89                	c.beqz	a5,2ac0e <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x160>
    _Atomic_word __result = *__mem;
   2abf6:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2abf8:	fff5079b          	addiw	a5,a0,-1
   2abfc:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2abfe:	4785                	c.li	a5,1
   2ac00:	f8f511e3          	bne	a0,a5,2ab82 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
	    _M_destroy();
   2ac04:	609c                	c.ld	a5,0(s1)
   2ac06:	6f9c                	c.ld	a5,24(a5)
   2ac08:	8526                	c.mv	a0,s1
   2ac0a:	9782                	c.jalr	a5
   2ac0c:	bf9d                	c.j	2ab82 <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0xd4>
      return __exchange_and_add(__mem, __val);
   2ac0e:	55fd                	c.li	a1,-1
   2ac10:	03448513          	addi	a0,s1,52
   2ac14:	f6ceb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ac18:	b7dd                	c.j	2abfe <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)+0x150>

000000000002ac1a <elf::section::as_symtab() const>:
symtab section::as_symtab() const {
   2ac1a:	715d                	c.addi16sp	sp,-80
   2ac1c:	e486                	c.sdsp	ra,72(sp)
   2ac1e:	e0a2                	c.sdsp	s0,64(sp)
   2ac20:	fc26                	c.sdsp	s1,56(sp)
   2ac22:	f84a                	c.sdsp	s2,48(sp)
   2ac24:	f44e                	c.sdsp	s3,40(sp)
   2ac26:	f052                	c.sdsp	s4,32(sp)
   2ac28:	84aa                	c.mv	s1,a0
   2ac2a:	842e                	c.mv	s0,a1
      { return _M_ptr; }
   2ac2c:	619c                	c.ld	a5,0(a1)
  if (m->hdr.type != sht::symtab && m->hdr.type != sht::dynsym)
   2ac2e:	4bd8                	c.lw	a4,20(a5)
   2ac30:	4689                	c.li	a3,2
   2ac32:	00d70563          	beq	a4,a3,2ac3c <elf::section::as_symtab() const+0x22>
   2ac36:	46ad                	c.li	a3,11
   2ac38:	02d71563          	bne	a4,a3,2ac62 <elf::section::as_symtab() const+0x48>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ac3c:	6398                	c.ld	a4,0(a5)
   2ac3e:	e03a                	c.sdsp	a4,0(sp)
      : _M_pi(__r._M_pi)
   2ac40:	6788                	c.ld	a0,8(a5)
   2ac42:	e42a                	c.sdsp	a0,8(sp)
	if (_M_pi != nullptr)
   2ac44:	c919                	c.beqz	a0,2ac5a <elf::section::as_symtab() const+0x40>
    if (__is_single_threaded())
   2ac46:	0000f797          	auipc	a5,0xf
   2ac4a:	83a7b783          	ld	a5,-1990(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ac4e:	0007c783          	lbu	a5,0(a5)
   2ac52:	c3b9                	c.beqz	a5,2ac98 <elf::section::as_symtab() const+0x7e>
  { *__mem += __val; }
   2ac54:	591c                	c.lw	a5,48(a0)
   2ac56:	2785                	c.addiw	a5,1
   2ac58:	d91c                	c.sw	a5,48(a0)
                m->f.get_section(get_hdr().link).as_strtab());
   2ac5a:	8522                	c.mv	a0,s0
   2ac5c:	85dff0ef          	jal	ra,2a4b8 <elf::section::data() const>
   2ac60:	a091                	c.j	2aca4 <elf::section::as_symtab() const+0x8a>
    throw section_type_mismatch("cannot use section as symtab");
   2ac62:	4541                	c.li	a0,16
   2ac64:	fbceb0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2ac68:	842a                	c.mv	s0,a0
      : std::logic_error(what_arg) {}
   2ac6a:	00006597          	auipc	a1,0x6
   2ac6e:	04e58593          	addi	a1,a1,78 # 30cb8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x27f0>
   2ac72:	90feb0ef          	jal	ra,16580 <std::logic_error::logic_error(char const*)@plt>
   2ac76:	0000e797          	auipc	a5,0xe
   2ac7a:	7427b783          	ld	a5,1858(a5) # 393b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   2ac7e:	07c1                	c.addi	a5,16
   2ac80:	e01c                	c.sd	a5,0(s0)
   2ac82:	0000e617          	auipc	a2,0xe
   2ac86:	62663603          	ld	a2,1574(a2) # 392a8 <elf::section_type_mismatch::~section_type_mismatch()@@Base+0xd8e8>
   2ac8a:	0000e597          	auipc	a1,0xe
   2ac8e:	6565b583          	ld	a1,1622(a1) # 392e0 <typeinfo for elf::section_type_mismatch@@Base+0x788>
   2ac92:	8522                	c.mv	a0,s0
   2ac94:	a2deb0ef          	jal	ra,166c0 <__cxa_throw@plt>
      __atomic_add(__mem, __val);
   2ac98:	4585                	c.li	a1,1
   2ac9a:	03050513          	addi	a0,a0,48
   2ac9e:	eb2eb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2aca2:	bf65                	c.j	2ac5a <elf::section::as_symtab() const+0x40>
                m->f.get_section(get_hdr().link).as_strtab());
   2aca4:	892a                	c.mv	s2,a0
   2aca6:	8522                	c.mv	a0,s0
   2aca8:	8d1ff0ef          	jal	ra,2a578 <elf::section::size() const>
   2acac:	89aa                	c.mv	s3,a0
   2acae:	00043a03          	ld	s4,0(s0)
   2acb2:	8522                	c.mv	a0,s0
   2acb4:	ffeff0ef          	jal	ra,2a4b2 <elf::section::get_hdr() const>
   2acb8:	02855583          	lhu	a1,40(a0)
   2acbc:	8552                	c.mv	a0,s4
   2acbe:	e7eff0ef          	jal	ra,2a33c <elf::elf::get_section(unsigned int) const>
   2acc2:	85aa                	c.mv	a1,a0
   2acc4:	0808                	c.addi4spn	a0,sp,16
   2acc6:	95fff0ef          	jal	ra,2a624 <elf::section::as_strtab() const>
   2acca:	0818                	c.addi4spn	a4,sp,16
   2accc:	86ce                	c.mv	a3,s3
   2acce:	864a                	c.mv	a2,s2
   2acd0:	858a                	c.mv	a1,sp
   2acd2:	8526                	c.mv	a0,s1
   2acd4:	ddbff0ef          	jal	ra,2aaae <elf::symtab::symtab(elf::elf, void const*, unsigned long, elf::strtab)>
	if (_M_pi != nullptr)
   2acd8:	6462                	c.ldsp	s0,24(sp)
   2acda:	cc19                	c.beqz	s0,2acf8 <elf::section::as_symtab() const+0xde>
    if (__is_single_threaded())
   2acdc:	0000e797          	auipc	a5,0xe
   2ace0:	7a47b783          	ld	a5,1956(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ace4:	0007c783          	lbu	a5,0(a5)
   2ace8:	c3a9                	c.beqz	a5,2ad2a <elf::section::as_symtab() const+0x110>
    _Atomic_word __result = *__mem;
   2acea:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2acec:	fff5079b          	addiw	a5,a0,-1
   2acf0:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2acf2:	4785                	c.li	a5,1
   2acf4:	04f50163          	beq	a0,a5,2ad36 <elf::section::as_symtab() const+0x11c>
	if (_M_pi != nullptr)
   2acf8:	6422                	c.ldsp	s0,8(sp)
   2acfa:	cc19                	c.beqz	s0,2ad18 <elf::section::as_symtab() const+0xfe>
    if (__is_single_threaded())
   2acfc:	0000e797          	auipc	a5,0xe
   2ad00:	7847b783          	ld	a5,1924(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ad04:	0007c783          	lbu	a5,0(a5)
   2ad08:	c7b5                	c.beqz	a5,2ad74 <elf::section::as_symtab() const+0x15a>
    _Atomic_word __result = *__mem;
   2ad0a:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2ad0c:	fff5079b          	addiw	a5,a0,-1
   2ad10:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2ad12:	4785                	c.li	a5,1
   2ad14:	06f50663          	beq	a0,a5,2ad80 <elf::section::as_symtab() const+0x166>
}
   2ad18:	8526                	c.mv	a0,s1
   2ad1a:	60a6                	c.ldsp	ra,72(sp)
   2ad1c:	6406                	c.ldsp	s0,64(sp)
   2ad1e:	74e2                	c.ldsp	s1,56(sp)
   2ad20:	7942                	c.ldsp	s2,48(sp)
   2ad22:	79a2                	c.ldsp	s3,40(sp)
   2ad24:	7a02                	c.ldsp	s4,32(sp)
   2ad26:	6161                	c.addi16sp	sp,80
   2ad28:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2ad2a:	55fd                	c.li	a1,-1
   2ad2c:	03040513          	addi	a0,s0,48
   2ad30:	e50eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ad34:	bf7d                	c.j	2acf2 <elf::section::as_symtab() const+0xd8>
	_M_dispose();
   2ad36:	601c                	c.ld	a5,0(s0)
   2ad38:	6b9c                	c.ld	a5,16(a5)
   2ad3a:	8522                	c.mv	a0,s0
   2ad3c:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2ad3e:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2ad42:	0000e797          	auipc	a5,0xe
   2ad46:	73e7b783          	ld	a5,1854(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ad4a:	0007c783          	lbu	a5,0(a5)
   2ad4e:	cf89                	c.beqz	a5,2ad68 <elf::section::as_symtab() const+0x14e>
    _Atomic_word __result = *__mem;
   2ad50:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2ad52:	fff5079b          	addiw	a5,a0,-1
   2ad56:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2ad58:	4785                	c.li	a5,1
   2ad5a:	f8f51fe3          	bne	a0,a5,2acf8 <elf::section::as_symtab() const+0xde>
	    _M_destroy();
   2ad5e:	601c                	c.ld	a5,0(s0)
   2ad60:	6f9c                	c.ld	a5,24(a5)
   2ad62:	8522                	c.mv	a0,s0
   2ad64:	9782                	c.jalr	a5
   2ad66:	bf49                	c.j	2acf8 <elf::section::as_symtab() const+0xde>
      return __exchange_and_add(__mem, __val);
   2ad68:	55fd                	c.li	a1,-1
   2ad6a:	03440513          	addi	a0,s0,52
   2ad6e:	e12eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ad72:	b7dd                	c.j	2ad58 <elf::section::as_symtab() const+0x13e>
   2ad74:	55fd                	c.li	a1,-1
   2ad76:	03040513          	addi	a0,s0,48
   2ad7a:	e06eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2ad7e:	bf51                	c.j	2ad12 <elf::section::as_symtab() const+0xf8>
	_M_dispose();
   2ad80:	601c                	c.ld	a5,0(s0)
   2ad82:	6b9c                	c.ld	a5,16(a5)
   2ad84:	8522                	c.mv	a0,s0
   2ad86:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2ad88:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2ad8c:	0000e797          	auipc	a5,0xe
   2ad90:	6f47b783          	ld	a5,1780(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ad94:	0007c783          	lbu	a5,0(a5)
   2ad98:	cf89                	c.beqz	a5,2adb2 <elf::section::as_symtab() const+0x198>
    _Atomic_word __result = *__mem;
   2ad9a:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2ad9c:	fff5079b          	addiw	a5,a0,-1
   2ada0:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2ada2:	4785                	c.li	a5,1
   2ada4:	f6f51ae3          	bne	a0,a5,2ad18 <elf::section::as_symtab() const+0xfe>
	    _M_destroy();
   2ada8:	601c                	c.ld	a5,0(s0)
   2adaa:	6f9c                	c.ld	a5,24(a5)
   2adac:	8522                	c.mv	a0,s0
   2adae:	9782                	c.jalr	a5
                m->f.get_section(get_hdr().link).as_strtab());
   2adb0:	b7a5                	c.j	2ad18 <elf::section::as_symtab() const+0xfe>
      return __exchange_and_add(__mem, __val);
   2adb2:	55fd                	c.li	a1,-1
   2adb4:	03440513          	addi	a0,s0,52
   2adb8:	dc8eb0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2adbc:	b7dd                	c.j	2ada2 <elf::section::as_symtab() const+0x188>
    throw section_type_mismatch("cannot use section as symtab");
   2adbe:	84aa                	c.mv	s1,a0
   2adc0:	8522                	c.mv	a0,s0
   2adc2:	f0eeb0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2adc6:	8526                	c.mv	a0,s1
   2adc8:	929eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2adcc:	842a                	c.mv	s0,a0
   2adce:	6562                	c.ldsp	a0,24(sp)
   2add0:	c511                	c.beqz	a0,2addc <elf::section::as_symtab() const+0x1c2>
	  _M_pi->_M_release();
   2add2:	0000e317          	auipc	t1,0xe
   2add6:	5f633303          	ld	t1,1526(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2adda:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   2addc:	6522                	c.ldsp	a0,8(sp)
   2adde:	c511                	c.beqz	a0,2adea <elf::section::as_symtab() const+0x1d0>
	  _M_pi->_M_release();
   2ade0:	0000e317          	auipc	t1,0xe
   2ade4:	5e833303          	ld	t1,1512(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2ade8:	9302                	c.jalr	t1
   2adea:	8522                	c.mv	a0,s0
   2adec:	905eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
	if (_M_pi != nullptr)
   2adf0:	842a                	c.mv	s0,a0
   2adf2:	b7ed                	c.j	2addc <elf::section::as_symtab() const+0x1c2>

000000000002adf4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>:

symtab::iterator::iterator(const symtab &tab, const char *pos)
   2adf4:	1101                	c.addi	sp,-32
   2adf6:	ec06                	c.sdsp	ra,24(sp)
   2adf8:	e822                	c.sdsp	s0,16(sp)
   2adfa:	e426                	c.sdsp	s1,8(sp)
   2adfc:	e04a                	c.sdsp	s2,0(sp)
   2adfe:	842a                	c.mv	s0,a0
   2ae00:	84ae                	c.mv	s1,a1
   2ae02:	8932                	c.mv	s2,a2
      { return _M_ptr; }
   2ae04:	619c                	c.ld	a5,0(a1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ae06:	6398                	c.ld	a4,0(a5)
   2ae08:	e118                	c.sd	a4,0(a0)
      : _M_pi(__r._M_pi)
   2ae0a:	6788                	c.ld	a0,8(a5)
   2ae0c:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2ae0e:	c919                	c.beqz	a0,2ae24 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x30>
    if (__is_single_threaded())
   2ae10:	0000e797          	auipc	a5,0xe
   2ae14:	6707b783          	ld	a5,1648(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ae18:	0007c783          	lbu	a5,0(a5)
   2ae1c:	cb95                	c.beqz	a5,2ae50 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x5c>
  { *__mem += __val; }
   2ae1e:	591c                	c.lw	a5,48(a0)
   2ae20:	2785                	c.addiw	a5,1
   2ae22:	d91c                	c.sw	a5,48(a0)
      { return _M_ptr; }
   2ae24:	609c                	c.ld	a5,0(s1)
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2ae26:	7398                	c.ld	a4,32(a5)
   2ae28:	e818                	c.sd	a4,16(s0)
      : _M_pi(__r._M_pi)
   2ae2a:	7788                	c.ld	a0,40(a5)
   2ae2c:	ec08                	c.sd	a0,24(s0)
	if (_M_pi != nullptr)
   2ae2e:	c919                	c.beqz	a0,2ae44 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x50>
    if (__is_single_threaded())
   2ae30:	0000e797          	auipc	a5,0xe
   2ae34:	6507b783          	ld	a5,1616(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2ae38:	0007c783          	lbu	a5,0(a5)
   2ae3c:	c385                	c.beqz	a5,2ae5c <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x68>
  { *__mem += __val; }
   2ae3e:	591c                	c.lw	a5,48(a0)
   2ae40:	2785                	c.addiw	a5,1
   2ae42:	d91c                	c.sw	a5,48(a0)
    : f(tab.m->f), strs(tab.m->strs), pos(pos) {
   2ae44:	03243023          	sd	s2,32(s0)
  if (f.get_hdr().ei_class == elfclass::_32)
   2ae48:	8522                	c.mv	a0,s0
   2ae4a:	c9eff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2ae4e:	a829                	c.j	2ae68 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x74>
      __atomic_add(__mem, __val);
   2ae50:	4585                	c.li	a1,1
   2ae52:	03050513          	addi	a0,a0,48
   2ae56:	cfaeb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2ae5a:	b7e9                	c.j	2ae24 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x30>
   2ae5c:	4585                	c.li	a1,1
   2ae5e:	03050513          	addi	a0,a0,48
   2ae62:	ceeeb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2ae66:	bff9                	c.j	2ae44 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x50>
   2ae68:	00454683          	lbu	a3,4(a0)
   2ae6c:	4705                	c.li	a4,1
    stride = sizeof(Sym<Elf32>);
  else
    stride = sizeof(Sym<Elf64>);
   2ae6e:	47e1                	c.li	a5,24
  if (f.get_hdr().ei_class == elfclass::_32)
   2ae70:	00e68963          	beq	a3,a4,2ae82 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x8e>
   2ae74:	f41c                	c.sd	a5,40(s0)
}
   2ae76:	60e2                	c.ldsp	ra,24(sp)
   2ae78:	6442                	c.ldsp	s0,16(sp)
   2ae7a:	64a2                	c.ldsp	s1,8(sp)
   2ae7c:	6902                	c.ldsp	s2,0(sp)
   2ae7e:	6105                	c.addi16sp	sp,32
   2ae80:	8082                	c.jr	ra
    stride = sizeof(Sym<Elf32>);
   2ae82:	47c1                	c.li	a5,16
   2ae84:	bfc5                	c.j	2ae74 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0x80>
	if (_M_pi != nullptr)
   2ae86:	84aa                	c.mv	s1,a0
   2ae88:	6c08                	c.ld	a0,24(s0)
   2ae8a:	c511                	c.beqz	a0,2ae96 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xa2>
	  _M_pi->_M_release();
   2ae8c:	0000e317          	auipc	t1,0xe
   2ae90:	53c33303          	ld	t1,1340(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2ae94:	9302                	c.jalr	t1
	if (_M_pi != nullptr)
   2ae96:	6408                	c.ld	a0,8(s0)
   2ae98:	c511                	c.beqz	a0,2aea4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)+0xb0>
	  _M_pi->_M_release();
   2ae9a:	0000e317          	auipc	t1,0xe
   2ae9e:	52e33303          	ld	t1,1326(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2aea2:	9302                	c.jalr	t1
   2aea4:	8526                	c.mv	a0,s1
   2aea6:	84beb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002aeaa <elf::symtab::begin() const>:

symtab::iterator symtab::begin() const { return iterator(*this, m->data); }
   2aeaa:	1141                	c.addi	sp,-16
   2aeac:	e406                	c.sdsp	ra,8(sp)
   2aeae:	e022                	c.sdsp	s0,0(sp)
   2aeb0:	842a                	c.mv	s0,a0
   2aeb2:	619c                	c.ld	a5,0(a1)
   2aeb4:	6b90                	c.ld	a2,16(a5)
   2aeb6:	f3fff0ef          	jal	ra,2adf4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   2aeba:	8522                	c.mv	a0,s0
   2aebc:	60a2                	c.ldsp	ra,8(sp)
   2aebe:	6402                	c.ldsp	s0,0(sp)
   2aec0:	0141                	c.addi	sp,16
   2aec2:	8082                	c.jr	ra

000000000002aec4 <elf::symtab::end() const>:

symtab::iterator symtab::end() const { return iterator(*this, m->end); }
   2aec4:	1141                	c.addi	sp,-16
   2aec6:	e406                	c.sdsp	ra,8(sp)
   2aec8:	e022                	c.sdsp	s0,0(sp)
   2aeca:	842a                	c.mv	s0,a0
   2aecc:	619c                	c.ld	a5,0(a1)
   2aece:	6f90                	c.ld	a2,24(a5)
   2aed0:	f25ff0ef          	jal	ra,2adf4 <elf::symtab::iterator::iterator(elf::symtab const&, char const*)>
   2aed4:	8522                	c.mv	a0,s0
   2aed6:	60a2                	c.ldsp	ra,8(sp)
   2aed8:	6402                	c.ldsp	s0,0(sp)
   2aeda:	0141                	c.addi	sp,16
   2aedc:	8082                	c.jr	ra

000000000002aede <elf::segment::segment(elf::elf const&, void const*)>:
segment::segment(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   2aede:	7179                	c.addi16sp	sp,-48
   2aee0:	f406                	c.sdsp	ra,40(sp)
   2aee2:	f022                	c.sdsp	s0,32(sp)
   2aee4:	ec26                	c.sdsp	s1,24(sp)
   2aee6:	e84a                	c.sdsp	s2,16(sp)
   2aee8:	e44e                	c.sdsp	s3,8(sp)
   2aeea:	e052                	c.sdsp	s4,0(sp)
   2aeec:	892a                	c.mv	s2,a0
   2aeee:	84ae                	c.mv	s1,a1
   2aef0:	89b2                	c.mv	s3,a2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2aef2:	00053023          	sd	zero,0(a0)
   2aef6:	08800513          	addi	a0,zero,136
   2aefa:	e26eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2aefe:	842a                	c.mv	s0,a0
   2af00:	00052423          	sw	zero,8(a0)
   2af04:	00052623          	sw	zero,12(a0)
   2af08:	00052823          	sw	zero,16(a0)
   2af0c:	00052a23          	sw	zero,20(a0)
   2af10:	00052c23          	sw	zero,24(a0)
   2af14:	00052e23          	sw	zero,28(a0)
   2af18:	02053023          	sd	zero,32(a0)
   2af1c:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2af20:	4785                	c.li	a5,1
   2af22:	d91c                	c.sw	a5,48(a0)
   2af24:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2af26:	0000e797          	auipc	a5,0xe
   2af2a:	5527b783          	ld	a5,1362(a5) # 39478 <vtable for std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x808>
   2af2e:	07c1                	c.addi	a5,16
   2af30:	e11c                	c.sd	a5,0(a0)
   2af32:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2af36:	609c                	c.ld	a5,0(s1)
   2af38:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2af3a:	6488                	c.ld	a0,8(s1)
   2af3c:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2af3e:	c919                	c.beqz	a0,2af54 <elf::segment::segment(elf::elf const&, void const*)+0x76>
    if (__is_single_threaded())
   2af40:	0000e717          	auipc	a4,0xe
   2af44:	54073703          	ld	a4,1344(a4) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2af48:	00074703          	lbu	a4,0(a4)
   2af4c:	c305                	c.beqz	a4,2af6c <elf::segment::segment(elf::elf const&, void const*)+0x8e>
  { *__mem += __val; }
   2af4e:	5918                	c.lw	a4,48(a0)
   2af50:	2705                	c.addiw	a4,1
   2af52:	d918                	c.sw	a4,48(a0)
  impl(const elf &f) : f(f), data(nullptr) {}
   2af54:	08043023          	sd	zero,128(s0)
	  _M_pi = __pi;
   2af58:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2af5c:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2af60:	04840413          	addi	s0,s0,72
   2af64:	8526                	c.mv	a0,s1
   2af66:	b82ff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2af6a:	a039                	c.j	2af78 <elf::segment::segment(elf::elf const&, void const*)+0x9a>
      __atomic_add(__mem, __val);
   2af6c:	4585                	c.li	a1,1
   2af6e:	03050513          	addi	a0,a0,48
   2af72:	bdeeb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2af76:	bff9                	c.j	2af54 <elf::segment::segment(elf::elf const&, void const*)+0x76>
   2af78:	00454a03          	lbu	s4,4(a0)
   2af7c:	8526                	c.mv	a0,s1
   2af7e:	b6aff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2af82:	00554683          	lbu	a3,5(a0)
   2af86:	8652                	c.mv	a2,s4
   2af88:	85ce                	c.mv	a1,s3
   2af8a:	8522                	c.mv	a0,s0
   2af8c:	0000e317          	auipc	t1,0xe
   2af90:	64433303          	ld	t1,1604(t1) # 395d0 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd14e>
   2af94:	9302                	c.jalr	t1
}
   2af96:	70a2                	c.ldsp	ra,40(sp)
   2af98:	7402                	c.ldsp	s0,32(sp)
   2af9a:	64e2                	c.ldsp	s1,24(sp)
   2af9c:	6942                	c.ldsp	s2,16(sp)
   2af9e:	69a2                	c.ldsp	s3,8(sp)
   2afa0:	6a02                	c.ldsp	s4,0(sp)
   2afa2:	6145                	c.addi16sp	sp,48
   2afa4:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2afa6:	842a                	c.mv	s0,a0
   2afa8:	00893503          	ld	a0,8(s2)
   2afac:	c511                	c.beqz	a0,2afb8 <elf::segment::segment(elf::elf const&, void const*)+0xda>
	  _M_pi->_M_release();
   2afae:	0000e317          	auipc	t1,0xe
   2afb2:	41a33303          	ld	t1,1050(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2afb6:	9302                	c.jalr	t1
   2afb8:	8522                	c.mv	a0,s0
   2afba:	f36eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002afbe <elf::section::section(elf::elf const&, void const*)>:
section::section(const elf &f, const void *hdr) : m(make_shared<impl>(f)) {
   2afbe:	7179                	c.addi16sp	sp,-48
   2afc0:	f406                	c.sdsp	ra,40(sp)
   2afc2:	f022                	c.sdsp	s0,32(sp)
   2afc4:	ec26                	c.sdsp	s1,24(sp)
   2afc6:	e84a                	c.sdsp	s2,16(sp)
   2afc8:	e44e                	c.sdsp	s3,8(sp)
   2afca:	e052                	c.sdsp	s4,0(sp)
   2afcc:	892a                	c.mv	s2,a0
   2afce:	84ae                	c.mv	s1,a1
   2afd0:	89b2                	c.mv	s3,a2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2afd2:	00053023          	sd	zero,0(a0)
   2afd6:	0a000513          	addi	a0,zero,160
   2afda:	d46eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2afde:	842a                	c.mv	s0,a0
   2afe0:	00052423          	sw	zero,8(a0)
   2afe4:	00052623          	sw	zero,12(a0)
   2afe8:	00052823          	sw	zero,16(a0)
   2afec:	00052a23          	sw	zero,20(a0)
   2aff0:	00052c23          	sw	zero,24(a0)
   2aff4:	00052e23          	sw	zero,28(a0)
   2aff8:	02053023          	sd	zero,32(a0)
   2affc:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2b000:	4785                	c.li	a5,1
   2b002:	d91c                	c.sw	a5,48(a0)
   2b004:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2b006:	0000e797          	auipc	a5,0xe
   2b00a:	4227b783          	ld	a5,1058(a5) # 39428 <vtable for std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x780>
   2b00e:	07c1                	c.addi	a5,16
   2b010:	e11c                	c.sd	a5,0(a0)
   2b012:	03850a13          	addi	s4,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b016:	609c                	c.ld	a5,0(s1)
   2b018:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2b01a:	6488                	c.ld	a0,8(s1)
   2b01c:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2b01e:	c919                	c.beqz	a0,2b034 <elf::section::section(elf::elf const&, void const*)+0x76>
    if (__is_single_threaded())
   2b020:	0000e717          	auipc	a4,0xe
   2b024:	46073703          	ld	a4,1120(a4) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b028:	00074703          	lbu	a4,0(a4)
   2b02c:	c315                	c.beqz	a4,2b050 <elf::section::section(elf::elf const&, void const*)+0x92>
  { *__mem += __val; }
   2b02e:	5918                	c.lw	a4,48(a0)
   2b030:	2705                	c.addiw	a4,1
   2b032:	d918                	c.sw	a4,48(a0)
  impl(const elf &f) : f(f), name(nullptr), data(nullptr) {}
   2b034:	08043423          	sd	zero,136(s0)
   2b038:	08043c23          	sd	zero,152(s0)
	  _M_pi = __pi;
   2b03c:	00893423          	sd	s0,8(s2)
	  __p = __pi->_M_ptr();
   2b040:	01493023          	sd	s4,0(s2)
  canon_hdr(&m->hdr, hdr, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2b044:	04840413          	addi	s0,s0,72
   2b048:	8526                	c.mv	a0,s1
   2b04a:	a9eff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2b04e:	a039                	c.j	2b05c <elf::section::section(elf::elf const&, void const*)+0x9e>
      __atomic_add(__mem, __val);
   2b050:	4585                	c.li	a1,1
   2b052:	03050513          	addi	a0,a0,48
   2b056:	afaeb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b05a:	bfe9                	c.j	2b034 <elf::section::section(elf::elf const&, void const*)+0x76>
   2b05c:	00454a03          	lbu	s4,4(a0)
   2b060:	8526                	c.mv	a0,s1
   2b062:	a86ff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2b066:	00554683          	lbu	a3,5(a0)
   2b06a:	8652                	c.mv	a2,s4
   2b06c:	85ce                	c.mv	a1,s3
   2b06e:	8522                	c.mv	a0,s0
   2b070:	0000e317          	auipc	t1,0xe
   2b074:	51033303          	ld	t1,1296(t1) # 39580 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xcfd8>
   2b078:	9302                	c.jalr	t1
}
   2b07a:	70a2                	c.ldsp	ra,40(sp)
   2b07c:	7402                	c.ldsp	s0,32(sp)
   2b07e:	64e2                	c.ldsp	s1,24(sp)
   2b080:	6942                	c.ldsp	s2,16(sp)
   2b082:	69a2                	c.ldsp	s3,8(sp)
   2b084:	6a02                	c.ldsp	s4,0(sp)
   2b086:	6145                	c.addi16sp	sp,48
   2b088:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2b08a:	842a                	c.mv	s0,a0
   2b08c:	00893503          	ld	a0,8(s2)
   2b090:	c511                	c.beqz	a0,2b09c <elf::section::section(elf::elf const&, void const*)+0xde>
	  _M_pi->_M_release();
   2b092:	0000e317          	auipc	t1,0xe
   2b096:	33633303          	ld	t1,822(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2b09a:	9302                	c.jalr	t1
   2b09c:	8522                	c.mv	a0,s0
   2b09e:	e52eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002b0a2 <elf::sym::sym(elf::elf, void const*, elf::strtab)>:
sym::sym(elf f, const void *data, strtab strs) : strs(strs) {
   2b0a2:	7179                	c.addi16sp	sp,-48
   2b0a4:	f406                	c.sdsp	ra,40(sp)
   2b0a6:	f022                	c.sdsp	s0,32(sp)
   2b0a8:	ec26                	c.sdsp	s1,24(sp)
   2b0aa:	e84a                	c.sdsp	s2,16(sp)
   2b0ac:	e44e                	c.sdsp	s3,8(sp)
   2b0ae:	e052                	c.sdsp	s4,0(sp)
   2b0b0:	842a                	c.mv	s0,a0
   2b0b2:	84ae                	c.mv	s1,a1
   2b0b4:	8932                	c.mv	s2,a2
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b0b6:	629c                	c.ld	a5,0(a3)
   2b0b8:	e11c                	c.sd	a5,0(a0)
      : _M_pi(__r._M_pi)
   2b0ba:	6688                	c.ld	a0,8(a3)
   2b0bc:	e408                	c.sd	a0,8(s0)
	if (_M_pi != nullptr)
   2b0be:	c919                	c.beqz	a0,2b0d4 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x32>
    if (__is_single_threaded())
   2b0c0:	0000e797          	auipc	a5,0xe
   2b0c4:	3c07b783          	ld	a5,960(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b0c8:	0007c783          	lbu	a5,0(a5)
   2b0cc:	cb91                	c.beqz	a5,2b0e0 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x3e>
  { *__mem += __val; }
   2b0ce:	591c                	c.lw	a5,48(a0)
   2b0d0:	2785                	c.addiw	a5,1
   2b0d2:	d91c                	c.sw	a5,48(a0)
  canon_hdr(&this->data, data, f.get_hdr().ei_class, f.get_hdr().ei_data);
   2b0d4:	01040993          	addi	s3,s0,16
   2b0d8:	8526                	c.mv	a0,s1
   2b0da:	a0eff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2b0de:	a039                	c.j	2b0ec <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x4a>
      __atomic_add(__mem, __val);
   2b0e0:	4585                	c.li	a1,1
   2b0e2:	03050513          	addi	a0,a0,48
   2b0e6:	a6aeb0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b0ea:	b7ed                	c.j	2b0d4 <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x32>
   2b0ec:	00454a03          	lbu	s4,4(a0)
   2b0f0:	8526                	c.mv	a0,s1
   2b0f2:	9f6ff0ef          	jal	ra,2a2e8 <elf::elf::get_hdr() const>
   2b0f6:	00554683          	lbu	a3,5(a0)
   2b0fa:	8652                	c.mv	a2,s4
   2b0fc:	85ca                	c.mv	a1,s2
   2b0fe:	854e                	c.mv	a0,s3
   2b100:	0000e317          	auipc	t1,0xe
   2b104:	44033303          	ld	t1,1088(t1) # 39540 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xce3a>
   2b108:	9302                	c.jalr	t1
}
   2b10a:	70a2                	c.ldsp	ra,40(sp)
   2b10c:	7402                	c.ldsp	s0,32(sp)
   2b10e:	64e2                	c.ldsp	s1,24(sp)
   2b110:	6942                	c.ldsp	s2,16(sp)
   2b112:	69a2                	c.ldsp	s3,8(sp)
   2b114:	6a02                	c.ldsp	s4,0(sp)
   2b116:	6145                	c.addi16sp	sp,48
   2b118:	8082                	c.jr	ra
	if (_M_pi != nullptr)
   2b11a:	84aa                	c.mv	s1,a0
   2b11c:	6408                	c.ld	a0,8(s0)
   2b11e:	c511                	c.beqz	a0,2b12a <elf::sym::sym(elf::elf, void const*, elf::strtab)+0x88>
	  _M_pi->_M_release();
   2b120:	0000e317          	auipc	t1,0xe
   2b124:	2a833303          	ld	t1,680(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2b128:	9302                	c.jalr	t1
   2b12a:	8526                	c.mv	a0,s1
   2b12c:	dc4eb0ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002b130 <elf::section::get_name[abi:cxx11]() const>:
string section::get_name() const { return get_name(nullptr); }
   2b130:	1101                	c.addi	sp,-32
   2b132:	ec06                	c.sdsp	ra,24(sp)
   2b134:	e822                	c.sdsp	s0,16(sp)
   2b136:	e426                	c.sdsp	s1,8(sp)
   2b138:	842a                	c.mv	s0,a0
   2b13a:	852e                	c.mv	a0,a1
   2b13c:	4581                	c.li	a1,0
   2b13e:	817ff0ef          	jal	ra,2a954 <elf::section::get_name(unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b142:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b146:	e01c                	c.sd	a5,0(s0)
	if (__s == 0)
   2b148:	c505                	c.beqz	a0,2b170 <elf::section::get_name[abi:cxx11]() const+0x40>
   2b14a:	84aa                	c.mv	s1,a0
   2b14c:	ac4eb0ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2b150:	4681                	c.li	a3,0
   2b152:	00a48633          	add	a2,s1,a0
   2b156:	85a6                	c.mv	a1,s1
   2b158:	8522                	c.mv	a0,s0
   2b15a:	0000e317          	auipc	t1,0xe
   2b15e:	1ae33303          	ld	t1,430(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2b162:	9302                	c.jalr	t1
   2b164:	8522                	c.mv	a0,s0
   2b166:	60e2                	c.ldsp	ra,24(sp)
   2b168:	6442                	c.ldsp	s0,16(sp)
   2b16a:	64a2                	c.ldsp	s1,8(sp)
   2b16c:	6105                	c.addi16sp	sp,32
   2b16e:	8082                	c.jr	ra
	  std::__throw_logic_error(__N("basic_string: "
   2b170:	00002517          	auipc	a0,0x2
   2b174:	cb050513          	addi	a0,a0,-848 # 2ce20 <__libc_csu_fini+0x8>
   2b178:	b48eb0ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>

000000000002b17c <elf::strtab::get[abi:cxx11](unsigned long) const>:
std::string strtab::get(Elf64::Off offset) const {
   2b17c:	1101                	c.addi	sp,-32
   2b17e:	ec06                	c.sdsp	ra,24(sp)
   2b180:	e822                	c.sdsp	s0,16(sp)
   2b182:	e426                	c.sdsp	s1,8(sp)
   2b184:	842a                	c.mv	s0,a0
   2b186:	852e                	c.mv	a0,a1
   2b188:	85b2                	c.mv	a1,a2
  return get(offset, nullptr);
   2b18a:	4601                	c.li	a2,0
   2b18c:	dc8ff0ef          	jal	ra,2a754 <elf::strtab::get(unsigned long, unsigned long*) const>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b190:	01040793          	addi	a5,s0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b194:	e01c                	c.sd	a5,0(s0)
	if (__s == 0)
   2b196:	c505                	c.beqz	a0,2b1be <elf::strtab::get[abi:cxx11](unsigned long) const+0x42>
   2b198:	84aa                	c.mv	s1,a0
   2b19a:	a76eb0ef          	jal	ra,16410 <strlen@plt>
	_M_construct(__s, __end, forward_iterator_tag());
   2b19e:	4681                	c.li	a3,0
   2b1a0:	00a48633          	add	a2,s1,a0
   2b1a4:	85a6                	c.mv	a1,s1
   2b1a6:	8522                	c.mv	a0,s0
   2b1a8:	0000e317          	auipc	t1,0xe
   2b1ac:	16033303          	ld	t1,352(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2b1b0:	9302                	c.jalr	t1
}
   2b1b2:	8522                	c.mv	a0,s0
   2b1b4:	60e2                	c.ldsp	ra,24(sp)
   2b1b6:	6442                	c.ldsp	s0,16(sp)
   2b1b8:	64a2                	c.ldsp	s1,8(sp)
   2b1ba:	6105                	c.addi16sp	sp,32
   2b1bc:	8082                	c.jr	ra
	  std::__throw_logic_error(__N("basic_string: "
   2b1be:	00002517          	auipc	a0,0x2
   2b1c2:	c6250513          	addi	a0,a0,-926 # 2ce20 <__libc_csu_fini+0x8>
   2b1c6:	afaeb0ef          	jal	ra,164c0 <std::__throw_logic_error(char const*)@plt>

000000000002b1ca <elf::sym::get_name[abi:cxx11]() const>:
std::string sym::get_name() const { return strs.get(get_data().name); }
   2b1ca:	1141                	c.addi	sp,-16
   2b1cc:	e406                	c.sdsp	ra,8(sp)
   2b1ce:	e022                	c.sdsp	s0,0(sp)
   2b1d0:	842a                	c.mv	s0,a0
   2b1d2:	0105e603          	lwu	a2,16(a1)
   2b1d6:	fa7ff0ef          	jal	ra,2b17c <elf::strtab::get[abi:cxx11](unsigned long) const>
   2b1da:	8522                	c.mv	a0,s0
   2b1dc:	60a2                	c.ldsp	ra,8(sp)
   2b1de:	6402                	c.ldsp	s0,0(sp)
   2b1e0:	0141                	c.addi	sp,16
   2b1e2:	8082                	c.jr	ra

000000000002b1e4 <elf::enums::to_string[abi:cxx11](elf::enums::shn)>:
std::string enums::to_string(shn v) {
   2b1e4:	1101                	c.addi	sp,-32
   2b1e6:	ec06                	c.sdsp	ra,24(sp)
   2b1e8:	e822                	c.sdsp	s0,16(sp)
   2b1ea:	e426                	c.sdsp	s1,8(sp)
   2b1ec:	e04a                	c.sdsp	s2,0(sp)
   2b1ee:	84aa                	c.mv	s1,a0
  if (v == shn::undef)
   2b1f0:	cda9                	c.beqz	a1,2b24a <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x66>
  if (v == shn::abs)
   2b1f2:	0005871b          	addiw	a4,a1,0
   2b1f6:	67c1                	c.lui	a5,0x10
   2b1f8:	17c5                	c.addi	a5,-15 # fff1 <__abi_tag-0x2a3>
   2b1fa:	08f70063          	beq	a4,a5,2b27a <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x96>
  if (v == shn::common)
   2b1fe:	0005871b          	addiw	a4,a1,0
   2b202:	67c1                	c.lui	a5,0x10
   2b204:	17c9                	c.addi	a5,-14 # fff2 <__abi_tag-0x2a2>
   2b206:	08f70c63          	beq	a4,a5,2b29e <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xba>
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
   2b20a:	0005841b          	addiw	s0,a1,0
	  if (__value < (unsigned)__base) return __n;
   2b20e:	47a5                	c.li	a5,9
   2b210:	0a87f963          	bgeu	a5,s0,2b2c2 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xde>
	  if (__value < __b2) return __n + 1;
   2b214:	06300793          	addi	a5,zero,99
   2b218:	1487ff63          	bgeu	a5,s0,2b376 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x192>
	  if (__value < __b3) return __n + 2;
   2b21c:	3e700793          	addi	a5,zero,999
   2b220:	1687f563          	bgeu	a5,s0,2b38a <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x1a6>
	  if (__value < __b4) return __n + 3;
   2b224:	6689                	c.lui	a3,0x2
   2b226:	70f68693          	addi	a3,a3,1807 # 270f <__abi_tag-0xdb85>
	  __n += 4;
   2b22a:	0086b933          	sltu	s2,a3,s0
   2b22e:	0911                	c.addi	s2,4
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b230:	01048793          	addi	a5,s1,16
	: allocator_type(__a), _M_p(__dat) { }
   2b234:	e09c                	c.sd	a5,0(s1)
      { _M_construct(__n, __c); }
   2b236:	02d00613          	addi	a2,zero,45
   2b23a:	85ca                	c.mv	a1,s2
   2b23c:	8526                	c.mv	a0,s1
   2b23e:	b32eb0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b242:	608c                	c.ld	a1,0(s1)
      unsigned __pos = __len - 1;
   2b244:	fff9069b          	addiw	a3,s2,-1
      while (__val >= 100)
   2b248:	a859                	c.j	2b2de <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0xfa>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b24a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b24e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2b250:	4681                	c.li	a3,0
   2b252:	00006617          	auipc	a2,0x6
   2b256:	a8b60613          	addi	a2,a2,-1397 # 30cdd <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2815>
   2b25a:	00006597          	auipc	a1,0x6
   2b25e:	a7e58593          	addi	a1,a1,-1410 # 30cd8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2810>
   2b262:	0000e317          	auipc	t1,0xe
   2b266:	0a633303          	ld	t1,166(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2b26a:	9302                	c.jalr	t1
}
   2b26c:	8526                	c.mv	a0,s1
   2b26e:	60e2                	c.ldsp	ra,24(sp)
   2b270:	6442                	c.ldsp	s0,16(sp)
   2b272:	64a2                	c.ldsp	s1,8(sp)
   2b274:	6902                	c.ldsp	s2,0(sp)
   2b276:	6105                	c.addi16sp	sp,32
   2b278:	8082                	c.jr	ra
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b27a:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b27e:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2b280:	4681                	c.li	a3,0
   2b282:	00006617          	auipc	a2,0x6
   2b286:	a6160613          	addi	a2,a2,-1439 # 30ce3 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x281b>
   2b28a:	00006597          	auipc	a1,0x6
   2b28e:	a5658593          	addi	a1,a1,-1450 # 30ce0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2818>
   2b292:	0000e317          	auipc	t1,0xe
   2b296:	07633303          	ld	t1,118(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2b29a:	9302                	c.jalr	t1
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2b29c:	bfc1                	c.j	2b26c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b29e:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b2a2:	e11c                	c.sd	a5,0(a0)
	_M_construct(__s, __end, forward_iterator_tag());
   2b2a4:	4681                	c.li	a3,0
   2b2a6:	00006617          	auipc	a2,0x6
   2b2aa:	a4860613          	addi	a2,a2,-1464 # 30cee <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2826>
   2b2ae:	00006597          	auipc	a1,0x6
   2b2b2:	a3a58593          	addi	a1,a1,-1478 # 30ce8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2820>
   2b2b6:	0000e317          	auipc	t1,0xe
   2b2ba:	05233303          	ld	t1,82(t1) # 39308 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)@@Base+0x1f600>
   2b2be:	9302                	c.jalr	t1
   2b2c0:	b775                	c.j	2b26c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b2c2:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b2c6:	e11c                	c.sd	a5,0(a0)
      { _M_construct(__n, __c); }
   2b2c8:	02d00613          	addi	a2,zero,45
   2b2cc:	4585                	c.li	a1,1
   2b2ce:	aa2eb0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b2d2:	608c                	c.ld	a1,0(s1)
   2b2d4:	06300793          	addi	a5,zero,99
   2b2d8:	0687f063          	bgeu	a5,s0,2b338 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x154>
      unsigned __pos = __len - 1;
   2b2dc:	4681                	c.li	a3,0
	  auto const __num = (__val % 100) * 2;
   2b2de:	06400813          	addi	a6,zero,100
	  __first[__pos] = __digits[__num + 1];
   2b2e2:	0000e517          	auipc	a0,0xe
   2b2e6:	07e53503          	ld	a0,126(a0) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
      while (__val >= 100)
   2b2ea:	6309                	c.lui	t1,0x2
   2b2ec:	70f30313          	addi	t1,t1,1807 # 270f <__abi_tag-0xdb85>
	  auto const __num = (__val % 100) * 2;
   2b2f0:	030477bb          	remuw	a5,s0,a6
   2b2f4:	0017979b          	slliw	a5,a5,0x1
   2b2f8:	0004089b          	addiw	a7,s0,0
	  __val /= 100;
   2b2fc:	0304543b          	divuw	s0,s0,a6
	  __first[__pos] = __digits[__num + 1];
   2b300:	02069613          	slli	a2,a3,0x20
   2b304:	9201                	c.srli	a2,0x20
   2b306:	962e                	c.add	a2,a1
   2b308:	0017871b          	addiw	a4,a5,1
   2b30c:	1702                	c.slli	a4,0x20
   2b30e:	9301                	c.srli	a4,0x20
   2b310:	972a                	c.add	a4,a0
   2b312:	00074703          	lbu	a4,0(a4)
   2b316:	00e60023          	sb	a4,0(a2)
	  __first[__pos - 1] = __digits[__num];
   2b31a:	fff6871b          	addiw	a4,a3,-1
   2b31e:	1702                	c.slli	a4,0x20
   2b320:	9301                	c.srli	a4,0x20
   2b322:	972e                	c.add	a4,a1
   2b324:	1782                	c.slli	a5,0x20
   2b326:	9381                	c.srli	a5,0x20
   2b328:	97aa                	c.add	a5,a0
   2b32a:	0007c783          	lbu	a5,0(a5)
   2b32e:	00f70023          	sb	a5,0(a4)
	  __pos -= 2;
   2b332:	36f9                	c.addiw	a3,-2
      while (__val >= 100)
   2b334:	fb136ee3          	bltu	t1,a7,2b2f0 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x10c>
      if (__val >= 10)
   2b338:	47a5                	c.li	a5,9
   2b33a:	0287f963          	bgeu	a5,s0,2b36c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x188>
	  auto const __num = __val * 2;
   2b33e:	0014141b          	slliw	s0,s0,0x1
	  __first[1] = __digits[__num + 1];
   2b342:	0000e717          	auipc	a4,0xe
   2b346:	01e73703          	ld	a4,30(a4) # 39360 <std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@@Base+0xbfc0>
   2b34a:	0014079b          	addiw	a5,s0,1
   2b34e:	1782                	c.slli	a5,0x20
   2b350:	9381                	c.srli	a5,0x20
   2b352:	97ba                	c.add	a5,a4
   2b354:	0007c783          	lbu	a5,0(a5)
   2b358:	00f580a3          	sb	a5,1(a1)
	  __first[0] = __digits[__num];
   2b35c:	1402                	c.slli	s0,0x20
   2b35e:	9001                	c.srli	s0,0x20
   2b360:	9722                	c.add	a4,s0
   2b362:	00074783          	lbu	a5,0(a4)
   2b366:	00f58023          	sb	a5,0(a1)
   2b36a:	b709                	c.j	2b26c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	__first[0] = '0' + __val;
   2b36c:	0304041b          	addiw	s0,s0,48
   2b370:	00858023          	sb	s0,0(a1)
   2b374:	bde5                	c.j	2b26c <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x88>
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   2b376:	01050793          	addi	a5,a0,16
	: allocator_type(__a), _M_p(__dat) { }
   2b37a:	e11c                	c.sd	a5,0(a0)
      { _M_construct(__n, __c); }
   2b37c:	02d00613          	addi	a2,zero,45
   2b380:	4589                	c.li	a1,2
   2b382:	9eeeb0ef          	jal	ra,16570 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)@plt>
      { return _M_dataplus._M_p; }
   2b386:	608c                	c.ld	a1,0(s1)
      while (__val >= 100)
   2b388:	bf45                	c.j	2b338 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x154>
	  if (__value < __b3) return __n + 2;
   2b38a:	490d                	c.li	s2,3
   2b38c:	b555                	c.j	2b230 <elf::enums::to_string[abi:cxx11](elf::enums::shn)+0x4c>

000000000002b38e <elf::elf::elf(std::shared_ptr<elf::loader> const&)>:
elf::elf(const std::shared_ptr<loader> &l) : m(make_shared<impl>(l)) {
   2b38e:	7159                	c.addi16sp	sp,-112
   2b390:	f486                	c.sdsp	ra,104(sp)
   2b392:	f0a2                	c.sdsp	s0,96(sp)
   2b394:	eca6                	c.sdsp	s1,88(sp)
   2b396:	e8ca                	c.sdsp	s2,80(sp)
   2b398:	e4ce                	c.sdsp	s3,72(sp)
   2b39a:	e0d2                	c.sdsp	s4,64(sp)
   2b39c:	fc56                	c.sdsp	s5,56(sp)
   2b39e:	f85a                	c.sdsp	s6,48(sp)
   2b3a0:	f45e                	c.sdsp	s7,40(sp)
   2b3a2:	f062                	c.sdsp	s8,32(sp)
   2b3a4:	84aa                	c.mv	s1,a0
   2b3a6:	8aae                	c.mv	s5,a1
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   2b3a8:	00053023          	sd	zero,0(a0)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2b3ac:	0d800513          	addi	a0,zero,216
   2b3b0:	970eb0ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2b3b4:	842a                	c.mv	s0,a0
   2b3b6:	00052423          	sw	zero,8(a0)
   2b3ba:	00052623          	sw	zero,12(a0)
   2b3be:	00052823          	sw	zero,16(a0)
   2b3c2:	00052a23          	sw	zero,20(a0)
   2b3c6:	00052c23          	sw	zero,24(a0)
   2b3ca:	00052e23          	sw	zero,28(a0)
   2b3ce:	02053023          	sd	zero,32(a0)
   2b3d2:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2b3d6:	4785                	c.li	a5,1
   2b3d8:	d91c                	c.sw	a5,48(a0)
   2b3da:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2b3dc:	0000e797          	auipc	a5,0xe
   2b3e0:	fcc7b783          	ld	a5,-52(a5) # 393a8 <vtable for std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x770>
   2b3e4:	07c1                	c.addi	a5,16
   2b3e6:	e11c                	c.sd	a5,0(a0)
   2b3e8:	03850913          	addi	s2,a0,56
      __shared_ptr(const __shared_ptr&) noexcept = default;
   2b3ec:	000ab783          	ld	a5,0(s5)
   2b3f0:	fd1c                	c.sd	a5,56(a0)
      : _M_pi(__r._M_pi)
   2b3f2:	008ab503          	ld	a0,8(s5)
   2b3f6:	e028                	c.sd	a0,64(s0)
	if (_M_pi != nullptr)
   2b3f8:	c919                	c.beqz	a0,2b40e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x80>
    if (__is_single_threaded())
   2b3fa:	0000e797          	auipc	a5,0xe
   2b3fe:	0867b783          	ld	a5,134(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b402:	0007c783          	lbu	a5,0(a5)
   2b406:	c3b9                	c.beqz	a5,2b44c <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xbe>
  { *__mem += __val; }
   2b408:	591c                	c.lw	a5,48(a0)
   2b40a:	2785                	c.addiw	a5,1
   2b40c:	d91c                	c.sw	a5,48(a0)
	: _M_start(), _M_finish(), _M_end_of_storage()
   2b40e:	08043423          	sd	zero,136(s0)
   2b412:	08043823          	sd	zero,144(s0)
   2b416:	08043c23          	sd	zero,152(s0)
   2b41a:	0a043023          	sd	zero,160(s0)
   2b41e:	0a043423          	sd	zero,168(s0)
   2b422:	0a043823          	sd	zero,176(s0)
      : _M_ptr(0), _M_refcount()
   2b426:	0a043c23          	sd	zero,184(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b42a:	0c043023          	sd	zero,192(s0)
      : _M_ptr(0), _M_refcount()
   2b42e:	0c043423          	sd	zero,200(s0)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b432:	0c043823          	sd	zero,208(s0)
	  _M_pi = __pi;
   2b436:	e480                	c.sd	s0,8(s1)
	  __p = __pi->_M_ptr();
   2b438:	0124b023          	sd	s2,0(s1)
      { return _M_ptr; }
   2b43c:	000ab503          	ld	a0,0(s5)
  } *core_hdr = (struct core_hdr *)l->load(0, sizeof *core_hdr);
   2b440:	611c                	c.ld	a5,0(a0)
   2b442:	6b9c                	c.ld	a5,16(a5)
   2b444:	461d                	c.li	a2,7
   2b446:	4581                	c.li	a1,0
   2b448:	9782                	c.jalr	a5
   2b44a:	a039                	c.j	2b458 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0xca>
      __atomic_add(__mem, __val);
   2b44c:	4585                	c.li	a1,1
   2b44e:	03050513          	addi	a0,a0,48
   2b452:	effea0ef          	jal	ra,16350 <__gnu_cxx::__atomic_add(int volatile*, int)@plt>
   2b456:	bf65                	c.j	2b40e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x80>
   2b458:	842a                	c.mv	s0,a0
  if (strncmp(core_hdr->ei_magic,
   2b45a:	4611                	c.li	a2,4
   2b45c:	00006597          	auipc	a1,0x6
   2b460:	89458593          	addi	a1,a1,-1900 # 30cf0 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2828>
   2b464:	a4ceb0ef          	jal	ra,166b0 <strncmp@plt>
   2b468:	e139                	c.bnez	a0,2b4ae <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x120>
  if (core_hdr->ei_version != 1)
   2b46a:	00644703          	lbu	a4,6(s0)
   2b46e:	4785                	c.li	a5,1
   2b470:	06f71d63          	bne	a4,a5,2b4ea <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x15c>
  if (core_hdr->ei_class != elfclass::_32 &&
   2b474:	00444703          	lbu	a4,4(s0)
   2b478:	fff7079b          	addiw	a5,a4,-1
   2b47c:	0ff7f793          	andi	a5,a5,255
   2b480:	4685                	c.li	a3,1
   2b482:	0af6e063          	bltu	a3,a5,2b522 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x194>
  if (core_hdr->ei_data != elfdata::lsb && core_hdr->ei_data != elfdata::msb)
   2b486:	00544783          	lbu	a5,5(s0)
   2b48a:	37fd                	c.addiw	a5,-1
   2b48c:	0ff7f793          	andi	a5,a5,255
   2b490:	4685                	c.li	a3,1
   2b492:	0cf6e463          	bltu	a3,a5,2b55a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x1cc>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   2b496:	4785                	c.li	a5,1
   2b498:	04000613          	addi	a2,zero,64
   2b49c:	0ef70b63          	beq	a4,a5,2b592 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x204>
   2b4a0:	000ab503          	ld	a0,0(s5)
  const void *hdr = l->load(0, hdr_size);
   2b4a4:	611c                	c.ld	a5,0(a0)
   2b4a6:	6b9c                	c.ld	a5,16(a5)
   2b4a8:	4581                	c.li	a1,0
   2b4aa:	9782                	c.jalr	a5
   2b4ac:	a0f5                	c.j	2b598 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x20a>
    throw format_error("bad ELF magic number");
   2b4ae:	4541                	c.li	a0,16
   2b4b0:	f71ea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2b4b4:	892a                	c.mv	s2,a0
  explicit format_error(const char *what_arg) : std::runtime_error(what_arg) {}
   2b4b6:	00006597          	auipc	a1,0x6
   2b4ba:	84258593          	addi	a1,a1,-1982 # 30cf8 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2830>
   2b4be:	ab2eb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2b4c2:	0000e797          	auipc	a5,0xe
   2b4c6:	e7e7b783          	ld	a5,-386(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b4ca:	07c1                	c.addi	a5,16
   2b4cc:	00f93023          	sd	a5,0(s2)
   2b4d0:	0000e617          	auipc	a2,0xe
   2b4d4:	09863603          	ld	a2,152(a2) # 39568 <elf::format_error::~format_error()@@Base+0xdcc8>
   2b4d8:	0000e597          	auipc	a1,0xe
   2b4dc:	e485b583          	ld	a1,-440(a1) # 39320 <typeinfo for elf::format_error@@Base+0x7e0>
   2b4e0:	854a                	c.mv	a0,s2
   2b4e2:	9deeb0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (_M_pi != nullptr)
   2b4e6:	842a                	c.mv	s0,a0
   2b4e8:	a635                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("unknown ELF version");
   2b4ea:	4541                	c.li	a0,16
   2b4ec:	f35ea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2b4f0:	892a                	c.mv	s2,a0
   2b4f2:	00006597          	auipc	a1,0x6
   2b4f6:	81e58593          	addi	a1,a1,-2018 # 30d10 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2848>
   2b4fa:	a76eb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2b4fe:	0000e797          	auipc	a5,0xe
   2b502:	e427b783          	ld	a5,-446(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b506:	07c1                	c.addi	a5,16
   2b508:	00f93023          	sd	a5,0(s2)
   2b50c:	0000e617          	auipc	a2,0xe
   2b510:	05c63603          	ld	a2,92(a2) # 39568 <elf::format_error::~format_error()@@Base+0xdcc8>
   2b514:	0000e597          	auipc	a1,0xe
   2b518:	e0c5b583          	ld	a1,-500(a1) # 39320 <typeinfo for elf::format_error@@Base+0x7e0>
   2b51c:	854a                	c.mv	a0,s2
   2b51e:	9a2eb0ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw format_error("bad ELF class");
   2b522:	4541                	c.li	a0,16
   2b524:	efdea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2b528:	892a                	c.mv	s2,a0
   2b52a:	00005597          	auipc	a1,0x5
   2b52e:	7fe58593          	addi	a1,a1,2046 # 30d28 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2860>
   2b532:	a3eeb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2b536:	0000e797          	auipc	a5,0xe
   2b53a:	e0a7b783          	ld	a5,-502(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b53e:	07c1                	c.addi	a5,16
   2b540:	00f93023          	sd	a5,0(s2)
   2b544:	0000e617          	auipc	a2,0xe
   2b548:	02463603          	ld	a2,36(a2) # 39568 <elf::format_error::~format_error()@@Base+0xdcc8>
   2b54c:	0000e597          	auipc	a1,0xe
   2b550:	dd45b583          	ld	a1,-556(a1) # 39320 <typeinfo for elf::format_error@@Base+0x7e0>
   2b554:	854a                	c.mv	a0,s2
   2b556:	96aeb0ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw format_error("bad ELF data order");
   2b55a:	4541                	c.li	a0,16
   2b55c:	ec5ea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2b560:	892a                	c.mv	s2,a0
   2b562:	00005597          	auipc	a1,0x5
   2b566:	7d658593          	addi	a1,a1,2006 # 30d38 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2870>
   2b56a:	a06eb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2b56e:	0000e797          	auipc	a5,0xe
   2b572:	dd27b783          	ld	a5,-558(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b576:	07c1                	c.addi	a5,16
   2b578:	00f93023          	sd	a5,0(s2)
   2b57c:	0000e617          	auipc	a2,0xe
   2b580:	fec63603          	ld	a2,-20(a2) # 39568 <elf::format_error::~format_error()@@Base+0xdcc8>
   2b584:	0000e597          	auipc	a1,0xe
   2b588:	d9c5b583          	ld	a1,-612(a1) # 39320 <typeinfo for elf::format_error@@Base+0x7e0>
   2b58c:	854a                	c.mv	a0,s2
   2b58e:	932eb0ef          	jal	ra,166c0 <__cxa_throw@plt>
  size_t hdr_size = (core_hdr->ei_class == elfclass::_32 ? sizeof(Ehdr<Elf32>)
   2b592:	03400613          	addi	a2,zero,52
   2b596:	b729                	c.j	2b4a0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x112>
  const void *hdr = l->load(0, hdr_size);
   2b598:	85aa                	c.mv	a1,a0
  canon_hdr(&m->hdr, hdr, core_hdr->ei_class, core_hdr->ei_data);
   2b59a:	6088                	c.ld	a0,0(s1)
   2b59c:	00544683          	lbu	a3,5(s0)
   2b5a0:	00444603          	lbu	a2,4(s0)
   2b5a4:	0541                	c.addi	a0,16
   2b5a6:	0000e317          	auipc	t1,0xe
   2b5aa:	d9233303          	ld	t1,-622(t1) # 39338 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)@@Base+0xd322>
   2b5ae:	9302                	c.jalr	t1
      { return _M_ptr; }
   2b5b0:	609c                	c.ld	a5,0(s1)
  if (m->hdr.version != 1)
   2b5b2:	53d4                	c.lw	a3,36(a5)
   2b5b4:	4705                	c.li	a4,1
   2b5b6:	02e69663          	bne	a3,a4,2b5e2 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x254>
  if (m->hdr.shnum && m->hdr.shstrndx >= m->hdr.shnum)
   2b5ba:	04c7d703          	lhu	a4,76(a5)
   2b5be:	c709                	c.beqz	a4,2b5c8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x23a>
   2b5c0:	04e7d683          	lhu	a3,78(a5)
   2b5c4:	04e6fb63          	bgeu	a3,a4,2b61a <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x28c>
   2b5c8:	000ab503          	ld	a0,0(s5)
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   2b5cc:	0467d603          	lhu	a2,70(a5)
   2b5d0:	0487d683          	lhu	a3,72(a5)
   2b5d4:	6118                	c.ld	a4,0(a0)
   2b5d6:	6b18                	c.ld	a4,16(a4)
   2b5d8:	02d6063b          	mulw	a2,a2,a3
   2b5dc:	7b8c                	c.ld	a1,48(a5)
   2b5de:	9702                	c.jalr	a4
   2b5e0:	a881                	c.j	2b630 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2a2>
    throw format_error("bad section ELF version");
   2b5e2:	4541                	c.li	a0,16
   2b5e4:	e3dea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2b5e8:	892a                	c.mv	s2,a0
   2b5ea:	00005597          	auipc	a1,0x5
   2b5ee:	76658593          	addi	a1,a1,1894 # 30d50 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x2888>
   2b5f2:	97eeb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2b5f6:	0000e797          	auipc	a5,0xe
   2b5fa:	d4a7b783          	ld	a5,-694(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b5fe:	07c1                	c.addi	a5,16
   2b600:	00f93023          	sd	a5,0(s2)
   2b604:	0000e617          	auipc	a2,0xe
   2b608:	f6463603          	ld	a2,-156(a2) # 39568 <elf::format_error::~format_error()@@Base+0xdcc8>
   2b60c:	0000e597          	auipc	a1,0xe
   2b610:	d145b583          	ld	a1,-748(a1) # 39320 <typeinfo for elf::format_error@@Base+0x7e0>
   2b614:	854a                	c.mv	a0,s2
   2b616:	8aaeb0ef          	jal	ra,166c0 <__cxa_throw@plt>
    throw format_error("bad section name string table index");
   2b61a:	4541                	c.li	a0,16
   2b61c:	e05ea0ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2b620:	892a                	c.mv	s2,a0
   2b622:	00005597          	auipc	a1,0x5
   2b626:	74658593          	addi	a1,a1,1862 # 30d68 <typeinfo name for std::_Sp_counted_ptr_inplace<dwarf::line_table::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x28a0>
   2b62a:	946eb0ef          	jal	ra,16770 <std::runtime_error::runtime_error(char const*)@plt>
   2b62e:	a015                	c.j	2b652 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2c4>
  const void *seg_data = l->load(m->hdr.phoff, m->hdr.phentsize * m->hdr.phnum);
   2b630:	89aa                	c.mv	s3,a0
   2b632:	6080                	c.ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   2b634:	04845783          	lhu	a5,72(s0)
   2b638:	4901                	c.li	s2,0
   2b63a:	c7e5                	c.beqz	a5,2b722 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x394>
    m->segments.push_back(segment(*this, seg));
   2b63c:	8a0a                	c.mv	s4,sp
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b63e:	0000ec17          	auipc	s8,0xe
   2b642:	ecac3c03          	ld	s8,-310(s8) # 39508 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)@@Base+0xccf8>
    return ::__libc_single_threaded;
   2b646:	0000eb17          	auipc	s6,0xe
   2b64a:	e3ab3b03          	ld	s6,-454(s6) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b64e:	4b85                	c.li	s7,1
   2b650:	a09d                	c.j	2b6b6 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x328>
   2b652:	0000e797          	auipc	a5,0xe
   2b656:	cee7b783          	ld	a5,-786(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b65a:	07c1                	c.addi	a5,16
   2b65c:	00f93023          	sd	a5,0(s2)
    throw format_error("bad section name string table index");
   2b660:	0000e617          	auipc	a2,0xe
   2b664:	f0863603          	ld	a2,-248(a2) # 39568 <elf::format_error::~format_error()@@Base+0xdcc8>
   2b668:	0000e597          	auipc	a1,0xe
   2b66c:	cb85b583          	ld	a1,-840(a1) # 39320 <typeinfo for elf::format_error@@Base+0x7e0>
   2b670:	854a                	c.mv	a0,s2
   2b672:	84eeb0ef          	jal	ra,166c0 <__cxa_throw@plt>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2b676:	782c                	c.ld	a1,112(s0)
   2b678:	7c3c                	c.ld	a5,120(s0)
   2b67a:	04f58a63          	beq	a1,a5,2b6ce <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x340>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2b67e:	6782                	c.ldsp	a5,0(sp)
   2b680:	e19c                	c.sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b682:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2b686:	67a2                	c.ldsp	a5,8(sp)
	__r._M_pi = _M_pi;
   2b688:	e402                	c.sdsp	zero,8(sp)
	_M_pi = __tmp;
   2b68a:	e59c                	c.sd	a5,8(a1)
	__r._M_ptr = nullptr;
   2b68c:	e002                	c.sdsp	zero,0(sp)
	    ++this->_M_impl._M_finish;
   2b68e:	783c                	c.ld	a5,112(s0)
   2b690:	07c1                	c.addi	a5,16
   2b692:	f83c                	c.sd	a5,112(s0)
	if (_M_pi != nullptr)
   2b694:	6422                	c.ldsp	s0,8(sp)
   2b696:	c811                	c.beqz	s0,2b6aa <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
    if (__is_single_threaded())
   2b698:	000b4783          	lbu	a5,0(s6)
   2b69c:	cf95                	c.beqz	a5,2b6d8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x34a>
    _Atomic_word __result = *__mem;
   2b69e:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2b6a0:	fff5079b          	addiw	a5,a0,-1
   2b6a4:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b6a6:	03750f63          	beq	a0,s7,2b6e4 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x356>
  for (unsigned i = 0; i < m->hdr.phnum; i++) {
   2b6aa:	2905                	c.addiw	s2,1
      { return _M_ptr; }
   2b6ac:	6080                	c.ld	s0,0(s1)
   2b6ae:	04845783          	lhu	a5,72(s0)
   2b6b2:	06f97863          	bgeu	s2,a5,2b722 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x394>
    const void *seg = ((const char *)seg_data) + i * m->hdr.phentsize;
   2b6b6:	04645603          	lhu	a2,70(s0)
   2b6ba:	0326063b          	mulw	a2,a2,s2
   2b6be:	1602                	c.slli	a2,0x20
   2b6c0:	9201                	c.srli	a2,0x20
    m->segments.push_back(segment(*this, seg));
   2b6c2:	964e                	c.add	a2,s3
   2b6c4:	85a6                	c.mv	a1,s1
   2b6c6:	8552                	c.mv	a0,s4
   2b6c8:	817ff0ef          	jal	ra,2aede <elf::segment::segment(elf::elf const&, void const*)>
   2b6cc:	b76d                	c.j	2b676 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x2e8>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b6ce:	8652                	c.mv	a2,s4
   2b6d0:	06840513          	addi	a0,s0,104
   2b6d4:	9c02                	c.jalr	s8
   2b6d6:	bf7d                	c.j	2b694 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x306>
      return __exchange_and_add(__mem, __val);
   2b6d8:	55fd                	c.li	a1,-1
   2b6da:	03040513          	addi	a0,s0,48
   2b6de:	ca3ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b6e2:	b7d1                	c.j	2b6a6 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x318>
	_M_dispose();
   2b6e4:	601c                	c.ld	a5,0(s0)
   2b6e6:	6b9c                	c.ld	a5,16(a5)
   2b6e8:	8522                	c.mv	a0,s0
   2b6ea:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b6ec:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b6f0:	0000e797          	auipc	a5,0xe
   2b6f4:	d907b783          	ld	a5,-624(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b6f8:	0007c783          	lbu	a5,0(a5)
   2b6fc:	cf89                	c.beqz	a5,2b716 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x388>
    _Atomic_word __result = *__mem;
   2b6fe:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2b700:	fff5079b          	addiw	a5,a0,-1
   2b704:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b706:	4785                	c.li	a5,1
   2b708:	faf511e3          	bne	a0,a5,2b6aa <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
	    _M_destroy();
   2b70c:	601c                	c.ld	a5,0(s0)
   2b70e:	6f9c                	c.ld	a5,24(a5)
   2b710:	8522                	c.mv	a0,s0
   2b712:	9782                	c.jalr	a5
   2b714:	bf59                	c.j	2b6aa <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x31c>
      return __exchange_and_add(__mem, __val);
   2b716:	55fd                	c.li	a1,-1
   2b718:	03440513          	addi	a0,s0,52
   2b71c:	c65ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b720:	b7dd                	c.j	2b706 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x378>
      { return _M_ptr; }
   2b722:	000ab503          	ld	a0,0(s5)
  const void *sec_data = l->load(m->hdr.shoff, m->hdr.shentsize * m->hdr.shnum);
   2b726:	04a45603          	lhu	a2,74(s0)
   2b72a:	04c45703          	lhu	a4,76(s0)
   2b72e:	611c                	c.ld	a5,0(a0)
   2b730:	6b9c                	c.ld	a5,16(a5)
   2b732:	02e6063b          	mulw	a2,a2,a4
   2b736:	7c0c                	c.ld	a1,56(s0)
   2b738:	9782                	c.jalr	a5
   2b73a:	89aa                	c.mv	s3,a0
   2b73c:	6080                	c.ld	s0,0(s1)
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   2b73e:	04c45783          	lhu	a5,76(s0)
   2b742:	12078e63          	beq	a5,zero,2b87e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4f0>
   2b746:	4901                	c.li	s2,0
    m->sections.push_back(section(*this, sec));
   2b748:	01010a13          	addi	s4,sp,16
   2b74c:	0000eb97          	auipc	s7,0xe
   2b750:	b7cbbb83          	ld	s7,-1156(s7) # 392c8 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)@@Base+0xc9b6>
    return ::__libc_single_threaded;
   2b754:	0000ea97          	auipc	s5,0xe
   2b758:	d2caba83          	ld	s5,-724(s5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b75c:	4b05                	c.li	s6,1
   2b75e:	a089                	c.j	2b7a0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x412>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   2b760:	6c2c                	c.ld	a1,88(s0)
   2b762:	703c                	c.ld	a5,96(s0)
   2b764:	04f58a63          	beq	a1,a5,2b7b8 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x42a>
      : _M_ptr(__r._M_ptr), _M_refcount()
   2b768:	67c2                	c.ldsp	a5,16(sp)
   2b76a:	e19c                	c.sd	a5,0(a1)
      constexpr __shared_count() noexcept : _M_pi(0)
   2b76c:	0005b423          	sd	zero,8(a1)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2b770:	67e2                	c.ldsp	a5,24(sp)
	__r._M_pi = _M_pi;
   2b772:	ec02                	c.sdsp	zero,24(sp)
	_M_pi = __tmp;
   2b774:	e59c                	c.sd	a5,8(a1)
	__r._M_ptr = nullptr;
   2b776:	e802                	c.sdsp	zero,16(sp)
	    ++this->_M_impl._M_finish;
   2b778:	6c3c                	c.ld	a5,88(s0)
   2b77a:	07c1                	c.addi	a5,16
   2b77c:	ec3c                	c.sd	a5,88(s0)
	if (_M_pi != nullptr)
   2b77e:	6462                	c.ldsp	s0,24(sp)
   2b780:	c811                	c.beqz	s0,2b794 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
    if (__is_single_threaded())
   2b782:	000ac783          	lbu	a5,0(s5)
   2b786:	cf95                	c.beqz	a5,2b7c2 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x434>
    _Atomic_word __result = *__mem;
   2b788:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2b78a:	fff5079b          	addiw	a5,a0,-1
   2b78e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2b790:	03650f63          	beq	a0,s6,2b7ce <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x440>
  for (unsigned i = 0; i < m->hdr.shnum; i++) {
   2b794:	2905                	c.addiw	s2,1
      { return _M_ptr; }
   2b796:	6080                	c.ld	s0,0(s1)
   2b798:	04c45783          	lhu	a5,76(s0)
   2b79c:	0ef97163          	bgeu	s2,a5,2b87e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x4f0>
    const void *sec = ((const char *)sec_data) + i * m->hdr.shentsize;
   2b7a0:	04a45603          	lhu	a2,74(s0)
   2b7a4:	0326063b          	mulw	a2,a2,s2
   2b7a8:	1602                	c.slli	a2,0x20
   2b7aa:	9201                	c.srli	a2,0x20
    m->sections.push_back(section(*this, sec));
   2b7ac:	964e                	c.add	a2,s3
   2b7ae:	85a6                	c.mv	a1,s1
   2b7b0:	8552                	c.mv	a0,s4
   2b7b2:	80dff0ef          	jal	ra,2afbe <elf::section::section(elf::elf const&, void const*)>
   2b7b6:	b76d                	c.j	2b760 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3d2>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   2b7b8:	8652                	c.mv	a2,s4
   2b7ba:	05040513          	addi	a0,s0,80
   2b7be:	9b82                	c.jalr	s7
   2b7c0:	bf7d                	c.j	2b77e <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x3f0>
      return __exchange_and_add(__mem, __val);
   2b7c2:	55fd                	c.li	a1,-1
   2b7c4:	03040513          	addi	a0,s0,48
   2b7c8:	bb9ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b7cc:	b7d1                	c.j	2b790 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x402>
	_M_dispose();
   2b7ce:	601c                	c.ld	a5,0(s0)
   2b7d0:	6b9c                	c.ld	a5,16(a5)
   2b7d2:	8522                	c.mv	a0,s0
   2b7d4:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2b7d6:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2b7da:	0000e797          	auipc	a5,0xe
   2b7de:	ca67b783          	ld	a5,-858(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2b7e2:	0007c783          	lbu	a5,0(a5)
   2b7e6:	cf89                	c.beqz	a5,2b800 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x472>
    _Atomic_word __result = *__mem;
   2b7e8:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2b7ea:	fff5079b          	addiw	a5,a0,-1
   2b7ee:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2b7f0:	4785                	c.li	a5,1
   2b7f2:	faf511e3          	bne	a0,a5,2b794 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
	    _M_destroy();
   2b7f6:	601c                	c.ld	a5,0(s0)
   2b7f8:	6f9c                	c.ld	a5,24(a5)
   2b7fa:	8522                	c.mv	a0,s0
   2b7fc:	9782                	c.jalr	a5
   2b7fe:	bf59                	c.j	2b794 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x406>
      return __exchange_and_add(__mem, __val);
   2b800:	55fd                	c.li	a1,-1
   2b802:	03440513          	addi	a0,s0,52
   2b806:	b7bea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2b80a:	b7dd                	c.j	2b7f0 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x462>
    throw format_error("bad ELF magic number");
   2b80c:	842a                	c.mv	s0,a0
   2b80e:	854a                	c.mv	a0,s2
   2b810:	cc1ea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
	if (_M_pi != nullptr)
   2b814:	6488                	c.ld	a0,8(s1)
   2b816:	c511                	c.beqz	a0,2b822 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x494>
	  _M_pi->_M_release();
   2b818:	0000e317          	auipc	t1,0xe
   2b81c:	bb033303          	ld	t1,-1104(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2b820:	9302                	c.jalr	t1
   2b822:	8522                	c.mv	a0,s0
   2b824:	ecdea0ef          	jal	ra,166f0 <_Unwind_Resume@plt>
    throw format_error("unknown ELF version");
   2b828:	842a                	c.mv	s0,a0
   2b82a:	854a                	c.mv	a0,s2
   2b82c:	ca5ea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2b830:	b7d5                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad ELF class");
   2b832:	842a                	c.mv	s0,a0
   2b834:	854a                	c.mv	a0,s2
   2b836:	c9bea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2b83a:	bfe9                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad ELF data order");
   2b83c:	842a                	c.mv	s0,a0
   2b83e:	854a                	c.mv	a0,s2
   2b840:	c91ea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2b844:	bfc1                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad section ELF version");
   2b846:	842a                	c.mv	s0,a0
   2b848:	854a                	c.mv	a0,s2
   2b84a:	c87ea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2b84e:	b7d9                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
    throw format_error("bad section name string table index");
   2b850:	842a                	c.mv	s0,a0
   2b852:	854a                	c.mv	a0,s2
   2b854:	c7dea0ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2b858:	bf75                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	if (_M_pi != nullptr)
   2b85a:	842a                	c.mv	s0,a0
   2b85c:	6522                	c.ldsp	a0,8(sp)
   2b85e:	d95d                	c.beqz	a0,2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	  _M_pi->_M_release();
   2b860:	0000e317          	auipc	t1,0xe
   2b864:	b6833303          	ld	t1,-1176(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2b868:	9302                	c.jalr	t1
   2b86a:	b76d                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	if (_M_pi != nullptr)
   2b86c:	842a                	c.mv	s0,a0
   2b86e:	6562                	c.ldsp	a0,24(sp)
   2b870:	d155                	c.beqz	a0,2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
	  _M_pi->_M_release();
   2b872:	0000e317          	auipc	t1,0xe
   2b876:	b5633303          	ld	t1,-1194(t1) # 393c8 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)1>::_M_release()@@Base+0x22740>
   2b87a:	9302                	c.jalr	t1
   2b87c:	bf61                	c.j	2b814 <elf::elf::elf(std::shared_ptr<elf::loader> const&)+0x486>
}
   2b87e:	70a6                	c.ldsp	ra,104(sp)
   2b880:	7406                	c.ldsp	s0,96(sp)
   2b882:	64e6                	c.ldsp	s1,88(sp)
   2b884:	6946                	c.ldsp	s2,80(sp)
   2b886:	69a6                	c.ldsp	s3,72(sp)
   2b888:	6a06                	c.ldsp	s4,64(sp)
   2b88a:	7ae2                	c.ldsp	s5,56(sp)
   2b88c:	7b42                	c.ldsp	s6,48(sp)
   2b88e:	7ba2                	c.ldsp	s7,40(sp)
   2b890:	7c02                	c.ldsp	s8,32(sp)
   2b892:	6165                	c.addi16sp	sp,112
   2b894:	8082                	c.jr	ra

000000000002b896 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2b896:	8082                	c.jr	ra

000000000002b898 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b898:	8082                	c.jr	ra

000000000002b89a <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b89a:	8082                	c.jr	ra

000000000002b89c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b89c:	8082                	c.jr	ra

000000000002b89e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b89e:	8082                	c.jr	ra

000000000002b8a0 <elf::format_error::~format_error()>:
class format_error : public std::runtime_error {
   2b8a0:	1141                	c.addi	sp,-16
   2b8a2:	e406                	c.sdsp	ra,8(sp)
   2b8a4:	0000e797          	auipc	a5,0xe
   2b8a8:	a9c7b783          	ld	a5,-1380(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b8ac:	07c1                	c.addi	a5,16
   2b8ae:	e11c                	c.sd	a5,0(a0)
   2b8b0:	c91ea0ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   2b8b4:	60a2                	c.ldsp	ra,8(sp)
   2b8b6:	0141                	c.addi	sp,16
   2b8b8:	8082                	c.jr	ra

000000000002b8ba <elf::format_error::~format_error()>:
   2b8ba:	1141                	c.addi	sp,-16
   2b8bc:	e406                	c.sdsp	ra,8(sp)
   2b8be:	e022                	c.sdsp	s0,0(sp)
   2b8c0:	842a                	c.mv	s0,a0
   2b8c2:	0000e797          	auipc	a5,0xe
   2b8c6:	a7e7b783          	ld	a5,-1410(a5) # 39340 <vtable for elf::format_error@@Base+0x758>
   2b8ca:	07c1                	c.addi	a5,16
   2b8cc:	e11c                	c.sd	a5,0(a0)
   2b8ce:	c73ea0ef          	jal	ra,16540 <std::runtime_error::~runtime_error()@plt>
   2b8d2:	8522                	c.mv	a0,s0
   2b8d4:	c3dea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b8d8:	60a2                	c.ldsp	ra,8(sp)
   2b8da:	6402                	c.ldsp	s0,0(sp)
   2b8dc:	0141                	c.addi	sp,16
   2b8de:	8082                	c.jr	ra

000000000002b8e0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b8e0:	1141                	c.addi	sp,-16
   2b8e2:	e406                	c.sdsp	ra,8(sp)
   2b8e4:	c2dea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b8e8:	60a2                	c.ldsp	ra,8(sp)
   2b8ea:	0141                	c.addi	sp,16
   2b8ec:	8082                	c.jr	ra

000000000002b8ee <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b8ee:	1141                	c.addi	sp,-16
   2b8f0:	e406                	c.sdsp	ra,8(sp)
   2b8f2:	c1fea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b8f6:	60a2                	c.ldsp	ra,8(sp)
   2b8f8:	0141                	c.addi	sp,16
   2b8fa:	8082                	c.jr	ra

000000000002b8fc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b8fc:	1141                	c.addi	sp,-16
   2b8fe:	e406                	c.sdsp	ra,8(sp)
   2b900:	c11ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b904:	60a2                	c.ldsp	ra,8(sp)
   2b906:	0141                	c.addi	sp,16
   2b908:	8082                	c.jr	ra

000000000002b90a <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b90a:	1141                	c.addi	sp,-16
   2b90c:	e406                	c.sdsp	ra,8(sp)
   2b90e:	c03ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b912:	60a2                	c.ldsp	ra,8(sp)
   2b914:	0141                	c.addi	sp,16
   2b916:	8082                	c.jr	ra

000000000002b918 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
   2b918:	1141                	c.addi	sp,-16
   2b91a:	e406                	c.sdsp	ra,8(sp)
   2b91c:	bf5ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b920:	60a2                	c.ldsp	ra,8(sp)
   2b922:	0141                	c.addi	sp,16
   2b924:	8082                	c.jr	ra

000000000002b926 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2b926:	1141                	c.addi	sp,-16
   2b928:	e406                	c.sdsp	ra,8(sp)
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2b92a:	be7ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   2b92e:	60a2                	c.ldsp	ra,8(sp)
   2b930:	0141                	c.addi	sp,16
   2b932:	8082                	c.jr	ra

000000000002b934 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2b934:	1141                	c.addi	sp,-16
   2b936:	e406                	c.sdsp	ra,8(sp)
   2b938:	bd9ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   2b93c:	60a2                	c.ldsp	ra,8(sp)
   2b93e:	0141                	c.addi	sp,16
   2b940:	8082                	c.jr	ra

000000000002b942 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2b942:	1141                	c.addi	sp,-16
   2b944:	e406                	c.sdsp	ra,8(sp)
   2b946:	bcbea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   2b94a:	60a2                	c.ldsp	ra,8(sp)
   2b94c:	0141                	c.addi	sp,16
   2b94e:	8082                	c.jr	ra

000000000002b950 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2b950:	1141                	c.addi	sp,-16
   2b952:	e406                	c.sdsp	ra,8(sp)
   2b954:	bbdea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   2b958:	60a2                	c.ldsp	ra,8(sp)
   2b95a:	0141                	c.addi	sp,16
   2b95c:	8082                	c.jr	ra

000000000002b95e <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2b95e:	1141                	c.addi	sp,-16
   2b960:	e406                	c.sdsp	ra,8(sp)
   2b962:	bafea0ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   2b966:	60a2                	c.ldsp	ra,8(sp)
   2b968:	0141                	c.addi	sp,16
   2b96a:	8082                	c.jr	ra

000000000002b96c <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2b96c:	1141                	c.addi	sp,-16
   2b96e:	e406                	c.sdsp	ra,8(sp)
   2b970:	e022                	c.sdsp	s0,0(sp)
   2b972:	03850413          	addi	s0,a0,56
	    ||
   2b976:	0000e797          	auipc	a5,0xe
   2b97a:	bc27b783          	ld	a5,-1086(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   2b97e:	02f58a63          	beq	a1,a5,2b9b2 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2b982:	6588                	c.ld	a0,8(a1)
   2b984:	0000e797          	auipc	a5,0xe
   2b988:	a8c7b783          	ld	a5,-1396(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2b98c:	02f50363          	beq	a0,a5,2b9b2 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2b990:	00054703          	lbu	a4,0(a0)
   2b994:	02a00793          	addi	a5,zero,42
   2b998:	02f70263          	beq	a4,a5,2b9bc <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2b99c:	0000e597          	auipc	a1,0xe
   2b9a0:	a745b583          	ld	a1,-1420(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2b9a4:	9bdea0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   2b9a8:	00153513          	sltiu	a0,a0,1
   2b9ac:	40a00533          	sub	a0,zero,a0
   2b9b0:	8c69                	c.and	s0,a0
      }
   2b9b2:	8522                	c.mv	a0,s0
   2b9b4:	60a2                	c.ldsp	ra,8(sp)
   2b9b6:	6402                	c.ldsp	s0,0(sp)
   2b9b8:	0141                	c.addi	sp,16
   2b9ba:	8082                	c.jr	ra
	return nullptr;
   2b9bc:	4401                	c.li	s0,0
   2b9be:	bfd5                	c.j	2b9b2 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002b9c0 <elf::section_type_mismatch::~section_type_mismatch()>:
class section_type_mismatch : public std::logic_error {
   2b9c0:	1141                	c.addi	sp,-16
   2b9c2:	e406                	c.sdsp	ra,8(sp)
   2b9c4:	0000e797          	auipc	a5,0xe
   2b9c8:	9f47b783          	ld	a5,-1548(a5) # 393b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   2b9cc:	07c1                	c.addi	a5,16
   2b9ce:	e11c                	c.sd	a5,0(a0)
   2b9d0:	d31ea0ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   2b9d4:	60a2                	c.ldsp	ra,8(sp)
   2b9d6:	0141                	c.addi	sp,16
   2b9d8:	8082                	c.jr	ra

000000000002b9da <elf::section_type_mismatch::~section_type_mismatch()>:
   2b9da:	1141                	c.addi	sp,-16
   2b9dc:	e406                	c.sdsp	ra,8(sp)
   2b9de:	e022                	c.sdsp	s0,0(sp)
   2b9e0:	842a                	c.mv	s0,a0
   2b9e2:	0000e797          	auipc	a5,0xe
   2b9e6:	9d67b783          	ld	a5,-1578(a5) # 393b8 <vtable for elf::section_type_mismatch@@Base+0x7a8>
   2b9ea:	07c1                	c.addi	a5,16
   2b9ec:	e11c                	c.sd	a5,0(a0)
   2b9ee:	d13ea0ef          	jal	ra,16700 <std::logic_error::~logic_error()@plt>
   2b9f2:	8522                	c.mv	a0,s0
   2b9f4:	b1dea0ef          	jal	ra,16510 <operator delete(void*)@plt>
   2b9f8:	60a2                	c.ldsp	ra,8(sp)
   2b9fa:	6402                	c.ldsp	s0,0(sp)
   2b9fc:	0141                	c.addi	sp,16
   2b9fe:	8082                	c.jr	ra

000000000002ba00 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2ba00:	1141                	c.addi	sp,-16
   2ba02:	e406                	c.sdsp	ra,8(sp)
   2ba04:	e022                	c.sdsp	s0,0(sp)
   2ba06:	03850413          	addi	s0,a0,56
	    ||
   2ba0a:	0000e797          	auipc	a5,0xe
   2ba0e:	b2e7b783          	ld	a5,-1234(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   2ba12:	02f58a63          	beq	a1,a5,2ba46 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2ba16:	6588                	c.ld	a0,8(a1)
   2ba18:	0000e797          	auipc	a5,0xe
   2ba1c:	9f87b783          	ld	a5,-1544(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2ba20:	02f50363          	beq	a0,a5,2ba46 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2ba24:	00054703          	lbu	a4,0(a0)
   2ba28:	02a00793          	addi	a5,zero,42
   2ba2c:	02f70263          	beq	a4,a5,2ba50 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2ba30:	0000e597          	auipc	a1,0xe
   2ba34:	9e05b583          	ld	a1,-1568(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2ba38:	929ea0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   2ba3c:	00153513          	sltiu	a0,a0,1
   2ba40:	40a00533          	sub	a0,zero,a0
   2ba44:	8c69                	c.and	s0,a0
      }
   2ba46:	8522                	c.mv	a0,s0
   2ba48:	60a2                	c.ldsp	ra,8(sp)
   2ba4a:	6402                	c.ldsp	s0,0(sp)
   2ba4c:	0141                	c.addi	sp,16
   2ba4e:	8082                	c.jr	ra
	return nullptr;
   2ba50:	4401                	c.li	s0,0
   2ba52:	bfd5                	c.j	2ba46 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002ba54 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2ba54:	1141                	c.addi	sp,-16
   2ba56:	e406                	c.sdsp	ra,8(sp)
   2ba58:	e022                	c.sdsp	s0,0(sp)
   2ba5a:	03850413          	addi	s0,a0,56
	    ||
   2ba5e:	0000e797          	auipc	a5,0xe
   2ba62:	ada7b783          	ld	a5,-1318(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   2ba66:	02f58a63          	beq	a1,a5,2ba9a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2ba6a:	6588                	c.ld	a0,8(a1)
   2ba6c:	0000e797          	auipc	a5,0xe
   2ba70:	9a47b783          	ld	a5,-1628(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2ba74:	02f50363          	beq	a0,a5,2ba9a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2ba78:	00054703          	lbu	a4,0(a0)
   2ba7c:	02a00793          	addi	a5,zero,42
   2ba80:	02f70263          	beq	a4,a5,2baa4 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2ba84:	0000e597          	auipc	a1,0xe
   2ba88:	98c5b583          	ld	a1,-1652(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2ba8c:	8d5ea0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   2ba90:	00153513          	sltiu	a0,a0,1
   2ba94:	40a00533          	sub	a0,zero,a0
   2ba98:	8c69                	c.and	s0,a0
      }
   2ba9a:	8522                	c.mv	a0,s0
   2ba9c:	60a2                	c.ldsp	ra,8(sp)
   2ba9e:	6402                	c.ldsp	s0,0(sp)
   2baa0:	0141                	c.addi	sp,16
   2baa2:	8082                	c.jr	ra
	return nullptr;
   2baa4:	4401                	c.li	s0,0
   2baa6:	bfd5                	c.j	2ba9a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002baa8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2baa8:	1141                	c.addi	sp,-16
   2baaa:	e406                	c.sdsp	ra,8(sp)
   2baac:	e022                	c.sdsp	s0,0(sp)
   2baae:	03850413          	addi	s0,a0,56
	    ||
   2bab2:	0000e797          	auipc	a5,0xe
   2bab6:	a867b783          	ld	a5,-1402(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   2baba:	02f58a63          	beq	a1,a5,2baee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2babe:	6588                	c.ld	a0,8(a1)
   2bac0:	0000e797          	auipc	a5,0xe
   2bac4:	9507b783          	ld	a5,-1712(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2bac8:	02f50363          	beq	a0,a5,2baee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2bacc:	00054703          	lbu	a4,0(a0)
   2bad0:	02a00793          	addi	a5,zero,42
   2bad4:	02f70263          	beq	a4,a5,2baf8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2bad8:	0000e597          	auipc	a1,0xe
   2badc:	9385b583          	ld	a1,-1736(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2bae0:	881ea0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   2bae4:	00153513          	sltiu	a0,a0,1
   2bae8:	40a00533          	sub	a0,zero,a0
   2baec:	8c69                	c.and	s0,a0
      }
   2baee:	8522                	c.mv	a0,s0
   2baf0:	60a2                	c.ldsp	ra,8(sp)
   2baf2:	6402                	c.ldsp	s0,0(sp)
   2baf4:	0141                	c.addi	sp,16
   2baf6:	8082                	c.jr	ra
	return nullptr;
   2baf8:	4401                	c.li	s0,0
   2bafa:	bfd5                	c.j	2baee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002bafc <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2bafc:	1141                	c.addi	sp,-16
   2bafe:	e406                	c.sdsp	ra,8(sp)
   2bb00:	e022                	c.sdsp	s0,0(sp)
   2bb02:	03850413          	addi	s0,a0,56
	    ||
   2bb06:	0000e797          	auipc	a5,0xe
   2bb0a:	a327b783          	ld	a5,-1486(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   2bb0e:	02f58a63          	beq	a1,a5,2bb42 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2bb12:	6588                	c.ld	a0,8(a1)
   2bb14:	0000e797          	auipc	a5,0xe
   2bb18:	8fc7b783          	ld	a5,-1796(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2bb1c:	02f50363          	beq	a0,a5,2bb42 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2bb20:	00054703          	lbu	a4,0(a0)
   2bb24:	02a00793          	addi	a5,zero,42
   2bb28:	02f70263          	beq	a4,a5,2bb4c <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2bb2c:	0000e597          	auipc	a1,0xe
   2bb30:	8e45b583          	ld	a1,-1820(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2bb34:	82dea0ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   2bb38:	00153513          	sltiu	a0,a0,1
   2bb3c:	40a00533          	sub	a0,zero,a0
   2bb40:	8c69                	c.and	s0,a0
      }
   2bb42:	8522                	c.mv	a0,s0
   2bb44:	60a2                	c.ldsp	ra,8(sp)
   2bb46:	6402                	c.ldsp	s0,0(sp)
   2bb48:	0141                	c.addi	sp,16
   2bb4a:	8082                	c.jr	ra
	return nullptr;
   2bb4c:	4401                	c.li	s0,0
   2bb4e:	bfd5                	c.j	2bb42 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002bb50 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bb50:	1141                	c.addi	sp,-16
   2bb52:	e406                	c.sdsp	ra,8(sp)
   2bb54:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2bb56:	6120                	c.ld	s0,64(a0)
   2bb58:	cc19                	c.beqz	s0,2bb76 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2bb5a:	0000e797          	auipc	a5,0xe
   2bb5e:	9267b783          	ld	a5,-1754(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bb62:	0007c783          	lbu	a5,0(a5)
   2bb66:	cf81                	c.beqz	a5,2bb7e <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2bb68:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bb6a:	fff5079b          	addiw	a5,a0,-1
   2bb6e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bb70:	4785                	c.li	a5,1
   2bb72:	00f50c63          	beq	a0,a5,2bb8a <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2bb76:	60a2                	c.ldsp	ra,8(sp)
   2bb78:	6402                	c.ldsp	s0,0(sp)
   2bb7a:	0141                	c.addi	sp,16
   2bb7c:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bb7e:	55fd                	c.li	a1,-1
   2bb80:	03040513          	addi	a0,s0,48
   2bb84:	ffcea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bb88:	b7e5                	c.j	2bb70 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2bb8a:	601c                	c.ld	a5,0(s0)
   2bb8c:	6b9c                	c.ld	a5,16(a5)
   2bb8e:	8522                	c.mv	a0,s0
   2bb90:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bb92:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bb96:	0000e797          	auipc	a5,0xe
   2bb9a:	8ea7b783          	ld	a5,-1814(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bb9e:	0007c783          	lbu	a5,0(a5)
   2bba2:	cf89                	c.beqz	a5,2bbbc <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bba4:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bba6:	fff5079b          	addiw	a5,a0,-1
   2bbaa:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bbac:	4785                	c.li	a5,1
   2bbae:	fcf514e3          	bne	a0,a5,2bb76 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2bbb2:	601c                	c.ld	a5,0(s0)
   2bbb4:	6f9c                	c.ld	a5,24(a5)
   2bbb6:	8522                	c.mv	a0,s0
   2bbb8:	9782                	c.jalr	a5
      }
   2bbba:	bf75                	c.j	2bb76 <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2bbbc:	55fd                	c.li	a1,-1
   2bbbe:	03440513          	addi	a0,s0,52
   2bbc2:	fbeea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bbc6:	b7dd                	c.j	2bbac <std::_Sp_counted_ptr_inplace<elf::segment::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002bbc8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bbc8:	1141                	c.addi	sp,-16
   2bbca:	e406                	c.sdsp	ra,8(sp)
   2bbcc:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2bbce:	6120                	c.ld	s0,64(a0)
   2bbd0:	cc19                	c.beqz	s0,2bbee <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2bbd2:	0000e797          	auipc	a5,0xe
   2bbd6:	8ae7b783          	ld	a5,-1874(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bbda:	0007c783          	lbu	a5,0(a5)
   2bbde:	cf81                	c.beqz	a5,2bbf6 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2bbe0:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bbe2:	fff5079b          	addiw	a5,a0,-1
   2bbe6:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bbe8:	4785                	c.li	a5,1
   2bbea:	00f50c63          	beq	a0,a5,2bc02 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2bbee:	60a2                	c.ldsp	ra,8(sp)
   2bbf0:	6402                	c.ldsp	s0,0(sp)
   2bbf2:	0141                	c.addi	sp,16
   2bbf4:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bbf6:	55fd                	c.li	a1,-1
   2bbf8:	03040513          	addi	a0,s0,48
   2bbfc:	f84ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bc00:	b7e5                	c.j	2bbe8 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2bc02:	601c                	c.ld	a5,0(s0)
   2bc04:	6b9c                	c.ld	a5,16(a5)
   2bc06:	8522                	c.mv	a0,s0
   2bc08:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bc0a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bc0e:	0000e797          	auipc	a5,0xe
   2bc12:	8727b783          	ld	a5,-1934(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bc16:	0007c783          	lbu	a5,0(a5)
   2bc1a:	cf89                	c.beqz	a5,2bc34 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bc1c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bc1e:	fff5079b          	addiw	a5,a0,-1
   2bc22:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bc24:	4785                	c.li	a5,1
   2bc26:	fcf514e3          	bne	a0,a5,2bbee <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2bc2a:	601c                	c.ld	a5,0(s0)
   2bc2c:	6f9c                	c.ld	a5,24(a5)
   2bc2e:	8522                	c.mv	a0,s0
   2bc30:	9782                	c.jalr	a5
      }
   2bc32:	bf75                	c.j	2bbee <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2bc34:	55fd                	c.li	a1,-1
   2bc36:	03440513          	addi	a0,s0,52
   2bc3a:	f46ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bc3e:	b7dd                	c.j	2bc24 <std::_Sp_counted_ptr_inplace<elf::strtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002bc40 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bc40:	1141                	c.addi	sp,-16
   2bc42:	e406                	c.sdsp	ra,8(sp)
   2bc44:	e022                	c.sdsp	s0,0(sp)
	if (_M_pi != nullptr)
   2bc46:	6120                	c.ld	s0,64(a0)
   2bc48:	cc19                	c.beqz	s0,2bc66 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
    if (__is_single_threaded())
   2bc4a:	0000e797          	auipc	a5,0xe
   2bc4e:	8367b783          	ld	a5,-1994(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bc52:	0007c783          	lbu	a5,0(a5)
   2bc56:	cf81                	c.beqz	a5,2bc6e <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2e>
    _Atomic_word __result = *__mem;
   2bc58:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bc5a:	fff5079b          	addiw	a5,a0,-1
   2bc5e:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bc60:	4785                	c.li	a5,1
   2bc62:	00f50c63          	beq	a0,a5,2bc7a <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x3a>
      }
   2bc66:	60a2                	c.ldsp	ra,8(sp)
   2bc68:	6402                	c.ldsp	s0,0(sp)
   2bc6a:	0141                	c.addi	sp,16
   2bc6c:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bc6e:	55fd                	c.li	a1,-1
   2bc70:	03040513          	addi	a0,s0,48
   2bc74:	f0cea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bc78:	b7e5                	c.j	2bc60 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x20>
	_M_dispose();
   2bc7a:	601c                	c.ld	a5,0(s0)
   2bc7c:	6b9c                	c.ld	a5,16(a5)
   2bc7e:	8522                	c.mv	a0,s0
   2bc80:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bc82:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bc86:	0000d797          	auipc	a5,0xd
   2bc8a:	7fa7b783          	ld	a5,2042(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bc8e:	0007c783          	lbu	a5,0(a5)
   2bc92:	cf89                	c.beqz	a5,2bcac <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bc94:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bc96:	fff5079b          	addiw	a5,a0,-1
   2bc9a:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bc9c:	4785                	c.li	a5,1
   2bc9e:	fcf514e3          	bne	a0,a5,2bc66 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
	    _M_destroy();
   2bca2:	601c                	c.ld	a5,0(s0)
   2bca4:	6f9c                	c.ld	a5,24(a5)
   2bca6:	8522                	c.mv	a0,s0
   2bca8:	9782                	c.jalr	a5
      }
   2bcaa:	bf75                	c.j	2bc66 <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26>
      return __exchange_and_add(__mem, __val);
   2bcac:	55fd                	c.li	a1,-1
   2bcae:	03440513          	addi	a0,s0,52
   2bcb2:	eceea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bcb6:	b7dd                	c.j	2bc9c <std::_Sp_counted_ptr_inplace<elf::section::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x5c>

000000000002bcb8 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bcb8:	1101                	c.addi	sp,-32
   2bcba:	ec06                	c.sdsp	ra,24(sp)
   2bcbc:	e822                	c.sdsp	s0,16(sp)
   2bcbe:	e426                	c.sdsp	s1,8(sp)
   2bcc0:	842a                	c.mv	s0,a0
	if (_M_pi != nullptr)
   2bcc2:	7124                	c.ld	s1,96(a0)
   2bcc4:	cc99                	c.beqz	s1,2bce2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
    if (__is_single_threaded())
   2bcc6:	0000d797          	auipc	a5,0xd
   2bcca:	7ba7b783          	ld	a5,1978(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bcce:	0007c783          	lbu	a5,0(a5)
   2bcd2:	cf8d                	c.beqz	a5,2bd0c <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
    _Atomic_word __result = *__mem;
   2bcd4:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2bcd6:	fff5079b          	addiw	a5,a0,-1
   2bcda:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bcdc:	4785                	c.li	a5,1
   2bcde:	02f50d63          	beq	a0,a5,2bd18 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x60>
	if (_M_pi != nullptr)
   2bce2:	6020                	c.ld	s0,64(s0)
   2bce4:	cc19                	c.beqz	s0,2bd02 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
    if (__is_single_threaded())
   2bce6:	0000d797          	auipc	a5,0xd
   2bcea:	79a7b783          	ld	a5,1946(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bcee:	0007c783          	lbu	a5,0(a5)
   2bcf2:	c3b5                	c.beqz	a5,2bd56 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9e>
    _Atomic_word __result = *__mem;
   2bcf4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bcf6:	fff5079b          	addiw	a5,a0,-1
   2bcfa:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bcfc:	4785                	c.li	a5,1
   2bcfe:	06f50263          	beq	a0,a5,2bd62 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xaa>
      }
   2bd02:	60e2                	c.ldsp	ra,24(sp)
   2bd04:	6442                	c.ldsp	s0,16(sp)
   2bd06:	64a2                	c.ldsp	s1,8(sp)
   2bd08:	6105                	c.addi16sp	sp,32
   2bd0a:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bd0c:	55fd                	c.li	a1,-1
   2bd0e:	03048513          	addi	a0,s1,48
   2bd12:	e6eea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bd16:	b7d9                	c.j	2bcdc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x24>
	_M_dispose();
   2bd18:	609c                	c.ld	a5,0(s1)
   2bd1a:	6b9c                	c.ld	a5,16(a5)
   2bd1c:	8526                	c.mv	a0,s1
   2bd1e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bd20:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bd24:	0000d797          	auipc	a5,0xd
   2bd28:	75c7b783          	ld	a5,1884(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bd2c:	0007c783          	lbu	a5,0(a5)
   2bd30:	cf89                	c.beqz	a5,2bd4a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x92>
    _Atomic_word __result = *__mem;
   2bd32:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2bd34:	fff5079b          	addiw	a5,a0,-1
   2bd38:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bd3a:	4785                	c.li	a5,1
   2bd3c:	faf513e3          	bne	a0,a5,2bce2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
	    _M_destroy();
   2bd40:	609c                	c.ld	a5,0(s1)
   2bd42:	6f9c                	c.ld	a5,24(a5)
   2bd44:	8526                	c.mv	a0,s1
   2bd46:	9782                	c.jalr	a5
   2bd48:	bf69                	c.j	2bce2 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2a>
      return __exchange_and_add(__mem, __val);
   2bd4a:	55fd                	c.li	a1,-1
   2bd4c:	03448513          	addi	a0,s1,52
   2bd50:	e30ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bd54:	b7dd                	c.j	2bd3a <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x82>
   2bd56:	55fd                	c.li	a1,-1
   2bd58:	03040513          	addi	a0,s0,48
   2bd5c:	e24ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bd60:	bf71                	c.j	2bcfc <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x44>
	_M_dispose();
   2bd62:	601c                	c.ld	a5,0(s0)
   2bd64:	6b9c                	c.ld	a5,16(a5)
   2bd66:	8522                	c.mv	a0,s0
   2bd68:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bd6a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bd6e:	0000d797          	auipc	a5,0xd
   2bd72:	7127b783          	ld	a5,1810(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bd76:	0007c783          	lbu	a5,0(a5)
   2bd7a:	cf89                	c.beqz	a5,2bd94 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xdc>
    _Atomic_word __result = *__mem;
   2bd7c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bd7e:	fff5079b          	addiw	a5,a0,-1
   2bd82:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bd84:	4785                	c.li	a5,1
   2bd86:	f6f51ee3          	bne	a0,a5,2bd02 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
	    _M_destroy();
   2bd8a:	601c                	c.ld	a5,0(s0)
   2bd8c:	6f9c                	c.ld	a5,24(a5)
   2bd8e:	8522                	c.mv	a0,s0
   2bd90:	9782                	c.jalr	a5
      }
   2bd92:	bf85                	c.j	2bd02 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4a>
      return __exchange_and_add(__mem, __val);
   2bd94:	55fd                	c.li	a1,-1
   2bd96:	03440513          	addi	a0,s0,52
   2bd9a:	de6ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bd9e:	b7dd                	c.j	2bd84 <std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xcc>

000000000002bda0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2bda0:	7139                	c.addi16sp	sp,-64
   2bda2:	fc06                	c.sdsp	ra,56(sp)
   2bda4:	f822                	c.sdsp	s0,48(sp)
   2bda6:	f426                	c.sdsp	s1,40(sp)
   2bda8:	f04a                	c.sdsp	s2,32(sp)
   2bdaa:	ec4e                	c.sdsp	s3,24(sp)
   2bdac:	e852                	c.sdsp	s4,16(sp)
   2bdae:	e456                	c.sdsp	s5,8(sp)
   2bdb0:	892a                	c.mv	s2,a0
	if (_M_pi != nullptr)
   2bdb2:	6960                	c.ld	s0,208(a0)
   2bdb4:	cc19                	c.beqz	s0,2bdd2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
    if (__is_single_threaded())
   2bdb6:	0000d797          	auipc	a5,0xd
   2bdba:	6ca7b783          	ld	a5,1738(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bdbe:	0007c783          	lbu	a5,0(a5)
   2bdc2:	c7a9                	c.beqz	a5,2be0c <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x6c>
    _Atomic_word __result = *__mem;
   2bdc4:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bdc6:	fff5079b          	addiw	a5,a0,-1
   2bdca:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bdcc:	4785                	c.li	a5,1
   2bdce:	04f50563          	beq	a0,a5,2be18 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x78>
	if (_M_pi != nullptr)
   2bdd2:	0c093403          	ld	s0,192(s2)
   2bdd6:	cc19                	c.beqz	s0,2bdf4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
    if (__is_single_threaded())
   2bdd8:	0000d797          	auipc	a5,0xd
   2bddc:	6a87b783          	ld	a5,1704(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bde0:	0007c783          	lbu	a5,0(a5)
   2bde4:	cbad                	c.beqz	a5,2be56 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xb6>
    _Atomic_word __result = *__mem;
   2bde6:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bde8:	fff5079b          	addiw	a5,a0,-1
   2bdec:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bdee:	4785                	c.li	a5,1
   2bdf0:	06f50963          	beq	a0,a5,2be62 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xc2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2bdf4:	0a093403          	ld	s0,160(s2)
   2bdf8:	0a893983          	ld	s3,168(s2)
	  for (; __first != __last; ++__first)
   2bdfc:	11340563          	beq	s0,s3,2bf06 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x166>
    return ::__libc_single_threaded;
   2be00:	0000da97          	auipc	s5,0xd
   2be04:	680aba83          	ld	s5,1664(s5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2be08:	4a05                	c.li	s4,1
   2be0a:	a065                	c.j	2beb2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x112>
      return __exchange_and_add(__mem, __val);
   2be0c:	55fd                	c.li	a1,-1
   2be0e:	03040513          	addi	a0,s0,48
   2be12:	d6eea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be16:	bf5d                	c.j	2bdcc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x2c>
	_M_dispose();
   2be18:	601c                	c.ld	a5,0(s0)
   2be1a:	6b9c                	c.ld	a5,16(a5)
   2be1c:	8522                	c.mv	a0,s0
   2be1e:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2be20:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2be24:	0000d797          	auipc	a5,0xd
   2be28:	65c7b783          	ld	a5,1628(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2be2c:	0007c783          	lbu	a5,0(a5)
   2be30:	cf89                	c.beqz	a5,2be4a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xaa>
    _Atomic_word __result = *__mem;
   2be32:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2be34:	fff5079b          	addiw	a5,a0,-1
   2be38:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2be3a:	4785                	c.li	a5,1
   2be3c:	f8f51be3          	bne	a0,a5,2bdd2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
	    _M_destroy();
   2be40:	601c                	c.ld	a5,0(s0)
   2be42:	6f9c                	c.ld	a5,24(a5)
   2be44:	8522                	c.mv	a0,s0
   2be46:	9782                	c.jalr	a5
   2be48:	b769                	c.j	2bdd2 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x32>
      return __exchange_and_add(__mem, __val);
   2be4a:	55fd                	c.li	a1,-1
   2be4c:	03440513          	addi	a0,s0,52
   2be50:	d30ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be54:	b7dd                	c.j	2be3a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x9a>
   2be56:	55fd                	c.li	a1,-1
   2be58:	03040513          	addi	a0,s0,48
   2be5c:	d24ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be60:	b779                	c.j	2bdee <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x4e>
	_M_dispose();
   2be62:	601c                	c.ld	a5,0(s0)
   2be64:	6b9c                	c.ld	a5,16(a5)
   2be66:	8522                	c.mv	a0,s0
   2be68:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2be6a:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2be6e:	0000d797          	auipc	a5,0xd
   2be72:	6127b783          	ld	a5,1554(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2be76:	0007c783          	lbu	a5,0(a5)
   2be7a:	cf89                	c.beqz	a5,2be94 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xf4>
    _Atomic_word __result = *__mem;
   2be7c:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2be7e:	fff5079b          	addiw	a5,a0,-1
   2be82:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2be84:	4785                	c.li	a5,1
   2be86:	f6f517e3          	bne	a0,a5,2bdf4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
	    _M_destroy();
   2be8a:	601c                	c.ld	a5,0(s0)
   2be8c:	6f9c                	c.ld	a5,24(a5)
   2be8e:	8522                	c.mv	a0,s0
   2be90:	9782                	c.jalr	a5
   2be92:	b78d                	c.j	2bdf4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x54>
      return __exchange_and_add(__mem, __val);
   2be94:	55fd                	c.li	a1,-1
   2be96:	03440513          	addi	a0,s0,52
   2be9a:	ce6ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2be9e:	b7dd                	c.j	2be84 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0xe4>
    _Atomic_word __result = *__mem;
   2bea0:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2bea2:	fff5079b          	addiw	a5,a0,-1
   2bea6:	d89c                	c.sw	a5,48(s1)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bea8:	03450063          	beq	a0,s4,2bec8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x128>
   2beac:	0441                	c.addi	s0,16
   2beae:	04898c63          	beq	s3,s0,2bf06 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x166>
	if (_M_pi != nullptr)
   2beb2:	6404                	c.ld	s1,8(s0)
   2beb4:	dce5                	c.beqz	s1,2beac <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
    if (__is_single_threaded())
   2beb6:	000ac783          	lbu	a5,0(s5)
   2beba:	f3fd                	c.bnez	a5,2bea0 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x100>
      return __exchange_and_add(__mem, __val);
   2bebc:	55fd                	c.li	a1,-1
   2bebe:	03048513          	addi	a0,s1,48
   2bec2:	cbeea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bec6:	b7cd                	c.j	2bea8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x108>
	_M_dispose();
   2bec8:	609c                	c.ld	a5,0(s1)
   2beca:	6b9c                	c.ld	a5,16(a5)
   2becc:	8526                	c.mv	a0,s1
   2bece:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bed0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bed4:	0000d797          	auipc	a5,0xd
   2bed8:	5ac7b783          	ld	a5,1452(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bedc:	0007c783          	lbu	a5,0(a5)
   2bee0:	cf89                	c.beqz	a5,2befa <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x15a>
    _Atomic_word __result = *__mem;
   2bee2:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2bee4:	fff5079b          	addiw	a5,a0,-1
   2bee8:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2beea:	4785                	c.li	a5,1
   2beec:	fcf510e3          	bne	a0,a5,2beac <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
	    _M_destroy();
   2bef0:	609c                	c.ld	a5,0(s1)
   2bef2:	6f9c                	c.ld	a5,24(a5)
   2bef4:	8526                	c.mv	a0,s1
   2bef6:	9782                	c.jalr	a5
   2bef8:	bf55                	c.j	2beac <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x10c>
      return __exchange_and_add(__mem, __val);
   2befa:	55fd                	c.li	a1,-1
   2befc:	03448513          	addi	a0,s1,52
   2bf00:	c80ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bf04:	b7dd                	c.j	2beea <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x14a>
	_M_deallocate(_M_impl._M_start,
   2bf06:	0a093503          	ld	a0,160(s2)
	if (__p)
   2bf0a:	c119                	c.beqz	a0,2bf10 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x170>
   2bf0c:	e04ea0ef          	jal	ra,16510 <operator delete(void*)@plt>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   2bf10:	08893403          	ld	s0,136(s2)
   2bf14:	09093983          	ld	s3,144(s2)
   2bf18:	07340b63          	beq	s0,s3,2bf8e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1ee>
    return ::__libc_single_threaded;
   2bf1c:	0000da97          	auipc	s5,0xd
   2bf20:	564aba83          	ld	s5,1380(s5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bf24:	4a05                	c.li	s4,1
   2bf26:	a811                	c.j	2bf3a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x19a>
    _Atomic_word __result = *__mem;
   2bf28:	5888                	c.lw	a0,48(s1)
    *__mem += __val;
   2bf2a:	fff5079b          	addiw	a5,a0,-1
   2bf2e:	d89c                	c.sw	a5,48(s1)
   2bf30:	03450063          	beq	a0,s4,2bf50 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1b0>
   2bf34:	0441                	c.addi	s0,16
   2bf36:	04898c63          	beq	s3,s0,2bf8e <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1ee>
	if (_M_pi != nullptr)
   2bf3a:	6404                	c.ld	s1,8(s0)
   2bf3c:	dce5                	c.beqz	s1,2bf34 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
    if (__is_single_threaded())
   2bf3e:	000ac783          	lbu	a5,0(s5)
   2bf42:	f3fd                	c.bnez	a5,2bf28 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x188>
      return __exchange_and_add(__mem, __val);
   2bf44:	55fd                	c.li	a1,-1
   2bf46:	03048513          	addi	a0,s1,48
   2bf4a:	c36ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bf4e:	b7cd                	c.j	2bf30 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x190>
	_M_dispose();
   2bf50:	609c                	c.ld	a5,0(s1)
   2bf52:	6b9c                	c.ld	a5,16(a5)
   2bf54:	8526                	c.mv	a0,s1
   2bf56:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bf58:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bf5c:	0000d797          	auipc	a5,0xd
   2bf60:	5247b783          	ld	a5,1316(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bf64:	0007c783          	lbu	a5,0(a5)
   2bf68:	cf89                	c.beqz	a5,2bf82 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1e2>
    _Atomic_word __result = *__mem;
   2bf6a:	58c8                	c.lw	a0,52(s1)
    *__mem += __val;
   2bf6c:	fff5079b          	addiw	a5,a0,-1
   2bf70:	d8dc                	c.sw	a5,52(s1)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bf72:	4785                	c.li	a5,1
   2bf74:	fcf510e3          	bne	a0,a5,2bf34 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
	    _M_destroy();
   2bf78:	609c                	c.ld	a5,0(s1)
   2bf7a:	6f9c                	c.ld	a5,24(a5)
   2bf7c:	8526                	c.mv	a0,s1
   2bf7e:	9782                	c.jalr	a5
   2bf80:	bf55                	c.j	2bf34 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x194>
      return __exchange_and_add(__mem, __val);
   2bf82:	55fd                	c.li	a1,-1
   2bf84:	03448513          	addi	a0,s1,52
   2bf88:	bf8ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bf8c:	b7dd                	c.j	2bf72 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1d2>
	_M_deallocate(_M_impl._M_start,
   2bf8e:	08893503          	ld	a0,136(s2)
	if (__p)
   2bf92:	c119                	c.beqz	a0,2bf98 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x1f8>
   2bf94:	d7cea0ef          	jal	ra,16510 <operator delete(void*)@plt>
	if (_M_pi != nullptr)
   2bf98:	04093403          	ld	s0,64(s2)
   2bf9c:	cc19                	c.beqz	s0,2bfba <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
    if (__is_single_threaded())
   2bf9e:	0000d797          	auipc	a5,0xd
   2bfa2:	4e27b783          	ld	a5,1250(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bfa6:	0007c783          	lbu	a5,0(a5)
   2bfaa:	c38d                	c.beqz	a5,2bfcc <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x22c>
    _Atomic_word __result = *__mem;
   2bfac:	5808                	c.lw	a0,48(s0)
    *__mem += __val;
   2bfae:	fff5079b          	addiw	a5,a0,-1
   2bfb2:	d81c                	c.sw	a5,48(s0)
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   2bfb4:	4785                	c.li	a5,1
   2bfb6:	02f50163          	beq	a0,a5,2bfd8 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x238>
      }
   2bfba:	70e2                	c.ldsp	ra,56(sp)
   2bfbc:	7442                	c.ldsp	s0,48(sp)
   2bfbe:	74a2                	c.ldsp	s1,40(sp)
   2bfc0:	7902                	c.ldsp	s2,32(sp)
   2bfc2:	69e2                	c.ldsp	s3,24(sp)
   2bfc4:	6a42                	c.ldsp	s4,16(sp)
   2bfc6:	6aa2                	c.ldsp	s5,8(sp)
   2bfc8:	6121                	c.addi16sp	sp,64
   2bfca:	8082                	c.jr	ra
      return __exchange_and_add(__mem, __val);
   2bfcc:	55fd                	c.li	a1,-1
   2bfce:	03040513          	addi	a0,s0,48
   2bfd2:	baeea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2bfd6:	bff9                	c.j	2bfb4 <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x214>
	_M_dispose();
   2bfd8:	601c                	c.ld	a5,0(s0)
   2bfda:	6b9c                	c.ld	a5,16(a5)
   2bfdc:	8522                	c.mv	a0,s0
   2bfde:	9782                	c.jalr	a5
	    __atomic_thread_fence (__ATOMIC_ACQ_REL);
   2bfe0:	0ff0000f          	fence	iorw,iorw
    if (__is_single_threaded())
   2bfe4:	0000d797          	auipc	a5,0xd
   2bfe8:	49c7b783          	ld	a5,1180(a5) # 39480 <__libc_single_threaded@GLIBC_2.32-0x1a0>
   2bfec:	0007c783          	lbu	a5,0(a5)
   2bff0:	cf89                	c.beqz	a5,2c00a <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x26a>
    _Atomic_word __result = *__mem;
   2bff2:	5848                	c.lw	a0,52(s0)
    *__mem += __val;
   2bff4:	fff5079b          	addiw	a5,a0,-1
   2bff8:	d85c                	c.sw	a5,52(s0)
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
   2bffa:	4785                	c.li	a5,1
   2bffc:	faf51fe3          	bne	a0,a5,2bfba <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
	    _M_destroy();
   2c000:	601c                	c.ld	a5,0(s0)
   2c002:	6f9c                	c.ld	a5,24(a5)
   2c004:	8522                	c.mv	a0,s0
   2c006:	9782                	c.jalr	a5
      }
   2c008:	bf4d                	c.j	2bfba <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x21a>
      return __exchange_and_add(__mem, __val);
   2c00a:	55fd                	c.li	a1,-1
   2c00c:	03440513          	addi	a0,s0,52
   2c010:	b70ea0ef          	jal	ra,16380 <__gnu_cxx::__exchange_and_add(int volatile*, int)@plt>
   2c014:	b7dd                	c.j	2bffa <std::_Sp_counted_ptr_inplace<elf::elf::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()+0x25a>

000000000002c016 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c016:	1101                	c.addi	sp,-32
   2c018:	ec06                	c.sdsp	ra,24(sp)
   2c01a:	e822                	c.sdsp	s0,16(sp)
   2c01c:	e426                	c.sdsp	s1,8(sp)
   2c01e:	84aa                	c.mv	s1,a0
   2c020:	842e                	c.mv	s0,a1
  switch (ei_class) {
   2c022:	4785                	c.li	a5,1
   2c024:	00f60a63          	beq	a2,a5,2c038 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c028:	4789                	c.li	a5,2
   2c02a:	22f60e63          	beq	a2,a5,2c266 <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x250>
}
   2c02e:	60e2                	c.ldsp	ra,24(sp)
   2c030:	6442                	c.ldsp	s0,16(sp)
   2c032:	64a2                	c.ldsp	s1,8(sp)
   2c034:	6105                	c.addi16sp	sp,32
   2c036:	8082                	c.jr	ra
   2c038:	4785                	c.li	a5,1
   2c03a:	14f68863          	beq	a3,a5,2c18a <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x174>
   2c03e:	4789                	c.li	a5,2
   2c040:	fef697e3          	bne	a3,a5,2c02e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
  typename E::Half shentsize; // Size of section header entry
  typename E::Half shnum;     // Number of section header entries
  typename E::Half shstrndx;  // Section name string table index

  template <typename E2> void from(const E2 &o) {
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c044:	0005c603          	lbu	a2,0(a1)
   2c048:	0015c683          	lbu	a3,1(a1)
   2c04c:	0025c703          	lbu	a4,2(a1)
   2c050:	0035c783          	lbu	a5,3(a1)
   2c054:	00c50023          	sb	a2,0(a0)
   2c058:	00d500a3          	sb	a3,1(a0)
   2c05c:	00e50123          	sb	a4,2(a0)
   2c060:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c064:	0045c783          	lbu	a5,4(a1)
   2c068:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c06c:	0055c783          	lbu	a5,5(a1)
   2c070:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c074:	0065c783          	lbu	a5,6(a1)
   2c078:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c07c:	0075c783          	lbu	a5,7(a1)
   2c080:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c084:	0085c783          	lbu	a5,8(a1)
   2c088:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c08c:	0095c883          	lbu	a7,9(a1)
   2c090:	00a5c803          	lbu	a6,10(a1)
   2c094:	00b5c503          	lbu	a0,11(a1)
   2c098:	00c5c583          	lbu	a1,12(a1)
   2c09c:	00d44603          	lbu	a2,13(s0)
   2c0a0:	00e44683          	lbu	a3,14(s0)
   2c0a4:	00f44703          	lbu	a4,15(s0)
   2c0a8:	011484a3          	sb	a7,9(s1)
   2c0ac:	01048523          	sb	a6,10(s1)
   2c0b0:	00a485a3          	sb	a0,11(s1)
   2c0b4:	00b48623          	sb	a1,12(s1)
   2c0b8:	00c486a3          	sb	a2,13(s1)
   2c0bc:	00d48723          	sb	a3,14(s1)
   2c0c0:	00e487a3          	sb	a4,15(s1)

    type = swizzle(o.type, o.order, order);
   2c0c4:	01045783          	lhu	a5,16(s0)
  switch (sizeof(T)) {
  case 1:
    return v;
  case 2: {
    std::uint16_t x = (std::uint16_t)v;
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c0c8:	0087d71b          	srliw	a4,a5,0x8
   2c0cc:	0087979b          	slliw	a5,a5,0x8
   2c0d0:	8fd9                	c.or	a5,a4
   2c0d2:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c0d6:	01245783          	lhu	a5,18(s0)
   2c0da:	0087d71b          	srliw	a4,a5,0x8
   2c0de:	0087979b          	slliw	a5,a5,0x8
   2c0e2:	8fd9                	c.or	a5,a4
   2c0e4:	00f49923          	sh	a5,18(s1)
  }
  case 4:
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c0e8:	4848                	c.lw	a0,20(s0)
   2c0ea:	a86ea0ef          	jal	ra,16370 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   2c0ee:	c8c8                	c.sw	a0,20(s1)
   2c0f0:	4c08                	c.lw	a0,24(s0)
   2c0f2:	a7eea0ef          	jal	ra,16370 <__bswapsi2@plt>
    entry = swizzle(o.entry, o.order, order);
   2c0f6:	1502                	c.slli	a0,0x20
   2c0f8:	9101                	c.srli	a0,0x20
   2c0fa:	ec88                	c.sd	a0,24(s1)
   2c0fc:	4c48                	c.lw	a0,28(s0)
   2c0fe:	a72ea0ef          	jal	ra,16370 <__bswapsi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   2c102:	1502                	c.slli	a0,0x20
   2c104:	9101                	c.srli	a0,0x20
   2c106:	f088                	c.sd	a0,32(s1)
   2c108:	5008                	c.lw	a0,32(s0)
   2c10a:	a66ea0ef          	jal	ra,16370 <__bswapsi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   2c10e:	1502                	c.slli	a0,0x20
   2c110:	9101                	c.srli	a0,0x20
   2c112:	f488                	c.sd	a0,40(s1)
   2c114:	5048                	c.lw	a0,36(s0)
   2c116:	a5aea0ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c11a:	d888                	c.sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c11c:	02845783          	lhu	a5,40(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c120:	0087d71b          	srliw	a4,a5,0x8
   2c124:	0087979b          	slliw	a5,a5,0x8
   2c128:	8fd9                	c.or	a5,a4
   2c12a:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c12e:	02a45783          	lhu	a5,42(s0)
   2c132:	0087d71b          	srliw	a4,a5,0x8
   2c136:	0087979b          	slliw	a5,a5,0x8
   2c13a:	8fd9                	c.or	a5,a4
   2c13c:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c140:	02c45783          	lhu	a5,44(s0)
   2c144:	0087d71b          	srliw	a4,a5,0x8
   2c148:	0087979b          	slliw	a5,a5,0x8
   2c14c:	8fd9                	c.or	a5,a4
   2c14e:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c152:	02e45783          	lhu	a5,46(s0)
   2c156:	0087d71b          	srliw	a4,a5,0x8
   2c15a:	0087979b          	slliw	a5,a5,0x8
   2c15e:	8fd9                	c.or	a5,a4
   2c160:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c164:	03045783          	lhu	a5,48(s0)
   2c168:	0087d71b          	srliw	a4,a5,0x8
   2c16c:	0087979b          	slliw	a5,a5,0x8
   2c170:	8fd9                	c.or	a5,a4
   2c172:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c176:	03245783          	lhu	a5,50(s0)
   2c17a:	0087d71b          	srliw	a4,a5,0x8
   2c17e:	0087979b          	slliw	a5,a5,0x8
   2c182:	8fd9                	c.or	a5,a4
   2c184:	02f49f23          	sh	a5,62(s1)
  }
   2c188:	b55d                	c.j	2c02e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c18a:	0005c603          	lbu	a2,0(a1)
   2c18e:	0015c683          	lbu	a3,1(a1)
   2c192:	0025c703          	lbu	a4,2(a1)
   2c196:	0035c783          	lbu	a5,3(a1)
   2c19a:	00c50023          	sb	a2,0(a0)
   2c19e:	00d500a3          	sb	a3,1(a0)
   2c1a2:	00e50123          	sb	a4,2(a0)
   2c1a6:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c1aa:	0045c783          	lbu	a5,4(a1)
   2c1ae:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c1b2:	0055c783          	lbu	a5,5(a1)
   2c1b6:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c1ba:	0065c783          	lbu	a5,6(a1)
   2c1be:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c1c2:	0075c783          	lbu	a5,7(a1)
   2c1c6:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c1ca:	0085c783          	lbu	a5,8(a1)
   2c1ce:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c1d2:	0095c883          	lbu	a7,9(a1)
   2c1d6:	00a5c803          	lbu	a6,10(a1)
   2c1da:	00b5c503          	lbu	a0,11(a1)
   2c1de:	00c5c583          	lbu	a1,12(a1)
   2c1e2:	00d44603          	lbu	a2,13(s0)
   2c1e6:	00e44683          	lbu	a3,14(s0)
   2c1ea:	00f44703          	lbu	a4,15(s0)
   2c1ee:	011484a3          	sb	a7,9(s1)
   2c1f2:	01048523          	sb	a6,10(s1)
   2c1f6:	00a485a3          	sb	a0,11(s1)
   2c1fa:	00b48623          	sb	a1,12(s1)
   2c1fe:	00c486a3          	sb	a2,13(s1)
   2c202:	00d48723          	sb	a3,14(s1)
   2c206:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2c20a:	01045783          	lhu	a5,16(s0)
   2c20e:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c212:	01245783          	lhu	a5,18(s0)
   2c216:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   2c21a:	485c                	c.lw	a5,20(s0)
   2c21c:	c8dc                	c.sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   2c21e:	01846783          	lwu	a5,24(s0)
   2c222:	ec9c                	c.sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   2c224:	01c46783          	lwu	a5,28(s0)
   2c228:	f09c                	c.sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   2c22a:	02046783          	lwu	a5,32(s0)
   2c22e:	f49c                	c.sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   2c230:	505c                	c.lw	a5,36(s0)
   2c232:	d89c                	c.sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c234:	02845783          	lhu	a5,40(s0)
   2c238:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c23c:	02a45783          	lhu	a5,42(s0)
   2c240:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c244:	02c45783          	lhu	a5,44(s0)
   2c248:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c24c:	02e45783          	lhu	a5,46(s0)
   2c250:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c254:	03045783          	lhu	a5,48(s0)
   2c258:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c25c:	03245783          	lhu	a5,50(s0)
   2c260:	02f49f23          	sh	a5,62(s1)
  }
   2c264:	b3e9                	c.j	2c02e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c266:	4785                	c.li	a5,1
   2c268:	14f68263          	beq	a3,a5,2c3ac <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x396>
   2c26c:	4789                	c.li	a5,2
   2c26e:	dcf690e3          	bne	a3,a5,2c02e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c272:	0005c603          	lbu	a2,0(a1)
   2c276:	0015c683          	lbu	a3,1(a1)
   2c27a:	0025c703          	lbu	a4,2(a1)
   2c27e:	0035c783          	lbu	a5,3(a1)
   2c282:	00c50023          	sb	a2,0(a0)
   2c286:	00d500a3          	sb	a3,1(a0)
   2c28a:	00e50123          	sb	a4,2(a0)
   2c28e:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c292:	0045c783          	lbu	a5,4(a1)
   2c296:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c29a:	0055c783          	lbu	a5,5(a1)
   2c29e:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c2a2:	0065c783          	lbu	a5,6(a1)
   2c2a6:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c2aa:	0075c783          	lbu	a5,7(a1)
   2c2ae:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c2b2:	0085c783          	lbu	a5,8(a1)
   2c2b6:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c2ba:	0095c883          	lbu	a7,9(a1)
   2c2be:	00a5c803          	lbu	a6,10(a1)
   2c2c2:	00b5c503          	lbu	a0,11(a1)
   2c2c6:	00c5c583          	lbu	a1,12(a1)
   2c2ca:	00d44603          	lbu	a2,13(s0)
   2c2ce:	00e44683          	lbu	a3,14(s0)
   2c2d2:	00f44703          	lbu	a4,15(s0)
   2c2d6:	011484a3          	sb	a7,9(s1)
   2c2da:	01048523          	sb	a6,10(s1)
   2c2de:	00a485a3          	sb	a0,11(s1)
   2c2e2:	00b48623          	sb	a1,12(s1)
   2c2e6:	00c486a3          	sb	a2,13(s1)
   2c2ea:	00d48723          	sb	a3,14(s1)
   2c2ee:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2c2f2:	01045783          	lhu	a5,16(s0)
   2c2f6:	0087d71b          	srliw	a4,a5,0x8
   2c2fa:	0087979b          	slliw	a5,a5,0x8
   2c2fe:	8fd9                	c.or	a5,a4
   2c300:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c304:	01245783          	lhu	a5,18(s0)
   2c308:	0087d71b          	srliw	a4,a5,0x8
   2c30c:	0087979b          	slliw	a5,a5,0x8
   2c310:	8fd9                	c.or	a5,a4
   2c312:	00f49923          	sh	a5,18(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c316:	4848                	c.lw	a0,20(s0)
   2c318:	858ea0ef          	jal	ra,16370 <__bswapsi2@plt>
    version = swizzle(o.version, o.order, order);
   2c31c:	c8c8                	c.sw	a0,20(s1)
  case 8:
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c31e:	6c08                	c.ld	a0,24(s0)
   2c320:	a30ea0ef          	jal	ra,16550 <__bswapdi2@plt>
    entry = swizzle(o.entry, o.order, order);
   2c324:	ec88                	c.sd	a0,24(s1)
   2c326:	7008                	c.ld	a0,32(s0)
   2c328:	a28ea0ef          	jal	ra,16550 <__bswapdi2@plt>
    phoff = swizzle(o.phoff, o.order, order);
   2c32c:	f088                	c.sd	a0,32(s1)
   2c32e:	7408                	c.ld	a0,40(s0)
   2c330:	a20ea0ef          	jal	ra,16550 <__bswapdi2@plt>
    shoff = swizzle(o.shoff, o.order, order);
   2c334:	f488                	c.sd	a0,40(s1)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c336:	5808                	c.lw	a0,48(s0)
   2c338:	838ea0ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c33c:	d888                	c.sw	a0,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c33e:	03445783          	lhu	a5,52(s0)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c342:	0087d71b          	srliw	a4,a5,0x8
   2c346:	0087979b          	slliw	a5,a5,0x8
   2c34a:	8fd9                	c.or	a5,a4
   2c34c:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c350:	03645783          	lhu	a5,54(s0)
   2c354:	0087d71b          	srliw	a4,a5,0x8
   2c358:	0087979b          	slliw	a5,a5,0x8
   2c35c:	8fd9                	c.or	a5,a4
   2c35e:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c362:	03845783          	lhu	a5,56(s0)
   2c366:	0087d71b          	srliw	a4,a5,0x8
   2c36a:	0087979b          	slliw	a5,a5,0x8
   2c36e:	8fd9                	c.or	a5,a4
   2c370:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c374:	03a45783          	lhu	a5,58(s0)
   2c378:	0087d71b          	srliw	a4,a5,0x8
   2c37c:	0087979b          	slliw	a5,a5,0x8
   2c380:	8fd9                	c.or	a5,a4
   2c382:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c386:	03c45783          	lhu	a5,60(s0)
   2c38a:	0087d71b          	srliw	a4,a5,0x8
   2c38e:	0087979b          	slliw	a5,a5,0x8
   2c392:	8fd9                	c.or	a5,a4
   2c394:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c398:	03e45783          	lhu	a5,62(s0)
   2c39c:	0087d71b          	srliw	a4,a5,0x8
   2c3a0:	0087979b          	slliw	a5,a5,0x8
   2c3a4:	8fd9                	c.or	a5,a4
   2c3a6:	02f49f23          	sh	a5,62(s1)
  }
   2c3aa:	b151                	c.j	2c02e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    std::memcpy(ei_magic, o.ei_magic, sizeof(ei_magic));
   2c3ac:	0005c603          	lbu	a2,0(a1)
   2c3b0:	0015c683          	lbu	a3,1(a1)
   2c3b4:	0025c703          	lbu	a4,2(a1)
   2c3b8:	0035c783          	lbu	a5,3(a1)
   2c3bc:	00c50023          	sb	a2,0(a0)
   2c3c0:	00d500a3          	sb	a3,1(a0)
   2c3c4:	00e50123          	sb	a4,2(a0)
   2c3c8:	00f501a3          	sb	a5,3(a0)
    ei_class = swizzle(o.ei_class, o.order, order);
   2c3cc:	0045c783          	lbu	a5,4(a1)
   2c3d0:	00f50223          	sb	a5,4(a0)
    ei_data = swizzle(o.ei_data, o.order, order);
   2c3d4:	0055c783          	lbu	a5,5(a1)
   2c3d8:	00f502a3          	sb	a5,5(a0)
    ei_version = swizzle(o.ei_version, o.order, order);
   2c3dc:	0065c783          	lbu	a5,6(a1)
   2c3e0:	00f50323          	sb	a5,6(a0)
    ei_osabi = swizzle(o.ei_osabi, o.order, order);
   2c3e4:	0075c783          	lbu	a5,7(a1)
   2c3e8:	00f503a3          	sb	a5,7(a0)
    ei_abiversion = swizzle(o.ei_abiversion, o.order, order);
   2c3ec:	0085c783          	lbu	a5,8(a1)
   2c3f0:	00f50423          	sb	a5,8(a0)
    std::memcpy(ei_pad, o.ei_pad, sizeof(ei_pad));
   2c3f4:	0095c883          	lbu	a7,9(a1)
   2c3f8:	00a5c803          	lbu	a6,10(a1)
   2c3fc:	00b5c503          	lbu	a0,11(a1)
   2c400:	00c5c583          	lbu	a1,12(a1)
   2c404:	00d44603          	lbu	a2,13(s0)
   2c408:	00e44683          	lbu	a3,14(s0)
   2c40c:	00f44703          	lbu	a4,15(s0)
   2c410:	011484a3          	sb	a7,9(s1)
   2c414:	01048523          	sb	a6,10(s1)
   2c418:	00a485a3          	sb	a0,11(s1)
   2c41c:	00b48623          	sb	a1,12(s1)
   2c420:	00c486a3          	sb	a2,13(s1)
   2c424:	00d48723          	sb	a3,14(s1)
   2c428:	00e487a3          	sb	a4,15(s1)
    type = swizzle(o.type, o.order, order);
   2c42c:	01045783          	lhu	a5,16(s0)
   2c430:	00f49823          	sh	a5,16(s1)
    machine = swizzle(o.machine, o.order, order);
   2c434:	01245783          	lhu	a5,18(s0)
   2c438:	00f49923          	sh	a5,18(s1)
    version = swizzle(o.version, o.order, order);
   2c43c:	485c                	c.lw	a5,20(s0)
   2c43e:	c8dc                	c.sw	a5,20(s1)
    entry = swizzle(o.entry, o.order, order);
   2c440:	6c1c                	c.ld	a5,24(s0)
   2c442:	ec9c                	c.sd	a5,24(s1)
    phoff = swizzle(o.phoff, o.order, order);
   2c444:	701c                	c.ld	a5,32(s0)
   2c446:	f09c                	c.sd	a5,32(s1)
    shoff = swizzle(o.shoff, o.order, order);
   2c448:	741c                	c.ld	a5,40(s0)
   2c44a:	f49c                	c.sd	a5,40(s1)
    flags = swizzle(o.flags, o.order, order);
   2c44c:	581c                	c.lw	a5,48(s0)
   2c44e:	d89c                	c.sw	a5,48(s1)
    ehsize = swizzle(o.ehsize, o.order, order);
   2c450:	03445783          	lhu	a5,52(s0)
   2c454:	02f49a23          	sh	a5,52(s1)
    phentsize = swizzle(o.phentsize, o.order, order);
   2c458:	03645783          	lhu	a5,54(s0)
   2c45c:	02f49b23          	sh	a5,54(s1)
    phnum = swizzle(o.phnum, o.order, order);
   2c460:	03845783          	lhu	a5,56(s0)
   2c464:	02f49c23          	sh	a5,56(s1)
    shentsize = swizzle(o.shentsize, o.order, order);
   2c468:	03a45783          	lhu	a5,58(s0)
   2c46c:	02f49d23          	sh	a5,58(s1)
    shnum = swizzle(o.shnum, o.order, order);
   2c470:	03c45783          	lhu	a5,60(s0)
   2c474:	02f49e23          	sh	a5,60(s1)
    shstrndx = swizzle(o.shstrndx, o.order, order);
   2c478:	03e45783          	lhu	a5,62(s0)
   2c47c:	02f49f23          	sh	a5,62(s1)
  }
   2c480:	b67d                	c.j	2c02e <void elf::canon_hdr<elf::Ehdr>(elf::Ehdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c482 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c482:	1101                	c.addi	sp,-32
   2c484:	ec06                	c.sdsp	ra,24(sp)
   2c486:	e822                	c.sdsp	s0,16(sp)
   2c488:	e426                	c.sdsp	s1,8(sp)
   2c48a:	842a                	c.mv	s0,a0
   2c48c:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2c48e:	4785                	c.li	a5,1
   2c490:	00f60a63          	beq	a2,a5,2c4a4 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c494:	4789                	c.li	a5,2
   2c496:	0af60163          	beq	a2,a5,2c538 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xb6>
}
   2c49a:	60e2                	c.ldsp	ra,24(sp)
   2c49c:	6442                	c.ldsp	s0,16(sp)
   2c49e:	64a2                	c.ldsp	s1,8(sp)
   2c4a0:	6105                	c.addi16sp	sp,32
   2c4a2:	8082                	c.jr	ra
   2c4a4:	4785                	c.li	a5,1
   2c4a6:	06f68263          	beq	a3,a5,2c50a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x88>
   2c4aa:	4789                	c.li	a5,2
   2c4ac:	fef697e3          	bne	a3,a5,2c49a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c4b0:	4188                	c.lw	a0,0(a1)
   2c4b2:	ebfe90ef          	jal	ra,16370 <__bswapsi2@plt>
  Elf64::Xword filesz; // Size of segment in file
  Elf64::Xword memsz;  // Size of segment in memory
  Elf64::Xword align;  // Alignment of segment

  template <typename E2> void from(const E2 &o) {
    type = swizzle(o.type, o.order, order);
   2c4b6:	c008                	c.sw	a0,0(s0)
   2c4b8:	40c8                	c.lw	a0,4(s1)
   2c4ba:	eb7e90ef          	jal	ra,16370 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c4be:	1502                	c.slli	a0,0x20
   2c4c0:	9101                	c.srli	a0,0x20
   2c4c2:	e408                	c.sd	a0,8(s0)
   2c4c4:	4488                	c.lw	a0,8(s1)
   2c4c6:	eabe90ef          	jal	ra,16370 <__bswapsi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   2c4ca:	1502                	c.slli	a0,0x20
   2c4cc:	9101                	c.srli	a0,0x20
   2c4ce:	e808                	c.sd	a0,16(s0)
   2c4d0:	44c8                	c.lw	a0,12(s1)
   2c4d2:	e9fe90ef          	jal	ra,16370 <__bswapsi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   2c4d6:	1502                	c.slli	a0,0x20
   2c4d8:	9101                	c.srli	a0,0x20
   2c4da:	ec08                	c.sd	a0,24(s0)
   2c4dc:	4888                	c.lw	a0,16(s1)
   2c4de:	e93e90ef          	jal	ra,16370 <__bswapsi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   2c4e2:	1502                	c.slli	a0,0x20
   2c4e4:	9101                	c.srli	a0,0x20
   2c4e6:	f008                	c.sd	a0,32(s0)
   2c4e8:	48c8                	c.lw	a0,20(s1)
   2c4ea:	e87e90ef          	jal	ra,16370 <__bswapsi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   2c4ee:	1502                	c.slli	a0,0x20
   2c4f0:	9101                	c.srli	a0,0x20
   2c4f2:	f408                	c.sd	a0,40(s0)
   2c4f4:	4c88                	c.lw	a0,24(s1)
   2c4f6:	e7be90ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c4fa:	c048                	c.sw	a0,4(s0)
   2c4fc:	4cc8                	c.lw	a0,28(s1)
   2c4fe:	e73e90ef          	jal	ra,16370 <__bswapsi2@plt>
    align = swizzle(o.align, o.order, order);
   2c502:	1502                	c.slli	a0,0x20
   2c504:	9101                	c.srli	a0,0x20
   2c506:	f808                	c.sd	a0,48(s0)
  }
   2c508:	bf49                	c.j	2c49a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    type = swizzle(o.type, o.order, order);
   2c50a:	419c                	c.lw	a5,0(a1)
   2c50c:	c11c                	c.sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   2c50e:	0045e783          	lwu	a5,4(a1)
   2c512:	e51c                	c.sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   2c514:	0085e783          	lwu	a5,8(a1)
   2c518:	e91c                	c.sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   2c51a:	00c5e783          	lwu	a5,12(a1)
   2c51e:	ed1c                	c.sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   2c520:	0105e783          	lwu	a5,16(a1)
   2c524:	f11c                	c.sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   2c526:	0145e783          	lwu	a5,20(a1)
   2c52a:	f51c                	c.sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   2c52c:	4d9c                	c.lw	a5,24(a1)
   2c52e:	c15c                	c.sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   2c530:	01c5e783          	lwu	a5,28(a1)
   2c534:	f91c                	c.sd	a5,48(a0)
  }
   2c536:	b795                	c.j	2c49a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c538:	4785                	c.li	a5,1
   2c53a:	04f68663          	beq	a3,a5,2c586 <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x104>
   2c53e:	4789                	c.li	a5,2
   2c540:	f4f69de3          	bne	a3,a5,2c49a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c544:	4188                	c.lw	a0,0(a1)
   2c546:	e2be90ef          	jal	ra,16370 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2c54a:	c008                	c.sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c54c:	6488                	c.ld	a0,8(s1)
   2c54e:	802ea0ef          	jal	ra,16550 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c552:	e408                	c.sd	a0,8(s0)
   2c554:	6888                	c.ld	a0,16(s1)
   2c556:	ffbe90ef          	jal	ra,16550 <__bswapdi2@plt>
    vaddr = swizzle(o.vaddr, o.order, order);
   2c55a:	e808                	c.sd	a0,16(s0)
   2c55c:	6c88                	c.ld	a0,24(s1)
   2c55e:	ff3e90ef          	jal	ra,16550 <__bswapdi2@plt>
    paddr = swizzle(o.paddr, o.order, order);
   2c562:	ec08                	c.sd	a0,24(s0)
   2c564:	7088                	c.ld	a0,32(s1)
   2c566:	febe90ef          	jal	ra,16550 <__bswapdi2@plt>
    filesz = swizzle(o.filesz, o.order, order);
   2c56a:	f008                	c.sd	a0,32(s0)
   2c56c:	7488                	c.ld	a0,40(s1)
   2c56e:	fe3e90ef          	jal	ra,16550 <__bswapdi2@plt>
    memsz = swizzle(o.memsz, o.order, order);
   2c572:	f408                	c.sd	a0,40(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c574:	40c8                	c.lw	a0,4(s1)
   2c576:	dfbe90ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = swizzle(o.flags, o.order, order);
   2c57a:	c048                	c.sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c57c:	7888                	c.ld	a0,48(s1)
   2c57e:	fd3e90ef          	jal	ra,16550 <__bswapdi2@plt>
    align = swizzle(o.align, o.order, order);
   2c582:	f808                	c.sd	a0,48(s0)
  }
   2c584:	bf19                	c.j	2c49a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    type = swizzle(o.type, o.order, order);
   2c586:	419c                	c.lw	a5,0(a1)
   2c588:	c11c                	c.sw	a5,0(a0)
    offset = swizzle(o.offset, o.order, order);
   2c58a:	659c                	c.ld	a5,8(a1)
   2c58c:	e51c                	c.sd	a5,8(a0)
    vaddr = swizzle(o.vaddr, o.order, order);
   2c58e:	699c                	c.ld	a5,16(a1)
   2c590:	e91c                	c.sd	a5,16(a0)
    paddr = swizzle(o.paddr, o.order, order);
   2c592:	6d9c                	c.ld	a5,24(a1)
   2c594:	ed1c                	c.sd	a5,24(a0)
    filesz = swizzle(o.filesz, o.order, order);
   2c596:	719c                	c.ld	a5,32(a1)
   2c598:	f11c                	c.sd	a5,32(a0)
    memsz = swizzle(o.memsz, o.order, order);
   2c59a:	759c                	c.ld	a5,40(a1)
   2c59c:	f51c                	c.sd	a5,40(a0)
    flags = swizzle(o.flags, o.order, order);
   2c59e:	41dc                	c.lw	a5,4(a1)
   2c5a0:	c15c                	c.sw	a5,4(a0)
    align = swizzle(o.align, o.order, order);
   2c5a2:	799c                	c.ld	a5,48(a1)
   2c5a4:	f91c                	c.sd	a5,48(a0)
  }
   2c5a6:	bdd5                	c.j	2c49a <void elf::canon_hdr<elf::Phdr>(elf::Phdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c5a8 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c5a8:	1101                	c.addi	sp,-32
   2c5aa:	ec06                	c.sdsp	ra,24(sp)
   2c5ac:	e822                	c.sdsp	s0,16(sp)
   2c5ae:	e426                	c.sdsp	s1,8(sp)
   2c5b0:	842a                	c.mv	s0,a0
   2c5b2:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2c5b4:	4785                	c.li	a5,1
   2c5b6:	00f60a63          	beq	a2,a5,2c5ca <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c5ba:	4789                	c.li	a5,2
   2c5bc:	0af60f63          	beq	a2,a5,2c67a <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xd2>
}
   2c5c0:	60e2                	c.ldsp	ra,24(sp)
   2c5c2:	6442                	c.ldsp	s0,16(sp)
   2c5c4:	64a2                	c.ldsp	s1,8(sp)
   2c5c6:	6105                	c.addi16sp	sp,32
   2c5c8:	8082                	c.jr	ra
   2c5ca:	4785                	c.li	a5,1
   2c5cc:	06f68b63          	beq	a3,a5,2c642 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x9a>
   2c5d0:	4789                	c.li	a5,2
   2c5d2:	fef697e3          	bne	a3,a5,2c5c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c5d6:	4188                	c.lw	a0,0(a1)
   2c5d8:	d99e90ef          	jal	ra,16370 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2c5dc:	c008                	c.sw	a0,0(s0)
   2c5de:	40c8                	c.lw	a0,4(s1)
   2c5e0:	d91e90ef          	jal	ra,16370 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2c5e4:	c048                	c.sw	a0,4(s0)
   2c5e6:	4488                	c.lw	a0,8(s1)
   2c5e8:	d89e90ef          	jal	ra,16370 <__bswapsi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c5ec:	1502                	c.slli	a0,0x20
   2c5ee:	9101                	c.srli	a0,0x20
   2c5f0:	e408                	c.sd	a0,8(s0)
   2c5f2:	44c8                	c.lw	a0,12(s1)
   2c5f4:	d7de90ef          	jal	ra,16370 <__bswapsi2@plt>
    addr = swizzle(o.addr, o.order, order);
   2c5f8:	1502                	c.slli	a0,0x20
   2c5fa:	9101                	c.srli	a0,0x20
   2c5fc:	e808                	c.sd	a0,16(s0)
   2c5fe:	4888                	c.lw	a0,16(s1)
   2c600:	d71e90ef          	jal	ra,16370 <__bswapsi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c604:	1502                	c.slli	a0,0x20
   2c606:	9101                	c.srli	a0,0x20
   2c608:	ec08                	c.sd	a0,24(s0)
   2c60a:	48c8                	c.lw	a0,20(s1)
   2c60c:	d65e90ef          	jal	ra,16370 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   2c610:	1502                	c.slli	a0,0x20
   2c612:	9101                	c.srli	a0,0x20
   2c614:	f008                	c.sd	a0,32(s0)
   2c616:	4c88                	c.lw	a0,24(s1)
   2c618:	d59e90ef          	jal	ra,16370 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c61c:	02a41423          	sh	a0,40(s0)
   2c620:	4cc8                	c.lw	a0,28(s1)
   2c622:	d4fe90ef          	jal	ra,16370 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   2c626:	d448                	c.sw	a0,44(s0)
   2c628:	5088                	c.lw	a0,32(s1)
   2c62a:	d47e90ef          	jal	ra,16370 <__bswapsi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   2c62e:	1502                	c.slli	a0,0x20
   2c630:	9101                	c.srli	a0,0x20
   2c632:	f808                	c.sd	a0,48(s0)
   2c634:	50c8                	c.lw	a0,36(s1)
   2c636:	d3be90ef          	jal	ra,16370 <__bswapsi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   2c63a:	1502                	c.slli	a0,0x20
   2c63c:	9101                	c.srli	a0,0x20
   2c63e:	fc08                	c.sd	a0,56(s0)
  }
   2c640:	b741                	c.j	2c5c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c642:	419c                	c.lw	a5,0(a1)
   2c644:	c11c                	c.sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   2c646:	41dc                	c.lw	a5,4(a1)
   2c648:	c15c                	c.sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c64a:	0085e783          	lwu	a5,8(a1)
   2c64e:	e51c                	c.sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   2c650:	00c5e783          	lwu	a5,12(a1)
   2c654:	e91c                	c.sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   2c656:	0105e783          	lwu	a5,16(a1)
   2c65a:	ed1c                	c.sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   2c65c:	0145e783          	lwu	a5,20(a1)
   2c660:	f11c                	c.sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c662:	4d9c                	c.lw	a5,24(a1)
   2c664:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   2c668:	4ddc                	c.lw	a5,28(a1)
   2c66a:	d55c                	c.sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   2c66c:	0205e783          	lwu	a5,32(a1)
   2c670:	f91c                	c.sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   2c672:	0245e783          	lwu	a5,36(a1)
   2c676:	fd1c                	c.sd	a5,56(a0)
  }
   2c678:	b7a1                	c.j	2c5c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c67a:	4785                	c.li	a5,1
   2c67c:	04f68f63          	beq	a3,a5,2c6da <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x132>
   2c680:	4789                	c.li	a5,2
   2c682:	f2f69fe3          	bne	a3,a5,2c5c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c686:	4188                	c.lw	a0,0(a1)
   2c688:	ce9e90ef          	jal	ra,16370 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2c68c:	c008                	c.sw	a0,0(s0)
   2c68e:	40c8                	c.lw	a0,4(s1)
   2c690:	ce1e90ef          	jal	ra,16370 <__bswapsi2@plt>
    type = swizzle(o.type, o.order, order);
   2c694:	c048                	c.sw	a0,4(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c696:	6488                	c.ld	a0,8(s1)
   2c698:	eb9e90ef          	jal	ra,16550 <__bswapdi2@plt>
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c69c:	e408                	c.sd	a0,8(s0)
   2c69e:	6888                	c.ld	a0,16(s1)
   2c6a0:	eb1e90ef          	jal	ra,16550 <__bswapdi2@plt>
    addr = swizzle(o.addr, o.order, order);
   2c6a4:	e808                	c.sd	a0,16(s0)
   2c6a6:	6c88                	c.ld	a0,24(s1)
   2c6a8:	ea9e90ef          	jal	ra,16550 <__bswapdi2@plt>
    offset = swizzle(o.offset, o.order, order);
   2c6ac:	ec08                	c.sd	a0,24(s0)
   2c6ae:	7088                	c.ld	a0,32(s1)
   2c6b0:	ea1e90ef          	jal	ra,16550 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   2c6b4:	f008                	c.sd	a0,32(s0)
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c6b6:	5488                	c.lw	a0,40(s1)
   2c6b8:	cb9e90ef          	jal	ra,16370 <__bswapsi2@plt>
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c6bc:	02a41423          	sh	a0,40(s0)
   2c6c0:	54c8                	c.lw	a0,44(s1)
   2c6c2:	cafe90ef          	jal	ra,16370 <__bswapsi2@plt>
    info = swizzle(o.info, o.order, order);
   2c6c6:	d448                	c.sw	a0,44(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c6c8:	7888                	c.ld	a0,48(s1)
   2c6ca:	e87e90ef          	jal	ra,16550 <__bswapdi2@plt>
    addralign = swizzle(o.addralign, o.order, order);
   2c6ce:	f808                	c.sd	a0,48(s0)
   2c6d0:	7c88                	c.ld	a0,56(s1)
   2c6d2:	e7fe90ef          	jal	ra,16550 <__bswapdi2@plt>
    entsize = swizzle(o.entsize, o.order, order);
   2c6d6:	fc08                	c.sd	a0,56(s0)
  }
   2c6d8:	b5e5                	c.j	2c5c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c6da:	419c                	c.lw	a5,0(a1)
   2c6dc:	c11c                	c.sw	a5,0(a0)
    type = swizzle(o.type, o.order, order);
   2c6de:	41dc                	c.lw	a5,4(a1)
   2c6e0:	c15c                	c.sw	a5,4(a0)
    flags = (decltype(flags))swizzle(o.flags, o.order, order);
   2c6e2:	659c                	c.ld	a5,8(a1)
   2c6e4:	e51c                	c.sd	a5,8(a0)
    addr = swizzle(o.addr, o.order, order);
   2c6e6:	699c                	c.ld	a5,16(a1)
   2c6e8:	e91c                	c.sd	a5,16(a0)
    offset = swizzle(o.offset, o.order, order);
   2c6ea:	6d9c                	c.ld	a5,24(a1)
   2c6ec:	ed1c                	c.sd	a5,24(a0)
    size = swizzle(o.size, o.order, order);
   2c6ee:	719c                	c.ld	a5,32(a1)
   2c6f0:	f11c                	c.sd	a5,32(a0)
    link = (decltype(link))swizzle((typename E::Word)o.link, o.order, order);
   2c6f2:	559c                	c.lw	a5,40(a1)
   2c6f4:	02f51423          	sh	a5,40(a0)
    info = swizzle(o.info, o.order, order);
   2c6f8:	55dc                	c.lw	a5,44(a1)
   2c6fa:	d55c                	c.sw	a5,44(a0)
    addralign = swizzle(o.addralign, o.order, order);
   2c6fc:	799c                	c.ld	a5,48(a1)
   2c6fe:	f91c                	c.sd	a5,48(a0)
    entsize = swizzle(o.entsize, o.order, order);
   2c700:	7d9c                	c.ld	a5,56(a1)
   2c702:	fd1c                	c.sd	a5,56(a0)
  }
   2c704:	bd75                	c.j	2c5c0 <void elf::canon_hdr<elf::Shdr>(elf::Shdr<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c706 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)>:
void canon_hdr(Hdr<Elf64, byte_order::native> *out, const void *data,
   2c706:	1101                	c.addi	sp,-32
   2c708:	ec06                	c.sdsp	ra,24(sp)
   2c70a:	e822                	c.sdsp	s0,16(sp)
   2c70c:	e426                	c.sdsp	s1,8(sp)
   2c70e:	842a                	c.mv	s0,a0
   2c710:	84ae                	c.mv	s1,a1
  switch (ei_class) {
   2c712:	4785                	c.li	a5,1
   2c714:	00f60a63          	beq	a2,a5,2c728 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x22>
   2c718:	4789                	c.li	a5,2
   2c71a:	08f60463          	beq	a2,a5,2c7a2 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x9c>
}
   2c71e:	60e2                	c.ldsp	ra,24(sp)
   2c720:	6442                	c.ldsp	s0,16(sp)
   2c722:	64a2                	c.ldsp	s1,8(sp)
   2c724:	6105                	c.addi16sp	sp,32
   2c726:	8082                	c.jr	ra
   2c728:	4785                	c.li	a5,1
   2c72a:	04f68763          	beq	a3,a5,2c778 <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x72>
   2c72e:	4789                	c.li	a5,2
   2c730:	fef697e3          	bne	a3,a5,2c71e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c734:	4188                	c.lw	a0,0(a1)
   2c736:	c3be90ef          	jal	ra,16370 <__bswapsi2@plt>
  shn shnxd;           // Section table index
  Elf64::Addr value;   // Symbol value (address)
  Elf64::Xword size;   // Size of object

  template <typename E2> void from(const E2 &o) {
    name = swizzle(o.name, o.order, order);
   2c73a:	c008                	c.sw	a0,0(s0)
   2c73c:	40c8                	c.lw	a0,4(s1)
   2c73e:	c33e90ef          	jal	ra,16370 <__bswapsi2@plt>
    value = swizzle(o.value, o.order, order);
   2c742:	1502                	c.slli	a0,0x20
   2c744:	9101                	c.srli	a0,0x20
   2c746:	e408                	c.sd	a0,8(s0)
   2c748:	4488                	c.lw	a0,8(s1)
   2c74a:	c27e90ef          	jal	ra,16370 <__bswapsi2@plt>
    size = swizzle(o.size, o.order, order);
   2c74e:	1502                	c.slli	a0,0x20
   2c750:	9101                	c.srli	a0,0x20
   2c752:	e808                	c.sd	a0,16(s0)
    info = o.info;
   2c754:	00c4c783          	lbu	a5,12(s1)
   2c758:	00f40223          	sb	a5,4(s0)
    other = o.other;
   2c75c:	00d4c783          	lbu	a5,13(s1)
   2c760:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c764:	00e4d783          	lhu	a5,14(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c768:	0087d71b          	srliw	a4,a5,0x8
   2c76c:	0087979b          	slliw	a5,a5,0x8
   2c770:	8fd9                	c.or	a5,a4
   2c772:	00f41323          	sh	a5,6(s0)
  }
   2c776:	b765                	c.j	2c71e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c778:	419c                	c.lw	a5,0(a1)
   2c77a:	c11c                	c.sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   2c77c:	0045e783          	lwu	a5,4(a1)
   2c780:	e51c                	c.sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   2c782:	0085e783          	lwu	a5,8(a1)
   2c786:	e91c                	c.sd	a5,16(a0)
    info = o.info;
   2c788:	00c5c783          	lbu	a5,12(a1)
   2c78c:	00f50223          	sb	a5,4(a0)
    other = o.other;
   2c790:	00d5c783          	lbu	a5,13(a1)
   2c794:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c798:	00e5d783          	lhu	a5,14(a1)
   2c79c:	00f51323          	sh	a5,6(a0)
  }
   2c7a0:	bfbd                	c.j	2c71e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
   2c7a2:	4785                	c.li	a5,1
   2c7a4:	04f68363          	beq	a3,a5,2c7ea <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0xe4>
   2c7a8:	4789                	c.li	a5,2
   2c7aa:	f6f69ae3          	bne	a3,a5,2c71e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    return (T)__builtin_bswap32((std::uint32_t)v);
   2c7ae:	4188                	c.lw	a0,0(a1)
   2c7b0:	bc1e90ef          	jal	ra,16370 <__bswapsi2@plt>
    name = swizzle(o.name, o.order, order);
   2c7b4:	c008                	c.sw	a0,0(s0)
    return (T)__builtin_bswap64((std::uint64_t)v);
   2c7b6:	6488                	c.ld	a0,8(s1)
   2c7b8:	d99e90ef          	jal	ra,16550 <__bswapdi2@plt>
    value = swizzle(o.value, o.order, order);
   2c7bc:	e408                	c.sd	a0,8(s0)
   2c7be:	6888                	c.ld	a0,16(s1)
   2c7c0:	d91e90ef          	jal	ra,16550 <__bswapdi2@plt>
    size = swizzle(o.size, o.order, order);
   2c7c4:	e808                	c.sd	a0,16(s0)
    info = o.info;
   2c7c6:	0044c783          	lbu	a5,4(s1)
   2c7ca:	00f40223          	sb	a5,4(s0)
    other = o.other;
   2c7ce:	0054c783          	lbu	a5,5(s1)
   2c7d2:	00f402a3          	sb	a5,5(s0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c7d6:	0064d783          	lhu	a5,6(s1)
    return (T)(((x & 0xFF) << 8) | (x >> 8));
   2c7da:	0087d71b          	srliw	a4,a5,0x8
   2c7de:	0087979b          	slliw	a5,a5,0x8
   2c7e2:	8fd9                	c.or	a5,a4
   2c7e4:	00f41323          	sh	a5,6(s0)
  }
   2c7e8:	bf1d                	c.j	2c71e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>
    name = swizzle(o.name, o.order, order);
   2c7ea:	419c                	c.lw	a5,0(a1)
   2c7ec:	c11c                	c.sw	a5,0(a0)
    value = swizzle(o.value, o.order, order);
   2c7ee:	659c                	c.ld	a5,8(a1)
   2c7f0:	e51c                	c.sd	a5,8(a0)
    size = swizzle(o.size, o.order, order);
   2c7f2:	699c                	c.ld	a5,16(a1)
   2c7f4:	e91c                	c.sd	a5,16(a0)
    info = o.info;
   2c7f6:	0045c783          	lbu	a5,4(a1)
   2c7fa:	00f50223          	sb	a5,4(a0)
    other = o.other;
   2c7fe:	0055c783          	lbu	a5,5(a1)
   2c802:	00f502a3          	sb	a5,5(a0)
    shnxd = swizzle(o.shnxd, o.order, order);
   2c806:	0065d783          	lhu	a5,6(a1)
   2c80a:	00f51323          	sh	a5,6(a0)
  }
   2c80e:	bf01                	c.j	2c71e <void elf::canon_hdr<elf::Sym>(elf::Sym<elf::Elf64, (elf::byte_order)0>*, void const*, elf::elfclass, elf::elfdata)+0x18>

000000000002c810 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)>:
      vector<_Tp, _Alloc>::
   2c810:	715d                	c.addi16sp	sp,-80
   2c812:	e486                	c.sdsp	ra,72(sp)
   2c814:	e0a2                	c.sdsp	s0,64(sp)
   2c816:	fc26                	c.sdsp	s1,56(sp)
   2c818:	f84a                	c.sdsp	s2,48(sp)
   2c81a:	f44e                	c.sdsp	s3,40(sp)
   2c81c:	f052                	c.sdsp	s4,32(sp)
   2c81e:	ec56                	c.sdsp	s5,24(sp)
   2c820:	e85a                	c.sdsp	s6,16(sp)
   2c822:	e45e                	c.sdsp	s7,8(sp)
   2c824:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2c826:	00853903          	ld	s2,8(a0)
   2c82a:	00053a03          	ld	s4,0(a0)
   2c82e:	414907b3          	sub	a5,s2,s4
   2c832:	8791                	c.srai	a5,0x4
	if (max_size() - size() < __n)
   2c834:	577d                	c.li	a4,-1
   2c836:	8315                	c.srli	a4,0x5
   2c838:	02e78763          	beq	a5,a4,2c866 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x56>
   2c83c:	8aaa                	c.mv	s5,a0
   2c83e:	8bae                	c.mv	s7,a1
   2c840:	84b2                	c.mv	s1,a2
   2c842:	842e                	c.mv	s0,a1
      return __a;
   2c844:	873e                	c.mv	a4,a5
      if (__a < __b)
   2c846:	03490663          	beq	s2,s4,2c872 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   2c84a:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c84c:	02f76763          	bltu	a4,a5,2c87a <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x6a>
   2c850:	8b3a                	c.mv	s6,a4
   2c852:	57fd                	c.li	a5,-1
   2c854:	8395                	c.srli	a5,0x5
   2c856:	00e7f363          	bgeu	a5,a4,2c85c <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x4c>
   2c85a:	8b3e                	c.mv	s6,a5
    { return __lhs.base() - __rhs.base(); }
   2c85c:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2c860:	4981                	c.li	s3,0
   2c862:	c715                	c.beqz	a4,2c88e <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x7e>
   2c864:	a005                	c.j	2c884 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x74>
	  __throw_length_error(__N(__s));
   2c866:	00001517          	auipc	a0,0x1
   2c86a:	9ea50513          	addi	a0,a0,-1558 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2c86e:	bd3e90ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2c872:	4705                	c.li	a4,1
   2c874:	bfd9                	c.j	2c84a <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x3a>
      _ForwardIterator __cur = __result;
   2c876:	86ce                	c.mv	a3,s3
   2c878:	a0a1                	c.j	2c8c0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xb0>
   2c87a:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c87e:	5b7d                	c.li	s6,-1
   2c880:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2c884:	004b1513          	slli	a0,s6,0x4
   2c888:	c99e90ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2c88c:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   2c88e:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c892:	6098                	c.ld	a4,0(s1)
   2c894:	e398                	c.sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2c896:	6498                	c.ld	a4,8(s1)
	__r._M_pi = _M_pi;
   2c898:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   2c89c:	e798                	c.sd	a4,8(a5)
	__r._M_ptr = nullptr;
   2c89e:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2c8a2:	fd440ae3          	beq	s0,s4,2c876 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0x66>
   2c8a6:	414b86b3          	sub	a3,s7,s4
   2c8aa:	96ce                	c.add	a3,s3
   2c8ac:	8752                	c.mv	a4,s4
      _ForwardIterator __cur = __result;
   2c8ae:	87ce                	c.mv	a5,s3
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c8b0:	6310                	c.ld	a2,0(a4)
   2c8b2:	e390                	c.sd	a2,0(a5)
	_M_pi = __tmp;
   2c8b4:	6710                	c.ld	a2,8(a4)
   2c8b6:	e790                	c.sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2c8b8:	0741                	c.addi	a4,16
   2c8ba:	07c1                	c.addi	a5,16
   2c8bc:	fed79ae3          	bne	a5,a3,2c8b0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xa0>
	      ++__new_finish;
   2c8c0:	01068493          	addi	s1,a3,16
   2c8c4:	01240e63          	beq	s0,s2,2c8e0 <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xd0>
   2c8c8:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   2c8cc:	87a6                	c.mv	a5,s1
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c8ce:	6018                	c.ld	a4,0(s0)
   2c8d0:	e398                	c.sd	a4,0(a5)
	_M_pi = __tmp;
   2c8d2:	6418                	c.ld	a4,8(s0)
   2c8d4:	e798                	c.sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2c8d6:	0441                	c.addi	s0,16
   2c8d8:	07c1                	c.addi	a5,16
   2c8da:	ff241ae3          	bne	s0,s2,2c8ce <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xbe>
   2c8de:	94de                	c.add	s1,s7
	if (__p)
   2c8e0:	000a0563          	beq	s4,zero,2c8ea <void std::vector<elf::segment, std::allocator<elf::segment> >::_M_realloc_insert<elf::segment>(__gnu_cxx::__normal_iterator<elf::segment*, std::vector<elf::segment, std::allocator<elf::segment> > >, elf::segment&&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c8e4:	8552                	c.mv	a0,s4
   2c8e6:	c2be90ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2c8ea:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2c8ee:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2c8f2:	0b12                	c.slli	s6,0x4
   2c8f4:	99da                	c.add	s3,s6
   2c8f6:	013ab823          	sd	s3,16(s5)
    }
   2c8fa:	60a6                	c.ldsp	ra,72(sp)
   2c8fc:	6406                	c.ldsp	s0,64(sp)
   2c8fe:	74e2                	c.ldsp	s1,56(sp)
   2c900:	7942                	c.ldsp	s2,48(sp)
   2c902:	79a2                	c.ldsp	s3,40(sp)
   2c904:	7a02                	c.ldsp	s4,32(sp)
   2c906:	6ae2                	c.ldsp	s5,24(sp)
   2c908:	6b42                	c.ldsp	s6,16(sp)
   2c90a:	6ba2                	c.ldsp	s7,8(sp)
   2c90c:	6c02                	c.ldsp	s8,0(sp)
   2c90e:	6161                	c.addi16sp	sp,80
   2c910:	8082                	c.jr	ra

000000000002c912 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)>:
      vector<_Tp, _Alloc>::
   2c912:	715d                	c.addi16sp	sp,-80
   2c914:	e486                	c.sdsp	ra,72(sp)
   2c916:	e0a2                	c.sdsp	s0,64(sp)
   2c918:	fc26                	c.sdsp	s1,56(sp)
   2c91a:	f84a                	c.sdsp	s2,48(sp)
   2c91c:	f44e                	c.sdsp	s3,40(sp)
   2c91e:	f052                	c.sdsp	s4,32(sp)
   2c920:	ec56                	c.sdsp	s5,24(sp)
   2c922:	e85a                	c.sdsp	s6,16(sp)
   2c924:	e45e                	c.sdsp	s7,8(sp)
   2c926:	e062                	c.sdsp	s8,0(sp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   2c928:	00853903          	ld	s2,8(a0)
   2c92c:	00053a03          	ld	s4,0(a0)
   2c930:	414907b3          	sub	a5,s2,s4
   2c934:	8791                	c.srai	a5,0x4
	if (max_size() - size() < __n)
   2c936:	577d                	c.li	a4,-1
   2c938:	8315                	c.srli	a4,0x5
   2c93a:	02e78763          	beq	a5,a4,2c968 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x56>
   2c93e:	8aaa                	c.mv	s5,a0
   2c940:	8bae                	c.mv	s7,a1
   2c942:	84b2                	c.mv	s1,a2
   2c944:	842e                	c.mv	s0,a1
      return __a;
   2c946:	873e                	c.mv	a4,a5
      if (__a < __b)
   2c948:	03490663          	beq	s2,s4,2c974 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x62>
	const size_type __len = size() + (std::max)(size(), __n);
   2c94c:	973e                	c.add	a4,a5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c94e:	02f76763          	bltu	a4,a5,2c97c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x6a>
   2c952:	8b3a                	c.mv	s6,a4
   2c954:	57fd                	c.li	a5,-1
   2c956:	8395                	c.srli	a5,0x5
   2c958:	00e7f363          	bgeu	a5,a4,2c95e <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x4c>
   2c95c:	8b3e                	c.mv	s6,a5
   2c95e:	414b8c33          	sub	s8,s7,s4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   2c962:	4981                	c.li	s3,0
   2c964:	c715                	c.beqz	a4,2c990 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x7e>
   2c966:	a005                	c.j	2c986 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x74>
	  __throw_length_error(__N(__s));
   2c968:	00001517          	auipc	a0,0x1
   2c96c:	8e850513          	addi	a0,a0,-1816 # 2d250 <std::_Sp_make_shared_tag::_S_ti()::__tag+0xf8>
   2c970:	ad1e90ef          	jal	ra,16440 <std::__throw_length_error(char const*)@plt>
	return __b;
   2c974:	4705                	c.li	a4,1
   2c976:	bfd9                	c.j	2c94c <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x3a>
      _ForwardIterator __cur = __result;
   2c978:	86ce                	c.mv	a3,s3
   2c97a:	a0a1                	c.j	2c9c2 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xb0>
   2c97c:	414b8c33          	sub	s8,s7,s4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   2c980:	5b7d                	c.li	s6,-1
   2c982:	005b5b13          	srli	s6,s6,0x5
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2c986:	004b1513          	slli	a0,s6,0x4
   2c98a:	b97e90ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2c98e:	89aa                	c.mv	s3,a0
	  _Alloc_traits::construct(this->_M_impl,
   2c990:	018987b3          	add	a5,s3,s8
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c994:	6098                	c.ld	a4,0(s1)
   2c996:	e398                	c.sd	a4,0(a5)
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   2c998:	6498                	c.ld	a4,8(s1)
	__r._M_pi = _M_pi;
   2c99a:	0004b423          	sd	zero,8(s1)
	_M_pi = __tmp;
   2c99e:	e798                	c.sd	a4,8(a5)
	__r._M_ptr = nullptr;
   2c9a0:	0004b023          	sd	zero,0(s1)
      for (; __first != __last; ++__first, (void)++__cur)
   2c9a4:	fd440ae3          	beq	s0,s4,2c978 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0x66>
   2c9a8:	414b86b3          	sub	a3,s7,s4
   2c9ac:	96ce                	c.add	a3,s3
   2c9ae:	8752                	c.mv	a4,s4
      _ForwardIterator __cur = __result;
   2c9b0:	87ce                	c.mv	a5,s3
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c9b2:	6310                	c.ld	a2,0(a4)
   2c9b4:	e390                	c.sd	a2,0(a5)
	_M_pi = __tmp;
   2c9b6:	6710                	c.ld	a2,8(a4)
   2c9b8:	e790                	c.sd	a2,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2c9ba:	0741                	c.addi	a4,16
   2c9bc:	07c1                	c.addi	a5,16
   2c9be:	fed79ae3          	bne	a5,a3,2c9b2 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xa0>
	      ++__new_finish;
   2c9c2:	01068493          	addi	s1,a3,16
   2c9c6:	01240e63          	beq	s0,s2,2c9e2 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xd0>
   2c9ca:	41790bb3          	sub	s7,s2,s7
      _ForwardIterator __cur = __result;
   2c9ce:	87a6                	c.mv	a5,s1
      : _M_ptr(__r._M_ptr), _M_refcount()
   2c9d0:	6018                	c.ld	a4,0(s0)
   2c9d2:	e398                	c.sd	a4,0(a5)
	_M_pi = __tmp;
   2c9d4:	6418                	c.ld	a4,8(s0)
   2c9d6:	e798                	c.sd	a4,8(a5)
      for (; __first != __last; ++__first, (void)++__cur)
   2c9d8:	0441                	c.addi	s0,16
   2c9da:	07c1                	c.addi	a5,16
   2c9dc:	ff241ae3          	bne	s0,s2,2c9d0 <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xbe>
   2c9e0:	94de                	c.add	s1,s7
	if (__p)
   2c9e2:	000a0563          	beq	s4,zero,2c9ec <void std::vector<elf::section, std::allocator<elf::section> >::_M_realloc_insert<elf::section>(__gnu_cxx::__normal_iterator<elf::section*, std::vector<elf::section, std::allocator<elf::section> > >, elf::section&&)+0xda>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2c9e6:	8552                	c.mv	a0,s4
   2c9e8:	b29e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      this->_M_impl._M_start = __new_start;
   2c9ec:	013ab023          	sd	s3,0(s5)
      this->_M_impl._M_finish = __new_finish;
   2c9f0:	009ab423          	sd	s1,8(s5)
      this->_M_impl._M_end_of_storage = __new_start + __len;
   2c9f4:	0b12                	c.slli	s6,0x4
   2c9f6:	99da                	c.add	s3,s6
   2c9f8:	013ab823          	sd	s3,16(s5)
    }
   2c9fc:	60a6                	c.ldsp	ra,72(sp)
   2c9fe:	6406                	c.ldsp	s0,64(sp)
   2ca00:	74e2                	c.ldsp	s1,56(sp)
   2ca02:	7942                	c.ldsp	s2,48(sp)
   2ca04:	79a2                	c.ldsp	s3,40(sp)
   2ca06:	7a02                	c.ldsp	s4,32(sp)
   2ca08:	6ae2                	c.ldsp	s5,24(sp)
   2ca0a:	6b42                	c.ldsp	s6,16(sp)
   2ca0c:	6ba2                	c.ldsp	s7,8(sp)
   2ca0e:	6c02                	c.ldsp	s8,0(sp)
   2ca10:	6161                	c.addi16sp	sp,80
   2ca12:	8082                	c.jr	ra

000000000002ca14 <elf::create_mmap_loader(int)>:
      throw range_error("offset exceeds file size");
    return (const char *)base + offset;
  }
};

std::shared_ptr<loader> create_mmap_loader(int fd) {
   2ca14:	715d                	c.addi16sp	sp,-80
   2ca16:	e486                	c.sdsp	ra,72(sp)
   2ca18:	e0a2                	c.sdsp	s0,64(sp)
   2ca1a:	fc26                	c.sdsp	s1,56(sp)
   2ca1c:	f84a                	c.sdsp	s2,48(sp)
   2ca1e:	f44e                	c.sdsp	s3,40(sp)
   2ca20:	892a                	c.mv	s2,a0
   2ca22:	84ae                	c.mv	s1,a1
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   2ca24:	05000513          	addi	a0,zero,80
   2ca28:	af9e90ef          	jal	ra,16520 <operator new(unsigned long)@plt>
   2ca2c:	842a                	c.mv	s0,a0
   2ca2e:	00052423          	sw	zero,8(a0)
   2ca32:	00052623          	sw	zero,12(a0)
   2ca36:	00052823          	sw	zero,16(a0)
   2ca3a:	00052a23          	sw	zero,20(a0)
   2ca3e:	00052c23          	sw	zero,24(a0)
   2ca42:	00052e23          	sw	zero,28(a0)
   2ca46:	02053023          	sd	zero,32(a0)
   2ca4a:	02053423          	sd	zero,40(a0)
      : _M_use_count(1), _M_weak_count(1) { }
   2ca4e:	4785                	c.li	a5,1
   2ca50:	d91c                	c.sw	a5,48(a0)
   2ca52:	d95c                	c.sw	a5,52(a0)
	: _M_impl(__a)
   2ca54:	0000d797          	auipc	a5,0xd
   2ca58:	a5c7b783          	ld	a5,-1444(a5) # 394b0 <vtable for std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>@@Base+0x6f8>
   2ca5c:	07c1                	c.addi	a5,16
   2ca5e:	e11c                	c.sd	a5,0(a0)
   2ca60:	03850993          	addi	s3,a0,56
  mmap_loader(int fd) {
   2ca64:	0000d797          	auipc	a5,0xd
   2ca68:	9fc7b783          	ld	a5,-1540(a5) # 39460 <vtable for elf::mmap_loader@@Base+0x6d0>
   2ca6c:	07c1                	c.addi	a5,16
   2ca6e:	fd1c                	c.sd	a5,56(a0)
    off_t end = lseek(fd, 0, SEEK_END);
   2ca70:	4609                	c.li	a2,2
   2ca72:	4581                	c.li	a1,0
   2ca74:	8526                	c.mv	a0,s1
   2ca76:	bfbe90ef          	jal	ra,16670 <lseek@plt>
    if (end == (off_t)-1)
   2ca7a:	57fd                	c.li	a5,-1
   2ca7c:	02f50363          	beq	a0,a5,2caa2 <elf::create_mmap_loader(int)+0x8e>
   2ca80:	85aa                	c.mv	a1,a0
    lim = end;
   2ca82:	e428                	c.sd	a0,72(s0)
    base = mmap(nullptr, lim, PROT_READ, MAP_SHARED, fd, 0);
   2ca84:	4781                	c.li	a5,0
   2ca86:	8726                	c.mv	a4,s1
   2ca88:	4685                	c.li	a3,1
   2ca8a:	4605                	c.li	a2,1
   2ca8c:	4501                	c.li	a0,0
   2ca8e:	a13e90ef          	jal	ra,164a0 <mmap@plt>
   2ca92:	e028                	c.sd	a0,64(s0)
    if (base == MAP_FAILED)
   2ca94:	57fd                	c.li	a5,-1
   2ca96:	04f50a63          	beq	a0,a5,2caea <elf::create_mmap_loader(int)+0xd6>
    close(fd);
   2ca9a:	8526                	c.mv	a0,s1
   2ca9c:	d35e90ef          	jal	ra,167d0 <close@plt>
   2caa0:	a075                	c.j	2cb4c <elf::create_mmap_loader(int)+0x138>
      throw system_error(errno, system_category(), "finding file length");
   2caa2:	02000513          	addi	a0,zero,32
   2caa6:	97be90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2caaa:	892a                	c.mv	s2,a0
   2caac:	d15e90ef          	jal	ra,167c0 <__errno_location@plt>
   2cab0:	4104                	c.lw	s1,0(a0)
   2cab2:	9afe90ef          	jal	ra,16460 <std::_V2::system_category()@plt>
   2cab6:	862a                	c.mv	a2,a0
  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }
   2cab8:	c826                	c.swsp	s1,16(sp)

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }
   2caba:	00004697          	auipc	a3,0x4
   2cabe:	4e668693          	addi	a3,a3,1254 # 30fa0 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x80>
   2cac2:	65c2                	c.ldsp	a1,16(sp)
   2cac4:	854a                	c.mv	a0,s2
   2cac6:	0000d317          	auipc	t1,0xd
   2caca:	96a33303          	ld	t1,-1686(t1) # 39430 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc7b0>
   2cace:	9302                	c.jalr	t1
   2cad0:	0000d617          	auipc	a2,0xd
   2cad4:	95063603          	ld	a2,-1712(a2) # 39420 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   2cad8:	0000d597          	auipc	a1,0xd
   2cadc:	8185b583          	ld	a1,-2024(a1) # 392f0 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   2cae0:	854a                	c.mv	a0,s2
   2cae2:	bdfe90ef          	jal	ra,166c0 <__cxa_throw@plt>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   2cae6:	84aa                	c.mv	s1,a0
   2cae8:	a0b9                	c.j	2cb36 <elf::create_mmap_loader(int)+0x122>
      throw system_error(errno, system_category(), "mmap'ing file");
   2caea:	02000513          	addi	a0,zero,32
   2caee:	933e90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2caf2:	892a                	c.mv	s2,a0
   2caf4:	ccde90ef          	jal	ra,167c0 <__errno_location@plt>
   2caf8:	4104                	c.lw	s1,0(a0)
   2cafa:	967e90ef          	jal	ra,16460 <std::_V2::system_category()@plt>
   2cafe:	862a                	c.mv	a2,a0
    : _M_value(__v), _M_cat(&__cat) { }
   2cb00:	c026                	c.swsp	s1,0(sp)
    : system_error(error_code(__v, __ecat), __what) { }
   2cb02:	00004697          	auipc	a3,0x4
   2cb06:	4b668693          	addi	a3,a3,1206 # 30fb8 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x98>
   2cb0a:	6582                	c.ldsp	a1,0(sp)
   2cb0c:	854a                	c.mv	a0,s2
   2cb0e:	0000d317          	auipc	t1,0xd
   2cb12:	92233303          	ld	t1,-1758(t1) # 39430 <std::system_error::system_error(std::error_code, char const*)@@Base+0xc7b0>
   2cb16:	9302                	c.jalr	t1
   2cb18:	0000d617          	auipc	a2,0xd
   2cb1c:	90863603          	ld	a2,-1784(a2) # 39420 <std::system_error::~system_error()@GLIBCXX_3.4.11>
   2cb20:	0000c597          	auipc	a1,0xc
   2cb24:	7d05b583          	ld	a1,2000(a1) # 392f0 <typeinfo for std::system_error@GLIBCXX_3.4.11>
   2cb28:	854a                	c.mv	a0,s2
   2cb2a:	b97e90ef          	jal	ra,166c0 <__cxa_throw@plt>
      throw system_error(errno, system_category(), "finding file length");
   2cb2e:	84aa                	c.mv	s1,a0
   2cb30:	854a                	c.mv	a0,s2
   2cb32:	99fe90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2cb36:	8522                	c.mv	a0,s0
   2cb38:	9d9e90ef          	jal	ra,16510 <operator delete(void*)@plt>
   2cb3c:	8526                	c.mv	a0,s1
   2cb3e:	bb3e90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      throw system_error(errno, system_category(), "mmap'ing file");
   2cb42:	84aa                	c.mv	s1,a0
   2cb44:	854a                	c.mv	a0,s2
   2cb46:	98be90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2cb4a:	b7f5                	c.j	2cb36 <elf::create_mmap_loader(int)+0x122>
	: _M_ptr(__r._M_ptr), _M_refcount()
   2cb4c:	01393023          	sd	s3,0(s2)
	_M_pi = __tmp;
   2cb50:	00893423          	sd	s0,8(s2)
  return make_shared<mmap_loader>(fd);
}
   2cb54:	854a                	c.mv	a0,s2
   2cb56:	60a6                	c.ldsp	ra,72(sp)
   2cb58:	6406                	c.ldsp	s0,64(sp)
   2cb5a:	74e2                	c.ldsp	s1,56(sp)
   2cb5c:	7942                	c.ldsp	s2,48(sp)
   2cb5e:	79a2                	c.ldsp	s3,40(sp)
   2cb60:	6161                	c.addi16sp	sp,80
   2cb62:	8082                	c.jr	ra

000000000002cb64 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2cb64:	8082                	c.jr	ra

000000000002cb66 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_dispose()>:
      _M_dispose() noexcept
   2cb66:	1141                	c.addi	sp,-16
   2cb68:	e406                	c.sdsp	ra,8(sp)
      __pointer->~_Tp();
   2cb6a:	7d1c                	c.ld	a5,56(a0)
   2cb6c:	639c                	c.ld	a5,0(a5)
   2cb6e:	03850513          	addi	a0,a0,56
   2cb72:	9782                	c.jalr	a5
      }
   2cb74:	60a2                	c.ldsp	ra,8(sp)
   2cb76:	0141                	c.addi	sp,16
   2cb78:	8082                	c.jr	ra

000000000002cb7a <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
   2cb7a:	1141                	c.addi	sp,-16
   2cb7c:	e406                	c.sdsp	ra,8(sp)
   2cb7e:	e022                	c.sdsp	s0,0(sp)
   2cb80:	03850413          	addi	s0,a0,56
	    ||
   2cb84:	0000d797          	auipc	a5,0xd
   2cb88:	9b47b783          	ld	a5,-1612(a5) # 39538 <std::_Sp_make_shared_tag::_S_ti()::__tag@@Base+0xc3e0>
   2cb8c:	02f58a63          	beq	a1,a5,2cbc0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    if (__name == __arg.__name)
   2cb90:	6588                	c.ld	a0,8(a1)
   2cb92:	0000d797          	auipc	a5,0xd
   2cb96:	87e7b783          	ld	a5,-1922(a5) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2cb9a:	02f50363          	beq	a0,a5,2cbc0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>
    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;
   2cb9e:	00054703          	lbu	a4,0(a0)
   2cba2:	02a00793          	addi	a5,zero,42
   2cba6:	02f70263          	beq	a4,a5,2cbca <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x50>
   2cbaa:	0000d597          	auipc	a1,0xd
   2cbae:	8665b583          	ld	a1,-1946(a1) # 39410 <typeinfo name for std::_Sp_make_shared_tag@@Base+0xc508>
   2cbb2:	faee90ef          	jal	ra,16360 <strcmp@plt>
	return nullptr;
   2cbb6:	00153513          	sltiu	a0,a0,1
   2cbba:	40a00533          	sub	a0,zero,a0
   2cbbe:	8c69                	c.and	s0,a0
      }
   2cbc0:	8522                	c.mv	a0,s0
   2cbc2:	60a2                	c.ldsp	ra,8(sp)
   2cbc4:	6402                	c.ldsp	s0,0(sp)
   2cbc6:	0141                	c.addi	sp,16
   2cbc8:	8082                	c.jr	ra
	return nullptr;
   2cbca:	4401                	c.li	s0,0
   2cbcc:	bfd5                	c.j	2cbc0 <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_get_deleter(std::type_info const&)+0x46>

000000000002cbce <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::~_Sp_counted_ptr_inplace()>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   2cbce:	1141                	c.addi	sp,-16
   2cbd0:	e406                	c.sdsp	ra,8(sp)
   2cbd2:	93fe90ef          	jal	ra,16510 <operator delete(void*)@plt>
   2cbd6:	60a2                	c.ldsp	ra,8(sp)
   2cbd8:	0141                	c.addi	sp,16
   2cbda:	8082                	c.jr	ra

000000000002cbdc <std::_Sp_counted_ptr_inplace<elf::mmap_loader, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>::_M_destroy()>:
      _M_destroy() noexcept
   2cbdc:	1141                	c.addi	sp,-16
   2cbde:	e406                	c.sdsp	ra,8(sp)
   2cbe0:	931e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      }
   2cbe4:	60a2                	c.ldsp	ra,8(sp)
   2cbe6:	0141                	c.addi	sp,16
   2cbe8:	8082                	c.jr	ra

000000000002cbea <elf::mmap_loader::load(long, unsigned long)>:
    if (offset + size > lim)
   2cbea:	962e                	c.add	a2,a1
   2cbec:	691c                	c.ld	a5,16(a0)
   2cbee:	00c7e563          	bltu	a5,a2,2cbf8 <elf::mmap_loader::load(long, unsigned long)+0xe>
    return (const char *)base + offset;
   2cbf2:	6508                	c.ld	a0,8(a0)
   2cbf4:	952e                	c.add	a0,a1
  }
   2cbf6:	8082                	c.jr	ra
  const void *load(off_t offset, size_t size) {
   2cbf8:	1101                	c.addi	sp,-32
   2cbfa:	ec06                	c.sdsp	ra,24(sp)
   2cbfc:	e822                	c.sdsp	s0,16(sp)
   2cbfe:	e426                	c.sdsp	s1,8(sp)
      throw range_error("offset exceeds file size");
   2cc00:	4541                	c.li	a0,16
   2cc02:	81fe90ef          	jal	ra,16420 <__cxa_allocate_exception@plt>
   2cc06:	84aa                	c.mv	s1,a0
   2cc08:	00004597          	auipc	a1,0x4
   2cc0c:	37058593          	addi	a1,a1,880 # 30f78 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x58>
   2cc10:	ac1e90ef          	jal	ra,166d0 <std::range_error::range_error(char const*)@plt>
   2cc14:	0000c617          	auipc	a2,0xc
   2cc18:	7cc63603          	ld	a2,1996(a2) # 393e0 <std::range_error::~range_error()@GLIBCXX_3.4>
   2cc1c:	0000d597          	auipc	a1,0xd
   2cc20:	9345b583          	ld	a1,-1740(a1) # 39550 <typeinfo for std::range_error@GLIBCXX_3.4>
   2cc24:	8526                	c.mv	a0,s1
   2cc26:	a9be90ef          	jal	ra,166c0 <__cxa_throw@plt>
   2cc2a:	842a                	c.mv	s0,a0
   2cc2c:	8526                	c.mv	a0,s1
   2cc2e:	8a3e90ef          	jal	ra,164d0 <__cxa_free_exception@plt>
   2cc32:	8522                	c.mv	a0,s0
   2cc34:	abde90ef          	jal	ra,166f0 <_Unwind_Resume@plt>

000000000002cc38 <elf::mmap_loader::~mmap_loader()>:
  ~mmap_loader() { munmap(base, lim); }
   2cc38:	1141                	c.addi	sp,-16
   2cc3a:	e406                	c.sdsp	ra,8(sp)
   2cc3c:	0000d797          	auipc	a5,0xd
   2cc40:	8247b783          	ld	a5,-2012(a5) # 39460 <vtable for elf::mmap_loader@@Base+0x6d0>
   2cc44:	07c1                	c.addi	a5,16
   2cc46:	e11c                	c.sd	a5,0(a0)
   2cc48:	690c                	c.ld	a1,16(a0)
   2cc4a:	6508                	c.ld	a0,8(a0)
   2cc4c:	895e90ef          	jal	ra,164e0 <munmap@plt>
   2cc50:	60a2                	c.ldsp	ra,8(sp)
   2cc52:	0141                	c.addi	sp,16
   2cc54:	8082                	c.jr	ra

000000000002cc56 <elf::mmap_loader::~mmap_loader()>:
   2cc56:	1141                	c.addi	sp,-16
   2cc58:	e406                	c.sdsp	ra,8(sp)
   2cc5a:	e022                	c.sdsp	s0,0(sp)
   2cc5c:	842a                	c.mv	s0,a0
   2cc5e:	0000d797          	auipc	a5,0xd
   2cc62:	8027b783          	ld	a5,-2046(a5) # 39460 <vtable for elf::mmap_loader@@Base+0x6d0>
   2cc66:	07c1                	c.addi	a5,16
   2cc68:	e11c                	c.sd	a5,0(a0)
   2cc6a:	690c                	c.ld	a1,16(a0)
   2cc6c:	6508                	c.ld	a0,8(a0)
   2cc6e:	873e90ef          	jal	ra,164e0 <munmap@plt>
   2cc72:	8522                	c.mv	a0,s0
   2cc74:	89de90ef          	jal	ra,16510 <operator delete(void*)@plt>
   2cc78:	60a2                	c.ldsp	ra,8(sp)
   2cc7a:	6402                	c.ldsp	s0,0(sp)
   2cc7c:	0141                	c.addi	sp,16
   2cc7e:	8082                	c.jr	ra

000000000002cc80 <std::system_error::system_error(std::error_code, char const*)>:
    system_error(error_code __ec, const char* __what)
   2cc80:	7135                	c.addi16sp	sp,-160
   2cc82:	ed06                	c.sdsp	ra,152(sp)
   2cc84:	e922                	c.sdsp	s0,144(sp)
   2cc86:	e526                	c.sdsp	s1,136(sp)
   2cc88:	e14a                	c.sdsp	s2,128(sp)
   2cc8a:	fcce                	c.sdsp	s3,120(sp)
   2cc8c:	84aa                	c.mv	s1,a0
   2cc8e:	872e                	c.mv	a4,a1
   2cc90:	e02e                	c.sdsp	a1,0(sp)
   2cc92:	e432                	c.sdsp	a2,8(sp)
   2cc94:	8936                	c.mv	s2,a3
    category() const noexcept { return *_M_cat; }
   2cc96:	85b2                	c.mv	a1,a2
    { return category().message(value()); }
   2cc98:	621c                	c.ld	a5,0(a2)
   2cc9a:	739c                	c.ld	a5,32(a5)
   2cc9c:	0007061b          	addiw	a2,a4,0
   2cca0:	0880                	c.addi4spn	s0,sp,80
   2cca2:	8522                	c.mv	a0,s0
   2cca4:	9782                	c.jalr	a5
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2cca6:	4709                	c.li	a4,2
   2cca8:	00004697          	auipc	a3,0x4
   2ccac:	2f068693          	addi	a3,a3,752 # 30f98 <typeinfo name for std::_Sp_counted_ptr_inplace<elf::symtab::impl, std::allocator<void>, (__gnu_cxx::_Lock_policy)1>+0x78>
   2ccb0:	4601                	c.li	a2,0
   2ccb2:	4581                	c.li	a1,0
   2ccb4:	8522                	c.mv	a0,s0
   2ccb6:	9abe90ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ccba:	842a                	c.mv	s0,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2ccbc:	009c                	c.addi4spn	a5,sp,64
   2ccbe:	f83e                	c.sdsp	a5,48(sp)
      { return _M_dataplus._M_p; }
   2ccc0:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2ccc2:	01050993          	addi	s3,a0,16
	if (__str._M_is_local())
   2ccc6:	03378863          	beq	a5,s3,2ccf6 <std::system_error::system_error(std::error_code, char const*)+0x76>
      { _M_dataplus._M_p = __p; }
   2ccca:	f83e                	c.sdsp	a5,48(sp)
      { _M_allocated_capacity = __capacity; }
   2cccc:	691c                	c.ld	a5,16(a0)
   2ccce:	e0be                	c.sdsp	a5,64(sp)
      { _M_string_length = __length; }
   2ccd0:	641c                	c.ld	a5,8(s0)
   2ccd2:	fc3e                	c.sdsp	a5,56(sp)
      { _M_dataplus._M_p = __p; }
   2ccd4:	01343023          	sd	s3,0(s0)
      { _M_string_length = __length; }
   2ccd8:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2ccdc:	00040823          	sb	zero,16(s0)
	return __builtin_strlen(__s);
   2cce0:	854a                	c.mv	a0,s2
   2cce2:	f2ee90ef          	jal	ra,16410 <strlen@plt>
   2cce6:	872a                	c.mv	a4,a0
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2cce8:	86ca                	c.mv	a3,s2
   2ccea:	4601                	c.li	a2,0
   2ccec:	4581                	c.li	a1,0
   2ccee:	1808                	c.addi4spn	a0,sp,48
   2ccf0:	971e90ef          	jal	ra,16660 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)@plt>
   2ccf4:	a809                	c.j	2cd06 <std::system_error::system_error(std::error_code, char const*)+0x86>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2ccf6:	6510                	c.ld	a2,8(a0)
   2ccf8:	0605                	c.addi	a2,1
	if (__n == 0)
   2ccfa:	da79                	c.beqz	a2,2ccd0 <std::system_error::system_error(std::error_code, char const*)+0x50>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2ccfc:	85ce                	c.mv	a1,s3
   2ccfe:	0088                	c.addi4spn	a0,sp,64
   2cd00:	8b1e90ef          	jal	ra,165b0 <memcpy@plt>
   2cd04:	b7f1                	c.j	2ccd0 <std::system_error::system_error(std::error_code, char const*)+0x50>
	return _M_replace(_M_check(__pos, "basic_string::replace"),
   2cd06:	842a                	c.mv	s0,a0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   2cd08:	101c                	c.addi4spn	a5,sp,32
   2cd0a:	e83e                	c.sdsp	a5,16(sp)
      { return _M_dataplus._M_p; }
   2cd0c:	611c                	c.ld	a5,0(a0)
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
   2cd0e:	01050913          	addi	s2,a0,16
	if (__str._M_is_local())
   2cd12:	03278263          	beq	a5,s2,2cd36 <std::system_error::system_error(std::error_code, char const*)+0xb6>
      { _M_dataplus._M_p = __p; }
   2cd16:	e83e                	c.sdsp	a5,16(sp)
      { _M_allocated_capacity = __capacity; }
   2cd18:	691c                	c.ld	a5,16(a0)
   2cd1a:	f03e                	c.sdsp	a5,32(sp)
      { _M_string_length = __length; }
   2cd1c:	641c                	c.ld	a5,8(s0)
   2cd1e:	ec3e                	c.sdsp	a5,24(sp)
      { _M_dataplus._M_p = __p; }
   2cd20:	01243023          	sd	s2,0(s0)
      { _M_string_length = __length; }
   2cd24:	00043423          	sd	zero,8(s0)
	__c1 = __c2;
   2cd28:	00040823          	sb	zero,16(s0)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }
   2cd2c:	080c                	c.addi4spn	a1,sp,16
   2cd2e:	8526                	c.mv	a0,s1
   2cd30:	871e90ef          	jal	ra,165a0 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
   2cd34:	a809                	c.j	2cd46 <std::system_error::system_error(std::error_code, char const*)+0xc6>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
   2cd36:	6510                	c.ld	a2,8(a0)
   2cd38:	0605                	c.addi	a2,1
	if (__n == 0)
   2cd3a:	d26d                	c.beqz	a2,2cd1c <std::system_error::system_error(std::error_code, char const*)+0x9c>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
   2cd3c:	85ca                	c.mv	a1,s2
   2cd3e:	1008                	c.addi4spn	a0,sp,32
   2cd40:	871e90ef          	jal	ra,165b0 <memcpy@plt>
   2cd44:	bfe1                	c.j	2cd1c <std::system_error::system_error(std::error_code, char const*)+0x9c>
      { return _M_dataplus._M_p; }
   2cd46:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2cd48:	101c                	c.addi4spn	a5,sp,32
   2cd4a:	00f50463          	beq	a0,a5,2cd52 <std::system_error::system_error(std::error_code, char const*)+0xd2>
   2cd4e:	fc2e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cd52:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2cd54:	009c                	c.addi4spn	a5,sp,64
   2cd56:	00f50463          	beq	a0,a5,2cd5e <std::system_error::system_error(std::error_code, char const*)+0xde>
   2cd5a:	fb6e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cd5e:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   2cd60:	109c                	c.addi4spn	a5,sp,96
   2cd62:	00f50463          	beq	a0,a5,2cd6a <std::system_error::system_error(std::error_code, char const*)+0xea>
   2cd66:	faae90ef          	jal	ra,16510 <operator delete(void*)@plt>
   2cd6a:	0000d797          	auipc	a5,0xd
   2cd6e:	81e7b783          	ld	a5,-2018(a5) # 39588 <vtable for std::system_error@GLIBCXX_3.4.11>
   2cd72:	07c1                	c.addi	a5,16
   2cd74:	e09c                	c.sd	a5,0(s1)
   2cd76:	6782                	c.ldsp	a5,0(sp)
   2cd78:	e89c                	c.sd	a5,16(s1)
   2cd7a:	67a2                	c.ldsp	a5,8(sp)
   2cd7c:	ec9c                	c.sd	a5,24(s1)
   2cd7e:	60ea                	c.ldsp	ra,152(sp)
   2cd80:	644a                	c.ldsp	s0,144(sp)
   2cd82:	64aa                	c.ldsp	s1,136(sp)
   2cd84:	690a                	c.ldsp	s2,128(sp)
   2cd86:	79e6                	c.ldsp	s3,120(sp)
   2cd88:	610d                	c.addi16sp	sp,160
   2cd8a:	8082                	c.jr	ra
      { return _M_dataplus._M_p; }
   2cd8c:	842a                	c.mv	s0,a0
   2cd8e:	6542                	c.ldsp	a0,16(sp)
	if (!_M_is_local())
   2cd90:	101c                	c.addi4spn	a5,sp,32
   2cd92:	00f50463          	beq	a0,a5,2cd9a <std::system_error::system_error(std::error_code, char const*)+0x11a>
   2cd96:	f7ae90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cd9a:	7542                	c.ldsp	a0,48(sp)
	if (!_M_is_local())
   2cd9c:	009c                	c.addi4spn	a5,sp,64
   2cd9e:	00f50463          	beq	a0,a5,2cda6 <std::system_error::system_error(std::error_code, char const*)+0x126>
   2cda2:	f6ee90ef          	jal	ra,16510 <operator delete(void*)@plt>
      { return _M_dataplus._M_p; }
   2cda6:	6546                	c.ldsp	a0,80(sp)
	if (!_M_is_local())
   2cda8:	109c                	c.addi4spn	a5,sp,96
   2cdaa:	00f50463          	beq	a0,a5,2cdb2 <std::system_error::system_error(std::error_code, char const*)+0x132>
   2cdae:	f62e90ef          	jal	ra,16510 <operator delete(void*)@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   2cdb2:	8522                	c.mv	a0,s0
   2cdb4:	93de90ef          	jal	ra,166f0 <_Unwind_Resume@plt>
      { return _M_dataplus._M_p; }
   2cdb8:	842a                	c.mv	s0,a0
   2cdba:	b7c5                	c.j	2cd9a <std::system_error::system_error(std::error_code, char const*)+0x11a>
   2cdbc:	842a                	c.mv	s0,a0
   2cdbe:	b7e5                	c.j	2cda6 <std::system_error::system_error(std::error_code, char const*)+0x126>

000000000002cdc0 <__libc_csu_init>:
   the libc.a module in that it doesn't call the preinit array.  */


void
__libc_csu_init (int argc, char **argv, char **envp)
{
   2cdc0:	7139                	c.addi16sp	sp,-64
   2cdc2:	f822                	c.sdsp	s0,48(sp)
   2cdc4:	f04a                	c.sdsp	s2,32(sp)

#if ELF_INITFINI
  _init ();
#endif

  const size_t size = __init_array_end - __init_array_start;
   2cdc6:	0000c797          	auipc	a5,0xc
   2cdca:	92278793          	addi	a5,a5,-1758 # 386e8 <__do_global_dtors_aux_fini_array_entry>
   2cdce:	0000c417          	auipc	s0,0xc
   2cdd2:	90a40413          	addi	s0,s0,-1782 # 386d8 <__frame_dummy_init_array_entry>
{
   2cdd6:	fc06                	c.sdsp	ra,56(sp)
   2cdd8:	f426                	c.sdsp	s1,40(sp)
   2cdda:	ec4e                	c.sdsp	s3,24(sp)
   2cddc:	e852                	c.sdsp	s4,16(sp)
   2cdde:	e456                	c.sdsp	s5,8(sp)
  const size_t size = __init_array_end - __init_array_start;
   2cde0:	40878933          	sub	s2,a5,s0
  for (size_t i = 0; i < size; i++)
   2cde4:	02878163          	beq	a5,s0,2ce06 <__libc_csu_init+0x46>
   2cde8:	89aa                	c.mv	s3,a0
   2cdea:	8a2e                	c.mv	s4,a1
   2cdec:	8ab2                	c.mv	s5,a2
   2cdee:	40395913          	srai	s2,s2,0x3
   2cdf2:	4481                	c.li	s1,0
      (*__init_array_start [i]) (argc, argv, envp);
   2cdf4:	601c                	c.ld	a5,0(s0)
   2cdf6:	8656                	c.mv	a2,s5
   2cdf8:	85d2                	c.mv	a1,s4
   2cdfa:	854e                	c.mv	a0,s3
  for (size_t i = 0; i < size; i++)
   2cdfc:	0485                	c.addi	s1,1
      (*__init_array_start [i]) (argc, argv, envp);
   2cdfe:	9782                	c.jalr	a5
  for (size_t i = 0; i < size; i++)
   2ce00:	0421                	c.addi	s0,8
   2ce02:	ff24e9e3          	bltu	s1,s2,2cdf4 <__libc_csu_init+0x34>
}
   2ce06:	70e2                	c.ldsp	ra,56(sp)
   2ce08:	7442                	c.ldsp	s0,48(sp)
   2ce0a:	74a2                	c.ldsp	s1,40(sp)
   2ce0c:	7902                	c.ldsp	s2,32(sp)
   2ce0e:	69e2                	c.ldsp	s3,24(sp)
   2ce10:	6a42                	c.ldsp	s4,16(sp)
   2ce12:	6aa2                	c.ldsp	s5,8(sp)
   2ce14:	6121                	c.addi16sp	sp,64
   2ce16:	8082                	c.jr	ra

000000000002ce18 <__libc_csu_fini>:

# if ELF_INITFINI
  _fini ();
# endif
#endif
}
   2ce18:	8082                	c.jr	ra
